// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Termination settings enable your SIP hosts to make outbound calls using your Amazon Chime Voice Connector.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct Termination {
    /// <p>The limit on calls per second. Max value based on account service quota. Default value of 1.</p>
    pub cps_limit: ::std::option::Option<i32>,
    /// <p>The default caller ID phone number.</p>
    pub default_phone_number: ::std::option::Option<::std::string::String>,
    /// <p>The countries to which calls are allowed, in ISO 3166-1 alpha-2 format. Required.</p>
    pub calling_regions: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The IP addresses allowed to make calls, in CIDR format. Required.</p>
    pub cidr_allowed_list: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>When termination settings are disabled, outbound calls can not be made.</p>
    pub disabled: ::std::option::Option<bool>,
}
impl Termination {
    /// <p>The limit on calls per second. Max value based on account service quota. Default value of 1.</p>
    pub fn cps_limit(&self) -> ::std::option::Option<i32> {
        self.cps_limit
    }
    /// <p>The default caller ID phone number.</p>
    pub fn default_phone_number(&self) -> ::std::option::Option<&str> {
        self.default_phone_number.as_deref()
    }
    /// <p>The countries to which calls are allowed, in ISO 3166-1 alpha-2 format. Required.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.calling_regions.is_none()`.
    pub fn calling_regions(&self) -> &[::std::string::String] {
        self.calling_regions.as_deref().unwrap_or_default()
    }
    /// <p>The IP addresses allowed to make calls, in CIDR format. Required.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.cidr_allowed_list.is_none()`.
    pub fn cidr_allowed_list(&self) -> &[::std::string::String] {
        self.cidr_allowed_list.as_deref().unwrap_or_default()
    }
    /// <p>When termination settings are disabled, outbound calls can not be made.</p>
    pub fn disabled(&self) -> ::std::option::Option<bool> {
        self.disabled
    }
}
impl ::std::fmt::Debug for Termination {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("Termination");
        formatter.field("cps_limit", &self.cps_limit);
        formatter.field("default_phone_number", &"*** Sensitive Data Redacted ***");
        formatter.field("calling_regions", &self.calling_regions);
        formatter.field("cidr_allowed_list", &self.cidr_allowed_list);
        formatter.field("disabled", &self.disabled);
        formatter.finish()
    }
}
impl Termination {
    /// Creates a new builder-style object to manufacture [`Termination`](crate::types::Termination).
    pub fn builder() -> crate::types::builders::TerminationBuilder {
        crate::types::builders::TerminationBuilder::default()
    }
}

/// A builder for [`Termination`](crate::types::Termination).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct TerminationBuilder {
    pub(crate) cps_limit: ::std::option::Option<i32>,
    pub(crate) default_phone_number: ::std::option::Option<::std::string::String>,
    pub(crate) calling_regions: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) cidr_allowed_list: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) disabled: ::std::option::Option<bool>,
}
impl TerminationBuilder {
    /// <p>The limit on calls per second. Max value based on account service quota. Default value of 1.</p>
    pub fn cps_limit(mut self, input: i32) -> Self {
        self.cps_limit = ::std::option::Option::Some(input);
        self
    }
    /// <p>The limit on calls per second. Max value based on account service quota. Default value of 1.</p>
    pub fn set_cps_limit(mut self, input: ::std::option::Option<i32>) -> Self {
        self.cps_limit = input;
        self
    }
    /// <p>The limit on calls per second. Max value based on account service quota. Default value of 1.</p>
    pub fn get_cps_limit(&self) -> &::std::option::Option<i32> {
        &self.cps_limit
    }
    /// <p>The default caller ID phone number.</p>
    pub fn default_phone_number(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.default_phone_number = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The default caller ID phone number.</p>
    pub fn set_default_phone_number(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.default_phone_number = input;
        self
    }
    /// <p>The default caller ID phone number.</p>
    pub fn get_default_phone_number(&self) -> &::std::option::Option<::std::string::String> {
        &self.default_phone_number
    }
    /// Appends an item to `calling_regions`.
    ///
    /// To override the contents of this collection use [`set_calling_regions`](Self::set_calling_regions).
    ///
    /// <p>The countries to which calls are allowed, in ISO 3166-1 alpha-2 format. Required.</p>
    pub fn calling_regions(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.calling_regions.unwrap_or_default();
        v.push(input.into());
        self.calling_regions = ::std::option::Option::Some(v);
        self
    }
    /// <p>The countries to which calls are allowed, in ISO 3166-1 alpha-2 format. Required.</p>
    pub fn set_calling_regions(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.calling_regions = input;
        self
    }
    /// <p>The countries to which calls are allowed, in ISO 3166-1 alpha-2 format. Required.</p>
    pub fn get_calling_regions(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.calling_regions
    }
    /// Appends an item to `cidr_allowed_list`.
    ///
    /// To override the contents of this collection use [`set_cidr_allowed_list`](Self::set_cidr_allowed_list).
    ///
    /// <p>The IP addresses allowed to make calls, in CIDR format. Required.</p>
    pub fn cidr_allowed_list(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.cidr_allowed_list.unwrap_or_default();
        v.push(input.into());
        self.cidr_allowed_list = ::std::option::Option::Some(v);
        self
    }
    /// <p>The IP addresses allowed to make calls, in CIDR format. Required.</p>
    pub fn set_cidr_allowed_list(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.cidr_allowed_list = input;
        self
    }
    /// <p>The IP addresses allowed to make calls, in CIDR format. Required.</p>
    pub fn get_cidr_allowed_list(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.cidr_allowed_list
    }
    /// <p>When termination settings are disabled, outbound calls can not be made.</p>
    pub fn disabled(mut self, input: bool) -> Self {
        self.disabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>When termination settings are disabled, outbound calls can not be made.</p>
    pub fn set_disabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.disabled = input;
        self
    }
    /// <p>When termination settings are disabled, outbound calls can not be made.</p>
    pub fn get_disabled(&self) -> &::std::option::Option<bool> {
        &self.disabled
    }
    /// Consumes the builder and constructs a [`Termination`](crate::types::Termination).
    pub fn build(self) -> crate::types::Termination {
        crate::types::Termination {
            cps_limit: self.cps_limit,
            default_phone_number: self.default_phone_number,
            calling_regions: self.calling_regions,
            cidr_allowed_list: self.cidr_allowed_list,
            disabled: self.disabled,
        }
    }
}
impl ::std::fmt::Debug for TerminationBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("TerminationBuilder");
        formatter.field("cps_limit", &self.cps_limit);
        formatter.field("default_phone_number", &"*** Sensitive Data Redacted ***");
        formatter.field("calling_regions", &self.calling_regions);
        formatter.field("cidr_allowed_list", &self.cidr_allowed_list);
        formatter.field("disabled", &self.disabled);
        formatter.finish()
    }
}
