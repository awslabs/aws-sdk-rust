// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The targeted recipient for a streaming configuration notification.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StreamingNotificationTarget {
    /// <p>The streaming notification target.</p>
    #[doc(hidden)]
    pub notification_target: std::option::Option<crate::types::NotificationTarget>,
}
impl StreamingNotificationTarget {
    /// <p>The streaming notification target.</p>
    pub fn notification_target(&self) -> std::option::Option<&crate::types::NotificationTarget> {
        self.notification_target.as_ref()
    }
}
impl StreamingNotificationTarget {
    /// Creates a new builder-style object to manufacture [`StreamingNotificationTarget`](crate::types::StreamingNotificationTarget).
    pub fn builder() -> crate::types::builders::StreamingNotificationTargetBuilder {
        crate::types::builders::StreamingNotificationTargetBuilder::default()
    }
}

/// A builder for [`StreamingNotificationTarget`](crate::types::StreamingNotificationTarget).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct StreamingNotificationTargetBuilder {
    pub(crate) notification_target: std::option::Option<crate::types::NotificationTarget>,
}
impl StreamingNotificationTargetBuilder {
    /// <p>The streaming notification target.</p>
    pub fn notification_target(mut self, input: crate::types::NotificationTarget) -> Self {
        self.notification_target = Some(input);
        self
    }
    /// <p>The streaming notification target.</p>
    pub fn set_notification_target(
        mut self,
        input: std::option::Option<crate::types::NotificationTarget>,
    ) -> Self {
        self.notification_target = input;
        self
    }
    /// Consumes the builder and constructs a [`StreamingNotificationTarget`](crate::types::StreamingNotificationTarget).
    pub fn build(self) -> crate::types::StreamingNotificationTarget {
        crate::types::StreamingNotificationTarget {
            notification_target: self.notification_target,
        }
    }
}
