// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> The resource target configurations for receiving Amazon Chime SDK meeting and attendee event notifications. The Amazon Chime SDK supports resource targets located in the US East (N. Virginia) AWS Region (<code>us-east-1</code>). </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct MeetingNotificationConfiguration {
    /// <p>The SNS topic ARN.</p>
    #[doc(hidden)]
    pub sns_topic_arn: std::option::Option<std::string::String>,
    /// <p>The SQS queue ARN.</p>
    #[doc(hidden)]
    pub sqs_queue_arn: std::option::Option<std::string::String>,
}
impl MeetingNotificationConfiguration {
    /// <p>The SNS topic ARN.</p>
    pub fn sns_topic_arn(&self) -> std::option::Option<&str> {
        self.sns_topic_arn.as_deref()
    }
    /// <p>The SQS queue ARN.</p>
    pub fn sqs_queue_arn(&self) -> std::option::Option<&str> {
        self.sqs_queue_arn.as_deref()
    }
}
impl std::fmt::Debug for MeetingNotificationConfiguration {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("MeetingNotificationConfiguration");
        formatter.field("sns_topic_arn", &"*** Sensitive Data Redacted ***");
        formatter.field("sqs_queue_arn", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl MeetingNotificationConfiguration {
    /// Creates a new builder-style object to manufacture [`MeetingNotificationConfiguration`](crate::types::MeetingNotificationConfiguration).
    pub fn builder() -> crate::types::builders::MeetingNotificationConfigurationBuilder {
        crate::types::builders::MeetingNotificationConfigurationBuilder::default()
    }
}

/// A builder for [`MeetingNotificationConfiguration`](crate::types::MeetingNotificationConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct MeetingNotificationConfigurationBuilder {
    pub(crate) sns_topic_arn: std::option::Option<std::string::String>,
    pub(crate) sqs_queue_arn: std::option::Option<std::string::String>,
}
impl MeetingNotificationConfigurationBuilder {
    /// <p>The SNS topic ARN.</p>
    pub fn sns_topic_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.sns_topic_arn = Some(input.into());
        self
    }
    /// <p>The SNS topic ARN.</p>
    pub fn set_sns_topic_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.sns_topic_arn = input;
        self
    }
    /// <p>The SQS queue ARN.</p>
    pub fn sqs_queue_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.sqs_queue_arn = Some(input.into());
        self
    }
    /// <p>The SQS queue ARN.</p>
    pub fn set_sqs_queue_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.sqs_queue_arn = input;
        self
    }
    /// Consumes the builder and constructs a [`MeetingNotificationConfiguration`](crate::types::MeetingNotificationConfiguration).
    pub fn build(self) -> crate::types::MeetingNotificationConfiguration {
        crate::types::MeetingNotificationConfiguration {
            sns_topic_arn: self.sns_topic_arn,
            sqs_queue_arn: self.sqs_queue_arn,
        }
    }
}
impl std::fmt::Debug for MeetingNotificationConfigurationBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("MeetingNotificationConfigurationBuilder");
        formatter.field("sns_topic_arn", &"*** Sensitive Data Redacted ***");
        formatter.field("sqs_queue_arn", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
