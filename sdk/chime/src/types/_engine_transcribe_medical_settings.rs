// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Settings specific to the Amazon Transcribe Medical engine.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EngineTranscribeMedicalSettings {
    /// <p>The language code specified for the Amazon Transcribe Medical engine.</p>
    pub language_code: crate::types::TranscribeMedicalLanguageCode,
    /// <p>The specialty specified for the Amazon Transcribe Medical engine.</p>
    pub specialty: crate::types::TranscribeMedicalSpecialty,
    /// <p>The type of transcription.</p>
    pub r#type: crate::types::TranscribeMedicalType,
    /// <p>The name of the vocabulary passed to Amazon Transcribe Medical.</p>
    pub vocabulary_name: ::std::option::Option<::std::string::String>,
    /// <p>The AWS Region passed to Amazon Transcribe Medical. If you don't specify a Region, Amazon Chime uses the meeting's Region.</p>
    pub region: ::std::option::Option<crate::types::TranscribeMedicalRegion>,
    /// <p>Labels all personally identifiable information (PII) identified in your transcript. If you don't include <code>PiiEntityTypes</code>, all PII is identified.</p>
    /// <p>You can’t set <code>ContentIdentificationType</code> and <code>ContentRedactionType</code>.</p>
    pub content_identification_type: ::std::option::Option<crate::types::TranscribeMedicalContentIdentificationType>,
}
impl EngineTranscribeMedicalSettings {
    /// <p>The language code specified for the Amazon Transcribe Medical engine.</p>
    pub fn language_code(&self) -> &crate::types::TranscribeMedicalLanguageCode {
        &self.language_code
    }
    /// <p>The specialty specified for the Amazon Transcribe Medical engine.</p>
    pub fn specialty(&self) -> &crate::types::TranscribeMedicalSpecialty {
        &self.specialty
    }
    /// <p>The type of transcription.</p>
    pub fn r#type(&self) -> &crate::types::TranscribeMedicalType {
        &self.r#type
    }
    /// <p>The name of the vocabulary passed to Amazon Transcribe Medical.</p>
    pub fn vocabulary_name(&self) -> ::std::option::Option<&str> {
        self.vocabulary_name.as_deref()
    }
    /// <p>The AWS Region passed to Amazon Transcribe Medical. If you don't specify a Region, Amazon Chime uses the meeting's Region.</p>
    pub fn region(&self) -> ::std::option::Option<&crate::types::TranscribeMedicalRegion> {
        self.region.as_ref()
    }
    /// <p>Labels all personally identifiable information (PII) identified in your transcript. If you don't include <code>PiiEntityTypes</code>, all PII is identified.</p>
    /// <p>You can’t set <code>ContentIdentificationType</code> and <code>ContentRedactionType</code>.</p>
    pub fn content_identification_type(&self) -> ::std::option::Option<&crate::types::TranscribeMedicalContentIdentificationType> {
        self.content_identification_type.as_ref()
    }
}
impl EngineTranscribeMedicalSettings {
    /// Creates a new builder-style object to manufacture [`EngineTranscribeMedicalSettings`](crate::types::EngineTranscribeMedicalSettings).
    pub fn builder() -> crate::types::builders::EngineTranscribeMedicalSettingsBuilder {
        crate::types::builders::EngineTranscribeMedicalSettingsBuilder::default()
    }
}

/// A builder for [`EngineTranscribeMedicalSettings`](crate::types::EngineTranscribeMedicalSettings).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct EngineTranscribeMedicalSettingsBuilder {
    pub(crate) language_code: ::std::option::Option<crate::types::TranscribeMedicalLanguageCode>,
    pub(crate) specialty: ::std::option::Option<crate::types::TranscribeMedicalSpecialty>,
    pub(crate) r#type: ::std::option::Option<crate::types::TranscribeMedicalType>,
    pub(crate) vocabulary_name: ::std::option::Option<::std::string::String>,
    pub(crate) region: ::std::option::Option<crate::types::TranscribeMedicalRegion>,
    pub(crate) content_identification_type: ::std::option::Option<crate::types::TranscribeMedicalContentIdentificationType>,
}
impl EngineTranscribeMedicalSettingsBuilder {
    /// <p>The language code specified for the Amazon Transcribe Medical engine.</p>
    /// This field is required.
    pub fn language_code(mut self, input: crate::types::TranscribeMedicalLanguageCode) -> Self {
        self.language_code = ::std::option::Option::Some(input);
        self
    }
    /// <p>The language code specified for the Amazon Transcribe Medical engine.</p>
    pub fn set_language_code(mut self, input: ::std::option::Option<crate::types::TranscribeMedicalLanguageCode>) -> Self {
        self.language_code = input;
        self
    }
    /// <p>The language code specified for the Amazon Transcribe Medical engine.</p>
    pub fn get_language_code(&self) -> &::std::option::Option<crate::types::TranscribeMedicalLanguageCode> {
        &self.language_code
    }
    /// <p>The specialty specified for the Amazon Transcribe Medical engine.</p>
    /// This field is required.
    pub fn specialty(mut self, input: crate::types::TranscribeMedicalSpecialty) -> Self {
        self.specialty = ::std::option::Option::Some(input);
        self
    }
    /// <p>The specialty specified for the Amazon Transcribe Medical engine.</p>
    pub fn set_specialty(mut self, input: ::std::option::Option<crate::types::TranscribeMedicalSpecialty>) -> Self {
        self.specialty = input;
        self
    }
    /// <p>The specialty specified for the Amazon Transcribe Medical engine.</p>
    pub fn get_specialty(&self) -> &::std::option::Option<crate::types::TranscribeMedicalSpecialty> {
        &self.specialty
    }
    /// <p>The type of transcription.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::TranscribeMedicalType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of transcription.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::TranscribeMedicalType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of transcription.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::TranscribeMedicalType> {
        &self.r#type
    }
    /// <p>The name of the vocabulary passed to Amazon Transcribe Medical.</p>
    pub fn vocabulary_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vocabulary_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the vocabulary passed to Amazon Transcribe Medical.</p>
    pub fn set_vocabulary_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vocabulary_name = input;
        self
    }
    /// <p>The name of the vocabulary passed to Amazon Transcribe Medical.</p>
    pub fn get_vocabulary_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.vocabulary_name
    }
    /// <p>The AWS Region passed to Amazon Transcribe Medical. If you don't specify a Region, Amazon Chime uses the meeting's Region.</p>
    pub fn region(mut self, input: crate::types::TranscribeMedicalRegion) -> Self {
        self.region = ::std::option::Option::Some(input);
        self
    }
    /// <p>The AWS Region passed to Amazon Transcribe Medical. If you don't specify a Region, Amazon Chime uses the meeting's Region.</p>
    pub fn set_region(mut self, input: ::std::option::Option<crate::types::TranscribeMedicalRegion>) -> Self {
        self.region = input;
        self
    }
    /// <p>The AWS Region passed to Amazon Transcribe Medical. If you don't specify a Region, Amazon Chime uses the meeting's Region.</p>
    pub fn get_region(&self) -> &::std::option::Option<crate::types::TranscribeMedicalRegion> {
        &self.region
    }
    /// <p>Labels all personally identifiable information (PII) identified in your transcript. If you don't include <code>PiiEntityTypes</code>, all PII is identified.</p>
    /// <p>You can’t set <code>ContentIdentificationType</code> and <code>ContentRedactionType</code>.</p>
    pub fn content_identification_type(mut self, input: crate::types::TranscribeMedicalContentIdentificationType) -> Self {
        self.content_identification_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Labels all personally identifiable information (PII) identified in your transcript. If you don't include <code>PiiEntityTypes</code>, all PII is identified.</p>
    /// <p>You can’t set <code>ContentIdentificationType</code> and <code>ContentRedactionType</code>.</p>
    pub fn set_content_identification_type(mut self, input: ::std::option::Option<crate::types::TranscribeMedicalContentIdentificationType>) -> Self {
        self.content_identification_type = input;
        self
    }
    /// <p>Labels all personally identifiable information (PII) identified in your transcript. If you don't include <code>PiiEntityTypes</code>, all PII is identified.</p>
    /// <p>You can’t set <code>ContentIdentificationType</code> and <code>ContentRedactionType</code>.</p>
    pub fn get_content_identification_type(&self) -> &::std::option::Option<crate::types::TranscribeMedicalContentIdentificationType> {
        &self.content_identification_type
    }
    /// Consumes the builder and constructs a [`EngineTranscribeMedicalSettings`](crate::types::EngineTranscribeMedicalSettings).
    /// This method will fail if any of the following fields are not set:
    /// - [`language_code`](crate::types::builders::EngineTranscribeMedicalSettingsBuilder::language_code)
    /// - [`specialty`](crate::types::builders::EngineTranscribeMedicalSettingsBuilder::specialty)
    /// - [`r#type`](crate::types::builders::EngineTranscribeMedicalSettingsBuilder::r#type)
    pub fn build(self) -> ::std::result::Result<crate::types::EngineTranscribeMedicalSettings, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::EngineTranscribeMedicalSettings {
            language_code: self.language_code.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "language_code",
                    "language_code was not specified but it is required when building EngineTranscribeMedicalSettings",
                )
            })?,
            specialty: self.specialty.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "specialty",
                    "specialty was not specified but it is required when building EngineTranscribeMedicalSettings",
                )
            })?,
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building EngineTranscribeMedicalSettings",
                )
            })?,
            vocabulary_name: self.vocabulary_name,
            region: self.region,
            content_identification_type: self.content_identification_type,
        })
    }
}
