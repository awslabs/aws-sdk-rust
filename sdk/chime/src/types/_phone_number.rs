// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A phone number used for Amazon Chime Business Calling or an Amazon Chime Voice Connector.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct PhoneNumber {
    /// <p>The phone number ID.</p>
    #[doc(hidden)]
    pub phone_number_id: std::option::Option<std::string::String>,
    /// <p>The phone number, in E.164 format.</p>
    #[doc(hidden)]
    pub e164_phone_number: std::option::Option<std::string::String>,
    /// <p>The phone number country. Format: ISO 3166-1 alpha-2.</p>
    #[doc(hidden)]
    pub country: std::option::Option<std::string::String>,
    /// <p>The phone number type.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::PhoneNumberType>,
    /// <p>The phone number product type.</p>
    #[doc(hidden)]
    pub product_type: std::option::Option<crate::types::PhoneNumberProductType>,
    /// <p>The phone number status.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::PhoneNumberStatus>,
    /// <p>The phone number capabilities.</p>
    #[doc(hidden)]
    pub capabilities: std::option::Option<crate::types::PhoneNumberCapabilities>,
    /// <p>The phone number associations.</p>
    #[doc(hidden)]
    pub associations: std::option::Option<std::vec::Vec<crate::types::PhoneNumberAssociation>>,
    /// <p>The outbound calling name associated with the phone number.</p>
    #[doc(hidden)]
    pub calling_name: std::option::Option<std::string::String>,
    /// <p>The outbound calling name status.</p>
    #[doc(hidden)]
    pub calling_name_status: std::option::Option<crate::types::CallingNameStatus>,
    /// <p>The phone number creation timestamp, in ISO 8601 format.</p>
    #[doc(hidden)]
    pub created_timestamp: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The updated phone number timestamp, in ISO 8601 format.</p>
    #[doc(hidden)]
    pub updated_timestamp: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The deleted phone number timestamp, in ISO 8601 format.</p>
    #[doc(hidden)]
    pub deletion_timestamp: std::option::Option<aws_smithy_types::DateTime>,
}
impl PhoneNumber {
    /// <p>The phone number ID.</p>
    pub fn phone_number_id(&self) -> std::option::Option<&str> {
        self.phone_number_id.as_deref()
    }
    /// <p>The phone number, in E.164 format.</p>
    pub fn e164_phone_number(&self) -> std::option::Option<&str> {
        self.e164_phone_number.as_deref()
    }
    /// <p>The phone number country. Format: ISO 3166-1 alpha-2.</p>
    pub fn country(&self) -> std::option::Option<&str> {
        self.country.as_deref()
    }
    /// <p>The phone number type.</p>
    pub fn r#type(&self) -> std::option::Option<&crate::types::PhoneNumberType> {
        self.r#type.as_ref()
    }
    /// <p>The phone number product type.</p>
    pub fn product_type(&self) -> std::option::Option<&crate::types::PhoneNumberProductType> {
        self.product_type.as_ref()
    }
    /// <p>The phone number status.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::PhoneNumberStatus> {
        self.status.as_ref()
    }
    /// <p>The phone number capabilities.</p>
    pub fn capabilities(&self) -> std::option::Option<&crate::types::PhoneNumberCapabilities> {
        self.capabilities.as_ref()
    }
    /// <p>The phone number associations.</p>
    pub fn associations(&self) -> std::option::Option<&[crate::types::PhoneNumberAssociation]> {
        self.associations.as_deref()
    }
    /// <p>The outbound calling name associated with the phone number.</p>
    pub fn calling_name(&self) -> std::option::Option<&str> {
        self.calling_name.as_deref()
    }
    /// <p>The outbound calling name status.</p>
    pub fn calling_name_status(&self) -> std::option::Option<&crate::types::CallingNameStatus> {
        self.calling_name_status.as_ref()
    }
    /// <p>The phone number creation timestamp, in ISO 8601 format.</p>
    pub fn created_timestamp(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_timestamp.as_ref()
    }
    /// <p>The updated phone number timestamp, in ISO 8601 format.</p>
    pub fn updated_timestamp(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.updated_timestamp.as_ref()
    }
    /// <p>The deleted phone number timestamp, in ISO 8601 format.</p>
    pub fn deletion_timestamp(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.deletion_timestamp.as_ref()
    }
}
impl std::fmt::Debug for PhoneNumber {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("PhoneNumber");
        formatter.field("phone_number_id", &self.phone_number_id);
        formatter.field("e164_phone_number", &"*** Sensitive Data Redacted ***");
        formatter.field("country", &self.country);
        formatter.field("r#type", &self.r#type);
        formatter.field("product_type", &self.product_type);
        formatter.field("status", &self.status);
        formatter.field("capabilities", &self.capabilities);
        formatter.field("associations", &self.associations);
        formatter.field("calling_name", &"*** Sensitive Data Redacted ***");
        formatter.field("calling_name_status", &self.calling_name_status);
        formatter.field("created_timestamp", &self.created_timestamp);
        formatter.field("updated_timestamp", &self.updated_timestamp);
        formatter.field("deletion_timestamp", &self.deletion_timestamp);
        formatter.finish()
    }
}
impl PhoneNumber {
    /// Creates a new builder-style object to manufacture [`PhoneNumber`](crate::types::PhoneNumber).
    pub fn builder() -> crate::types::builders::PhoneNumberBuilder {
        crate::types::builders::PhoneNumberBuilder::default()
    }
}

/// A builder for [`PhoneNumber`](crate::types::PhoneNumber).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct PhoneNumberBuilder {
    pub(crate) phone_number_id: std::option::Option<std::string::String>,
    pub(crate) e164_phone_number: std::option::Option<std::string::String>,
    pub(crate) country: std::option::Option<std::string::String>,
    pub(crate) r#type: std::option::Option<crate::types::PhoneNumberType>,
    pub(crate) product_type: std::option::Option<crate::types::PhoneNumberProductType>,
    pub(crate) status: std::option::Option<crate::types::PhoneNumberStatus>,
    pub(crate) capabilities: std::option::Option<crate::types::PhoneNumberCapabilities>,
    pub(crate) associations:
        std::option::Option<std::vec::Vec<crate::types::PhoneNumberAssociation>>,
    pub(crate) calling_name: std::option::Option<std::string::String>,
    pub(crate) calling_name_status: std::option::Option<crate::types::CallingNameStatus>,
    pub(crate) created_timestamp: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) updated_timestamp: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) deletion_timestamp: std::option::Option<aws_smithy_types::DateTime>,
}
impl PhoneNumberBuilder {
    /// <p>The phone number ID.</p>
    pub fn phone_number_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.phone_number_id = Some(input.into());
        self
    }
    /// <p>The phone number ID.</p>
    pub fn set_phone_number_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.phone_number_id = input;
        self
    }
    /// <p>The phone number, in E.164 format.</p>
    pub fn e164_phone_number(mut self, input: impl Into<std::string::String>) -> Self {
        self.e164_phone_number = Some(input.into());
        self
    }
    /// <p>The phone number, in E.164 format.</p>
    pub fn set_e164_phone_number(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.e164_phone_number = input;
        self
    }
    /// <p>The phone number country. Format: ISO 3166-1 alpha-2.</p>
    pub fn country(mut self, input: impl Into<std::string::String>) -> Self {
        self.country = Some(input.into());
        self
    }
    /// <p>The phone number country. Format: ISO 3166-1 alpha-2.</p>
    pub fn set_country(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.country = input;
        self
    }
    /// <p>The phone number type.</p>
    pub fn r#type(mut self, input: crate::types::PhoneNumberType) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p>The phone number type.</p>
    pub fn set_type(mut self, input: std::option::Option<crate::types::PhoneNumberType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The phone number product type.</p>
    pub fn product_type(mut self, input: crate::types::PhoneNumberProductType) -> Self {
        self.product_type = Some(input);
        self
    }
    /// <p>The phone number product type.</p>
    pub fn set_product_type(
        mut self,
        input: std::option::Option<crate::types::PhoneNumberProductType>,
    ) -> Self {
        self.product_type = input;
        self
    }
    /// <p>The phone number status.</p>
    pub fn status(mut self, input: crate::types::PhoneNumberStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The phone number status.</p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::PhoneNumberStatus>,
    ) -> Self {
        self.status = input;
        self
    }
    /// <p>The phone number capabilities.</p>
    pub fn capabilities(mut self, input: crate::types::PhoneNumberCapabilities) -> Self {
        self.capabilities = Some(input);
        self
    }
    /// <p>The phone number capabilities.</p>
    pub fn set_capabilities(
        mut self,
        input: std::option::Option<crate::types::PhoneNumberCapabilities>,
    ) -> Self {
        self.capabilities = input;
        self
    }
    /// Appends an item to `associations`.
    ///
    /// To override the contents of this collection use [`set_associations`](Self::set_associations).
    ///
    /// <p>The phone number associations.</p>
    pub fn associations(mut self, input: crate::types::PhoneNumberAssociation) -> Self {
        let mut v = self.associations.unwrap_or_default();
        v.push(input);
        self.associations = Some(v);
        self
    }
    /// <p>The phone number associations.</p>
    pub fn set_associations(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::PhoneNumberAssociation>>,
    ) -> Self {
        self.associations = input;
        self
    }
    /// <p>The outbound calling name associated with the phone number.</p>
    pub fn calling_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.calling_name = Some(input.into());
        self
    }
    /// <p>The outbound calling name associated with the phone number.</p>
    pub fn set_calling_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.calling_name = input;
        self
    }
    /// <p>The outbound calling name status.</p>
    pub fn calling_name_status(mut self, input: crate::types::CallingNameStatus) -> Self {
        self.calling_name_status = Some(input);
        self
    }
    /// <p>The outbound calling name status.</p>
    pub fn set_calling_name_status(
        mut self,
        input: std::option::Option<crate::types::CallingNameStatus>,
    ) -> Self {
        self.calling_name_status = input;
        self
    }
    /// <p>The phone number creation timestamp, in ISO 8601 format.</p>
    pub fn created_timestamp(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_timestamp = Some(input);
        self
    }
    /// <p>The phone number creation timestamp, in ISO 8601 format.</p>
    pub fn set_created_timestamp(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_timestamp = input;
        self
    }
    /// <p>The updated phone number timestamp, in ISO 8601 format.</p>
    pub fn updated_timestamp(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.updated_timestamp = Some(input);
        self
    }
    /// <p>The updated phone number timestamp, in ISO 8601 format.</p>
    pub fn set_updated_timestamp(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.updated_timestamp = input;
        self
    }
    /// <p>The deleted phone number timestamp, in ISO 8601 format.</p>
    pub fn deletion_timestamp(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.deletion_timestamp = Some(input);
        self
    }
    /// <p>The deleted phone number timestamp, in ISO 8601 format.</p>
    pub fn set_deletion_timestamp(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.deletion_timestamp = input;
        self
    }
    /// Consumes the builder and constructs a [`PhoneNumber`](crate::types::PhoneNumber).
    pub fn build(self) -> crate::types::PhoneNumber {
        crate::types::PhoneNumber {
            phone_number_id: self.phone_number_id,
            e164_phone_number: self.e164_phone_number,
            country: self.country,
            r#type: self.r#type,
            product_type: self.product_type,
            status: self.status,
            capabilities: self.capabilities,
            associations: self.associations,
            calling_name: self.calling_name,
            calling_name_status: self.calling_name_status,
            created_timestamp: self.created_timestamp,
            updated_timestamp: self.updated_timestamp,
            deletion_timestamp: self.deletion_timestamp,
        }
    }
}
impl std::fmt::Debug for PhoneNumberBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("PhoneNumberBuilder");
        formatter.field("phone_number_id", &self.phone_number_id);
        formatter.field("e164_phone_number", &"*** Sensitive Data Redacted ***");
        formatter.field("country", &self.country);
        formatter.field("r#type", &self.r#type);
        formatter.field("product_type", &self.product_type);
        formatter.field("status", &self.status);
        formatter.field("capabilities", &self.capabilities);
        formatter.field("associations", &self.associations);
        formatter.field("calling_name", &"*** Sensitive Data Redacted ***");
        formatter.field("calling_name_status", &self.calling_name_status);
        formatter.field("created_timestamp", &self.created_timestamp);
        formatter.field("updated_timestamp", &self.updated_timestamp);
        formatter.field("deletion_timestamp", &self.deletion_timestamp);
        formatter.finish()
    }
}
