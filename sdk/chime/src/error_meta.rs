// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>You don't have permissions to perform the requested operation.</p>
    AccessDeniedException(crate::error::AccessDeniedException),
    /// <p>The input parameters don't match the service's restrictions.</p>
    BadRequestException(crate::error::BadRequestException),
    /// <p>The request could not be processed because of conflict in the current state of the resource.</p>
    ConflictException(crate::error::ConflictException),
    /// <p>The client is permanently forbidden from making the request.</p>
    ForbiddenException(crate::error::ForbiddenException),
    /// <p>One or more of the resources in the request does not exist in the system.</p>
    NotFoundException(crate::error::NotFoundException),
    /// <p>The request exceeds the resource limit.</p>
    ResourceLimitExceededException(crate::error::ResourceLimitExceededException),
    /// <p>The service encountered an unexpected error.</p>
    ServiceFailureException(crate::error::ServiceFailureException),
    /// <p>The service is currently unavailable.</p>
    ServiceUnavailableException(crate::error::ServiceUnavailableException),
    /// <p>The client exceeded its request rate limit.</p>
    ThrottledClientException(crate::error::ThrottledClientException),
    /// <p>The client is not currently authorized to make the request.</p>
    UnauthorizedClientException(crate::error::UnauthorizedClientException),
    /// <p>The request was well-formed but was unable to be followed due to semantic errors.</p>
    UnprocessableEntityException(crate::error::UnprocessableEntityException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::BadRequestException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::ForbiddenException(inner) => inner.fmt(f),
            Error::NotFoundException(inner) => inner.fmt(f),
            Error::ResourceLimitExceededException(inner) => inner.fmt(f),
            Error::ServiceFailureException(inner) => inner.fmt(f),
            Error::ServiceUnavailableException(inner) => inner.fmt(f),
            Error::ThrottledClientException(inner) => inner.fmt(f),
            Error::UnauthorizedClientException(inner) => inner.fmt(f),
            Error::UnprocessableEntityException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::AssociatePhoneNumbersWithVoiceConnectorError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::AssociatePhoneNumbersWithVoiceConnectorError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AssociatePhoneNumbersWithVoiceConnectorError> for Error {
    fn from(err: crate::error::AssociatePhoneNumbersWithVoiceConnectorError) -> Self {
        match err {
            crate::error::AssociatePhoneNumbersWithVoiceConnectorError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::AssociatePhoneNumbersWithVoiceConnectorError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::AssociatePhoneNumbersWithVoiceConnectorError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::AssociatePhoneNumbersWithVoiceConnectorError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::AssociatePhoneNumbersWithVoiceConnectorError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::AssociatePhoneNumbersWithVoiceConnectorError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::AssociatePhoneNumbersWithVoiceConnectorError::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::AssociatePhoneNumbersWithVoiceConnectorError::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::AssociatePhoneNumbersWithVoiceConnectorError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::AssociatePhoneNumbersWithVoiceConnectorGroupError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::AssociatePhoneNumbersWithVoiceConnectorGroupError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AssociatePhoneNumbersWithVoiceConnectorGroupError> for Error {
    fn from(err: crate::error::AssociatePhoneNumbersWithVoiceConnectorGroupError) -> Self {
        match err {
            crate::error::AssociatePhoneNumbersWithVoiceConnectorGroupError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::AssociatePhoneNumbersWithVoiceConnectorGroupError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::AssociatePhoneNumbersWithVoiceConnectorGroupError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::AssociatePhoneNumbersWithVoiceConnectorGroupError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::AssociatePhoneNumbersWithVoiceConnectorGroupError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::AssociatePhoneNumbersWithVoiceConnectorGroupError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::AssociatePhoneNumbersWithVoiceConnectorGroupError::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::AssociatePhoneNumbersWithVoiceConnectorGroupError::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::AssociatePhoneNumbersWithVoiceConnectorGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AssociatePhoneNumberWithUserError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::AssociatePhoneNumberWithUserError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AssociatePhoneNumberWithUserError> for Error {
    fn from(err: crate::error::AssociatePhoneNumberWithUserError) -> Self {
        match err {
            crate::error::AssociatePhoneNumberWithUserError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::AssociatePhoneNumberWithUserError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::AssociatePhoneNumberWithUserError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::AssociatePhoneNumberWithUserError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::AssociatePhoneNumberWithUserError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::AssociatePhoneNumberWithUserError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::AssociatePhoneNumberWithUserError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::AssociatePhoneNumberWithUserError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::AssociatePhoneNumberWithUserError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::AssociateSigninDelegateGroupsWithAccountError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::AssociateSigninDelegateGroupsWithAccountError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AssociateSigninDelegateGroupsWithAccountError> for Error {
    fn from(err: crate::error::AssociateSigninDelegateGroupsWithAccountError) -> Self {
        match err {
            crate::error::AssociateSigninDelegateGroupsWithAccountError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::AssociateSigninDelegateGroupsWithAccountError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::AssociateSigninDelegateGroupsWithAccountError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::AssociateSigninDelegateGroupsWithAccountError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::AssociateSigninDelegateGroupsWithAccountError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::AssociateSigninDelegateGroupsWithAccountError::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::AssociateSigninDelegateGroupsWithAccountError::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::AssociateSigninDelegateGroupsWithAccountError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::BatchCreateAttendeeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::BatchCreateAttendeeError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::BatchCreateAttendeeError> for Error {
    fn from(err: crate::error::BatchCreateAttendeeError) -> Self {
        match err {
            crate::error::BatchCreateAttendeeError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::BatchCreateAttendeeError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::BatchCreateAttendeeError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::BatchCreateAttendeeError::ResourceLimitExceededException(inner) => {
                Error::ResourceLimitExceededException(inner)
            }
            crate::error::BatchCreateAttendeeError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::BatchCreateAttendeeError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::BatchCreateAttendeeError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::BatchCreateAttendeeError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::BatchCreateAttendeeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::BatchCreateChannelMembershipError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::BatchCreateChannelMembershipError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::BatchCreateChannelMembershipError> for Error {
    fn from(err: crate::error::BatchCreateChannelMembershipError) -> Self {
        match err {
            crate::error::BatchCreateChannelMembershipError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::BatchCreateChannelMembershipError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::BatchCreateChannelMembershipError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::BatchCreateChannelMembershipError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::BatchCreateChannelMembershipError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::BatchCreateChannelMembershipError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::BatchCreateChannelMembershipError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::BatchCreateRoomMembershipError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::BatchCreateRoomMembershipError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::BatchCreateRoomMembershipError> for Error {
    fn from(err: crate::error::BatchCreateRoomMembershipError) -> Self {
        match err {
            crate::error::BatchCreateRoomMembershipError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::BatchCreateRoomMembershipError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::BatchCreateRoomMembershipError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::BatchCreateRoomMembershipError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::BatchCreateRoomMembershipError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::BatchCreateRoomMembershipError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::BatchCreateRoomMembershipError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::BatchCreateRoomMembershipError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::BatchDeletePhoneNumberError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::BatchDeletePhoneNumberError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::BatchDeletePhoneNumberError> for Error {
    fn from(err: crate::error::BatchDeletePhoneNumberError) -> Self {
        match err {
            crate::error::BatchDeletePhoneNumberError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::BatchDeletePhoneNumberError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::BatchDeletePhoneNumberError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::BatchDeletePhoneNumberError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::BatchDeletePhoneNumberError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::BatchDeletePhoneNumberError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::BatchDeletePhoneNumberError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::BatchDeletePhoneNumberError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::BatchSuspendUserError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::BatchSuspendUserError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::BatchSuspendUserError> for Error {
    fn from(err: crate::error::BatchSuspendUserError) -> Self {
        match err {
            crate::error::BatchSuspendUserError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::BatchSuspendUserError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::BatchSuspendUserError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::BatchSuspendUserError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::BatchSuspendUserError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::BatchSuspendUserError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::BatchSuspendUserError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::BatchSuspendUserError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::BatchUnsuspendUserError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::BatchUnsuspendUserError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::BatchUnsuspendUserError> for Error {
    fn from(err: crate::error::BatchUnsuspendUserError) -> Self {
        match err {
            crate::error::BatchUnsuspendUserError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::BatchUnsuspendUserError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::BatchUnsuspendUserError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::BatchUnsuspendUserError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::BatchUnsuspendUserError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::BatchUnsuspendUserError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::BatchUnsuspendUserError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::BatchUnsuspendUserError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::BatchUpdatePhoneNumberError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::BatchUpdatePhoneNumberError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::BatchUpdatePhoneNumberError> for Error {
    fn from(err: crate::error::BatchUpdatePhoneNumberError) -> Self {
        match err {
            crate::error::BatchUpdatePhoneNumberError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::BatchUpdatePhoneNumberError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::BatchUpdatePhoneNumberError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::BatchUpdatePhoneNumberError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::BatchUpdatePhoneNumberError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::BatchUpdatePhoneNumberError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::BatchUpdatePhoneNumberError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::BatchUpdatePhoneNumberError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::BatchUpdateUserError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::BatchUpdateUserError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::BatchUpdateUserError> for Error {
    fn from(err: crate::error::BatchUpdateUserError) -> Self {
        match err {
            crate::error::BatchUpdateUserError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::BatchUpdateUserError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::BatchUpdateUserError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::BatchUpdateUserError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::BatchUpdateUserError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::BatchUpdateUserError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::BatchUpdateUserError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::BatchUpdateUserError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateAccountError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateAccountError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateAccountError> for Error {
    fn from(err: crate::error::CreateAccountError) -> Self {
        match err {
            crate::error::CreateAccountError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreateAccountError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::CreateAccountError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::CreateAccountError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::CreateAccountError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::CreateAccountError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::CreateAccountError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::CreateAccountError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateAppInstanceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateAppInstanceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateAppInstanceError> for Error {
    fn from(err: crate::error::CreateAppInstanceError) -> Self {
        match err {
            crate::error::CreateAppInstanceError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreateAppInstanceError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateAppInstanceError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::CreateAppInstanceError::ResourceLimitExceededException(inner) => {
                Error::ResourceLimitExceededException(inner)
            }
            crate::error::CreateAppInstanceError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::CreateAppInstanceError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::CreateAppInstanceError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::CreateAppInstanceError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::CreateAppInstanceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateAppInstanceAdminError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateAppInstanceAdminError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateAppInstanceAdminError> for Error {
    fn from(err: crate::error::CreateAppInstanceAdminError) -> Self {
        match err {
            crate::error::CreateAppInstanceAdminError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreateAppInstanceAdminError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateAppInstanceAdminError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::CreateAppInstanceAdminError::ResourceLimitExceededException(inner) => {
                Error::ResourceLimitExceededException(inner)
            }
            crate::error::CreateAppInstanceAdminError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::CreateAppInstanceAdminError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::CreateAppInstanceAdminError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::CreateAppInstanceAdminError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::CreateAppInstanceAdminError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateAppInstanceUserError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateAppInstanceUserError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateAppInstanceUserError> for Error {
    fn from(err: crate::error::CreateAppInstanceUserError) -> Self {
        match err {
            crate::error::CreateAppInstanceUserError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreateAppInstanceUserError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateAppInstanceUserError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::CreateAppInstanceUserError::ResourceLimitExceededException(inner) => {
                Error::ResourceLimitExceededException(inner)
            }
            crate::error::CreateAppInstanceUserError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::CreateAppInstanceUserError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::CreateAppInstanceUserError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::CreateAppInstanceUserError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::CreateAppInstanceUserError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateAttendeeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateAttendeeError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateAttendeeError> for Error {
    fn from(err: crate::error::CreateAttendeeError) -> Self {
        match err {
            crate::error::CreateAttendeeError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreateAttendeeError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::CreateAttendeeError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::CreateAttendeeError::ResourceLimitExceededException(inner) => {
                Error::ResourceLimitExceededException(inner)
            }
            crate::error::CreateAttendeeError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::CreateAttendeeError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::CreateAttendeeError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::CreateAttendeeError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::CreateAttendeeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateBotError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateBotError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateBotError> for Error {
    fn from(err: crate::error::CreateBotError) -> Self {
        match err {
            crate::error::CreateBotError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreateBotError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::CreateBotError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::CreateBotError::ResourceLimitExceededException(inner) => {
                Error::ResourceLimitExceededException(inner)
            }
            crate::error::CreateBotError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::CreateBotError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::CreateBotError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::CreateBotError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::CreateBotError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateChannelError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateChannelError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateChannelError> for Error {
    fn from(err: crate::error::CreateChannelError) -> Self {
        match err {
            crate::error::CreateChannelError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreateChannelError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateChannelError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::CreateChannelError::ResourceLimitExceededException(inner) => {
                Error::ResourceLimitExceededException(inner)
            }
            crate::error::CreateChannelError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::CreateChannelError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::CreateChannelError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::CreateChannelError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::CreateChannelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateChannelBanError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateChannelBanError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateChannelBanError> for Error {
    fn from(err: crate::error::CreateChannelBanError) -> Self {
        match err {
            crate::error::CreateChannelBanError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreateChannelBanError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateChannelBanError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::CreateChannelBanError::ResourceLimitExceededException(inner) => {
                Error::ResourceLimitExceededException(inner)
            }
            crate::error::CreateChannelBanError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::CreateChannelBanError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::CreateChannelBanError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::CreateChannelBanError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::CreateChannelBanError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateChannelMembershipError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateChannelMembershipError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateChannelMembershipError> for Error {
    fn from(err: crate::error::CreateChannelMembershipError) -> Self {
        match err {
            crate::error::CreateChannelMembershipError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreateChannelMembershipError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateChannelMembershipError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::CreateChannelMembershipError::ResourceLimitExceededException(inner) => {
                Error::ResourceLimitExceededException(inner)
            }
            crate::error::CreateChannelMembershipError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::CreateChannelMembershipError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::CreateChannelMembershipError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::CreateChannelMembershipError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::CreateChannelMembershipError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateChannelModeratorError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateChannelModeratorError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateChannelModeratorError> for Error {
    fn from(err: crate::error::CreateChannelModeratorError) -> Self {
        match err {
            crate::error::CreateChannelModeratorError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreateChannelModeratorError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateChannelModeratorError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::CreateChannelModeratorError::ResourceLimitExceededException(inner) => {
                Error::ResourceLimitExceededException(inner)
            }
            crate::error::CreateChannelModeratorError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::CreateChannelModeratorError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::CreateChannelModeratorError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::CreateChannelModeratorError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::CreateChannelModeratorError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateMediaCapturePipelineError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateMediaCapturePipelineError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateMediaCapturePipelineError> for Error {
    fn from(err: crate::error::CreateMediaCapturePipelineError) -> Self {
        match err {
            crate::error::CreateMediaCapturePipelineError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreateMediaCapturePipelineError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::CreateMediaCapturePipelineError::ResourceLimitExceededException(
                inner,
            ) => Error::ResourceLimitExceededException(inner),
            crate::error::CreateMediaCapturePipelineError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::CreateMediaCapturePipelineError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::CreateMediaCapturePipelineError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::CreateMediaCapturePipelineError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::CreateMediaCapturePipelineError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateMeetingError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateMeetingError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateMeetingError> for Error {
    fn from(err: crate::error::CreateMeetingError) -> Self {
        match err {
            crate::error::CreateMeetingError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreateMeetingError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::CreateMeetingError::ResourceLimitExceededException(inner) => {
                Error::ResourceLimitExceededException(inner)
            }
            crate::error::CreateMeetingError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::CreateMeetingError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::CreateMeetingError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::CreateMeetingError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::CreateMeetingError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateMeetingDialOutError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateMeetingDialOutError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateMeetingDialOutError> for Error {
    fn from(err: crate::error::CreateMeetingDialOutError) -> Self {
        match err {
            crate::error::CreateMeetingDialOutError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateMeetingDialOutError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreateMeetingDialOutError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::CreateMeetingDialOutError::ResourceLimitExceededException(inner) => {
                Error::ResourceLimitExceededException(inner)
            }
            crate::error::CreateMeetingDialOutError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::CreateMeetingDialOutError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::CreateMeetingDialOutError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::CreateMeetingDialOutError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::CreateMeetingDialOutError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateMeetingWithAttendeesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateMeetingWithAttendeesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateMeetingWithAttendeesError> for Error {
    fn from(err: crate::error::CreateMeetingWithAttendeesError) -> Self {
        match err {
            crate::error::CreateMeetingWithAttendeesError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreateMeetingWithAttendeesError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::CreateMeetingWithAttendeesError::ResourceLimitExceededException(
                inner,
            ) => Error::ResourceLimitExceededException(inner),
            crate::error::CreateMeetingWithAttendeesError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::CreateMeetingWithAttendeesError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::CreateMeetingWithAttendeesError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::CreateMeetingWithAttendeesError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::CreateMeetingWithAttendeesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreatePhoneNumberOrderError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreatePhoneNumberOrderError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreatePhoneNumberOrderError> for Error {
    fn from(err: crate::error::CreatePhoneNumberOrderError) -> Self {
        match err {
            crate::error::CreatePhoneNumberOrderError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreatePhoneNumberOrderError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreatePhoneNumberOrderError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::CreatePhoneNumberOrderError::ResourceLimitExceededException(inner) => {
                Error::ResourceLimitExceededException(inner)
            }
            crate::error::CreatePhoneNumberOrderError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::CreatePhoneNumberOrderError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::CreatePhoneNumberOrderError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::CreatePhoneNumberOrderError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::CreatePhoneNumberOrderError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateProxySessionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateProxySessionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateProxySessionError> for Error {
    fn from(err: crate::error::CreateProxySessionError) -> Self {
        match err {
            crate::error::CreateProxySessionError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreateProxySessionError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::CreateProxySessionError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::CreateProxySessionError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::CreateProxySessionError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::CreateProxySessionError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::CreateProxySessionError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::CreateProxySessionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateRoomError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateRoomError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateRoomError> for Error {
    fn from(err: crate::error::CreateRoomError) -> Self {
        match err {
            crate::error::CreateRoomError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreateRoomError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::CreateRoomError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::CreateRoomError::ResourceLimitExceededException(inner) => {
                Error::ResourceLimitExceededException(inner)
            }
            crate::error::CreateRoomError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::CreateRoomError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::CreateRoomError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::CreateRoomError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::CreateRoomError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateRoomMembershipError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateRoomMembershipError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateRoomMembershipError> for Error {
    fn from(err: crate::error::CreateRoomMembershipError) -> Self {
        match err {
            crate::error::CreateRoomMembershipError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreateRoomMembershipError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateRoomMembershipError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::CreateRoomMembershipError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::CreateRoomMembershipError::ResourceLimitExceededException(inner) => {
                Error::ResourceLimitExceededException(inner)
            }
            crate::error::CreateRoomMembershipError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::CreateRoomMembershipError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::CreateRoomMembershipError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::CreateRoomMembershipError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::CreateRoomMembershipError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateSipMediaApplicationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateSipMediaApplicationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateSipMediaApplicationError> for Error {
    fn from(err: crate::error::CreateSipMediaApplicationError) -> Self {
        match err {
            crate::error::CreateSipMediaApplicationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateSipMediaApplicationError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreateSipMediaApplicationError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateSipMediaApplicationError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::CreateSipMediaApplicationError::ResourceLimitExceededException(inner) => {
                Error::ResourceLimitExceededException(inner)
            }
            crate::error::CreateSipMediaApplicationError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::CreateSipMediaApplicationError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::CreateSipMediaApplicationError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::CreateSipMediaApplicationError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::CreateSipMediaApplicationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateSipMediaApplicationCallError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateSipMediaApplicationCallError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateSipMediaApplicationCallError> for Error {
    fn from(err: crate::error::CreateSipMediaApplicationCallError) -> Self {
        match err {
            crate::error::CreateSipMediaApplicationCallError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateSipMediaApplicationCallError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreateSipMediaApplicationCallError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::CreateSipMediaApplicationCallError::ResourceLimitExceededException(
                inner,
            ) => Error::ResourceLimitExceededException(inner),
            crate::error::CreateSipMediaApplicationCallError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::CreateSipMediaApplicationCallError::ServiceUnavailableException(
                inner,
            ) => Error::ServiceUnavailableException(inner),
            crate::error::CreateSipMediaApplicationCallError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::CreateSipMediaApplicationCallError::UnauthorizedClientException(
                inner,
            ) => Error::UnauthorizedClientException(inner),
            crate::error::CreateSipMediaApplicationCallError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateSipRuleError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateSipRuleError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateSipRuleError> for Error {
    fn from(err: crate::error::CreateSipRuleError) -> Self {
        match err {
            crate::error::CreateSipRuleError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateSipRuleError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreateSipRuleError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateSipRuleError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::CreateSipRuleError::ResourceLimitExceededException(inner) => {
                Error::ResourceLimitExceededException(inner)
            }
            crate::error::CreateSipRuleError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::CreateSipRuleError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::CreateSipRuleError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::CreateSipRuleError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::CreateSipRuleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateUserError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateUserError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateUserError> for Error {
    fn from(err: crate::error::CreateUserError) -> Self {
        match err {
            crate::error::CreateUserError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreateUserError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateUserError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::CreateUserError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::CreateUserError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::CreateUserError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::CreateUserError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::CreateUserError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::CreateUserError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateVoiceConnectorError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateVoiceConnectorError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateVoiceConnectorError> for Error {
    fn from(err: crate::error::CreateVoiceConnectorError) -> Self {
        match err {
            crate::error::CreateVoiceConnectorError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateVoiceConnectorError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreateVoiceConnectorError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::CreateVoiceConnectorError::ResourceLimitExceededException(inner) => {
                Error::ResourceLimitExceededException(inner)
            }
            crate::error::CreateVoiceConnectorError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::CreateVoiceConnectorError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::CreateVoiceConnectorError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::CreateVoiceConnectorError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::CreateVoiceConnectorError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateVoiceConnectorGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateVoiceConnectorGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateVoiceConnectorGroupError> for Error {
    fn from(err: crate::error::CreateVoiceConnectorGroupError) -> Self {
        match err {
            crate::error::CreateVoiceConnectorGroupError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateVoiceConnectorGroupError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreateVoiceConnectorGroupError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::CreateVoiceConnectorGroupError::ResourceLimitExceededException(inner) => {
                Error::ResourceLimitExceededException(inner)
            }
            crate::error::CreateVoiceConnectorGroupError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::CreateVoiceConnectorGroupError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::CreateVoiceConnectorGroupError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::CreateVoiceConnectorGroupError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::CreateVoiceConnectorGroupError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteAccountError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteAccountError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteAccountError> for Error {
    fn from(err: crate::error::DeleteAccountError) -> Self {
        match err {
            crate::error::DeleteAccountError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteAccountError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DeleteAccountError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteAccountError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::DeleteAccountError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::DeleteAccountError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::DeleteAccountError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::DeleteAccountError::UnprocessableEntityException(inner) => {
                Error::UnprocessableEntityException(inner)
            }
            crate::error::DeleteAccountError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteAppInstanceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteAppInstanceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteAppInstanceError> for Error {
    fn from(err: crate::error::DeleteAppInstanceError) -> Self {
        match err {
            crate::error::DeleteAppInstanceError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteAppInstanceError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DeleteAppInstanceError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::DeleteAppInstanceError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::DeleteAppInstanceError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::DeleteAppInstanceError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::DeleteAppInstanceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteAppInstanceAdminError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteAppInstanceAdminError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteAppInstanceAdminError> for Error {
    fn from(err: crate::error::DeleteAppInstanceAdminError) -> Self {
        match err {
            crate::error::DeleteAppInstanceAdminError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteAppInstanceAdminError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteAppInstanceAdminError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DeleteAppInstanceAdminError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::DeleteAppInstanceAdminError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::DeleteAppInstanceAdminError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::DeleteAppInstanceAdminError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::DeleteAppInstanceAdminError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::DeleteAppInstanceStreamingConfigurationsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DeleteAppInstanceStreamingConfigurationsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteAppInstanceStreamingConfigurationsError> for Error {
    fn from(err: crate::error::DeleteAppInstanceStreamingConfigurationsError) -> Self {
        match err {
            crate::error::DeleteAppInstanceStreamingConfigurationsError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::DeleteAppInstanceStreamingConfigurationsError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::DeleteAppInstanceStreamingConfigurationsError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::DeleteAppInstanceStreamingConfigurationsError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::DeleteAppInstanceStreamingConfigurationsError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::DeleteAppInstanceStreamingConfigurationsError::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::DeleteAppInstanceStreamingConfigurationsError::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::DeleteAppInstanceStreamingConfigurationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteAppInstanceUserError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteAppInstanceUserError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteAppInstanceUserError> for Error {
    fn from(err: crate::error::DeleteAppInstanceUserError) -> Self {
        match err {
            crate::error::DeleteAppInstanceUserError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteAppInstanceUserError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DeleteAppInstanceUserError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::DeleteAppInstanceUserError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::DeleteAppInstanceUserError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::DeleteAppInstanceUserError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::DeleteAppInstanceUserError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteAttendeeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteAttendeeError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteAttendeeError> for Error {
    fn from(err: crate::error::DeleteAttendeeError) -> Self {
        match err {
            crate::error::DeleteAttendeeError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteAttendeeError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DeleteAttendeeError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteAttendeeError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::DeleteAttendeeError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::DeleteAttendeeError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::DeleteAttendeeError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::DeleteAttendeeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteChannelError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteChannelError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteChannelError> for Error {
    fn from(err: crate::error::DeleteChannelError) -> Self {
        match err {
            crate::error::DeleteChannelError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteChannelError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DeleteChannelError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::DeleteChannelError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::DeleteChannelError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::DeleteChannelError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::DeleteChannelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteChannelBanError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteChannelBanError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteChannelBanError> for Error {
    fn from(err: crate::error::DeleteChannelBanError) -> Self {
        match err {
            crate::error::DeleteChannelBanError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteChannelBanError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DeleteChannelBanError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::DeleteChannelBanError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::DeleteChannelBanError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::DeleteChannelBanError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::DeleteChannelBanError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteChannelMembershipError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteChannelMembershipError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteChannelMembershipError> for Error {
    fn from(err: crate::error::DeleteChannelMembershipError) -> Self {
        match err {
            crate::error::DeleteChannelMembershipError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteChannelMembershipError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteChannelMembershipError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DeleteChannelMembershipError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::DeleteChannelMembershipError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::DeleteChannelMembershipError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::DeleteChannelMembershipError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::DeleteChannelMembershipError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteChannelMessageError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteChannelMessageError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteChannelMessageError> for Error {
    fn from(err: crate::error::DeleteChannelMessageError) -> Self {
        match err {
            crate::error::DeleteChannelMessageError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteChannelMessageError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DeleteChannelMessageError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::DeleteChannelMessageError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::DeleteChannelMessageError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::DeleteChannelMessageError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::DeleteChannelMessageError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteChannelModeratorError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteChannelModeratorError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteChannelModeratorError> for Error {
    fn from(err: crate::error::DeleteChannelModeratorError) -> Self {
        match err {
            crate::error::DeleteChannelModeratorError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteChannelModeratorError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DeleteChannelModeratorError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::DeleteChannelModeratorError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::DeleteChannelModeratorError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::DeleteChannelModeratorError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::DeleteChannelModeratorError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteEventsConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteEventsConfigurationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteEventsConfigurationError> for Error {
    fn from(err: crate::error::DeleteEventsConfigurationError) -> Self {
        match err {
            crate::error::DeleteEventsConfigurationError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteEventsConfigurationError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DeleteEventsConfigurationError::ResourceLimitExceededException(inner) => {
                Error::ResourceLimitExceededException(inner)
            }
            crate::error::DeleteEventsConfigurationError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::DeleteEventsConfigurationError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::DeleteEventsConfigurationError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::DeleteEventsConfigurationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteMediaCapturePipelineError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteMediaCapturePipelineError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteMediaCapturePipelineError> for Error {
    fn from(err: crate::error::DeleteMediaCapturePipelineError) -> Self {
        match err {
            crate::error::DeleteMediaCapturePipelineError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteMediaCapturePipelineError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DeleteMediaCapturePipelineError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteMediaCapturePipelineError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::DeleteMediaCapturePipelineError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::DeleteMediaCapturePipelineError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::DeleteMediaCapturePipelineError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::DeleteMediaCapturePipelineError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteMeetingError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteMeetingError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteMeetingError> for Error {
    fn from(err: crate::error::DeleteMeetingError) -> Self {
        match err {
            crate::error::DeleteMeetingError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteMeetingError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DeleteMeetingError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteMeetingError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::DeleteMeetingError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::DeleteMeetingError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::DeleteMeetingError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::DeleteMeetingError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeletePhoneNumberError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeletePhoneNumberError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeletePhoneNumberError> for Error {
    fn from(err: crate::error::DeletePhoneNumberError) -> Self {
        match err {
            crate::error::DeletePhoneNumberError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeletePhoneNumberError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DeletePhoneNumberError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeletePhoneNumberError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::DeletePhoneNumberError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::DeletePhoneNumberError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::DeletePhoneNumberError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::DeletePhoneNumberError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteProxySessionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteProxySessionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteProxySessionError> for Error {
    fn from(err: crate::error::DeleteProxySessionError) -> Self {
        match err {
            crate::error::DeleteProxySessionError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteProxySessionError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DeleteProxySessionError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteProxySessionError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::DeleteProxySessionError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::DeleteProxySessionError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::DeleteProxySessionError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::DeleteProxySessionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteRoomError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteRoomError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteRoomError> for Error {
    fn from(err: crate::error::DeleteRoomError) -> Self {
        match err {
            crate::error::DeleteRoomError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteRoomError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DeleteRoomError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteRoomError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::DeleteRoomError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::DeleteRoomError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::DeleteRoomError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::DeleteRoomError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteRoomMembershipError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteRoomMembershipError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteRoomMembershipError> for Error {
    fn from(err: crate::error::DeleteRoomMembershipError) -> Self {
        match err {
            crate::error::DeleteRoomMembershipError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteRoomMembershipError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DeleteRoomMembershipError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteRoomMembershipError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::DeleteRoomMembershipError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::DeleteRoomMembershipError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::DeleteRoomMembershipError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::DeleteRoomMembershipError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteSipMediaApplicationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteSipMediaApplicationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteSipMediaApplicationError> for Error {
    fn from(err: crate::error::DeleteSipMediaApplicationError) -> Self {
        match err {
            crate::error::DeleteSipMediaApplicationError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteSipMediaApplicationError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteSipMediaApplicationError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DeleteSipMediaApplicationError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteSipMediaApplicationError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::DeleteSipMediaApplicationError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::DeleteSipMediaApplicationError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::DeleteSipMediaApplicationError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::DeleteSipMediaApplicationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteSipRuleError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteSipRuleError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteSipRuleError> for Error {
    fn from(err: crate::error::DeleteSipRuleError) -> Self {
        match err {
            crate::error::DeleteSipRuleError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteSipRuleError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteSipRuleError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DeleteSipRuleError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteSipRuleError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::DeleteSipRuleError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::DeleteSipRuleError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::DeleteSipRuleError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::DeleteSipRuleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteVoiceConnectorError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteVoiceConnectorError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteVoiceConnectorError> for Error {
    fn from(err: crate::error::DeleteVoiceConnectorError) -> Self {
        match err {
            crate::error::DeleteVoiceConnectorError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteVoiceConnectorError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteVoiceConnectorError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DeleteVoiceConnectorError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteVoiceConnectorError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::DeleteVoiceConnectorError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::DeleteVoiceConnectorError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::DeleteVoiceConnectorError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::DeleteVoiceConnectorError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::DeleteVoiceConnectorEmergencyCallingConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DeleteVoiceConnectorEmergencyCallingConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteVoiceConnectorEmergencyCallingConfigurationError> for Error {
    fn from(err: crate::error::DeleteVoiceConnectorEmergencyCallingConfigurationError) -> Self {
        match err {
            crate::error::DeleteVoiceConnectorEmergencyCallingConfigurationError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::DeleteVoiceConnectorEmergencyCallingConfigurationError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::DeleteVoiceConnectorEmergencyCallingConfigurationError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::DeleteVoiceConnectorEmergencyCallingConfigurationError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::DeleteVoiceConnectorEmergencyCallingConfigurationError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::DeleteVoiceConnectorEmergencyCallingConfigurationError::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::DeleteVoiceConnectorEmergencyCallingConfigurationError::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::DeleteVoiceConnectorEmergencyCallingConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteVoiceConnectorGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteVoiceConnectorGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteVoiceConnectorGroupError> for Error {
    fn from(err: crate::error::DeleteVoiceConnectorGroupError) -> Self {
        match err {
            crate::error::DeleteVoiceConnectorGroupError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteVoiceConnectorGroupError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteVoiceConnectorGroupError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DeleteVoiceConnectorGroupError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteVoiceConnectorGroupError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::DeleteVoiceConnectorGroupError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::DeleteVoiceConnectorGroupError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::DeleteVoiceConnectorGroupError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::DeleteVoiceConnectorGroupError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DeleteVoiceConnectorOriginationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DeleteVoiceConnectorOriginationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteVoiceConnectorOriginationError> for Error {
    fn from(err: crate::error::DeleteVoiceConnectorOriginationError) -> Self {
        match err {
            crate::error::DeleteVoiceConnectorOriginationError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteVoiceConnectorOriginationError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DeleteVoiceConnectorOriginationError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteVoiceConnectorOriginationError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::DeleteVoiceConnectorOriginationError::ServiceUnavailableException(
                inner,
            ) => Error::ServiceUnavailableException(inner),
            crate::error::DeleteVoiceConnectorOriginationError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::DeleteVoiceConnectorOriginationError::UnauthorizedClientException(
                inner,
            ) => Error::UnauthorizedClientException(inner),
            crate::error::DeleteVoiceConnectorOriginationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteVoiceConnectorProxyError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteVoiceConnectorProxyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteVoiceConnectorProxyError> for Error {
    fn from(err: crate::error::DeleteVoiceConnectorProxyError) -> Self {
        match err {
            crate::error::DeleteVoiceConnectorProxyError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteVoiceConnectorProxyError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DeleteVoiceConnectorProxyError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteVoiceConnectorProxyError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::DeleteVoiceConnectorProxyError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::DeleteVoiceConnectorProxyError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::DeleteVoiceConnectorProxyError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::DeleteVoiceConnectorProxyError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::DeleteVoiceConnectorStreamingConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DeleteVoiceConnectorStreamingConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteVoiceConnectorStreamingConfigurationError> for Error {
    fn from(err: crate::error::DeleteVoiceConnectorStreamingConfigurationError) -> Self {
        match err {
            crate::error::DeleteVoiceConnectorStreamingConfigurationError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::DeleteVoiceConnectorStreamingConfigurationError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::DeleteVoiceConnectorStreamingConfigurationError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::DeleteVoiceConnectorStreamingConfigurationError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::DeleteVoiceConnectorStreamingConfigurationError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::DeleteVoiceConnectorStreamingConfigurationError::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::DeleteVoiceConnectorStreamingConfigurationError::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::DeleteVoiceConnectorStreamingConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DeleteVoiceConnectorTerminationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DeleteVoiceConnectorTerminationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteVoiceConnectorTerminationError> for Error {
    fn from(err: crate::error::DeleteVoiceConnectorTerminationError) -> Self {
        match err {
            crate::error::DeleteVoiceConnectorTerminationError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteVoiceConnectorTerminationError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DeleteVoiceConnectorTerminationError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteVoiceConnectorTerminationError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::DeleteVoiceConnectorTerminationError::ServiceUnavailableException(
                inner,
            ) => Error::ServiceUnavailableException(inner),
            crate::error::DeleteVoiceConnectorTerminationError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::DeleteVoiceConnectorTerminationError::UnauthorizedClientException(
                inner,
            ) => Error::UnauthorizedClientException(inner),
            crate::error::DeleteVoiceConnectorTerminationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::DeleteVoiceConnectorTerminationCredentialsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DeleteVoiceConnectorTerminationCredentialsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteVoiceConnectorTerminationCredentialsError> for Error {
    fn from(err: crate::error::DeleteVoiceConnectorTerminationCredentialsError) -> Self {
        match err {
            crate::error::DeleteVoiceConnectorTerminationCredentialsError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::DeleteVoiceConnectorTerminationCredentialsError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::DeleteVoiceConnectorTerminationCredentialsError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::DeleteVoiceConnectorTerminationCredentialsError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::DeleteVoiceConnectorTerminationCredentialsError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::DeleteVoiceConnectorTerminationCredentialsError::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::DeleteVoiceConnectorTerminationCredentialsError::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::DeleteVoiceConnectorTerminationCredentialsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeAppInstanceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeAppInstanceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeAppInstanceError> for Error {
    fn from(err: crate::error::DescribeAppInstanceError) -> Self {
        match err {
            crate::error::DescribeAppInstanceError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DescribeAppInstanceError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DescribeAppInstanceError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::DescribeAppInstanceError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::DescribeAppInstanceError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::DescribeAppInstanceError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::DescribeAppInstanceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeAppInstanceAdminError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeAppInstanceAdminError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeAppInstanceAdminError> for Error {
    fn from(err: crate::error::DescribeAppInstanceAdminError) -> Self {
        match err {
            crate::error::DescribeAppInstanceAdminError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DescribeAppInstanceAdminError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DescribeAppInstanceAdminError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::DescribeAppInstanceAdminError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::DescribeAppInstanceAdminError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::DescribeAppInstanceAdminError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::DescribeAppInstanceAdminError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeAppInstanceUserError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeAppInstanceUserError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeAppInstanceUserError> for Error {
    fn from(err: crate::error::DescribeAppInstanceUserError) -> Self {
        match err {
            crate::error::DescribeAppInstanceUserError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DescribeAppInstanceUserError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DescribeAppInstanceUserError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::DescribeAppInstanceUserError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::DescribeAppInstanceUserError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::DescribeAppInstanceUserError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::DescribeAppInstanceUserError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeChannelError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeChannelError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeChannelError> for Error {
    fn from(err: crate::error::DescribeChannelError) -> Self {
        match err {
            crate::error::DescribeChannelError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DescribeChannelError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DescribeChannelError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::DescribeChannelError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::DescribeChannelError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::DescribeChannelError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::DescribeChannelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeChannelBanError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeChannelBanError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeChannelBanError> for Error {
    fn from(err: crate::error::DescribeChannelBanError) -> Self {
        match err {
            crate::error::DescribeChannelBanError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DescribeChannelBanError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DescribeChannelBanError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DescribeChannelBanError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::DescribeChannelBanError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::DescribeChannelBanError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::DescribeChannelBanError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::DescribeChannelBanError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeChannelMembershipError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeChannelMembershipError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeChannelMembershipError> for Error {
    fn from(err: crate::error::DescribeChannelMembershipError) -> Self {
        match err {
            crate::error::DescribeChannelMembershipError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DescribeChannelMembershipError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DescribeChannelMembershipError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DescribeChannelMembershipError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::DescribeChannelMembershipError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::DescribeChannelMembershipError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::DescribeChannelMembershipError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::DescribeChannelMembershipError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::DescribeChannelMembershipForAppInstanceUserError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeChannelMembershipForAppInstanceUserError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeChannelMembershipForAppInstanceUserError> for Error {
    fn from(err: crate::error::DescribeChannelMembershipForAppInstanceUserError) -> Self {
        match err {
            crate::error::DescribeChannelMembershipForAppInstanceUserError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::DescribeChannelMembershipForAppInstanceUserError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::DescribeChannelMembershipForAppInstanceUserError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::DescribeChannelMembershipForAppInstanceUserError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::DescribeChannelMembershipForAppInstanceUserError::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::DescribeChannelMembershipForAppInstanceUserError::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::DescribeChannelMembershipForAppInstanceUserError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::DescribeChannelModeratedByAppInstanceUserError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeChannelModeratedByAppInstanceUserError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeChannelModeratedByAppInstanceUserError> for Error {
    fn from(err: crate::error::DescribeChannelModeratedByAppInstanceUserError) -> Self {
        match err {
            crate::error::DescribeChannelModeratedByAppInstanceUserError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::DescribeChannelModeratedByAppInstanceUserError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::DescribeChannelModeratedByAppInstanceUserError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::DescribeChannelModeratedByAppInstanceUserError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::DescribeChannelModeratedByAppInstanceUserError::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::DescribeChannelModeratedByAppInstanceUserError::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::DescribeChannelModeratedByAppInstanceUserError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeChannelModeratorError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeChannelModeratorError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeChannelModeratorError> for Error {
    fn from(err: crate::error::DescribeChannelModeratorError) -> Self {
        match err {
            crate::error::DescribeChannelModeratorError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DescribeChannelModeratorError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DescribeChannelModeratorError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DescribeChannelModeratorError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::DescribeChannelModeratorError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::DescribeChannelModeratorError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::DescribeChannelModeratorError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::DescribeChannelModeratorError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DisassociatePhoneNumberFromUserError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DisassociatePhoneNumberFromUserError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DisassociatePhoneNumberFromUserError> for Error {
    fn from(err: crate::error::DisassociatePhoneNumberFromUserError) -> Self {
        match err {
            crate::error::DisassociatePhoneNumberFromUserError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DisassociatePhoneNumberFromUserError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DisassociatePhoneNumberFromUserError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DisassociatePhoneNumberFromUserError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::DisassociatePhoneNumberFromUserError::ServiceUnavailableException(
                inner,
            ) => Error::ServiceUnavailableException(inner),
            crate::error::DisassociatePhoneNumberFromUserError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::DisassociatePhoneNumberFromUserError::UnauthorizedClientException(
                inner,
            ) => Error::UnauthorizedClientException(inner),
            crate::error::DisassociatePhoneNumberFromUserError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::DisassociatePhoneNumbersFromVoiceConnectorError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DisassociatePhoneNumbersFromVoiceConnectorError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DisassociatePhoneNumbersFromVoiceConnectorError> for Error {
    fn from(err: crate::error::DisassociatePhoneNumbersFromVoiceConnectorError) -> Self {
        match err {
            crate::error::DisassociatePhoneNumbersFromVoiceConnectorError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::DisassociatePhoneNumbersFromVoiceConnectorError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::DisassociatePhoneNumbersFromVoiceConnectorError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::DisassociatePhoneNumbersFromVoiceConnectorError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::DisassociatePhoneNumbersFromVoiceConnectorError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::DisassociatePhoneNumbersFromVoiceConnectorError::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::DisassociatePhoneNumbersFromVoiceConnectorError::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::DisassociatePhoneNumbersFromVoiceConnectorError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::DisassociatePhoneNumbersFromVoiceConnectorGroupError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DisassociatePhoneNumbersFromVoiceConnectorGroupError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DisassociatePhoneNumbersFromVoiceConnectorGroupError> for Error {
    fn from(err: crate::error::DisassociatePhoneNumbersFromVoiceConnectorGroupError) -> Self {
        match err {
            crate::error::DisassociatePhoneNumbersFromVoiceConnectorGroupError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::DisassociatePhoneNumbersFromVoiceConnectorGroupError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::DisassociatePhoneNumbersFromVoiceConnectorGroupError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::DisassociatePhoneNumbersFromVoiceConnectorGroupError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::DisassociatePhoneNumbersFromVoiceConnectorGroupError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::DisassociatePhoneNumbersFromVoiceConnectorGroupError::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::DisassociatePhoneNumbersFromVoiceConnectorGroupError::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::DisassociatePhoneNumbersFromVoiceConnectorGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::DisassociateSigninDelegateGroupsFromAccountError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DisassociateSigninDelegateGroupsFromAccountError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DisassociateSigninDelegateGroupsFromAccountError> for Error {
    fn from(err: crate::error::DisassociateSigninDelegateGroupsFromAccountError) -> Self {
        match err {
            crate::error::DisassociateSigninDelegateGroupsFromAccountError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::DisassociateSigninDelegateGroupsFromAccountError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::DisassociateSigninDelegateGroupsFromAccountError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::DisassociateSigninDelegateGroupsFromAccountError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::DisassociateSigninDelegateGroupsFromAccountError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::DisassociateSigninDelegateGroupsFromAccountError::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::DisassociateSigninDelegateGroupsFromAccountError::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::DisassociateSigninDelegateGroupsFromAccountError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetAccountError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetAccountError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetAccountError> for Error {
    fn from(err: crate::error::GetAccountError) -> Self {
        match err {
            crate::error::GetAccountError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetAccountError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetAccountError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetAccountError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::GetAccountError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::GetAccountError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::GetAccountError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::GetAccountError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetAccountSettingsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetAccountSettingsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetAccountSettingsError> for Error {
    fn from(err: crate::error::GetAccountSettingsError) -> Self {
        match err {
            crate::error::GetAccountSettingsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetAccountSettingsError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetAccountSettingsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetAccountSettingsError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::GetAccountSettingsError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::GetAccountSettingsError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::GetAccountSettingsError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::GetAccountSettingsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::GetAppInstanceRetentionSettingsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::GetAppInstanceRetentionSettingsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetAppInstanceRetentionSettingsError> for Error {
    fn from(err: crate::error::GetAppInstanceRetentionSettingsError) -> Self {
        match err {
            crate::error::GetAppInstanceRetentionSettingsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetAppInstanceRetentionSettingsError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetAppInstanceRetentionSettingsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetAppInstanceRetentionSettingsError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::GetAppInstanceRetentionSettingsError::ServiceUnavailableException(
                inner,
            ) => Error::ServiceUnavailableException(inner),
            crate::error::GetAppInstanceRetentionSettingsError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::GetAppInstanceRetentionSettingsError::UnauthorizedClientException(
                inner,
            ) => Error::UnauthorizedClientException(inner),
            crate::error::GetAppInstanceRetentionSettingsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::GetAppInstanceStreamingConfigurationsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::GetAppInstanceStreamingConfigurationsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetAppInstanceStreamingConfigurationsError> for Error {
    fn from(err: crate::error::GetAppInstanceStreamingConfigurationsError) -> Self {
        match err {
            crate::error::GetAppInstanceStreamingConfigurationsError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::GetAppInstanceStreamingConfigurationsError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::GetAppInstanceStreamingConfigurationsError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::GetAppInstanceStreamingConfigurationsError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::GetAppInstanceStreamingConfigurationsError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::GetAppInstanceStreamingConfigurationsError::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::GetAppInstanceStreamingConfigurationsError::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::GetAppInstanceStreamingConfigurationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetAttendeeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetAttendeeError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetAttendeeError> for Error {
    fn from(err: crate::error::GetAttendeeError) -> Self {
        match err {
            crate::error::GetAttendeeError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetAttendeeError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetAttendeeError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetAttendeeError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::GetAttendeeError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::GetAttendeeError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::GetAttendeeError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::GetAttendeeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetBotError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetBotError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetBotError> for Error {
    fn from(err: crate::error::GetBotError) -> Self {
        match err {
            crate::error::GetBotError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetBotError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetBotError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::GetBotError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::GetBotError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::GetBotError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::GetBotError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::GetBotError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetChannelMessageError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetChannelMessageError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetChannelMessageError> for Error {
    fn from(err: crate::error::GetChannelMessageError) -> Self {
        match err {
            crate::error::GetChannelMessageError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetChannelMessageError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetChannelMessageError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetChannelMessageError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::GetChannelMessageError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::GetChannelMessageError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::GetChannelMessageError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::GetChannelMessageError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetEventsConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetEventsConfigurationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetEventsConfigurationError> for Error {
    fn from(err: crate::error::GetEventsConfigurationError) -> Self {
        match err {
            crate::error::GetEventsConfigurationError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetEventsConfigurationError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetEventsConfigurationError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetEventsConfigurationError::ResourceLimitExceededException(inner) => {
                Error::ResourceLimitExceededException(inner)
            }
            crate::error::GetEventsConfigurationError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::GetEventsConfigurationError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::GetEventsConfigurationError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::GetEventsConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetGlobalSettingsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetGlobalSettingsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetGlobalSettingsError> for Error {
    fn from(err: crate::error::GetGlobalSettingsError) -> Self {
        match err {
            crate::error::GetGlobalSettingsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetGlobalSettingsError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetGlobalSettingsError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::GetGlobalSettingsError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::GetGlobalSettingsError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::GetGlobalSettingsError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::GetGlobalSettingsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetMediaCapturePipelineError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetMediaCapturePipelineError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetMediaCapturePipelineError> for Error {
    fn from(err: crate::error::GetMediaCapturePipelineError) -> Self {
        match err {
            crate::error::GetMediaCapturePipelineError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetMediaCapturePipelineError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetMediaCapturePipelineError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetMediaCapturePipelineError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::GetMediaCapturePipelineError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::GetMediaCapturePipelineError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::GetMediaCapturePipelineError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::GetMediaCapturePipelineError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetMeetingError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetMeetingError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetMeetingError> for Error {
    fn from(err: crate::error::GetMeetingError) -> Self {
        match err {
            crate::error::GetMeetingError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetMeetingError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetMeetingError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetMeetingError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::GetMeetingError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::GetMeetingError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::GetMeetingError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::GetMeetingError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetMessagingSessionEndpointError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetMessagingSessionEndpointError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetMessagingSessionEndpointError> for Error {
    fn from(err: crate::error::GetMessagingSessionEndpointError) -> Self {
        match err {
            crate::error::GetMessagingSessionEndpointError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetMessagingSessionEndpointError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::GetMessagingSessionEndpointError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::GetMessagingSessionEndpointError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::GetMessagingSessionEndpointError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::GetMessagingSessionEndpointError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetPhoneNumberError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetPhoneNumberError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetPhoneNumberError> for Error {
    fn from(err: crate::error::GetPhoneNumberError) -> Self {
        match err {
            crate::error::GetPhoneNumberError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetPhoneNumberError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetPhoneNumberError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetPhoneNumberError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::GetPhoneNumberError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::GetPhoneNumberError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::GetPhoneNumberError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::GetPhoneNumberError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetPhoneNumberOrderError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetPhoneNumberOrderError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetPhoneNumberOrderError> for Error {
    fn from(err: crate::error::GetPhoneNumberOrderError) -> Self {
        match err {
            crate::error::GetPhoneNumberOrderError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetPhoneNumberOrderError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetPhoneNumberOrderError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetPhoneNumberOrderError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::GetPhoneNumberOrderError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::GetPhoneNumberOrderError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::GetPhoneNumberOrderError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::GetPhoneNumberOrderError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetPhoneNumberSettingsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetPhoneNumberSettingsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetPhoneNumberSettingsError> for Error {
    fn from(err: crate::error::GetPhoneNumberSettingsError) -> Self {
        match err {
            crate::error::GetPhoneNumberSettingsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetPhoneNumberSettingsError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetPhoneNumberSettingsError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::GetPhoneNumberSettingsError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::GetPhoneNumberSettingsError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::GetPhoneNumberSettingsError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::GetPhoneNumberSettingsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetProxySessionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetProxySessionError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetProxySessionError> for Error {
    fn from(err: crate::error::GetProxySessionError) -> Self {
        match err {
            crate::error::GetProxySessionError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetProxySessionError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetProxySessionError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetProxySessionError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::GetProxySessionError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::GetProxySessionError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::GetProxySessionError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::GetProxySessionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetRetentionSettingsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetRetentionSettingsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetRetentionSettingsError> for Error {
    fn from(err: crate::error::GetRetentionSettingsError) -> Self {
        match err {
            crate::error::GetRetentionSettingsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetRetentionSettingsError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetRetentionSettingsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetRetentionSettingsError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::GetRetentionSettingsError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::GetRetentionSettingsError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::GetRetentionSettingsError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::GetRetentionSettingsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetRoomError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetRoomError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetRoomError> for Error {
    fn from(err: crate::error::GetRoomError) -> Self {
        match err {
            crate::error::GetRoomError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetRoomError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetRoomError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::GetRoomError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::GetRoomError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::GetRoomError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::GetRoomError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::GetRoomError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetSipMediaApplicationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetSipMediaApplicationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetSipMediaApplicationError> for Error {
    fn from(err: crate::error::GetSipMediaApplicationError) -> Self {
        match err {
            crate::error::GetSipMediaApplicationError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetSipMediaApplicationError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetSipMediaApplicationError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetSipMediaApplicationError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::GetSipMediaApplicationError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::GetSipMediaApplicationError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::GetSipMediaApplicationError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::GetSipMediaApplicationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::GetSipMediaApplicationLoggingConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::GetSipMediaApplicationLoggingConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetSipMediaApplicationLoggingConfigurationError> for Error {
    fn from(err: crate::error::GetSipMediaApplicationLoggingConfigurationError) -> Self {
        match err {
            crate::error::GetSipMediaApplicationLoggingConfigurationError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::GetSipMediaApplicationLoggingConfigurationError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::GetSipMediaApplicationLoggingConfigurationError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::GetSipMediaApplicationLoggingConfigurationError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::GetSipMediaApplicationLoggingConfigurationError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::GetSipMediaApplicationLoggingConfigurationError::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::GetSipMediaApplicationLoggingConfigurationError::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::GetSipMediaApplicationLoggingConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetSipRuleError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetSipRuleError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetSipRuleError> for Error {
    fn from(err: crate::error::GetSipRuleError) -> Self {
        match err {
            crate::error::GetSipRuleError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetSipRuleError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetSipRuleError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetSipRuleError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::GetSipRuleError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::GetSipRuleError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::GetSipRuleError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::GetSipRuleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetUserError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetUserError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetUserError> for Error {
    fn from(err: crate::error::GetUserError) -> Self {
        match err {
            crate::error::GetUserError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetUserError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetUserError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::GetUserError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::GetUserError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::GetUserError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::GetUserError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::GetUserError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetUserSettingsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetUserSettingsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetUserSettingsError> for Error {
    fn from(err: crate::error::GetUserSettingsError) -> Self {
        match err {
            crate::error::GetUserSettingsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetUserSettingsError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetUserSettingsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetUserSettingsError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::GetUserSettingsError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::GetUserSettingsError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::GetUserSettingsError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::GetUserSettingsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetVoiceConnectorError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetVoiceConnectorError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetVoiceConnectorError> for Error {
    fn from(err: crate::error::GetVoiceConnectorError) -> Self {
        match err {
            crate::error::GetVoiceConnectorError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetVoiceConnectorError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetVoiceConnectorError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetVoiceConnectorError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::GetVoiceConnectorError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::GetVoiceConnectorError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::GetVoiceConnectorError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::GetVoiceConnectorError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::GetVoiceConnectorEmergencyCallingConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::GetVoiceConnectorEmergencyCallingConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetVoiceConnectorEmergencyCallingConfigurationError> for Error {
    fn from(err: crate::error::GetVoiceConnectorEmergencyCallingConfigurationError) -> Self {
        match err {
            crate::error::GetVoiceConnectorEmergencyCallingConfigurationError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::GetVoiceConnectorEmergencyCallingConfigurationError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::GetVoiceConnectorEmergencyCallingConfigurationError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::GetVoiceConnectorEmergencyCallingConfigurationError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::GetVoiceConnectorEmergencyCallingConfigurationError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::GetVoiceConnectorEmergencyCallingConfigurationError::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::GetVoiceConnectorEmergencyCallingConfigurationError::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::GetVoiceConnectorEmergencyCallingConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetVoiceConnectorGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetVoiceConnectorGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetVoiceConnectorGroupError> for Error {
    fn from(err: crate::error::GetVoiceConnectorGroupError) -> Self {
        match err {
            crate::error::GetVoiceConnectorGroupError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetVoiceConnectorGroupError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetVoiceConnectorGroupError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetVoiceConnectorGroupError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::GetVoiceConnectorGroupError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::GetVoiceConnectorGroupError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::GetVoiceConnectorGroupError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::GetVoiceConnectorGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::GetVoiceConnectorLoggingConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::GetVoiceConnectorLoggingConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetVoiceConnectorLoggingConfigurationError> for Error {
    fn from(err: crate::error::GetVoiceConnectorLoggingConfigurationError) -> Self {
        match err {
            crate::error::GetVoiceConnectorLoggingConfigurationError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::GetVoiceConnectorLoggingConfigurationError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::GetVoiceConnectorLoggingConfigurationError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::GetVoiceConnectorLoggingConfigurationError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::GetVoiceConnectorLoggingConfigurationError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::GetVoiceConnectorLoggingConfigurationError::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::GetVoiceConnectorLoggingConfigurationError::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::GetVoiceConnectorLoggingConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetVoiceConnectorOriginationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetVoiceConnectorOriginationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetVoiceConnectorOriginationError> for Error {
    fn from(err: crate::error::GetVoiceConnectorOriginationError) -> Self {
        match err {
            crate::error::GetVoiceConnectorOriginationError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetVoiceConnectorOriginationError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetVoiceConnectorOriginationError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetVoiceConnectorOriginationError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::GetVoiceConnectorOriginationError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::GetVoiceConnectorOriginationError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::GetVoiceConnectorOriginationError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::GetVoiceConnectorOriginationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetVoiceConnectorProxyError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetVoiceConnectorProxyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetVoiceConnectorProxyError> for Error {
    fn from(err: crate::error::GetVoiceConnectorProxyError) -> Self {
        match err {
            crate::error::GetVoiceConnectorProxyError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetVoiceConnectorProxyError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetVoiceConnectorProxyError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetVoiceConnectorProxyError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::GetVoiceConnectorProxyError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::GetVoiceConnectorProxyError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::GetVoiceConnectorProxyError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::GetVoiceConnectorProxyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::GetVoiceConnectorStreamingConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::GetVoiceConnectorStreamingConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetVoiceConnectorStreamingConfigurationError> for Error {
    fn from(err: crate::error::GetVoiceConnectorStreamingConfigurationError) -> Self {
        match err {
            crate::error::GetVoiceConnectorStreamingConfigurationError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::GetVoiceConnectorStreamingConfigurationError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::GetVoiceConnectorStreamingConfigurationError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::GetVoiceConnectorStreamingConfigurationError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::GetVoiceConnectorStreamingConfigurationError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::GetVoiceConnectorStreamingConfigurationError::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::GetVoiceConnectorStreamingConfigurationError::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::GetVoiceConnectorStreamingConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetVoiceConnectorTerminationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetVoiceConnectorTerminationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetVoiceConnectorTerminationError> for Error {
    fn from(err: crate::error::GetVoiceConnectorTerminationError) -> Self {
        match err {
            crate::error::GetVoiceConnectorTerminationError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetVoiceConnectorTerminationError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetVoiceConnectorTerminationError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetVoiceConnectorTerminationError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::GetVoiceConnectorTerminationError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::GetVoiceConnectorTerminationError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::GetVoiceConnectorTerminationError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::GetVoiceConnectorTerminationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<crate::error::GetVoiceConnectorTerminationHealthError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::GetVoiceConnectorTerminationHealthError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetVoiceConnectorTerminationHealthError> for Error {
    fn from(err: crate::error::GetVoiceConnectorTerminationHealthError) -> Self {
        match err {
            crate::error::GetVoiceConnectorTerminationHealthError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetVoiceConnectorTerminationHealthError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetVoiceConnectorTerminationHealthError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetVoiceConnectorTerminationHealthError::ServiceFailureException(
                inner,
            ) => Error::ServiceFailureException(inner),
            crate::error::GetVoiceConnectorTerminationHealthError::ServiceUnavailableException(
                inner,
            ) => Error::ServiceUnavailableException(inner),
            crate::error::GetVoiceConnectorTerminationHealthError::ThrottledClientException(
                inner,
            ) => Error::ThrottledClientException(inner),
            crate::error::GetVoiceConnectorTerminationHealthError::UnauthorizedClientException(
                inner,
            ) => Error::UnauthorizedClientException(inner),
            crate::error::GetVoiceConnectorTerminationHealthError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::InviteUsersError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::InviteUsersError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::InviteUsersError> for Error {
    fn from(err: crate::error::InviteUsersError) -> Self {
        match err {
            crate::error::InviteUsersError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::InviteUsersError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::InviteUsersError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::InviteUsersError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::InviteUsersError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::InviteUsersError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::InviteUsersError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::InviteUsersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListAccountsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListAccountsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListAccountsError> for Error {
    fn from(err: crate::error::ListAccountsError) -> Self {
        match err {
            crate::error::ListAccountsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::ListAccountsError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::ListAccountsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::ListAccountsError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::ListAccountsError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::ListAccountsError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::ListAccountsError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::ListAccountsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListAppInstanceAdminsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListAppInstanceAdminsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListAppInstanceAdminsError> for Error {
    fn from(err: crate::error::ListAppInstanceAdminsError) -> Self {
        match err {
            crate::error::ListAppInstanceAdminsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::ListAppInstanceAdminsError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::ListAppInstanceAdminsError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::ListAppInstanceAdminsError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::ListAppInstanceAdminsError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::ListAppInstanceAdminsError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::ListAppInstanceAdminsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListAppInstancesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListAppInstancesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListAppInstancesError> for Error {
    fn from(err: crate::error::ListAppInstancesError) -> Self {
        match err {
            crate::error::ListAppInstancesError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::ListAppInstancesError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::ListAppInstancesError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::ListAppInstancesError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::ListAppInstancesError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::ListAppInstancesError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::ListAppInstancesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListAppInstanceUsersError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListAppInstanceUsersError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListAppInstanceUsersError> for Error {
    fn from(err: crate::error::ListAppInstanceUsersError) -> Self {
        match err {
            crate::error::ListAppInstanceUsersError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::ListAppInstanceUsersError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::ListAppInstanceUsersError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::ListAppInstanceUsersError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::ListAppInstanceUsersError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::ListAppInstanceUsersError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::ListAppInstanceUsersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListAttendeesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListAttendeesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListAttendeesError> for Error {
    fn from(err: crate::error::ListAttendeesError) -> Self {
        match err {
            crate::error::ListAttendeesError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::ListAttendeesError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::ListAttendeesError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::ListAttendeesError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::ListAttendeesError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::ListAttendeesError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::ListAttendeesError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::ListAttendeesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListAttendeeTagsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListAttendeeTagsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListAttendeeTagsError> for Error {
    fn from(err: crate::error::ListAttendeeTagsError) -> Self {
        match err {
            crate::error::ListAttendeeTagsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::ListAttendeeTagsError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::ListAttendeeTagsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::ListAttendeeTagsError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::ListAttendeeTagsError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::ListAttendeeTagsError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::ListAttendeeTagsError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::ListAttendeeTagsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListBotsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListBotsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListBotsError> for Error {
    fn from(err: crate::error::ListBotsError) -> Self {
        match err {
            crate::error::ListBotsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::ListBotsError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::ListBotsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::ListBotsError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::ListBotsError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::ListBotsError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::ListBotsError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::ListBotsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListChannelBansError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListChannelBansError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListChannelBansError> for Error {
    fn from(err: crate::error::ListChannelBansError) -> Self {
        match err {
            crate::error::ListChannelBansError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::ListChannelBansError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::ListChannelBansError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::ListChannelBansError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::ListChannelBansError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::ListChannelBansError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::ListChannelBansError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListChannelMembershipsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListChannelMembershipsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListChannelMembershipsError> for Error {
    fn from(err: crate::error::ListChannelMembershipsError) -> Self {
        match err {
            crate::error::ListChannelMembershipsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::ListChannelMembershipsError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::ListChannelMembershipsError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::ListChannelMembershipsError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::ListChannelMembershipsError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::ListChannelMembershipsError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::ListChannelMembershipsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::ListChannelMembershipsForAppInstanceUserError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::ListChannelMembershipsForAppInstanceUserError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListChannelMembershipsForAppInstanceUserError> for Error {
    fn from(err: crate::error::ListChannelMembershipsForAppInstanceUserError) -> Self {
        match err {
            crate::error::ListChannelMembershipsForAppInstanceUserError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::ListChannelMembershipsForAppInstanceUserError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::ListChannelMembershipsForAppInstanceUserError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::ListChannelMembershipsForAppInstanceUserError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::ListChannelMembershipsForAppInstanceUserError::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::ListChannelMembershipsForAppInstanceUserError::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::ListChannelMembershipsForAppInstanceUserError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListChannelMessagesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListChannelMessagesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListChannelMessagesError> for Error {
    fn from(err: crate::error::ListChannelMessagesError) -> Self {
        match err {
            crate::error::ListChannelMessagesError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::ListChannelMessagesError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::ListChannelMessagesError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::ListChannelMessagesError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::ListChannelMessagesError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::ListChannelMessagesError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::ListChannelMessagesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListChannelModeratorsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListChannelModeratorsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListChannelModeratorsError> for Error {
    fn from(err: crate::error::ListChannelModeratorsError) -> Self {
        match err {
            crate::error::ListChannelModeratorsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::ListChannelModeratorsError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::ListChannelModeratorsError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::ListChannelModeratorsError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::ListChannelModeratorsError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::ListChannelModeratorsError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::ListChannelModeratorsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListChannelsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListChannelsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListChannelsError> for Error {
    fn from(err: crate::error::ListChannelsError) -> Self {
        match err {
            crate::error::ListChannelsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::ListChannelsError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::ListChannelsError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::ListChannelsError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::ListChannelsError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::ListChannelsError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::ListChannelsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::ListChannelsModeratedByAppInstanceUserError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::ListChannelsModeratedByAppInstanceUserError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListChannelsModeratedByAppInstanceUserError> for Error {
    fn from(err: crate::error::ListChannelsModeratedByAppInstanceUserError) -> Self {
        match err {
            crate::error::ListChannelsModeratedByAppInstanceUserError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::ListChannelsModeratedByAppInstanceUserError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::ListChannelsModeratedByAppInstanceUserError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::ListChannelsModeratedByAppInstanceUserError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::ListChannelsModeratedByAppInstanceUserError::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::ListChannelsModeratedByAppInstanceUserError::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::ListChannelsModeratedByAppInstanceUserError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListMediaCapturePipelinesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListMediaCapturePipelinesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListMediaCapturePipelinesError> for Error {
    fn from(err: crate::error::ListMediaCapturePipelinesError) -> Self {
        match err {
            crate::error::ListMediaCapturePipelinesError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::ListMediaCapturePipelinesError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::ListMediaCapturePipelinesError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::ListMediaCapturePipelinesError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::ListMediaCapturePipelinesError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::ListMediaCapturePipelinesError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::ListMediaCapturePipelinesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListMeetingsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListMeetingsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListMeetingsError> for Error {
    fn from(err: crate::error::ListMeetingsError) -> Self {
        match err {
            crate::error::ListMeetingsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::ListMeetingsError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::ListMeetingsError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::ListMeetingsError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::ListMeetingsError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::ListMeetingsError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::ListMeetingsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListMeetingTagsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListMeetingTagsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListMeetingTagsError> for Error {
    fn from(err: crate::error::ListMeetingTagsError) -> Self {
        match err {
            crate::error::ListMeetingTagsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::ListMeetingTagsError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::ListMeetingTagsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::ListMeetingTagsError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::ListMeetingTagsError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::ListMeetingTagsError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::ListMeetingTagsError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::ListMeetingTagsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListPhoneNumberOrdersError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListPhoneNumberOrdersError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListPhoneNumberOrdersError> for Error {
    fn from(err: crate::error::ListPhoneNumberOrdersError) -> Self {
        match err {
            crate::error::ListPhoneNumberOrdersError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::ListPhoneNumberOrdersError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::ListPhoneNumberOrdersError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::ListPhoneNumberOrdersError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::ListPhoneNumberOrdersError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::ListPhoneNumberOrdersError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::ListPhoneNumberOrdersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListPhoneNumbersError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListPhoneNumbersError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListPhoneNumbersError> for Error {
    fn from(err: crate::error::ListPhoneNumbersError) -> Self {
        match err {
            crate::error::ListPhoneNumbersError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::ListPhoneNumbersError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::ListPhoneNumbersError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::ListPhoneNumbersError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::ListPhoneNumbersError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::ListPhoneNumbersError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::ListPhoneNumbersError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::ListPhoneNumbersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListProxySessionsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListProxySessionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListProxySessionsError> for Error {
    fn from(err: crate::error::ListProxySessionsError) -> Self {
        match err {
            crate::error::ListProxySessionsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::ListProxySessionsError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::ListProxySessionsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::ListProxySessionsError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::ListProxySessionsError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::ListProxySessionsError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::ListProxySessionsError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::ListProxySessionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListRoomMembershipsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListRoomMembershipsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListRoomMembershipsError> for Error {
    fn from(err: crate::error::ListRoomMembershipsError) -> Self {
        match err {
            crate::error::ListRoomMembershipsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::ListRoomMembershipsError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::ListRoomMembershipsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::ListRoomMembershipsError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::ListRoomMembershipsError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::ListRoomMembershipsError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::ListRoomMembershipsError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::ListRoomMembershipsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListRoomsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListRoomsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListRoomsError> for Error {
    fn from(err: crate::error::ListRoomsError) -> Self {
        match err {
            crate::error::ListRoomsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::ListRoomsError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::ListRoomsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::ListRoomsError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::ListRoomsError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::ListRoomsError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::ListRoomsError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::ListRoomsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListSipMediaApplicationsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListSipMediaApplicationsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListSipMediaApplicationsError> for Error {
    fn from(err: crate::error::ListSipMediaApplicationsError) -> Self {
        match err {
            crate::error::ListSipMediaApplicationsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::ListSipMediaApplicationsError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::ListSipMediaApplicationsError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::ListSipMediaApplicationsError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::ListSipMediaApplicationsError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::ListSipMediaApplicationsError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::ListSipMediaApplicationsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListSipRulesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListSipRulesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListSipRulesError> for Error {
    fn from(err: crate::error::ListSipRulesError) -> Self {
        match err {
            crate::error::ListSipRulesError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::ListSipRulesError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::ListSipRulesError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::ListSipRulesError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::ListSipRulesError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::ListSipRulesError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::ListSipRulesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::ListSupportedPhoneNumberCountriesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::ListSupportedPhoneNumberCountriesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListSupportedPhoneNumberCountriesError> for Error {
    fn from(err: crate::error::ListSupportedPhoneNumberCountriesError) -> Self {
        match err {
            crate::error::ListSupportedPhoneNumberCountriesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListSupportedPhoneNumberCountriesError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::ListSupportedPhoneNumberCountriesError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::ListSupportedPhoneNumberCountriesError::ServiceFailureException(
                inner,
            ) => Error::ServiceFailureException(inner),
            crate::error::ListSupportedPhoneNumberCountriesError::ServiceUnavailableException(
                inner,
            ) => Error::ServiceUnavailableException(inner),
            crate::error::ListSupportedPhoneNumberCountriesError::ThrottledClientException(
                inner,
            ) => Error::ThrottledClientException(inner),
            crate::error::ListSupportedPhoneNumberCountriesError::UnauthorizedClientException(
                inner,
            ) => Error::UnauthorizedClientException(inner),
            crate::error::ListSupportedPhoneNumberCountriesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListTagsForResourceError> for Error {
    fn from(err: crate::error::ListTagsForResourceError) -> Self {
        match err {
            crate::error::ListTagsForResourceError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::ListTagsForResourceError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::ListTagsForResourceError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::ListTagsForResourceError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::ListTagsForResourceError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::ListTagsForResourceError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListUsersError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListUsersError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListUsersError> for Error {
    fn from(err: crate::error::ListUsersError) -> Self {
        match err {
            crate::error::ListUsersError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::ListUsersError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::ListUsersError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::ListUsersError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::ListUsersError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::ListUsersError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::ListUsersError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::ListUsersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListVoiceConnectorGroupsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListVoiceConnectorGroupsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListVoiceConnectorGroupsError> for Error {
    fn from(err: crate::error::ListVoiceConnectorGroupsError) -> Self {
        match err {
            crate::error::ListVoiceConnectorGroupsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::ListVoiceConnectorGroupsError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::ListVoiceConnectorGroupsError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::ListVoiceConnectorGroupsError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::ListVoiceConnectorGroupsError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::ListVoiceConnectorGroupsError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::ListVoiceConnectorGroupsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListVoiceConnectorsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListVoiceConnectorsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListVoiceConnectorsError> for Error {
    fn from(err: crate::error::ListVoiceConnectorsError) -> Self {
        match err {
            crate::error::ListVoiceConnectorsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::ListVoiceConnectorsError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::ListVoiceConnectorsError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::ListVoiceConnectorsError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::ListVoiceConnectorsError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::ListVoiceConnectorsError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::ListVoiceConnectorsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::ListVoiceConnectorTerminationCredentialsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::ListVoiceConnectorTerminationCredentialsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListVoiceConnectorTerminationCredentialsError> for Error {
    fn from(err: crate::error::ListVoiceConnectorTerminationCredentialsError) -> Self {
        match err {
            crate::error::ListVoiceConnectorTerminationCredentialsError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::ListVoiceConnectorTerminationCredentialsError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::ListVoiceConnectorTerminationCredentialsError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::ListVoiceConnectorTerminationCredentialsError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::ListVoiceConnectorTerminationCredentialsError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::ListVoiceConnectorTerminationCredentialsError::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::ListVoiceConnectorTerminationCredentialsError::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::ListVoiceConnectorTerminationCredentialsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::LogoutUserError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::LogoutUserError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::LogoutUserError> for Error {
    fn from(err: crate::error::LogoutUserError) -> Self {
        match err {
            crate::error::LogoutUserError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::LogoutUserError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::LogoutUserError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::LogoutUserError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::LogoutUserError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::LogoutUserError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::LogoutUserError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::LogoutUserError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::PutAppInstanceRetentionSettingsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::PutAppInstanceRetentionSettingsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutAppInstanceRetentionSettingsError> for Error {
    fn from(err: crate::error::PutAppInstanceRetentionSettingsError) -> Self {
        match err {
            crate::error::PutAppInstanceRetentionSettingsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::PutAppInstanceRetentionSettingsError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::PutAppInstanceRetentionSettingsError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::PutAppInstanceRetentionSettingsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::PutAppInstanceRetentionSettingsError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::PutAppInstanceRetentionSettingsError::ServiceUnavailableException(
                inner,
            ) => Error::ServiceUnavailableException(inner),
            crate::error::PutAppInstanceRetentionSettingsError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::PutAppInstanceRetentionSettingsError::UnauthorizedClientException(
                inner,
            ) => Error::UnauthorizedClientException(inner),
            crate::error::PutAppInstanceRetentionSettingsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::PutAppInstanceStreamingConfigurationsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::PutAppInstanceStreamingConfigurationsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutAppInstanceStreamingConfigurationsError> for Error {
    fn from(err: crate::error::PutAppInstanceStreamingConfigurationsError) -> Self {
        match err {
            crate::error::PutAppInstanceStreamingConfigurationsError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::PutAppInstanceStreamingConfigurationsError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::PutAppInstanceStreamingConfigurationsError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::PutAppInstanceStreamingConfigurationsError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::PutAppInstanceStreamingConfigurationsError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::PutAppInstanceStreamingConfigurationsError::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::PutAppInstanceStreamingConfigurationsError::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::PutAppInstanceStreamingConfigurationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutEventsConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::PutEventsConfigurationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutEventsConfigurationError> for Error {
    fn from(err: crate::error::PutEventsConfigurationError) -> Self {
        match err {
            crate::error::PutEventsConfigurationError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::PutEventsConfigurationError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::PutEventsConfigurationError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::PutEventsConfigurationError::ResourceLimitExceededException(inner) => {
                Error::ResourceLimitExceededException(inner)
            }
            crate::error::PutEventsConfigurationError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::PutEventsConfigurationError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::PutEventsConfigurationError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::PutEventsConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutRetentionSettingsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::PutRetentionSettingsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutRetentionSettingsError> for Error {
    fn from(err: crate::error::PutRetentionSettingsError) -> Self {
        match err {
            crate::error::PutRetentionSettingsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::PutRetentionSettingsError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::PutRetentionSettingsError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::PutRetentionSettingsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::PutRetentionSettingsError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::PutRetentionSettingsError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::PutRetentionSettingsError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::PutRetentionSettingsError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::PutRetentionSettingsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::PutSipMediaApplicationLoggingConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::PutSipMediaApplicationLoggingConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutSipMediaApplicationLoggingConfigurationError> for Error {
    fn from(err: crate::error::PutSipMediaApplicationLoggingConfigurationError) -> Self {
        match err {
            crate::error::PutSipMediaApplicationLoggingConfigurationError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::PutSipMediaApplicationLoggingConfigurationError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::PutSipMediaApplicationLoggingConfigurationError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::PutSipMediaApplicationLoggingConfigurationError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::PutSipMediaApplicationLoggingConfigurationError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::PutSipMediaApplicationLoggingConfigurationError::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::PutSipMediaApplicationLoggingConfigurationError::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::PutSipMediaApplicationLoggingConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::PutVoiceConnectorEmergencyCallingConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::PutVoiceConnectorEmergencyCallingConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutVoiceConnectorEmergencyCallingConfigurationError> for Error {
    fn from(err: crate::error::PutVoiceConnectorEmergencyCallingConfigurationError) -> Self {
        match err {
            crate::error::PutVoiceConnectorEmergencyCallingConfigurationError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::PutVoiceConnectorEmergencyCallingConfigurationError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::PutVoiceConnectorEmergencyCallingConfigurationError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::PutVoiceConnectorEmergencyCallingConfigurationError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::PutVoiceConnectorEmergencyCallingConfigurationError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::PutVoiceConnectorEmergencyCallingConfigurationError::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::PutVoiceConnectorEmergencyCallingConfigurationError::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::PutVoiceConnectorEmergencyCallingConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::PutVoiceConnectorLoggingConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::PutVoiceConnectorLoggingConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutVoiceConnectorLoggingConfigurationError> for Error {
    fn from(err: crate::error::PutVoiceConnectorLoggingConfigurationError) -> Self {
        match err {
            crate::error::PutVoiceConnectorLoggingConfigurationError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::PutVoiceConnectorLoggingConfigurationError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::PutVoiceConnectorLoggingConfigurationError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::PutVoiceConnectorLoggingConfigurationError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::PutVoiceConnectorLoggingConfigurationError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::PutVoiceConnectorLoggingConfigurationError::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::PutVoiceConnectorLoggingConfigurationError::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::PutVoiceConnectorLoggingConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutVoiceConnectorOriginationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::PutVoiceConnectorOriginationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutVoiceConnectorOriginationError> for Error {
    fn from(err: crate::error::PutVoiceConnectorOriginationError) -> Self {
        match err {
            crate::error::PutVoiceConnectorOriginationError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::PutVoiceConnectorOriginationError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::PutVoiceConnectorOriginationError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::PutVoiceConnectorOriginationError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::PutVoiceConnectorOriginationError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::PutVoiceConnectorOriginationError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::PutVoiceConnectorOriginationError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::PutVoiceConnectorOriginationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutVoiceConnectorProxyError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::PutVoiceConnectorProxyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutVoiceConnectorProxyError> for Error {
    fn from(err: crate::error::PutVoiceConnectorProxyError) -> Self {
        match err {
            crate::error::PutVoiceConnectorProxyError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::PutVoiceConnectorProxyError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::PutVoiceConnectorProxyError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::PutVoiceConnectorProxyError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::PutVoiceConnectorProxyError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::PutVoiceConnectorProxyError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::PutVoiceConnectorProxyError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::PutVoiceConnectorProxyError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::PutVoiceConnectorProxyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::PutVoiceConnectorStreamingConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::PutVoiceConnectorStreamingConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutVoiceConnectorStreamingConfigurationError> for Error {
    fn from(err: crate::error::PutVoiceConnectorStreamingConfigurationError) -> Self {
        match err {
            crate::error::PutVoiceConnectorStreamingConfigurationError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::PutVoiceConnectorStreamingConfigurationError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::PutVoiceConnectorStreamingConfigurationError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::PutVoiceConnectorStreamingConfigurationError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::PutVoiceConnectorStreamingConfigurationError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::PutVoiceConnectorStreamingConfigurationError::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::PutVoiceConnectorStreamingConfigurationError::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::PutVoiceConnectorStreamingConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutVoiceConnectorTerminationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::PutVoiceConnectorTerminationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutVoiceConnectorTerminationError> for Error {
    fn from(err: crate::error::PutVoiceConnectorTerminationError) -> Self {
        match err {
            crate::error::PutVoiceConnectorTerminationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::PutVoiceConnectorTerminationError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::PutVoiceConnectorTerminationError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::PutVoiceConnectorTerminationError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::PutVoiceConnectorTerminationError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::PutVoiceConnectorTerminationError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::PutVoiceConnectorTerminationError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::PutVoiceConnectorTerminationError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::PutVoiceConnectorTerminationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::PutVoiceConnectorTerminationCredentialsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::PutVoiceConnectorTerminationCredentialsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutVoiceConnectorTerminationCredentialsError> for Error {
    fn from(err: crate::error::PutVoiceConnectorTerminationCredentialsError) -> Self {
        match err {
            crate::error::PutVoiceConnectorTerminationCredentialsError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::PutVoiceConnectorTerminationCredentialsError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::PutVoiceConnectorTerminationCredentialsError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::PutVoiceConnectorTerminationCredentialsError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::PutVoiceConnectorTerminationCredentialsError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::PutVoiceConnectorTerminationCredentialsError::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::PutVoiceConnectorTerminationCredentialsError::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::PutVoiceConnectorTerminationCredentialsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RedactChannelMessageError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::RedactChannelMessageError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RedactChannelMessageError> for Error {
    fn from(err: crate::error::RedactChannelMessageError) -> Self {
        match err {
            crate::error::RedactChannelMessageError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::RedactChannelMessageError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::RedactChannelMessageError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::RedactChannelMessageError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::RedactChannelMessageError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::RedactChannelMessageError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::RedactChannelMessageError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RedactConversationMessageError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::RedactConversationMessageError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RedactConversationMessageError> for Error {
    fn from(err: crate::error::RedactConversationMessageError) -> Self {
        match err {
            crate::error::RedactConversationMessageError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::RedactConversationMessageError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::RedactConversationMessageError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::RedactConversationMessageError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::RedactConversationMessageError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::RedactConversationMessageError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::RedactConversationMessageError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::RedactConversationMessageError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RedactRoomMessageError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::RedactRoomMessageError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RedactRoomMessageError> for Error {
    fn from(err: crate::error::RedactRoomMessageError) -> Self {
        match err {
            crate::error::RedactRoomMessageError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::RedactRoomMessageError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::RedactRoomMessageError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::RedactRoomMessageError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::RedactRoomMessageError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::RedactRoomMessageError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::RedactRoomMessageError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::RedactRoomMessageError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RegenerateSecurityTokenError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::RegenerateSecurityTokenError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RegenerateSecurityTokenError> for Error {
    fn from(err: crate::error::RegenerateSecurityTokenError) -> Self {
        match err {
            crate::error::RegenerateSecurityTokenError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::RegenerateSecurityTokenError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::RegenerateSecurityTokenError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::RegenerateSecurityTokenError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::RegenerateSecurityTokenError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::RegenerateSecurityTokenError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::RegenerateSecurityTokenError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::RegenerateSecurityTokenError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ResetPersonalPINError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ResetPersonalPINError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ResetPersonalPINError> for Error {
    fn from(err: crate::error::ResetPersonalPINError) -> Self {
        match err {
            crate::error::ResetPersonalPINError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::ResetPersonalPINError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::ResetPersonalPINError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::ResetPersonalPINError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::ResetPersonalPINError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::ResetPersonalPINError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::ResetPersonalPINError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::ResetPersonalPINError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RestorePhoneNumberError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::RestorePhoneNumberError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RestorePhoneNumberError> for Error {
    fn from(err: crate::error::RestorePhoneNumberError) -> Self {
        match err {
            crate::error::RestorePhoneNumberError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::RestorePhoneNumberError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::RestorePhoneNumberError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::RestorePhoneNumberError::ResourceLimitExceededException(inner) => {
                Error::ResourceLimitExceededException(inner)
            }
            crate::error::RestorePhoneNumberError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::RestorePhoneNumberError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::RestorePhoneNumberError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::RestorePhoneNumberError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::RestorePhoneNumberError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::SearchAvailablePhoneNumbersError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::SearchAvailablePhoneNumbersError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::SearchAvailablePhoneNumbersError> for Error {
    fn from(err: crate::error::SearchAvailablePhoneNumbersError) -> Self {
        match err {
            crate::error::SearchAvailablePhoneNumbersError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::SearchAvailablePhoneNumbersError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::SearchAvailablePhoneNumbersError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::SearchAvailablePhoneNumbersError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::SearchAvailablePhoneNumbersError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::SearchAvailablePhoneNumbersError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::SearchAvailablePhoneNumbersError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::SearchAvailablePhoneNumbersError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::SendChannelMessageError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::SendChannelMessageError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::SendChannelMessageError> for Error {
    fn from(err: crate::error::SendChannelMessageError) -> Self {
        match err {
            crate::error::SendChannelMessageError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::SendChannelMessageError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::SendChannelMessageError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::SendChannelMessageError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::SendChannelMessageError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::SendChannelMessageError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::SendChannelMessageError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::SendChannelMessageError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartMeetingTranscriptionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::StartMeetingTranscriptionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StartMeetingTranscriptionError> for Error {
    fn from(err: crate::error::StartMeetingTranscriptionError) -> Self {
        match err {
            crate::error::StartMeetingTranscriptionError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::StartMeetingTranscriptionError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::StartMeetingTranscriptionError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::StartMeetingTranscriptionError::ResourceLimitExceededException(inner) => {
                Error::ResourceLimitExceededException(inner)
            }
            crate::error::StartMeetingTranscriptionError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::StartMeetingTranscriptionError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::StartMeetingTranscriptionError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::StartMeetingTranscriptionError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::StartMeetingTranscriptionError::UnprocessableEntityException(inner) => {
                Error::UnprocessableEntityException(inner)
            }
            crate::error::StartMeetingTranscriptionError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StopMeetingTranscriptionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::StopMeetingTranscriptionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StopMeetingTranscriptionError> for Error {
    fn from(err: crate::error::StopMeetingTranscriptionError) -> Self {
        match err {
            crate::error::StopMeetingTranscriptionError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::StopMeetingTranscriptionError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::StopMeetingTranscriptionError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::StopMeetingTranscriptionError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::StopMeetingTranscriptionError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::StopMeetingTranscriptionError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::StopMeetingTranscriptionError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::StopMeetingTranscriptionError::UnprocessableEntityException(inner) => {
                Error::UnprocessableEntityException(inner)
            }
            crate::error::StopMeetingTranscriptionError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::TagAttendeeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::TagAttendeeError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::TagAttendeeError> for Error {
    fn from(err: crate::error::TagAttendeeError) -> Self {
        match err {
            crate::error::TagAttendeeError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::TagAttendeeError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::TagAttendeeError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::TagAttendeeError::ResourceLimitExceededException(inner) => {
                Error::ResourceLimitExceededException(inner)
            }
            crate::error::TagAttendeeError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::TagAttendeeError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::TagAttendeeError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::TagAttendeeError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::TagAttendeeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::TagMeetingError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::TagMeetingError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::TagMeetingError> for Error {
    fn from(err: crate::error::TagMeetingError) -> Self {
        match err {
            crate::error::TagMeetingError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::TagMeetingError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::TagMeetingError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::TagMeetingError::ResourceLimitExceededException(inner) => {
                Error::ResourceLimitExceededException(inner)
            }
            crate::error::TagMeetingError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::TagMeetingError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::TagMeetingError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::TagMeetingError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::TagMeetingError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::TagResourceError> for Error {
    fn from(err: crate::error::TagResourceError) -> Self {
        match err {
            crate::error::TagResourceError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::TagResourceError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::TagResourceError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::TagResourceError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::TagResourceError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::TagResourceError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UntagAttendeeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UntagAttendeeError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UntagAttendeeError> for Error {
    fn from(err: crate::error::UntagAttendeeError) -> Self {
        match err {
            crate::error::UntagAttendeeError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UntagAttendeeError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::UntagAttendeeError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UntagAttendeeError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::UntagAttendeeError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::UntagAttendeeError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::UntagAttendeeError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::UntagAttendeeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UntagMeetingError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UntagMeetingError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UntagMeetingError> for Error {
    fn from(err: crate::error::UntagMeetingError) -> Self {
        match err {
            crate::error::UntagMeetingError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UntagMeetingError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::UntagMeetingError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UntagMeetingError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::UntagMeetingError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::UntagMeetingError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::UntagMeetingError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::UntagMeetingError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UntagResourceError> for Error {
    fn from(err: crate::error::UntagResourceError) -> Self {
        match err {
            crate::error::UntagResourceError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UntagResourceError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::UntagResourceError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UntagResourceError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::UntagResourceError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::UntagResourceError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateAccountError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateAccountError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateAccountError> for Error {
    fn from(err: crate::error::UpdateAccountError) -> Self {
        match err {
            crate::error::UpdateAccountError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateAccountError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::UpdateAccountError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateAccountError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::UpdateAccountError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::UpdateAccountError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::UpdateAccountError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::UpdateAccountError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateAccountSettingsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateAccountSettingsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateAccountSettingsError> for Error {
    fn from(err: crate::error::UpdateAccountSettingsError) -> Self {
        match err {
            crate::error::UpdateAccountSettingsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateAccountSettingsError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateAccountSettingsError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::UpdateAccountSettingsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateAccountSettingsError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::UpdateAccountSettingsError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::UpdateAccountSettingsError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::UpdateAccountSettingsError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::UpdateAccountSettingsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateAppInstanceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateAppInstanceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateAppInstanceError> for Error {
    fn from(err: crate::error::UpdateAppInstanceError) -> Self {
        match err {
            crate::error::UpdateAppInstanceError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateAppInstanceError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateAppInstanceError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::UpdateAppInstanceError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::UpdateAppInstanceError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::UpdateAppInstanceError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::UpdateAppInstanceError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::UpdateAppInstanceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateAppInstanceUserError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateAppInstanceUserError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateAppInstanceUserError> for Error {
    fn from(err: crate::error::UpdateAppInstanceUserError) -> Self {
        match err {
            crate::error::UpdateAppInstanceUserError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateAppInstanceUserError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateAppInstanceUserError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::UpdateAppInstanceUserError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::UpdateAppInstanceUserError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::UpdateAppInstanceUserError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::UpdateAppInstanceUserError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::UpdateAppInstanceUserError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateBotError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateBotError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateBotError> for Error {
    fn from(err: crate::error::UpdateBotError) -> Self {
        match err {
            crate::error::UpdateBotError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateBotError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::UpdateBotError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateBotError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::UpdateBotError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::UpdateBotError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::UpdateBotError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::UpdateBotError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateChannelError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateChannelError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateChannelError> for Error {
    fn from(err: crate::error::UpdateChannelError) -> Self {
        match err {
            crate::error::UpdateChannelError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateChannelError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateChannelError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::UpdateChannelError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::UpdateChannelError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::UpdateChannelError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::UpdateChannelError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::UpdateChannelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateChannelMessageError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateChannelMessageError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateChannelMessageError> for Error {
    fn from(err: crate::error::UpdateChannelMessageError) -> Self {
        match err {
            crate::error::UpdateChannelMessageError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateChannelMessageError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateChannelMessageError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::UpdateChannelMessageError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::UpdateChannelMessageError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::UpdateChannelMessageError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::UpdateChannelMessageError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::UpdateChannelMessageError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateChannelReadMarkerError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateChannelReadMarkerError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateChannelReadMarkerError> for Error {
    fn from(err: crate::error::UpdateChannelReadMarkerError) -> Self {
        match err {
            crate::error::UpdateChannelReadMarkerError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateChannelReadMarkerError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateChannelReadMarkerError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::UpdateChannelReadMarkerError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::UpdateChannelReadMarkerError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::UpdateChannelReadMarkerError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::UpdateChannelReadMarkerError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::UpdateChannelReadMarkerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateGlobalSettingsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateGlobalSettingsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateGlobalSettingsError> for Error {
    fn from(err: crate::error::UpdateGlobalSettingsError) -> Self {
        match err {
            crate::error::UpdateGlobalSettingsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateGlobalSettingsError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::UpdateGlobalSettingsError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::UpdateGlobalSettingsError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::UpdateGlobalSettingsError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::UpdateGlobalSettingsError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::UpdateGlobalSettingsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdatePhoneNumberError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdatePhoneNumberError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdatePhoneNumberError> for Error {
    fn from(err: crate::error::UpdatePhoneNumberError) -> Self {
        match err {
            crate::error::UpdatePhoneNumberError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdatePhoneNumberError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdatePhoneNumberError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::UpdatePhoneNumberError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdatePhoneNumberError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::UpdatePhoneNumberError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::UpdatePhoneNumberError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::UpdatePhoneNumberError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::UpdatePhoneNumberError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdatePhoneNumberSettingsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdatePhoneNumberSettingsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdatePhoneNumberSettingsError> for Error {
    fn from(err: crate::error::UpdatePhoneNumberSettingsError) -> Self {
        match err {
            crate::error::UpdatePhoneNumberSettingsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdatePhoneNumberSettingsError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::UpdatePhoneNumberSettingsError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::UpdatePhoneNumberSettingsError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::UpdatePhoneNumberSettingsError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::UpdatePhoneNumberSettingsError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::UpdatePhoneNumberSettingsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateProxySessionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateProxySessionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateProxySessionError> for Error {
    fn from(err: crate::error::UpdateProxySessionError) -> Self {
        match err {
            crate::error::UpdateProxySessionError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateProxySessionError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::UpdateProxySessionError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateProxySessionError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::UpdateProxySessionError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::UpdateProxySessionError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::UpdateProxySessionError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::UpdateProxySessionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateRoomError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateRoomError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateRoomError> for Error {
    fn from(err: crate::error::UpdateRoomError) -> Self {
        match err {
            crate::error::UpdateRoomError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateRoomError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::UpdateRoomError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateRoomError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::UpdateRoomError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::UpdateRoomError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::UpdateRoomError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::UpdateRoomError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateRoomMembershipError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateRoomMembershipError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateRoomMembershipError> for Error {
    fn from(err: crate::error::UpdateRoomMembershipError) -> Self {
        match err {
            crate::error::UpdateRoomMembershipError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateRoomMembershipError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::UpdateRoomMembershipError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateRoomMembershipError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::UpdateRoomMembershipError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::UpdateRoomMembershipError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::UpdateRoomMembershipError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::UpdateRoomMembershipError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateSipMediaApplicationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateSipMediaApplicationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateSipMediaApplicationError> for Error {
    fn from(err: crate::error::UpdateSipMediaApplicationError) -> Self {
        match err {
            crate::error::UpdateSipMediaApplicationError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateSipMediaApplicationError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateSipMediaApplicationError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::UpdateSipMediaApplicationError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateSipMediaApplicationError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::UpdateSipMediaApplicationError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::UpdateSipMediaApplicationError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::UpdateSipMediaApplicationError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::UpdateSipMediaApplicationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateSipMediaApplicationCallError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateSipMediaApplicationCallError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateSipMediaApplicationCallError> for Error {
    fn from(err: crate::error::UpdateSipMediaApplicationCallError) -> Self {
        match err {
            crate::error::UpdateSipMediaApplicationCallError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateSipMediaApplicationCallError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::UpdateSipMediaApplicationCallError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateSipMediaApplicationCallError::ResourceLimitExceededException(
                inner,
            ) => Error::ResourceLimitExceededException(inner),
            crate::error::UpdateSipMediaApplicationCallError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::UpdateSipMediaApplicationCallError::ServiceUnavailableException(
                inner,
            ) => Error::ServiceUnavailableException(inner),
            crate::error::UpdateSipMediaApplicationCallError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::UpdateSipMediaApplicationCallError::UnauthorizedClientException(
                inner,
            ) => Error::UnauthorizedClientException(inner),
            crate::error::UpdateSipMediaApplicationCallError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateSipRuleError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateSipRuleError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateSipRuleError> for Error {
    fn from(err: crate::error::UpdateSipRuleError) -> Self {
        match err {
            crate::error::UpdateSipRuleError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateSipRuleError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateSipRuleError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::UpdateSipRuleError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateSipRuleError::ResourceLimitExceededException(inner) => {
                Error::ResourceLimitExceededException(inner)
            }
            crate::error::UpdateSipRuleError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::UpdateSipRuleError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::UpdateSipRuleError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::UpdateSipRuleError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::UpdateSipRuleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateUserError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateUserError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateUserError> for Error {
    fn from(err: crate::error::UpdateUserError) -> Self {
        match err {
            crate::error::UpdateUserError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateUserError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::UpdateUserError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateUserError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::UpdateUserError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::UpdateUserError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::UpdateUserError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::UpdateUserError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateUserSettingsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateUserSettingsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateUserSettingsError> for Error {
    fn from(err: crate::error::UpdateUserSettingsError) -> Self {
        match err {
            crate::error::UpdateUserSettingsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateUserSettingsError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::UpdateUserSettingsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateUserSettingsError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::UpdateUserSettingsError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::UpdateUserSettingsError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::UpdateUserSettingsError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::UpdateUserSettingsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateVoiceConnectorError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateVoiceConnectorError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateVoiceConnectorError> for Error {
    fn from(err: crate::error::UpdateVoiceConnectorError) -> Self {
        match err {
            crate::error::UpdateVoiceConnectorError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateVoiceConnectorError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::UpdateVoiceConnectorError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateVoiceConnectorError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::UpdateVoiceConnectorError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::UpdateVoiceConnectorError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::UpdateVoiceConnectorError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::UpdateVoiceConnectorError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateVoiceConnectorGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateVoiceConnectorGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateVoiceConnectorGroupError> for Error {
    fn from(err: crate::error::UpdateVoiceConnectorGroupError) -> Self {
        match err {
            crate::error::UpdateVoiceConnectorGroupError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateVoiceConnectorGroupError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateVoiceConnectorGroupError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::UpdateVoiceConnectorGroupError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateVoiceConnectorGroupError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::UpdateVoiceConnectorGroupError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::UpdateVoiceConnectorGroupError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::UpdateVoiceConnectorGroupError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::UpdateVoiceConnectorGroupError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ValidateE911AddressError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ValidateE911AddressError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ValidateE911AddressError> for Error {
    fn from(err: crate::error::ValidateE911AddressError) -> Self {
        match err {
            crate::error::ValidateE911AddressError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::ValidateE911AddressError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::ValidateE911AddressError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::ValidateE911AddressError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::ValidateE911AddressError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::ValidateE911AddressError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::ValidateE911AddressError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::ValidateE911AddressError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::BadRequestException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::ForbiddenException(e) => e.request_id(),
            Self::NotFoundException(e) => e.request_id(),
            Self::ResourceLimitExceededException(e) => e.request_id(),
            Self::ServiceFailureException(e) => e.request_id(),
            Self::ServiceUnavailableException(e) => e.request_id(),
            Self::ThrottledClientException(e) => e.request_id(),
            Self::UnauthorizedClientException(e) => e.request_id(),
            Self::UnprocessableEntityException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
