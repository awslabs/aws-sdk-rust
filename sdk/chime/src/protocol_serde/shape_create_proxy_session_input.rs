// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_proxy_session_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_proxy_session::CreateProxySessionInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.capabilities {
        let mut array_2 = object.key("Capabilities").start_array();
        for item_3 in var_1 {
            {
                array_2.value().string(item_3.as_str());
            }
        }
        array_2.finish();
    }
    if let Some(var_4) = &input.expiry_minutes {
        object.key("ExpiryMinutes").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_4).into()),
        );
    }
    if let Some(var_5) = &input.geo_match_level {
        object.key("GeoMatchLevel").string(var_5.as_str());
    }
    if let Some(var_6) = &input.geo_match_params {
        #[allow(unused_mut)]
        let mut object_7 = object.key("GeoMatchParams").start_object();
        crate::protocol_serde::shape_geo_match_params::ser_geo_match_params(&mut object_7, var_6)?;
        object_7.finish();
    }
    if let Some(var_8) = &input.name {
        object.key("Name").string(var_8.as_str());
    }
    if let Some(var_9) = &input.number_selection_behavior {
        object.key("NumberSelectionBehavior").string(var_9.as_str());
    }
    if let Some(var_10) = &input.participant_phone_numbers {
        let mut array_11 = object.key("ParticipantPhoneNumbers").start_array();
        for item_12 in var_10 {
            {
                array_11.value().string(item_12.as_str());
            }
        }
        array_11.finish();
    }
    Ok(())
}
