// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_media_capture_pipeline::_create_media_capture_pipeline_output::CreateMediaCapturePipelineOutputBuilder;

pub use crate::operation::create_media_capture_pipeline::_create_media_capture_pipeline_input::CreateMediaCapturePipelineInputBuilder;

/// Fluent builder constructing a request to `CreateMediaCapturePipeline`.
///
/// <p>Creates a media capture pipeline.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateMediaCapturePipelineFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::create_media_capture_pipeline::builders::CreateMediaCapturePipelineInputBuilder
            }
impl CreateMediaCapturePipelineFluentBuilder {
    /// Creates a new `CreateMediaCapturePipeline`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::create_media_capture_pipeline::CreateMediaCapturePipeline,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::create_media_capture_pipeline::CreateMediaCapturePipelineError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::create_media_capture_pipeline::CreateMediaCapturePipelineOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::create_media_capture_pipeline::CreateMediaCapturePipelineError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>Source type from which the media artifacts will be captured. A Chime SDK Meeting is the only supported source.</p>
    pub fn source_type(mut self, input: crate::types::MediaPipelineSourceType) -> Self {
        self.inner = self.inner.source_type(input);
        self
    }
    /// <p>Source type from which the media artifacts will be captured. A Chime SDK Meeting is the only supported source.</p>
    pub fn set_source_type(
        mut self,
        input: std::option::Option<crate::types::MediaPipelineSourceType>,
    ) -> Self {
        self.inner = self.inner.set_source_type(input);
        self
    }
    /// <p>ARN of the source from which the media artifacts are captured.</p>
    pub fn source_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.source_arn(input.into());
        self
    }
    /// <p>ARN of the source from which the media artifacts are captured.</p>
    pub fn set_source_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_source_arn(input);
        self
    }
    /// <p>Destination type to which the media artifacts are saved. You must use an S3 bucket. </p>
    pub fn sink_type(mut self, input: crate::types::MediaPipelineSinkType) -> Self {
        self.inner = self.inner.sink_type(input);
        self
    }
    /// <p>Destination type to which the media artifacts are saved. You must use an S3 bucket. </p>
    pub fn set_sink_type(
        mut self,
        input: std::option::Option<crate::types::MediaPipelineSinkType>,
    ) -> Self {
        self.inner = self.inner.set_sink_type(input);
        self
    }
    /// <p>The ARN of the sink type.</p>
    pub fn sink_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.sink_arn(input.into());
        self
    }
    /// <p>The ARN of the sink type.</p>
    pub fn set_sink_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_sink_arn(input);
        self
    }
    /// <p>The token assigned to the client making the pipeline request.</p>
    pub fn client_request_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.client_request_token(input.into());
        self
    }
    /// <p>The token assigned to the client making the pipeline request.</p>
    pub fn set_client_request_token(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_client_request_token(input);
        self
    }
    /// <p>The configuration for a specified media capture pipeline. <code>SourceType</code> must be <code>ChimeSdkMeeting</code>.</p>
    pub fn chime_sdk_meeting_configuration(
        mut self,
        input: crate::types::ChimeSdkMeetingConfiguration,
    ) -> Self {
        self.inner = self.inner.chime_sdk_meeting_configuration(input);
        self
    }
    /// <p>The configuration for a specified media capture pipeline. <code>SourceType</code> must be <code>ChimeSdkMeeting</code>.</p>
    pub fn set_chime_sdk_meeting_configuration(
        mut self,
        input: std::option::Option<crate::types::ChimeSdkMeetingConfiguration>,
    ) -> Self {
        self.inner = self.inner.set_chime_sdk_meeting_configuration(input);
        self
    }
}
