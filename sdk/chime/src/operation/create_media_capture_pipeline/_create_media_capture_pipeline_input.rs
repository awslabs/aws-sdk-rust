// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct CreateMediaCapturePipelineInput {
    /// <p>Source type from which the media artifacts will be captured. A Chime SDK Meeting is the only supported source.</p>
    pub source_type: ::std::option::Option<crate::types::MediaPipelineSourceType>,
    /// <p>ARN of the source from which the media artifacts are captured.</p>
    pub source_arn: ::std::option::Option<::std::string::String>,
    /// <p>Destination type to which the media artifacts are saved. You must use an S3 bucket. </p>
    pub sink_type: ::std::option::Option<crate::types::MediaPipelineSinkType>,
    /// <p>The ARN of the sink type.</p>
    pub sink_arn: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier for the client request. The token makes the API request idempotent. Use a different token for different media pipeline requests.</p>
    pub client_request_token: ::std::option::Option<::std::string::String>,
    /// <p>The configuration for a specified media capture pipeline. <code>SourceType</code> must be <code>ChimeSdkMeeting</code>.</p>
    pub chime_sdk_meeting_configuration: ::std::option::Option<crate::types::ChimeSdkMeetingConfiguration>,
}
impl CreateMediaCapturePipelineInput {
    /// <p>Source type from which the media artifacts will be captured. A Chime SDK Meeting is the only supported source.</p>
    pub fn source_type(&self) -> ::std::option::Option<&crate::types::MediaPipelineSourceType> {
        self.source_type.as_ref()
    }
    /// <p>ARN of the source from which the media artifacts are captured.</p>
    pub fn source_arn(&self) -> ::std::option::Option<&str> {
        self.source_arn.as_deref()
    }
    /// <p>Destination type to which the media artifacts are saved. You must use an S3 bucket. </p>
    pub fn sink_type(&self) -> ::std::option::Option<&crate::types::MediaPipelineSinkType> {
        self.sink_type.as_ref()
    }
    /// <p>The ARN of the sink type.</p>
    pub fn sink_arn(&self) -> ::std::option::Option<&str> {
        self.sink_arn.as_deref()
    }
    /// <p>The unique identifier for the client request. The token makes the API request idempotent. Use a different token for different media pipeline requests.</p>
    pub fn client_request_token(&self) -> ::std::option::Option<&str> {
        self.client_request_token.as_deref()
    }
    /// <p>The configuration for a specified media capture pipeline. <code>SourceType</code> must be <code>ChimeSdkMeeting</code>.</p>
    pub fn chime_sdk_meeting_configuration(&self) -> ::std::option::Option<&crate::types::ChimeSdkMeetingConfiguration> {
        self.chime_sdk_meeting_configuration.as_ref()
    }
}
impl ::std::fmt::Debug for CreateMediaCapturePipelineInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateMediaCapturePipelineInput");
        formatter.field("source_type", &self.source_type);
        formatter.field("source_arn", &"*** Sensitive Data Redacted ***");
        formatter.field("sink_type", &self.sink_type);
        formatter.field("sink_arn", &"*** Sensitive Data Redacted ***");
        formatter.field("client_request_token", &"*** Sensitive Data Redacted ***");
        formatter.field("chime_sdk_meeting_configuration", &self.chime_sdk_meeting_configuration);
        formatter.finish()
    }
}
impl CreateMediaCapturePipelineInput {
    /// Creates a new builder-style object to manufacture [`CreateMediaCapturePipelineInput`](crate::operation::create_media_capture_pipeline::CreateMediaCapturePipelineInput).
    pub fn builder() -> crate::operation::create_media_capture_pipeline::builders::CreateMediaCapturePipelineInputBuilder {
        crate::operation::create_media_capture_pipeline::builders::CreateMediaCapturePipelineInputBuilder::default()
    }
}

/// A builder for [`CreateMediaCapturePipelineInput`](crate::operation::create_media_capture_pipeline::CreateMediaCapturePipelineInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct CreateMediaCapturePipelineInputBuilder {
    pub(crate) source_type: ::std::option::Option<crate::types::MediaPipelineSourceType>,
    pub(crate) source_arn: ::std::option::Option<::std::string::String>,
    pub(crate) sink_type: ::std::option::Option<crate::types::MediaPipelineSinkType>,
    pub(crate) sink_arn: ::std::option::Option<::std::string::String>,
    pub(crate) client_request_token: ::std::option::Option<::std::string::String>,
    pub(crate) chime_sdk_meeting_configuration: ::std::option::Option<crate::types::ChimeSdkMeetingConfiguration>,
}
impl CreateMediaCapturePipelineInputBuilder {
    /// <p>Source type from which the media artifacts will be captured. A Chime SDK Meeting is the only supported source.</p>
    /// This field is required.
    pub fn source_type(mut self, input: crate::types::MediaPipelineSourceType) -> Self {
        self.source_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Source type from which the media artifacts will be captured. A Chime SDK Meeting is the only supported source.</p>
    pub fn set_source_type(mut self, input: ::std::option::Option<crate::types::MediaPipelineSourceType>) -> Self {
        self.source_type = input;
        self
    }
    /// <p>Source type from which the media artifacts will be captured. A Chime SDK Meeting is the only supported source.</p>
    pub fn get_source_type(&self) -> &::std::option::Option<crate::types::MediaPipelineSourceType> {
        &self.source_type
    }
    /// <p>ARN of the source from which the media artifacts are captured.</p>
    /// This field is required.
    pub fn source_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>ARN of the source from which the media artifacts are captured.</p>
    pub fn set_source_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_arn = input;
        self
    }
    /// <p>ARN of the source from which the media artifacts are captured.</p>
    pub fn get_source_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_arn
    }
    /// <p>Destination type to which the media artifacts are saved. You must use an S3 bucket. </p>
    /// This field is required.
    pub fn sink_type(mut self, input: crate::types::MediaPipelineSinkType) -> Self {
        self.sink_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Destination type to which the media artifacts are saved. You must use an S3 bucket. </p>
    pub fn set_sink_type(mut self, input: ::std::option::Option<crate::types::MediaPipelineSinkType>) -> Self {
        self.sink_type = input;
        self
    }
    /// <p>Destination type to which the media artifacts are saved. You must use an S3 bucket. </p>
    pub fn get_sink_type(&self) -> &::std::option::Option<crate::types::MediaPipelineSinkType> {
        &self.sink_type
    }
    /// <p>The ARN of the sink type.</p>
    /// This field is required.
    pub fn sink_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.sink_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the sink type.</p>
    pub fn set_sink_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.sink_arn = input;
        self
    }
    /// <p>The ARN of the sink type.</p>
    pub fn get_sink_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.sink_arn
    }
    /// <p>The unique identifier for the client request. The token makes the API request idempotent. Use a different token for different media pipeline requests.</p>
    pub fn client_request_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_request_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier for the client request. The token makes the API request idempotent. Use a different token for different media pipeline requests.</p>
    pub fn set_client_request_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_request_token = input;
        self
    }
    /// <p>The unique identifier for the client request. The token makes the API request idempotent. Use a different token for different media pipeline requests.</p>
    pub fn get_client_request_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_request_token
    }
    /// <p>The configuration for a specified media capture pipeline. <code>SourceType</code> must be <code>ChimeSdkMeeting</code>.</p>
    pub fn chime_sdk_meeting_configuration(mut self, input: crate::types::ChimeSdkMeetingConfiguration) -> Self {
        self.chime_sdk_meeting_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration for a specified media capture pipeline. <code>SourceType</code> must be <code>ChimeSdkMeeting</code>.</p>
    pub fn set_chime_sdk_meeting_configuration(mut self, input: ::std::option::Option<crate::types::ChimeSdkMeetingConfiguration>) -> Self {
        self.chime_sdk_meeting_configuration = input;
        self
    }
    /// <p>The configuration for a specified media capture pipeline. <code>SourceType</code> must be <code>ChimeSdkMeeting</code>.</p>
    pub fn get_chime_sdk_meeting_configuration(&self) -> &::std::option::Option<crate::types::ChimeSdkMeetingConfiguration> {
        &self.chime_sdk_meeting_configuration
    }
    /// Consumes the builder and constructs a [`CreateMediaCapturePipelineInput`](crate::operation::create_media_capture_pipeline::CreateMediaCapturePipelineInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_media_capture_pipeline::CreateMediaCapturePipelineInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::create_media_capture_pipeline::CreateMediaCapturePipelineInput {
            source_type: self.source_type,
            source_arn: self.source_arn,
            sink_type: self.sink_type,
            sink_arn: self.sink_arn,
            client_request_token: self.client_request_token,
            chime_sdk_meeting_configuration: self.chime_sdk_meeting_configuration,
        })
    }
}
impl ::std::fmt::Debug for CreateMediaCapturePipelineInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateMediaCapturePipelineInputBuilder");
        formatter.field("source_type", &self.source_type);
        formatter.field("source_arn", &"*** Sensitive Data Redacted ***");
        formatter.field("sink_type", &self.sink_type);
        formatter.field("sink_arn", &"*** Sensitive Data Redacted ***");
        formatter.field("client_request_token", &"*** Sensitive Data Redacted ***");
        formatter.field("chime_sdk_meeting_configuration", &self.chime_sdk_meeting_configuration);
        formatter.finish()
    }
}
