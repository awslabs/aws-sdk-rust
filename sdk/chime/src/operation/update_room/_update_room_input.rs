// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct UpdateRoomInput {
    /// <p>The Amazon Chime account ID.</p>
    pub account_id: ::std::option::Option<::std::string::String>,
    /// <p>The room ID.</p>
    pub room_id: ::std::option::Option<::std::string::String>,
    /// <p>The room name.</p>
    pub name: ::std::option::Option<::std::string::String>,
}
impl UpdateRoomInput {
    /// <p>The Amazon Chime account ID.</p>
    pub fn account_id(&self) -> ::std::option::Option<&str> {
        self.account_id.as_deref()
    }
    /// <p>The room ID.</p>
    pub fn room_id(&self) -> ::std::option::Option<&str> {
        self.room_id.as_deref()
    }
    /// <p>The room name.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
}
impl ::std::fmt::Debug for UpdateRoomInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateRoomInput");
        formatter.field("account_id", &self.account_id);
        formatter.field("room_id", &self.room_id);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl UpdateRoomInput {
    /// Creates a new builder-style object to manufacture [`UpdateRoomInput`](crate::operation::update_room::UpdateRoomInput).
    pub fn builder() -> crate::operation::update_room::builders::UpdateRoomInputBuilder {
        crate::operation::update_room::builders::UpdateRoomInputBuilder::default()
    }
}

/// A builder for [`UpdateRoomInput`](crate::operation::update_room::UpdateRoomInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct UpdateRoomInputBuilder {
    pub(crate) account_id: ::std::option::Option<::std::string::String>,
    pub(crate) room_id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
}
impl UpdateRoomInputBuilder {
    /// <p>The Amazon Chime account ID.</p>
    /// This field is required.
    pub fn account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Chime account ID.</p>
    pub fn set_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.account_id = input;
        self
    }
    /// <p>The Amazon Chime account ID.</p>
    pub fn get_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.account_id
    }
    /// <p>The room ID.</p>
    /// This field is required.
    pub fn room_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.room_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The room ID.</p>
    pub fn set_room_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.room_id = input;
        self
    }
    /// <p>The room ID.</p>
    pub fn get_room_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.room_id
    }
    /// <p>The room name.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The room name.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The room name.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// Consumes the builder and constructs a [`UpdateRoomInput`](crate::operation::update_room::UpdateRoomInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::update_room::UpdateRoomInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_room::UpdateRoomInput {
            account_id: self.account_id,
            room_id: self.room_id,
            name: self.name,
        })
    }
}
impl ::std::fmt::Debug for UpdateRoomInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateRoomInputBuilder");
        formatter.field("account_id", &self.account_id);
        formatter.field("room_id", &self.room_id);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
