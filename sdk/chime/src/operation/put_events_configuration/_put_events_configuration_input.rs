// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct PutEventsConfigurationInput {
    /// <p>The Amazon Chime account ID.</p>
    pub account_id: ::std::option::Option<::std::string::String>,
    /// <p>The bot ID.</p>
    pub bot_id: ::std::option::Option<::std::string::String>,
    /// <p>HTTPS endpoint that allows the bot to receive outgoing events.</p>
    pub outbound_events_https_endpoint: ::std::option::Option<::std::string::String>,
    /// <p>Lambda function ARN that allows the bot to receive outgoing events.</p>
    pub lambda_function_arn: ::std::option::Option<::std::string::String>,
}
impl PutEventsConfigurationInput {
    /// <p>The Amazon Chime account ID.</p>
    pub fn account_id(&self) -> ::std::option::Option<&str> {
        self.account_id.as_deref()
    }
    /// <p>The bot ID.</p>
    pub fn bot_id(&self) -> ::std::option::Option<&str> {
        self.bot_id.as_deref()
    }
    /// <p>HTTPS endpoint that allows the bot to receive outgoing events.</p>
    pub fn outbound_events_https_endpoint(&self) -> ::std::option::Option<&str> {
        self.outbound_events_https_endpoint.as_deref()
    }
    /// <p>Lambda function ARN that allows the bot to receive outgoing events.</p>
    pub fn lambda_function_arn(&self) -> ::std::option::Option<&str> {
        self.lambda_function_arn.as_deref()
    }
}
impl ::std::fmt::Debug for PutEventsConfigurationInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("PutEventsConfigurationInput");
        formatter.field("account_id", &self.account_id);
        formatter.field("bot_id", &self.bot_id);
        formatter.field("outbound_events_https_endpoint", &"*** Sensitive Data Redacted ***");
        formatter.field("lambda_function_arn", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl PutEventsConfigurationInput {
    /// Creates a new builder-style object to manufacture [`PutEventsConfigurationInput`](crate::operation::put_events_configuration::PutEventsConfigurationInput).
    pub fn builder() -> crate::operation::put_events_configuration::builders::PutEventsConfigurationInputBuilder {
        crate::operation::put_events_configuration::builders::PutEventsConfigurationInputBuilder::default()
    }
}

/// A builder for [`PutEventsConfigurationInput`](crate::operation::put_events_configuration::PutEventsConfigurationInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct PutEventsConfigurationInputBuilder {
    pub(crate) account_id: ::std::option::Option<::std::string::String>,
    pub(crate) bot_id: ::std::option::Option<::std::string::String>,
    pub(crate) outbound_events_https_endpoint: ::std::option::Option<::std::string::String>,
    pub(crate) lambda_function_arn: ::std::option::Option<::std::string::String>,
}
impl PutEventsConfigurationInputBuilder {
    /// <p>The Amazon Chime account ID.</p>
    /// This field is required.
    pub fn account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Chime account ID.</p>
    pub fn set_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.account_id = input;
        self
    }
    /// <p>The Amazon Chime account ID.</p>
    pub fn get_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.account_id
    }
    /// <p>The bot ID.</p>
    /// This field is required.
    pub fn bot_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bot_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The bot ID.</p>
    pub fn set_bot_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bot_id = input;
        self
    }
    /// <p>The bot ID.</p>
    pub fn get_bot_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.bot_id
    }
    /// <p>HTTPS endpoint that allows the bot to receive outgoing events.</p>
    pub fn outbound_events_https_endpoint(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.outbound_events_https_endpoint = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>HTTPS endpoint that allows the bot to receive outgoing events.</p>
    pub fn set_outbound_events_https_endpoint(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.outbound_events_https_endpoint = input;
        self
    }
    /// <p>HTTPS endpoint that allows the bot to receive outgoing events.</p>
    pub fn get_outbound_events_https_endpoint(&self) -> &::std::option::Option<::std::string::String> {
        &self.outbound_events_https_endpoint
    }
    /// <p>Lambda function ARN that allows the bot to receive outgoing events.</p>
    pub fn lambda_function_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.lambda_function_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Lambda function ARN that allows the bot to receive outgoing events.</p>
    pub fn set_lambda_function_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.lambda_function_arn = input;
        self
    }
    /// <p>Lambda function ARN that allows the bot to receive outgoing events.</p>
    pub fn get_lambda_function_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.lambda_function_arn
    }
    /// Consumes the builder and constructs a [`PutEventsConfigurationInput`](crate::operation::put_events_configuration::PutEventsConfigurationInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::put_events_configuration::PutEventsConfigurationInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::put_events_configuration::PutEventsConfigurationInput {
            account_id: self.account_id,
            bot_id: self.bot_id,
            outbound_events_https_endpoint: self.outbound_events_https_endpoint,
            lambda_function_arn: self.lambda_function_arn,
        })
    }
}
impl ::std::fmt::Debug for PutEventsConfigurationInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("PutEventsConfigurationInputBuilder");
        formatter.field("account_id", &self.account_id);
        formatter.field("bot_id", &self.bot_id);
        formatter.field("outbound_events_https_endpoint", &"*** Sensitive Data Redacted ***");
        formatter.field("lambda_function_arn", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
