// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct AssociatePhoneNumberWithUserInput {
    /// <p>The Amazon Chime account ID.</p>
    #[doc(hidden)]
    pub account_id: std::option::Option<std::string::String>,
    /// <p>The user ID.</p>
    #[doc(hidden)]
    pub user_id: std::option::Option<std::string::String>,
    /// <p>The phone number, in E.164 format.</p>
    #[doc(hidden)]
    pub e164_phone_number: std::option::Option<std::string::String>,
}
impl AssociatePhoneNumberWithUserInput {
    /// <p>The Amazon Chime account ID.</p>
    pub fn account_id(&self) -> std::option::Option<&str> {
        self.account_id.as_deref()
    }
    /// <p>The user ID.</p>
    pub fn user_id(&self) -> std::option::Option<&str> {
        self.user_id.as_deref()
    }
    /// <p>The phone number, in E.164 format.</p>
    pub fn e164_phone_number(&self) -> std::option::Option<&str> {
        self.e164_phone_number.as_deref()
    }
}
impl std::fmt::Debug for AssociatePhoneNumberWithUserInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("AssociatePhoneNumberWithUserInput");
        formatter.field("account_id", &self.account_id);
        formatter.field("user_id", &self.user_id);
        formatter.field("e164_phone_number", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl AssociatePhoneNumberWithUserInput {
    /// Creates a new builder-style object to manufacture [`AssociatePhoneNumberWithUserInput`](crate::operation::associate_phone_number_with_user::AssociatePhoneNumberWithUserInput).
    pub fn builder() -> crate::operation::associate_phone_number_with_user::builders::AssociatePhoneNumberWithUserInputBuilder{
        crate::operation::associate_phone_number_with_user::builders::AssociatePhoneNumberWithUserInputBuilder::default()
    }
}

/// A builder for [`AssociatePhoneNumberWithUserInput`](crate::operation::associate_phone_number_with_user::AssociatePhoneNumberWithUserInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct AssociatePhoneNumberWithUserInputBuilder {
    pub(crate) account_id: std::option::Option<std::string::String>,
    pub(crate) user_id: std::option::Option<std::string::String>,
    pub(crate) e164_phone_number: std::option::Option<std::string::String>,
}
impl AssociatePhoneNumberWithUserInputBuilder {
    /// <p>The Amazon Chime account ID.</p>
    pub fn account_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.account_id = Some(input.into());
        self
    }
    /// <p>The Amazon Chime account ID.</p>
    pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.account_id = input;
        self
    }
    /// <p>The user ID.</p>
    pub fn user_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.user_id = Some(input.into());
        self
    }
    /// <p>The user ID.</p>
    pub fn set_user_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.user_id = input;
        self
    }
    /// <p>The phone number, in E.164 format.</p>
    pub fn e164_phone_number(mut self, input: impl Into<std::string::String>) -> Self {
        self.e164_phone_number = Some(input.into());
        self
    }
    /// <p>The phone number, in E.164 format.</p>
    pub fn set_e164_phone_number(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.e164_phone_number = input;
        self
    }
    /// Consumes the builder and constructs a [`AssociatePhoneNumberWithUserInput`](crate::operation::associate_phone_number_with_user::AssociatePhoneNumberWithUserInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::associate_phone_number_with_user::AssociatePhoneNumberWithUserInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::associate_phone_number_with_user::AssociatePhoneNumberWithUserInput {
                account_id: self.account_id,
                user_id: self.user_id,
                e164_phone_number: self.e164_phone_number,
            },
        )
    }
}
impl std::fmt::Debug for AssociatePhoneNumberWithUserInputBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("AssociatePhoneNumberWithUserInputBuilder");
        formatter.field("account_id", &self.account_id);
        formatter.field("user_id", &self.user_id);
        formatter.field("e164_phone_number", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
