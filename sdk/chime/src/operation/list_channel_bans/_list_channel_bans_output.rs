// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListChannelBansOutput {
    /// <p>The ARN of the channel.</p>
    #[doc(hidden)]
    pub channel_arn: std::option::Option<std::string::String>,
    /// <p>The token passed by previous API calls until all requested bans are returned.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The information for each requested ban.</p>
    #[doc(hidden)]
    pub channel_bans: std::option::Option<std::vec::Vec<crate::types::ChannelBanSummary>>,
    _request_id: Option<String>,
}
impl ListChannelBansOutput {
    /// <p>The ARN of the channel.</p>
    pub fn channel_arn(&self) -> std::option::Option<&str> {
        self.channel_arn.as_deref()
    }
    /// <p>The token passed by previous API calls until all requested bans are returned.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The information for each requested ban.</p>
    pub fn channel_bans(&self) -> std::option::Option<&[crate::types::ChannelBanSummary]> {
        self.channel_bans.as_deref()
    }
}
impl std::fmt::Debug for ListChannelBansOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListChannelBansOutput");
        formatter.field("channel_arn", &self.channel_arn);
        formatter.field("next_token", &"*** Sensitive Data Redacted ***");
        formatter.field("channel_bans", &self.channel_bans);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl aws_http::request_id::RequestId for ListChannelBansOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListChannelBansOutput {
    /// Creates a new builder-style object to manufacture [`ListChannelBansOutput`](crate::operation::list_channel_bans::ListChannelBansOutput).
    pub fn builder() -> crate::operation::list_channel_bans::builders::ListChannelBansOutputBuilder
    {
        crate::operation::list_channel_bans::builders::ListChannelBansOutputBuilder::default()
    }
}

/// A builder for [`ListChannelBansOutput`](crate::operation::list_channel_bans::ListChannelBansOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct ListChannelBansOutputBuilder {
    pub(crate) channel_arn: std::option::Option<std::string::String>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) channel_bans: std::option::Option<std::vec::Vec<crate::types::ChannelBanSummary>>,
    _request_id: Option<String>,
}
impl ListChannelBansOutputBuilder {
    /// <p>The ARN of the channel.</p>
    pub fn channel_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.channel_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the channel.</p>
    pub fn set_channel_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.channel_arn = input;
        self
    }
    /// <p>The token passed by previous API calls until all requested bans are returned.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>The token passed by previous API calls until all requested bans are returned.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// Appends an item to `channel_bans`.
    ///
    /// To override the contents of this collection use [`set_channel_bans`](Self::set_channel_bans).
    ///
    /// <p>The information for each requested ban.</p>
    pub fn channel_bans(mut self, input: crate::types::ChannelBanSummary) -> Self {
        let mut v = self.channel_bans.unwrap_or_default();
        v.push(input);
        self.channel_bans = Some(v);
        self
    }
    /// <p>The information for each requested ban.</p>
    pub fn set_channel_bans(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ChannelBanSummary>>,
    ) -> Self {
        self.channel_bans = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListChannelBansOutput`](crate::operation::list_channel_bans::ListChannelBansOutput).
    pub fn build(self) -> crate::operation::list_channel_bans::ListChannelBansOutput {
        crate::operation::list_channel_bans::ListChannelBansOutput {
            channel_arn: self.channel_arn,
            next_token: self.next_token,
            channel_bans: self.channel_bans,
            _request_id: self._request_id,
        }
    }
}
impl std::fmt::Debug for ListChannelBansOutputBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListChannelBansOutputBuilder");
        formatter.field("channel_arn", &self.channel_arn);
        formatter.field("next_token", &"*** Sensitive Data Redacted ***");
        formatter.field("channel_bans", &self.channel_bans);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
