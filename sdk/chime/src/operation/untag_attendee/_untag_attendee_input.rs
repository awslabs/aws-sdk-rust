// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UntagAttendeeInput {
    /// <p>The Amazon Chime SDK meeting ID.</p>
    pub meeting_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Chime SDK attendee ID.</p>
    pub attendee_id: ::std::option::Option<::std::string::String>,
    /// <p>The tag keys.</p>
    pub tag_keys: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl UntagAttendeeInput {
    /// <p>The Amazon Chime SDK meeting ID.</p>
    pub fn meeting_id(&self) -> ::std::option::Option<&str> {
        self.meeting_id.as_deref()
    }
    /// <p>The Amazon Chime SDK attendee ID.</p>
    pub fn attendee_id(&self) -> ::std::option::Option<&str> {
        self.attendee_id.as_deref()
    }
    /// <p>The tag keys.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tag_keys.is_none()`.
    pub fn tag_keys(&self) -> &[::std::string::String] {
        self.tag_keys.as_deref().unwrap_or_default()
    }
}
impl UntagAttendeeInput {
    /// Creates a new builder-style object to manufacture [`UntagAttendeeInput`](crate::operation::untag_attendee::UntagAttendeeInput).
    pub fn builder() -> crate::operation::untag_attendee::builders::UntagAttendeeInputBuilder {
        crate::operation::untag_attendee::builders::UntagAttendeeInputBuilder::default()
    }
}

/// A builder for [`UntagAttendeeInput`](crate::operation::untag_attendee::UntagAttendeeInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UntagAttendeeInputBuilder {
    pub(crate) meeting_id: ::std::option::Option<::std::string::String>,
    pub(crate) attendee_id: ::std::option::Option<::std::string::String>,
    pub(crate) tag_keys: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl UntagAttendeeInputBuilder {
    /// <p>The Amazon Chime SDK meeting ID.</p>
    /// This field is required.
    pub fn meeting_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.meeting_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Chime SDK meeting ID.</p>
    pub fn set_meeting_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.meeting_id = input;
        self
    }
    /// <p>The Amazon Chime SDK meeting ID.</p>
    pub fn get_meeting_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.meeting_id
    }
    /// <p>The Amazon Chime SDK attendee ID.</p>
    /// This field is required.
    pub fn attendee_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.attendee_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Chime SDK attendee ID.</p>
    pub fn set_attendee_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.attendee_id = input;
        self
    }
    /// <p>The Amazon Chime SDK attendee ID.</p>
    pub fn get_attendee_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.attendee_id
    }
    /// Appends an item to `tag_keys`.
    ///
    /// To override the contents of this collection use [`set_tag_keys`](Self::set_tag_keys).
    ///
    /// <p>The tag keys.</p>
    pub fn tag_keys(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.tag_keys.unwrap_or_default();
        v.push(input.into());
        self.tag_keys = ::std::option::Option::Some(v);
        self
    }
    /// <p>The tag keys.</p>
    pub fn set_tag_keys(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.tag_keys = input;
        self
    }
    /// <p>The tag keys.</p>
    pub fn get_tag_keys(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.tag_keys
    }
    /// Consumes the builder and constructs a [`UntagAttendeeInput`](crate::operation::untag_attendee::UntagAttendeeInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::untag_attendee::UntagAttendeeInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::untag_attendee::UntagAttendeeInput {
            meeting_id: self.meeting_id,
            attendee_id: self.attendee_id,
            tag_keys: self.tag_keys,
        })
    }
}
