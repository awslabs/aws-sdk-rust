// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_proxy_session::_create_proxy_session_output::CreateProxySessionOutputBuilder;

pub use crate::operation::create_proxy_session::_create_proxy_session_input::CreateProxySessionInputBuilder;

/// Fluent builder constructing a request to `CreateProxySession`.
///
/// <p>Creates a proxy session on the specified Amazon Chime Voice Connector for the specified participant phone numbers.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateProxySessionFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_proxy_session::builders::CreateProxySessionInputBuilder,
}
impl CreateProxySessionFluentBuilder {
    /// Creates a new `CreateProxySession`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::create_proxy_session::CreateProxySession,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::create_proxy_session::CreateProxySessionError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::create_proxy_session::CreateProxySessionOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::create_proxy_session::CreateProxySessionError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The Amazon Chime voice connector ID.</p>
    pub fn voice_connector_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.voice_connector_id(input.into());
        self
    }
    /// <p>The Amazon Chime voice connector ID.</p>
    pub fn set_voice_connector_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_voice_connector_id(input);
        self
    }
    /// Appends an item to `ParticipantPhoneNumbers`.
    ///
    /// To override the contents of this collection use [`set_participant_phone_numbers`](Self::set_participant_phone_numbers).
    ///
    /// <p>The participant phone numbers.</p>
    pub fn participant_phone_numbers(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.participant_phone_numbers(input.into());
        self
    }
    /// <p>The participant phone numbers.</p>
    pub fn set_participant_phone_numbers(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_participant_phone_numbers(input);
        self
    }
    /// <p>The name of the proxy session.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>The name of the proxy session.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p>The number of minutes allowed for the proxy session.</p>
    pub fn expiry_minutes(mut self, input: i32) -> Self {
        self.inner = self.inner.expiry_minutes(input);
        self
    }
    /// <p>The number of minutes allowed for the proxy session.</p>
    pub fn set_expiry_minutes(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_expiry_minutes(input);
        self
    }
    /// Appends an item to `Capabilities`.
    ///
    /// To override the contents of this collection use [`set_capabilities`](Self::set_capabilities).
    ///
    /// <p>The proxy session capabilities.</p>
    pub fn capabilities(mut self, input: crate::types::Capability) -> Self {
        self.inner = self.inner.capabilities(input);
        self
    }
    /// <p>The proxy session capabilities.</p>
    pub fn set_capabilities(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Capability>>,
    ) -> Self {
        self.inner = self.inner.set_capabilities(input);
        self
    }
    /// <p>The preference for proxy phone number reuse, or stickiness, between the same participants across sessions.</p>
    pub fn number_selection_behavior(
        mut self,
        input: crate::types::NumberSelectionBehavior,
    ) -> Self {
        self.inner = self.inner.number_selection_behavior(input);
        self
    }
    /// <p>The preference for proxy phone number reuse, or stickiness, between the same participants across sessions.</p>
    pub fn set_number_selection_behavior(
        mut self,
        input: std::option::Option<crate::types::NumberSelectionBehavior>,
    ) -> Self {
        self.inner = self.inner.set_number_selection_behavior(input);
        self
    }
    /// <p>The preference for matching the country or area code of the proxy phone number with that of the first participant.</p>
    pub fn geo_match_level(mut self, input: crate::types::GeoMatchLevel) -> Self {
        self.inner = self.inner.geo_match_level(input);
        self
    }
    /// <p>The preference for matching the country or area code of the proxy phone number with that of the first participant.</p>
    pub fn set_geo_match_level(
        mut self,
        input: std::option::Option<crate::types::GeoMatchLevel>,
    ) -> Self {
        self.inner = self.inner.set_geo_match_level(input);
        self
    }
    /// <p>The country and area code for the proxy phone number.</p>
    pub fn geo_match_params(mut self, input: crate::types::GeoMatchParams) -> Self {
        self.inner = self.inner.geo_match_params(input);
        self
    }
    /// <p>The country and area code for the proxy phone number.</p>
    pub fn set_geo_match_params(
        mut self,
        input: std::option::Option<crate::types::GeoMatchParams>,
    ) -> Self {
        self.inner = self.inner.set_geo_match_params(input);
        self
    }
}
