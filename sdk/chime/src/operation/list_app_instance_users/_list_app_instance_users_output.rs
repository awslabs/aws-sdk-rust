// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListAppInstanceUsersOutput {
    /// <p>The ARN of the <code>AppInstance</code>.</p>
    #[doc(hidden)]
    pub app_instance_arn: std::option::Option<std::string::String>,
    /// <p>The information for each requested <code>AppInstanceUser</code>.</p>
    #[doc(hidden)]
    pub app_instance_users:
        std::option::Option<std::vec::Vec<crate::types::AppInstanceUserSummary>>,
    /// <p>The token passed by previous API calls until all requested users are returned.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListAppInstanceUsersOutput {
    /// <p>The ARN of the <code>AppInstance</code>.</p>
    pub fn app_instance_arn(&self) -> std::option::Option<&str> {
        self.app_instance_arn.as_deref()
    }
    /// <p>The information for each requested <code>AppInstanceUser</code>.</p>
    pub fn app_instance_users(
        &self,
    ) -> std::option::Option<&[crate::types::AppInstanceUserSummary]> {
        self.app_instance_users.as_deref()
    }
    /// <p>The token passed by previous API calls until all requested users are returned.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for ListAppInstanceUsersOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListAppInstanceUsersOutput");
        formatter.field("app_instance_arn", &self.app_instance_arn);
        formatter.field("app_instance_users", &self.app_instance_users);
        formatter.field("next_token", &"*** Sensitive Data Redacted ***");
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl aws_http::request_id::RequestId for ListAppInstanceUsersOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListAppInstanceUsersOutput {
    /// Creates a new builder-style object to manufacture [`ListAppInstanceUsersOutput`](crate::operation::list_app_instance_users::ListAppInstanceUsersOutput).
    pub fn builder(
    ) -> crate::operation::list_app_instance_users::builders::ListAppInstanceUsersOutputBuilder
    {
        crate::operation::list_app_instance_users::builders::ListAppInstanceUsersOutputBuilder::default()
    }
}

/// A builder for [`ListAppInstanceUsersOutput`](crate::operation::list_app_instance_users::ListAppInstanceUsersOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct ListAppInstanceUsersOutputBuilder {
    pub(crate) app_instance_arn: std::option::Option<std::string::String>,
    pub(crate) app_instance_users:
        std::option::Option<std::vec::Vec<crate::types::AppInstanceUserSummary>>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListAppInstanceUsersOutputBuilder {
    /// <p>The ARN of the <code>AppInstance</code>.</p>
    pub fn app_instance_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.app_instance_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the <code>AppInstance</code>.</p>
    pub fn set_app_instance_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.app_instance_arn = input;
        self
    }
    /// Appends an item to `app_instance_users`.
    ///
    /// To override the contents of this collection use [`set_app_instance_users`](Self::set_app_instance_users).
    ///
    /// <p>The information for each requested <code>AppInstanceUser</code>.</p>
    pub fn app_instance_users(mut self, input: crate::types::AppInstanceUserSummary) -> Self {
        let mut v = self.app_instance_users.unwrap_or_default();
        v.push(input);
        self.app_instance_users = Some(v);
        self
    }
    /// <p>The information for each requested <code>AppInstanceUser</code>.</p>
    pub fn set_app_instance_users(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::AppInstanceUserSummary>>,
    ) -> Self {
        self.app_instance_users = input;
        self
    }
    /// <p>The token passed by previous API calls until all requested users are returned.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>The token passed by previous API calls until all requested users are returned.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListAppInstanceUsersOutput`](crate::operation::list_app_instance_users::ListAppInstanceUsersOutput).
    pub fn build(self) -> crate::operation::list_app_instance_users::ListAppInstanceUsersOutput {
        crate::operation::list_app_instance_users::ListAppInstanceUsersOutput {
            app_instance_arn: self.app_instance_arn,
            app_instance_users: self.app_instance_users,
            next_token: self.next_token,
            _request_id: self._request_id,
        }
    }
}
impl std::fmt::Debug for ListAppInstanceUsersOutputBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListAppInstanceUsersOutputBuilder");
        formatter.field("app_instance_arn", &self.app_instance_arn);
        formatter.field("app_instance_users", &self.app_instance_users);
        formatter.field("next_token", &"*** Sensitive Data Redacted ***");
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
