// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListAccountsInput {
    /// <p>Amazon Chime account name prefix with which to filter results.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>User email address with which to filter results.</p>
    #[doc(hidden)]
    pub user_email: std::option::Option<std::string::String>,
    /// <p>The token to use to retrieve the next page of results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The maximum number of results to return in a single call. Defaults to 100.</p>
    #[doc(hidden)]
    pub max_results: std::option::Option<i32>,
}
impl ListAccountsInput {
    /// <p>Amazon Chime account name prefix with which to filter results.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>User email address with which to filter results.</p>
    pub fn user_email(&self) -> std::option::Option<&str> {
        self.user_email.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of results to return in a single call. Defaults to 100.</p>
    pub fn max_results(&self) -> std::option::Option<i32> {
        self.max_results
    }
}
impl std::fmt::Debug for ListAccountsInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListAccountsInput");
        formatter.field("name", &self.name);
        formatter.field("user_email", &"*** Sensitive Data Redacted ***");
        formatter.field("next_token", &self.next_token);
        formatter.field("max_results", &self.max_results);
        formatter.finish()
    }
}
impl ListAccountsInput {
    /// Creates a new builder-style object to manufacture [`ListAccountsInput`](crate::operation::list_accounts::ListAccountsInput).
    pub fn builder() -> crate::operation::list_accounts::builders::ListAccountsInputBuilder {
        crate::operation::list_accounts::builders::ListAccountsInputBuilder::default()
    }
}

/// A builder for [`ListAccountsInput`](crate::operation::list_accounts::ListAccountsInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct ListAccountsInputBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) user_email: std::option::Option<std::string::String>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) max_results: std::option::Option<i32>,
}
impl ListAccountsInputBuilder {
    /// <p>Amazon Chime account name prefix with which to filter results.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>Amazon Chime account name prefix with which to filter results.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>User email address with which to filter results.</p>
    pub fn user_email(mut self, input: impl Into<std::string::String>) -> Self {
        self.user_email = Some(input.into());
        self
    }
    /// <p>User email address with which to filter results.</p>
    pub fn set_user_email(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.user_email = input;
        self
    }
    /// <p>The token to use to retrieve the next page of results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>The token to use to retrieve the next page of results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The maximum number of results to return in a single call. Defaults to 100.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// <p>The maximum number of results to return in a single call. Defaults to 100.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// Consumes the builder and constructs a [`ListAccountsInput`](crate::operation::list_accounts::ListAccountsInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::list_accounts::ListAccountsInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::list_accounts::ListAccountsInput {
            name: self.name,
            user_email: self.user_email,
            next_token: self.next_token,
            max_results: self.max_results,
        })
    }
}
impl std::fmt::Debug for ListAccountsInputBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListAccountsInputBuilder");
        formatter.field("name", &self.name);
        formatter.field("user_email", &"*** Sensitive Data Redacted ***");
        formatter.field("next_token", &self.next_token);
        formatter.field("max_results", &self.max_results);
        formatter.finish()
    }
}
