// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::search_available_phone_numbers::_search_available_phone_numbers_output::SearchAvailablePhoneNumbersOutputBuilder;

pub use crate::operation::search_available_phone_numbers::_search_available_phone_numbers_input::SearchAvailablePhoneNumbersInputBuilder;

/// Fluent builder constructing a request to `SearchAvailablePhoneNumbers`.
///
/// <p>Searches for phone numbers that can be ordered. For US numbers, provide at least one of the following search filters: <code>AreaCode</code>, <code>City</code>, <code>State</code>, or <code>TollFreePrefix</code>. If you provide <code>City</code>, you must also provide <code>State</code>. Numbers outside the US only support the <code>PhoneNumberType</code> filter, which you must use.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct SearchAvailablePhoneNumbersFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::search_available_phone_numbers::builders::SearchAvailablePhoneNumbersInputBuilder
            }
impl SearchAvailablePhoneNumbersFluentBuilder {
    /// Creates a new `SearchAvailablePhoneNumbers`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::search_available_phone_numbers::SearchAvailablePhoneNumbers,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::search_available_phone_numbers::SearchAvailablePhoneNumbersError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::search_available_phone_numbers::SearchAvailablePhoneNumbersOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::search_available_phone_numbers::SearchAvailablePhoneNumbersError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::search_available_phone_numbers::paginator::SearchAvailablePhoneNumbersPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::operation::search_available_phone_numbers::paginator::SearchAvailablePhoneNumbersPaginator{
        crate::operation::search_available_phone_numbers::paginator::SearchAvailablePhoneNumbersPaginator::new(self.handle, self.inner)
    }
    /// <p>The area code used to filter results. Only applies to the US.</p>
    pub fn area_code(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.area_code(input.into());
        self
    }
    /// <p>The area code used to filter results. Only applies to the US.</p>
    pub fn set_area_code(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_area_code(input);
        self
    }
    /// <p>The city used to filter results. Only applies to the US.</p>
    pub fn city(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.city(input.into());
        self
    }
    /// <p>The city used to filter results. Only applies to the US.</p>
    pub fn set_city(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_city(input);
        self
    }
    /// <p>The country used to filter results. Defaults to the US Format: ISO 3166-1 alpha-2.</p>
    pub fn country(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.country(input.into());
        self
    }
    /// <p>The country used to filter results. Defaults to the US Format: ISO 3166-1 alpha-2.</p>
    pub fn set_country(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_country(input);
        self
    }
    /// <p>The state used to filter results. Required only if you provide <code>City</code>. Only applies to the US.</p>
    pub fn state(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.state(input.into());
        self
    }
    /// <p>The state used to filter results. Required only if you provide <code>City</code>. Only applies to the US.</p>
    pub fn set_state(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_state(input);
        self
    }
    /// <p>The toll-free prefix that you use to filter results. Only applies to the US.</p>
    pub fn toll_free_prefix(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.toll_free_prefix(input.into());
        self
    }
    /// <p>The toll-free prefix that you use to filter results. Only applies to the US.</p>
    pub fn set_toll_free_prefix(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_toll_free_prefix(input);
        self
    }
    /// <p>The phone number type used to filter results. Required for non-US numbers.</p>
    pub fn phone_number_type(mut self, input: crate::types::PhoneNumberType) -> Self {
        self.inner = self.inner.phone_number_type(input);
        self
    }
    /// <p>The phone number type used to filter results. Required for non-US numbers.</p>
    pub fn set_phone_number_type(
        mut self,
        input: std::option::Option<crate::types::PhoneNumberType>,
    ) -> Self {
        self.inner = self.inner.set_phone_number_type(input);
        self
    }
    /// <p>The maximum number of results to return in a single call.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of results to return in a single call.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>The token used to retrieve the next page of results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>The token used to retrieve the next page of results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
}
