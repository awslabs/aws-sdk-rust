// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SearchAvailablePhoneNumbersInput {
    /// <p>The area code used to filter results. Only applies to the US.</p>
    #[doc(hidden)]
    pub area_code: std::option::Option<std::string::String>,
    /// <p>The city used to filter results. Only applies to the US.</p>
    #[doc(hidden)]
    pub city: std::option::Option<std::string::String>,
    /// <p>The country used to filter results. Defaults to the US Format: ISO 3166-1 alpha-2.</p>
    #[doc(hidden)]
    pub country: std::option::Option<std::string::String>,
    /// <p>The state used to filter results. Required only if you provide <code>City</code>. Only applies to the US.</p>
    #[doc(hidden)]
    pub state: std::option::Option<std::string::String>,
    /// <p>The toll-free prefix that you use to filter results. Only applies to the US.</p>
    #[doc(hidden)]
    pub toll_free_prefix: std::option::Option<std::string::String>,
    /// <p>The phone number type used to filter results. Required for non-US numbers.</p>
    #[doc(hidden)]
    pub phone_number_type: std::option::Option<crate::types::PhoneNumberType>,
    /// <p>The maximum number of results to return in a single call.</p>
    #[doc(hidden)]
    pub max_results: std::option::Option<i32>,
    /// <p>The token used to retrieve the next page of results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
}
impl SearchAvailablePhoneNumbersInput {
    /// <p>The area code used to filter results. Only applies to the US.</p>
    pub fn area_code(&self) -> std::option::Option<&str> {
        self.area_code.as_deref()
    }
    /// <p>The city used to filter results. Only applies to the US.</p>
    pub fn city(&self) -> std::option::Option<&str> {
        self.city.as_deref()
    }
    /// <p>The country used to filter results. Defaults to the US Format: ISO 3166-1 alpha-2.</p>
    pub fn country(&self) -> std::option::Option<&str> {
        self.country.as_deref()
    }
    /// <p>The state used to filter results. Required only if you provide <code>City</code>. Only applies to the US.</p>
    pub fn state(&self) -> std::option::Option<&str> {
        self.state.as_deref()
    }
    /// <p>The toll-free prefix that you use to filter results. Only applies to the US.</p>
    pub fn toll_free_prefix(&self) -> std::option::Option<&str> {
        self.toll_free_prefix.as_deref()
    }
    /// <p>The phone number type used to filter results. Required for non-US numbers.</p>
    pub fn phone_number_type(&self) -> std::option::Option<&crate::types::PhoneNumberType> {
        self.phone_number_type.as_ref()
    }
    /// <p>The maximum number of results to return in a single call.</p>
    pub fn max_results(&self) -> std::option::Option<i32> {
        self.max_results
    }
    /// <p>The token used to retrieve the next page of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl SearchAvailablePhoneNumbersInput {
    /// Creates a new builder-style object to manufacture [`SearchAvailablePhoneNumbersInput`](crate::operation::search_available_phone_numbers::SearchAvailablePhoneNumbersInput).
    pub fn builder() -> crate::operation::search_available_phone_numbers::builders::SearchAvailablePhoneNumbersInputBuilder{
        crate::operation::search_available_phone_numbers::builders::SearchAvailablePhoneNumbersInputBuilder::default()
    }
}

/// A builder for [`SearchAvailablePhoneNumbersInput`](crate::operation::search_available_phone_numbers::SearchAvailablePhoneNumbersInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SearchAvailablePhoneNumbersInputBuilder {
    pub(crate) area_code: std::option::Option<std::string::String>,
    pub(crate) city: std::option::Option<std::string::String>,
    pub(crate) country: std::option::Option<std::string::String>,
    pub(crate) state: std::option::Option<std::string::String>,
    pub(crate) toll_free_prefix: std::option::Option<std::string::String>,
    pub(crate) phone_number_type: std::option::Option<crate::types::PhoneNumberType>,
    pub(crate) max_results: std::option::Option<i32>,
    pub(crate) next_token: std::option::Option<std::string::String>,
}
impl SearchAvailablePhoneNumbersInputBuilder {
    /// <p>The area code used to filter results. Only applies to the US.</p>
    pub fn area_code(mut self, input: impl Into<std::string::String>) -> Self {
        self.area_code = Some(input.into());
        self
    }
    /// <p>The area code used to filter results. Only applies to the US.</p>
    pub fn set_area_code(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.area_code = input;
        self
    }
    /// <p>The city used to filter results. Only applies to the US.</p>
    pub fn city(mut self, input: impl Into<std::string::String>) -> Self {
        self.city = Some(input.into());
        self
    }
    /// <p>The city used to filter results. Only applies to the US.</p>
    pub fn set_city(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.city = input;
        self
    }
    /// <p>The country used to filter results. Defaults to the US Format: ISO 3166-1 alpha-2.</p>
    pub fn country(mut self, input: impl Into<std::string::String>) -> Self {
        self.country = Some(input.into());
        self
    }
    /// <p>The country used to filter results. Defaults to the US Format: ISO 3166-1 alpha-2.</p>
    pub fn set_country(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.country = input;
        self
    }
    /// <p>The state used to filter results. Required only if you provide <code>City</code>. Only applies to the US.</p>
    pub fn state(mut self, input: impl Into<std::string::String>) -> Self {
        self.state = Some(input.into());
        self
    }
    /// <p>The state used to filter results. Required only if you provide <code>City</code>. Only applies to the US.</p>
    pub fn set_state(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.state = input;
        self
    }
    /// <p>The toll-free prefix that you use to filter results. Only applies to the US.</p>
    pub fn toll_free_prefix(mut self, input: impl Into<std::string::String>) -> Self {
        self.toll_free_prefix = Some(input.into());
        self
    }
    /// <p>The toll-free prefix that you use to filter results. Only applies to the US.</p>
    pub fn set_toll_free_prefix(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.toll_free_prefix = input;
        self
    }
    /// <p>The phone number type used to filter results. Required for non-US numbers.</p>
    pub fn phone_number_type(mut self, input: crate::types::PhoneNumberType) -> Self {
        self.phone_number_type = Some(input);
        self
    }
    /// <p>The phone number type used to filter results. Required for non-US numbers.</p>
    pub fn set_phone_number_type(
        mut self,
        input: std::option::Option<crate::types::PhoneNumberType>,
    ) -> Self {
        self.phone_number_type = input;
        self
    }
    /// <p>The maximum number of results to return in a single call.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// <p>The maximum number of results to return in a single call.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The token used to retrieve the next page of results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>The token used to retrieve the next page of results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// Consumes the builder and constructs a [`SearchAvailablePhoneNumbersInput`](crate::operation::search_available_phone_numbers::SearchAvailablePhoneNumbersInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::search_available_phone_numbers::SearchAvailablePhoneNumbersInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::search_available_phone_numbers::SearchAvailablePhoneNumbersInput {
                area_code: self.area_code,
                city: self.city,
                country: self.country,
                state: self.state,
                toll_free_prefix: self.toll_free_prefix,
                phone_number_type: self.phone_number_type,
                max_results: self.max_results,
                next_token: self.next_token,
            },
        )
    }
}
