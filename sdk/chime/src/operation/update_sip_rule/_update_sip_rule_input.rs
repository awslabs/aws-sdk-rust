// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateSipRuleInput {
    /// <p>The SIP rule ID.</p>
    #[doc(hidden)]
    pub sip_rule_id: std::option::Option<std::string::String>,
    /// <p>The new name for the specified SIP rule.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The new value specified to indicate whether the rule is disabled.</p>
    #[doc(hidden)]
    pub disabled: std::option::Option<bool>,
    /// <p>The new value of the list of target applications.</p>
    #[doc(hidden)]
    pub target_applications:
        std::option::Option<std::vec::Vec<crate::types::SipRuleTargetApplication>>,
}
impl UpdateSipRuleInput {
    /// <p>The SIP rule ID.</p>
    pub fn sip_rule_id(&self) -> std::option::Option<&str> {
        self.sip_rule_id.as_deref()
    }
    /// <p>The new name for the specified SIP rule.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The new value specified to indicate whether the rule is disabled.</p>
    pub fn disabled(&self) -> std::option::Option<bool> {
        self.disabled
    }
    /// <p>The new value of the list of target applications.</p>
    pub fn target_applications(
        &self,
    ) -> std::option::Option<&[crate::types::SipRuleTargetApplication]> {
        self.target_applications.as_deref()
    }
}
impl UpdateSipRuleInput {
    /// Creates a new builder-style object to manufacture [`UpdateSipRuleInput`](crate::operation::update_sip_rule::UpdateSipRuleInput).
    pub fn builder() -> crate::operation::update_sip_rule::builders::UpdateSipRuleInputBuilder {
        crate::operation::update_sip_rule::builders::UpdateSipRuleInputBuilder::default()
    }
}

/// A builder for [`UpdateSipRuleInput`](crate::operation::update_sip_rule::UpdateSipRuleInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateSipRuleInputBuilder {
    pub(crate) sip_rule_id: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) disabled: std::option::Option<bool>,
    pub(crate) target_applications:
        std::option::Option<std::vec::Vec<crate::types::SipRuleTargetApplication>>,
}
impl UpdateSipRuleInputBuilder {
    /// <p>The SIP rule ID.</p>
    pub fn sip_rule_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.sip_rule_id = Some(input.into());
        self
    }
    /// <p>The SIP rule ID.</p>
    pub fn set_sip_rule_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.sip_rule_id = input;
        self
    }
    /// <p>The new name for the specified SIP rule.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The new name for the specified SIP rule.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The new value specified to indicate whether the rule is disabled.</p>
    pub fn disabled(mut self, input: bool) -> Self {
        self.disabled = Some(input);
        self
    }
    /// <p>The new value specified to indicate whether the rule is disabled.</p>
    pub fn set_disabled(mut self, input: std::option::Option<bool>) -> Self {
        self.disabled = input;
        self
    }
    /// Appends an item to `target_applications`.
    ///
    /// To override the contents of this collection use [`set_target_applications`](Self::set_target_applications).
    ///
    /// <p>The new value of the list of target applications.</p>
    pub fn target_applications(mut self, input: crate::types::SipRuleTargetApplication) -> Self {
        let mut v = self.target_applications.unwrap_or_default();
        v.push(input);
        self.target_applications = Some(v);
        self
    }
    /// <p>The new value of the list of target applications.</p>
    pub fn set_target_applications(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::SipRuleTargetApplication>>,
    ) -> Self {
        self.target_applications = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateSipRuleInput`](crate::operation::update_sip_rule::UpdateSipRuleInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::update_sip_rule::UpdateSipRuleInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::update_sip_rule::UpdateSipRuleInput {
            sip_rule_id: self.sip_rule_id,
            name: self.name,
            disabled: self.disabled,
            target_applications: self.target_applications,
        })
    }
}
