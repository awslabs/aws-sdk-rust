// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdatePhoneNumberInput {
    /// <p>The phone number ID.</p>
    #[doc(hidden)]
    pub phone_number_id: std::option::Option<std::string::String>,
    /// <p>The product type.</p>
    #[doc(hidden)]
    pub product_type: std::option::Option<crate::types::PhoneNumberProductType>,
    /// <p>The outbound calling name associated with the phone number.</p>
    #[doc(hidden)]
    pub calling_name: std::option::Option<std::string::String>,
}
impl UpdatePhoneNumberInput {
    /// <p>The phone number ID.</p>
    pub fn phone_number_id(&self) -> std::option::Option<&str> {
        self.phone_number_id.as_deref()
    }
    /// <p>The product type.</p>
    pub fn product_type(&self) -> std::option::Option<&crate::types::PhoneNumberProductType> {
        self.product_type.as_ref()
    }
    /// <p>The outbound calling name associated with the phone number.</p>
    pub fn calling_name(&self) -> std::option::Option<&str> {
        self.calling_name.as_deref()
    }
}
impl std::fmt::Debug for UpdatePhoneNumberInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdatePhoneNumberInput");
        formatter.field("phone_number_id", &self.phone_number_id);
        formatter.field("product_type", &self.product_type);
        formatter.field("calling_name", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl UpdatePhoneNumberInput {
    /// Creates a new builder-style object to manufacture [`UpdatePhoneNumberInput`](crate::operation::update_phone_number::UpdatePhoneNumberInput).
    pub fn builder(
    ) -> crate::operation::update_phone_number::builders::UpdatePhoneNumberInputBuilder {
        crate::operation::update_phone_number::builders::UpdatePhoneNumberInputBuilder::default()
    }
}

/// A builder for [`UpdatePhoneNumberInput`](crate::operation::update_phone_number::UpdatePhoneNumberInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct UpdatePhoneNumberInputBuilder {
    pub(crate) phone_number_id: std::option::Option<std::string::String>,
    pub(crate) product_type: std::option::Option<crate::types::PhoneNumberProductType>,
    pub(crate) calling_name: std::option::Option<std::string::String>,
}
impl UpdatePhoneNumberInputBuilder {
    /// <p>The phone number ID.</p>
    pub fn phone_number_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.phone_number_id = Some(input.into());
        self
    }
    /// <p>The phone number ID.</p>
    pub fn set_phone_number_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.phone_number_id = input;
        self
    }
    /// <p>The product type.</p>
    pub fn product_type(mut self, input: crate::types::PhoneNumberProductType) -> Self {
        self.product_type = Some(input);
        self
    }
    /// <p>The product type.</p>
    pub fn set_product_type(
        mut self,
        input: std::option::Option<crate::types::PhoneNumberProductType>,
    ) -> Self {
        self.product_type = input;
        self
    }
    /// <p>The outbound calling name associated with the phone number.</p>
    pub fn calling_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.calling_name = Some(input.into());
        self
    }
    /// <p>The outbound calling name associated with the phone number.</p>
    pub fn set_calling_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.calling_name = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdatePhoneNumberInput`](crate::operation::update_phone_number::UpdatePhoneNumberInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::update_phone_number::UpdatePhoneNumberInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::update_phone_number::UpdatePhoneNumberInput {
                phone_number_id: self.phone_number_id,
                product_type: self.product_type,
                calling_name: self.calling_name,
            },
        )
    }
}
impl std::fmt::Debug for UpdatePhoneNumberInputBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdatePhoneNumberInputBuilder");
        formatter.field("phone_number_id", &self.phone_number_id);
        formatter.field("product_type", &self.product_type);
        formatter.field("calling_name", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
