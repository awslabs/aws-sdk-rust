// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateBotInput {
    /// <p>The Amazon Chime account ID.</p>
    #[doc(hidden)]
    pub account_id: std::option::Option<std::string::String>,
    /// <p>The bot display name.</p>
    #[doc(hidden)]
    pub display_name: std::option::Option<std::string::String>,
    /// <p>The domain of the Amazon Chime Enterprise account.</p>
    #[doc(hidden)]
    pub domain: std::option::Option<std::string::String>,
}
impl CreateBotInput {
    /// <p>The Amazon Chime account ID.</p>
    pub fn account_id(&self) -> std::option::Option<&str> {
        self.account_id.as_deref()
    }
    /// <p>The bot display name.</p>
    pub fn display_name(&self) -> std::option::Option<&str> {
        self.display_name.as_deref()
    }
    /// <p>The domain of the Amazon Chime Enterprise account.</p>
    pub fn domain(&self) -> std::option::Option<&str> {
        self.domain.as_deref()
    }
}
impl std::fmt::Debug for CreateBotInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateBotInput");
        formatter.field("account_id", &self.account_id);
        formatter.field("display_name", &"*** Sensitive Data Redacted ***");
        formatter.field("domain", &self.domain);
        formatter.finish()
    }
}
impl CreateBotInput {
    /// Creates a new builder-style object to manufacture [`CreateBotInput`](crate::operation::create_bot::CreateBotInput).
    pub fn builder() -> crate::operation::create_bot::builders::CreateBotInputBuilder {
        crate::operation::create_bot::builders::CreateBotInputBuilder::default()
    }
}

/// A builder for [`CreateBotInput`](crate::operation::create_bot::CreateBotInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct CreateBotInputBuilder {
    pub(crate) account_id: std::option::Option<std::string::String>,
    pub(crate) display_name: std::option::Option<std::string::String>,
    pub(crate) domain: std::option::Option<std::string::String>,
}
impl CreateBotInputBuilder {
    /// <p>The Amazon Chime account ID.</p>
    pub fn account_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.account_id = Some(input.into());
        self
    }
    /// <p>The Amazon Chime account ID.</p>
    pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.account_id = input;
        self
    }
    /// <p>The bot display name.</p>
    pub fn display_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.display_name = Some(input.into());
        self
    }
    /// <p>The bot display name.</p>
    pub fn set_display_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.display_name = input;
        self
    }
    /// <p>The domain of the Amazon Chime Enterprise account.</p>
    pub fn domain(mut self, input: impl Into<std::string::String>) -> Self {
        self.domain = Some(input.into());
        self
    }
    /// <p>The domain of the Amazon Chime Enterprise account.</p>
    pub fn set_domain(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.domain = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateBotInput`](crate::operation::create_bot::CreateBotInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_bot::CreateBotInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::create_bot::CreateBotInput {
            account_id: self.account_id,
            display_name: self.display_name,
            domain: self.domain,
        })
    }
}
impl std::fmt::Debug for CreateBotInputBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateBotInputBuilder");
        formatter.field("account_id", &self.account_id);
        formatter.field("display_name", &"*** Sensitive Data Redacted ***");
        formatter.field("domain", &self.domain);
        formatter.finish()
    }
}
