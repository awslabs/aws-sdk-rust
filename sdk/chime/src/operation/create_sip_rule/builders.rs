// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_sip_rule::_create_sip_rule_output::CreateSipRuleOutputBuilder;

pub use crate::operation::create_sip_rule::_create_sip_rule_input::CreateSipRuleInputBuilder;

/// Fluent builder constructing a request to `CreateSipRule`.
///
/// <p>Creates a SIP rule which can be used to run a SIP media application as a target for a specific trigger type.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateSipRuleFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_sip_rule::builders::CreateSipRuleInputBuilder,
}
impl CreateSipRuleFluentBuilder {
    /// Creates a new `CreateSipRule`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::create_sip_rule::CreateSipRule,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::operation::create_sip_rule::CreateSipRuleError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::create_sip_rule::CreateSipRuleOutput,
        aws_smithy_http::result::SdkError<crate::operation::create_sip_rule::CreateSipRuleError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the SIP rule.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>The name of the SIP rule.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p>The type of trigger assigned to the SIP rule in <code>TriggerValue</code>, currently <code>RequestUriHostname</code> or <code>ToPhoneNumber</code>.</p>
    pub fn trigger_type(mut self, input: crate::types::SipRuleTriggerType) -> Self {
        self.inner = self.inner.trigger_type(input);
        self
    }
    /// <p>The type of trigger assigned to the SIP rule in <code>TriggerValue</code>, currently <code>RequestUriHostname</code> or <code>ToPhoneNumber</code>.</p>
    pub fn set_trigger_type(
        mut self,
        input: std::option::Option<crate::types::SipRuleTriggerType>,
    ) -> Self {
        self.inner = self.inner.set_trigger_type(input);
        self
    }
    /// <p>If <code>TriggerType</code> is <code>RequestUriHostname</code>, the value can be the outbound host name of an Amazon Chime Voice Connector. If <code>TriggerType</code> is <code>ToPhoneNumber</code>, the value can be a customer-owned phone number in the E164 format. The <code>SipMediaApplication</code> specified in the <code>SipRule</code> is triggered if the request URI in an incoming SIP request matches the <code>RequestUriHostname</code>, or if the <code>To</code> header in the incoming SIP request matches the <code>ToPhoneNumber</code> value.</p>
    pub fn trigger_value(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.trigger_value(input.into());
        self
    }
    /// <p>If <code>TriggerType</code> is <code>RequestUriHostname</code>, the value can be the outbound host name of an Amazon Chime Voice Connector. If <code>TriggerType</code> is <code>ToPhoneNumber</code>, the value can be a customer-owned phone number in the E164 format. The <code>SipMediaApplication</code> specified in the <code>SipRule</code> is triggered if the request URI in an incoming SIP request matches the <code>RequestUriHostname</code>, or if the <code>To</code> header in the incoming SIP request matches the <code>ToPhoneNumber</code> value.</p>
    pub fn set_trigger_value(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_trigger_value(input);
        self
    }
    /// <p>Enables or disables a rule. You must disable rules before you can delete them.</p>
    pub fn disabled(mut self, input: bool) -> Self {
        self.inner = self.inner.disabled(input);
        self
    }
    /// <p>Enables or disables a rule. You must disable rules before you can delete them.</p>
    pub fn set_disabled(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_disabled(input);
        self
    }
    /// Appends an item to `TargetApplications`.
    ///
    /// To override the contents of this collection use [`set_target_applications`](Self::set_target_applications).
    ///
    /// <p>List of SIP media applications with priority and AWS Region. Only one SIP application per AWS Region can be used.</p>
    pub fn target_applications(mut self, input: crate::types::SipRuleTargetApplication) -> Self {
        self.inner = self.inner.target_applications(input);
        self
    }
    /// <p>List of SIP media applications with priority and AWS Region. Only one SIP application per AWS Region can be used.</p>
    pub fn set_target_applications(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::SipRuleTargetApplication>>,
    ) -> Self {
        self.inner = self.inner.set_target_applications(input);
        self
    }
}
