// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BatchCreateChannelMembershipOutput {
    /// <p>The list of channel memberships in the response.</p>
    #[doc(hidden)]
    pub batch_channel_memberships: std::option::Option<crate::types::BatchChannelMemberships>,
    /// <p>If the action fails for one or more of the memberships in the request, a list of the memberships is returned, along with error codes and error messages.</p>
    #[doc(hidden)]
    pub errors: std::option::Option<std::vec::Vec<crate::types::BatchCreateChannelMembershipError>>,
    _request_id: Option<String>,
}
impl BatchCreateChannelMembershipOutput {
    /// <p>The list of channel memberships in the response.</p>
    pub fn batch_channel_memberships(
        &self,
    ) -> std::option::Option<&crate::types::BatchChannelMemberships> {
        self.batch_channel_memberships.as_ref()
    }
    /// <p>If the action fails for one or more of the memberships in the request, a list of the memberships is returned, along with error codes and error messages.</p>
    pub fn errors(
        &self,
    ) -> std::option::Option<&[crate::types::BatchCreateChannelMembershipError]> {
        self.errors.as_deref()
    }
}
impl aws_http::request_id::RequestId for BatchCreateChannelMembershipOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl BatchCreateChannelMembershipOutput {
    /// Creates a new builder-style object to manufacture [`BatchCreateChannelMembershipOutput`](crate::operation::batch_create_channel_membership::BatchCreateChannelMembershipOutput).
    pub fn builder() -> crate::operation::batch_create_channel_membership::builders::BatchCreateChannelMembershipOutputBuilder{
        crate::operation::batch_create_channel_membership::builders::BatchCreateChannelMembershipOutputBuilder::default()
    }
}

/// A builder for [`BatchCreateChannelMembershipOutput`](crate::operation::batch_create_channel_membership::BatchCreateChannelMembershipOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct BatchCreateChannelMembershipOutputBuilder {
    pub(crate) batch_channel_memberships:
        std::option::Option<crate::types::BatchChannelMemberships>,
    pub(crate) errors:
        std::option::Option<std::vec::Vec<crate::types::BatchCreateChannelMembershipError>>,
    _request_id: Option<String>,
}
impl BatchCreateChannelMembershipOutputBuilder {
    /// <p>The list of channel memberships in the response.</p>
    pub fn batch_channel_memberships(
        mut self,
        input: crate::types::BatchChannelMemberships,
    ) -> Self {
        self.batch_channel_memberships = Some(input);
        self
    }
    /// <p>The list of channel memberships in the response.</p>
    pub fn set_batch_channel_memberships(
        mut self,
        input: std::option::Option<crate::types::BatchChannelMemberships>,
    ) -> Self {
        self.batch_channel_memberships = input;
        self
    }
    /// Appends an item to `errors`.
    ///
    /// To override the contents of this collection use [`set_errors`](Self::set_errors).
    ///
    /// <p>If the action fails for one or more of the memberships in the request, a list of the memberships is returned, along with error codes and error messages.</p>
    pub fn errors(mut self, input: crate::types::BatchCreateChannelMembershipError) -> Self {
        let mut v = self.errors.unwrap_or_default();
        v.push(input);
        self.errors = Some(v);
        self
    }
    /// <p>If the action fails for one or more of the memberships in the request, a list of the memberships is returned, along with error codes and error messages.</p>
    pub fn set_errors(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::BatchCreateChannelMembershipError>>,
    ) -> Self {
        self.errors = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`BatchCreateChannelMembershipOutput`](crate::operation::batch_create_channel_membership::BatchCreateChannelMembershipOutput).
    pub fn build(
        self,
    ) -> crate::operation::batch_create_channel_membership::BatchCreateChannelMembershipOutput {
        crate::operation::batch_create_channel_membership::BatchCreateChannelMembershipOutput {
            batch_channel_memberships: self.batch_channel_memberships,
            errors: self.errors,
            _request_id: self._request_id,
        }
    }
}
