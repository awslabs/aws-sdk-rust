// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateProxySessionInput {
    /// <p>The Amazon Chime voice connector ID.</p>
    #[doc(hidden)]
    pub voice_connector_id: std::option::Option<std::string::String>,
    /// <p>The proxy session ID.</p>
    #[doc(hidden)]
    pub proxy_session_id: std::option::Option<std::string::String>,
    /// <p>The proxy session capabilities.</p>
    #[doc(hidden)]
    pub capabilities: std::option::Option<std::vec::Vec<crate::types::Capability>>,
    /// <p>The number of minutes allowed for the proxy session.</p>
    #[doc(hidden)]
    pub expiry_minutes: std::option::Option<i32>,
}
impl UpdateProxySessionInput {
    /// <p>The Amazon Chime voice connector ID.</p>
    pub fn voice_connector_id(&self) -> std::option::Option<&str> {
        self.voice_connector_id.as_deref()
    }
    /// <p>The proxy session ID.</p>
    pub fn proxy_session_id(&self) -> std::option::Option<&str> {
        self.proxy_session_id.as_deref()
    }
    /// <p>The proxy session capabilities.</p>
    pub fn capabilities(&self) -> std::option::Option<&[crate::types::Capability]> {
        self.capabilities.as_deref()
    }
    /// <p>The number of minutes allowed for the proxy session.</p>
    pub fn expiry_minutes(&self) -> std::option::Option<i32> {
        self.expiry_minutes
    }
}
impl UpdateProxySessionInput {
    /// Creates a new builder-style object to manufacture [`UpdateProxySessionInput`](crate::operation::update_proxy_session::UpdateProxySessionInput).
    pub fn builder(
    ) -> crate::operation::update_proxy_session::builders::UpdateProxySessionInputBuilder {
        crate::operation::update_proxy_session::builders::UpdateProxySessionInputBuilder::default()
    }
}

/// A builder for [`UpdateProxySessionInput`](crate::operation::update_proxy_session::UpdateProxySessionInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateProxySessionInputBuilder {
    pub(crate) voice_connector_id: std::option::Option<std::string::String>,
    pub(crate) proxy_session_id: std::option::Option<std::string::String>,
    pub(crate) capabilities: std::option::Option<std::vec::Vec<crate::types::Capability>>,
    pub(crate) expiry_minutes: std::option::Option<i32>,
}
impl UpdateProxySessionInputBuilder {
    /// <p>The Amazon Chime voice connector ID.</p>
    pub fn voice_connector_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.voice_connector_id = Some(input.into());
        self
    }
    /// <p>The Amazon Chime voice connector ID.</p>
    pub fn set_voice_connector_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.voice_connector_id = input;
        self
    }
    /// <p>The proxy session ID.</p>
    pub fn proxy_session_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.proxy_session_id = Some(input.into());
        self
    }
    /// <p>The proxy session ID.</p>
    pub fn set_proxy_session_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.proxy_session_id = input;
        self
    }
    /// Appends an item to `capabilities`.
    ///
    /// To override the contents of this collection use [`set_capabilities`](Self::set_capabilities).
    ///
    /// <p>The proxy session capabilities.</p>
    pub fn capabilities(mut self, input: crate::types::Capability) -> Self {
        let mut v = self.capabilities.unwrap_or_default();
        v.push(input);
        self.capabilities = Some(v);
        self
    }
    /// <p>The proxy session capabilities.</p>
    pub fn set_capabilities(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Capability>>,
    ) -> Self {
        self.capabilities = input;
        self
    }
    /// <p>The number of minutes allowed for the proxy session.</p>
    pub fn expiry_minutes(mut self, input: i32) -> Self {
        self.expiry_minutes = Some(input);
        self
    }
    /// <p>The number of minutes allowed for the proxy session.</p>
    pub fn set_expiry_minutes(mut self, input: std::option::Option<i32>) -> Self {
        self.expiry_minutes = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateProxySessionInput`](crate::operation::update_proxy_session::UpdateProxySessionInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::update_proxy_session::UpdateProxySessionInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::update_proxy_session::UpdateProxySessionInput {
                voice_connector_id: self.voice_connector_id,
                proxy_session_id: self.proxy_session_id,
                capabilities: self.capabilities,
                expiry_minutes: self.expiry_minutes,
            },
        )
    }
}
