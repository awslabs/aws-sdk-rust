// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`PutSipMediaApplicationLoggingConfiguration`](crate::client::fluent_builders::PutSipMediaApplicationLoggingConfiguration) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`sip_media_application_id(impl Into<String>)`](crate::client::fluent_builders::PutSipMediaApplicationLoggingConfiguration::sip_media_application_id) / [`set_sip_media_application_id(Option<String>)`](crate::client::fluent_builders::PutSipMediaApplicationLoggingConfiguration::set_sip_media_application_id): <p>The SIP media application ID.</p>
    ///   - [`sip_media_application_logging_configuration(SipMediaApplicationLoggingConfiguration)`](crate::client::fluent_builders::PutSipMediaApplicationLoggingConfiguration::sip_media_application_logging_configuration) / [`set_sip_media_application_logging_configuration(Option<SipMediaApplicationLoggingConfiguration>)`](crate::client::fluent_builders::PutSipMediaApplicationLoggingConfiguration::set_sip_media_application_logging_configuration): <p>The actual logging configuration.</p>
    /// - On success, responds with [`PutSipMediaApplicationLoggingConfigurationOutput`](crate::output::PutSipMediaApplicationLoggingConfigurationOutput) with field(s):
    ///   - [`sip_media_application_logging_configuration(Option<SipMediaApplicationLoggingConfiguration>)`](crate::output::PutSipMediaApplicationLoggingConfigurationOutput::sip_media_application_logging_configuration): <p>Logging configuration of the SIP media application.</p>
    /// - On failure, responds with [`SdkError<PutSipMediaApplicationLoggingConfigurationError>`](crate::error::PutSipMediaApplicationLoggingConfigurationError)
    pub fn put_sip_media_application_logging_configuration(
        &self,
    ) -> crate::client::fluent_builders::PutSipMediaApplicationLoggingConfiguration {
        crate::client::fluent_builders::PutSipMediaApplicationLoggingConfiguration::new(
            self.handle.clone(),
        )
    }
}
