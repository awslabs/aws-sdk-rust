// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`PutRetentionSettings`](crate::operation::put_retention_settings::builders::PutRetentionSettingsFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`account_id(impl Into<String>)`](crate::operation::put_retention_settings::builders::PutRetentionSettingsFluentBuilder::account_id) / [`set_account_id(Option<String>)`](crate::operation::put_retention_settings::builders::PutRetentionSettingsFluentBuilder::set_account_id):<br>required: **true**<br><p>The Amazon Chime account ID.</p><br>
    ///   - [`retention_settings(RetentionSettings)`](crate::operation::put_retention_settings::builders::PutRetentionSettingsFluentBuilder::retention_settings) / [`set_retention_settings(Option<RetentionSettings>)`](crate::operation::put_retention_settings::builders::PutRetentionSettingsFluentBuilder::set_retention_settings):<br>required: **true**<br><p>The retention settings.</p><br>
    /// - On success, responds with [`PutRetentionSettingsOutput`](crate::operation::put_retention_settings::PutRetentionSettingsOutput) with field(s):
    ///   - [`retention_settings(Option<RetentionSettings>)`](crate::operation::put_retention_settings::PutRetentionSettingsOutput::retention_settings): <p>The retention settings.</p>
    ///   - [`initiate_deletion_timestamp(Option<DateTime>)`](crate::operation::put_retention_settings::PutRetentionSettingsOutput::initiate_deletion_timestamp): <p>The timestamp representing the time at which the specified items are permanently deleted, in ISO 8601 format.</p>
    /// - On failure, responds with [`SdkError<PutRetentionSettingsError>`](crate::operation::put_retention_settings::PutRetentionSettingsError)
    pub fn put_retention_settings(&self) -> crate::operation::put_retention_settings::builders::PutRetentionSettingsFluentBuilder {
        crate::operation::put_retention_settings::builders::PutRetentionSettingsFluentBuilder::new(self.handle.clone())
    }
}
