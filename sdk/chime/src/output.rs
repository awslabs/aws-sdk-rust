// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ValidateE911AddressOutput {
    /// <p>Number indicating the result of address validation. <code>0</code> means the address was perfect as is and successfully validated. <code>1</code> means the address was corrected. <code>2</code> means the address sent was not close enough and was not validated.</p>
    #[doc(hidden)]
    pub validation_result: i32,
    /// <p>The ID that represents the address.</p>
    #[doc(hidden)]
    pub address_external_id: std::option::Option<std::string::String>,
    /// <p>The validated address.</p>
    #[doc(hidden)]
    pub address: std::option::Option<crate::model::Address>,
    /// <p>The list of address suggestions.</p>
    #[doc(hidden)]
    pub candidate_address_list: std::option::Option<std::vec::Vec<crate::model::CandidateAddress>>,
}
impl ValidateE911AddressOutput {
    /// <p>Number indicating the result of address validation. <code>0</code> means the address was perfect as is and successfully validated. <code>1</code> means the address was corrected. <code>2</code> means the address sent was not close enough and was not validated.</p>
    pub fn validation_result(&self) -> i32 {
        self.validation_result
    }
    /// <p>The ID that represents the address.</p>
    pub fn address_external_id(&self) -> std::option::Option<&str> {
        self.address_external_id.as_deref()
    }
    /// <p>The validated address.</p>
    pub fn address(&self) -> std::option::Option<&crate::model::Address> {
        self.address.as_ref()
    }
    /// <p>The list of address suggestions.</p>
    pub fn candidate_address_list(&self) -> std::option::Option<&[crate::model::CandidateAddress]> {
        self.candidate_address_list.as_deref()
    }
}
/// See [`ValidateE911AddressOutput`](crate::output::ValidateE911AddressOutput).
pub mod validate_e911_address_output {

    /// A builder for [`ValidateE911AddressOutput`](crate::output::ValidateE911AddressOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) validation_result: std::option::Option<i32>,
        pub(crate) address_external_id: std::option::Option<std::string::String>,
        pub(crate) address: std::option::Option<crate::model::Address>,
        pub(crate) candidate_address_list:
            std::option::Option<std::vec::Vec<crate::model::CandidateAddress>>,
    }
    impl Builder {
        /// <p>Number indicating the result of address validation. <code>0</code> means the address was perfect as is and successfully validated. <code>1</code> means the address was corrected. <code>2</code> means the address sent was not close enough and was not validated.</p>
        pub fn validation_result(mut self, input: i32) -> Self {
            self.validation_result = Some(input);
            self
        }
        /// <p>Number indicating the result of address validation. <code>0</code> means the address was perfect as is and successfully validated. <code>1</code> means the address was corrected. <code>2</code> means the address sent was not close enough and was not validated.</p>
        pub fn set_validation_result(mut self, input: std::option::Option<i32>) -> Self {
            self.validation_result = input;
            self
        }
        /// <p>The ID that represents the address.</p>
        pub fn address_external_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.address_external_id = Some(input.into());
            self
        }
        /// <p>The ID that represents the address.</p>
        pub fn set_address_external_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.address_external_id = input;
            self
        }
        /// <p>The validated address.</p>
        pub fn address(mut self, input: crate::model::Address) -> Self {
            self.address = Some(input);
            self
        }
        /// <p>The validated address.</p>
        pub fn set_address(mut self, input: std::option::Option<crate::model::Address>) -> Self {
            self.address = input;
            self
        }
        /// Appends an item to `candidate_address_list`.
        ///
        /// To override the contents of this collection use [`set_candidate_address_list`](Self::set_candidate_address_list).
        ///
        /// <p>The list of address suggestions.</p>
        pub fn candidate_address_list(mut self, input: crate::model::CandidateAddress) -> Self {
            let mut v = self.candidate_address_list.unwrap_or_default();
            v.push(input);
            self.candidate_address_list = Some(v);
            self
        }
        /// <p>The list of address suggestions.</p>
        pub fn set_candidate_address_list(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::CandidateAddress>>,
        ) -> Self {
            self.candidate_address_list = input;
            self
        }
        /// Consumes the builder and constructs a [`ValidateE911AddressOutput`](crate::output::ValidateE911AddressOutput).
        pub fn build(self) -> crate::output::ValidateE911AddressOutput {
            crate::output::ValidateE911AddressOutput {
                validation_result: self.validation_result.unwrap_or_default(),
                address_external_id: self.address_external_id,
                address: self.address,
                candidate_address_list: self.candidate_address_list,
            }
        }
    }
}
impl ValidateE911AddressOutput {
    /// Creates a new builder-style object to manufacture [`ValidateE911AddressOutput`](crate::output::ValidateE911AddressOutput).
    pub fn builder() -> crate::output::validate_e911_address_output::Builder {
        crate::output::validate_e911_address_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateVoiceConnectorGroupOutput {
    /// <p>The updated Amazon Chime Voice Connector group details.</p>
    #[doc(hidden)]
    pub voice_connector_group: std::option::Option<crate::model::VoiceConnectorGroup>,
}
impl UpdateVoiceConnectorGroupOutput {
    /// <p>The updated Amazon Chime Voice Connector group details.</p>
    pub fn voice_connector_group(&self) -> std::option::Option<&crate::model::VoiceConnectorGroup> {
        self.voice_connector_group.as_ref()
    }
}
/// See [`UpdateVoiceConnectorGroupOutput`](crate::output::UpdateVoiceConnectorGroupOutput).
pub mod update_voice_connector_group_output {

    /// A builder for [`UpdateVoiceConnectorGroupOutput`](crate::output::UpdateVoiceConnectorGroupOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) voice_connector_group: std::option::Option<crate::model::VoiceConnectorGroup>,
    }
    impl Builder {
        /// <p>The updated Amazon Chime Voice Connector group details.</p>
        pub fn voice_connector_group(mut self, input: crate::model::VoiceConnectorGroup) -> Self {
            self.voice_connector_group = Some(input);
            self
        }
        /// <p>The updated Amazon Chime Voice Connector group details.</p>
        pub fn set_voice_connector_group(
            mut self,
            input: std::option::Option<crate::model::VoiceConnectorGroup>,
        ) -> Self {
            self.voice_connector_group = input;
            self
        }
        /// Consumes the builder and constructs a [`UpdateVoiceConnectorGroupOutput`](crate::output::UpdateVoiceConnectorGroupOutput).
        pub fn build(self) -> crate::output::UpdateVoiceConnectorGroupOutput {
            crate::output::UpdateVoiceConnectorGroupOutput {
                voice_connector_group: self.voice_connector_group,
            }
        }
    }
}
impl UpdateVoiceConnectorGroupOutput {
    /// Creates a new builder-style object to manufacture [`UpdateVoiceConnectorGroupOutput`](crate::output::UpdateVoiceConnectorGroupOutput).
    pub fn builder() -> crate::output::update_voice_connector_group_output::Builder {
        crate::output::update_voice_connector_group_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateVoiceConnectorOutput {
    /// <p>The updated Amazon Chime Voice Connector details.</p>
    #[doc(hidden)]
    pub voice_connector: std::option::Option<crate::model::VoiceConnector>,
}
impl UpdateVoiceConnectorOutput {
    /// <p>The updated Amazon Chime Voice Connector details.</p>
    pub fn voice_connector(&self) -> std::option::Option<&crate::model::VoiceConnector> {
        self.voice_connector.as_ref()
    }
}
/// See [`UpdateVoiceConnectorOutput`](crate::output::UpdateVoiceConnectorOutput).
pub mod update_voice_connector_output {

    /// A builder for [`UpdateVoiceConnectorOutput`](crate::output::UpdateVoiceConnectorOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) voice_connector: std::option::Option<crate::model::VoiceConnector>,
    }
    impl Builder {
        /// <p>The updated Amazon Chime Voice Connector details.</p>
        pub fn voice_connector(mut self, input: crate::model::VoiceConnector) -> Self {
            self.voice_connector = Some(input);
            self
        }
        /// <p>The updated Amazon Chime Voice Connector details.</p>
        pub fn set_voice_connector(
            mut self,
            input: std::option::Option<crate::model::VoiceConnector>,
        ) -> Self {
            self.voice_connector = input;
            self
        }
        /// Consumes the builder and constructs a [`UpdateVoiceConnectorOutput`](crate::output::UpdateVoiceConnectorOutput).
        pub fn build(self) -> crate::output::UpdateVoiceConnectorOutput {
            crate::output::UpdateVoiceConnectorOutput {
                voice_connector: self.voice_connector,
            }
        }
    }
}
impl UpdateVoiceConnectorOutput {
    /// Creates a new builder-style object to manufacture [`UpdateVoiceConnectorOutput`](crate::output::UpdateVoiceConnectorOutput).
    pub fn builder() -> crate::output::update_voice_connector_output::Builder {
        crate::output::update_voice_connector_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateUserSettingsOutput {}
/// See [`UpdateUserSettingsOutput`](crate::output::UpdateUserSettingsOutput).
pub mod update_user_settings_output {

    /// A builder for [`UpdateUserSettingsOutput`](crate::output::UpdateUserSettingsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UpdateUserSettingsOutput`](crate::output::UpdateUserSettingsOutput).
        pub fn build(self) -> crate::output::UpdateUserSettingsOutput {
            crate::output::UpdateUserSettingsOutput {}
        }
    }
}
impl UpdateUserSettingsOutput {
    /// Creates a new builder-style object to manufacture [`UpdateUserSettingsOutput`](crate::output::UpdateUserSettingsOutput).
    pub fn builder() -> crate::output::update_user_settings_output::Builder {
        crate::output::update_user_settings_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateUserOutput {
    /// <p>The updated user details.</p>
    #[doc(hidden)]
    pub user: std::option::Option<crate::model::User>,
}
impl UpdateUserOutput {
    /// <p>The updated user details.</p>
    pub fn user(&self) -> std::option::Option<&crate::model::User> {
        self.user.as_ref()
    }
}
/// See [`UpdateUserOutput`](crate::output::UpdateUserOutput).
pub mod update_user_output {

    /// A builder for [`UpdateUserOutput`](crate::output::UpdateUserOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) user: std::option::Option<crate::model::User>,
    }
    impl Builder {
        /// <p>The updated user details.</p>
        pub fn user(mut self, input: crate::model::User) -> Self {
            self.user = Some(input);
            self
        }
        /// <p>The updated user details.</p>
        pub fn set_user(mut self, input: std::option::Option<crate::model::User>) -> Self {
            self.user = input;
            self
        }
        /// Consumes the builder and constructs a [`UpdateUserOutput`](crate::output::UpdateUserOutput).
        pub fn build(self) -> crate::output::UpdateUserOutput {
            crate::output::UpdateUserOutput { user: self.user }
        }
    }
}
impl UpdateUserOutput {
    /// Creates a new builder-style object to manufacture [`UpdateUserOutput`](crate::output::UpdateUserOutput).
    pub fn builder() -> crate::output::update_user_output::Builder {
        crate::output::update_user_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateSipRuleOutput {
    /// <p>Updated SIP rule details.</p>
    #[doc(hidden)]
    pub sip_rule: std::option::Option<crate::model::SipRule>,
}
impl UpdateSipRuleOutput {
    /// <p>Updated SIP rule details.</p>
    pub fn sip_rule(&self) -> std::option::Option<&crate::model::SipRule> {
        self.sip_rule.as_ref()
    }
}
/// See [`UpdateSipRuleOutput`](crate::output::UpdateSipRuleOutput).
pub mod update_sip_rule_output {

    /// A builder for [`UpdateSipRuleOutput`](crate::output::UpdateSipRuleOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) sip_rule: std::option::Option<crate::model::SipRule>,
    }
    impl Builder {
        /// <p>Updated SIP rule details.</p>
        pub fn sip_rule(mut self, input: crate::model::SipRule) -> Self {
            self.sip_rule = Some(input);
            self
        }
        /// <p>Updated SIP rule details.</p>
        pub fn set_sip_rule(mut self, input: std::option::Option<crate::model::SipRule>) -> Self {
            self.sip_rule = input;
            self
        }
        /// Consumes the builder and constructs a [`UpdateSipRuleOutput`](crate::output::UpdateSipRuleOutput).
        pub fn build(self) -> crate::output::UpdateSipRuleOutput {
            crate::output::UpdateSipRuleOutput {
                sip_rule: self.sip_rule,
            }
        }
    }
}
impl UpdateSipRuleOutput {
    /// Creates a new builder-style object to manufacture [`UpdateSipRuleOutput`](crate::output::UpdateSipRuleOutput).
    pub fn builder() -> crate::output::update_sip_rule_output::Builder {
        crate::output::update_sip_rule_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateSipMediaApplicationCallOutput {
    /// <p>A <code>Call</code> instance for a SIP media application.</p>
    #[doc(hidden)]
    pub sip_media_application_call: std::option::Option<crate::model::SipMediaApplicationCall>,
}
impl UpdateSipMediaApplicationCallOutput {
    /// <p>A <code>Call</code> instance for a SIP media application.</p>
    pub fn sip_media_application_call(
        &self,
    ) -> std::option::Option<&crate::model::SipMediaApplicationCall> {
        self.sip_media_application_call.as_ref()
    }
}
/// See [`UpdateSipMediaApplicationCallOutput`](crate::output::UpdateSipMediaApplicationCallOutput).
pub mod update_sip_media_application_call_output {

    /// A builder for [`UpdateSipMediaApplicationCallOutput`](crate::output::UpdateSipMediaApplicationCallOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) sip_media_application_call:
            std::option::Option<crate::model::SipMediaApplicationCall>,
    }
    impl Builder {
        /// <p>A <code>Call</code> instance for a SIP media application.</p>
        pub fn sip_media_application_call(
            mut self,
            input: crate::model::SipMediaApplicationCall,
        ) -> Self {
            self.sip_media_application_call = Some(input);
            self
        }
        /// <p>A <code>Call</code> instance for a SIP media application.</p>
        pub fn set_sip_media_application_call(
            mut self,
            input: std::option::Option<crate::model::SipMediaApplicationCall>,
        ) -> Self {
            self.sip_media_application_call = input;
            self
        }
        /// Consumes the builder and constructs a [`UpdateSipMediaApplicationCallOutput`](crate::output::UpdateSipMediaApplicationCallOutput).
        pub fn build(self) -> crate::output::UpdateSipMediaApplicationCallOutput {
            crate::output::UpdateSipMediaApplicationCallOutput {
                sip_media_application_call: self.sip_media_application_call,
            }
        }
    }
}
impl UpdateSipMediaApplicationCallOutput {
    /// Creates a new builder-style object to manufacture [`UpdateSipMediaApplicationCallOutput`](crate::output::UpdateSipMediaApplicationCallOutput).
    pub fn builder() -> crate::output::update_sip_media_application_call_output::Builder {
        crate::output::update_sip_media_application_call_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateSipMediaApplicationOutput {
    /// <p>The updated SIP media application details.</p>
    #[doc(hidden)]
    pub sip_media_application: std::option::Option<crate::model::SipMediaApplication>,
}
impl UpdateSipMediaApplicationOutput {
    /// <p>The updated SIP media application details.</p>
    pub fn sip_media_application(&self) -> std::option::Option<&crate::model::SipMediaApplication> {
        self.sip_media_application.as_ref()
    }
}
/// See [`UpdateSipMediaApplicationOutput`](crate::output::UpdateSipMediaApplicationOutput).
pub mod update_sip_media_application_output {

    /// A builder for [`UpdateSipMediaApplicationOutput`](crate::output::UpdateSipMediaApplicationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) sip_media_application: std::option::Option<crate::model::SipMediaApplication>,
    }
    impl Builder {
        /// <p>The updated SIP media application details.</p>
        pub fn sip_media_application(mut self, input: crate::model::SipMediaApplication) -> Self {
            self.sip_media_application = Some(input);
            self
        }
        /// <p>The updated SIP media application details.</p>
        pub fn set_sip_media_application(
            mut self,
            input: std::option::Option<crate::model::SipMediaApplication>,
        ) -> Self {
            self.sip_media_application = input;
            self
        }
        /// Consumes the builder and constructs a [`UpdateSipMediaApplicationOutput`](crate::output::UpdateSipMediaApplicationOutput).
        pub fn build(self) -> crate::output::UpdateSipMediaApplicationOutput {
            crate::output::UpdateSipMediaApplicationOutput {
                sip_media_application: self.sip_media_application,
            }
        }
    }
}
impl UpdateSipMediaApplicationOutput {
    /// Creates a new builder-style object to manufacture [`UpdateSipMediaApplicationOutput`](crate::output::UpdateSipMediaApplicationOutput).
    pub fn builder() -> crate::output::update_sip_media_application_output::Builder {
        crate::output::update_sip_media_application_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateRoomMembershipOutput {
    /// <p>The room membership details.</p>
    #[doc(hidden)]
    pub room_membership: std::option::Option<crate::model::RoomMembership>,
}
impl UpdateRoomMembershipOutput {
    /// <p>The room membership details.</p>
    pub fn room_membership(&self) -> std::option::Option<&crate::model::RoomMembership> {
        self.room_membership.as_ref()
    }
}
/// See [`UpdateRoomMembershipOutput`](crate::output::UpdateRoomMembershipOutput).
pub mod update_room_membership_output {

    /// A builder for [`UpdateRoomMembershipOutput`](crate::output::UpdateRoomMembershipOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) room_membership: std::option::Option<crate::model::RoomMembership>,
    }
    impl Builder {
        /// <p>The room membership details.</p>
        pub fn room_membership(mut self, input: crate::model::RoomMembership) -> Self {
            self.room_membership = Some(input);
            self
        }
        /// <p>The room membership details.</p>
        pub fn set_room_membership(
            mut self,
            input: std::option::Option<crate::model::RoomMembership>,
        ) -> Self {
            self.room_membership = input;
            self
        }
        /// Consumes the builder and constructs a [`UpdateRoomMembershipOutput`](crate::output::UpdateRoomMembershipOutput).
        pub fn build(self) -> crate::output::UpdateRoomMembershipOutput {
            crate::output::UpdateRoomMembershipOutput {
                room_membership: self.room_membership,
            }
        }
    }
}
impl UpdateRoomMembershipOutput {
    /// Creates a new builder-style object to manufacture [`UpdateRoomMembershipOutput`](crate::output::UpdateRoomMembershipOutput).
    pub fn builder() -> crate::output::update_room_membership_output::Builder {
        crate::output::update_room_membership_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateRoomOutput {
    /// <p>The room details.</p>
    #[doc(hidden)]
    pub room: std::option::Option<crate::model::Room>,
}
impl UpdateRoomOutput {
    /// <p>The room details.</p>
    pub fn room(&self) -> std::option::Option<&crate::model::Room> {
        self.room.as_ref()
    }
}
/// See [`UpdateRoomOutput`](crate::output::UpdateRoomOutput).
pub mod update_room_output {

    /// A builder for [`UpdateRoomOutput`](crate::output::UpdateRoomOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) room: std::option::Option<crate::model::Room>,
    }
    impl Builder {
        /// <p>The room details.</p>
        pub fn room(mut self, input: crate::model::Room) -> Self {
            self.room = Some(input);
            self
        }
        /// <p>The room details.</p>
        pub fn set_room(mut self, input: std::option::Option<crate::model::Room>) -> Self {
            self.room = input;
            self
        }
        /// Consumes the builder and constructs a [`UpdateRoomOutput`](crate::output::UpdateRoomOutput).
        pub fn build(self) -> crate::output::UpdateRoomOutput {
            crate::output::UpdateRoomOutput { room: self.room }
        }
    }
}
impl UpdateRoomOutput {
    /// Creates a new builder-style object to manufacture [`UpdateRoomOutput`](crate::output::UpdateRoomOutput).
    pub fn builder() -> crate::output::update_room_output::Builder {
        crate::output::update_room_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateProxySessionOutput {
    /// <p>The proxy session details.</p>
    #[doc(hidden)]
    pub proxy_session: std::option::Option<crate::model::ProxySession>,
}
impl UpdateProxySessionOutput {
    /// <p>The proxy session details.</p>
    pub fn proxy_session(&self) -> std::option::Option<&crate::model::ProxySession> {
        self.proxy_session.as_ref()
    }
}
/// See [`UpdateProxySessionOutput`](crate::output::UpdateProxySessionOutput).
pub mod update_proxy_session_output {

    /// A builder for [`UpdateProxySessionOutput`](crate::output::UpdateProxySessionOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) proxy_session: std::option::Option<crate::model::ProxySession>,
    }
    impl Builder {
        /// <p>The proxy session details.</p>
        pub fn proxy_session(mut self, input: crate::model::ProxySession) -> Self {
            self.proxy_session = Some(input);
            self
        }
        /// <p>The proxy session details.</p>
        pub fn set_proxy_session(
            mut self,
            input: std::option::Option<crate::model::ProxySession>,
        ) -> Self {
            self.proxy_session = input;
            self
        }
        /// Consumes the builder and constructs a [`UpdateProxySessionOutput`](crate::output::UpdateProxySessionOutput).
        pub fn build(self) -> crate::output::UpdateProxySessionOutput {
            crate::output::UpdateProxySessionOutput {
                proxy_session: self.proxy_session,
            }
        }
    }
}
impl UpdateProxySessionOutput {
    /// Creates a new builder-style object to manufacture [`UpdateProxySessionOutput`](crate::output::UpdateProxySessionOutput).
    pub fn builder() -> crate::output::update_proxy_session_output::Builder {
        crate::output::update_proxy_session_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdatePhoneNumberSettingsOutput {}
/// See [`UpdatePhoneNumberSettingsOutput`](crate::output::UpdatePhoneNumberSettingsOutput).
pub mod update_phone_number_settings_output {

    /// A builder for [`UpdatePhoneNumberSettingsOutput`](crate::output::UpdatePhoneNumberSettingsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UpdatePhoneNumberSettingsOutput`](crate::output::UpdatePhoneNumberSettingsOutput).
        pub fn build(self) -> crate::output::UpdatePhoneNumberSettingsOutput {
            crate::output::UpdatePhoneNumberSettingsOutput {}
        }
    }
}
impl UpdatePhoneNumberSettingsOutput {
    /// Creates a new builder-style object to manufacture [`UpdatePhoneNumberSettingsOutput`](crate::output::UpdatePhoneNumberSettingsOutput).
    pub fn builder() -> crate::output::update_phone_number_settings_output::Builder {
        crate::output::update_phone_number_settings_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdatePhoneNumberOutput {
    /// <p>The updated phone number details.</p>
    #[doc(hidden)]
    pub phone_number: std::option::Option<crate::model::PhoneNumber>,
}
impl UpdatePhoneNumberOutput {
    /// <p>The updated phone number details.</p>
    pub fn phone_number(&self) -> std::option::Option<&crate::model::PhoneNumber> {
        self.phone_number.as_ref()
    }
}
/// See [`UpdatePhoneNumberOutput`](crate::output::UpdatePhoneNumberOutput).
pub mod update_phone_number_output {

    /// A builder for [`UpdatePhoneNumberOutput`](crate::output::UpdatePhoneNumberOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) phone_number: std::option::Option<crate::model::PhoneNumber>,
    }
    impl Builder {
        /// <p>The updated phone number details.</p>
        pub fn phone_number(mut self, input: crate::model::PhoneNumber) -> Self {
            self.phone_number = Some(input);
            self
        }
        /// <p>The updated phone number details.</p>
        pub fn set_phone_number(
            mut self,
            input: std::option::Option<crate::model::PhoneNumber>,
        ) -> Self {
            self.phone_number = input;
            self
        }
        /// Consumes the builder and constructs a [`UpdatePhoneNumberOutput`](crate::output::UpdatePhoneNumberOutput).
        pub fn build(self) -> crate::output::UpdatePhoneNumberOutput {
            crate::output::UpdatePhoneNumberOutput {
                phone_number: self.phone_number,
            }
        }
    }
}
impl UpdatePhoneNumberOutput {
    /// Creates a new builder-style object to manufacture [`UpdatePhoneNumberOutput`](crate::output::UpdatePhoneNumberOutput).
    pub fn builder() -> crate::output::update_phone_number_output::Builder {
        crate::output::update_phone_number_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateGlobalSettingsOutput {}
/// See [`UpdateGlobalSettingsOutput`](crate::output::UpdateGlobalSettingsOutput).
pub mod update_global_settings_output {

    /// A builder for [`UpdateGlobalSettingsOutput`](crate::output::UpdateGlobalSettingsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UpdateGlobalSettingsOutput`](crate::output::UpdateGlobalSettingsOutput).
        pub fn build(self) -> crate::output::UpdateGlobalSettingsOutput {
            crate::output::UpdateGlobalSettingsOutput {}
        }
    }
}
impl UpdateGlobalSettingsOutput {
    /// Creates a new builder-style object to manufacture [`UpdateGlobalSettingsOutput`](crate::output::UpdateGlobalSettingsOutput).
    pub fn builder() -> crate::output::update_global_settings_output::Builder {
        crate::output::update_global_settings_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateChannelReadMarkerOutput {
    /// <p>The ARN of the channel.</p>
    #[doc(hidden)]
    pub channel_arn: std::option::Option<std::string::String>,
}
impl UpdateChannelReadMarkerOutput {
    /// <p>The ARN of the channel.</p>
    pub fn channel_arn(&self) -> std::option::Option<&str> {
        self.channel_arn.as_deref()
    }
}
/// See [`UpdateChannelReadMarkerOutput`](crate::output::UpdateChannelReadMarkerOutput).
pub mod update_channel_read_marker_output {

    /// A builder for [`UpdateChannelReadMarkerOutput`](crate::output::UpdateChannelReadMarkerOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) channel_arn: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The ARN of the channel.</p>
        pub fn channel_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.channel_arn = Some(input.into());
            self
        }
        /// <p>The ARN of the channel.</p>
        pub fn set_channel_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.channel_arn = input;
            self
        }
        /// Consumes the builder and constructs a [`UpdateChannelReadMarkerOutput`](crate::output::UpdateChannelReadMarkerOutput).
        pub fn build(self) -> crate::output::UpdateChannelReadMarkerOutput {
            crate::output::UpdateChannelReadMarkerOutput {
                channel_arn: self.channel_arn,
            }
        }
    }
}
impl UpdateChannelReadMarkerOutput {
    /// Creates a new builder-style object to manufacture [`UpdateChannelReadMarkerOutput`](crate::output::UpdateChannelReadMarkerOutput).
    pub fn builder() -> crate::output::update_channel_read_marker_output::Builder {
        crate::output::update_channel_read_marker_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateChannelMessageOutput {
    /// <p>The ARN of the channel.</p>
    #[doc(hidden)]
    pub channel_arn: std::option::Option<std::string::String>,
    /// <p>The ID string of the message being updated.</p>
    #[doc(hidden)]
    pub message_id: std::option::Option<std::string::String>,
}
impl UpdateChannelMessageOutput {
    /// <p>The ARN of the channel.</p>
    pub fn channel_arn(&self) -> std::option::Option<&str> {
        self.channel_arn.as_deref()
    }
    /// <p>The ID string of the message being updated.</p>
    pub fn message_id(&self) -> std::option::Option<&str> {
        self.message_id.as_deref()
    }
}
/// See [`UpdateChannelMessageOutput`](crate::output::UpdateChannelMessageOutput).
pub mod update_channel_message_output {

    /// A builder for [`UpdateChannelMessageOutput`](crate::output::UpdateChannelMessageOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) channel_arn: std::option::Option<std::string::String>,
        pub(crate) message_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The ARN of the channel.</p>
        pub fn channel_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.channel_arn = Some(input.into());
            self
        }
        /// <p>The ARN of the channel.</p>
        pub fn set_channel_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.channel_arn = input;
            self
        }
        /// <p>The ID string of the message being updated.</p>
        pub fn message_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.message_id = Some(input.into());
            self
        }
        /// <p>The ID string of the message being updated.</p>
        pub fn set_message_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message_id = input;
            self
        }
        /// Consumes the builder and constructs a [`UpdateChannelMessageOutput`](crate::output::UpdateChannelMessageOutput).
        pub fn build(self) -> crate::output::UpdateChannelMessageOutput {
            crate::output::UpdateChannelMessageOutput {
                channel_arn: self.channel_arn,
                message_id: self.message_id,
            }
        }
    }
}
impl UpdateChannelMessageOutput {
    /// Creates a new builder-style object to manufacture [`UpdateChannelMessageOutput`](crate::output::UpdateChannelMessageOutput).
    pub fn builder() -> crate::output::update_channel_message_output::Builder {
        crate::output::update_channel_message_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateChannelOutput {
    /// <p>The ARN of the channel.</p>
    #[doc(hidden)]
    pub channel_arn: std::option::Option<std::string::String>,
}
impl UpdateChannelOutput {
    /// <p>The ARN of the channel.</p>
    pub fn channel_arn(&self) -> std::option::Option<&str> {
        self.channel_arn.as_deref()
    }
}
/// See [`UpdateChannelOutput`](crate::output::UpdateChannelOutput).
pub mod update_channel_output {

    /// A builder for [`UpdateChannelOutput`](crate::output::UpdateChannelOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) channel_arn: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The ARN of the channel.</p>
        pub fn channel_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.channel_arn = Some(input.into());
            self
        }
        /// <p>The ARN of the channel.</p>
        pub fn set_channel_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.channel_arn = input;
            self
        }
        /// Consumes the builder and constructs a [`UpdateChannelOutput`](crate::output::UpdateChannelOutput).
        pub fn build(self) -> crate::output::UpdateChannelOutput {
            crate::output::UpdateChannelOutput {
                channel_arn: self.channel_arn,
            }
        }
    }
}
impl UpdateChannelOutput {
    /// Creates a new builder-style object to manufacture [`UpdateChannelOutput`](crate::output::UpdateChannelOutput).
    pub fn builder() -> crate::output::update_channel_output::Builder {
        crate::output::update_channel_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateBotOutput {
    /// <p>The updated bot details.</p>
    #[doc(hidden)]
    pub bot: std::option::Option<crate::model::Bot>,
}
impl UpdateBotOutput {
    /// <p>The updated bot details.</p>
    pub fn bot(&self) -> std::option::Option<&crate::model::Bot> {
        self.bot.as_ref()
    }
}
/// See [`UpdateBotOutput`](crate::output::UpdateBotOutput).
pub mod update_bot_output {

    /// A builder for [`UpdateBotOutput`](crate::output::UpdateBotOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) bot: std::option::Option<crate::model::Bot>,
    }
    impl Builder {
        /// <p>The updated bot details.</p>
        pub fn bot(mut self, input: crate::model::Bot) -> Self {
            self.bot = Some(input);
            self
        }
        /// <p>The updated bot details.</p>
        pub fn set_bot(mut self, input: std::option::Option<crate::model::Bot>) -> Self {
            self.bot = input;
            self
        }
        /// Consumes the builder and constructs a [`UpdateBotOutput`](crate::output::UpdateBotOutput).
        pub fn build(self) -> crate::output::UpdateBotOutput {
            crate::output::UpdateBotOutput { bot: self.bot }
        }
    }
}
impl UpdateBotOutput {
    /// Creates a new builder-style object to manufacture [`UpdateBotOutput`](crate::output::UpdateBotOutput).
    pub fn builder() -> crate::output::update_bot_output::Builder {
        crate::output::update_bot_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateAppInstanceUserOutput {
    /// <p>The ARN of the <code>AppInstanceUser</code>.</p>
    #[doc(hidden)]
    pub app_instance_user_arn: std::option::Option<std::string::String>,
}
impl UpdateAppInstanceUserOutput {
    /// <p>The ARN of the <code>AppInstanceUser</code>.</p>
    pub fn app_instance_user_arn(&self) -> std::option::Option<&str> {
        self.app_instance_user_arn.as_deref()
    }
}
/// See [`UpdateAppInstanceUserOutput`](crate::output::UpdateAppInstanceUserOutput).
pub mod update_app_instance_user_output {

    /// A builder for [`UpdateAppInstanceUserOutput`](crate::output::UpdateAppInstanceUserOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) app_instance_user_arn: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The ARN of the <code>AppInstanceUser</code>.</p>
        pub fn app_instance_user_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.app_instance_user_arn = Some(input.into());
            self
        }
        /// <p>The ARN of the <code>AppInstanceUser</code>.</p>
        pub fn set_app_instance_user_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.app_instance_user_arn = input;
            self
        }
        /// Consumes the builder and constructs a [`UpdateAppInstanceUserOutput`](crate::output::UpdateAppInstanceUserOutput).
        pub fn build(self) -> crate::output::UpdateAppInstanceUserOutput {
            crate::output::UpdateAppInstanceUserOutput {
                app_instance_user_arn: self.app_instance_user_arn,
            }
        }
    }
}
impl UpdateAppInstanceUserOutput {
    /// Creates a new builder-style object to manufacture [`UpdateAppInstanceUserOutput`](crate::output::UpdateAppInstanceUserOutput).
    pub fn builder() -> crate::output::update_app_instance_user_output::Builder {
        crate::output::update_app_instance_user_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateAppInstanceOutput {
    /// <p>The ARN of the <code>AppInstance</code>. </p>
    #[doc(hidden)]
    pub app_instance_arn: std::option::Option<std::string::String>,
}
impl UpdateAppInstanceOutput {
    /// <p>The ARN of the <code>AppInstance</code>. </p>
    pub fn app_instance_arn(&self) -> std::option::Option<&str> {
        self.app_instance_arn.as_deref()
    }
}
/// See [`UpdateAppInstanceOutput`](crate::output::UpdateAppInstanceOutput).
pub mod update_app_instance_output {

    /// A builder for [`UpdateAppInstanceOutput`](crate::output::UpdateAppInstanceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) app_instance_arn: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The ARN of the <code>AppInstance</code>. </p>
        pub fn app_instance_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.app_instance_arn = Some(input.into());
            self
        }
        /// <p>The ARN of the <code>AppInstance</code>. </p>
        pub fn set_app_instance_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.app_instance_arn = input;
            self
        }
        /// Consumes the builder and constructs a [`UpdateAppInstanceOutput`](crate::output::UpdateAppInstanceOutput).
        pub fn build(self) -> crate::output::UpdateAppInstanceOutput {
            crate::output::UpdateAppInstanceOutput {
                app_instance_arn: self.app_instance_arn,
            }
        }
    }
}
impl UpdateAppInstanceOutput {
    /// Creates a new builder-style object to manufacture [`UpdateAppInstanceOutput`](crate::output::UpdateAppInstanceOutput).
    pub fn builder() -> crate::output::update_app_instance_output::Builder {
        crate::output::update_app_instance_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateAccountSettingsOutput {}
/// See [`UpdateAccountSettingsOutput`](crate::output::UpdateAccountSettingsOutput).
pub mod update_account_settings_output {

    /// A builder for [`UpdateAccountSettingsOutput`](crate::output::UpdateAccountSettingsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UpdateAccountSettingsOutput`](crate::output::UpdateAccountSettingsOutput).
        pub fn build(self) -> crate::output::UpdateAccountSettingsOutput {
            crate::output::UpdateAccountSettingsOutput {}
        }
    }
}
impl UpdateAccountSettingsOutput {
    /// Creates a new builder-style object to manufacture [`UpdateAccountSettingsOutput`](crate::output::UpdateAccountSettingsOutput).
    pub fn builder() -> crate::output::update_account_settings_output::Builder {
        crate::output::update_account_settings_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateAccountOutput {
    /// <p>The updated Amazon Chime account details.</p>
    #[doc(hidden)]
    pub account: std::option::Option<crate::model::Account>,
}
impl UpdateAccountOutput {
    /// <p>The updated Amazon Chime account details.</p>
    pub fn account(&self) -> std::option::Option<&crate::model::Account> {
        self.account.as_ref()
    }
}
/// See [`UpdateAccountOutput`](crate::output::UpdateAccountOutput).
pub mod update_account_output {

    /// A builder for [`UpdateAccountOutput`](crate::output::UpdateAccountOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) account: std::option::Option<crate::model::Account>,
    }
    impl Builder {
        /// <p>The updated Amazon Chime account details.</p>
        pub fn account(mut self, input: crate::model::Account) -> Self {
            self.account = Some(input);
            self
        }
        /// <p>The updated Amazon Chime account details.</p>
        pub fn set_account(mut self, input: std::option::Option<crate::model::Account>) -> Self {
            self.account = input;
            self
        }
        /// Consumes the builder and constructs a [`UpdateAccountOutput`](crate::output::UpdateAccountOutput).
        pub fn build(self) -> crate::output::UpdateAccountOutput {
            crate::output::UpdateAccountOutput {
                account: self.account,
            }
        }
    }
}
impl UpdateAccountOutput {
    /// Creates a new builder-style object to manufacture [`UpdateAccountOutput`](crate::output::UpdateAccountOutput).
    pub fn builder() -> crate::output::update_account_output::Builder {
        crate::output::update_account_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UntagResourceOutput {}
/// See [`UntagResourceOutput`](crate::output::UntagResourceOutput).
pub mod untag_resource_output {

    /// A builder for [`UntagResourceOutput`](crate::output::UntagResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UntagResourceOutput`](crate::output::UntagResourceOutput).
        pub fn build(self) -> crate::output::UntagResourceOutput {
            crate::output::UntagResourceOutput {}
        }
    }
}
impl UntagResourceOutput {
    /// Creates a new builder-style object to manufacture [`UntagResourceOutput`](crate::output::UntagResourceOutput).
    pub fn builder() -> crate::output::untag_resource_output::Builder {
        crate::output::untag_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UntagMeetingOutput {}
/// See [`UntagMeetingOutput`](crate::output::UntagMeetingOutput).
pub mod untag_meeting_output {

    /// A builder for [`UntagMeetingOutput`](crate::output::UntagMeetingOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UntagMeetingOutput`](crate::output::UntagMeetingOutput).
        pub fn build(self) -> crate::output::UntagMeetingOutput {
            crate::output::UntagMeetingOutput {}
        }
    }
}
impl UntagMeetingOutput {
    /// Creates a new builder-style object to manufacture [`UntagMeetingOutput`](crate::output::UntagMeetingOutput).
    pub fn builder() -> crate::output::untag_meeting_output::Builder {
        crate::output::untag_meeting_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UntagAttendeeOutput {}
/// See [`UntagAttendeeOutput`](crate::output::UntagAttendeeOutput).
pub mod untag_attendee_output {

    /// A builder for [`UntagAttendeeOutput`](crate::output::UntagAttendeeOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UntagAttendeeOutput`](crate::output::UntagAttendeeOutput).
        pub fn build(self) -> crate::output::UntagAttendeeOutput {
            crate::output::UntagAttendeeOutput {}
        }
    }
}
impl UntagAttendeeOutput {
    /// Creates a new builder-style object to manufacture [`UntagAttendeeOutput`](crate::output::UntagAttendeeOutput).
    pub fn builder() -> crate::output::untag_attendee_output::Builder {
        crate::output::untag_attendee_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TagResourceOutput {}
/// See [`TagResourceOutput`](crate::output::TagResourceOutput).
pub mod tag_resource_output {

    /// A builder for [`TagResourceOutput`](crate::output::TagResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`TagResourceOutput`](crate::output::TagResourceOutput).
        pub fn build(self) -> crate::output::TagResourceOutput {
            crate::output::TagResourceOutput {}
        }
    }
}
impl TagResourceOutput {
    /// Creates a new builder-style object to manufacture [`TagResourceOutput`](crate::output::TagResourceOutput).
    pub fn builder() -> crate::output::tag_resource_output::Builder {
        crate::output::tag_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TagMeetingOutput {}
/// See [`TagMeetingOutput`](crate::output::TagMeetingOutput).
pub mod tag_meeting_output {

    /// A builder for [`TagMeetingOutput`](crate::output::TagMeetingOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`TagMeetingOutput`](crate::output::TagMeetingOutput).
        pub fn build(self) -> crate::output::TagMeetingOutput {
            crate::output::TagMeetingOutput {}
        }
    }
}
impl TagMeetingOutput {
    /// Creates a new builder-style object to manufacture [`TagMeetingOutput`](crate::output::TagMeetingOutput).
    pub fn builder() -> crate::output::tag_meeting_output::Builder {
        crate::output::tag_meeting_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TagAttendeeOutput {}
/// See [`TagAttendeeOutput`](crate::output::TagAttendeeOutput).
pub mod tag_attendee_output {

    /// A builder for [`TagAttendeeOutput`](crate::output::TagAttendeeOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`TagAttendeeOutput`](crate::output::TagAttendeeOutput).
        pub fn build(self) -> crate::output::TagAttendeeOutput {
            crate::output::TagAttendeeOutput {}
        }
    }
}
impl TagAttendeeOutput {
    /// Creates a new builder-style object to manufacture [`TagAttendeeOutput`](crate::output::TagAttendeeOutput).
    pub fn builder() -> crate::output::tag_attendee_output::Builder {
        crate::output::tag_attendee_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StopMeetingTranscriptionOutput {}
/// See [`StopMeetingTranscriptionOutput`](crate::output::StopMeetingTranscriptionOutput).
pub mod stop_meeting_transcription_output {

    /// A builder for [`StopMeetingTranscriptionOutput`](crate::output::StopMeetingTranscriptionOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`StopMeetingTranscriptionOutput`](crate::output::StopMeetingTranscriptionOutput).
        pub fn build(self) -> crate::output::StopMeetingTranscriptionOutput {
            crate::output::StopMeetingTranscriptionOutput {}
        }
    }
}
impl StopMeetingTranscriptionOutput {
    /// Creates a new builder-style object to manufacture [`StopMeetingTranscriptionOutput`](crate::output::StopMeetingTranscriptionOutput).
    pub fn builder() -> crate::output::stop_meeting_transcription_output::Builder {
        crate::output::stop_meeting_transcription_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StartMeetingTranscriptionOutput {}
/// See [`StartMeetingTranscriptionOutput`](crate::output::StartMeetingTranscriptionOutput).
pub mod start_meeting_transcription_output {

    /// A builder for [`StartMeetingTranscriptionOutput`](crate::output::StartMeetingTranscriptionOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`StartMeetingTranscriptionOutput`](crate::output::StartMeetingTranscriptionOutput).
        pub fn build(self) -> crate::output::StartMeetingTranscriptionOutput {
            crate::output::StartMeetingTranscriptionOutput {}
        }
    }
}
impl StartMeetingTranscriptionOutput {
    /// Creates a new builder-style object to manufacture [`StartMeetingTranscriptionOutput`](crate::output::StartMeetingTranscriptionOutput).
    pub fn builder() -> crate::output::start_meeting_transcription_output::Builder {
        crate::output::start_meeting_transcription_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SendChannelMessageOutput {
    /// <p>The ARN of the channel.</p>
    #[doc(hidden)]
    pub channel_arn: std::option::Option<std::string::String>,
    /// <p>The ID string assigned to each message.</p>
    #[doc(hidden)]
    pub message_id: std::option::Option<std::string::String>,
}
impl SendChannelMessageOutput {
    /// <p>The ARN of the channel.</p>
    pub fn channel_arn(&self) -> std::option::Option<&str> {
        self.channel_arn.as_deref()
    }
    /// <p>The ID string assigned to each message.</p>
    pub fn message_id(&self) -> std::option::Option<&str> {
        self.message_id.as_deref()
    }
}
/// See [`SendChannelMessageOutput`](crate::output::SendChannelMessageOutput).
pub mod send_channel_message_output {

    /// A builder for [`SendChannelMessageOutput`](crate::output::SendChannelMessageOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) channel_arn: std::option::Option<std::string::String>,
        pub(crate) message_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The ARN of the channel.</p>
        pub fn channel_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.channel_arn = Some(input.into());
            self
        }
        /// <p>The ARN of the channel.</p>
        pub fn set_channel_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.channel_arn = input;
            self
        }
        /// <p>The ID string assigned to each message.</p>
        pub fn message_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.message_id = Some(input.into());
            self
        }
        /// <p>The ID string assigned to each message.</p>
        pub fn set_message_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message_id = input;
            self
        }
        /// Consumes the builder and constructs a [`SendChannelMessageOutput`](crate::output::SendChannelMessageOutput).
        pub fn build(self) -> crate::output::SendChannelMessageOutput {
            crate::output::SendChannelMessageOutput {
                channel_arn: self.channel_arn,
                message_id: self.message_id,
            }
        }
    }
}
impl SendChannelMessageOutput {
    /// Creates a new builder-style object to manufacture [`SendChannelMessageOutput`](crate::output::SendChannelMessageOutput).
    pub fn builder() -> crate::output::send_channel_message_output::Builder {
        crate::output::send_channel_message_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SearchAvailablePhoneNumbersOutput {
    /// <p>List of phone numbers, in E.164 format.</p>
    #[doc(hidden)]
    pub e164_phone_numbers: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The token used to retrieve the next page of search results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
}
impl SearchAvailablePhoneNumbersOutput {
    /// <p>List of phone numbers, in E.164 format.</p>
    pub fn e164_phone_numbers(&self) -> std::option::Option<&[std::string::String]> {
        self.e164_phone_numbers.as_deref()
    }
    /// <p>The token used to retrieve the next page of search results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
/// See [`SearchAvailablePhoneNumbersOutput`](crate::output::SearchAvailablePhoneNumbersOutput).
pub mod search_available_phone_numbers_output {

    /// A builder for [`SearchAvailablePhoneNumbersOutput`](crate::output::SearchAvailablePhoneNumbersOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) e164_phone_numbers: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `e164_phone_numbers`.
        ///
        /// To override the contents of this collection use [`set_e164_phone_numbers`](Self::set_e164_phone_numbers).
        ///
        /// <p>List of phone numbers, in E.164 format.</p>
        pub fn e164_phone_numbers(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.e164_phone_numbers.unwrap_or_default();
            v.push(input.into());
            self.e164_phone_numbers = Some(v);
            self
        }
        /// <p>List of phone numbers, in E.164 format.</p>
        pub fn set_e164_phone_numbers(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.e164_phone_numbers = input;
            self
        }
        /// <p>The token used to retrieve the next page of search results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token used to retrieve the next page of search results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`SearchAvailablePhoneNumbersOutput`](crate::output::SearchAvailablePhoneNumbersOutput).
        pub fn build(self) -> crate::output::SearchAvailablePhoneNumbersOutput {
            crate::output::SearchAvailablePhoneNumbersOutput {
                e164_phone_numbers: self.e164_phone_numbers,
                next_token: self.next_token,
            }
        }
    }
}
impl SearchAvailablePhoneNumbersOutput {
    /// Creates a new builder-style object to manufacture [`SearchAvailablePhoneNumbersOutput`](crate::output::SearchAvailablePhoneNumbersOutput).
    pub fn builder() -> crate::output::search_available_phone_numbers_output::Builder {
        crate::output::search_available_phone_numbers_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RestorePhoneNumberOutput {
    /// <p>The phone number details.</p>
    #[doc(hidden)]
    pub phone_number: std::option::Option<crate::model::PhoneNumber>,
}
impl RestorePhoneNumberOutput {
    /// <p>The phone number details.</p>
    pub fn phone_number(&self) -> std::option::Option<&crate::model::PhoneNumber> {
        self.phone_number.as_ref()
    }
}
/// See [`RestorePhoneNumberOutput`](crate::output::RestorePhoneNumberOutput).
pub mod restore_phone_number_output {

    /// A builder for [`RestorePhoneNumberOutput`](crate::output::RestorePhoneNumberOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) phone_number: std::option::Option<crate::model::PhoneNumber>,
    }
    impl Builder {
        /// <p>The phone number details.</p>
        pub fn phone_number(mut self, input: crate::model::PhoneNumber) -> Self {
            self.phone_number = Some(input);
            self
        }
        /// <p>The phone number details.</p>
        pub fn set_phone_number(
            mut self,
            input: std::option::Option<crate::model::PhoneNumber>,
        ) -> Self {
            self.phone_number = input;
            self
        }
        /// Consumes the builder and constructs a [`RestorePhoneNumberOutput`](crate::output::RestorePhoneNumberOutput).
        pub fn build(self) -> crate::output::RestorePhoneNumberOutput {
            crate::output::RestorePhoneNumberOutput {
                phone_number: self.phone_number,
            }
        }
    }
}
impl RestorePhoneNumberOutput {
    /// Creates a new builder-style object to manufacture [`RestorePhoneNumberOutput`](crate::output::RestorePhoneNumberOutput).
    pub fn builder() -> crate::output::restore_phone_number_output::Builder {
        crate::output::restore_phone_number_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ResetPersonalPinOutput {
    /// <p>The user details and new personal meeting PIN.</p>
    #[doc(hidden)]
    pub user: std::option::Option<crate::model::User>,
}
impl ResetPersonalPinOutput {
    /// <p>The user details and new personal meeting PIN.</p>
    pub fn user(&self) -> std::option::Option<&crate::model::User> {
        self.user.as_ref()
    }
}
/// See [`ResetPersonalPinOutput`](crate::output::ResetPersonalPinOutput).
pub mod reset_personal_pin_output {

    /// A builder for [`ResetPersonalPinOutput`](crate::output::ResetPersonalPinOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) user: std::option::Option<crate::model::User>,
    }
    impl Builder {
        /// <p>The user details and new personal meeting PIN.</p>
        pub fn user(mut self, input: crate::model::User) -> Self {
            self.user = Some(input);
            self
        }
        /// <p>The user details and new personal meeting PIN.</p>
        pub fn set_user(mut self, input: std::option::Option<crate::model::User>) -> Self {
            self.user = input;
            self
        }
        /// Consumes the builder and constructs a [`ResetPersonalPinOutput`](crate::output::ResetPersonalPinOutput).
        pub fn build(self) -> crate::output::ResetPersonalPinOutput {
            crate::output::ResetPersonalPinOutput { user: self.user }
        }
    }
}
impl ResetPersonalPinOutput {
    /// Creates a new builder-style object to manufacture [`ResetPersonalPinOutput`](crate::output::ResetPersonalPinOutput).
    pub fn builder() -> crate::output::reset_personal_pin_output::Builder {
        crate::output::reset_personal_pin_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RegenerateSecurityTokenOutput {
    /// <p>A resource that allows Enterprise account administrators to configure an interface to receive events from Amazon Chime.</p>
    #[doc(hidden)]
    pub bot: std::option::Option<crate::model::Bot>,
}
impl RegenerateSecurityTokenOutput {
    /// <p>A resource that allows Enterprise account administrators to configure an interface to receive events from Amazon Chime.</p>
    pub fn bot(&self) -> std::option::Option<&crate::model::Bot> {
        self.bot.as_ref()
    }
}
/// See [`RegenerateSecurityTokenOutput`](crate::output::RegenerateSecurityTokenOutput).
pub mod regenerate_security_token_output {

    /// A builder for [`RegenerateSecurityTokenOutput`](crate::output::RegenerateSecurityTokenOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) bot: std::option::Option<crate::model::Bot>,
    }
    impl Builder {
        /// <p>A resource that allows Enterprise account administrators to configure an interface to receive events from Amazon Chime.</p>
        pub fn bot(mut self, input: crate::model::Bot) -> Self {
            self.bot = Some(input);
            self
        }
        /// <p>A resource that allows Enterprise account administrators to configure an interface to receive events from Amazon Chime.</p>
        pub fn set_bot(mut self, input: std::option::Option<crate::model::Bot>) -> Self {
            self.bot = input;
            self
        }
        /// Consumes the builder and constructs a [`RegenerateSecurityTokenOutput`](crate::output::RegenerateSecurityTokenOutput).
        pub fn build(self) -> crate::output::RegenerateSecurityTokenOutput {
            crate::output::RegenerateSecurityTokenOutput { bot: self.bot }
        }
    }
}
impl RegenerateSecurityTokenOutput {
    /// Creates a new builder-style object to manufacture [`RegenerateSecurityTokenOutput`](crate::output::RegenerateSecurityTokenOutput).
    pub fn builder() -> crate::output::regenerate_security_token_output::Builder {
        crate::output::regenerate_security_token_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RedactRoomMessageOutput {}
/// See [`RedactRoomMessageOutput`](crate::output::RedactRoomMessageOutput).
pub mod redact_room_message_output {

    /// A builder for [`RedactRoomMessageOutput`](crate::output::RedactRoomMessageOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`RedactRoomMessageOutput`](crate::output::RedactRoomMessageOutput).
        pub fn build(self) -> crate::output::RedactRoomMessageOutput {
            crate::output::RedactRoomMessageOutput {}
        }
    }
}
impl RedactRoomMessageOutput {
    /// Creates a new builder-style object to manufacture [`RedactRoomMessageOutput`](crate::output::RedactRoomMessageOutput).
    pub fn builder() -> crate::output::redact_room_message_output::Builder {
        crate::output::redact_room_message_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RedactConversationMessageOutput {}
/// See [`RedactConversationMessageOutput`](crate::output::RedactConversationMessageOutput).
pub mod redact_conversation_message_output {

    /// A builder for [`RedactConversationMessageOutput`](crate::output::RedactConversationMessageOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`RedactConversationMessageOutput`](crate::output::RedactConversationMessageOutput).
        pub fn build(self) -> crate::output::RedactConversationMessageOutput {
            crate::output::RedactConversationMessageOutput {}
        }
    }
}
impl RedactConversationMessageOutput {
    /// Creates a new builder-style object to manufacture [`RedactConversationMessageOutput`](crate::output::RedactConversationMessageOutput).
    pub fn builder() -> crate::output::redact_conversation_message_output::Builder {
        crate::output::redact_conversation_message_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RedactChannelMessageOutput {
    /// <p>The ARN of the channel containing the messages that you want to redact.</p>
    #[doc(hidden)]
    pub channel_arn: std::option::Option<std::string::String>,
    /// <p>The ID of the message being redacted.</p>
    #[doc(hidden)]
    pub message_id: std::option::Option<std::string::String>,
}
impl RedactChannelMessageOutput {
    /// <p>The ARN of the channel containing the messages that you want to redact.</p>
    pub fn channel_arn(&self) -> std::option::Option<&str> {
        self.channel_arn.as_deref()
    }
    /// <p>The ID of the message being redacted.</p>
    pub fn message_id(&self) -> std::option::Option<&str> {
        self.message_id.as_deref()
    }
}
/// See [`RedactChannelMessageOutput`](crate::output::RedactChannelMessageOutput).
pub mod redact_channel_message_output {

    /// A builder for [`RedactChannelMessageOutput`](crate::output::RedactChannelMessageOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) channel_arn: std::option::Option<std::string::String>,
        pub(crate) message_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The ARN of the channel containing the messages that you want to redact.</p>
        pub fn channel_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.channel_arn = Some(input.into());
            self
        }
        /// <p>The ARN of the channel containing the messages that you want to redact.</p>
        pub fn set_channel_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.channel_arn = input;
            self
        }
        /// <p>The ID of the message being redacted.</p>
        pub fn message_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.message_id = Some(input.into());
            self
        }
        /// <p>The ID of the message being redacted.</p>
        pub fn set_message_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message_id = input;
            self
        }
        /// Consumes the builder and constructs a [`RedactChannelMessageOutput`](crate::output::RedactChannelMessageOutput).
        pub fn build(self) -> crate::output::RedactChannelMessageOutput {
            crate::output::RedactChannelMessageOutput {
                channel_arn: self.channel_arn,
                message_id: self.message_id,
            }
        }
    }
}
impl RedactChannelMessageOutput {
    /// Creates a new builder-style object to manufacture [`RedactChannelMessageOutput`](crate::output::RedactChannelMessageOutput).
    pub fn builder() -> crate::output::redact_channel_message_output::Builder {
        crate::output::redact_channel_message_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PutVoiceConnectorTerminationCredentialsOutput {}
/// See [`PutVoiceConnectorTerminationCredentialsOutput`](crate::output::PutVoiceConnectorTerminationCredentialsOutput).
pub mod put_voice_connector_termination_credentials_output {

    /// A builder for [`PutVoiceConnectorTerminationCredentialsOutput`](crate::output::PutVoiceConnectorTerminationCredentialsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`PutVoiceConnectorTerminationCredentialsOutput`](crate::output::PutVoiceConnectorTerminationCredentialsOutput).
        pub fn build(self) -> crate::output::PutVoiceConnectorTerminationCredentialsOutput {
            crate::output::PutVoiceConnectorTerminationCredentialsOutput {}
        }
    }
}
impl PutVoiceConnectorTerminationCredentialsOutput {
    /// Creates a new builder-style object to manufacture [`PutVoiceConnectorTerminationCredentialsOutput`](crate::output::PutVoiceConnectorTerminationCredentialsOutput).
    pub fn builder() -> crate::output::put_voice_connector_termination_credentials_output::Builder {
        crate::output::put_voice_connector_termination_credentials_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PutVoiceConnectorTerminationOutput {
    /// <p>The updated termination setting details.</p>
    #[doc(hidden)]
    pub termination: std::option::Option<crate::model::Termination>,
}
impl PutVoiceConnectorTerminationOutput {
    /// <p>The updated termination setting details.</p>
    pub fn termination(&self) -> std::option::Option<&crate::model::Termination> {
        self.termination.as_ref()
    }
}
/// See [`PutVoiceConnectorTerminationOutput`](crate::output::PutVoiceConnectorTerminationOutput).
pub mod put_voice_connector_termination_output {

    /// A builder for [`PutVoiceConnectorTerminationOutput`](crate::output::PutVoiceConnectorTerminationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) termination: std::option::Option<crate::model::Termination>,
    }
    impl Builder {
        /// <p>The updated termination setting details.</p>
        pub fn termination(mut self, input: crate::model::Termination) -> Self {
            self.termination = Some(input);
            self
        }
        /// <p>The updated termination setting details.</p>
        pub fn set_termination(
            mut self,
            input: std::option::Option<crate::model::Termination>,
        ) -> Self {
            self.termination = input;
            self
        }
        /// Consumes the builder and constructs a [`PutVoiceConnectorTerminationOutput`](crate::output::PutVoiceConnectorTerminationOutput).
        pub fn build(self) -> crate::output::PutVoiceConnectorTerminationOutput {
            crate::output::PutVoiceConnectorTerminationOutput {
                termination: self.termination,
            }
        }
    }
}
impl PutVoiceConnectorTerminationOutput {
    /// Creates a new builder-style object to manufacture [`PutVoiceConnectorTerminationOutput`](crate::output::PutVoiceConnectorTerminationOutput).
    pub fn builder() -> crate::output::put_voice_connector_termination_output::Builder {
        crate::output::put_voice_connector_termination_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PutVoiceConnectorStreamingConfigurationOutput {
    /// <p>The updated streaming configuration details.</p>
    #[doc(hidden)]
    pub streaming_configuration: std::option::Option<crate::model::StreamingConfiguration>,
}
impl PutVoiceConnectorStreamingConfigurationOutput {
    /// <p>The updated streaming configuration details.</p>
    pub fn streaming_configuration(
        &self,
    ) -> std::option::Option<&crate::model::StreamingConfiguration> {
        self.streaming_configuration.as_ref()
    }
}
/// See [`PutVoiceConnectorStreamingConfigurationOutput`](crate::output::PutVoiceConnectorStreamingConfigurationOutput).
pub mod put_voice_connector_streaming_configuration_output {

    /// A builder for [`PutVoiceConnectorStreamingConfigurationOutput`](crate::output::PutVoiceConnectorStreamingConfigurationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) streaming_configuration:
            std::option::Option<crate::model::StreamingConfiguration>,
    }
    impl Builder {
        /// <p>The updated streaming configuration details.</p>
        pub fn streaming_configuration(
            mut self,
            input: crate::model::StreamingConfiguration,
        ) -> Self {
            self.streaming_configuration = Some(input);
            self
        }
        /// <p>The updated streaming configuration details.</p>
        pub fn set_streaming_configuration(
            mut self,
            input: std::option::Option<crate::model::StreamingConfiguration>,
        ) -> Self {
            self.streaming_configuration = input;
            self
        }
        /// Consumes the builder and constructs a [`PutVoiceConnectorStreamingConfigurationOutput`](crate::output::PutVoiceConnectorStreamingConfigurationOutput).
        pub fn build(self) -> crate::output::PutVoiceConnectorStreamingConfigurationOutput {
            crate::output::PutVoiceConnectorStreamingConfigurationOutput {
                streaming_configuration: self.streaming_configuration,
            }
        }
    }
}
impl PutVoiceConnectorStreamingConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`PutVoiceConnectorStreamingConfigurationOutput`](crate::output::PutVoiceConnectorStreamingConfigurationOutput).
    pub fn builder() -> crate::output::put_voice_connector_streaming_configuration_output::Builder {
        crate::output::put_voice_connector_streaming_configuration_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PutVoiceConnectorProxyOutput {
    /// <p>The proxy configuration details.</p>
    #[doc(hidden)]
    pub proxy: std::option::Option<crate::model::Proxy>,
}
impl PutVoiceConnectorProxyOutput {
    /// <p>The proxy configuration details.</p>
    pub fn proxy(&self) -> std::option::Option<&crate::model::Proxy> {
        self.proxy.as_ref()
    }
}
/// See [`PutVoiceConnectorProxyOutput`](crate::output::PutVoiceConnectorProxyOutput).
pub mod put_voice_connector_proxy_output {

    /// A builder for [`PutVoiceConnectorProxyOutput`](crate::output::PutVoiceConnectorProxyOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) proxy: std::option::Option<crate::model::Proxy>,
    }
    impl Builder {
        /// <p>The proxy configuration details.</p>
        pub fn proxy(mut self, input: crate::model::Proxy) -> Self {
            self.proxy = Some(input);
            self
        }
        /// <p>The proxy configuration details.</p>
        pub fn set_proxy(mut self, input: std::option::Option<crate::model::Proxy>) -> Self {
            self.proxy = input;
            self
        }
        /// Consumes the builder and constructs a [`PutVoiceConnectorProxyOutput`](crate::output::PutVoiceConnectorProxyOutput).
        pub fn build(self) -> crate::output::PutVoiceConnectorProxyOutput {
            crate::output::PutVoiceConnectorProxyOutput { proxy: self.proxy }
        }
    }
}
impl PutVoiceConnectorProxyOutput {
    /// Creates a new builder-style object to manufacture [`PutVoiceConnectorProxyOutput`](crate::output::PutVoiceConnectorProxyOutput).
    pub fn builder() -> crate::output::put_voice_connector_proxy_output::Builder {
        crate::output::put_voice_connector_proxy_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PutVoiceConnectorOriginationOutput {
    /// <p>The updated origination setting details.</p>
    #[doc(hidden)]
    pub origination: std::option::Option<crate::model::Origination>,
}
impl PutVoiceConnectorOriginationOutput {
    /// <p>The updated origination setting details.</p>
    pub fn origination(&self) -> std::option::Option<&crate::model::Origination> {
        self.origination.as_ref()
    }
}
/// See [`PutVoiceConnectorOriginationOutput`](crate::output::PutVoiceConnectorOriginationOutput).
pub mod put_voice_connector_origination_output {

    /// A builder for [`PutVoiceConnectorOriginationOutput`](crate::output::PutVoiceConnectorOriginationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) origination: std::option::Option<crate::model::Origination>,
    }
    impl Builder {
        /// <p>The updated origination setting details.</p>
        pub fn origination(mut self, input: crate::model::Origination) -> Self {
            self.origination = Some(input);
            self
        }
        /// <p>The updated origination setting details.</p>
        pub fn set_origination(
            mut self,
            input: std::option::Option<crate::model::Origination>,
        ) -> Self {
            self.origination = input;
            self
        }
        /// Consumes the builder and constructs a [`PutVoiceConnectorOriginationOutput`](crate::output::PutVoiceConnectorOriginationOutput).
        pub fn build(self) -> crate::output::PutVoiceConnectorOriginationOutput {
            crate::output::PutVoiceConnectorOriginationOutput {
                origination: self.origination,
            }
        }
    }
}
impl PutVoiceConnectorOriginationOutput {
    /// Creates a new builder-style object to manufacture [`PutVoiceConnectorOriginationOutput`](crate::output::PutVoiceConnectorOriginationOutput).
    pub fn builder() -> crate::output::put_voice_connector_origination_output::Builder {
        crate::output::put_voice_connector_origination_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PutVoiceConnectorLoggingConfigurationOutput {
    /// <p>The updated logging configuration details.</p>
    #[doc(hidden)]
    pub logging_configuration: std::option::Option<crate::model::LoggingConfiguration>,
}
impl PutVoiceConnectorLoggingConfigurationOutput {
    /// <p>The updated logging configuration details.</p>
    pub fn logging_configuration(
        &self,
    ) -> std::option::Option<&crate::model::LoggingConfiguration> {
        self.logging_configuration.as_ref()
    }
}
/// See [`PutVoiceConnectorLoggingConfigurationOutput`](crate::output::PutVoiceConnectorLoggingConfigurationOutput).
pub mod put_voice_connector_logging_configuration_output {

    /// A builder for [`PutVoiceConnectorLoggingConfigurationOutput`](crate::output::PutVoiceConnectorLoggingConfigurationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) logging_configuration: std::option::Option<crate::model::LoggingConfiguration>,
    }
    impl Builder {
        /// <p>The updated logging configuration details.</p>
        pub fn logging_configuration(mut self, input: crate::model::LoggingConfiguration) -> Self {
            self.logging_configuration = Some(input);
            self
        }
        /// <p>The updated logging configuration details.</p>
        pub fn set_logging_configuration(
            mut self,
            input: std::option::Option<crate::model::LoggingConfiguration>,
        ) -> Self {
            self.logging_configuration = input;
            self
        }
        /// Consumes the builder and constructs a [`PutVoiceConnectorLoggingConfigurationOutput`](crate::output::PutVoiceConnectorLoggingConfigurationOutput).
        pub fn build(self) -> crate::output::PutVoiceConnectorLoggingConfigurationOutput {
            crate::output::PutVoiceConnectorLoggingConfigurationOutput {
                logging_configuration: self.logging_configuration,
            }
        }
    }
}
impl PutVoiceConnectorLoggingConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`PutVoiceConnectorLoggingConfigurationOutput`](crate::output::PutVoiceConnectorLoggingConfigurationOutput).
    pub fn builder() -> crate::output::put_voice_connector_logging_configuration_output::Builder {
        crate::output::put_voice_connector_logging_configuration_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PutVoiceConnectorEmergencyCallingConfigurationOutput {
    /// <p>The emergency calling configuration details.</p>
    #[doc(hidden)]
    pub emergency_calling_configuration:
        std::option::Option<crate::model::EmergencyCallingConfiguration>,
}
impl PutVoiceConnectorEmergencyCallingConfigurationOutput {
    /// <p>The emergency calling configuration details.</p>
    pub fn emergency_calling_configuration(
        &self,
    ) -> std::option::Option<&crate::model::EmergencyCallingConfiguration> {
        self.emergency_calling_configuration.as_ref()
    }
}
/// See [`PutVoiceConnectorEmergencyCallingConfigurationOutput`](crate::output::PutVoiceConnectorEmergencyCallingConfigurationOutput).
pub mod put_voice_connector_emergency_calling_configuration_output {

    /// A builder for [`PutVoiceConnectorEmergencyCallingConfigurationOutput`](crate::output::PutVoiceConnectorEmergencyCallingConfigurationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) emergency_calling_configuration:
            std::option::Option<crate::model::EmergencyCallingConfiguration>,
    }
    impl Builder {
        /// <p>The emergency calling configuration details.</p>
        pub fn emergency_calling_configuration(
            mut self,
            input: crate::model::EmergencyCallingConfiguration,
        ) -> Self {
            self.emergency_calling_configuration = Some(input);
            self
        }
        /// <p>The emergency calling configuration details.</p>
        pub fn set_emergency_calling_configuration(
            mut self,
            input: std::option::Option<crate::model::EmergencyCallingConfiguration>,
        ) -> Self {
            self.emergency_calling_configuration = input;
            self
        }
        /// Consumes the builder and constructs a [`PutVoiceConnectorEmergencyCallingConfigurationOutput`](crate::output::PutVoiceConnectorEmergencyCallingConfigurationOutput).
        pub fn build(self) -> crate::output::PutVoiceConnectorEmergencyCallingConfigurationOutput {
            crate::output::PutVoiceConnectorEmergencyCallingConfigurationOutput {
                emergency_calling_configuration: self.emergency_calling_configuration,
            }
        }
    }
}
impl PutVoiceConnectorEmergencyCallingConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`PutVoiceConnectorEmergencyCallingConfigurationOutput`](crate::output::PutVoiceConnectorEmergencyCallingConfigurationOutput).
    pub fn builder(
    ) -> crate::output::put_voice_connector_emergency_calling_configuration_output::Builder {
        crate::output::put_voice_connector_emergency_calling_configuration_output::Builder::default(
        )
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PutSipMediaApplicationLoggingConfigurationOutput {
    /// <p>Logging configuration of the SIP media application.</p>
    #[doc(hidden)]
    pub sip_media_application_logging_configuration:
        std::option::Option<crate::model::SipMediaApplicationLoggingConfiguration>,
}
impl PutSipMediaApplicationLoggingConfigurationOutput {
    /// <p>Logging configuration of the SIP media application.</p>
    pub fn sip_media_application_logging_configuration(
        &self,
    ) -> std::option::Option<&crate::model::SipMediaApplicationLoggingConfiguration> {
        self.sip_media_application_logging_configuration.as_ref()
    }
}
/// See [`PutSipMediaApplicationLoggingConfigurationOutput`](crate::output::PutSipMediaApplicationLoggingConfigurationOutput).
pub mod put_sip_media_application_logging_configuration_output {

    /// A builder for [`PutSipMediaApplicationLoggingConfigurationOutput`](crate::output::PutSipMediaApplicationLoggingConfigurationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) sip_media_application_logging_configuration:
            std::option::Option<crate::model::SipMediaApplicationLoggingConfiguration>,
    }
    impl Builder {
        /// <p>Logging configuration of the SIP media application.</p>
        pub fn sip_media_application_logging_configuration(
            mut self,
            input: crate::model::SipMediaApplicationLoggingConfiguration,
        ) -> Self {
            self.sip_media_application_logging_configuration = Some(input);
            self
        }
        /// <p>Logging configuration of the SIP media application.</p>
        pub fn set_sip_media_application_logging_configuration(
            mut self,
            input: std::option::Option<crate::model::SipMediaApplicationLoggingConfiguration>,
        ) -> Self {
            self.sip_media_application_logging_configuration = input;
            self
        }
        /// Consumes the builder and constructs a [`PutSipMediaApplicationLoggingConfigurationOutput`](crate::output::PutSipMediaApplicationLoggingConfigurationOutput).
        pub fn build(self) -> crate::output::PutSipMediaApplicationLoggingConfigurationOutput {
            crate::output::PutSipMediaApplicationLoggingConfigurationOutput {
                sip_media_application_logging_configuration: self
                    .sip_media_application_logging_configuration,
            }
        }
    }
}
impl PutSipMediaApplicationLoggingConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`PutSipMediaApplicationLoggingConfigurationOutput`](crate::output::PutSipMediaApplicationLoggingConfigurationOutput).
    pub fn builder(
    ) -> crate::output::put_sip_media_application_logging_configuration_output::Builder {
        crate::output::put_sip_media_application_logging_configuration_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PutRetentionSettingsOutput {
    /// <p>The retention settings.</p>
    #[doc(hidden)]
    pub retention_settings: std::option::Option<crate::model::RetentionSettings>,
    /// <p>The timestamp representing the time at which the specified items are permanently deleted, in ISO 8601 format.</p>
    #[doc(hidden)]
    pub initiate_deletion_timestamp: std::option::Option<aws_smithy_types::DateTime>,
}
impl PutRetentionSettingsOutput {
    /// <p>The retention settings.</p>
    pub fn retention_settings(&self) -> std::option::Option<&crate::model::RetentionSettings> {
        self.retention_settings.as_ref()
    }
    /// <p>The timestamp representing the time at which the specified items are permanently deleted, in ISO 8601 format.</p>
    pub fn initiate_deletion_timestamp(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.initiate_deletion_timestamp.as_ref()
    }
}
/// See [`PutRetentionSettingsOutput`](crate::output::PutRetentionSettingsOutput).
pub mod put_retention_settings_output {

    /// A builder for [`PutRetentionSettingsOutput`](crate::output::PutRetentionSettingsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) retention_settings: std::option::Option<crate::model::RetentionSettings>,
        pub(crate) initiate_deletion_timestamp: std::option::Option<aws_smithy_types::DateTime>,
    }
    impl Builder {
        /// <p>The retention settings.</p>
        pub fn retention_settings(mut self, input: crate::model::RetentionSettings) -> Self {
            self.retention_settings = Some(input);
            self
        }
        /// <p>The retention settings.</p>
        pub fn set_retention_settings(
            mut self,
            input: std::option::Option<crate::model::RetentionSettings>,
        ) -> Self {
            self.retention_settings = input;
            self
        }
        /// <p>The timestamp representing the time at which the specified items are permanently deleted, in ISO 8601 format.</p>
        pub fn initiate_deletion_timestamp(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.initiate_deletion_timestamp = Some(input);
            self
        }
        /// <p>The timestamp representing the time at which the specified items are permanently deleted, in ISO 8601 format.</p>
        pub fn set_initiate_deletion_timestamp(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.initiate_deletion_timestamp = input;
            self
        }
        /// Consumes the builder and constructs a [`PutRetentionSettingsOutput`](crate::output::PutRetentionSettingsOutput).
        pub fn build(self) -> crate::output::PutRetentionSettingsOutput {
            crate::output::PutRetentionSettingsOutput {
                retention_settings: self.retention_settings,
                initiate_deletion_timestamp: self.initiate_deletion_timestamp,
            }
        }
    }
}
impl PutRetentionSettingsOutput {
    /// Creates a new builder-style object to manufacture [`PutRetentionSettingsOutput`](crate::output::PutRetentionSettingsOutput).
    pub fn builder() -> crate::output::put_retention_settings_output::Builder {
        crate::output::put_retention_settings_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PutEventsConfigurationOutput {
    /// <p>The configuration that allows a bot to receive outgoing events. Can be either an HTTPS endpoint or a Lambda function ARN.</p>
    #[doc(hidden)]
    pub events_configuration: std::option::Option<crate::model::EventsConfiguration>,
}
impl PutEventsConfigurationOutput {
    /// <p>The configuration that allows a bot to receive outgoing events. Can be either an HTTPS endpoint or a Lambda function ARN.</p>
    pub fn events_configuration(&self) -> std::option::Option<&crate::model::EventsConfiguration> {
        self.events_configuration.as_ref()
    }
}
/// See [`PutEventsConfigurationOutput`](crate::output::PutEventsConfigurationOutput).
pub mod put_events_configuration_output {

    /// A builder for [`PutEventsConfigurationOutput`](crate::output::PutEventsConfigurationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) events_configuration: std::option::Option<crate::model::EventsConfiguration>,
    }
    impl Builder {
        /// <p>The configuration that allows a bot to receive outgoing events. Can be either an HTTPS endpoint or a Lambda function ARN.</p>
        pub fn events_configuration(mut self, input: crate::model::EventsConfiguration) -> Self {
            self.events_configuration = Some(input);
            self
        }
        /// <p>The configuration that allows a bot to receive outgoing events. Can be either an HTTPS endpoint or a Lambda function ARN.</p>
        pub fn set_events_configuration(
            mut self,
            input: std::option::Option<crate::model::EventsConfiguration>,
        ) -> Self {
            self.events_configuration = input;
            self
        }
        /// Consumes the builder and constructs a [`PutEventsConfigurationOutput`](crate::output::PutEventsConfigurationOutput).
        pub fn build(self) -> crate::output::PutEventsConfigurationOutput {
            crate::output::PutEventsConfigurationOutput {
                events_configuration: self.events_configuration,
            }
        }
    }
}
impl PutEventsConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`PutEventsConfigurationOutput`](crate::output::PutEventsConfigurationOutput).
    pub fn builder() -> crate::output::put_events_configuration_output::Builder {
        crate::output::put_events_configuration_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PutAppInstanceStreamingConfigurationsOutput {
    /// <p>The streaming configurations of an <code>AppInstance</code>.</p>
    #[doc(hidden)]
    pub app_instance_streaming_configurations:
        std::option::Option<std::vec::Vec<crate::model::AppInstanceStreamingConfiguration>>,
}
impl PutAppInstanceStreamingConfigurationsOutput {
    /// <p>The streaming configurations of an <code>AppInstance</code>.</p>
    pub fn app_instance_streaming_configurations(
        &self,
    ) -> std::option::Option<&[crate::model::AppInstanceStreamingConfiguration]> {
        self.app_instance_streaming_configurations.as_deref()
    }
}
/// See [`PutAppInstanceStreamingConfigurationsOutput`](crate::output::PutAppInstanceStreamingConfigurationsOutput).
pub mod put_app_instance_streaming_configurations_output {

    /// A builder for [`PutAppInstanceStreamingConfigurationsOutput`](crate::output::PutAppInstanceStreamingConfigurationsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) app_instance_streaming_configurations:
            std::option::Option<std::vec::Vec<crate::model::AppInstanceStreamingConfiguration>>,
    }
    impl Builder {
        /// Appends an item to `app_instance_streaming_configurations`.
        ///
        /// To override the contents of this collection use [`set_app_instance_streaming_configurations`](Self::set_app_instance_streaming_configurations).
        ///
        /// <p>The streaming configurations of an <code>AppInstance</code>.</p>
        pub fn app_instance_streaming_configurations(
            mut self,
            input: crate::model::AppInstanceStreamingConfiguration,
        ) -> Self {
            let mut v = self
                .app_instance_streaming_configurations
                .unwrap_or_default();
            v.push(input);
            self.app_instance_streaming_configurations = Some(v);
            self
        }
        /// <p>The streaming configurations of an <code>AppInstance</code>.</p>
        pub fn set_app_instance_streaming_configurations(
            mut self,
            input: std::option::Option<
                std::vec::Vec<crate::model::AppInstanceStreamingConfiguration>,
            >,
        ) -> Self {
            self.app_instance_streaming_configurations = input;
            self
        }
        /// Consumes the builder and constructs a [`PutAppInstanceStreamingConfigurationsOutput`](crate::output::PutAppInstanceStreamingConfigurationsOutput).
        pub fn build(self) -> crate::output::PutAppInstanceStreamingConfigurationsOutput {
            crate::output::PutAppInstanceStreamingConfigurationsOutput {
                app_instance_streaming_configurations: self.app_instance_streaming_configurations,
            }
        }
    }
}
impl PutAppInstanceStreamingConfigurationsOutput {
    /// Creates a new builder-style object to manufacture [`PutAppInstanceStreamingConfigurationsOutput`](crate::output::PutAppInstanceStreamingConfigurationsOutput).
    pub fn builder() -> crate::output::put_app_instance_streaming_configurations_output::Builder {
        crate::output::put_app_instance_streaming_configurations_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PutAppInstanceRetentionSettingsOutput {
    /// <p>The time in days to retain data. Data type: number.</p>
    #[doc(hidden)]
    pub app_instance_retention_settings:
        std::option::Option<crate::model::AppInstanceRetentionSettings>,
    /// <p>The time at which the API deletes data.</p>
    #[doc(hidden)]
    pub initiate_deletion_timestamp: std::option::Option<aws_smithy_types::DateTime>,
}
impl PutAppInstanceRetentionSettingsOutput {
    /// <p>The time in days to retain data. Data type: number.</p>
    pub fn app_instance_retention_settings(
        &self,
    ) -> std::option::Option<&crate::model::AppInstanceRetentionSettings> {
        self.app_instance_retention_settings.as_ref()
    }
    /// <p>The time at which the API deletes data.</p>
    pub fn initiate_deletion_timestamp(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.initiate_deletion_timestamp.as_ref()
    }
}
/// See [`PutAppInstanceRetentionSettingsOutput`](crate::output::PutAppInstanceRetentionSettingsOutput).
pub mod put_app_instance_retention_settings_output {

    /// A builder for [`PutAppInstanceRetentionSettingsOutput`](crate::output::PutAppInstanceRetentionSettingsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) app_instance_retention_settings:
            std::option::Option<crate::model::AppInstanceRetentionSettings>,
        pub(crate) initiate_deletion_timestamp: std::option::Option<aws_smithy_types::DateTime>,
    }
    impl Builder {
        /// <p>The time in days to retain data. Data type: number.</p>
        pub fn app_instance_retention_settings(
            mut self,
            input: crate::model::AppInstanceRetentionSettings,
        ) -> Self {
            self.app_instance_retention_settings = Some(input);
            self
        }
        /// <p>The time in days to retain data. Data type: number.</p>
        pub fn set_app_instance_retention_settings(
            mut self,
            input: std::option::Option<crate::model::AppInstanceRetentionSettings>,
        ) -> Self {
            self.app_instance_retention_settings = input;
            self
        }
        /// <p>The time at which the API deletes data.</p>
        pub fn initiate_deletion_timestamp(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.initiate_deletion_timestamp = Some(input);
            self
        }
        /// <p>The time at which the API deletes data.</p>
        pub fn set_initiate_deletion_timestamp(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.initiate_deletion_timestamp = input;
            self
        }
        /// Consumes the builder and constructs a [`PutAppInstanceRetentionSettingsOutput`](crate::output::PutAppInstanceRetentionSettingsOutput).
        pub fn build(self) -> crate::output::PutAppInstanceRetentionSettingsOutput {
            crate::output::PutAppInstanceRetentionSettingsOutput {
                app_instance_retention_settings: self.app_instance_retention_settings,
                initiate_deletion_timestamp: self.initiate_deletion_timestamp,
            }
        }
    }
}
impl PutAppInstanceRetentionSettingsOutput {
    /// Creates a new builder-style object to manufacture [`PutAppInstanceRetentionSettingsOutput`](crate::output::PutAppInstanceRetentionSettingsOutput).
    pub fn builder() -> crate::output::put_app_instance_retention_settings_output::Builder {
        crate::output::put_app_instance_retention_settings_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct LogoutUserOutput {}
/// See [`LogoutUserOutput`](crate::output::LogoutUserOutput).
pub mod logout_user_output {

    /// A builder for [`LogoutUserOutput`](crate::output::LogoutUserOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`LogoutUserOutput`](crate::output::LogoutUserOutput).
        pub fn build(self) -> crate::output::LogoutUserOutput {
            crate::output::LogoutUserOutput {}
        }
    }
}
impl LogoutUserOutput {
    /// Creates a new builder-style object to manufacture [`LogoutUserOutput`](crate::output::LogoutUserOutput).
    pub fn builder() -> crate::output::logout_user_output::Builder {
        crate::output::logout_user_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListVoiceConnectorTerminationCredentialsOutput {
    /// <p>A list of user names.</p>
    #[doc(hidden)]
    pub usernames: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl ListVoiceConnectorTerminationCredentialsOutput {
    /// <p>A list of user names.</p>
    pub fn usernames(&self) -> std::option::Option<&[std::string::String]> {
        self.usernames.as_deref()
    }
}
/// See [`ListVoiceConnectorTerminationCredentialsOutput`](crate::output::ListVoiceConnectorTerminationCredentialsOutput).
pub mod list_voice_connector_termination_credentials_output {

    /// A builder for [`ListVoiceConnectorTerminationCredentialsOutput`](crate::output::ListVoiceConnectorTerminationCredentialsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) usernames: std::option::Option<std::vec::Vec<std::string::String>>,
    }
    impl Builder {
        /// Appends an item to `usernames`.
        ///
        /// To override the contents of this collection use [`set_usernames`](Self::set_usernames).
        ///
        /// <p>A list of user names.</p>
        pub fn usernames(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.usernames.unwrap_or_default();
            v.push(input.into());
            self.usernames = Some(v);
            self
        }
        /// <p>A list of user names.</p>
        pub fn set_usernames(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.usernames = input;
            self
        }
        /// Consumes the builder and constructs a [`ListVoiceConnectorTerminationCredentialsOutput`](crate::output::ListVoiceConnectorTerminationCredentialsOutput).
        pub fn build(self) -> crate::output::ListVoiceConnectorTerminationCredentialsOutput {
            crate::output::ListVoiceConnectorTerminationCredentialsOutput {
                usernames: self.usernames,
            }
        }
    }
}
impl ListVoiceConnectorTerminationCredentialsOutput {
    /// Creates a new builder-style object to manufacture [`ListVoiceConnectorTerminationCredentialsOutput`](crate::output::ListVoiceConnectorTerminationCredentialsOutput).
    pub fn builder() -> crate::output::list_voice_connector_termination_credentials_output::Builder
    {
        crate::output::list_voice_connector_termination_credentials_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListVoiceConnectorsOutput {
    /// <p>The details of the Amazon Chime Voice Connectors.</p>
    #[doc(hidden)]
    pub voice_connectors: std::option::Option<std::vec::Vec<crate::model::VoiceConnector>>,
    /// <p>The token to use to retrieve the next page of results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
}
impl ListVoiceConnectorsOutput {
    /// <p>The details of the Amazon Chime Voice Connectors.</p>
    pub fn voice_connectors(&self) -> std::option::Option<&[crate::model::VoiceConnector]> {
        self.voice_connectors.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
/// See [`ListVoiceConnectorsOutput`](crate::output::ListVoiceConnectorsOutput).
pub mod list_voice_connectors_output {

    /// A builder for [`ListVoiceConnectorsOutput`](crate::output::ListVoiceConnectorsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) voice_connectors:
            std::option::Option<std::vec::Vec<crate::model::VoiceConnector>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `voice_connectors`.
        ///
        /// To override the contents of this collection use [`set_voice_connectors`](Self::set_voice_connectors).
        ///
        /// <p>The details of the Amazon Chime Voice Connectors.</p>
        pub fn voice_connectors(mut self, input: crate::model::VoiceConnector) -> Self {
            let mut v = self.voice_connectors.unwrap_or_default();
            v.push(input);
            self.voice_connectors = Some(v);
            self
        }
        /// <p>The details of the Amazon Chime Voice Connectors.</p>
        pub fn set_voice_connectors(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::VoiceConnector>>,
        ) -> Self {
            self.voice_connectors = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListVoiceConnectorsOutput`](crate::output::ListVoiceConnectorsOutput).
        pub fn build(self) -> crate::output::ListVoiceConnectorsOutput {
            crate::output::ListVoiceConnectorsOutput {
                voice_connectors: self.voice_connectors,
                next_token: self.next_token,
            }
        }
    }
}
impl ListVoiceConnectorsOutput {
    /// Creates a new builder-style object to manufacture [`ListVoiceConnectorsOutput`](crate::output::ListVoiceConnectorsOutput).
    pub fn builder() -> crate::output::list_voice_connectors_output::Builder {
        crate::output::list_voice_connectors_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListVoiceConnectorGroupsOutput {
    /// <p>The details of the Amazon Chime Voice Connector groups.</p>
    #[doc(hidden)]
    pub voice_connector_groups:
        std::option::Option<std::vec::Vec<crate::model::VoiceConnectorGroup>>,
    /// <p>The token to use to retrieve the next page of results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
}
impl ListVoiceConnectorGroupsOutput {
    /// <p>The details of the Amazon Chime Voice Connector groups.</p>
    pub fn voice_connector_groups(
        &self,
    ) -> std::option::Option<&[crate::model::VoiceConnectorGroup]> {
        self.voice_connector_groups.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
/// See [`ListVoiceConnectorGroupsOutput`](crate::output::ListVoiceConnectorGroupsOutput).
pub mod list_voice_connector_groups_output {

    /// A builder for [`ListVoiceConnectorGroupsOutput`](crate::output::ListVoiceConnectorGroupsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) voice_connector_groups:
            std::option::Option<std::vec::Vec<crate::model::VoiceConnectorGroup>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `voice_connector_groups`.
        ///
        /// To override the contents of this collection use [`set_voice_connector_groups`](Self::set_voice_connector_groups).
        ///
        /// <p>The details of the Amazon Chime Voice Connector groups.</p>
        pub fn voice_connector_groups(mut self, input: crate::model::VoiceConnectorGroup) -> Self {
            let mut v = self.voice_connector_groups.unwrap_or_default();
            v.push(input);
            self.voice_connector_groups = Some(v);
            self
        }
        /// <p>The details of the Amazon Chime Voice Connector groups.</p>
        pub fn set_voice_connector_groups(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::VoiceConnectorGroup>>,
        ) -> Self {
            self.voice_connector_groups = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListVoiceConnectorGroupsOutput`](crate::output::ListVoiceConnectorGroupsOutput).
        pub fn build(self) -> crate::output::ListVoiceConnectorGroupsOutput {
            crate::output::ListVoiceConnectorGroupsOutput {
                voice_connector_groups: self.voice_connector_groups,
                next_token: self.next_token,
            }
        }
    }
}
impl ListVoiceConnectorGroupsOutput {
    /// Creates a new builder-style object to manufacture [`ListVoiceConnectorGroupsOutput`](crate::output::ListVoiceConnectorGroupsOutput).
    pub fn builder() -> crate::output::list_voice_connector_groups_output::Builder {
        crate::output::list_voice_connector_groups_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListUsersOutput {
    /// <p>List of users and user details.</p>
    #[doc(hidden)]
    pub users: std::option::Option<std::vec::Vec<crate::model::User>>,
    /// <p>The token to use to retrieve the next page of results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
}
impl ListUsersOutput {
    /// <p>List of users and user details.</p>
    pub fn users(&self) -> std::option::Option<&[crate::model::User]> {
        self.users.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
/// See [`ListUsersOutput`](crate::output::ListUsersOutput).
pub mod list_users_output {

    /// A builder for [`ListUsersOutput`](crate::output::ListUsersOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) users: std::option::Option<std::vec::Vec<crate::model::User>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `users`.
        ///
        /// To override the contents of this collection use [`set_users`](Self::set_users).
        ///
        /// <p>List of users and user details.</p>
        pub fn users(mut self, input: crate::model::User) -> Self {
            let mut v = self.users.unwrap_or_default();
            v.push(input);
            self.users = Some(v);
            self
        }
        /// <p>List of users and user details.</p>
        pub fn set_users(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::User>>,
        ) -> Self {
            self.users = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListUsersOutput`](crate::output::ListUsersOutput).
        pub fn build(self) -> crate::output::ListUsersOutput {
            crate::output::ListUsersOutput {
                users: self.users,
                next_token: self.next_token,
            }
        }
    }
}
impl ListUsersOutput {
    /// Creates a new builder-style object to manufacture [`ListUsersOutput`](crate::output::ListUsersOutput).
    pub fn builder() -> crate::output::list_users_output::Builder {
        crate::output::list_users_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListTagsForResourceOutput {
    /// <p>A list of tag-key value pairs.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
}
impl ListTagsForResourceOutput {
    /// <p>A list of tag-key value pairs.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::model::Tag]> {
        self.tags.as_deref()
    }
}
/// See [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
pub mod list_tags_for_resource_output {

    /// A builder for [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    }
    impl Builder {
        /// Appends an item to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>A list of tag-key value pairs.</p>
        pub fn tags(mut self, input: crate::model::Tag) -> Self {
            let mut v = self.tags.unwrap_or_default();
            v.push(input);
            self.tags = Some(v);
            self
        }
        /// <p>A list of tag-key value pairs.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.tags = input;
            self
        }
        /// Consumes the builder and constructs a [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
        pub fn build(self) -> crate::output::ListTagsForResourceOutput {
            crate::output::ListTagsForResourceOutput { tags: self.tags }
        }
    }
}
impl ListTagsForResourceOutput {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
    pub fn builder() -> crate::output::list_tags_for_resource_output::Builder {
        crate::output::list_tags_for_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListSupportedPhoneNumberCountriesOutput {
    /// <p>The supported phone number countries.</p>
    #[doc(hidden)]
    pub phone_number_countries:
        std::option::Option<std::vec::Vec<crate::model::PhoneNumberCountry>>,
}
impl ListSupportedPhoneNumberCountriesOutput {
    /// <p>The supported phone number countries.</p>
    pub fn phone_number_countries(
        &self,
    ) -> std::option::Option<&[crate::model::PhoneNumberCountry]> {
        self.phone_number_countries.as_deref()
    }
}
/// See [`ListSupportedPhoneNumberCountriesOutput`](crate::output::ListSupportedPhoneNumberCountriesOutput).
pub mod list_supported_phone_number_countries_output {

    /// A builder for [`ListSupportedPhoneNumberCountriesOutput`](crate::output::ListSupportedPhoneNumberCountriesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) phone_number_countries:
            std::option::Option<std::vec::Vec<crate::model::PhoneNumberCountry>>,
    }
    impl Builder {
        /// Appends an item to `phone_number_countries`.
        ///
        /// To override the contents of this collection use [`set_phone_number_countries`](Self::set_phone_number_countries).
        ///
        /// <p>The supported phone number countries.</p>
        pub fn phone_number_countries(mut self, input: crate::model::PhoneNumberCountry) -> Self {
            let mut v = self.phone_number_countries.unwrap_or_default();
            v.push(input);
            self.phone_number_countries = Some(v);
            self
        }
        /// <p>The supported phone number countries.</p>
        pub fn set_phone_number_countries(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::PhoneNumberCountry>>,
        ) -> Self {
            self.phone_number_countries = input;
            self
        }
        /// Consumes the builder and constructs a [`ListSupportedPhoneNumberCountriesOutput`](crate::output::ListSupportedPhoneNumberCountriesOutput).
        pub fn build(self) -> crate::output::ListSupportedPhoneNumberCountriesOutput {
            crate::output::ListSupportedPhoneNumberCountriesOutput {
                phone_number_countries: self.phone_number_countries,
            }
        }
    }
}
impl ListSupportedPhoneNumberCountriesOutput {
    /// Creates a new builder-style object to manufacture [`ListSupportedPhoneNumberCountriesOutput`](crate::output::ListSupportedPhoneNumberCountriesOutput).
    pub fn builder() -> crate::output::list_supported_phone_number_countries_output::Builder {
        crate::output::list_supported_phone_number_countries_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListSipRulesOutput {
    /// <p>List of SIP rules and rule details.</p>
    #[doc(hidden)]
    pub sip_rules: std::option::Option<std::vec::Vec<crate::model::SipRule>>,
    /// <p>The token to use to retrieve the next page of results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
}
impl ListSipRulesOutput {
    /// <p>List of SIP rules and rule details.</p>
    pub fn sip_rules(&self) -> std::option::Option<&[crate::model::SipRule]> {
        self.sip_rules.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
/// See [`ListSipRulesOutput`](crate::output::ListSipRulesOutput).
pub mod list_sip_rules_output {

    /// A builder for [`ListSipRulesOutput`](crate::output::ListSipRulesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) sip_rules: std::option::Option<std::vec::Vec<crate::model::SipRule>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `sip_rules`.
        ///
        /// To override the contents of this collection use [`set_sip_rules`](Self::set_sip_rules).
        ///
        /// <p>List of SIP rules and rule details.</p>
        pub fn sip_rules(mut self, input: crate::model::SipRule) -> Self {
            let mut v = self.sip_rules.unwrap_or_default();
            v.push(input);
            self.sip_rules = Some(v);
            self
        }
        /// <p>List of SIP rules and rule details.</p>
        pub fn set_sip_rules(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::SipRule>>,
        ) -> Self {
            self.sip_rules = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListSipRulesOutput`](crate::output::ListSipRulesOutput).
        pub fn build(self) -> crate::output::ListSipRulesOutput {
            crate::output::ListSipRulesOutput {
                sip_rules: self.sip_rules,
                next_token: self.next_token,
            }
        }
    }
}
impl ListSipRulesOutput {
    /// Creates a new builder-style object to manufacture [`ListSipRulesOutput`](crate::output::ListSipRulesOutput).
    pub fn builder() -> crate::output::list_sip_rules_output::Builder {
        crate::output::list_sip_rules_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListSipMediaApplicationsOutput {
    /// <p>List of SIP media applications and application details.</p>
    #[doc(hidden)]
    pub sip_media_applications:
        std::option::Option<std::vec::Vec<crate::model::SipMediaApplication>>,
    /// <p>The token to use to retrieve the next page of results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
}
impl ListSipMediaApplicationsOutput {
    /// <p>List of SIP media applications and application details.</p>
    pub fn sip_media_applications(
        &self,
    ) -> std::option::Option<&[crate::model::SipMediaApplication]> {
        self.sip_media_applications.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
/// See [`ListSipMediaApplicationsOutput`](crate::output::ListSipMediaApplicationsOutput).
pub mod list_sip_media_applications_output {

    /// A builder for [`ListSipMediaApplicationsOutput`](crate::output::ListSipMediaApplicationsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) sip_media_applications:
            std::option::Option<std::vec::Vec<crate::model::SipMediaApplication>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `sip_media_applications`.
        ///
        /// To override the contents of this collection use [`set_sip_media_applications`](Self::set_sip_media_applications).
        ///
        /// <p>List of SIP media applications and application details.</p>
        pub fn sip_media_applications(mut self, input: crate::model::SipMediaApplication) -> Self {
            let mut v = self.sip_media_applications.unwrap_or_default();
            v.push(input);
            self.sip_media_applications = Some(v);
            self
        }
        /// <p>List of SIP media applications and application details.</p>
        pub fn set_sip_media_applications(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::SipMediaApplication>>,
        ) -> Self {
            self.sip_media_applications = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListSipMediaApplicationsOutput`](crate::output::ListSipMediaApplicationsOutput).
        pub fn build(self) -> crate::output::ListSipMediaApplicationsOutput {
            crate::output::ListSipMediaApplicationsOutput {
                sip_media_applications: self.sip_media_applications,
                next_token: self.next_token,
            }
        }
    }
}
impl ListSipMediaApplicationsOutput {
    /// Creates a new builder-style object to manufacture [`ListSipMediaApplicationsOutput`](crate::output::ListSipMediaApplicationsOutput).
    pub fn builder() -> crate::output::list_sip_media_applications_output::Builder {
        crate::output::list_sip_media_applications_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListRoomsOutput {
    /// <p>The room details.</p>
    #[doc(hidden)]
    pub rooms: std::option::Option<std::vec::Vec<crate::model::Room>>,
    /// <p>The token to use to retrieve the next page of results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
}
impl ListRoomsOutput {
    /// <p>The room details.</p>
    pub fn rooms(&self) -> std::option::Option<&[crate::model::Room]> {
        self.rooms.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
/// See [`ListRoomsOutput`](crate::output::ListRoomsOutput).
pub mod list_rooms_output {

    /// A builder for [`ListRoomsOutput`](crate::output::ListRoomsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) rooms: std::option::Option<std::vec::Vec<crate::model::Room>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `rooms`.
        ///
        /// To override the contents of this collection use [`set_rooms`](Self::set_rooms).
        ///
        /// <p>The room details.</p>
        pub fn rooms(mut self, input: crate::model::Room) -> Self {
            let mut v = self.rooms.unwrap_or_default();
            v.push(input);
            self.rooms = Some(v);
            self
        }
        /// <p>The room details.</p>
        pub fn set_rooms(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Room>>,
        ) -> Self {
            self.rooms = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListRoomsOutput`](crate::output::ListRoomsOutput).
        pub fn build(self) -> crate::output::ListRoomsOutput {
            crate::output::ListRoomsOutput {
                rooms: self.rooms,
                next_token: self.next_token,
            }
        }
    }
}
impl ListRoomsOutput {
    /// Creates a new builder-style object to manufacture [`ListRoomsOutput`](crate::output::ListRoomsOutput).
    pub fn builder() -> crate::output::list_rooms_output::Builder {
        crate::output::list_rooms_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListRoomMembershipsOutput {
    /// <p>The room membership details.</p>
    #[doc(hidden)]
    pub room_memberships: std::option::Option<std::vec::Vec<crate::model::RoomMembership>>,
    /// <p>The token to use to retrieve the next page of results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
}
impl ListRoomMembershipsOutput {
    /// <p>The room membership details.</p>
    pub fn room_memberships(&self) -> std::option::Option<&[crate::model::RoomMembership]> {
        self.room_memberships.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
/// See [`ListRoomMembershipsOutput`](crate::output::ListRoomMembershipsOutput).
pub mod list_room_memberships_output {

    /// A builder for [`ListRoomMembershipsOutput`](crate::output::ListRoomMembershipsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) room_memberships:
            std::option::Option<std::vec::Vec<crate::model::RoomMembership>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `room_memberships`.
        ///
        /// To override the contents of this collection use [`set_room_memberships`](Self::set_room_memberships).
        ///
        /// <p>The room membership details.</p>
        pub fn room_memberships(mut self, input: crate::model::RoomMembership) -> Self {
            let mut v = self.room_memberships.unwrap_or_default();
            v.push(input);
            self.room_memberships = Some(v);
            self
        }
        /// <p>The room membership details.</p>
        pub fn set_room_memberships(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::RoomMembership>>,
        ) -> Self {
            self.room_memberships = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListRoomMembershipsOutput`](crate::output::ListRoomMembershipsOutput).
        pub fn build(self) -> crate::output::ListRoomMembershipsOutput {
            crate::output::ListRoomMembershipsOutput {
                room_memberships: self.room_memberships,
                next_token: self.next_token,
            }
        }
    }
}
impl ListRoomMembershipsOutput {
    /// Creates a new builder-style object to manufacture [`ListRoomMembershipsOutput`](crate::output::ListRoomMembershipsOutput).
    pub fn builder() -> crate::output::list_room_memberships_output::Builder {
        crate::output::list_room_memberships_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListProxySessionsOutput {
    /// <p>The proxy session details.</p>
    #[doc(hidden)]
    pub proxy_sessions: std::option::Option<std::vec::Vec<crate::model::ProxySession>>,
    /// <p>The token to use to retrieve the next page of results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
}
impl ListProxySessionsOutput {
    /// <p>The proxy session details.</p>
    pub fn proxy_sessions(&self) -> std::option::Option<&[crate::model::ProxySession]> {
        self.proxy_sessions.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
/// See [`ListProxySessionsOutput`](crate::output::ListProxySessionsOutput).
pub mod list_proxy_sessions_output {

    /// A builder for [`ListProxySessionsOutput`](crate::output::ListProxySessionsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) proxy_sessions: std::option::Option<std::vec::Vec<crate::model::ProxySession>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `proxy_sessions`.
        ///
        /// To override the contents of this collection use [`set_proxy_sessions`](Self::set_proxy_sessions).
        ///
        /// <p>The proxy session details.</p>
        pub fn proxy_sessions(mut self, input: crate::model::ProxySession) -> Self {
            let mut v = self.proxy_sessions.unwrap_or_default();
            v.push(input);
            self.proxy_sessions = Some(v);
            self
        }
        /// <p>The proxy session details.</p>
        pub fn set_proxy_sessions(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ProxySession>>,
        ) -> Self {
            self.proxy_sessions = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListProxySessionsOutput`](crate::output::ListProxySessionsOutput).
        pub fn build(self) -> crate::output::ListProxySessionsOutput {
            crate::output::ListProxySessionsOutput {
                proxy_sessions: self.proxy_sessions,
                next_token: self.next_token,
            }
        }
    }
}
impl ListProxySessionsOutput {
    /// Creates a new builder-style object to manufacture [`ListProxySessionsOutput`](crate::output::ListProxySessionsOutput).
    pub fn builder() -> crate::output::list_proxy_sessions_output::Builder {
        crate::output::list_proxy_sessions_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListPhoneNumbersOutput {
    /// <p>The phone number details.</p>
    #[doc(hidden)]
    pub phone_numbers: std::option::Option<std::vec::Vec<crate::model::PhoneNumber>>,
    /// <p>The token to use to retrieve the next page of results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
}
impl ListPhoneNumbersOutput {
    /// <p>The phone number details.</p>
    pub fn phone_numbers(&self) -> std::option::Option<&[crate::model::PhoneNumber]> {
        self.phone_numbers.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
/// See [`ListPhoneNumbersOutput`](crate::output::ListPhoneNumbersOutput).
pub mod list_phone_numbers_output {

    /// A builder for [`ListPhoneNumbersOutput`](crate::output::ListPhoneNumbersOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) phone_numbers: std::option::Option<std::vec::Vec<crate::model::PhoneNumber>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `phone_numbers`.
        ///
        /// To override the contents of this collection use [`set_phone_numbers`](Self::set_phone_numbers).
        ///
        /// <p>The phone number details.</p>
        pub fn phone_numbers(mut self, input: crate::model::PhoneNumber) -> Self {
            let mut v = self.phone_numbers.unwrap_or_default();
            v.push(input);
            self.phone_numbers = Some(v);
            self
        }
        /// <p>The phone number details.</p>
        pub fn set_phone_numbers(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::PhoneNumber>>,
        ) -> Self {
            self.phone_numbers = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListPhoneNumbersOutput`](crate::output::ListPhoneNumbersOutput).
        pub fn build(self) -> crate::output::ListPhoneNumbersOutput {
            crate::output::ListPhoneNumbersOutput {
                phone_numbers: self.phone_numbers,
                next_token: self.next_token,
            }
        }
    }
}
impl ListPhoneNumbersOutput {
    /// Creates a new builder-style object to manufacture [`ListPhoneNumbersOutput`](crate::output::ListPhoneNumbersOutput).
    pub fn builder() -> crate::output::list_phone_numbers_output::Builder {
        crate::output::list_phone_numbers_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListPhoneNumberOrdersOutput {
    /// <p>The phone number order details.</p>
    #[doc(hidden)]
    pub phone_number_orders: std::option::Option<std::vec::Vec<crate::model::PhoneNumberOrder>>,
    /// <p>The token to use to retrieve the next page of results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
}
impl ListPhoneNumberOrdersOutput {
    /// <p>The phone number order details.</p>
    pub fn phone_number_orders(&self) -> std::option::Option<&[crate::model::PhoneNumberOrder]> {
        self.phone_number_orders.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
/// See [`ListPhoneNumberOrdersOutput`](crate::output::ListPhoneNumberOrdersOutput).
pub mod list_phone_number_orders_output {

    /// A builder for [`ListPhoneNumberOrdersOutput`](crate::output::ListPhoneNumberOrdersOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) phone_number_orders:
            std::option::Option<std::vec::Vec<crate::model::PhoneNumberOrder>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `phone_number_orders`.
        ///
        /// To override the contents of this collection use [`set_phone_number_orders`](Self::set_phone_number_orders).
        ///
        /// <p>The phone number order details.</p>
        pub fn phone_number_orders(mut self, input: crate::model::PhoneNumberOrder) -> Self {
            let mut v = self.phone_number_orders.unwrap_or_default();
            v.push(input);
            self.phone_number_orders = Some(v);
            self
        }
        /// <p>The phone number order details.</p>
        pub fn set_phone_number_orders(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::PhoneNumberOrder>>,
        ) -> Self {
            self.phone_number_orders = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListPhoneNumberOrdersOutput`](crate::output::ListPhoneNumberOrdersOutput).
        pub fn build(self) -> crate::output::ListPhoneNumberOrdersOutput {
            crate::output::ListPhoneNumberOrdersOutput {
                phone_number_orders: self.phone_number_orders,
                next_token: self.next_token,
            }
        }
    }
}
impl ListPhoneNumberOrdersOutput {
    /// Creates a new builder-style object to manufacture [`ListPhoneNumberOrdersOutput`](crate::output::ListPhoneNumberOrdersOutput).
    pub fn builder() -> crate::output::list_phone_number_orders_output::Builder {
        crate::output::list_phone_number_orders_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListMeetingTagsOutput {
    /// <p>A list of tag key-value pairs.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
}
impl ListMeetingTagsOutput {
    /// <p>A list of tag key-value pairs.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::model::Tag]> {
        self.tags.as_deref()
    }
}
/// See [`ListMeetingTagsOutput`](crate::output::ListMeetingTagsOutput).
pub mod list_meeting_tags_output {

    /// A builder for [`ListMeetingTagsOutput`](crate::output::ListMeetingTagsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    }
    impl Builder {
        /// Appends an item to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>A list of tag key-value pairs.</p>
        pub fn tags(mut self, input: crate::model::Tag) -> Self {
            let mut v = self.tags.unwrap_or_default();
            v.push(input);
            self.tags = Some(v);
            self
        }
        /// <p>A list of tag key-value pairs.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.tags = input;
            self
        }
        /// Consumes the builder and constructs a [`ListMeetingTagsOutput`](crate::output::ListMeetingTagsOutput).
        pub fn build(self) -> crate::output::ListMeetingTagsOutput {
            crate::output::ListMeetingTagsOutput { tags: self.tags }
        }
    }
}
impl ListMeetingTagsOutput {
    /// Creates a new builder-style object to manufacture [`ListMeetingTagsOutput`](crate::output::ListMeetingTagsOutput).
    pub fn builder() -> crate::output::list_meeting_tags_output::Builder {
        crate::output::list_meeting_tags_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListMeetingsOutput {
    /// <p>The Amazon Chime SDK meeting information.</p>
    #[doc(hidden)]
    pub meetings: std::option::Option<std::vec::Vec<crate::model::Meeting>>,
    /// <p>The token to use to retrieve the next page of results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
}
impl ListMeetingsOutput {
    /// <p>The Amazon Chime SDK meeting information.</p>
    pub fn meetings(&self) -> std::option::Option<&[crate::model::Meeting]> {
        self.meetings.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
/// See [`ListMeetingsOutput`](crate::output::ListMeetingsOutput).
pub mod list_meetings_output {

    /// A builder for [`ListMeetingsOutput`](crate::output::ListMeetingsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) meetings: std::option::Option<std::vec::Vec<crate::model::Meeting>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `meetings`.
        ///
        /// To override the contents of this collection use [`set_meetings`](Self::set_meetings).
        ///
        /// <p>The Amazon Chime SDK meeting information.</p>
        pub fn meetings(mut self, input: crate::model::Meeting) -> Self {
            let mut v = self.meetings.unwrap_or_default();
            v.push(input);
            self.meetings = Some(v);
            self
        }
        /// <p>The Amazon Chime SDK meeting information.</p>
        pub fn set_meetings(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Meeting>>,
        ) -> Self {
            self.meetings = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListMeetingsOutput`](crate::output::ListMeetingsOutput).
        pub fn build(self) -> crate::output::ListMeetingsOutput {
            crate::output::ListMeetingsOutput {
                meetings: self.meetings,
                next_token: self.next_token,
            }
        }
    }
}
impl ListMeetingsOutput {
    /// Creates a new builder-style object to manufacture [`ListMeetingsOutput`](crate::output::ListMeetingsOutput).
    pub fn builder() -> crate::output::list_meetings_output::Builder {
        crate::output::list_meetings_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListMediaCapturePipelinesOutput {
    /// <p>The media capture pipeline objects in the list.</p>
    #[doc(hidden)]
    pub media_capture_pipelines:
        std::option::Option<std::vec::Vec<crate::model::MediaCapturePipeline>>,
    /// <p>The token used to retrieve the next page of results. </p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
}
impl ListMediaCapturePipelinesOutput {
    /// <p>The media capture pipeline objects in the list.</p>
    pub fn media_capture_pipelines(
        &self,
    ) -> std::option::Option<&[crate::model::MediaCapturePipeline]> {
        self.media_capture_pipelines.as_deref()
    }
    /// <p>The token used to retrieve the next page of results. </p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
/// See [`ListMediaCapturePipelinesOutput`](crate::output::ListMediaCapturePipelinesOutput).
pub mod list_media_capture_pipelines_output {

    /// A builder for [`ListMediaCapturePipelinesOutput`](crate::output::ListMediaCapturePipelinesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) media_capture_pipelines:
            std::option::Option<std::vec::Vec<crate::model::MediaCapturePipeline>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `media_capture_pipelines`.
        ///
        /// To override the contents of this collection use [`set_media_capture_pipelines`](Self::set_media_capture_pipelines).
        ///
        /// <p>The media capture pipeline objects in the list.</p>
        pub fn media_capture_pipelines(
            mut self,
            input: crate::model::MediaCapturePipeline,
        ) -> Self {
            let mut v = self.media_capture_pipelines.unwrap_or_default();
            v.push(input);
            self.media_capture_pipelines = Some(v);
            self
        }
        /// <p>The media capture pipeline objects in the list.</p>
        pub fn set_media_capture_pipelines(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::MediaCapturePipeline>>,
        ) -> Self {
            self.media_capture_pipelines = input;
            self
        }
        /// <p>The token used to retrieve the next page of results. </p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token used to retrieve the next page of results. </p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListMediaCapturePipelinesOutput`](crate::output::ListMediaCapturePipelinesOutput).
        pub fn build(self) -> crate::output::ListMediaCapturePipelinesOutput {
            crate::output::ListMediaCapturePipelinesOutput {
                media_capture_pipelines: self.media_capture_pipelines,
                next_token: self.next_token,
            }
        }
    }
}
impl ListMediaCapturePipelinesOutput {
    /// Creates a new builder-style object to manufacture [`ListMediaCapturePipelinesOutput`](crate::output::ListMediaCapturePipelinesOutput).
    pub fn builder() -> crate::output::list_media_capture_pipelines_output::Builder {
        crate::output::list_media_capture_pipelines_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListChannelsModeratedByAppInstanceUserOutput {
    /// <p>The moderated channels in the request.</p>
    #[doc(hidden)]
    pub channels:
        std::option::Option<std::vec::Vec<crate::model::ChannelModeratedByAppInstanceUserSummary>>,
    /// <p>The token returned from previous API requests until the number of channels moderated by the user is reached.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
}
impl ListChannelsModeratedByAppInstanceUserOutput {
    /// <p>The moderated channels in the request.</p>
    pub fn channels(
        &self,
    ) -> std::option::Option<&[crate::model::ChannelModeratedByAppInstanceUserSummary]> {
        self.channels.as_deref()
    }
    /// <p>The token returned from previous API requests until the number of channels moderated by the user is reached.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for ListChannelsModeratedByAppInstanceUserOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListChannelsModeratedByAppInstanceUserOutput");
        formatter.field("channels", &self.channels);
        formatter.field("next_token", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
/// See [`ListChannelsModeratedByAppInstanceUserOutput`](crate::output::ListChannelsModeratedByAppInstanceUserOutput).
pub mod list_channels_moderated_by_app_instance_user_output {

    /// A builder for [`ListChannelsModeratedByAppInstanceUserOutput`](crate::output::ListChannelsModeratedByAppInstanceUserOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
    pub struct Builder {
        pub(crate) channels: std::option::Option<
            std::vec::Vec<crate::model::ChannelModeratedByAppInstanceUserSummary>,
        >,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `channels`.
        ///
        /// To override the contents of this collection use [`set_channels`](Self::set_channels).
        ///
        /// <p>The moderated channels in the request.</p>
        pub fn channels(
            mut self,
            input: crate::model::ChannelModeratedByAppInstanceUserSummary,
        ) -> Self {
            let mut v = self.channels.unwrap_or_default();
            v.push(input);
            self.channels = Some(v);
            self
        }
        /// <p>The moderated channels in the request.</p>
        pub fn set_channels(
            mut self,
            input: std::option::Option<
                std::vec::Vec<crate::model::ChannelModeratedByAppInstanceUserSummary>,
            >,
        ) -> Self {
            self.channels = input;
            self
        }
        /// <p>The token returned from previous API requests until the number of channels moderated by the user is reached.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token returned from previous API requests until the number of channels moderated by the user is reached.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListChannelsModeratedByAppInstanceUserOutput`](crate::output::ListChannelsModeratedByAppInstanceUserOutput).
        pub fn build(self) -> crate::output::ListChannelsModeratedByAppInstanceUserOutput {
            crate::output::ListChannelsModeratedByAppInstanceUserOutput {
                channels: self.channels,
                next_token: self.next_token,
            }
        }
    }
    impl std::fmt::Debug for Builder {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            let mut formatter = f.debug_struct("Builder");
            formatter.field("channels", &self.channels);
            formatter.field("next_token", &"*** Sensitive Data Redacted ***");
            formatter.finish()
        }
    }
}
impl ListChannelsModeratedByAppInstanceUserOutput {
    /// Creates a new builder-style object to manufacture [`ListChannelsModeratedByAppInstanceUserOutput`](crate::output::ListChannelsModeratedByAppInstanceUserOutput).
    pub fn builder() -> crate::output::list_channels_moderated_by_app_instance_user_output::Builder
    {
        crate::output::list_channels_moderated_by_app_instance_user_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListChannelsOutput {
    /// <p>The information about each channel.</p>
    #[doc(hidden)]
    pub channels: std::option::Option<std::vec::Vec<crate::model::ChannelSummary>>,
    /// <p>The token returned from previous API requests until the number of channels is reached.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
}
impl ListChannelsOutput {
    /// <p>The information about each channel.</p>
    pub fn channels(&self) -> std::option::Option<&[crate::model::ChannelSummary]> {
        self.channels.as_deref()
    }
    /// <p>The token returned from previous API requests until the number of channels is reached.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for ListChannelsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListChannelsOutput");
        formatter.field("channels", &self.channels);
        formatter.field("next_token", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
/// See [`ListChannelsOutput`](crate::output::ListChannelsOutput).
pub mod list_channels_output {

    /// A builder for [`ListChannelsOutput`](crate::output::ListChannelsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
    pub struct Builder {
        pub(crate) channels: std::option::Option<std::vec::Vec<crate::model::ChannelSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `channels`.
        ///
        /// To override the contents of this collection use [`set_channels`](Self::set_channels).
        ///
        /// <p>The information about each channel.</p>
        pub fn channels(mut self, input: crate::model::ChannelSummary) -> Self {
            let mut v = self.channels.unwrap_or_default();
            v.push(input);
            self.channels = Some(v);
            self
        }
        /// <p>The information about each channel.</p>
        pub fn set_channels(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ChannelSummary>>,
        ) -> Self {
            self.channels = input;
            self
        }
        /// <p>The token returned from previous API requests until the number of channels is reached.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token returned from previous API requests until the number of channels is reached.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListChannelsOutput`](crate::output::ListChannelsOutput).
        pub fn build(self) -> crate::output::ListChannelsOutput {
            crate::output::ListChannelsOutput {
                channels: self.channels,
                next_token: self.next_token,
            }
        }
    }
    impl std::fmt::Debug for Builder {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            let mut formatter = f.debug_struct("Builder");
            formatter.field("channels", &self.channels);
            formatter.field("next_token", &"*** Sensitive Data Redacted ***");
            formatter.finish()
        }
    }
}
impl ListChannelsOutput {
    /// Creates a new builder-style object to manufacture [`ListChannelsOutput`](crate::output::ListChannelsOutput).
    pub fn builder() -> crate::output::list_channels_output::Builder {
        crate::output::list_channels_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListChannelModeratorsOutput {
    /// <p>The ARN of the channel.</p>
    #[doc(hidden)]
    pub channel_arn: std::option::Option<std::string::String>,
    /// <p>The token passed by previous API calls until all requested moderators are returned.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The information about and names of each moderator.</p>
    #[doc(hidden)]
    pub channel_moderators:
        std::option::Option<std::vec::Vec<crate::model::ChannelModeratorSummary>>,
}
impl ListChannelModeratorsOutput {
    /// <p>The ARN of the channel.</p>
    pub fn channel_arn(&self) -> std::option::Option<&str> {
        self.channel_arn.as_deref()
    }
    /// <p>The token passed by previous API calls until all requested moderators are returned.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The information about and names of each moderator.</p>
    pub fn channel_moderators(
        &self,
    ) -> std::option::Option<&[crate::model::ChannelModeratorSummary]> {
        self.channel_moderators.as_deref()
    }
}
impl std::fmt::Debug for ListChannelModeratorsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListChannelModeratorsOutput");
        formatter.field("channel_arn", &self.channel_arn);
        formatter.field("next_token", &"*** Sensitive Data Redacted ***");
        formatter.field("channel_moderators", &self.channel_moderators);
        formatter.finish()
    }
}
/// See [`ListChannelModeratorsOutput`](crate::output::ListChannelModeratorsOutput).
pub mod list_channel_moderators_output {

    /// A builder for [`ListChannelModeratorsOutput`](crate::output::ListChannelModeratorsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
    pub struct Builder {
        pub(crate) channel_arn: std::option::Option<std::string::String>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) channel_moderators:
            std::option::Option<std::vec::Vec<crate::model::ChannelModeratorSummary>>,
    }
    impl Builder {
        /// <p>The ARN of the channel.</p>
        pub fn channel_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.channel_arn = Some(input.into());
            self
        }
        /// <p>The ARN of the channel.</p>
        pub fn set_channel_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.channel_arn = input;
            self
        }
        /// <p>The token passed by previous API calls until all requested moderators are returned.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token passed by previous API calls until all requested moderators are returned.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Appends an item to `channel_moderators`.
        ///
        /// To override the contents of this collection use [`set_channel_moderators`](Self::set_channel_moderators).
        ///
        /// <p>The information about and names of each moderator.</p>
        pub fn channel_moderators(mut self, input: crate::model::ChannelModeratorSummary) -> Self {
            let mut v = self.channel_moderators.unwrap_or_default();
            v.push(input);
            self.channel_moderators = Some(v);
            self
        }
        /// <p>The information about and names of each moderator.</p>
        pub fn set_channel_moderators(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ChannelModeratorSummary>>,
        ) -> Self {
            self.channel_moderators = input;
            self
        }
        /// Consumes the builder and constructs a [`ListChannelModeratorsOutput`](crate::output::ListChannelModeratorsOutput).
        pub fn build(self) -> crate::output::ListChannelModeratorsOutput {
            crate::output::ListChannelModeratorsOutput {
                channel_arn: self.channel_arn,
                next_token: self.next_token,
                channel_moderators: self.channel_moderators,
            }
        }
    }
    impl std::fmt::Debug for Builder {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            let mut formatter = f.debug_struct("Builder");
            formatter.field("channel_arn", &self.channel_arn);
            formatter.field("next_token", &"*** Sensitive Data Redacted ***");
            formatter.field("channel_moderators", &self.channel_moderators);
            formatter.finish()
        }
    }
}
impl ListChannelModeratorsOutput {
    /// Creates a new builder-style object to manufacture [`ListChannelModeratorsOutput`](crate::output::ListChannelModeratorsOutput).
    pub fn builder() -> crate::output::list_channel_moderators_output::Builder {
        crate::output::list_channel_moderators_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListChannelMessagesOutput {
    /// <p>The ARN of the channel containing the requested messages.</p>
    #[doc(hidden)]
    pub channel_arn: std::option::Option<std::string::String>,
    /// <p>The token passed by previous API calls until all requested messages are returned.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The information about, and content of, each requested message.</p>
    #[doc(hidden)]
    pub channel_messages: std::option::Option<std::vec::Vec<crate::model::ChannelMessageSummary>>,
}
impl ListChannelMessagesOutput {
    /// <p>The ARN of the channel containing the requested messages.</p>
    pub fn channel_arn(&self) -> std::option::Option<&str> {
        self.channel_arn.as_deref()
    }
    /// <p>The token passed by previous API calls until all requested messages are returned.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The information about, and content of, each requested message.</p>
    pub fn channel_messages(&self) -> std::option::Option<&[crate::model::ChannelMessageSummary]> {
        self.channel_messages.as_deref()
    }
}
impl std::fmt::Debug for ListChannelMessagesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListChannelMessagesOutput");
        formatter.field("channel_arn", &self.channel_arn);
        formatter.field("next_token", &"*** Sensitive Data Redacted ***");
        formatter.field("channel_messages", &self.channel_messages);
        formatter.finish()
    }
}
/// See [`ListChannelMessagesOutput`](crate::output::ListChannelMessagesOutput).
pub mod list_channel_messages_output {

    /// A builder for [`ListChannelMessagesOutput`](crate::output::ListChannelMessagesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
    pub struct Builder {
        pub(crate) channel_arn: std::option::Option<std::string::String>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) channel_messages:
            std::option::Option<std::vec::Vec<crate::model::ChannelMessageSummary>>,
    }
    impl Builder {
        /// <p>The ARN of the channel containing the requested messages.</p>
        pub fn channel_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.channel_arn = Some(input.into());
            self
        }
        /// <p>The ARN of the channel containing the requested messages.</p>
        pub fn set_channel_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.channel_arn = input;
            self
        }
        /// <p>The token passed by previous API calls until all requested messages are returned.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token passed by previous API calls until all requested messages are returned.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Appends an item to `channel_messages`.
        ///
        /// To override the contents of this collection use [`set_channel_messages`](Self::set_channel_messages).
        ///
        /// <p>The information about, and content of, each requested message.</p>
        pub fn channel_messages(mut self, input: crate::model::ChannelMessageSummary) -> Self {
            let mut v = self.channel_messages.unwrap_or_default();
            v.push(input);
            self.channel_messages = Some(v);
            self
        }
        /// <p>The information about, and content of, each requested message.</p>
        pub fn set_channel_messages(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ChannelMessageSummary>>,
        ) -> Self {
            self.channel_messages = input;
            self
        }
        /// Consumes the builder and constructs a [`ListChannelMessagesOutput`](crate::output::ListChannelMessagesOutput).
        pub fn build(self) -> crate::output::ListChannelMessagesOutput {
            crate::output::ListChannelMessagesOutput {
                channel_arn: self.channel_arn,
                next_token: self.next_token,
                channel_messages: self.channel_messages,
            }
        }
    }
    impl std::fmt::Debug for Builder {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            let mut formatter = f.debug_struct("Builder");
            formatter.field("channel_arn", &self.channel_arn);
            formatter.field("next_token", &"*** Sensitive Data Redacted ***");
            formatter.field("channel_messages", &self.channel_messages);
            formatter.finish()
        }
    }
}
impl ListChannelMessagesOutput {
    /// Creates a new builder-style object to manufacture [`ListChannelMessagesOutput`](crate::output::ListChannelMessagesOutput).
    pub fn builder() -> crate::output::list_channel_messages_output::Builder {
        crate::output::list_channel_messages_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListChannelMembershipsForAppInstanceUserOutput {
    /// <p>The token passed by previous API calls until all requested users are returned.</p>
    #[doc(hidden)]
    pub channel_memberships: std::option::Option<
        std::vec::Vec<crate::model::ChannelMembershipForAppInstanceUserSummary>,
    >,
    /// <p>The token passed by previous API calls until all requested users are returned.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
}
impl ListChannelMembershipsForAppInstanceUserOutput {
    /// <p>The token passed by previous API calls until all requested users are returned.</p>
    pub fn channel_memberships(
        &self,
    ) -> std::option::Option<&[crate::model::ChannelMembershipForAppInstanceUserSummary]> {
        self.channel_memberships.as_deref()
    }
    /// <p>The token passed by previous API calls until all requested users are returned.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for ListChannelMembershipsForAppInstanceUserOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListChannelMembershipsForAppInstanceUserOutput");
        formatter.field("channel_memberships", &self.channel_memberships);
        formatter.field("next_token", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
/// See [`ListChannelMembershipsForAppInstanceUserOutput`](crate::output::ListChannelMembershipsForAppInstanceUserOutput).
pub mod list_channel_memberships_for_app_instance_user_output {

    /// A builder for [`ListChannelMembershipsForAppInstanceUserOutput`](crate::output::ListChannelMembershipsForAppInstanceUserOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
    pub struct Builder {
        pub(crate) channel_memberships: std::option::Option<
            std::vec::Vec<crate::model::ChannelMembershipForAppInstanceUserSummary>,
        >,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `channel_memberships`.
        ///
        /// To override the contents of this collection use [`set_channel_memberships`](Self::set_channel_memberships).
        ///
        /// <p>The token passed by previous API calls until all requested users are returned.</p>
        pub fn channel_memberships(
            mut self,
            input: crate::model::ChannelMembershipForAppInstanceUserSummary,
        ) -> Self {
            let mut v = self.channel_memberships.unwrap_or_default();
            v.push(input);
            self.channel_memberships = Some(v);
            self
        }
        /// <p>The token passed by previous API calls until all requested users are returned.</p>
        pub fn set_channel_memberships(
            mut self,
            input: std::option::Option<
                std::vec::Vec<crate::model::ChannelMembershipForAppInstanceUserSummary>,
            >,
        ) -> Self {
            self.channel_memberships = input;
            self
        }
        /// <p>The token passed by previous API calls until all requested users are returned.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token passed by previous API calls until all requested users are returned.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListChannelMembershipsForAppInstanceUserOutput`](crate::output::ListChannelMembershipsForAppInstanceUserOutput).
        pub fn build(self) -> crate::output::ListChannelMembershipsForAppInstanceUserOutput {
            crate::output::ListChannelMembershipsForAppInstanceUserOutput {
                channel_memberships: self.channel_memberships,
                next_token: self.next_token,
            }
        }
    }
    impl std::fmt::Debug for Builder {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            let mut formatter = f.debug_struct("Builder");
            formatter.field("channel_memberships", &self.channel_memberships);
            formatter.field("next_token", &"*** Sensitive Data Redacted ***");
            formatter.finish()
        }
    }
}
impl ListChannelMembershipsForAppInstanceUserOutput {
    /// Creates a new builder-style object to manufacture [`ListChannelMembershipsForAppInstanceUserOutput`](crate::output::ListChannelMembershipsForAppInstanceUserOutput).
    pub fn builder() -> crate::output::list_channel_memberships_for_app_instance_user_output::Builder
    {
        crate::output::list_channel_memberships_for_app_instance_user_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListChannelMembershipsOutput {
    /// <p>The ARN of the channel.</p>
    #[doc(hidden)]
    pub channel_arn: std::option::Option<std::string::String>,
    /// <p>The information for the requested channel memberships.</p>
    #[doc(hidden)]
    pub channel_memberships:
        std::option::Option<std::vec::Vec<crate::model::ChannelMembershipSummary>>,
    /// <p>The token passed by previous API calls until all requested channel memberships are returned.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
}
impl ListChannelMembershipsOutput {
    /// <p>The ARN of the channel.</p>
    pub fn channel_arn(&self) -> std::option::Option<&str> {
        self.channel_arn.as_deref()
    }
    /// <p>The information for the requested channel memberships.</p>
    pub fn channel_memberships(
        &self,
    ) -> std::option::Option<&[crate::model::ChannelMembershipSummary]> {
        self.channel_memberships.as_deref()
    }
    /// <p>The token passed by previous API calls until all requested channel memberships are returned.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for ListChannelMembershipsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListChannelMembershipsOutput");
        formatter.field("channel_arn", &self.channel_arn);
        formatter.field("channel_memberships", &self.channel_memberships);
        formatter.field("next_token", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
/// See [`ListChannelMembershipsOutput`](crate::output::ListChannelMembershipsOutput).
pub mod list_channel_memberships_output {

    /// A builder for [`ListChannelMembershipsOutput`](crate::output::ListChannelMembershipsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
    pub struct Builder {
        pub(crate) channel_arn: std::option::Option<std::string::String>,
        pub(crate) channel_memberships:
            std::option::Option<std::vec::Vec<crate::model::ChannelMembershipSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The ARN of the channel.</p>
        pub fn channel_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.channel_arn = Some(input.into());
            self
        }
        /// <p>The ARN of the channel.</p>
        pub fn set_channel_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.channel_arn = input;
            self
        }
        /// Appends an item to `channel_memberships`.
        ///
        /// To override the contents of this collection use [`set_channel_memberships`](Self::set_channel_memberships).
        ///
        /// <p>The information for the requested channel memberships.</p>
        pub fn channel_memberships(
            mut self,
            input: crate::model::ChannelMembershipSummary,
        ) -> Self {
            let mut v = self.channel_memberships.unwrap_or_default();
            v.push(input);
            self.channel_memberships = Some(v);
            self
        }
        /// <p>The information for the requested channel memberships.</p>
        pub fn set_channel_memberships(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ChannelMembershipSummary>>,
        ) -> Self {
            self.channel_memberships = input;
            self
        }
        /// <p>The token passed by previous API calls until all requested channel memberships are returned.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token passed by previous API calls until all requested channel memberships are returned.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListChannelMembershipsOutput`](crate::output::ListChannelMembershipsOutput).
        pub fn build(self) -> crate::output::ListChannelMembershipsOutput {
            crate::output::ListChannelMembershipsOutput {
                channel_arn: self.channel_arn,
                channel_memberships: self.channel_memberships,
                next_token: self.next_token,
            }
        }
    }
    impl std::fmt::Debug for Builder {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            let mut formatter = f.debug_struct("Builder");
            formatter.field("channel_arn", &self.channel_arn);
            formatter.field("channel_memberships", &self.channel_memberships);
            formatter.field("next_token", &"*** Sensitive Data Redacted ***");
            formatter.finish()
        }
    }
}
impl ListChannelMembershipsOutput {
    /// Creates a new builder-style object to manufacture [`ListChannelMembershipsOutput`](crate::output::ListChannelMembershipsOutput).
    pub fn builder() -> crate::output::list_channel_memberships_output::Builder {
        crate::output::list_channel_memberships_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListChannelBansOutput {
    /// <p>The ARN of the channel.</p>
    #[doc(hidden)]
    pub channel_arn: std::option::Option<std::string::String>,
    /// <p>The token passed by previous API calls until all requested bans are returned.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The information for each requested ban.</p>
    #[doc(hidden)]
    pub channel_bans: std::option::Option<std::vec::Vec<crate::model::ChannelBanSummary>>,
}
impl ListChannelBansOutput {
    /// <p>The ARN of the channel.</p>
    pub fn channel_arn(&self) -> std::option::Option<&str> {
        self.channel_arn.as_deref()
    }
    /// <p>The token passed by previous API calls until all requested bans are returned.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The information for each requested ban.</p>
    pub fn channel_bans(&self) -> std::option::Option<&[crate::model::ChannelBanSummary]> {
        self.channel_bans.as_deref()
    }
}
impl std::fmt::Debug for ListChannelBansOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListChannelBansOutput");
        formatter.field("channel_arn", &self.channel_arn);
        formatter.field("next_token", &"*** Sensitive Data Redacted ***");
        formatter.field("channel_bans", &self.channel_bans);
        formatter.finish()
    }
}
/// See [`ListChannelBansOutput`](crate::output::ListChannelBansOutput).
pub mod list_channel_bans_output {

    /// A builder for [`ListChannelBansOutput`](crate::output::ListChannelBansOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
    pub struct Builder {
        pub(crate) channel_arn: std::option::Option<std::string::String>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) channel_bans:
            std::option::Option<std::vec::Vec<crate::model::ChannelBanSummary>>,
    }
    impl Builder {
        /// <p>The ARN of the channel.</p>
        pub fn channel_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.channel_arn = Some(input.into());
            self
        }
        /// <p>The ARN of the channel.</p>
        pub fn set_channel_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.channel_arn = input;
            self
        }
        /// <p>The token passed by previous API calls until all requested bans are returned.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token passed by previous API calls until all requested bans are returned.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Appends an item to `channel_bans`.
        ///
        /// To override the contents of this collection use [`set_channel_bans`](Self::set_channel_bans).
        ///
        /// <p>The information for each requested ban.</p>
        pub fn channel_bans(mut self, input: crate::model::ChannelBanSummary) -> Self {
            let mut v = self.channel_bans.unwrap_or_default();
            v.push(input);
            self.channel_bans = Some(v);
            self
        }
        /// <p>The information for each requested ban.</p>
        pub fn set_channel_bans(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ChannelBanSummary>>,
        ) -> Self {
            self.channel_bans = input;
            self
        }
        /// Consumes the builder and constructs a [`ListChannelBansOutput`](crate::output::ListChannelBansOutput).
        pub fn build(self) -> crate::output::ListChannelBansOutput {
            crate::output::ListChannelBansOutput {
                channel_arn: self.channel_arn,
                next_token: self.next_token,
                channel_bans: self.channel_bans,
            }
        }
    }
    impl std::fmt::Debug for Builder {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            let mut formatter = f.debug_struct("Builder");
            formatter.field("channel_arn", &self.channel_arn);
            formatter.field("next_token", &"*** Sensitive Data Redacted ***");
            formatter.field("channel_bans", &self.channel_bans);
            formatter.finish()
        }
    }
}
impl ListChannelBansOutput {
    /// Creates a new builder-style object to manufacture [`ListChannelBansOutput`](crate::output::ListChannelBansOutput).
    pub fn builder() -> crate::output::list_channel_bans_output::Builder {
        crate::output::list_channel_bans_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListBotsOutput {
    /// <p>List of bots and bot details.</p>
    #[doc(hidden)]
    pub bots: std::option::Option<std::vec::Vec<crate::model::Bot>>,
    /// <p>The token to use to retrieve the next page of results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
}
impl ListBotsOutput {
    /// <p>List of bots and bot details.</p>
    pub fn bots(&self) -> std::option::Option<&[crate::model::Bot]> {
        self.bots.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
/// See [`ListBotsOutput`](crate::output::ListBotsOutput).
pub mod list_bots_output {

    /// A builder for [`ListBotsOutput`](crate::output::ListBotsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) bots: std::option::Option<std::vec::Vec<crate::model::Bot>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `bots`.
        ///
        /// To override the contents of this collection use [`set_bots`](Self::set_bots).
        ///
        /// <p>List of bots and bot details.</p>
        pub fn bots(mut self, input: crate::model::Bot) -> Self {
            let mut v = self.bots.unwrap_or_default();
            v.push(input);
            self.bots = Some(v);
            self
        }
        /// <p>List of bots and bot details.</p>
        pub fn set_bots(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Bot>>,
        ) -> Self {
            self.bots = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListBotsOutput`](crate::output::ListBotsOutput).
        pub fn build(self) -> crate::output::ListBotsOutput {
            crate::output::ListBotsOutput {
                bots: self.bots,
                next_token: self.next_token,
            }
        }
    }
}
impl ListBotsOutput {
    /// Creates a new builder-style object to manufacture [`ListBotsOutput`](crate::output::ListBotsOutput).
    pub fn builder() -> crate::output::list_bots_output::Builder {
        crate::output::list_bots_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListAttendeeTagsOutput {
    /// <p>A list of tag key-value pairs.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
}
impl ListAttendeeTagsOutput {
    /// <p>A list of tag key-value pairs.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::model::Tag]> {
        self.tags.as_deref()
    }
}
/// See [`ListAttendeeTagsOutput`](crate::output::ListAttendeeTagsOutput).
pub mod list_attendee_tags_output {

    /// A builder for [`ListAttendeeTagsOutput`](crate::output::ListAttendeeTagsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    }
    impl Builder {
        /// Appends an item to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>A list of tag key-value pairs.</p>
        pub fn tags(mut self, input: crate::model::Tag) -> Self {
            let mut v = self.tags.unwrap_or_default();
            v.push(input);
            self.tags = Some(v);
            self
        }
        /// <p>A list of tag key-value pairs.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.tags = input;
            self
        }
        /// Consumes the builder and constructs a [`ListAttendeeTagsOutput`](crate::output::ListAttendeeTagsOutput).
        pub fn build(self) -> crate::output::ListAttendeeTagsOutput {
            crate::output::ListAttendeeTagsOutput { tags: self.tags }
        }
    }
}
impl ListAttendeeTagsOutput {
    /// Creates a new builder-style object to manufacture [`ListAttendeeTagsOutput`](crate::output::ListAttendeeTagsOutput).
    pub fn builder() -> crate::output::list_attendee_tags_output::Builder {
        crate::output::list_attendee_tags_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListAttendeesOutput {
    /// <p>The Amazon Chime SDK attendee information.</p>
    #[doc(hidden)]
    pub attendees: std::option::Option<std::vec::Vec<crate::model::Attendee>>,
    /// <p>The token to use to retrieve the next page of results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
}
impl ListAttendeesOutput {
    /// <p>The Amazon Chime SDK attendee information.</p>
    pub fn attendees(&self) -> std::option::Option<&[crate::model::Attendee]> {
        self.attendees.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
/// See [`ListAttendeesOutput`](crate::output::ListAttendeesOutput).
pub mod list_attendees_output {

    /// A builder for [`ListAttendeesOutput`](crate::output::ListAttendeesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) attendees: std::option::Option<std::vec::Vec<crate::model::Attendee>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `attendees`.
        ///
        /// To override the contents of this collection use [`set_attendees`](Self::set_attendees).
        ///
        /// <p>The Amazon Chime SDK attendee information.</p>
        pub fn attendees(mut self, input: crate::model::Attendee) -> Self {
            let mut v = self.attendees.unwrap_or_default();
            v.push(input);
            self.attendees = Some(v);
            self
        }
        /// <p>The Amazon Chime SDK attendee information.</p>
        pub fn set_attendees(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Attendee>>,
        ) -> Self {
            self.attendees = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListAttendeesOutput`](crate::output::ListAttendeesOutput).
        pub fn build(self) -> crate::output::ListAttendeesOutput {
            crate::output::ListAttendeesOutput {
                attendees: self.attendees,
                next_token: self.next_token,
            }
        }
    }
}
impl ListAttendeesOutput {
    /// Creates a new builder-style object to manufacture [`ListAttendeesOutput`](crate::output::ListAttendeesOutput).
    pub fn builder() -> crate::output::list_attendees_output::Builder {
        crate::output::list_attendees_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListAppInstanceUsersOutput {
    /// <p>The ARN of the <code>AppInstance</code>.</p>
    #[doc(hidden)]
    pub app_instance_arn: std::option::Option<std::string::String>,
    /// <p>The information for each requested <code>AppInstanceUser</code>.</p>
    #[doc(hidden)]
    pub app_instance_users:
        std::option::Option<std::vec::Vec<crate::model::AppInstanceUserSummary>>,
    /// <p>The token passed by previous API calls until all requested users are returned.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
}
impl ListAppInstanceUsersOutput {
    /// <p>The ARN of the <code>AppInstance</code>.</p>
    pub fn app_instance_arn(&self) -> std::option::Option<&str> {
        self.app_instance_arn.as_deref()
    }
    /// <p>The information for each requested <code>AppInstanceUser</code>.</p>
    pub fn app_instance_users(
        &self,
    ) -> std::option::Option<&[crate::model::AppInstanceUserSummary]> {
        self.app_instance_users.as_deref()
    }
    /// <p>The token passed by previous API calls until all requested users are returned.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for ListAppInstanceUsersOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListAppInstanceUsersOutput");
        formatter.field("app_instance_arn", &self.app_instance_arn);
        formatter.field("app_instance_users", &self.app_instance_users);
        formatter.field("next_token", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
/// See [`ListAppInstanceUsersOutput`](crate::output::ListAppInstanceUsersOutput).
pub mod list_app_instance_users_output {

    /// A builder for [`ListAppInstanceUsersOutput`](crate::output::ListAppInstanceUsersOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
    pub struct Builder {
        pub(crate) app_instance_arn: std::option::Option<std::string::String>,
        pub(crate) app_instance_users:
            std::option::Option<std::vec::Vec<crate::model::AppInstanceUserSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The ARN of the <code>AppInstance</code>.</p>
        pub fn app_instance_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.app_instance_arn = Some(input.into());
            self
        }
        /// <p>The ARN of the <code>AppInstance</code>.</p>
        pub fn set_app_instance_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.app_instance_arn = input;
            self
        }
        /// Appends an item to `app_instance_users`.
        ///
        /// To override the contents of this collection use [`set_app_instance_users`](Self::set_app_instance_users).
        ///
        /// <p>The information for each requested <code>AppInstanceUser</code>.</p>
        pub fn app_instance_users(mut self, input: crate::model::AppInstanceUserSummary) -> Self {
            let mut v = self.app_instance_users.unwrap_or_default();
            v.push(input);
            self.app_instance_users = Some(v);
            self
        }
        /// <p>The information for each requested <code>AppInstanceUser</code>.</p>
        pub fn set_app_instance_users(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::AppInstanceUserSummary>>,
        ) -> Self {
            self.app_instance_users = input;
            self
        }
        /// <p>The token passed by previous API calls until all requested users are returned.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token passed by previous API calls until all requested users are returned.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListAppInstanceUsersOutput`](crate::output::ListAppInstanceUsersOutput).
        pub fn build(self) -> crate::output::ListAppInstanceUsersOutput {
            crate::output::ListAppInstanceUsersOutput {
                app_instance_arn: self.app_instance_arn,
                app_instance_users: self.app_instance_users,
                next_token: self.next_token,
            }
        }
    }
    impl std::fmt::Debug for Builder {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            let mut formatter = f.debug_struct("Builder");
            formatter.field("app_instance_arn", &self.app_instance_arn);
            formatter.field("app_instance_users", &self.app_instance_users);
            formatter.field("next_token", &"*** Sensitive Data Redacted ***");
            formatter.finish()
        }
    }
}
impl ListAppInstanceUsersOutput {
    /// Creates a new builder-style object to manufacture [`ListAppInstanceUsersOutput`](crate::output::ListAppInstanceUsersOutput).
    pub fn builder() -> crate::output::list_app_instance_users_output::Builder {
        crate::output::list_app_instance_users_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListAppInstancesOutput {
    /// <p>The information for each <code>AppInstance</code>.</p>
    #[doc(hidden)]
    pub app_instances: std::option::Option<std::vec::Vec<crate::model::AppInstanceSummary>>,
    /// <p>The token passed by previous API requests until the maximum number of <code>AppInstance</code>s is reached.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
}
impl ListAppInstancesOutput {
    /// <p>The information for each <code>AppInstance</code>.</p>
    pub fn app_instances(&self) -> std::option::Option<&[crate::model::AppInstanceSummary]> {
        self.app_instances.as_deref()
    }
    /// <p>The token passed by previous API requests until the maximum number of <code>AppInstance</code>s is reached.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for ListAppInstancesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListAppInstancesOutput");
        formatter.field("app_instances", &self.app_instances);
        formatter.field("next_token", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
/// See [`ListAppInstancesOutput`](crate::output::ListAppInstancesOutput).
pub mod list_app_instances_output {

    /// A builder for [`ListAppInstancesOutput`](crate::output::ListAppInstancesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
    pub struct Builder {
        pub(crate) app_instances:
            std::option::Option<std::vec::Vec<crate::model::AppInstanceSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `app_instances`.
        ///
        /// To override the contents of this collection use [`set_app_instances`](Self::set_app_instances).
        ///
        /// <p>The information for each <code>AppInstance</code>.</p>
        pub fn app_instances(mut self, input: crate::model::AppInstanceSummary) -> Self {
            let mut v = self.app_instances.unwrap_or_default();
            v.push(input);
            self.app_instances = Some(v);
            self
        }
        /// <p>The information for each <code>AppInstance</code>.</p>
        pub fn set_app_instances(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::AppInstanceSummary>>,
        ) -> Self {
            self.app_instances = input;
            self
        }
        /// <p>The token passed by previous API requests until the maximum number of <code>AppInstance</code>s is reached.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token passed by previous API requests until the maximum number of <code>AppInstance</code>s is reached.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListAppInstancesOutput`](crate::output::ListAppInstancesOutput).
        pub fn build(self) -> crate::output::ListAppInstancesOutput {
            crate::output::ListAppInstancesOutput {
                app_instances: self.app_instances,
                next_token: self.next_token,
            }
        }
    }
    impl std::fmt::Debug for Builder {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            let mut formatter = f.debug_struct("Builder");
            formatter.field("app_instances", &self.app_instances);
            formatter.field("next_token", &"*** Sensitive Data Redacted ***");
            formatter.finish()
        }
    }
}
impl ListAppInstancesOutput {
    /// Creates a new builder-style object to manufacture [`ListAppInstancesOutput`](crate::output::ListAppInstancesOutput).
    pub fn builder() -> crate::output::list_app_instances_output::Builder {
        crate::output::list_app_instances_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListAppInstanceAdminsOutput {
    /// <p>The ARN of the <code>AppInstance</code>.</p>
    #[doc(hidden)]
    pub app_instance_arn: std::option::Option<std::string::String>,
    /// <p>The information for each administrator.</p>
    #[doc(hidden)]
    pub app_instance_admins:
        std::option::Option<std::vec::Vec<crate::model::AppInstanceAdminSummary>>,
    /// <p>The token returned from previous API requests until the number of administrators is reached.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
}
impl ListAppInstanceAdminsOutput {
    /// <p>The ARN of the <code>AppInstance</code>.</p>
    pub fn app_instance_arn(&self) -> std::option::Option<&str> {
        self.app_instance_arn.as_deref()
    }
    /// <p>The information for each administrator.</p>
    pub fn app_instance_admins(
        &self,
    ) -> std::option::Option<&[crate::model::AppInstanceAdminSummary]> {
        self.app_instance_admins.as_deref()
    }
    /// <p>The token returned from previous API requests until the number of administrators is reached.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for ListAppInstanceAdminsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListAppInstanceAdminsOutput");
        formatter.field("app_instance_arn", &self.app_instance_arn);
        formatter.field("app_instance_admins", &self.app_instance_admins);
        formatter.field("next_token", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
/// See [`ListAppInstanceAdminsOutput`](crate::output::ListAppInstanceAdminsOutput).
pub mod list_app_instance_admins_output {

    /// A builder for [`ListAppInstanceAdminsOutput`](crate::output::ListAppInstanceAdminsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
    pub struct Builder {
        pub(crate) app_instance_arn: std::option::Option<std::string::String>,
        pub(crate) app_instance_admins:
            std::option::Option<std::vec::Vec<crate::model::AppInstanceAdminSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The ARN of the <code>AppInstance</code>.</p>
        pub fn app_instance_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.app_instance_arn = Some(input.into());
            self
        }
        /// <p>The ARN of the <code>AppInstance</code>.</p>
        pub fn set_app_instance_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.app_instance_arn = input;
            self
        }
        /// Appends an item to `app_instance_admins`.
        ///
        /// To override the contents of this collection use [`set_app_instance_admins`](Self::set_app_instance_admins).
        ///
        /// <p>The information for each administrator.</p>
        pub fn app_instance_admins(mut self, input: crate::model::AppInstanceAdminSummary) -> Self {
            let mut v = self.app_instance_admins.unwrap_or_default();
            v.push(input);
            self.app_instance_admins = Some(v);
            self
        }
        /// <p>The information for each administrator.</p>
        pub fn set_app_instance_admins(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::AppInstanceAdminSummary>>,
        ) -> Self {
            self.app_instance_admins = input;
            self
        }
        /// <p>The token returned from previous API requests until the number of administrators is reached.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token returned from previous API requests until the number of administrators is reached.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListAppInstanceAdminsOutput`](crate::output::ListAppInstanceAdminsOutput).
        pub fn build(self) -> crate::output::ListAppInstanceAdminsOutput {
            crate::output::ListAppInstanceAdminsOutput {
                app_instance_arn: self.app_instance_arn,
                app_instance_admins: self.app_instance_admins,
                next_token: self.next_token,
            }
        }
    }
    impl std::fmt::Debug for Builder {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            let mut formatter = f.debug_struct("Builder");
            formatter.field("app_instance_arn", &self.app_instance_arn);
            formatter.field("app_instance_admins", &self.app_instance_admins);
            formatter.field("next_token", &"*** Sensitive Data Redacted ***");
            formatter.finish()
        }
    }
}
impl ListAppInstanceAdminsOutput {
    /// Creates a new builder-style object to manufacture [`ListAppInstanceAdminsOutput`](crate::output::ListAppInstanceAdminsOutput).
    pub fn builder() -> crate::output::list_app_instance_admins_output::Builder {
        crate::output::list_app_instance_admins_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListAccountsOutput {
    /// <p>List of Amazon Chime accounts and account details.</p>
    #[doc(hidden)]
    pub accounts: std::option::Option<std::vec::Vec<crate::model::Account>>,
    /// <p>The token to use to retrieve the next page of results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
}
impl ListAccountsOutput {
    /// <p>List of Amazon Chime accounts and account details.</p>
    pub fn accounts(&self) -> std::option::Option<&[crate::model::Account]> {
        self.accounts.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
/// See [`ListAccountsOutput`](crate::output::ListAccountsOutput).
pub mod list_accounts_output {

    /// A builder for [`ListAccountsOutput`](crate::output::ListAccountsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) accounts: std::option::Option<std::vec::Vec<crate::model::Account>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `accounts`.
        ///
        /// To override the contents of this collection use [`set_accounts`](Self::set_accounts).
        ///
        /// <p>List of Amazon Chime accounts and account details.</p>
        pub fn accounts(mut self, input: crate::model::Account) -> Self {
            let mut v = self.accounts.unwrap_or_default();
            v.push(input);
            self.accounts = Some(v);
            self
        }
        /// <p>List of Amazon Chime accounts and account details.</p>
        pub fn set_accounts(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Account>>,
        ) -> Self {
            self.accounts = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListAccountsOutput`](crate::output::ListAccountsOutput).
        pub fn build(self) -> crate::output::ListAccountsOutput {
            crate::output::ListAccountsOutput {
                accounts: self.accounts,
                next_token: self.next_token,
            }
        }
    }
}
impl ListAccountsOutput {
    /// Creates a new builder-style object to manufacture [`ListAccountsOutput`](crate::output::ListAccountsOutput).
    pub fn builder() -> crate::output::list_accounts_output::Builder {
        crate::output::list_accounts_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct InviteUsersOutput {
    /// <p>The email invitation details.</p>
    #[doc(hidden)]
    pub invites: std::option::Option<std::vec::Vec<crate::model::Invite>>,
}
impl InviteUsersOutput {
    /// <p>The email invitation details.</p>
    pub fn invites(&self) -> std::option::Option<&[crate::model::Invite]> {
        self.invites.as_deref()
    }
}
/// See [`InviteUsersOutput`](crate::output::InviteUsersOutput).
pub mod invite_users_output {

    /// A builder for [`InviteUsersOutput`](crate::output::InviteUsersOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) invites: std::option::Option<std::vec::Vec<crate::model::Invite>>,
    }
    impl Builder {
        /// Appends an item to `invites`.
        ///
        /// To override the contents of this collection use [`set_invites`](Self::set_invites).
        ///
        /// <p>The email invitation details.</p>
        pub fn invites(mut self, input: crate::model::Invite) -> Self {
            let mut v = self.invites.unwrap_or_default();
            v.push(input);
            self.invites = Some(v);
            self
        }
        /// <p>The email invitation details.</p>
        pub fn set_invites(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Invite>>,
        ) -> Self {
            self.invites = input;
            self
        }
        /// Consumes the builder and constructs a [`InviteUsersOutput`](crate::output::InviteUsersOutput).
        pub fn build(self) -> crate::output::InviteUsersOutput {
            crate::output::InviteUsersOutput {
                invites: self.invites,
            }
        }
    }
}
impl InviteUsersOutput {
    /// Creates a new builder-style object to manufacture [`InviteUsersOutput`](crate::output::InviteUsersOutput).
    pub fn builder() -> crate::output::invite_users_output::Builder {
        crate::output::invite_users_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetVoiceConnectorTerminationHealthOutput {
    /// <p>The termination health details.</p>
    #[doc(hidden)]
    pub termination_health: std::option::Option<crate::model::TerminationHealth>,
}
impl GetVoiceConnectorTerminationHealthOutput {
    /// <p>The termination health details.</p>
    pub fn termination_health(&self) -> std::option::Option<&crate::model::TerminationHealth> {
        self.termination_health.as_ref()
    }
}
/// See [`GetVoiceConnectorTerminationHealthOutput`](crate::output::GetVoiceConnectorTerminationHealthOutput).
pub mod get_voice_connector_termination_health_output {

    /// A builder for [`GetVoiceConnectorTerminationHealthOutput`](crate::output::GetVoiceConnectorTerminationHealthOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) termination_health: std::option::Option<crate::model::TerminationHealth>,
    }
    impl Builder {
        /// <p>The termination health details.</p>
        pub fn termination_health(mut self, input: crate::model::TerminationHealth) -> Self {
            self.termination_health = Some(input);
            self
        }
        /// <p>The termination health details.</p>
        pub fn set_termination_health(
            mut self,
            input: std::option::Option<crate::model::TerminationHealth>,
        ) -> Self {
            self.termination_health = input;
            self
        }
        /// Consumes the builder and constructs a [`GetVoiceConnectorTerminationHealthOutput`](crate::output::GetVoiceConnectorTerminationHealthOutput).
        pub fn build(self) -> crate::output::GetVoiceConnectorTerminationHealthOutput {
            crate::output::GetVoiceConnectorTerminationHealthOutput {
                termination_health: self.termination_health,
            }
        }
    }
}
impl GetVoiceConnectorTerminationHealthOutput {
    /// Creates a new builder-style object to manufacture [`GetVoiceConnectorTerminationHealthOutput`](crate::output::GetVoiceConnectorTerminationHealthOutput).
    pub fn builder() -> crate::output::get_voice_connector_termination_health_output::Builder {
        crate::output::get_voice_connector_termination_health_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetVoiceConnectorTerminationOutput {
    /// <p>The termination setting details.</p>
    #[doc(hidden)]
    pub termination: std::option::Option<crate::model::Termination>,
}
impl GetVoiceConnectorTerminationOutput {
    /// <p>The termination setting details.</p>
    pub fn termination(&self) -> std::option::Option<&crate::model::Termination> {
        self.termination.as_ref()
    }
}
/// See [`GetVoiceConnectorTerminationOutput`](crate::output::GetVoiceConnectorTerminationOutput).
pub mod get_voice_connector_termination_output {

    /// A builder for [`GetVoiceConnectorTerminationOutput`](crate::output::GetVoiceConnectorTerminationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) termination: std::option::Option<crate::model::Termination>,
    }
    impl Builder {
        /// <p>The termination setting details.</p>
        pub fn termination(mut self, input: crate::model::Termination) -> Self {
            self.termination = Some(input);
            self
        }
        /// <p>The termination setting details.</p>
        pub fn set_termination(
            mut self,
            input: std::option::Option<crate::model::Termination>,
        ) -> Self {
            self.termination = input;
            self
        }
        /// Consumes the builder and constructs a [`GetVoiceConnectorTerminationOutput`](crate::output::GetVoiceConnectorTerminationOutput).
        pub fn build(self) -> crate::output::GetVoiceConnectorTerminationOutput {
            crate::output::GetVoiceConnectorTerminationOutput {
                termination: self.termination,
            }
        }
    }
}
impl GetVoiceConnectorTerminationOutput {
    /// Creates a new builder-style object to manufacture [`GetVoiceConnectorTerminationOutput`](crate::output::GetVoiceConnectorTerminationOutput).
    pub fn builder() -> crate::output::get_voice_connector_termination_output::Builder {
        crate::output::get_voice_connector_termination_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetVoiceConnectorStreamingConfigurationOutput {
    /// <p>The streaming configuration details.</p>
    #[doc(hidden)]
    pub streaming_configuration: std::option::Option<crate::model::StreamingConfiguration>,
}
impl GetVoiceConnectorStreamingConfigurationOutput {
    /// <p>The streaming configuration details.</p>
    pub fn streaming_configuration(
        &self,
    ) -> std::option::Option<&crate::model::StreamingConfiguration> {
        self.streaming_configuration.as_ref()
    }
}
/// See [`GetVoiceConnectorStreamingConfigurationOutput`](crate::output::GetVoiceConnectorStreamingConfigurationOutput).
pub mod get_voice_connector_streaming_configuration_output {

    /// A builder for [`GetVoiceConnectorStreamingConfigurationOutput`](crate::output::GetVoiceConnectorStreamingConfigurationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) streaming_configuration:
            std::option::Option<crate::model::StreamingConfiguration>,
    }
    impl Builder {
        /// <p>The streaming configuration details.</p>
        pub fn streaming_configuration(
            mut self,
            input: crate::model::StreamingConfiguration,
        ) -> Self {
            self.streaming_configuration = Some(input);
            self
        }
        /// <p>The streaming configuration details.</p>
        pub fn set_streaming_configuration(
            mut self,
            input: std::option::Option<crate::model::StreamingConfiguration>,
        ) -> Self {
            self.streaming_configuration = input;
            self
        }
        /// Consumes the builder and constructs a [`GetVoiceConnectorStreamingConfigurationOutput`](crate::output::GetVoiceConnectorStreamingConfigurationOutput).
        pub fn build(self) -> crate::output::GetVoiceConnectorStreamingConfigurationOutput {
            crate::output::GetVoiceConnectorStreamingConfigurationOutput {
                streaming_configuration: self.streaming_configuration,
            }
        }
    }
}
impl GetVoiceConnectorStreamingConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`GetVoiceConnectorStreamingConfigurationOutput`](crate::output::GetVoiceConnectorStreamingConfigurationOutput).
    pub fn builder() -> crate::output::get_voice_connector_streaming_configuration_output::Builder {
        crate::output::get_voice_connector_streaming_configuration_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetVoiceConnectorProxyOutput {
    /// <p>The proxy configuration details.</p>
    #[doc(hidden)]
    pub proxy: std::option::Option<crate::model::Proxy>,
}
impl GetVoiceConnectorProxyOutput {
    /// <p>The proxy configuration details.</p>
    pub fn proxy(&self) -> std::option::Option<&crate::model::Proxy> {
        self.proxy.as_ref()
    }
}
/// See [`GetVoiceConnectorProxyOutput`](crate::output::GetVoiceConnectorProxyOutput).
pub mod get_voice_connector_proxy_output {

    /// A builder for [`GetVoiceConnectorProxyOutput`](crate::output::GetVoiceConnectorProxyOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) proxy: std::option::Option<crate::model::Proxy>,
    }
    impl Builder {
        /// <p>The proxy configuration details.</p>
        pub fn proxy(mut self, input: crate::model::Proxy) -> Self {
            self.proxy = Some(input);
            self
        }
        /// <p>The proxy configuration details.</p>
        pub fn set_proxy(mut self, input: std::option::Option<crate::model::Proxy>) -> Self {
            self.proxy = input;
            self
        }
        /// Consumes the builder and constructs a [`GetVoiceConnectorProxyOutput`](crate::output::GetVoiceConnectorProxyOutput).
        pub fn build(self) -> crate::output::GetVoiceConnectorProxyOutput {
            crate::output::GetVoiceConnectorProxyOutput { proxy: self.proxy }
        }
    }
}
impl GetVoiceConnectorProxyOutput {
    /// Creates a new builder-style object to manufacture [`GetVoiceConnectorProxyOutput`](crate::output::GetVoiceConnectorProxyOutput).
    pub fn builder() -> crate::output::get_voice_connector_proxy_output::Builder {
        crate::output::get_voice_connector_proxy_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetVoiceConnectorOriginationOutput {
    /// <p>The origination setting details.</p>
    #[doc(hidden)]
    pub origination: std::option::Option<crate::model::Origination>,
}
impl GetVoiceConnectorOriginationOutput {
    /// <p>The origination setting details.</p>
    pub fn origination(&self) -> std::option::Option<&crate::model::Origination> {
        self.origination.as_ref()
    }
}
/// See [`GetVoiceConnectorOriginationOutput`](crate::output::GetVoiceConnectorOriginationOutput).
pub mod get_voice_connector_origination_output {

    /// A builder for [`GetVoiceConnectorOriginationOutput`](crate::output::GetVoiceConnectorOriginationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) origination: std::option::Option<crate::model::Origination>,
    }
    impl Builder {
        /// <p>The origination setting details.</p>
        pub fn origination(mut self, input: crate::model::Origination) -> Self {
            self.origination = Some(input);
            self
        }
        /// <p>The origination setting details.</p>
        pub fn set_origination(
            mut self,
            input: std::option::Option<crate::model::Origination>,
        ) -> Self {
            self.origination = input;
            self
        }
        /// Consumes the builder and constructs a [`GetVoiceConnectorOriginationOutput`](crate::output::GetVoiceConnectorOriginationOutput).
        pub fn build(self) -> crate::output::GetVoiceConnectorOriginationOutput {
            crate::output::GetVoiceConnectorOriginationOutput {
                origination: self.origination,
            }
        }
    }
}
impl GetVoiceConnectorOriginationOutput {
    /// Creates a new builder-style object to manufacture [`GetVoiceConnectorOriginationOutput`](crate::output::GetVoiceConnectorOriginationOutput).
    pub fn builder() -> crate::output::get_voice_connector_origination_output::Builder {
        crate::output::get_voice_connector_origination_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetVoiceConnectorLoggingConfigurationOutput {
    /// <p>The logging configuration details.</p>
    #[doc(hidden)]
    pub logging_configuration: std::option::Option<crate::model::LoggingConfiguration>,
}
impl GetVoiceConnectorLoggingConfigurationOutput {
    /// <p>The logging configuration details.</p>
    pub fn logging_configuration(
        &self,
    ) -> std::option::Option<&crate::model::LoggingConfiguration> {
        self.logging_configuration.as_ref()
    }
}
/// See [`GetVoiceConnectorLoggingConfigurationOutput`](crate::output::GetVoiceConnectorLoggingConfigurationOutput).
pub mod get_voice_connector_logging_configuration_output {

    /// A builder for [`GetVoiceConnectorLoggingConfigurationOutput`](crate::output::GetVoiceConnectorLoggingConfigurationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) logging_configuration: std::option::Option<crate::model::LoggingConfiguration>,
    }
    impl Builder {
        /// <p>The logging configuration details.</p>
        pub fn logging_configuration(mut self, input: crate::model::LoggingConfiguration) -> Self {
            self.logging_configuration = Some(input);
            self
        }
        /// <p>The logging configuration details.</p>
        pub fn set_logging_configuration(
            mut self,
            input: std::option::Option<crate::model::LoggingConfiguration>,
        ) -> Self {
            self.logging_configuration = input;
            self
        }
        /// Consumes the builder and constructs a [`GetVoiceConnectorLoggingConfigurationOutput`](crate::output::GetVoiceConnectorLoggingConfigurationOutput).
        pub fn build(self) -> crate::output::GetVoiceConnectorLoggingConfigurationOutput {
            crate::output::GetVoiceConnectorLoggingConfigurationOutput {
                logging_configuration: self.logging_configuration,
            }
        }
    }
}
impl GetVoiceConnectorLoggingConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`GetVoiceConnectorLoggingConfigurationOutput`](crate::output::GetVoiceConnectorLoggingConfigurationOutput).
    pub fn builder() -> crate::output::get_voice_connector_logging_configuration_output::Builder {
        crate::output::get_voice_connector_logging_configuration_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetVoiceConnectorGroupOutput {
    /// <p>The Amazon Chime Voice Connector group details.</p>
    #[doc(hidden)]
    pub voice_connector_group: std::option::Option<crate::model::VoiceConnectorGroup>,
}
impl GetVoiceConnectorGroupOutput {
    /// <p>The Amazon Chime Voice Connector group details.</p>
    pub fn voice_connector_group(&self) -> std::option::Option<&crate::model::VoiceConnectorGroup> {
        self.voice_connector_group.as_ref()
    }
}
/// See [`GetVoiceConnectorGroupOutput`](crate::output::GetVoiceConnectorGroupOutput).
pub mod get_voice_connector_group_output {

    /// A builder for [`GetVoiceConnectorGroupOutput`](crate::output::GetVoiceConnectorGroupOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) voice_connector_group: std::option::Option<crate::model::VoiceConnectorGroup>,
    }
    impl Builder {
        /// <p>The Amazon Chime Voice Connector group details.</p>
        pub fn voice_connector_group(mut self, input: crate::model::VoiceConnectorGroup) -> Self {
            self.voice_connector_group = Some(input);
            self
        }
        /// <p>The Amazon Chime Voice Connector group details.</p>
        pub fn set_voice_connector_group(
            mut self,
            input: std::option::Option<crate::model::VoiceConnectorGroup>,
        ) -> Self {
            self.voice_connector_group = input;
            self
        }
        /// Consumes the builder and constructs a [`GetVoiceConnectorGroupOutput`](crate::output::GetVoiceConnectorGroupOutput).
        pub fn build(self) -> crate::output::GetVoiceConnectorGroupOutput {
            crate::output::GetVoiceConnectorGroupOutput {
                voice_connector_group: self.voice_connector_group,
            }
        }
    }
}
impl GetVoiceConnectorGroupOutput {
    /// Creates a new builder-style object to manufacture [`GetVoiceConnectorGroupOutput`](crate::output::GetVoiceConnectorGroupOutput).
    pub fn builder() -> crate::output::get_voice_connector_group_output::Builder {
        crate::output::get_voice_connector_group_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetVoiceConnectorEmergencyCallingConfigurationOutput {
    /// <p>The emergency calling configuration details.</p>
    #[doc(hidden)]
    pub emergency_calling_configuration:
        std::option::Option<crate::model::EmergencyCallingConfiguration>,
}
impl GetVoiceConnectorEmergencyCallingConfigurationOutput {
    /// <p>The emergency calling configuration details.</p>
    pub fn emergency_calling_configuration(
        &self,
    ) -> std::option::Option<&crate::model::EmergencyCallingConfiguration> {
        self.emergency_calling_configuration.as_ref()
    }
}
/// See [`GetVoiceConnectorEmergencyCallingConfigurationOutput`](crate::output::GetVoiceConnectorEmergencyCallingConfigurationOutput).
pub mod get_voice_connector_emergency_calling_configuration_output {

    /// A builder for [`GetVoiceConnectorEmergencyCallingConfigurationOutput`](crate::output::GetVoiceConnectorEmergencyCallingConfigurationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) emergency_calling_configuration:
            std::option::Option<crate::model::EmergencyCallingConfiguration>,
    }
    impl Builder {
        /// <p>The emergency calling configuration details.</p>
        pub fn emergency_calling_configuration(
            mut self,
            input: crate::model::EmergencyCallingConfiguration,
        ) -> Self {
            self.emergency_calling_configuration = Some(input);
            self
        }
        /// <p>The emergency calling configuration details.</p>
        pub fn set_emergency_calling_configuration(
            mut self,
            input: std::option::Option<crate::model::EmergencyCallingConfiguration>,
        ) -> Self {
            self.emergency_calling_configuration = input;
            self
        }
        /// Consumes the builder and constructs a [`GetVoiceConnectorEmergencyCallingConfigurationOutput`](crate::output::GetVoiceConnectorEmergencyCallingConfigurationOutput).
        pub fn build(self) -> crate::output::GetVoiceConnectorEmergencyCallingConfigurationOutput {
            crate::output::GetVoiceConnectorEmergencyCallingConfigurationOutput {
                emergency_calling_configuration: self.emergency_calling_configuration,
            }
        }
    }
}
impl GetVoiceConnectorEmergencyCallingConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`GetVoiceConnectorEmergencyCallingConfigurationOutput`](crate::output::GetVoiceConnectorEmergencyCallingConfigurationOutput).
    pub fn builder(
    ) -> crate::output::get_voice_connector_emergency_calling_configuration_output::Builder {
        crate::output::get_voice_connector_emergency_calling_configuration_output::Builder::default(
        )
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetVoiceConnectorOutput {
    /// <p>The Amazon Chime Voice Connector details.</p>
    #[doc(hidden)]
    pub voice_connector: std::option::Option<crate::model::VoiceConnector>,
}
impl GetVoiceConnectorOutput {
    /// <p>The Amazon Chime Voice Connector details.</p>
    pub fn voice_connector(&self) -> std::option::Option<&crate::model::VoiceConnector> {
        self.voice_connector.as_ref()
    }
}
/// See [`GetVoiceConnectorOutput`](crate::output::GetVoiceConnectorOutput).
pub mod get_voice_connector_output {

    /// A builder for [`GetVoiceConnectorOutput`](crate::output::GetVoiceConnectorOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) voice_connector: std::option::Option<crate::model::VoiceConnector>,
    }
    impl Builder {
        /// <p>The Amazon Chime Voice Connector details.</p>
        pub fn voice_connector(mut self, input: crate::model::VoiceConnector) -> Self {
            self.voice_connector = Some(input);
            self
        }
        /// <p>The Amazon Chime Voice Connector details.</p>
        pub fn set_voice_connector(
            mut self,
            input: std::option::Option<crate::model::VoiceConnector>,
        ) -> Self {
            self.voice_connector = input;
            self
        }
        /// Consumes the builder and constructs a [`GetVoiceConnectorOutput`](crate::output::GetVoiceConnectorOutput).
        pub fn build(self) -> crate::output::GetVoiceConnectorOutput {
            crate::output::GetVoiceConnectorOutput {
                voice_connector: self.voice_connector,
            }
        }
    }
}
impl GetVoiceConnectorOutput {
    /// Creates a new builder-style object to manufacture [`GetVoiceConnectorOutput`](crate::output::GetVoiceConnectorOutput).
    pub fn builder() -> crate::output::get_voice_connector_output::Builder {
        crate::output::get_voice_connector_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetUserSettingsOutput {
    /// <p>The user settings.</p>
    #[doc(hidden)]
    pub user_settings: std::option::Option<crate::model::UserSettings>,
}
impl GetUserSettingsOutput {
    /// <p>The user settings.</p>
    pub fn user_settings(&self) -> std::option::Option<&crate::model::UserSettings> {
        self.user_settings.as_ref()
    }
}
/// See [`GetUserSettingsOutput`](crate::output::GetUserSettingsOutput).
pub mod get_user_settings_output {

    /// A builder for [`GetUserSettingsOutput`](crate::output::GetUserSettingsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) user_settings: std::option::Option<crate::model::UserSettings>,
    }
    impl Builder {
        /// <p>The user settings.</p>
        pub fn user_settings(mut self, input: crate::model::UserSettings) -> Self {
            self.user_settings = Some(input);
            self
        }
        /// <p>The user settings.</p>
        pub fn set_user_settings(
            mut self,
            input: std::option::Option<crate::model::UserSettings>,
        ) -> Self {
            self.user_settings = input;
            self
        }
        /// Consumes the builder and constructs a [`GetUserSettingsOutput`](crate::output::GetUserSettingsOutput).
        pub fn build(self) -> crate::output::GetUserSettingsOutput {
            crate::output::GetUserSettingsOutput {
                user_settings: self.user_settings,
            }
        }
    }
}
impl GetUserSettingsOutput {
    /// Creates a new builder-style object to manufacture [`GetUserSettingsOutput`](crate::output::GetUserSettingsOutput).
    pub fn builder() -> crate::output::get_user_settings_output::Builder {
        crate::output::get_user_settings_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetUserOutput {
    /// <p>The user details.</p>
    #[doc(hidden)]
    pub user: std::option::Option<crate::model::User>,
}
impl GetUserOutput {
    /// <p>The user details.</p>
    pub fn user(&self) -> std::option::Option<&crate::model::User> {
        self.user.as_ref()
    }
}
/// See [`GetUserOutput`](crate::output::GetUserOutput).
pub mod get_user_output {

    /// A builder for [`GetUserOutput`](crate::output::GetUserOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) user: std::option::Option<crate::model::User>,
    }
    impl Builder {
        /// <p>The user details.</p>
        pub fn user(mut self, input: crate::model::User) -> Self {
            self.user = Some(input);
            self
        }
        /// <p>The user details.</p>
        pub fn set_user(mut self, input: std::option::Option<crate::model::User>) -> Self {
            self.user = input;
            self
        }
        /// Consumes the builder and constructs a [`GetUserOutput`](crate::output::GetUserOutput).
        pub fn build(self) -> crate::output::GetUserOutput {
            crate::output::GetUserOutput { user: self.user }
        }
    }
}
impl GetUserOutput {
    /// Creates a new builder-style object to manufacture [`GetUserOutput`](crate::output::GetUserOutput).
    pub fn builder() -> crate::output::get_user_output::Builder {
        crate::output::get_user_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetSipRuleOutput {
    /// <p>The SIP rule details.</p>
    #[doc(hidden)]
    pub sip_rule: std::option::Option<crate::model::SipRule>,
}
impl GetSipRuleOutput {
    /// <p>The SIP rule details.</p>
    pub fn sip_rule(&self) -> std::option::Option<&crate::model::SipRule> {
        self.sip_rule.as_ref()
    }
}
/// See [`GetSipRuleOutput`](crate::output::GetSipRuleOutput).
pub mod get_sip_rule_output {

    /// A builder for [`GetSipRuleOutput`](crate::output::GetSipRuleOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) sip_rule: std::option::Option<crate::model::SipRule>,
    }
    impl Builder {
        /// <p>The SIP rule details.</p>
        pub fn sip_rule(mut self, input: crate::model::SipRule) -> Self {
            self.sip_rule = Some(input);
            self
        }
        /// <p>The SIP rule details.</p>
        pub fn set_sip_rule(mut self, input: std::option::Option<crate::model::SipRule>) -> Self {
            self.sip_rule = input;
            self
        }
        /// Consumes the builder and constructs a [`GetSipRuleOutput`](crate::output::GetSipRuleOutput).
        pub fn build(self) -> crate::output::GetSipRuleOutput {
            crate::output::GetSipRuleOutput {
                sip_rule: self.sip_rule,
            }
        }
    }
}
impl GetSipRuleOutput {
    /// Creates a new builder-style object to manufacture [`GetSipRuleOutput`](crate::output::GetSipRuleOutput).
    pub fn builder() -> crate::output::get_sip_rule_output::Builder {
        crate::output::get_sip_rule_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetSipMediaApplicationLoggingConfigurationOutput {
    /// <p>The actual logging configuration.</p>
    #[doc(hidden)]
    pub sip_media_application_logging_configuration:
        std::option::Option<crate::model::SipMediaApplicationLoggingConfiguration>,
}
impl GetSipMediaApplicationLoggingConfigurationOutput {
    /// <p>The actual logging configuration.</p>
    pub fn sip_media_application_logging_configuration(
        &self,
    ) -> std::option::Option<&crate::model::SipMediaApplicationLoggingConfiguration> {
        self.sip_media_application_logging_configuration.as_ref()
    }
}
/// See [`GetSipMediaApplicationLoggingConfigurationOutput`](crate::output::GetSipMediaApplicationLoggingConfigurationOutput).
pub mod get_sip_media_application_logging_configuration_output {

    /// A builder for [`GetSipMediaApplicationLoggingConfigurationOutput`](crate::output::GetSipMediaApplicationLoggingConfigurationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) sip_media_application_logging_configuration:
            std::option::Option<crate::model::SipMediaApplicationLoggingConfiguration>,
    }
    impl Builder {
        /// <p>The actual logging configuration.</p>
        pub fn sip_media_application_logging_configuration(
            mut self,
            input: crate::model::SipMediaApplicationLoggingConfiguration,
        ) -> Self {
            self.sip_media_application_logging_configuration = Some(input);
            self
        }
        /// <p>The actual logging configuration.</p>
        pub fn set_sip_media_application_logging_configuration(
            mut self,
            input: std::option::Option<crate::model::SipMediaApplicationLoggingConfiguration>,
        ) -> Self {
            self.sip_media_application_logging_configuration = input;
            self
        }
        /// Consumes the builder and constructs a [`GetSipMediaApplicationLoggingConfigurationOutput`](crate::output::GetSipMediaApplicationLoggingConfigurationOutput).
        pub fn build(self) -> crate::output::GetSipMediaApplicationLoggingConfigurationOutput {
            crate::output::GetSipMediaApplicationLoggingConfigurationOutput {
                sip_media_application_logging_configuration: self
                    .sip_media_application_logging_configuration,
            }
        }
    }
}
impl GetSipMediaApplicationLoggingConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`GetSipMediaApplicationLoggingConfigurationOutput`](crate::output::GetSipMediaApplicationLoggingConfigurationOutput).
    pub fn builder(
    ) -> crate::output::get_sip_media_application_logging_configuration_output::Builder {
        crate::output::get_sip_media_application_logging_configuration_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetSipMediaApplicationOutput {
    /// <p>The SIP media application details.</p>
    #[doc(hidden)]
    pub sip_media_application: std::option::Option<crate::model::SipMediaApplication>,
}
impl GetSipMediaApplicationOutput {
    /// <p>The SIP media application details.</p>
    pub fn sip_media_application(&self) -> std::option::Option<&crate::model::SipMediaApplication> {
        self.sip_media_application.as_ref()
    }
}
/// See [`GetSipMediaApplicationOutput`](crate::output::GetSipMediaApplicationOutput).
pub mod get_sip_media_application_output {

    /// A builder for [`GetSipMediaApplicationOutput`](crate::output::GetSipMediaApplicationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) sip_media_application: std::option::Option<crate::model::SipMediaApplication>,
    }
    impl Builder {
        /// <p>The SIP media application details.</p>
        pub fn sip_media_application(mut self, input: crate::model::SipMediaApplication) -> Self {
            self.sip_media_application = Some(input);
            self
        }
        /// <p>The SIP media application details.</p>
        pub fn set_sip_media_application(
            mut self,
            input: std::option::Option<crate::model::SipMediaApplication>,
        ) -> Self {
            self.sip_media_application = input;
            self
        }
        /// Consumes the builder and constructs a [`GetSipMediaApplicationOutput`](crate::output::GetSipMediaApplicationOutput).
        pub fn build(self) -> crate::output::GetSipMediaApplicationOutput {
            crate::output::GetSipMediaApplicationOutput {
                sip_media_application: self.sip_media_application,
            }
        }
    }
}
impl GetSipMediaApplicationOutput {
    /// Creates a new builder-style object to manufacture [`GetSipMediaApplicationOutput`](crate::output::GetSipMediaApplicationOutput).
    pub fn builder() -> crate::output::get_sip_media_application_output::Builder {
        crate::output::get_sip_media_application_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetRoomOutput {
    /// <p>The room details.</p>
    #[doc(hidden)]
    pub room: std::option::Option<crate::model::Room>,
}
impl GetRoomOutput {
    /// <p>The room details.</p>
    pub fn room(&self) -> std::option::Option<&crate::model::Room> {
        self.room.as_ref()
    }
}
/// See [`GetRoomOutput`](crate::output::GetRoomOutput).
pub mod get_room_output {

    /// A builder for [`GetRoomOutput`](crate::output::GetRoomOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) room: std::option::Option<crate::model::Room>,
    }
    impl Builder {
        /// <p>The room details.</p>
        pub fn room(mut self, input: crate::model::Room) -> Self {
            self.room = Some(input);
            self
        }
        /// <p>The room details.</p>
        pub fn set_room(mut self, input: std::option::Option<crate::model::Room>) -> Self {
            self.room = input;
            self
        }
        /// Consumes the builder and constructs a [`GetRoomOutput`](crate::output::GetRoomOutput).
        pub fn build(self) -> crate::output::GetRoomOutput {
            crate::output::GetRoomOutput { room: self.room }
        }
    }
}
impl GetRoomOutput {
    /// Creates a new builder-style object to manufacture [`GetRoomOutput`](crate::output::GetRoomOutput).
    pub fn builder() -> crate::output::get_room_output::Builder {
        crate::output::get_room_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetRetentionSettingsOutput {
    /// <p>The retention settings.</p>
    #[doc(hidden)]
    pub retention_settings: std::option::Option<crate::model::RetentionSettings>,
    /// <p>The timestamp representing the time at which the specified items are permanently deleted, in ISO 8601 format.</p>
    #[doc(hidden)]
    pub initiate_deletion_timestamp: std::option::Option<aws_smithy_types::DateTime>,
}
impl GetRetentionSettingsOutput {
    /// <p>The retention settings.</p>
    pub fn retention_settings(&self) -> std::option::Option<&crate::model::RetentionSettings> {
        self.retention_settings.as_ref()
    }
    /// <p>The timestamp representing the time at which the specified items are permanently deleted, in ISO 8601 format.</p>
    pub fn initiate_deletion_timestamp(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.initiate_deletion_timestamp.as_ref()
    }
}
/// See [`GetRetentionSettingsOutput`](crate::output::GetRetentionSettingsOutput).
pub mod get_retention_settings_output {

    /// A builder for [`GetRetentionSettingsOutput`](crate::output::GetRetentionSettingsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) retention_settings: std::option::Option<crate::model::RetentionSettings>,
        pub(crate) initiate_deletion_timestamp: std::option::Option<aws_smithy_types::DateTime>,
    }
    impl Builder {
        /// <p>The retention settings.</p>
        pub fn retention_settings(mut self, input: crate::model::RetentionSettings) -> Self {
            self.retention_settings = Some(input);
            self
        }
        /// <p>The retention settings.</p>
        pub fn set_retention_settings(
            mut self,
            input: std::option::Option<crate::model::RetentionSettings>,
        ) -> Self {
            self.retention_settings = input;
            self
        }
        /// <p>The timestamp representing the time at which the specified items are permanently deleted, in ISO 8601 format.</p>
        pub fn initiate_deletion_timestamp(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.initiate_deletion_timestamp = Some(input);
            self
        }
        /// <p>The timestamp representing the time at which the specified items are permanently deleted, in ISO 8601 format.</p>
        pub fn set_initiate_deletion_timestamp(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.initiate_deletion_timestamp = input;
            self
        }
        /// Consumes the builder and constructs a [`GetRetentionSettingsOutput`](crate::output::GetRetentionSettingsOutput).
        pub fn build(self) -> crate::output::GetRetentionSettingsOutput {
            crate::output::GetRetentionSettingsOutput {
                retention_settings: self.retention_settings,
                initiate_deletion_timestamp: self.initiate_deletion_timestamp,
            }
        }
    }
}
impl GetRetentionSettingsOutput {
    /// Creates a new builder-style object to manufacture [`GetRetentionSettingsOutput`](crate::output::GetRetentionSettingsOutput).
    pub fn builder() -> crate::output::get_retention_settings_output::Builder {
        crate::output::get_retention_settings_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetProxySessionOutput {
    /// <p>The proxy session details.</p>
    #[doc(hidden)]
    pub proxy_session: std::option::Option<crate::model::ProxySession>,
}
impl GetProxySessionOutput {
    /// <p>The proxy session details.</p>
    pub fn proxy_session(&self) -> std::option::Option<&crate::model::ProxySession> {
        self.proxy_session.as_ref()
    }
}
/// See [`GetProxySessionOutput`](crate::output::GetProxySessionOutput).
pub mod get_proxy_session_output {

    /// A builder for [`GetProxySessionOutput`](crate::output::GetProxySessionOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) proxy_session: std::option::Option<crate::model::ProxySession>,
    }
    impl Builder {
        /// <p>The proxy session details.</p>
        pub fn proxy_session(mut self, input: crate::model::ProxySession) -> Self {
            self.proxy_session = Some(input);
            self
        }
        /// <p>The proxy session details.</p>
        pub fn set_proxy_session(
            mut self,
            input: std::option::Option<crate::model::ProxySession>,
        ) -> Self {
            self.proxy_session = input;
            self
        }
        /// Consumes the builder and constructs a [`GetProxySessionOutput`](crate::output::GetProxySessionOutput).
        pub fn build(self) -> crate::output::GetProxySessionOutput {
            crate::output::GetProxySessionOutput {
                proxy_session: self.proxy_session,
            }
        }
    }
}
impl GetProxySessionOutput {
    /// Creates a new builder-style object to manufacture [`GetProxySessionOutput`](crate::output::GetProxySessionOutput).
    pub fn builder() -> crate::output::get_proxy_session_output::Builder {
        crate::output::get_proxy_session_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetPhoneNumberSettingsOutput {
    /// <p>The default outbound calling name for the account.</p>
    #[doc(hidden)]
    pub calling_name: std::option::Option<std::string::String>,
    /// <p>The updated outbound calling name timestamp, in ISO 8601 format.</p>
    #[doc(hidden)]
    pub calling_name_updated_timestamp: std::option::Option<aws_smithy_types::DateTime>,
}
impl GetPhoneNumberSettingsOutput {
    /// <p>The default outbound calling name for the account.</p>
    pub fn calling_name(&self) -> std::option::Option<&str> {
        self.calling_name.as_deref()
    }
    /// <p>The updated outbound calling name timestamp, in ISO 8601 format.</p>
    pub fn calling_name_updated_timestamp(
        &self,
    ) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.calling_name_updated_timestamp.as_ref()
    }
}
impl std::fmt::Debug for GetPhoneNumberSettingsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetPhoneNumberSettingsOutput");
        formatter.field("calling_name", &"*** Sensitive Data Redacted ***");
        formatter.field(
            "calling_name_updated_timestamp",
            &self.calling_name_updated_timestamp,
        );
        formatter.finish()
    }
}
/// See [`GetPhoneNumberSettingsOutput`](crate::output::GetPhoneNumberSettingsOutput).
pub mod get_phone_number_settings_output {

    /// A builder for [`GetPhoneNumberSettingsOutput`](crate::output::GetPhoneNumberSettingsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
    pub struct Builder {
        pub(crate) calling_name: std::option::Option<std::string::String>,
        pub(crate) calling_name_updated_timestamp: std::option::Option<aws_smithy_types::DateTime>,
    }
    impl Builder {
        /// <p>The default outbound calling name for the account.</p>
        pub fn calling_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.calling_name = Some(input.into());
            self
        }
        /// <p>The default outbound calling name for the account.</p>
        pub fn set_calling_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.calling_name = input;
            self
        }
        /// <p>The updated outbound calling name timestamp, in ISO 8601 format.</p>
        pub fn calling_name_updated_timestamp(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.calling_name_updated_timestamp = Some(input);
            self
        }
        /// <p>The updated outbound calling name timestamp, in ISO 8601 format.</p>
        pub fn set_calling_name_updated_timestamp(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.calling_name_updated_timestamp = input;
            self
        }
        /// Consumes the builder and constructs a [`GetPhoneNumberSettingsOutput`](crate::output::GetPhoneNumberSettingsOutput).
        pub fn build(self) -> crate::output::GetPhoneNumberSettingsOutput {
            crate::output::GetPhoneNumberSettingsOutput {
                calling_name: self.calling_name,
                calling_name_updated_timestamp: self.calling_name_updated_timestamp,
            }
        }
    }
    impl std::fmt::Debug for Builder {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            let mut formatter = f.debug_struct("Builder");
            formatter.field("calling_name", &"*** Sensitive Data Redacted ***");
            formatter.field(
                "calling_name_updated_timestamp",
                &self.calling_name_updated_timestamp,
            );
            formatter.finish()
        }
    }
}
impl GetPhoneNumberSettingsOutput {
    /// Creates a new builder-style object to manufacture [`GetPhoneNumberSettingsOutput`](crate::output::GetPhoneNumberSettingsOutput).
    pub fn builder() -> crate::output::get_phone_number_settings_output::Builder {
        crate::output::get_phone_number_settings_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetPhoneNumberOrderOutput {
    /// <p>The phone number order details.</p>
    #[doc(hidden)]
    pub phone_number_order: std::option::Option<crate::model::PhoneNumberOrder>,
}
impl GetPhoneNumberOrderOutput {
    /// <p>The phone number order details.</p>
    pub fn phone_number_order(&self) -> std::option::Option<&crate::model::PhoneNumberOrder> {
        self.phone_number_order.as_ref()
    }
}
/// See [`GetPhoneNumberOrderOutput`](crate::output::GetPhoneNumberOrderOutput).
pub mod get_phone_number_order_output {

    /// A builder for [`GetPhoneNumberOrderOutput`](crate::output::GetPhoneNumberOrderOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) phone_number_order: std::option::Option<crate::model::PhoneNumberOrder>,
    }
    impl Builder {
        /// <p>The phone number order details.</p>
        pub fn phone_number_order(mut self, input: crate::model::PhoneNumberOrder) -> Self {
            self.phone_number_order = Some(input);
            self
        }
        /// <p>The phone number order details.</p>
        pub fn set_phone_number_order(
            mut self,
            input: std::option::Option<crate::model::PhoneNumberOrder>,
        ) -> Self {
            self.phone_number_order = input;
            self
        }
        /// Consumes the builder and constructs a [`GetPhoneNumberOrderOutput`](crate::output::GetPhoneNumberOrderOutput).
        pub fn build(self) -> crate::output::GetPhoneNumberOrderOutput {
            crate::output::GetPhoneNumberOrderOutput {
                phone_number_order: self.phone_number_order,
            }
        }
    }
}
impl GetPhoneNumberOrderOutput {
    /// Creates a new builder-style object to manufacture [`GetPhoneNumberOrderOutput`](crate::output::GetPhoneNumberOrderOutput).
    pub fn builder() -> crate::output::get_phone_number_order_output::Builder {
        crate::output::get_phone_number_order_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetPhoneNumberOutput {
    /// <p>The phone number details.</p>
    #[doc(hidden)]
    pub phone_number: std::option::Option<crate::model::PhoneNumber>,
}
impl GetPhoneNumberOutput {
    /// <p>The phone number details.</p>
    pub fn phone_number(&self) -> std::option::Option<&crate::model::PhoneNumber> {
        self.phone_number.as_ref()
    }
}
/// See [`GetPhoneNumberOutput`](crate::output::GetPhoneNumberOutput).
pub mod get_phone_number_output {

    /// A builder for [`GetPhoneNumberOutput`](crate::output::GetPhoneNumberOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) phone_number: std::option::Option<crate::model::PhoneNumber>,
    }
    impl Builder {
        /// <p>The phone number details.</p>
        pub fn phone_number(mut self, input: crate::model::PhoneNumber) -> Self {
            self.phone_number = Some(input);
            self
        }
        /// <p>The phone number details.</p>
        pub fn set_phone_number(
            mut self,
            input: std::option::Option<crate::model::PhoneNumber>,
        ) -> Self {
            self.phone_number = input;
            self
        }
        /// Consumes the builder and constructs a [`GetPhoneNumberOutput`](crate::output::GetPhoneNumberOutput).
        pub fn build(self) -> crate::output::GetPhoneNumberOutput {
            crate::output::GetPhoneNumberOutput {
                phone_number: self.phone_number,
            }
        }
    }
}
impl GetPhoneNumberOutput {
    /// Creates a new builder-style object to manufacture [`GetPhoneNumberOutput`](crate::output::GetPhoneNumberOutput).
    pub fn builder() -> crate::output::get_phone_number_output::Builder {
        crate::output::get_phone_number_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetMessagingSessionEndpointOutput {
    /// <p>The endpoint returned in the response.</p>
    #[doc(hidden)]
    pub endpoint: std::option::Option<crate::model::MessagingSessionEndpoint>,
}
impl GetMessagingSessionEndpointOutput {
    /// <p>The endpoint returned in the response.</p>
    pub fn endpoint(&self) -> std::option::Option<&crate::model::MessagingSessionEndpoint> {
        self.endpoint.as_ref()
    }
}
/// See [`GetMessagingSessionEndpointOutput`](crate::output::GetMessagingSessionEndpointOutput).
pub mod get_messaging_session_endpoint_output {

    /// A builder for [`GetMessagingSessionEndpointOutput`](crate::output::GetMessagingSessionEndpointOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) endpoint: std::option::Option<crate::model::MessagingSessionEndpoint>,
    }
    impl Builder {
        /// <p>The endpoint returned in the response.</p>
        pub fn endpoint(mut self, input: crate::model::MessagingSessionEndpoint) -> Self {
            self.endpoint = Some(input);
            self
        }
        /// <p>The endpoint returned in the response.</p>
        pub fn set_endpoint(
            mut self,
            input: std::option::Option<crate::model::MessagingSessionEndpoint>,
        ) -> Self {
            self.endpoint = input;
            self
        }
        /// Consumes the builder and constructs a [`GetMessagingSessionEndpointOutput`](crate::output::GetMessagingSessionEndpointOutput).
        pub fn build(self) -> crate::output::GetMessagingSessionEndpointOutput {
            crate::output::GetMessagingSessionEndpointOutput {
                endpoint: self.endpoint,
            }
        }
    }
}
impl GetMessagingSessionEndpointOutput {
    /// Creates a new builder-style object to manufacture [`GetMessagingSessionEndpointOutput`](crate::output::GetMessagingSessionEndpointOutput).
    pub fn builder() -> crate::output::get_messaging_session_endpoint_output::Builder {
        crate::output::get_messaging_session_endpoint_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetMeetingOutput {
    /// <p>The Amazon Chime SDK meeting information.</p>
    #[doc(hidden)]
    pub meeting: std::option::Option<crate::model::Meeting>,
}
impl GetMeetingOutput {
    /// <p>The Amazon Chime SDK meeting information.</p>
    pub fn meeting(&self) -> std::option::Option<&crate::model::Meeting> {
        self.meeting.as_ref()
    }
}
/// See [`GetMeetingOutput`](crate::output::GetMeetingOutput).
pub mod get_meeting_output {

    /// A builder for [`GetMeetingOutput`](crate::output::GetMeetingOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) meeting: std::option::Option<crate::model::Meeting>,
    }
    impl Builder {
        /// <p>The Amazon Chime SDK meeting information.</p>
        pub fn meeting(mut self, input: crate::model::Meeting) -> Self {
            self.meeting = Some(input);
            self
        }
        /// <p>The Amazon Chime SDK meeting information.</p>
        pub fn set_meeting(mut self, input: std::option::Option<crate::model::Meeting>) -> Self {
            self.meeting = input;
            self
        }
        /// Consumes the builder and constructs a [`GetMeetingOutput`](crate::output::GetMeetingOutput).
        pub fn build(self) -> crate::output::GetMeetingOutput {
            crate::output::GetMeetingOutput {
                meeting: self.meeting,
            }
        }
    }
}
impl GetMeetingOutput {
    /// Creates a new builder-style object to manufacture [`GetMeetingOutput`](crate::output::GetMeetingOutput).
    pub fn builder() -> crate::output::get_meeting_output::Builder {
        crate::output::get_meeting_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetMediaCapturePipelineOutput {
    /// <p>The media capture pipeline object.</p>
    #[doc(hidden)]
    pub media_capture_pipeline: std::option::Option<crate::model::MediaCapturePipeline>,
}
impl GetMediaCapturePipelineOutput {
    /// <p>The media capture pipeline object.</p>
    pub fn media_capture_pipeline(
        &self,
    ) -> std::option::Option<&crate::model::MediaCapturePipeline> {
        self.media_capture_pipeline.as_ref()
    }
}
/// See [`GetMediaCapturePipelineOutput`](crate::output::GetMediaCapturePipelineOutput).
pub mod get_media_capture_pipeline_output {

    /// A builder for [`GetMediaCapturePipelineOutput`](crate::output::GetMediaCapturePipelineOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) media_capture_pipeline: std::option::Option<crate::model::MediaCapturePipeline>,
    }
    impl Builder {
        /// <p>The media capture pipeline object.</p>
        pub fn media_capture_pipeline(mut self, input: crate::model::MediaCapturePipeline) -> Self {
            self.media_capture_pipeline = Some(input);
            self
        }
        /// <p>The media capture pipeline object.</p>
        pub fn set_media_capture_pipeline(
            mut self,
            input: std::option::Option<crate::model::MediaCapturePipeline>,
        ) -> Self {
            self.media_capture_pipeline = input;
            self
        }
        /// Consumes the builder and constructs a [`GetMediaCapturePipelineOutput`](crate::output::GetMediaCapturePipelineOutput).
        pub fn build(self) -> crate::output::GetMediaCapturePipelineOutput {
            crate::output::GetMediaCapturePipelineOutput {
                media_capture_pipeline: self.media_capture_pipeline,
            }
        }
    }
}
impl GetMediaCapturePipelineOutput {
    /// Creates a new builder-style object to manufacture [`GetMediaCapturePipelineOutput`](crate::output::GetMediaCapturePipelineOutput).
    pub fn builder() -> crate::output::get_media_capture_pipeline_output::Builder {
        crate::output::get_media_capture_pipeline_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetGlobalSettingsOutput {
    /// <p>The Amazon Chime Business Calling settings.</p>
    #[doc(hidden)]
    pub business_calling: std::option::Option<crate::model::BusinessCallingSettings>,
    /// <p>The Amazon Chime Voice Connector settings.</p>
    #[doc(hidden)]
    pub voice_connector: std::option::Option<crate::model::VoiceConnectorSettings>,
}
impl GetGlobalSettingsOutput {
    /// <p>The Amazon Chime Business Calling settings.</p>
    pub fn business_calling(&self) -> std::option::Option<&crate::model::BusinessCallingSettings> {
        self.business_calling.as_ref()
    }
    /// <p>The Amazon Chime Voice Connector settings.</p>
    pub fn voice_connector(&self) -> std::option::Option<&crate::model::VoiceConnectorSettings> {
        self.voice_connector.as_ref()
    }
}
/// See [`GetGlobalSettingsOutput`](crate::output::GetGlobalSettingsOutput).
pub mod get_global_settings_output {

    /// A builder for [`GetGlobalSettingsOutput`](crate::output::GetGlobalSettingsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) business_calling: std::option::Option<crate::model::BusinessCallingSettings>,
        pub(crate) voice_connector: std::option::Option<crate::model::VoiceConnectorSettings>,
    }
    impl Builder {
        /// <p>The Amazon Chime Business Calling settings.</p>
        pub fn business_calling(mut self, input: crate::model::BusinessCallingSettings) -> Self {
            self.business_calling = Some(input);
            self
        }
        /// <p>The Amazon Chime Business Calling settings.</p>
        pub fn set_business_calling(
            mut self,
            input: std::option::Option<crate::model::BusinessCallingSettings>,
        ) -> Self {
            self.business_calling = input;
            self
        }
        /// <p>The Amazon Chime Voice Connector settings.</p>
        pub fn voice_connector(mut self, input: crate::model::VoiceConnectorSettings) -> Self {
            self.voice_connector = Some(input);
            self
        }
        /// <p>The Amazon Chime Voice Connector settings.</p>
        pub fn set_voice_connector(
            mut self,
            input: std::option::Option<crate::model::VoiceConnectorSettings>,
        ) -> Self {
            self.voice_connector = input;
            self
        }
        /// Consumes the builder and constructs a [`GetGlobalSettingsOutput`](crate::output::GetGlobalSettingsOutput).
        pub fn build(self) -> crate::output::GetGlobalSettingsOutput {
            crate::output::GetGlobalSettingsOutput {
                business_calling: self.business_calling,
                voice_connector: self.voice_connector,
            }
        }
    }
}
impl GetGlobalSettingsOutput {
    /// Creates a new builder-style object to manufacture [`GetGlobalSettingsOutput`](crate::output::GetGlobalSettingsOutput).
    pub fn builder() -> crate::output::get_global_settings_output::Builder {
        crate::output::get_global_settings_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetEventsConfigurationOutput {
    /// <p>The events configuration details.</p>
    #[doc(hidden)]
    pub events_configuration: std::option::Option<crate::model::EventsConfiguration>,
}
impl GetEventsConfigurationOutput {
    /// <p>The events configuration details.</p>
    pub fn events_configuration(&self) -> std::option::Option<&crate::model::EventsConfiguration> {
        self.events_configuration.as_ref()
    }
}
/// See [`GetEventsConfigurationOutput`](crate::output::GetEventsConfigurationOutput).
pub mod get_events_configuration_output {

    /// A builder for [`GetEventsConfigurationOutput`](crate::output::GetEventsConfigurationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) events_configuration: std::option::Option<crate::model::EventsConfiguration>,
    }
    impl Builder {
        /// <p>The events configuration details.</p>
        pub fn events_configuration(mut self, input: crate::model::EventsConfiguration) -> Self {
            self.events_configuration = Some(input);
            self
        }
        /// <p>The events configuration details.</p>
        pub fn set_events_configuration(
            mut self,
            input: std::option::Option<crate::model::EventsConfiguration>,
        ) -> Self {
            self.events_configuration = input;
            self
        }
        /// Consumes the builder and constructs a [`GetEventsConfigurationOutput`](crate::output::GetEventsConfigurationOutput).
        pub fn build(self) -> crate::output::GetEventsConfigurationOutput {
            crate::output::GetEventsConfigurationOutput {
                events_configuration: self.events_configuration,
            }
        }
    }
}
impl GetEventsConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`GetEventsConfigurationOutput`](crate::output::GetEventsConfigurationOutput).
    pub fn builder() -> crate::output::get_events_configuration_output::Builder {
        crate::output::get_events_configuration_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetChannelMessageOutput {
    /// <p>The details of and content in the message.</p>
    #[doc(hidden)]
    pub channel_message: std::option::Option<crate::model::ChannelMessage>,
}
impl GetChannelMessageOutput {
    /// <p>The details of and content in the message.</p>
    pub fn channel_message(&self) -> std::option::Option<&crate::model::ChannelMessage> {
        self.channel_message.as_ref()
    }
}
/// See [`GetChannelMessageOutput`](crate::output::GetChannelMessageOutput).
pub mod get_channel_message_output {

    /// A builder for [`GetChannelMessageOutput`](crate::output::GetChannelMessageOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) channel_message: std::option::Option<crate::model::ChannelMessage>,
    }
    impl Builder {
        /// <p>The details of and content in the message.</p>
        pub fn channel_message(mut self, input: crate::model::ChannelMessage) -> Self {
            self.channel_message = Some(input);
            self
        }
        /// <p>The details of and content in the message.</p>
        pub fn set_channel_message(
            mut self,
            input: std::option::Option<crate::model::ChannelMessage>,
        ) -> Self {
            self.channel_message = input;
            self
        }
        /// Consumes the builder and constructs a [`GetChannelMessageOutput`](crate::output::GetChannelMessageOutput).
        pub fn build(self) -> crate::output::GetChannelMessageOutput {
            crate::output::GetChannelMessageOutput {
                channel_message: self.channel_message,
            }
        }
    }
}
impl GetChannelMessageOutput {
    /// Creates a new builder-style object to manufacture [`GetChannelMessageOutput`](crate::output::GetChannelMessageOutput).
    pub fn builder() -> crate::output::get_channel_message_output::Builder {
        crate::output::get_channel_message_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetBotOutput {
    /// <p>The chat bot details.</p>
    #[doc(hidden)]
    pub bot: std::option::Option<crate::model::Bot>,
}
impl GetBotOutput {
    /// <p>The chat bot details.</p>
    pub fn bot(&self) -> std::option::Option<&crate::model::Bot> {
        self.bot.as_ref()
    }
}
/// See [`GetBotOutput`](crate::output::GetBotOutput).
pub mod get_bot_output {

    /// A builder for [`GetBotOutput`](crate::output::GetBotOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) bot: std::option::Option<crate::model::Bot>,
    }
    impl Builder {
        /// <p>The chat bot details.</p>
        pub fn bot(mut self, input: crate::model::Bot) -> Self {
            self.bot = Some(input);
            self
        }
        /// <p>The chat bot details.</p>
        pub fn set_bot(mut self, input: std::option::Option<crate::model::Bot>) -> Self {
            self.bot = input;
            self
        }
        /// Consumes the builder and constructs a [`GetBotOutput`](crate::output::GetBotOutput).
        pub fn build(self) -> crate::output::GetBotOutput {
            crate::output::GetBotOutput { bot: self.bot }
        }
    }
}
impl GetBotOutput {
    /// Creates a new builder-style object to manufacture [`GetBotOutput`](crate::output::GetBotOutput).
    pub fn builder() -> crate::output::get_bot_output::Builder {
        crate::output::get_bot_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetAttendeeOutput {
    /// <p>The Amazon Chime SDK attendee information.</p>
    #[doc(hidden)]
    pub attendee: std::option::Option<crate::model::Attendee>,
}
impl GetAttendeeOutput {
    /// <p>The Amazon Chime SDK attendee information.</p>
    pub fn attendee(&self) -> std::option::Option<&crate::model::Attendee> {
        self.attendee.as_ref()
    }
}
/// See [`GetAttendeeOutput`](crate::output::GetAttendeeOutput).
pub mod get_attendee_output {

    /// A builder for [`GetAttendeeOutput`](crate::output::GetAttendeeOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) attendee: std::option::Option<crate::model::Attendee>,
    }
    impl Builder {
        /// <p>The Amazon Chime SDK attendee information.</p>
        pub fn attendee(mut self, input: crate::model::Attendee) -> Self {
            self.attendee = Some(input);
            self
        }
        /// <p>The Amazon Chime SDK attendee information.</p>
        pub fn set_attendee(mut self, input: std::option::Option<crate::model::Attendee>) -> Self {
            self.attendee = input;
            self
        }
        /// Consumes the builder and constructs a [`GetAttendeeOutput`](crate::output::GetAttendeeOutput).
        pub fn build(self) -> crate::output::GetAttendeeOutput {
            crate::output::GetAttendeeOutput {
                attendee: self.attendee,
            }
        }
    }
}
impl GetAttendeeOutput {
    /// Creates a new builder-style object to manufacture [`GetAttendeeOutput`](crate::output::GetAttendeeOutput).
    pub fn builder() -> crate::output::get_attendee_output::Builder {
        crate::output::get_attendee_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetAppInstanceStreamingConfigurationsOutput {
    /// <p>The streaming settings.</p>
    #[doc(hidden)]
    pub app_instance_streaming_configurations:
        std::option::Option<std::vec::Vec<crate::model::AppInstanceStreamingConfiguration>>,
}
impl GetAppInstanceStreamingConfigurationsOutput {
    /// <p>The streaming settings.</p>
    pub fn app_instance_streaming_configurations(
        &self,
    ) -> std::option::Option<&[crate::model::AppInstanceStreamingConfiguration]> {
        self.app_instance_streaming_configurations.as_deref()
    }
}
/// See [`GetAppInstanceStreamingConfigurationsOutput`](crate::output::GetAppInstanceStreamingConfigurationsOutput).
pub mod get_app_instance_streaming_configurations_output {

    /// A builder for [`GetAppInstanceStreamingConfigurationsOutput`](crate::output::GetAppInstanceStreamingConfigurationsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) app_instance_streaming_configurations:
            std::option::Option<std::vec::Vec<crate::model::AppInstanceStreamingConfiguration>>,
    }
    impl Builder {
        /// Appends an item to `app_instance_streaming_configurations`.
        ///
        /// To override the contents of this collection use [`set_app_instance_streaming_configurations`](Self::set_app_instance_streaming_configurations).
        ///
        /// <p>The streaming settings.</p>
        pub fn app_instance_streaming_configurations(
            mut self,
            input: crate::model::AppInstanceStreamingConfiguration,
        ) -> Self {
            let mut v = self
                .app_instance_streaming_configurations
                .unwrap_or_default();
            v.push(input);
            self.app_instance_streaming_configurations = Some(v);
            self
        }
        /// <p>The streaming settings.</p>
        pub fn set_app_instance_streaming_configurations(
            mut self,
            input: std::option::Option<
                std::vec::Vec<crate::model::AppInstanceStreamingConfiguration>,
            >,
        ) -> Self {
            self.app_instance_streaming_configurations = input;
            self
        }
        /// Consumes the builder and constructs a [`GetAppInstanceStreamingConfigurationsOutput`](crate::output::GetAppInstanceStreamingConfigurationsOutput).
        pub fn build(self) -> crate::output::GetAppInstanceStreamingConfigurationsOutput {
            crate::output::GetAppInstanceStreamingConfigurationsOutput {
                app_instance_streaming_configurations: self.app_instance_streaming_configurations,
            }
        }
    }
}
impl GetAppInstanceStreamingConfigurationsOutput {
    /// Creates a new builder-style object to manufacture [`GetAppInstanceStreamingConfigurationsOutput`](crate::output::GetAppInstanceStreamingConfigurationsOutput).
    pub fn builder() -> crate::output::get_app_instance_streaming_configurations_output::Builder {
        crate::output::get_app_instance_streaming_configurations_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetAppInstanceRetentionSettingsOutput {
    /// <p>The retention settings for the <code>AppInstance</code>.</p>
    #[doc(hidden)]
    pub app_instance_retention_settings:
        std::option::Option<crate::model::AppInstanceRetentionSettings>,
    /// <p>The timestamp representing the time at which the specified items are retained, in Epoch Seconds.</p>
    #[doc(hidden)]
    pub initiate_deletion_timestamp: std::option::Option<aws_smithy_types::DateTime>,
}
impl GetAppInstanceRetentionSettingsOutput {
    /// <p>The retention settings for the <code>AppInstance</code>.</p>
    pub fn app_instance_retention_settings(
        &self,
    ) -> std::option::Option<&crate::model::AppInstanceRetentionSettings> {
        self.app_instance_retention_settings.as_ref()
    }
    /// <p>The timestamp representing the time at which the specified items are retained, in Epoch Seconds.</p>
    pub fn initiate_deletion_timestamp(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.initiate_deletion_timestamp.as_ref()
    }
}
/// See [`GetAppInstanceRetentionSettingsOutput`](crate::output::GetAppInstanceRetentionSettingsOutput).
pub mod get_app_instance_retention_settings_output {

    /// A builder for [`GetAppInstanceRetentionSettingsOutput`](crate::output::GetAppInstanceRetentionSettingsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) app_instance_retention_settings:
            std::option::Option<crate::model::AppInstanceRetentionSettings>,
        pub(crate) initiate_deletion_timestamp: std::option::Option<aws_smithy_types::DateTime>,
    }
    impl Builder {
        /// <p>The retention settings for the <code>AppInstance</code>.</p>
        pub fn app_instance_retention_settings(
            mut self,
            input: crate::model::AppInstanceRetentionSettings,
        ) -> Self {
            self.app_instance_retention_settings = Some(input);
            self
        }
        /// <p>The retention settings for the <code>AppInstance</code>.</p>
        pub fn set_app_instance_retention_settings(
            mut self,
            input: std::option::Option<crate::model::AppInstanceRetentionSettings>,
        ) -> Self {
            self.app_instance_retention_settings = input;
            self
        }
        /// <p>The timestamp representing the time at which the specified items are retained, in Epoch Seconds.</p>
        pub fn initiate_deletion_timestamp(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.initiate_deletion_timestamp = Some(input);
            self
        }
        /// <p>The timestamp representing the time at which the specified items are retained, in Epoch Seconds.</p>
        pub fn set_initiate_deletion_timestamp(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.initiate_deletion_timestamp = input;
            self
        }
        /// Consumes the builder and constructs a [`GetAppInstanceRetentionSettingsOutput`](crate::output::GetAppInstanceRetentionSettingsOutput).
        pub fn build(self) -> crate::output::GetAppInstanceRetentionSettingsOutput {
            crate::output::GetAppInstanceRetentionSettingsOutput {
                app_instance_retention_settings: self.app_instance_retention_settings,
                initiate_deletion_timestamp: self.initiate_deletion_timestamp,
            }
        }
    }
}
impl GetAppInstanceRetentionSettingsOutput {
    /// Creates a new builder-style object to manufacture [`GetAppInstanceRetentionSettingsOutput`](crate::output::GetAppInstanceRetentionSettingsOutput).
    pub fn builder() -> crate::output::get_app_instance_retention_settings_output::Builder {
        crate::output::get_app_instance_retention_settings_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetAccountSettingsOutput {
    /// <p>The Amazon Chime account settings.</p>
    #[doc(hidden)]
    pub account_settings: std::option::Option<crate::model::AccountSettings>,
}
impl GetAccountSettingsOutput {
    /// <p>The Amazon Chime account settings.</p>
    pub fn account_settings(&self) -> std::option::Option<&crate::model::AccountSettings> {
        self.account_settings.as_ref()
    }
}
/// See [`GetAccountSettingsOutput`](crate::output::GetAccountSettingsOutput).
pub mod get_account_settings_output {

    /// A builder for [`GetAccountSettingsOutput`](crate::output::GetAccountSettingsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) account_settings: std::option::Option<crate::model::AccountSettings>,
    }
    impl Builder {
        /// <p>The Amazon Chime account settings.</p>
        pub fn account_settings(mut self, input: crate::model::AccountSettings) -> Self {
            self.account_settings = Some(input);
            self
        }
        /// <p>The Amazon Chime account settings.</p>
        pub fn set_account_settings(
            mut self,
            input: std::option::Option<crate::model::AccountSettings>,
        ) -> Self {
            self.account_settings = input;
            self
        }
        /// Consumes the builder and constructs a [`GetAccountSettingsOutput`](crate::output::GetAccountSettingsOutput).
        pub fn build(self) -> crate::output::GetAccountSettingsOutput {
            crate::output::GetAccountSettingsOutput {
                account_settings: self.account_settings,
            }
        }
    }
}
impl GetAccountSettingsOutput {
    /// Creates a new builder-style object to manufacture [`GetAccountSettingsOutput`](crate::output::GetAccountSettingsOutput).
    pub fn builder() -> crate::output::get_account_settings_output::Builder {
        crate::output::get_account_settings_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetAccountOutput {
    /// <p>The Amazon Chime account details.</p>
    #[doc(hidden)]
    pub account: std::option::Option<crate::model::Account>,
}
impl GetAccountOutput {
    /// <p>The Amazon Chime account details.</p>
    pub fn account(&self) -> std::option::Option<&crate::model::Account> {
        self.account.as_ref()
    }
}
/// See [`GetAccountOutput`](crate::output::GetAccountOutput).
pub mod get_account_output {

    /// A builder for [`GetAccountOutput`](crate::output::GetAccountOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) account: std::option::Option<crate::model::Account>,
    }
    impl Builder {
        /// <p>The Amazon Chime account details.</p>
        pub fn account(mut self, input: crate::model::Account) -> Self {
            self.account = Some(input);
            self
        }
        /// <p>The Amazon Chime account details.</p>
        pub fn set_account(mut self, input: std::option::Option<crate::model::Account>) -> Self {
            self.account = input;
            self
        }
        /// Consumes the builder and constructs a [`GetAccountOutput`](crate::output::GetAccountOutput).
        pub fn build(self) -> crate::output::GetAccountOutput {
            crate::output::GetAccountOutput {
                account: self.account,
            }
        }
    }
}
impl GetAccountOutput {
    /// Creates a new builder-style object to manufacture [`GetAccountOutput`](crate::output::GetAccountOutput).
    pub fn builder() -> crate::output::get_account_output::Builder {
        crate::output::get_account_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DisassociateSigninDelegateGroupsFromAccountOutput {}
/// See [`DisassociateSigninDelegateGroupsFromAccountOutput`](crate::output::DisassociateSigninDelegateGroupsFromAccountOutput).
pub mod disassociate_signin_delegate_groups_from_account_output {

    /// A builder for [`DisassociateSigninDelegateGroupsFromAccountOutput`](crate::output::DisassociateSigninDelegateGroupsFromAccountOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DisassociateSigninDelegateGroupsFromAccountOutput`](crate::output::DisassociateSigninDelegateGroupsFromAccountOutput).
        pub fn build(self) -> crate::output::DisassociateSigninDelegateGroupsFromAccountOutput {
            crate::output::DisassociateSigninDelegateGroupsFromAccountOutput {}
        }
    }
}
impl DisassociateSigninDelegateGroupsFromAccountOutput {
    /// Creates a new builder-style object to manufacture [`DisassociateSigninDelegateGroupsFromAccountOutput`](crate::output::DisassociateSigninDelegateGroupsFromAccountOutput).
    pub fn builder(
    ) -> crate::output::disassociate_signin_delegate_groups_from_account_output::Builder {
        crate::output::disassociate_signin_delegate_groups_from_account_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DisassociatePhoneNumbersFromVoiceConnectorGroupOutput {
    /// <p>If the action fails for one or more of the phone numbers in the request, a list of the phone numbers is returned, along with error codes and error messages.</p>
    #[doc(hidden)]
    pub phone_number_errors: std::option::Option<std::vec::Vec<crate::model::PhoneNumberError>>,
}
impl DisassociatePhoneNumbersFromVoiceConnectorGroupOutput {
    /// <p>If the action fails for one or more of the phone numbers in the request, a list of the phone numbers is returned, along with error codes and error messages.</p>
    pub fn phone_number_errors(&self) -> std::option::Option<&[crate::model::PhoneNumberError]> {
        self.phone_number_errors.as_deref()
    }
}
/// See [`DisassociatePhoneNumbersFromVoiceConnectorGroupOutput`](crate::output::DisassociatePhoneNumbersFromVoiceConnectorGroupOutput).
pub mod disassociate_phone_numbers_from_voice_connector_group_output {

    /// A builder for [`DisassociatePhoneNumbersFromVoiceConnectorGroupOutput`](crate::output::DisassociatePhoneNumbersFromVoiceConnectorGroupOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) phone_number_errors:
            std::option::Option<std::vec::Vec<crate::model::PhoneNumberError>>,
    }
    impl Builder {
        /// Appends an item to `phone_number_errors`.
        ///
        /// To override the contents of this collection use [`set_phone_number_errors`](Self::set_phone_number_errors).
        ///
        /// <p>If the action fails for one or more of the phone numbers in the request, a list of the phone numbers is returned, along with error codes and error messages.</p>
        pub fn phone_number_errors(mut self, input: crate::model::PhoneNumberError) -> Self {
            let mut v = self.phone_number_errors.unwrap_or_default();
            v.push(input);
            self.phone_number_errors = Some(v);
            self
        }
        /// <p>If the action fails for one or more of the phone numbers in the request, a list of the phone numbers is returned, along with error codes and error messages.</p>
        pub fn set_phone_number_errors(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::PhoneNumberError>>,
        ) -> Self {
            self.phone_number_errors = input;
            self
        }
        /// Consumes the builder and constructs a [`DisassociatePhoneNumbersFromVoiceConnectorGroupOutput`](crate::output::DisassociatePhoneNumbersFromVoiceConnectorGroupOutput).
        pub fn build(self) -> crate::output::DisassociatePhoneNumbersFromVoiceConnectorGroupOutput {
            crate::output::DisassociatePhoneNumbersFromVoiceConnectorGroupOutput {
                phone_number_errors: self.phone_number_errors,
            }
        }
    }
}
impl DisassociatePhoneNumbersFromVoiceConnectorGroupOutput {
    /// Creates a new builder-style object to manufacture [`DisassociatePhoneNumbersFromVoiceConnectorGroupOutput`](crate::output::DisassociatePhoneNumbersFromVoiceConnectorGroupOutput).
    pub fn builder(
    ) -> crate::output::disassociate_phone_numbers_from_voice_connector_group_output::Builder {
        crate::output::disassociate_phone_numbers_from_voice_connector_group_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DisassociatePhoneNumbersFromVoiceConnectorOutput {
    /// <p>If the action fails for one or more of the phone numbers in the request, a list of the phone numbers is returned, along with error codes and error messages.</p>
    #[doc(hidden)]
    pub phone_number_errors: std::option::Option<std::vec::Vec<crate::model::PhoneNumberError>>,
}
impl DisassociatePhoneNumbersFromVoiceConnectorOutput {
    /// <p>If the action fails for one or more of the phone numbers in the request, a list of the phone numbers is returned, along with error codes and error messages.</p>
    pub fn phone_number_errors(&self) -> std::option::Option<&[crate::model::PhoneNumberError]> {
        self.phone_number_errors.as_deref()
    }
}
/// See [`DisassociatePhoneNumbersFromVoiceConnectorOutput`](crate::output::DisassociatePhoneNumbersFromVoiceConnectorOutput).
pub mod disassociate_phone_numbers_from_voice_connector_output {

    /// A builder for [`DisassociatePhoneNumbersFromVoiceConnectorOutput`](crate::output::DisassociatePhoneNumbersFromVoiceConnectorOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) phone_number_errors:
            std::option::Option<std::vec::Vec<crate::model::PhoneNumberError>>,
    }
    impl Builder {
        /// Appends an item to `phone_number_errors`.
        ///
        /// To override the contents of this collection use [`set_phone_number_errors`](Self::set_phone_number_errors).
        ///
        /// <p>If the action fails for one or more of the phone numbers in the request, a list of the phone numbers is returned, along with error codes and error messages.</p>
        pub fn phone_number_errors(mut self, input: crate::model::PhoneNumberError) -> Self {
            let mut v = self.phone_number_errors.unwrap_or_default();
            v.push(input);
            self.phone_number_errors = Some(v);
            self
        }
        /// <p>If the action fails for one or more of the phone numbers in the request, a list of the phone numbers is returned, along with error codes and error messages.</p>
        pub fn set_phone_number_errors(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::PhoneNumberError>>,
        ) -> Self {
            self.phone_number_errors = input;
            self
        }
        /// Consumes the builder and constructs a [`DisassociatePhoneNumbersFromVoiceConnectorOutput`](crate::output::DisassociatePhoneNumbersFromVoiceConnectorOutput).
        pub fn build(self) -> crate::output::DisassociatePhoneNumbersFromVoiceConnectorOutput {
            crate::output::DisassociatePhoneNumbersFromVoiceConnectorOutput {
                phone_number_errors: self.phone_number_errors,
            }
        }
    }
}
impl DisassociatePhoneNumbersFromVoiceConnectorOutput {
    /// Creates a new builder-style object to manufacture [`DisassociatePhoneNumbersFromVoiceConnectorOutput`](crate::output::DisassociatePhoneNumbersFromVoiceConnectorOutput).
    pub fn builder(
    ) -> crate::output::disassociate_phone_numbers_from_voice_connector_output::Builder {
        crate::output::disassociate_phone_numbers_from_voice_connector_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DisassociatePhoneNumberFromUserOutput {}
/// See [`DisassociatePhoneNumberFromUserOutput`](crate::output::DisassociatePhoneNumberFromUserOutput).
pub mod disassociate_phone_number_from_user_output {

    /// A builder for [`DisassociatePhoneNumberFromUserOutput`](crate::output::DisassociatePhoneNumberFromUserOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DisassociatePhoneNumberFromUserOutput`](crate::output::DisassociatePhoneNumberFromUserOutput).
        pub fn build(self) -> crate::output::DisassociatePhoneNumberFromUserOutput {
            crate::output::DisassociatePhoneNumberFromUserOutput {}
        }
    }
}
impl DisassociatePhoneNumberFromUserOutput {
    /// Creates a new builder-style object to manufacture [`DisassociatePhoneNumberFromUserOutput`](crate::output::DisassociatePhoneNumberFromUserOutput).
    pub fn builder() -> crate::output::disassociate_phone_number_from_user_output::Builder {
        crate::output::disassociate_phone_number_from_user_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeChannelModeratorOutput {
    /// <p>The details of the channel moderator.</p>
    #[doc(hidden)]
    pub channel_moderator: std::option::Option<crate::model::ChannelModerator>,
}
impl DescribeChannelModeratorOutput {
    /// <p>The details of the channel moderator.</p>
    pub fn channel_moderator(&self) -> std::option::Option<&crate::model::ChannelModerator> {
        self.channel_moderator.as_ref()
    }
}
/// See [`DescribeChannelModeratorOutput`](crate::output::DescribeChannelModeratorOutput).
pub mod describe_channel_moderator_output {

    /// A builder for [`DescribeChannelModeratorOutput`](crate::output::DescribeChannelModeratorOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) channel_moderator: std::option::Option<crate::model::ChannelModerator>,
    }
    impl Builder {
        /// <p>The details of the channel moderator.</p>
        pub fn channel_moderator(mut self, input: crate::model::ChannelModerator) -> Self {
            self.channel_moderator = Some(input);
            self
        }
        /// <p>The details of the channel moderator.</p>
        pub fn set_channel_moderator(
            mut self,
            input: std::option::Option<crate::model::ChannelModerator>,
        ) -> Self {
            self.channel_moderator = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeChannelModeratorOutput`](crate::output::DescribeChannelModeratorOutput).
        pub fn build(self) -> crate::output::DescribeChannelModeratorOutput {
            crate::output::DescribeChannelModeratorOutput {
                channel_moderator: self.channel_moderator,
            }
        }
    }
}
impl DescribeChannelModeratorOutput {
    /// Creates a new builder-style object to manufacture [`DescribeChannelModeratorOutput`](crate::output::DescribeChannelModeratorOutput).
    pub fn builder() -> crate::output::describe_channel_moderator_output::Builder {
        crate::output::describe_channel_moderator_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeChannelModeratedByAppInstanceUserOutput {
    /// <p>The moderated channel.</p>
    #[doc(hidden)]
    pub channel: std::option::Option<crate::model::ChannelModeratedByAppInstanceUserSummary>,
}
impl DescribeChannelModeratedByAppInstanceUserOutput {
    /// <p>The moderated channel.</p>
    pub fn channel(
        &self,
    ) -> std::option::Option<&crate::model::ChannelModeratedByAppInstanceUserSummary> {
        self.channel.as_ref()
    }
}
/// See [`DescribeChannelModeratedByAppInstanceUserOutput`](crate::output::DescribeChannelModeratedByAppInstanceUserOutput).
pub mod describe_channel_moderated_by_app_instance_user_output {

    /// A builder for [`DescribeChannelModeratedByAppInstanceUserOutput`](crate::output::DescribeChannelModeratedByAppInstanceUserOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) channel:
            std::option::Option<crate::model::ChannelModeratedByAppInstanceUserSummary>,
    }
    impl Builder {
        /// <p>The moderated channel.</p>
        pub fn channel(
            mut self,
            input: crate::model::ChannelModeratedByAppInstanceUserSummary,
        ) -> Self {
            self.channel = Some(input);
            self
        }
        /// <p>The moderated channel.</p>
        pub fn set_channel(
            mut self,
            input: std::option::Option<crate::model::ChannelModeratedByAppInstanceUserSummary>,
        ) -> Self {
            self.channel = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeChannelModeratedByAppInstanceUserOutput`](crate::output::DescribeChannelModeratedByAppInstanceUserOutput).
        pub fn build(self) -> crate::output::DescribeChannelModeratedByAppInstanceUserOutput {
            crate::output::DescribeChannelModeratedByAppInstanceUserOutput {
                channel: self.channel,
            }
        }
    }
}
impl DescribeChannelModeratedByAppInstanceUserOutput {
    /// Creates a new builder-style object to manufacture [`DescribeChannelModeratedByAppInstanceUserOutput`](crate::output::DescribeChannelModeratedByAppInstanceUserOutput).
    pub fn builder(
    ) -> crate::output::describe_channel_moderated_by_app_instance_user_output::Builder {
        crate::output::describe_channel_moderated_by_app_instance_user_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeChannelMembershipForAppInstanceUserOutput {
    /// <p>The channel to which a user belongs.</p>
    #[doc(hidden)]
    pub channel_membership:
        std::option::Option<crate::model::ChannelMembershipForAppInstanceUserSummary>,
}
impl DescribeChannelMembershipForAppInstanceUserOutput {
    /// <p>The channel to which a user belongs.</p>
    pub fn channel_membership(
        &self,
    ) -> std::option::Option<&crate::model::ChannelMembershipForAppInstanceUserSummary> {
        self.channel_membership.as_ref()
    }
}
/// See [`DescribeChannelMembershipForAppInstanceUserOutput`](crate::output::DescribeChannelMembershipForAppInstanceUserOutput).
pub mod describe_channel_membership_for_app_instance_user_output {

    /// A builder for [`DescribeChannelMembershipForAppInstanceUserOutput`](crate::output::DescribeChannelMembershipForAppInstanceUserOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) channel_membership:
            std::option::Option<crate::model::ChannelMembershipForAppInstanceUserSummary>,
    }
    impl Builder {
        /// <p>The channel to which a user belongs.</p>
        pub fn channel_membership(
            mut self,
            input: crate::model::ChannelMembershipForAppInstanceUserSummary,
        ) -> Self {
            self.channel_membership = Some(input);
            self
        }
        /// <p>The channel to which a user belongs.</p>
        pub fn set_channel_membership(
            mut self,
            input: std::option::Option<crate::model::ChannelMembershipForAppInstanceUserSummary>,
        ) -> Self {
            self.channel_membership = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeChannelMembershipForAppInstanceUserOutput`](crate::output::DescribeChannelMembershipForAppInstanceUserOutput).
        pub fn build(self) -> crate::output::DescribeChannelMembershipForAppInstanceUserOutput {
            crate::output::DescribeChannelMembershipForAppInstanceUserOutput {
                channel_membership: self.channel_membership,
            }
        }
    }
}
impl DescribeChannelMembershipForAppInstanceUserOutput {
    /// Creates a new builder-style object to manufacture [`DescribeChannelMembershipForAppInstanceUserOutput`](crate::output::DescribeChannelMembershipForAppInstanceUserOutput).
    pub fn builder(
    ) -> crate::output::describe_channel_membership_for_app_instance_user_output::Builder {
        crate::output::describe_channel_membership_for_app_instance_user_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeChannelMembershipOutput {
    /// <p>The details of the membership.</p>
    #[doc(hidden)]
    pub channel_membership: std::option::Option<crate::model::ChannelMembership>,
}
impl DescribeChannelMembershipOutput {
    /// <p>The details of the membership.</p>
    pub fn channel_membership(&self) -> std::option::Option<&crate::model::ChannelMembership> {
        self.channel_membership.as_ref()
    }
}
/// See [`DescribeChannelMembershipOutput`](crate::output::DescribeChannelMembershipOutput).
pub mod describe_channel_membership_output {

    /// A builder for [`DescribeChannelMembershipOutput`](crate::output::DescribeChannelMembershipOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) channel_membership: std::option::Option<crate::model::ChannelMembership>,
    }
    impl Builder {
        /// <p>The details of the membership.</p>
        pub fn channel_membership(mut self, input: crate::model::ChannelMembership) -> Self {
            self.channel_membership = Some(input);
            self
        }
        /// <p>The details of the membership.</p>
        pub fn set_channel_membership(
            mut self,
            input: std::option::Option<crate::model::ChannelMembership>,
        ) -> Self {
            self.channel_membership = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeChannelMembershipOutput`](crate::output::DescribeChannelMembershipOutput).
        pub fn build(self) -> crate::output::DescribeChannelMembershipOutput {
            crate::output::DescribeChannelMembershipOutput {
                channel_membership: self.channel_membership,
            }
        }
    }
}
impl DescribeChannelMembershipOutput {
    /// Creates a new builder-style object to manufacture [`DescribeChannelMembershipOutput`](crate::output::DescribeChannelMembershipOutput).
    pub fn builder() -> crate::output::describe_channel_membership_output::Builder {
        crate::output::describe_channel_membership_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeChannelBanOutput {
    /// <p>The details of the ban.</p>
    #[doc(hidden)]
    pub channel_ban: std::option::Option<crate::model::ChannelBan>,
}
impl DescribeChannelBanOutput {
    /// <p>The details of the ban.</p>
    pub fn channel_ban(&self) -> std::option::Option<&crate::model::ChannelBan> {
        self.channel_ban.as_ref()
    }
}
/// See [`DescribeChannelBanOutput`](crate::output::DescribeChannelBanOutput).
pub mod describe_channel_ban_output {

    /// A builder for [`DescribeChannelBanOutput`](crate::output::DescribeChannelBanOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) channel_ban: std::option::Option<crate::model::ChannelBan>,
    }
    impl Builder {
        /// <p>The details of the ban.</p>
        pub fn channel_ban(mut self, input: crate::model::ChannelBan) -> Self {
            self.channel_ban = Some(input);
            self
        }
        /// <p>The details of the ban.</p>
        pub fn set_channel_ban(
            mut self,
            input: std::option::Option<crate::model::ChannelBan>,
        ) -> Self {
            self.channel_ban = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeChannelBanOutput`](crate::output::DescribeChannelBanOutput).
        pub fn build(self) -> crate::output::DescribeChannelBanOutput {
            crate::output::DescribeChannelBanOutput {
                channel_ban: self.channel_ban,
            }
        }
    }
}
impl DescribeChannelBanOutput {
    /// Creates a new builder-style object to manufacture [`DescribeChannelBanOutput`](crate::output::DescribeChannelBanOutput).
    pub fn builder() -> crate::output::describe_channel_ban_output::Builder {
        crate::output::describe_channel_ban_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeChannelOutput {
    /// <p>The channel details.</p>
    #[doc(hidden)]
    pub channel: std::option::Option<crate::model::Channel>,
}
impl DescribeChannelOutput {
    /// <p>The channel details.</p>
    pub fn channel(&self) -> std::option::Option<&crate::model::Channel> {
        self.channel.as_ref()
    }
}
/// See [`DescribeChannelOutput`](crate::output::DescribeChannelOutput).
pub mod describe_channel_output {

    /// A builder for [`DescribeChannelOutput`](crate::output::DescribeChannelOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) channel: std::option::Option<crate::model::Channel>,
    }
    impl Builder {
        /// <p>The channel details.</p>
        pub fn channel(mut self, input: crate::model::Channel) -> Self {
            self.channel = Some(input);
            self
        }
        /// <p>The channel details.</p>
        pub fn set_channel(mut self, input: std::option::Option<crate::model::Channel>) -> Self {
            self.channel = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeChannelOutput`](crate::output::DescribeChannelOutput).
        pub fn build(self) -> crate::output::DescribeChannelOutput {
            crate::output::DescribeChannelOutput {
                channel: self.channel,
            }
        }
    }
}
impl DescribeChannelOutput {
    /// Creates a new builder-style object to manufacture [`DescribeChannelOutput`](crate::output::DescribeChannelOutput).
    pub fn builder() -> crate::output::describe_channel_output::Builder {
        crate::output::describe_channel_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeAppInstanceUserOutput {
    /// <p>The name of the <code>AppInstanceUser</code>.</p>
    #[doc(hidden)]
    pub app_instance_user: std::option::Option<crate::model::AppInstanceUser>,
}
impl DescribeAppInstanceUserOutput {
    /// <p>The name of the <code>AppInstanceUser</code>.</p>
    pub fn app_instance_user(&self) -> std::option::Option<&crate::model::AppInstanceUser> {
        self.app_instance_user.as_ref()
    }
}
/// See [`DescribeAppInstanceUserOutput`](crate::output::DescribeAppInstanceUserOutput).
pub mod describe_app_instance_user_output {

    /// A builder for [`DescribeAppInstanceUserOutput`](crate::output::DescribeAppInstanceUserOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) app_instance_user: std::option::Option<crate::model::AppInstanceUser>,
    }
    impl Builder {
        /// <p>The name of the <code>AppInstanceUser</code>.</p>
        pub fn app_instance_user(mut self, input: crate::model::AppInstanceUser) -> Self {
            self.app_instance_user = Some(input);
            self
        }
        /// <p>The name of the <code>AppInstanceUser</code>.</p>
        pub fn set_app_instance_user(
            mut self,
            input: std::option::Option<crate::model::AppInstanceUser>,
        ) -> Self {
            self.app_instance_user = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeAppInstanceUserOutput`](crate::output::DescribeAppInstanceUserOutput).
        pub fn build(self) -> crate::output::DescribeAppInstanceUserOutput {
            crate::output::DescribeAppInstanceUserOutput {
                app_instance_user: self.app_instance_user,
            }
        }
    }
}
impl DescribeAppInstanceUserOutput {
    /// Creates a new builder-style object to manufacture [`DescribeAppInstanceUserOutput`](crate::output::DescribeAppInstanceUserOutput).
    pub fn builder() -> crate::output::describe_app_instance_user_output::Builder {
        crate::output::describe_app_instance_user_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeAppInstanceAdminOutput {
    /// <p>The ARN and name of the <code>AppInstanceUser</code>, the ARN of the <code>AppInstance</code>, and the created and last-updated timestamps. All timestamps use epoch milliseconds.</p>
    #[doc(hidden)]
    pub app_instance_admin: std::option::Option<crate::model::AppInstanceAdmin>,
}
impl DescribeAppInstanceAdminOutput {
    /// <p>The ARN and name of the <code>AppInstanceUser</code>, the ARN of the <code>AppInstance</code>, and the created and last-updated timestamps. All timestamps use epoch milliseconds.</p>
    pub fn app_instance_admin(&self) -> std::option::Option<&crate::model::AppInstanceAdmin> {
        self.app_instance_admin.as_ref()
    }
}
/// See [`DescribeAppInstanceAdminOutput`](crate::output::DescribeAppInstanceAdminOutput).
pub mod describe_app_instance_admin_output {

    /// A builder for [`DescribeAppInstanceAdminOutput`](crate::output::DescribeAppInstanceAdminOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) app_instance_admin: std::option::Option<crate::model::AppInstanceAdmin>,
    }
    impl Builder {
        /// <p>The ARN and name of the <code>AppInstanceUser</code>, the ARN of the <code>AppInstance</code>, and the created and last-updated timestamps. All timestamps use epoch milliseconds.</p>
        pub fn app_instance_admin(mut self, input: crate::model::AppInstanceAdmin) -> Self {
            self.app_instance_admin = Some(input);
            self
        }
        /// <p>The ARN and name of the <code>AppInstanceUser</code>, the ARN of the <code>AppInstance</code>, and the created and last-updated timestamps. All timestamps use epoch milliseconds.</p>
        pub fn set_app_instance_admin(
            mut self,
            input: std::option::Option<crate::model::AppInstanceAdmin>,
        ) -> Self {
            self.app_instance_admin = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeAppInstanceAdminOutput`](crate::output::DescribeAppInstanceAdminOutput).
        pub fn build(self) -> crate::output::DescribeAppInstanceAdminOutput {
            crate::output::DescribeAppInstanceAdminOutput {
                app_instance_admin: self.app_instance_admin,
            }
        }
    }
}
impl DescribeAppInstanceAdminOutput {
    /// Creates a new builder-style object to manufacture [`DescribeAppInstanceAdminOutput`](crate::output::DescribeAppInstanceAdminOutput).
    pub fn builder() -> crate::output::describe_app_instance_admin_output::Builder {
        crate::output::describe_app_instance_admin_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeAppInstanceOutput {
    /// <p>The ARN, metadata, created and last-updated timestamps, and the name of the <code>AppInstance</code>. All timestamps use epoch milliseconds.</p>
    #[doc(hidden)]
    pub app_instance: std::option::Option<crate::model::AppInstance>,
}
impl DescribeAppInstanceOutput {
    /// <p>The ARN, metadata, created and last-updated timestamps, and the name of the <code>AppInstance</code>. All timestamps use epoch milliseconds.</p>
    pub fn app_instance(&self) -> std::option::Option<&crate::model::AppInstance> {
        self.app_instance.as_ref()
    }
}
/// See [`DescribeAppInstanceOutput`](crate::output::DescribeAppInstanceOutput).
pub mod describe_app_instance_output {

    /// A builder for [`DescribeAppInstanceOutput`](crate::output::DescribeAppInstanceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) app_instance: std::option::Option<crate::model::AppInstance>,
    }
    impl Builder {
        /// <p>The ARN, metadata, created and last-updated timestamps, and the name of the <code>AppInstance</code>. All timestamps use epoch milliseconds.</p>
        pub fn app_instance(mut self, input: crate::model::AppInstance) -> Self {
            self.app_instance = Some(input);
            self
        }
        /// <p>The ARN, metadata, created and last-updated timestamps, and the name of the <code>AppInstance</code>. All timestamps use epoch milliseconds.</p>
        pub fn set_app_instance(
            mut self,
            input: std::option::Option<crate::model::AppInstance>,
        ) -> Self {
            self.app_instance = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeAppInstanceOutput`](crate::output::DescribeAppInstanceOutput).
        pub fn build(self) -> crate::output::DescribeAppInstanceOutput {
            crate::output::DescribeAppInstanceOutput {
                app_instance: self.app_instance,
            }
        }
    }
}
impl DescribeAppInstanceOutput {
    /// Creates a new builder-style object to manufacture [`DescribeAppInstanceOutput`](crate::output::DescribeAppInstanceOutput).
    pub fn builder() -> crate::output::describe_app_instance_output::Builder {
        crate::output::describe_app_instance_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteVoiceConnectorTerminationCredentialsOutput {}
/// See [`DeleteVoiceConnectorTerminationCredentialsOutput`](crate::output::DeleteVoiceConnectorTerminationCredentialsOutput).
pub mod delete_voice_connector_termination_credentials_output {

    /// A builder for [`DeleteVoiceConnectorTerminationCredentialsOutput`](crate::output::DeleteVoiceConnectorTerminationCredentialsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteVoiceConnectorTerminationCredentialsOutput`](crate::output::DeleteVoiceConnectorTerminationCredentialsOutput).
        pub fn build(self) -> crate::output::DeleteVoiceConnectorTerminationCredentialsOutput {
            crate::output::DeleteVoiceConnectorTerminationCredentialsOutput {}
        }
    }
}
impl DeleteVoiceConnectorTerminationCredentialsOutput {
    /// Creates a new builder-style object to manufacture [`DeleteVoiceConnectorTerminationCredentialsOutput`](crate::output::DeleteVoiceConnectorTerminationCredentialsOutput).
    pub fn builder() -> crate::output::delete_voice_connector_termination_credentials_output::Builder
    {
        crate::output::delete_voice_connector_termination_credentials_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteVoiceConnectorTerminationOutput {}
/// See [`DeleteVoiceConnectorTerminationOutput`](crate::output::DeleteVoiceConnectorTerminationOutput).
pub mod delete_voice_connector_termination_output {

    /// A builder for [`DeleteVoiceConnectorTerminationOutput`](crate::output::DeleteVoiceConnectorTerminationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteVoiceConnectorTerminationOutput`](crate::output::DeleteVoiceConnectorTerminationOutput).
        pub fn build(self) -> crate::output::DeleteVoiceConnectorTerminationOutput {
            crate::output::DeleteVoiceConnectorTerminationOutput {}
        }
    }
}
impl DeleteVoiceConnectorTerminationOutput {
    /// Creates a new builder-style object to manufacture [`DeleteVoiceConnectorTerminationOutput`](crate::output::DeleteVoiceConnectorTerminationOutput).
    pub fn builder() -> crate::output::delete_voice_connector_termination_output::Builder {
        crate::output::delete_voice_connector_termination_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteVoiceConnectorStreamingConfigurationOutput {}
/// See [`DeleteVoiceConnectorStreamingConfigurationOutput`](crate::output::DeleteVoiceConnectorStreamingConfigurationOutput).
pub mod delete_voice_connector_streaming_configuration_output {

    /// A builder for [`DeleteVoiceConnectorStreamingConfigurationOutput`](crate::output::DeleteVoiceConnectorStreamingConfigurationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteVoiceConnectorStreamingConfigurationOutput`](crate::output::DeleteVoiceConnectorStreamingConfigurationOutput).
        pub fn build(self) -> crate::output::DeleteVoiceConnectorStreamingConfigurationOutput {
            crate::output::DeleteVoiceConnectorStreamingConfigurationOutput {}
        }
    }
}
impl DeleteVoiceConnectorStreamingConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`DeleteVoiceConnectorStreamingConfigurationOutput`](crate::output::DeleteVoiceConnectorStreamingConfigurationOutput).
    pub fn builder() -> crate::output::delete_voice_connector_streaming_configuration_output::Builder
    {
        crate::output::delete_voice_connector_streaming_configuration_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteVoiceConnectorProxyOutput {}
/// See [`DeleteVoiceConnectorProxyOutput`](crate::output::DeleteVoiceConnectorProxyOutput).
pub mod delete_voice_connector_proxy_output {

    /// A builder for [`DeleteVoiceConnectorProxyOutput`](crate::output::DeleteVoiceConnectorProxyOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteVoiceConnectorProxyOutput`](crate::output::DeleteVoiceConnectorProxyOutput).
        pub fn build(self) -> crate::output::DeleteVoiceConnectorProxyOutput {
            crate::output::DeleteVoiceConnectorProxyOutput {}
        }
    }
}
impl DeleteVoiceConnectorProxyOutput {
    /// Creates a new builder-style object to manufacture [`DeleteVoiceConnectorProxyOutput`](crate::output::DeleteVoiceConnectorProxyOutput).
    pub fn builder() -> crate::output::delete_voice_connector_proxy_output::Builder {
        crate::output::delete_voice_connector_proxy_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteVoiceConnectorOriginationOutput {}
/// See [`DeleteVoiceConnectorOriginationOutput`](crate::output::DeleteVoiceConnectorOriginationOutput).
pub mod delete_voice_connector_origination_output {

    /// A builder for [`DeleteVoiceConnectorOriginationOutput`](crate::output::DeleteVoiceConnectorOriginationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteVoiceConnectorOriginationOutput`](crate::output::DeleteVoiceConnectorOriginationOutput).
        pub fn build(self) -> crate::output::DeleteVoiceConnectorOriginationOutput {
            crate::output::DeleteVoiceConnectorOriginationOutput {}
        }
    }
}
impl DeleteVoiceConnectorOriginationOutput {
    /// Creates a new builder-style object to manufacture [`DeleteVoiceConnectorOriginationOutput`](crate::output::DeleteVoiceConnectorOriginationOutput).
    pub fn builder() -> crate::output::delete_voice_connector_origination_output::Builder {
        crate::output::delete_voice_connector_origination_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteVoiceConnectorGroupOutput {}
/// See [`DeleteVoiceConnectorGroupOutput`](crate::output::DeleteVoiceConnectorGroupOutput).
pub mod delete_voice_connector_group_output {

    /// A builder for [`DeleteVoiceConnectorGroupOutput`](crate::output::DeleteVoiceConnectorGroupOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteVoiceConnectorGroupOutput`](crate::output::DeleteVoiceConnectorGroupOutput).
        pub fn build(self) -> crate::output::DeleteVoiceConnectorGroupOutput {
            crate::output::DeleteVoiceConnectorGroupOutput {}
        }
    }
}
impl DeleteVoiceConnectorGroupOutput {
    /// Creates a new builder-style object to manufacture [`DeleteVoiceConnectorGroupOutput`](crate::output::DeleteVoiceConnectorGroupOutput).
    pub fn builder() -> crate::output::delete_voice_connector_group_output::Builder {
        crate::output::delete_voice_connector_group_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteVoiceConnectorEmergencyCallingConfigurationOutput {}
/// See [`DeleteVoiceConnectorEmergencyCallingConfigurationOutput`](crate::output::DeleteVoiceConnectorEmergencyCallingConfigurationOutput).
pub mod delete_voice_connector_emergency_calling_configuration_output {

    /// A builder for [`DeleteVoiceConnectorEmergencyCallingConfigurationOutput`](crate::output::DeleteVoiceConnectorEmergencyCallingConfigurationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteVoiceConnectorEmergencyCallingConfigurationOutput`](crate::output::DeleteVoiceConnectorEmergencyCallingConfigurationOutput).
        pub fn build(
            self,
        ) -> crate::output::DeleteVoiceConnectorEmergencyCallingConfigurationOutput {
            crate::output::DeleteVoiceConnectorEmergencyCallingConfigurationOutput {}
        }
    }
}
impl DeleteVoiceConnectorEmergencyCallingConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`DeleteVoiceConnectorEmergencyCallingConfigurationOutput`](crate::output::DeleteVoiceConnectorEmergencyCallingConfigurationOutput).
    pub fn builder(
    ) -> crate::output::delete_voice_connector_emergency_calling_configuration_output::Builder {
        crate::output::delete_voice_connector_emergency_calling_configuration_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteVoiceConnectorOutput {}
/// See [`DeleteVoiceConnectorOutput`](crate::output::DeleteVoiceConnectorOutput).
pub mod delete_voice_connector_output {

    /// A builder for [`DeleteVoiceConnectorOutput`](crate::output::DeleteVoiceConnectorOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteVoiceConnectorOutput`](crate::output::DeleteVoiceConnectorOutput).
        pub fn build(self) -> crate::output::DeleteVoiceConnectorOutput {
            crate::output::DeleteVoiceConnectorOutput {}
        }
    }
}
impl DeleteVoiceConnectorOutput {
    /// Creates a new builder-style object to manufacture [`DeleteVoiceConnectorOutput`](crate::output::DeleteVoiceConnectorOutput).
    pub fn builder() -> crate::output::delete_voice_connector_output::Builder {
        crate::output::delete_voice_connector_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteSipRuleOutput {}
/// See [`DeleteSipRuleOutput`](crate::output::DeleteSipRuleOutput).
pub mod delete_sip_rule_output {

    /// A builder for [`DeleteSipRuleOutput`](crate::output::DeleteSipRuleOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteSipRuleOutput`](crate::output::DeleteSipRuleOutput).
        pub fn build(self) -> crate::output::DeleteSipRuleOutput {
            crate::output::DeleteSipRuleOutput {}
        }
    }
}
impl DeleteSipRuleOutput {
    /// Creates a new builder-style object to manufacture [`DeleteSipRuleOutput`](crate::output::DeleteSipRuleOutput).
    pub fn builder() -> crate::output::delete_sip_rule_output::Builder {
        crate::output::delete_sip_rule_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteSipMediaApplicationOutput {}
/// See [`DeleteSipMediaApplicationOutput`](crate::output::DeleteSipMediaApplicationOutput).
pub mod delete_sip_media_application_output {

    /// A builder for [`DeleteSipMediaApplicationOutput`](crate::output::DeleteSipMediaApplicationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteSipMediaApplicationOutput`](crate::output::DeleteSipMediaApplicationOutput).
        pub fn build(self) -> crate::output::DeleteSipMediaApplicationOutput {
            crate::output::DeleteSipMediaApplicationOutput {}
        }
    }
}
impl DeleteSipMediaApplicationOutput {
    /// Creates a new builder-style object to manufacture [`DeleteSipMediaApplicationOutput`](crate::output::DeleteSipMediaApplicationOutput).
    pub fn builder() -> crate::output::delete_sip_media_application_output::Builder {
        crate::output::delete_sip_media_application_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteRoomMembershipOutput {}
/// See [`DeleteRoomMembershipOutput`](crate::output::DeleteRoomMembershipOutput).
pub mod delete_room_membership_output {

    /// A builder for [`DeleteRoomMembershipOutput`](crate::output::DeleteRoomMembershipOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteRoomMembershipOutput`](crate::output::DeleteRoomMembershipOutput).
        pub fn build(self) -> crate::output::DeleteRoomMembershipOutput {
            crate::output::DeleteRoomMembershipOutput {}
        }
    }
}
impl DeleteRoomMembershipOutput {
    /// Creates a new builder-style object to manufacture [`DeleteRoomMembershipOutput`](crate::output::DeleteRoomMembershipOutput).
    pub fn builder() -> crate::output::delete_room_membership_output::Builder {
        crate::output::delete_room_membership_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteRoomOutput {}
/// See [`DeleteRoomOutput`](crate::output::DeleteRoomOutput).
pub mod delete_room_output {

    /// A builder for [`DeleteRoomOutput`](crate::output::DeleteRoomOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteRoomOutput`](crate::output::DeleteRoomOutput).
        pub fn build(self) -> crate::output::DeleteRoomOutput {
            crate::output::DeleteRoomOutput {}
        }
    }
}
impl DeleteRoomOutput {
    /// Creates a new builder-style object to manufacture [`DeleteRoomOutput`](crate::output::DeleteRoomOutput).
    pub fn builder() -> crate::output::delete_room_output::Builder {
        crate::output::delete_room_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteProxySessionOutput {}
/// See [`DeleteProxySessionOutput`](crate::output::DeleteProxySessionOutput).
pub mod delete_proxy_session_output {

    /// A builder for [`DeleteProxySessionOutput`](crate::output::DeleteProxySessionOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteProxySessionOutput`](crate::output::DeleteProxySessionOutput).
        pub fn build(self) -> crate::output::DeleteProxySessionOutput {
            crate::output::DeleteProxySessionOutput {}
        }
    }
}
impl DeleteProxySessionOutput {
    /// Creates a new builder-style object to manufacture [`DeleteProxySessionOutput`](crate::output::DeleteProxySessionOutput).
    pub fn builder() -> crate::output::delete_proxy_session_output::Builder {
        crate::output::delete_proxy_session_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeletePhoneNumberOutput {}
/// See [`DeletePhoneNumberOutput`](crate::output::DeletePhoneNumberOutput).
pub mod delete_phone_number_output {

    /// A builder for [`DeletePhoneNumberOutput`](crate::output::DeletePhoneNumberOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeletePhoneNumberOutput`](crate::output::DeletePhoneNumberOutput).
        pub fn build(self) -> crate::output::DeletePhoneNumberOutput {
            crate::output::DeletePhoneNumberOutput {}
        }
    }
}
impl DeletePhoneNumberOutput {
    /// Creates a new builder-style object to manufacture [`DeletePhoneNumberOutput`](crate::output::DeletePhoneNumberOutput).
    pub fn builder() -> crate::output::delete_phone_number_output::Builder {
        crate::output::delete_phone_number_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteMeetingOutput {}
/// See [`DeleteMeetingOutput`](crate::output::DeleteMeetingOutput).
pub mod delete_meeting_output {

    /// A builder for [`DeleteMeetingOutput`](crate::output::DeleteMeetingOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteMeetingOutput`](crate::output::DeleteMeetingOutput).
        pub fn build(self) -> crate::output::DeleteMeetingOutput {
            crate::output::DeleteMeetingOutput {}
        }
    }
}
impl DeleteMeetingOutput {
    /// Creates a new builder-style object to manufacture [`DeleteMeetingOutput`](crate::output::DeleteMeetingOutput).
    pub fn builder() -> crate::output::delete_meeting_output::Builder {
        crate::output::delete_meeting_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteMediaCapturePipelineOutput {}
/// See [`DeleteMediaCapturePipelineOutput`](crate::output::DeleteMediaCapturePipelineOutput).
pub mod delete_media_capture_pipeline_output {

    /// A builder for [`DeleteMediaCapturePipelineOutput`](crate::output::DeleteMediaCapturePipelineOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteMediaCapturePipelineOutput`](crate::output::DeleteMediaCapturePipelineOutput).
        pub fn build(self) -> crate::output::DeleteMediaCapturePipelineOutput {
            crate::output::DeleteMediaCapturePipelineOutput {}
        }
    }
}
impl DeleteMediaCapturePipelineOutput {
    /// Creates a new builder-style object to manufacture [`DeleteMediaCapturePipelineOutput`](crate::output::DeleteMediaCapturePipelineOutput).
    pub fn builder() -> crate::output::delete_media_capture_pipeline_output::Builder {
        crate::output::delete_media_capture_pipeline_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteEventsConfigurationOutput {}
/// See [`DeleteEventsConfigurationOutput`](crate::output::DeleteEventsConfigurationOutput).
pub mod delete_events_configuration_output {

    /// A builder for [`DeleteEventsConfigurationOutput`](crate::output::DeleteEventsConfigurationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteEventsConfigurationOutput`](crate::output::DeleteEventsConfigurationOutput).
        pub fn build(self) -> crate::output::DeleteEventsConfigurationOutput {
            crate::output::DeleteEventsConfigurationOutput {}
        }
    }
}
impl DeleteEventsConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`DeleteEventsConfigurationOutput`](crate::output::DeleteEventsConfigurationOutput).
    pub fn builder() -> crate::output::delete_events_configuration_output::Builder {
        crate::output::delete_events_configuration_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteChannelModeratorOutput {}
/// See [`DeleteChannelModeratorOutput`](crate::output::DeleteChannelModeratorOutput).
pub mod delete_channel_moderator_output {

    /// A builder for [`DeleteChannelModeratorOutput`](crate::output::DeleteChannelModeratorOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteChannelModeratorOutput`](crate::output::DeleteChannelModeratorOutput).
        pub fn build(self) -> crate::output::DeleteChannelModeratorOutput {
            crate::output::DeleteChannelModeratorOutput {}
        }
    }
}
impl DeleteChannelModeratorOutput {
    /// Creates a new builder-style object to manufacture [`DeleteChannelModeratorOutput`](crate::output::DeleteChannelModeratorOutput).
    pub fn builder() -> crate::output::delete_channel_moderator_output::Builder {
        crate::output::delete_channel_moderator_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteChannelMessageOutput {}
/// See [`DeleteChannelMessageOutput`](crate::output::DeleteChannelMessageOutput).
pub mod delete_channel_message_output {

    /// A builder for [`DeleteChannelMessageOutput`](crate::output::DeleteChannelMessageOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteChannelMessageOutput`](crate::output::DeleteChannelMessageOutput).
        pub fn build(self) -> crate::output::DeleteChannelMessageOutput {
            crate::output::DeleteChannelMessageOutput {}
        }
    }
}
impl DeleteChannelMessageOutput {
    /// Creates a new builder-style object to manufacture [`DeleteChannelMessageOutput`](crate::output::DeleteChannelMessageOutput).
    pub fn builder() -> crate::output::delete_channel_message_output::Builder {
        crate::output::delete_channel_message_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteChannelMembershipOutput {}
/// See [`DeleteChannelMembershipOutput`](crate::output::DeleteChannelMembershipOutput).
pub mod delete_channel_membership_output {

    /// A builder for [`DeleteChannelMembershipOutput`](crate::output::DeleteChannelMembershipOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteChannelMembershipOutput`](crate::output::DeleteChannelMembershipOutput).
        pub fn build(self) -> crate::output::DeleteChannelMembershipOutput {
            crate::output::DeleteChannelMembershipOutput {}
        }
    }
}
impl DeleteChannelMembershipOutput {
    /// Creates a new builder-style object to manufacture [`DeleteChannelMembershipOutput`](crate::output::DeleteChannelMembershipOutput).
    pub fn builder() -> crate::output::delete_channel_membership_output::Builder {
        crate::output::delete_channel_membership_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteChannelBanOutput {}
/// See [`DeleteChannelBanOutput`](crate::output::DeleteChannelBanOutput).
pub mod delete_channel_ban_output {

    /// A builder for [`DeleteChannelBanOutput`](crate::output::DeleteChannelBanOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteChannelBanOutput`](crate::output::DeleteChannelBanOutput).
        pub fn build(self) -> crate::output::DeleteChannelBanOutput {
            crate::output::DeleteChannelBanOutput {}
        }
    }
}
impl DeleteChannelBanOutput {
    /// Creates a new builder-style object to manufacture [`DeleteChannelBanOutput`](crate::output::DeleteChannelBanOutput).
    pub fn builder() -> crate::output::delete_channel_ban_output::Builder {
        crate::output::delete_channel_ban_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteChannelOutput {}
/// See [`DeleteChannelOutput`](crate::output::DeleteChannelOutput).
pub mod delete_channel_output {

    /// A builder for [`DeleteChannelOutput`](crate::output::DeleteChannelOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteChannelOutput`](crate::output::DeleteChannelOutput).
        pub fn build(self) -> crate::output::DeleteChannelOutput {
            crate::output::DeleteChannelOutput {}
        }
    }
}
impl DeleteChannelOutput {
    /// Creates a new builder-style object to manufacture [`DeleteChannelOutput`](crate::output::DeleteChannelOutput).
    pub fn builder() -> crate::output::delete_channel_output::Builder {
        crate::output::delete_channel_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteAttendeeOutput {}
/// See [`DeleteAttendeeOutput`](crate::output::DeleteAttendeeOutput).
pub mod delete_attendee_output {

    /// A builder for [`DeleteAttendeeOutput`](crate::output::DeleteAttendeeOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteAttendeeOutput`](crate::output::DeleteAttendeeOutput).
        pub fn build(self) -> crate::output::DeleteAttendeeOutput {
            crate::output::DeleteAttendeeOutput {}
        }
    }
}
impl DeleteAttendeeOutput {
    /// Creates a new builder-style object to manufacture [`DeleteAttendeeOutput`](crate::output::DeleteAttendeeOutput).
    pub fn builder() -> crate::output::delete_attendee_output::Builder {
        crate::output::delete_attendee_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteAppInstanceUserOutput {}
/// See [`DeleteAppInstanceUserOutput`](crate::output::DeleteAppInstanceUserOutput).
pub mod delete_app_instance_user_output {

    /// A builder for [`DeleteAppInstanceUserOutput`](crate::output::DeleteAppInstanceUserOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteAppInstanceUserOutput`](crate::output::DeleteAppInstanceUserOutput).
        pub fn build(self) -> crate::output::DeleteAppInstanceUserOutput {
            crate::output::DeleteAppInstanceUserOutput {}
        }
    }
}
impl DeleteAppInstanceUserOutput {
    /// Creates a new builder-style object to manufacture [`DeleteAppInstanceUserOutput`](crate::output::DeleteAppInstanceUserOutput).
    pub fn builder() -> crate::output::delete_app_instance_user_output::Builder {
        crate::output::delete_app_instance_user_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteAppInstanceStreamingConfigurationsOutput {}
/// See [`DeleteAppInstanceStreamingConfigurationsOutput`](crate::output::DeleteAppInstanceStreamingConfigurationsOutput).
pub mod delete_app_instance_streaming_configurations_output {

    /// A builder for [`DeleteAppInstanceStreamingConfigurationsOutput`](crate::output::DeleteAppInstanceStreamingConfigurationsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteAppInstanceStreamingConfigurationsOutput`](crate::output::DeleteAppInstanceStreamingConfigurationsOutput).
        pub fn build(self) -> crate::output::DeleteAppInstanceStreamingConfigurationsOutput {
            crate::output::DeleteAppInstanceStreamingConfigurationsOutput {}
        }
    }
}
impl DeleteAppInstanceStreamingConfigurationsOutput {
    /// Creates a new builder-style object to manufacture [`DeleteAppInstanceStreamingConfigurationsOutput`](crate::output::DeleteAppInstanceStreamingConfigurationsOutput).
    pub fn builder() -> crate::output::delete_app_instance_streaming_configurations_output::Builder
    {
        crate::output::delete_app_instance_streaming_configurations_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteAppInstanceAdminOutput {}
/// See [`DeleteAppInstanceAdminOutput`](crate::output::DeleteAppInstanceAdminOutput).
pub mod delete_app_instance_admin_output {

    /// A builder for [`DeleteAppInstanceAdminOutput`](crate::output::DeleteAppInstanceAdminOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteAppInstanceAdminOutput`](crate::output::DeleteAppInstanceAdminOutput).
        pub fn build(self) -> crate::output::DeleteAppInstanceAdminOutput {
            crate::output::DeleteAppInstanceAdminOutput {}
        }
    }
}
impl DeleteAppInstanceAdminOutput {
    /// Creates a new builder-style object to manufacture [`DeleteAppInstanceAdminOutput`](crate::output::DeleteAppInstanceAdminOutput).
    pub fn builder() -> crate::output::delete_app_instance_admin_output::Builder {
        crate::output::delete_app_instance_admin_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteAppInstanceOutput {}
/// See [`DeleteAppInstanceOutput`](crate::output::DeleteAppInstanceOutput).
pub mod delete_app_instance_output {

    /// A builder for [`DeleteAppInstanceOutput`](crate::output::DeleteAppInstanceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteAppInstanceOutput`](crate::output::DeleteAppInstanceOutput).
        pub fn build(self) -> crate::output::DeleteAppInstanceOutput {
            crate::output::DeleteAppInstanceOutput {}
        }
    }
}
impl DeleteAppInstanceOutput {
    /// Creates a new builder-style object to manufacture [`DeleteAppInstanceOutput`](crate::output::DeleteAppInstanceOutput).
    pub fn builder() -> crate::output::delete_app_instance_output::Builder {
        crate::output::delete_app_instance_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteAccountOutput {}
/// See [`DeleteAccountOutput`](crate::output::DeleteAccountOutput).
pub mod delete_account_output {

    /// A builder for [`DeleteAccountOutput`](crate::output::DeleteAccountOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteAccountOutput`](crate::output::DeleteAccountOutput).
        pub fn build(self) -> crate::output::DeleteAccountOutput {
            crate::output::DeleteAccountOutput {}
        }
    }
}
impl DeleteAccountOutput {
    /// Creates a new builder-style object to manufacture [`DeleteAccountOutput`](crate::output::DeleteAccountOutput).
    pub fn builder() -> crate::output::delete_account_output::Builder {
        crate::output::delete_account_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateVoiceConnectorGroupOutput {
    /// <p>The Amazon Chime Voice Connector group details.</p>
    #[doc(hidden)]
    pub voice_connector_group: std::option::Option<crate::model::VoiceConnectorGroup>,
}
impl CreateVoiceConnectorGroupOutput {
    /// <p>The Amazon Chime Voice Connector group details.</p>
    pub fn voice_connector_group(&self) -> std::option::Option<&crate::model::VoiceConnectorGroup> {
        self.voice_connector_group.as_ref()
    }
}
/// See [`CreateVoiceConnectorGroupOutput`](crate::output::CreateVoiceConnectorGroupOutput).
pub mod create_voice_connector_group_output {

    /// A builder for [`CreateVoiceConnectorGroupOutput`](crate::output::CreateVoiceConnectorGroupOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) voice_connector_group: std::option::Option<crate::model::VoiceConnectorGroup>,
    }
    impl Builder {
        /// <p>The Amazon Chime Voice Connector group details.</p>
        pub fn voice_connector_group(mut self, input: crate::model::VoiceConnectorGroup) -> Self {
            self.voice_connector_group = Some(input);
            self
        }
        /// <p>The Amazon Chime Voice Connector group details.</p>
        pub fn set_voice_connector_group(
            mut self,
            input: std::option::Option<crate::model::VoiceConnectorGroup>,
        ) -> Self {
            self.voice_connector_group = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateVoiceConnectorGroupOutput`](crate::output::CreateVoiceConnectorGroupOutput).
        pub fn build(self) -> crate::output::CreateVoiceConnectorGroupOutput {
            crate::output::CreateVoiceConnectorGroupOutput {
                voice_connector_group: self.voice_connector_group,
            }
        }
    }
}
impl CreateVoiceConnectorGroupOutput {
    /// Creates a new builder-style object to manufacture [`CreateVoiceConnectorGroupOutput`](crate::output::CreateVoiceConnectorGroupOutput).
    pub fn builder() -> crate::output::create_voice_connector_group_output::Builder {
        crate::output::create_voice_connector_group_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateVoiceConnectorOutput {
    /// <p>The Amazon Chime Voice Connector details.</p>
    #[doc(hidden)]
    pub voice_connector: std::option::Option<crate::model::VoiceConnector>,
}
impl CreateVoiceConnectorOutput {
    /// <p>The Amazon Chime Voice Connector details.</p>
    pub fn voice_connector(&self) -> std::option::Option<&crate::model::VoiceConnector> {
        self.voice_connector.as_ref()
    }
}
/// See [`CreateVoiceConnectorOutput`](crate::output::CreateVoiceConnectorOutput).
pub mod create_voice_connector_output {

    /// A builder for [`CreateVoiceConnectorOutput`](crate::output::CreateVoiceConnectorOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) voice_connector: std::option::Option<crate::model::VoiceConnector>,
    }
    impl Builder {
        /// <p>The Amazon Chime Voice Connector details.</p>
        pub fn voice_connector(mut self, input: crate::model::VoiceConnector) -> Self {
            self.voice_connector = Some(input);
            self
        }
        /// <p>The Amazon Chime Voice Connector details.</p>
        pub fn set_voice_connector(
            mut self,
            input: std::option::Option<crate::model::VoiceConnector>,
        ) -> Self {
            self.voice_connector = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateVoiceConnectorOutput`](crate::output::CreateVoiceConnectorOutput).
        pub fn build(self) -> crate::output::CreateVoiceConnectorOutput {
            crate::output::CreateVoiceConnectorOutput {
                voice_connector: self.voice_connector,
            }
        }
    }
}
impl CreateVoiceConnectorOutput {
    /// Creates a new builder-style object to manufacture [`CreateVoiceConnectorOutput`](crate::output::CreateVoiceConnectorOutput).
    pub fn builder() -> crate::output::create_voice_connector_output::Builder {
        crate::output::create_voice_connector_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateUserOutput {
    /// <p>The user on the Amazon Chime account.</p>
    #[doc(hidden)]
    pub user: std::option::Option<crate::model::User>,
}
impl CreateUserOutput {
    /// <p>The user on the Amazon Chime account.</p>
    pub fn user(&self) -> std::option::Option<&crate::model::User> {
        self.user.as_ref()
    }
}
/// See [`CreateUserOutput`](crate::output::CreateUserOutput).
pub mod create_user_output {

    /// A builder for [`CreateUserOutput`](crate::output::CreateUserOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) user: std::option::Option<crate::model::User>,
    }
    impl Builder {
        /// <p>The user on the Amazon Chime account.</p>
        pub fn user(mut self, input: crate::model::User) -> Self {
            self.user = Some(input);
            self
        }
        /// <p>The user on the Amazon Chime account.</p>
        pub fn set_user(mut self, input: std::option::Option<crate::model::User>) -> Self {
            self.user = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateUserOutput`](crate::output::CreateUserOutput).
        pub fn build(self) -> crate::output::CreateUserOutput {
            crate::output::CreateUserOutput { user: self.user }
        }
    }
}
impl CreateUserOutput {
    /// Creates a new builder-style object to manufacture [`CreateUserOutput`](crate::output::CreateUserOutput).
    pub fn builder() -> crate::output::create_user_output::Builder {
        crate::output::create_user_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateSipRuleOutput {
    /// <p>Returns the SIP rule information, including the rule ID, triggers, and target applications.</p>
    #[doc(hidden)]
    pub sip_rule: std::option::Option<crate::model::SipRule>,
}
impl CreateSipRuleOutput {
    /// <p>Returns the SIP rule information, including the rule ID, triggers, and target applications.</p>
    pub fn sip_rule(&self) -> std::option::Option<&crate::model::SipRule> {
        self.sip_rule.as_ref()
    }
}
/// See [`CreateSipRuleOutput`](crate::output::CreateSipRuleOutput).
pub mod create_sip_rule_output {

    /// A builder for [`CreateSipRuleOutput`](crate::output::CreateSipRuleOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) sip_rule: std::option::Option<crate::model::SipRule>,
    }
    impl Builder {
        /// <p>Returns the SIP rule information, including the rule ID, triggers, and target applications.</p>
        pub fn sip_rule(mut self, input: crate::model::SipRule) -> Self {
            self.sip_rule = Some(input);
            self
        }
        /// <p>Returns the SIP rule information, including the rule ID, triggers, and target applications.</p>
        pub fn set_sip_rule(mut self, input: std::option::Option<crate::model::SipRule>) -> Self {
            self.sip_rule = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateSipRuleOutput`](crate::output::CreateSipRuleOutput).
        pub fn build(self) -> crate::output::CreateSipRuleOutput {
            crate::output::CreateSipRuleOutput {
                sip_rule: self.sip_rule,
            }
        }
    }
}
impl CreateSipRuleOutput {
    /// Creates a new builder-style object to manufacture [`CreateSipRuleOutput`](crate::output::CreateSipRuleOutput).
    pub fn builder() -> crate::output::create_sip_rule_output::Builder {
        crate::output::create_sip_rule_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateSipMediaApplicationCallOutput {
    /// <p>The actual call.</p>
    #[doc(hidden)]
    pub sip_media_application_call: std::option::Option<crate::model::SipMediaApplicationCall>,
}
impl CreateSipMediaApplicationCallOutput {
    /// <p>The actual call.</p>
    pub fn sip_media_application_call(
        &self,
    ) -> std::option::Option<&crate::model::SipMediaApplicationCall> {
        self.sip_media_application_call.as_ref()
    }
}
/// See [`CreateSipMediaApplicationCallOutput`](crate::output::CreateSipMediaApplicationCallOutput).
pub mod create_sip_media_application_call_output {

    /// A builder for [`CreateSipMediaApplicationCallOutput`](crate::output::CreateSipMediaApplicationCallOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) sip_media_application_call:
            std::option::Option<crate::model::SipMediaApplicationCall>,
    }
    impl Builder {
        /// <p>The actual call.</p>
        pub fn sip_media_application_call(
            mut self,
            input: crate::model::SipMediaApplicationCall,
        ) -> Self {
            self.sip_media_application_call = Some(input);
            self
        }
        /// <p>The actual call.</p>
        pub fn set_sip_media_application_call(
            mut self,
            input: std::option::Option<crate::model::SipMediaApplicationCall>,
        ) -> Self {
            self.sip_media_application_call = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateSipMediaApplicationCallOutput`](crate::output::CreateSipMediaApplicationCallOutput).
        pub fn build(self) -> crate::output::CreateSipMediaApplicationCallOutput {
            crate::output::CreateSipMediaApplicationCallOutput {
                sip_media_application_call: self.sip_media_application_call,
            }
        }
    }
}
impl CreateSipMediaApplicationCallOutput {
    /// Creates a new builder-style object to manufacture [`CreateSipMediaApplicationCallOutput`](crate::output::CreateSipMediaApplicationCallOutput).
    pub fn builder() -> crate::output::create_sip_media_application_call_output::Builder {
        crate::output::create_sip_media_application_call_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateSipMediaApplicationOutput {
    /// <p>The SIP media application details.</p>
    #[doc(hidden)]
    pub sip_media_application: std::option::Option<crate::model::SipMediaApplication>,
}
impl CreateSipMediaApplicationOutput {
    /// <p>The SIP media application details.</p>
    pub fn sip_media_application(&self) -> std::option::Option<&crate::model::SipMediaApplication> {
        self.sip_media_application.as_ref()
    }
}
/// See [`CreateSipMediaApplicationOutput`](crate::output::CreateSipMediaApplicationOutput).
pub mod create_sip_media_application_output {

    /// A builder for [`CreateSipMediaApplicationOutput`](crate::output::CreateSipMediaApplicationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) sip_media_application: std::option::Option<crate::model::SipMediaApplication>,
    }
    impl Builder {
        /// <p>The SIP media application details.</p>
        pub fn sip_media_application(mut self, input: crate::model::SipMediaApplication) -> Self {
            self.sip_media_application = Some(input);
            self
        }
        /// <p>The SIP media application details.</p>
        pub fn set_sip_media_application(
            mut self,
            input: std::option::Option<crate::model::SipMediaApplication>,
        ) -> Self {
            self.sip_media_application = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateSipMediaApplicationOutput`](crate::output::CreateSipMediaApplicationOutput).
        pub fn build(self) -> crate::output::CreateSipMediaApplicationOutput {
            crate::output::CreateSipMediaApplicationOutput {
                sip_media_application: self.sip_media_application,
            }
        }
    }
}
impl CreateSipMediaApplicationOutput {
    /// Creates a new builder-style object to manufacture [`CreateSipMediaApplicationOutput`](crate::output::CreateSipMediaApplicationOutput).
    pub fn builder() -> crate::output::create_sip_media_application_output::Builder {
        crate::output::create_sip_media_application_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateRoomMembershipOutput {
    /// <p>The room membership details.</p>
    #[doc(hidden)]
    pub room_membership: std::option::Option<crate::model::RoomMembership>,
}
impl CreateRoomMembershipOutput {
    /// <p>The room membership details.</p>
    pub fn room_membership(&self) -> std::option::Option<&crate::model::RoomMembership> {
        self.room_membership.as_ref()
    }
}
/// See [`CreateRoomMembershipOutput`](crate::output::CreateRoomMembershipOutput).
pub mod create_room_membership_output {

    /// A builder for [`CreateRoomMembershipOutput`](crate::output::CreateRoomMembershipOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) room_membership: std::option::Option<crate::model::RoomMembership>,
    }
    impl Builder {
        /// <p>The room membership details.</p>
        pub fn room_membership(mut self, input: crate::model::RoomMembership) -> Self {
            self.room_membership = Some(input);
            self
        }
        /// <p>The room membership details.</p>
        pub fn set_room_membership(
            mut self,
            input: std::option::Option<crate::model::RoomMembership>,
        ) -> Self {
            self.room_membership = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateRoomMembershipOutput`](crate::output::CreateRoomMembershipOutput).
        pub fn build(self) -> crate::output::CreateRoomMembershipOutput {
            crate::output::CreateRoomMembershipOutput {
                room_membership: self.room_membership,
            }
        }
    }
}
impl CreateRoomMembershipOutput {
    /// Creates a new builder-style object to manufacture [`CreateRoomMembershipOutput`](crate::output::CreateRoomMembershipOutput).
    pub fn builder() -> crate::output::create_room_membership_output::Builder {
        crate::output::create_room_membership_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateRoomOutput {
    /// <p>The room details.</p>
    #[doc(hidden)]
    pub room: std::option::Option<crate::model::Room>,
}
impl CreateRoomOutput {
    /// <p>The room details.</p>
    pub fn room(&self) -> std::option::Option<&crate::model::Room> {
        self.room.as_ref()
    }
}
/// See [`CreateRoomOutput`](crate::output::CreateRoomOutput).
pub mod create_room_output {

    /// A builder for [`CreateRoomOutput`](crate::output::CreateRoomOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) room: std::option::Option<crate::model::Room>,
    }
    impl Builder {
        /// <p>The room details.</p>
        pub fn room(mut self, input: crate::model::Room) -> Self {
            self.room = Some(input);
            self
        }
        /// <p>The room details.</p>
        pub fn set_room(mut self, input: std::option::Option<crate::model::Room>) -> Self {
            self.room = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateRoomOutput`](crate::output::CreateRoomOutput).
        pub fn build(self) -> crate::output::CreateRoomOutput {
            crate::output::CreateRoomOutput { room: self.room }
        }
    }
}
impl CreateRoomOutput {
    /// Creates a new builder-style object to manufacture [`CreateRoomOutput`](crate::output::CreateRoomOutput).
    pub fn builder() -> crate::output::create_room_output::Builder {
        crate::output::create_room_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateProxySessionOutput {
    /// <p>The proxy session details.</p>
    #[doc(hidden)]
    pub proxy_session: std::option::Option<crate::model::ProxySession>,
}
impl CreateProxySessionOutput {
    /// <p>The proxy session details.</p>
    pub fn proxy_session(&self) -> std::option::Option<&crate::model::ProxySession> {
        self.proxy_session.as_ref()
    }
}
/// See [`CreateProxySessionOutput`](crate::output::CreateProxySessionOutput).
pub mod create_proxy_session_output {

    /// A builder for [`CreateProxySessionOutput`](crate::output::CreateProxySessionOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) proxy_session: std::option::Option<crate::model::ProxySession>,
    }
    impl Builder {
        /// <p>The proxy session details.</p>
        pub fn proxy_session(mut self, input: crate::model::ProxySession) -> Self {
            self.proxy_session = Some(input);
            self
        }
        /// <p>The proxy session details.</p>
        pub fn set_proxy_session(
            mut self,
            input: std::option::Option<crate::model::ProxySession>,
        ) -> Self {
            self.proxy_session = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateProxySessionOutput`](crate::output::CreateProxySessionOutput).
        pub fn build(self) -> crate::output::CreateProxySessionOutput {
            crate::output::CreateProxySessionOutput {
                proxy_session: self.proxy_session,
            }
        }
    }
}
impl CreateProxySessionOutput {
    /// Creates a new builder-style object to manufacture [`CreateProxySessionOutput`](crate::output::CreateProxySessionOutput).
    pub fn builder() -> crate::output::create_proxy_session_output::Builder {
        crate::output::create_proxy_session_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreatePhoneNumberOrderOutput {
    /// <p>The phone number order details.</p>
    #[doc(hidden)]
    pub phone_number_order: std::option::Option<crate::model::PhoneNumberOrder>,
}
impl CreatePhoneNumberOrderOutput {
    /// <p>The phone number order details.</p>
    pub fn phone_number_order(&self) -> std::option::Option<&crate::model::PhoneNumberOrder> {
        self.phone_number_order.as_ref()
    }
}
/// See [`CreatePhoneNumberOrderOutput`](crate::output::CreatePhoneNumberOrderOutput).
pub mod create_phone_number_order_output {

    /// A builder for [`CreatePhoneNumberOrderOutput`](crate::output::CreatePhoneNumberOrderOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) phone_number_order: std::option::Option<crate::model::PhoneNumberOrder>,
    }
    impl Builder {
        /// <p>The phone number order details.</p>
        pub fn phone_number_order(mut self, input: crate::model::PhoneNumberOrder) -> Self {
            self.phone_number_order = Some(input);
            self
        }
        /// <p>The phone number order details.</p>
        pub fn set_phone_number_order(
            mut self,
            input: std::option::Option<crate::model::PhoneNumberOrder>,
        ) -> Self {
            self.phone_number_order = input;
            self
        }
        /// Consumes the builder and constructs a [`CreatePhoneNumberOrderOutput`](crate::output::CreatePhoneNumberOrderOutput).
        pub fn build(self) -> crate::output::CreatePhoneNumberOrderOutput {
            crate::output::CreatePhoneNumberOrderOutput {
                phone_number_order: self.phone_number_order,
            }
        }
    }
}
impl CreatePhoneNumberOrderOutput {
    /// Creates a new builder-style object to manufacture [`CreatePhoneNumberOrderOutput`](crate::output::CreatePhoneNumberOrderOutput).
    pub fn builder() -> crate::output::create_phone_number_order_output::Builder {
        crate::output::create_phone_number_order_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateMeetingWithAttendeesOutput {
    /// <p>A meeting created using the Amazon Chime SDK.</p>
    #[doc(hidden)]
    pub meeting: std::option::Option<crate::model::Meeting>,
    /// <p>The attendee information, including attendees IDs and join tokens.</p>
    #[doc(hidden)]
    pub attendees: std::option::Option<std::vec::Vec<crate::model::Attendee>>,
    /// <p>If the action fails for one or more of the attendees in the request, a list of the attendees is returned, along with error codes and error messages.</p>
    #[doc(hidden)]
    pub errors: std::option::Option<std::vec::Vec<crate::model::CreateAttendeeError>>,
}
impl CreateMeetingWithAttendeesOutput {
    /// <p>A meeting created using the Amazon Chime SDK.</p>
    pub fn meeting(&self) -> std::option::Option<&crate::model::Meeting> {
        self.meeting.as_ref()
    }
    /// <p>The attendee information, including attendees IDs and join tokens.</p>
    pub fn attendees(&self) -> std::option::Option<&[crate::model::Attendee]> {
        self.attendees.as_deref()
    }
    /// <p>If the action fails for one or more of the attendees in the request, a list of the attendees is returned, along with error codes and error messages.</p>
    pub fn errors(&self) -> std::option::Option<&[crate::model::CreateAttendeeError]> {
        self.errors.as_deref()
    }
}
/// See [`CreateMeetingWithAttendeesOutput`](crate::output::CreateMeetingWithAttendeesOutput).
pub mod create_meeting_with_attendees_output {

    /// A builder for [`CreateMeetingWithAttendeesOutput`](crate::output::CreateMeetingWithAttendeesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) meeting: std::option::Option<crate::model::Meeting>,
        pub(crate) attendees: std::option::Option<std::vec::Vec<crate::model::Attendee>>,
        pub(crate) errors: std::option::Option<std::vec::Vec<crate::model::CreateAttendeeError>>,
    }
    impl Builder {
        /// <p>A meeting created using the Amazon Chime SDK.</p>
        pub fn meeting(mut self, input: crate::model::Meeting) -> Self {
            self.meeting = Some(input);
            self
        }
        /// <p>A meeting created using the Amazon Chime SDK.</p>
        pub fn set_meeting(mut self, input: std::option::Option<crate::model::Meeting>) -> Self {
            self.meeting = input;
            self
        }
        /// Appends an item to `attendees`.
        ///
        /// To override the contents of this collection use [`set_attendees`](Self::set_attendees).
        ///
        /// <p>The attendee information, including attendees IDs and join tokens.</p>
        pub fn attendees(mut self, input: crate::model::Attendee) -> Self {
            let mut v = self.attendees.unwrap_or_default();
            v.push(input);
            self.attendees = Some(v);
            self
        }
        /// <p>The attendee information, including attendees IDs and join tokens.</p>
        pub fn set_attendees(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Attendee>>,
        ) -> Self {
            self.attendees = input;
            self
        }
        /// Appends an item to `errors`.
        ///
        /// To override the contents of this collection use [`set_errors`](Self::set_errors).
        ///
        /// <p>If the action fails for one or more of the attendees in the request, a list of the attendees is returned, along with error codes and error messages.</p>
        pub fn errors(mut self, input: crate::model::CreateAttendeeError) -> Self {
            let mut v = self.errors.unwrap_or_default();
            v.push(input);
            self.errors = Some(v);
            self
        }
        /// <p>If the action fails for one or more of the attendees in the request, a list of the attendees is returned, along with error codes and error messages.</p>
        pub fn set_errors(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::CreateAttendeeError>>,
        ) -> Self {
            self.errors = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateMeetingWithAttendeesOutput`](crate::output::CreateMeetingWithAttendeesOutput).
        pub fn build(self) -> crate::output::CreateMeetingWithAttendeesOutput {
            crate::output::CreateMeetingWithAttendeesOutput {
                meeting: self.meeting,
                attendees: self.attendees,
                errors: self.errors,
            }
        }
    }
}
impl CreateMeetingWithAttendeesOutput {
    /// Creates a new builder-style object to manufacture [`CreateMeetingWithAttendeesOutput`](crate::output::CreateMeetingWithAttendeesOutput).
    pub fn builder() -> crate::output::create_meeting_with_attendees_output::Builder {
        crate::output::create_meeting_with_attendees_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateMeetingDialOutOutput {
    /// <p>Unique ID that tracks API calls.</p>
    #[doc(hidden)]
    pub transaction_id: std::option::Option<std::string::String>,
}
impl CreateMeetingDialOutOutput {
    /// <p>Unique ID that tracks API calls.</p>
    pub fn transaction_id(&self) -> std::option::Option<&str> {
        self.transaction_id.as_deref()
    }
}
/// See [`CreateMeetingDialOutOutput`](crate::output::CreateMeetingDialOutOutput).
pub mod create_meeting_dial_out_output {

    /// A builder for [`CreateMeetingDialOutOutput`](crate::output::CreateMeetingDialOutOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) transaction_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>Unique ID that tracks API calls.</p>
        pub fn transaction_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.transaction_id = Some(input.into());
            self
        }
        /// <p>Unique ID that tracks API calls.</p>
        pub fn set_transaction_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.transaction_id = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateMeetingDialOutOutput`](crate::output::CreateMeetingDialOutOutput).
        pub fn build(self) -> crate::output::CreateMeetingDialOutOutput {
            crate::output::CreateMeetingDialOutOutput {
                transaction_id: self.transaction_id,
            }
        }
    }
}
impl CreateMeetingDialOutOutput {
    /// Creates a new builder-style object to manufacture [`CreateMeetingDialOutOutput`](crate::output::CreateMeetingDialOutOutput).
    pub fn builder() -> crate::output::create_meeting_dial_out_output::Builder {
        crate::output::create_meeting_dial_out_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateMeetingOutput {
    /// <p> The meeting information, including the meeting ID and <code>MediaPlacement</code> . </p>
    #[doc(hidden)]
    pub meeting: std::option::Option<crate::model::Meeting>,
}
impl CreateMeetingOutput {
    /// <p> The meeting information, including the meeting ID and <code>MediaPlacement</code> . </p>
    pub fn meeting(&self) -> std::option::Option<&crate::model::Meeting> {
        self.meeting.as_ref()
    }
}
/// See [`CreateMeetingOutput`](crate::output::CreateMeetingOutput).
pub mod create_meeting_output {

    /// A builder for [`CreateMeetingOutput`](crate::output::CreateMeetingOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) meeting: std::option::Option<crate::model::Meeting>,
    }
    impl Builder {
        /// <p> The meeting information, including the meeting ID and <code>MediaPlacement</code> . </p>
        pub fn meeting(mut self, input: crate::model::Meeting) -> Self {
            self.meeting = Some(input);
            self
        }
        /// <p> The meeting information, including the meeting ID and <code>MediaPlacement</code> . </p>
        pub fn set_meeting(mut self, input: std::option::Option<crate::model::Meeting>) -> Self {
            self.meeting = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateMeetingOutput`](crate::output::CreateMeetingOutput).
        pub fn build(self) -> crate::output::CreateMeetingOutput {
            crate::output::CreateMeetingOutput {
                meeting: self.meeting,
            }
        }
    }
}
impl CreateMeetingOutput {
    /// Creates a new builder-style object to manufacture [`CreateMeetingOutput`](crate::output::CreateMeetingOutput).
    pub fn builder() -> crate::output::create_meeting_output::Builder {
        crate::output::create_meeting_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateMediaCapturePipelineOutput {
    /// <p>A media capture pipeline object, the ID, source type, source ARN, sink type, and sink ARN of a media capture pipeline object.</p>
    #[doc(hidden)]
    pub media_capture_pipeline: std::option::Option<crate::model::MediaCapturePipeline>,
}
impl CreateMediaCapturePipelineOutput {
    /// <p>A media capture pipeline object, the ID, source type, source ARN, sink type, and sink ARN of a media capture pipeline object.</p>
    pub fn media_capture_pipeline(
        &self,
    ) -> std::option::Option<&crate::model::MediaCapturePipeline> {
        self.media_capture_pipeline.as_ref()
    }
}
/// See [`CreateMediaCapturePipelineOutput`](crate::output::CreateMediaCapturePipelineOutput).
pub mod create_media_capture_pipeline_output {

    /// A builder for [`CreateMediaCapturePipelineOutput`](crate::output::CreateMediaCapturePipelineOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) media_capture_pipeline: std::option::Option<crate::model::MediaCapturePipeline>,
    }
    impl Builder {
        /// <p>A media capture pipeline object, the ID, source type, source ARN, sink type, and sink ARN of a media capture pipeline object.</p>
        pub fn media_capture_pipeline(mut self, input: crate::model::MediaCapturePipeline) -> Self {
            self.media_capture_pipeline = Some(input);
            self
        }
        /// <p>A media capture pipeline object, the ID, source type, source ARN, sink type, and sink ARN of a media capture pipeline object.</p>
        pub fn set_media_capture_pipeline(
            mut self,
            input: std::option::Option<crate::model::MediaCapturePipeline>,
        ) -> Self {
            self.media_capture_pipeline = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateMediaCapturePipelineOutput`](crate::output::CreateMediaCapturePipelineOutput).
        pub fn build(self) -> crate::output::CreateMediaCapturePipelineOutput {
            crate::output::CreateMediaCapturePipelineOutput {
                media_capture_pipeline: self.media_capture_pipeline,
            }
        }
    }
}
impl CreateMediaCapturePipelineOutput {
    /// Creates a new builder-style object to manufacture [`CreateMediaCapturePipelineOutput`](crate::output::CreateMediaCapturePipelineOutput).
    pub fn builder() -> crate::output::create_media_capture_pipeline_output::Builder {
        crate::output::create_media_capture_pipeline_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateChannelModeratorOutput {
    /// <p>The ARN of the channel.</p>
    #[doc(hidden)]
    pub channel_arn: std::option::Option<std::string::String>,
    /// <p>The ARNs of the channel and the moderator.</p>
    #[doc(hidden)]
    pub channel_moderator: std::option::Option<crate::model::Identity>,
}
impl CreateChannelModeratorOutput {
    /// <p>The ARN of the channel.</p>
    pub fn channel_arn(&self) -> std::option::Option<&str> {
        self.channel_arn.as_deref()
    }
    /// <p>The ARNs of the channel and the moderator.</p>
    pub fn channel_moderator(&self) -> std::option::Option<&crate::model::Identity> {
        self.channel_moderator.as_ref()
    }
}
/// See [`CreateChannelModeratorOutput`](crate::output::CreateChannelModeratorOutput).
pub mod create_channel_moderator_output {

    /// A builder for [`CreateChannelModeratorOutput`](crate::output::CreateChannelModeratorOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) channel_arn: std::option::Option<std::string::String>,
        pub(crate) channel_moderator: std::option::Option<crate::model::Identity>,
    }
    impl Builder {
        /// <p>The ARN of the channel.</p>
        pub fn channel_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.channel_arn = Some(input.into());
            self
        }
        /// <p>The ARN of the channel.</p>
        pub fn set_channel_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.channel_arn = input;
            self
        }
        /// <p>The ARNs of the channel and the moderator.</p>
        pub fn channel_moderator(mut self, input: crate::model::Identity) -> Self {
            self.channel_moderator = Some(input);
            self
        }
        /// <p>The ARNs of the channel and the moderator.</p>
        pub fn set_channel_moderator(
            mut self,
            input: std::option::Option<crate::model::Identity>,
        ) -> Self {
            self.channel_moderator = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateChannelModeratorOutput`](crate::output::CreateChannelModeratorOutput).
        pub fn build(self) -> crate::output::CreateChannelModeratorOutput {
            crate::output::CreateChannelModeratorOutput {
                channel_arn: self.channel_arn,
                channel_moderator: self.channel_moderator,
            }
        }
    }
}
impl CreateChannelModeratorOutput {
    /// Creates a new builder-style object to manufacture [`CreateChannelModeratorOutput`](crate::output::CreateChannelModeratorOutput).
    pub fn builder() -> crate::output::create_channel_moderator_output::Builder {
        crate::output::create_channel_moderator_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateChannelMembershipOutput {
    /// <p>The ARN of the channel.</p>
    #[doc(hidden)]
    pub channel_arn: std::option::Option<std::string::String>,
    /// <p>The ARN and metadata of the member being added.</p>
    #[doc(hidden)]
    pub member: std::option::Option<crate::model::Identity>,
}
impl CreateChannelMembershipOutput {
    /// <p>The ARN of the channel.</p>
    pub fn channel_arn(&self) -> std::option::Option<&str> {
        self.channel_arn.as_deref()
    }
    /// <p>The ARN and metadata of the member being added.</p>
    pub fn member(&self) -> std::option::Option<&crate::model::Identity> {
        self.member.as_ref()
    }
}
/// See [`CreateChannelMembershipOutput`](crate::output::CreateChannelMembershipOutput).
pub mod create_channel_membership_output {

    /// A builder for [`CreateChannelMembershipOutput`](crate::output::CreateChannelMembershipOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) channel_arn: std::option::Option<std::string::String>,
        pub(crate) member: std::option::Option<crate::model::Identity>,
    }
    impl Builder {
        /// <p>The ARN of the channel.</p>
        pub fn channel_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.channel_arn = Some(input.into());
            self
        }
        /// <p>The ARN of the channel.</p>
        pub fn set_channel_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.channel_arn = input;
            self
        }
        /// <p>The ARN and metadata of the member being added.</p>
        pub fn member(mut self, input: crate::model::Identity) -> Self {
            self.member = Some(input);
            self
        }
        /// <p>The ARN and metadata of the member being added.</p>
        pub fn set_member(mut self, input: std::option::Option<crate::model::Identity>) -> Self {
            self.member = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateChannelMembershipOutput`](crate::output::CreateChannelMembershipOutput).
        pub fn build(self) -> crate::output::CreateChannelMembershipOutput {
            crate::output::CreateChannelMembershipOutput {
                channel_arn: self.channel_arn,
                member: self.member,
            }
        }
    }
}
impl CreateChannelMembershipOutput {
    /// Creates a new builder-style object to manufacture [`CreateChannelMembershipOutput`](crate::output::CreateChannelMembershipOutput).
    pub fn builder() -> crate::output::create_channel_membership_output::Builder {
        crate::output::create_channel_membership_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateChannelBanOutput {
    /// <p>The ARN of the response to the ban request.</p>
    #[doc(hidden)]
    pub channel_arn: std::option::Option<std::string::String>,
    /// <p>The <code>ChannelArn</code> and <code>BannedIdentity</code> of the member in the ban response.</p>
    #[doc(hidden)]
    pub member: std::option::Option<crate::model::Identity>,
}
impl CreateChannelBanOutput {
    /// <p>The ARN of the response to the ban request.</p>
    pub fn channel_arn(&self) -> std::option::Option<&str> {
        self.channel_arn.as_deref()
    }
    /// <p>The <code>ChannelArn</code> and <code>BannedIdentity</code> of the member in the ban response.</p>
    pub fn member(&self) -> std::option::Option<&crate::model::Identity> {
        self.member.as_ref()
    }
}
/// See [`CreateChannelBanOutput`](crate::output::CreateChannelBanOutput).
pub mod create_channel_ban_output {

    /// A builder for [`CreateChannelBanOutput`](crate::output::CreateChannelBanOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) channel_arn: std::option::Option<std::string::String>,
        pub(crate) member: std::option::Option<crate::model::Identity>,
    }
    impl Builder {
        /// <p>The ARN of the response to the ban request.</p>
        pub fn channel_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.channel_arn = Some(input.into());
            self
        }
        /// <p>The ARN of the response to the ban request.</p>
        pub fn set_channel_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.channel_arn = input;
            self
        }
        /// <p>The <code>ChannelArn</code> and <code>BannedIdentity</code> of the member in the ban response.</p>
        pub fn member(mut self, input: crate::model::Identity) -> Self {
            self.member = Some(input);
            self
        }
        /// <p>The <code>ChannelArn</code> and <code>BannedIdentity</code> of the member in the ban response.</p>
        pub fn set_member(mut self, input: std::option::Option<crate::model::Identity>) -> Self {
            self.member = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateChannelBanOutput`](crate::output::CreateChannelBanOutput).
        pub fn build(self) -> crate::output::CreateChannelBanOutput {
            crate::output::CreateChannelBanOutput {
                channel_arn: self.channel_arn,
                member: self.member,
            }
        }
    }
}
impl CreateChannelBanOutput {
    /// Creates a new builder-style object to manufacture [`CreateChannelBanOutput`](crate::output::CreateChannelBanOutput).
    pub fn builder() -> crate::output::create_channel_ban_output::Builder {
        crate::output::create_channel_ban_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateChannelOutput {
    /// <p>The ARN of the channel.</p>
    #[doc(hidden)]
    pub channel_arn: std::option::Option<std::string::String>,
}
impl CreateChannelOutput {
    /// <p>The ARN of the channel.</p>
    pub fn channel_arn(&self) -> std::option::Option<&str> {
        self.channel_arn.as_deref()
    }
}
/// See [`CreateChannelOutput`](crate::output::CreateChannelOutput).
pub mod create_channel_output {

    /// A builder for [`CreateChannelOutput`](crate::output::CreateChannelOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) channel_arn: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The ARN of the channel.</p>
        pub fn channel_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.channel_arn = Some(input.into());
            self
        }
        /// <p>The ARN of the channel.</p>
        pub fn set_channel_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.channel_arn = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateChannelOutput`](crate::output::CreateChannelOutput).
        pub fn build(self) -> crate::output::CreateChannelOutput {
            crate::output::CreateChannelOutput {
                channel_arn: self.channel_arn,
            }
        }
    }
}
impl CreateChannelOutput {
    /// Creates a new builder-style object to manufacture [`CreateChannelOutput`](crate::output::CreateChannelOutput).
    pub fn builder() -> crate::output::create_channel_output::Builder {
        crate::output::create_channel_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateBotOutput {
    /// <p>The bot details.</p>
    #[doc(hidden)]
    pub bot: std::option::Option<crate::model::Bot>,
}
impl CreateBotOutput {
    /// <p>The bot details.</p>
    pub fn bot(&self) -> std::option::Option<&crate::model::Bot> {
        self.bot.as_ref()
    }
}
/// See [`CreateBotOutput`](crate::output::CreateBotOutput).
pub mod create_bot_output {

    /// A builder for [`CreateBotOutput`](crate::output::CreateBotOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) bot: std::option::Option<crate::model::Bot>,
    }
    impl Builder {
        /// <p>The bot details.</p>
        pub fn bot(mut self, input: crate::model::Bot) -> Self {
            self.bot = Some(input);
            self
        }
        /// <p>The bot details.</p>
        pub fn set_bot(mut self, input: std::option::Option<crate::model::Bot>) -> Self {
            self.bot = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateBotOutput`](crate::output::CreateBotOutput).
        pub fn build(self) -> crate::output::CreateBotOutput {
            crate::output::CreateBotOutput { bot: self.bot }
        }
    }
}
impl CreateBotOutput {
    /// Creates a new builder-style object to manufacture [`CreateBotOutput`](crate::output::CreateBotOutput).
    pub fn builder() -> crate::output::create_bot_output::Builder {
        crate::output::create_bot_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateAttendeeOutput {
    /// <p>The attendee information, including attendee ID and join token.</p>
    #[doc(hidden)]
    pub attendee: std::option::Option<crate::model::Attendee>,
}
impl CreateAttendeeOutput {
    /// <p>The attendee information, including attendee ID and join token.</p>
    pub fn attendee(&self) -> std::option::Option<&crate::model::Attendee> {
        self.attendee.as_ref()
    }
}
/// See [`CreateAttendeeOutput`](crate::output::CreateAttendeeOutput).
pub mod create_attendee_output {

    /// A builder for [`CreateAttendeeOutput`](crate::output::CreateAttendeeOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) attendee: std::option::Option<crate::model::Attendee>,
    }
    impl Builder {
        /// <p>The attendee information, including attendee ID and join token.</p>
        pub fn attendee(mut self, input: crate::model::Attendee) -> Self {
            self.attendee = Some(input);
            self
        }
        /// <p>The attendee information, including attendee ID and join token.</p>
        pub fn set_attendee(mut self, input: std::option::Option<crate::model::Attendee>) -> Self {
            self.attendee = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateAttendeeOutput`](crate::output::CreateAttendeeOutput).
        pub fn build(self) -> crate::output::CreateAttendeeOutput {
            crate::output::CreateAttendeeOutput {
                attendee: self.attendee,
            }
        }
    }
}
impl CreateAttendeeOutput {
    /// Creates a new builder-style object to manufacture [`CreateAttendeeOutput`](crate::output::CreateAttendeeOutput).
    pub fn builder() -> crate::output::create_attendee_output::Builder {
        crate::output::create_attendee_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateAppInstanceUserOutput {
    /// <p>The user's ARN.</p>
    #[doc(hidden)]
    pub app_instance_user_arn: std::option::Option<std::string::String>,
}
impl CreateAppInstanceUserOutput {
    /// <p>The user's ARN.</p>
    pub fn app_instance_user_arn(&self) -> std::option::Option<&str> {
        self.app_instance_user_arn.as_deref()
    }
}
/// See [`CreateAppInstanceUserOutput`](crate::output::CreateAppInstanceUserOutput).
pub mod create_app_instance_user_output {

    /// A builder for [`CreateAppInstanceUserOutput`](crate::output::CreateAppInstanceUserOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) app_instance_user_arn: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The user's ARN.</p>
        pub fn app_instance_user_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.app_instance_user_arn = Some(input.into());
            self
        }
        /// <p>The user's ARN.</p>
        pub fn set_app_instance_user_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.app_instance_user_arn = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateAppInstanceUserOutput`](crate::output::CreateAppInstanceUserOutput).
        pub fn build(self) -> crate::output::CreateAppInstanceUserOutput {
            crate::output::CreateAppInstanceUserOutput {
                app_instance_user_arn: self.app_instance_user_arn,
            }
        }
    }
}
impl CreateAppInstanceUserOutput {
    /// Creates a new builder-style object to manufacture [`CreateAppInstanceUserOutput`](crate::output::CreateAppInstanceUserOutput).
    pub fn builder() -> crate::output::create_app_instance_user_output::Builder {
        crate::output::create_app_instance_user_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateAppInstanceAdminOutput {
    /// <p>The name and ARN of the admin for the <code>AppInstance</code>.</p>
    #[doc(hidden)]
    pub app_instance_admin: std::option::Option<crate::model::Identity>,
    /// <p>The ARN of the of the admin for the <code>AppInstance</code>.</p>
    #[doc(hidden)]
    pub app_instance_arn: std::option::Option<std::string::String>,
}
impl CreateAppInstanceAdminOutput {
    /// <p>The name and ARN of the admin for the <code>AppInstance</code>.</p>
    pub fn app_instance_admin(&self) -> std::option::Option<&crate::model::Identity> {
        self.app_instance_admin.as_ref()
    }
    /// <p>The ARN of the of the admin for the <code>AppInstance</code>.</p>
    pub fn app_instance_arn(&self) -> std::option::Option<&str> {
        self.app_instance_arn.as_deref()
    }
}
/// See [`CreateAppInstanceAdminOutput`](crate::output::CreateAppInstanceAdminOutput).
pub mod create_app_instance_admin_output {

    /// A builder for [`CreateAppInstanceAdminOutput`](crate::output::CreateAppInstanceAdminOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) app_instance_admin: std::option::Option<crate::model::Identity>,
        pub(crate) app_instance_arn: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The name and ARN of the admin for the <code>AppInstance</code>.</p>
        pub fn app_instance_admin(mut self, input: crate::model::Identity) -> Self {
            self.app_instance_admin = Some(input);
            self
        }
        /// <p>The name and ARN of the admin for the <code>AppInstance</code>.</p>
        pub fn set_app_instance_admin(
            mut self,
            input: std::option::Option<crate::model::Identity>,
        ) -> Self {
            self.app_instance_admin = input;
            self
        }
        /// <p>The ARN of the of the admin for the <code>AppInstance</code>.</p>
        pub fn app_instance_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.app_instance_arn = Some(input.into());
            self
        }
        /// <p>The ARN of the of the admin for the <code>AppInstance</code>.</p>
        pub fn set_app_instance_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.app_instance_arn = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateAppInstanceAdminOutput`](crate::output::CreateAppInstanceAdminOutput).
        pub fn build(self) -> crate::output::CreateAppInstanceAdminOutput {
            crate::output::CreateAppInstanceAdminOutput {
                app_instance_admin: self.app_instance_admin,
                app_instance_arn: self.app_instance_arn,
            }
        }
    }
}
impl CreateAppInstanceAdminOutput {
    /// Creates a new builder-style object to manufacture [`CreateAppInstanceAdminOutput`](crate::output::CreateAppInstanceAdminOutput).
    pub fn builder() -> crate::output::create_app_instance_admin_output::Builder {
        crate::output::create_app_instance_admin_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateAppInstanceOutput {
    /// <p>The Amazon Resource Number (ARN) of the <code>AppInstance</code>.</p>
    #[doc(hidden)]
    pub app_instance_arn: std::option::Option<std::string::String>,
}
impl CreateAppInstanceOutput {
    /// <p>The Amazon Resource Number (ARN) of the <code>AppInstance</code>.</p>
    pub fn app_instance_arn(&self) -> std::option::Option<&str> {
        self.app_instance_arn.as_deref()
    }
}
/// See [`CreateAppInstanceOutput`](crate::output::CreateAppInstanceOutput).
pub mod create_app_instance_output {

    /// A builder for [`CreateAppInstanceOutput`](crate::output::CreateAppInstanceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) app_instance_arn: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The Amazon Resource Number (ARN) of the <code>AppInstance</code>.</p>
        pub fn app_instance_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.app_instance_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Number (ARN) of the <code>AppInstance</code>.</p>
        pub fn set_app_instance_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.app_instance_arn = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateAppInstanceOutput`](crate::output::CreateAppInstanceOutput).
        pub fn build(self) -> crate::output::CreateAppInstanceOutput {
            crate::output::CreateAppInstanceOutput {
                app_instance_arn: self.app_instance_arn,
            }
        }
    }
}
impl CreateAppInstanceOutput {
    /// Creates a new builder-style object to manufacture [`CreateAppInstanceOutput`](crate::output::CreateAppInstanceOutput).
    pub fn builder() -> crate::output::create_app_instance_output::Builder {
        crate::output::create_app_instance_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateAccountOutput {
    /// <p>The Amazon Chime account details.</p>
    #[doc(hidden)]
    pub account: std::option::Option<crate::model::Account>,
}
impl CreateAccountOutput {
    /// <p>The Amazon Chime account details.</p>
    pub fn account(&self) -> std::option::Option<&crate::model::Account> {
        self.account.as_ref()
    }
}
/// See [`CreateAccountOutput`](crate::output::CreateAccountOutput).
pub mod create_account_output {

    /// A builder for [`CreateAccountOutput`](crate::output::CreateAccountOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) account: std::option::Option<crate::model::Account>,
    }
    impl Builder {
        /// <p>The Amazon Chime account details.</p>
        pub fn account(mut self, input: crate::model::Account) -> Self {
            self.account = Some(input);
            self
        }
        /// <p>The Amazon Chime account details.</p>
        pub fn set_account(mut self, input: std::option::Option<crate::model::Account>) -> Self {
            self.account = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateAccountOutput`](crate::output::CreateAccountOutput).
        pub fn build(self) -> crate::output::CreateAccountOutput {
            crate::output::CreateAccountOutput {
                account: self.account,
            }
        }
    }
}
impl CreateAccountOutput {
    /// Creates a new builder-style object to manufacture [`CreateAccountOutput`](crate::output::CreateAccountOutput).
    pub fn builder() -> crate::output::create_account_output::Builder {
        crate::output::create_account_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BatchUpdateUserOutput {
    /// <p>If the <code>BatchUpdateUser</code> action fails for one or more of the user IDs in the request, a list of the user IDs is returned, along with error codes and error messages.</p>
    #[doc(hidden)]
    pub user_errors: std::option::Option<std::vec::Vec<crate::model::UserError>>,
}
impl BatchUpdateUserOutput {
    /// <p>If the <code>BatchUpdateUser</code> action fails for one or more of the user IDs in the request, a list of the user IDs is returned, along with error codes and error messages.</p>
    pub fn user_errors(&self) -> std::option::Option<&[crate::model::UserError]> {
        self.user_errors.as_deref()
    }
}
/// See [`BatchUpdateUserOutput`](crate::output::BatchUpdateUserOutput).
pub mod batch_update_user_output {

    /// A builder for [`BatchUpdateUserOutput`](crate::output::BatchUpdateUserOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) user_errors: std::option::Option<std::vec::Vec<crate::model::UserError>>,
    }
    impl Builder {
        /// Appends an item to `user_errors`.
        ///
        /// To override the contents of this collection use [`set_user_errors`](Self::set_user_errors).
        ///
        /// <p>If the <code>BatchUpdateUser</code> action fails for one or more of the user IDs in the request, a list of the user IDs is returned, along with error codes and error messages.</p>
        pub fn user_errors(mut self, input: crate::model::UserError) -> Self {
            let mut v = self.user_errors.unwrap_or_default();
            v.push(input);
            self.user_errors = Some(v);
            self
        }
        /// <p>If the <code>BatchUpdateUser</code> action fails for one or more of the user IDs in the request, a list of the user IDs is returned, along with error codes and error messages.</p>
        pub fn set_user_errors(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::UserError>>,
        ) -> Self {
            self.user_errors = input;
            self
        }
        /// Consumes the builder and constructs a [`BatchUpdateUserOutput`](crate::output::BatchUpdateUserOutput).
        pub fn build(self) -> crate::output::BatchUpdateUserOutput {
            crate::output::BatchUpdateUserOutput {
                user_errors: self.user_errors,
            }
        }
    }
}
impl BatchUpdateUserOutput {
    /// Creates a new builder-style object to manufacture [`BatchUpdateUserOutput`](crate::output::BatchUpdateUserOutput).
    pub fn builder() -> crate::output::batch_update_user_output::Builder {
        crate::output::batch_update_user_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BatchUpdatePhoneNumberOutput {
    /// <p>If the action fails for one or more of the phone numbers in the request, a list of the phone numbers is returned, along with error codes and error messages.</p>
    #[doc(hidden)]
    pub phone_number_errors: std::option::Option<std::vec::Vec<crate::model::PhoneNumberError>>,
}
impl BatchUpdatePhoneNumberOutput {
    /// <p>If the action fails for one or more of the phone numbers in the request, a list of the phone numbers is returned, along with error codes and error messages.</p>
    pub fn phone_number_errors(&self) -> std::option::Option<&[crate::model::PhoneNumberError]> {
        self.phone_number_errors.as_deref()
    }
}
/// See [`BatchUpdatePhoneNumberOutput`](crate::output::BatchUpdatePhoneNumberOutput).
pub mod batch_update_phone_number_output {

    /// A builder for [`BatchUpdatePhoneNumberOutput`](crate::output::BatchUpdatePhoneNumberOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) phone_number_errors:
            std::option::Option<std::vec::Vec<crate::model::PhoneNumberError>>,
    }
    impl Builder {
        /// Appends an item to `phone_number_errors`.
        ///
        /// To override the contents of this collection use [`set_phone_number_errors`](Self::set_phone_number_errors).
        ///
        /// <p>If the action fails for one or more of the phone numbers in the request, a list of the phone numbers is returned, along with error codes and error messages.</p>
        pub fn phone_number_errors(mut self, input: crate::model::PhoneNumberError) -> Self {
            let mut v = self.phone_number_errors.unwrap_or_default();
            v.push(input);
            self.phone_number_errors = Some(v);
            self
        }
        /// <p>If the action fails for one or more of the phone numbers in the request, a list of the phone numbers is returned, along with error codes and error messages.</p>
        pub fn set_phone_number_errors(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::PhoneNumberError>>,
        ) -> Self {
            self.phone_number_errors = input;
            self
        }
        /// Consumes the builder and constructs a [`BatchUpdatePhoneNumberOutput`](crate::output::BatchUpdatePhoneNumberOutput).
        pub fn build(self) -> crate::output::BatchUpdatePhoneNumberOutput {
            crate::output::BatchUpdatePhoneNumberOutput {
                phone_number_errors: self.phone_number_errors,
            }
        }
    }
}
impl BatchUpdatePhoneNumberOutput {
    /// Creates a new builder-style object to manufacture [`BatchUpdatePhoneNumberOutput`](crate::output::BatchUpdatePhoneNumberOutput).
    pub fn builder() -> crate::output::batch_update_phone_number_output::Builder {
        crate::output::batch_update_phone_number_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BatchUnsuspendUserOutput {
    /// <p>If the <code>BatchUnsuspendUser</code> action fails for one or more of the user IDs in the request, a list of the user IDs is returned, along with error codes and error messages.</p>
    #[doc(hidden)]
    pub user_errors: std::option::Option<std::vec::Vec<crate::model::UserError>>,
}
impl BatchUnsuspendUserOutput {
    /// <p>If the <code>BatchUnsuspendUser</code> action fails for one or more of the user IDs in the request, a list of the user IDs is returned, along with error codes and error messages.</p>
    pub fn user_errors(&self) -> std::option::Option<&[crate::model::UserError]> {
        self.user_errors.as_deref()
    }
}
/// See [`BatchUnsuspendUserOutput`](crate::output::BatchUnsuspendUserOutput).
pub mod batch_unsuspend_user_output {

    /// A builder for [`BatchUnsuspendUserOutput`](crate::output::BatchUnsuspendUserOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) user_errors: std::option::Option<std::vec::Vec<crate::model::UserError>>,
    }
    impl Builder {
        /// Appends an item to `user_errors`.
        ///
        /// To override the contents of this collection use [`set_user_errors`](Self::set_user_errors).
        ///
        /// <p>If the <code>BatchUnsuspendUser</code> action fails for one or more of the user IDs in the request, a list of the user IDs is returned, along with error codes and error messages.</p>
        pub fn user_errors(mut self, input: crate::model::UserError) -> Self {
            let mut v = self.user_errors.unwrap_or_default();
            v.push(input);
            self.user_errors = Some(v);
            self
        }
        /// <p>If the <code>BatchUnsuspendUser</code> action fails for one or more of the user IDs in the request, a list of the user IDs is returned, along with error codes and error messages.</p>
        pub fn set_user_errors(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::UserError>>,
        ) -> Self {
            self.user_errors = input;
            self
        }
        /// Consumes the builder and constructs a [`BatchUnsuspendUserOutput`](crate::output::BatchUnsuspendUserOutput).
        pub fn build(self) -> crate::output::BatchUnsuspendUserOutput {
            crate::output::BatchUnsuspendUserOutput {
                user_errors: self.user_errors,
            }
        }
    }
}
impl BatchUnsuspendUserOutput {
    /// Creates a new builder-style object to manufacture [`BatchUnsuspendUserOutput`](crate::output::BatchUnsuspendUserOutput).
    pub fn builder() -> crate::output::batch_unsuspend_user_output::Builder {
        crate::output::batch_unsuspend_user_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BatchSuspendUserOutput {
    /// <p>If the <code>BatchSuspendUser</code> action fails for one or more of the user IDs in the request, a list of the user IDs is returned, along with error codes and error messages.</p>
    #[doc(hidden)]
    pub user_errors: std::option::Option<std::vec::Vec<crate::model::UserError>>,
}
impl BatchSuspendUserOutput {
    /// <p>If the <code>BatchSuspendUser</code> action fails for one or more of the user IDs in the request, a list of the user IDs is returned, along with error codes and error messages.</p>
    pub fn user_errors(&self) -> std::option::Option<&[crate::model::UserError]> {
        self.user_errors.as_deref()
    }
}
/// See [`BatchSuspendUserOutput`](crate::output::BatchSuspendUserOutput).
pub mod batch_suspend_user_output {

    /// A builder for [`BatchSuspendUserOutput`](crate::output::BatchSuspendUserOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) user_errors: std::option::Option<std::vec::Vec<crate::model::UserError>>,
    }
    impl Builder {
        /// Appends an item to `user_errors`.
        ///
        /// To override the contents of this collection use [`set_user_errors`](Self::set_user_errors).
        ///
        /// <p>If the <code>BatchSuspendUser</code> action fails for one or more of the user IDs in the request, a list of the user IDs is returned, along with error codes and error messages.</p>
        pub fn user_errors(mut self, input: crate::model::UserError) -> Self {
            let mut v = self.user_errors.unwrap_or_default();
            v.push(input);
            self.user_errors = Some(v);
            self
        }
        /// <p>If the <code>BatchSuspendUser</code> action fails for one or more of the user IDs in the request, a list of the user IDs is returned, along with error codes and error messages.</p>
        pub fn set_user_errors(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::UserError>>,
        ) -> Self {
            self.user_errors = input;
            self
        }
        /// Consumes the builder and constructs a [`BatchSuspendUserOutput`](crate::output::BatchSuspendUserOutput).
        pub fn build(self) -> crate::output::BatchSuspendUserOutput {
            crate::output::BatchSuspendUserOutput {
                user_errors: self.user_errors,
            }
        }
    }
}
impl BatchSuspendUserOutput {
    /// Creates a new builder-style object to manufacture [`BatchSuspendUserOutput`](crate::output::BatchSuspendUserOutput).
    pub fn builder() -> crate::output::batch_suspend_user_output::Builder {
        crate::output::batch_suspend_user_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BatchDeletePhoneNumberOutput {
    /// <p>If the action fails for one or more of the phone numbers in the request, a list of the phone numbers is returned, along with error codes and error messages.</p>
    #[doc(hidden)]
    pub phone_number_errors: std::option::Option<std::vec::Vec<crate::model::PhoneNumberError>>,
}
impl BatchDeletePhoneNumberOutput {
    /// <p>If the action fails for one or more of the phone numbers in the request, a list of the phone numbers is returned, along with error codes and error messages.</p>
    pub fn phone_number_errors(&self) -> std::option::Option<&[crate::model::PhoneNumberError]> {
        self.phone_number_errors.as_deref()
    }
}
/// See [`BatchDeletePhoneNumberOutput`](crate::output::BatchDeletePhoneNumberOutput).
pub mod batch_delete_phone_number_output {

    /// A builder for [`BatchDeletePhoneNumberOutput`](crate::output::BatchDeletePhoneNumberOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) phone_number_errors:
            std::option::Option<std::vec::Vec<crate::model::PhoneNumberError>>,
    }
    impl Builder {
        /// Appends an item to `phone_number_errors`.
        ///
        /// To override the contents of this collection use [`set_phone_number_errors`](Self::set_phone_number_errors).
        ///
        /// <p>If the action fails for one or more of the phone numbers in the request, a list of the phone numbers is returned, along with error codes and error messages.</p>
        pub fn phone_number_errors(mut self, input: crate::model::PhoneNumberError) -> Self {
            let mut v = self.phone_number_errors.unwrap_or_default();
            v.push(input);
            self.phone_number_errors = Some(v);
            self
        }
        /// <p>If the action fails for one or more of the phone numbers in the request, a list of the phone numbers is returned, along with error codes and error messages.</p>
        pub fn set_phone_number_errors(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::PhoneNumberError>>,
        ) -> Self {
            self.phone_number_errors = input;
            self
        }
        /// Consumes the builder and constructs a [`BatchDeletePhoneNumberOutput`](crate::output::BatchDeletePhoneNumberOutput).
        pub fn build(self) -> crate::output::BatchDeletePhoneNumberOutput {
            crate::output::BatchDeletePhoneNumberOutput {
                phone_number_errors: self.phone_number_errors,
            }
        }
    }
}
impl BatchDeletePhoneNumberOutput {
    /// Creates a new builder-style object to manufacture [`BatchDeletePhoneNumberOutput`](crate::output::BatchDeletePhoneNumberOutput).
    pub fn builder() -> crate::output::batch_delete_phone_number_output::Builder {
        crate::output::batch_delete_phone_number_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BatchCreateRoomMembershipOutput {
    /// <p>If the action fails for one or more of the member IDs in the request, a list of the member IDs is returned, along with error codes and error messages.</p>
    #[doc(hidden)]
    pub errors: std::option::Option<std::vec::Vec<crate::model::MemberError>>,
}
impl BatchCreateRoomMembershipOutput {
    /// <p>If the action fails for one or more of the member IDs in the request, a list of the member IDs is returned, along with error codes and error messages.</p>
    pub fn errors(&self) -> std::option::Option<&[crate::model::MemberError]> {
        self.errors.as_deref()
    }
}
/// See [`BatchCreateRoomMembershipOutput`](crate::output::BatchCreateRoomMembershipOutput).
pub mod batch_create_room_membership_output {

    /// A builder for [`BatchCreateRoomMembershipOutput`](crate::output::BatchCreateRoomMembershipOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) errors: std::option::Option<std::vec::Vec<crate::model::MemberError>>,
    }
    impl Builder {
        /// Appends an item to `errors`.
        ///
        /// To override the contents of this collection use [`set_errors`](Self::set_errors).
        ///
        /// <p>If the action fails for one or more of the member IDs in the request, a list of the member IDs is returned, along with error codes and error messages.</p>
        pub fn errors(mut self, input: crate::model::MemberError) -> Self {
            let mut v = self.errors.unwrap_or_default();
            v.push(input);
            self.errors = Some(v);
            self
        }
        /// <p>If the action fails for one or more of the member IDs in the request, a list of the member IDs is returned, along with error codes and error messages.</p>
        pub fn set_errors(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::MemberError>>,
        ) -> Self {
            self.errors = input;
            self
        }
        /// Consumes the builder and constructs a [`BatchCreateRoomMembershipOutput`](crate::output::BatchCreateRoomMembershipOutput).
        pub fn build(self) -> crate::output::BatchCreateRoomMembershipOutput {
            crate::output::BatchCreateRoomMembershipOutput {
                errors: self.errors,
            }
        }
    }
}
impl BatchCreateRoomMembershipOutput {
    /// Creates a new builder-style object to manufacture [`BatchCreateRoomMembershipOutput`](crate::output::BatchCreateRoomMembershipOutput).
    pub fn builder() -> crate::output::batch_create_room_membership_output::Builder {
        crate::output::batch_create_room_membership_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BatchCreateChannelMembershipOutput {
    /// <p>The list of channel memberships in the response.</p>
    #[doc(hidden)]
    pub batch_channel_memberships: std::option::Option<crate::model::BatchChannelMemberships>,
    /// <p>If the action fails for one or more of the memberships in the request, a list of the memberships is returned, along with error codes and error messages.</p>
    #[doc(hidden)]
    pub errors: std::option::Option<std::vec::Vec<crate::model::BatchCreateChannelMembershipError>>,
}
impl BatchCreateChannelMembershipOutput {
    /// <p>The list of channel memberships in the response.</p>
    pub fn batch_channel_memberships(
        &self,
    ) -> std::option::Option<&crate::model::BatchChannelMemberships> {
        self.batch_channel_memberships.as_ref()
    }
    /// <p>If the action fails for one or more of the memberships in the request, a list of the memberships is returned, along with error codes and error messages.</p>
    pub fn errors(
        &self,
    ) -> std::option::Option<&[crate::model::BatchCreateChannelMembershipError]> {
        self.errors.as_deref()
    }
}
/// See [`BatchCreateChannelMembershipOutput`](crate::output::BatchCreateChannelMembershipOutput).
pub mod batch_create_channel_membership_output {

    /// A builder for [`BatchCreateChannelMembershipOutput`](crate::output::BatchCreateChannelMembershipOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) batch_channel_memberships:
            std::option::Option<crate::model::BatchChannelMemberships>,
        pub(crate) errors:
            std::option::Option<std::vec::Vec<crate::model::BatchCreateChannelMembershipError>>,
    }
    impl Builder {
        /// <p>The list of channel memberships in the response.</p>
        pub fn batch_channel_memberships(
            mut self,
            input: crate::model::BatchChannelMemberships,
        ) -> Self {
            self.batch_channel_memberships = Some(input);
            self
        }
        /// <p>The list of channel memberships in the response.</p>
        pub fn set_batch_channel_memberships(
            mut self,
            input: std::option::Option<crate::model::BatchChannelMemberships>,
        ) -> Self {
            self.batch_channel_memberships = input;
            self
        }
        /// Appends an item to `errors`.
        ///
        /// To override the contents of this collection use [`set_errors`](Self::set_errors).
        ///
        /// <p>If the action fails for one or more of the memberships in the request, a list of the memberships is returned, along with error codes and error messages.</p>
        pub fn errors(mut self, input: crate::model::BatchCreateChannelMembershipError) -> Self {
            let mut v = self.errors.unwrap_or_default();
            v.push(input);
            self.errors = Some(v);
            self
        }
        /// <p>If the action fails for one or more of the memberships in the request, a list of the memberships is returned, along with error codes and error messages.</p>
        pub fn set_errors(
            mut self,
            input: std::option::Option<
                std::vec::Vec<crate::model::BatchCreateChannelMembershipError>,
            >,
        ) -> Self {
            self.errors = input;
            self
        }
        /// Consumes the builder and constructs a [`BatchCreateChannelMembershipOutput`](crate::output::BatchCreateChannelMembershipOutput).
        pub fn build(self) -> crate::output::BatchCreateChannelMembershipOutput {
            crate::output::BatchCreateChannelMembershipOutput {
                batch_channel_memberships: self.batch_channel_memberships,
                errors: self.errors,
            }
        }
    }
}
impl BatchCreateChannelMembershipOutput {
    /// Creates a new builder-style object to manufacture [`BatchCreateChannelMembershipOutput`](crate::output::BatchCreateChannelMembershipOutput).
    pub fn builder() -> crate::output::batch_create_channel_membership_output::Builder {
        crate::output::batch_create_channel_membership_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BatchCreateAttendeeOutput {
    /// <p>The attendee information, including attendees IDs and join tokens.</p>
    #[doc(hidden)]
    pub attendees: std::option::Option<std::vec::Vec<crate::model::Attendee>>,
    /// <p>If the action fails for one or more of the attendees in the request, a list of the attendees is returned, along with error codes and error messages.</p>
    #[doc(hidden)]
    pub errors: std::option::Option<std::vec::Vec<crate::model::CreateAttendeeError>>,
}
impl BatchCreateAttendeeOutput {
    /// <p>The attendee information, including attendees IDs and join tokens.</p>
    pub fn attendees(&self) -> std::option::Option<&[crate::model::Attendee]> {
        self.attendees.as_deref()
    }
    /// <p>If the action fails for one or more of the attendees in the request, a list of the attendees is returned, along with error codes and error messages.</p>
    pub fn errors(&self) -> std::option::Option<&[crate::model::CreateAttendeeError]> {
        self.errors.as_deref()
    }
}
/// See [`BatchCreateAttendeeOutput`](crate::output::BatchCreateAttendeeOutput).
pub mod batch_create_attendee_output {

    /// A builder for [`BatchCreateAttendeeOutput`](crate::output::BatchCreateAttendeeOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) attendees: std::option::Option<std::vec::Vec<crate::model::Attendee>>,
        pub(crate) errors: std::option::Option<std::vec::Vec<crate::model::CreateAttendeeError>>,
    }
    impl Builder {
        /// Appends an item to `attendees`.
        ///
        /// To override the contents of this collection use [`set_attendees`](Self::set_attendees).
        ///
        /// <p>The attendee information, including attendees IDs and join tokens.</p>
        pub fn attendees(mut self, input: crate::model::Attendee) -> Self {
            let mut v = self.attendees.unwrap_or_default();
            v.push(input);
            self.attendees = Some(v);
            self
        }
        /// <p>The attendee information, including attendees IDs and join tokens.</p>
        pub fn set_attendees(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Attendee>>,
        ) -> Self {
            self.attendees = input;
            self
        }
        /// Appends an item to `errors`.
        ///
        /// To override the contents of this collection use [`set_errors`](Self::set_errors).
        ///
        /// <p>If the action fails for one or more of the attendees in the request, a list of the attendees is returned, along with error codes and error messages.</p>
        pub fn errors(mut self, input: crate::model::CreateAttendeeError) -> Self {
            let mut v = self.errors.unwrap_or_default();
            v.push(input);
            self.errors = Some(v);
            self
        }
        /// <p>If the action fails for one or more of the attendees in the request, a list of the attendees is returned, along with error codes and error messages.</p>
        pub fn set_errors(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::CreateAttendeeError>>,
        ) -> Self {
            self.errors = input;
            self
        }
        /// Consumes the builder and constructs a [`BatchCreateAttendeeOutput`](crate::output::BatchCreateAttendeeOutput).
        pub fn build(self) -> crate::output::BatchCreateAttendeeOutput {
            crate::output::BatchCreateAttendeeOutput {
                attendees: self.attendees,
                errors: self.errors,
            }
        }
    }
}
impl BatchCreateAttendeeOutput {
    /// Creates a new builder-style object to manufacture [`BatchCreateAttendeeOutput`](crate::output::BatchCreateAttendeeOutput).
    pub fn builder() -> crate::output::batch_create_attendee_output::Builder {
        crate::output::batch_create_attendee_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AssociateSigninDelegateGroupsWithAccountOutput {}
/// See [`AssociateSigninDelegateGroupsWithAccountOutput`](crate::output::AssociateSigninDelegateGroupsWithAccountOutput).
pub mod associate_signin_delegate_groups_with_account_output {

    /// A builder for [`AssociateSigninDelegateGroupsWithAccountOutput`](crate::output::AssociateSigninDelegateGroupsWithAccountOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`AssociateSigninDelegateGroupsWithAccountOutput`](crate::output::AssociateSigninDelegateGroupsWithAccountOutput).
        pub fn build(self) -> crate::output::AssociateSigninDelegateGroupsWithAccountOutput {
            crate::output::AssociateSigninDelegateGroupsWithAccountOutput {}
        }
    }
}
impl AssociateSigninDelegateGroupsWithAccountOutput {
    /// Creates a new builder-style object to manufacture [`AssociateSigninDelegateGroupsWithAccountOutput`](crate::output::AssociateSigninDelegateGroupsWithAccountOutput).
    pub fn builder() -> crate::output::associate_signin_delegate_groups_with_account_output::Builder
    {
        crate::output::associate_signin_delegate_groups_with_account_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AssociatePhoneNumberWithUserOutput {}
/// See [`AssociatePhoneNumberWithUserOutput`](crate::output::AssociatePhoneNumberWithUserOutput).
pub mod associate_phone_number_with_user_output {

    /// A builder for [`AssociatePhoneNumberWithUserOutput`](crate::output::AssociatePhoneNumberWithUserOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`AssociatePhoneNumberWithUserOutput`](crate::output::AssociatePhoneNumberWithUserOutput).
        pub fn build(self) -> crate::output::AssociatePhoneNumberWithUserOutput {
            crate::output::AssociatePhoneNumberWithUserOutput {}
        }
    }
}
impl AssociatePhoneNumberWithUserOutput {
    /// Creates a new builder-style object to manufacture [`AssociatePhoneNumberWithUserOutput`](crate::output::AssociatePhoneNumberWithUserOutput).
    pub fn builder() -> crate::output::associate_phone_number_with_user_output::Builder {
        crate::output::associate_phone_number_with_user_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AssociatePhoneNumbersWithVoiceConnectorGroupOutput {
    /// <p>If the action fails for one or more of the phone numbers in the request, a list of the phone numbers is returned, along with error codes and error messages.</p>
    #[doc(hidden)]
    pub phone_number_errors: std::option::Option<std::vec::Vec<crate::model::PhoneNumberError>>,
}
impl AssociatePhoneNumbersWithVoiceConnectorGroupOutput {
    /// <p>If the action fails for one or more of the phone numbers in the request, a list of the phone numbers is returned, along with error codes and error messages.</p>
    pub fn phone_number_errors(&self) -> std::option::Option<&[crate::model::PhoneNumberError]> {
        self.phone_number_errors.as_deref()
    }
}
/// See [`AssociatePhoneNumbersWithVoiceConnectorGroupOutput`](crate::output::AssociatePhoneNumbersWithVoiceConnectorGroupOutput).
pub mod associate_phone_numbers_with_voice_connector_group_output {

    /// A builder for [`AssociatePhoneNumbersWithVoiceConnectorGroupOutput`](crate::output::AssociatePhoneNumbersWithVoiceConnectorGroupOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) phone_number_errors:
            std::option::Option<std::vec::Vec<crate::model::PhoneNumberError>>,
    }
    impl Builder {
        /// Appends an item to `phone_number_errors`.
        ///
        /// To override the contents of this collection use [`set_phone_number_errors`](Self::set_phone_number_errors).
        ///
        /// <p>If the action fails for one or more of the phone numbers in the request, a list of the phone numbers is returned, along with error codes and error messages.</p>
        pub fn phone_number_errors(mut self, input: crate::model::PhoneNumberError) -> Self {
            let mut v = self.phone_number_errors.unwrap_or_default();
            v.push(input);
            self.phone_number_errors = Some(v);
            self
        }
        /// <p>If the action fails for one or more of the phone numbers in the request, a list of the phone numbers is returned, along with error codes and error messages.</p>
        pub fn set_phone_number_errors(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::PhoneNumberError>>,
        ) -> Self {
            self.phone_number_errors = input;
            self
        }
        /// Consumes the builder and constructs a [`AssociatePhoneNumbersWithVoiceConnectorGroupOutput`](crate::output::AssociatePhoneNumbersWithVoiceConnectorGroupOutput).
        pub fn build(self) -> crate::output::AssociatePhoneNumbersWithVoiceConnectorGroupOutput {
            crate::output::AssociatePhoneNumbersWithVoiceConnectorGroupOutput {
                phone_number_errors: self.phone_number_errors,
            }
        }
    }
}
impl AssociatePhoneNumbersWithVoiceConnectorGroupOutput {
    /// Creates a new builder-style object to manufacture [`AssociatePhoneNumbersWithVoiceConnectorGroupOutput`](crate::output::AssociatePhoneNumbersWithVoiceConnectorGroupOutput).
    pub fn builder(
    ) -> crate::output::associate_phone_numbers_with_voice_connector_group_output::Builder {
        crate::output::associate_phone_numbers_with_voice_connector_group_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AssociatePhoneNumbersWithVoiceConnectorOutput {
    /// <p>If the action fails for one or more of the phone numbers in the request, a list of the phone numbers is returned, along with error codes and error messages.</p>
    #[doc(hidden)]
    pub phone_number_errors: std::option::Option<std::vec::Vec<crate::model::PhoneNumberError>>,
}
impl AssociatePhoneNumbersWithVoiceConnectorOutput {
    /// <p>If the action fails for one or more of the phone numbers in the request, a list of the phone numbers is returned, along with error codes and error messages.</p>
    pub fn phone_number_errors(&self) -> std::option::Option<&[crate::model::PhoneNumberError]> {
        self.phone_number_errors.as_deref()
    }
}
/// See [`AssociatePhoneNumbersWithVoiceConnectorOutput`](crate::output::AssociatePhoneNumbersWithVoiceConnectorOutput).
pub mod associate_phone_numbers_with_voice_connector_output {

    /// A builder for [`AssociatePhoneNumbersWithVoiceConnectorOutput`](crate::output::AssociatePhoneNumbersWithVoiceConnectorOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) phone_number_errors:
            std::option::Option<std::vec::Vec<crate::model::PhoneNumberError>>,
    }
    impl Builder {
        /// Appends an item to `phone_number_errors`.
        ///
        /// To override the contents of this collection use [`set_phone_number_errors`](Self::set_phone_number_errors).
        ///
        /// <p>If the action fails for one or more of the phone numbers in the request, a list of the phone numbers is returned, along with error codes and error messages.</p>
        pub fn phone_number_errors(mut self, input: crate::model::PhoneNumberError) -> Self {
            let mut v = self.phone_number_errors.unwrap_or_default();
            v.push(input);
            self.phone_number_errors = Some(v);
            self
        }
        /// <p>If the action fails for one or more of the phone numbers in the request, a list of the phone numbers is returned, along with error codes and error messages.</p>
        pub fn set_phone_number_errors(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::PhoneNumberError>>,
        ) -> Self {
            self.phone_number_errors = input;
            self
        }
        /// Consumes the builder and constructs a [`AssociatePhoneNumbersWithVoiceConnectorOutput`](crate::output::AssociatePhoneNumbersWithVoiceConnectorOutput).
        pub fn build(self) -> crate::output::AssociatePhoneNumbersWithVoiceConnectorOutput {
            crate::output::AssociatePhoneNumbersWithVoiceConnectorOutput {
                phone_number_errors: self.phone_number_errors,
            }
        }
    }
}
impl AssociatePhoneNumbersWithVoiceConnectorOutput {
    /// Creates a new builder-style object to manufacture [`AssociatePhoneNumbersWithVoiceConnectorOutput`](crate::output::AssociatePhoneNumbersWithVoiceConnectorOutput).
    pub fn builder() -> crate::output::associate_phone_numbers_with_voice_connector_output::Builder
    {
        crate::output::associate_phone_numbers_with_voice_connector_output::Builder::default()
    }
}
