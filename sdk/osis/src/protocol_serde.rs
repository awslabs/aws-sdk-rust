// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn type_erase_result<O, E>(
    result: ::std::result::Result<O, E>,
) -> ::std::result::Result<
    ::aws_smithy_runtime_api::client::interceptors::context::Output,
    ::aws_smithy_runtime_api::client::orchestrator::OrchestratorError<::aws_smithy_runtime_api::client::interceptors::context::Error>,
>
where
    O: ::std::fmt::Debug + ::std::marker::Send + ::std::marker::Sync + 'static,
    E: ::std::error::Error + std::fmt::Debug + ::std::marker::Send + ::std::marker::Sync + 'static,
{
    result
        .map(|output| ::aws_smithy_runtime_api::client::interceptors::context::Output::erase(output))
        .map_err(|error| ::aws_smithy_runtime_api::client::interceptors::context::Error::erase(error))
        .map_err(::std::convert::Into::into)
}

pub fn parse_http_error_metadata(
    _response_status: u16,
    response_headers: &::aws_smithy_runtime_api::http::Headers,
    response_body: &[u8],
) -> Result<::aws_smithy_types::error::metadata::Builder, ::aws_smithy_json::deserialize::error::DeserializeError> {
    crate::json_errors::parse_error_metadata(response_body, response_headers)
}

pub(crate) mod shape_create_pipeline;

pub(crate) mod shape_delete_pipeline;

pub(crate) mod shape_get_pipeline;

pub(crate) mod shape_get_pipeline_blueprint;

pub(crate) mod shape_get_pipeline_change_progress;

pub(crate) mod shape_list_pipeline_blueprints;

pub(crate) mod shape_list_pipelines;

pub(crate) mod shape_list_tags_for_resource;

pub(crate) mod shape_start_pipeline;

pub(crate) mod shape_stop_pipeline;

pub(crate) mod shape_tag_resource;

pub(crate) mod shape_untag_resource;

pub(crate) mod shape_update_pipeline;

pub(crate) mod shape_validate_pipeline;

pub(crate) fn or_empty_doc(data: &[u8]) -> &[u8] {
    if data.is_empty() {
        b"{}"
    } else {
        data
    }
}

pub(crate) mod shape_access_denied_exception;

pub(crate) mod shape_conflict_exception;

pub(crate) mod shape_create_pipeline_input;

pub(crate) mod shape_disabled_operation_exception;

pub(crate) mod shape_internal_exception;

pub(crate) mod shape_invalid_pagination_token_exception;

pub(crate) mod shape_limit_exceeded_exception;

pub(crate) mod shape_resource_already_exists_exception;

pub(crate) mod shape_resource_not_found_exception;

pub(crate) mod shape_tag_resource_input;

pub(crate) mod shape_untag_resource_input;

pub(crate) mod shape_update_pipeline_input;

pub(crate) mod shape_validate_pipeline_input;

pub(crate) mod shape_validation_exception;

pub(crate) mod shape_buffer_options;

pub(crate) mod shape_change_progress_status_list;

pub(crate) mod shape_encryption_at_rest_options;

pub(crate) mod shape_log_publishing_options;

pub(crate) mod shape_pipeline;

pub(crate) mod shape_pipeline_blueprint;

pub(crate) mod shape_pipeline_blueprints_summary_list;

pub(crate) mod shape_pipeline_summary_list;

pub(crate) mod shape_tag;

pub(crate) mod shape_tag_list;

pub(crate) mod shape_validation_message_list;

pub(crate) mod shape_vpc_options;

pub(crate) mod shape_change_progress_status;

pub(crate) mod shape_cloud_watch_log_destination;

pub(crate) mod shape_ingest_endpoint_urls_list;

pub(crate) mod shape_pipeline_blueprint_summary;

pub(crate) mod shape_pipeline_destination_list;

pub(crate) mod shape_pipeline_status_reason;

pub(crate) mod shape_pipeline_summary;

pub(crate) mod shape_service_vpc_endpoints_list;

pub(crate) mod shape_validation_message;

pub(crate) mod shape_vpc_attachment_options;

pub(crate) mod shape_vpc_endpoints_list;

pub(crate) mod shape_change_progress_stage_list;

pub(crate) mod shape_pipeline_destination;

pub(crate) mod shape_service_vpc_endpoint;

pub(crate) mod shape_vpc_endpoint;

pub(crate) mod shape_change_progress_stage;

pub(crate) mod shape_security_group_ids;

pub(crate) mod shape_subnet_ids;
