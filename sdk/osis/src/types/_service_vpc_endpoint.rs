// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A container for information about VPC endpoints that were created to other services</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ServiceVpcEndpoint {
    /// <p>The name of the service for which a VPC endpoint was created.</p>
    pub service_name: ::std::option::Option<crate::types::VpcEndpointServiceName>,
    /// <p>The unique identifier of the VPC endpoint that was created.</p>
    pub vpc_endpoint_id: ::std::option::Option<::std::string::String>,
}
impl ServiceVpcEndpoint {
    /// <p>The name of the service for which a VPC endpoint was created.</p>
    pub fn service_name(&self) -> ::std::option::Option<&crate::types::VpcEndpointServiceName> {
        self.service_name.as_ref()
    }
    /// <p>The unique identifier of the VPC endpoint that was created.</p>
    pub fn vpc_endpoint_id(&self) -> ::std::option::Option<&str> {
        self.vpc_endpoint_id.as_deref()
    }
}
impl ServiceVpcEndpoint {
    /// Creates a new builder-style object to manufacture [`ServiceVpcEndpoint`](crate::types::ServiceVpcEndpoint).
    pub fn builder() -> crate::types::builders::ServiceVpcEndpointBuilder {
        crate::types::builders::ServiceVpcEndpointBuilder::default()
    }
}

/// A builder for [`ServiceVpcEndpoint`](crate::types::ServiceVpcEndpoint).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ServiceVpcEndpointBuilder {
    pub(crate) service_name: ::std::option::Option<crate::types::VpcEndpointServiceName>,
    pub(crate) vpc_endpoint_id: ::std::option::Option<::std::string::String>,
}
impl ServiceVpcEndpointBuilder {
    /// <p>The name of the service for which a VPC endpoint was created.</p>
    pub fn service_name(mut self, input: crate::types::VpcEndpointServiceName) -> Self {
        self.service_name = ::std::option::Option::Some(input);
        self
    }
    /// <p>The name of the service for which a VPC endpoint was created.</p>
    pub fn set_service_name(mut self, input: ::std::option::Option<crate::types::VpcEndpointServiceName>) -> Self {
        self.service_name = input;
        self
    }
    /// <p>The name of the service for which a VPC endpoint was created.</p>
    pub fn get_service_name(&self) -> &::std::option::Option<crate::types::VpcEndpointServiceName> {
        &self.service_name
    }
    /// <p>The unique identifier of the VPC endpoint that was created.</p>
    pub fn vpc_endpoint_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vpc_endpoint_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the VPC endpoint that was created.</p>
    pub fn set_vpc_endpoint_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vpc_endpoint_id = input;
        self
    }
    /// <p>The unique identifier of the VPC endpoint that was created.</p>
    pub fn get_vpc_endpoint_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.vpc_endpoint_id
    }
    /// Consumes the builder and constructs a [`ServiceVpcEndpoint`](crate::types::ServiceVpcEndpoint).
    pub fn build(self) -> crate::types::ServiceVpcEndpoint {
        crate::types::ServiceVpcEndpoint {
            service_name: self.service_name,
            vpc_endpoint_id: self.vpc_endpoint_id,
        }
    }
}
