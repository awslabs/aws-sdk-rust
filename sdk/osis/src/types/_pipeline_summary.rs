// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Summary information for an OpenSearch Ingestion pipeline.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PipelineSummary {
    /// <p>The current status of the pipeline.</p>
    pub status: ::std::option::Option<crate::types::PipelineStatus>,
    /// <p>Information about a pipeline's current status.</p>
    pub status_reason: ::std::option::Option<crate::types::PipelineStatusReason>,
    /// <p>The name of the pipeline.</p>
    pub pipeline_name: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the pipeline.</p>
    pub pipeline_arn: ::std::option::Option<::std::string::String>,
    /// <p>The minimum pipeline capacity, in Ingestion Compute Units (ICUs).</p>
    pub min_units: ::std::option::Option<i32>,
    /// <p>The maximum pipeline capacity, in Ingestion Compute Units (ICUs).</p>
    pub max_units: ::std::option::Option<i32>,
    /// <p>The date and time when the pipeline was created.</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The date and time when the pipeline was last updated.</p>
    pub last_updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>A list of destinations to which the pipeline writes data.</p>
    pub destinations: ::std::option::Option<::std::vec::Vec<crate::types::PipelineDestination>>,
    /// <p>A list of tags associated with the given pipeline.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl PipelineSummary {
    /// <p>The current status of the pipeline.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::PipelineStatus> {
        self.status.as_ref()
    }
    /// <p>Information about a pipeline's current status.</p>
    pub fn status_reason(&self) -> ::std::option::Option<&crate::types::PipelineStatusReason> {
        self.status_reason.as_ref()
    }
    /// <p>The name of the pipeline.</p>
    pub fn pipeline_name(&self) -> ::std::option::Option<&str> {
        self.pipeline_name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the pipeline.</p>
    pub fn pipeline_arn(&self) -> ::std::option::Option<&str> {
        self.pipeline_arn.as_deref()
    }
    /// <p>The minimum pipeline capacity, in Ingestion Compute Units (ICUs).</p>
    pub fn min_units(&self) -> ::std::option::Option<i32> {
        self.min_units
    }
    /// <p>The maximum pipeline capacity, in Ingestion Compute Units (ICUs).</p>
    pub fn max_units(&self) -> ::std::option::Option<i32> {
        self.max_units
    }
    /// <p>The date and time when the pipeline was created.</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The date and time when the pipeline was last updated.</p>
    pub fn last_updated_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_updated_at.as_ref()
    }
    /// <p>A list of destinations to which the pipeline writes data.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.destinations.is_none()`.
    pub fn destinations(&self) -> &[crate::types::PipelineDestination] {
        self.destinations.as_deref().unwrap_or_default()
    }
    /// <p>A list of tags associated with the given pipeline.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
}
impl PipelineSummary {
    /// Creates a new builder-style object to manufacture [`PipelineSummary`](crate::types::PipelineSummary).
    pub fn builder() -> crate::types::builders::PipelineSummaryBuilder {
        crate::types::builders::PipelineSummaryBuilder::default()
    }
}

/// A builder for [`PipelineSummary`](crate::types::PipelineSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PipelineSummaryBuilder {
    pub(crate) status: ::std::option::Option<crate::types::PipelineStatus>,
    pub(crate) status_reason: ::std::option::Option<crate::types::PipelineStatusReason>,
    pub(crate) pipeline_name: ::std::option::Option<::std::string::String>,
    pub(crate) pipeline_arn: ::std::option::Option<::std::string::String>,
    pub(crate) min_units: ::std::option::Option<i32>,
    pub(crate) max_units: ::std::option::Option<i32>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) destinations: ::std::option::Option<::std::vec::Vec<crate::types::PipelineDestination>>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl PipelineSummaryBuilder {
    /// <p>The current status of the pipeline.</p>
    pub fn status(mut self, input: crate::types::PipelineStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the pipeline.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::PipelineStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current status of the pipeline.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::PipelineStatus> {
        &self.status
    }
    /// <p>Information about a pipeline's current status.</p>
    pub fn status_reason(mut self, input: crate::types::PipelineStatusReason) -> Self {
        self.status_reason = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about a pipeline's current status.</p>
    pub fn set_status_reason(mut self, input: ::std::option::Option<crate::types::PipelineStatusReason>) -> Self {
        self.status_reason = input;
        self
    }
    /// <p>Information about a pipeline's current status.</p>
    pub fn get_status_reason(&self) -> &::std::option::Option<crate::types::PipelineStatusReason> {
        &self.status_reason
    }
    /// <p>The name of the pipeline.</p>
    pub fn pipeline_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.pipeline_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the pipeline.</p>
    pub fn set_pipeline_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.pipeline_name = input;
        self
    }
    /// <p>The name of the pipeline.</p>
    pub fn get_pipeline_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.pipeline_name
    }
    /// <p>The Amazon Resource Name (ARN) of the pipeline.</p>
    pub fn pipeline_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.pipeline_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the pipeline.</p>
    pub fn set_pipeline_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.pipeline_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the pipeline.</p>
    pub fn get_pipeline_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.pipeline_arn
    }
    /// <p>The minimum pipeline capacity, in Ingestion Compute Units (ICUs).</p>
    pub fn min_units(mut self, input: i32) -> Self {
        self.min_units = ::std::option::Option::Some(input);
        self
    }
    /// <p>The minimum pipeline capacity, in Ingestion Compute Units (ICUs).</p>
    pub fn set_min_units(mut self, input: ::std::option::Option<i32>) -> Self {
        self.min_units = input;
        self
    }
    /// <p>The minimum pipeline capacity, in Ingestion Compute Units (ICUs).</p>
    pub fn get_min_units(&self) -> &::std::option::Option<i32> {
        &self.min_units
    }
    /// <p>The maximum pipeline capacity, in Ingestion Compute Units (ICUs).</p>
    pub fn max_units(mut self, input: i32) -> Self {
        self.max_units = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum pipeline capacity, in Ingestion Compute Units (ICUs).</p>
    pub fn set_max_units(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_units = input;
        self
    }
    /// <p>The maximum pipeline capacity, in Ingestion Compute Units (ICUs).</p>
    pub fn get_max_units(&self) -> &::std::option::Option<i32> {
        &self.max_units
    }
    /// <p>The date and time when the pipeline was created.</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time when the pipeline was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The date and time when the pipeline was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The date and time when the pipeline was last updated.</p>
    pub fn last_updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time when the pipeline was last updated.</p>
    pub fn set_last_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_updated_at = input;
        self
    }
    /// <p>The date and time when the pipeline was last updated.</p>
    pub fn get_last_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_updated_at
    }
    /// Appends an item to `destinations`.
    ///
    /// To override the contents of this collection use [`set_destinations`](Self::set_destinations).
    ///
    /// <p>A list of destinations to which the pipeline writes data.</p>
    pub fn destinations(mut self, input: crate::types::PipelineDestination) -> Self {
        let mut v = self.destinations.unwrap_or_default();
        v.push(input);
        self.destinations = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of destinations to which the pipeline writes data.</p>
    pub fn set_destinations(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::PipelineDestination>>) -> Self {
        self.destinations = input;
        self
    }
    /// <p>A list of destinations to which the pipeline writes data.</p>
    pub fn get_destinations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::PipelineDestination>> {
        &self.destinations
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A list of tags associated with the given pipeline.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of tags associated with the given pipeline.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>A list of tags associated with the given pipeline.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`PipelineSummary`](crate::types::PipelineSummary).
    pub fn build(self) -> crate::types::PipelineSummary {
        crate::types::PipelineSummary {
            status: self.status,
            status_reason: self.status_reason,
            pipeline_name: self.pipeline_name,
            pipeline_arn: self.pipeline_arn,
            min_units: self.min_units,
            max_units: self.max_units,
            created_at: self.created_at,
            last_updated_at: self.last_updated_at,
            destinations: self.destinations,
            tags: self.tags,
        }
    }
}
