// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object representing the destination of a pipeline.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PipelineDestination {
    /// <p>The name of the service receiving data from the pipeline.</p>
    pub service_name: ::std::option::Option<::std::string::String>,
    /// <p>The endpoint receiving data from the pipeline.</p>
    pub endpoint: ::std::option::Option<::std::string::String>,
}
impl PipelineDestination {
    /// <p>The name of the service receiving data from the pipeline.</p>
    pub fn service_name(&self) -> ::std::option::Option<&str> {
        self.service_name.as_deref()
    }
    /// <p>The endpoint receiving data from the pipeline.</p>
    pub fn endpoint(&self) -> ::std::option::Option<&str> {
        self.endpoint.as_deref()
    }
}
impl PipelineDestination {
    /// Creates a new builder-style object to manufacture [`PipelineDestination`](crate::types::PipelineDestination).
    pub fn builder() -> crate::types::builders::PipelineDestinationBuilder {
        crate::types::builders::PipelineDestinationBuilder::default()
    }
}

/// A builder for [`PipelineDestination`](crate::types::PipelineDestination).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PipelineDestinationBuilder {
    pub(crate) service_name: ::std::option::Option<::std::string::String>,
    pub(crate) endpoint: ::std::option::Option<::std::string::String>,
}
impl PipelineDestinationBuilder {
    /// <p>The name of the service receiving data from the pipeline.</p>
    pub fn service_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.service_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the service receiving data from the pipeline.</p>
    pub fn set_service_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.service_name = input;
        self
    }
    /// <p>The name of the service receiving data from the pipeline.</p>
    pub fn get_service_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.service_name
    }
    /// <p>The endpoint receiving data from the pipeline.</p>
    pub fn endpoint(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.endpoint = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The endpoint receiving data from the pipeline.</p>
    pub fn set_endpoint(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.endpoint = input;
        self
    }
    /// <p>The endpoint receiving data from the pipeline.</p>
    pub fn get_endpoint(&self) -> &::std::option::Option<::std::string::String> {
        &self.endpoint
    }
    /// Consumes the builder and constructs a [`PipelineDestination`](crate::types::PipelineDestination).
    pub fn build(self) -> crate::types::PipelineDestination {
        crate::types::PipelineDestination {
            service_name: self.service_name,
            endpoint: self.endpoint,
        }
    }
}
