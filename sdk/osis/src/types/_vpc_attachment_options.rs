// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Options for attaching a VPC to pipeline.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct VpcAttachmentOptions {
    /// <p>Whether a VPC is attached to the pipeline.</p>
    pub attach_to_vpc: bool,
    /// <p>The CIDR block to be reserved for OpenSearch Ingestion to create elastic network interfaces (ENIs).</p>
    pub cidr_block: ::std::option::Option<::std::string::String>,
}
impl VpcAttachmentOptions {
    /// <p>Whether a VPC is attached to the pipeline.</p>
    pub fn attach_to_vpc(&self) -> bool {
        self.attach_to_vpc
    }
    /// <p>The CIDR block to be reserved for OpenSearch Ingestion to create elastic network interfaces (ENIs).</p>
    pub fn cidr_block(&self) -> ::std::option::Option<&str> {
        self.cidr_block.as_deref()
    }
}
impl VpcAttachmentOptions {
    /// Creates a new builder-style object to manufacture [`VpcAttachmentOptions`](crate::types::VpcAttachmentOptions).
    pub fn builder() -> crate::types::builders::VpcAttachmentOptionsBuilder {
        crate::types::builders::VpcAttachmentOptionsBuilder::default()
    }
}

/// A builder for [`VpcAttachmentOptions`](crate::types::VpcAttachmentOptions).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct VpcAttachmentOptionsBuilder {
    pub(crate) attach_to_vpc: ::std::option::Option<bool>,
    pub(crate) cidr_block: ::std::option::Option<::std::string::String>,
}
impl VpcAttachmentOptionsBuilder {
    /// <p>Whether a VPC is attached to the pipeline.</p>
    /// This field is required.
    pub fn attach_to_vpc(mut self, input: bool) -> Self {
        self.attach_to_vpc = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether a VPC is attached to the pipeline.</p>
    pub fn set_attach_to_vpc(mut self, input: ::std::option::Option<bool>) -> Self {
        self.attach_to_vpc = input;
        self
    }
    /// <p>Whether a VPC is attached to the pipeline.</p>
    pub fn get_attach_to_vpc(&self) -> &::std::option::Option<bool> {
        &self.attach_to_vpc
    }
    /// <p>The CIDR block to be reserved for OpenSearch Ingestion to create elastic network interfaces (ENIs).</p>
    pub fn cidr_block(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cidr_block = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The CIDR block to be reserved for OpenSearch Ingestion to create elastic network interfaces (ENIs).</p>
    pub fn set_cidr_block(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cidr_block = input;
        self
    }
    /// <p>The CIDR block to be reserved for OpenSearch Ingestion to create elastic network interfaces (ENIs).</p>
    pub fn get_cidr_block(&self) -> &::std::option::Option<::std::string::String> {
        &self.cidr_block
    }
    /// Consumes the builder and constructs a [`VpcAttachmentOptions`](crate::types::VpcAttachmentOptions).
    /// This method will fail if any of the following fields are not set:
    /// - [`attach_to_vpc`](crate::types::builders::VpcAttachmentOptionsBuilder::attach_to_vpc)
    pub fn build(self) -> ::std::result::Result<crate::types::VpcAttachmentOptions, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::VpcAttachmentOptions {
            attach_to_vpc: self.attach_to_vpc.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "attach_to_vpc",
                    "attach_to_vpc was not specified but it is required when building VpcAttachmentOptions",
                )
            })?,
            cidr_block: self.cidr_block,
        })
    }
}
