// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListPipelineBlueprintsOutput {
    /// <p>A list of available blueprints for Data Prepper.</p>
    pub blueprints: ::std::option::Option<::std::vec::Vec<crate::types::PipelineBlueprintSummary>>,
    _request_id: Option<String>,
}
impl ListPipelineBlueprintsOutput {
    /// <p>A list of available blueprints for Data Prepper.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.blueprints.is_none()`.
    pub fn blueprints(&self) -> &[crate::types::PipelineBlueprintSummary] {
        self.blueprints.as_deref().unwrap_or_default()
    }
}
impl ::aws_http::request_id::RequestId for ListPipelineBlueprintsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListPipelineBlueprintsOutput {
    /// Creates a new builder-style object to manufacture [`ListPipelineBlueprintsOutput`](crate::operation::list_pipeline_blueprints::ListPipelineBlueprintsOutput).
    pub fn builder() -> crate::operation::list_pipeline_blueprints::builders::ListPipelineBlueprintsOutputBuilder {
        crate::operation::list_pipeline_blueprints::builders::ListPipelineBlueprintsOutputBuilder::default()
    }
}

/// A builder for [`ListPipelineBlueprintsOutput`](crate::operation::list_pipeline_blueprints::ListPipelineBlueprintsOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListPipelineBlueprintsOutputBuilder {
    pub(crate) blueprints: ::std::option::Option<::std::vec::Vec<crate::types::PipelineBlueprintSummary>>,
    _request_id: Option<String>,
}
impl ListPipelineBlueprintsOutputBuilder {
    /// Appends an item to `blueprints`.
    ///
    /// To override the contents of this collection use [`set_blueprints`](Self::set_blueprints).
    ///
    /// <p>A list of available blueprints for Data Prepper.</p>
    pub fn blueprints(mut self, input: crate::types::PipelineBlueprintSummary) -> Self {
        let mut v = self.blueprints.unwrap_or_default();
        v.push(input);
        self.blueprints = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of available blueprints for Data Prepper.</p>
    pub fn set_blueprints(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::PipelineBlueprintSummary>>) -> Self {
        self.blueprints = input;
        self
    }
    /// <p>A list of available blueprints for Data Prepper.</p>
    pub fn get_blueprints(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::PipelineBlueprintSummary>> {
        &self.blueprints
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListPipelineBlueprintsOutput`](crate::operation::list_pipeline_blueprints::ListPipelineBlueprintsOutput).
    pub fn build(self) -> crate::operation::list_pipeline_blueprints::ListPipelineBlueprintsOutput {
        crate::operation::list_pipeline_blueprints::ListPipelineBlueprintsOutput {
            blueprints: self.blueprints,
            _request_id: self._request_id,
        }
    }
}
