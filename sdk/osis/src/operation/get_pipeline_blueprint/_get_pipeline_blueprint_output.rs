// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetPipelineBlueprintOutput {
    /// <p>The requested blueprint in YAML format.</p>
    pub blueprint: ::std::option::Option<crate::types::PipelineBlueprint>,
    /// <p>The format of the blueprint.</p>
    pub format: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl GetPipelineBlueprintOutput {
    /// <p>The requested blueprint in YAML format.</p>
    pub fn blueprint(&self) -> ::std::option::Option<&crate::types::PipelineBlueprint> {
        self.blueprint.as_ref()
    }
    /// <p>The format of the blueprint.</p>
    pub fn format(&self) -> ::std::option::Option<&str> {
        self.format.as_deref()
    }
}
impl ::aws_types::request_id::RequestId for GetPipelineBlueprintOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetPipelineBlueprintOutput {
    /// Creates a new builder-style object to manufacture [`GetPipelineBlueprintOutput`](crate::operation::get_pipeline_blueprint::GetPipelineBlueprintOutput).
    pub fn builder() -> crate::operation::get_pipeline_blueprint::builders::GetPipelineBlueprintOutputBuilder {
        crate::operation::get_pipeline_blueprint::builders::GetPipelineBlueprintOutputBuilder::default()
    }
}

/// A builder for [`GetPipelineBlueprintOutput`](crate::operation::get_pipeline_blueprint::GetPipelineBlueprintOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetPipelineBlueprintOutputBuilder {
    pub(crate) blueprint: ::std::option::Option<crate::types::PipelineBlueprint>,
    pub(crate) format: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl GetPipelineBlueprintOutputBuilder {
    /// <p>The requested blueprint in YAML format.</p>
    pub fn blueprint(mut self, input: crate::types::PipelineBlueprint) -> Self {
        self.blueprint = ::std::option::Option::Some(input);
        self
    }
    /// <p>The requested blueprint in YAML format.</p>
    pub fn set_blueprint(mut self, input: ::std::option::Option<crate::types::PipelineBlueprint>) -> Self {
        self.blueprint = input;
        self
    }
    /// <p>The requested blueprint in YAML format.</p>
    pub fn get_blueprint(&self) -> &::std::option::Option<crate::types::PipelineBlueprint> {
        &self.blueprint
    }
    /// <p>The format of the blueprint.</p>
    pub fn format(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.format = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The format of the blueprint.</p>
    pub fn set_format(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.format = input;
        self
    }
    /// <p>The format of the blueprint.</p>
    pub fn get_format(&self) -> &::std::option::Option<::std::string::String> {
        &self.format
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetPipelineBlueprintOutput`](crate::operation::get_pipeline_blueprint::GetPipelineBlueprintOutput).
    pub fn build(self) -> crate::operation::get_pipeline_blueprint::GetPipelineBlueprintOutput {
        crate::operation::get_pipeline_blueprint::GetPipelineBlueprintOutput {
            blueprint: self.blueprint,
            format: self.format,
            _request_id: self._request_id,
        }
    }
}
