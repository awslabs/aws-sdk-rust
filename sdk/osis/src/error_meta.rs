// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum Error {
    /// <p>You don't have permissions to access the resource.</p>
    AccessDeniedException(crate::types::error::AccessDeniedException),
    /// <p>The client attempted to remove a resource that is currently in use.</p>
    ConflictException(crate::types::error::ConflictException),
    /// <p>Exception is thrown when an operation has been disabled.</p>
    DisabledOperationException(crate::types::error::DisabledOperationException),
    /// <p>The request failed because of an unknown error, exception, or failure (the failure is internal to the service).</p>
    InternalException(crate::types::error::InternalException),
    /// <p>An invalid pagination token provided in the request.</p>
    InvalidPaginationTokenException(crate::types::error::InvalidPaginationTokenException),
    /// <p>You attempted to create more than the allowed number of tags.</p>
    LimitExceededException(crate::types::error::LimitExceededException),
    /// <p>You attempted to create a resource that already exists.</p>
    ResourceAlreadyExistsException(crate::types::error::ResourceAlreadyExistsException),
    /// <p>You attempted to access or delete a resource that does not exist.</p>
    ResourceNotFoundException(crate::types::error::ResourceNotFoundException),
    /// <p>An exception for missing or invalid input fields.</p>
    ValidationException(crate::types::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    #[deprecated(note = "Matching `Unhandled` directly is not forwards compatible. Instead, match using a \
    variable wildcard pattern and check `.code()`:
     \
    &nbsp;&nbsp;&nbsp;`err if err.code() == Some(\"SpecificExceptionCode\") => { /* handle the error */ }`
     \
    See [`ProvideErrorMetadata`](#impl-ProvideErrorMetadata-for-Error) for what information is available for the error.")]
    Unhandled(crate::error::sealed_unhandled::Unhandled),
}
impl ::std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::DisabledOperationException(inner) => inner.fmt(f),
            Error::InternalException(inner) => inner.fmt(f),
            Error::InvalidPaginationTokenException(inner) => inner.fmt(f),
            Error::LimitExceededException(inner) => inner.fmt(f),
            Error::ResourceAlreadyExistsException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(_) => {
                if let ::std::option::Option::Some(code) = ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self) {
                    write!(f, "unhandled error ({code})")
                } else {
                    f.write_str("unhandled error")
                }
            }
        }
    }
}
impl From<::aws_smithy_types::error::operation::BuildError> for Error {
    fn from(value: ::aws_smithy_types::error::operation::BuildError) -> Self {
        Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
            source: value.into(),
            meta: ::std::default::Default::default(),
        })
    }
}
impl ::aws_smithy_types::error::metadata::ProvideErrorMetadata for Error {
    fn meta(&self) -> &::aws_smithy_types::error::metadata::ErrorMetadata {
        match self {
            Self::AccessDeniedException(inner) => inner.meta(),
            Self::ConflictException(inner) => inner.meta(),
            Self::DisabledOperationException(inner) => inner.meta(),
            Self::InternalException(inner) => inner.meta(),
            Self::InvalidPaginationTokenException(inner) => inner.meta(),
            Self::LimitExceededException(inner) => inner.meta(),
            Self::ResourceAlreadyExistsException(inner) => inner.meta(),
            Self::ResourceNotFoundException(inner) => inner.meta(),
            Self::ValidationException(inner) => inner.meta(),
            Self::Unhandled(inner) => &inner.meta,
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_pipeline::CreatePipelineError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_pipeline::CreatePipelineError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_pipeline::CreatePipelineError> for Error {
    fn from(err: crate::operation::create_pipeline::CreatePipelineError) -> Self {
        match err {
            crate::operation::create_pipeline::CreatePipelineError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_pipeline::CreatePipelineError::DisabledOperationException(inner) => Error::DisabledOperationException(inner),
            crate::operation::create_pipeline::CreatePipelineError::InternalException(inner) => Error::InternalException(inner),
            crate::operation::create_pipeline::CreatePipelineError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::create_pipeline::CreatePipelineError::ResourceAlreadyExistsException(inner) => {
                Error::ResourceAlreadyExistsException(inner)
            }
            crate::operation::create_pipeline::CreatePipelineError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_pipeline::CreatePipelineError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_pipeline::CreatePipelineError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_pipeline::DeletePipelineError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_pipeline::DeletePipelineError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_pipeline::DeletePipelineError> for Error {
    fn from(err: crate::operation::delete_pipeline::DeletePipelineError) -> Self {
        match err {
            crate::operation::delete_pipeline::DeletePipelineError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_pipeline::DeletePipelineError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_pipeline::DeletePipelineError::DisabledOperationException(inner) => Error::DisabledOperationException(inner),
            crate::operation::delete_pipeline::DeletePipelineError::InternalException(inner) => Error::InternalException(inner),
            crate::operation::delete_pipeline::DeletePipelineError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_pipeline::DeletePipelineError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_pipeline::DeletePipelineError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_pipeline::GetPipelineError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_pipeline::GetPipelineError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_pipeline::GetPipelineError> for Error {
    fn from(err: crate::operation::get_pipeline::GetPipelineError) -> Self {
        match err {
            crate::operation::get_pipeline::GetPipelineError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_pipeline::GetPipelineError::DisabledOperationException(inner) => Error::DisabledOperationException(inner),
            crate::operation::get_pipeline::GetPipelineError::InternalException(inner) => Error::InternalException(inner),
            crate::operation::get_pipeline::GetPipelineError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_pipeline::GetPipelineError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_pipeline::GetPipelineError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_pipeline_blueprint::GetPipelineBlueprintError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_pipeline_blueprint::GetPipelineBlueprintError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_pipeline_blueprint::GetPipelineBlueprintError> for Error {
    fn from(err: crate::operation::get_pipeline_blueprint::GetPipelineBlueprintError) -> Self {
        match err {
            crate::operation::get_pipeline_blueprint::GetPipelineBlueprintError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_pipeline_blueprint::GetPipelineBlueprintError::DisabledOperationException(inner) => {
                Error::DisabledOperationException(inner)
            }
            crate::operation::get_pipeline_blueprint::GetPipelineBlueprintError::InternalException(inner) => Error::InternalException(inner),
            crate::operation::get_pipeline_blueprint::GetPipelineBlueprintError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_pipeline_blueprint::GetPipelineBlueprintError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_pipeline_blueprint::GetPipelineBlueprintError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_pipeline_change_progress::GetPipelineChangeProgressError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_pipeline_change_progress::GetPipelineChangeProgressError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_pipeline_change_progress::GetPipelineChangeProgressError> for Error {
    fn from(err: crate::operation::get_pipeline_change_progress::GetPipelineChangeProgressError) -> Self {
        match err {
            crate::operation::get_pipeline_change_progress::GetPipelineChangeProgressError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_pipeline_change_progress::GetPipelineChangeProgressError::DisabledOperationException(inner) => {
                Error::DisabledOperationException(inner)
            }
            crate::operation::get_pipeline_change_progress::GetPipelineChangeProgressError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::operation::get_pipeline_change_progress::GetPipelineChangeProgressError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_pipeline_change_progress::GetPipelineChangeProgressError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_pipeline_change_progress::GetPipelineChangeProgressError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_pipeline_blueprints::ListPipelineBlueprintsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_pipeline_blueprints::ListPipelineBlueprintsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_pipeline_blueprints::ListPipelineBlueprintsError> for Error {
    fn from(err: crate::operation::list_pipeline_blueprints::ListPipelineBlueprintsError) -> Self {
        match err {
            crate::operation::list_pipeline_blueprints::ListPipelineBlueprintsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_pipeline_blueprints::ListPipelineBlueprintsError::DisabledOperationException(inner) => {
                Error::DisabledOperationException(inner)
            }
            crate::operation::list_pipeline_blueprints::ListPipelineBlueprintsError::InternalException(inner) => Error::InternalException(inner),
            crate::operation::list_pipeline_blueprints::ListPipelineBlueprintsError::InvalidPaginationTokenException(inner) => {
                Error::InvalidPaginationTokenException(inner)
            }
            crate::operation::list_pipeline_blueprints::ListPipelineBlueprintsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_pipeline_blueprints::ListPipelineBlueprintsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_pipelines::ListPipelinesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_pipelines::ListPipelinesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_pipelines::ListPipelinesError> for Error {
    fn from(err: crate::operation::list_pipelines::ListPipelinesError) -> Self {
        match err {
            crate::operation::list_pipelines::ListPipelinesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_pipelines::ListPipelinesError::DisabledOperationException(inner) => Error::DisabledOperationException(inner),
            crate::operation::list_pipelines::ListPipelinesError::InternalException(inner) => Error::InternalException(inner),
            crate::operation::list_pipelines::ListPipelinesError::InvalidPaginationTokenException(inner) => {
                Error::InvalidPaginationTokenException(inner)
            }
            crate::operation::list_pipelines::ListPipelinesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_pipelines::ListPipelinesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_tags_for_resource::ListTagsForResourceError> for Error {
    fn from(err: crate::operation::list_tags_for_resource::ListTagsForResourceError) -> Self {
        match err {
            crate::operation::list_tags_for_resource::ListTagsForResourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::DisabledOperationException(inner) => {
                Error::DisabledOperationException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::InternalException(inner) => Error::InternalException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_pipeline::StartPipelineError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_pipeline::StartPipelineError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::start_pipeline::StartPipelineError> for Error {
    fn from(err: crate::operation::start_pipeline::StartPipelineError) -> Self {
        match err {
            crate::operation::start_pipeline::StartPipelineError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::start_pipeline::StartPipelineError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::start_pipeline::StartPipelineError::DisabledOperationException(inner) => Error::DisabledOperationException(inner),
            crate::operation::start_pipeline::StartPipelineError::InternalException(inner) => Error::InternalException(inner),
            crate::operation::start_pipeline::StartPipelineError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::start_pipeline::StartPipelineError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::start_pipeline::StartPipelineError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::stop_pipeline::StopPipelineError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::stop_pipeline::StopPipelineError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::stop_pipeline::StopPipelineError> for Error {
    fn from(err: crate::operation::stop_pipeline::StopPipelineError) -> Self {
        match err {
            crate::operation::stop_pipeline::StopPipelineError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::stop_pipeline::StopPipelineError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::stop_pipeline::StopPipelineError::DisabledOperationException(inner) => Error::DisabledOperationException(inner),
            crate::operation::stop_pipeline::StopPipelineError::InternalException(inner) => Error::InternalException(inner),
            crate::operation::stop_pipeline::StopPipelineError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::stop_pipeline::StopPipelineError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::stop_pipeline::StopPipelineError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::tag_resource::TagResourceError> for Error {
    fn from(err: crate::operation::tag_resource::TagResourceError) -> Self {
        match err {
            crate::operation::tag_resource::TagResourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::tag_resource::TagResourceError::DisabledOperationException(inner) => Error::DisabledOperationException(inner),
            crate::operation::tag_resource::TagResourceError::InternalException(inner) => Error::InternalException(inner),
            crate::operation::tag_resource::TagResourceError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::tag_resource::TagResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::tag_resource::TagResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::tag_resource::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::untag_resource::UntagResourceError> for Error {
    fn from(err: crate::operation::untag_resource::UntagResourceError) -> Self {
        match err {
            crate::operation::untag_resource::UntagResourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::untag_resource::UntagResourceError::DisabledOperationException(inner) => Error::DisabledOperationException(inner),
            crate::operation::untag_resource::UntagResourceError::InternalException(inner) => Error::InternalException(inner),
            crate::operation::untag_resource::UntagResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::untag_resource::UntagResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::untag_resource::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_pipeline::UpdatePipelineError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_pipeline::UpdatePipelineError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_pipeline::UpdatePipelineError> for Error {
    fn from(err: crate::operation::update_pipeline::UpdatePipelineError) -> Self {
        match err {
            crate::operation::update_pipeline::UpdatePipelineError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_pipeline::UpdatePipelineError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_pipeline::UpdatePipelineError::DisabledOperationException(inner) => Error::DisabledOperationException(inner),
            crate::operation::update_pipeline::UpdatePipelineError::InternalException(inner) => Error::InternalException(inner),
            crate::operation::update_pipeline::UpdatePipelineError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_pipeline::UpdatePipelineError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_pipeline::UpdatePipelineError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::validate_pipeline::ValidatePipelineError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::validate_pipeline::ValidatePipelineError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::validate_pipeline::ValidatePipelineError> for Error {
    fn from(err: crate::operation::validate_pipeline::ValidatePipelineError) -> Self {
        match err {
            crate::operation::validate_pipeline::ValidatePipelineError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::validate_pipeline::ValidatePipelineError::DisabledOperationException(inner) => Error::DisabledOperationException(inner),
            crate::operation::validate_pipeline::ValidatePipelineError::InternalException(inner) => Error::InternalException(inner),
            crate::operation::validate_pipeline::ValidatePipelineError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::validate_pipeline::ValidatePipelineError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl ::std::error::Error for Error {
    fn source(&self) -> std::option::Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            Error::AccessDeniedException(inner) => inner.source(),
            Error::ConflictException(inner) => inner.source(),
            Error::DisabledOperationException(inner) => inner.source(),
            Error::InternalException(inner) => inner.source(),
            Error::InvalidPaginationTokenException(inner) => inner.source(),
            Error::LimitExceededException(inner) => inner.source(),
            Error::ResourceAlreadyExistsException(inner) => inner.source(),
            Error::ResourceNotFoundException(inner) => inner.source(),
            Error::ValidationException(inner) => inner.source(),
            Error::Unhandled(inner) => ::std::option::Option::Some(&*inner.source),
        }
    }
}
impl ::aws_types::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::DisabledOperationException(e) => e.request_id(),
            Self::InternalException(e) => e.request_id(),
            Self::InvalidPaginationTokenException(e) => e.request_id(),
            Self::LimitExceededException(e) => e.request_id(),
            Self::ResourceAlreadyExistsException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.meta.request_id(),
        }
    }
}
