// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn de_pipeline<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::Pipeline>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::PipelineBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "PipelineName" => {
                            builder = builder.set_pipeline_name(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "PipelineArn" => {
                            builder = builder.set_pipeline_arn(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "MinUnits" => {
                            builder = builder.set_min_units(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "MaxUnits" => {
                            builder = builder.set_max_units(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "Status" => {
                            builder = builder.set_status(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::PipelineStatus::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "StatusReason" => {
                            builder =
                                builder.set_status_reason(crate::protocol_serde::shape_pipeline_status_reason::de_pipeline_status_reason(tokens)?);
                        }
                        "PipelineConfigurationBody" => {
                            builder = builder.set_pipeline_configuration_body(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "CreatedAt" => {
                            builder = builder.set_created_at(::aws_smithy_json::deserialize::token::expect_timestamp_or_null(
                                tokens.next(),
                                ::aws_smithy_types::date_time::Format::EpochSeconds,
                            )?);
                        }
                        "LastUpdatedAt" => {
                            builder = builder.set_last_updated_at(::aws_smithy_json::deserialize::token::expect_timestamp_or_null(
                                tokens.next(),
                                ::aws_smithy_types::date_time::Format::EpochSeconds,
                            )?);
                        }
                        "IngestEndpointUrls" => {
                            builder = builder.set_ingest_endpoint_urls(
                                crate::protocol_serde::shape_ingest_endpoint_urls_list::de_ingest_endpoint_urls_list(tokens)?,
                            );
                        }
                        "LogPublishingOptions" => {
                            builder = builder
                                .set_log_publishing_options(crate::protocol_serde::shape_log_publishing_options::de_log_publishing_options(tokens)?);
                        }
                        "VpcEndpoints" => {
                            builder = builder.set_vpc_endpoints(crate::protocol_serde::shape_vpc_endpoints_list::de_vpc_endpoints_list(tokens)?);
                        }
                        "BufferOptions" => {
                            builder = builder.set_buffer_options(crate::protocol_serde::shape_buffer_options::de_buffer_options(tokens)?);
                        }
                        "EncryptionAtRestOptions" => {
                            builder = builder.set_encryption_at_rest_options(
                                crate::protocol_serde::shape_encryption_at_rest_options::de_encryption_at_rest_options(tokens)?,
                            );
                        }
                        "ServiceVpcEndpoints" => {
                            builder = builder.set_service_vpc_endpoints(
                                crate::protocol_serde::shape_service_vpc_endpoints_list::de_service_vpc_endpoints_list(tokens)?,
                            );
                        }
                        "Destinations" => {
                            builder = builder.set_destinations(crate::protocol_serde::shape_pipeline_destination_list::de_pipeline_destination_list(
                                tokens,
                            )?);
                        }
                        "Tags" => {
                            builder = builder.set_tags(crate::protocol_serde::shape_tag_list::de_tag_list(tokens)?);
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
