// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_pipeline_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_pipeline::CreatePipelineInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.log_publishing_options {
        #[allow(unused_mut)]
        let mut object_2 = object.key("LogPublishingOptions").start_object();
        crate::protocol_serde::shape_log_publishing_options::ser_log_publishing_options(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.max_units {
        object.key("MaxUnits").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_3).into()),
        );
    }
    if let Some(var_4) = &input.min_units {
        object.key("MinUnits").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_4).into()),
        );
    }
    if let Some(var_5) = &input.pipeline_configuration_body {
        object.key("PipelineConfigurationBody").string(var_5.as_str());
    }
    if let Some(var_6) = &input.pipeline_name {
        object.key("PipelineName").string(var_6.as_str());
    }
    if let Some(var_7) = &input.tags {
        let mut array_8 = object.key("Tags").start_array();
        for item_9 in var_7 {
            {
                #[allow(unused_mut)]
                let mut object_10 = array_8.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_10, item_9)?;
                object_10.finish();
            }
        }
        array_8.finish();
    }
    if let Some(var_11) = &input.vpc_options {
        #[allow(unused_mut)]
        let mut object_12 = object.key("VpcOptions").start_object();
        crate::protocol_serde::shape_vpc_options::ser_vpc_options(&mut object_12, var_11)?;
        object_12.finish();
    }
    Ok(())
}
