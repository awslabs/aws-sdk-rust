// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdatePrivateDnsNamespaceInput {
    /// <p>The ID of the namespace that you want to update.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>A unique string that identifies the request and that allows failed <code>UpdatePrivateDnsNamespace</code> requests to be retried without the risk of running the operation twice. <code>UpdaterRequestId</code> can be any unique string (for example, a date/timestamp).</p>
    pub updater_request_id: ::std::option::Option<::std::string::String>,
    /// <p>Updated properties for the private DNS namespace.</p>
    pub namespace: ::std::option::Option<crate::types::PrivateDnsNamespaceChange>,
}
impl UpdatePrivateDnsNamespaceInput {
    /// <p>The ID of the namespace that you want to update.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>A unique string that identifies the request and that allows failed <code>UpdatePrivateDnsNamespace</code> requests to be retried without the risk of running the operation twice. <code>UpdaterRequestId</code> can be any unique string (for example, a date/timestamp).</p>
    pub fn updater_request_id(&self) -> ::std::option::Option<&str> {
        self.updater_request_id.as_deref()
    }
    /// <p>Updated properties for the private DNS namespace.</p>
    pub fn namespace(&self) -> ::std::option::Option<&crate::types::PrivateDnsNamespaceChange> {
        self.namespace.as_ref()
    }
}
impl UpdatePrivateDnsNamespaceInput {
    /// Creates a new builder-style object to manufacture [`UpdatePrivateDnsNamespaceInput`](crate::operation::update_private_dns_namespace::UpdatePrivateDnsNamespaceInput).
    pub fn builder() -> crate::operation::update_private_dns_namespace::builders::UpdatePrivateDnsNamespaceInputBuilder {
        crate::operation::update_private_dns_namespace::builders::UpdatePrivateDnsNamespaceInputBuilder::default()
    }
}

/// A builder for [`UpdatePrivateDnsNamespaceInput`](crate::operation::update_private_dns_namespace::UpdatePrivateDnsNamespaceInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdatePrivateDnsNamespaceInputBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) updater_request_id: ::std::option::Option<::std::string::String>,
    pub(crate) namespace: ::std::option::Option<crate::types::PrivateDnsNamespaceChange>,
}
impl UpdatePrivateDnsNamespaceInputBuilder {
    /// <p>The ID of the namespace that you want to update.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the namespace that you want to update.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The ID of the namespace that you want to update.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>A unique string that identifies the request and that allows failed <code>UpdatePrivateDnsNamespace</code> requests to be retried without the risk of running the operation twice. <code>UpdaterRequestId</code> can be any unique string (for example, a date/timestamp).</p>
    pub fn updater_request_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.updater_request_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique string that identifies the request and that allows failed <code>UpdatePrivateDnsNamespace</code> requests to be retried without the risk of running the operation twice. <code>UpdaterRequestId</code> can be any unique string (for example, a date/timestamp).</p>
    pub fn set_updater_request_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.updater_request_id = input;
        self
    }
    /// <p>A unique string that identifies the request and that allows failed <code>UpdatePrivateDnsNamespace</code> requests to be retried without the risk of running the operation twice. <code>UpdaterRequestId</code> can be any unique string (for example, a date/timestamp).</p>
    pub fn get_updater_request_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.updater_request_id
    }
    /// <p>Updated properties for the private DNS namespace.</p>
    /// This field is required.
    pub fn namespace(mut self, input: crate::types::PrivateDnsNamespaceChange) -> Self {
        self.namespace = ::std::option::Option::Some(input);
        self
    }
    /// <p>Updated properties for the private DNS namespace.</p>
    pub fn set_namespace(mut self, input: ::std::option::Option<crate::types::PrivateDnsNamespaceChange>) -> Self {
        self.namespace = input;
        self
    }
    /// <p>Updated properties for the private DNS namespace.</p>
    pub fn get_namespace(&self) -> &::std::option::Option<crate::types::PrivateDnsNamespaceChange> {
        &self.namespace
    }
    /// Consumes the builder and constructs a [`UpdatePrivateDnsNamespaceInput`](crate::operation::update_private_dns_namespace::UpdatePrivateDnsNamespaceInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_private_dns_namespace::UpdatePrivateDnsNamespaceInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::update_private_dns_namespace::UpdatePrivateDnsNamespaceInput {
            id: self.id,
            updater_request_id: self.updater_request_id,
            namespace: self.namespace,
        })
    }
}
