// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreatePrivateDnsNamespaceInput {
    /// <p>The name that you want to assign to this namespace. When you create a private DNS namespace, Cloud Map automatically creates an Amazon Route&nbsp;53 private hosted zone that has the same name as the namespace.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>A unique string that identifies the request and that allows failed <code>CreatePrivateDnsNamespace</code> requests to be retried without the risk of running the operation twice. <code>CreatorRequestId</code> can be any unique string (for example, a date/timestamp).</p>
    #[doc(hidden)]
    pub creator_request_id: std::option::Option<std::string::String>,
    /// <p>A description for the namespace.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The ID of the Amazon VPC that you want to associate the namespace with.</p>
    #[doc(hidden)]
    pub vpc: std::option::Option<std::string::String>,
    /// <p>The tags to add to the namespace. Each tag consists of a key and an optional value that you define. Tags keys can be up to 128 characters in length, and tag values can be up to 256 characters in length.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    /// <p>Properties for the private DNS namespace.</p>
    #[doc(hidden)]
    pub properties: std::option::Option<crate::types::PrivateDnsNamespaceProperties>,
}
impl CreatePrivateDnsNamespaceInput {
    /// <p>The name that you want to assign to this namespace. When you create a private DNS namespace, Cloud Map automatically creates an Amazon Route&nbsp;53 private hosted zone that has the same name as the namespace.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>A unique string that identifies the request and that allows failed <code>CreatePrivateDnsNamespace</code> requests to be retried without the risk of running the operation twice. <code>CreatorRequestId</code> can be any unique string (for example, a date/timestamp).</p>
    pub fn creator_request_id(&self) -> std::option::Option<&str> {
        self.creator_request_id.as_deref()
    }
    /// <p>A description for the namespace.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The ID of the Amazon VPC that you want to associate the namespace with.</p>
    pub fn vpc(&self) -> std::option::Option<&str> {
        self.vpc.as_deref()
    }
    /// <p>The tags to add to the namespace. Each tag consists of a key and an optional value that you define. Tags keys can be up to 128 characters in length, and tag values can be up to 256 characters in length.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::types::Tag]> {
        self.tags.as_deref()
    }
    /// <p>Properties for the private DNS namespace.</p>
    pub fn properties(&self) -> std::option::Option<&crate::types::PrivateDnsNamespaceProperties> {
        self.properties.as_ref()
    }
}
impl CreatePrivateDnsNamespaceInput {
    /// Creates a new builder-style object to manufacture [`CreatePrivateDnsNamespaceInput`](crate::operation::create_private_dns_namespace::CreatePrivateDnsNamespaceInput).
    pub fn builder() -> crate::operation::create_private_dns_namespace::builders::CreatePrivateDnsNamespaceInputBuilder{
        crate::operation::create_private_dns_namespace::builders::CreatePrivateDnsNamespaceInputBuilder::default()
    }
}

/// A builder for [`CreatePrivateDnsNamespaceInput`](crate::operation::create_private_dns_namespace::CreatePrivateDnsNamespaceInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreatePrivateDnsNamespaceInputBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) creator_request_id: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) vpc: std::option::Option<std::string::String>,
    pub(crate) tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    pub(crate) properties: std::option::Option<crate::types::PrivateDnsNamespaceProperties>,
}
impl CreatePrivateDnsNamespaceInputBuilder {
    /// <p>The name that you want to assign to this namespace. When you create a private DNS namespace, Cloud Map automatically creates an Amazon Route&nbsp;53 private hosted zone that has the same name as the namespace.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name that you want to assign to this namespace. When you create a private DNS namespace, Cloud Map automatically creates an Amazon Route&nbsp;53 private hosted zone that has the same name as the namespace.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>A unique string that identifies the request and that allows failed <code>CreatePrivateDnsNamespace</code> requests to be retried without the risk of running the operation twice. <code>CreatorRequestId</code> can be any unique string (for example, a date/timestamp).</p>
    pub fn creator_request_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.creator_request_id = Some(input.into());
        self
    }
    /// <p>A unique string that identifies the request and that allows failed <code>CreatePrivateDnsNamespace</code> requests to be retried without the risk of running the operation twice. <code>CreatorRequestId</code> can be any unique string (for example, a date/timestamp).</p>
    pub fn set_creator_request_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.creator_request_id = input;
        self
    }
    /// <p>A description for the namespace.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>A description for the namespace.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The ID of the Amazon VPC that you want to associate the namespace with.</p>
    pub fn vpc(mut self, input: impl Into<std::string::String>) -> Self {
        self.vpc = Some(input.into());
        self
    }
    /// <p>The ID of the Amazon VPC that you want to associate the namespace with.</p>
    pub fn set_vpc(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.vpc = input;
        self
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags to add to the namespace. Each tag consists of a key and an optional value that you define. Tags keys can be up to 128 characters in length, and tag values can be up to 256 characters in length.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = Some(v);
        self
    }
    /// <p>The tags to add to the namespace. Each tag consists of a key and an optional value that you define. Tags keys can be up to 128 characters in length, and tag values can be up to 256 characters in length.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.tags = input;
        self
    }
    /// <p>Properties for the private DNS namespace.</p>
    pub fn properties(mut self, input: crate::types::PrivateDnsNamespaceProperties) -> Self {
        self.properties = Some(input);
        self
    }
    /// <p>Properties for the private DNS namespace.</p>
    pub fn set_properties(
        mut self,
        input: std::option::Option<crate::types::PrivateDnsNamespaceProperties>,
    ) -> Self {
        self.properties = input;
        self
    }
    /// Consumes the builder and constructs a [`CreatePrivateDnsNamespaceInput`](crate::operation::create_private_dns_namespace::CreatePrivateDnsNamespaceInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_private_dns_namespace::CreatePrivateDnsNamespaceInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::create_private_dns_namespace::CreatePrivateDnsNamespaceInput {
                name: self.name,
                creator_request_id: self.creator_request_id,
                description: self.description,
                vpc: self.vpc,
                tags: self.tags,
                properties: self.properties,
            },
        )
    }
}
