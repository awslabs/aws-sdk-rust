// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateServiceInput {
    /// <p>The name that you want to assign to the service.</p> <note>
    /// <p>Do not include sensitive information in the name if the namespace is discoverable by public DNS queries.</p>
    /// </note>
    /// <p>If you want Cloud Map to create an <code>SRV</code> record when you register an instance and you're using a system that requires a specific <code>SRV</code> format, such as <a href="http://www.haproxy.org/">HAProxy</a>, specify the following for <code>Name</code>:</p>
    /// <ul>
    /// <li> <p>Start the name with an underscore (_), such as <code>_exampleservice</code>.</p> </li>
    /// <li> <p>End the name with <i>._protocol</i>, such as <code>._tcp</code>.</p> </li>
    /// </ul>
    /// <p>When you register an instance, Cloud Map creates an <code>SRV</code> record and assigns a name to the record by concatenating the service name and the namespace name (for example,</p>
    /// <p> <code>_exampleservice._tcp.example.com</code>).</p> <note>
    /// <p>For services that are accessible by DNS queries, you can't create multiple services with names that differ only by case (such as EXAMPLE and example). Otherwise, these services have the same DNS name and can't be distinguished. However, if you use a namespace that's only accessible by API calls, then you can create services that with names that differ only by case.</p>
    /// </note>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The ID of the namespace that you want to use to create the service. The namespace ID must be specified, but it can be specified either here or in the <code>DnsConfig</code> object.</p>
    #[doc(hidden)]
    pub namespace_id: std::option::Option<std::string::String>,
    /// <p>A unique string that identifies the request and that allows failed <code>CreateService</code> requests to be retried without the risk of running the operation twice. <code>CreatorRequestId</code> can be any unique string (for example, a date/timestamp).</p>
    #[doc(hidden)]
    pub creator_request_id: std::option::Option<std::string::String>,
    /// <p>A description for the service.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>A complex type that contains information about the Amazon Route&nbsp;53 records that you want Cloud Map to create when you register an instance. </p>
    #[doc(hidden)]
    pub dns_config: std::option::Option<crate::types::DnsConfig>,
    /// <p> <i>Public DNS and HTTP namespaces only.</i> A complex type that contains settings for an optional Route&nbsp;53 health check. If you specify settings for a health check, Cloud Map associates the health check with all the Route&nbsp;53 DNS records that you specify in <code>DnsConfig</code>.</p> <important>
    /// <p>If you specify a health check configuration, you can specify either <code>HealthCheckCustomConfig</code> or <code>HealthCheckConfig</code> but not both.</p>
    /// </important>
    /// <p>For information about the charges for health checks, see <a href="http://aws.amazon.com/cloud-map/pricing/">Cloud Map Pricing</a>.</p>
    #[doc(hidden)]
    pub health_check_config: std::option::Option<crate::types::HealthCheckConfig>,
    /// <p>A complex type that contains information about an optional custom health check.</p> <important>
    /// <p>If you specify a health check configuration, you can specify either <code>HealthCheckCustomConfig</code> or <code>HealthCheckConfig</code> but not both.</p>
    /// </important>
    /// <p>You can't add, update, or delete a <code>HealthCheckCustomConfig</code> configuration from an existing service.</p>
    #[doc(hidden)]
    pub health_check_custom_config: std::option::Option<crate::types::HealthCheckCustomConfig>,
    /// <p>The tags to add to the service. Each tag consists of a key and an optional value that you define. Tags keys can be up to 128 characters in length, and tag values can be up to 256 characters in length.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    /// <p>If present, specifies that the service instances are only discoverable using the <code>DiscoverInstances</code> API operation. No DNS records is registered for the service instances. The only valid value is <code>HTTP</code>.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::ServiceTypeOption>,
}
impl CreateServiceInput {
    /// <p>The name that you want to assign to the service.</p> <note>
    /// <p>Do not include sensitive information in the name if the namespace is discoverable by public DNS queries.</p>
    /// </note>
    /// <p>If you want Cloud Map to create an <code>SRV</code> record when you register an instance and you're using a system that requires a specific <code>SRV</code> format, such as <a href="http://www.haproxy.org/">HAProxy</a>, specify the following for <code>Name</code>:</p>
    /// <ul>
    /// <li> <p>Start the name with an underscore (_), such as <code>_exampleservice</code>.</p> </li>
    /// <li> <p>End the name with <i>._protocol</i>, such as <code>._tcp</code>.</p> </li>
    /// </ul>
    /// <p>When you register an instance, Cloud Map creates an <code>SRV</code> record and assigns a name to the record by concatenating the service name and the namespace name (for example,</p>
    /// <p> <code>_exampleservice._tcp.example.com</code>).</p> <note>
    /// <p>For services that are accessible by DNS queries, you can't create multiple services with names that differ only by case (such as EXAMPLE and example). Otherwise, these services have the same DNS name and can't be distinguished. However, if you use a namespace that's only accessible by API calls, then you can create services that with names that differ only by case.</p>
    /// </note>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The ID of the namespace that you want to use to create the service. The namespace ID must be specified, but it can be specified either here or in the <code>DnsConfig</code> object.</p>
    pub fn namespace_id(&self) -> std::option::Option<&str> {
        self.namespace_id.as_deref()
    }
    /// <p>A unique string that identifies the request and that allows failed <code>CreateService</code> requests to be retried without the risk of running the operation twice. <code>CreatorRequestId</code> can be any unique string (for example, a date/timestamp).</p>
    pub fn creator_request_id(&self) -> std::option::Option<&str> {
        self.creator_request_id.as_deref()
    }
    /// <p>A description for the service.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>A complex type that contains information about the Amazon Route&nbsp;53 records that you want Cloud Map to create when you register an instance. </p>
    pub fn dns_config(&self) -> std::option::Option<&crate::types::DnsConfig> {
        self.dns_config.as_ref()
    }
    /// <p> <i>Public DNS and HTTP namespaces only.</i> A complex type that contains settings for an optional Route&nbsp;53 health check. If you specify settings for a health check, Cloud Map associates the health check with all the Route&nbsp;53 DNS records that you specify in <code>DnsConfig</code>.</p> <important>
    /// <p>If you specify a health check configuration, you can specify either <code>HealthCheckCustomConfig</code> or <code>HealthCheckConfig</code> but not both.</p>
    /// </important>
    /// <p>For information about the charges for health checks, see <a href="http://aws.amazon.com/cloud-map/pricing/">Cloud Map Pricing</a>.</p>
    pub fn health_check_config(&self) -> std::option::Option<&crate::types::HealthCheckConfig> {
        self.health_check_config.as_ref()
    }
    /// <p>A complex type that contains information about an optional custom health check.</p> <important>
    /// <p>If you specify a health check configuration, you can specify either <code>HealthCheckCustomConfig</code> or <code>HealthCheckConfig</code> but not both.</p>
    /// </important>
    /// <p>You can't add, update, or delete a <code>HealthCheckCustomConfig</code> configuration from an existing service.</p>
    pub fn health_check_custom_config(
        &self,
    ) -> std::option::Option<&crate::types::HealthCheckCustomConfig> {
        self.health_check_custom_config.as_ref()
    }
    /// <p>The tags to add to the service. Each tag consists of a key and an optional value that you define. Tags keys can be up to 128 characters in length, and tag values can be up to 256 characters in length.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::types::Tag]> {
        self.tags.as_deref()
    }
    /// <p>If present, specifies that the service instances are only discoverable using the <code>DiscoverInstances</code> API operation. No DNS records is registered for the service instances. The only valid value is <code>HTTP</code>.</p>
    pub fn r#type(&self) -> std::option::Option<&crate::types::ServiceTypeOption> {
        self.r#type.as_ref()
    }
}
impl CreateServiceInput {
    /// Creates a new builder-style object to manufacture [`CreateServiceInput`](crate::operation::create_service::CreateServiceInput).
    pub fn builder() -> crate::operation::create_service::builders::CreateServiceInputBuilder {
        crate::operation::create_service::builders::CreateServiceInputBuilder::default()
    }
}

/// A builder for [`CreateServiceInput`](crate::operation::create_service::CreateServiceInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateServiceInputBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) namespace_id: std::option::Option<std::string::String>,
    pub(crate) creator_request_id: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) dns_config: std::option::Option<crate::types::DnsConfig>,
    pub(crate) health_check_config: std::option::Option<crate::types::HealthCheckConfig>,
    pub(crate) health_check_custom_config:
        std::option::Option<crate::types::HealthCheckCustomConfig>,
    pub(crate) tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    pub(crate) r#type: std::option::Option<crate::types::ServiceTypeOption>,
}
impl CreateServiceInputBuilder {
    /// <p>The name that you want to assign to the service.</p> <note>
    /// <p>Do not include sensitive information in the name if the namespace is discoverable by public DNS queries.</p>
    /// </note>
    /// <p>If you want Cloud Map to create an <code>SRV</code> record when you register an instance and you're using a system that requires a specific <code>SRV</code> format, such as <a href="http://www.haproxy.org/">HAProxy</a>, specify the following for <code>Name</code>:</p>
    /// <ul>
    /// <li> <p>Start the name with an underscore (_), such as <code>_exampleservice</code>.</p> </li>
    /// <li> <p>End the name with <i>._protocol</i>, such as <code>._tcp</code>.</p> </li>
    /// </ul>
    /// <p>When you register an instance, Cloud Map creates an <code>SRV</code> record and assigns a name to the record by concatenating the service name and the namespace name (for example,</p>
    /// <p> <code>_exampleservice._tcp.example.com</code>).</p> <note>
    /// <p>For services that are accessible by DNS queries, you can't create multiple services with names that differ only by case (such as EXAMPLE and example). Otherwise, these services have the same DNS name and can't be distinguished. However, if you use a namespace that's only accessible by API calls, then you can create services that with names that differ only by case.</p>
    /// </note>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name that you want to assign to the service.</p> <note>
    /// <p>Do not include sensitive information in the name if the namespace is discoverable by public DNS queries.</p>
    /// </note>
    /// <p>If you want Cloud Map to create an <code>SRV</code> record when you register an instance and you're using a system that requires a specific <code>SRV</code> format, such as <a href="http://www.haproxy.org/">HAProxy</a>, specify the following for <code>Name</code>:</p>
    /// <ul>
    /// <li> <p>Start the name with an underscore (_), such as <code>_exampleservice</code>.</p> </li>
    /// <li> <p>End the name with <i>._protocol</i>, such as <code>._tcp</code>.</p> </li>
    /// </ul>
    /// <p>When you register an instance, Cloud Map creates an <code>SRV</code> record and assigns a name to the record by concatenating the service name and the namespace name (for example,</p>
    /// <p> <code>_exampleservice._tcp.example.com</code>).</p> <note>
    /// <p>For services that are accessible by DNS queries, you can't create multiple services with names that differ only by case (such as EXAMPLE and example). Otherwise, these services have the same DNS name and can't be distinguished. However, if you use a namespace that's only accessible by API calls, then you can create services that with names that differ only by case.</p>
    /// </note>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The ID of the namespace that you want to use to create the service. The namespace ID must be specified, but it can be specified either here or in the <code>DnsConfig</code> object.</p>
    pub fn namespace_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.namespace_id = Some(input.into());
        self
    }
    /// <p>The ID of the namespace that you want to use to create the service. The namespace ID must be specified, but it can be specified either here or in the <code>DnsConfig</code> object.</p>
    pub fn set_namespace_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.namespace_id = input;
        self
    }
    /// <p>A unique string that identifies the request and that allows failed <code>CreateService</code> requests to be retried without the risk of running the operation twice. <code>CreatorRequestId</code> can be any unique string (for example, a date/timestamp).</p>
    pub fn creator_request_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.creator_request_id = Some(input.into());
        self
    }
    /// <p>A unique string that identifies the request and that allows failed <code>CreateService</code> requests to be retried without the risk of running the operation twice. <code>CreatorRequestId</code> can be any unique string (for example, a date/timestamp).</p>
    pub fn set_creator_request_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.creator_request_id = input;
        self
    }
    /// <p>A description for the service.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>A description for the service.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A complex type that contains information about the Amazon Route&nbsp;53 records that you want Cloud Map to create when you register an instance. </p>
    pub fn dns_config(mut self, input: crate::types::DnsConfig) -> Self {
        self.dns_config = Some(input);
        self
    }
    /// <p>A complex type that contains information about the Amazon Route&nbsp;53 records that you want Cloud Map to create when you register an instance. </p>
    pub fn set_dns_config(mut self, input: std::option::Option<crate::types::DnsConfig>) -> Self {
        self.dns_config = input;
        self
    }
    /// <p> <i>Public DNS and HTTP namespaces only.</i> A complex type that contains settings for an optional Route&nbsp;53 health check. If you specify settings for a health check, Cloud Map associates the health check with all the Route&nbsp;53 DNS records that you specify in <code>DnsConfig</code>.</p> <important>
    /// <p>If you specify a health check configuration, you can specify either <code>HealthCheckCustomConfig</code> or <code>HealthCheckConfig</code> but not both.</p>
    /// </important>
    /// <p>For information about the charges for health checks, see <a href="http://aws.amazon.com/cloud-map/pricing/">Cloud Map Pricing</a>.</p>
    pub fn health_check_config(mut self, input: crate::types::HealthCheckConfig) -> Self {
        self.health_check_config = Some(input);
        self
    }
    /// <p> <i>Public DNS and HTTP namespaces only.</i> A complex type that contains settings for an optional Route&nbsp;53 health check. If you specify settings for a health check, Cloud Map associates the health check with all the Route&nbsp;53 DNS records that you specify in <code>DnsConfig</code>.</p> <important>
    /// <p>If you specify a health check configuration, you can specify either <code>HealthCheckCustomConfig</code> or <code>HealthCheckConfig</code> but not both.</p>
    /// </important>
    /// <p>For information about the charges for health checks, see <a href="http://aws.amazon.com/cloud-map/pricing/">Cloud Map Pricing</a>.</p>
    pub fn set_health_check_config(
        mut self,
        input: std::option::Option<crate::types::HealthCheckConfig>,
    ) -> Self {
        self.health_check_config = input;
        self
    }
    /// <p>A complex type that contains information about an optional custom health check.</p> <important>
    /// <p>If you specify a health check configuration, you can specify either <code>HealthCheckCustomConfig</code> or <code>HealthCheckConfig</code> but not both.</p>
    /// </important>
    /// <p>You can't add, update, or delete a <code>HealthCheckCustomConfig</code> configuration from an existing service.</p>
    pub fn health_check_custom_config(
        mut self,
        input: crate::types::HealthCheckCustomConfig,
    ) -> Self {
        self.health_check_custom_config = Some(input);
        self
    }
    /// <p>A complex type that contains information about an optional custom health check.</p> <important>
    /// <p>If you specify a health check configuration, you can specify either <code>HealthCheckCustomConfig</code> or <code>HealthCheckConfig</code> but not both.</p>
    /// </important>
    /// <p>You can't add, update, or delete a <code>HealthCheckCustomConfig</code> configuration from an existing service.</p>
    pub fn set_health_check_custom_config(
        mut self,
        input: std::option::Option<crate::types::HealthCheckCustomConfig>,
    ) -> Self {
        self.health_check_custom_config = input;
        self
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags to add to the service. Each tag consists of a key and an optional value that you define. Tags keys can be up to 128 characters in length, and tag values can be up to 256 characters in length.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = Some(v);
        self
    }
    /// <p>The tags to add to the service. Each tag consists of a key and an optional value that you define. Tags keys can be up to 128 characters in length, and tag values can be up to 256 characters in length.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.tags = input;
        self
    }
    /// <p>If present, specifies that the service instances are only discoverable using the <code>DiscoverInstances</code> API operation. No DNS records is registered for the service instances. The only valid value is <code>HTTP</code>.</p>
    pub fn r#type(mut self, input: crate::types::ServiceTypeOption) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p>If present, specifies that the service instances are only discoverable using the <code>DiscoverInstances</code> API operation. No DNS records is registered for the service instances. The only valid value is <code>HTTP</code>.</p>
    pub fn set_type(mut self, input: std::option::Option<crate::types::ServiceTypeOption>) -> Self {
        self.r#type = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateServiceInput`](crate::operation::create_service::CreateServiceInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_service::CreateServiceInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::create_service::CreateServiceInput {
            name: self.name,
            namespace_id: self.namespace_id,
            creator_request_id: self.creator_request_id,
            description: self.description,
            dns_config: self.dns_config,
            health_check_config: self.health_check_config,
            health_check_custom_config: self.health_check_custom_config,
            tags: self.tags,
            r#type: self.r#type,
        })
    }
}
