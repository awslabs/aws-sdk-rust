// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_service::_update_service_output::UpdateServiceOutputBuilder;

pub use crate::operation::update_service::_update_service_input::UpdateServiceInputBuilder;

/// Fluent builder constructing a request to `UpdateService`.
///
/// <p>Submits a request to perform the following operations:</p>
/// <ul>
/// <li> <p>Update the TTL setting for existing <code>DnsRecords</code> configurations</p> </li>
/// <li> <p>Add, update, or delete <code>HealthCheckConfig</code> for a specified service</p> <note>
/// <p>You can't add, update, or delete a <code>HealthCheckCustomConfig</code> configuration.</p>
/// </note> </li>
/// </ul>
/// <p>For public and private DNS namespaces, note the following:</p>
/// <ul>
/// <li> <p>If you omit any existing <code>DnsRecords</code> or <code>HealthCheckConfig</code> configurations from an <code>UpdateService</code> request, the configurations are deleted from the service.</p> </li>
/// <li> <p>If you omit an existing <code>HealthCheckCustomConfig</code> configuration from an <code>UpdateService</code> request, the configuration isn't deleted from the service.</p> </li>
/// </ul>
/// <p>When you update settings for a service, Cloud Map also updates the corresponding settings in all the records and health checks that were created by using the specified service.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateServiceFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_service::builders::UpdateServiceInputBuilder,
}
impl UpdateServiceFluentBuilder {
    /// Creates a new `UpdateService`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::update_service::UpdateService,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::operation::update_service::UpdateServiceError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::update_service::UpdateServiceOutput,
        aws_smithy_http::result::SdkError<crate::operation::update_service::UpdateServiceError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The ID of the service that you want to update.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.id(input.into());
        self
    }
    /// <p>The ID of the service that you want to update.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_id(input);
        self
    }
    /// <p>A complex type that contains the new settings for the service.</p>
    pub fn service(mut self, input: crate::types::ServiceChange) -> Self {
        self.inner = self.inner.service(input);
        self
    }
    /// <p>A complex type that contains the new settings for the service.</p>
    pub fn set_service(mut self, input: std::option::Option<crate::types::ServiceChange>) -> Self {
        self.inner = self.inner.set_service(input);
        self
    }
}
