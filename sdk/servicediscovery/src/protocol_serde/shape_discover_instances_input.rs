// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_discover_instances_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::discover_instances::DiscoverInstancesInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.namespace_name {
        object.key("NamespaceName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.service_name {
        object.key("ServiceName").string(var_2.as_str());
    }
    if let Some(var_3) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_3).into()),
        );
    }
    if let Some(var_4) = &input.query_parameters {
        #[allow(unused_mut)]
        let mut object_5 = object.key("QueryParameters").start_object();
        for (key_6, value_7) in var_4 {
            {
                object_5.key(key_6.as_str()).string(value_7.as_str());
            }
        }
        object_5.finish();
    }
    if let Some(var_8) = &input.optional_parameters {
        #[allow(unused_mut)]
        let mut object_9 = object.key("OptionalParameters").start_object();
        for (key_10, value_11) in var_8 {
            {
                object_9.key(key_10.as_str()).string(value_11.as_str());
            }
        }
        object_9.finish();
    }
    if let Some(var_12) = &input.health_status {
        object.key("HealthStatus").string(var_12.as_str());
    }
    Ok(())
}
