// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A complex type that contains information about a specified service.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ServiceSummary {
    /// <p>The ID that Cloud Map assigned to the service when you created it.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) that Cloud Map assigns to the service when you create it.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The name of the service.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>Describes the systems that can be used to discover the service instances.</p>
    /// <dl>
    /// <dt>
    /// DNS_HTTP
    /// </dt>
    /// <dd>
    /// <p>The service instances can be discovered using either DNS queries or the <code>DiscoverInstances</code> API operation.</p>
    /// </dd>
    /// <dt>
    /// HTTP
    /// </dt>
    /// <dd>
    /// <p>The service instances can only be discovered using the <code>DiscoverInstances</code> API operation.</p>
    /// </dd>
    /// <dt>
    /// DNS
    /// </dt>
    /// <dd>
    /// <p>Reserved.</p>
    /// </dd>
    /// </dl>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::ServiceType>,
    /// <p>The description that you specify when you create the service.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The number of instances that are currently associated with the service. Instances that were previously associated with the service but that are deleted aren't included in the count. The count might not reflect pending registrations and deregistrations.</p>
    #[doc(hidden)]
    pub instance_count: std::option::Option<i32>,
    /// <p>Information about the Route&nbsp;53 DNS records that you want Cloud Map to create when you register an instance.</p>
    #[doc(hidden)]
    pub dns_config: std::option::Option<crate::types::DnsConfig>,
    /// <p> <i>Public DNS and HTTP namespaces only.</i> Settings for an optional health check. If you specify settings for a health check, Cloud Map associates the health check with the records that you specify in <code>DnsConfig</code>.</p>
    #[doc(hidden)]
    pub health_check_config: std::option::Option<crate::types::HealthCheckConfig>,
    /// <p>Information about an optional custom health check. A custom health check, which requires that you use a third-party health checker to evaluate the health of your resources, is useful in the following circumstances:</p>
    /// <ul>
    /// <li> <p>You can't use a health check that's defined by <code>HealthCheckConfig</code> because the resource isn't available over the internet. For example, you can use a custom health check when the instance is in an Amazon VPC. (To check the health of resources in a VPC, the health checker must also be in the VPC.)</p> </li>
    /// <li> <p>You want to use a third-party health checker regardless of where your resources are located.</p> </li>
    /// </ul> <important>
    /// <p>If you specify a health check configuration, you can specify either <code>HealthCheckCustomConfig</code> or <code>HealthCheckConfig</code> but not both.</p>
    /// </important>
    #[doc(hidden)]
    pub health_check_custom_config: std::option::Option<crate::types::HealthCheckCustomConfig>,
    /// <p>The date and time that the service was created.</p>
    #[doc(hidden)]
    pub create_date: std::option::Option<aws_smithy_types::DateTime>,
}
impl ServiceSummary {
    /// <p>The ID that Cloud Map assigned to the service when you created it.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) that Cloud Map assigns to the service when you create it.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The name of the service.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>Describes the systems that can be used to discover the service instances.</p>
    /// <dl>
    /// <dt>
    /// DNS_HTTP
    /// </dt>
    /// <dd>
    /// <p>The service instances can be discovered using either DNS queries or the <code>DiscoverInstances</code> API operation.</p>
    /// </dd>
    /// <dt>
    /// HTTP
    /// </dt>
    /// <dd>
    /// <p>The service instances can only be discovered using the <code>DiscoverInstances</code> API operation.</p>
    /// </dd>
    /// <dt>
    /// DNS
    /// </dt>
    /// <dd>
    /// <p>Reserved.</p>
    /// </dd>
    /// </dl>
    pub fn r#type(&self) -> std::option::Option<&crate::types::ServiceType> {
        self.r#type.as_ref()
    }
    /// <p>The description that you specify when you create the service.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The number of instances that are currently associated with the service. Instances that were previously associated with the service but that are deleted aren't included in the count. The count might not reflect pending registrations and deregistrations.</p>
    pub fn instance_count(&self) -> std::option::Option<i32> {
        self.instance_count
    }
    /// <p>Information about the Route&nbsp;53 DNS records that you want Cloud Map to create when you register an instance.</p>
    pub fn dns_config(&self) -> std::option::Option<&crate::types::DnsConfig> {
        self.dns_config.as_ref()
    }
    /// <p> <i>Public DNS and HTTP namespaces only.</i> Settings for an optional health check. If you specify settings for a health check, Cloud Map associates the health check with the records that you specify in <code>DnsConfig</code>.</p>
    pub fn health_check_config(&self) -> std::option::Option<&crate::types::HealthCheckConfig> {
        self.health_check_config.as_ref()
    }
    /// <p>Information about an optional custom health check. A custom health check, which requires that you use a third-party health checker to evaluate the health of your resources, is useful in the following circumstances:</p>
    /// <ul>
    /// <li> <p>You can't use a health check that's defined by <code>HealthCheckConfig</code> because the resource isn't available over the internet. For example, you can use a custom health check when the instance is in an Amazon VPC. (To check the health of resources in a VPC, the health checker must also be in the VPC.)</p> </li>
    /// <li> <p>You want to use a third-party health checker regardless of where your resources are located.</p> </li>
    /// </ul> <important>
    /// <p>If you specify a health check configuration, you can specify either <code>HealthCheckCustomConfig</code> or <code>HealthCheckConfig</code> but not both.</p>
    /// </important>
    pub fn health_check_custom_config(
        &self,
    ) -> std::option::Option<&crate::types::HealthCheckCustomConfig> {
        self.health_check_custom_config.as_ref()
    }
    /// <p>The date and time that the service was created.</p>
    pub fn create_date(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.create_date.as_ref()
    }
}
impl ServiceSummary {
    /// Creates a new builder-style object to manufacture [`ServiceSummary`](crate::types::ServiceSummary).
    pub fn builder() -> crate::types::builders::ServiceSummaryBuilder {
        crate::types::builders::ServiceSummaryBuilder::default()
    }
}

/// A builder for [`ServiceSummary`](crate::types::ServiceSummary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ServiceSummaryBuilder {
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) r#type: std::option::Option<crate::types::ServiceType>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) instance_count: std::option::Option<i32>,
    pub(crate) dns_config: std::option::Option<crate::types::DnsConfig>,
    pub(crate) health_check_config: std::option::Option<crate::types::HealthCheckConfig>,
    pub(crate) health_check_custom_config:
        std::option::Option<crate::types::HealthCheckCustomConfig>,
    pub(crate) create_date: std::option::Option<aws_smithy_types::DateTime>,
}
impl ServiceSummaryBuilder {
    /// <p>The ID that Cloud Map assigned to the service when you created it.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>The ID that Cloud Map assigned to the service when you created it.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) that Cloud Map assigns to the service when you create it.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) that Cloud Map assigns to the service when you create it.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The name of the service.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the service.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>Describes the systems that can be used to discover the service instances.</p>
    /// <dl>
    /// <dt>
    /// DNS_HTTP
    /// </dt>
    /// <dd>
    /// <p>The service instances can be discovered using either DNS queries or the <code>DiscoverInstances</code> API operation.</p>
    /// </dd>
    /// <dt>
    /// HTTP
    /// </dt>
    /// <dd>
    /// <p>The service instances can only be discovered using the <code>DiscoverInstances</code> API operation.</p>
    /// </dd>
    /// <dt>
    /// DNS
    /// </dt>
    /// <dd>
    /// <p>Reserved.</p>
    /// </dd>
    /// </dl>
    pub fn r#type(mut self, input: crate::types::ServiceType) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p>Describes the systems that can be used to discover the service instances.</p>
    /// <dl>
    /// <dt>
    /// DNS_HTTP
    /// </dt>
    /// <dd>
    /// <p>The service instances can be discovered using either DNS queries or the <code>DiscoverInstances</code> API operation.</p>
    /// </dd>
    /// <dt>
    /// HTTP
    /// </dt>
    /// <dd>
    /// <p>The service instances can only be discovered using the <code>DiscoverInstances</code> API operation.</p>
    /// </dd>
    /// <dt>
    /// DNS
    /// </dt>
    /// <dd>
    /// <p>Reserved.</p>
    /// </dd>
    /// </dl>
    pub fn set_type(mut self, input: std::option::Option<crate::types::ServiceType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The description that you specify when you create the service.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The description that you specify when you create the service.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The number of instances that are currently associated with the service. Instances that were previously associated with the service but that are deleted aren't included in the count. The count might not reflect pending registrations and deregistrations.</p>
    pub fn instance_count(mut self, input: i32) -> Self {
        self.instance_count = Some(input);
        self
    }
    /// <p>The number of instances that are currently associated with the service. Instances that were previously associated with the service but that are deleted aren't included in the count. The count might not reflect pending registrations and deregistrations.</p>
    pub fn set_instance_count(mut self, input: std::option::Option<i32>) -> Self {
        self.instance_count = input;
        self
    }
    /// <p>Information about the Route&nbsp;53 DNS records that you want Cloud Map to create when you register an instance.</p>
    pub fn dns_config(mut self, input: crate::types::DnsConfig) -> Self {
        self.dns_config = Some(input);
        self
    }
    /// <p>Information about the Route&nbsp;53 DNS records that you want Cloud Map to create when you register an instance.</p>
    pub fn set_dns_config(mut self, input: std::option::Option<crate::types::DnsConfig>) -> Self {
        self.dns_config = input;
        self
    }
    /// <p> <i>Public DNS and HTTP namespaces only.</i> Settings for an optional health check. If you specify settings for a health check, Cloud Map associates the health check with the records that you specify in <code>DnsConfig</code>.</p>
    pub fn health_check_config(mut self, input: crate::types::HealthCheckConfig) -> Self {
        self.health_check_config = Some(input);
        self
    }
    /// <p> <i>Public DNS and HTTP namespaces only.</i> Settings for an optional health check. If you specify settings for a health check, Cloud Map associates the health check with the records that you specify in <code>DnsConfig</code>.</p>
    pub fn set_health_check_config(
        mut self,
        input: std::option::Option<crate::types::HealthCheckConfig>,
    ) -> Self {
        self.health_check_config = input;
        self
    }
    /// <p>Information about an optional custom health check. A custom health check, which requires that you use a third-party health checker to evaluate the health of your resources, is useful in the following circumstances:</p>
    /// <ul>
    /// <li> <p>You can't use a health check that's defined by <code>HealthCheckConfig</code> because the resource isn't available over the internet. For example, you can use a custom health check when the instance is in an Amazon VPC. (To check the health of resources in a VPC, the health checker must also be in the VPC.)</p> </li>
    /// <li> <p>You want to use a third-party health checker regardless of where your resources are located.</p> </li>
    /// </ul> <important>
    /// <p>If you specify a health check configuration, you can specify either <code>HealthCheckCustomConfig</code> or <code>HealthCheckConfig</code> but not both.</p>
    /// </important>
    pub fn health_check_custom_config(
        mut self,
        input: crate::types::HealthCheckCustomConfig,
    ) -> Self {
        self.health_check_custom_config = Some(input);
        self
    }
    /// <p>Information about an optional custom health check. A custom health check, which requires that you use a third-party health checker to evaluate the health of your resources, is useful in the following circumstances:</p>
    /// <ul>
    /// <li> <p>You can't use a health check that's defined by <code>HealthCheckConfig</code> because the resource isn't available over the internet. For example, you can use a custom health check when the instance is in an Amazon VPC. (To check the health of resources in a VPC, the health checker must also be in the VPC.)</p> </li>
    /// <li> <p>You want to use a third-party health checker regardless of where your resources are located.</p> </li>
    /// </ul> <important>
    /// <p>If you specify a health check configuration, you can specify either <code>HealthCheckCustomConfig</code> or <code>HealthCheckConfig</code> but not both.</p>
    /// </important>
    pub fn set_health_check_custom_config(
        mut self,
        input: std::option::Option<crate::types::HealthCheckCustomConfig>,
    ) -> Self {
        self.health_check_custom_config = input;
        self
    }
    /// <p>The date and time that the service was created.</p>
    pub fn create_date(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.create_date = Some(input);
        self
    }
    /// <p>The date and time that the service was created.</p>
    pub fn set_create_date(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.create_date = input;
        self
    }
    /// Consumes the builder and constructs a [`ServiceSummary`](crate::types::ServiceSummary).
    pub fn build(self) -> crate::types::ServiceSummary {
        crate::types::ServiceSummary {
            id: self.id,
            arn: self.arn,
            name: self.name,
            r#type: self.r#type,
            description: self.description,
            instance_count: self.instance_count,
            dns_config: self.dns_config,
            health_check_config: self.health_check_config,
            health_check_custom_config: self.health_check_custom_config,
            create_date: self.create_date,
        }
    }
}
