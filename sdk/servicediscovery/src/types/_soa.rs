// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Start of Authority (SOA) properties for a public or private DNS namespace.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Soa {
    /// <p>The time to live (TTL) for purposes of negative caching.</p>
    #[doc(hidden)]
    pub ttl: std::option::Option<i64>,
}
impl Soa {
    /// <p>The time to live (TTL) for purposes of negative caching.</p>
    pub fn ttl(&self) -> std::option::Option<i64> {
        self.ttl
    }
}
impl Soa {
    /// Creates a new builder-style object to manufacture [`Soa`](crate::types::Soa).
    pub fn builder() -> crate::types::builders::SoaBuilder {
        crate::types::builders::SoaBuilder::default()
    }
}

/// A builder for [`Soa`](crate::types::Soa).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SoaBuilder {
    pub(crate) ttl: std::option::Option<i64>,
}
impl SoaBuilder {
    /// <p>The time to live (TTL) for purposes of negative caching.</p>
    pub fn ttl(mut self, input: i64) -> Self {
        self.ttl = Some(input);
        self
    }
    /// <p>The time to live (TTL) for purposes of negative caching.</p>
    pub fn set_ttl(mut self, input: std::option::Option<i64>) -> Self {
        self.ttl = input;
        self
    }
    /// Consumes the builder and constructs a [`Soa`](crate::types::Soa).
    pub fn build(self) -> crate::types::Soa {
        crate::types::Soa { ttl: self.ttl }
    }
}
