// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A complex type that contains information about an optional custom health check. A custom health check, which requires that you use a third-party health checker to evaluate the health of your resources, is useful in the following circumstances:</p>
/// <ul>
/// <li> <p>You can't use a health check that's defined by <code>HealthCheckConfig</code> because the resource isn't available over the internet. For example, you can use a custom health check when the instance is in an Amazon VPC. (To check the health of resources in a VPC, the health checker must also be in the VPC.)</p> </li>
/// <li> <p>You want to use a third-party health checker regardless of where your resources are located.</p> </li>
/// </ul> <important>
/// <p>If you specify a health check configuration, you can specify either <code>HealthCheckCustomConfig</code> or <code>HealthCheckConfig</code> but not both.</p>
/// </important>
/// <p>To change the status of a custom health check, submit an <code>UpdateInstanceCustomHealthStatus</code> request. Cloud Map doesn't monitor the status of the resource, it just keeps a record of the status specified in the most recent <code>UpdateInstanceCustomHealthStatus</code> request.</p>
/// <p>Here's how custom health checks work:</p>
/// <ol>
/// <li> <p>You create a service.</p> </li>
/// <li> <p>You register an instance.</p> </li>
/// <li> <p>You configure a third-party health checker to monitor the resource that's associated with the new instance. </p> <note>
/// <p>Cloud Map doesn't check the health of the resource directly. </p>
/// </note> </li>
/// <li> <p>The third-party health-checker determines that the resource is unhealthy and notifies your application.</p> </li>
/// <li> <p>Your application submits an <code>UpdateInstanceCustomHealthStatus</code> request.</p> </li>
/// <li> <p>Cloud Map waits for 30 seconds.</p> </li>
/// <li> <p>If another <code>UpdateInstanceCustomHealthStatus</code> request doesn't arrive during that time to change the status back to healthy, Cloud Map stops routing traffic to the resource.</p> </li>
/// </ol>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct HealthCheckCustomConfig {
    /// <important>
    /// <p>This parameter is no longer supported and is always set to 1. Cloud Map waits for approximately 30 seconds after receiving an <code>UpdateInstanceCustomHealthStatus</code> request before changing the status of the service instance.</p>
    /// </important>
    /// <p>The number of 30-second intervals that you want Cloud Map to wait after receiving an <code>UpdateInstanceCustomHealthStatus</code> request before it changes the health status of a service instance.</p>
    /// <p>Sending a second or subsequent <code>UpdateInstanceCustomHealthStatus</code> request with the same value before 30 seconds has passed doesn't accelerate the change. Cloud Map still waits <code>30</code> seconds after the first request to make the change.</p>
    #[deprecated(
        note = "Configurable FailureThreshold of HealthCheckCustomConfig is deprecated.  It will always have value 1."
    )]
    #[doc(hidden)]
    pub failure_threshold: std::option::Option<i32>,
}
impl HealthCheckCustomConfig {
    /// <important>
    /// <p>This parameter is no longer supported and is always set to 1. Cloud Map waits for approximately 30 seconds after receiving an <code>UpdateInstanceCustomHealthStatus</code> request before changing the status of the service instance.</p>
    /// </important>
    /// <p>The number of 30-second intervals that you want Cloud Map to wait after receiving an <code>UpdateInstanceCustomHealthStatus</code> request before it changes the health status of a service instance.</p>
    /// <p>Sending a second or subsequent <code>UpdateInstanceCustomHealthStatus</code> request with the same value before 30 seconds has passed doesn't accelerate the change. Cloud Map still waits <code>30</code> seconds after the first request to make the change.</p>
    #[deprecated(
        note = "Configurable FailureThreshold of HealthCheckCustomConfig is deprecated.  It will always have value 1."
    )]
    pub fn failure_threshold(&self) -> std::option::Option<i32> {
        self.failure_threshold
    }
}
impl HealthCheckCustomConfig {
    /// Creates a new builder-style object to manufacture [`HealthCheckCustomConfig`](crate::types::HealthCheckCustomConfig).
    pub fn builder() -> crate::types::builders::HealthCheckCustomConfigBuilder {
        crate::types::builders::HealthCheckCustomConfigBuilder::default()
    }
}

/// A builder for [`HealthCheckCustomConfig`](crate::types::HealthCheckCustomConfig).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct HealthCheckCustomConfigBuilder {
    pub(crate) failure_threshold: std::option::Option<i32>,
}
impl HealthCheckCustomConfigBuilder {
    /// <important>
    /// <p>This parameter is no longer supported and is always set to 1. Cloud Map waits for approximately 30 seconds after receiving an <code>UpdateInstanceCustomHealthStatus</code> request before changing the status of the service instance.</p>
    /// </important>
    /// <p>The number of 30-second intervals that you want Cloud Map to wait after receiving an <code>UpdateInstanceCustomHealthStatus</code> request before it changes the health status of a service instance.</p>
    /// <p>Sending a second or subsequent <code>UpdateInstanceCustomHealthStatus</code> request with the same value before 30 seconds has passed doesn't accelerate the change. Cloud Map still waits <code>30</code> seconds after the first request to make the change.</p>
    #[deprecated(
        note = "Configurable FailureThreshold of HealthCheckCustomConfig is deprecated.  It will always have value 1."
    )]
    pub fn failure_threshold(mut self, input: i32) -> Self {
        self.failure_threshold = Some(input);
        self
    }
    /// <important>
    /// <p>This parameter is no longer supported and is always set to 1. Cloud Map waits for approximately 30 seconds after receiving an <code>UpdateInstanceCustomHealthStatus</code> request before changing the status of the service instance.</p>
    /// </important>
    /// <p>The number of 30-second intervals that you want Cloud Map to wait after receiving an <code>UpdateInstanceCustomHealthStatus</code> request before it changes the health status of a service instance.</p>
    /// <p>Sending a second or subsequent <code>UpdateInstanceCustomHealthStatus</code> request with the same value before 30 seconds has passed doesn't accelerate the change. Cloud Map still waits <code>30</code> seconds after the first request to make the change.</p>
    #[deprecated(
        note = "Configurable FailureThreshold of HealthCheckCustomConfig is deprecated.  It will always have value 1."
    )]
    pub fn set_failure_threshold(mut self, input: std::option::Option<i32>) -> Self {
        self.failure_threshold = input;
        self
    }
    /// Consumes the builder and constructs a [`HealthCheckCustomConfig`](crate::types::HealthCheckCustomConfig).
    pub fn build(self) -> crate::types::HealthCheckCustomConfig {
        crate::types::HealthCheckCustomConfig {
            failure_threshold: self.failure_threshold,
        }
    }
}
