// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A complex type that contains the name of an HTTP namespace.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct HttpProperties {
    /// <p>The name of an HTTP namespace.</p>
    #[doc(hidden)]
    pub http_name: std::option::Option<std::string::String>,
}
impl HttpProperties {
    /// <p>The name of an HTTP namespace.</p>
    pub fn http_name(&self) -> std::option::Option<&str> {
        self.http_name.as_deref()
    }
}
impl HttpProperties {
    /// Creates a new builder-style object to manufacture [`HttpProperties`](crate::types::HttpProperties).
    pub fn builder() -> crate::types::builders::HttpPropertiesBuilder {
        crate::types::builders::HttpPropertiesBuilder::default()
    }
}

/// A builder for [`HttpProperties`](crate::types::HttpProperties).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct HttpPropertiesBuilder {
    pub(crate) http_name: std::option::Option<std::string::String>,
}
impl HttpPropertiesBuilder {
    /// <p>The name of an HTTP namespace.</p>
    pub fn http_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.http_name = Some(input.into());
        self
    }
    /// <p>The name of an HTTP namespace.</p>
    pub fn set_http_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.http_name = input;
        self
    }
    /// Consumes the builder and constructs a [`HttpProperties`](crate::types::HttpProperties).
    pub fn build(self) -> crate::types::HttpProperties {
        crate::types::HttpProperties {
            http_name: self.http_name,
        }
    }
}
