// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A complex type that contains changes to an existing service.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ServiceChange {
    /// <p>A description for the service.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>Information about the Route&nbsp;53 DNS records that you want Cloud Map to create when you register an instance.</p>
    #[doc(hidden)]
    pub dns_config: std::option::Option<crate::types::DnsConfigChange>,
    /// <p> <i>Public DNS and HTTP namespaces only.</i> Settings for an optional health check. If you specify settings for a health check, Cloud Map associates the health check with the records that you specify in <code>DnsConfig</code>.</p>
    #[doc(hidden)]
    pub health_check_config: std::option::Option<crate::types::HealthCheckConfig>,
}
impl ServiceChange {
    /// <p>A description for the service.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Information about the Route&nbsp;53 DNS records that you want Cloud Map to create when you register an instance.</p>
    pub fn dns_config(&self) -> std::option::Option<&crate::types::DnsConfigChange> {
        self.dns_config.as_ref()
    }
    /// <p> <i>Public DNS and HTTP namespaces only.</i> Settings for an optional health check. If you specify settings for a health check, Cloud Map associates the health check with the records that you specify in <code>DnsConfig</code>.</p>
    pub fn health_check_config(&self) -> std::option::Option<&crate::types::HealthCheckConfig> {
        self.health_check_config.as_ref()
    }
}
impl ServiceChange {
    /// Creates a new builder-style object to manufacture [`ServiceChange`](crate::types::ServiceChange).
    pub fn builder() -> crate::types::builders::ServiceChangeBuilder {
        crate::types::builders::ServiceChangeBuilder::default()
    }
}

/// A builder for [`ServiceChange`](crate::types::ServiceChange).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ServiceChangeBuilder {
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) dns_config: std::option::Option<crate::types::DnsConfigChange>,
    pub(crate) health_check_config: std::option::Option<crate::types::HealthCheckConfig>,
}
impl ServiceChangeBuilder {
    /// <p>A description for the service.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>A description for the service.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>Information about the Route&nbsp;53 DNS records that you want Cloud Map to create when you register an instance.</p>
    pub fn dns_config(mut self, input: crate::types::DnsConfigChange) -> Self {
        self.dns_config = Some(input);
        self
    }
    /// <p>Information about the Route&nbsp;53 DNS records that you want Cloud Map to create when you register an instance.</p>
    pub fn set_dns_config(
        mut self,
        input: std::option::Option<crate::types::DnsConfigChange>,
    ) -> Self {
        self.dns_config = input;
        self
    }
    /// <p> <i>Public DNS and HTTP namespaces only.</i> Settings for an optional health check. If you specify settings for a health check, Cloud Map associates the health check with the records that you specify in <code>DnsConfig</code>.</p>
    pub fn health_check_config(mut self, input: crate::types::HealthCheckConfig) -> Self {
        self.health_check_config = Some(input);
        self
    }
    /// <p> <i>Public DNS and HTTP namespaces only.</i> Settings for an optional health check. If you specify settings for a health check, Cloud Map associates the health check with the records that you specify in <code>DnsConfig</code>.</p>
    pub fn set_health_check_config(
        mut self,
        input: std::option::Option<crate::types::HealthCheckConfig>,
    ) -> Self {
        self.health_check_config = input;
        self
    }
    /// Consumes the builder and constructs a [`ServiceChange`](crate::types::ServiceChange).
    pub fn build(self) -> crate::types::ServiceChange {
        crate::types::ServiceChange {
            description: self.description,
            dns_config: self.dns_config,
            health_check_config: self.health_check_config,
        }
    }
}
