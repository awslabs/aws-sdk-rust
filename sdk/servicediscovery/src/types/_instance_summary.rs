// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A complex type that contains information about the instances that you registered by using a specified service.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct InstanceSummary {
    /// <p>The ID for an instance that you created by using a specified service.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>A string map that contains the following information:</p>
    /// <ul>
    /// <li> <p>The attributes that are associated with the instance. </p> </li>
    /// <li> <p>For each attribute, the applicable value.</p> </li>
    /// </ul>
    /// <p>Supported attribute keys include the following:</p>
    /// <dl>
    /// <dt>
    /// AWS_ALIAS_DNS_NAME
    /// </dt>
    /// <dd>
    /// <p>For an alias record that routes traffic to an Elastic Load Balancing load balancer, the DNS name that's associated with the load balancer. </p>
    /// </dd>
    /// <dt>
    /// AWS_EC2_INSTANCE_ID (HTTP namespaces only)
    /// </dt>
    /// <dd>
    /// <p>The Amazon EC2 instance ID for the instance. When the <code>AWS_EC2_INSTANCE_ID</code> attribute is specified, then the <code>AWS_INSTANCE_IPV4</code> attribute contains the primary private IPv4 address.</p>
    /// </dd>
    /// <dt>
    /// AWS_INIT_HEALTH_STATUS
    /// </dt>
    /// <dd>
    /// <p>If the service configuration includes <code>HealthCheckCustomConfig</code>, you can optionally use <code>AWS_INIT_HEALTH_STATUS</code> to specify the initial status of the custom health check, <code>HEALTHY</code> or <code>UNHEALTHY</code>. If you don't specify a value for <code>AWS_INIT_HEALTH_STATUS</code>, the initial status is <code>HEALTHY</code>.</p>
    /// </dd>
    /// <dt>
    /// AWS_INSTANCE_CNAME
    /// </dt>
    /// <dd>
    /// <p>For a <code>CNAME</code> record, the domain name that Route&nbsp;53 returns in response to DNS queries (for example, <code>example.com</code>).</p>
    /// </dd>
    /// <dt>
    /// AWS_INSTANCE_IPV4
    /// </dt>
    /// <dd>
    /// <p>For an <code>A</code> record, the IPv4 address that Route&nbsp;53 returns in response to DNS queries (for example, <code>192.0.2.44</code>).</p>
    /// </dd>
    /// <dt>
    /// AWS_INSTANCE_IPV6
    /// </dt>
    /// <dd>
    /// <p>For an <code>AAAA</code> record, the IPv6 address that Route&nbsp;53 returns in response to DNS queries (for example, <code>2001:0db8:85a3:0000:0000:abcd:0001:2345</code>).</p>
    /// </dd>
    /// <dt>
    /// AWS_INSTANCE_PORT
    /// </dt>
    /// <dd>
    /// <p>For an <code>SRV</code> record, the value that Route&nbsp;53 returns for the port. In addition, if the service includes <code>HealthCheckConfig</code>, the port on the endpoint that Route&nbsp;53 sends requests to.</p>
    /// </dd>
    /// </dl>
    #[doc(hidden)]
    pub attributes:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl InstanceSummary {
    /// <p>The ID for an instance that you created by using a specified service.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>A string map that contains the following information:</p>
    /// <ul>
    /// <li> <p>The attributes that are associated with the instance. </p> </li>
    /// <li> <p>For each attribute, the applicable value.</p> </li>
    /// </ul>
    /// <p>Supported attribute keys include the following:</p>
    /// <dl>
    /// <dt>
    /// AWS_ALIAS_DNS_NAME
    /// </dt>
    /// <dd>
    /// <p>For an alias record that routes traffic to an Elastic Load Balancing load balancer, the DNS name that's associated with the load balancer. </p>
    /// </dd>
    /// <dt>
    /// AWS_EC2_INSTANCE_ID (HTTP namespaces only)
    /// </dt>
    /// <dd>
    /// <p>The Amazon EC2 instance ID for the instance. When the <code>AWS_EC2_INSTANCE_ID</code> attribute is specified, then the <code>AWS_INSTANCE_IPV4</code> attribute contains the primary private IPv4 address.</p>
    /// </dd>
    /// <dt>
    /// AWS_INIT_HEALTH_STATUS
    /// </dt>
    /// <dd>
    /// <p>If the service configuration includes <code>HealthCheckCustomConfig</code>, you can optionally use <code>AWS_INIT_HEALTH_STATUS</code> to specify the initial status of the custom health check, <code>HEALTHY</code> or <code>UNHEALTHY</code>. If you don't specify a value for <code>AWS_INIT_HEALTH_STATUS</code>, the initial status is <code>HEALTHY</code>.</p>
    /// </dd>
    /// <dt>
    /// AWS_INSTANCE_CNAME
    /// </dt>
    /// <dd>
    /// <p>For a <code>CNAME</code> record, the domain name that Route&nbsp;53 returns in response to DNS queries (for example, <code>example.com</code>).</p>
    /// </dd>
    /// <dt>
    /// AWS_INSTANCE_IPV4
    /// </dt>
    /// <dd>
    /// <p>For an <code>A</code> record, the IPv4 address that Route&nbsp;53 returns in response to DNS queries (for example, <code>192.0.2.44</code>).</p>
    /// </dd>
    /// <dt>
    /// AWS_INSTANCE_IPV6
    /// </dt>
    /// <dd>
    /// <p>For an <code>AAAA</code> record, the IPv6 address that Route&nbsp;53 returns in response to DNS queries (for example, <code>2001:0db8:85a3:0000:0000:abcd:0001:2345</code>).</p>
    /// </dd>
    /// <dt>
    /// AWS_INSTANCE_PORT
    /// </dt>
    /// <dd>
    /// <p>For an <code>SRV</code> record, the value that Route&nbsp;53 returns for the port. In addition, if the service includes <code>HealthCheckConfig</code>, the port on the endpoint that Route&nbsp;53 sends requests to.</p>
    /// </dd>
    /// </dl>
    pub fn attributes(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.attributes.as_ref()
    }
}
impl InstanceSummary {
    /// Creates a new builder-style object to manufacture [`InstanceSummary`](crate::types::InstanceSummary).
    pub fn builder() -> crate::types::builders::InstanceSummaryBuilder {
        crate::types::builders::InstanceSummaryBuilder::default()
    }
}

/// A builder for [`InstanceSummary`](crate::types::InstanceSummary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct InstanceSummaryBuilder {
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) attributes:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl InstanceSummaryBuilder {
    /// <p>The ID for an instance that you created by using a specified service.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>The ID for an instance that you created by using a specified service.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// Adds a key-value pair to `attributes`.
    ///
    /// To override the contents of this collection use [`set_attributes`](Self::set_attributes).
    ///
    /// <p>A string map that contains the following information:</p>
    /// <ul>
    /// <li> <p>The attributes that are associated with the instance. </p> </li>
    /// <li> <p>For each attribute, the applicable value.</p> </li>
    /// </ul>
    /// <p>Supported attribute keys include the following:</p>
    /// <dl>
    /// <dt>
    /// AWS_ALIAS_DNS_NAME
    /// </dt>
    /// <dd>
    /// <p>For an alias record that routes traffic to an Elastic Load Balancing load balancer, the DNS name that's associated with the load balancer. </p>
    /// </dd>
    /// <dt>
    /// AWS_EC2_INSTANCE_ID (HTTP namespaces only)
    /// </dt>
    /// <dd>
    /// <p>The Amazon EC2 instance ID for the instance. When the <code>AWS_EC2_INSTANCE_ID</code> attribute is specified, then the <code>AWS_INSTANCE_IPV4</code> attribute contains the primary private IPv4 address.</p>
    /// </dd>
    /// <dt>
    /// AWS_INIT_HEALTH_STATUS
    /// </dt>
    /// <dd>
    /// <p>If the service configuration includes <code>HealthCheckCustomConfig</code>, you can optionally use <code>AWS_INIT_HEALTH_STATUS</code> to specify the initial status of the custom health check, <code>HEALTHY</code> or <code>UNHEALTHY</code>. If you don't specify a value for <code>AWS_INIT_HEALTH_STATUS</code>, the initial status is <code>HEALTHY</code>.</p>
    /// </dd>
    /// <dt>
    /// AWS_INSTANCE_CNAME
    /// </dt>
    /// <dd>
    /// <p>For a <code>CNAME</code> record, the domain name that Route&nbsp;53 returns in response to DNS queries (for example, <code>example.com</code>).</p>
    /// </dd>
    /// <dt>
    /// AWS_INSTANCE_IPV4
    /// </dt>
    /// <dd>
    /// <p>For an <code>A</code> record, the IPv4 address that Route&nbsp;53 returns in response to DNS queries (for example, <code>192.0.2.44</code>).</p>
    /// </dd>
    /// <dt>
    /// AWS_INSTANCE_IPV6
    /// </dt>
    /// <dd>
    /// <p>For an <code>AAAA</code> record, the IPv6 address that Route&nbsp;53 returns in response to DNS queries (for example, <code>2001:0db8:85a3:0000:0000:abcd:0001:2345</code>).</p>
    /// </dd>
    /// <dt>
    /// AWS_INSTANCE_PORT
    /// </dt>
    /// <dd>
    /// <p>For an <code>SRV</code> record, the value that Route&nbsp;53 returns for the port. In addition, if the service includes <code>HealthCheckConfig</code>, the port on the endpoint that Route&nbsp;53 sends requests to.</p>
    /// </dd>
    /// </dl>
    pub fn attributes(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.attributes.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.attributes = Some(hash_map);
        self
    }
    /// <p>A string map that contains the following information:</p>
    /// <ul>
    /// <li> <p>The attributes that are associated with the instance. </p> </li>
    /// <li> <p>For each attribute, the applicable value.</p> </li>
    /// </ul>
    /// <p>Supported attribute keys include the following:</p>
    /// <dl>
    /// <dt>
    /// AWS_ALIAS_DNS_NAME
    /// </dt>
    /// <dd>
    /// <p>For an alias record that routes traffic to an Elastic Load Balancing load balancer, the DNS name that's associated with the load balancer. </p>
    /// </dd>
    /// <dt>
    /// AWS_EC2_INSTANCE_ID (HTTP namespaces only)
    /// </dt>
    /// <dd>
    /// <p>The Amazon EC2 instance ID for the instance. When the <code>AWS_EC2_INSTANCE_ID</code> attribute is specified, then the <code>AWS_INSTANCE_IPV4</code> attribute contains the primary private IPv4 address.</p>
    /// </dd>
    /// <dt>
    /// AWS_INIT_HEALTH_STATUS
    /// </dt>
    /// <dd>
    /// <p>If the service configuration includes <code>HealthCheckCustomConfig</code>, you can optionally use <code>AWS_INIT_HEALTH_STATUS</code> to specify the initial status of the custom health check, <code>HEALTHY</code> or <code>UNHEALTHY</code>. If you don't specify a value for <code>AWS_INIT_HEALTH_STATUS</code>, the initial status is <code>HEALTHY</code>.</p>
    /// </dd>
    /// <dt>
    /// AWS_INSTANCE_CNAME
    /// </dt>
    /// <dd>
    /// <p>For a <code>CNAME</code> record, the domain name that Route&nbsp;53 returns in response to DNS queries (for example, <code>example.com</code>).</p>
    /// </dd>
    /// <dt>
    /// AWS_INSTANCE_IPV4
    /// </dt>
    /// <dd>
    /// <p>For an <code>A</code> record, the IPv4 address that Route&nbsp;53 returns in response to DNS queries (for example, <code>192.0.2.44</code>).</p>
    /// </dd>
    /// <dt>
    /// AWS_INSTANCE_IPV6
    /// </dt>
    /// <dd>
    /// <p>For an <code>AAAA</code> record, the IPv6 address that Route&nbsp;53 returns in response to DNS queries (for example, <code>2001:0db8:85a3:0000:0000:abcd:0001:2345</code>).</p>
    /// </dd>
    /// <dt>
    /// AWS_INSTANCE_PORT
    /// </dt>
    /// <dd>
    /// <p>For an <code>SRV</code> record, the value that Route&nbsp;53 returns for the port. In addition, if the service includes <code>HealthCheckConfig</code>, the port on the endpoint that Route&nbsp;53 sends requests to.</p>
    /// </dd>
    /// </dl>
    pub fn set_attributes(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.attributes = input;
        self
    }
    /// Consumes the builder and constructs a [`InstanceSummary`](crate::types::InstanceSummary).
    pub fn build(self) -> crate::types::InstanceSummary {
        crate::types::InstanceSummary {
            id: self.id,
            attributes: self.attributes,
        }
    }
}
