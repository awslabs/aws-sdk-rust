// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ListNamespaces`](crate::operation::list_namespaces::builders::ListNamespacesFluentBuilder) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::operation::list_namespaces::builders::ListNamespacesFluentBuilder::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`next_token(impl Into<String>)`](crate::operation::list_namespaces::builders::ListNamespacesFluentBuilder::next_token) / [`set_next_token(Option<String>)`](crate::operation::list_namespaces::builders::ListNamespacesFluentBuilder::set_next_token): <p>For the first <code>ListNamespaces</code> request, omit this value.</p>  <p>If the response contains <code>NextToken</code>, submit another <code>ListNamespaces</code> request to get the next group of results. Specify the value of <code>NextToken</code> from the previous response in the next request.</p> <note>   <p>Cloud Map gets <code>MaxResults</code> namespaces and then filters them based on the specified criteria. It's possible that no namespaces in the first <code>MaxResults</code> namespaces matched the specified criteria but that subsequent groups of <code>MaxResults</code> namespaces do contain namespaces that match the criteria.</p>  </note>
    ///   - [`max_results(i32)`](crate::operation::list_namespaces::builders::ListNamespacesFluentBuilder::max_results) / [`set_max_results(Option<i32>)`](crate::operation::list_namespaces::builders::ListNamespacesFluentBuilder::set_max_results): <p>The maximum number of namespaces that you want Cloud Map to return in the response to a <code>ListNamespaces</code> request. If you don't specify a value for <code>MaxResults</code>, Cloud Map returns up to 100 namespaces.</p>
    ///   - [`filters(Vec<NamespaceFilter>)`](crate::operation::list_namespaces::builders::ListNamespacesFluentBuilder::filters) / [`set_filters(Option<Vec<NamespaceFilter>>)`](crate::operation::list_namespaces::builders::ListNamespacesFluentBuilder::set_filters): <p>A complex type that contains specifications for the namespaces that you want to list.</p>  <p>If you specify more than one filter, a namespace must match all filters to be returned by <code>ListNamespaces</code>.</p>
    /// - On success, responds with [`ListNamespacesOutput`](crate::operation::list_namespaces::ListNamespacesOutput) with field(s):
    ///   - [`namespaces(Option<Vec<NamespaceSummary>>)`](crate::operation::list_namespaces::ListNamespacesOutput::namespaces): <p>An array that contains one <code>NamespaceSummary</code> object for each namespace that matches the specified filter criteria.</p>
    ///   - [`next_token(Option<String>)`](crate::operation::list_namespaces::ListNamespacesOutput::next_token): <p>If the response contains <code>NextToken</code>, submit another <code>ListNamespaces</code> request to get the next group of results. Specify the value of <code>NextToken</code> from the previous response in the next request.</p> <note>   <p>Cloud Map gets <code>MaxResults</code> namespaces and then filters them based on the specified criteria. It's possible that no namespaces in the first <code>MaxResults</code> namespaces matched the specified criteria but that subsequent groups of <code>MaxResults</code> namespaces do contain namespaces that match the criteria.</p>  </note>
    /// - On failure, responds with [`SdkError<ListNamespacesError>`](crate::operation::list_namespaces::ListNamespacesError)
    pub fn list_namespaces(
        &self,
    ) -> crate::operation::list_namespaces::builders::ListNamespacesFluentBuilder {
        crate::operation::list_namespaces::builders::ListNamespacesFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
