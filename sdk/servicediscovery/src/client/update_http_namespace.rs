// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`UpdateHttpNamespace`](crate::client::fluent_builders::UpdateHttpNamespace) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`id(impl Into<String>)`](crate::client::fluent_builders::UpdateHttpNamespace::id) / [`set_id(Option<String>)`](crate::client::fluent_builders::UpdateHttpNamespace::set_id): <p>The ID of the namespace that you want to update.</p>
    ///   - [`updater_request_id(impl Into<String>)`](crate::client::fluent_builders::UpdateHttpNamespace::updater_request_id) / [`set_updater_request_id(Option<String>)`](crate::client::fluent_builders::UpdateHttpNamespace::set_updater_request_id): <p>A unique string that identifies the request and that allows failed <code>UpdateHttpNamespace</code> requests to be retried without the risk of running the operation twice. <code>UpdaterRequestId</code> can be any unique string (for example, a date/timestamp).</p>
    ///   - [`namespace(HttpNamespaceChange)`](crate::client::fluent_builders::UpdateHttpNamespace::namespace) / [`set_namespace(Option<HttpNamespaceChange>)`](crate::client::fluent_builders::UpdateHttpNamespace::set_namespace): <p>Updated properties for the the HTTP namespace.</p>
    /// - On success, responds with [`UpdateHttpNamespaceOutput`](crate::output::UpdateHttpNamespaceOutput) with field(s):
    ///   - [`operation_id(Option<String>)`](crate::output::UpdateHttpNamespaceOutput::operation_id): <p>A value that you can use to determine whether the request completed successfully. To get the status of the operation, see <a href="https://docs.aws.amazon.com/cloud-map/latest/api/API_GetOperation.html">GetOperation</a>.</p>
    /// - On failure, responds with [`SdkError<UpdateHttpNamespaceError>`](crate::error::UpdateHttpNamespaceError)
    pub fn update_http_namespace(&self) -> crate::client::fluent_builders::UpdateHttpNamespace {
        crate::client::fluent_builders::UpdateHttpNamespace::new(self.handle.clone())
    }
}
