// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>The health check for the instance that's specified by <code>ServiceId</code> and <code>InstanceId</code> isn't a custom health check. </p>
    CustomHealthNotFound(crate::error::CustomHealthNotFound),
    /// <p>The operation is already in progress.</p>
    DuplicateRequest(crate::error::DuplicateRequest),
    /// <p>No instance exists with the specified ID, or the instance was recently registered, and information about the instance hasn't propagated yet.</p>
    InstanceNotFound(crate::error::InstanceNotFound),
    /// <p>One or more specified values aren't valid. For example, a required value might be missing, a numeric value might be outside the allowed range, or a string value might exceed length constraints.</p>
    InvalidInput(crate::error::InvalidInput),
    /// <p>The namespace that you're trying to create already exists.</p>
    NamespaceAlreadyExists(crate::error::NamespaceAlreadyExists),
    /// <p>No namespace exists with the specified ID.</p>
    NamespaceNotFound(crate::error::NamespaceNotFound),
    /// <p>No operation exists with the specified ID.</p>
    OperationNotFound(crate::error::OperationNotFound),
    /// <p>The operation can't be completed because you've reached the quota for the number of requests. For more information, see <a href="https://docs.aws.amazon.com/cloud-map/latest/dg/throttling.html">Cloud Map API request throttling quota</a> in the <i>Cloud Map Developer Guide</i>.</p>
    RequestLimitExceeded(crate::error::RequestLimitExceeded),
    /// <p>The specified resource can't be deleted because it contains other resources. For example, you can't delete a service that contains any instances.</p>
    ResourceInUse(crate::error::ResourceInUse),
    /// <p>The resource can't be created because you've reached the quota on the number of resources.</p>
    ResourceLimitExceeded(crate::error::ResourceLimitExceeded),
    /// <p>The operation can't be completed because the resource was not found.</p>
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// <p>The service can't be created because a service with the same name already exists.</p>
    ServiceAlreadyExists(crate::error::ServiceAlreadyExists),
    /// <p>No service exists with the specified ID.</p>
    ServiceNotFound(crate::error::ServiceNotFound),
    /// <p>The list of tags on the resource is over the quota. The maximum number of tags that can be applied to a resource is 50.</p>
    TooManyTagsException(crate::error::TooManyTagsException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::CustomHealthNotFound(inner) => inner.fmt(f),
            Error::DuplicateRequest(inner) => inner.fmt(f),
            Error::InstanceNotFound(inner) => inner.fmt(f),
            Error::InvalidInput(inner) => inner.fmt(f),
            Error::NamespaceAlreadyExists(inner) => inner.fmt(f),
            Error::NamespaceNotFound(inner) => inner.fmt(f),
            Error::OperationNotFound(inner) => inner.fmt(f),
            Error::RequestLimitExceeded(inner) => inner.fmt(f),
            Error::ResourceInUse(inner) => inner.fmt(f),
            Error::ResourceLimitExceeded(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ServiceAlreadyExists(inner) => inner.fmt(f),
            Error::ServiceNotFound(inner) => inner.fmt(f),
            Error::TooManyTagsException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateHttpNamespaceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateHttpNamespaceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateHttpNamespaceError> for Error {
    fn from(err: crate::error::CreateHttpNamespaceError) -> Self {
        match err {
            crate::error::CreateHttpNamespaceError::DuplicateRequest(inner) => {
                Error::DuplicateRequest(inner)
            }
            crate::error::CreateHttpNamespaceError::InvalidInput(inner) => {
                Error::InvalidInput(inner)
            }
            crate::error::CreateHttpNamespaceError::NamespaceAlreadyExists(inner) => {
                Error::NamespaceAlreadyExists(inner)
            }
            crate::error::CreateHttpNamespaceError::ResourceLimitExceeded(inner) => {
                Error::ResourceLimitExceeded(inner)
            }
            crate::error::CreateHttpNamespaceError::TooManyTagsException(inner) => {
                Error::TooManyTagsException(inner)
            }
            crate::error::CreateHttpNamespaceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreatePrivateDnsNamespaceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreatePrivateDnsNamespaceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreatePrivateDnsNamespaceError> for Error {
    fn from(err: crate::error::CreatePrivateDnsNamespaceError) -> Self {
        match err {
            crate::error::CreatePrivateDnsNamespaceError::DuplicateRequest(inner) => {
                Error::DuplicateRequest(inner)
            }
            crate::error::CreatePrivateDnsNamespaceError::InvalidInput(inner) => {
                Error::InvalidInput(inner)
            }
            crate::error::CreatePrivateDnsNamespaceError::NamespaceAlreadyExists(inner) => {
                Error::NamespaceAlreadyExists(inner)
            }
            crate::error::CreatePrivateDnsNamespaceError::ResourceLimitExceeded(inner) => {
                Error::ResourceLimitExceeded(inner)
            }
            crate::error::CreatePrivateDnsNamespaceError::TooManyTagsException(inner) => {
                Error::TooManyTagsException(inner)
            }
            crate::error::CreatePrivateDnsNamespaceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreatePublicDnsNamespaceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreatePublicDnsNamespaceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreatePublicDnsNamespaceError> for Error {
    fn from(err: crate::error::CreatePublicDnsNamespaceError) -> Self {
        match err {
            crate::error::CreatePublicDnsNamespaceError::DuplicateRequest(inner) => {
                Error::DuplicateRequest(inner)
            }
            crate::error::CreatePublicDnsNamespaceError::InvalidInput(inner) => {
                Error::InvalidInput(inner)
            }
            crate::error::CreatePublicDnsNamespaceError::NamespaceAlreadyExists(inner) => {
                Error::NamespaceAlreadyExists(inner)
            }
            crate::error::CreatePublicDnsNamespaceError::ResourceLimitExceeded(inner) => {
                Error::ResourceLimitExceeded(inner)
            }
            crate::error::CreatePublicDnsNamespaceError::TooManyTagsException(inner) => {
                Error::TooManyTagsException(inner)
            }
            crate::error::CreatePublicDnsNamespaceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateServiceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateServiceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateServiceError> for Error {
    fn from(err: crate::error::CreateServiceError) -> Self {
        match err {
            crate::error::CreateServiceError::InvalidInput(inner) => Error::InvalidInput(inner),
            crate::error::CreateServiceError::NamespaceNotFound(inner) => {
                Error::NamespaceNotFound(inner)
            }
            crate::error::CreateServiceError::ResourceLimitExceeded(inner) => {
                Error::ResourceLimitExceeded(inner)
            }
            crate::error::CreateServiceError::ServiceAlreadyExists(inner) => {
                Error::ServiceAlreadyExists(inner)
            }
            crate::error::CreateServiceError::TooManyTagsException(inner) => {
                Error::TooManyTagsException(inner)
            }
            crate::error::CreateServiceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteNamespaceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteNamespaceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteNamespaceError> for Error {
    fn from(err: crate::error::DeleteNamespaceError) -> Self {
        match err {
            crate::error::DeleteNamespaceError::DuplicateRequest(inner) => {
                Error::DuplicateRequest(inner)
            }
            crate::error::DeleteNamespaceError::InvalidInput(inner) => Error::InvalidInput(inner),
            crate::error::DeleteNamespaceError::NamespaceNotFound(inner) => {
                Error::NamespaceNotFound(inner)
            }
            crate::error::DeleteNamespaceError::ResourceInUse(inner) => Error::ResourceInUse(inner),
            crate::error::DeleteNamespaceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteServiceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteServiceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteServiceError> for Error {
    fn from(err: crate::error::DeleteServiceError) -> Self {
        match err {
            crate::error::DeleteServiceError::InvalidInput(inner) => Error::InvalidInput(inner),
            crate::error::DeleteServiceError::ResourceInUse(inner) => Error::ResourceInUse(inner),
            crate::error::DeleteServiceError::ServiceNotFound(inner) => {
                Error::ServiceNotFound(inner)
            }
            crate::error::DeleteServiceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeregisterInstanceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeregisterInstanceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeregisterInstanceError> for Error {
    fn from(err: crate::error::DeregisterInstanceError) -> Self {
        match err {
            crate::error::DeregisterInstanceError::DuplicateRequest(inner) => {
                Error::DuplicateRequest(inner)
            }
            crate::error::DeregisterInstanceError::InstanceNotFound(inner) => {
                Error::InstanceNotFound(inner)
            }
            crate::error::DeregisterInstanceError::InvalidInput(inner) => {
                Error::InvalidInput(inner)
            }
            crate::error::DeregisterInstanceError::ResourceInUse(inner) => {
                Error::ResourceInUse(inner)
            }
            crate::error::DeregisterInstanceError::ServiceNotFound(inner) => {
                Error::ServiceNotFound(inner)
            }
            crate::error::DeregisterInstanceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DiscoverInstancesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DiscoverInstancesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DiscoverInstancesError> for Error {
    fn from(err: crate::error::DiscoverInstancesError) -> Self {
        match err {
            crate::error::DiscoverInstancesError::InvalidInput(inner) => Error::InvalidInput(inner),
            crate::error::DiscoverInstancesError::NamespaceNotFound(inner) => {
                Error::NamespaceNotFound(inner)
            }
            crate::error::DiscoverInstancesError::RequestLimitExceeded(inner) => {
                Error::RequestLimitExceeded(inner)
            }
            crate::error::DiscoverInstancesError::ServiceNotFound(inner) => {
                Error::ServiceNotFound(inner)
            }
            crate::error::DiscoverInstancesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetInstanceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetInstanceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetInstanceError> for Error {
    fn from(err: crate::error::GetInstanceError) -> Self {
        match err {
            crate::error::GetInstanceError::InstanceNotFound(inner) => {
                Error::InstanceNotFound(inner)
            }
            crate::error::GetInstanceError::InvalidInput(inner) => Error::InvalidInput(inner),
            crate::error::GetInstanceError::ServiceNotFound(inner) => Error::ServiceNotFound(inner),
            crate::error::GetInstanceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetInstancesHealthStatusError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetInstancesHealthStatusError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetInstancesHealthStatusError> for Error {
    fn from(err: crate::error::GetInstancesHealthStatusError) -> Self {
        match err {
            crate::error::GetInstancesHealthStatusError::InstanceNotFound(inner) => {
                Error::InstanceNotFound(inner)
            }
            crate::error::GetInstancesHealthStatusError::InvalidInput(inner) => {
                Error::InvalidInput(inner)
            }
            crate::error::GetInstancesHealthStatusError::ServiceNotFound(inner) => {
                Error::ServiceNotFound(inner)
            }
            crate::error::GetInstancesHealthStatusError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetNamespaceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetNamespaceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetNamespaceError> for Error {
    fn from(err: crate::error::GetNamespaceError) -> Self {
        match err {
            crate::error::GetNamespaceError::InvalidInput(inner) => Error::InvalidInput(inner),
            crate::error::GetNamespaceError::NamespaceNotFound(inner) => {
                Error::NamespaceNotFound(inner)
            }
            crate::error::GetNamespaceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetOperationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetOperationError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetOperationError> for Error {
    fn from(err: crate::error::GetOperationError) -> Self {
        match err {
            crate::error::GetOperationError::InvalidInput(inner) => Error::InvalidInput(inner),
            crate::error::GetOperationError::OperationNotFound(inner) => {
                Error::OperationNotFound(inner)
            }
            crate::error::GetOperationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetServiceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetServiceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetServiceError> for Error {
    fn from(err: crate::error::GetServiceError) -> Self {
        match err {
            crate::error::GetServiceError::InvalidInput(inner) => Error::InvalidInput(inner),
            crate::error::GetServiceError::ServiceNotFound(inner) => Error::ServiceNotFound(inner),
            crate::error::GetServiceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListInstancesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListInstancesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListInstancesError> for Error {
    fn from(err: crate::error::ListInstancesError) -> Self {
        match err {
            crate::error::ListInstancesError::InvalidInput(inner) => Error::InvalidInput(inner),
            crate::error::ListInstancesError::ServiceNotFound(inner) => {
                Error::ServiceNotFound(inner)
            }
            crate::error::ListInstancesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListNamespacesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListNamespacesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListNamespacesError> for Error {
    fn from(err: crate::error::ListNamespacesError) -> Self {
        match err {
            crate::error::ListNamespacesError::InvalidInput(inner) => Error::InvalidInput(inner),
            crate::error::ListNamespacesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListOperationsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListOperationsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListOperationsError> for Error {
    fn from(err: crate::error::ListOperationsError) -> Self {
        match err {
            crate::error::ListOperationsError::InvalidInput(inner) => Error::InvalidInput(inner),
            crate::error::ListOperationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListServicesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListServicesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListServicesError> for Error {
    fn from(err: crate::error::ListServicesError) -> Self {
        match err {
            crate::error::ListServicesError::InvalidInput(inner) => Error::InvalidInput(inner),
            crate::error::ListServicesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListTagsForResourceError> for Error {
    fn from(err: crate::error::ListTagsForResourceError) -> Self {
        match err {
            crate::error::ListTagsForResourceError::InvalidInput(inner) => {
                Error::InvalidInput(inner)
            }
            crate::error::ListTagsForResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RegisterInstanceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::RegisterInstanceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RegisterInstanceError> for Error {
    fn from(err: crate::error::RegisterInstanceError) -> Self {
        match err {
            crate::error::RegisterInstanceError::DuplicateRequest(inner) => {
                Error::DuplicateRequest(inner)
            }
            crate::error::RegisterInstanceError::InvalidInput(inner) => Error::InvalidInput(inner),
            crate::error::RegisterInstanceError::ResourceInUse(inner) => {
                Error::ResourceInUse(inner)
            }
            crate::error::RegisterInstanceError::ResourceLimitExceeded(inner) => {
                Error::ResourceLimitExceeded(inner)
            }
            crate::error::RegisterInstanceError::ServiceNotFound(inner) => {
                Error::ServiceNotFound(inner)
            }
            crate::error::RegisterInstanceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::TagResourceError> for Error {
    fn from(err: crate::error::TagResourceError) -> Self {
        match err {
            crate::error::TagResourceError::InvalidInput(inner) => Error::InvalidInput(inner),
            crate::error::TagResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::TagResourceError::TooManyTagsException(inner) => {
                Error::TooManyTagsException(inner)
            }
            crate::error::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UntagResourceError> for Error {
    fn from(err: crate::error::UntagResourceError) -> Self {
        match err {
            crate::error::UntagResourceError::InvalidInput(inner) => Error::InvalidInput(inner),
            crate::error::UntagResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateHttpNamespaceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateHttpNamespaceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateHttpNamespaceError> for Error {
    fn from(err: crate::error::UpdateHttpNamespaceError) -> Self {
        match err {
            crate::error::UpdateHttpNamespaceError::DuplicateRequest(inner) => {
                Error::DuplicateRequest(inner)
            }
            crate::error::UpdateHttpNamespaceError::InvalidInput(inner) => {
                Error::InvalidInput(inner)
            }
            crate::error::UpdateHttpNamespaceError::NamespaceNotFound(inner) => {
                Error::NamespaceNotFound(inner)
            }
            crate::error::UpdateHttpNamespaceError::ResourceInUse(inner) => {
                Error::ResourceInUse(inner)
            }
            crate::error::UpdateHttpNamespaceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::UpdateInstanceCustomHealthStatusError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::UpdateInstanceCustomHealthStatusError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateInstanceCustomHealthStatusError> for Error {
    fn from(err: crate::error::UpdateInstanceCustomHealthStatusError) -> Self {
        match err {
            crate::error::UpdateInstanceCustomHealthStatusError::CustomHealthNotFound(inner) => {
                Error::CustomHealthNotFound(inner)
            }
            crate::error::UpdateInstanceCustomHealthStatusError::InstanceNotFound(inner) => {
                Error::InstanceNotFound(inner)
            }
            crate::error::UpdateInstanceCustomHealthStatusError::InvalidInput(inner) => {
                Error::InvalidInput(inner)
            }
            crate::error::UpdateInstanceCustomHealthStatusError::ServiceNotFound(inner) => {
                Error::ServiceNotFound(inner)
            }
            crate::error::UpdateInstanceCustomHealthStatusError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdatePrivateDnsNamespaceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdatePrivateDnsNamespaceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdatePrivateDnsNamespaceError> for Error {
    fn from(err: crate::error::UpdatePrivateDnsNamespaceError) -> Self {
        match err {
            crate::error::UpdatePrivateDnsNamespaceError::DuplicateRequest(inner) => {
                Error::DuplicateRequest(inner)
            }
            crate::error::UpdatePrivateDnsNamespaceError::InvalidInput(inner) => {
                Error::InvalidInput(inner)
            }
            crate::error::UpdatePrivateDnsNamespaceError::NamespaceNotFound(inner) => {
                Error::NamespaceNotFound(inner)
            }
            crate::error::UpdatePrivateDnsNamespaceError::ResourceInUse(inner) => {
                Error::ResourceInUse(inner)
            }
            crate::error::UpdatePrivateDnsNamespaceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdatePublicDnsNamespaceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdatePublicDnsNamespaceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdatePublicDnsNamespaceError> for Error {
    fn from(err: crate::error::UpdatePublicDnsNamespaceError) -> Self {
        match err {
            crate::error::UpdatePublicDnsNamespaceError::DuplicateRequest(inner) => {
                Error::DuplicateRequest(inner)
            }
            crate::error::UpdatePublicDnsNamespaceError::InvalidInput(inner) => {
                Error::InvalidInput(inner)
            }
            crate::error::UpdatePublicDnsNamespaceError::NamespaceNotFound(inner) => {
                Error::NamespaceNotFound(inner)
            }
            crate::error::UpdatePublicDnsNamespaceError::ResourceInUse(inner) => {
                Error::ResourceInUse(inner)
            }
            crate::error::UpdatePublicDnsNamespaceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateServiceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateServiceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateServiceError> for Error {
    fn from(err: crate::error::UpdateServiceError) -> Self {
        match err {
            crate::error::UpdateServiceError::DuplicateRequest(inner) => {
                Error::DuplicateRequest(inner)
            }
            crate::error::UpdateServiceError::InvalidInput(inner) => Error::InvalidInput(inner),
            crate::error::UpdateServiceError::ServiceNotFound(inner) => {
                Error::ServiceNotFound(inner)
            }
            crate::error::UpdateServiceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::CustomHealthNotFound(e) => e.request_id(),
            Self::DuplicateRequest(e) => e.request_id(),
            Self::InstanceNotFound(e) => e.request_id(),
            Self::InvalidInput(e) => e.request_id(),
            Self::NamespaceAlreadyExists(e) => e.request_id(),
            Self::NamespaceNotFound(e) => e.request_id(),
            Self::OperationNotFound(e) => e.request_id(),
            Self::RequestLimitExceeded(e) => e.request_id(),
            Self::ResourceInUse(e) => e.request_id(),
            Self::ResourceLimitExceeded(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ServiceAlreadyExists(e) => e.request_id(),
            Self::ServiceNotFound(e) => e.request_id(),
            Self::TooManyTagsException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
