// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Preview config
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PreviewConfig {
    /// The bandwidth allocation of a queue resource.
    pub bandwidth_allocation: f64,
    /// Timeout Config for preview contacts.
    pub timeout_config: ::std::option::Option<crate::types::TimeoutConfig>,
    /// Actions that can be performed by agent during preview phase.
    pub agent_actions: ::std::option::Option<::std::vec::Vec<crate::types::AgentAction>>,
}
impl PreviewConfig {
    /// The bandwidth allocation of a queue resource.
    pub fn bandwidth_allocation(&self) -> f64 {
        self.bandwidth_allocation
    }
    /// Timeout Config for preview contacts.
    pub fn timeout_config(&self) -> ::std::option::Option<&crate::types::TimeoutConfig> {
        self.timeout_config.as_ref()
    }
    /// Actions that can be performed by agent during preview phase.
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.agent_actions.is_none()`.
    pub fn agent_actions(&self) -> &[crate::types::AgentAction] {
        self.agent_actions.as_deref().unwrap_or_default()
    }
}
impl PreviewConfig {
    /// Creates a new builder-style object to manufacture [`PreviewConfig`](crate::types::PreviewConfig).
    pub fn builder() -> crate::types::builders::PreviewConfigBuilder {
        crate::types::builders::PreviewConfigBuilder::default()
    }
}

/// A builder for [`PreviewConfig`](crate::types::PreviewConfig).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct PreviewConfigBuilder {
    pub(crate) bandwidth_allocation: ::std::option::Option<f64>,
    pub(crate) timeout_config: ::std::option::Option<crate::types::TimeoutConfig>,
    pub(crate) agent_actions: ::std::option::Option<::std::vec::Vec<crate::types::AgentAction>>,
}
impl PreviewConfigBuilder {
    /// The bandwidth allocation of a queue resource.
    /// This field is required.
    pub fn bandwidth_allocation(mut self, input: f64) -> Self {
        self.bandwidth_allocation = ::std::option::Option::Some(input);
        self
    }
    /// The bandwidth allocation of a queue resource.
    pub fn set_bandwidth_allocation(mut self, input: ::std::option::Option<f64>) -> Self {
        self.bandwidth_allocation = input;
        self
    }
    /// The bandwidth allocation of a queue resource.
    pub fn get_bandwidth_allocation(&self) -> &::std::option::Option<f64> {
        &self.bandwidth_allocation
    }
    /// Timeout Config for preview contacts.
    /// This field is required.
    pub fn timeout_config(mut self, input: crate::types::TimeoutConfig) -> Self {
        self.timeout_config = ::std::option::Option::Some(input);
        self
    }
    /// Timeout Config for preview contacts.
    pub fn set_timeout_config(mut self, input: ::std::option::Option<crate::types::TimeoutConfig>) -> Self {
        self.timeout_config = input;
        self
    }
    /// Timeout Config for preview contacts.
    pub fn get_timeout_config(&self) -> &::std::option::Option<crate::types::TimeoutConfig> {
        &self.timeout_config
    }
    /// Appends an item to `agent_actions`.
    ///
    /// To override the contents of this collection use [`set_agent_actions`](Self::set_agent_actions).
    ///
    /// Actions that can be performed by agent during preview phase.
    pub fn agent_actions(mut self, input: crate::types::AgentAction) -> Self {
        let mut v = self.agent_actions.unwrap_or_default();
        v.push(input);
        self.agent_actions = ::std::option::Option::Some(v);
        self
    }
    /// Actions that can be performed by agent during preview phase.
    pub fn set_agent_actions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AgentAction>>) -> Self {
        self.agent_actions = input;
        self
    }
    /// Actions that can be performed by agent during preview phase.
    pub fn get_agent_actions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AgentAction>> {
        &self.agent_actions
    }
    /// Consumes the builder and constructs a [`PreviewConfig`](crate::types::PreviewConfig).
    /// This method will fail if any of the following fields are not set:
    /// - [`bandwidth_allocation`](crate::types::builders::PreviewConfigBuilder::bandwidth_allocation)
    pub fn build(self) -> ::std::result::Result<crate::types::PreviewConfig, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::PreviewConfig {
            bandwidth_allocation: self.bandwidth_allocation.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "bandwidth_allocation",
                    "bandwidth_allocation was not specified but it is required when building PreviewConfig",
                )
            })?,
            timeout_config: self.timeout_config,
            agent_actions: self.agent_actions,
        })
    }
}
