// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_sms_channel_subtype_config(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::SmsChannelSubtypeConfig,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.capacity {
        object.key("capacity").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::Float((*var_1).into()),
        );
    }
    if let Some(var_2) = &input.outbound_mode {
        #[allow(unused_mut)]
        let mut object_3 = object.key("outboundMode").start_object();
        crate::protocol_serde::shape_sms_outbound_mode::ser_sms_outbound_mode(&mut object_3, var_2)?;
        object_3.finish();
    }
    if let Some(var_4) = &input.default_outbound_config {
        #[allow(unused_mut)]
        let mut object_5 = object.key("defaultOutboundConfig").start_object();
        crate::protocol_serde::shape_sms_outbound_config::ser_sms_outbound_config(&mut object_5, var_4)?;
        object_5.finish();
    }
    Ok(())
}

pub(crate) fn de_sms_channel_subtype_config<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> ::std::result::Result<Option<crate::types::SmsChannelSubtypeConfig>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::SmsChannelSubtypeConfigBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "capacity" => {
                            builder = builder
                                .set_capacity(::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?.map(|v| v.to_f64_lossy()));
                        }
                        "outboundMode" => {
                            builder = builder.set_outbound_mode(crate::protocol_serde::shape_sms_outbound_mode::de_sms_outbound_mode(tokens)?);
                        }
                        "defaultOutboundConfig" => {
                            builder = builder
                                .set_default_outbound_config(crate::protocol_serde::shape_sms_outbound_config::de_sms_outbound_config(tokens)?);
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {other:?}"
                        )))
                    }
                }
            }
            Ok(Some(crate::serde_util::sms_channel_subtype_config_correct_errors(builder).build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
