// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn access_denied_exception_correct_errors(
    mut builder: crate::types::error::builders::AccessDeniedExceptionBuilder,
) -> crate::types::error::builders::AccessDeniedExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn conflict_exception_correct_errors(
    mut builder: crate::types::error::builders::ConflictExceptionBuilder,
) -> crate::types::error::builders::ConflictExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn internal_server_exception_correct_errors(
    mut builder: crate::types::error::builders::InternalServerExceptionBuilder,
) -> crate::types::error::builders::InternalServerExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_not_found_exception_correct_errors(
    mut builder: crate::types::error::builders::ResourceNotFoundExceptionBuilder,
) -> crate::types::error::builders::ResourceNotFoundExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn service_quota_exceeded_exception_correct_errors(
    mut builder: crate::types::error::builders::ServiceQuotaExceededExceptionBuilder,
) -> crate::types::error::builders::ServiceQuotaExceededExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn throttling_exception_correct_errors(
    mut builder: crate::types::error::builders::ThrottlingExceptionBuilder,
) -> crate::types::error::builders::ThrottlingExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_exception_correct_errors(
    mut builder: crate::types::error::builders::ValidationExceptionBuilder,
) -> crate::types::error::builders::ValidationExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn invalid_campaign_state_exception_correct_errors(
    mut builder: crate::types::error::builders::InvalidCampaignStateExceptionBuilder,
) -> crate::types::error::builders::InvalidCampaignStateExceptionBuilder {
    if builder.state.is_none() {
        builder.state = "no value was set".parse::<crate::types::CampaignState>().ok()
    }
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn invalid_state_exception_correct_errors(
    mut builder: crate::types::error::builders::InvalidStateExceptionBuilder,
) -> crate::types::error::builders::InvalidStateExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn campaign_correct_errors(mut builder: crate::types::builders::CampaignBuilder) -> crate::types::builders::CampaignBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.connect_instance_id.is_none() {
        builder.connect_instance_id = Some(Default::default())
    }
    if builder.channel_subtype_config.is_none() {
        builder.channel_subtype_config = {
            let builder = crate::types::builders::ChannelSubtypeConfigBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn instance_config_correct_errors(
    mut builder: crate::types::builders::InstanceConfigBuilder,
) -> crate::types::builders::InstanceConfigBuilder {
    if builder.connect_instance_id.is_none() {
        builder.connect_instance_id = Some(Default::default())
    }
    if builder.service_linked_role_arn.is_none() {
        builder.service_linked_role_arn = Some(Default::default())
    }
    if builder.encryption_config.is_none() {
        builder.encryption_config = {
            let builder = crate::types::builders::EncryptionConfigBuilder::default();
            Some(crate::serde_util::encryption_config_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn instance_onboarding_job_status_correct_errors(
    mut builder: crate::types::builders::InstanceOnboardingJobStatusBuilder,
) -> crate::types::builders::InstanceOnboardingJobStatusBuilder {
    if builder.connect_instance_id.is_none() {
        builder.connect_instance_id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::InstanceOnboardingJobStatusCode>().ok()
    }
    builder
}

pub(crate) fn campaign_summary_correct_errors(
    mut builder: crate::types::builders::CampaignSummaryBuilder,
) -> crate::types::builders::CampaignSummaryBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.connect_instance_id.is_none() {
        builder.connect_instance_id = Some(Default::default())
    }
    if builder.channel_subtypes.is_none() {
        builder.channel_subtypes = Some(Default::default())
    }
    builder
}

pub(crate) fn communication_time_config_correct_errors(
    mut builder: crate::types::builders::CommunicationTimeConfigBuilder,
) -> crate::types::builders::CommunicationTimeConfigBuilder {
    if builder.local_time_zone_config.is_none() {
        builder.local_time_zone_config = {
            let builder = crate::types::builders::LocalTimeZoneConfigBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn encryption_config_correct_errors(
    mut builder: crate::types::builders::EncryptionConfigBuilder,
) -> crate::types::builders::EncryptionConfigBuilder {
    if builder.enabled.is_none() {
        builder.enabled = Some(Default::default())
    }
    builder
}

pub(crate) fn schedule_correct_errors(mut builder: crate::types::builders::ScheduleBuilder) -> crate::types::builders::ScheduleBuilder {
    if builder.start_time.is_none() {
        builder.start_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.end_time.is_none() {
        builder.end_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn customer_profiles_integration_summary_correct_errors(
    mut builder: crate::types::builders::CustomerProfilesIntegrationSummaryBuilder,
) -> crate::types::builders::CustomerProfilesIntegrationSummaryBuilder {
    if builder.domain_arn.is_none() {
        builder.domain_arn = Some(Default::default())
    }
    if builder.object_type_names.is_none() {
        builder.object_type_names = Some(Default::default())
    }
    builder
}

pub(crate) fn email_channel_subtype_config_correct_errors(
    mut builder: crate::types::builders::EmailChannelSubtypeConfigBuilder,
) -> crate::types::builders::EmailChannelSubtypeConfigBuilder {
    if builder.outbound_mode.is_none() {
        builder.outbound_mode = Some(crate::types::EmailOutboundMode::Unknown)
    }
    if builder.default_outbound_config.is_none() {
        builder.default_outbound_config = {
            let builder = crate::types::builders::EmailOutboundConfigBuilder::default();
            crate::serde_util::email_outbound_config_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn q_connect_integration_summary_correct_errors(
    mut builder: crate::types::builders::QConnectIntegrationSummaryBuilder,
) -> crate::types::builders::QConnectIntegrationSummaryBuilder {
    if builder.knowledge_base_arn.is_none() {
        builder.knowledge_base_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn sms_channel_subtype_config_correct_errors(
    mut builder: crate::types::builders::SmsChannelSubtypeConfigBuilder,
) -> crate::types::builders::SmsChannelSubtypeConfigBuilder {
    if builder.outbound_mode.is_none() {
        builder.outbound_mode = Some(crate::types::SmsOutboundMode::Unknown)
    }
    if builder.default_outbound_config.is_none() {
        builder.default_outbound_config = {
            let builder = crate::types::builders::SmsOutboundConfigBuilder::default();
            crate::serde_util::sms_outbound_config_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn telephony_channel_subtype_config_correct_errors(
    mut builder: crate::types::builders::TelephonyChannelSubtypeConfigBuilder,
) -> crate::types::builders::TelephonyChannelSubtypeConfigBuilder {
    if builder.outbound_mode.is_none() {
        builder.outbound_mode = Some(crate::types::TelephonyOutboundMode::Unknown)
    }
    if builder.default_outbound_config.is_none() {
        builder.default_outbound_config = {
            let builder = crate::types::builders::TelephonyOutboundConfigBuilder::default();
            crate::serde_util::telephony_outbound_config_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn time_window_correct_errors(mut builder: crate::types::builders::TimeWindowBuilder) -> crate::types::builders::TimeWindowBuilder {
    if builder.open_hours.is_none() {
        builder.open_hours = Some(crate::types::OpenHours::Unknown)
    }
    builder
}

pub(crate) fn communication_limit_correct_errors(
    mut builder: crate::types::builders::CommunicationLimitBuilder,
) -> crate::types::builders::CommunicationLimitBuilder {
    if builder.max_count_per_recipient.is_none() {
        builder.max_count_per_recipient = Some(Default::default())
    }
    if builder.frequency.is_none() {
        builder.frequency = Some(Default::default())
    }
    if builder.unit.is_none() {
        builder.unit = "no value was set".parse::<crate::types::CommunicationLimitTimeUnit>().ok()
    }
    builder
}

pub(crate) fn email_outbound_config_correct_errors(
    mut builder: crate::types::builders::EmailOutboundConfigBuilder,
) -> crate::types::builders::EmailOutboundConfigBuilder {
    if builder.connect_source_email_address.is_none() {
        builder.connect_source_email_address = Some(Default::default())
    }
    if builder.wisdom_template_arn.is_none() {
        builder.wisdom_template_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn sms_outbound_config_correct_errors(
    mut builder: crate::types::builders::SmsOutboundConfigBuilder,
) -> crate::types::builders::SmsOutboundConfigBuilder {
    if builder.connect_source_phone_number_arn.is_none() {
        builder.connect_source_phone_number_arn = Some(Default::default())
    }
    if builder.wisdom_template_arn.is_none() {
        builder.wisdom_template_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn telephony_outbound_config_correct_errors(
    mut builder: crate::types::builders::TelephonyOutboundConfigBuilder,
) -> crate::types::builders::TelephonyOutboundConfigBuilder {
    if builder.connect_contact_flow_id.is_none() {
        builder.connect_contact_flow_id = Some(Default::default())
    }
    builder
}

pub(crate) fn answer_machine_detection_config_correct_errors(
    mut builder: crate::types::builders::AnswerMachineDetectionConfigBuilder,
) -> crate::types::builders::AnswerMachineDetectionConfigBuilder {
    if builder.enable_answer_machine_detection.is_none() {
        builder.enable_answer_machine_detection = Some(Default::default())
    }
    builder
}

pub(crate) fn predictive_config_correct_errors(
    mut builder: crate::types::builders::PredictiveConfigBuilder,
) -> crate::types::builders::PredictiveConfigBuilder {
    if builder.bandwidth_allocation.is_none() {
        builder.bandwidth_allocation = Some(Default::default())
    }
    builder
}

pub(crate) fn preview_config_correct_errors(
    mut builder: crate::types::builders::PreviewConfigBuilder,
) -> crate::types::builders::PreviewConfigBuilder {
    if builder.bandwidth_allocation.is_none() {
        builder.bandwidth_allocation = Some(Default::default())
    }
    if builder.timeout_config.is_none() {
        builder.timeout_config = {
            let builder = crate::types::builders::TimeoutConfigBuilder::default();
            crate::serde_util::timeout_config_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn progressive_config_correct_errors(
    mut builder: crate::types::builders::ProgressiveConfigBuilder,
) -> crate::types::builders::ProgressiveConfigBuilder {
    if builder.bandwidth_allocation.is_none() {
        builder.bandwidth_allocation = Some(Default::default())
    }
    builder
}

pub(crate) fn restricted_period_correct_errors(
    mut builder: crate::types::builders::RestrictedPeriodBuilder,
) -> crate::types::builders::RestrictedPeriodBuilder {
    if builder.start_date.is_none() {
        builder.start_date = Some(Default::default())
    }
    if builder.end_date.is_none() {
        builder.end_date = Some(Default::default())
    }
    builder
}

pub(crate) fn timeout_config_correct_errors(
    mut builder: crate::types::builders::TimeoutConfigBuilder,
) -> crate::types::builders::TimeoutConfigBuilder {
    if builder.duration_in_seconds.is_none() {
        builder.duration_in_seconds = Some(Default::default())
    }
    builder
}

pub(crate) fn time_range_correct_errors(mut builder: crate::types::builders::TimeRangeBuilder) -> crate::types::builders::TimeRangeBuilder {
    if builder.start_time.is_none() {
        builder.start_time = Some(Default::default())
    }
    if builder.end_time.is_none() {
        builder.end_time = Some(Default::default())
    }
    builder
}
