// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about a data set import task.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DataSetImportTask {
    /// <p>The identifier of the data set import task.</p>
    pub task_id: ::std::string::String,
    /// <p>The status of the data set import task.</p>
    pub status: crate::types::DataSetTaskLifecycle,
    /// <p>A summary of the data set import task.</p>
    pub summary: ::std::option::Option<crate::types::DataSetImportSummary>,
}
impl DataSetImportTask {
    /// <p>The identifier of the data set import task.</p>
    pub fn task_id(&self) -> &str {
        use std::ops::Deref;
        self.task_id.deref()
    }
    /// <p>The status of the data set import task.</p>
    pub fn status(&self) -> &crate::types::DataSetTaskLifecycle {
        &self.status
    }
    /// <p>A summary of the data set import task.</p>
    pub fn summary(&self) -> ::std::option::Option<&crate::types::DataSetImportSummary> {
        self.summary.as_ref()
    }
}
impl DataSetImportTask {
    /// Creates a new builder-style object to manufacture [`DataSetImportTask`](crate::types::DataSetImportTask).
    pub fn builder() -> crate::types::builders::DataSetImportTaskBuilder {
        crate::types::builders::DataSetImportTaskBuilder::default()
    }
}

/// A builder for [`DataSetImportTask`](crate::types::DataSetImportTask).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DataSetImportTaskBuilder {
    pub(crate) task_id: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::DataSetTaskLifecycle>,
    pub(crate) summary: ::std::option::Option<crate::types::DataSetImportSummary>,
}
impl DataSetImportTaskBuilder {
    /// <p>The identifier of the data set import task.</p>
    /// This field is required.
    pub fn task_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.task_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the data set import task.</p>
    pub fn set_task_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.task_id = input;
        self
    }
    /// <p>The identifier of the data set import task.</p>
    pub fn get_task_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.task_id
    }
    /// <p>The status of the data set import task.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::DataSetTaskLifecycle) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the data set import task.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::DataSetTaskLifecycle>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the data set import task.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::DataSetTaskLifecycle> {
        &self.status
    }
    /// <p>A summary of the data set import task.</p>
    /// This field is required.
    pub fn summary(mut self, input: crate::types::DataSetImportSummary) -> Self {
        self.summary = ::std::option::Option::Some(input);
        self
    }
    /// <p>A summary of the data set import task.</p>
    pub fn set_summary(mut self, input: ::std::option::Option<crate::types::DataSetImportSummary>) -> Self {
        self.summary = input;
        self
    }
    /// <p>A summary of the data set import task.</p>
    pub fn get_summary(&self) -> &::std::option::Option<crate::types::DataSetImportSummary> {
        &self.summary
    }
    /// Consumes the builder and constructs a [`DataSetImportTask`](crate::types::DataSetImportTask).
    /// This method will fail if any of the following fields are not set:
    /// - [`task_id`](crate::types::builders::DataSetImportTaskBuilder::task_id)
    /// - [`status`](crate::types::builders::DataSetImportTaskBuilder::status)
    pub fn build(self) -> ::std::result::Result<crate::types::DataSetImportTask, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::DataSetImportTask {
            task_id: self.task_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "task_id",
                    "task_id was not specified but it is required when building DataSetImportTask",
                )
            })?,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building DataSetImportTask",
                )
            })?,
            summary: self.summary,
        })
    }
}
