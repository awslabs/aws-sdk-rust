// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains a subset of the possible runtime environment attributes. Used in the environment list.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct EnvironmentSummary {
    /// <p>The name of the runtime environment.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of a particular runtime environment.</p>
    #[doc(hidden)]
    pub environment_arn: std::option::Option<std::string::String>,
    /// <p>The unique identifier of a particular runtime environment.</p>
    #[doc(hidden)]
    pub environment_id: std::option::Option<std::string::String>,
    /// <p>The instance type of the runtime environment.</p>
    #[doc(hidden)]
    pub instance_type: std::option::Option<std::string::String>,
    /// <p>The status of the runtime environment</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::EnvironmentLifecycle>,
    /// <p>The target platform for the runtime environment.</p>
    #[doc(hidden)]
    pub engine_type: std::option::Option<crate::types::EngineType>,
    /// <p>The version of the runtime engine.</p>
    #[doc(hidden)]
    pub engine_version: std::option::Option<std::string::String>,
    /// <p>The timestamp when the runtime environment was created.</p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<aws_smithy_types::DateTime>,
}
impl EnvironmentSummary {
    /// <p>The name of the runtime environment.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of a particular runtime environment.</p>
    pub fn environment_arn(&self) -> std::option::Option<&str> {
        self.environment_arn.as_deref()
    }
    /// <p>The unique identifier of a particular runtime environment.</p>
    pub fn environment_id(&self) -> std::option::Option<&str> {
        self.environment_id.as_deref()
    }
    /// <p>The instance type of the runtime environment.</p>
    pub fn instance_type(&self) -> std::option::Option<&str> {
        self.instance_type.as_deref()
    }
    /// <p>The status of the runtime environment</p>
    pub fn status(&self) -> std::option::Option<&crate::types::EnvironmentLifecycle> {
        self.status.as_ref()
    }
    /// <p>The target platform for the runtime environment.</p>
    pub fn engine_type(&self) -> std::option::Option<&crate::types::EngineType> {
        self.engine_type.as_ref()
    }
    /// <p>The version of the runtime engine.</p>
    pub fn engine_version(&self) -> std::option::Option<&str> {
        self.engine_version.as_deref()
    }
    /// <p>The timestamp when the runtime environment was created.</p>
    pub fn creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
}
impl EnvironmentSummary {
    /// Creates a new builder-style object to manufacture [`EnvironmentSummary`](crate::types::EnvironmentSummary).
    pub fn builder() -> crate::types::builders::EnvironmentSummaryBuilder {
        crate::types::builders::EnvironmentSummaryBuilder::default()
    }
}

/// A builder for [`EnvironmentSummary`](crate::types::EnvironmentSummary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct EnvironmentSummaryBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) environment_arn: std::option::Option<std::string::String>,
    pub(crate) environment_id: std::option::Option<std::string::String>,
    pub(crate) instance_type: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<crate::types::EnvironmentLifecycle>,
    pub(crate) engine_type: std::option::Option<crate::types::EngineType>,
    pub(crate) engine_version: std::option::Option<std::string::String>,
    pub(crate) creation_time: std::option::Option<aws_smithy_types::DateTime>,
}
impl EnvironmentSummaryBuilder {
    /// <p>The name of the runtime environment.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the runtime environment.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of a particular runtime environment.</p>
    pub fn environment_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.environment_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of a particular runtime environment.</p>
    pub fn set_environment_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.environment_arn = input;
        self
    }
    /// <p>The unique identifier of a particular runtime environment.</p>
    pub fn environment_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.environment_id = Some(input.into());
        self
    }
    /// <p>The unique identifier of a particular runtime environment.</p>
    pub fn set_environment_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.environment_id = input;
        self
    }
    /// <p>The instance type of the runtime environment.</p>
    pub fn instance_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.instance_type = Some(input.into());
        self
    }
    /// <p>The instance type of the runtime environment.</p>
    pub fn set_instance_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.instance_type = input;
        self
    }
    /// <p>The status of the runtime environment</p>
    pub fn status(mut self, input: crate::types::EnvironmentLifecycle) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The status of the runtime environment</p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::EnvironmentLifecycle>,
    ) -> Self {
        self.status = input;
        self
    }
    /// <p>The target platform for the runtime environment.</p>
    pub fn engine_type(mut self, input: crate::types::EngineType) -> Self {
        self.engine_type = Some(input);
        self
    }
    /// <p>The target platform for the runtime environment.</p>
    pub fn set_engine_type(mut self, input: std::option::Option<crate::types::EngineType>) -> Self {
        self.engine_type = input;
        self
    }
    /// <p>The version of the runtime engine.</p>
    pub fn engine_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.engine_version = Some(input.into());
        self
    }
    /// <p>The version of the runtime engine.</p>
    pub fn set_engine_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.engine_version = input;
        self
    }
    /// <p>The timestamp when the runtime environment was created.</p>
    pub fn creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.creation_time = Some(input);
        self
    }
    /// <p>The timestamp when the runtime environment was created.</p>
    pub fn set_creation_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.creation_time = input;
        self
    }
    /// Consumes the builder and constructs a [`EnvironmentSummary`](crate::types::EnvironmentSummary).
    pub fn build(self) -> crate::types::EnvironmentSummary {
        crate::types::EnvironmentSummary {
            name: self.name,
            environment_arn: self.environment_arn,
            environment_id: self.environment_id,
            instance_type: self.instance_type,
            status: self.status,
            engine_type: self.engine_type,
            engine_version: self.engine_version,
            creation_time: self.creation_time,
        }
    }
}
