// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A subset of information about the engine version for a specific application.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct EngineVersionsSummary {
    /// <p>The type of target platform for the application.</p>
    #[doc(hidden)]
    pub engine_type: std::option::Option<std::string::String>,
    /// <p>The version of the engine type used by the application.</p>
    #[doc(hidden)]
    pub engine_version: std::option::Option<std::string::String>,
}
impl EngineVersionsSummary {
    /// <p>The type of target platform for the application.</p>
    pub fn engine_type(&self) -> std::option::Option<&str> {
        self.engine_type.as_deref()
    }
    /// <p>The version of the engine type used by the application.</p>
    pub fn engine_version(&self) -> std::option::Option<&str> {
        self.engine_version.as_deref()
    }
}
impl EngineVersionsSummary {
    /// Creates a new builder-style object to manufacture [`EngineVersionsSummary`](crate::types::EngineVersionsSummary).
    pub fn builder() -> crate::types::builders::EngineVersionsSummaryBuilder {
        crate::types::builders::EngineVersionsSummaryBuilder::default()
    }
}

/// A builder for [`EngineVersionsSummary`](crate::types::EngineVersionsSummary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct EngineVersionsSummaryBuilder {
    pub(crate) engine_type: std::option::Option<std::string::String>,
    pub(crate) engine_version: std::option::Option<std::string::String>,
}
impl EngineVersionsSummaryBuilder {
    /// <p>The type of target platform for the application.</p>
    pub fn engine_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.engine_type = Some(input.into());
        self
    }
    /// <p>The type of target platform for the application.</p>
    pub fn set_engine_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.engine_type = input;
        self
    }
    /// <p>The version of the engine type used by the application.</p>
    pub fn engine_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.engine_version = Some(input.into());
        self
    }
    /// <p>The version of the engine type used by the application.</p>
    pub fn set_engine_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.engine_version = input;
        self
    }
    /// Consumes the builder and constructs a [`EngineVersionsSummary`](crate::types::EngineVersionsSummary).
    pub fn build(self) -> crate::types::EngineVersionsSummary {
        crate::types::EngineVersionsSummary {
            engine_type: self.engine_type,
            engine_version: self.engine_version,
        }
    }
}
