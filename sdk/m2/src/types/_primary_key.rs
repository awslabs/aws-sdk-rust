// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The primary key for a KSDS data set.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PrimaryKey {
    /// <p>A name for the Primary Key.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>A positive integer value representing the offset to mark the start of the primary key in the record byte array.</p>
    #[doc(hidden)]
    pub offset: i32,
    /// <p>A strictly positive integer value representing the length of the primary key. </p>
    #[doc(hidden)]
    pub length: i32,
}
impl PrimaryKey {
    /// <p>A name for the Primary Key.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>A positive integer value representing the offset to mark the start of the primary key in the record byte array.</p>
    pub fn offset(&self) -> i32 {
        self.offset
    }
    /// <p>A strictly positive integer value representing the length of the primary key. </p>
    pub fn length(&self) -> i32 {
        self.length
    }
}
impl PrimaryKey {
    /// Creates a new builder-style object to manufacture [`PrimaryKey`](crate::types::PrimaryKey).
    pub fn builder() -> crate::types::builders::PrimaryKeyBuilder {
        crate::types::builders::PrimaryKeyBuilder::default()
    }
}

/// A builder for [`PrimaryKey`](crate::types::PrimaryKey).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PrimaryKeyBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) offset: std::option::Option<i32>,
    pub(crate) length: std::option::Option<i32>,
}
impl PrimaryKeyBuilder {
    /// <p>A name for the Primary Key.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>A name for the Primary Key.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>A positive integer value representing the offset to mark the start of the primary key in the record byte array.</p>
    pub fn offset(mut self, input: i32) -> Self {
        self.offset = Some(input);
        self
    }
    /// <p>A positive integer value representing the offset to mark the start of the primary key in the record byte array.</p>
    pub fn set_offset(mut self, input: std::option::Option<i32>) -> Self {
        self.offset = input;
        self
    }
    /// <p>A strictly positive integer value representing the length of the primary key. </p>
    pub fn length(mut self, input: i32) -> Self {
        self.length = Some(input);
        self
    }
    /// <p>A strictly positive integer value representing the length of the primary key. </p>
    pub fn set_length(mut self, input: std::option::Option<i32>) -> Self {
        self.length = input;
        self
    }
    /// Consumes the builder and constructs a [`PrimaryKey`](crate::types::PrimaryKey).
    pub fn build(self) -> crate::types::PrimaryKey {
        crate::types::PrimaryKey {
            name: self.name,
            offset: self.offset.unwrap_or_default(),
            length: self.length.unwrap_or_default(),
        }
    }
}
