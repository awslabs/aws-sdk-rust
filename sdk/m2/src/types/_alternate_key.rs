// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines an alternate key. This value is optional. A legacy data set might not have any alternate key defined but if those alternate keys definitions exist, provide them, as some applications will make use of them.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AlternateKey {
    /// <p>The name of the alternate key.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>A positive integer value representing the offset to mark the start of the alternate key part in the record byte array.</p>
    pub offset: i32,
    /// <p>A strictly positive integer value representing the length of the alternate key.</p>
    pub length: i32,
    /// <p>Indicates whether the alternate key values are supposed to be unique for the given data set.</p>
    pub allow_duplicates: bool,
}
impl AlternateKey {
    /// <p>The name of the alternate key.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>A positive integer value representing the offset to mark the start of the alternate key part in the record byte array.</p>
    pub fn offset(&self) -> i32 {
        self.offset
    }
    /// <p>A strictly positive integer value representing the length of the alternate key.</p>
    pub fn length(&self) -> i32 {
        self.length
    }
    /// <p>Indicates whether the alternate key values are supposed to be unique for the given data set.</p>
    pub fn allow_duplicates(&self) -> bool {
        self.allow_duplicates
    }
}
impl AlternateKey {
    /// Creates a new builder-style object to manufacture [`AlternateKey`](crate::types::AlternateKey).
    pub fn builder() -> crate::types::builders::AlternateKeyBuilder {
        crate::types::builders::AlternateKeyBuilder::default()
    }
}

/// A builder for [`AlternateKey`](crate::types::AlternateKey).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AlternateKeyBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) offset: ::std::option::Option<i32>,
    pub(crate) length: ::std::option::Option<i32>,
    pub(crate) allow_duplicates: ::std::option::Option<bool>,
}
impl AlternateKeyBuilder {
    /// <p>The name of the alternate key.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the alternate key.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the alternate key.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>A positive integer value representing the offset to mark the start of the alternate key part in the record byte array.</p>
    /// This field is required.
    pub fn offset(mut self, input: i32) -> Self {
        self.offset = ::std::option::Option::Some(input);
        self
    }
    /// <p>A positive integer value representing the offset to mark the start of the alternate key part in the record byte array.</p>
    pub fn set_offset(mut self, input: ::std::option::Option<i32>) -> Self {
        self.offset = input;
        self
    }
    /// <p>A positive integer value representing the offset to mark the start of the alternate key part in the record byte array.</p>
    pub fn get_offset(&self) -> &::std::option::Option<i32> {
        &self.offset
    }
    /// <p>A strictly positive integer value representing the length of the alternate key.</p>
    /// This field is required.
    pub fn length(mut self, input: i32) -> Self {
        self.length = ::std::option::Option::Some(input);
        self
    }
    /// <p>A strictly positive integer value representing the length of the alternate key.</p>
    pub fn set_length(mut self, input: ::std::option::Option<i32>) -> Self {
        self.length = input;
        self
    }
    /// <p>A strictly positive integer value representing the length of the alternate key.</p>
    pub fn get_length(&self) -> &::std::option::Option<i32> {
        &self.length
    }
    /// <p>Indicates whether the alternate key values are supposed to be unique for the given data set.</p>
    pub fn allow_duplicates(mut self, input: bool) -> Self {
        self.allow_duplicates = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether the alternate key values are supposed to be unique for the given data set.</p>
    pub fn set_allow_duplicates(mut self, input: ::std::option::Option<bool>) -> Self {
        self.allow_duplicates = input;
        self
    }
    /// <p>Indicates whether the alternate key values are supposed to be unique for the given data set.</p>
    pub fn get_allow_duplicates(&self) -> &::std::option::Option<bool> {
        &self.allow_duplicates
    }
    /// Consumes the builder and constructs a [`AlternateKey`](crate::types::AlternateKey).
    pub fn build(self) -> crate::types::AlternateKey {
        crate::types::AlternateKey {
            name: self.name,
            offset: self.offset.unwrap_or_default(),
            length: self.length.unwrap_or_default(),
            allow_duplicates: self.allow_duplicates.unwrap_or_default(),
        }
    }
}
