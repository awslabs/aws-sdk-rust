// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A subset of the attributes that describe a log group. In CloudWatch a log group is a group of log streams that share the same retention, monitoring, and access control settings.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct LogGroupSummary {
    /// <p>The type of log.</p>
    #[doc(hidden)]
    pub log_type: std::option::Option<std::string::String>,
    /// <p>The name of the log group.</p>
    #[doc(hidden)]
    pub log_group_name: std::option::Option<std::string::String>,
}
impl LogGroupSummary {
    /// <p>The type of log.</p>
    pub fn log_type(&self) -> std::option::Option<&str> {
        self.log_type.as_deref()
    }
    /// <p>The name of the log group.</p>
    pub fn log_group_name(&self) -> std::option::Option<&str> {
        self.log_group_name.as_deref()
    }
}
impl LogGroupSummary {
    /// Creates a new builder-style object to manufacture [`LogGroupSummary`](crate::types::LogGroupSummary).
    pub fn builder() -> crate::types::builders::LogGroupSummaryBuilder {
        crate::types::builders::LogGroupSummaryBuilder::default()
    }
}

/// A builder for [`LogGroupSummary`](crate::types::LogGroupSummary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct LogGroupSummaryBuilder {
    pub(crate) log_type: std::option::Option<std::string::String>,
    pub(crate) log_group_name: std::option::Option<std::string::String>,
}
impl LogGroupSummaryBuilder {
    /// <p>The type of log.</p>
    pub fn log_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.log_type = Some(input.into());
        self
    }
    /// <p>The type of log.</p>
    pub fn set_log_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.log_type = input;
        self
    }
    /// <p>The name of the log group.</p>
    pub fn log_group_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.log_group_name = Some(input.into());
        self
    }
    /// <p>The name of the log group.</p>
    pub fn set_log_group_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.log_group_name = input;
        self
    }
    /// Consumes the builder and constructs a [`LogGroupSummary`](crate::types::LogGroupSummary).
    pub fn build(self) -> crate::types::LogGroupSummary {
        crate::types::LogGroupSummary {
            log_type: self.log_type,
            log_group_name: self.log_group_name,
        }
    }
}
