// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The supported properties for a PS type data set.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PsAttributes {
    /// <p>The format of the data set records.</p>
    pub format: ::std::string::String,
    /// <p>The character set encoding of the data set.</p>
    pub encoding: ::std::option::Option<::std::string::String>,
}
impl PsAttributes {
    /// <p>The format of the data set records.</p>
    pub fn format(&self) -> &str {
        use std::ops::Deref;
        self.format.deref()
    }
    /// <p>The character set encoding of the data set.</p>
    pub fn encoding(&self) -> ::std::option::Option<&str> {
        self.encoding.as_deref()
    }
}
impl PsAttributes {
    /// Creates a new builder-style object to manufacture [`PsAttributes`](crate::types::PsAttributes).
    pub fn builder() -> crate::types::builders::PsAttributesBuilder {
        crate::types::builders::PsAttributesBuilder::default()
    }
}

/// A builder for [`PsAttributes`](crate::types::PsAttributes).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PsAttributesBuilder {
    pub(crate) format: ::std::option::Option<::std::string::String>,
    pub(crate) encoding: ::std::option::Option<::std::string::String>,
}
impl PsAttributesBuilder {
    /// <p>The format of the data set records.</p>
    /// This field is required.
    pub fn format(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.format = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The format of the data set records.</p>
    pub fn set_format(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.format = input;
        self
    }
    /// <p>The format of the data set records.</p>
    pub fn get_format(&self) -> &::std::option::Option<::std::string::String> {
        &self.format
    }
    /// <p>The character set encoding of the data set.</p>
    pub fn encoding(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.encoding = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The character set encoding of the data set.</p>
    pub fn set_encoding(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.encoding = input;
        self
    }
    /// <p>The character set encoding of the data set.</p>
    pub fn get_encoding(&self) -> &::std::option::Option<::std::string::String> {
        &self.encoding
    }
    /// Consumes the builder and constructs a [`PsAttributes`](crate::types::PsAttributes).
    /// This method will fail if any of the following fields are not set:
    /// - [`format`](crate::types::builders::PsAttributesBuilder::format)
    pub fn build(self) -> ::std::result::Result<crate::types::PsAttributes, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::PsAttributes {
            format: self.format.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "format",
                    "format was not specified but it is required when building PsAttributes",
                )
            })?,
            encoding: self.encoding,
        })
    }
}
