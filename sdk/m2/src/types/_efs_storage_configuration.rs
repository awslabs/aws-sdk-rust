// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines the storage configuration for an Amazon EFS file system.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct EfsStorageConfiguration {
    /// <p>The file system identifier.</p>
    #[doc(hidden)]
    pub file_system_id: std::option::Option<std::string::String>,
    /// <p>The mount point for the file system.</p>
    #[doc(hidden)]
    pub mount_point: std::option::Option<std::string::String>,
}
impl EfsStorageConfiguration {
    /// <p>The file system identifier.</p>
    pub fn file_system_id(&self) -> std::option::Option<&str> {
        self.file_system_id.as_deref()
    }
    /// <p>The mount point for the file system.</p>
    pub fn mount_point(&self) -> std::option::Option<&str> {
        self.mount_point.as_deref()
    }
}
impl EfsStorageConfiguration {
    /// Creates a new builder-style object to manufacture [`EfsStorageConfiguration`](crate::types::EfsStorageConfiguration).
    pub fn builder() -> crate::types::builders::EfsStorageConfigurationBuilder {
        crate::types::builders::EfsStorageConfigurationBuilder::default()
    }
}

/// A builder for [`EfsStorageConfiguration`](crate::types::EfsStorageConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct EfsStorageConfigurationBuilder {
    pub(crate) file_system_id: std::option::Option<std::string::String>,
    pub(crate) mount_point: std::option::Option<std::string::String>,
}
impl EfsStorageConfigurationBuilder {
    /// <p>The file system identifier.</p>
    pub fn file_system_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.file_system_id = Some(input.into());
        self
    }
    /// <p>The file system identifier.</p>
    pub fn set_file_system_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.file_system_id = input;
        self
    }
    /// <p>The mount point for the file system.</p>
    pub fn mount_point(mut self, input: impl Into<std::string::String>) -> Self {
        self.mount_point = Some(input.into());
        self
    }
    /// <p>The mount point for the file system.</p>
    pub fn set_mount_point(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.mount_point = input;
        self
    }
    /// Consumes the builder and constructs a [`EfsStorageConfiguration`](crate::types::EfsStorageConfiguration).
    pub fn build(self) -> crate::types::EfsStorageConfiguration {
        crate::types::EfsStorageConfiguration {
            file_system_id: self.file_system_id,
            mount_point: self.mount_point,
        }
    }
}
