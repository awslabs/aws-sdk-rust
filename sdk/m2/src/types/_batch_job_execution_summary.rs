// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A subset of the possible batch job attributes. Used in the batch job list.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BatchJobExecutionSummary {
    /// <p>The unique identifier of this execution of the batch job.</p>
    pub execution_id: ::std::string::String,
    /// <p>The unique identifier of the application that hosts this batch job.</p>
    pub application_id: ::std::string::String,
    /// <p>The unique identifier of a particular batch job.</p>
    pub job_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of a particular batch job.</p>
    pub job_name: ::std::option::Option<::std::string::String>,
    /// <p>The type of a particular batch job execution.</p>
    pub job_type: ::std::option::Option<crate::types::BatchJobType>,
    /// <p>The status of a particular batch job execution.</p>
    pub status: crate::types::BatchJobExecutionStatus,
    /// <p>The timestamp when a particular batch job execution started.</p>
    pub start_time: ::aws_smithy_types::DateTime,
    /// <p>The timestamp when this batch job execution ended.</p>
    pub end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The batch job return code from either the Blu Age or Micro Focus runtime engines. For more information, see <a href="https://www.ibm.com/docs/en/was/8.5.5?topic=model-batch-return-codes">Batch return codes</a> in the <i>IBM WebSphere Application Server</i> documentation.</p>
    pub return_code: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier of this batch job.</p>
    pub batch_job_identifier: ::std::option::Option<crate::types::BatchJobIdentifier>,
}
impl BatchJobExecutionSummary {
    /// <p>The unique identifier of this execution of the batch job.</p>
    pub fn execution_id(&self) -> &str {
        use std::ops::Deref;
        self.execution_id.deref()
    }
    /// <p>The unique identifier of the application that hosts this batch job.</p>
    pub fn application_id(&self) -> &str {
        use std::ops::Deref;
        self.application_id.deref()
    }
    /// <p>The unique identifier of a particular batch job.</p>
    pub fn job_id(&self) -> ::std::option::Option<&str> {
        self.job_id.as_deref()
    }
    /// <p>The name of a particular batch job.</p>
    pub fn job_name(&self) -> ::std::option::Option<&str> {
        self.job_name.as_deref()
    }
    /// <p>The type of a particular batch job execution.</p>
    pub fn job_type(&self) -> ::std::option::Option<&crate::types::BatchJobType> {
        self.job_type.as_ref()
    }
    /// <p>The status of a particular batch job execution.</p>
    pub fn status(&self) -> &crate::types::BatchJobExecutionStatus {
        &self.status
    }
    /// <p>The timestamp when a particular batch job execution started.</p>
    pub fn start_time(&self) -> &::aws_smithy_types::DateTime {
        &self.start_time
    }
    /// <p>The timestamp when this batch job execution ended.</p>
    pub fn end_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.end_time.as_ref()
    }
    /// <p>The batch job return code from either the Blu Age or Micro Focus runtime engines. For more information, see <a href="https://www.ibm.com/docs/en/was/8.5.5?topic=model-batch-return-codes">Batch return codes</a> in the <i>IBM WebSphere Application Server</i> documentation.</p>
    pub fn return_code(&self) -> ::std::option::Option<&str> {
        self.return_code.as_deref()
    }
    /// <p>The unique identifier of this batch job.</p>
    pub fn batch_job_identifier(&self) -> ::std::option::Option<&crate::types::BatchJobIdentifier> {
        self.batch_job_identifier.as_ref()
    }
}
impl BatchJobExecutionSummary {
    /// Creates a new builder-style object to manufacture [`BatchJobExecutionSummary`](crate::types::BatchJobExecutionSummary).
    pub fn builder() -> crate::types::builders::BatchJobExecutionSummaryBuilder {
        crate::types::builders::BatchJobExecutionSummaryBuilder::default()
    }
}

/// A builder for [`BatchJobExecutionSummary`](crate::types::BatchJobExecutionSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct BatchJobExecutionSummaryBuilder {
    pub(crate) execution_id: ::std::option::Option<::std::string::String>,
    pub(crate) application_id: ::std::option::Option<::std::string::String>,
    pub(crate) job_id: ::std::option::Option<::std::string::String>,
    pub(crate) job_name: ::std::option::Option<::std::string::String>,
    pub(crate) job_type: ::std::option::Option<crate::types::BatchJobType>,
    pub(crate) status: ::std::option::Option<crate::types::BatchJobExecutionStatus>,
    pub(crate) start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) return_code: ::std::option::Option<::std::string::String>,
    pub(crate) batch_job_identifier: ::std::option::Option<crate::types::BatchJobIdentifier>,
}
impl BatchJobExecutionSummaryBuilder {
    /// <p>The unique identifier of this execution of the batch job.</p>
    /// This field is required.
    pub fn execution_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.execution_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of this execution of the batch job.</p>
    pub fn set_execution_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.execution_id = input;
        self
    }
    /// <p>The unique identifier of this execution of the batch job.</p>
    pub fn get_execution_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.execution_id
    }
    /// <p>The unique identifier of the application that hosts this batch job.</p>
    /// This field is required.
    pub fn application_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.application_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the application that hosts this batch job.</p>
    pub fn set_application_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.application_id = input;
        self
    }
    /// <p>The unique identifier of the application that hosts this batch job.</p>
    pub fn get_application_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.application_id
    }
    /// <p>The unique identifier of a particular batch job.</p>
    pub fn job_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.job_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of a particular batch job.</p>
    pub fn set_job_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.job_id = input;
        self
    }
    /// <p>The unique identifier of a particular batch job.</p>
    pub fn get_job_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.job_id
    }
    /// <p>The name of a particular batch job.</p>
    pub fn job_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.job_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of a particular batch job.</p>
    pub fn set_job_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.job_name = input;
        self
    }
    /// <p>The name of a particular batch job.</p>
    pub fn get_job_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.job_name
    }
    /// <p>The type of a particular batch job execution.</p>
    pub fn job_type(mut self, input: crate::types::BatchJobType) -> Self {
        self.job_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of a particular batch job execution.</p>
    pub fn set_job_type(mut self, input: ::std::option::Option<crate::types::BatchJobType>) -> Self {
        self.job_type = input;
        self
    }
    /// <p>The type of a particular batch job execution.</p>
    pub fn get_job_type(&self) -> &::std::option::Option<crate::types::BatchJobType> {
        &self.job_type
    }
    /// <p>The status of a particular batch job execution.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::BatchJobExecutionStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of a particular batch job execution.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::BatchJobExecutionStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of a particular batch job execution.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::BatchJobExecutionStatus> {
        &self.status
    }
    /// <p>The timestamp when a particular batch job execution started.</p>
    /// This field is required.
    pub fn start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when a particular batch job execution started.</p>
    pub fn set_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.start_time = input;
        self
    }
    /// <p>The timestamp when a particular batch job execution started.</p>
    pub fn get_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.start_time
    }
    /// <p>The timestamp when this batch job execution ended.</p>
    pub fn end_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.end_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when this batch job execution ended.</p>
    pub fn set_end_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.end_time = input;
        self
    }
    /// <p>The timestamp when this batch job execution ended.</p>
    pub fn get_end_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.end_time
    }
    /// <p>The batch job return code from either the Blu Age or Micro Focus runtime engines. For more information, see <a href="https://www.ibm.com/docs/en/was/8.5.5?topic=model-batch-return-codes">Batch return codes</a> in the <i>IBM WebSphere Application Server</i> documentation.</p>
    pub fn return_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.return_code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The batch job return code from either the Blu Age or Micro Focus runtime engines. For more information, see <a href="https://www.ibm.com/docs/en/was/8.5.5?topic=model-batch-return-codes">Batch return codes</a> in the <i>IBM WebSphere Application Server</i> documentation.</p>
    pub fn set_return_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.return_code = input;
        self
    }
    /// <p>The batch job return code from either the Blu Age or Micro Focus runtime engines. For more information, see <a href="https://www.ibm.com/docs/en/was/8.5.5?topic=model-batch-return-codes">Batch return codes</a> in the <i>IBM WebSphere Application Server</i> documentation.</p>
    pub fn get_return_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.return_code
    }
    /// <p>The unique identifier of this batch job.</p>
    pub fn batch_job_identifier(mut self, input: crate::types::BatchJobIdentifier) -> Self {
        self.batch_job_identifier = ::std::option::Option::Some(input);
        self
    }
    /// <p>The unique identifier of this batch job.</p>
    pub fn set_batch_job_identifier(mut self, input: ::std::option::Option<crate::types::BatchJobIdentifier>) -> Self {
        self.batch_job_identifier = input;
        self
    }
    /// <p>The unique identifier of this batch job.</p>
    pub fn get_batch_job_identifier(&self) -> &::std::option::Option<crate::types::BatchJobIdentifier> {
        &self.batch_job_identifier
    }
    /// Consumes the builder and constructs a [`BatchJobExecutionSummary`](crate::types::BatchJobExecutionSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`execution_id`](crate::types::builders::BatchJobExecutionSummaryBuilder::execution_id)
    /// - [`application_id`](crate::types::builders::BatchJobExecutionSummaryBuilder::application_id)
    /// - [`status`](crate::types::builders::BatchJobExecutionSummaryBuilder::status)
    /// - [`start_time`](crate::types::builders::BatchJobExecutionSummaryBuilder::start_time)
    pub fn build(self) -> ::std::result::Result<crate::types::BatchJobExecutionSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::BatchJobExecutionSummary {
            execution_id: self.execution_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "execution_id",
                    "execution_id was not specified but it is required when building BatchJobExecutionSummary",
                )
            })?,
            application_id: self.application_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "application_id",
                    "application_id was not specified but it is required when building BatchJobExecutionSummary",
                )
            })?,
            job_id: self.job_id,
            job_name: self.job_name,
            job_type: self.job_type,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building BatchJobExecutionSummary",
                )
            })?,
            start_time: self.start_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "start_time",
                    "start_time was not specified but it is required when building BatchJobExecutionSummary",
                )
            })?,
            end_time: self.end_time,
            return_code: self.return_code,
            batch_job_identifier: self.batch_job_identifier,
        })
    }
}
