// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides information related to a job step.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct JobStep {
    /// <p>The number of a step.</p>
    pub step_number: i32,
    /// <p>The name of a step.</p>
    pub step_name: ::std::option::Option<::std::string::String>,
    /// <p>The number of a procedure step.</p>
    pub proc_step_number: i32,
    /// <p>The name of a procedure step.</p>
    pub proc_step_name: ::std::option::Option<::std::string::String>,
    /// <p>The condition code of a step.</p>
    pub step_cond_code: ::std::option::Option<::std::string::String>,
    /// <p>Specifies if a step can be restarted or not.</p>
    pub step_restartable: bool,
}
impl JobStep {
    /// <p>The number of a step.</p>
    pub fn step_number(&self) -> i32 {
        self.step_number
    }
    /// <p>The name of a step.</p>
    pub fn step_name(&self) -> ::std::option::Option<&str> {
        self.step_name.as_deref()
    }
    /// <p>The number of a procedure step.</p>
    pub fn proc_step_number(&self) -> i32 {
        self.proc_step_number
    }
    /// <p>The name of a procedure step.</p>
    pub fn proc_step_name(&self) -> ::std::option::Option<&str> {
        self.proc_step_name.as_deref()
    }
    /// <p>The condition code of a step.</p>
    pub fn step_cond_code(&self) -> ::std::option::Option<&str> {
        self.step_cond_code.as_deref()
    }
    /// <p>Specifies if a step can be restarted or not.</p>
    pub fn step_restartable(&self) -> bool {
        self.step_restartable
    }
}
impl JobStep {
    /// Creates a new builder-style object to manufacture [`JobStep`](crate::types::JobStep).
    pub fn builder() -> crate::types::builders::JobStepBuilder {
        crate::types::builders::JobStepBuilder::default()
    }
}

/// A builder for [`JobStep`](crate::types::JobStep).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct JobStepBuilder {
    pub(crate) step_number: ::std::option::Option<i32>,
    pub(crate) step_name: ::std::option::Option<::std::string::String>,
    pub(crate) proc_step_number: ::std::option::Option<i32>,
    pub(crate) proc_step_name: ::std::option::Option<::std::string::String>,
    pub(crate) step_cond_code: ::std::option::Option<::std::string::String>,
    pub(crate) step_restartable: ::std::option::Option<bool>,
}
impl JobStepBuilder {
    /// <p>The number of a step.</p>
    pub fn step_number(mut self, input: i32) -> Self {
        self.step_number = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of a step.</p>
    pub fn set_step_number(mut self, input: ::std::option::Option<i32>) -> Self {
        self.step_number = input;
        self
    }
    /// <p>The number of a step.</p>
    pub fn get_step_number(&self) -> &::std::option::Option<i32> {
        &self.step_number
    }
    /// <p>The name of a step.</p>
    pub fn step_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.step_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of a step.</p>
    pub fn set_step_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.step_name = input;
        self
    }
    /// <p>The name of a step.</p>
    pub fn get_step_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.step_name
    }
    /// <p>The number of a procedure step.</p>
    pub fn proc_step_number(mut self, input: i32) -> Self {
        self.proc_step_number = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of a procedure step.</p>
    pub fn set_proc_step_number(mut self, input: ::std::option::Option<i32>) -> Self {
        self.proc_step_number = input;
        self
    }
    /// <p>The number of a procedure step.</p>
    pub fn get_proc_step_number(&self) -> &::std::option::Option<i32> {
        &self.proc_step_number
    }
    /// <p>The name of a procedure step.</p>
    pub fn proc_step_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.proc_step_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of a procedure step.</p>
    pub fn set_proc_step_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.proc_step_name = input;
        self
    }
    /// <p>The name of a procedure step.</p>
    pub fn get_proc_step_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.proc_step_name
    }
    /// <p>The condition code of a step.</p>
    pub fn step_cond_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.step_cond_code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The condition code of a step.</p>
    pub fn set_step_cond_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.step_cond_code = input;
        self
    }
    /// <p>The condition code of a step.</p>
    pub fn get_step_cond_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.step_cond_code
    }
    /// <p>Specifies if a step can be restarted or not.</p>
    pub fn step_restartable(mut self, input: bool) -> Self {
        self.step_restartable = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies if a step can be restarted or not.</p>
    pub fn set_step_restartable(mut self, input: ::std::option::Option<bool>) -> Self {
        self.step_restartable = input;
        self
    }
    /// <p>Specifies if a step can be restarted or not.</p>
    pub fn get_step_restartable(&self) -> &::std::option::Option<bool> {
        &self.step_restartable
    }
    /// Consumes the builder and constructs a [`JobStep`](crate::types::JobStep).
    pub fn build(self) -> crate::types::JobStep {
        crate::types::JobStep {
            step_number: self.step_number.unwrap_or_default(),
            step_name: self.step_name,
            proc_step_number: self.proc_step_number.unwrap_or_default(),
            proc_step_name: self.proc_step_name,
            step_cond_code: self.step_cond_code,
            step_restartable: self.step_restartable.unwrap_or_default(),
        }
    }
}
