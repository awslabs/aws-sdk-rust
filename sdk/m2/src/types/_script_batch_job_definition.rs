// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A batch job definition contained in a script.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ScriptBatchJobDefinition {
    /// <p>The name of the script containing the batch job definition.</p>
    #[doc(hidden)]
    pub script_name: std::option::Option<std::string::String>,
}
impl ScriptBatchJobDefinition {
    /// <p>The name of the script containing the batch job definition.</p>
    pub fn script_name(&self) -> std::option::Option<&str> {
        self.script_name.as_deref()
    }
}
impl ScriptBatchJobDefinition {
    /// Creates a new builder-style object to manufacture [`ScriptBatchJobDefinition`](crate::types::ScriptBatchJobDefinition).
    pub fn builder() -> crate::types::builders::ScriptBatchJobDefinitionBuilder {
        crate::types::builders::ScriptBatchJobDefinitionBuilder::default()
    }
}

/// A builder for [`ScriptBatchJobDefinition`](crate::types::ScriptBatchJobDefinition).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ScriptBatchJobDefinitionBuilder {
    pub(crate) script_name: std::option::Option<std::string::String>,
}
impl ScriptBatchJobDefinitionBuilder {
    /// <p>The name of the script containing the batch job definition.</p>
    pub fn script_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.script_name = Some(input.into());
        self
    }
    /// <p>The name of the script containing the batch job definition.</p>
    pub fn set_script_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.script_name = input;
        self
    }
    /// Consumes the builder and constructs a [`ScriptBatchJobDefinition`](crate::types::ScriptBatchJobDefinition).
    pub fn build(self) -> crate::types::ScriptBatchJobDefinition {
        crate::types::ScriptBatchJobDefinition {
            script_name: self.script_name,
        }
    }
}
