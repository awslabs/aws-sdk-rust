// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateApplicationInput {
    /// <p>The unique identifier of the application you want to update.</p>
    #[doc(hidden)]
    pub application_id: std::option::Option<std::string::String>,
    /// <p>The description of the application to update.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The current version of the application to update.</p>
    #[doc(hidden)]
    pub current_application_version: std::option::Option<i32>,
    /// <p>The application definition for this application. You can specify either inline JSON or an S3 bucket location.</p>
    #[doc(hidden)]
    pub definition: std::option::Option<crate::types::Definition>,
}
impl UpdateApplicationInput {
    /// <p>The unique identifier of the application you want to update.</p>
    pub fn application_id(&self) -> std::option::Option<&str> {
        self.application_id.as_deref()
    }
    /// <p>The description of the application to update.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The current version of the application to update.</p>
    pub fn current_application_version(&self) -> std::option::Option<i32> {
        self.current_application_version
    }
    /// <p>The application definition for this application. You can specify either inline JSON or an S3 bucket location.</p>
    pub fn definition(&self) -> std::option::Option<&crate::types::Definition> {
        self.definition.as_ref()
    }
}
impl UpdateApplicationInput {
    /// Creates a new builder-style object to manufacture [`UpdateApplicationInput`](crate::operation::update_application::UpdateApplicationInput).
    pub fn builder() -> crate::operation::update_application::builders::UpdateApplicationInputBuilder
    {
        crate::operation::update_application::builders::UpdateApplicationInputBuilder::default()
    }
}

/// A builder for [`UpdateApplicationInput`](crate::operation::update_application::UpdateApplicationInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateApplicationInputBuilder {
    pub(crate) application_id: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) current_application_version: std::option::Option<i32>,
    pub(crate) definition: std::option::Option<crate::types::Definition>,
}
impl UpdateApplicationInputBuilder {
    /// <p>The unique identifier of the application you want to update.</p>
    pub fn application_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.application_id = Some(input.into());
        self
    }
    /// <p>The unique identifier of the application you want to update.</p>
    pub fn set_application_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.application_id = input;
        self
    }
    /// <p>The description of the application to update.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The description of the application to update.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The current version of the application to update.</p>
    pub fn current_application_version(mut self, input: i32) -> Self {
        self.current_application_version = Some(input);
        self
    }
    /// <p>The current version of the application to update.</p>
    pub fn set_current_application_version(mut self, input: std::option::Option<i32>) -> Self {
        self.current_application_version = input;
        self
    }
    /// <p>The application definition for this application. You can specify either inline JSON or an S3 bucket location.</p>
    pub fn definition(mut self, input: crate::types::Definition) -> Self {
        self.definition = Some(input);
        self
    }
    /// <p>The application definition for this application. You can specify either inline JSON or an S3 bucket location.</p>
    pub fn set_definition(mut self, input: std::option::Option<crate::types::Definition>) -> Self {
        self.definition = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateApplicationInput`](crate::operation::update_application::UpdateApplicationInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::update_application::UpdateApplicationInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::update_application::UpdateApplicationInput {
                application_id: self.application_id,
                description: self.description,
                current_application_version: self.current_application_version,
                definition: self.definition,
            },
        )
    }
}
