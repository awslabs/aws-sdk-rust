// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetDeploymentOutput {
    /// <p>The unique identifier of the deployment.</p>
    #[doc(hidden)]
    pub deployment_id: std::option::Option<std::string::String>,
    /// <p>The unique identifier of the application.</p>
    #[doc(hidden)]
    pub application_id: std::option::Option<std::string::String>,
    /// <p>The unique identifier of the runtime environment.</p>
    #[doc(hidden)]
    pub environment_id: std::option::Option<std::string::String>,
    /// <p>The application version.</p>
    #[doc(hidden)]
    pub application_version: std::option::Option<i32>,
    /// <p>The status of the deployment.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::DeploymentLifecycle>,
    /// <p>The timestamp when the deployment was created.</p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The reason for the reported status.</p>
    #[doc(hidden)]
    pub status_reason: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetDeploymentOutput {
    /// <p>The unique identifier of the deployment.</p>
    pub fn deployment_id(&self) -> std::option::Option<&str> {
        self.deployment_id.as_deref()
    }
    /// <p>The unique identifier of the application.</p>
    pub fn application_id(&self) -> std::option::Option<&str> {
        self.application_id.as_deref()
    }
    /// <p>The unique identifier of the runtime environment.</p>
    pub fn environment_id(&self) -> std::option::Option<&str> {
        self.environment_id.as_deref()
    }
    /// <p>The application version.</p>
    pub fn application_version(&self) -> std::option::Option<i32> {
        self.application_version
    }
    /// <p>The status of the deployment.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::DeploymentLifecycle> {
        self.status.as_ref()
    }
    /// <p>The timestamp when the deployment was created.</p>
    pub fn creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The reason for the reported status.</p>
    pub fn status_reason(&self) -> std::option::Option<&str> {
        self.status_reason.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetDeploymentOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetDeploymentOutput {
    /// Creates a new builder-style object to manufacture [`GetDeploymentOutput`](crate::operation::get_deployment::GetDeploymentOutput).
    pub fn builder() -> crate::operation::get_deployment::builders::GetDeploymentOutputBuilder {
        crate::operation::get_deployment::builders::GetDeploymentOutputBuilder::default()
    }
}

/// A builder for [`GetDeploymentOutput`](crate::operation::get_deployment::GetDeploymentOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetDeploymentOutputBuilder {
    pub(crate) deployment_id: std::option::Option<std::string::String>,
    pub(crate) application_id: std::option::Option<std::string::String>,
    pub(crate) environment_id: std::option::Option<std::string::String>,
    pub(crate) application_version: std::option::Option<i32>,
    pub(crate) status: std::option::Option<crate::types::DeploymentLifecycle>,
    pub(crate) creation_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) status_reason: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetDeploymentOutputBuilder {
    /// <p>The unique identifier of the deployment.</p>
    pub fn deployment_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.deployment_id = Some(input.into());
        self
    }
    /// <p>The unique identifier of the deployment.</p>
    pub fn set_deployment_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.deployment_id = input;
        self
    }
    /// <p>The unique identifier of the application.</p>
    pub fn application_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.application_id = Some(input.into());
        self
    }
    /// <p>The unique identifier of the application.</p>
    pub fn set_application_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.application_id = input;
        self
    }
    /// <p>The unique identifier of the runtime environment.</p>
    pub fn environment_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.environment_id = Some(input.into());
        self
    }
    /// <p>The unique identifier of the runtime environment.</p>
    pub fn set_environment_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.environment_id = input;
        self
    }
    /// <p>The application version.</p>
    pub fn application_version(mut self, input: i32) -> Self {
        self.application_version = Some(input);
        self
    }
    /// <p>The application version.</p>
    pub fn set_application_version(mut self, input: std::option::Option<i32>) -> Self {
        self.application_version = input;
        self
    }
    /// <p>The status of the deployment.</p>
    pub fn status(mut self, input: crate::types::DeploymentLifecycle) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The status of the deployment.</p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::DeploymentLifecycle>,
    ) -> Self {
        self.status = input;
        self
    }
    /// <p>The timestamp when the deployment was created.</p>
    pub fn creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.creation_time = Some(input);
        self
    }
    /// <p>The timestamp when the deployment was created.</p>
    pub fn set_creation_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The reason for the reported status.</p>
    pub fn status_reason(mut self, input: impl Into<std::string::String>) -> Self {
        self.status_reason = Some(input.into());
        self
    }
    /// <p>The reason for the reported status.</p>
    pub fn set_status_reason(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.status_reason = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetDeploymentOutput`](crate::operation::get_deployment::GetDeploymentOutput).
    pub fn build(self) -> crate::operation::get_deployment::GetDeploymentOutput {
        crate::operation::get_deployment::GetDeploymentOutput {
            deployment_id: self.deployment_id,
            application_id: self.application_id,
            environment_id: self.environment_id,
            application_version: self.application_version,
            status: self.status,
            creation_time: self.creation_time,
            status_reason: self.status_reason,
            _request_id: self._request_id,
        }
    }
}
