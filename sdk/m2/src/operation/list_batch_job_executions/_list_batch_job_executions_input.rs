// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListBatchJobExecutionsInput {
    /// <p>A pagination token to control the number of batch job executions displayed in the list.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of batch job executions to return.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>The unique identifier of the application.</p>
    pub application_id: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier of each batch job execution.</p>
    pub execution_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The name of each batch job execution.</p>
    pub job_name: ::std::option::Option<::std::string::String>,
    /// <p>The status of the batch job executions.</p>
    pub status: ::std::option::Option<crate::types::BatchJobExecutionStatus>,
    /// <p>The time after which the batch job executions started.</p>
    pub started_after: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The time before the batch job executions started.</p>
    pub started_before: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl ListBatchJobExecutionsInput {
    /// <p>A pagination token to control the number of batch job executions displayed in the list.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of batch job executions to return.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>The unique identifier of the application.</p>
    pub fn application_id(&self) -> ::std::option::Option<&str> {
        self.application_id.as_deref()
    }
    /// <p>The unique identifier of each batch job execution.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.execution_ids.is_none()`.
    pub fn execution_ids(&self) -> &[::std::string::String] {
        self.execution_ids.as_deref().unwrap_or_default()
    }
    /// <p>The name of each batch job execution.</p>
    pub fn job_name(&self) -> ::std::option::Option<&str> {
        self.job_name.as_deref()
    }
    /// <p>The status of the batch job executions.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::BatchJobExecutionStatus> {
        self.status.as_ref()
    }
    /// <p>The time after which the batch job executions started.</p>
    pub fn started_after(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.started_after.as_ref()
    }
    /// <p>The time before the batch job executions started.</p>
    pub fn started_before(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.started_before.as_ref()
    }
}
impl ListBatchJobExecutionsInput {
    /// Creates a new builder-style object to manufacture [`ListBatchJobExecutionsInput`](crate::operation::list_batch_job_executions::ListBatchJobExecutionsInput).
    pub fn builder() -> crate::operation::list_batch_job_executions::builders::ListBatchJobExecutionsInputBuilder {
        crate::operation::list_batch_job_executions::builders::ListBatchJobExecutionsInputBuilder::default()
    }
}

/// A builder for [`ListBatchJobExecutionsInput`](crate::operation::list_batch_job_executions::ListBatchJobExecutionsInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListBatchJobExecutionsInputBuilder {
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) application_id: ::std::option::Option<::std::string::String>,
    pub(crate) execution_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) job_name: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::BatchJobExecutionStatus>,
    pub(crate) started_after: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) started_before: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl ListBatchJobExecutionsInputBuilder {
    /// <p>A pagination token to control the number of batch job executions displayed in the list.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A pagination token to control the number of batch job executions displayed in the list.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>A pagination token to control the number of batch job executions displayed in the list.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>The maximum number of batch job executions to return.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of batch job executions to return.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of batch job executions to return.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>The unique identifier of the application.</p>
    /// This field is required.
    pub fn application_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.application_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the application.</p>
    pub fn set_application_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.application_id = input;
        self
    }
    /// <p>The unique identifier of the application.</p>
    pub fn get_application_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.application_id
    }
    /// Appends an item to `execution_ids`.
    ///
    /// To override the contents of this collection use [`set_execution_ids`](Self::set_execution_ids).
    ///
    /// <p>The unique identifier of each batch job execution.</p>
    pub fn execution_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.execution_ids.unwrap_or_default();
        v.push(input.into());
        self.execution_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>The unique identifier of each batch job execution.</p>
    pub fn set_execution_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.execution_ids = input;
        self
    }
    /// <p>The unique identifier of each batch job execution.</p>
    pub fn get_execution_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.execution_ids
    }
    /// <p>The name of each batch job execution.</p>
    pub fn job_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.job_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of each batch job execution.</p>
    pub fn set_job_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.job_name = input;
        self
    }
    /// <p>The name of each batch job execution.</p>
    pub fn get_job_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.job_name
    }
    /// <p>The status of the batch job executions.</p>
    pub fn status(mut self, input: crate::types::BatchJobExecutionStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the batch job executions.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::BatchJobExecutionStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the batch job executions.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::BatchJobExecutionStatus> {
        &self.status
    }
    /// <p>The time after which the batch job executions started.</p>
    pub fn started_after(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.started_after = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time after which the batch job executions started.</p>
    pub fn set_started_after(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.started_after = input;
        self
    }
    /// <p>The time after which the batch job executions started.</p>
    pub fn get_started_after(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.started_after
    }
    /// <p>The time before the batch job executions started.</p>
    pub fn started_before(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.started_before = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time before the batch job executions started.</p>
    pub fn set_started_before(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.started_before = input;
        self
    }
    /// <p>The time before the batch job executions started.</p>
    pub fn get_started_before(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.started_before
    }
    /// Consumes the builder and constructs a [`ListBatchJobExecutionsInput`](crate::operation::list_batch_job_executions::ListBatchJobExecutionsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_batch_job_executions::ListBatchJobExecutionsInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::list_batch_job_executions::ListBatchJobExecutionsInput {
            next_token: self.next_token,
            max_results: self.max_results,
            application_id: self.application_id,
            execution_ids: self.execution_ids,
            job_name: self.job_name,
            status: self.status,
            started_after: self.started_after,
            started_before: self.started_before,
        })
    }
}
