// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateDataSetImportTaskInput {
    /// <p>The unique identifier of the application for which you want to import data sets.</p>
    pub application_id: ::std::option::Option<::std::string::String>,
    /// <p>The data set import task configuration.</p>
    pub import_config: ::std::option::Option<crate::types::DataSetImportConfig>,
    /// <p> Unique, case-sensitive identifier you provide to ensure the idempotency of the request to create a data set import. The service generates the clientToken when the API call is triggered. The token expires after one hour, so if you retry the API within this timeframe with the same clientToken, you will get the same response. The service also handles deleting the clientToken after it expires. </p>
    pub client_token: ::std::option::Option<::std::string::String>,
}
impl CreateDataSetImportTaskInput {
    /// <p>The unique identifier of the application for which you want to import data sets.</p>
    pub fn application_id(&self) -> ::std::option::Option<&str> {
        self.application_id.as_deref()
    }
    /// <p>The data set import task configuration.</p>
    pub fn import_config(&self) -> ::std::option::Option<&crate::types::DataSetImportConfig> {
        self.import_config.as_ref()
    }
    /// <p> Unique, case-sensitive identifier you provide to ensure the idempotency of the request to create a data set import. The service generates the clientToken when the API call is triggered. The token expires after one hour, so if you retry the API within this timeframe with the same clientToken, you will get the same response. The service also handles deleting the clientToken after it expires. </p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
}
impl CreateDataSetImportTaskInput {
    /// Creates a new builder-style object to manufacture [`CreateDataSetImportTaskInput`](crate::operation::create_data_set_import_task::CreateDataSetImportTaskInput).
    pub fn builder() -> crate::operation::create_data_set_import_task::builders::CreateDataSetImportTaskInputBuilder {
        crate::operation::create_data_set_import_task::builders::CreateDataSetImportTaskInputBuilder::default()
    }
}

/// A builder for [`CreateDataSetImportTaskInput`](crate::operation::create_data_set_import_task::CreateDataSetImportTaskInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateDataSetImportTaskInputBuilder {
    pub(crate) application_id: ::std::option::Option<::std::string::String>,
    pub(crate) import_config: ::std::option::Option<crate::types::DataSetImportConfig>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
}
impl CreateDataSetImportTaskInputBuilder {
    /// <p>The unique identifier of the application for which you want to import data sets.</p>
    /// This field is required.
    pub fn application_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.application_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the application for which you want to import data sets.</p>
    pub fn set_application_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.application_id = input;
        self
    }
    /// <p>The unique identifier of the application for which you want to import data sets.</p>
    pub fn get_application_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.application_id
    }
    /// <p>The data set import task configuration.</p>
    /// This field is required.
    pub fn import_config(mut self, input: crate::types::DataSetImportConfig) -> Self {
        self.import_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>The data set import task configuration.</p>
    pub fn set_import_config(mut self, input: ::std::option::Option<crate::types::DataSetImportConfig>) -> Self {
        self.import_config = input;
        self
    }
    /// <p>The data set import task configuration.</p>
    pub fn get_import_config(&self) -> &::std::option::Option<crate::types::DataSetImportConfig> {
        &self.import_config
    }
    /// <p> Unique, case-sensitive identifier you provide to ensure the idempotency of the request to create a data set import. The service generates the clientToken when the API call is triggered. The token expires after one hour, so if you retry the API within this timeframe with the same clientToken, you will get the same response. The service also handles deleting the clientToken after it expires. </p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> Unique, case-sensitive identifier you provide to ensure the idempotency of the request to create a data set import. The service generates the clientToken when the API call is triggered. The token expires after one hour, so if you retry the API within this timeframe with the same clientToken, you will get the same response. The service also handles deleting the clientToken after it expires. </p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p> Unique, case-sensitive identifier you provide to ensure the idempotency of the request to create a data set import. The service generates the clientToken when the API call is triggered. The token expires after one hour, so if you retry the API within this timeframe with the same clientToken, you will get the same response. The service also handles deleting the clientToken after it expires. </p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// Consumes the builder and constructs a [`CreateDataSetImportTaskInput`](crate::operation::create_data_set_import_task::CreateDataSetImportTaskInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_data_set_import_task::CreateDataSetImportTaskInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::create_data_set_import_task::CreateDataSetImportTaskInput {
            application_id: self.application_id,
            import_config: self.import_config,
            client_token: self.client_token,
        })
    }
}
