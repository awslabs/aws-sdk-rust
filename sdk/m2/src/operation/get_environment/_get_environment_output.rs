// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetEnvironmentOutput {
    /// <p>The name of the runtime environment. Must be unique within the account.</p>
    pub name: ::std::string::String,
    /// <p>The description of the runtime environment.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the runtime environment.</p>
    pub environment_arn: ::std::string::String,
    /// <p>The unique identifier of the runtime environment.</p>
    pub environment_id: ::std::string::String,
    /// <p>The type of instance underlying the runtime environment.</p>
    pub instance_type: ::std::string::String,
    /// <p>The status of the runtime environment.</p>
    pub status: crate::types::EnvironmentLifecycle,
    /// <p>The target platform for the runtime environment.</p>
    pub engine_type: crate::types::EngineType,
    /// <p>The version of the runtime engine.</p>
    pub engine_version: ::std::string::String,
    /// <p>The unique identifier for the VPC used with this runtime environment.</p>
    pub vpc_id: ::std::string::String,
    /// <p>The unique identifiers of the subnets assigned to this runtime environment.</p>
    pub subnet_ids: ::std::vec::Vec<::std::string::String>,
    /// <p>The unique identifiers of the security groups assigned to this runtime environment.</p>
    pub security_group_ids: ::std::vec::Vec<::std::string::String>,
    /// <p>The timestamp when the runtime environment was created.</p>
    pub creation_time: ::aws_smithy_types::DateTime,
    /// <p>The storage configurations defined for the runtime environment.</p>
    pub storage_configurations: ::std::option::Option<::std::vec::Vec<crate::types::StorageConfiguration>>,
    /// <p>The tags defined for this runtime environment.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>The desired capacity of the high availability configuration for the runtime environment.</p>
    pub high_availability_config: ::std::option::Option<crate::types::HighAvailabilityConfig>,
    /// <p>Whether applications running in this runtime environment are publicly accessible. </p>
    pub publicly_accessible: bool,
    /// <p>The number of instances included in the runtime environment. A standalone runtime environment has a maxiumum of one instance. Currently, a high availability runtime environment has a maximum of two instances. </p>
    pub actual_capacity: ::std::option::Option<i32>,
    /// <p>The Amazon Resource Name (ARN) for the load balancer used with the runtime environment.</p>
    pub load_balancer_arn: ::std::option::Option<::std::string::String>,
    /// <p>The reason for the reported status.</p>
    pub status_reason: ::std::option::Option<::std::string::String>,
    /// <p>Configures the maintenance window you want for the runtime environment. If you do not provide a value, a random system-generated value will be assigned.</p>
    pub preferred_maintenance_window: ::std::option::Option<::std::string::String>,
    /// <p>Indicates the pending maintenance scheduled on this environment.</p>
    pub pending_maintenance: ::std::option::Option<crate::types::PendingMaintenance>,
    /// <p>The identifier of a customer managed key.</p>
    pub kms_key_id: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl GetEnvironmentOutput {
    /// <p>The name of the runtime environment. Must be unique within the account.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The description of the runtime environment.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the runtime environment.</p>
    pub fn environment_arn(&self) -> &str {
        use std::ops::Deref;
        self.environment_arn.deref()
    }
    /// <p>The unique identifier of the runtime environment.</p>
    pub fn environment_id(&self) -> &str {
        use std::ops::Deref;
        self.environment_id.deref()
    }
    /// <p>The type of instance underlying the runtime environment.</p>
    pub fn instance_type(&self) -> &str {
        use std::ops::Deref;
        self.instance_type.deref()
    }
    /// <p>The status of the runtime environment.</p>
    pub fn status(&self) -> &crate::types::EnvironmentLifecycle {
        &self.status
    }
    /// <p>The target platform for the runtime environment.</p>
    pub fn engine_type(&self) -> &crate::types::EngineType {
        &self.engine_type
    }
    /// <p>The version of the runtime engine.</p>
    pub fn engine_version(&self) -> &str {
        use std::ops::Deref;
        self.engine_version.deref()
    }
    /// <p>The unique identifier for the VPC used with this runtime environment.</p>
    pub fn vpc_id(&self) -> &str {
        use std::ops::Deref;
        self.vpc_id.deref()
    }
    /// <p>The unique identifiers of the subnets assigned to this runtime environment.</p>
    pub fn subnet_ids(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.subnet_ids.deref()
    }
    /// <p>The unique identifiers of the security groups assigned to this runtime environment.</p>
    pub fn security_group_ids(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.security_group_ids.deref()
    }
    /// <p>The timestamp when the runtime environment was created.</p>
    pub fn creation_time(&self) -> &::aws_smithy_types::DateTime {
        &self.creation_time
    }
    /// <p>The storage configurations defined for the runtime environment.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.storage_configurations.is_none()`.
    pub fn storage_configurations(&self) -> &[crate::types::StorageConfiguration] {
        self.storage_configurations.as_deref().unwrap_or_default()
    }
    /// <p>The tags defined for this runtime environment.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
    /// <p>The desired capacity of the high availability configuration for the runtime environment.</p>
    pub fn high_availability_config(&self) -> ::std::option::Option<&crate::types::HighAvailabilityConfig> {
        self.high_availability_config.as_ref()
    }
    /// <p>Whether applications running in this runtime environment are publicly accessible. </p>
    pub fn publicly_accessible(&self) -> bool {
        self.publicly_accessible
    }
    /// <p>The number of instances included in the runtime environment. A standalone runtime environment has a maxiumum of one instance. Currently, a high availability runtime environment has a maximum of two instances. </p>
    pub fn actual_capacity(&self) -> ::std::option::Option<i32> {
        self.actual_capacity
    }
    /// <p>The Amazon Resource Name (ARN) for the load balancer used with the runtime environment.</p>
    pub fn load_balancer_arn(&self) -> ::std::option::Option<&str> {
        self.load_balancer_arn.as_deref()
    }
    /// <p>The reason for the reported status.</p>
    pub fn status_reason(&self) -> ::std::option::Option<&str> {
        self.status_reason.as_deref()
    }
    /// <p>Configures the maintenance window you want for the runtime environment. If you do not provide a value, a random system-generated value will be assigned.</p>
    pub fn preferred_maintenance_window(&self) -> ::std::option::Option<&str> {
        self.preferred_maintenance_window.as_deref()
    }
    /// <p>Indicates the pending maintenance scheduled on this environment.</p>
    pub fn pending_maintenance(&self) -> ::std::option::Option<&crate::types::PendingMaintenance> {
        self.pending_maintenance.as_ref()
    }
    /// <p>The identifier of a customer managed key.</p>
    pub fn kms_key_id(&self) -> ::std::option::Option<&str> {
        self.kms_key_id.as_deref()
    }
}
impl ::aws_http::request_id::RequestId for GetEnvironmentOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetEnvironmentOutput {
    /// Creates a new builder-style object to manufacture [`GetEnvironmentOutput`](crate::operation::get_environment::GetEnvironmentOutput).
    pub fn builder() -> crate::operation::get_environment::builders::GetEnvironmentOutputBuilder {
        crate::operation::get_environment::builders::GetEnvironmentOutputBuilder::default()
    }
}

/// A builder for [`GetEnvironmentOutput`](crate::operation::get_environment::GetEnvironmentOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetEnvironmentOutputBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) environment_arn: ::std::option::Option<::std::string::String>,
    pub(crate) environment_id: ::std::option::Option<::std::string::String>,
    pub(crate) instance_type: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::EnvironmentLifecycle>,
    pub(crate) engine_type: ::std::option::Option<crate::types::EngineType>,
    pub(crate) engine_version: ::std::option::Option<::std::string::String>,
    pub(crate) vpc_id: ::std::option::Option<::std::string::String>,
    pub(crate) subnet_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) security_group_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) storage_configurations: ::std::option::Option<::std::vec::Vec<crate::types::StorageConfiguration>>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) high_availability_config: ::std::option::Option<crate::types::HighAvailabilityConfig>,
    pub(crate) publicly_accessible: ::std::option::Option<bool>,
    pub(crate) actual_capacity: ::std::option::Option<i32>,
    pub(crate) load_balancer_arn: ::std::option::Option<::std::string::String>,
    pub(crate) status_reason: ::std::option::Option<::std::string::String>,
    pub(crate) preferred_maintenance_window: ::std::option::Option<::std::string::String>,
    pub(crate) pending_maintenance: ::std::option::Option<crate::types::PendingMaintenance>,
    pub(crate) kms_key_id: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl GetEnvironmentOutputBuilder {
    /// <p>The name of the runtime environment. Must be unique within the account.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the runtime environment. Must be unique within the account.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the runtime environment. Must be unique within the account.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The description of the runtime environment.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the runtime environment.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the runtime environment.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The Amazon Resource Name (ARN) of the runtime environment.</p>
    /// This field is required.
    pub fn environment_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.environment_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the runtime environment.</p>
    pub fn set_environment_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.environment_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the runtime environment.</p>
    pub fn get_environment_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.environment_arn
    }
    /// <p>The unique identifier of the runtime environment.</p>
    /// This field is required.
    pub fn environment_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.environment_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the runtime environment.</p>
    pub fn set_environment_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.environment_id = input;
        self
    }
    /// <p>The unique identifier of the runtime environment.</p>
    pub fn get_environment_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.environment_id
    }
    /// <p>The type of instance underlying the runtime environment.</p>
    /// This field is required.
    pub fn instance_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.instance_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type of instance underlying the runtime environment.</p>
    pub fn set_instance_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.instance_type = input;
        self
    }
    /// <p>The type of instance underlying the runtime environment.</p>
    pub fn get_instance_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.instance_type
    }
    /// <p>The status of the runtime environment.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::EnvironmentLifecycle) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the runtime environment.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::EnvironmentLifecycle>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the runtime environment.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::EnvironmentLifecycle> {
        &self.status
    }
    /// <p>The target platform for the runtime environment.</p>
    /// This field is required.
    pub fn engine_type(mut self, input: crate::types::EngineType) -> Self {
        self.engine_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The target platform for the runtime environment.</p>
    pub fn set_engine_type(mut self, input: ::std::option::Option<crate::types::EngineType>) -> Self {
        self.engine_type = input;
        self
    }
    /// <p>The target platform for the runtime environment.</p>
    pub fn get_engine_type(&self) -> &::std::option::Option<crate::types::EngineType> {
        &self.engine_type
    }
    /// <p>The version of the runtime engine.</p>
    /// This field is required.
    pub fn engine_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.engine_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version of the runtime engine.</p>
    pub fn set_engine_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.engine_version = input;
        self
    }
    /// <p>The version of the runtime engine.</p>
    pub fn get_engine_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.engine_version
    }
    /// <p>The unique identifier for the VPC used with this runtime environment.</p>
    /// This field is required.
    pub fn vpc_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vpc_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier for the VPC used with this runtime environment.</p>
    pub fn set_vpc_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vpc_id = input;
        self
    }
    /// <p>The unique identifier for the VPC used with this runtime environment.</p>
    pub fn get_vpc_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.vpc_id
    }
    /// Appends an item to `subnet_ids`.
    ///
    /// To override the contents of this collection use [`set_subnet_ids`](Self::set_subnet_ids).
    ///
    /// <p>The unique identifiers of the subnets assigned to this runtime environment.</p>
    pub fn subnet_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.subnet_ids.unwrap_or_default();
        v.push(input.into());
        self.subnet_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>The unique identifiers of the subnets assigned to this runtime environment.</p>
    pub fn set_subnet_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.subnet_ids = input;
        self
    }
    /// <p>The unique identifiers of the subnets assigned to this runtime environment.</p>
    pub fn get_subnet_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.subnet_ids
    }
    /// Appends an item to `security_group_ids`.
    ///
    /// To override the contents of this collection use [`set_security_group_ids`](Self::set_security_group_ids).
    ///
    /// <p>The unique identifiers of the security groups assigned to this runtime environment.</p>
    pub fn security_group_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.security_group_ids.unwrap_or_default();
        v.push(input.into());
        self.security_group_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>The unique identifiers of the security groups assigned to this runtime environment.</p>
    pub fn set_security_group_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.security_group_ids = input;
        self
    }
    /// <p>The unique identifiers of the security groups assigned to this runtime environment.</p>
    pub fn get_security_group_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.security_group_ids
    }
    /// <p>The timestamp when the runtime environment was created.</p>
    /// This field is required.
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the runtime environment was created.</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The timestamp when the runtime environment was created.</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// Appends an item to `storage_configurations`.
    ///
    /// To override the contents of this collection use [`set_storage_configurations`](Self::set_storage_configurations).
    ///
    /// <p>The storage configurations defined for the runtime environment.</p>
    pub fn storage_configurations(mut self, input: crate::types::StorageConfiguration) -> Self {
        let mut v = self.storage_configurations.unwrap_or_default();
        v.push(input);
        self.storage_configurations = ::std::option::Option::Some(v);
        self
    }
    /// <p>The storage configurations defined for the runtime environment.</p>
    pub fn set_storage_configurations(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::StorageConfiguration>>) -> Self {
        self.storage_configurations = input;
        self
    }
    /// <p>The storage configurations defined for the runtime environment.</p>
    pub fn get_storage_configurations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StorageConfiguration>> {
        &self.storage_configurations
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags defined for this runtime environment.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The tags defined for this runtime environment.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags defined for this runtime environment.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// <p>The desired capacity of the high availability configuration for the runtime environment.</p>
    pub fn high_availability_config(mut self, input: crate::types::HighAvailabilityConfig) -> Self {
        self.high_availability_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>The desired capacity of the high availability configuration for the runtime environment.</p>
    pub fn set_high_availability_config(mut self, input: ::std::option::Option<crate::types::HighAvailabilityConfig>) -> Self {
        self.high_availability_config = input;
        self
    }
    /// <p>The desired capacity of the high availability configuration for the runtime environment.</p>
    pub fn get_high_availability_config(&self) -> &::std::option::Option<crate::types::HighAvailabilityConfig> {
        &self.high_availability_config
    }
    /// <p>Whether applications running in this runtime environment are publicly accessible. </p>
    pub fn publicly_accessible(mut self, input: bool) -> Self {
        self.publicly_accessible = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether applications running in this runtime environment are publicly accessible. </p>
    pub fn set_publicly_accessible(mut self, input: ::std::option::Option<bool>) -> Self {
        self.publicly_accessible = input;
        self
    }
    /// <p>Whether applications running in this runtime environment are publicly accessible. </p>
    pub fn get_publicly_accessible(&self) -> &::std::option::Option<bool> {
        &self.publicly_accessible
    }
    /// <p>The number of instances included in the runtime environment. A standalone runtime environment has a maxiumum of one instance. Currently, a high availability runtime environment has a maximum of two instances. </p>
    pub fn actual_capacity(mut self, input: i32) -> Self {
        self.actual_capacity = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of instances included in the runtime environment. A standalone runtime environment has a maxiumum of one instance. Currently, a high availability runtime environment has a maximum of two instances. </p>
    pub fn set_actual_capacity(mut self, input: ::std::option::Option<i32>) -> Self {
        self.actual_capacity = input;
        self
    }
    /// <p>The number of instances included in the runtime environment. A standalone runtime environment has a maxiumum of one instance. Currently, a high availability runtime environment has a maximum of two instances. </p>
    pub fn get_actual_capacity(&self) -> &::std::option::Option<i32> {
        &self.actual_capacity
    }
    /// <p>The Amazon Resource Name (ARN) for the load balancer used with the runtime environment.</p>
    pub fn load_balancer_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.load_balancer_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the load balancer used with the runtime environment.</p>
    pub fn set_load_balancer_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.load_balancer_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the load balancer used with the runtime environment.</p>
    pub fn get_load_balancer_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.load_balancer_arn
    }
    /// <p>The reason for the reported status.</p>
    pub fn status_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The reason for the reported status.</p>
    pub fn set_status_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status_reason = input;
        self
    }
    /// <p>The reason for the reported status.</p>
    pub fn get_status_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.status_reason
    }
    /// <p>Configures the maintenance window you want for the runtime environment. If you do not provide a value, a random system-generated value will be assigned.</p>
    pub fn preferred_maintenance_window(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.preferred_maintenance_window = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Configures the maintenance window you want for the runtime environment. If you do not provide a value, a random system-generated value will be assigned.</p>
    pub fn set_preferred_maintenance_window(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.preferred_maintenance_window = input;
        self
    }
    /// <p>Configures the maintenance window you want for the runtime environment. If you do not provide a value, a random system-generated value will be assigned.</p>
    pub fn get_preferred_maintenance_window(&self) -> &::std::option::Option<::std::string::String> {
        &self.preferred_maintenance_window
    }
    /// <p>Indicates the pending maintenance scheduled on this environment.</p>
    pub fn pending_maintenance(mut self, input: crate::types::PendingMaintenance) -> Self {
        self.pending_maintenance = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates the pending maintenance scheduled on this environment.</p>
    pub fn set_pending_maintenance(mut self, input: ::std::option::Option<crate::types::PendingMaintenance>) -> Self {
        self.pending_maintenance = input;
        self
    }
    /// <p>Indicates the pending maintenance scheduled on this environment.</p>
    pub fn get_pending_maintenance(&self) -> &::std::option::Option<crate::types::PendingMaintenance> {
        &self.pending_maintenance
    }
    /// <p>The identifier of a customer managed key.</p>
    pub fn kms_key_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.kms_key_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of a customer managed key.</p>
    pub fn set_kms_key_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.kms_key_id = input;
        self
    }
    /// <p>The identifier of a customer managed key.</p>
    pub fn get_kms_key_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.kms_key_id
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetEnvironmentOutput`](crate::operation::get_environment::GetEnvironmentOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::operation::get_environment::builders::GetEnvironmentOutputBuilder::name)
    /// - [`environment_arn`](crate::operation::get_environment::builders::GetEnvironmentOutputBuilder::environment_arn)
    /// - [`environment_id`](crate::operation::get_environment::builders::GetEnvironmentOutputBuilder::environment_id)
    /// - [`instance_type`](crate::operation::get_environment::builders::GetEnvironmentOutputBuilder::instance_type)
    /// - [`status`](crate::operation::get_environment::builders::GetEnvironmentOutputBuilder::status)
    /// - [`engine_type`](crate::operation::get_environment::builders::GetEnvironmentOutputBuilder::engine_type)
    /// - [`engine_version`](crate::operation::get_environment::builders::GetEnvironmentOutputBuilder::engine_version)
    /// - [`vpc_id`](crate::operation::get_environment::builders::GetEnvironmentOutputBuilder::vpc_id)
    /// - [`subnet_ids`](crate::operation::get_environment::builders::GetEnvironmentOutputBuilder::subnet_ids)
    /// - [`security_group_ids`](crate::operation::get_environment::builders::GetEnvironmentOutputBuilder::security_group_ids)
    /// - [`creation_time`](crate::operation::get_environment::builders::GetEnvironmentOutputBuilder::creation_time)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::get_environment::GetEnvironmentOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::get_environment::GetEnvironmentOutput {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building GetEnvironmentOutput",
                )
            })?,
            description: self.description,
            environment_arn: self.environment_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "environment_arn",
                    "environment_arn was not specified but it is required when building GetEnvironmentOutput",
                )
            })?,
            environment_id: self.environment_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "environment_id",
                    "environment_id was not specified but it is required when building GetEnvironmentOutput",
                )
            })?,
            instance_type: self.instance_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "instance_type",
                    "instance_type was not specified but it is required when building GetEnvironmentOutput",
                )
            })?,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building GetEnvironmentOutput",
                )
            })?,
            engine_type: self.engine_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "engine_type",
                    "engine_type was not specified but it is required when building GetEnvironmentOutput",
                )
            })?,
            engine_version: self.engine_version.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "engine_version",
                    "engine_version was not specified but it is required when building GetEnvironmentOutput",
                )
            })?,
            vpc_id: self.vpc_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "vpc_id",
                    "vpc_id was not specified but it is required when building GetEnvironmentOutput",
                )
            })?,
            subnet_ids: self.subnet_ids.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "subnet_ids",
                    "subnet_ids was not specified but it is required when building GetEnvironmentOutput",
                )
            })?,
            security_group_ids: self.security_group_ids.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "security_group_ids",
                    "security_group_ids was not specified but it is required when building GetEnvironmentOutput",
                )
            })?,
            creation_time: self.creation_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "creation_time",
                    "creation_time was not specified but it is required when building GetEnvironmentOutput",
                )
            })?,
            storage_configurations: self.storage_configurations,
            tags: self.tags,
            high_availability_config: self.high_availability_config,
            publicly_accessible: self.publicly_accessible.unwrap_or_default(),
            actual_capacity: self.actual_capacity,
            load_balancer_arn: self.load_balancer_arn,
            status_reason: self.status_reason,
            preferred_maintenance_window: self.preferred_maintenance_window,
            pending_maintenance: self.pending_maintenance,
            kms_key_id: self.kms_key_id,
            _request_id: self._request_id,
        })
    }
}
