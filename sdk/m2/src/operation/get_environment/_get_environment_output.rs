// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetEnvironmentOutput {
    /// <p>The name of the runtime environment. Must be unique within the account.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The description of the runtime environment.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the runtime environment.</p>
    #[doc(hidden)]
    pub environment_arn: std::option::Option<std::string::String>,
    /// <p>The unique identifier of the runtime environment.</p>
    #[doc(hidden)]
    pub environment_id: std::option::Option<std::string::String>,
    /// <p>The type of instance underlying the runtime environment.</p>
    #[doc(hidden)]
    pub instance_type: std::option::Option<std::string::String>,
    /// <p>The status of the runtime environment.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::EnvironmentLifecycle>,
    /// <p>The target platform for the runtime environment.</p>
    #[doc(hidden)]
    pub engine_type: std::option::Option<crate::types::EngineType>,
    /// <p>The version of the runtime engine.</p>
    #[doc(hidden)]
    pub engine_version: std::option::Option<std::string::String>,
    /// <p>The unique identifier for the VPC used with this runtime environment.</p>
    #[doc(hidden)]
    pub vpc_id: std::option::Option<std::string::String>,
    /// <p>The unique identifiers of the subnets assigned to this runtime environment.</p>
    #[doc(hidden)]
    pub subnet_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The unique identifiers of the security groups assigned to this runtime environment.</p>
    #[doc(hidden)]
    pub security_group_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The timestamp when the runtime environment was created.</p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The storage configurations defined for the runtime environment.</p>
    #[doc(hidden)]
    pub storage_configurations:
        std::option::Option<std::vec::Vec<crate::types::StorageConfiguration>>,
    /// <p>The tags defined for this runtime environment.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>The desired capacity of the high availability configuration for the runtime environment.</p>
    #[doc(hidden)]
    pub high_availability_config: std::option::Option<crate::types::HighAvailabilityConfig>,
    /// <p>Whether applications running in this runtime environment are publicly accessible. </p>
    #[doc(hidden)]
    pub publicly_accessible: bool,
    /// <p>The number of instances included in the runtime environment. A standalone runtime environment has a maxiumum of one instance. Currently, a high availability runtime environment has a maximum of two instances. </p>
    #[doc(hidden)]
    pub actual_capacity: std::option::Option<i32>,
    /// <p>The Amazon Resource Name (ARN) for the load balancer used with the runtime environment.</p>
    #[doc(hidden)]
    pub load_balancer_arn: std::option::Option<std::string::String>,
    /// <p>The reason for the reported status.</p>
    #[doc(hidden)]
    pub status_reason: std::option::Option<std::string::String>,
    /// <p>Configures the maintenance window you want for the runtime environment. If you do not provide a value, a random system-generated value will be assigned.</p>
    #[doc(hidden)]
    pub preferred_maintenance_window: std::option::Option<std::string::String>,
    /// <p>Indicates the pending maintenance scheduled on this environment.</p>
    #[doc(hidden)]
    pub pending_maintenance: std::option::Option<crate::types::PendingMaintenance>,
    /// <p>The identifier of a customer managed key.</p>
    #[doc(hidden)]
    pub kms_key_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetEnvironmentOutput {
    /// <p>The name of the runtime environment. Must be unique within the account.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The description of the runtime environment.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the runtime environment.</p>
    pub fn environment_arn(&self) -> std::option::Option<&str> {
        self.environment_arn.as_deref()
    }
    /// <p>The unique identifier of the runtime environment.</p>
    pub fn environment_id(&self) -> std::option::Option<&str> {
        self.environment_id.as_deref()
    }
    /// <p>The type of instance underlying the runtime environment.</p>
    pub fn instance_type(&self) -> std::option::Option<&str> {
        self.instance_type.as_deref()
    }
    /// <p>The status of the runtime environment.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::EnvironmentLifecycle> {
        self.status.as_ref()
    }
    /// <p>The target platform for the runtime environment.</p>
    pub fn engine_type(&self) -> std::option::Option<&crate::types::EngineType> {
        self.engine_type.as_ref()
    }
    /// <p>The version of the runtime engine.</p>
    pub fn engine_version(&self) -> std::option::Option<&str> {
        self.engine_version.as_deref()
    }
    /// <p>The unique identifier for the VPC used with this runtime environment.</p>
    pub fn vpc_id(&self) -> std::option::Option<&str> {
        self.vpc_id.as_deref()
    }
    /// <p>The unique identifiers of the subnets assigned to this runtime environment.</p>
    pub fn subnet_ids(&self) -> std::option::Option<&[std::string::String]> {
        self.subnet_ids.as_deref()
    }
    /// <p>The unique identifiers of the security groups assigned to this runtime environment.</p>
    pub fn security_group_ids(&self) -> std::option::Option<&[std::string::String]> {
        self.security_group_ids.as_deref()
    }
    /// <p>The timestamp when the runtime environment was created.</p>
    pub fn creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The storage configurations defined for the runtime environment.</p>
    pub fn storage_configurations(
        &self,
    ) -> std::option::Option<&[crate::types::StorageConfiguration]> {
        self.storage_configurations.as_deref()
    }
    /// <p>The tags defined for this runtime environment.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
    /// <p>The desired capacity of the high availability configuration for the runtime environment.</p>
    pub fn high_availability_config(
        &self,
    ) -> std::option::Option<&crate::types::HighAvailabilityConfig> {
        self.high_availability_config.as_ref()
    }
    /// <p>Whether applications running in this runtime environment are publicly accessible. </p>
    pub fn publicly_accessible(&self) -> bool {
        self.publicly_accessible
    }
    /// <p>The number of instances included in the runtime environment. A standalone runtime environment has a maxiumum of one instance. Currently, a high availability runtime environment has a maximum of two instances. </p>
    pub fn actual_capacity(&self) -> std::option::Option<i32> {
        self.actual_capacity
    }
    /// <p>The Amazon Resource Name (ARN) for the load balancer used with the runtime environment.</p>
    pub fn load_balancer_arn(&self) -> std::option::Option<&str> {
        self.load_balancer_arn.as_deref()
    }
    /// <p>The reason for the reported status.</p>
    pub fn status_reason(&self) -> std::option::Option<&str> {
        self.status_reason.as_deref()
    }
    /// <p>Configures the maintenance window you want for the runtime environment. If you do not provide a value, a random system-generated value will be assigned.</p>
    pub fn preferred_maintenance_window(&self) -> std::option::Option<&str> {
        self.preferred_maintenance_window.as_deref()
    }
    /// <p>Indicates the pending maintenance scheduled on this environment.</p>
    pub fn pending_maintenance(&self) -> std::option::Option<&crate::types::PendingMaintenance> {
        self.pending_maintenance.as_ref()
    }
    /// <p>The identifier of a customer managed key.</p>
    pub fn kms_key_id(&self) -> std::option::Option<&str> {
        self.kms_key_id.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetEnvironmentOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetEnvironmentOutput {
    /// Creates a new builder-style object to manufacture [`GetEnvironmentOutput`](crate::operation::get_environment::GetEnvironmentOutput).
    pub fn builder() -> crate::operation::get_environment::builders::GetEnvironmentOutputBuilder {
        crate::operation::get_environment::builders::GetEnvironmentOutputBuilder::default()
    }
}

/// A builder for [`GetEnvironmentOutput`](crate::operation::get_environment::GetEnvironmentOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetEnvironmentOutputBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) environment_arn: std::option::Option<std::string::String>,
    pub(crate) environment_id: std::option::Option<std::string::String>,
    pub(crate) instance_type: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<crate::types::EnvironmentLifecycle>,
    pub(crate) engine_type: std::option::Option<crate::types::EngineType>,
    pub(crate) engine_version: std::option::Option<std::string::String>,
    pub(crate) vpc_id: std::option::Option<std::string::String>,
    pub(crate) subnet_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) security_group_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) creation_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) storage_configurations:
        std::option::Option<std::vec::Vec<crate::types::StorageConfiguration>>,
    pub(crate) tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) high_availability_config: std::option::Option<crate::types::HighAvailabilityConfig>,
    pub(crate) publicly_accessible: std::option::Option<bool>,
    pub(crate) actual_capacity: std::option::Option<i32>,
    pub(crate) load_balancer_arn: std::option::Option<std::string::String>,
    pub(crate) status_reason: std::option::Option<std::string::String>,
    pub(crate) preferred_maintenance_window: std::option::Option<std::string::String>,
    pub(crate) pending_maintenance: std::option::Option<crate::types::PendingMaintenance>,
    pub(crate) kms_key_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetEnvironmentOutputBuilder {
    /// <p>The name of the runtime environment. Must be unique within the account.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the runtime environment. Must be unique within the account.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The description of the runtime environment.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The description of the runtime environment.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the runtime environment.</p>
    pub fn environment_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.environment_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the runtime environment.</p>
    pub fn set_environment_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.environment_arn = input;
        self
    }
    /// <p>The unique identifier of the runtime environment.</p>
    pub fn environment_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.environment_id = Some(input.into());
        self
    }
    /// <p>The unique identifier of the runtime environment.</p>
    pub fn set_environment_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.environment_id = input;
        self
    }
    /// <p>The type of instance underlying the runtime environment.</p>
    pub fn instance_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.instance_type = Some(input.into());
        self
    }
    /// <p>The type of instance underlying the runtime environment.</p>
    pub fn set_instance_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.instance_type = input;
        self
    }
    /// <p>The status of the runtime environment.</p>
    pub fn status(mut self, input: crate::types::EnvironmentLifecycle) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The status of the runtime environment.</p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::EnvironmentLifecycle>,
    ) -> Self {
        self.status = input;
        self
    }
    /// <p>The target platform for the runtime environment.</p>
    pub fn engine_type(mut self, input: crate::types::EngineType) -> Self {
        self.engine_type = Some(input);
        self
    }
    /// <p>The target platform for the runtime environment.</p>
    pub fn set_engine_type(mut self, input: std::option::Option<crate::types::EngineType>) -> Self {
        self.engine_type = input;
        self
    }
    /// <p>The version of the runtime engine.</p>
    pub fn engine_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.engine_version = Some(input.into());
        self
    }
    /// <p>The version of the runtime engine.</p>
    pub fn set_engine_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.engine_version = input;
        self
    }
    /// <p>The unique identifier for the VPC used with this runtime environment.</p>
    pub fn vpc_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.vpc_id = Some(input.into());
        self
    }
    /// <p>The unique identifier for the VPC used with this runtime environment.</p>
    pub fn set_vpc_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.vpc_id = input;
        self
    }
    /// Appends an item to `subnet_ids`.
    ///
    /// To override the contents of this collection use [`set_subnet_ids`](Self::set_subnet_ids).
    ///
    /// <p>The unique identifiers of the subnets assigned to this runtime environment.</p>
    pub fn subnet_ids(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.subnet_ids.unwrap_or_default();
        v.push(input.into());
        self.subnet_ids = Some(v);
        self
    }
    /// <p>The unique identifiers of the subnets assigned to this runtime environment.</p>
    pub fn set_subnet_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.subnet_ids = input;
        self
    }
    /// Appends an item to `security_group_ids`.
    ///
    /// To override the contents of this collection use [`set_security_group_ids`](Self::set_security_group_ids).
    ///
    /// <p>The unique identifiers of the security groups assigned to this runtime environment.</p>
    pub fn security_group_ids(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.security_group_ids.unwrap_or_default();
        v.push(input.into());
        self.security_group_ids = Some(v);
        self
    }
    /// <p>The unique identifiers of the security groups assigned to this runtime environment.</p>
    pub fn set_security_group_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.security_group_ids = input;
        self
    }
    /// <p>The timestamp when the runtime environment was created.</p>
    pub fn creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.creation_time = Some(input);
        self
    }
    /// <p>The timestamp when the runtime environment was created.</p>
    pub fn set_creation_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.creation_time = input;
        self
    }
    /// Appends an item to `storage_configurations`.
    ///
    /// To override the contents of this collection use [`set_storage_configurations`](Self::set_storage_configurations).
    ///
    /// <p>The storage configurations defined for the runtime environment.</p>
    pub fn storage_configurations(mut self, input: crate::types::StorageConfiguration) -> Self {
        let mut v = self.storage_configurations.unwrap_or_default();
        v.push(input);
        self.storage_configurations = Some(v);
        self
    }
    /// <p>The storage configurations defined for the runtime environment.</p>
    pub fn set_storage_configurations(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::StorageConfiguration>>,
    ) -> Self {
        self.storage_configurations = input;
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags defined for this runtime environment.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = Some(hash_map);
        self
    }
    /// <p>The tags defined for this runtime environment.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.tags = input;
        self
    }
    /// <p>The desired capacity of the high availability configuration for the runtime environment.</p>
    pub fn high_availability_config(mut self, input: crate::types::HighAvailabilityConfig) -> Self {
        self.high_availability_config = Some(input);
        self
    }
    /// <p>The desired capacity of the high availability configuration for the runtime environment.</p>
    pub fn set_high_availability_config(
        mut self,
        input: std::option::Option<crate::types::HighAvailabilityConfig>,
    ) -> Self {
        self.high_availability_config = input;
        self
    }
    /// <p>Whether applications running in this runtime environment are publicly accessible. </p>
    pub fn publicly_accessible(mut self, input: bool) -> Self {
        self.publicly_accessible = Some(input);
        self
    }
    /// <p>Whether applications running in this runtime environment are publicly accessible. </p>
    pub fn set_publicly_accessible(mut self, input: std::option::Option<bool>) -> Self {
        self.publicly_accessible = input;
        self
    }
    /// <p>The number of instances included in the runtime environment. A standalone runtime environment has a maxiumum of one instance. Currently, a high availability runtime environment has a maximum of two instances. </p>
    pub fn actual_capacity(mut self, input: i32) -> Self {
        self.actual_capacity = Some(input);
        self
    }
    /// <p>The number of instances included in the runtime environment. A standalone runtime environment has a maxiumum of one instance. Currently, a high availability runtime environment has a maximum of two instances. </p>
    pub fn set_actual_capacity(mut self, input: std::option::Option<i32>) -> Self {
        self.actual_capacity = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the load balancer used with the runtime environment.</p>
    pub fn load_balancer_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.load_balancer_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the load balancer used with the runtime environment.</p>
    pub fn set_load_balancer_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.load_balancer_arn = input;
        self
    }
    /// <p>The reason for the reported status.</p>
    pub fn status_reason(mut self, input: impl Into<std::string::String>) -> Self {
        self.status_reason = Some(input.into());
        self
    }
    /// <p>The reason for the reported status.</p>
    pub fn set_status_reason(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.status_reason = input;
        self
    }
    /// <p>Configures the maintenance window you want for the runtime environment. If you do not provide a value, a random system-generated value will be assigned.</p>
    pub fn preferred_maintenance_window(mut self, input: impl Into<std::string::String>) -> Self {
        self.preferred_maintenance_window = Some(input.into());
        self
    }
    /// <p>Configures the maintenance window you want for the runtime environment. If you do not provide a value, a random system-generated value will be assigned.</p>
    pub fn set_preferred_maintenance_window(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.preferred_maintenance_window = input;
        self
    }
    /// <p>Indicates the pending maintenance scheduled on this environment.</p>
    pub fn pending_maintenance(mut self, input: crate::types::PendingMaintenance) -> Self {
        self.pending_maintenance = Some(input);
        self
    }
    /// <p>Indicates the pending maintenance scheduled on this environment.</p>
    pub fn set_pending_maintenance(
        mut self,
        input: std::option::Option<crate::types::PendingMaintenance>,
    ) -> Self {
        self.pending_maintenance = input;
        self
    }
    /// <p>The identifier of a customer managed key.</p>
    pub fn kms_key_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.kms_key_id = Some(input.into());
        self
    }
    /// <p>The identifier of a customer managed key.</p>
    pub fn set_kms_key_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.kms_key_id = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetEnvironmentOutput`](crate::operation::get_environment::GetEnvironmentOutput).
    pub fn build(self) -> crate::operation::get_environment::GetEnvironmentOutput {
        crate::operation::get_environment::GetEnvironmentOutput {
            name: self.name,
            description: self.description,
            environment_arn: self.environment_arn,
            environment_id: self.environment_id,
            instance_type: self.instance_type,
            status: self.status,
            engine_type: self.engine_type,
            engine_version: self.engine_version,
            vpc_id: self.vpc_id,
            subnet_ids: self.subnet_ids,
            security_group_ids: self.security_group_ids,
            creation_time: self.creation_time,
            storage_configurations: self.storage_configurations,
            tags: self.tags,
            high_availability_config: self.high_availability_config,
            publicly_accessible: self.publicly_accessible.unwrap_or_default(),
            actual_capacity: self.actual_capacity,
            load_balancer_arn: self.load_balancer_arn,
            status_reason: self.status_reason,
            preferred_maintenance_window: self.preferred_maintenance_window,
            pending_maintenance: self.pending_maintenance,
            kms_key_id: self.kms_key_id,
            _request_id: self._request_id,
        }
    }
}
