// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StartBatchJobInput {
    /// <p>The unique identifier of the application associated with this batch job.</p>
    #[doc(hidden)]
    pub application_id: std::option::Option<std::string::String>,
    /// <p>The unique identifier of the batch job.</p>
    #[doc(hidden)]
    pub batch_job_identifier: std::option::Option<crate::types::BatchJobIdentifier>,
    /// <p>The collection of batch job parameters. For details about limits for keys and values, see <a href="https://www.ibm.com/docs/en/workload-automation/9.3.0?topic=zos-coding-variables-in-jcl">Coding variables in JCL</a>.</p>
    #[doc(hidden)]
    pub job_params:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl StartBatchJobInput {
    /// <p>The unique identifier of the application associated with this batch job.</p>
    pub fn application_id(&self) -> std::option::Option<&str> {
        self.application_id.as_deref()
    }
    /// <p>The unique identifier of the batch job.</p>
    pub fn batch_job_identifier(&self) -> std::option::Option<&crate::types::BatchJobIdentifier> {
        self.batch_job_identifier.as_ref()
    }
    /// <p>The collection of batch job parameters. For details about limits for keys and values, see <a href="https://www.ibm.com/docs/en/workload-automation/9.3.0?topic=zos-coding-variables-in-jcl">Coding variables in JCL</a>.</p>
    pub fn job_params(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.job_params.as_ref()
    }
}
impl StartBatchJobInput {
    /// Creates a new builder-style object to manufacture [`StartBatchJobInput`](crate::operation::start_batch_job::StartBatchJobInput).
    pub fn builder() -> crate::operation::start_batch_job::builders::StartBatchJobInputBuilder {
        crate::operation::start_batch_job::builders::StartBatchJobInputBuilder::default()
    }
}

/// A builder for [`StartBatchJobInput`](crate::operation::start_batch_job::StartBatchJobInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct StartBatchJobInputBuilder {
    pub(crate) application_id: std::option::Option<std::string::String>,
    pub(crate) batch_job_identifier: std::option::Option<crate::types::BatchJobIdentifier>,
    pub(crate) job_params:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl StartBatchJobInputBuilder {
    /// <p>The unique identifier of the application associated with this batch job.</p>
    pub fn application_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.application_id = Some(input.into());
        self
    }
    /// <p>The unique identifier of the application associated with this batch job.</p>
    pub fn set_application_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.application_id = input;
        self
    }
    /// <p>The unique identifier of the batch job.</p>
    pub fn batch_job_identifier(mut self, input: crate::types::BatchJobIdentifier) -> Self {
        self.batch_job_identifier = Some(input);
        self
    }
    /// <p>The unique identifier of the batch job.</p>
    pub fn set_batch_job_identifier(
        mut self,
        input: std::option::Option<crate::types::BatchJobIdentifier>,
    ) -> Self {
        self.batch_job_identifier = input;
        self
    }
    /// Adds a key-value pair to `job_params`.
    ///
    /// To override the contents of this collection use [`set_job_params`](Self::set_job_params).
    ///
    /// <p>The collection of batch job parameters. For details about limits for keys and values, see <a href="https://www.ibm.com/docs/en/workload-automation/9.3.0?topic=zos-coding-variables-in-jcl">Coding variables in JCL</a>.</p>
    pub fn job_params(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.job_params.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.job_params = Some(hash_map);
        self
    }
    /// <p>The collection of batch job parameters. For details about limits for keys and values, see <a href="https://www.ibm.com/docs/en/workload-automation/9.3.0?topic=zos-coding-variables-in-jcl">Coding variables in JCL</a>.</p>
    pub fn set_job_params(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.job_params = input;
        self
    }
    /// Consumes the builder and constructs a [`StartBatchJobInput`](crate::operation::start_batch_job::StartBatchJobInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::start_batch_job::StartBatchJobInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::start_batch_job::StartBatchJobInput {
            application_id: self.application_id,
            batch_job_identifier: self.batch_job_identifier,
            job_params: self.job_params,
        })
    }
}
