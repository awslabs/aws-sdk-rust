// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StopApplicationInput {
    /// <p>The unique identifier of the application you want to stop.</p>
    #[doc(hidden)]
    pub application_id: std::option::Option<std::string::String>,
    /// <p>Stopping an application process can take a long time. Setting this parameter to true lets you force stop the application so you don't need to wait until the process finishes to apply another action on the application. The default value is false.</p>
    #[doc(hidden)]
    pub force_stop: bool,
}
impl StopApplicationInput {
    /// <p>The unique identifier of the application you want to stop.</p>
    pub fn application_id(&self) -> std::option::Option<&str> {
        self.application_id.as_deref()
    }
    /// <p>Stopping an application process can take a long time. Setting this parameter to true lets you force stop the application so you don't need to wait until the process finishes to apply another action on the application. The default value is false.</p>
    pub fn force_stop(&self) -> bool {
        self.force_stop
    }
}
impl StopApplicationInput {
    /// Creates a new builder-style object to manufacture [`StopApplicationInput`](crate::operation::stop_application::StopApplicationInput).
    pub fn builder() -> crate::operation::stop_application::builders::StopApplicationInputBuilder {
        crate::operation::stop_application::builders::StopApplicationInputBuilder::default()
    }
}

/// A builder for [`StopApplicationInput`](crate::operation::stop_application::StopApplicationInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct StopApplicationInputBuilder {
    pub(crate) application_id: std::option::Option<std::string::String>,
    pub(crate) force_stop: std::option::Option<bool>,
}
impl StopApplicationInputBuilder {
    /// <p>The unique identifier of the application you want to stop.</p>
    pub fn application_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.application_id = Some(input.into());
        self
    }
    /// <p>The unique identifier of the application you want to stop.</p>
    pub fn set_application_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.application_id = input;
        self
    }
    /// <p>Stopping an application process can take a long time. Setting this parameter to true lets you force stop the application so you don't need to wait until the process finishes to apply another action on the application. The default value is false.</p>
    pub fn force_stop(mut self, input: bool) -> Self {
        self.force_stop = Some(input);
        self
    }
    /// <p>Stopping an application process can take a long time. Setting this parameter to true lets you force stop the application so you don't need to wait until the process finishes to apply another action on the application. The default value is false.</p>
    pub fn set_force_stop(mut self, input: std::option::Option<bool>) -> Self {
        self.force_stop = input;
        self
    }
    /// Consumes the builder and constructs a [`StopApplicationInput`](crate::operation::stop_application::StopApplicationInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::stop_application::StopApplicationInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::stop_application::StopApplicationInput {
            application_id: self.application_id,
            force_stop: self.force_stop.unwrap_or_default(),
        })
    }
}
