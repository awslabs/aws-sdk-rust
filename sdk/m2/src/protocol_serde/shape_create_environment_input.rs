// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_environment_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_environment::CreateEnvironmentInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.client_token {
        object.key("clientToken").string(var_1.as_str());
    }
    if let Some(var_2) = &input.description {
        object.key("description").string(var_2.as_str());
    }
    if let Some(var_3) = &input.engine_type {
        object.key("engineType").string(var_3.as_str());
    }
    if let Some(var_4) = &input.engine_version {
        object.key("engineVersion").string(var_4.as_str());
    }
    if let Some(var_5) = &input.high_availability_config {
        #[allow(unused_mut)]
        let mut object_6 = object.key("highAvailabilityConfig").start_object();
        crate::protocol_serde::shape_high_availability_config::ser_high_availability_config(
            &mut object_6,
            var_5,
        )?;
        object_6.finish();
    }
    if let Some(var_7) = &input.instance_type {
        object.key("instanceType").string(var_7.as_str());
    }
    if let Some(var_8) = &input.kms_key_id {
        object.key("kmsKeyId").string(var_8.as_str());
    }
    if let Some(var_9) = &input.name {
        object.key("name").string(var_9.as_str());
    }
    if let Some(var_10) = &input.preferred_maintenance_window {
        object
            .key("preferredMaintenanceWindow")
            .string(var_10.as_str());
    }
    if input.publicly_accessible {
        object
            .key("publiclyAccessible")
            .boolean(input.publicly_accessible);
    }
    if let Some(var_11) = &input.security_group_ids {
        let mut array_12 = object.key("securityGroupIds").start_array();
        for item_13 in var_11 {
            {
                array_12.value().string(item_13.as_str());
            }
        }
        array_12.finish();
    }
    if let Some(var_14) = &input.storage_configurations {
        let mut array_15 = object.key("storageConfigurations").start_array();
        for item_16 in var_14 {
            {
                #[allow(unused_mut)]
                let mut object_17 = array_15.value().start_object();
                crate::protocol_serde::shape_storage_configuration::ser_storage_configuration(
                    &mut object_17,
                    item_16,
                )?;
                object_17.finish();
            }
        }
        array_15.finish();
    }
    if let Some(var_18) = &input.subnet_ids {
        let mut array_19 = object.key("subnetIds").start_array();
        for item_20 in var_18 {
            {
                array_19.value().string(item_20.as_str());
            }
        }
        array_19.finish();
    }
    if let Some(var_21) = &input.tags {
        #[allow(unused_mut)]
        let mut object_22 = object.key("tags").start_object();
        for (key_23, value_24) in var_21 {
            {
                object_22.key(key_23.as_str()).string(value_24.as_str());
            }
        }
        object_22.finish();
    }
    Ok(())
}
