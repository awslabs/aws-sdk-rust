// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`StartBatchJob`](crate::client::fluent_builders::StartBatchJob) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`application_id(impl Into<String>)`](crate::client::fluent_builders::StartBatchJob::application_id) / [`set_application_id(Option<String>)`](crate::client::fluent_builders::StartBatchJob::set_application_id): <p>The unique identifier of the application associated with this batch job.</p>
    ///   - [`batch_job_identifier(BatchJobIdentifier)`](crate::client::fluent_builders::StartBatchJob::batch_job_identifier) / [`set_batch_job_identifier(Option<BatchJobIdentifier>)`](crate::client::fluent_builders::StartBatchJob::set_batch_job_identifier): <p>The unique identifier of the batch job.</p>
    ///   - [`job_params(HashMap<String, String>)`](crate::client::fluent_builders::StartBatchJob::job_params) / [`set_job_params(Option<HashMap<String, String>>)`](crate::client::fluent_builders::StartBatchJob::set_job_params): <p>The collection of batch job parameters. For details about limits for keys and values, see <a href="https://www.ibm.com/docs/en/workload-automation/9.3.0?topic=zos-coding-variables-in-jcl">Coding variables in JCL</a>.</p>
    /// - On success, responds with [`StartBatchJobOutput`](crate::output::StartBatchJobOutput) with field(s):
    ///   - [`execution_id(Option<String>)`](crate::output::StartBatchJobOutput::execution_id): <p>The unique identifier of this execution of the batch job.</p>
    /// - On failure, responds with [`SdkError<StartBatchJobError>`](crate::error::StartBatchJobError)
    pub fn start_batch_job(&self) -> crate::client::fluent_builders::StartBatchJob {
        crate::client::fluent_builders::StartBatchJob::new(self.handle.clone())
    }
}
