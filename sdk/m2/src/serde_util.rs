// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn access_denied_exception_correct_errors(
    mut builder: crate::types::error::builders::AccessDeniedExceptionBuilder,
) -> crate::types::error::builders::AccessDeniedExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn conflict_exception_correct_errors(
    mut builder: crate::types::error::builders::ConflictExceptionBuilder,
) -> crate::types::error::builders::ConflictExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn internal_server_exception_correct_errors(
    mut builder: crate::types::error::builders::InternalServerExceptionBuilder,
) -> crate::types::error::builders::InternalServerExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_not_found_exception_correct_errors(
    mut builder: crate::types::error::builders::ResourceNotFoundExceptionBuilder,
) -> crate::types::error::builders::ResourceNotFoundExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn throttling_exception_correct_errors(
    mut builder: crate::types::error::builders::ThrottlingExceptionBuilder,
) -> crate::types::error::builders::ThrottlingExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_exception_correct_errors(
    mut builder: crate::types::error::builders::ValidationExceptionBuilder,
) -> crate::types::error::builders::ValidationExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn service_quota_exceeded_exception_correct_errors(
    mut builder: crate::types::error::builders::ServiceQuotaExceededExceptionBuilder,
) -> crate::types::error::builders::ServiceQuotaExceededExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn create_application_output_output_correct_errors(
    mut builder: crate::operation::create_application::builders::CreateApplicationOutputBuilder,
) -> crate::operation::create_application::builders::CreateApplicationOutputBuilder {
    if builder.application_arn.is_none() {
        builder.application_arn = Some(Default::default())
    }
    if builder.application_id.is_none() {
        builder.application_id = Some(Default::default())
    }
    if builder.application_version.is_none() {
        builder.application_version = Some(Default::default())
    }
    builder
}

pub(crate) fn create_data_set_import_task_output_output_correct_errors(
    mut builder: crate::operation::create_data_set_import_task::builders::CreateDataSetImportTaskOutputBuilder,
) -> crate::operation::create_data_set_import_task::builders::CreateDataSetImportTaskOutputBuilder {
    if builder.task_id.is_none() {
        builder.task_id = Some(Default::default())
    }
    builder
}

pub(crate) fn create_deployment_output_output_correct_errors(
    mut builder: crate::operation::create_deployment::builders::CreateDeploymentOutputBuilder,
) -> crate::operation::create_deployment::builders::CreateDeploymentOutputBuilder {
    if builder.deployment_id.is_none() {
        builder.deployment_id = Some(Default::default())
    }
    builder
}

pub(crate) fn create_environment_output_output_correct_errors(
    mut builder: crate::operation::create_environment::builders::CreateEnvironmentOutputBuilder,
) -> crate::operation::create_environment::builders::CreateEnvironmentOutputBuilder {
    if builder.environment_id.is_none() {
        builder.environment_id = Some(Default::default())
    }
    builder
}

pub(crate) fn get_application_output_output_correct_errors(
    mut builder: crate::operation::get_application::builders::GetApplicationOutputBuilder,
) -> crate::operation::get_application::builders::GetApplicationOutputBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.application_id.is_none() {
        builder.application_id = Some(Default::default())
    }
    if builder.application_arn.is_none() {
        builder.application_arn = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::ApplicationLifecycle>().ok()
    }
    if builder.latest_version.is_none() {
        builder.latest_version = {
            let builder = crate::types::builders::ApplicationVersionSummaryBuilder::default();
            crate::serde_util::application_version_summary_correct_errors(builder).build().ok()
        }
    }
    if builder.engine_type.is_none() {
        builder.engine_type = "no value was set".parse::<crate::types::EngineType>().ok()
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn get_application_version_output_output_correct_errors(
    mut builder: crate::operation::get_application_version::builders::GetApplicationVersionOutputBuilder,
) -> crate::operation::get_application_version::builders::GetApplicationVersionOutputBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.application_version.is_none() {
        builder.application_version = Some(Default::default())
    }
    if builder.definition_content.is_none() {
        builder.definition_content = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::ApplicationVersionLifecycle>().ok()
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn get_batch_job_execution_output_output_correct_errors(
    mut builder: crate::operation::get_batch_job_execution::builders::GetBatchJobExecutionOutputBuilder,
) -> crate::operation::get_batch_job_execution::builders::GetBatchJobExecutionOutputBuilder {
    if builder.execution_id.is_none() {
        builder.execution_id = Some(Default::default())
    }
    if builder.application_id.is_none() {
        builder.application_id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::BatchJobExecutionStatus>().ok()
    }
    if builder.start_time.is_none() {
        builder.start_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn execution_timeout_exception_correct_errors(
    mut builder: crate::types::error::builders::ExecutionTimeoutExceptionBuilder,
) -> crate::types::error::builders::ExecutionTimeoutExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn service_unavailable_exception_correct_errors(
    mut builder: crate::types::error::builders::ServiceUnavailableExceptionBuilder,
) -> crate::types::error::builders::ServiceUnavailableExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn get_data_set_details_output_output_correct_errors(
    mut builder: crate::operation::get_data_set_details::builders::GetDataSetDetailsOutputBuilder,
) -> crate::operation::get_data_set_details::builders::GetDataSetDetailsOutputBuilder {
    if builder.data_set_name.is_none() {
        builder.data_set_name = Some(Default::default())
    }
    builder
}

pub(crate) fn get_data_set_import_task_output_output_correct_errors(
    mut builder: crate::operation::get_data_set_import_task::builders::GetDataSetImportTaskOutputBuilder,
) -> crate::operation::get_data_set_import_task::builders::GetDataSetImportTaskOutputBuilder {
    if builder.task_id.is_none() {
        builder.task_id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::DataSetTaskLifecycle>().ok()
    }
    builder
}

pub(crate) fn get_deployment_output_output_correct_errors(
    mut builder: crate::operation::get_deployment::builders::GetDeploymentOutputBuilder,
) -> crate::operation::get_deployment::builders::GetDeploymentOutputBuilder {
    if builder.deployment_id.is_none() {
        builder.deployment_id = Some(Default::default())
    }
    if builder.application_id.is_none() {
        builder.application_id = Some(Default::default())
    }
    if builder.environment_id.is_none() {
        builder.environment_id = Some(Default::default())
    }
    if builder.application_version.is_none() {
        builder.application_version = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::DeploymentLifecycle>().ok()
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn get_environment_output_output_correct_errors(
    mut builder: crate::operation::get_environment::builders::GetEnvironmentOutputBuilder,
) -> crate::operation::get_environment::builders::GetEnvironmentOutputBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.environment_arn.is_none() {
        builder.environment_arn = Some(Default::default())
    }
    if builder.environment_id.is_none() {
        builder.environment_id = Some(Default::default())
    }
    if builder.instance_type.is_none() {
        builder.instance_type = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::EnvironmentLifecycle>().ok()
    }
    if builder.engine_type.is_none() {
        builder.engine_type = "no value was set".parse::<crate::types::EngineType>().ok()
    }
    if builder.engine_version.is_none() {
        builder.engine_version = Some(Default::default())
    }
    if builder.vpc_id.is_none() {
        builder.vpc_id = Some(Default::default())
    }
    if builder.subnet_ids.is_none() {
        builder.subnet_ids = Some(Default::default())
    }
    if builder.security_group_ids.is_none() {
        builder.security_group_ids = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn get_signed_bluinsights_url_output_output_correct_errors(
    mut builder: crate::operation::get_signed_bluinsights_url::builders::GetSignedBluinsightsUrlOutputBuilder,
) -> crate::operation::get_signed_bluinsights_url::builders::GetSignedBluinsightsUrlOutputBuilder {
    if builder.signed_bi_url.is_none() {
        builder.signed_bi_url = Some(Default::default())
    }
    builder
}

pub(crate) fn list_application_versions_output_output_correct_errors(
    mut builder: crate::operation::list_application_versions::builders::ListApplicationVersionsOutputBuilder,
) -> crate::operation::list_application_versions::builders::ListApplicationVersionsOutputBuilder {
    if builder.application_versions.is_none() {
        builder.application_versions = Some(Default::default())
    }
    builder
}

pub(crate) fn list_applications_output_output_correct_errors(
    mut builder: crate::operation::list_applications::builders::ListApplicationsOutputBuilder,
) -> crate::operation::list_applications::builders::ListApplicationsOutputBuilder {
    if builder.applications.is_none() {
        builder.applications = Some(Default::default())
    }
    builder
}

pub(crate) fn list_batch_job_definitions_output_output_correct_errors(
    mut builder: crate::operation::list_batch_job_definitions::builders::ListBatchJobDefinitionsOutputBuilder,
) -> crate::operation::list_batch_job_definitions::builders::ListBatchJobDefinitionsOutputBuilder {
    if builder.batch_job_definitions.is_none() {
        builder.batch_job_definitions = Some(Default::default())
    }
    builder
}

pub(crate) fn list_batch_job_executions_output_output_correct_errors(
    mut builder: crate::operation::list_batch_job_executions::builders::ListBatchJobExecutionsOutputBuilder,
) -> crate::operation::list_batch_job_executions::builders::ListBatchJobExecutionsOutputBuilder {
    if builder.batch_job_executions.is_none() {
        builder.batch_job_executions = Some(Default::default())
    }
    builder
}

pub(crate) fn list_data_set_import_history_output_output_correct_errors(
    mut builder: crate::operation::list_data_set_import_history::builders::ListDataSetImportHistoryOutputBuilder,
) -> crate::operation::list_data_set_import_history::builders::ListDataSetImportHistoryOutputBuilder {
    if builder.data_set_import_tasks.is_none() {
        builder.data_set_import_tasks = Some(Default::default())
    }
    builder
}

pub(crate) fn list_data_sets_output_output_correct_errors(
    mut builder: crate::operation::list_data_sets::builders::ListDataSetsOutputBuilder,
) -> crate::operation::list_data_sets::builders::ListDataSetsOutputBuilder {
    if builder.data_sets.is_none() {
        builder.data_sets = Some(Default::default())
    }
    builder
}

pub(crate) fn list_deployments_output_output_correct_errors(
    mut builder: crate::operation::list_deployments::builders::ListDeploymentsOutputBuilder,
) -> crate::operation::list_deployments::builders::ListDeploymentsOutputBuilder {
    if builder.deployments.is_none() {
        builder.deployments = Some(Default::default())
    }
    builder
}

pub(crate) fn list_engine_versions_output_output_correct_errors(
    mut builder: crate::operation::list_engine_versions::builders::ListEngineVersionsOutputBuilder,
) -> crate::operation::list_engine_versions::builders::ListEngineVersionsOutputBuilder {
    if builder.engine_versions.is_none() {
        builder.engine_versions = Some(Default::default())
    }
    builder
}

pub(crate) fn list_environments_output_output_correct_errors(
    mut builder: crate::operation::list_environments::builders::ListEnvironmentsOutputBuilder,
) -> crate::operation::list_environments::builders::ListEnvironmentsOutputBuilder {
    if builder.environments.is_none() {
        builder.environments = Some(Default::default())
    }
    builder
}

pub(crate) fn list_tags_for_resource_output_output_correct_errors(
    mut builder: crate::operation::list_tags_for_resource::builders::ListTagsForResourceOutputBuilder,
) -> crate::operation::list_tags_for_resource::builders::ListTagsForResourceOutputBuilder {
    if builder.tags.is_none() {
        builder.tags = Some(Default::default())
    }
    builder
}

pub(crate) fn start_batch_job_output_output_correct_errors(
    mut builder: crate::operation::start_batch_job::builders::StartBatchJobOutputBuilder,
) -> crate::operation::start_batch_job::builders::StartBatchJobOutputBuilder {
    if builder.execution_id.is_none() {
        builder.execution_id = Some(Default::default())
    }
    builder
}

pub(crate) fn update_application_output_output_correct_errors(
    mut builder: crate::operation::update_application::builders::UpdateApplicationOutputBuilder,
) -> crate::operation::update_application::builders::UpdateApplicationOutputBuilder {
    if builder.application_version.is_none() {
        builder.application_version = Some(Default::default())
    }
    builder
}

pub(crate) fn update_environment_output_output_correct_errors(
    mut builder: crate::operation::update_environment::builders::UpdateEnvironmentOutputBuilder,
) -> crate::operation::update_environment::builders::UpdateEnvironmentOutputBuilder {
    if builder.environment_id.is_none() {
        builder.environment_id = Some(Default::default())
    }
    builder
}

pub(crate) fn application_version_summary_correct_errors(
    mut builder: crate::types::builders::ApplicationVersionSummaryBuilder,
) -> crate::types::builders::ApplicationVersionSummaryBuilder {
    if builder.application_version.is_none() {
        builder.application_version = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::ApplicationVersionLifecycle>().ok()
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn data_set_import_summary_correct_errors(
    mut builder: crate::types::builders::DataSetImportSummaryBuilder,
) -> crate::types::builders::DataSetImportSummaryBuilder {
    if builder.total.is_none() {
        builder.total = Some(Default::default())
    }
    if builder.succeeded.is_none() {
        builder.succeeded = Some(Default::default())
    }
    if builder.failed.is_none() {
        builder.failed = Some(Default::default())
    }
    if builder.pending.is_none() {
        builder.pending = Some(Default::default())
    }
    if builder.in_progress.is_none() {
        builder.in_progress = Some(Default::default())
    }
    builder
}

pub(crate) fn deployed_version_summary_correct_errors(
    mut builder: crate::types::builders::DeployedVersionSummaryBuilder,
) -> crate::types::builders::DeployedVersionSummaryBuilder {
    if builder.application_version.is_none() {
        builder.application_version = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::DeploymentLifecycle>().ok()
    }
    builder
}

pub(crate) fn high_availability_config_correct_errors(
    mut builder: crate::types::builders::HighAvailabilityConfigBuilder,
) -> crate::types::builders::HighAvailabilityConfigBuilder {
    if builder.desired_capacity.is_none() {
        builder.desired_capacity = Some(Default::default())
    }
    builder
}

pub(crate) fn job_step_restart_marker_correct_errors(
    mut builder: crate::types::builders::JobStepRestartMarkerBuilder,
) -> crate::types::builders::JobStepRestartMarkerBuilder {
    if builder.from_step.is_none() {
        builder.from_step = Some(Default::default())
    }
    builder
}

pub(crate) fn application_summary_correct_errors(
    mut builder: crate::types::builders::ApplicationSummaryBuilder,
) -> crate::types::builders::ApplicationSummaryBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.application_id.is_none() {
        builder.application_id = Some(Default::default())
    }
    if builder.application_arn.is_none() {
        builder.application_arn = Some(Default::default())
    }
    if builder.application_version.is_none() {
        builder.application_version = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::ApplicationLifecycle>().ok()
    }
    if builder.engine_type.is_none() {
        builder.engine_type = "no value was set".parse::<crate::types::EngineType>().ok()
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn batch_job_execution_summary_correct_errors(
    mut builder: crate::types::builders::BatchJobExecutionSummaryBuilder,
) -> crate::types::builders::BatchJobExecutionSummaryBuilder {
    if builder.execution_id.is_none() {
        builder.execution_id = Some(Default::default())
    }
    if builder.application_id.is_none() {
        builder.application_id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::BatchJobExecutionStatus>().ok()
    }
    if builder.start_time.is_none() {
        builder.start_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn data_set_import_task_correct_errors(
    mut builder: crate::types::builders::DataSetImportTaskBuilder,
) -> crate::types::builders::DataSetImportTaskBuilder {
    if builder.task_id.is_none() {
        builder.task_id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::DataSetTaskLifecycle>().ok()
    }
    if builder.summary.is_none() {
        builder.summary = {
            let builder = crate::types::builders::DataSetImportSummaryBuilder::default();
            Some(crate::serde_util::data_set_import_summary_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn data_set_summary_correct_errors(
    mut builder: crate::types::builders::DataSetSummaryBuilder,
) -> crate::types::builders::DataSetSummaryBuilder {
    if builder.data_set_name.is_none() {
        builder.data_set_name = Some(Default::default())
    }
    builder
}

pub(crate) fn deployment_summary_correct_errors(
    mut builder: crate::types::builders::DeploymentSummaryBuilder,
) -> crate::types::builders::DeploymentSummaryBuilder {
    if builder.deployment_id.is_none() {
        builder.deployment_id = Some(Default::default())
    }
    if builder.application_id.is_none() {
        builder.application_id = Some(Default::default())
    }
    if builder.environment_id.is_none() {
        builder.environment_id = Some(Default::default())
    }
    if builder.application_version.is_none() {
        builder.application_version = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::DeploymentLifecycle>().ok()
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn engine_versions_summary_correct_errors(
    mut builder: crate::types::builders::EngineVersionsSummaryBuilder,
) -> crate::types::builders::EngineVersionsSummaryBuilder {
    if builder.engine_type.is_none() {
        builder.engine_type = Some(Default::default())
    }
    if builder.engine_version.is_none() {
        builder.engine_version = Some(Default::default())
    }
    builder
}

pub(crate) fn environment_summary_correct_errors(
    mut builder: crate::types::builders::EnvironmentSummaryBuilder,
) -> crate::types::builders::EnvironmentSummaryBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.environment_arn.is_none() {
        builder.environment_arn = Some(Default::default())
    }
    if builder.environment_id.is_none() {
        builder.environment_id = Some(Default::default())
    }
    if builder.instance_type.is_none() {
        builder.instance_type = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::EnvironmentLifecycle>().ok()
    }
    if builder.engine_type.is_none() {
        builder.engine_type = "no value was set".parse::<crate::types::EngineType>().ok()
    }
    if builder.engine_version.is_none() {
        builder.engine_version = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn file_batch_job_identifier_correct_errors(
    mut builder: crate::types::builders::FileBatchJobIdentifierBuilder,
) -> crate::types::builders::FileBatchJobIdentifierBuilder {
    if builder.file_name.is_none() {
        builder.file_name = Some(Default::default())
    }
    builder
}

pub(crate) fn log_group_summary_correct_errors(
    mut builder: crate::types::builders::LogGroupSummaryBuilder,
) -> crate::types::builders::LogGroupSummaryBuilder {
    if builder.log_type.is_none() {
        builder.log_type = Some(Default::default())
    }
    if builder.log_group_name.is_none() {
        builder.log_group_name = Some(Default::default())
    }
    builder
}

pub(crate) fn po_detail_attributes_correct_errors(
    mut builder: crate::types::builders::PoDetailAttributesBuilder,
) -> crate::types::builders::PoDetailAttributesBuilder {
    if builder.format.is_none() {
        builder.format = Some(Default::default())
    }
    if builder.encoding.is_none() {
        builder.encoding = Some(Default::default())
    }
    builder
}

pub(crate) fn ps_detail_attributes_correct_errors(
    mut builder: crate::types::builders::PsDetailAttributesBuilder,
) -> crate::types::builders::PsDetailAttributesBuilder {
    if builder.format.is_none() {
        builder.format = Some(Default::default())
    }
    if builder.encoding.is_none() {
        builder.encoding = Some(Default::default())
    }
    builder
}

pub(crate) fn restart_batch_job_identifier_correct_errors(
    mut builder: crate::types::builders::RestartBatchJobIdentifierBuilder,
) -> crate::types::builders::RestartBatchJobIdentifierBuilder {
    if builder.execution_id.is_none() {
        builder.execution_id = Some(Default::default())
    }
    if builder.job_step_restart_marker.is_none() {
        builder.job_step_restart_marker = {
            let builder = crate::types::builders::JobStepRestartMarkerBuilder::default();
            crate::serde_util::job_step_restart_marker_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn s3_batch_job_identifier_correct_errors(
    mut builder: crate::types::builders::S3BatchJobIdentifierBuilder,
) -> crate::types::builders::S3BatchJobIdentifierBuilder {
    if builder.bucket.is_none() {
        builder.bucket = Some(Default::default())
    }
    if builder.identifier.is_none() {
        builder.identifier = Some(crate::types::JobIdentifier::Unknown)
    }
    builder
}

pub(crate) fn script_batch_job_identifier_correct_errors(
    mut builder: crate::types::builders::ScriptBatchJobIdentifierBuilder,
) -> crate::types::builders::ScriptBatchJobIdentifierBuilder {
    if builder.script_name.is_none() {
        builder.script_name = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_exception_field_correct_errors(
    mut builder: crate::types::builders::ValidationExceptionFieldBuilder,
) -> crate::types::builders::ValidationExceptionFieldBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn efs_storage_configuration_correct_errors(
    mut builder: crate::types::builders::EfsStorageConfigurationBuilder,
) -> crate::types::builders::EfsStorageConfigurationBuilder {
    if builder.file_system_id.is_none() {
        builder.file_system_id = Some(Default::default())
    }
    if builder.mount_point.is_none() {
        builder.mount_point = Some(Default::default())
    }
    builder
}

pub(crate) fn file_batch_job_definition_correct_errors(
    mut builder: crate::types::builders::FileBatchJobDefinitionBuilder,
) -> crate::types::builders::FileBatchJobDefinitionBuilder {
    if builder.file_name.is_none() {
        builder.file_name = Some(Default::default())
    }
    builder
}

pub(crate) fn fsx_storage_configuration_correct_errors(
    mut builder: crate::types::builders::FsxStorageConfigurationBuilder,
) -> crate::types::builders::FsxStorageConfigurationBuilder {
    if builder.file_system_id.is_none() {
        builder.file_system_id = Some(Default::default())
    }
    if builder.mount_point.is_none() {
        builder.mount_point = Some(Default::default())
    }
    builder
}

pub(crate) fn primary_key_correct_errors(mut builder: crate::types::builders::PrimaryKeyBuilder) -> crate::types::builders::PrimaryKeyBuilder {
    if builder.offset.is_none() {
        builder.offset = Some(Default::default())
    }
    if builder.length.is_none() {
        builder.length = Some(Default::default())
    }
    builder
}

pub(crate) fn script_batch_job_definition_correct_errors(
    mut builder: crate::types::builders::ScriptBatchJobDefinitionBuilder,
) -> crate::types::builders::ScriptBatchJobDefinitionBuilder {
    if builder.script_name.is_none() {
        builder.script_name = Some(Default::default())
    }
    builder
}

pub(crate) fn alternate_key_correct_errors(mut builder: crate::types::builders::AlternateKeyBuilder) -> crate::types::builders::AlternateKeyBuilder {
    if builder.offset.is_none() {
        builder.offset = Some(Default::default())
    }
    if builder.length.is_none() {
        builder.length = Some(Default::default())
    }
    builder
}
