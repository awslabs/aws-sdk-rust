// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Identifies the chunk on the Kinesis video stream where you want the <code>GetMedia</code> API to start returning media data. You have the following options to identify the starting chunk: </p>
/// <ul>
/// <li> <p>Choose the latest (or oldest) chunk.</p> </li>
/// <li> <p>Identify a specific chunk. You can identify a specific chunk either by providing a fragment number or timestamp (server or producer). </p> </li>
/// <li> <p>Each chunk's metadata includes a continuation token as a Matroska (MKV) tag (<code>AWS_KINESISVIDEO_CONTINUATION_TOKEN</code>). If your previous <code>GetMedia</code> request terminated, you can use this tag value in your next <code>GetMedia</code> request. The API then starts returning chunks starting where the last API ended.</p> </li>
/// </ul>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StartSelector {
    /// <p>Identifies the fragment on the Kinesis video stream where you want to start getting the data from.</p>
    /// <ul>
    /// <li> <p>NOW - Start with the latest chunk on the stream.</p> </li>
    /// <li> <p>EARLIEST - Start with earliest available chunk on the stream.</p> </li>
    /// <li> <p>FRAGMENT_NUMBER - Start with the chunk after a specific fragment. You must also specify the <code>AfterFragmentNumber</code> parameter.</p> </li>
    /// <li> <p>PRODUCER_TIMESTAMP or SERVER_TIMESTAMP - Start with the chunk containing a fragment with the specified producer or server timestamp. You specify the timestamp by adding <code>StartTimestamp</code>.</p> </li>
    /// <li> <p> CONTINUATION_TOKEN - Read using the specified continuation token. </p> </li>
    /// </ul> <note>
    /// <p>If you choose the NOW, EARLIEST, or CONTINUATION_TOKEN as the <code>startSelectorType</code>, you don't provide any additional information in the <code>startSelector</code>.</p>
    /// </note>
    pub start_selector_type: crate::types::StartSelectorType,
    /// <p>Specifies the fragment number from where you want the <code>GetMedia</code> API to start returning the fragments. </p>
    pub after_fragment_number: ::std::option::Option<::std::string::String>,
    /// <p>A timestamp value. This value is required if you choose the PRODUCER_TIMESTAMP or the SERVER_TIMESTAMP as the <code>startSelectorType</code>. The <code>GetMedia</code> API then starts with the chunk containing the fragment that has the specified timestamp.</p>
    pub start_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Continuation token that Kinesis Video Streams returned in the previous <code>GetMedia</code> response. The <code>GetMedia</code> API then starts with the chunk identified by the continuation token.</p>
    pub continuation_token: ::std::option::Option<::std::string::String>,
}
impl StartSelector {
    /// <p>Identifies the fragment on the Kinesis video stream where you want to start getting the data from.</p>
    /// <ul>
    /// <li> <p>NOW - Start with the latest chunk on the stream.</p> </li>
    /// <li> <p>EARLIEST - Start with earliest available chunk on the stream.</p> </li>
    /// <li> <p>FRAGMENT_NUMBER - Start with the chunk after a specific fragment. You must also specify the <code>AfterFragmentNumber</code> parameter.</p> </li>
    /// <li> <p>PRODUCER_TIMESTAMP or SERVER_TIMESTAMP - Start with the chunk containing a fragment with the specified producer or server timestamp. You specify the timestamp by adding <code>StartTimestamp</code>.</p> </li>
    /// <li> <p> CONTINUATION_TOKEN - Read using the specified continuation token. </p> </li>
    /// </ul> <note>
    /// <p>If you choose the NOW, EARLIEST, or CONTINUATION_TOKEN as the <code>startSelectorType</code>, you don't provide any additional information in the <code>startSelector</code>.</p>
    /// </note>
    pub fn start_selector_type(&self) -> &crate::types::StartSelectorType {
        &self.start_selector_type
    }
    /// <p>Specifies the fragment number from where you want the <code>GetMedia</code> API to start returning the fragments. </p>
    pub fn after_fragment_number(&self) -> ::std::option::Option<&str> {
        self.after_fragment_number.as_deref()
    }
    /// <p>A timestamp value. This value is required if you choose the PRODUCER_TIMESTAMP or the SERVER_TIMESTAMP as the <code>startSelectorType</code>. The <code>GetMedia</code> API then starts with the chunk containing the fragment that has the specified timestamp.</p>
    pub fn start_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.start_timestamp.as_ref()
    }
    /// <p>Continuation token that Kinesis Video Streams returned in the previous <code>GetMedia</code> response. The <code>GetMedia</code> API then starts with the chunk identified by the continuation token.</p>
    pub fn continuation_token(&self) -> ::std::option::Option<&str> {
        self.continuation_token.as_deref()
    }
}
impl StartSelector {
    /// Creates a new builder-style object to manufacture [`StartSelector`](crate::types::StartSelector).
    pub fn builder() -> crate::types::builders::StartSelectorBuilder {
        crate::types::builders::StartSelectorBuilder::default()
    }
}

/// A builder for [`StartSelector`](crate::types::StartSelector).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct StartSelectorBuilder {
    pub(crate) start_selector_type: ::std::option::Option<crate::types::StartSelectorType>,
    pub(crate) after_fragment_number: ::std::option::Option<::std::string::String>,
    pub(crate) start_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) continuation_token: ::std::option::Option<::std::string::String>,
}
impl StartSelectorBuilder {
    /// <p>Identifies the fragment on the Kinesis video stream where you want to start getting the data from.</p>
    /// <ul>
    /// <li> <p>NOW - Start with the latest chunk on the stream.</p> </li>
    /// <li> <p>EARLIEST - Start with earliest available chunk on the stream.</p> </li>
    /// <li> <p>FRAGMENT_NUMBER - Start with the chunk after a specific fragment. You must also specify the <code>AfterFragmentNumber</code> parameter.</p> </li>
    /// <li> <p>PRODUCER_TIMESTAMP or SERVER_TIMESTAMP - Start with the chunk containing a fragment with the specified producer or server timestamp. You specify the timestamp by adding <code>StartTimestamp</code>.</p> </li>
    /// <li> <p> CONTINUATION_TOKEN - Read using the specified continuation token. </p> </li>
    /// </ul> <note>
    /// <p>If you choose the NOW, EARLIEST, or CONTINUATION_TOKEN as the <code>startSelectorType</code>, you don't provide any additional information in the <code>startSelector</code>.</p>
    /// </note>
    /// This field is required.
    pub fn start_selector_type(mut self, input: crate::types::StartSelectorType) -> Self {
        self.start_selector_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Identifies the fragment on the Kinesis video stream where you want to start getting the data from.</p>
    /// <ul>
    /// <li> <p>NOW - Start with the latest chunk on the stream.</p> </li>
    /// <li> <p>EARLIEST - Start with earliest available chunk on the stream.</p> </li>
    /// <li> <p>FRAGMENT_NUMBER - Start with the chunk after a specific fragment. You must also specify the <code>AfterFragmentNumber</code> parameter.</p> </li>
    /// <li> <p>PRODUCER_TIMESTAMP or SERVER_TIMESTAMP - Start with the chunk containing a fragment with the specified producer or server timestamp. You specify the timestamp by adding <code>StartTimestamp</code>.</p> </li>
    /// <li> <p> CONTINUATION_TOKEN - Read using the specified continuation token. </p> </li>
    /// </ul> <note>
    /// <p>If you choose the NOW, EARLIEST, or CONTINUATION_TOKEN as the <code>startSelectorType</code>, you don't provide any additional information in the <code>startSelector</code>.</p>
    /// </note>
    pub fn set_start_selector_type(mut self, input: ::std::option::Option<crate::types::StartSelectorType>) -> Self {
        self.start_selector_type = input;
        self
    }
    /// <p>Identifies the fragment on the Kinesis video stream where you want to start getting the data from.</p>
    /// <ul>
    /// <li> <p>NOW - Start with the latest chunk on the stream.</p> </li>
    /// <li> <p>EARLIEST - Start with earliest available chunk on the stream.</p> </li>
    /// <li> <p>FRAGMENT_NUMBER - Start with the chunk after a specific fragment. You must also specify the <code>AfterFragmentNumber</code> parameter.</p> </li>
    /// <li> <p>PRODUCER_TIMESTAMP or SERVER_TIMESTAMP - Start with the chunk containing a fragment with the specified producer or server timestamp. You specify the timestamp by adding <code>StartTimestamp</code>.</p> </li>
    /// <li> <p> CONTINUATION_TOKEN - Read using the specified continuation token. </p> </li>
    /// </ul> <note>
    /// <p>If you choose the NOW, EARLIEST, or CONTINUATION_TOKEN as the <code>startSelectorType</code>, you don't provide any additional information in the <code>startSelector</code>.</p>
    /// </note>
    pub fn get_start_selector_type(&self) -> &::std::option::Option<crate::types::StartSelectorType> {
        &self.start_selector_type
    }
    /// <p>Specifies the fragment number from where you want the <code>GetMedia</code> API to start returning the fragments. </p>
    pub fn after_fragment_number(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.after_fragment_number = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the fragment number from where you want the <code>GetMedia</code> API to start returning the fragments. </p>
    pub fn set_after_fragment_number(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.after_fragment_number = input;
        self
    }
    /// <p>Specifies the fragment number from where you want the <code>GetMedia</code> API to start returning the fragments. </p>
    pub fn get_after_fragment_number(&self) -> &::std::option::Option<::std::string::String> {
        &self.after_fragment_number
    }
    /// <p>A timestamp value. This value is required if you choose the PRODUCER_TIMESTAMP or the SERVER_TIMESTAMP as the <code>startSelectorType</code>. The <code>GetMedia</code> API then starts with the chunk containing the fragment that has the specified timestamp.</p>
    pub fn start_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.start_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>A timestamp value. This value is required if you choose the PRODUCER_TIMESTAMP or the SERVER_TIMESTAMP as the <code>startSelectorType</code>. The <code>GetMedia</code> API then starts with the chunk containing the fragment that has the specified timestamp.</p>
    pub fn set_start_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.start_timestamp = input;
        self
    }
    /// <p>A timestamp value. This value is required if you choose the PRODUCER_TIMESTAMP or the SERVER_TIMESTAMP as the <code>startSelectorType</code>. The <code>GetMedia</code> API then starts with the chunk containing the fragment that has the specified timestamp.</p>
    pub fn get_start_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.start_timestamp
    }
    /// <p>Continuation token that Kinesis Video Streams returned in the previous <code>GetMedia</code> response. The <code>GetMedia</code> API then starts with the chunk identified by the continuation token.</p>
    pub fn continuation_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.continuation_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Continuation token that Kinesis Video Streams returned in the previous <code>GetMedia</code> response. The <code>GetMedia</code> API then starts with the chunk identified by the continuation token.</p>
    pub fn set_continuation_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.continuation_token = input;
        self
    }
    /// <p>Continuation token that Kinesis Video Streams returned in the previous <code>GetMedia</code> response. The <code>GetMedia</code> API then starts with the chunk identified by the continuation token.</p>
    pub fn get_continuation_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.continuation_token
    }
    /// Consumes the builder and constructs a [`StartSelector`](crate::types::StartSelector).
    /// This method will fail if any of the following fields are not set:
    /// - [`start_selector_type`](crate::types::builders::StartSelectorBuilder::start_selector_type)
    pub fn build(self) -> ::std::result::Result<crate::types::StartSelector, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::StartSelector {
            start_selector_type: self.start_selector_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "start_selector_type",
                    "start_selector_type was not specified but it is required when building StartSelector",
                )
            })?,
            after_fragment_number: self.after_fragment_number,
            start_timestamp: self.start_timestamp,
            continuation_token: self.continuation_token,
        })
    }
}
