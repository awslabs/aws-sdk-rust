// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`PutAuditEvents`](crate::operation::put_audit_events::builders::PutAuditEventsFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`audit_events(AuditEvent)`](crate::operation::put_audit_events::builders::PutAuditEventsFluentBuilder::audit_events) / [`set_audit_events(Option<Vec::<AuditEvent>>)`](crate::operation::put_audit_events::builders::PutAuditEventsFluentBuilder::set_audit_events):<br>required: **true**<br><p>The JSON payload of events that you want to ingest. You can also point to the JSON event payload in a file.</p><br>
    ///   - [`channel_arn(impl Into<String>)`](crate::operation::put_audit_events::builders::PutAuditEventsFluentBuilder::channel_arn) / [`set_channel_arn(Option<String>)`](crate::operation::put_audit_events::builders::PutAuditEventsFluentBuilder::set_channel_arn):<br>required: **true**<br><p>The ARN or ID (the ARN suffix) of a channel.</p><br>
    ///   - [`external_id(impl Into<String>)`](crate::operation::put_audit_events::builders::PutAuditEventsFluentBuilder::external_id) / [`set_external_id(Option<String>)`](crate::operation::put_audit_events::builders::PutAuditEventsFluentBuilder::set_external_id):<br>required: **false**<br><p>A unique identifier that is conditionally required when the channel's resource policy includes an external ID. This value can be any string, such as a passphrase or account number.</p><br>
    /// - On success, responds with [`PutAuditEventsOutput`](crate::operation::put_audit_events::PutAuditEventsOutput) with field(s):
    ///   - [`successful(Vec::<AuditEventResultEntry>)`](crate::operation::put_audit_events::PutAuditEventsOutput::successful): <p>Lists events in the provided event payload that were successfully ingested into CloudTrail.</p>
    ///   - [`failed(Vec::<ResultErrorEntry>)`](crate::operation::put_audit_events::PutAuditEventsOutput::failed): <p>Lists events in the provided event payload that could not be ingested into CloudTrail, and includes the error code and error message returned for events that could not be ingested.</p>
    /// - On failure, responds with [`SdkError<PutAuditEventsError>`](crate::operation::put_audit_events::PutAuditEventsError)
    pub fn put_audit_events(&self) -> crate::operation::put_audit_events::builders::PutAuditEventsFluentBuilder {
        crate::operation::put_audit_events::builders::PutAuditEventsFluentBuilder::new(self.handle.clone())
    }
}
