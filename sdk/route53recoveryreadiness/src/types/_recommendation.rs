// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Recommendations that are provided to make an application more recovery resilient.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Recommendation {
    /// <p>Text of the recommendations that are provided to make an application more recovery resilient.</p>
    #[doc(hidden)]
    pub recommendation_text: std::option::Option<std::string::String>,
}
impl Recommendation {
    /// <p>Text of the recommendations that are provided to make an application more recovery resilient.</p>
    pub fn recommendation_text(&self) -> std::option::Option<&str> {
        self.recommendation_text.as_deref()
    }
}
impl Recommendation {
    /// Creates a new builder-style object to manufacture [`Recommendation`](crate::types::Recommendation).
    pub fn builder() -> crate::types::builders::RecommendationBuilder {
        crate::types::builders::RecommendationBuilder::default()
    }
}

/// A builder for [`Recommendation`](crate::types::Recommendation).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RecommendationBuilder {
    pub(crate) recommendation_text: std::option::Option<std::string::String>,
}
impl RecommendationBuilder {
    /// <p>Text of the recommendations that are provided to make an application more recovery resilient.</p>
    pub fn recommendation_text(mut self, input: impl Into<std::string::String>) -> Self {
        self.recommendation_text = Some(input.into());
        self
    }
    /// <p>Text of the recommendations that are provided to make an application more recovery resilient.</p>
    pub fn set_recommendation_text(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.recommendation_text = input;
        self
    }
    /// Consumes the builder and constructs a [`Recommendation`](crate::types::Recommendation).
    pub fn build(self) -> crate::types::Recommendation {
        crate::types::Recommendation {
            recommendation_text: self.recommendation_text,
        }
    }
}
