// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The resource element of a resource set.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Resource {
    /// <p>The component identifier of the resource, generated when DNS target resource is used.</p>
    pub component_id: ::std::option::Option<::std::string::String>,
    /// <p>The DNS target resource.</p>
    pub dns_target_resource: ::std::option::Option<crate::types::DnsTargetResource>,
    /// <p>A list of recovery group Amazon Resource Names (ARNs) and cell ARNs that this resource is contained within.</p>
    pub readiness_scopes: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The Amazon Resource Name (ARN) of the Amazon Web Services resource.</p>
    pub resource_arn: ::std::option::Option<::std::string::String>,
}
impl Resource {
    /// <p>The component identifier of the resource, generated when DNS target resource is used.</p>
    pub fn component_id(&self) -> ::std::option::Option<&str> {
        self.component_id.as_deref()
    }
    /// <p>The DNS target resource.</p>
    pub fn dns_target_resource(&self) -> ::std::option::Option<&crate::types::DnsTargetResource> {
        self.dns_target_resource.as_ref()
    }
    /// <p>A list of recovery group Amazon Resource Names (ARNs) and cell ARNs that this resource is contained within.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.readiness_scopes.is_none()`.
    pub fn readiness_scopes(&self) -> &[::std::string::String] {
        self.readiness_scopes.as_deref().unwrap_or_default()
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon Web Services resource.</p>
    pub fn resource_arn(&self) -> ::std::option::Option<&str> {
        self.resource_arn.as_deref()
    }
}
impl Resource {
    /// Creates a new builder-style object to manufacture [`Resource`](crate::types::Resource).
    pub fn builder() -> crate::types::builders::ResourceBuilder {
        crate::types::builders::ResourceBuilder::default()
    }
}

/// A builder for [`Resource`](crate::types::Resource).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ResourceBuilder {
    pub(crate) component_id: ::std::option::Option<::std::string::String>,
    pub(crate) dns_target_resource: ::std::option::Option<crate::types::DnsTargetResource>,
    pub(crate) readiness_scopes: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) resource_arn: ::std::option::Option<::std::string::String>,
}
impl ResourceBuilder {
    /// <p>The component identifier of the resource, generated when DNS target resource is used.</p>
    pub fn component_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.component_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The component identifier of the resource, generated when DNS target resource is used.</p>
    pub fn set_component_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.component_id = input;
        self
    }
    /// <p>The component identifier of the resource, generated when DNS target resource is used.</p>
    pub fn get_component_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.component_id
    }
    /// <p>The DNS target resource.</p>
    pub fn dns_target_resource(mut self, input: crate::types::DnsTargetResource) -> Self {
        self.dns_target_resource = ::std::option::Option::Some(input);
        self
    }
    /// <p>The DNS target resource.</p>
    pub fn set_dns_target_resource(mut self, input: ::std::option::Option<crate::types::DnsTargetResource>) -> Self {
        self.dns_target_resource = input;
        self
    }
    /// <p>The DNS target resource.</p>
    pub fn get_dns_target_resource(&self) -> &::std::option::Option<crate::types::DnsTargetResource> {
        &self.dns_target_resource
    }
    /// Appends an item to `readiness_scopes`.
    ///
    /// To override the contents of this collection use [`set_readiness_scopes`](Self::set_readiness_scopes).
    ///
    /// <p>A list of recovery group Amazon Resource Names (ARNs) and cell ARNs that this resource is contained within.</p>
    pub fn readiness_scopes(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.readiness_scopes.unwrap_or_default();
        v.push(input.into());
        self.readiness_scopes = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of recovery group Amazon Resource Names (ARNs) and cell ARNs that this resource is contained within.</p>
    pub fn set_readiness_scopes(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.readiness_scopes = input;
        self
    }
    /// <p>A list of recovery group Amazon Resource Names (ARNs) and cell ARNs that this resource is contained within.</p>
    pub fn get_readiness_scopes(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.readiness_scopes
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon Web Services resource.</p>
    pub fn resource_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon Web Services resource.</p>
    pub fn set_resource_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon Web Services resource.</p>
    pub fn get_resource_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_arn
    }
    /// Consumes the builder and constructs a [`Resource`](crate::types::Resource).
    pub fn build(self) -> crate::types::Resource {
        crate::types::Resource {
            component_id: self.component_id,
            dns_target_resource: self.dns_target_resource,
            readiness_scopes: self.readiness_scopes,
            resource_arn: self.resource_arn,
        }
    }
}
