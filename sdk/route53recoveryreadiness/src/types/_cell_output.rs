// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a cell.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CellOutput {
    /// <p>The Amazon Resource Name (ARN) for the cell.</p>
    #[doc(hidden)]
    pub cell_arn: std::option::Option<std::string::String>,
    /// <p>The name of the cell.</p>
    #[doc(hidden)]
    pub cell_name: std::option::Option<std::string::String>,
    /// <p>A list of cell ARNs.</p>
    #[doc(hidden)]
    pub cells: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The readiness scope for the cell, which can be a cell Amazon Resource Name (ARN) or a recovery group ARN. This is a list but currently can have only one element.</p>
    #[doc(hidden)]
    pub parent_readiness_scopes: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Tags on the resources.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl CellOutput {
    /// <p>The Amazon Resource Name (ARN) for the cell.</p>
    pub fn cell_arn(&self) -> std::option::Option<&str> {
        self.cell_arn.as_deref()
    }
    /// <p>The name of the cell.</p>
    pub fn cell_name(&self) -> std::option::Option<&str> {
        self.cell_name.as_deref()
    }
    /// <p>A list of cell ARNs.</p>
    pub fn cells(&self) -> std::option::Option<&[std::string::String]> {
        self.cells.as_deref()
    }
    /// <p>The readiness scope for the cell, which can be a cell Amazon Resource Name (ARN) or a recovery group ARN. This is a list but currently can have only one element.</p>
    pub fn parent_readiness_scopes(&self) -> std::option::Option<&[std::string::String]> {
        self.parent_readiness_scopes.as_deref()
    }
    /// <p>Tags on the resources.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl CellOutput {
    /// Creates a new builder-style object to manufacture [`CellOutput`](crate::types::CellOutput).
    pub fn builder() -> crate::types::builders::CellOutputBuilder {
        crate::types::builders::CellOutputBuilder::default()
    }
}

/// A builder for [`CellOutput`](crate::types::CellOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CellOutputBuilder {
    pub(crate) cell_arn: std::option::Option<std::string::String>,
    pub(crate) cell_name: std::option::Option<std::string::String>,
    pub(crate) cells: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) parent_readiness_scopes: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl CellOutputBuilder {
    /// <p>The Amazon Resource Name (ARN) for the cell.</p>
    pub fn cell_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.cell_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the cell.</p>
    pub fn set_cell_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.cell_arn = input;
        self
    }
    /// <p>The name of the cell.</p>
    pub fn cell_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.cell_name = Some(input.into());
        self
    }
    /// <p>The name of the cell.</p>
    pub fn set_cell_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.cell_name = input;
        self
    }
    /// Appends an item to `cells`.
    ///
    /// To override the contents of this collection use [`set_cells`](Self::set_cells).
    ///
    /// <p>A list of cell ARNs.</p>
    pub fn cells(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.cells.unwrap_or_default();
        v.push(input.into());
        self.cells = Some(v);
        self
    }
    /// <p>A list of cell ARNs.</p>
    pub fn set_cells(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.cells = input;
        self
    }
    /// Appends an item to `parent_readiness_scopes`.
    ///
    /// To override the contents of this collection use [`set_parent_readiness_scopes`](Self::set_parent_readiness_scopes).
    ///
    /// <p>The readiness scope for the cell, which can be a cell Amazon Resource Name (ARN) or a recovery group ARN. This is a list but currently can have only one element.</p>
    pub fn parent_readiness_scopes(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.parent_readiness_scopes.unwrap_or_default();
        v.push(input.into());
        self.parent_readiness_scopes = Some(v);
        self
    }
    /// <p>The readiness scope for the cell, which can be a cell Amazon Resource Name (ARN) or a recovery group ARN. This is a list but currently can have only one element.</p>
    pub fn set_parent_readiness_scopes(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.parent_readiness_scopes = input;
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Tags on the resources.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = Some(hash_map);
        self
    }
    /// <p>Tags on the resources.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.tags = input;
        self
    }
    /// Consumes the builder and constructs a [`CellOutput`](crate::types::CellOutput).
    pub fn build(self) -> crate::types::CellOutput {
        crate::types::CellOutput {
            cell_arn: self.cell_arn,
            cell_name: self.cell_name,
            cells: self.cells,
            parent_readiness_scopes: self.parent_readiness_scopes,
            tags: self.tags,
        }
    }
}
