// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetReadinessCheckStatusOutput {
    /// <p>Top level messages for readiness check status</p>
    #[doc(hidden)]
    pub messages: std::option::Option<std::vec::Vec<crate::types::Message>>,
    /// <p>The token that identifies which batch of results you want to see.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The readiness at rule level.</p>
    #[doc(hidden)]
    pub readiness: std::option::Option<crate::types::Readiness>,
    /// <p>Summary of the readiness of resources.</p>
    #[doc(hidden)]
    pub resources: std::option::Option<std::vec::Vec<crate::types::ResourceResult>>,
    _request_id: Option<String>,
}
impl GetReadinessCheckStatusOutput {
    /// <p>Top level messages for readiness check status</p>
    pub fn messages(&self) -> std::option::Option<&[crate::types::Message]> {
        self.messages.as_deref()
    }
    /// <p>The token that identifies which batch of results you want to see.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The readiness at rule level.</p>
    pub fn readiness(&self) -> std::option::Option<&crate::types::Readiness> {
        self.readiness.as_ref()
    }
    /// <p>Summary of the readiness of resources.</p>
    pub fn resources(&self) -> std::option::Option<&[crate::types::ResourceResult]> {
        self.resources.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetReadinessCheckStatusOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetReadinessCheckStatusOutput {
    /// Creates a new builder-style object to manufacture [`GetReadinessCheckStatusOutput`](crate::operation::get_readiness_check_status::GetReadinessCheckStatusOutput).
    pub fn builder(
    ) -> crate::operation::get_readiness_check_status::builders::GetReadinessCheckStatusOutputBuilder
    {
        crate::operation::get_readiness_check_status::builders::GetReadinessCheckStatusOutputBuilder::default()
    }
}

/// A builder for [`GetReadinessCheckStatusOutput`](crate::operation::get_readiness_check_status::GetReadinessCheckStatusOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetReadinessCheckStatusOutputBuilder {
    pub(crate) messages: std::option::Option<std::vec::Vec<crate::types::Message>>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) readiness: std::option::Option<crate::types::Readiness>,
    pub(crate) resources: std::option::Option<std::vec::Vec<crate::types::ResourceResult>>,
    _request_id: Option<String>,
}
impl GetReadinessCheckStatusOutputBuilder {
    /// Appends an item to `messages`.
    ///
    /// To override the contents of this collection use [`set_messages`](Self::set_messages).
    ///
    /// <p>Top level messages for readiness check status</p>
    pub fn messages(mut self, input: crate::types::Message) -> Self {
        let mut v = self.messages.unwrap_or_default();
        v.push(input);
        self.messages = Some(v);
        self
    }
    /// <p>Top level messages for readiness check status</p>
    pub fn set_messages(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Message>>,
    ) -> Self {
        self.messages = input;
        self
    }
    /// <p>The token that identifies which batch of results you want to see.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>The token that identifies which batch of results you want to see.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The readiness at rule level.</p>
    pub fn readiness(mut self, input: crate::types::Readiness) -> Self {
        self.readiness = Some(input);
        self
    }
    /// <p>The readiness at rule level.</p>
    pub fn set_readiness(mut self, input: std::option::Option<crate::types::Readiness>) -> Self {
        self.readiness = input;
        self
    }
    /// Appends an item to `resources`.
    ///
    /// To override the contents of this collection use [`set_resources`](Self::set_resources).
    ///
    /// <p>Summary of the readiness of resources.</p>
    pub fn resources(mut self, input: crate::types::ResourceResult) -> Self {
        let mut v = self.resources.unwrap_or_default();
        v.push(input);
        self.resources = Some(v);
        self
    }
    /// <p>Summary of the readiness of resources.</p>
    pub fn set_resources(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ResourceResult>>,
    ) -> Self {
        self.resources = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetReadinessCheckStatusOutput`](crate::operation::get_readiness_check_status::GetReadinessCheckStatusOutput).
    pub fn build(
        self,
    ) -> crate::operation::get_readiness_check_status::GetReadinessCheckStatusOutput {
        crate::operation::get_readiness_check_status::GetReadinessCheckStatusOutput {
            messages: self.messages,
            next_token: self.next_token,
            readiness: self.readiness,
            resources: self.resources,
            _request_id: self._request_id,
        }
    }
}
