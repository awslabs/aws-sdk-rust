// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetArchitectureRecommendationsOutput {
    /// <p>The time that a recovery group was last assessed for recommendations, in UTC ISO-8601 format.</p>
    #[doc(hidden)]
    pub last_audit_timestamp: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The token that identifies which batch of results you want to see.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>A list of the recommendations for the customer's application.</p>
    #[doc(hidden)]
    pub recommendations: std::option::Option<std::vec::Vec<crate::types::Recommendation>>,
    _request_id: Option<String>,
}
impl GetArchitectureRecommendationsOutput {
    /// <p>The time that a recovery group was last assessed for recommendations, in UTC ISO-8601 format.</p>
    pub fn last_audit_timestamp(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_audit_timestamp.as_ref()
    }
    /// <p>The token that identifies which batch of results you want to see.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>A list of the recommendations for the customer's application.</p>
    pub fn recommendations(&self) -> std::option::Option<&[crate::types::Recommendation]> {
        self.recommendations.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetArchitectureRecommendationsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetArchitectureRecommendationsOutput {
    /// Creates a new builder-style object to manufacture [`GetArchitectureRecommendationsOutput`](crate::operation::get_architecture_recommendations::GetArchitectureRecommendationsOutput).
    pub fn builder() -> crate::operation::get_architecture_recommendations::builders::GetArchitectureRecommendationsOutputBuilder{
        crate::operation::get_architecture_recommendations::builders::GetArchitectureRecommendationsOutputBuilder::default()
    }
}

/// A builder for [`GetArchitectureRecommendationsOutput`](crate::operation::get_architecture_recommendations::GetArchitectureRecommendationsOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetArchitectureRecommendationsOutputBuilder {
    pub(crate) last_audit_timestamp: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) recommendations: std::option::Option<std::vec::Vec<crate::types::Recommendation>>,
    _request_id: Option<String>,
}
impl GetArchitectureRecommendationsOutputBuilder {
    /// <p>The time that a recovery group was last assessed for recommendations, in UTC ISO-8601 format.</p>
    pub fn last_audit_timestamp(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_audit_timestamp = Some(input);
        self
    }
    /// <p>The time that a recovery group was last assessed for recommendations, in UTC ISO-8601 format.</p>
    pub fn set_last_audit_timestamp(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_audit_timestamp = input;
        self
    }
    /// <p>The token that identifies which batch of results you want to see.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>The token that identifies which batch of results you want to see.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// Appends an item to `recommendations`.
    ///
    /// To override the contents of this collection use [`set_recommendations`](Self::set_recommendations).
    ///
    /// <p>A list of the recommendations for the customer's application.</p>
    pub fn recommendations(mut self, input: crate::types::Recommendation) -> Self {
        let mut v = self.recommendations.unwrap_or_default();
        v.push(input);
        self.recommendations = Some(v);
        self
    }
    /// <p>A list of the recommendations for the customer's application.</p>
    pub fn set_recommendations(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Recommendation>>,
    ) -> Self {
        self.recommendations = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetArchitectureRecommendationsOutput`](crate::operation::get_architecture_recommendations::GetArchitectureRecommendationsOutput).
    pub fn build(
        self,
    ) -> crate::operation::get_architecture_recommendations::GetArchitectureRecommendationsOutput
    {
        crate::operation::get_architecture_recommendations::GetArchitectureRecommendationsOutput {
            last_audit_timestamp: self.last_audit_timestamp,
            next_token: self.next_token,
            recommendations: self.recommendations,
            _request_id: self._request_id,
        }
    }
}
