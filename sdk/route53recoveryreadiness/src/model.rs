// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// The resource element of a ResourceSet
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct Resource {
    /// The component id of the resource, generated by the service when dnsTargetResource is used
    pub component_id: std::option::Option<std::string::String>,
    /// A component for DNS/Routing Control Readiness Checks
    pub dns_target_resource: std::option::Option<crate::model::DnsTargetResource>,
    /// A list of RecoveryGroup ARNs and/or Cell ARNs that this resource is contained within.
    pub readiness_scopes: std::option::Option<std::vec::Vec<std::string::String>>,
    /// The ARN of the AWS resource, can be skipped if dnsTargetResource is used
    pub resource_arn: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for Resource {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("Resource");
        formatter.field("component_id", &self.component_id);
        formatter.field("dns_target_resource", &self.dns_target_resource);
        formatter.field("readiness_scopes", &self.readiness_scopes);
        formatter.field("resource_arn", &self.resource_arn);
        formatter.finish()
    }
}
/// See [`Resource`](crate::model::Resource)
pub mod resource {
    /// A builder for [`Resource`](crate::model::Resource)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) component_id: std::option::Option<std::string::String>,
        pub(crate) dns_target_resource: std::option::Option<crate::model::DnsTargetResource>,
        pub(crate) readiness_scopes: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) resource_arn: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// The component id of the resource, generated by the service when dnsTargetResource is used
        pub fn component_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.component_id = Some(input.into());
            self
        }
        pub fn set_component_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.component_id = input;
            self
        }
        /// A component for DNS/Routing Control Readiness Checks
        pub fn dns_target_resource(mut self, input: crate::model::DnsTargetResource) -> Self {
            self.dns_target_resource = Some(input);
            self
        }
        pub fn set_dns_target_resource(
            mut self,
            input: std::option::Option<crate::model::DnsTargetResource>,
        ) -> Self {
            self.dns_target_resource = input;
            self
        }
        pub fn readiness_scopes(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.readiness_scopes.unwrap_or_default();
            v.push(input.into());
            self.readiness_scopes = Some(v);
            self
        }
        pub fn set_readiness_scopes(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.readiness_scopes = input;
            self
        }
        /// The ARN of the AWS resource, can be skipped if dnsTargetResource is used
        pub fn resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.resource_arn = Some(input.into());
            self
        }
        pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.resource_arn = input;
            self
        }
        /// Consumes the builder and constructs a [`Resource`](crate::model::Resource)
        pub fn build(self) -> crate::model::Resource {
            crate::model::Resource {
                component_id: self.component_id,
                dns_target_resource: self.dns_target_resource,
                readiness_scopes: self.readiness_scopes,
                resource_arn: self.resource_arn,
            }
        }
    }
}
impl Resource {
    /// Creates a new builder-style object to manufacture [`Resource`](crate::model::Resource)
    pub fn builder() -> crate::model::resource::Builder {
        crate::model::resource::Builder::default()
    }
}

/// A component for DNS/Routing Control Readiness Checks
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DnsTargetResource {
    /// The DNS Name that acts as ingress point to a portion of application
    pub domain_name: std::option::Option<std::string::String>,
    /// The Hosted Zone ARN that contains the DNS record with the provided name of target resource.
    pub hosted_zone_arn: std::option::Option<std::string::String>,
    /// The R53 Set Id to uniquely identify a record given a Name and a Type
    pub record_set_id: std::option::Option<std::string::String>,
    /// The Type of DNS Record of target resource
    pub record_type: std::option::Option<std::string::String>,
    /// The target resource the R53 record points to
    pub target_resource: std::option::Option<crate::model::TargetResource>,
}
impl std::fmt::Debug for DnsTargetResource {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DnsTargetResource");
        formatter.field("domain_name", &self.domain_name);
        formatter.field("hosted_zone_arn", &self.hosted_zone_arn);
        formatter.field("record_set_id", &self.record_set_id);
        formatter.field("record_type", &self.record_type);
        formatter.field("target_resource", &self.target_resource);
        formatter.finish()
    }
}
/// See [`DnsTargetResource`](crate::model::DnsTargetResource)
pub mod dns_target_resource {
    /// A builder for [`DnsTargetResource`](crate::model::DnsTargetResource)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) domain_name: std::option::Option<std::string::String>,
        pub(crate) hosted_zone_arn: std::option::Option<std::string::String>,
        pub(crate) record_set_id: std::option::Option<std::string::String>,
        pub(crate) record_type: std::option::Option<std::string::String>,
        pub(crate) target_resource: std::option::Option<crate::model::TargetResource>,
    }
    impl Builder {
        /// The DNS Name that acts as ingress point to a portion of application
        pub fn domain_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.domain_name = Some(input.into());
            self
        }
        pub fn set_domain_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.domain_name = input;
            self
        }
        /// The Hosted Zone ARN that contains the DNS record with the provided name of target resource.
        pub fn hosted_zone_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.hosted_zone_arn = Some(input.into());
            self
        }
        pub fn set_hosted_zone_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.hosted_zone_arn = input;
            self
        }
        /// The R53 Set Id to uniquely identify a record given a Name and a Type
        pub fn record_set_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.record_set_id = Some(input.into());
            self
        }
        pub fn set_record_set_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.record_set_id = input;
            self
        }
        /// The Type of DNS Record of target resource
        pub fn record_type(mut self, input: impl Into<std::string::String>) -> Self {
            self.record_type = Some(input.into());
            self
        }
        pub fn set_record_type(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.record_type = input;
            self
        }
        /// The target resource the R53 record points to
        pub fn target_resource(mut self, input: crate::model::TargetResource) -> Self {
            self.target_resource = Some(input);
            self
        }
        pub fn set_target_resource(
            mut self,
            input: std::option::Option<crate::model::TargetResource>,
        ) -> Self {
            self.target_resource = input;
            self
        }
        /// Consumes the builder and constructs a [`DnsTargetResource`](crate::model::DnsTargetResource)
        pub fn build(self) -> crate::model::DnsTargetResource {
            crate::model::DnsTargetResource {
                domain_name: self.domain_name,
                hosted_zone_arn: self.hosted_zone_arn,
                record_set_id: self.record_set_id,
                record_type: self.record_type,
                target_resource: self.target_resource,
            }
        }
    }
}
impl DnsTargetResource {
    /// Creates a new builder-style object to manufacture [`DnsTargetResource`](crate::model::DnsTargetResource)
    pub fn builder() -> crate::model::dns_target_resource::Builder {
        crate::model::dns_target_resource::Builder::default()
    }
}

/// The target resource the R53 record points to
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct TargetResource {
    /// The NLB resource a DNS Target Resource points to
    pub nlb_resource: std::option::Option<crate::model::NlbResource>,
    /// The Route 53 resource a DNS Target Resource record points to
    pub r53_resource: std::option::Option<crate::model::R53ResourceRecord>,
}
impl std::fmt::Debug for TargetResource {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("TargetResource");
        formatter.field("nlb_resource", &self.nlb_resource);
        formatter.field("r53_resource", &self.r53_resource);
        formatter.finish()
    }
}
/// See [`TargetResource`](crate::model::TargetResource)
pub mod target_resource {
    /// A builder for [`TargetResource`](crate::model::TargetResource)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) nlb_resource: std::option::Option<crate::model::NlbResource>,
        pub(crate) r53_resource: std::option::Option<crate::model::R53ResourceRecord>,
    }
    impl Builder {
        /// The NLB resource a DNS Target Resource points to
        pub fn nlb_resource(mut self, input: crate::model::NlbResource) -> Self {
            self.nlb_resource = Some(input);
            self
        }
        pub fn set_nlb_resource(
            mut self,
            input: std::option::Option<crate::model::NlbResource>,
        ) -> Self {
            self.nlb_resource = input;
            self
        }
        /// The Route 53 resource a DNS Target Resource record points to
        pub fn r53_resource(mut self, input: crate::model::R53ResourceRecord) -> Self {
            self.r53_resource = Some(input);
            self
        }
        pub fn set_r53_resource(
            mut self,
            input: std::option::Option<crate::model::R53ResourceRecord>,
        ) -> Self {
            self.r53_resource = input;
            self
        }
        /// Consumes the builder and constructs a [`TargetResource`](crate::model::TargetResource)
        pub fn build(self) -> crate::model::TargetResource {
            crate::model::TargetResource {
                nlb_resource: self.nlb_resource,
                r53_resource: self.r53_resource,
            }
        }
    }
}
impl TargetResource {
    /// Creates a new builder-style object to manufacture [`TargetResource`](crate::model::TargetResource)
    pub fn builder() -> crate::model::target_resource::Builder {
        crate::model::target_resource::Builder::default()
    }
}

/// The Route 53 resource a DNS Target Resource record points to
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct R53ResourceRecord {
    /// The DNS target name
    pub domain_name: std::option::Option<std::string::String>,
    /// The Resource Record set id
    pub record_set_id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for R53ResourceRecord {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("R53ResourceRecord");
        formatter.field("domain_name", &self.domain_name);
        formatter.field("record_set_id", &self.record_set_id);
        formatter.finish()
    }
}
/// See [`R53ResourceRecord`](crate::model::R53ResourceRecord)
pub mod r53_resource_record {
    /// A builder for [`R53ResourceRecord`](crate::model::R53ResourceRecord)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) domain_name: std::option::Option<std::string::String>,
        pub(crate) record_set_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// The DNS target name
        pub fn domain_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.domain_name = Some(input.into());
            self
        }
        pub fn set_domain_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.domain_name = input;
            self
        }
        /// The Resource Record set id
        pub fn record_set_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.record_set_id = Some(input.into());
            self
        }
        pub fn set_record_set_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.record_set_id = input;
            self
        }
        /// Consumes the builder and constructs a [`R53ResourceRecord`](crate::model::R53ResourceRecord)
        pub fn build(self) -> crate::model::R53ResourceRecord {
            crate::model::R53ResourceRecord {
                domain_name: self.domain_name,
                record_set_id: self.record_set_id,
            }
        }
    }
}
impl R53ResourceRecord {
    /// Creates a new builder-style object to manufacture [`R53ResourceRecord`](crate::model::R53ResourceRecord)
    pub fn builder() -> crate::model::r53_resource_record::Builder {
        crate::model::r53_resource_record::Builder::default()
    }
}

/// The NLB resource a DNS Target Resource points to
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct NlbResource {
    /// An NLB resource arn
    pub arn: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for NlbResource {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("NlbResource");
        formatter.field("arn", &self.arn);
        formatter.finish()
    }
}
/// See [`NlbResource`](crate::model::NlbResource)
pub mod nlb_resource {
    /// A builder for [`NlbResource`](crate::model::NlbResource)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) arn: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// An NLB resource arn
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// Consumes the builder and constructs a [`NlbResource`](crate::model::NlbResource)
        pub fn build(self) -> crate::model::NlbResource {
            crate::model::NlbResource { arn: self.arn }
        }
    }
}
impl NlbResource {
    /// Creates a new builder-style object to manufacture [`NlbResource`](crate::model::NlbResource)
    pub fn builder() -> crate::model::nlb_resource::Builder {
        crate::model::nlb_resource::Builder::default()
    }
}

/// A collection of rules used in a readiness check
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListRulesOutput {
    /// The resource type the rule applies to.
    pub resource_type: std::option::Option<std::string::String>,
    /// A description of the rule
    pub rule_description: std::option::Option<std::string::String>,
    /// The Rule's ID.
    pub rule_id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ListRulesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListRulesOutput");
        formatter.field("resource_type", &self.resource_type);
        formatter.field("rule_description", &self.rule_description);
        formatter.field("rule_id", &self.rule_id);
        formatter.finish()
    }
}
/// See [`ListRulesOutput`](crate::model::ListRulesOutput)
pub mod list_rules_output {
    /// A builder for [`ListRulesOutput`](crate::model::ListRulesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) resource_type: std::option::Option<std::string::String>,
        pub(crate) rule_description: std::option::Option<std::string::String>,
        pub(crate) rule_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// The resource type the rule applies to.
        pub fn resource_type(mut self, input: impl Into<std::string::String>) -> Self {
            self.resource_type = Some(input.into());
            self
        }
        pub fn set_resource_type(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.resource_type = input;
            self
        }
        /// A description of the rule
        pub fn rule_description(mut self, input: impl Into<std::string::String>) -> Self {
            self.rule_description = Some(input.into());
            self
        }
        pub fn set_rule_description(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.rule_description = input;
            self
        }
        /// The Rule's ID.
        pub fn rule_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.rule_id = Some(input.into());
            self
        }
        pub fn set_rule_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.rule_id = input;
            self
        }
        /// Consumes the builder and constructs a [`ListRulesOutput`](crate::model::ListRulesOutput)
        pub fn build(self) -> crate::model::ListRulesOutput {
            crate::model::ListRulesOutput {
                resource_type: self.resource_type,
                rule_description: self.rule_description,
                rule_id: self.rule_id,
            }
        }
    }
}
impl ListRulesOutput {
    /// Creates a new builder-style object to manufacture [`ListRulesOutput`](crate::model::ListRulesOutput)
    pub fn builder() -> crate::model::list_rules_output::Builder {
        crate::model::list_rules_output::Builder::default()
    }
}

/// A collection of resources of the same type
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ResourceSetOutput {
    /// The arn for the ResourceSet
    pub resource_set_arn: std::option::Option<std::string::String>,
    /// The name of the ResourceSet
    pub resource_set_name: std::option::Option<std::string::String>,
    /// AWS Resource Type of the resources in the ResourceSet
    pub resource_set_type: std::option::Option<std::string::String>,
    /// A list of Resource objects
    pub resources: std::option::Option<std::vec::Vec<crate::model::Resource>>,
    /// A collection of tags associated with a resource
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl std::fmt::Debug for ResourceSetOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ResourceSetOutput");
        formatter.field("resource_set_arn", &self.resource_set_arn);
        formatter.field("resource_set_name", &self.resource_set_name);
        formatter.field("resource_set_type", &self.resource_set_type);
        formatter.field("resources", &self.resources);
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
/// See [`ResourceSetOutput`](crate::model::ResourceSetOutput)
pub mod resource_set_output {
    /// A builder for [`ResourceSetOutput`](crate::model::ResourceSetOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) resource_set_arn: std::option::Option<std::string::String>,
        pub(crate) resource_set_name: std::option::Option<std::string::String>,
        pub(crate) resource_set_type: std::option::Option<std::string::String>,
        pub(crate) resources: std::option::Option<std::vec::Vec<crate::model::Resource>>,
        pub(crate) tags: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    }
    impl Builder {
        /// The arn for the ResourceSet
        pub fn resource_set_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.resource_set_arn = Some(input.into());
            self
        }
        pub fn set_resource_set_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.resource_set_arn = input;
            self
        }
        /// The name of the ResourceSet
        pub fn resource_set_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.resource_set_name = Some(input.into());
            self
        }
        pub fn set_resource_set_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.resource_set_name = input;
            self
        }
        /// AWS Resource Type of the resources in the ResourceSet
        pub fn resource_set_type(mut self, input: impl Into<std::string::String>) -> Self {
            self.resource_set_type = Some(input.into());
            self
        }
        pub fn set_resource_set_type(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.resource_set_type = input;
            self
        }
        pub fn resources(mut self, input: impl Into<crate::model::Resource>) -> Self {
            let mut v = self.resources.unwrap_or_default();
            v.push(input.into());
            self.resources = Some(v);
            self
        }
        pub fn set_resources(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Resource>>,
        ) -> Self {
            self.resources = input;
            self
        }
        pub fn tags(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            let mut hash_map = self.tags.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.tags = Some(hash_map);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.tags = input;
            self
        }
        /// Consumes the builder and constructs a [`ResourceSetOutput`](crate::model::ResourceSetOutput)
        pub fn build(self) -> crate::model::ResourceSetOutput {
            crate::model::ResourceSetOutput {
                resource_set_arn: self.resource_set_arn,
                resource_set_name: self.resource_set_name,
                resource_set_type: self.resource_set_type,
                resources: self.resources,
                tags: self.tags,
            }
        }
    }
}
impl ResourceSetOutput {
    /// Creates a new builder-style object to manufacture [`ResourceSetOutput`](crate::model::ResourceSetOutput)
    pub fn builder() -> crate::model::resource_set_output::Builder {
        crate::model::resource_set_output::Builder::default()
    }
}

/// A Recovery Group generally containing multiple Cells
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct RecoveryGroupOutput {
    /// A list of Cell arns
    pub cells: std::option::Option<std::vec::Vec<std::string::String>>,
    /// The arn for the RecoveryGroup
    pub recovery_group_arn: std::option::Option<std::string::String>,
    /// The name of the RecoveryGroup
    pub recovery_group_name: std::option::Option<std::string::String>,
    /// A collection of tags associated with a resource
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl std::fmt::Debug for RecoveryGroupOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("RecoveryGroupOutput");
        formatter.field("cells", &self.cells);
        formatter.field("recovery_group_arn", &self.recovery_group_arn);
        formatter.field("recovery_group_name", &self.recovery_group_name);
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
/// See [`RecoveryGroupOutput`](crate::model::RecoveryGroupOutput)
pub mod recovery_group_output {
    /// A builder for [`RecoveryGroupOutput`](crate::model::RecoveryGroupOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) cells: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) recovery_group_arn: std::option::Option<std::string::String>,
        pub(crate) recovery_group_name: std::option::Option<std::string::String>,
        pub(crate) tags: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    }
    impl Builder {
        pub fn cells(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.cells.unwrap_or_default();
            v.push(input.into());
            self.cells = Some(v);
            self
        }
        pub fn set_cells(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.cells = input;
            self
        }
        /// The arn for the RecoveryGroup
        pub fn recovery_group_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.recovery_group_arn = Some(input.into());
            self
        }
        pub fn set_recovery_group_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.recovery_group_arn = input;
            self
        }
        /// The name of the RecoveryGroup
        pub fn recovery_group_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.recovery_group_name = Some(input.into());
            self
        }
        pub fn set_recovery_group_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.recovery_group_name = input;
            self
        }
        pub fn tags(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            let mut hash_map = self.tags.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.tags = Some(hash_map);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.tags = input;
            self
        }
        /// Consumes the builder and constructs a [`RecoveryGroupOutput`](crate::model::RecoveryGroupOutput)
        pub fn build(self) -> crate::model::RecoveryGroupOutput {
            crate::model::RecoveryGroupOutput {
                cells: self.cells,
                recovery_group_arn: self.recovery_group_arn,
                recovery_group_name: self.recovery_group_name,
                tags: self.tags,
            }
        }
    }
}
impl RecoveryGroupOutput {
    /// Creates a new builder-style object to manufacture [`RecoveryGroupOutput`](crate::model::RecoveryGroupOutput)
    pub fn builder() -> crate::model::recovery_group_output::Builder {
        crate::model::recovery_group_output::Builder::default()
    }
}

/// A resource used for checking the readiness of a Resource Set
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ReadinessCheckOutput {
    /// Arn associated with ReadinessCheck
    pub readiness_check_arn: std::option::Option<std::string::String>,
    /// Name for a ReadinessCheck
    pub readiness_check_name: std::option::Option<std::string::String>,
    /// Name of the ResourceSet to be checked
    pub resource_set: std::option::Option<std::string::String>,
    /// A collection of tags associated with a resource
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl std::fmt::Debug for ReadinessCheckOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ReadinessCheckOutput");
        formatter.field("readiness_check_arn", &self.readiness_check_arn);
        formatter.field("readiness_check_name", &self.readiness_check_name);
        formatter.field("resource_set", &self.resource_set);
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
/// See [`ReadinessCheckOutput`](crate::model::ReadinessCheckOutput)
pub mod readiness_check_output {
    /// A builder for [`ReadinessCheckOutput`](crate::model::ReadinessCheckOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) readiness_check_arn: std::option::Option<std::string::String>,
        pub(crate) readiness_check_name: std::option::Option<std::string::String>,
        pub(crate) resource_set: std::option::Option<std::string::String>,
        pub(crate) tags: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    }
    impl Builder {
        /// Arn associated with ReadinessCheck
        pub fn readiness_check_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.readiness_check_arn = Some(input.into());
            self
        }
        pub fn set_readiness_check_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.readiness_check_arn = input;
            self
        }
        /// Name for a ReadinessCheck
        pub fn readiness_check_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.readiness_check_name = Some(input.into());
            self
        }
        pub fn set_readiness_check_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.readiness_check_name = input;
            self
        }
        /// Name of the ResourceSet to be checked
        pub fn resource_set(mut self, input: impl Into<std::string::String>) -> Self {
            self.resource_set = Some(input.into());
            self
        }
        pub fn set_resource_set(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.resource_set = input;
            self
        }
        pub fn tags(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            let mut hash_map = self.tags.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.tags = Some(hash_map);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.tags = input;
            self
        }
        /// Consumes the builder and constructs a [`ReadinessCheckOutput`](crate::model::ReadinessCheckOutput)
        pub fn build(self) -> crate::model::ReadinessCheckOutput {
            crate::model::ReadinessCheckOutput {
                readiness_check_arn: self.readiness_check_arn,
                readiness_check_name: self.readiness_check_name,
                resource_set: self.resource_set,
                tags: self.tags,
            }
        }
    }
}
impl ReadinessCheckOutput {
    /// Creates a new builder-style object to manufacture [`ReadinessCheckOutput`](crate::model::ReadinessCheckOutput)
    pub fn builder() -> crate::model::readiness_check_output::Builder {
        crate::model::readiness_check_output::Builder::default()
    }
}

/// A Cell and its properties
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CellOutput {
    /// The arn for the Cell
    pub cell_arn: std::option::Option<std::string::String>,
    /// The name of the Cell
    pub cell_name: std::option::Option<std::string::String>,
    /// A list of Cell arns
    pub cells: std::option::Option<std::vec::Vec<std::string::String>>,
    /// A list of Cell ARNs and/or RecoveryGroup ARNs
    pub parent_readiness_scopes: std::option::Option<std::vec::Vec<std::string::String>>,
    /// A collection of tags associated with a resource
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl std::fmt::Debug for CellOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CellOutput");
        formatter.field("cell_arn", &self.cell_arn);
        formatter.field("cell_name", &self.cell_name);
        formatter.field("cells", &self.cells);
        formatter.field("parent_readiness_scopes", &self.parent_readiness_scopes);
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
/// See [`CellOutput`](crate::model::CellOutput)
pub mod cell_output {
    /// A builder for [`CellOutput`](crate::model::CellOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) cell_arn: std::option::Option<std::string::String>,
        pub(crate) cell_name: std::option::Option<std::string::String>,
        pub(crate) cells: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) parent_readiness_scopes: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) tags: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    }
    impl Builder {
        /// The arn for the Cell
        pub fn cell_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.cell_arn = Some(input.into());
            self
        }
        pub fn set_cell_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.cell_arn = input;
            self
        }
        /// The name of the Cell
        pub fn cell_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.cell_name = Some(input.into());
            self
        }
        pub fn set_cell_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.cell_name = input;
            self
        }
        pub fn cells(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.cells.unwrap_or_default();
            v.push(input.into());
            self.cells = Some(v);
            self
        }
        pub fn set_cells(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.cells = input;
            self
        }
        pub fn parent_readiness_scopes(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.parent_readiness_scopes.unwrap_or_default();
            v.push(input.into());
            self.parent_readiness_scopes = Some(v);
            self
        }
        pub fn set_parent_readiness_scopes(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.parent_readiness_scopes = input;
            self
        }
        pub fn tags(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            let mut hash_map = self.tags.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.tags = Some(hash_map);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.tags = input;
            self
        }
        /// Consumes the builder and constructs a [`CellOutput`](crate::model::CellOutput)
        pub fn build(self) -> crate::model::CellOutput {
            crate::model::CellOutput {
                cell_arn: self.cell_arn,
                cell_name: self.cell_name,
                cells: self.cells,
                parent_readiness_scopes: self.parent_readiness_scopes,
                tags: self.tags,
            }
        }
    }
}
impl CellOutput {
    /// Creates a new builder-style object to manufacture [`CellOutput`](crate::model::CellOutput)
    pub fn builder() -> crate::model::cell_output::Builder {
        crate::model::cell_output::Builder::default()
    }
}

/// Summary of ReadinessCheck status, paginated in GetRecoveryGroupReadinessSummary and GetCellReadinessSummary
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ReadinessCheckSummary {
    /// The readiness of this ReadinessCheck
    pub readiness: std::option::Option<crate::model::Readiness>,
    /// The name of a ReadinessCheck which is part of the given RecoveryGroup or Cell
    pub readiness_check_name: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ReadinessCheckSummary {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ReadinessCheckSummary");
        formatter.field("readiness", &self.readiness);
        formatter.field("readiness_check_name", &self.readiness_check_name);
        formatter.finish()
    }
}
/// See [`ReadinessCheckSummary`](crate::model::ReadinessCheckSummary)
pub mod readiness_check_summary {
    /// A builder for [`ReadinessCheckSummary`](crate::model::ReadinessCheckSummary)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) readiness: std::option::Option<crate::model::Readiness>,
        pub(crate) readiness_check_name: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// The readiness of this ReadinessCheck
        pub fn readiness(mut self, input: crate::model::Readiness) -> Self {
            self.readiness = Some(input);
            self
        }
        pub fn set_readiness(
            mut self,
            input: std::option::Option<crate::model::Readiness>,
        ) -> Self {
            self.readiness = input;
            self
        }
        /// The name of a ReadinessCheck which is part of the given RecoveryGroup or Cell
        pub fn readiness_check_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.readiness_check_name = Some(input.into());
            self
        }
        pub fn set_readiness_check_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.readiness_check_name = input;
            self
        }
        /// Consumes the builder and constructs a [`ReadinessCheckSummary`](crate::model::ReadinessCheckSummary)
        pub fn build(self) -> crate::model::ReadinessCheckSummary {
            crate::model::ReadinessCheckSummary {
                readiness: self.readiness,
                readiness_check_name: self.readiness_check_name,
            }
        }
    }
}
impl ReadinessCheckSummary {
    /// Creates a new builder-style object to manufacture [`ReadinessCheckSummary`](crate::model::ReadinessCheckSummary)
    pub fn builder() -> crate::model::readiness_check_summary::Builder {
        crate::model::readiness_check_summary::Builder::default()
    }
}

/// The readiness of an entire ReadinessCheck or an individual resource ARN.
///
/// **NOTE:** `Readiness::Unknown` has been renamed to `::UnknownValue`.
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum Readiness {
    NotAuthorized,
    NotReady,
    Ready,
    /// **NOTE:** `::Unknown` has been renamed to `::UnknownValue`.
    UnknownValue,
    /// Unknown contains new variants that have been added since this code was generated.
    Unknown(String),
}
impl std::convert::From<&str> for Readiness {
    fn from(s: &str) -> Self {
        match s {
            "NOT_AUTHORIZED" => Readiness::NotAuthorized,
            "NOT_READY" => Readiness::NotReady,
            "READY" => Readiness::Ready,
            "UNKNOWN" => Readiness::UnknownValue,
            other => Readiness::Unknown(other.to_owned()),
        }
    }
}
impl std::str::FromStr for Readiness {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(Readiness::from(s))
    }
}
impl Readiness {
    pub fn as_str(&self) -> &str {
        match self {
            Readiness::NotAuthorized => "NOT_AUTHORIZED",
            Readiness::NotReady => "NOT_READY",
            Readiness::Ready => "READY",
            Readiness::UnknownValue => "UNKNOWN",
            Readiness::Unknown(s) => s.as_ref(),
        }
    }
    pub fn values() -> &'static [&'static str] {
        &["NOT_AUTHORIZED", "NOT_READY", "READY", "UNKNOWN"]
    }
}
impl AsRef<str> for Readiness {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}

/// Result with status for an individual resource.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ResourceResult {
    /// The component id of the resource
    pub component_id: std::option::Option<std::string::String>,
    /// The time the resource was last checked for readiness, in ISO-8601 format, UTC.
    pub last_checked_timestamp: std::option::Option<smithy_types::Instant>,
    /// The readiness of the resource.
    pub readiness: std::option::Option<crate::model::Readiness>,
    /// The ARN of the resource
    pub resource_arn: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ResourceResult {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ResourceResult");
        formatter.field("component_id", &self.component_id);
        formatter.field("last_checked_timestamp", &self.last_checked_timestamp);
        formatter.field("readiness", &self.readiness);
        formatter.field("resource_arn", &self.resource_arn);
        formatter.finish()
    }
}
/// See [`ResourceResult`](crate::model::ResourceResult)
pub mod resource_result {
    /// A builder for [`ResourceResult`](crate::model::ResourceResult)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) component_id: std::option::Option<std::string::String>,
        pub(crate) last_checked_timestamp: std::option::Option<smithy_types::Instant>,
        pub(crate) readiness: std::option::Option<crate::model::Readiness>,
        pub(crate) resource_arn: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// The component id of the resource
        pub fn component_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.component_id = Some(input.into());
            self
        }
        pub fn set_component_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.component_id = input;
            self
        }
        /// The time the resource was last checked for readiness, in ISO-8601 format, UTC.
        pub fn last_checked_timestamp(mut self, input: smithy_types::Instant) -> Self {
            self.last_checked_timestamp = Some(input);
            self
        }
        pub fn set_last_checked_timestamp(
            mut self,
            input: std::option::Option<smithy_types::Instant>,
        ) -> Self {
            self.last_checked_timestamp = input;
            self
        }
        /// The readiness of the resource.
        pub fn readiness(mut self, input: crate::model::Readiness) -> Self {
            self.readiness = Some(input);
            self
        }
        pub fn set_readiness(
            mut self,
            input: std::option::Option<crate::model::Readiness>,
        ) -> Self {
            self.readiness = input;
            self
        }
        /// The ARN of the resource
        pub fn resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.resource_arn = Some(input.into());
            self
        }
        pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.resource_arn = input;
            self
        }
        /// Consumes the builder and constructs a [`ResourceResult`](crate::model::ResourceResult)
        pub fn build(self) -> crate::model::ResourceResult {
            crate::model::ResourceResult {
                component_id: self.component_id,
                last_checked_timestamp: self.last_checked_timestamp,
                readiness: self.readiness,
                resource_arn: self.resource_arn,
            }
        }
    }
}
impl ResourceResult {
    /// Creates a new builder-style object to manufacture [`ResourceResult`](crate::model::ResourceResult)
    pub fn builder() -> crate::model::resource_result::Builder {
        crate::model::resource_result::Builder::default()
    }
}

/// Information relating to readiness check status
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct Message {
    /// The text of a readiness check message
    pub message_text: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for Message {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("Message");
        formatter.field("message_text", &self.message_text);
        formatter.finish()
    }
}
/// See [`Message`](crate::model::Message)
pub mod message {
    /// A builder for [`Message`](crate::model::Message)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message_text: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// The text of a readiness check message
        pub fn message_text(mut self, input: impl Into<std::string::String>) -> Self {
            self.message_text = Some(input.into());
            self
        }
        pub fn set_message_text(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message_text = input;
            self
        }
        /// Consumes the builder and constructs a [`Message`](crate::model::Message)
        pub fn build(self) -> crate::model::Message {
            crate::model::Message {
                message_text: self.message_text,
            }
        }
    }
}
impl Message {
    /// Creates a new builder-style object to manufacture [`Message`](crate::model::Message)
    pub fn builder() -> crate::model::message::Builder {
        crate::model::message::Builder::default()
    }
}

/// Result with status for an individual rule..
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct RuleResult {
    /// The time the resource was last checked for readiness, in ISO-8601 format, UTC.
    pub last_checked_timestamp: std::option::Option<smithy_types::Instant>,
    /// Details about the resource's readiness
    pub messages: std::option::Option<std::vec::Vec<crate::model::Message>>,
    /// The readiness at rule level.
    pub readiness: std::option::Option<crate::model::Readiness>,
    /// The identifier of the rule.
    pub rule_id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for RuleResult {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("RuleResult");
        formatter.field("last_checked_timestamp", &self.last_checked_timestamp);
        formatter.field("messages", &self.messages);
        formatter.field("readiness", &self.readiness);
        formatter.field("rule_id", &self.rule_id);
        formatter.finish()
    }
}
/// See [`RuleResult`](crate::model::RuleResult)
pub mod rule_result {
    /// A builder for [`RuleResult`](crate::model::RuleResult)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) last_checked_timestamp: std::option::Option<smithy_types::Instant>,
        pub(crate) messages: std::option::Option<std::vec::Vec<crate::model::Message>>,
        pub(crate) readiness: std::option::Option<crate::model::Readiness>,
        pub(crate) rule_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// The time the resource was last checked for readiness, in ISO-8601 format, UTC.
        pub fn last_checked_timestamp(mut self, input: smithy_types::Instant) -> Self {
            self.last_checked_timestamp = Some(input);
            self
        }
        pub fn set_last_checked_timestamp(
            mut self,
            input: std::option::Option<smithy_types::Instant>,
        ) -> Self {
            self.last_checked_timestamp = input;
            self
        }
        pub fn messages(mut self, input: impl Into<crate::model::Message>) -> Self {
            let mut v = self.messages.unwrap_or_default();
            v.push(input.into());
            self.messages = Some(v);
            self
        }
        pub fn set_messages(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Message>>,
        ) -> Self {
            self.messages = input;
            self
        }
        /// The readiness at rule level.
        pub fn readiness(mut self, input: crate::model::Readiness) -> Self {
            self.readiness = Some(input);
            self
        }
        pub fn set_readiness(
            mut self,
            input: std::option::Option<crate::model::Readiness>,
        ) -> Self {
            self.readiness = input;
            self
        }
        /// The identifier of the rule.
        pub fn rule_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.rule_id = Some(input.into());
            self
        }
        pub fn set_rule_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.rule_id = input;
            self
        }
        /// Consumes the builder and constructs a [`RuleResult`](crate::model::RuleResult)
        pub fn build(self) -> crate::model::RuleResult {
            crate::model::RuleResult {
                last_checked_timestamp: self.last_checked_timestamp,
                messages: self.messages,
                readiness: self.readiness,
                rule_id: self.rule_id,
            }
        }
    }
}
impl RuleResult {
    /// Creates a new builder-style object to manufacture [`RuleResult`](crate::model::RuleResult)
    pub fn builder() -> crate::model::rule_result::Builder {
        crate::model::rule_result::Builder::default()
    }
}

/// Guidance for improving Recovery Group resilliancy
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct Recommendation {
    /// Guidance text for recommendation
    pub recommendation_text: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for Recommendation {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("Recommendation");
        formatter.field("recommendation_text", &self.recommendation_text);
        formatter.finish()
    }
}
/// See [`Recommendation`](crate::model::Recommendation)
pub mod recommendation {
    /// A builder for [`Recommendation`](crate::model::Recommendation)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) recommendation_text: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Guidance text for recommendation
        pub fn recommendation_text(mut self, input: impl Into<std::string::String>) -> Self {
            self.recommendation_text = Some(input.into());
            self
        }
        pub fn set_recommendation_text(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.recommendation_text = input;
            self
        }
        /// Consumes the builder and constructs a [`Recommendation`](crate::model::Recommendation)
        pub fn build(self) -> crate::model::Recommendation {
            crate::model::Recommendation {
                recommendation_text: self.recommendation_text,
            }
        }
    }
}
impl Recommendation {
    /// Creates a new builder-style object to manufacture [`Recommendation`](crate::model::Recommendation)
    pub fn builder() -> crate::model::recommendation::Builder {
        crate::model::recommendation::Builder::default()
    }
}
