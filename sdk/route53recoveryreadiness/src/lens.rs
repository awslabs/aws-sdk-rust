// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_get_cell_readiness_summary_output_next_token(
    input: &crate::operation::get_cell_readiness_summary::GetCellReadinessSummaryOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_get_readiness_check_resource_status_output_next_token(
    input: &crate::operation::get_readiness_check_resource_status::GetReadinessCheckResourceStatusOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_get_readiness_check_status_output_next_token(
    input: &crate::operation::get_readiness_check_status::GetReadinessCheckStatusOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_get_recovery_group_readiness_summary_output_next_token(
    input: &crate::operation::get_recovery_group_readiness_summary::GetRecoveryGroupReadinessSummaryOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_cells_output_next_token(
    input: &crate::operation::list_cells::ListCellsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_cross_account_authorizations_output_next_token(
    input: &crate::operation::list_cross_account_authorizations::ListCrossAccountAuthorizationsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_readiness_checks_output_next_token(
    input: &crate::operation::list_readiness_checks::ListReadinessChecksOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_recovery_groups_output_next_token(
    input: &crate::operation::list_recovery_groups::ListRecoveryGroupsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_resource_sets_output_next_token(
    input: &crate::operation::list_resource_sets::ListResourceSetsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_rules_output_next_token(
    input: &crate::operation::list_rules::ListRulesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_get_cell_readiness_summary_output_readiness_checks(
    input: crate::operation::get_cell_readiness_summary::GetCellReadinessSummaryOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ReadinessCheckSummary>> {
    let input = match input.readiness_checks {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_get_readiness_check_resource_status_output_rules(
    input: crate::operation::get_readiness_check_resource_status::GetReadinessCheckResourceStatusOutput,
) -> std::option::Option<std::vec::Vec<crate::types::RuleResult>> {
    let input = match input.rules {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_get_readiness_check_status_output_resources(
    input: crate::operation::get_readiness_check_status::GetReadinessCheckStatusOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ResourceResult>> {
    let input = match input.resources {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_get_recovery_group_readiness_summary_output_readiness_checks(
    input: crate::operation::get_recovery_group_readiness_summary::GetRecoveryGroupReadinessSummaryOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ReadinessCheckSummary>> {
    let input = match input.readiness_checks {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_cells_output_cells(
    input: crate::operation::list_cells::ListCellsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::CellOutput>> {
    let input = match input.cells {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_cross_account_authorizations_output_cross_account_authorizations(
    input: crate::operation::list_cross_account_authorizations::ListCrossAccountAuthorizationsOutput,
) -> std::option::Option<std::vec::Vec<std::string::String>> {
    let input = match input.cross_account_authorizations {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_readiness_checks_output_readiness_checks(
    input: crate::operation::list_readiness_checks::ListReadinessChecksOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ReadinessCheckOutput>> {
    let input = match input.readiness_checks {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_recovery_groups_output_recovery_groups(
    input: crate::operation::list_recovery_groups::ListRecoveryGroupsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::RecoveryGroupOutput>> {
    let input = match input.recovery_groups {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_resource_sets_output_resource_sets(
    input: crate::operation::list_resource_sets::ListResourceSetsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ResourceSetOutput>> {
    let input = match input.resource_sets {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_rules_output_rules(
    input: crate::operation::list_rules::ListRulesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ListRulesOutput>> {
    let input = match input.rules {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
