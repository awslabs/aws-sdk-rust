// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_structure_crate_output_get_channel_schedule_output_next_token(
    input: &crate::output::GetChannelScheduleOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_alerts_output_next_token(
    input: &crate::output::ListAlertsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_channels_output_next_token(
    input: &crate::output::ListChannelsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_playback_configurations_output_next_token(
    input: &crate::output::ListPlaybackConfigurationsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_prefetch_schedules_output_next_token(
    input: &crate::output::ListPrefetchSchedulesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_source_locations_output_next_token(
    input: &crate::output::ListSourceLocationsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_vod_sources_output_next_token(
    input: &crate::output::ListVodSourcesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_get_channel_schedule_output_items(
    input: crate::output::GetChannelScheduleOutput,
) -> std::option::Option<std::vec::Vec<crate::model::ScheduleEntry>> {
    let input = match input.items {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_alerts_output_items(
    input: crate::output::ListAlertsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::Alert>> {
    let input = match input.items {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_channels_output_items(
    input: crate::output::ListChannelsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::Channel>> {
    let input = match input.items {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_playback_configurations_output_items(
    input: crate::output::ListPlaybackConfigurationsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::PlaybackConfiguration>> {
    let input = match input.items {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_prefetch_schedules_output_items(
    input: crate::output::ListPrefetchSchedulesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::PrefetchSchedule>> {
    let input = match input.items {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_source_locations_output_items(
    input: crate::output::ListSourceLocationsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::SourceLocation>> {
    let input = match input.items {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_vod_sources_output_items(
    input: crate::output::ListVodSourcesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::VodSource>> {
    let input = match input.items {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
