// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_get_channel_schedule_output_next_token(
    input: &crate::operation::get_channel_schedule::GetChannelScheduleOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_alerts_output_next_token(
    input: &crate::operation::list_alerts::ListAlertsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_channels_output_next_token(
    input: &crate::operation::list_channels::ListChannelsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_live_sources_output_next_token(
    input: &crate::operation::list_live_sources::ListLiveSourcesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_playback_configurations_output_next_token(
    input: &crate::operation::list_playback_configurations::ListPlaybackConfigurationsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_prefetch_schedules_output_next_token(
    input: &crate::operation::list_prefetch_schedules::ListPrefetchSchedulesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_source_locations_output_next_token(
    input: &crate::operation::list_source_locations::ListSourceLocationsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_vod_sources_output_next_token(
    input: &crate::operation::list_vod_sources::ListVodSourcesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_get_channel_schedule_output_items(
    input: crate::operation::get_channel_schedule::GetChannelScheduleOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ScheduleEntry>> {
    let input = match input.items {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_alerts_output_items(
    input: crate::operation::list_alerts::ListAlertsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::Alert>> {
    let input = match input.items {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_channels_output_items(
    input: crate::operation::list_channels::ListChannelsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::Channel>> {
    let input = match input.items {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_live_sources_output_items(
    input: crate::operation::list_live_sources::ListLiveSourcesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::LiveSource>> {
    let input = match input.items {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_playback_configurations_output_items(
    input: crate::operation::list_playback_configurations::ListPlaybackConfigurationsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::PlaybackConfiguration>> {
    let input = match input.items {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_prefetch_schedules_output_items(
    input: crate::operation::list_prefetch_schedules::ListPrefetchSchedulesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::PrefetchSchedule>> {
    let input = match input.items {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_source_locations_output_items(
    input: crate::operation::list_source_locations::ListSourceLocationsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::SourceLocation>> {
    let input = match input.items {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_vod_sources_output_items(
    input: crate::operation::list_vod_sources::ListVodSourcesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::VodSource>> {
    let input = match input.items {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
