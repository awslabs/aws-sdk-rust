// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateSourceLocation`](crate::operation::create_source_location::builders::CreateSourceLocationFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`access_configuration(AccessConfiguration)`](crate::operation::create_source_location::builders::CreateSourceLocationFluentBuilder::access_configuration) / [`set_access_configuration(Option<AccessConfiguration>)`](crate::operation::create_source_location::builders::CreateSourceLocationFluentBuilder::set_access_configuration): <p>Access configuration parameters. Configures the type of authentication used to access content from your source location.</p>
    ///   - [`default_segment_delivery_configuration(DefaultSegmentDeliveryConfiguration)`](crate::operation::create_source_location::builders::CreateSourceLocationFluentBuilder::default_segment_delivery_configuration) / [`set_default_segment_delivery_configuration(Option<DefaultSegmentDeliveryConfiguration>)`](crate::operation::create_source_location::builders::CreateSourceLocationFluentBuilder::set_default_segment_delivery_configuration): <p>The optional configuration for the server that serves segments.</p>
    ///   - [`http_configuration(HttpConfiguration)`](crate::operation::create_source_location::builders::CreateSourceLocationFluentBuilder::http_configuration) / [`set_http_configuration(Option<HttpConfiguration>)`](crate::operation::create_source_location::builders::CreateSourceLocationFluentBuilder::set_http_configuration): <p>The source's HTTP package configurations.</p>
    ///   - [`segment_delivery_configurations(Vec<SegmentDeliveryConfiguration>)`](crate::operation::create_source_location::builders::CreateSourceLocationFluentBuilder::segment_delivery_configurations) / [`set_segment_delivery_configurations(Option<Vec<SegmentDeliveryConfiguration>>)`](crate::operation::create_source_location::builders::CreateSourceLocationFluentBuilder::set_segment_delivery_configurations): <p>A list of the segment delivery configurations associated with this resource.</p>
    ///   - [`source_location_name(impl Into<String>)`](crate::operation::create_source_location::builders::CreateSourceLocationFluentBuilder::source_location_name) / [`set_source_location_name(Option<String>)`](crate::operation::create_source_location::builders::CreateSourceLocationFluentBuilder::set_source_location_name): <p>The name associated with the source location.</p>
    ///   - [`tags(HashMap<String, String>)`](crate::operation::create_source_location::builders::CreateSourceLocationFluentBuilder::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::operation::create_source_location::builders::CreateSourceLocationFluentBuilder::set_tags): <p>The tags to assign to the source location. Tags are key-value pairs that you can associate with Amazon resources to help with organization, access control, and cost tracking. For more information, see <a href="https://docs.aws.amazon.com/mediatailor/latest/ug/tagging.html">Tagging AWS Elemental MediaTailor Resources</a>.</p>
    /// - On success, responds with [`CreateSourceLocationOutput`](crate::operation::create_source_location::CreateSourceLocationOutput) with field(s):
    ///   - [`access_configuration(Option<AccessConfiguration>)`](crate::operation::create_source_location::CreateSourceLocationOutput::access_configuration): <p>Access configuration parameters. Configures the type of authentication used to access content from your source location.</p>
    ///   - [`arn(Option<String>)`](crate::operation::create_source_location::CreateSourceLocationOutput::arn): <p>The ARN to assign to the source location.</p>
    ///   - [`creation_time(Option<DateTime>)`](crate::operation::create_source_location::CreateSourceLocationOutput::creation_time): <p>The time the source location was created.</p>
    ///   - [`default_segment_delivery_configuration(Option<DefaultSegmentDeliveryConfiguration>)`](crate::operation::create_source_location::CreateSourceLocationOutput::default_segment_delivery_configuration): <p>The optional configuration for the server that serves segments.</p>
    ///   - [`http_configuration(Option<HttpConfiguration>)`](crate::operation::create_source_location::CreateSourceLocationOutput::http_configuration): <p>The source's HTTP package configurations.</p>
    ///   - [`last_modified_time(Option<DateTime>)`](crate::operation::create_source_location::CreateSourceLocationOutput::last_modified_time): <p>The time the source location was last modified.</p>
    ///   - [`segment_delivery_configurations(Option<Vec<SegmentDeliveryConfiguration>>)`](crate::operation::create_source_location::CreateSourceLocationOutput::segment_delivery_configurations): <p>The segment delivery configurations for the source location. For information about MediaTailor configurations, see <a href="https://docs.aws.amazon.com/mediatailor/latest/ug/configurations.html">Working with configurations in AWS Elemental MediaTailor</a>.</p>
    ///   - [`source_location_name(Option<String>)`](crate::operation::create_source_location::CreateSourceLocationOutput::source_location_name): <p>The name to assign to the source location.</p>
    ///   - [`tags(Option<HashMap<String, String>>)`](crate::operation::create_source_location::CreateSourceLocationOutput::tags): <p>The tags to assign to the source location. Tags are key-value pairs that you can associate with Amazon resources to help with organization, access control, and cost tracking. For more information, see <a href="https://docs.aws.amazon.com/mediatailor/latest/ug/tagging.html">Tagging AWS Elemental MediaTailor Resources</a>.</p>
    /// - On failure, responds with [`SdkError<CreateSourceLocationError>`](crate::operation::create_source_location::CreateSourceLocationError)
    pub fn create_source_location(
        &self,
    ) -> crate::operation::create_source_location::builders::CreateSourceLocationFluentBuilder {
        crate::operation::create_source_location::builders::CreateSourceLocationFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
