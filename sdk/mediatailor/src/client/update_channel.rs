// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`UpdateChannel`](crate::operation::update_channel::builders::UpdateChannelFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`channel_name(impl Into<String>)`](crate::operation::update_channel::builders::UpdateChannelFluentBuilder::channel_name) / [`set_channel_name(Option<String>)`](crate::operation::update_channel::builders::UpdateChannelFluentBuilder::set_channel_name):<br>required: **true**<br><p>The name of the channel.</p><br>
    ///   - [`filler_slate(SlateSource)`](crate::operation::update_channel::builders::UpdateChannelFluentBuilder::filler_slate) / [`set_filler_slate(Option<SlateSource>)`](crate::operation::update_channel::builders::UpdateChannelFluentBuilder::set_filler_slate):<br>required: **false**<br><p>The slate used to fill gaps between programs in the schedule. You must configure filler slate if your channel uses the <code>LINEAR</code> <code>PlaybackMode</code>. MediaTailor doesn't support filler slate for channels using the <code>LOOP</code> <code>PlaybackMode</code>.</p><br>
    ///   - [`outputs(RequestOutputItem)`](crate::operation::update_channel::builders::UpdateChannelFluentBuilder::outputs) / [`set_outputs(Option<Vec::<RequestOutputItem>>)`](crate::operation::update_channel::builders::UpdateChannelFluentBuilder::set_outputs):<br>required: **true**<br><p>The channel's output properties.</p><br>
    /// - On success, responds with [`UpdateChannelOutput`](crate::operation::update_channel::UpdateChannelOutput) with field(s):
    ///   - [`arn(Option<String>)`](crate::operation::update_channel::UpdateChannelOutput::arn): <p>The Amazon Resource Name (ARN) associated with the channel.</p>
    ///   - [`channel_name(Option<String>)`](crate::operation::update_channel::UpdateChannelOutput::channel_name): <p>The name of the channel.</p>
    ///   - [`channel_state(Option<ChannelState>)`](crate::operation::update_channel::UpdateChannelOutput::channel_state): <p>Returns the state whether the channel is running or not.</p>
    ///   - [`creation_time(Option<DateTime>)`](crate::operation::update_channel::UpdateChannelOutput::creation_time): <p>The timestamp of when the channel was created.</p>
    ///   - [`filler_slate(Option<SlateSource>)`](crate::operation::update_channel::UpdateChannelOutput::filler_slate): <p>The slate used to fill gaps between programs in the schedule. You must configure filler slate if your channel uses the <code>LINEAR</code> <code>PlaybackMode</code>. MediaTailor doesn't support filler slate for channels using the <code>LOOP</code> <code>PlaybackMode</code>.</p>
    ///   - [`last_modified_time(Option<DateTime>)`](crate::operation::update_channel::UpdateChannelOutput::last_modified_time): <p>The timestamp that indicates when the channel was last modified.</p>
    ///   - [`outputs(Option<Vec::<ResponseOutputItem>>)`](crate::operation::update_channel::UpdateChannelOutput::outputs): <p>The channel's output properties.</p>
    ///   - [`playback_mode(Option<String>)`](crate::operation::update_channel::UpdateChannelOutput::playback_mode): <p>The type of playback mode for this channel.</p>  <p> <code>LINEAR</code> - Programs play back-to-back only once.</p>  <p> <code>LOOP</code> - Programs play back-to-back in an endless loop. When the last program in the schedule plays, playback loops back to the first program in the schedule.</p>
    ///   - [`tags(Option<HashMap::<String, String>>)`](crate::operation::update_channel::UpdateChannelOutput::tags): <p>The tags to assign to the channel. Tags are key-value pairs that you can associate with Amazon resources to help with organization, access control, and cost tracking. For more information, see <a href="https://docs.aws.amazon.com/mediatailor/latest/ug/tagging.html">Tagging AWS Elemental MediaTailor Resources</a>.</p>
    ///   - [`tier(Option<String>)`](crate::operation::update_channel::UpdateChannelOutput::tier): <p>The tier associated with this Channel.</p>
    /// - On failure, responds with [`SdkError<UpdateChannelError>`](crate::operation::update_channel::UpdateChannelError)
    pub fn update_channel(&self) -> crate::operation::update_channel::builders::UpdateChannelFluentBuilder {
        crate::operation::update_channel::builders::UpdateChannelFluentBuilder::new(self.handle.clone())
    }
}
