// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) mod shape_configure_logs_for_playback_configuration;

pub fn parse_http_error_metadata(
    response: &http::Response<bytes::Bytes>,
) -> Result<
    aws_smithy_types::error::metadata::Builder,
    aws_smithy_json::deserialize::error::DeserializeError,
> {
    crate::json_errors::parse_error_metadata(response.body(), response.headers())
}

pub(crate) mod shape_create_channel;

pub(crate) mod shape_create_live_source;

pub(crate) mod shape_create_prefetch_schedule;

pub(crate) mod shape_create_program;

pub(crate) mod shape_create_source_location;

pub(crate) mod shape_create_vod_source;

pub(crate) mod shape_delete_channel;

pub(crate) mod shape_delete_channel_policy;

pub(crate) mod shape_delete_live_source;

pub(crate) mod shape_delete_playback_configuration;

pub(crate) mod shape_delete_prefetch_schedule;

pub(crate) mod shape_delete_program;

pub(crate) mod shape_delete_source_location;

pub(crate) mod shape_delete_vod_source;

pub(crate) mod shape_describe_channel;

pub(crate) mod shape_describe_live_source;

pub(crate) mod shape_describe_program;

pub(crate) mod shape_describe_source_location;

pub(crate) mod shape_describe_vod_source;

pub(crate) mod shape_get_channel_policy;

pub(crate) mod shape_get_channel_schedule;

pub(crate) mod shape_get_playback_configuration;

pub(crate) mod shape_get_prefetch_schedule;

pub(crate) mod shape_list_alerts;

pub(crate) mod shape_list_channels;

pub(crate) mod shape_list_live_sources;

pub(crate) mod shape_list_playback_configurations;

pub(crate) mod shape_list_prefetch_schedules;

pub(crate) mod shape_list_source_locations;

pub(crate) mod shape_list_tags_for_resource;

pub(crate) mod shape_list_vod_sources;

pub(crate) mod shape_put_channel_policy;

pub(crate) mod shape_put_playback_configuration;

pub(crate) mod shape_start_channel;

pub(crate) mod shape_stop_channel;

pub(crate) mod shape_tag_resource;

pub(crate) mod shape_untag_resource;

pub(crate) mod shape_update_channel;

pub(crate) mod shape_update_live_source;

pub(crate) mod shape_update_source_location;

pub(crate) mod shape_update_vod_source;

pub(crate) fn or_empty_doc(data: &[u8]) -> &[u8] {
    if data.is_empty() {
        b"{}"
    } else {
        data
    }
}

pub(crate) mod shape_bad_request_exception;

pub(crate) mod shape_configure_logs_for_playback_configuration_input;

pub(crate) mod shape_create_channel_input;

pub(crate) mod shape_create_live_source_input;

pub(crate) mod shape_create_prefetch_schedule_input;

pub(crate) mod shape_create_program_input;

pub(crate) mod shape_create_source_location_input;

pub(crate) mod shape_create_vod_source_input;

pub(crate) mod shape_list_prefetch_schedules_input;

pub(crate) mod shape_put_channel_policy_input;

pub(crate) mod shape_put_playback_configuration_input;

pub(crate) mod shape_tag_resource_input;

pub(crate) mod shape_update_channel_input;

pub(crate) mod shape_update_live_source_input;

pub(crate) mod shape_update_source_location_input;

pub(crate) mod shape_update_vod_source_input;

#[allow(non_snake_case)]
pub(crate) mod shape___list_of_ad_break;

#[allow(non_snake_case)]
pub(crate) mod shape___list_of_alert;

#[allow(non_snake_case)]
pub(crate) mod shape___list_of_channel;

#[allow(non_snake_case)]
pub(crate) mod shape___list_of_live_source;

#[allow(non_snake_case)]
pub(crate) mod shape___list_of_playback_configuration;

#[allow(non_snake_case)]
pub(crate) mod shape___list_of_prefetch_schedule;

#[allow(non_snake_case)]
pub(crate) mod shape___list_of_schedule_entry;

#[allow(non_snake_case)]
pub(crate) mod shape___list_of_segment_delivery_configuration;

#[allow(non_snake_case)]
pub(crate) mod shape___list_of_source_location;

#[allow(non_snake_case)]
pub(crate) mod shape___list_of_vod_source;

#[allow(non_snake_case)]
pub(crate) mod shape___map_of__string;

pub(crate) mod shape_access_configuration;

pub(crate) mod shape_ad_break;

pub(crate) mod shape_avail_suppression;

pub(crate) mod shape_bumper;

pub(crate) mod shape_cdn_configuration;

pub(crate) mod shape_configuration_aliases_response;

pub(crate) mod shape_dash_configuration;

pub(crate) mod shape_dash_configuration_for_put;

pub(crate) mod shape_default_segment_delivery_configuration;

pub(crate) mod shape_hls_configuration;

pub(crate) mod shape_http_configuration;

pub(crate) mod shape_http_package_configuration;

pub(crate) mod shape_http_package_configurations;

pub(crate) mod shape_live_pre_roll_configuration;

pub(crate) mod shape_log_configuration;

pub(crate) mod shape_manifest_processing_rules;

pub(crate) mod shape_prefetch_consumption;

pub(crate) mod shape_prefetch_retrieval;

pub(crate) mod shape_request_output_item;

pub(crate) mod shape_response_outputs;

pub(crate) mod shape_schedule_configuration;

pub(crate) mod shape_segment_delivery_configuration;

pub(crate) mod shape_slate_source;

#[allow(non_snake_case)]
pub(crate) mod shape___list_of_avail_matching_criteria;

pub(crate) mod shape_ad_marker_passthrough;

pub(crate) mod shape_alert;

pub(crate) mod shape_avail_matching_criteria;

pub(crate) mod shape_channel;

pub(crate) mod shape_dash_playlist_settings;

pub(crate) mod shape_hls_playlist_settings;

pub(crate) mod shape_live_source;

pub(crate) mod shape_playback_configuration;

pub(crate) mod shape_prefetch_schedule;

pub(crate) mod shape_response_output_item;

pub(crate) mod shape_schedule_entry;

pub(crate) mod shape_secrets_manager_access_token_configuration;

pub(crate) mod shape_source_location;

pub(crate) mod shape_splice_insert_message;

pub(crate) mod shape_time_signal_message;

pub(crate) mod shape_transition;

pub(crate) mod shape_vod_source;

#[allow(non_snake_case)]
pub(crate) mod shape___list_of__string;

#[allow(non_snake_case)]
pub(crate) mod shape___list_of_schedule_ad_break;

pub(crate) mod shape_segmentation_descriptor;

pub(crate) mod shape_schedule_ad_break;

pub(crate) mod shape_segmentation_descriptor_list;
