// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ConfigureLogsForChannelInput {
    /// <p>The name of the channel.</p>
    pub channel_name: ::std::option::Option<::std::string::String>,
    /// <p>The types of logs to collect.</p>
    pub log_types: ::std::option::Option<::std::vec::Vec<crate::types::LogType>>,
}
impl ConfigureLogsForChannelInput {
    /// <p>The name of the channel.</p>
    pub fn channel_name(&self) -> ::std::option::Option<&str> {
        self.channel_name.as_deref()
    }
    /// <p>The types of logs to collect.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.log_types.is_none()`.
    pub fn log_types(&self) -> &[crate::types::LogType] {
        self.log_types.as_deref().unwrap_or_default()
    }
}
impl ConfigureLogsForChannelInput {
    /// Creates a new builder-style object to manufacture [`ConfigureLogsForChannelInput`](crate::operation::configure_logs_for_channel::ConfigureLogsForChannelInput).
    pub fn builder() -> crate::operation::configure_logs_for_channel::builders::ConfigureLogsForChannelInputBuilder {
        crate::operation::configure_logs_for_channel::builders::ConfigureLogsForChannelInputBuilder::default()
    }
}

/// A builder for [`ConfigureLogsForChannelInput`](crate::operation::configure_logs_for_channel::ConfigureLogsForChannelInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ConfigureLogsForChannelInputBuilder {
    pub(crate) channel_name: ::std::option::Option<::std::string::String>,
    pub(crate) log_types: ::std::option::Option<::std::vec::Vec<crate::types::LogType>>,
}
impl ConfigureLogsForChannelInputBuilder {
    /// <p>The name of the channel.</p>
    /// This field is required.
    pub fn channel_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.channel_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the channel.</p>
    pub fn set_channel_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.channel_name = input;
        self
    }
    /// <p>The name of the channel.</p>
    pub fn get_channel_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.channel_name
    }
    /// Appends an item to `log_types`.
    ///
    /// To override the contents of this collection use [`set_log_types`](Self::set_log_types).
    ///
    /// <p>The types of logs to collect.</p>
    pub fn log_types(mut self, input: crate::types::LogType) -> Self {
        let mut v = self.log_types.unwrap_or_default();
        v.push(input);
        self.log_types = ::std::option::Option::Some(v);
        self
    }
    /// <p>The types of logs to collect.</p>
    pub fn set_log_types(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::LogType>>) -> Self {
        self.log_types = input;
        self
    }
    /// <p>The types of logs to collect.</p>
    pub fn get_log_types(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::LogType>> {
        &self.log_types
    }
    /// Consumes the builder and constructs a [`ConfigureLogsForChannelInput`](crate::operation::configure_logs_for_channel::ConfigureLogsForChannelInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::configure_logs_for_channel::ConfigureLogsForChannelInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::configure_logs_for_channel::ConfigureLogsForChannelInput {
            channel_name: self.channel_name,
            log_types: self.log_types,
        })
    }
}
