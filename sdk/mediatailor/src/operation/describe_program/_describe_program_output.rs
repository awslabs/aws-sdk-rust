// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeProgramOutput {
    /// <p>The ad break configuration settings.</p>
    #[doc(hidden)]
    pub ad_breaks: std::option::Option<std::vec::Vec<crate::types::AdBreak>>,
    /// <p>The ARN of the program.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The name of the channel that the program belongs to.</p>
    #[doc(hidden)]
    pub channel_name: std::option::Option<std::string::String>,
    /// <p>The timestamp of when the program was created.</p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The name of the LiveSource for this Program.</p>
    #[doc(hidden)]
    pub live_source_name: std::option::Option<std::string::String>,
    /// <p>The name of the program.</p>
    #[doc(hidden)]
    pub program_name: std::option::Option<std::string::String>,
    /// <p>The date and time that the program is scheduled to start in ISO 8601 format and Coordinated Universal Time (UTC). For example, the value 2021-03-27T17:48:16.751Z represents March 27, 2021 at 17:48:16.751 UTC.</p>
    #[doc(hidden)]
    pub scheduled_start_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The source location name.</p>
    #[doc(hidden)]
    pub source_location_name: std::option::Option<std::string::String>,
    /// <p>The name that's used to refer to a VOD source.</p>
    #[doc(hidden)]
    pub vod_source_name: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeProgramOutput {
    /// <p>The ad break configuration settings.</p>
    pub fn ad_breaks(&self) -> std::option::Option<&[crate::types::AdBreak]> {
        self.ad_breaks.as_deref()
    }
    /// <p>The ARN of the program.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The name of the channel that the program belongs to.</p>
    pub fn channel_name(&self) -> std::option::Option<&str> {
        self.channel_name.as_deref()
    }
    /// <p>The timestamp of when the program was created.</p>
    pub fn creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The name of the LiveSource for this Program.</p>
    pub fn live_source_name(&self) -> std::option::Option<&str> {
        self.live_source_name.as_deref()
    }
    /// <p>The name of the program.</p>
    pub fn program_name(&self) -> std::option::Option<&str> {
        self.program_name.as_deref()
    }
    /// <p>The date and time that the program is scheduled to start in ISO 8601 format and Coordinated Universal Time (UTC). For example, the value 2021-03-27T17:48:16.751Z represents March 27, 2021 at 17:48:16.751 UTC.</p>
    pub fn scheduled_start_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.scheduled_start_time.as_ref()
    }
    /// <p>The source location name.</p>
    pub fn source_location_name(&self) -> std::option::Option<&str> {
        self.source_location_name.as_deref()
    }
    /// <p>The name that's used to refer to a VOD source.</p>
    pub fn vod_source_name(&self) -> std::option::Option<&str> {
        self.vod_source_name.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeProgramOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeProgramOutput {
    /// Creates a new builder-style object to manufacture [`DescribeProgramOutput`](crate::operation::describe_program::DescribeProgramOutput).
    pub fn builder() -> crate::operation::describe_program::builders::DescribeProgramOutputBuilder {
        crate::operation::describe_program::builders::DescribeProgramOutputBuilder::default()
    }
}

/// A builder for [`DescribeProgramOutput`](crate::operation::describe_program::DescribeProgramOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeProgramOutputBuilder {
    pub(crate) ad_breaks: std::option::Option<std::vec::Vec<crate::types::AdBreak>>,
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) channel_name: std::option::Option<std::string::String>,
    pub(crate) creation_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) live_source_name: std::option::Option<std::string::String>,
    pub(crate) program_name: std::option::Option<std::string::String>,
    pub(crate) scheduled_start_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) source_location_name: std::option::Option<std::string::String>,
    pub(crate) vod_source_name: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeProgramOutputBuilder {
    /// Appends an item to `ad_breaks`.
    ///
    /// To override the contents of this collection use [`set_ad_breaks`](Self::set_ad_breaks).
    ///
    /// <p>The ad break configuration settings.</p>
    pub fn ad_breaks(mut self, input: crate::types::AdBreak) -> Self {
        let mut v = self.ad_breaks.unwrap_or_default();
        v.push(input);
        self.ad_breaks = Some(v);
        self
    }
    /// <p>The ad break configuration settings.</p>
    pub fn set_ad_breaks(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::AdBreak>>,
    ) -> Self {
        self.ad_breaks = input;
        self
    }
    /// <p>The ARN of the program.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The ARN of the program.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The name of the channel that the program belongs to.</p>
    pub fn channel_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.channel_name = Some(input.into());
        self
    }
    /// <p>The name of the channel that the program belongs to.</p>
    pub fn set_channel_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.channel_name = input;
        self
    }
    /// <p>The timestamp of when the program was created.</p>
    pub fn creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.creation_time = Some(input);
        self
    }
    /// <p>The timestamp of when the program was created.</p>
    pub fn set_creation_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The name of the LiveSource for this Program.</p>
    pub fn live_source_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.live_source_name = Some(input.into());
        self
    }
    /// <p>The name of the LiveSource for this Program.</p>
    pub fn set_live_source_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.live_source_name = input;
        self
    }
    /// <p>The name of the program.</p>
    pub fn program_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.program_name = Some(input.into());
        self
    }
    /// <p>The name of the program.</p>
    pub fn set_program_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.program_name = input;
        self
    }
    /// <p>The date and time that the program is scheduled to start in ISO 8601 format and Coordinated Universal Time (UTC). For example, the value 2021-03-27T17:48:16.751Z represents March 27, 2021 at 17:48:16.751 UTC.</p>
    pub fn scheduled_start_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.scheduled_start_time = Some(input);
        self
    }
    /// <p>The date and time that the program is scheduled to start in ISO 8601 format and Coordinated Universal Time (UTC). For example, the value 2021-03-27T17:48:16.751Z represents March 27, 2021 at 17:48:16.751 UTC.</p>
    pub fn set_scheduled_start_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.scheduled_start_time = input;
        self
    }
    /// <p>The source location name.</p>
    pub fn source_location_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.source_location_name = Some(input.into());
        self
    }
    /// <p>The source location name.</p>
    pub fn set_source_location_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.source_location_name = input;
        self
    }
    /// <p>The name that's used to refer to a VOD source.</p>
    pub fn vod_source_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.vod_source_name = Some(input.into());
        self
    }
    /// <p>The name that's used to refer to a VOD source.</p>
    pub fn set_vod_source_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.vod_source_name = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeProgramOutput`](crate::operation::describe_program::DescribeProgramOutput).
    pub fn build(self) -> crate::operation::describe_program::DescribeProgramOutput {
        crate::operation::describe_program::DescribeProgramOutput {
            ad_breaks: self.ad_breaks,
            arn: self.arn,
            channel_name: self.channel_name,
            creation_time: self.creation_time,
            live_source_name: self.live_source_name,
            program_name: self.program_name,
            scheduled_start_time: self.scheduled_start_time,
            source_location_name: self.source_location_name,
            vod_source_name: self.vod_source_name,
            _request_id: self._request_id,
        }
    }
}
