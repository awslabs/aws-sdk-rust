// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeChannelOutput {
    /// <p>The ARN of the channel.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The name of the channel.</p>
    pub channel_name: ::std::option::Option<::std::string::String>,
    /// <p>Indicates whether the channel is in a running state or not.</p>
    pub channel_state: ::std::option::Option<crate::types::ChannelState>,
    /// <p>The timestamp of when the channel was created.</p>
    pub creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Contains information about the slate used to fill gaps between programs in the schedule.</p>
    pub filler_slate: ::std::option::Option<crate::types::SlateSource>,
    /// <p>The timestamp of when the channel was last modified.</p>
    pub last_modified_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The channel's output properties.</p>
    pub outputs: ::std::option::Option<::std::vec::Vec<crate::types::ResponseOutputItem>>,
    /// <p>The channel's playback mode.</p>
    pub playback_mode: ::std::option::Option<::std::string::String>,
    /// <p>The tags assigned to the channel. Tags are key-value pairs that you can associate with Amazon resources to help with organization, access control, and cost tracking. For more information, see <a href="https://docs.aws.amazon.com/mediatailor/latest/ug/tagging.html">Tagging AWS Elemental MediaTailor Resources</a>.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>The channel's tier.</p>
    pub tier: ::std::option::Option<::std::string::String>,
    /// <p>The log configuration for the channel.</p>
    pub log_configuration: ::std::option::Option<crate::types::LogConfigurationForChannel>,
    _request_id: Option<String>,
}
impl DescribeChannelOutput {
    /// <p>The ARN of the channel.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The name of the channel.</p>
    pub fn channel_name(&self) -> ::std::option::Option<&str> {
        self.channel_name.as_deref()
    }
    /// <p>Indicates whether the channel is in a running state or not.</p>
    pub fn channel_state(&self) -> ::std::option::Option<&crate::types::ChannelState> {
        self.channel_state.as_ref()
    }
    /// <p>The timestamp of when the channel was created.</p>
    pub fn creation_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>Contains information about the slate used to fill gaps between programs in the schedule.</p>
    pub fn filler_slate(&self) -> ::std::option::Option<&crate::types::SlateSource> {
        self.filler_slate.as_ref()
    }
    /// <p>The timestamp of when the channel was last modified.</p>
    pub fn last_modified_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_modified_time.as_ref()
    }
    /// <p>The channel's output properties.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.outputs.is_none()`.
    pub fn outputs(&self) -> &[crate::types::ResponseOutputItem] {
        self.outputs.as_deref().unwrap_or_default()
    }
    /// <p>The channel's playback mode.</p>
    pub fn playback_mode(&self) -> ::std::option::Option<&str> {
        self.playback_mode.as_deref()
    }
    /// <p>The tags assigned to the channel. Tags are key-value pairs that you can associate with Amazon resources to help with organization, access control, and cost tracking. For more information, see <a href="https://docs.aws.amazon.com/mediatailor/latest/ug/tagging.html">Tagging AWS Elemental MediaTailor Resources</a>.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
    /// <p>The channel's tier.</p>
    pub fn tier(&self) -> ::std::option::Option<&str> {
        self.tier.as_deref()
    }
    /// <p>The log configuration for the channel.</p>
    pub fn log_configuration(&self) -> ::std::option::Option<&crate::types::LogConfigurationForChannel> {
        self.log_configuration.as_ref()
    }
}
impl ::aws_http::request_id::RequestId for DescribeChannelOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeChannelOutput {
    /// Creates a new builder-style object to manufacture [`DescribeChannelOutput`](crate::operation::describe_channel::DescribeChannelOutput).
    pub fn builder() -> crate::operation::describe_channel::builders::DescribeChannelOutputBuilder {
        crate::operation::describe_channel::builders::DescribeChannelOutputBuilder::default()
    }
}

/// A builder for [`DescribeChannelOutput`](crate::operation::describe_channel::DescribeChannelOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeChannelOutputBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) channel_name: ::std::option::Option<::std::string::String>,
    pub(crate) channel_state: ::std::option::Option<crate::types::ChannelState>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) filler_slate: ::std::option::Option<crate::types::SlateSource>,
    pub(crate) last_modified_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) outputs: ::std::option::Option<::std::vec::Vec<crate::types::ResponseOutputItem>>,
    pub(crate) playback_mode: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) tier: ::std::option::Option<::std::string::String>,
    pub(crate) log_configuration: ::std::option::Option<crate::types::LogConfigurationForChannel>,
    _request_id: Option<String>,
}
impl DescribeChannelOutputBuilder {
    /// <p>The ARN of the channel.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the channel.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The ARN of the channel.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The name of the channel.</p>
    pub fn channel_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.channel_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the channel.</p>
    pub fn set_channel_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.channel_name = input;
        self
    }
    /// <p>The name of the channel.</p>
    pub fn get_channel_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.channel_name
    }
    /// <p>Indicates whether the channel is in a running state or not.</p>
    pub fn channel_state(mut self, input: crate::types::ChannelState) -> Self {
        self.channel_state = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether the channel is in a running state or not.</p>
    pub fn set_channel_state(mut self, input: ::std::option::Option<crate::types::ChannelState>) -> Self {
        self.channel_state = input;
        self
    }
    /// <p>Indicates whether the channel is in a running state or not.</p>
    pub fn get_channel_state(&self) -> &::std::option::Option<crate::types::ChannelState> {
        &self.channel_state
    }
    /// <p>The timestamp of when the channel was created.</p>
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp of when the channel was created.</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The timestamp of when the channel was created.</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// <p>Contains information about the slate used to fill gaps between programs in the schedule.</p>
    pub fn filler_slate(mut self, input: crate::types::SlateSource) -> Self {
        self.filler_slate = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains information about the slate used to fill gaps between programs in the schedule.</p>
    pub fn set_filler_slate(mut self, input: ::std::option::Option<crate::types::SlateSource>) -> Self {
        self.filler_slate = input;
        self
    }
    /// <p>Contains information about the slate used to fill gaps between programs in the schedule.</p>
    pub fn get_filler_slate(&self) -> &::std::option::Option<crate::types::SlateSource> {
        &self.filler_slate
    }
    /// <p>The timestamp of when the channel was last modified.</p>
    pub fn last_modified_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_modified_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp of when the channel was last modified.</p>
    pub fn set_last_modified_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_modified_time = input;
        self
    }
    /// <p>The timestamp of when the channel was last modified.</p>
    pub fn get_last_modified_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_modified_time
    }
    /// Appends an item to `outputs`.
    ///
    /// To override the contents of this collection use [`set_outputs`](Self::set_outputs).
    ///
    /// <p>The channel's output properties.</p>
    pub fn outputs(mut self, input: crate::types::ResponseOutputItem) -> Self {
        let mut v = self.outputs.unwrap_or_default();
        v.push(input);
        self.outputs = ::std::option::Option::Some(v);
        self
    }
    /// <p>The channel's output properties.</p>
    pub fn set_outputs(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ResponseOutputItem>>) -> Self {
        self.outputs = input;
        self
    }
    /// <p>The channel's output properties.</p>
    pub fn get_outputs(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ResponseOutputItem>> {
        &self.outputs
    }
    /// <p>The channel's playback mode.</p>
    pub fn playback_mode(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.playback_mode = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The channel's playback mode.</p>
    pub fn set_playback_mode(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.playback_mode = input;
        self
    }
    /// <p>The channel's playback mode.</p>
    pub fn get_playback_mode(&self) -> &::std::option::Option<::std::string::String> {
        &self.playback_mode
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags assigned to the channel. Tags are key-value pairs that you can associate with Amazon resources to help with organization, access control, and cost tracking. For more information, see <a href="https://docs.aws.amazon.com/mediatailor/latest/ug/tagging.html">Tagging AWS Elemental MediaTailor Resources</a>.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The tags assigned to the channel. Tags are key-value pairs that you can associate with Amazon resources to help with organization, access control, and cost tracking. For more information, see <a href="https://docs.aws.amazon.com/mediatailor/latest/ug/tagging.html">Tagging AWS Elemental MediaTailor Resources</a>.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags assigned to the channel. Tags are key-value pairs that you can associate with Amazon resources to help with organization, access control, and cost tracking. For more information, see <a href="https://docs.aws.amazon.com/mediatailor/latest/ug/tagging.html">Tagging AWS Elemental MediaTailor Resources</a>.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// <p>The channel's tier.</p>
    pub fn tier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.tier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The channel's tier.</p>
    pub fn set_tier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.tier = input;
        self
    }
    /// <p>The channel's tier.</p>
    pub fn get_tier(&self) -> &::std::option::Option<::std::string::String> {
        &self.tier
    }
    /// <p>The log configuration for the channel.</p>
    /// This field is required.
    pub fn log_configuration(mut self, input: crate::types::LogConfigurationForChannel) -> Self {
        self.log_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The log configuration for the channel.</p>
    pub fn set_log_configuration(mut self, input: ::std::option::Option<crate::types::LogConfigurationForChannel>) -> Self {
        self.log_configuration = input;
        self
    }
    /// <p>The log configuration for the channel.</p>
    pub fn get_log_configuration(&self) -> &::std::option::Option<crate::types::LogConfigurationForChannel> {
        &self.log_configuration
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeChannelOutput`](crate::operation::describe_channel::DescribeChannelOutput).
    pub fn build(self) -> crate::operation::describe_channel::DescribeChannelOutput {
        crate::operation::describe_channel::DescribeChannelOutput {
            arn: self.arn,
            channel_name: self.channel_name,
            channel_state: self.channel_state,
            creation_time: self.creation_time,
            filler_slate: self.filler_slate,
            last_modified_time: self.last_modified_time,
            outputs: self.outputs,
            playback_mode: self.playback_mode,
            tags: self.tags,
            tier: self.tier,
            log_configuration: self.log_configuration,
            _request_id: self._request_id,
        }
    }
}
