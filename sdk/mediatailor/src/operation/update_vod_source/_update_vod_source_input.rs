// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateVodSourceInput {
    /// <p>A list of HTTP package configurations for the VOD source on this account.</p>
    #[doc(hidden)]
    pub http_package_configurations:
        std::option::Option<std::vec::Vec<crate::types::HttpPackageConfiguration>>,
    /// <p>The name of the source location associated with this VOD Source.</p>
    #[doc(hidden)]
    pub source_location_name: std::option::Option<std::string::String>,
    /// <p>The name of the VOD source.</p>
    #[doc(hidden)]
    pub vod_source_name: std::option::Option<std::string::String>,
}
impl UpdateVodSourceInput {
    /// <p>A list of HTTP package configurations for the VOD source on this account.</p>
    pub fn http_package_configurations(
        &self,
    ) -> std::option::Option<&[crate::types::HttpPackageConfiguration]> {
        self.http_package_configurations.as_deref()
    }
    /// <p>The name of the source location associated with this VOD Source.</p>
    pub fn source_location_name(&self) -> std::option::Option<&str> {
        self.source_location_name.as_deref()
    }
    /// <p>The name of the VOD source.</p>
    pub fn vod_source_name(&self) -> std::option::Option<&str> {
        self.vod_source_name.as_deref()
    }
}
impl UpdateVodSourceInput {
    /// Creates a new builder-style object to manufacture [`UpdateVodSourceInput`](crate::operation::update_vod_source::UpdateVodSourceInput).
    pub fn builder() -> crate::operation::update_vod_source::builders::UpdateVodSourceInputBuilder {
        crate::operation::update_vod_source::builders::UpdateVodSourceInputBuilder::default()
    }
}

/// A builder for [`UpdateVodSourceInput`](crate::operation::update_vod_source::UpdateVodSourceInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateVodSourceInputBuilder {
    pub(crate) http_package_configurations:
        std::option::Option<std::vec::Vec<crate::types::HttpPackageConfiguration>>,
    pub(crate) source_location_name: std::option::Option<std::string::String>,
    pub(crate) vod_source_name: std::option::Option<std::string::String>,
}
impl UpdateVodSourceInputBuilder {
    /// Appends an item to `http_package_configurations`.
    ///
    /// To override the contents of this collection use [`set_http_package_configurations`](Self::set_http_package_configurations).
    ///
    /// <p>A list of HTTP package configurations for the VOD source on this account.</p>
    pub fn http_package_configurations(
        mut self,
        input: crate::types::HttpPackageConfiguration,
    ) -> Self {
        let mut v = self.http_package_configurations.unwrap_or_default();
        v.push(input);
        self.http_package_configurations = Some(v);
        self
    }
    /// <p>A list of HTTP package configurations for the VOD source on this account.</p>
    pub fn set_http_package_configurations(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::HttpPackageConfiguration>>,
    ) -> Self {
        self.http_package_configurations = input;
        self
    }
    /// <p>The name of the source location associated with this VOD Source.</p>
    pub fn source_location_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.source_location_name = Some(input.into());
        self
    }
    /// <p>The name of the source location associated with this VOD Source.</p>
    pub fn set_source_location_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.source_location_name = input;
        self
    }
    /// <p>The name of the VOD source.</p>
    pub fn vod_source_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.vod_source_name = Some(input.into());
        self
    }
    /// <p>The name of the VOD source.</p>
    pub fn set_vod_source_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.vod_source_name = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateVodSourceInput`](crate::operation::update_vod_source::UpdateVodSourceInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::update_vod_source::UpdateVodSourceInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::update_vod_source::UpdateVodSourceInput {
            http_package_configurations: self.http_package_configurations,
            source_location_name: self.source_location_name,
            vod_source_name: self.vod_source_name,
        })
    }
}
