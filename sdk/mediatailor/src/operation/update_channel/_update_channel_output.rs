// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateChannelOutput {
    /// <p>The Amazon Resource Name (ARN) associated with the channel.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The name of the channel.</p>
    #[doc(hidden)]
    pub channel_name: std::option::Option<std::string::String>,
    /// <p>Returns the state whether the channel is running or not.</p>
    #[doc(hidden)]
    pub channel_state: std::option::Option<crate::types::ChannelState>,
    /// <p>The timestamp of when the channel was created.</p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The slate used to fill gaps between programs in the schedule. You must configure filler slate if your channel uses the <code>LINEAR</code> <code>PlaybackMode</code>. MediaTailor doesn't support filler slate for channels using the <code>LOOP</code> <code>PlaybackMode</code>.</p>
    #[doc(hidden)]
    pub filler_slate: std::option::Option<crate::types::SlateSource>,
    /// <p>The timestamp that indicates when the channel was last modified.</p>
    #[doc(hidden)]
    pub last_modified_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The channel's output properties.</p>
    #[doc(hidden)]
    pub outputs: std::option::Option<std::vec::Vec<crate::types::ResponseOutputItem>>,
    /// <p>The type of playback mode for this channel.</p>
    /// <p> <code>LINEAR</code> - Programs play back-to-back only once.</p>
    /// <p> <code>LOOP</code> - Programs play back-to-back in an endless loop. When the last program in the schedule plays, playback loops back to the first program in the schedule.</p>
    #[doc(hidden)]
    pub playback_mode: std::option::Option<std::string::String>,
    /// <p>The tags to assign to the channel. Tags are key-value pairs that you can associate with Amazon resources to help with organization, access control, and cost tracking. For more information, see <a href="https://docs.aws.amazon.com/mediatailor/latest/ug/tagging.html">Tagging AWS Elemental MediaTailor Resources</a>.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>The tier associated with this Channel.</p>
    #[doc(hidden)]
    pub tier: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl UpdateChannelOutput {
    /// <p>The Amazon Resource Name (ARN) associated with the channel.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The name of the channel.</p>
    pub fn channel_name(&self) -> std::option::Option<&str> {
        self.channel_name.as_deref()
    }
    /// <p>Returns the state whether the channel is running or not.</p>
    pub fn channel_state(&self) -> std::option::Option<&crate::types::ChannelState> {
        self.channel_state.as_ref()
    }
    /// <p>The timestamp of when the channel was created.</p>
    pub fn creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The slate used to fill gaps between programs in the schedule. You must configure filler slate if your channel uses the <code>LINEAR</code> <code>PlaybackMode</code>. MediaTailor doesn't support filler slate for channels using the <code>LOOP</code> <code>PlaybackMode</code>.</p>
    pub fn filler_slate(&self) -> std::option::Option<&crate::types::SlateSource> {
        self.filler_slate.as_ref()
    }
    /// <p>The timestamp that indicates when the channel was last modified.</p>
    pub fn last_modified_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_modified_time.as_ref()
    }
    /// <p>The channel's output properties.</p>
    pub fn outputs(&self) -> std::option::Option<&[crate::types::ResponseOutputItem]> {
        self.outputs.as_deref()
    }
    /// <p>The type of playback mode for this channel.</p>
    /// <p> <code>LINEAR</code> - Programs play back-to-back only once.</p>
    /// <p> <code>LOOP</code> - Programs play back-to-back in an endless loop. When the last program in the schedule plays, playback loops back to the first program in the schedule.</p>
    pub fn playback_mode(&self) -> std::option::Option<&str> {
        self.playback_mode.as_deref()
    }
    /// <p>The tags to assign to the channel. Tags are key-value pairs that you can associate with Amazon resources to help with organization, access control, and cost tracking. For more information, see <a href="https://docs.aws.amazon.com/mediatailor/latest/ug/tagging.html">Tagging AWS Elemental MediaTailor Resources</a>.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
    /// <p>The tier associated with this Channel.</p>
    pub fn tier(&self) -> std::option::Option<&str> {
        self.tier.as_deref()
    }
}
impl aws_http::request_id::RequestId for UpdateChannelOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateChannelOutput {
    /// Creates a new builder-style object to manufacture [`UpdateChannelOutput`](crate::operation::update_channel::UpdateChannelOutput).
    pub fn builder() -> crate::operation::update_channel::builders::UpdateChannelOutputBuilder {
        crate::operation::update_channel::builders::UpdateChannelOutputBuilder::default()
    }
}

/// A builder for [`UpdateChannelOutput`](crate::operation::update_channel::UpdateChannelOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateChannelOutputBuilder {
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) channel_name: std::option::Option<std::string::String>,
    pub(crate) channel_state: std::option::Option<crate::types::ChannelState>,
    pub(crate) creation_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) filler_slate: std::option::Option<crate::types::SlateSource>,
    pub(crate) last_modified_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) outputs: std::option::Option<std::vec::Vec<crate::types::ResponseOutputItem>>,
    pub(crate) playback_mode: std::option::Option<std::string::String>,
    pub(crate) tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) tier: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl UpdateChannelOutputBuilder {
    /// <p>The Amazon Resource Name (ARN) associated with the channel.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) associated with the channel.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The name of the channel.</p>
    pub fn channel_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.channel_name = Some(input.into());
        self
    }
    /// <p>The name of the channel.</p>
    pub fn set_channel_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.channel_name = input;
        self
    }
    /// <p>Returns the state whether the channel is running or not.</p>
    pub fn channel_state(mut self, input: crate::types::ChannelState) -> Self {
        self.channel_state = Some(input);
        self
    }
    /// <p>Returns the state whether the channel is running or not.</p>
    pub fn set_channel_state(
        mut self,
        input: std::option::Option<crate::types::ChannelState>,
    ) -> Self {
        self.channel_state = input;
        self
    }
    /// <p>The timestamp of when the channel was created.</p>
    pub fn creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.creation_time = Some(input);
        self
    }
    /// <p>The timestamp of when the channel was created.</p>
    pub fn set_creation_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The slate used to fill gaps between programs in the schedule. You must configure filler slate if your channel uses the <code>LINEAR</code> <code>PlaybackMode</code>. MediaTailor doesn't support filler slate for channels using the <code>LOOP</code> <code>PlaybackMode</code>.</p>
    pub fn filler_slate(mut self, input: crate::types::SlateSource) -> Self {
        self.filler_slate = Some(input);
        self
    }
    /// <p>The slate used to fill gaps between programs in the schedule. You must configure filler slate if your channel uses the <code>LINEAR</code> <code>PlaybackMode</code>. MediaTailor doesn't support filler slate for channels using the <code>LOOP</code> <code>PlaybackMode</code>.</p>
    pub fn set_filler_slate(
        mut self,
        input: std::option::Option<crate::types::SlateSource>,
    ) -> Self {
        self.filler_slate = input;
        self
    }
    /// <p>The timestamp that indicates when the channel was last modified.</p>
    pub fn last_modified_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_modified_time = Some(input);
        self
    }
    /// <p>The timestamp that indicates when the channel was last modified.</p>
    pub fn set_last_modified_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_modified_time = input;
        self
    }
    /// Appends an item to `outputs`.
    ///
    /// To override the contents of this collection use [`set_outputs`](Self::set_outputs).
    ///
    /// <p>The channel's output properties.</p>
    pub fn outputs(mut self, input: crate::types::ResponseOutputItem) -> Self {
        let mut v = self.outputs.unwrap_or_default();
        v.push(input);
        self.outputs = Some(v);
        self
    }
    /// <p>The channel's output properties.</p>
    pub fn set_outputs(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ResponseOutputItem>>,
    ) -> Self {
        self.outputs = input;
        self
    }
    /// <p>The type of playback mode for this channel.</p>
    /// <p> <code>LINEAR</code> - Programs play back-to-back only once.</p>
    /// <p> <code>LOOP</code> - Programs play back-to-back in an endless loop. When the last program in the schedule plays, playback loops back to the first program in the schedule.</p>
    pub fn playback_mode(mut self, input: impl Into<std::string::String>) -> Self {
        self.playback_mode = Some(input.into());
        self
    }
    /// <p>The type of playback mode for this channel.</p>
    /// <p> <code>LINEAR</code> - Programs play back-to-back only once.</p>
    /// <p> <code>LOOP</code> - Programs play back-to-back in an endless loop. When the last program in the schedule plays, playback loops back to the first program in the schedule.</p>
    pub fn set_playback_mode(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.playback_mode = input;
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags to assign to the channel. Tags are key-value pairs that you can associate with Amazon resources to help with organization, access control, and cost tracking. For more information, see <a href="https://docs.aws.amazon.com/mediatailor/latest/ug/tagging.html">Tagging AWS Elemental MediaTailor Resources</a>.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = Some(hash_map);
        self
    }
    /// <p>The tags to assign to the channel. Tags are key-value pairs that you can associate with Amazon resources to help with organization, access control, and cost tracking. For more information, see <a href="https://docs.aws.amazon.com/mediatailor/latest/ug/tagging.html">Tagging AWS Elemental MediaTailor Resources</a>.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tier associated with this Channel.</p>
    pub fn tier(mut self, input: impl Into<std::string::String>) -> Self {
        self.tier = Some(input.into());
        self
    }
    /// <p>The tier associated with this Channel.</p>
    pub fn set_tier(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.tier = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`UpdateChannelOutput`](crate::operation::update_channel::UpdateChannelOutput).
    pub fn build(self) -> crate::operation::update_channel::UpdateChannelOutput {
        crate::operation::update_channel::UpdateChannelOutput {
            arn: self.arn,
            channel_name: self.channel_name,
            channel_state: self.channel_state,
            creation_time: self.creation_time,
            filler_slate: self.filler_slate,
            last_modified_time: self.last_modified_time,
            outputs: self.outputs,
            playback_mode: self.playback_mode,
            tags: self.tags,
            tier: self.tier,
            _request_id: self._request_id,
        }
    }
}
