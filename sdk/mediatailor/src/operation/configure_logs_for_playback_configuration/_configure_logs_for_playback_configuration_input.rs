// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configures Amazon CloudWatch log settings for a playback configuration.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ConfigureLogsForPlaybackConfigurationInput {
    /// <p>The percentage of session logs that MediaTailor sends to your Cloudwatch Logs account. For example, if your playback configuration has 1000 sessions and percentEnabled is set to <code>60</code>, MediaTailor sends logs for 600 of the sessions to CloudWatch Logs. MediaTailor decides at random which of the playback configuration sessions to send logs for. If you want to view logs for a specific session, you can use the <a href="https://docs.aws.amazon.com/mediatailor/latest/ug/debug-log-mode.html">debug log mode</a>.</p>
    /// <p>Valid values: <code>0</code> - <code>100</code> </p>
    #[doc(hidden)]
    pub percent_enabled: i32,
    /// <p>The name of the playback configuration.</p>
    #[doc(hidden)]
    pub playback_configuration_name: std::option::Option<std::string::String>,
}
impl ConfigureLogsForPlaybackConfigurationInput {
    /// <p>The percentage of session logs that MediaTailor sends to your Cloudwatch Logs account. For example, if your playback configuration has 1000 sessions and percentEnabled is set to <code>60</code>, MediaTailor sends logs for 600 of the sessions to CloudWatch Logs. MediaTailor decides at random which of the playback configuration sessions to send logs for. If you want to view logs for a specific session, you can use the <a href="https://docs.aws.amazon.com/mediatailor/latest/ug/debug-log-mode.html">debug log mode</a>.</p>
    /// <p>Valid values: <code>0</code> - <code>100</code> </p>
    pub fn percent_enabled(&self) -> i32 {
        self.percent_enabled
    }
    /// <p>The name of the playback configuration.</p>
    pub fn playback_configuration_name(&self) -> std::option::Option<&str> {
        self.playback_configuration_name.as_deref()
    }
}
impl ConfigureLogsForPlaybackConfigurationInput {
    /// Creates a new builder-style object to manufacture [`ConfigureLogsForPlaybackConfigurationInput`](crate::operation::configure_logs_for_playback_configuration::ConfigureLogsForPlaybackConfigurationInput).
    pub fn builder() -> crate::operation::configure_logs_for_playback_configuration::builders::ConfigureLogsForPlaybackConfigurationInputBuilder{
        crate::operation::configure_logs_for_playback_configuration::builders::ConfigureLogsForPlaybackConfigurationInputBuilder::default()
    }
}

/// A builder for [`ConfigureLogsForPlaybackConfigurationInput`](crate::operation::configure_logs_for_playback_configuration::ConfigureLogsForPlaybackConfigurationInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ConfigureLogsForPlaybackConfigurationInputBuilder {
    pub(crate) percent_enabled: std::option::Option<i32>,
    pub(crate) playback_configuration_name: std::option::Option<std::string::String>,
}
impl ConfigureLogsForPlaybackConfigurationInputBuilder {
    /// <p>The percentage of session logs that MediaTailor sends to your Cloudwatch Logs account. For example, if your playback configuration has 1000 sessions and percentEnabled is set to <code>60</code>, MediaTailor sends logs for 600 of the sessions to CloudWatch Logs. MediaTailor decides at random which of the playback configuration sessions to send logs for. If you want to view logs for a specific session, you can use the <a href="https://docs.aws.amazon.com/mediatailor/latest/ug/debug-log-mode.html">debug log mode</a>.</p>
    /// <p>Valid values: <code>0</code> - <code>100</code> </p>
    pub fn percent_enabled(mut self, input: i32) -> Self {
        self.percent_enabled = Some(input);
        self
    }
    /// <p>The percentage of session logs that MediaTailor sends to your Cloudwatch Logs account. For example, if your playback configuration has 1000 sessions and percentEnabled is set to <code>60</code>, MediaTailor sends logs for 600 of the sessions to CloudWatch Logs. MediaTailor decides at random which of the playback configuration sessions to send logs for. If you want to view logs for a specific session, you can use the <a href="https://docs.aws.amazon.com/mediatailor/latest/ug/debug-log-mode.html">debug log mode</a>.</p>
    /// <p>Valid values: <code>0</code> - <code>100</code> </p>
    pub fn set_percent_enabled(mut self, input: std::option::Option<i32>) -> Self {
        self.percent_enabled = input;
        self
    }
    /// <p>The name of the playback configuration.</p>
    pub fn playback_configuration_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.playback_configuration_name = Some(input.into());
        self
    }
    /// <p>The name of the playback configuration.</p>
    pub fn set_playback_configuration_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.playback_configuration_name = input;
        self
    }
    /// Consumes the builder and constructs a [`ConfigureLogsForPlaybackConfigurationInput`](crate::operation::configure_logs_for_playback_configuration::ConfigureLogsForPlaybackConfigurationInput).
    pub fn build(self) -> Result<crate::operation::configure_logs_for_playback_configuration::ConfigureLogsForPlaybackConfigurationInput, aws_smithy_http::operation::error::BuildError>{
        Ok(
            crate::operation::configure_logs_for_playback_configuration::ConfigureLogsForPlaybackConfigurationInput {
                percent_enabled: self.percent_enabled
                    .unwrap_or_default()
                ,
                playback_configuration_name: self.playback_configuration_name
                ,
            }
        )
    }
}
