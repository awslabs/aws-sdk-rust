// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_alternate_media(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::AlternateMedia,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.source_location_name {
        object.key("SourceLocationName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.live_source_name {
        object.key("LiveSourceName").string(var_2.as_str());
    }
    if let Some(var_3) = &input.vod_source_name {
        object.key("VodSourceName").string(var_3.as_str());
    }
    if let Some(var_4) = &input.clip_range {
        #[allow(unused_mut)]
        let mut object_5 = object.key("ClipRange").start_object();
        crate::protocol_serde::shape_clip_range::ser_clip_range(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.scheduled_start_time_millis {
        object.key("ScheduledStartTimeMillis").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_6).into()),
        );
    }
    if let Some(var_7) = &input.ad_breaks {
        let mut array_8 = object.key("AdBreaks").start_array();
        for item_9 in var_7 {
            {
                #[allow(unused_mut)]
                let mut object_10 = array_8.value().start_object();
                crate::protocol_serde::shape_ad_break::ser_ad_break(&mut object_10, item_9)?;
                object_10.finish();
            }
        }
        array_8.finish();
    }
    if let Some(var_11) = &input.duration_millis {
        object.key("DurationMillis").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_11).into()),
        );
    }
    Ok(())
}

pub(crate) fn de_alternate_media<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> ::std::result::Result<Option<crate::types::AlternateMedia>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::AlternateMediaBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "SourceLocationName" => {
                            builder = builder.set_source_location_name(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "LiveSourceName" => {
                            builder = builder.set_live_source_name(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "VodSourceName" => {
                            builder = builder.set_vod_source_name(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "ClipRange" => {
                            builder = builder.set_clip_range(crate::protocol_serde::shape_clip_range::de_clip_range(tokens)?);
                        }
                        "ScheduledStartTimeMillis" => {
                            builder = builder.set_scheduled_start_time_millis(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i64::try_from)
                                    .transpose()?,
                            );
                        }
                        "AdBreaks" => {
                            builder = builder.set_ad_breaks(crate::protocol_serde::shape_list_of_ad_break::de_list_of_ad_break(tokens)?);
                        }
                        "DurationMillis" => {
                            builder = builder.set_duration_millis(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i64::try_from)
                                    .transpose()?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {other:?}"
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
