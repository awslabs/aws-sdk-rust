// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_put_playback_configuration_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::put_playback_configuration::PutPlaybackConfigurationInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.ad_decision_server_url {
        object.key("AdDecisionServerUrl").string(var_1.as_str());
    }
    if let Some(var_2) = &input.avail_suppression {
        #[allow(unused_mut)]
        let mut object_3 = object.key("AvailSuppression").start_object();
        crate::protocol_serde::shape_avail_suppression::ser_avail_suppression(&mut object_3, var_2)?;
        object_3.finish();
    }
    if let Some(var_4) = &input.bumper {
        #[allow(unused_mut)]
        let mut object_5 = object.key("Bumper").start_object();
        crate::protocol_serde::shape_bumper::ser_bumper(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.cdn_configuration {
        #[allow(unused_mut)]
        let mut object_7 = object.key("CdnConfiguration").start_object();
        crate::protocol_serde::shape_cdn_configuration::ser_cdn_configuration(&mut object_7, var_6)?;
        object_7.finish();
    }
    if let Some(var_8) = &input.configuration_aliases {
        #[allow(unused_mut)]
        let mut object_9 = object.key("ConfigurationAliases").start_object();
        for (key_10, value_11) in var_8 {
            {
                #[allow(unused_mut)]
                let mut object_12 = object_9.key(key_10.as_str()).start_object();
                for (key_13, value_14) in value_11 {
                    {
                        object_12.key(key_13.as_str()).string(value_14.as_str());
                    }
                }
                object_12.finish();
            }
        }
        object_9.finish();
    }
    if let Some(var_15) = &input.dash_configuration {
        #[allow(unused_mut)]
        let mut object_16 = object.key("DashConfiguration").start_object();
        crate::protocol_serde::shape_dash_configuration_for_put::ser_dash_configuration_for_put(&mut object_16, var_15)?;
        object_16.finish();
    }
    if let Some(var_17) = &input.live_pre_roll_configuration {
        #[allow(unused_mut)]
        let mut object_18 = object.key("LivePreRollConfiguration").start_object();
        crate::protocol_serde::shape_live_pre_roll_configuration::ser_live_pre_roll_configuration(&mut object_18, var_17)?;
        object_18.finish();
    }
    if let Some(var_19) = &input.manifest_processing_rules {
        #[allow(unused_mut)]
        let mut object_20 = object.key("ManifestProcessingRules").start_object();
        crate::protocol_serde::shape_manifest_processing_rules::ser_manifest_processing_rules(&mut object_20, var_19)?;
        object_20.finish();
    }
    if let Some(var_21) = &input.name {
        object.key("Name").string(var_21.as_str());
    }
    if let Some(var_22) = &input.personalization_threshold_seconds {
        object.key("PersonalizationThresholdSeconds").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_22).into()),
        );
    }
    if let Some(var_23) = &input.slate_ad_url {
        object.key("SlateAdUrl").string(var_23.as_str());
    }
    if let Some(var_24) = &input.tags {
        #[allow(unused_mut)]
        let mut object_25 = object.key("tags").start_object();
        for (key_26, value_27) in var_24 {
            {
                object_25.key(key_26.as_str()).string(value_27.as_str());
            }
        }
        object_25.finish();
    }
    if let Some(var_28) = &input.transcode_profile_name {
        object.key("TranscodeProfileName").string(var_28.as_str());
    }
    if let Some(var_29) = &input.video_content_source_url {
        object.key("VideoContentSourceUrl").string(var_29.as_str());
    }
    Ok(())
}
