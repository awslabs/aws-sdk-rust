// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_channel_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_channel::CreateChannelInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.filler_slate {
        #[allow(unused_mut)]
        let mut object_2 = object.key("FillerSlate").start_object();
        crate::protocol_serde::shape_slate_source::ser_slate_source(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.outputs {
        let mut array_4 = object.key("Outputs").start_array();
        for item_5 in var_3 {
            {
                #[allow(unused_mut)]
                let mut object_6 = array_4.value().start_object();
                crate::protocol_serde::shape_request_output_item::ser_request_output_item(&mut object_6, item_5)?;
                object_6.finish();
            }
        }
        array_4.finish();
    }
    if let Some(var_7) = &input.playback_mode {
        object.key("PlaybackMode").string(var_7.as_str());
    }
    if let Some(var_8) = &input.tags {
        #[allow(unused_mut)]
        let mut object_9 = object.key("tags").start_object();
        for (key_10, value_11) in var_8 {
            {
                object_9.key(key_10.as_str()).string(value_11.as_str());
            }
        }
        object_9.finish();
    }
    if let Some(var_12) = &input.tier {
        object.key("Tier").string(var_12.as_str());
    }
    Ok(())
}
