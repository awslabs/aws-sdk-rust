// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_source_location_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_source_location::CreateSourceLocationInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.access_configuration {
        #[allow(unused_mut)]
        let mut object_2 = object.key("AccessConfiguration").start_object();
        crate::protocol_serde::shape_access_configuration::ser_access_configuration(
            &mut object_2,
            var_1,
        )?;
        object_2.finish();
    }
    if let Some(var_3) = &input.default_segment_delivery_configuration {
        #[allow(unused_mut)]
        let mut object_4 = object
            .key("DefaultSegmentDeliveryConfiguration")
            .start_object();
        crate::protocol_serde::shape_default_segment_delivery_configuration::ser_default_segment_delivery_configuration(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.http_configuration {
        #[allow(unused_mut)]
        let mut object_6 = object.key("HttpConfiguration").start_object();
        crate::protocol_serde::shape_http_configuration::ser_http_configuration(
            &mut object_6,
            var_5,
        )?;
        object_6.finish();
    }
    if let Some(var_7) = &input.segment_delivery_configurations {
        let mut array_8 = object.key("SegmentDeliveryConfigurations").start_array();
        for item_9 in var_7 {
            {
                #[allow(unused_mut)]
                let mut object_10 = array_8.value().start_object();
                crate::protocol_serde::shape_segment_delivery_configuration::ser_segment_delivery_configuration(&mut object_10, item_9)?;
                object_10.finish();
            }
        }
        array_8.finish();
    }
    if let Some(var_11) = &input.tags {
        #[allow(unused_mut)]
        let mut object_12 = object.key("tags").start_object();
        for (key_13, value_14) in var_11 {
            {
                object_12.key(key_13.as_str()).string(value_14.as_str());
            }
        }
        object_12.finish();
    }
    Ok(())
}
