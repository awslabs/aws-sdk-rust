// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn de_prefetch_retrieval<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> ::std::result::Result<Option<crate::types::PrefetchRetrieval>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::PrefetchRetrievalBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "DynamicVariables" => {
                            builder = builder.set_dynamic_variables(crate::protocol_serde::shape_map_of_string::de_map_of_string(tokens)?);
                        }
                        "EndTime" => {
                            builder = builder.set_end_time(::aws_smithy_json::deserialize::token::expect_timestamp_or_null(
                                tokens.next(),
                                ::aws_smithy_types::date_time::Format::EpochSeconds,
                            )?);
                        }
                        "StartTime" => {
                            builder = builder.set_start_time(::aws_smithy_json::deserialize::token::expect_timestamp_or_null(
                                tokens.next(),
                                ::aws_smithy_types::date_time::Format::EpochSeconds,
                            )?);
                        }
                        "TrafficShapingType" => {
                            builder = builder.set_traffic_shaping_type(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::TrafficShapingType::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "TrafficShapingRetrievalWindow" => {
                            builder = builder.set_traffic_shaping_retrieval_window(
                                crate::protocol_serde::shape_traffic_shaping_retrieval_window::de_traffic_shaping_retrieval_window(tokens)?,
                            );
                        }
                        "TrafficShapingTpsConfiguration" => {
                            builder = builder.set_traffic_shaping_tps_configuration(
                                crate::protocol_serde::shape_traffic_shaping_tps_configuration::de_traffic_shaping_tps_configuration(tokens)?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {other:?}"
                        )))
                    }
                }
            }
            Ok(Some(crate::serde_util::prefetch_retrieval_correct_errors(builder).build().map_err(
                |err| ::aws_smithy_json::deserialize::error::DeserializeError::custom_source("Response was invalid", err),
            )?))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}

pub fn ser_prefetch_retrieval(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::PrefetchRetrieval,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.dynamic_variables {
        #[allow(unused_mut)]
        let mut object_2 = object.key("DynamicVariables").start_object();
        for (key_3, value_4) in var_1 {
            {
                object_2.key(key_3.as_str()).string(value_4.as_str());
            }
        }
        object_2.finish();
    }
    {
        object
            .key("EndTime")
            .date_time(&input.end_time, ::aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_5) = &input.start_time {
        object
            .key("StartTime")
            .date_time(var_5, ::aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_6) = &input.traffic_shaping_type {
        object.key("TrafficShapingType").string(var_6.as_str());
    }
    if let Some(var_7) = &input.traffic_shaping_retrieval_window {
        #[allow(unused_mut)]
        let mut object_8 = object.key("TrafficShapingRetrievalWindow").start_object();
        crate::protocol_serde::shape_traffic_shaping_retrieval_window::ser_traffic_shaping_retrieval_window(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.traffic_shaping_tps_configuration {
        #[allow(unused_mut)]
        let mut object_10 = object.key("TrafficShapingTpsConfiguration").start_object();
        crate::protocol_serde::shape_traffic_shaping_tps_configuration::ser_traffic_shaping_tps_configuration(&mut object_10, var_9)?;
        object_10.finish();
    }
    Ok(())
}
