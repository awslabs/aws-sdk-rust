// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn configure_logs_for_playback_configuration_output_correct_errors(
    mut builder: crate::operation::configure_logs_for_playback_configuration::builders::ConfigureLogsForPlaybackConfigurationOutputBuilder,
) -> crate::operation::configure_logs_for_playback_configuration::builders::ConfigureLogsForPlaybackConfigurationOutputBuilder {
    if builder.percent_enabled.is_none() {
        builder.percent_enabled = Some(Default::default())
    }
    builder
}

pub(crate) fn describe_channel_output_correct_errors(
    mut builder: crate::operation::describe_channel::builders::DescribeChannelOutputBuilder,
) -> crate::operation::describe_channel::builders::DescribeChannelOutputBuilder {
    if builder.log_configuration.is_none() {
        builder.log_configuration = {
            let builder = crate::types::builders::LogConfigurationForChannelBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn clip_range_correct_errors(mut builder: crate::types::builders::ClipRangeBuilder) -> crate::types::builders::ClipRangeBuilder {
    if builder.end_offset_millis.is_none() {
        builder.end_offset_millis = Some(Default::default())
    }
    builder
}

pub(crate) fn http_configuration_correct_errors(
    mut builder: crate::types::builders::HttpConfigurationBuilder,
) -> crate::types::builders::HttpConfigurationBuilder {
    if builder.base_url.is_none() {
        builder.base_url = Some(Default::default())
    }
    builder
}

pub(crate) fn log_configuration_correct_errors(
    mut builder: crate::types::builders::LogConfigurationBuilder,
) -> crate::types::builders::LogConfigurationBuilder {
    if builder.percent_enabled.is_none() {
        builder.percent_enabled = Some(Default::default())
    }
    builder
}

pub(crate) fn prefetch_consumption_correct_errors(
    mut builder: crate::types::builders::PrefetchConsumptionBuilder,
) -> crate::types::builders::PrefetchConsumptionBuilder {
    if builder.end_time.is_none() {
        builder.end_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn prefetch_retrieval_correct_errors(
    mut builder: crate::types::builders::PrefetchRetrievalBuilder,
) -> crate::types::builders::PrefetchRetrievalBuilder {
    if builder.end_time.is_none() {
        builder.end_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn ad_break_opportunity_correct_errors(
    mut builder: crate::types::builders::AdBreakOpportunityBuilder,
) -> crate::types::builders::AdBreakOpportunityBuilder {
    if builder.offset_millis.is_none() {
        builder.offset_millis = Some(Default::default())
    }
    builder
}

pub(crate) fn alert_correct_errors(mut builder: crate::types::builders::AlertBuilder) -> crate::types::builders::AlertBuilder {
    if builder.alert_code.is_none() {
        builder.alert_code = Some(Default::default())
    }
    if builder.alert_message.is_none() {
        builder.alert_message = Some(Default::default())
    }
    if builder.last_modified_time.is_none() {
        builder.last_modified_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.related_resource_arns.is_none() {
        builder.related_resource_arns = Some(Default::default())
    }
    if builder.resource_arn.is_none() {
        builder.resource_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn channel_correct_errors(mut builder: crate::types::builders::ChannelBuilder) -> crate::types::builders::ChannelBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.channel_name.is_none() {
        builder.channel_name = Some(Default::default())
    }
    if builder.channel_state.is_none() {
        builder.channel_state = Some(Default::default())
    }
    if builder.outputs.is_none() {
        builder.outputs = Some(Default::default())
    }
    if builder.playback_mode.is_none() {
        builder.playback_mode = Some(Default::default())
    }
    if builder.tier.is_none() {
        builder.tier = Some(Default::default())
    }
    if builder.log_configuration.is_none() {
        builder.log_configuration = {
            let builder = crate::types::builders::LogConfigurationForChannelBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn http_package_configuration_correct_errors(
    mut builder: crate::types::builders::HttpPackageConfigurationBuilder,
) -> crate::types::builders::HttpPackageConfigurationBuilder {
    if builder.path.is_none() {
        builder.path = Some(Default::default())
    }
    if builder.source_group.is_none() {
        builder.source_group = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::Type>().ok()
    }
    builder
}

pub(crate) fn live_source_correct_errors(mut builder: crate::types::builders::LiveSourceBuilder) -> crate::types::builders::LiveSourceBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.http_package_configurations.is_none() {
        builder.http_package_configurations = Some(Default::default())
    }
    if builder.live_source_name.is_none() {
        builder.live_source_name = Some(Default::default())
    }
    if builder.source_location_name.is_none() {
        builder.source_location_name = Some(Default::default())
    }
    builder
}

pub(crate) fn prefetch_schedule_correct_errors(
    mut builder: crate::types::builders::PrefetchScheduleBuilder,
) -> crate::types::builders::PrefetchScheduleBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.consumption.is_none() {
        builder.consumption = {
            let builder = crate::types::builders::PrefetchConsumptionBuilder::default();
            crate::serde_util::prefetch_consumption_correct_errors(builder).build().ok()
        }
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.playback_configuration_name.is_none() {
        builder.playback_configuration_name = Some(Default::default())
    }
    if builder.retrieval.is_none() {
        builder.retrieval = {
            let builder = crate::types::builders::PrefetchRetrievalBuilder::default();
            crate::serde_util::prefetch_retrieval_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn response_output_item_correct_errors(
    mut builder: crate::types::builders::ResponseOutputItemBuilder,
) -> crate::types::builders::ResponseOutputItemBuilder {
    if builder.manifest_name.is_none() {
        builder.manifest_name = Some(Default::default())
    }
    if builder.playback_url.is_none() {
        builder.playback_url = Some(Default::default())
    }
    if builder.source_group.is_none() {
        builder.source_group = Some(Default::default())
    }
    builder
}

pub(crate) fn schedule_entry_correct_errors(
    mut builder: crate::types::builders::ScheduleEntryBuilder,
) -> crate::types::builders::ScheduleEntryBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.channel_name.is_none() {
        builder.channel_name = Some(Default::default())
    }
    if builder.program_name.is_none() {
        builder.program_name = Some(Default::default())
    }
    if builder.source_location_name.is_none() {
        builder.source_location_name = Some(Default::default())
    }
    builder
}

pub(crate) fn source_location_correct_errors(
    mut builder: crate::types::builders::SourceLocationBuilder,
) -> crate::types::builders::SourceLocationBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.http_configuration.is_none() {
        builder.http_configuration = {
            let builder = crate::types::builders::HttpConfigurationBuilder::default();
            crate::serde_util::http_configuration_correct_errors(builder).build().ok()
        }
    }
    if builder.source_location_name.is_none() {
        builder.source_location_name = Some(Default::default())
    }
    builder
}

pub(crate) fn vod_source_correct_errors(mut builder: crate::types::builders::VodSourceBuilder) -> crate::types::builders::VodSourceBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.http_package_configurations.is_none() {
        builder.http_package_configurations = Some(Default::default())
    }
    if builder.source_location_name.is_none() {
        builder.source_location_name = Some(Default::default())
    }
    if builder.vod_source_name.is_none() {
        builder.vod_source_name = Some(Default::default())
    }
    builder
}

pub(crate) fn avail_matching_criteria_correct_errors(
    mut builder: crate::types::builders::AvailMatchingCriteriaBuilder,
) -> crate::types::builders::AvailMatchingCriteriaBuilder {
    if builder.dynamic_variable.is_none() {
        builder.dynamic_variable = Some(Default::default())
    }
    if builder.operator.is_none() {
        builder.operator = "no value was set".parse::<crate::types::Operator>().ok()
    }
    builder
}

pub(crate) fn key_value_pair_correct_errors(mut builder: crate::types::builders::KeyValuePairBuilder) -> crate::types::builders::KeyValuePairBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}
