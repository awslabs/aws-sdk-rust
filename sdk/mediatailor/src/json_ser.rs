// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_create_channel_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateChannelInput,
) {
    if let Some(var_1) = &input.outputs {
        let mut array_2 = object.key("Outputs").start_array();
        for item_3 in var_1 {
            {
                let mut object_4 = array_2.value().start_object();
                crate::json_ser::serialize_structure_request_output_item(&mut object_4, item_3);
                object_4.finish();
            }
        }
        array_2.finish();
    }
    if let Some(var_5) = &input.playback_mode {
        object.key("PlaybackMode").string(var_5.as_str());
    }
    if let Some(var_6) = &input.tags {
        let mut object_7 = object.key("tags").start_object();
        for (key_8, value_9) in var_6 {
            {
                object_7.key(key_8).string(value_9);
            }
        }
        object_7.finish();
    }
}

pub fn serialize_structure_create_program_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateProgramInput,
) {
    if let Some(var_10) = &input.ad_breaks {
        let mut array_11 = object.key("AdBreaks").start_array();
        for item_12 in var_10 {
            {
                let mut object_13 = array_11.value().start_object();
                crate::json_ser::serialize_structure_ad_break(&mut object_13, item_12);
                object_13.finish();
            }
        }
        array_11.finish();
    }
    if let Some(var_14) = &input.schedule_configuration {
        let mut object_15 = object.key("ScheduleConfiguration").start_object();
        crate::json_ser::serialize_structure_schedule_configuration(&mut object_15, var_14);
        object_15.finish();
    }
    if let Some(var_16) = &input.source_location_name {
        object.key("SourceLocationName").string(var_16);
    }
    if let Some(var_17) = &input.vod_source_name {
        object.key("VodSourceName").string(var_17);
    }
}

pub fn serialize_structure_create_source_location_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateSourceLocationInput,
) {
    if let Some(var_18) = &input.access_configuration {
        let mut object_19 = object.key("AccessConfiguration").start_object();
        crate::json_ser::serialize_structure_access_configuration(&mut object_19, var_18);
        object_19.finish();
    }
    if let Some(var_20) = &input.default_segment_delivery_configuration {
        let mut object_21 = object
            .key("DefaultSegmentDeliveryConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_default_segment_delivery_configuration(
            &mut object_21,
            var_20,
        );
        object_21.finish();
    }
    if let Some(var_22) = &input.http_configuration {
        let mut object_23 = object.key("HttpConfiguration").start_object();
        crate::json_ser::serialize_structure_http_configuration(&mut object_23, var_22);
        object_23.finish();
    }
    if let Some(var_24) = &input.tags {
        let mut object_25 = object.key("tags").start_object();
        for (key_26, value_27) in var_24 {
            {
                object_25.key(key_26).string(value_27);
            }
        }
        object_25.finish();
    }
}

pub fn serialize_structure_create_vod_source_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateVodSourceInput,
) {
    if let Some(var_28) = &input.http_package_configurations {
        let mut array_29 = object.key("HttpPackageConfigurations").start_array();
        for item_30 in var_28 {
            {
                let mut object_31 = array_29.value().start_object();
                crate::json_ser::serialize_structure_http_package_configuration(
                    &mut object_31,
                    item_30,
                );
                object_31.finish();
            }
        }
        array_29.finish();
    }
    if let Some(var_32) = &input.tags {
        let mut object_33 = object.key("tags").start_object();
        for (key_34, value_35) in var_32 {
            {
                object_33.key(key_34).string(value_35);
            }
        }
        object_33.finish();
    }
}

pub fn serialize_structure_put_channel_policy_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutChannelPolicyInput,
) {
    if let Some(var_36) = &input.policy {
        object.key("Policy").string(var_36);
    }
}

pub fn serialize_structure_put_playback_configuration_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutPlaybackConfigurationInput,
) {
    if let Some(var_37) = &input.ad_decision_server_url {
        object.key("AdDecisionServerUrl").string(var_37);
    }
    if let Some(var_38) = &input.avail_suppression {
        let mut object_39 = object.key("AvailSuppression").start_object();
        crate::json_ser::serialize_structure_avail_suppression(&mut object_39, var_38);
        object_39.finish();
    }
    if let Some(var_40) = &input.bumper {
        let mut object_41 = object.key("Bumper").start_object();
        crate::json_ser::serialize_structure_bumper(&mut object_41, var_40);
        object_41.finish();
    }
    if let Some(var_42) = &input.cdn_configuration {
        let mut object_43 = object.key("CdnConfiguration").start_object();
        crate::json_ser::serialize_structure_cdn_configuration(&mut object_43, var_42);
        object_43.finish();
    }
    if let Some(var_44) = &input.configuration_aliases {
        let mut object_45 = object.key("ConfigurationAliases").start_object();
        for (key_46, value_47) in var_44 {
            {
                let mut object_48 = object_45.key(key_46).start_object();
                for (key_49, value_50) in value_47 {
                    {
                        object_48.key(key_49).string(value_50);
                    }
                }
                object_48.finish();
            }
        }
        object_45.finish();
    }
    if let Some(var_51) = &input.dash_configuration {
        let mut object_52 = object.key("DashConfiguration").start_object();
        crate::json_ser::serialize_structure_dash_configuration_for_put(&mut object_52, var_51);
        object_52.finish();
    }
    if let Some(var_53) = &input.live_pre_roll_configuration {
        let mut object_54 = object.key("LivePreRollConfiguration").start_object();
        crate::json_ser::serialize_structure_live_pre_roll_configuration(&mut object_54, var_53);
        object_54.finish();
    }
    if let Some(var_55) = &input.manifest_processing_rules {
        let mut object_56 = object.key("ManifestProcessingRules").start_object();
        crate::json_ser::serialize_structure_manifest_processing_rules(&mut object_56, var_55);
        object_56.finish();
    }
    if let Some(var_57) = &input.name {
        object.key("Name").string(var_57);
    }
    if input.personalization_threshold_seconds != 0 {
        object.key("PersonalizationThresholdSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.personalization_threshold_seconds).into()),
        );
    }
    if let Some(var_58) = &input.slate_ad_url {
        object.key("SlateAdUrl").string(var_58);
    }
    if let Some(var_59) = &input.tags {
        let mut object_60 = object.key("tags").start_object();
        for (key_61, value_62) in var_59 {
            {
                object_60.key(key_61).string(value_62);
            }
        }
        object_60.finish();
    }
    if let Some(var_63) = &input.transcode_profile_name {
        object.key("TranscodeProfileName").string(var_63);
    }
    if let Some(var_64) = &input.video_content_source_url {
        object.key("VideoContentSourceUrl").string(var_64);
    }
}

pub fn serialize_structure_tag_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) {
    if let Some(var_65) = &input.tags {
        let mut object_66 = object.key("tags").start_object();
        for (key_67, value_68) in var_65 {
            {
                object_66.key(key_67).string(value_68);
            }
        }
        object_66.finish();
    }
}

pub fn serialize_structure_update_channel_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateChannelInput,
) {
    if let Some(var_69) = &input.outputs {
        let mut array_70 = object.key("Outputs").start_array();
        for item_71 in var_69 {
            {
                let mut object_72 = array_70.value().start_object();
                crate::json_ser::serialize_structure_request_output_item(&mut object_72, item_71);
                object_72.finish();
            }
        }
        array_70.finish();
    }
}

pub fn serialize_structure_update_source_location_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateSourceLocationInput,
) {
    if let Some(var_73) = &input.access_configuration {
        let mut object_74 = object.key("AccessConfiguration").start_object();
        crate::json_ser::serialize_structure_access_configuration(&mut object_74, var_73);
        object_74.finish();
    }
    if let Some(var_75) = &input.default_segment_delivery_configuration {
        let mut object_76 = object
            .key("DefaultSegmentDeliveryConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_default_segment_delivery_configuration(
            &mut object_76,
            var_75,
        );
        object_76.finish();
    }
    if let Some(var_77) = &input.http_configuration {
        let mut object_78 = object.key("HttpConfiguration").start_object();
        crate::json_ser::serialize_structure_http_configuration(&mut object_78, var_77);
        object_78.finish();
    }
}

pub fn serialize_structure_update_vod_source_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateVodSourceInput,
) {
    if let Some(var_79) = &input.http_package_configurations {
        let mut array_80 = object.key("HttpPackageConfigurations").start_array();
        for item_81 in var_79 {
            {
                let mut object_82 = array_80.value().start_object();
                crate::json_ser::serialize_structure_http_package_configuration(
                    &mut object_82,
                    item_81,
                );
                object_82.finish();
            }
        }
        array_80.finish();
    }
}

pub fn serialize_structure_request_output_item(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RequestOutputItem,
) {
    if let Some(var_83) = &input.dash_playlist_settings {
        let mut object_84 = object.key("DashPlaylistSettings").start_object();
        crate::json_ser::serialize_structure_dash_playlist_settings(&mut object_84, var_83);
        object_84.finish();
    }
    if let Some(var_85) = &input.hls_playlist_settings {
        let mut object_86 = object.key("HlsPlaylistSettings").start_object();
        crate::json_ser::serialize_structure_hls_playlist_settings(&mut object_86, var_85);
        object_86.finish();
    }
    if let Some(var_87) = &input.manifest_name {
        object.key("ManifestName").string(var_87);
    }
    if let Some(var_88) = &input.source_group {
        object.key("SourceGroup").string(var_88);
    }
}

pub fn serialize_structure_ad_break(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AdBreak,
) {
    if let Some(var_89) = &input.message_type {
        object.key("MessageType").string(var_89.as_str());
    }
    if input.offset_millis != 0 {
        object.key("OffsetMillis").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.offset_millis).into()),
        );
    }
    if let Some(var_90) = &input.slate {
        let mut object_91 = object.key("Slate").start_object();
        crate::json_ser::serialize_structure_slate_source(&mut object_91, var_90);
        object_91.finish();
    }
    if let Some(var_92) = &input.splice_insert_message {
        let mut object_93 = object.key("SpliceInsertMessage").start_object();
        crate::json_ser::serialize_structure_splice_insert_message(&mut object_93, var_92);
        object_93.finish();
    }
}

pub fn serialize_structure_schedule_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ScheduleConfiguration,
) {
    if let Some(var_94) = &input.transition {
        let mut object_95 = object.key("Transition").start_object();
        crate::json_ser::serialize_structure_transition(&mut object_95, var_94);
        object_95.finish();
    }
}

pub fn serialize_structure_access_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AccessConfiguration,
) {
    if let Some(var_96) = &input.access_type {
        object.key("AccessType").string(var_96.as_str());
    }
    if let Some(var_97) = &input.secrets_manager_access_token_configuration {
        let mut object_98 = object
            .key("SecretsManagerAccessTokenConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_secrets_manager_access_token_configuration(
            &mut object_98,
            var_97,
        );
        object_98.finish();
    }
}

pub fn serialize_structure_default_segment_delivery_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DefaultSegmentDeliveryConfiguration,
) {
    if let Some(var_99) = &input.base_url {
        object.key("BaseUrl").string(var_99);
    }
}

pub fn serialize_structure_http_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HttpConfiguration,
) {
    if let Some(var_100) = &input.base_url {
        object.key("BaseUrl").string(var_100);
    }
}

pub fn serialize_structure_http_package_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HttpPackageConfiguration,
) {
    if let Some(var_101) = &input.path {
        object.key("Path").string(var_101);
    }
    if let Some(var_102) = &input.source_group {
        object.key("SourceGroup").string(var_102);
    }
    if let Some(var_103) = &input.r#type {
        object.key("Type").string(var_103.as_str());
    }
}

pub fn serialize_structure_avail_suppression(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AvailSuppression,
) {
    if let Some(var_104) = &input.mode {
        object.key("Mode").string(var_104.as_str());
    }
    if let Some(var_105) = &input.value {
        object.key("Value").string(var_105);
    }
}

pub fn serialize_structure_bumper(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Bumper,
) {
    if let Some(var_106) = &input.end_url {
        object.key("EndUrl").string(var_106);
    }
    if let Some(var_107) = &input.start_url {
        object.key("StartUrl").string(var_107);
    }
}

pub fn serialize_structure_cdn_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CdnConfiguration,
) {
    if let Some(var_108) = &input.ad_segment_url_prefix {
        object.key("AdSegmentUrlPrefix").string(var_108);
    }
    if let Some(var_109) = &input.content_segment_url_prefix {
        object.key("ContentSegmentUrlPrefix").string(var_109);
    }
}

pub fn serialize_structure_dash_configuration_for_put(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DashConfigurationForPut,
) {
    if let Some(var_110) = &input.mpd_location {
        object.key("MpdLocation").string(var_110);
    }
    if let Some(var_111) = &input.origin_manifest_type {
        object.key("OriginManifestType").string(var_111.as_str());
    }
}

pub fn serialize_structure_live_pre_roll_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LivePreRollConfiguration,
) {
    if let Some(var_112) = &input.ad_decision_server_url {
        object.key("AdDecisionServerUrl").string(var_112);
    }
    if input.max_duration_seconds != 0 {
        object.key("MaxDurationSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.max_duration_seconds).into()),
        );
    }
}

pub fn serialize_structure_manifest_processing_rules(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ManifestProcessingRules,
) {
    if let Some(var_113) = &input.ad_marker_passthrough {
        let mut object_114 = object.key("AdMarkerPassthrough").start_object();
        crate::json_ser::serialize_structure_ad_marker_passthrough(&mut object_114, var_113);
        object_114.finish();
    }
}

pub fn serialize_structure_dash_playlist_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DashPlaylistSettings,
) {
    if input.manifest_window_seconds != 0 {
        object.key("ManifestWindowSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.manifest_window_seconds).into()),
        );
    }
    if input.min_buffer_time_seconds != 0 {
        object.key("MinBufferTimeSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.min_buffer_time_seconds).into()),
        );
    }
    if input.min_update_period_seconds != 0 {
        object.key("MinUpdatePeriodSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.min_update_period_seconds).into()),
        );
    }
    if input.suggested_presentation_delay_seconds != 0 {
        object.key("SuggestedPresentationDelaySeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.suggested_presentation_delay_seconds).into()),
        );
    }
}

pub fn serialize_structure_hls_playlist_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HlsPlaylistSettings,
) {
    if input.manifest_window_seconds != 0 {
        object.key("ManifestWindowSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.manifest_window_seconds).into()),
        );
    }
}

pub fn serialize_structure_slate_source(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SlateSource,
) {
    if let Some(var_115) = &input.source_location_name {
        object.key("SourceLocationName").string(var_115);
    }
    if let Some(var_116) = &input.vod_source_name {
        object.key("VodSourceName").string(var_116);
    }
}

pub fn serialize_structure_splice_insert_message(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SpliceInsertMessage,
) {
    if input.avail_num != 0 {
        object.key("AvailNum").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.avail_num).into()),
        );
    }
    if input.avails_expected != 0 {
        object.key("AvailsExpected").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.avails_expected).into()),
        );
    }
    if input.splice_event_id != 0 {
        object.key("SpliceEventId").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.splice_event_id).into()),
        );
    }
    if input.unique_program_id != 0 {
        object.key("UniqueProgramId").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.unique_program_id).into()),
        );
    }
}

pub fn serialize_structure_transition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Transition,
) {
    if let Some(var_117) = &input.relative_position {
        object.key("RelativePosition").string(var_117.as_str());
    }
    if let Some(var_118) = &input.relative_program {
        object.key("RelativeProgram").string(var_118);
    }
    if let Some(var_119) = &input.r#type {
        object.key("Type").string(var_119);
    }
}

pub fn serialize_structure_secrets_manager_access_token_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SecretsManagerAccessTokenConfiguration,
) {
    if let Some(var_120) = &input.header_name {
        object.key("HeaderName").string(var_120);
    }
    if let Some(var_121) = &input.secret_arn {
        object.key("SecretArn").string(var_121);
    }
    if let Some(var_122) = &input.secret_string_key {
        object.key("SecretStringKey").string(var_122);
    }
}

pub fn serialize_structure_ad_marker_passthrough(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AdMarkerPassthrough,
) {
    if input.enabled {
        object.key("Enabled").boolean(input.enabled);
    }
}
