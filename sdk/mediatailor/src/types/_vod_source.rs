// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>VOD source configuration parameters.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct VodSource {
    /// <p>The ARN for the VOD source.</p>
    pub arn: ::std::string::String,
    /// <p>The timestamp that indicates when the VOD source was created.</p>
    pub creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The HTTP package configurations for the VOD source.</p>
    pub http_package_configurations: ::std::vec::Vec<crate::types::HttpPackageConfiguration>,
    /// <p>The timestamp that indicates when the VOD source was last modified.</p>
    pub last_modified_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The name of the source location that the VOD source is associated with.</p>
    pub source_location_name: ::std::string::String,
    /// <p>The tags assigned to the VOD source. Tags are key-value pairs that you can associate with Amazon resources to help with organization, access control, and cost tracking. For more information, see <a href="https://docs.aws.amazon.com/mediatailor/latest/ug/tagging.html">Tagging AWS Elemental MediaTailor Resources</a>.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>The name of the VOD source.</p>
    pub vod_source_name: ::std::string::String,
}
impl VodSource {
    /// <p>The ARN for the VOD source.</p>
    pub fn arn(&self) -> &str {
        use std::ops::Deref;
        self.arn.deref()
    }
    /// <p>The timestamp that indicates when the VOD source was created.</p>
    pub fn creation_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The HTTP package configurations for the VOD source.</p>
    pub fn http_package_configurations(&self) -> &[crate::types::HttpPackageConfiguration] {
        use std::ops::Deref;
        self.http_package_configurations.deref()
    }
    /// <p>The timestamp that indicates when the VOD source was last modified.</p>
    pub fn last_modified_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_modified_time.as_ref()
    }
    /// <p>The name of the source location that the VOD source is associated with.</p>
    pub fn source_location_name(&self) -> &str {
        use std::ops::Deref;
        self.source_location_name.deref()
    }
    /// <p>The tags assigned to the VOD source. Tags are key-value pairs that you can associate with Amazon resources to help with organization, access control, and cost tracking. For more information, see <a href="https://docs.aws.amazon.com/mediatailor/latest/ug/tagging.html">Tagging AWS Elemental MediaTailor Resources</a>.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
    /// <p>The name of the VOD source.</p>
    pub fn vod_source_name(&self) -> &str {
        use std::ops::Deref;
        self.vod_source_name.deref()
    }
}
impl VodSource {
    /// Creates a new builder-style object to manufacture [`VodSource`](crate::types::VodSource).
    pub fn builder() -> crate::types::builders::VodSourceBuilder {
        crate::types::builders::VodSourceBuilder::default()
    }
}

/// A builder for [`VodSource`](crate::types::VodSource).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct VodSourceBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) http_package_configurations: ::std::option::Option<::std::vec::Vec<crate::types::HttpPackageConfiguration>>,
    pub(crate) last_modified_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) source_location_name: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) vod_source_name: ::std::option::Option<::std::string::String>,
}
impl VodSourceBuilder {
    /// <p>The ARN for the VOD source.</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN for the VOD source.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The ARN for the VOD source.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The timestamp that indicates when the VOD source was created.</p>
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp that indicates when the VOD source was created.</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The timestamp that indicates when the VOD source was created.</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// Appends an item to `http_package_configurations`.
    ///
    /// To override the contents of this collection use [`set_http_package_configurations`](Self::set_http_package_configurations).
    ///
    /// <p>The HTTP package configurations for the VOD source.</p>
    pub fn http_package_configurations(mut self, input: crate::types::HttpPackageConfiguration) -> Self {
        let mut v = self.http_package_configurations.unwrap_or_default();
        v.push(input);
        self.http_package_configurations = ::std::option::Option::Some(v);
        self
    }
    /// <p>The HTTP package configurations for the VOD source.</p>
    pub fn set_http_package_configurations(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::HttpPackageConfiguration>>) -> Self {
        self.http_package_configurations = input;
        self
    }
    /// <p>The HTTP package configurations for the VOD source.</p>
    pub fn get_http_package_configurations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::HttpPackageConfiguration>> {
        &self.http_package_configurations
    }
    /// <p>The timestamp that indicates when the VOD source was last modified.</p>
    pub fn last_modified_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_modified_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp that indicates when the VOD source was last modified.</p>
    pub fn set_last_modified_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_modified_time = input;
        self
    }
    /// <p>The timestamp that indicates when the VOD source was last modified.</p>
    pub fn get_last_modified_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_modified_time
    }
    /// <p>The name of the source location that the VOD source is associated with.</p>
    /// This field is required.
    pub fn source_location_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_location_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the source location that the VOD source is associated with.</p>
    pub fn set_source_location_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_location_name = input;
        self
    }
    /// <p>The name of the source location that the VOD source is associated with.</p>
    pub fn get_source_location_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_location_name
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags assigned to the VOD source. Tags are key-value pairs that you can associate with Amazon resources to help with organization, access control, and cost tracking. For more information, see <a href="https://docs.aws.amazon.com/mediatailor/latest/ug/tagging.html">Tagging AWS Elemental MediaTailor Resources</a>.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The tags assigned to the VOD source. Tags are key-value pairs that you can associate with Amazon resources to help with organization, access control, and cost tracking. For more information, see <a href="https://docs.aws.amazon.com/mediatailor/latest/ug/tagging.html">Tagging AWS Elemental MediaTailor Resources</a>.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags assigned to the VOD source. Tags are key-value pairs that you can associate with Amazon resources to help with organization, access control, and cost tracking. For more information, see <a href="https://docs.aws.amazon.com/mediatailor/latest/ug/tagging.html">Tagging AWS Elemental MediaTailor Resources</a>.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// <p>The name of the VOD source.</p>
    /// This field is required.
    pub fn vod_source_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vod_source_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the VOD source.</p>
    pub fn set_vod_source_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vod_source_name = input;
        self
    }
    /// <p>The name of the VOD source.</p>
    pub fn get_vod_source_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.vod_source_name
    }
    /// Consumes the builder and constructs a [`VodSource`](crate::types::VodSource).
    /// This method will fail if any of the following fields are not set:
    /// - [`arn`](crate::types::builders::VodSourceBuilder::arn)
    /// - [`http_package_configurations`](crate::types::builders::VodSourceBuilder::http_package_configurations)
    /// - [`source_location_name`](crate::types::builders::VodSourceBuilder::source_location_name)
    /// - [`vod_source_name`](crate::types::builders::VodSourceBuilder::vod_source_name)
    pub fn build(self) -> ::std::result::Result<crate::types::VodSource, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::VodSource {
            arn: self.arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "arn",
                    "arn was not specified but it is required when building VodSource",
                )
            })?,
            creation_time: self.creation_time,
            http_package_configurations: self.http_package_configurations.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "http_package_configurations",
                    "http_package_configurations was not specified but it is required when building VodSource",
                )
            })?,
            last_modified_time: self.last_modified_time,
            source_location_name: self.source_location_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "source_location_name",
                    "source_location_name was not specified but it is required when building VodSource",
                )
            })?,
            tags: self.tags,
            vod_source_name: self.vod_source_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "vod_source_name",
                    "vod_source_name was not specified but it is required when building VodSource",
                )
            })?,
        })
    }
}
