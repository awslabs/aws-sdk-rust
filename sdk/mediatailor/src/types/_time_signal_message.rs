// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The SCTE-35 <code>time_signal</code> message can be sent with one or more <code>segmentation_descriptor</code> messages. A <code>time_signal</code> message can be sent only if a single <code>segmentation_descriptor</code> message is sent.</p>
/// <p>The <code>time_signal</code> message contains only the <code>splice_time</code> field which is constructed using a given presentation timestamp. When sending a <code>time_signal</code> message, the <code>splice_command_type</code> field in the <code>splice_info_section</code> message is set to 6 (0x06).</p>
/// <p>See the <code>time_signal()</code> table of the 2022 SCTE-35 specification for more information.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TimeSignalMessage {
    /// <p>The configurations for the SCTE-35 <code>segmentation_descriptor</code> message(s) sent with the <code>time_signal</code> message.</p>
    pub segmentation_descriptors: ::std::option::Option<::std::vec::Vec<crate::types::SegmentationDescriptor>>,
}
impl TimeSignalMessage {
    /// <p>The configurations for the SCTE-35 <code>segmentation_descriptor</code> message(s) sent with the <code>time_signal</code> message.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.segmentation_descriptors.is_none()`.
    pub fn segmentation_descriptors(&self) -> &[crate::types::SegmentationDescriptor] {
        self.segmentation_descriptors.as_deref().unwrap_or_default()
    }
}
impl TimeSignalMessage {
    /// Creates a new builder-style object to manufacture [`TimeSignalMessage`](crate::types::TimeSignalMessage).
    pub fn builder() -> crate::types::builders::TimeSignalMessageBuilder {
        crate::types::builders::TimeSignalMessageBuilder::default()
    }
}

/// A builder for [`TimeSignalMessage`](crate::types::TimeSignalMessage).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct TimeSignalMessageBuilder {
    pub(crate) segmentation_descriptors: ::std::option::Option<::std::vec::Vec<crate::types::SegmentationDescriptor>>,
}
impl TimeSignalMessageBuilder {
    /// Appends an item to `segmentation_descriptors`.
    ///
    /// To override the contents of this collection use [`set_segmentation_descriptors`](Self::set_segmentation_descriptors).
    ///
    /// <p>The configurations for the SCTE-35 <code>segmentation_descriptor</code> message(s) sent with the <code>time_signal</code> message.</p>
    pub fn segmentation_descriptors(mut self, input: crate::types::SegmentationDescriptor) -> Self {
        let mut v = self.segmentation_descriptors.unwrap_or_default();
        v.push(input);
        self.segmentation_descriptors = ::std::option::Option::Some(v);
        self
    }
    /// <p>The configurations for the SCTE-35 <code>segmentation_descriptor</code> message(s) sent with the <code>time_signal</code> message.</p>
    pub fn set_segmentation_descriptors(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::SegmentationDescriptor>>) -> Self {
        self.segmentation_descriptors = input;
        self
    }
    /// <p>The configurations for the SCTE-35 <code>segmentation_descriptor</code> message(s) sent with the <code>time_signal</code> message.</p>
    pub fn get_segmentation_descriptors(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SegmentationDescriptor>> {
        &self.segmentation_descriptors
    }
    /// Consumes the builder and constructs a [`TimeSignalMessage`](crate::types::TimeSignalMessage).
    pub fn build(self) -> crate::types::TimeSignalMessage {
        crate::types::TimeSignalMessage {
            segmentation_descriptors: self.segmentation_descriptors,
        }
    }
}
