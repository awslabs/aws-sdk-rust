// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Clip range configuration for the VOD source associated with the program.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ClipRange {
    /// <p>The end offset of the clip range, in milliseconds, starting from the beginning of the VOD source associated with the program.</p>
    pub end_offset_millis: i64,
}
impl ClipRange {
    /// <p>The end offset of the clip range, in milliseconds, starting from the beginning of the VOD source associated with the program.</p>
    pub fn end_offset_millis(&self) -> i64 {
        self.end_offset_millis
    }
}
impl ClipRange {
    /// Creates a new builder-style object to manufacture [`ClipRange`](crate::types::ClipRange).
    pub fn builder() -> crate::types::builders::ClipRangeBuilder {
        crate::types::builders::ClipRangeBuilder::default()
    }
}

/// A builder for [`ClipRange`](crate::types::ClipRange).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ClipRangeBuilder {
    pub(crate) end_offset_millis: ::std::option::Option<i64>,
}
impl ClipRangeBuilder {
    /// <p>The end offset of the clip range, in milliseconds, starting from the beginning of the VOD source associated with the program.</p>
    /// This field is required.
    pub fn end_offset_millis(mut self, input: i64) -> Self {
        self.end_offset_millis = ::std::option::Option::Some(input);
        self
    }
    /// <p>The end offset of the clip range, in milliseconds, starting from the beginning of the VOD source associated with the program.</p>
    pub fn set_end_offset_millis(mut self, input: ::std::option::Option<i64>) -> Self {
        self.end_offset_millis = input;
        self
    }
    /// <p>The end offset of the clip range, in milliseconds, starting from the beginning of the VOD source associated with the program.</p>
    pub fn get_end_offset_millis(&self) -> &::std::option::Option<i64> {
        &self.end_offset_millis
    }
    /// Consumes the builder and constructs a [`ClipRange`](crate::types::ClipRange).
    pub fn build(self) -> crate::types::ClipRange {
        crate::types::ClipRange {
            end_offset_millis: self.end_offset_millis.unwrap_or_default(),
        }
    }
}
