// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>For HLS, when set to <code>true</code>, MediaTailor passes through <code>EXT-X-CUE-IN</code>, <code>EXT-X-CUE-OUT</code>, and <code>EXT-X-SPLICEPOINT-SCTE35</code> ad markers from the origin manifest to the MediaTailor personalized manifest.</p>
/// <p>No logic is applied to these ad markers. For example, if <code>EXT-X-CUE-OUT</code> has a value of <code>60</code>, but no ads are filled for that ad break, MediaTailor will not set the value to <code>0</code>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AdMarkerPassthrough {
    /// <p>Enables ad marker passthrough for your configuration.</p>
    #[doc(hidden)]
    pub enabled: bool,
}
impl AdMarkerPassthrough {
    /// <p>Enables ad marker passthrough for your configuration.</p>
    pub fn enabled(&self) -> bool {
        self.enabled
    }
}
impl AdMarkerPassthrough {
    /// Creates a new builder-style object to manufacture [`AdMarkerPassthrough`](crate::types::AdMarkerPassthrough).
    pub fn builder() -> crate::types::builders::AdMarkerPassthroughBuilder {
        crate::types::builders::AdMarkerPassthroughBuilder::default()
    }
}

/// A builder for [`AdMarkerPassthrough`](crate::types::AdMarkerPassthrough).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AdMarkerPassthroughBuilder {
    pub(crate) enabled: std::option::Option<bool>,
}
impl AdMarkerPassthroughBuilder {
    /// <p>Enables ad marker passthrough for your configuration.</p>
    pub fn enabled(mut self, input: bool) -> Self {
        self.enabled = Some(input);
        self
    }
    /// <p>Enables ad marker passthrough for your configuration.</p>
    pub fn set_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.enabled = input;
        self
    }
    /// Consumes the builder and constructs a [`AdMarkerPassthrough`](crate::types::AdMarkerPassthrough).
    pub fn build(self) -> crate::types::AdMarkerPassthrough {
        crate::types::AdMarkerPassthrough {
            enabled: self.enabled.unwrap_or_default(),
        }
    }
}
