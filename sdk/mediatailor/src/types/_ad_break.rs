// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Ad break configuration parameters.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AdBreak {
    /// <p>The SCTE-35 ad insertion type. Accepted value: <code>SPLICE_INSERT</code>, <code>TIME_SIGNAL</code>.</p>
    #[doc(hidden)]
    pub message_type: std::option::Option<crate::types::MessageType>,
    /// <p>How long (in milliseconds) after the beginning of the program that an ad starts. This value must fall within 100ms of a segment boundary, otherwise the ad break will be skipped.</p>
    #[doc(hidden)]
    pub offset_millis: i64,
    /// <p>Ad break slate configuration.</p>
    #[doc(hidden)]
    pub slate: std::option::Option<crate::types::SlateSource>,
    /// <p>This defines the SCTE-35 <code>splice_insert()</code> message inserted around the ad. For information about using <code>splice_insert()</code>, see the SCTE-35 specficiaiton, section 9.7.3.1.</p>
    #[doc(hidden)]
    pub splice_insert_message: std::option::Option<crate::types::SpliceInsertMessage>,
    /// <p>Defines the SCTE-35 <code>time_signal</code> message inserted around the ad.</p>
    /// <p>Programs on a channel's schedule can be configured with one or more ad breaks. You can attach a <code>splice_insert</code> SCTE-35 message to the ad break. This message provides basic metadata about the ad break.</p>
    /// <p>See section 9.7.4 of the 2022 SCTE-35 specification for more information.</p>
    #[doc(hidden)]
    pub time_signal_message: std::option::Option<crate::types::TimeSignalMessage>,
}
impl AdBreak {
    /// <p>The SCTE-35 ad insertion type. Accepted value: <code>SPLICE_INSERT</code>, <code>TIME_SIGNAL</code>.</p>
    pub fn message_type(&self) -> std::option::Option<&crate::types::MessageType> {
        self.message_type.as_ref()
    }
    /// <p>How long (in milliseconds) after the beginning of the program that an ad starts. This value must fall within 100ms of a segment boundary, otherwise the ad break will be skipped.</p>
    pub fn offset_millis(&self) -> i64 {
        self.offset_millis
    }
    /// <p>Ad break slate configuration.</p>
    pub fn slate(&self) -> std::option::Option<&crate::types::SlateSource> {
        self.slate.as_ref()
    }
    /// <p>This defines the SCTE-35 <code>splice_insert()</code> message inserted around the ad. For information about using <code>splice_insert()</code>, see the SCTE-35 specficiaiton, section 9.7.3.1.</p>
    pub fn splice_insert_message(&self) -> std::option::Option<&crate::types::SpliceInsertMessage> {
        self.splice_insert_message.as_ref()
    }
    /// <p>Defines the SCTE-35 <code>time_signal</code> message inserted around the ad.</p>
    /// <p>Programs on a channel's schedule can be configured with one or more ad breaks. You can attach a <code>splice_insert</code> SCTE-35 message to the ad break. This message provides basic metadata about the ad break.</p>
    /// <p>See section 9.7.4 of the 2022 SCTE-35 specification for more information.</p>
    pub fn time_signal_message(&self) -> std::option::Option<&crate::types::TimeSignalMessage> {
        self.time_signal_message.as_ref()
    }
}
impl AdBreak {
    /// Creates a new builder-style object to manufacture [`AdBreak`](crate::types::AdBreak).
    pub fn builder() -> crate::types::builders::AdBreakBuilder {
        crate::types::builders::AdBreakBuilder::default()
    }
}

/// A builder for [`AdBreak`](crate::types::AdBreak).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AdBreakBuilder {
    pub(crate) message_type: std::option::Option<crate::types::MessageType>,
    pub(crate) offset_millis: std::option::Option<i64>,
    pub(crate) slate: std::option::Option<crate::types::SlateSource>,
    pub(crate) splice_insert_message: std::option::Option<crate::types::SpliceInsertMessage>,
    pub(crate) time_signal_message: std::option::Option<crate::types::TimeSignalMessage>,
}
impl AdBreakBuilder {
    /// <p>The SCTE-35 ad insertion type. Accepted value: <code>SPLICE_INSERT</code>, <code>TIME_SIGNAL</code>.</p>
    pub fn message_type(mut self, input: crate::types::MessageType) -> Self {
        self.message_type = Some(input);
        self
    }
    /// <p>The SCTE-35 ad insertion type. Accepted value: <code>SPLICE_INSERT</code>, <code>TIME_SIGNAL</code>.</p>
    pub fn set_message_type(
        mut self,
        input: std::option::Option<crate::types::MessageType>,
    ) -> Self {
        self.message_type = input;
        self
    }
    /// <p>How long (in milliseconds) after the beginning of the program that an ad starts. This value must fall within 100ms of a segment boundary, otherwise the ad break will be skipped.</p>
    pub fn offset_millis(mut self, input: i64) -> Self {
        self.offset_millis = Some(input);
        self
    }
    /// <p>How long (in milliseconds) after the beginning of the program that an ad starts. This value must fall within 100ms of a segment boundary, otherwise the ad break will be skipped.</p>
    pub fn set_offset_millis(mut self, input: std::option::Option<i64>) -> Self {
        self.offset_millis = input;
        self
    }
    /// <p>Ad break slate configuration.</p>
    pub fn slate(mut self, input: crate::types::SlateSource) -> Self {
        self.slate = Some(input);
        self
    }
    /// <p>Ad break slate configuration.</p>
    pub fn set_slate(mut self, input: std::option::Option<crate::types::SlateSource>) -> Self {
        self.slate = input;
        self
    }
    /// <p>This defines the SCTE-35 <code>splice_insert()</code> message inserted around the ad. For information about using <code>splice_insert()</code>, see the SCTE-35 specficiaiton, section 9.7.3.1.</p>
    pub fn splice_insert_message(mut self, input: crate::types::SpliceInsertMessage) -> Self {
        self.splice_insert_message = Some(input);
        self
    }
    /// <p>This defines the SCTE-35 <code>splice_insert()</code> message inserted around the ad. For information about using <code>splice_insert()</code>, see the SCTE-35 specficiaiton, section 9.7.3.1.</p>
    pub fn set_splice_insert_message(
        mut self,
        input: std::option::Option<crate::types::SpliceInsertMessage>,
    ) -> Self {
        self.splice_insert_message = input;
        self
    }
    /// <p>Defines the SCTE-35 <code>time_signal</code> message inserted around the ad.</p>
    /// <p>Programs on a channel's schedule can be configured with one or more ad breaks. You can attach a <code>splice_insert</code> SCTE-35 message to the ad break. This message provides basic metadata about the ad break.</p>
    /// <p>See section 9.7.4 of the 2022 SCTE-35 specification for more information.</p>
    pub fn time_signal_message(mut self, input: crate::types::TimeSignalMessage) -> Self {
        self.time_signal_message = Some(input);
        self
    }
    /// <p>Defines the SCTE-35 <code>time_signal</code> message inserted around the ad.</p>
    /// <p>Programs on a channel's schedule can be configured with one or more ad breaks. You can attach a <code>splice_insert</code> SCTE-35 message to the ad break. This message provides basic metadata about the ad break.</p>
    /// <p>See section 9.7.4 of the 2022 SCTE-35 specification for more information.</p>
    pub fn set_time_signal_message(
        mut self,
        input: std::option::Option<crate::types::TimeSignalMessage>,
    ) -> Self {
        self.time_signal_message = input;
        self
    }
    /// Consumes the builder and constructs a [`AdBreak`](crate::types::AdBreak).
    pub fn build(self) -> crate::types::AdBreak {
        crate::types::AdBreak {
            message_type: self.message_type,
            offset_millis: self.offset_millis.unwrap_or_default(),
            slate: self.slate,
            splice_insert_message: self.splice_insert_message,
            time_signal_message: self.time_signal_message,
        }
    }
}
