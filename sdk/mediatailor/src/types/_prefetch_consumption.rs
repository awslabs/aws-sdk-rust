// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A complex type that contains settings that determine how and when that MediaTailor places prefetched ads into upcoming ad breaks.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PrefetchConsumption {
    /// <p>If you only want MediaTailor to insert prefetched ads into avails (ad breaks) that match specific dynamic variables, such as <code>scte.event_id</code>, set the avail matching criteria.</p>
    #[doc(hidden)]
    pub avail_matching_criteria:
        std::option::Option<std::vec::Vec<crate::types::AvailMatchingCriteria>>,
    /// <p>The time when MediaTailor no longer considers the prefetched ads for use in an ad break. MediaTailor automatically deletes prefetch schedules no less than seven days after the end time. If you'd like to manually delete the prefetch schedule, you can call <code>DeletePrefetchSchedule</code>.</p>
    #[doc(hidden)]
    pub end_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The time when prefetched ads are considered for use in an ad break. If you don't specify <code>StartTime</code>, the prefetched ads are available after MediaTailor retrives them from the ad decision server.</p>
    #[doc(hidden)]
    pub start_time: std::option::Option<aws_smithy_types::DateTime>,
}
impl PrefetchConsumption {
    /// <p>If you only want MediaTailor to insert prefetched ads into avails (ad breaks) that match specific dynamic variables, such as <code>scte.event_id</code>, set the avail matching criteria.</p>
    pub fn avail_matching_criteria(
        &self,
    ) -> std::option::Option<&[crate::types::AvailMatchingCriteria]> {
        self.avail_matching_criteria.as_deref()
    }
    /// <p>The time when MediaTailor no longer considers the prefetched ads for use in an ad break. MediaTailor automatically deletes prefetch schedules no less than seven days after the end time. If you'd like to manually delete the prefetch schedule, you can call <code>DeletePrefetchSchedule</code>.</p>
    pub fn end_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.end_time.as_ref()
    }
    /// <p>The time when prefetched ads are considered for use in an ad break. If you don't specify <code>StartTime</code>, the prefetched ads are available after MediaTailor retrives them from the ad decision server.</p>
    pub fn start_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
}
impl PrefetchConsumption {
    /// Creates a new builder-style object to manufacture [`PrefetchConsumption`](crate::types::PrefetchConsumption).
    pub fn builder() -> crate::types::builders::PrefetchConsumptionBuilder {
        crate::types::builders::PrefetchConsumptionBuilder::default()
    }
}

/// A builder for [`PrefetchConsumption`](crate::types::PrefetchConsumption).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PrefetchConsumptionBuilder {
    pub(crate) avail_matching_criteria:
        std::option::Option<std::vec::Vec<crate::types::AvailMatchingCriteria>>,
    pub(crate) end_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) start_time: std::option::Option<aws_smithy_types::DateTime>,
}
impl PrefetchConsumptionBuilder {
    /// Appends an item to `avail_matching_criteria`.
    ///
    /// To override the contents of this collection use [`set_avail_matching_criteria`](Self::set_avail_matching_criteria).
    ///
    /// <p>If you only want MediaTailor to insert prefetched ads into avails (ad breaks) that match specific dynamic variables, such as <code>scte.event_id</code>, set the avail matching criteria.</p>
    pub fn avail_matching_criteria(mut self, input: crate::types::AvailMatchingCriteria) -> Self {
        let mut v = self.avail_matching_criteria.unwrap_or_default();
        v.push(input);
        self.avail_matching_criteria = Some(v);
        self
    }
    /// <p>If you only want MediaTailor to insert prefetched ads into avails (ad breaks) that match specific dynamic variables, such as <code>scte.event_id</code>, set the avail matching criteria.</p>
    pub fn set_avail_matching_criteria(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::AvailMatchingCriteria>>,
    ) -> Self {
        self.avail_matching_criteria = input;
        self
    }
    /// <p>The time when MediaTailor no longer considers the prefetched ads for use in an ad break. MediaTailor automatically deletes prefetch schedules no less than seven days after the end time. If you'd like to manually delete the prefetch schedule, you can call <code>DeletePrefetchSchedule</code>.</p>
    pub fn end_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.end_time = Some(input);
        self
    }
    /// <p>The time when MediaTailor no longer considers the prefetched ads for use in an ad break. MediaTailor automatically deletes prefetch schedules no less than seven days after the end time. If you'd like to manually delete the prefetch schedule, you can call <code>DeletePrefetchSchedule</code>.</p>
    pub fn set_end_time(mut self, input: std::option::Option<aws_smithy_types::DateTime>) -> Self {
        self.end_time = input;
        self
    }
    /// <p>The time when prefetched ads are considered for use in an ad break. If you don't specify <code>StartTime</code>, the prefetched ads are available after MediaTailor retrives them from the ad decision server.</p>
    pub fn start_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.start_time = Some(input);
        self
    }
    /// <p>The time when prefetched ads are considered for use in an ad break. If you don't specify <code>StartTime</code>, the prefetched ads are available after MediaTailor retrives them from the ad decision server.</p>
    pub fn set_start_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.start_time = input;
        self
    }
    /// Consumes the builder and constructs a [`PrefetchConsumption`](crate::types::PrefetchConsumption).
    pub fn build(self) -> crate::types::PrefetchConsumption {
        crate::types::PrefetchConsumption {
            avail_matching_criteria: self.avail_matching_criteria,
            end_time: self.end_time,
            start_time: self.start_time,
        }
    }
}
