// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>HLS playlist configuration parameters.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct HlsPlaylistSettings {
    /// <p>The total duration (in seconds) of each manifest. Minimum value: <code>30</code> seconds. Maximum value: <code>3600</code> seconds.</p>
    #[doc(hidden)]
    pub manifest_window_seconds: i32,
}
impl HlsPlaylistSettings {
    /// <p>The total duration (in seconds) of each manifest. Minimum value: <code>30</code> seconds. Maximum value: <code>3600</code> seconds.</p>
    pub fn manifest_window_seconds(&self) -> i32 {
        self.manifest_window_seconds
    }
}
impl HlsPlaylistSettings {
    /// Creates a new builder-style object to manufacture [`HlsPlaylistSettings`](crate::types::HlsPlaylistSettings).
    pub fn builder() -> crate::types::builders::HlsPlaylistSettingsBuilder {
        crate::types::builders::HlsPlaylistSettingsBuilder::default()
    }
}

/// A builder for [`HlsPlaylistSettings`](crate::types::HlsPlaylistSettings).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct HlsPlaylistSettingsBuilder {
    pub(crate) manifest_window_seconds: std::option::Option<i32>,
}
impl HlsPlaylistSettingsBuilder {
    /// <p>The total duration (in seconds) of each manifest. Minimum value: <code>30</code> seconds. Maximum value: <code>3600</code> seconds.</p>
    pub fn manifest_window_seconds(mut self, input: i32) -> Self {
        self.manifest_window_seconds = Some(input);
        self
    }
    /// <p>The total duration (in seconds) of each manifest. Minimum value: <code>30</code> seconds. Maximum value: <code>3600</code> seconds.</p>
    pub fn set_manifest_window_seconds(mut self, input: std::option::Option<i32>) -> Self {
        self.manifest_window_seconds = input;
        self
    }
    /// Consumes the builder and constructs a [`HlsPlaylistSettings`](crate::types::HlsPlaylistSettings).
    pub fn build(self) -> crate::types::HlsPlaylistSettings {
        crate::types::HlsPlaylistSettings {
            manifest_window_seconds: self.manifest_window_seconds.unwrap_or_default(),
        }
    }
}
