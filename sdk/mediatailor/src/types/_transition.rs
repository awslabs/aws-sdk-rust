// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Program transition configuration.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Transition {
    /// <p>The duration of the live program in seconds.</p>
    #[doc(hidden)]
    pub duration_millis: i64,
    /// <p>The position where this program will be inserted relative to the <code>RelativePosition</code>.</p>
    #[doc(hidden)]
    pub relative_position: std::option::Option<crate::types::RelativePosition>,
    /// <p>The name of the program that this program will be inserted next to, as defined by <code>RelativePosition</code>.</p>
    #[doc(hidden)]
    pub relative_program: std::option::Option<std::string::String>,
    /// <p>The date and time that the program is scheduled to start, in epoch milliseconds.</p>
    #[doc(hidden)]
    pub scheduled_start_time_millis: i64,
    /// <p>Defines when the program plays in the schedule. You can set the value to <code>ABSOLUTE</code> or <code>RELATIVE</code>.</p>
    /// <p> <code>ABSOLUTE</code> - The program plays at a specific wall clock time. This setting can only be used for channels using the <code>LINEAR</code> <code>PlaybackMode</code>.</p>
    /// <p>Note the following considerations when using <code>ABSOLUTE</code> transitions:</p>
    /// <p>If the preceding program in the schedule has a duration that extends past the wall clock time, MediaTailor truncates the preceding program on a common segment boundary.</p>
    /// <p>If there are gaps in playback, MediaTailor plays the <code>FillerSlate</code> you configured for your linear channel.</p>
    /// <p> <code>RELATIVE</code> - The program is inserted into the schedule either before or after a program that you specify via <code>RelativePosition</code>.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<std::string::String>,
}
impl Transition {
    /// <p>The duration of the live program in seconds.</p>
    pub fn duration_millis(&self) -> i64 {
        self.duration_millis
    }
    /// <p>The position where this program will be inserted relative to the <code>RelativePosition</code>.</p>
    pub fn relative_position(&self) -> std::option::Option<&crate::types::RelativePosition> {
        self.relative_position.as_ref()
    }
    /// <p>The name of the program that this program will be inserted next to, as defined by <code>RelativePosition</code>.</p>
    pub fn relative_program(&self) -> std::option::Option<&str> {
        self.relative_program.as_deref()
    }
    /// <p>The date and time that the program is scheduled to start, in epoch milliseconds.</p>
    pub fn scheduled_start_time_millis(&self) -> i64 {
        self.scheduled_start_time_millis
    }
    /// <p>Defines when the program plays in the schedule. You can set the value to <code>ABSOLUTE</code> or <code>RELATIVE</code>.</p>
    /// <p> <code>ABSOLUTE</code> - The program plays at a specific wall clock time. This setting can only be used for channels using the <code>LINEAR</code> <code>PlaybackMode</code>.</p>
    /// <p>Note the following considerations when using <code>ABSOLUTE</code> transitions:</p>
    /// <p>If the preceding program in the schedule has a duration that extends past the wall clock time, MediaTailor truncates the preceding program on a common segment boundary.</p>
    /// <p>If there are gaps in playback, MediaTailor plays the <code>FillerSlate</code> you configured for your linear channel.</p>
    /// <p> <code>RELATIVE</code> - The program is inserted into the schedule either before or after a program that you specify via <code>RelativePosition</code>.</p>
    pub fn r#type(&self) -> std::option::Option<&str> {
        self.r#type.as_deref()
    }
}
impl Transition {
    /// Creates a new builder-style object to manufacture [`Transition`](crate::types::Transition).
    pub fn builder() -> crate::types::builders::TransitionBuilder {
        crate::types::builders::TransitionBuilder::default()
    }
}

/// A builder for [`Transition`](crate::types::Transition).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TransitionBuilder {
    pub(crate) duration_millis: std::option::Option<i64>,
    pub(crate) relative_position: std::option::Option<crate::types::RelativePosition>,
    pub(crate) relative_program: std::option::Option<std::string::String>,
    pub(crate) scheduled_start_time_millis: std::option::Option<i64>,
    pub(crate) r#type: std::option::Option<std::string::String>,
}
impl TransitionBuilder {
    /// <p>The duration of the live program in seconds.</p>
    pub fn duration_millis(mut self, input: i64) -> Self {
        self.duration_millis = Some(input);
        self
    }
    /// <p>The duration of the live program in seconds.</p>
    pub fn set_duration_millis(mut self, input: std::option::Option<i64>) -> Self {
        self.duration_millis = input;
        self
    }
    /// <p>The position where this program will be inserted relative to the <code>RelativePosition</code>.</p>
    pub fn relative_position(mut self, input: crate::types::RelativePosition) -> Self {
        self.relative_position = Some(input);
        self
    }
    /// <p>The position where this program will be inserted relative to the <code>RelativePosition</code>.</p>
    pub fn set_relative_position(
        mut self,
        input: std::option::Option<crate::types::RelativePosition>,
    ) -> Self {
        self.relative_position = input;
        self
    }
    /// <p>The name of the program that this program will be inserted next to, as defined by <code>RelativePosition</code>.</p>
    pub fn relative_program(mut self, input: impl Into<std::string::String>) -> Self {
        self.relative_program = Some(input.into());
        self
    }
    /// <p>The name of the program that this program will be inserted next to, as defined by <code>RelativePosition</code>.</p>
    pub fn set_relative_program(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.relative_program = input;
        self
    }
    /// <p>The date and time that the program is scheduled to start, in epoch milliseconds.</p>
    pub fn scheduled_start_time_millis(mut self, input: i64) -> Self {
        self.scheduled_start_time_millis = Some(input);
        self
    }
    /// <p>The date and time that the program is scheduled to start, in epoch milliseconds.</p>
    pub fn set_scheduled_start_time_millis(mut self, input: std::option::Option<i64>) -> Self {
        self.scheduled_start_time_millis = input;
        self
    }
    /// <p>Defines when the program plays in the schedule. You can set the value to <code>ABSOLUTE</code> or <code>RELATIVE</code>.</p>
    /// <p> <code>ABSOLUTE</code> - The program plays at a specific wall clock time. This setting can only be used for channels using the <code>LINEAR</code> <code>PlaybackMode</code>.</p>
    /// <p>Note the following considerations when using <code>ABSOLUTE</code> transitions:</p>
    /// <p>If the preceding program in the schedule has a duration that extends past the wall clock time, MediaTailor truncates the preceding program on a common segment boundary.</p>
    /// <p>If there are gaps in playback, MediaTailor plays the <code>FillerSlate</code> you configured for your linear channel.</p>
    /// <p> <code>RELATIVE</code> - The program is inserted into the schedule either before or after a program that you specify via <code>RelativePosition</code>.</p>
    pub fn r#type(mut self, input: impl Into<std::string::String>) -> Self {
        self.r#type = Some(input.into());
        self
    }
    /// <p>Defines when the program plays in the schedule. You can set the value to <code>ABSOLUTE</code> or <code>RELATIVE</code>.</p>
    /// <p> <code>ABSOLUTE</code> - The program plays at a specific wall clock time. This setting can only be used for channels using the <code>LINEAR</code> <code>PlaybackMode</code>.</p>
    /// <p>Note the following considerations when using <code>ABSOLUTE</code> transitions:</p>
    /// <p>If the preceding program in the schedule has a duration that extends past the wall clock time, MediaTailor truncates the preceding program on a common segment boundary.</p>
    /// <p>If there are gaps in playback, MediaTailor plays the <code>FillerSlate</code> you configured for your linear channel.</p>
    /// <p> <code>RELATIVE</code> - The program is inserted into the schedule either before or after a program that you specify via <code>RelativePosition</code>.</p>
    pub fn set_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.r#type = input;
        self
    }
    /// Consumes the builder and constructs a [`Transition`](crate::types::Transition).
    pub fn build(self) -> crate::types::Transition {
        crate::types::Transition {
            duration_millis: self.duration_millis.unwrap_or_default(),
            relative_position: self.relative_position,
            relative_program: self.relative_program,
            scheduled_start_time_millis: self.scheduled_start_time_millis.unwrap_or_default(),
            r#type: self.r#type,
        }
    }
}
