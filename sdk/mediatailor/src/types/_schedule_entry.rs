// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The properties for a schedule.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ScheduleEntry {
    /// <p>The approximate duration of this program, in seconds.</p>
    #[doc(hidden)]
    pub approximate_duration_seconds: i64,
    /// <p>The approximate time that the program will start playing.</p>
    #[doc(hidden)]
    pub approximate_start_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The ARN of the program.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The name of the channel that uses this schedule.</p>
    #[doc(hidden)]
    pub channel_name: std::option::Option<std::string::String>,
    /// <p>The name of the live source used for the program.</p>
    #[doc(hidden)]
    pub live_source_name: std::option::Option<std::string::String>,
    /// <p>The name of the program.</p>
    #[doc(hidden)]
    pub program_name: std::option::Option<std::string::String>,
    /// <p>The schedule's ad break properties.</p>
    #[doc(hidden)]
    pub schedule_ad_breaks: std::option::Option<std::vec::Vec<crate::types::ScheduleAdBreak>>,
    /// <p>The type of schedule entry.</p>
    #[doc(hidden)]
    pub schedule_entry_type: std::option::Option<crate::types::ScheduleEntryType>,
    /// <p>The name of the source location.</p>
    #[doc(hidden)]
    pub source_location_name: std::option::Option<std::string::String>,
    /// <p>The name of the VOD source.</p>
    #[doc(hidden)]
    pub vod_source_name: std::option::Option<std::string::String>,
}
impl ScheduleEntry {
    /// <p>The approximate duration of this program, in seconds.</p>
    pub fn approximate_duration_seconds(&self) -> i64 {
        self.approximate_duration_seconds
    }
    /// <p>The approximate time that the program will start playing.</p>
    pub fn approximate_start_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.approximate_start_time.as_ref()
    }
    /// <p>The ARN of the program.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The name of the channel that uses this schedule.</p>
    pub fn channel_name(&self) -> std::option::Option<&str> {
        self.channel_name.as_deref()
    }
    /// <p>The name of the live source used for the program.</p>
    pub fn live_source_name(&self) -> std::option::Option<&str> {
        self.live_source_name.as_deref()
    }
    /// <p>The name of the program.</p>
    pub fn program_name(&self) -> std::option::Option<&str> {
        self.program_name.as_deref()
    }
    /// <p>The schedule's ad break properties.</p>
    pub fn schedule_ad_breaks(&self) -> std::option::Option<&[crate::types::ScheduleAdBreak]> {
        self.schedule_ad_breaks.as_deref()
    }
    /// <p>The type of schedule entry.</p>
    pub fn schedule_entry_type(&self) -> std::option::Option<&crate::types::ScheduleEntryType> {
        self.schedule_entry_type.as_ref()
    }
    /// <p>The name of the source location.</p>
    pub fn source_location_name(&self) -> std::option::Option<&str> {
        self.source_location_name.as_deref()
    }
    /// <p>The name of the VOD source.</p>
    pub fn vod_source_name(&self) -> std::option::Option<&str> {
        self.vod_source_name.as_deref()
    }
}
impl ScheduleEntry {
    /// Creates a new builder-style object to manufacture [`ScheduleEntry`](crate::types::ScheduleEntry).
    pub fn builder() -> crate::types::builders::ScheduleEntryBuilder {
        crate::types::builders::ScheduleEntryBuilder::default()
    }
}

/// A builder for [`ScheduleEntry`](crate::types::ScheduleEntry).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ScheduleEntryBuilder {
    pub(crate) approximate_duration_seconds: std::option::Option<i64>,
    pub(crate) approximate_start_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) channel_name: std::option::Option<std::string::String>,
    pub(crate) live_source_name: std::option::Option<std::string::String>,
    pub(crate) program_name: std::option::Option<std::string::String>,
    pub(crate) schedule_ad_breaks:
        std::option::Option<std::vec::Vec<crate::types::ScheduleAdBreak>>,
    pub(crate) schedule_entry_type: std::option::Option<crate::types::ScheduleEntryType>,
    pub(crate) source_location_name: std::option::Option<std::string::String>,
    pub(crate) vod_source_name: std::option::Option<std::string::String>,
}
impl ScheduleEntryBuilder {
    /// <p>The approximate duration of this program, in seconds.</p>
    pub fn approximate_duration_seconds(mut self, input: i64) -> Self {
        self.approximate_duration_seconds = Some(input);
        self
    }
    /// <p>The approximate duration of this program, in seconds.</p>
    pub fn set_approximate_duration_seconds(mut self, input: std::option::Option<i64>) -> Self {
        self.approximate_duration_seconds = input;
        self
    }
    /// <p>The approximate time that the program will start playing.</p>
    pub fn approximate_start_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.approximate_start_time = Some(input);
        self
    }
    /// <p>The approximate time that the program will start playing.</p>
    pub fn set_approximate_start_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.approximate_start_time = input;
        self
    }
    /// <p>The ARN of the program.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The ARN of the program.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The name of the channel that uses this schedule.</p>
    pub fn channel_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.channel_name = Some(input.into());
        self
    }
    /// <p>The name of the channel that uses this schedule.</p>
    pub fn set_channel_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.channel_name = input;
        self
    }
    /// <p>The name of the live source used for the program.</p>
    pub fn live_source_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.live_source_name = Some(input.into());
        self
    }
    /// <p>The name of the live source used for the program.</p>
    pub fn set_live_source_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.live_source_name = input;
        self
    }
    /// <p>The name of the program.</p>
    pub fn program_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.program_name = Some(input.into());
        self
    }
    /// <p>The name of the program.</p>
    pub fn set_program_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.program_name = input;
        self
    }
    /// Appends an item to `schedule_ad_breaks`.
    ///
    /// To override the contents of this collection use [`set_schedule_ad_breaks`](Self::set_schedule_ad_breaks).
    ///
    /// <p>The schedule's ad break properties.</p>
    pub fn schedule_ad_breaks(mut self, input: crate::types::ScheduleAdBreak) -> Self {
        let mut v = self.schedule_ad_breaks.unwrap_or_default();
        v.push(input);
        self.schedule_ad_breaks = Some(v);
        self
    }
    /// <p>The schedule's ad break properties.</p>
    pub fn set_schedule_ad_breaks(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ScheduleAdBreak>>,
    ) -> Self {
        self.schedule_ad_breaks = input;
        self
    }
    /// <p>The type of schedule entry.</p>
    pub fn schedule_entry_type(mut self, input: crate::types::ScheduleEntryType) -> Self {
        self.schedule_entry_type = Some(input);
        self
    }
    /// <p>The type of schedule entry.</p>
    pub fn set_schedule_entry_type(
        mut self,
        input: std::option::Option<crate::types::ScheduleEntryType>,
    ) -> Self {
        self.schedule_entry_type = input;
        self
    }
    /// <p>The name of the source location.</p>
    pub fn source_location_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.source_location_name = Some(input.into());
        self
    }
    /// <p>The name of the source location.</p>
    pub fn set_source_location_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.source_location_name = input;
        self
    }
    /// <p>The name of the VOD source.</p>
    pub fn vod_source_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.vod_source_name = Some(input.into());
        self
    }
    /// <p>The name of the VOD source.</p>
    pub fn set_vod_source_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.vod_source_name = input;
        self
    }
    /// Consumes the builder and constructs a [`ScheduleEntry`](crate::types::ScheduleEntry).
    pub fn build(self) -> crate::types::ScheduleEntry {
        crate::types::ScheduleEntry {
            approximate_duration_seconds: self.approximate_duration_seconds.unwrap_or_default(),
            approximate_start_time: self.approximate_start_time,
            arn: self.arn,
            channel_name: self.channel_name,
            live_source_name: self.live_source_name,
            program_name: self.program_name,
            schedule_ad_breaks: self.schedule_ad_breaks,
            schedule_entry_type: self.schedule_entry_type,
            source_location_name: self.source_location_name,
            vod_source_name: self.vod_source_name,
        }
    }
}
