// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The properties for a schedule.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ScheduleEntry {
    /// <p>The approximate duration of this program, in seconds.</p>
    pub approximate_duration_seconds: i64,
    /// <p>The approximate time that the program will start playing.</p>
    pub approximate_start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The ARN of the program.</p>
    pub arn: ::std::string::String,
    /// <p>The name of the channel that uses this schedule.</p>
    pub channel_name: ::std::string::String,
    /// <p>The name of the live source used for the program.</p>
    pub live_source_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of the program.</p>
    pub program_name: ::std::string::String,
    /// <p>The schedule's ad break properties.</p>
    pub schedule_ad_breaks: ::std::option::Option<::std::vec::Vec<crate::types::ScheduleAdBreak>>,
    /// <p>The type of schedule entry.</p>
    pub schedule_entry_type: ::std::option::Option<crate::types::ScheduleEntryType>,
    /// <p>The name of the source location.</p>
    pub source_location_name: ::std::string::String,
    /// <p>The name of the VOD source.</p>
    pub vod_source_name: ::std::option::Option<::std::string::String>,
}
impl ScheduleEntry {
    /// <p>The approximate duration of this program, in seconds.</p>
    pub fn approximate_duration_seconds(&self) -> i64 {
        self.approximate_duration_seconds
    }
    /// <p>The approximate time that the program will start playing.</p>
    pub fn approximate_start_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.approximate_start_time.as_ref()
    }
    /// <p>The ARN of the program.</p>
    pub fn arn(&self) -> &str {
        use std::ops::Deref;
        self.arn.deref()
    }
    /// <p>The name of the channel that uses this schedule.</p>
    pub fn channel_name(&self) -> &str {
        use std::ops::Deref;
        self.channel_name.deref()
    }
    /// <p>The name of the live source used for the program.</p>
    pub fn live_source_name(&self) -> ::std::option::Option<&str> {
        self.live_source_name.as_deref()
    }
    /// <p>The name of the program.</p>
    pub fn program_name(&self) -> &str {
        use std::ops::Deref;
        self.program_name.deref()
    }
    /// <p>The schedule's ad break properties.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.schedule_ad_breaks.is_none()`.
    pub fn schedule_ad_breaks(&self) -> &[crate::types::ScheduleAdBreak] {
        self.schedule_ad_breaks.as_deref().unwrap_or_default()
    }
    /// <p>The type of schedule entry.</p>
    pub fn schedule_entry_type(&self) -> ::std::option::Option<&crate::types::ScheduleEntryType> {
        self.schedule_entry_type.as_ref()
    }
    /// <p>The name of the source location.</p>
    pub fn source_location_name(&self) -> &str {
        use std::ops::Deref;
        self.source_location_name.deref()
    }
    /// <p>The name of the VOD source.</p>
    pub fn vod_source_name(&self) -> ::std::option::Option<&str> {
        self.vod_source_name.as_deref()
    }
}
impl ScheduleEntry {
    /// Creates a new builder-style object to manufacture [`ScheduleEntry`](crate::types::ScheduleEntry).
    pub fn builder() -> crate::types::builders::ScheduleEntryBuilder {
        crate::types::builders::ScheduleEntryBuilder::default()
    }
}

/// A builder for [`ScheduleEntry`](crate::types::ScheduleEntry).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ScheduleEntryBuilder {
    pub(crate) approximate_duration_seconds: ::std::option::Option<i64>,
    pub(crate) approximate_start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) channel_name: ::std::option::Option<::std::string::String>,
    pub(crate) live_source_name: ::std::option::Option<::std::string::String>,
    pub(crate) program_name: ::std::option::Option<::std::string::String>,
    pub(crate) schedule_ad_breaks: ::std::option::Option<::std::vec::Vec<crate::types::ScheduleAdBreak>>,
    pub(crate) schedule_entry_type: ::std::option::Option<crate::types::ScheduleEntryType>,
    pub(crate) source_location_name: ::std::option::Option<::std::string::String>,
    pub(crate) vod_source_name: ::std::option::Option<::std::string::String>,
}
impl ScheduleEntryBuilder {
    /// <p>The approximate duration of this program, in seconds.</p>
    pub fn approximate_duration_seconds(mut self, input: i64) -> Self {
        self.approximate_duration_seconds = ::std::option::Option::Some(input);
        self
    }
    /// <p>The approximate duration of this program, in seconds.</p>
    pub fn set_approximate_duration_seconds(mut self, input: ::std::option::Option<i64>) -> Self {
        self.approximate_duration_seconds = input;
        self
    }
    /// <p>The approximate duration of this program, in seconds.</p>
    pub fn get_approximate_duration_seconds(&self) -> &::std::option::Option<i64> {
        &self.approximate_duration_seconds
    }
    /// <p>The approximate time that the program will start playing.</p>
    pub fn approximate_start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.approximate_start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The approximate time that the program will start playing.</p>
    pub fn set_approximate_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.approximate_start_time = input;
        self
    }
    /// <p>The approximate time that the program will start playing.</p>
    pub fn get_approximate_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.approximate_start_time
    }
    /// <p>The ARN of the program.</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the program.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The ARN of the program.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The name of the channel that uses this schedule.</p>
    /// This field is required.
    pub fn channel_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.channel_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the channel that uses this schedule.</p>
    pub fn set_channel_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.channel_name = input;
        self
    }
    /// <p>The name of the channel that uses this schedule.</p>
    pub fn get_channel_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.channel_name
    }
    /// <p>The name of the live source used for the program.</p>
    pub fn live_source_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.live_source_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the live source used for the program.</p>
    pub fn set_live_source_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.live_source_name = input;
        self
    }
    /// <p>The name of the live source used for the program.</p>
    pub fn get_live_source_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.live_source_name
    }
    /// <p>The name of the program.</p>
    /// This field is required.
    pub fn program_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.program_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the program.</p>
    pub fn set_program_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.program_name = input;
        self
    }
    /// <p>The name of the program.</p>
    pub fn get_program_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.program_name
    }
    /// Appends an item to `schedule_ad_breaks`.
    ///
    /// To override the contents of this collection use [`set_schedule_ad_breaks`](Self::set_schedule_ad_breaks).
    ///
    /// <p>The schedule's ad break properties.</p>
    pub fn schedule_ad_breaks(mut self, input: crate::types::ScheduleAdBreak) -> Self {
        let mut v = self.schedule_ad_breaks.unwrap_or_default();
        v.push(input);
        self.schedule_ad_breaks = ::std::option::Option::Some(v);
        self
    }
    /// <p>The schedule's ad break properties.</p>
    pub fn set_schedule_ad_breaks(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ScheduleAdBreak>>) -> Self {
        self.schedule_ad_breaks = input;
        self
    }
    /// <p>The schedule's ad break properties.</p>
    pub fn get_schedule_ad_breaks(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ScheduleAdBreak>> {
        &self.schedule_ad_breaks
    }
    /// <p>The type of schedule entry.</p>
    pub fn schedule_entry_type(mut self, input: crate::types::ScheduleEntryType) -> Self {
        self.schedule_entry_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of schedule entry.</p>
    pub fn set_schedule_entry_type(mut self, input: ::std::option::Option<crate::types::ScheduleEntryType>) -> Self {
        self.schedule_entry_type = input;
        self
    }
    /// <p>The type of schedule entry.</p>
    pub fn get_schedule_entry_type(&self) -> &::std::option::Option<crate::types::ScheduleEntryType> {
        &self.schedule_entry_type
    }
    /// <p>The name of the source location.</p>
    /// This field is required.
    pub fn source_location_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_location_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the source location.</p>
    pub fn set_source_location_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_location_name = input;
        self
    }
    /// <p>The name of the source location.</p>
    pub fn get_source_location_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_location_name
    }
    /// <p>The name of the VOD source.</p>
    pub fn vod_source_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vod_source_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the VOD source.</p>
    pub fn set_vod_source_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vod_source_name = input;
        self
    }
    /// <p>The name of the VOD source.</p>
    pub fn get_vod_source_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.vod_source_name
    }
    /// Consumes the builder and constructs a [`ScheduleEntry`](crate::types::ScheduleEntry).
    /// This method will fail if any of the following fields are not set:
    /// - [`arn`](crate::types::builders::ScheduleEntryBuilder::arn)
    /// - [`channel_name`](crate::types::builders::ScheduleEntryBuilder::channel_name)
    /// - [`program_name`](crate::types::builders::ScheduleEntryBuilder::program_name)
    /// - [`source_location_name`](crate::types::builders::ScheduleEntryBuilder::source_location_name)
    pub fn build(self) -> ::std::result::Result<crate::types::ScheduleEntry, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ScheduleEntry {
            approximate_duration_seconds: self.approximate_duration_seconds.unwrap_or_default(),
            approximate_start_time: self.approximate_start_time,
            arn: self.arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "arn",
                    "arn was not specified but it is required when building ScheduleEntry",
                )
            })?,
            channel_name: self.channel_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "channel_name",
                    "channel_name was not specified but it is required when building ScheduleEntry",
                )
            })?,
            live_source_name: self.live_source_name,
            program_name: self.program_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "program_name",
                    "program_name was not specified but it is required when building ScheduleEntry",
                )
            })?,
            schedule_ad_breaks: self.schedule_ad_breaks,
            schedule_entry_type: self.schedule_entry_type,
            source_location_name: self.source_location_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "source_location_name",
                    "source_location_name was not specified but it is required when building ScheduleEntry",
                )
            })?,
            vod_source_name: self.vod_source_name,
        })
    }
}
