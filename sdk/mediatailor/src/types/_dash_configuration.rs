// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration for DASH content.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DashConfiguration {
    /// <p>The URL generated by MediaTailor to initiate a playback session. The session uses server-side reporting. This setting is ignored in PUT operations.</p>
    #[doc(hidden)]
    pub manifest_endpoint_prefix: std::option::Option<std::string::String>,
    /// <p>The setting that controls whether MediaTailor includes the Location tag in DASH manifests. MediaTailor populates the Location tag with the URL for manifest update requests, to be used by players that don't support sticky redirects. Disable this if you have CDN routing rules set up for accessing MediaTailor manifests, and you are either using client-side reporting or your players support sticky HTTP redirects. Valid values are <code>DISABLED</code> and <code>EMT_DEFAULT</code>. The <code>EMT_DEFAULT</code> setting enables the inclusion of the tag and is the default value.</p>
    #[doc(hidden)]
    pub mpd_location: std::option::Option<std::string::String>,
    /// <p>The setting that controls whether MediaTailor handles manifests from the origin server as multi-period manifests or single-period manifests. If your origin server produces single-period manifests, set this to <code>SINGLE_PERIOD</code>. The default setting is <code>MULTI_PERIOD</code>. For multi-period manifests, omit this setting or set it to <code>MULTI_PERIOD</code>.</p>
    #[doc(hidden)]
    pub origin_manifest_type: std::option::Option<crate::types::OriginManifestType>,
}
impl DashConfiguration {
    /// <p>The URL generated by MediaTailor to initiate a playback session. The session uses server-side reporting. This setting is ignored in PUT operations.</p>
    pub fn manifest_endpoint_prefix(&self) -> std::option::Option<&str> {
        self.manifest_endpoint_prefix.as_deref()
    }
    /// <p>The setting that controls whether MediaTailor includes the Location tag in DASH manifests. MediaTailor populates the Location tag with the URL for manifest update requests, to be used by players that don't support sticky redirects. Disable this if you have CDN routing rules set up for accessing MediaTailor manifests, and you are either using client-side reporting or your players support sticky HTTP redirects. Valid values are <code>DISABLED</code> and <code>EMT_DEFAULT</code>. The <code>EMT_DEFAULT</code> setting enables the inclusion of the tag and is the default value.</p>
    pub fn mpd_location(&self) -> std::option::Option<&str> {
        self.mpd_location.as_deref()
    }
    /// <p>The setting that controls whether MediaTailor handles manifests from the origin server as multi-period manifests or single-period manifests. If your origin server produces single-period manifests, set this to <code>SINGLE_PERIOD</code>. The default setting is <code>MULTI_PERIOD</code>. For multi-period manifests, omit this setting or set it to <code>MULTI_PERIOD</code>.</p>
    pub fn origin_manifest_type(&self) -> std::option::Option<&crate::types::OriginManifestType> {
        self.origin_manifest_type.as_ref()
    }
}
impl DashConfiguration {
    /// Creates a new builder-style object to manufacture [`DashConfiguration`](crate::types::DashConfiguration).
    pub fn builder() -> crate::types::builders::DashConfigurationBuilder {
        crate::types::builders::DashConfigurationBuilder::default()
    }
}

/// A builder for [`DashConfiguration`](crate::types::DashConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DashConfigurationBuilder {
    pub(crate) manifest_endpoint_prefix: std::option::Option<std::string::String>,
    pub(crate) mpd_location: std::option::Option<std::string::String>,
    pub(crate) origin_manifest_type: std::option::Option<crate::types::OriginManifestType>,
}
impl DashConfigurationBuilder {
    /// <p>The URL generated by MediaTailor to initiate a playback session. The session uses server-side reporting. This setting is ignored in PUT operations.</p>
    pub fn manifest_endpoint_prefix(mut self, input: impl Into<std::string::String>) -> Self {
        self.manifest_endpoint_prefix = Some(input.into());
        self
    }
    /// <p>The URL generated by MediaTailor to initiate a playback session. The session uses server-side reporting. This setting is ignored in PUT operations.</p>
    pub fn set_manifest_endpoint_prefix(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.manifest_endpoint_prefix = input;
        self
    }
    /// <p>The setting that controls whether MediaTailor includes the Location tag in DASH manifests. MediaTailor populates the Location tag with the URL for manifest update requests, to be used by players that don't support sticky redirects. Disable this if you have CDN routing rules set up for accessing MediaTailor manifests, and you are either using client-side reporting or your players support sticky HTTP redirects. Valid values are <code>DISABLED</code> and <code>EMT_DEFAULT</code>. The <code>EMT_DEFAULT</code> setting enables the inclusion of the tag and is the default value.</p>
    pub fn mpd_location(mut self, input: impl Into<std::string::String>) -> Self {
        self.mpd_location = Some(input.into());
        self
    }
    /// <p>The setting that controls whether MediaTailor includes the Location tag in DASH manifests. MediaTailor populates the Location tag with the URL for manifest update requests, to be used by players that don't support sticky redirects. Disable this if you have CDN routing rules set up for accessing MediaTailor manifests, and you are either using client-side reporting or your players support sticky HTTP redirects. Valid values are <code>DISABLED</code> and <code>EMT_DEFAULT</code>. The <code>EMT_DEFAULT</code> setting enables the inclusion of the tag and is the default value.</p>
    pub fn set_mpd_location(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.mpd_location = input;
        self
    }
    /// <p>The setting that controls whether MediaTailor handles manifests from the origin server as multi-period manifests or single-period manifests. If your origin server produces single-period manifests, set this to <code>SINGLE_PERIOD</code>. The default setting is <code>MULTI_PERIOD</code>. For multi-period manifests, omit this setting or set it to <code>MULTI_PERIOD</code>.</p>
    pub fn origin_manifest_type(mut self, input: crate::types::OriginManifestType) -> Self {
        self.origin_manifest_type = Some(input);
        self
    }
    /// <p>The setting that controls whether MediaTailor handles manifests from the origin server as multi-period manifests or single-period manifests. If your origin server produces single-period manifests, set this to <code>SINGLE_PERIOD</code>. The default setting is <code>MULTI_PERIOD</code>. For multi-period manifests, omit this setting or set it to <code>MULTI_PERIOD</code>.</p>
    pub fn set_origin_manifest_type(
        mut self,
        input: std::option::Option<crate::types::OriginManifestType>,
    ) -> Self {
        self.origin_manifest_type = input;
        self
    }
    /// Consumes the builder and constructs a [`DashConfiguration`](crate::types::DashConfiguration).
    pub fn build(self) -> crate::types::DashConfiguration {
        crate::types::DashConfiguration {
            manifest_endpoint_prefix: self.manifest_endpoint_prefix,
            mpd_location: self.mpd_location,
            origin_manifest_type: self.origin_manifest_type,
        }
    }
}
