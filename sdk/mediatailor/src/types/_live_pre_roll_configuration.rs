// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration for pre-roll ad insertion.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct LivePreRollConfiguration {
    /// <p>The URL for the ad decision server (ADS) for pre-roll ads. This includes the specification of static parameters and placeholders for dynamic parameters. AWS Elemental MediaTailor substitutes player-specific and session-specific parameters as needed when calling the ADS. Alternately, for testing, you can provide a static VAST URL. The maximum length is 25,000 characters.</p>
    #[doc(hidden)]
    pub ad_decision_server_url: std::option::Option<std::string::String>,
    /// <p>The maximum allowed duration for the pre-roll ad avail. AWS Elemental MediaTailor won't play pre-roll ads to exceed this duration, regardless of the total duration of ads that the ADS returns.</p>
    #[doc(hidden)]
    pub max_duration_seconds: i32,
}
impl LivePreRollConfiguration {
    /// <p>The URL for the ad decision server (ADS) for pre-roll ads. This includes the specification of static parameters and placeholders for dynamic parameters. AWS Elemental MediaTailor substitutes player-specific and session-specific parameters as needed when calling the ADS. Alternately, for testing, you can provide a static VAST URL. The maximum length is 25,000 characters.</p>
    pub fn ad_decision_server_url(&self) -> std::option::Option<&str> {
        self.ad_decision_server_url.as_deref()
    }
    /// <p>The maximum allowed duration for the pre-roll ad avail. AWS Elemental MediaTailor won't play pre-roll ads to exceed this duration, regardless of the total duration of ads that the ADS returns.</p>
    pub fn max_duration_seconds(&self) -> i32 {
        self.max_duration_seconds
    }
}
impl LivePreRollConfiguration {
    /// Creates a new builder-style object to manufacture [`LivePreRollConfiguration`](crate::types::LivePreRollConfiguration).
    pub fn builder() -> crate::types::builders::LivePreRollConfigurationBuilder {
        crate::types::builders::LivePreRollConfigurationBuilder::default()
    }
}

/// A builder for [`LivePreRollConfiguration`](crate::types::LivePreRollConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct LivePreRollConfigurationBuilder {
    pub(crate) ad_decision_server_url: std::option::Option<std::string::String>,
    pub(crate) max_duration_seconds: std::option::Option<i32>,
}
impl LivePreRollConfigurationBuilder {
    /// <p>The URL for the ad decision server (ADS) for pre-roll ads. This includes the specification of static parameters and placeholders for dynamic parameters. AWS Elemental MediaTailor substitutes player-specific and session-specific parameters as needed when calling the ADS. Alternately, for testing, you can provide a static VAST URL. The maximum length is 25,000 characters.</p>
    pub fn ad_decision_server_url(mut self, input: impl Into<std::string::String>) -> Self {
        self.ad_decision_server_url = Some(input.into());
        self
    }
    /// <p>The URL for the ad decision server (ADS) for pre-roll ads. This includes the specification of static parameters and placeholders for dynamic parameters. AWS Elemental MediaTailor substitutes player-specific and session-specific parameters as needed when calling the ADS. Alternately, for testing, you can provide a static VAST URL. The maximum length is 25,000 characters.</p>
    pub fn set_ad_decision_server_url(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.ad_decision_server_url = input;
        self
    }
    /// <p>The maximum allowed duration for the pre-roll ad avail. AWS Elemental MediaTailor won't play pre-roll ads to exceed this duration, regardless of the total duration of ads that the ADS returns.</p>
    pub fn max_duration_seconds(mut self, input: i32) -> Self {
        self.max_duration_seconds = Some(input);
        self
    }
    /// <p>The maximum allowed duration for the pre-roll ad avail. AWS Elemental MediaTailor won't play pre-roll ads to exceed this duration, regardless of the total duration of ads that the ADS returns.</p>
    pub fn set_max_duration_seconds(mut self, input: std::option::Option<i32>) -> Self {
        self.max_duration_seconds = input;
        self
    }
    /// Consumes the builder and constructs a [`LivePreRollConfiguration`](crate::types::LivePreRollConfiguration).
    pub fn build(self) -> crate::types::LivePreRollConfiguration {
        crate::types::LivePreRollConfiguration {
            ad_decision_server_url: self.ad_decision_server_url,
            max_duration_seconds: self.max_duration_seconds.unwrap_or_default(),
        }
    }
}
