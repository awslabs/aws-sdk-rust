// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The segment delivery configuration settings.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SegmentDeliveryConfiguration {
    /// <p>The base URL of the host or path of the segment delivery server that you're using to serve segments. This is typically a content delivery network (CDN). The URL can be absolute or relative. To use an absolute URL include the protocol, such as <code>https://example.com/some/path</code>. To use a relative URL specify the relative path, such as <code>/some/path*</code>.</p>
    #[doc(hidden)]
    pub base_url: std::option::Option<std::string::String>,
    /// <p>A unique identifier used to distinguish between multiple segment delivery configurations in a source location.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
}
impl SegmentDeliveryConfiguration {
    /// <p>The base URL of the host or path of the segment delivery server that you're using to serve segments. This is typically a content delivery network (CDN). The URL can be absolute or relative. To use an absolute URL include the protocol, such as <code>https://example.com/some/path</code>. To use a relative URL specify the relative path, such as <code>/some/path*</code>.</p>
    pub fn base_url(&self) -> std::option::Option<&str> {
        self.base_url.as_deref()
    }
    /// <p>A unique identifier used to distinguish between multiple segment delivery configurations in a source location.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
}
impl SegmentDeliveryConfiguration {
    /// Creates a new builder-style object to manufacture [`SegmentDeliveryConfiguration`](crate::types::SegmentDeliveryConfiguration).
    pub fn builder() -> crate::types::builders::SegmentDeliveryConfigurationBuilder {
        crate::types::builders::SegmentDeliveryConfigurationBuilder::default()
    }
}

/// A builder for [`SegmentDeliveryConfiguration`](crate::types::SegmentDeliveryConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SegmentDeliveryConfigurationBuilder {
    pub(crate) base_url: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
}
impl SegmentDeliveryConfigurationBuilder {
    /// <p>The base URL of the host or path of the segment delivery server that you're using to serve segments. This is typically a content delivery network (CDN). The URL can be absolute or relative. To use an absolute URL include the protocol, such as <code>https://example.com/some/path</code>. To use a relative URL specify the relative path, such as <code>/some/path*</code>.</p>
    pub fn base_url(mut self, input: impl Into<std::string::String>) -> Self {
        self.base_url = Some(input.into());
        self
    }
    /// <p>The base URL of the host or path of the segment delivery server that you're using to serve segments. This is typically a content delivery network (CDN). The URL can be absolute or relative. To use an absolute URL include the protocol, such as <code>https://example.com/some/path</code>. To use a relative URL specify the relative path, such as <code>/some/path*</code>.</p>
    pub fn set_base_url(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.base_url = input;
        self
    }
    /// <p>A unique identifier used to distinguish between multiple segment delivery configurations in a source location.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>A unique identifier used to distinguish between multiple segment delivery configurations in a source location.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// Consumes the builder and constructs a [`SegmentDeliveryConfiguration`](crate::types::SegmentDeliveryConfiguration).
    pub fn build(self) -> crate::types::SegmentDeliveryConfiguration {
        crate::types::SegmentDeliveryConfiguration {
            base_url: self.base_url,
            name: self.name,
        }
    }
}
