// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The schedule's ad break properties.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ScheduleAdBreak {
    /// <p>The approximate duration of the ad break, in seconds.</p>
    #[doc(hidden)]
    pub approximate_duration_seconds: i64,
    /// <p>The approximate time that the ad will start playing.</p>
    #[doc(hidden)]
    pub approximate_start_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The name of the source location containing the VOD source used for the ad break.</p>
    #[doc(hidden)]
    pub source_location_name: std::option::Option<std::string::String>,
    /// <p>The name of the VOD source used for the ad break.</p>
    #[doc(hidden)]
    pub vod_source_name: std::option::Option<std::string::String>,
}
impl ScheduleAdBreak {
    /// <p>The approximate duration of the ad break, in seconds.</p>
    pub fn approximate_duration_seconds(&self) -> i64 {
        self.approximate_duration_seconds
    }
    /// <p>The approximate time that the ad will start playing.</p>
    pub fn approximate_start_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.approximate_start_time.as_ref()
    }
    /// <p>The name of the source location containing the VOD source used for the ad break.</p>
    pub fn source_location_name(&self) -> std::option::Option<&str> {
        self.source_location_name.as_deref()
    }
    /// <p>The name of the VOD source used for the ad break.</p>
    pub fn vod_source_name(&self) -> std::option::Option<&str> {
        self.vod_source_name.as_deref()
    }
}
impl ScheduleAdBreak {
    /// Creates a new builder-style object to manufacture [`ScheduleAdBreak`](crate::types::ScheduleAdBreak).
    pub fn builder() -> crate::types::builders::ScheduleAdBreakBuilder {
        crate::types::builders::ScheduleAdBreakBuilder::default()
    }
}

/// A builder for [`ScheduleAdBreak`](crate::types::ScheduleAdBreak).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ScheduleAdBreakBuilder {
    pub(crate) approximate_duration_seconds: std::option::Option<i64>,
    pub(crate) approximate_start_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) source_location_name: std::option::Option<std::string::String>,
    pub(crate) vod_source_name: std::option::Option<std::string::String>,
}
impl ScheduleAdBreakBuilder {
    /// <p>The approximate duration of the ad break, in seconds.</p>
    pub fn approximate_duration_seconds(mut self, input: i64) -> Self {
        self.approximate_duration_seconds = Some(input);
        self
    }
    /// <p>The approximate duration of the ad break, in seconds.</p>
    pub fn set_approximate_duration_seconds(mut self, input: std::option::Option<i64>) -> Self {
        self.approximate_duration_seconds = input;
        self
    }
    /// <p>The approximate time that the ad will start playing.</p>
    pub fn approximate_start_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.approximate_start_time = Some(input);
        self
    }
    /// <p>The approximate time that the ad will start playing.</p>
    pub fn set_approximate_start_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.approximate_start_time = input;
        self
    }
    /// <p>The name of the source location containing the VOD source used for the ad break.</p>
    pub fn source_location_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.source_location_name = Some(input.into());
        self
    }
    /// <p>The name of the source location containing the VOD source used for the ad break.</p>
    pub fn set_source_location_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.source_location_name = input;
        self
    }
    /// <p>The name of the VOD source used for the ad break.</p>
    pub fn vod_source_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.vod_source_name = Some(input.into());
        self
    }
    /// <p>The name of the VOD source used for the ad break.</p>
    pub fn set_vod_source_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.vod_source_name = input;
        self
    }
    /// Consumes the builder and constructs a [`ScheduleAdBreak`](crate::types::ScheduleAdBreak).
    pub fn build(self) -> crate::types::ScheduleAdBreak {
        crate::types::ScheduleAdBreak {
            approximate_duration_seconds: self.approximate_duration_seconds.unwrap_or_default(),
            approximate_start_time: self.approximate_start_time,
            source_location_name: self.source_location_name,
            vod_source_name: self.vod_source_name,
        }
    }
}
