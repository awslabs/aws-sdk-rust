// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration for manifest processing rules. Manifest processing rules enable customization of the personalized manifests created by MediaTailor.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ManifestProcessingRules {
    /// <p>For HLS, when set to <code>true</code>, MediaTailor passes through <code>EXT-X-CUE-IN</code>, <code>EXT-X-CUE-OUT</code>, and <code>EXT-X-SPLICEPOINT-SCTE35</code> ad markers from the origin manifest to the MediaTailor personalized manifest.</p>
    /// <p>No logic is applied to these ad markers. For example, if <code>EXT-X-CUE-OUT</code> has a value of <code>60</code>, but no ads are filled for that ad break, MediaTailor will not set the value to <code>0</code>.</p>
    #[doc(hidden)]
    pub ad_marker_passthrough: std::option::Option<crate::types::AdMarkerPassthrough>,
}
impl ManifestProcessingRules {
    /// <p>For HLS, when set to <code>true</code>, MediaTailor passes through <code>EXT-X-CUE-IN</code>, <code>EXT-X-CUE-OUT</code>, and <code>EXT-X-SPLICEPOINT-SCTE35</code> ad markers from the origin manifest to the MediaTailor personalized manifest.</p>
    /// <p>No logic is applied to these ad markers. For example, if <code>EXT-X-CUE-OUT</code> has a value of <code>60</code>, but no ads are filled for that ad break, MediaTailor will not set the value to <code>0</code>.</p>
    pub fn ad_marker_passthrough(&self) -> std::option::Option<&crate::types::AdMarkerPassthrough> {
        self.ad_marker_passthrough.as_ref()
    }
}
impl ManifestProcessingRules {
    /// Creates a new builder-style object to manufacture [`ManifestProcessingRules`](crate::types::ManifestProcessingRules).
    pub fn builder() -> crate::types::builders::ManifestProcessingRulesBuilder {
        crate::types::builders::ManifestProcessingRulesBuilder::default()
    }
}

/// A builder for [`ManifestProcessingRules`](crate::types::ManifestProcessingRules).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ManifestProcessingRulesBuilder {
    pub(crate) ad_marker_passthrough: std::option::Option<crate::types::AdMarkerPassthrough>,
}
impl ManifestProcessingRulesBuilder {
    /// <p>For HLS, when set to <code>true</code>, MediaTailor passes through <code>EXT-X-CUE-IN</code>, <code>EXT-X-CUE-OUT</code>, and <code>EXT-X-SPLICEPOINT-SCTE35</code> ad markers from the origin manifest to the MediaTailor personalized manifest.</p>
    /// <p>No logic is applied to these ad markers. For example, if <code>EXT-X-CUE-OUT</code> has a value of <code>60</code>, but no ads are filled for that ad break, MediaTailor will not set the value to <code>0</code>.</p>
    pub fn ad_marker_passthrough(mut self, input: crate::types::AdMarkerPassthrough) -> Self {
        self.ad_marker_passthrough = Some(input);
        self
    }
    /// <p>For HLS, when set to <code>true</code>, MediaTailor passes through <code>EXT-X-CUE-IN</code>, <code>EXT-X-CUE-OUT</code>, and <code>EXT-X-SPLICEPOINT-SCTE35</code> ad markers from the origin manifest to the MediaTailor personalized manifest.</p>
    /// <p>No logic is applied to these ad markers. For example, if <code>EXT-X-CUE-OUT</code> has a value of <code>60</code>, but no ads are filled for that ad break, MediaTailor will not set the value to <code>0</code>.</p>
    pub fn set_ad_marker_passthrough(
        mut self,
        input: std::option::Option<crate::types::AdMarkerPassthrough>,
    ) -> Self {
        self.ad_marker_passthrough = input;
        self
    }
    /// Consumes the builder and constructs a [`ManifestProcessingRules`](crate::types::ManifestProcessingRules).
    pub fn build(self) -> crate::types::ManifestProcessingRules {
        crate::types::ManifestProcessingRules {
            ad_marker_passthrough: self.ad_marker_passthrough,
        }
    }
}
