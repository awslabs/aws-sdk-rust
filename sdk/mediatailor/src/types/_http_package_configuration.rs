// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The HTTP package configuration properties for the requested VOD source.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct HttpPackageConfiguration {
    /// <p>The relative path to the URL for this VOD source. This is combined with <code>SourceLocation::HttpConfiguration::BaseUrl</code> to form a valid URL.</p>
    pub path: ::std::string::String,
    /// <p>The name of the source group. This has to match one of the <code>Channel::Outputs::SourceGroup</code>.</p>
    pub source_group: ::std::string::String,
    /// <p>The streaming protocol for this package configuration. Supported values are <code>HLS</code> and <code>DASH</code>.</p>
    pub r#type: crate::types::Type,
}
impl HttpPackageConfiguration {
    /// <p>The relative path to the URL for this VOD source. This is combined with <code>SourceLocation::HttpConfiguration::BaseUrl</code> to form a valid URL.</p>
    pub fn path(&self) -> &str {
        use std::ops::Deref;
        self.path.deref()
    }
    /// <p>The name of the source group. This has to match one of the <code>Channel::Outputs::SourceGroup</code>.</p>
    pub fn source_group(&self) -> &str {
        use std::ops::Deref;
        self.source_group.deref()
    }
    /// <p>The streaming protocol for this package configuration. Supported values are <code>HLS</code> and <code>DASH</code>.</p>
    pub fn r#type(&self) -> &crate::types::Type {
        &self.r#type
    }
}
impl HttpPackageConfiguration {
    /// Creates a new builder-style object to manufacture [`HttpPackageConfiguration`](crate::types::HttpPackageConfiguration).
    pub fn builder() -> crate::types::builders::HttpPackageConfigurationBuilder {
        crate::types::builders::HttpPackageConfigurationBuilder::default()
    }
}

/// A builder for [`HttpPackageConfiguration`](crate::types::HttpPackageConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct HttpPackageConfigurationBuilder {
    pub(crate) path: ::std::option::Option<::std::string::String>,
    pub(crate) source_group: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<crate::types::Type>,
}
impl HttpPackageConfigurationBuilder {
    /// <p>The relative path to the URL for this VOD source. This is combined with <code>SourceLocation::HttpConfiguration::BaseUrl</code> to form a valid URL.</p>
    /// This field is required.
    pub fn path(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.path = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The relative path to the URL for this VOD source. This is combined with <code>SourceLocation::HttpConfiguration::BaseUrl</code> to form a valid URL.</p>
    pub fn set_path(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.path = input;
        self
    }
    /// <p>The relative path to the URL for this VOD source. This is combined with <code>SourceLocation::HttpConfiguration::BaseUrl</code> to form a valid URL.</p>
    pub fn get_path(&self) -> &::std::option::Option<::std::string::String> {
        &self.path
    }
    /// <p>The name of the source group. This has to match one of the <code>Channel::Outputs::SourceGroup</code>.</p>
    /// This field is required.
    pub fn source_group(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_group = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the source group. This has to match one of the <code>Channel::Outputs::SourceGroup</code>.</p>
    pub fn set_source_group(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_group = input;
        self
    }
    /// <p>The name of the source group. This has to match one of the <code>Channel::Outputs::SourceGroup</code>.</p>
    pub fn get_source_group(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_group
    }
    /// <p>The streaming protocol for this package configuration. Supported values are <code>HLS</code> and <code>DASH</code>.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::Type) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The streaming protocol for this package configuration. Supported values are <code>HLS</code> and <code>DASH</code>.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::Type>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The streaming protocol for this package configuration. Supported values are <code>HLS</code> and <code>DASH</code>.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::Type> {
        &self.r#type
    }
    /// Consumes the builder and constructs a [`HttpPackageConfiguration`](crate::types::HttpPackageConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`path`](crate::types::builders::HttpPackageConfigurationBuilder::path)
    /// - [`source_group`](crate::types::builders::HttpPackageConfigurationBuilder::source_group)
    /// - [`r#type`](crate::types::builders::HttpPackageConfigurationBuilder::r#type)
    pub fn build(self) -> ::std::result::Result<crate::types::HttpPackageConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::HttpPackageConfiguration {
            path: self.path.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "path",
                    "path was not specified but it is required when building HttpPackageConfiguration",
                )
            })?,
            source_group: self.source_group.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "source_group",
                    "source_group was not specified but it is required when building HttpPackageConfiguration",
                )
            })?,
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building HttpPackageConfiguration",
                )
            })?,
        })
    }
}
