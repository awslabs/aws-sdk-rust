// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The HTTP package configuration properties for the requested VOD source.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct HttpPackageConfiguration {
    /// <p>The relative path to the URL for this VOD source. This is combined with <code>SourceLocation::HttpConfiguration::BaseUrl</code> to form a valid URL.</p>
    #[doc(hidden)]
    pub path: std::option::Option<std::string::String>,
    /// <p>The name of the source group. This has to match one of the <code>Channel::Outputs::SourceGroup</code>.</p>
    #[doc(hidden)]
    pub source_group: std::option::Option<std::string::String>,
    /// <p>The streaming protocol for this package configuration. Supported values are <code>HLS</code> and <code>DASH</code>.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::Type>,
}
impl HttpPackageConfiguration {
    /// <p>The relative path to the URL for this VOD source. This is combined with <code>SourceLocation::HttpConfiguration::BaseUrl</code> to form a valid URL.</p>
    pub fn path(&self) -> std::option::Option<&str> {
        self.path.as_deref()
    }
    /// <p>The name of the source group. This has to match one of the <code>Channel::Outputs::SourceGroup</code>.</p>
    pub fn source_group(&self) -> std::option::Option<&str> {
        self.source_group.as_deref()
    }
    /// <p>The streaming protocol for this package configuration. Supported values are <code>HLS</code> and <code>DASH</code>.</p>
    pub fn r#type(&self) -> std::option::Option<&crate::types::Type> {
        self.r#type.as_ref()
    }
}
impl HttpPackageConfiguration {
    /// Creates a new builder-style object to manufacture [`HttpPackageConfiguration`](crate::types::HttpPackageConfiguration).
    pub fn builder() -> crate::types::builders::HttpPackageConfigurationBuilder {
        crate::types::builders::HttpPackageConfigurationBuilder::default()
    }
}

/// A builder for [`HttpPackageConfiguration`](crate::types::HttpPackageConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct HttpPackageConfigurationBuilder {
    pub(crate) path: std::option::Option<std::string::String>,
    pub(crate) source_group: std::option::Option<std::string::String>,
    pub(crate) r#type: std::option::Option<crate::types::Type>,
}
impl HttpPackageConfigurationBuilder {
    /// <p>The relative path to the URL for this VOD source. This is combined with <code>SourceLocation::HttpConfiguration::BaseUrl</code> to form a valid URL.</p>
    pub fn path(mut self, input: impl Into<std::string::String>) -> Self {
        self.path = Some(input.into());
        self
    }
    /// <p>The relative path to the URL for this VOD source. This is combined with <code>SourceLocation::HttpConfiguration::BaseUrl</code> to form a valid URL.</p>
    pub fn set_path(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.path = input;
        self
    }
    /// <p>The name of the source group. This has to match one of the <code>Channel::Outputs::SourceGroup</code>.</p>
    pub fn source_group(mut self, input: impl Into<std::string::String>) -> Self {
        self.source_group = Some(input.into());
        self
    }
    /// <p>The name of the source group. This has to match one of the <code>Channel::Outputs::SourceGroup</code>.</p>
    pub fn set_source_group(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.source_group = input;
        self
    }
    /// <p>The streaming protocol for this package configuration. Supported values are <code>HLS</code> and <code>DASH</code>.</p>
    pub fn r#type(mut self, input: crate::types::Type) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p>The streaming protocol for this package configuration. Supported values are <code>HLS</code> and <code>DASH</code>.</p>
    pub fn set_type(mut self, input: std::option::Option<crate::types::Type>) -> Self {
        self.r#type = input;
        self
    }
    /// Consumes the builder and constructs a [`HttpPackageConfiguration`](crate::types::HttpPackageConfiguration).
    pub fn build(self) -> crate::types::HttpPackageConfiguration {
        crate::types::HttpPackageConfiguration {
            path: self.path,
            source_group: self.source_group,
            r#type: self.r#type,
        }
    }
}
