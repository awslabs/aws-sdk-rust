// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `ManifestServiceExcludeEventType`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let manifestserviceexcludeeventtype = unimplemented!();
/// match manifestserviceexcludeeventtype {
///     ManifestServiceExcludeEventType::ConfigSecurityError => { /* ... */ },
///     ManifestServiceExcludeEventType::ConfigSyntaxError => { /* ... */ },
///     ManifestServiceExcludeEventType::ConnectionError => { /* ... */ },
///     ManifestServiceExcludeEventType::ErrorAdsInterpolation => { /* ... */ },
///     ManifestServiceExcludeEventType::ErrorBumperEndInterpolation => { /* ... */ },
///     ManifestServiceExcludeEventType::ErrorBumperStartInterpolation => { /* ... */ },
///     ManifestServiceExcludeEventType::ErrorCdnAdSegmentInterpolation => { /* ... */ },
///     ManifestServiceExcludeEventType::ErrorCdnContentSegmentInterpolation => { /* ... */ },
///     ManifestServiceExcludeEventType::ErrorLivePreRollAdsInterpolation => { /* ... */ },
///     ManifestServiceExcludeEventType::ErrorOriginPrefixInterpolation => { /* ... */ },
///     ManifestServiceExcludeEventType::ErrorProfileNameInterpolation => { /* ... */ },
///     ManifestServiceExcludeEventType::ErrorSlateAdUrlInterpolation => { /* ... */ },
///     ManifestServiceExcludeEventType::GeneratedManifest => { /* ... */ },
///     ManifestServiceExcludeEventType::HostDisallowed => { /* ... */ },
///     ManifestServiceExcludeEventType::IncompatibleHlsVersion => { /* ... */ },
///     ManifestServiceExcludeEventType::InvalidSinglePeriodDashManifest => { /* ... */ },
///     ManifestServiceExcludeEventType::IoError => { /* ... */ },
///     ManifestServiceExcludeEventType::LastPeriodMissingAudio => { /* ... */ },
///     ManifestServiceExcludeEventType::LastPeriodMissingAudioWarning => { /* ... */ },
///     ManifestServiceExcludeEventType::ManifestError => { /* ... */ },
///     ManifestServiceExcludeEventType::NoMasterOrMediaPlaylist => { /* ... */ },
///     ManifestServiceExcludeEventType::NoMasterPlaylist => { /* ... */ },
///     ManifestServiceExcludeEventType::NoMediaPlaylist => { /* ... */ },
///     ManifestServiceExcludeEventType::OriginManifest => { /* ... */ },
///     ManifestServiceExcludeEventType::ParsingError => { /* ... */ },
///     ManifestServiceExcludeEventType::Scte35ParsingError => { /* ... */ },
///     ManifestServiceExcludeEventType::SessionInitialized => { /* ... */ },
///     ManifestServiceExcludeEventType::TimeoutError => { /* ... */ },
///     ManifestServiceExcludeEventType::TrackingResponse => { /* ... */ },
///     ManifestServiceExcludeEventType::UnknownError => { /* ... */ },
///     ManifestServiceExcludeEventType::UnknownHost => { /* ... */ },
///     ManifestServiceExcludeEventType::UnsupportedSinglePeriodDashManifest => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `manifestserviceexcludeeventtype` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `ManifestServiceExcludeEventType::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `ManifestServiceExcludeEventType::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `ManifestServiceExcludeEventType::NewFeature` is defined.
/// Specifically, when `manifestserviceexcludeeventtype` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `ManifestServiceExcludeEventType::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
///
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::Ord, ::std::cmp::PartialEq, ::std::cmp::PartialOrd, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub enum ManifestServiceExcludeEventType {
    #[allow(missing_docs)] // documentation missing in model
    ConfigSecurityError,
    #[allow(missing_docs)] // documentation missing in model
    ConfigSyntaxError,
    #[allow(missing_docs)] // documentation missing in model
    ConnectionError,
    #[allow(missing_docs)] // documentation missing in model
    ErrorAdsInterpolation,
    #[allow(missing_docs)] // documentation missing in model
    ErrorBumperEndInterpolation,
    #[allow(missing_docs)] // documentation missing in model
    ErrorBumperStartInterpolation,
    #[allow(missing_docs)] // documentation missing in model
    ErrorCdnAdSegmentInterpolation,
    #[allow(missing_docs)] // documentation missing in model
    ErrorCdnContentSegmentInterpolation,
    #[allow(missing_docs)] // documentation missing in model
    ErrorLivePreRollAdsInterpolation,
    #[allow(missing_docs)] // documentation missing in model
    ErrorOriginPrefixInterpolation,
    #[allow(missing_docs)] // documentation missing in model
    ErrorProfileNameInterpolation,
    #[allow(missing_docs)] // documentation missing in model
    ErrorSlateAdUrlInterpolation,
    #[allow(missing_docs)] // documentation missing in model
    GeneratedManifest,
    #[allow(missing_docs)] // documentation missing in model
    HostDisallowed,
    #[allow(missing_docs)] // documentation missing in model
    IncompatibleHlsVersion,
    #[allow(missing_docs)] // documentation missing in model
    InvalidSinglePeriodDashManifest,
    #[allow(missing_docs)] // documentation missing in model
    IoError,
    #[allow(missing_docs)] // documentation missing in model
    LastPeriodMissingAudio,
    #[allow(missing_docs)] // documentation missing in model
    LastPeriodMissingAudioWarning,
    #[allow(missing_docs)] // documentation missing in model
    ManifestError,
    #[allow(missing_docs)] // documentation missing in model
    NoMasterOrMediaPlaylist,
    #[allow(missing_docs)] // documentation missing in model
    NoMasterPlaylist,
    #[allow(missing_docs)] // documentation missing in model
    NoMediaPlaylist,
    #[allow(missing_docs)] // documentation missing in model
    OriginManifest,
    #[allow(missing_docs)] // documentation missing in model
    ParsingError,
    #[allow(missing_docs)] // documentation missing in model
    Scte35ParsingError,
    #[allow(missing_docs)] // documentation missing in model
    SessionInitialized,
    #[allow(missing_docs)] // documentation missing in model
    TimeoutError,
    #[allow(missing_docs)] // documentation missing in model
    TrackingResponse,
    #[allow(missing_docs)] // documentation missing in model
    UnknownError,
    #[allow(missing_docs)] // documentation missing in model
    UnknownHost,
    #[allow(missing_docs)] // documentation missing in model
    UnsupportedSinglePeriodDashManifest,
    /// `Unknown` contains new variants that have been added since this code was generated.
    #[deprecated(note = "Don't directly match on `Unknown`. See the docs on this enum for the correct way to handle unknown variants.")]
    Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue),
}
impl ::std::convert::From<&str> for ManifestServiceExcludeEventType {
    fn from(s: &str) -> Self {
        match s {
            "CONFIG_SECURITY_ERROR" => ManifestServiceExcludeEventType::ConfigSecurityError,
            "CONFIG_SYNTAX_ERROR" => ManifestServiceExcludeEventType::ConfigSyntaxError,
            "CONNECTION_ERROR" => ManifestServiceExcludeEventType::ConnectionError,
            "ERROR_ADS_INTERPOLATION" => ManifestServiceExcludeEventType::ErrorAdsInterpolation,
            "ERROR_BUMPER_END_INTERPOLATION" => ManifestServiceExcludeEventType::ErrorBumperEndInterpolation,
            "ERROR_BUMPER_START_INTERPOLATION" => ManifestServiceExcludeEventType::ErrorBumperStartInterpolation,
            "ERROR_CDN_AD_SEGMENT_INTERPOLATION" => ManifestServiceExcludeEventType::ErrorCdnAdSegmentInterpolation,
            "ERROR_CDN_CONTENT_SEGMENT_INTERPOLATION" => ManifestServiceExcludeEventType::ErrorCdnContentSegmentInterpolation,
            "ERROR_LIVE_PRE_ROLL_ADS_INTERPOLATION" => ManifestServiceExcludeEventType::ErrorLivePreRollAdsInterpolation,
            "ERROR_ORIGIN_PREFIX_INTERPOLATION" => ManifestServiceExcludeEventType::ErrorOriginPrefixInterpolation,
            "ERROR_PROFILE_NAME_INTERPOLATION" => ManifestServiceExcludeEventType::ErrorProfileNameInterpolation,
            "ERROR_SLATE_AD_URL_INTERPOLATION" => ManifestServiceExcludeEventType::ErrorSlateAdUrlInterpolation,
            "GENERATED_MANIFEST" => ManifestServiceExcludeEventType::GeneratedManifest,
            "HOST_DISALLOWED" => ManifestServiceExcludeEventType::HostDisallowed,
            "INCOMPATIBLE_HLS_VERSION" => ManifestServiceExcludeEventType::IncompatibleHlsVersion,
            "INVALID_SINGLE_PERIOD_DASH_MANIFEST" => ManifestServiceExcludeEventType::InvalidSinglePeriodDashManifest,
            "IO_ERROR" => ManifestServiceExcludeEventType::IoError,
            "LAST_PERIOD_MISSING_AUDIO" => ManifestServiceExcludeEventType::LastPeriodMissingAudio,
            "LAST_PERIOD_MISSING_AUDIO_WARNING" => ManifestServiceExcludeEventType::LastPeriodMissingAudioWarning,
            "MANIFEST_ERROR" => ManifestServiceExcludeEventType::ManifestError,
            "NO_MASTER_OR_MEDIA_PLAYLIST" => ManifestServiceExcludeEventType::NoMasterOrMediaPlaylist,
            "NO_MASTER_PLAYLIST" => ManifestServiceExcludeEventType::NoMasterPlaylist,
            "NO_MEDIA_PLAYLIST" => ManifestServiceExcludeEventType::NoMediaPlaylist,
            "ORIGIN_MANIFEST" => ManifestServiceExcludeEventType::OriginManifest,
            "PARSING_ERROR" => ManifestServiceExcludeEventType::ParsingError,
            "SCTE35_PARSING_ERROR" => ManifestServiceExcludeEventType::Scte35ParsingError,
            "SESSION_INITIALIZED" => ManifestServiceExcludeEventType::SessionInitialized,
            "TIMEOUT_ERROR" => ManifestServiceExcludeEventType::TimeoutError,
            "TRACKING_RESPONSE" => ManifestServiceExcludeEventType::TrackingResponse,
            "UNKNOWN_ERROR" => ManifestServiceExcludeEventType::UnknownError,
            "UNKNOWN_HOST" => ManifestServiceExcludeEventType::UnknownHost,
            "UNSUPPORTED_SINGLE_PERIOD_DASH_MANIFEST" => ManifestServiceExcludeEventType::UnsupportedSinglePeriodDashManifest,
            other => ManifestServiceExcludeEventType::Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl ::std::str::FromStr for ManifestServiceExcludeEventType {
    type Err = ::std::convert::Infallible;

    fn from_str(s: &str) -> ::std::result::Result<Self, <Self as ::std::str::FromStr>::Err> {
        ::std::result::Result::Ok(ManifestServiceExcludeEventType::from(s))
    }
}
impl ManifestServiceExcludeEventType {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            ManifestServiceExcludeEventType::ConfigSecurityError => "CONFIG_SECURITY_ERROR",
            ManifestServiceExcludeEventType::ConfigSyntaxError => "CONFIG_SYNTAX_ERROR",
            ManifestServiceExcludeEventType::ConnectionError => "CONNECTION_ERROR",
            ManifestServiceExcludeEventType::ErrorAdsInterpolation => "ERROR_ADS_INTERPOLATION",
            ManifestServiceExcludeEventType::ErrorBumperEndInterpolation => "ERROR_BUMPER_END_INTERPOLATION",
            ManifestServiceExcludeEventType::ErrorBumperStartInterpolation => "ERROR_BUMPER_START_INTERPOLATION",
            ManifestServiceExcludeEventType::ErrorCdnAdSegmentInterpolation => "ERROR_CDN_AD_SEGMENT_INTERPOLATION",
            ManifestServiceExcludeEventType::ErrorCdnContentSegmentInterpolation => "ERROR_CDN_CONTENT_SEGMENT_INTERPOLATION",
            ManifestServiceExcludeEventType::ErrorLivePreRollAdsInterpolation => "ERROR_LIVE_PRE_ROLL_ADS_INTERPOLATION",
            ManifestServiceExcludeEventType::ErrorOriginPrefixInterpolation => "ERROR_ORIGIN_PREFIX_INTERPOLATION",
            ManifestServiceExcludeEventType::ErrorProfileNameInterpolation => "ERROR_PROFILE_NAME_INTERPOLATION",
            ManifestServiceExcludeEventType::ErrorSlateAdUrlInterpolation => "ERROR_SLATE_AD_URL_INTERPOLATION",
            ManifestServiceExcludeEventType::GeneratedManifest => "GENERATED_MANIFEST",
            ManifestServiceExcludeEventType::HostDisallowed => "HOST_DISALLOWED",
            ManifestServiceExcludeEventType::IncompatibleHlsVersion => "INCOMPATIBLE_HLS_VERSION",
            ManifestServiceExcludeEventType::InvalidSinglePeriodDashManifest => "INVALID_SINGLE_PERIOD_DASH_MANIFEST",
            ManifestServiceExcludeEventType::IoError => "IO_ERROR",
            ManifestServiceExcludeEventType::LastPeriodMissingAudio => "LAST_PERIOD_MISSING_AUDIO",
            ManifestServiceExcludeEventType::LastPeriodMissingAudioWarning => "LAST_PERIOD_MISSING_AUDIO_WARNING",
            ManifestServiceExcludeEventType::ManifestError => "MANIFEST_ERROR",
            ManifestServiceExcludeEventType::NoMasterOrMediaPlaylist => "NO_MASTER_OR_MEDIA_PLAYLIST",
            ManifestServiceExcludeEventType::NoMasterPlaylist => "NO_MASTER_PLAYLIST",
            ManifestServiceExcludeEventType::NoMediaPlaylist => "NO_MEDIA_PLAYLIST",
            ManifestServiceExcludeEventType::OriginManifest => "ORIGIN_MANIFEST",
            ManifestServiceExcludeEventType::ParsingError => "PARSING_ERROR",
            ManifestServiceExcludeEventType::Scte35ParsingError => "SCTE35_PARSING_ERROR",
            ManifestServiceExcludeEventType::SessionInitialized => "SESSION_INITIALIZED",
            ManifestServiceExcludeEventType::TimeoutError => "TIMEOUT_ERROR",
            ManifestServiceExcludeEventType::TrackingResponse => "TRACKING_RESPONSE",
            ManifestServiceExcludeEventType::UnknownError => "UNKNOWN_ERROR",
            ManifestServiceExcludeEventType::UnknownHost => "UNKNOWN_HOST",
            ManifestServiceExcludeEventType::UnsupportedSinglePeriodDashManifest => "UNSUPPORTED_SINGLE_PERIOD_DASH_MANIFEST",
            ManifestServiceExcludeEventType::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "CONFIG_SECURITY_ERROR",
            "CONFIG_SYNTAX_ERROR",
            "CONNECTION_ERROR",
            "ERROR_ADS_INTERPOLATION",
            "ERROR_BUMPER_END_INTERPOLATION",
            "ERROR_BUMPER_START_INTERPOLATION",
            "ERROR_CDN_AD_SEGMENT_INTERPOLATION",
            "ERROR_CDN_CONTENT_SEGMENT_INTERPOLATION",
            "ERROR_LIVE_PRE_ROLL_ADS_INTERPOLATION",
            "ERROR_ORIGIN_PREFIX_INTERPOLATION",
            "ERROR_PROFILE_NAME_INTERPOLATION",
            "ERROR_SLATE_AD_URL_INTERPOLATION",
            "GENERATED_MANIFEST",
            "HOST_DISALLOWED",
            "INCOMPATIBLE_HLS_VERSION",
            "INVALID_SINGLE_PERIOD_DASH_MANIFEST",
            "IO_ERROR",
            "LAST_PERIOD_MISSING_AUDIO",
            "LAST_PERIOD_MISSING_AUDIO_WARNING",
            "MANIFEST_ERROR",
            "NO_MASTER_OR_MEDIA_PLAYLIST",
            "NO_MASTER_PLAYLIST",
            "NO_MEDIA_PLAYLIST",
            "ORIGIN_MANIFEST",
            "PARSING_ERROR",
            "SCTE35_PARSING_ERROR",
            "SESSION_INITIALIZED",
            "TIMEOUT_ERROR",
            "TRACKING_RESPONSE",
            "UNKNOWN_ERROR",
            "UNKNOWN_HOST",
            "UNSUPPORTED_SINGLE_PERIOD_DASH_MANIFEST",
        ]
    }
}
impl ::std::convert::AsRef<str> for ManifestServiceExcludeEventType {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
impl ManifestServiceExcludeEventType {
    /// Parses the enum value while disallowing unknown variants.
    ///
    /// Unknown variants will result in an error.
    pub fn try_parse(value: &str) -> ::std::result::Result<Self, crate::error::UnknownVariantError> {
        match Self::from(value) {
            #[allow(deprecated)]
            Self::Unknown(_) => ::std::result::Result::Err(crate::error::UnknownVariantError::new(value)),
            known => Ok(known),
        }
    }
}
impl ::std::fmt::Display for ManifestServiceExcludeEventType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match self {
            ManifestServiceExcludeEventType::ConfigSecurityError => write!(f, "CONFIG_SECURITY_ERROR"),
            ManifestServiceExcludeEventType::ConfigSyntaxError => write!(f, "CONFIG_SYNTAX_ERROR"),
            ManifestServiceExcludeEventType::ConnectionError => write!(f, "CONNECTION_ERROR"),
            ManifestServiceExcludeEventType::ErrorAdsInterpolation => write!(f, "ERROR_ADS_INTERPOLATION"),
            ManifestServiceExcludeEventType::ErrorBumperEndInterpolation => write!(f, "ERROR_BUMPER_END_INTERPOLATION"),
            ManifestServiceExcludeEventType::ErrorBumperStartInterpolation => write!(f, "ERROR_BUMPER_START_INTERPOLATION"),
            ManifestServiceExcludeEventType::ErrorCdnAdSegmentInterpolation => write!(f, "ERROR_CDN_AD_SEGMENT_INTERPOLATION"),
            ManifestServiceExcludeEventType::ErrorCdnContentSegmentInterpolation => write!(f, "ERROR_CDN_CONTENT_SEGMENT_INTERPOLATION"),
            ManifestServiceExcludeEventType::ErrorLivePreRollAdsInterpolation => write!(f, "ERROR_LIVE_PRE_ROLL_ADS_INTERPOLATION"),
            ManifestServiceExcludeEventType::ErrorOriginPrefixInterpolation => write!(f, "ERROR_ORIGIN_PREFIX_INTERPOLATION"),
            ManifestServiceExcludeEventType::ErrorProfileNameInterpolation => write!(f, "ERROR_PROFILE_NAME_INTERPOLATION"),
            ManifestServiceExcludeEventType::ErrorSlateAdUrlInterpolation => write!(f, "ERROR_SLATE_AD_URL_INTERPOLATION"),
            ManifestServiceExcludeEventType::GeneratedManifest => write!(f, "GENERATED_MANIFEST"),
            ManifestServiceExcludeEventType::HostDisallowed => write!(f, "HOST_DISALLOWED"),
            ManifestServiceExcludeEventType::IncompatibleHlsVersion => write!(f, "INCOMPATIBLE_HLS_VERSION"),
            ManifestServiceExcludeEventType::InvalidSinglePeriodDashManifest => write!(f, "INVALID_SINGLE_PERIOD_DASH_MANIFEST"),
            ManifestServiceExcludeEventType::IoError => write!(f, "IO_ERROR"),
            ManifestServiceExcludeEventType::LastPeriodMissingAudio => write!(f, "LAST_PERIOD_MISSING_AUDIO"),
            ManifestServiceExcludeEventType::LastPeriodMissingAudioWarning => write!(f, "LAST_PERIOD_MISSING_AUDIO_WARNING"),
            ManifestServiceExcludeEventType::ManifestError => write!(f, "MANIFEST_ERROR"),
            ManifestServiceExcludeEventType::NoMasterOrMediaPlaylist => write!(f, "NO_MASTER_OR_MEDIA_PLAYLIST"),
            ManifestServiceExcludeEventType::NoMasterPlaylist => write!(f, "NO_MASTER_PLAYLIST"),
            ManifestServiceExcludeEventType::NoMediaPlaylist => write!(f, "NO_MEDIA_PLAYLIST"),
            ManifestServiceExcludeEventType::OriginManifest => write!(f, "ORIGIN_MANIFEST"),
            ManifestServiceExcludeEventType::ParsingError => write!(f, "PARSING_ERROR"),
            ManifestServiceExcludeEventType::Scte35ParsingError => write!(f, "SCTE35_PARSING_ERROR"),
            ManifestServiceExcludeEventType::SessionInitialized => write!(f, "SESSION_INITIALIZED"),
            ManifestServiceExcludeEventType::TimeoutError => write!(f, "TIMEOUT_ERROR"),
            ManifestServiceExcludeEventType::TrackingResponse => write!(f, "TRACKING_RESPONSE"),
            ManifestServiceExcludeEventType::UnknownError => write!(f, "UNKNOWN_ERROR"),
            ManifestServiceExcludeEventType::UnknownHost => write!(f, "UNKNOWN_HOST"),
            ManifestServiceExcludeEventType::UnsupportedSinglePeriodDashManifest => write!(f, "UNSUPPORTED_SINGLE_PERIOD_DASH_MANIFEST"),
            ManifestServiceExcludeEventType::Unknown(value) => write!(f, "{value}"),
        }
    }
}
