// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration for bumpers. Bumpers are short audio or video clips that play at the start or before the end of an ad break. To learn more about bumpers, see <a href="https://docs.aws.amazon.com/mediatailor/latest/ug/bumpers.html">Bumpers</a>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Bumper {
    /// <p>The URL for the end bumper asset.</p>
    #[doc(hidden)]
    pub end_url: std::option::Option<std::string::String>,
    /// <p>The URL for the start bumper asset.</p>
    #[doc(hidden)]
    pub start_url: std::option::Option<std::string::String>,
}
impl Bumper {
    /// <p>The URL for the end bumper asset.</p>
    pub fn end_url(&self) -> std::option::Option<&str> {
        self.end_url.as_deref()
    }
    /// <p>The URL for the start bumper asset.</p>
    pub fn start_url(&self) -> std::option::Option<&str> {
        self.start_url.as_deref()
    }
}
impl Bumper {
    /// Creates a new builder-style object to manufacture [`Bumper`](crate::types::Bumper).
    pub fn builder() -> crate::types::builders::BumperBuilder {
        crate::types::builders::BumperBuilder::default()
    }
}

/// A builder for [`Bumper`](crate::types::Bumper).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct BumperBuilder {
    pub(crate) end_url: std::option::Option<std::string::String>,
    pub(crate) start_url: std::option::Option<std::string::String>,
}
impl BumperBuilder {
    /// <p>The URL for the end bumper asset.</p>
    pub fn end_url(mut self, input: impl Into<std::string::String>) -> Self {
        self.end_url = Some(input.into());
        self
    }
    /// <p>The URL for the end bumper asset.</p>
    pub fn set_end_url(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.end_url = input;
        self
    }
    /// <p>The URL for the start bumper asset.</p>
    pub fn start_url(mut self, input: impl Into<std::string::String>) -> Self {
        self.start_url = Some(input.into());
        self
    }
    /// <p>The URL for the start bumper asset.</p>
    pub fn set_start_url(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.start_url = input;
        self
    }
    /// Consumes the builder and constructs a [`Bumper`](crate::types::Bumper).
    pub fn build(self) -> crate::types::Bumper {
        crate::types::Bumper {
            end_url: self.end_url,
            start_url: self.start_url,
        }
    }
}
