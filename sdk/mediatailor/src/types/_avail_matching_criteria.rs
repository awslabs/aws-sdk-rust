// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>MediaTailor only places (consumes) prefetched ads if the ad break meets the criteria defined by the dynamic variables. This gives you granular control over which ad break to place the prefetched ads into.</p>
/// <p>As an example, let's say that you set <code>DynamicVariable</code> to <code>scte.event_id</code> and <code>Operator</code> to <code>EQUALS</code>, and your playback configuration has an ADS URL of <code>https://my.ads.server.com/path?&amp;podId=[scte.avail_num]&amp;event=[scte.event_id]&amp;duration=[session.avail_duration_secs]</code>. And the prefetch request to the ADS contains these values <code>https://my.ads.server.com/path?&amp;podId=3&amp;event=my-awesome-event&amp;duration=30</code>. MediaTailor will only insert the prefetched ads into the ad break if has a SCTE marker with an event id of <code>my-awesome-event</code>, since it must match the event id that MediaTailor uses to query the ADS.</p>
/// <p>You can specify up to five <code>AvailMatchingCriteria</code>. If you specify multiple <code>AvailMatchingCriteria</code>, MediaTailor combines them to match using a logical <code>AND</code>. You can model logical <code>OR</code> combinations by creating multiple prefetch schedules.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AvailMatchingCriteria {
    /// <p>The dynamic variable(s) that MediaTailor should use as avail matching criteria. MediaTailor only places the prefetched ads into the avail if the avail matches the criteria defined by the dynamic variable. For information about dynamic variables, see <a href="https://docs.aws.amazon.com/mediatailor/latest/ug/variables.html">Using dynamic ad variables</a> in the <i>MediaTailor User Guide</i>.</p>
    /// <p>You can include up to 100 dynamic variables.</p>
    pub dynamic_variable: ::std::string::String,
    /// <p>For the <code>DynamicVariable</code> specified in <code>AvailMatchingCriteria</code>, the Operator that is used for the comparison.</p>
    pub operator: crate::types::Operator,
}
impl AvailMatchingCriteria {
    /// <p>The dynamic variable(s) that MediaTailor should use as avail matching criteria. MediaTailor only places the prefetched ads into the avail if the avail matches the criteria defined by the dynamic variable. For information about dynamic variables, see <a href="https://docs.aws.amazon.com/mediatailor/latest/ug/variables.html">Using dynamic ad variables</a> in the <i>MediaTailor User Guide</i>.</p>
    /// <p>You can include up to 100 dynamic variables.</p>
    pub fn dynamic_variable(&self) -> &str {
        use std::ops::Deref;
        self.dynamic_variable.deref()
    }
    /// <p>For the <code>DynamicVariable</code> specified in <code>AvailMatchingCriteria</code>, the Operator that is used for the comparison.</p>
    pub fn operator(&self) -> &crate::types::Operator {
        &self.operator
    }
}
impl AvailMatchingCriteria {
    /// Creates a new builder-style object to manufacture [`AvailMatchingCriteria`](crate::types::AvailMatchingCriteria).
    pub fn builder() -> crate::types::builders::AvailMatchingCriteriaBuilder {
        crate::types::builders::AvailMatchingCriteriaBuilder::default()
    }
}

/// A builder for [`AvailMatchingCriteria`](crate::types::AvailMatchingCriteria).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AvailMatchingCriteriaBuilder {
    pub(crate) dynamic_variable: ::std::option::Option<::std::string::String>,
    pub(crate) operator: ::std::option::Option<crate::types::Operator>,
}
impl AvailMatchingCriteriaBuilder {
    /// <p>The dynamic variable(s) that MediaTailor should use as avail matching criteria. MediaTailor only places the prefetched ads into the avail if the avail matches the criteria defined by the dynamic variable. For information about dynamic variables, see <a href="https://docs.aws.amazon.com/mediatailor/latest/ug/variables.html">Using dynamic ad variables</a> in the <i>MediaTailor User Guide</i>.</p>
    /// <p>You can include up to 100 dynamic variables.</p>
    /// This field is required.
    pub fn dynamic_variable(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.dynamic_variable = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The dynamic variable(s) that MediaTailor should use as avail matching criteria. MediaTailor only places the prefetched ads into the avail if the avail matches the criteria defined by the dynamic variable. For information about dynamic variables, see <a href="https://docs.aws.amazon.com/mediatailor/latest/ug/variables.html">Using dynamic ad variables</a> in the <i>MediaTailor User Guide</i>.</p>
    /// <p>You can include up to 100 dynamic variables.</p>
    pub fn set_dynamic_variable(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.dynamic_variable = input;
        self
    }
    /// <p>The dynamic variable(s) that MediaTailor should use as avail matching criteria. MediaTailor only places the prefetched ads into the avail if the avail matches the criteria defined by the dynamic variable. For information about dynamic variables, see <a href="https://docs.aws.amazon.com/mediatailor/latest/ug/variables.html">Using dynamic ad variables</a> in the <i>MediaTailor User Guide</i>.</p>
    /// <p>You can include up to 100 dynamic variables.</p>
    pub fn get_dynamic_variable(&self) -> &::std::option::Option<::std::string::String> {
        &self.dynamic_variable
    }
    /// <p>For the <code>DynamicVariable</code> specified in <code>AvailMatchingCriteria</code>, the Operator that is used for the comparison.</p>
    /// This field is required.
    pub fn operator(mut self, input: crate::types::Operator) -> Self {
        self.operator = ::std::option::Option::Some(input);
        self
    }
    /// <p>For the <code>DynamicVariable</code> specified in <code>AvailMatchingCriteria</code>, the Operator that is used for the comparison.</p>
    pub fn set_operator(mut self, input: ::std::option::Option<crate::types::Operator>) -> Self {
        self.operator = input;
        self
    }
    /// <p>For the <code>DynamicVariable</code> specified in <code>AvailMatchingCriteria</code>, the Operator that is used for the comparison.</p>
    pub fn get_operator(&self) -> &::std::option::Option<crate::types::Operator> {
        &self.operator
    }
    /// Consumes the builder and constructs a [`AvailMatchingCriteria`](crate::types::AvailMatchingCriteria).
    /// This method will fail if any of the following fields are not set:
    /// - [`dynamic_variable`](crate::types::builders::AvailMatchingCriteriaBuilder::dynamic_variable)
    /// - [`operator`](crate::types::builders::AvailMatchingCriteriaBuilder::operator)
    pub fn build(self) -> ::std::result::Result<crate::types::AvailMatchingCriteria, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AvailMatchingCriteria {
            dynamic_variable: self.dynamic_variable.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "dynamic_variable",
                    "dynamic_variable was not specified but it is required when building AvailMatchingCriteria",
                )
            })?,
            operator: self.operator.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "operator",
                    "operator was not specified but it is required when building AvailMatchingCriteria",
                )
            })?,
        })
    }
}
