// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Dash manifest configuration parameters.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DashPlaylistSettings {
    /// <p>The total duration (in seconds) of each manifest. Minimum value: <code>30</code> seconds. Maximum value: <code>3600</code> seconds.</p>
    #[doc(hidden)]
    pub manifest_window_seconds: i32,
    /// <p>Minimum amount of content (measured in seconds) that a player must keep available in the buffer. Minimum value: <code>2</code> seconds. Maximum value: <code>60</code> seconds.</p>
    #[doc(hidden)]
    pub min_buffer_time_seconds: i32,
    /// <p>Minimum amount of time (in seconds) that the player should wait before requesting updates to the manifest. Minimum value: <code>2</code> seconds. Maximum value: <code>60</code> seconds.</p>
    #[doc(hidden)]
    pub min_update_period_seconds: i32,
    /// <p>Amount of time (in seconds) that the player should be from the live point at the end of the manifest. Minimum value: <code>2</code> seconds. Maximum value: <code>60</code> seconds.</p>
    #[doc(hidden)]
    pub suggested_presentation_delay_seconds: i32,
}
impl DashPlaylistSettings {
    /// <p>The total duration (in seconds) of each manifest. Minimum value: <code>30</code> seconds. Maximum value: <code>3600</code> seconds.</p>
    pub fn manifest_window_seconds(&self) -> i32 {
        self.manifest_window_seconds
    }
    /// <p>Minimum amount of content (measured in seconds) that a player must keep available in the buffer. Minimum value: <code>2</code> seconds. Maximum value: <code>60</code> seconds.</p>
    pub fn min_buffer_time_seconds(&self) -> i32 {
        self.min_buffer_time_seconds
    }
    /// <p>Minimum amount of time (in seconds) that the player should wait before requesting updates to the manifest. Minimum value: <code>2</code> seconds. Maximum value: <code>60</code> seconds.</p>
    pub fn min_update_period_seconds(&self) -> i32 {
        self.min_update_period_seconds
    }
    /// <p>Amount of time (in seconds) that the player should be from the live point at the end of the manifest. Minimum value: <code>2</code> seconds. Maximum value: <code>60</code> seconds.</p>
    pub fn suggested_presentation_delay_seconds(&self) -> i32 {
        self.suggested_presentation_delay_seconds
    }
}
impl DashPlaylistSettings {
    /// Creates a new builder-style object to manufacture [`DashPlaylistSettings`](crate::types::DashPlaylistSettings).
    pub fn builder() -> crate::types::builders::DashPlaylistSettingsBuilder {
        crate::types::builders::DashPlaylistSettingsBuilder::default()
    }
}

/// A builder for [`DashPlaylistSettings`](crate::types::DashPlaylistSettings).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DashPlaylistSettingsBuilder {
    pub(crate) manifest_window_seconds: std::option::Option<i32>,
    pub(crate) min_buffer_time_seconds: std::option::Option<i32>,
    pub(crate) min_update_period_seconds: std::option::Option<i32>,
    pub(crate) suggested_presentation_delay_seconds: std::option::Option<i32>,
}
impl DashPlaylistSettingsBuilder {
    /// <p>The total duration (in seconds) of each manifest. Minimum value: <code>30</code> seconds. Maximum value: <code>3600</code> seconds.</p>
    pub fn manifest_window_seconds(mut self, input: i32) -> Self {
        self.manifest_window_seconds = Some(input);
        self
    }
    /// <p>The total duration (in seconds) of each manifest. Minimum value: <code>30</code> seconds. Maximum value: <code>3600</code> seconds.</p>
    pub fn set_manifest_window_seconds(mut self, input: std::option::Option<i32>) -> Self {
        self.manifest_window_seconds = input;
        self
    }
    /// <p>Minimum amount of content (measured in seconds) that a player must keep available in the buffer. Minimum value: <code>2</code> seconds. Maximum value: <code>60</code> seconds.</p>
    pub fn min_buffer_time_seconds(mut self, input: i32) -> Self {
        self.min_buffer_time_seconds = Some(input);
        self
    }
    /// <p>Minimum amount of content (measured in seconds) that a player must keep available in the buffer. Minimum value: <code>2</code> seconds. Maximum value: <code>60</code> seconds.</p>
    pub fn set_min_buffer_time_seconds(mut self, input: std::option::Option<i32>) -> Self {
        self.min_buffer_time_seconds = input;
        self
    }
    /// <p>Minimum amount of time (in seconds) that the player should wait before requesting updates to the manifest. Minimum value: <code>2</code> seconds. Maximum value: <code>60</code> seconds.</p>
    pub fn min_update_period_seconds(mut self, input: i32) -> Self {
        self.min_update_period_seconds = Some(input);
        self
    }
    /// <p>Minimum amount of time (in seconds) that the player should wait before requesting updates to the manifest. Minimum value: <code>2</code> seconds. Maximum value: <code>60</code> seconds.</p>
    pub fn set_min_update_period_seconds(mut self, input: std::option::Option<i32>) -> Self {
        self.min_update_period_seconds = input;
        self
    }
    /// <p>Amount of time (in seconds) that the player should be from the live point at the end of the manifest. Minimum value: <code>2</code> seconds. Maximum value: <code>60</code> seconds.</p>
    pub fn suggested_presentation_delay_seconds(mut self, input: i32) -> Self {
        self.suggested_presentation_delay_seconds = Some(input);
        self
    }
    /// <p>Amount of time (in seconds) that the player should be from the live point at the end of the manifest. Minimum value: <code>2</code> seconds. Maximum value: <code>60</code> seconds.</p>
    pub fn set_suggested_presentation_delay_seconds(
        mut self,
        input: std::option::Option<i32>,
    ) -> Self {
        self.suggested_presentation_delay_seconds = input;
        self
    }
    /// Consumes the builder and constructs a [`DashPlaylistSettings`](crate::types::DashPlaylistSettings).
    pub fn build(self) -> crate::types::DashPlaylistSettings {
        crate::types::DashPlaylistSettings {
            manifest_window_seconds: self.manifest_window_seconds.unwrap_or_default(),
            min_buffer_time_seconds: self.min_buffer_time_seconds.unwrap_or_default(),
            min_update_period_seconds: self.min_update_period_seconds.unwrap_or_default(),
            suggested_presentation_delay_seconds: self
                .suggested_presentation_delay_seconds
                .unwrap_or_default(),
        }
    }
}
