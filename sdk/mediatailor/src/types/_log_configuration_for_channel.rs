// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The log configuration for the channel.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LogConfigurationForChannel {
    /// <p>The log types.</p>
    pub log_types: ::std::option::Option<::std::vec::Vec<crate::types::LogType>>,
}
impl LogConfigurationForChannel {
    /// <p>The log types.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.log_types.is_none()`.
    pub fn log_types(&self) -> &[crate::types::LogType] {
        self.log_types.as_deref().unwrap_or_default()
    }
}
impl LogConfigurationForChannel {
    /// Creates a new builder-style object to manufacture [`LogConfigurationForChannel`](crate::types::LogConfigurationForChannel).
    pub fn builder() -> crate::types::builders::LogConfigurationForChannelBuilder {
        crate::types::builders::LogConfigurationForChannelBuilder::default()
    }
}

/// A builder for [`LogConfigurationForChannel`](crate::types::LogConfigurationForChannel).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct LogConfigurationForChannelBuilder {
    pub(crate) log_types: ::std::option::Option<::std::vec::Vec<crate::types::LogType>>,
}
impl LogConfigurationForChannelBuilder {
    /// Appends an item to `log_types`.
    ///
    /// To override the contents of this collection use [`set_log_types`](Self::set_log_types).
    ///
    /// <p>The log types.</p>
    pub fn log_types(mut self, input: crate::types::LogType) -> Self {
        let mut v = self.log_types.unwrap_or_default();
        v.push(input);
        self.log_types = ::std::option::Option::Some(v);
        self
    }
    /// <p>The log types.</p>
    pub fn set_log_types(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::LogType>>) -> Self {
        self.log_types = input;
        self
    }
    /// <p>The log types.</p>
    pub fn get_log_types(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::LogType>> {
        &self.log_types
    }
    /// Consumes the builder and constructs a [`LogConfigurationForChannel`](crate::types::LogConfigurationForChannel).
    pub fn build(self) -> crate::types::LogConfigurationForChannel {
        crate::types::LogConfigurationForChannel { log_types: self.log_types }
    }
}
