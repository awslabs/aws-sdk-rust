// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Live source configuration parameters.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct LiveSource {
    /// <p>The ARN for the live source.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The timestamp that indicates when the live source was created.</p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The HTTP package configurations for the live source.</p>
    #[doc(hidden)]
    pub http_package_configurations:
        std::option::Option<std::vec::Vec<crate::types::HttpPackageConfiguration>>,
    /// <p>The timestamp that indicates when the live source was last modified.</p>
    #[doc(hidden)]
    pub last_modified_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The name that's used to refer to a live source.</p>
    #[doc(hidden)]
    pub live_source_name: std::option::Option<std::string::String>,
    /// <p>The name of the source location.</p>
    #[doc(hidden)]
    pub source_location_name: std::option::Option<std::string::String>,
    /// <p>The tags assigned to the live source. Tags are key-value pairs that you can associate with Amazon resources to help with organization, access control, and cost tracking. For more information, see <a href="https://docs.aws.amazon.com/mediatailor/latest/ug/tagging.html">Tagging AWS Elemental MediaTailor Resources</a>.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl LiveSource {
    /// <p>The ARN for the live source.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The timestamp that indicates when the live source was created.</p>
    pub fn creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The HTTP package configurations for the live source.</p>
    pub fn http_package_configurations(
        &self,
    ) -> std::option::Option<&[crate::types::HttpPackageConfiguration]> {
        self.http_package_configurations.as_deref()
    }
    /// <p>The timestamp that indicates when the live source was last modified.</p>
    pub fn last_modified_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_modified_time.as_ref()
    }
    /// <p>The name that's used to refer to a live source.</p>
    pub fn live_source_name(&self) -> std::option::Option<&str> {
        self.live_source_name.as_deref()
    }
    /// <p>The name of the source location.</p>
    pub fn source_location_name(&self) -> std::option::Option<&str> {
        self.source_location_name.as_deref()
    }
    /// <p>The tags assigned to the live source. Tags are key-value pairs that you can associate with Amazon resources to help with organization, access control, and cost tracking. For more information, see <a href="https://docs.aws.amazon.com/mediatailor/latest/ug/tagging.html">Tagging AWS Elemental MediaTailor Resources</a>.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl LiveSource {
    /// Creates a new builder-style object to manufacture [`LiveSource`](crate::types::LiveSource).
    pub fn builder() -> crate::types::builders::LiveSourceBuilder {
        crate::types::builders::LiveSourceBuilder::default()
    }
}

/// A builder for [`LiveSource`](crate::types::LiveSource).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct LiveSourceBuilder {
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) creation_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) http_package_configurations:
        std::option::Option<std::vec::Vec<crate::types::HttpPackageConfiguration>>,
    pub(crate) last_modified_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) live_source_name: std::option::Option<std::string::String>,
    pub(crate) source_location_name: std::option::Option<std::string::String>,
    pub(crate) tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl LiveSourceBuilder {
    /// <p>The ARN for the live source.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The ARN for the live source.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The timestamp that indicates when the live source was created.</p>
    pub fn creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.creation_time = Some(input);
        self
    }
    /// <p>The timestamp that indicates when the live source was created.</p>
    pub fn set_creation_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.creation_time = input;
        self
    }
    /// Appends an item to `http_package_configurations`.
    ///
    /// To override the contents of this collection use [`set_http_package_configurations`](Self::set_http_package_configurations).
    ///
    /// <p>The HTTP package configurations for the live source.</p>
    pub fn http_package_configurations(
        mut self,
        input: crate::types::HttpPackageConfiguration,
    ) -> Self {
        let mut v = self.http_package_configurations.unwrap_or_default();
        v.push(input);
        self.http_package_configurations = Some(v);
        self
    }
    /// <p>The HTTP package configurations for the live source.</p>
    pub fn set_http_package_configurations(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::HttpPackageConfiguration>>,
    ) -> Self {
        self.http_package_configurations = input;
        self
    }
    /// <p>The timestamp that indicates when the live source was last modified.</p>
    pub fn last_modified_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_modified_time = Some(input);
        self
    }
    /// <p>The timestamp that indicates when the live source was last modified.</p>
    pub fn set_last_modified_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_modified_time = input;
        self
    }
    /// <p>The name that's used to refer to a live source.</p>
    pub fn live_source_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.live_source_name = Some(input.into());
        self
    }
    /// <p>The name that's used to refer to a live source.</p>
    pub fn set_live_source_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.live_source_name = input;
        self
    }
    /// <p>The name of the source location.</p>
    pub fn source_location_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.source_location_name = Some(input.into());
        self
    }
    /// <p>The name of the source location.</p>
    pub fn set_source_location_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.source_location_name = input;
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags assigned to the live source. Tags are key-value pairs that you can associate with Amazon resources to help with organization, access control, and cost tracking. For more information, see <a href="https://docs.aws.amazon.com/mediatailor/latest/ug/tagging.html">Tagging AWS Elemental MediaTailor Resources</a>.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = Some(hash_map);
        self
    }
    /// <p>The tags assigned to the live source. Tags are key-value pairs that you can associate with Amazon resources to help with organization, access control, and cost tracking. For more information, see <a href="https://docs.aws.amazon.com/mediatailor/latest/ug/tagging.html">Tagging AWS Elemental MediaTailor Resources</a>.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.tags = input;
        self
    }
    /// Consumes the builder and constructs a [`LiveSource`](crate::types::LiveSource).
    pub fn build(self) -> crate::types::LiveSource {
        crate::types::LiveSource {
            arn: self.arn,
            creation_time: self.creation_time,
            http_package_configurations: self.http_package_configurations,
            last_modified_time: self.last_modified_time,
            live_source_name: self.live_source_name,
            source_location_name: self.source_location_name,
            tags: self.tags,
        }
    }
}
