// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// Fluent builder constructing a request to `BatchDeleteReadSet`.
///
/// <p>Deletes one or more read sets.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct BatchDeleteReadSet {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::batch_delete_read_set_input::Builder,
}
impl BatchDeleteReadSet {
    /// Creates a new `BatchDeleteReadSet`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::BatchDeleteReadSet,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::BatchDeleteReadSetError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::BatchDeleteReadSetOutput,
        aws_smithy_http::result::SdkError<crate::error::BatchDeleteReadSetError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Appends an item to `ids`.
    ///
    /// To override the contents of this collection use [`set_ids`](Self::set_ids).
    ///
    /// <p>The read sets' IDs.</p>
    pub fn ids(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.ids(input.into());
        self
    }
    /// <p>The read sets' IDs.</p>
    pub fn set_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_ids(input);
        self
    }
    /// <p>The read sets' sequence store ID.</p>
    pub fn sequence_store_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.sequence_store_id(input.into());
        self
    }
    /// <p>The read sets' sequence store ID.</p>
    pub fn set_sequence_store_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_sequence_store_id(input);
        self
    }
}

/// Fluent builder constructing a request to `CancelAnnotationImportJob`.
///
/// <p>Cancels an annotation import job.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CancelAnnotationImportJob {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::cancel_annotation_import_job_input::Builder,
}
impl CancelAnnotationImportJob {
    /// Creates a new `CancelAnnotationImportJob`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CancelAnnotationImportJob,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CancelAnnotationImportJobError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CancelAnnotationImportJobOutput,
        aws_smithy_http::result::SdkError<crate::error::CancelAnnotationImportJobError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The job's ID.</p>
    pub fn job_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.job_id(input.into());
        self
    }
    /// <p>The job's ID.</p>
    pub fn set_job_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_job_id(input);
        self
    }
}

/// Fluent builder constructing a request to `CancelRun`.
///
/// <p>Cancels a run.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CancelRun {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::cancel_run_input::Builder,
}
impl CancelRun {
    /// Creates a new `CancelRun`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CancelRun,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CancelRunError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CancelRunOutput,
        aws_smithy_http::result::SdkError<crate::error::CancelRunError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The run's ID.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.id(input.into());
        self
    }
    /// <p>The run's ID.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_id(input);
        self
    }
}

/// Fluent builder constructing a request to `CancelVariantImportJob`.
///
/// <p>Cancels a variant import job.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CancelVariantImportJob {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::cancel_variant_import_job_input::Builder,
}
impl CancelVariantImportJob {
    /// Creates a new `CancelVariantImportJob`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CancelVariantImportJob,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CancelVariantImportJobError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CancelVariantImportJobOutput,
        aws_smithy_http::result::SdkError<crate::error::CancelVariantImportJobError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The job's ID.</p>
    pub fn job_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.job_id(input.into());
        self
    }
    /// <p>The job's ID.</p>
    pub fn set_job_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_job_id(input);
        self
    }
}

/// Fluent builder constructing a request to `CreateAnnotationStore`.
///
/// <p>Creates an annotation store.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateAnnotationStore {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_annotation_store_input::Builder,
}
impl CreateAnnotationStore {
    /// Creates a new `CreateAnnotationStore`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreateAnnotationStore,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreateAnnotationStoreError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreateAnnotationStoreOutput,
        aws_smithy_http::result::SdkError<crate::error::CreateAnnotationStoreError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The genome reference for the store's annotations.</p>
    pub fn reference(mut self, input: crate::model::ReferenceItem) -> Self {
        self.inner = self.inner.reference(input);
        self
    }
    /// <p>The genome reference for the store's annotations.</p>
    pub fn set_reference(
        mut self,
        input: std::option::Option<crate::model::ReferenceItem>,
    ) -> Self {
        self.inner = self.inner.set_reference(input);
        self
    }
    /// <p>A name for the store.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>A name for the store.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p>A description for the store.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>A description for the store.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Tags for the store.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.tags(k.into(), v.into());
        self
    }
    /// <p>Tags for the store.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>Server-side encryption (SSE) settings for the store.</p>
    pub fn sse_config(mut self, input: crate::model::SseConfig) -> Self {
        self.inner = self.inner.sse_config(input);
        self
    }
    /// <p>Server-side encryption (SSE) settings for the store.</p>
    pub fn set_sse_config(mut self, input: std::option::Option<crate::model::SseConfig>) -> Self {
        self.inner = self.inner.set_sse_config(input);
        self
    }
    /// <p>The annotation file format of the store.</p>
    pub fn store_format(mut self, input: crate::model::StoreFormat) -> Self {
        self.inner = self.inner.store_format(input);
        self
    }
    /// <p>The annotation file format of the store.</p>
    pub fn set_store_format(
        mut self,
        input: std::option::Option<crate::model::StoreFormat>,
    ) -> Self {
        self.inner = self.inner.set_store_format(input);
        self
    }
    /// <p>File parsing options for the annotation store.</p>
    pub fn store_options(mut self, input: crate::model::StoreOptions) -> Self {
        self.inner = self.inner.store_options(input);
        self
    }
    /// <p>File parsing options for the annotation store.</p>
    pub fn set_store_options(
        mut self,
        input: std::option::Option<crate::model::StoreOptions>,
    ) -> Self {
        self.inner = self.inner.set_store_options(input);
        self
    }
}

/// Fluent builder constructing a request to `CreateReferenceStore`.
///
/// <p>Creates a reference store.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateReferenceStore {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_reference_store_input::Builder,
}
impl CreateReferenceStore {
    /// Creates a new `CreateReferenceStore`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreateReferenceStore,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreateReferenceStoreError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreateReferenceStoreOutput,
        aws_smithy_http::result::SdkError<crate::error::CreateReferenceStoreError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>A name for the store.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>A name for the store.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p>A description for the store.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>A description for the store.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p>Server-side encryption (SSE) settings for the store.</p>
    pub fn sse_config(mut self, input: crate::model::SseConfig) -> Self {
        self.inner = self.inner.sse_config(input);
        self
    }
    /// <p>Server-side encryption (SSE) settings for the store.</p>
    pub fn set_sse_config(mut self, input: std::option::Option<crate::model::SseConfig>) -> Self {
        self.inner = self.inner.set_sse_config(input);
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Tags for the store.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.tags(k.into(), v.into());
        self
    }
    /// <p>Tags for the store.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>To ensure that requests don't run multiple times, specify a unique token for each request.</p>
    pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <p>To ensure that requests don't run multiple times, specify a unique token for each request.</p>
    pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
}

/// Fluent builder constructing a request to `CreateRunGroup`.
///
/// <p>Creates a run group.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateRunGroup {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_run_group_input::Builder,
}
impl CreateRunGroup {
    /// Creates a new `CreateRunGroup`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreateRunGroup,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreateRunGroupError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreateRunGroupOutput,
        aws_smithy_http::result::SdkError<crate::error::CreateRunGroupError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>A name for the group.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>A name for the group.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p>The maximum number of CPUs to use in the group.</p>
    pub fn max_cpus(mut self, input: i32) -> Self {
        self.inner = self.inner.max_cpus(input);
        self
    }
    /// <p>The maximum number of CPUs to use in the group.</p>
    pub fn set_max_cpus(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_cpus(input);
        self
    }
    /// <p>The maximum number of concurrent runs for the group.</p>
    pub fn max_runs(mut self, input: i32) -> Self {
        self.inner = self.inner.max_runs(input);
        self
    }
    /// <p>The maximum number of concurrent runs for the group.</p>
    pub fn set_max_runs(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_runs(input);
        self
    }
    /// <p>A max duration for the group.</p>
    pub fn max_duration(mut self, input: i32) -> Self {
        self.inner = self.inner.max_duration(input);
        self
    }
    /// <p>A max duration for the group.</p>
    pub fn set_max_duration(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_duration(input);
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Tags for the group.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.tags(k.into(), v.into());
        self
    }
    /// <p>Tags for the group.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>A request ID for the group.</p>
    pub fn request_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.request_id(input.into());
        self
    }
    /// <p>A request ID for the group.</p>
    pub fn set_request_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_request_id(input);
        self
    }
}

/// Fluent builder constructing a request to `CreateSequenceStore`.
///
/// <p>Creates a sequence store.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateSequenceStore {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_sequence_store_input::Builder,
}
impl CreateSequenceStore {
    /// Creates a new `CreateSequenceStore`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreateSequenceStore,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreateSequenceStoreError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreateSequenceStoreOutput,
        aws_smithy_http::result::SdkError<crate::error::CreateSequenceStoreError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>A name for the store.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>A name for the store.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p>A description for the store.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>A description for the store.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p>Server-side encryption (SSE) settings for the store.</p>
    pub fn sse_config(mut self, input: crate::model::SseConfig) -> Self {
        self.inner = self.inner.sse_config(input);
        self
    }
    /// <p>Server-side encryption (SSE) settings for the store.</p>
    pub fn set_sse_config(mut self, input: std::option::Option<crate::model::SseConfig>) -> Self {
        self.inner = self.inner.set_sse_config(input);
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Tags for the store.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.tags(k.into(), v.into());
        self
    }
    /// <p>Tags for the store.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>To ensure that requests don't run multiple times, specify a unique token for each request.</p>
    pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <p>To ensure that requests don't run multiple times, specify a unique token for each request.</p>
    pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
}

/// Fluent builder constructing a request to `CreateVariantStore`.
///
/// <p>Creates a variant store.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateVariantStore {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_variant_store_input::Builder,
}
impl CreateVariantStore {
    /// Creates a new `CreateVariantStore`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreateVariantStore,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreateVariantStoreError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreateVariantStoreOutput,
        aws_smithy_http::result::SdkError<crate::error::CreateVariantStoreError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The genome reference for the store's variants.</p>
    pub fn reference(mut self, input: crate::model::ReferenceItem) -> Self {
        self.inner = self.inner.reference(input);
        self
    }
    /// <p>The genome reference for the store's variants.</p>
    pub fn set_reference(
        mut self,
        input: std::option::Option<crate::model::ReferenceItem>,
    ) -> Self {
        self.inner = self.inner.set_reference(input);
        self
    }
    /// <p>A name for the store.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>A name for the store.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p>A description for the store.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>A description for the store.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Tags for the store.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.tags(k.into(), v.into());
        self
    }
    /// <p>Tags for the store.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>Server-side encryption (SSE) settings for the store.</p>
    pub fn sse_config(mut self, input: crate::model::SseConfig) -> Self {
        self.inner = self.inner.sse_config(input);
        self
    }
    /// <p>Server-side encryption (SSE) settings for the store.</p>
    pub fn set_sse_config(mut self, input: std::option::Option<crate::model::SseConfig>) -> Self {
        self.inner = self.inner.set_sse_config(input);
        self
    }
}

/// Fluent builder constructing a request to `CreateWorkflow`.
///
/// <p>Creates a workflow.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateWorkflow {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_workflow_input::Builder,
}
impl CreateWorkflow {
    /// Creates a new `CreateWorkflow`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreateWorkflow,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreateWorkflowError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreateWorkflowOutput,
        aws_smithy_http::result::SdkError<crate::error::CreateWorkflowError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>A name for the workflow.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>A name for the workflow.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p>A description for the workflow.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>A description for the workflow.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p>An engine for the workflow.</p>
    pub fn engine(mut self, input: crate::model::WorkflowEngine) -> Self {
        self.inner = self.inner.engine(input);
        self
    }
    /// <p>An engine for the workflow.</p>
    pub fn set_engine(mut self, input: std::option::Option<crate::model::WorkflowEngine>) -> Self {
        self.inner = self.inner.set_engine(input);
        self
    }
    /// <p>A ZIP archive for the workflow.</p>
    pub fn definition_zip(mut self, input: aws_smithy_types::Blob) -> Self {
        self.inner = self.inner.definition_zip(input);
        self
    }
    /// <p>A ZIP archive for the workflow.</p>
    pub fn set_definition_zip(
        mut self,
        input: std::option::Option<aws_smithy_types::Blob>,
    ) -> Self {
        self.inner = self.inner.set_definition_zip(input);
        self
    }
    /// <p>The URI of a definition for the workflow.</p>
    pub fn definition_uri(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.definition_uri(input.into());
        self
    }
    /// <p>The URI of a definition for the workflow.</p>
    pub fn set_definition_uri(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_definition_uri(input);
        self
    }
    /// <p>The path of the main definition file for the workflow.</p>
    pub fn main(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.main(input.into());
        self
    }
    /// <p>The path of the main definition file for the workflow.</p>
    pub fn set_main(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_main(input);
        self
    }
    /// Adds a key-value pair to `parameterTemplate`.
    ///
    /// To override the contents of this collection use [`set_parameter_template`](Self::set_parameter_template).
    ///
    /// <p>A parameter template for the workflow.</p>
    pub fn parameter_template(
        mut self,
        k: impl Into<std::string::String>,
        v: crate::model::WorkflowParameter,
    ) -> Self {
        self.inner = self.inner.parameter_template(k.into(), v);
        self
    }
    /// <p>A parameter template for the workflow.</p>
    pub fn set_parameter_template(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, crate::model::WorkflowParameter>,
        >,
    ) -> Self {
        self.inner = self.inner.set_parameter_template(input);
        self
    }
    /// <p>A storage capacity for the workflow.</p>
    pub fn storage_capacity(mut self, input: i32) -> Self {
        self.inner = self.inner.storage_capacity(input);
        self
    }
    /// <p>A storage capacity for the workflow.</p>
    pub fn set_storage_capacity(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_storage_capacity(input);
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Tags for the workflow.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.tags(k.into(), v.into());
        self
    }
    /// <p>Tags for the workflow.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>A request ID for the workflow.</p>
    pub fn request_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.request_id(input.into());
        self
    }
    /// <p>A request ID for the workflow.</p>
    pub fn set_request_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_request_id(input);
        self
    }
}

/// Fluent builder constructing a request to `DeleteAnnotationStore`.
///
/// <p>Deletes an annotation store.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteAnnotationStore {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_annotation_store_input::Builder,
}
impl DeleteAnnotationStore {
    /// Creates a new `DeleteAnnotationStore`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeleteAnnotationStore,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeleteAnnotationStoreError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeleteAnnotationStoreOutput,
        aws_smithy_http::result::SdkError<crate::error::DeleteAnnotationStoreError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The store's name.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>The store's name.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p>Whether to force deletion.</p>
    pub fn force(mut self, input: bool) -> Self {
        self.inner = self.inner.force(input);
        self
    }
    /// <p>Whether to force deletion.</p>
    pub fn set_force(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_force(input);
        self
    }
}

/// Fluent builder constructing a request to `DeleteReference`.
///
/// <p>Deletes a genome reference.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteReference {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_reference_input::Builder,
}
impl DeleteReference {
    /// Creates a new `DeleteReference`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeleteReference,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeleteReferenceError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeleteReferenceOutput,
        aws_smithy_http::result::SdkError<crate::error::DeleteReferenceError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The reference's ID.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.id(input.into());
        self
    }
    /// <p>The reference's ID.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_id(input);
        self
    }
    /// <p>The reference's store ID.</p>
    pub fn reference_store_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.reference_store_id(input.into());
        self
    }
    /// <p>The reference's store ID.</p>
    pub fn set_reference_store_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_reference_store_id(input);
        self
    }
}

/// Fluent builder constructing a request to `DeleteReferenceStore`.
///
/// <p>Deletes a genome reference store.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteReferenceStore {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_reference_store_input::Builder,
}
impl DeleteReferenceStore {
    /// Creates a new `DeleteReferenceStore`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeleteReferenceStore,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeleteReferenceStoreError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeleteReferenceStoreOutput,
        aws_smithy_http::result::SdkError<crate::error::DeleteReferenceStoreError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The store's ID.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.id(input.into());
        self
    }
    /// <p>The store's ID.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_id(input);
        self
    }
}

/// Fluent builder constructing a request to `DeleteRun`.
///
/// <p>Deletes a workflow run.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteRun {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_run_input::Builder,
}
impl DeleteRun {
    /// Creates a new `DeleteRun`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeleteRun,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeleteRunError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeleteRunOutput,
        aws_smithy_http::result::SdkError<crate::error::DeleteRunError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The run's ID.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.id(input.into());
        self
    }
    /// <p>The run's ID.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_id(input);
        self
    }
}

/// Fluent builder constructing a request to `DeleteRunGroup`.
///
/// <p>Deletes a workflow run group.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteRunGroup {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_run_group_input::Builder,
}
impl DeleteRunGroup {
    /// Creates a new `DeleteRunGroup`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeleteRunGroup,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeleteRunGroupError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeleteRunGroupOutput,
        aws_smithy_http::result::SdkError<crate::error::DeleteRunGroupError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The run group's ID.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.id(input.into());
        self
    }
    /// <p>The run group's ID.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_id(input);
        self
    }
}

/// Fluent builder constructing a request to `DeleteSequenceStore`.
///
/// <p>Deletes a sequence store.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteSequenceStore {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_sequence_store_input::Builder,
}
impl DeleteSequenceStore {
    /// Creates a new `DeleteSequenceStore`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeleteSequenceStore,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeleteSequenceStoreError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeleteSequenceStoreOutput,
        aws_smithy_http::result::SdkError<crate::error::DeleteSequenceStoreError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The sequence store's ID.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.id(input.into());
        self
    }
    /// <p>The sequence store's ID.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_id(input);
        self
    }
}

/// Fluent builder constructing a request to `DeleteVariantStore`.
///
/// <p>Deletes a variant store.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteVariantStore {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_variant_store_input::Builder,
}
impl DeleteVariantStore {
    /// Creates a new `DeleteVariantStore`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeleteVariantStore,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeleteVariantStoreError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeleteVariantStoreOutput,
        aws_smithy_http::result::SdkError<crate::error::DeleteVariantStoreError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The store's name.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>The store's name.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p>Whether to force deletion.</p>
    pub fn force(mut self, input: bool) -> Self {
        self.inner = self.inner.force(input);
        self
    }
    /// <p>Whether to force deletion.</p>
    pub fn set_force(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_force(input);
        self
    }
}

/// Fluent builder constructing a request to `DeleteWorkflow`.
///
/// <p>Deletes a workflow.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteWorkflow {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_workflow_input::Builder,
}
impl DeleteWorkflow {
    /// Creates a new `DeleteWorkflow`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeleteWorkflow,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeleteWorkflowError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeleteWorkflowOutput,
        aws_smithy_http::result::SdkError<crate::error::DeleteWorkflowError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The workflow's ID.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.id(input.into());
        self
    }
    /// <p>The workflow's ID.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_id(input);
        self
    }
}

/// Fluent builder constructing a request to `GetAnnotationImportJob`.
///
/// <p>Gets information about an annotation import job.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetAnnotationImportJob {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::get_annotation_import_job_input::Builder,
}
impl GetAnnotationImportJob {
    /// Creates a new `GetAnnotationImportJob`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::GetAnnotationImportJob,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::GetAnnotationImportJobError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::GetAnnotationImportJobOutput,
        aws_smithy_http::result::SdkError<crate::error::GetAnnotationImportJobError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The job's ID.</p>
    pub fn job_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.job_id(input.into());
        self
    }
    /// <p>The job's ID.</p>
    pub fn set_job_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_job_id(input);
        self
    }
}

/// Fluent builder constructing a request to `GetAnnotationStore`.
///
/// <p>Gets information about an annotation store.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetAnnotationStore {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::get_annotation_store_input::Builder,
}
impl GetAnnotationStore {
    /// Creates a new `GetAnnotationStore`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::GetAnnotationStore,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::GetAnnotationStoreError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::GetAnnotationStoreOutput,
        aws_smithy_http::result::SdkError<crate::error::GetAnnotationStoreError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The store's name.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>The store's name.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
}

/// Fluent builder constructing a request to `GetReadSet`.
///
/// <p>Gets a file from a read set.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetReadSet {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::get_read_set_input::Builder,
}
impl GetReadSet {
    /// Creates a new `GetReadSet`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::GetReadSet,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::GetReadSetError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::GetReadSetOutput,
        aws_smithy_http::result::SdkError<crate::error::GetReadSetError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The read set's ID.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.id(input.into());
        self
    }
    /// <p>The read set's ID.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_id(input);
        self
    }
    /// <p>The read set's sequence store ID.</p>
    pub fn sequence_store_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.sequence_store_id(input.into());
        self
    }
    /// <p>The read set's sequence store ID.</p>
    pub fn set_sequence_store_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_sequence_store_id(input);
        self
    }
    /// <p>The file to retrieve.</p>
    pub fn file(mut self, input: crate::model::ReadSetFile) -> Self {
        self.inner = self.inner.file(input);
        self
    }
    /// <p>The file to retrieve.</p>
    pub fn set_file(mut self, input: std::option::Option<crate::model::ReadSetFile>) -> Self {
        self.inner = self.inner.set_file(input);
        self
    }
    /// <p>The part number to retrieve.</p>
    pub fn part_number(mut self, input: i32) -> Self {
        self.inner = self.inner.part_number(input);
        self
    }
    /// <p>The part number to retrieve.</p>
    pub fn set_part_number(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_part_number(input);
        self
    }
}

/// Fluent builder constructing a request to `GetReadSetActivationJob`.
///
/// <p>Gets information about a read set activation job.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetReadSetActivationJob {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::get_read_set_activation_job_input::Builder,
}
impl GetReadSetActivationJob {
    /// Creates a new `GetReadSetActivationJob`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::GetReadSetActivationJob,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::GetReadSetActivationJobError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::GetReadSetActivationJobOutput,
        aws_smithy_http::result::SdkError<crate::error::GetReadSetActivationJobError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The job's ID.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.id(input.into());
        self
    }
    /// <p>The job's ID.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_id(input);
        self
    }
    /// <p>The job's sequence store ID.</p>
    pub fn sequence_store_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.sequence_store_id(input.into());
        self
    }
    /// <p>The job's sequence store ID.</p>
    pub fn set_sequence_store_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_sequence_store_id(input);
        self
    }
}

/// Fluent builder constructing a request to `GetReadSetExportJob`.
///
/// <p>Gets information about a read set export job.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetReadSetExportJob {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::get_read_set_export_job_input::Builder,
}
impl GetReadSetExportJob {
    /// Creates a new `GetReadSetExportJob`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::GetReadSetExportJob,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::GetReadSetExportJobError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::GetReadSetExportJobOutput,
        aws_smithy_http::result::SdkError<crate::error::GetReadSetExportJobError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The job's sequence store ID.</p>
    pub fn sequence_store_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.sequence_store_id(input.into());
        self
    }
    /// <p>The job's sequence store ID.</p>
    pub fn set_sequence_store_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_sequence_store_id(input);
        self
    }
    /// <p>The job's ID.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.id(input.into());
        self
    }
    /// <p>The job's ID.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_id(input);
        self
    }
}

/// Fluent builder constructing a request to `GetReadSetImportJob`.
///
/// <p>Gets information about a read set import job.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetReadSetImportJob {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::get_read_set_import_job_input::Builder,
}
impl GetReadSetImportJob {
    /// Creates a new `GetReadSetImportJob`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::GetReadSetImportJob,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::GetReadSetImportJobError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::GetReadSetImportJobOutput,
        aws_smithy_http::result::SdkError<crate::error::GetReadSetImportJobError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The job's ID.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.id(input.into());
        self
    }
    /// <p>The job's ID.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_id(input);
        self
    }
    /// <p>The job's sequence store ID.</p>
    pub fn sequence_store_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.sequence_store_id(input.into());
        self
    }
    /// <p>The job's sequence store ID.</p>
    pub fn set_sequence_store_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_sequence_store_id(input);
        self
    }
}

/// Fluent builder constructing a request to `GetReadSetMetadata`.
///
/// <p>Gets details about a read set.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetReadSetMetadata {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::get_read_set_metadata_input::Builder,
}
impl GetReadSetMetadata {
    /// Creates a new `GetReadSetMetadata`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::GetReadSetMetadata,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::GetReadSetMetadataError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::GetReadSetMetadataOutput,
        aws_smithy_http::result::SdkError<crate::error::GetReadSetMetadataError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The read set's ID.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.id(input.into());
        self
    }
    /// <p>The read set's ID.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_id(input);
        self
    }
    /// <p>The read set's sequence store ID.</p>
    pub fn sequence_store_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.sequence_store_id(input.into());
        self
    }
    /// <p>The read set's sequence store ID.</p>
    pub fn set_sequence_store_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_sequence_store_id(input);
        self
    }
}

/// Fluent builder constructing a request to `GetReference`.
///
/// <p>Gets a reference file.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetReference {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::get_reference_input::Builder,
}
impl GetReference {
    /// Creates a new `GetReference`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::GetReference,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::GetReferenceError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::GetReferenceOutput,
        aws_smithy_http::result::SdkError<crate::error::GetReferenceError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The reference's ID.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.id(input.into());
        self
    }
    /// <p>The reference's ID.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_id(input);
        self
    }
    /// <p>The reference's store ID.</p>
    pub fn reference_store_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.reference_store_id(input.into());
        self
    }
    /// <p>The reference's store ID.</p>
    pub fn set_reference_store_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_reference_store_id(input);
        self
    }
    /// <p>The range to retrieve.</p>
    pub fn range(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.range(input.into());
        self
    }
    /// <p>The range to retrieve.</p>
    pub fn set_range(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_range(input);
        self
    }
    /// <p>The part number to retrieve.</p>
    pub fn part_number(mut self, input: i32) -> Self {
        self.inner = self.inner.part_number(input);
        self
    }
    /// <p>The part number to retrieve.</p>
    pub fn set_part_number(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_part_number(input);
        self
    }
    /// <p>The file to retrieve.</p>
    pub fn file(mut self, input: crate::model::ReferenceFile) -> Self {
        self.inner = self.inner.file(input);
        self
    }
    /// <p>The file to retrieve.</p>
    pub fn set_file(mut self, input: std::option::Option<crate::model::ReferenceFile>) -> Self {
        self.inner = self.inner.set_file(input);
        self
    }
}

/// Fluent builder constructing a request to `GetReferenceImportJob`.
///
/// <p>Gets information about a reference import job.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetReferenceImportJob {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::get_reference_import_job_input::Builder,
}
impl GetReferenceImportJob {
    /// Creates a new `GetReferenceImportJob`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::GetReferenceImportJob,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::GetReferenceImportJobError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::GetReferenceImportJobOutput,
        aws_smithy_http::result::SdkError<crate::error::GetReferenceImportJobError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The job's ID.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.id(input.into());
        self
    }
    /// <p>The job's ID.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_id(input);
        self
    }
    /// <p>The job's reference store ID.</p>
    pub fn reference_store_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.reference_store_id(input.into());
        self
    }
    /// <p>The job's reference store ID.</p>
    pub fn set_reference_store_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_reference_store_id(input);
        self
    }
}

/// Fluent builder constructing a request to `GetReferenceMetadata`.
///
/// <p>Gets information about a genome reference's metadata.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetReferenceMetadata {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::get_reference_metadata_input::Builder,
}
impl GetReferenceMetadata {
    /// Creates a new `GetReferenceMetadata`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::GetReferenceMetadata,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::GetReferenceMetadataError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::GetReferenceMetadataOutput,
        aws_smithy_http::result::SdkError<crate::error::GetReferenceMetadataError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The reference's ID.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.id(input.into());
        self
    }
    /// <p>The reference's ID.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_id(input);
        self
    }
    /// <p>The reference's reference store ID.</p>
    pub fn reference_store_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.reference_store_id(input.into());
        self
    }
    /// <p>The reference's reference store ID.</p>
    pub fn set_reference_store_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_reference_store_id(input);
        self
    }
}

/// Fluent builder constructing a request to `GetReferenceStore`.
///
/// <p>Gets information about a reference store.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetReferenceStore {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::get_reference_store_input::Builder,
}
impl GetReferenceStore {
    /// Creates a new `GetReferenceStore`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::GetReferenceStore,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::GetReferenceStoreError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::GetReferenceStoreOutput,
        aws_smithy_http::result::SdkError<crate::error::GetReferenceStoreError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The store's ID.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.id(input.into());
        self
    }
    /// <p>The store's ID.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_id(input);
        self
    }
}

/// Fluent builder constructing a request to `GetRun`.
///
/// <p>Gets information about a workflow run.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetRun {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::get_run_input::Builder,
}
impl GetRun {
    /// Creates a new `GetRun`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::GetRun,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::GetRunError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::GetRunOutput,
        aws_smithy_http::result::SdkError<crate::error::GetRunError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The run's ID.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.id(input.into());
        self
    }
    /// <p>The run's ID.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_id(input);
        self
    }
    /// Appends an item to `export`.
    ///
    /// To override the contents of this collection use [`set_export`](Self::set_export).
    ///
    /// <p>The run's export format.</p>
    pub fn export(mut self, input: crate::model::RunExport) -> Self {
        self.inner = self.inner.export(input);
        self
    }
    /// <p>The run's export format.</p>
    pub fn set_export(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::RunExport>>,
    ) -> Self {
        self.inner = self.inner.set_export(input);
        self
    }
}

/// Fluent builder constructing a request to `GetRunGroup`.
///
/// <p>Gets information about a workflow run group.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetRunGroup {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::get_run_group_input::Builder,
}
impl GetRunGroup {
    /// Creates a new `GetRunGroup`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::GetRunGroup,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::GetRunGroupError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::GetRunGroupOutput,
        aws_smithy_http::result::SdkError<crate::error::GetRunGroupError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The group's ID.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.id(input.into());
        self
    }
    /// <p>The group's ID.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_id(input);
        self
    }
}

/// Fluent builder constructing a request to `GetRunTask`.
///
/// <p>Gets information about a workflow run task.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetRunTask {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::get_run_task_input::Builder,
}
impl GetRunTask {
    /// Creates a new `GetRunTask`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::GetRunTask,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::GetRunTaskError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::GetRunTaskOutput,
        aws_smithy_http::result::SdkError<crate::error::GetRunTaskError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The task's ID.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.id(input.into());
        self
    }
    /// <p>The task's ID.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_id(input);
        self
    }
    /// <p>The task's ID.</p>
    pub fn task_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.task_id(input.into());
        self
    }
    /// <p>The task's ID.</p>
    pub fn set_task_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_task_id(input);
        self
    }
}

/// Fluent builder constructing a request to `GetSequenceStore`.
///
/// <p>Gets information about a sequence store.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetSequenceStore {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::get_sequence_store_input::Builder,
}
impl GetSequenceStore {
    /// Creates a new `GetSequenceStore`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::GetSequenceStore,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::GetSequenceStoreError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::GetSequenceStoreOutput,
        aws_smithy_http::result::SdkError<crate::error::GetSequenceStoreError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The store's ID.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.id(input.into());
        self
    }
    /// <p>The store's ID.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_id(input);
        self
    }
}

/// Fluent builder constructing a request to `GetVariantImportJob`.
///
/// <p>Gets information about a variant import job.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetVariantImportJob {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::get_variant_import_job_input::Builder,
}
impl GetVariantImportJob {
    /// Creates a new `GetVariantImportJob`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::GetVariantImportJob,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::GetVariantImportJobError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::GetVariantImportJobOutput,
        aws_smithy_http::result::SdkError<crate::error::GetVariantImportJobError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The job's ID.</p>
    pub fn job_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.job_id(input.into());
        self
    }
    /// <p>The job's ID.</p>
    pub fn set_job_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_job_id(input);
        self
    }
}

/// Fluent builder constructing a request to `GetVariantStore`.
///
/// <p>Gets information about a variant store.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetVariantStore {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::get_variant_store_input::Builder,
}
impl GetVariantStore {
    /// Creates a new `GetVariantStore`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::GetVariantStore,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::GetVariantStoreError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::GetVariantStoreOutput,
        aws_smithy_http::result::SdkError<crate::error::GetVariantStoreError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The store's name.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>The store's name.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
}

/// Fluent builder constructing a request to `GetWorkflow`.
///
/// <p>Gets information about a workflow.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetWorkflow {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::get_workflow_input::Builder,
}
impl GetWorkflow {
    /// Creates a new `GetWorkflow`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::GetWorkflow,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::GetWorkflowError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::GetWorkflowOutput,
        aws_smithy_http::result::SdkError<crate::error::GetWorkflowError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The workflow's ID.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.id(input.into());
        self
    }
    /// <p>The workflow's ID.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_id(input);
        self
    }
    /// <p>The workflow's type.</p>
    pub fn r#type(mut self, input: crate::model::WorkflowType) -> Self {
        self.inner = self.inner.r#type(input);
        self
    }
    /// <p>The workflow's type.</p>
    pub fn set_type(mut self, input: std::option::Option<crate::model::WorkflowType>) -> Self {
        self.inner = self.inner.set_type(input);
        self
    }
    /// Appends an item to `export`.
    ///
    /// To override the contents of this collection use [`set_export`](Self::set_export).
    ///
    /// <p>The export format for the workflow.</p>
    pub fn export(mut self, input: crate::model::WorkflowExport) -> Self {
        self.inner = self.inner.export(input);
        self
    }
    /// <p>The export format for the workflow.</p>
    pub fn set_export(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::WorkflowExport>>,
    ) -> Self {
        self.inner = self.inner.set_export(input);
        self
    }
}

/// Fluent builder constructing a request to `ListAnnotationImportJobs`.
///
/// <p>Retrieves a list of annotation import jobs.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListAnnotationImportJobs {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_annotation_import_jobs_input::Builder,
}
impl ListAnnotationImportJobs {
    /// Creates a new `ListAnnotationImportJobs`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListAnnotationImportJobs,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListAnnotationImportJobsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListAnnotationImportJobsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListAnnotationImportJobsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListAnnotationImportJobsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListAnnotationImportJobsPaginator {
        crate::paginator::ListAnnotationImportJobsPaginator::new(self.handle, self.inner)
    }
    /// <p>The maximum number of jobs to return in one page of results.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of jobs to return in one page of results.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// Appends an item to `ids`.
    ///
    /// To override the contents of this collection use [`set_ids`](Self::set_ids).
    ///
    /// <p>IDs of annotation import jobs to retrieve.</p>
    pub fn ids(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.ids(input.into());
        self
    }
    /// <p>IDs of annotation import jobs to retrieve.</p>
    pub fn set_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_ids(input);
        self
    }
    /// <p>Specify the pagination token from a previous request to retrieve the next page of results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>Specify the pagination token from a previous request to retrieve the next page of results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>A filter to apply to the list.</p>
    pub fn filter(mut self, input: crate::model::ListAnnotationImportJobsFilter) -> Self {
        self.inner = self.inner.filter(input);
        self
    }
    /// <p>A filter to apply to the list.</p>
    pub fn set_filter(
        mut self,
        input: std::option::Option<crate::model::ListAnnotationImportJobsFilter>,
    ) -> Self {
        self.inner = self.inner.set_filter(input);
        self
    }
}

/// Fluent builder constructing a request to `ListAnnotationStores`.
///
/// <p>Retrieves a list of annotation stores.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListAnnotationStores {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_annotation_stores_input::Builder,
}
impl ListAnnotationStores {
    /// Creates a new `ListAnnotationStores`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListAnnotationStores,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListAnnotationStoresError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListAnnotationStoresOutput,
        aws_smithy_http::result::SdkError<crate::error::ListAnnotationStoresError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListAnnotationStoresPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListAnnotationStoresPaginator {
        crate::paginator::ListAnnotationStoresPaginator::new(self.handle, self.inner)
    }
    /// Appends an item to `ids`.
    ///
    /// To override the contents of this collection use [`set_ids`](Self::set_ids).
    ///
    /// <p>IDs of stores to list.</p>
    pub fn ids(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.ids(input.into());
        self
    }
    /// <p>IDs of stores to list.</p>
    pub fn set_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_ids(input);
        self
    }
    /// <p>The maximum number of stores to return in one page of results.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of stores to return in one page of results.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>Specify the pagination token from a previous request to retrieve the next page of results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>Specify the pagination token from a previous request to retrieve the next page of results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>A filter to apply to the list.</p>
    pub fn filter(mut self, input: crate::model::ListAnnotationStoresFilter) -> Self {
        self.inner = self.inner.filter(input);
        self
    }
    /// <p>A filter to apply to the list.</p>
    pub fn set_filter(
        mut self,
        input: std::option::Option<crate::model::ListAnnotationStoresFilter>,
    ) -> Self {
        self.inner = self.inner.set_filter(input);
        self
    }
}

/// Fluent builder constructing a request to `ListReadSetActivationJobs`.
///
/// <p>Retrieves a list of read set activation jobs.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListReadSetActivationJobs {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_read_set_activation_jobs_input::Builder,
}
impl ListReadSetActivationJobs {
    /// Creates a new `ListReadSetActivationJobs`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListReadSetActivationJobs,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListReadSetActivationJobsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListReadSetActivationJobsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListReadSetActivationJobsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListReadSetActivationJobsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListReadSetActivationJobsPaginator {
        crate::paginator::ListReadSetActivationJobsPaginator::new(self.handle, self.inner)
    }
    /// <p>The read set's sequence store ID.</p>
    pub fn sequence_store_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.sequence_store_id(input.into());
        self
    }
    /// <p>The read set's sequence store ID.</p>
    pub fn set_sequence_store_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_sequence_store_id(input);
        self
    }
    /// <p>The maximum number of read set activation jobs to return in one page of results.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of read set activation jobs to return in one page of results.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>Specify the pagination token from a previous request to retrieve the next page of results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>Specify the pagination token from a previous request to retrieve the next page of results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>A filter to apply to the list.</p>
    pub fn filter(mut self, input: crate::model::ActivateReadSetFilter) -> Self {
        self.inner = self.inner.filter(input);
        self
    }
    /// <p>A filter to apply to the list.</p>
    pub fn set_filter(
        mut self,
        input: std::option::Option<crate::model::ActivateReadSetFilter>,
    ) -> Self {
        self.inner = self.inner.set_filter(input);
        self
    }
}

/// Fluent builder constructing a request to `ListReadSetExportJobs`.
///
/// <p>Retrieves a list of read set export jobs.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListReadSetExportJobs {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_read_set_export_jobs_input::Builder,
}
impl ListReadSetExportJobs {
    /// Creates a new `ListReadSetExportJobs`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListReadSetExportJobs,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListReadSetExportJobsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListReadSetExportJobsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListReadSetExportJobsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListReadSetExportJobsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListReadSetExportJobsPaginator {
        crate::paginator::ListReadSetExportJobsPaginator::new(self.handle, self.inner)
    }
    /// <p>The jobs' sequence store ID.</p>
    pub fn sequence_store_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.sequence_store_id(input.into());
        self
    }
    /// <p>The jobs' sequence store ID.</p>
    pub fn set_sequence_store_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_sequence_store_id(input);
        self
    }
    /// <p>The maximum number of jobs to return in one page of results.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of jobs to return in one page of results.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>Specify the pagination token from a previous request to retrieve the next page of results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>Specify the pagination token from a previous request to retrieve the next page of results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>A filter to apply to the list.</p>
    pub fn filter(mut self, input: crate::model::ExportReadSetFilter) -> Self {
        self.inner = self.inner.filter(input);
        self
    }
    /// <p>A filter to apply to the list.</p>
    pub fn set_filter(
        mut self,
        input: std::option::Option<crate::model::ExportReadSetFilter>,
    ) -> Self {
        self.inner = self.inner.set_filter(input);
        self
    }
}

/// Fluent builder constructing a request to `ListReadSetImportJobs`.
///
/// <p>Retrieves a list of read set import jobs.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListReadSetImportJobs {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_read_set_import_jobs_input::Builder,
}
impl ListReadSetImportJobs {
    /// Creates a new `ListReadSetImportJobs`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListReadSetImportJobs,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListReadSetImportJobsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListReadSetImportJobsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListReadSetImportJobsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListReadSetImportJobsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListReadSetImportJobsPaginator {
        crate::paginator::ListReadSetImportJobsPaginator::new(self.handle, self.inner)
    }
    /// <p>The maximum number of jobs to return in one page of results.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of jobs to return in one page of results.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>Specify the pagination token from a previous request to retrieve the next page of results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>Specify the pagination token from a previous request to retrieve the next page of results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The jobs' sequence store ID.</p>
    pub fn sequence_store_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.sequence_store_id(input.into());
        self
    }
    /// <p>The jobs' sequence store ID.</p>
    pub fn set_sequence_store_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_sequence_store_id(input);
        self
    }
    /// <p>A filter to apply to the list.</p>
    pub fn filter(mut self, input: crate::model::ImportReadSetFilter) -> Self {
        self.inner = self.inner.filter(input);
        self
    }
    /// <p>A filter to apply to the list.</p>
    pub fn set_filter(
        mut self,
        input: std::option::Option<crate::model::ImportReadSetFilter>,
    ) -> Self {
        self.inner = self.inner.set_filter(input);
        self
    }
}

/// Fluent builder constructing a request to `ListReadSets`.
///
/// <p>Retrieves a list of read sets.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListReadSets {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_read_sets_input::Builder,
}
impl ListReadSets {
    /// Creates a new `ListReadSets`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListReadSets,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListReadSetsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListReadSetsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListReadSetsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListReadSetsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListReadSetsPaginator {
        crate::paginator::ListReadSetsPaginator::new(self.handle, self.inner)
    }
    /// <p>The jobs' sequence store ID.</p>
    pub fn sequence_store_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.sequence_store_id(input.into());
        self
    }
    /// <p>The jobs' sequence store ID.</p>
    pub fn set_sequence_store_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_sequence_store_id(input);
        self
    }
    /// <p>The maximum number of read sets to return in one page of results.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of read sets to return in one page of results.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>Specify the pagination token from a previous request to retrieve the next page of results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>Specify the pagination token from a previous request to retrieve the next page of results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>A filter to apply to the list.</p>
    pub fn filter(mut self, input: crate::model::ReadSetFilter) -> Self {
        self.inner = self.inner.filter(input);
        self
    }
    /// <p>A filter to apply to the list.</p>
    pub fn set_filter(mut self, input: std::option::Option<crate::model::ReadSetFilter>) -> Self {
        self.inner = self.inner.set_filter(input);
        self
    }
}

/// Fluent builder constructing a request to `ListReferenceImportJobs`.
///
/// <p>Retrieves a list of reference import jobs.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListReferenceImportJobs {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_reference_import_jobs_input::Builder,
}
impl ListReferenceImportJobs {
    /// Creates a new `ListReferenceImportJobs`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListReferenceImportJobs,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListReferenceImportJobsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListReferenceImportJobsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListReferenceImportJobsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListReferenceImportJobsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListReferenceImportJobsPaginator {
        crate::paginator::ListReferenceImportJobsPaginator::new(self.handle, self.inner)
    }
    /// <p>The maximum number of jobs to return in one page of results.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of jobs to return in one page of results.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>Specify the pagination token from a previous request to retrieve the next page of results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>Specify the pagination token from a previous request to retrieve the next page of results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The job's reference store ID.</p>
    pub fn reference_store_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.reference_store_id(input.into());
        self
    }
    /// <p>The job's reference store ID.</p>
    pub fn set_reference_store_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_reference_store_id(input);
        self
    }
    /// <p>A filter to apply to the list.</p>
    pub fn filter(mut self, input: crate::model::ImportReferenceFilter) -> Self {
        self.inner = self.inner.filter(input);
        self
    }
    /// <p>A filter to apply to the list.</p>
    pub fn set_filter(
        mut self,
        input: std::option::Option<crate::model::ImportReferenceFilter>,
    ) -> Self {
        self.inner = self.inner.set_filter(input);
        self
    }
}

/// Fluent builder constructing a request to `ListReferences`.
///
/// <p>Retrieves a list of references.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListReferences {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_references_input::Builder,
}
impl ListReferences {
    /// Creates a new `ListReferences`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListReferences,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListReferencesError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListReferencesOutput,
        aws_smithy_http::result::SdkError<crate::error::ListReferencesError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListReferencesPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListReferencesPaginator {
        crate::paginator::ListReferencesPaginator::new(self.handle, self.inner)
    }
    /// <p>The references' reference store ID.</p>
    pub fn reference_store_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.reference_store_id(input.into());
        self
    }
    /// <p>The references' reference store ID.</p>
    pub fn set_reference_store_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_reference_store_id(input);
        self
    }
    /// <p>The maximum number of references to return in one page of results.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of references to return in one page of results.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>Specify the pagination token from a previous request to retrieve the next page of results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>Specify the pagination token from a previous request to retrieve the next page of results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>A filter to apply to the list.</p>
    pub fn filter(mut self, input: crate::model::ReferenceFilter) -> Self {
        self.inner = self.inner.filter(input);
        self
    }
    /// <p>A filter to apply to the list.</p>
    pub fn set_filter(mut self, input: std::option::Option<crate::model::ReferenceFilter>) -> Self {
        self.inner = self.inner.set_filter(input);
        self
    }
}

/// Fluent builder constructing a request to `ListReferenceStores`.
///
/// <p>Retrieves a list of reference stores.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListReferenceStores {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_reference_stores_input::Builder,
}
impl ListReferenceStores {
    /// Creates a new `ListReferenceStores`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListReferenceStores,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListReferenceStoresError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListReferenceStoresOutput,
        aws_smithy_http::result::SdkError<crate::error::ListReferenceStoresError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListReferenceStoresPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListReferenceStoresPaginator {
        crate::paginator::ListReferenceStoresPaginator::new(self.handle, self.inner)
    }
    /// <p>The maximum number of stores to return in one page of results.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of stores to return in one page of results.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>Specify the pagination token from a previous request to retrieve the next page of results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>Specify the pagination token from a previous request to retrieve the next page of results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>A filter to apply to the list.</p>
    pub fn filter(mut self, input: crate::model::ReferenceStoreFilter) -> Self {
        self.inner = self.inner.filter(input);
        self
    }
    /// <p>A filter to apply to the list.</p>
    pub fn set_filter(
        mut self,
        input: std::option::Option<crate::model::ReferenceStoreFilter>,
    ) -> Self {
        self.inner = self.inner.set_filter(input);
        self
    }
}

/// Fluent builder constructing a request to `ListRunGroups`.
///
/// <p>Retrieves a list of run groups.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListRunGroups {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_run_groups_input::Builder,
}
impl ListRunGroups {
    /// Creates a new `ListRunGroups`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListRunGroups,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListRunGroupsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListRunGroupsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListRunGroupsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListRunGroupsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListRunGroupsPaginator {
        crate::paginator::ListRunGroupsPaginator::new(self.handle, self.inner)
    }
    /// <p>The run groups' name.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>The run groups' name.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p>Specify the pagination token from a previous request to retrieve the next page of results.</p>
    pub fn starting_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.starting_token(input.into());
        self
    }
    /// <p>Specify the pagination token from a previous request to retrieve the next page of results.</p>
    pub fn set_starting_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_starting_token(input);
        self
    }
    /// <p>The maximum number of run groups to return in one page of results.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of run groups to return in one page of results.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
}

/// Fluent builder constructing a request to `ListRuns`.
///
/// <p>Retrieves a list of runs.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListRuns {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_runs_input::Builder,
}
impl ListRuns {
    /// Creates a new `ListRuns`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListRuns,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListRunsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListRunsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListRunsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListRunsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListRunsPaginator {
        crate::paginator::ListRunsPaginator::new(self.handle, self.inner)
    }
    /// <p>Filter the list by run name.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>Filter the list by run name.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p>Filter the list by run group ID.</p>
    pub fn run_group_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.run_group_id(input.into());
        self
    }
    /// <p>Filter the list by run group ID.</p>
    pub fn set_run_group_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_run_group_id(input);
        self
    }
    /// <p>Specify the pagination token from a previous request to retrieve the next page of results.</p>
    pub fn starting_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.starting_token(input.into());
        self
    }
    /// <p>Specify the pagination token from a previous request to retrieve the next page of results.</p>
    pub fn set_starting_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_starting_token(input);
        self
    }
    /// <p>The maximum number of runs to return in one page of results.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of runs to return in one page of results.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
}

/// Fluent builder constructing a request to `ListRunTasks`.
///
/// <p>Retrieves a list of tasks for a run.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListRunTasks {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_run_tasks_input::Builder,
}
impl ListRunTasks {
    /// Creates a new `ListRunTasks`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListRunTasks,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListRunTasksError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListRunTasksOutput,
        aws_smithy_http::result::SdkError<crate::error::ListRunTasksError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListRunTasksPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListRunTasksPaginator {
        crate::paginator::ListRunTasksPaginator::new(self.handle, self.inner)
    }
    /// <p>The run's ID.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.id(input.into());
        self
    }
    /// <p>The run's ID.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_id(input);
        self
    }
    /// <p>Filter the list by status.</p>
    pub fn status(mut self, input: crate::model::TaskStatus) -> Self {
        self.inner = self.inner.status(input);
        self
    }
    /// <p>Filter the list by status.</p>
    pub fn set_status(mut self, input: std::option::Option<crate::model::TaskStatus>) -> Self {
        self.inner = self.inner.set_status(input);
        self
    }
    /// <p>Specify the pagination token from a previous request to retrieve the next page of results.</p>
    pub fn starting_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.starting_token(input.into());
        self
    }
    /// <p>Specify the pagination token from a previous request to retrieve the next page of results.</p>
    pub fn set_starting_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_starting_token(input);
        self
    }
    /// <p>The maximum number of run tasks to return in one page of results.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of run tasks to return in one page of results.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
}

/// Fluent builder constructing a request to `ListSequenceStores`.
///
/// <p>Retrieves a list of sequence stores.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListSequenceStores {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_sequence_stores_input::Builder,
}
impl ListSequenceStores {
    /// Creates a new `ListSequenceStores`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListSequenceStores,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListSequenceStoresError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListSequenceStoresOutput,
        aws_smithy_http::result::SdkError<crate::error::ListSequenceStoresError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListSequenceStoresPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListSequenceStoresPaginator {
        crate::paginator::ListSequenceStoresPaginator::new(self.handle, self.inner)
    }
    /// <p>The maximum number of stores to return in one page of results.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of stores to return in one page of results.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>Specify the pagination token from a previous request to retrieve the next page of results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>Specify the pagination token from a previous request to retrieve the next page of results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>A filter to apply to the list.</p>
    pub fn filter(mut self, input: crate::model::SequenceStoreFilter) -> Self {
        self.inner = self.inner.filter(input);
        self
    }
    /// <p>A filter to apply to the list.</p>
    pub fn set_filter(
        mut self,
        input: std::option::Option<crate::model::SequenceStoreFilter>,
    ) -> Self {
        self.inner = self.inner.set_filter(input);
        self
    }
}

/// Fluent builder constructing a request to `ListTagsForResource`.
///
/// <p>Retrieves a list of tags for a resource.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListTagsForResource {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_tags_for_resource_input::Builder,
}
impl ListTagsForResource {
    /// Creates a new `ListTagsForResource`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListTagsForResource,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListTagsForResourceOutput,
        aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The resource's ARN.</p>
    pub fn resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.resource_arn(input.into());
        self
    }
    /// <p>The resource's ARN.</p>
    pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_resource_arn(input);
        self
    }
}

/// Fluent builder constructing a request to `ListVariantImportJobs`.
///
/// <p>Retrieves a list of variant import jobs.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListVariantImportJobs {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_variant_import_jobs_input::Builder,
}
impl ListVariantImportJobs {
    /// Creates a new `ListVariantImportJobs`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListVariantImportJobs,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListVariantImportJobsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListVariantImportJobsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListVariantImportJobsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListVariantImportJobsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListVariantImportJobsPaginator {
        crate::paginator::ListVariantImportJobsPaginator::new(self.handle, self.inner)
    }
    /// <p>The maximum number of import jobs to return in one page of results.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of import jobs to return in one page of results.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// Appends an item to `ids`.
    ///
    /// To override the contents of this collection use [`set_ids`](Self::set_ids).
    ///
    /// <p>A list of job IDs.</p>
    pub fn ids(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.ids(input.into());
        self
    }
    /// <p>A list of job IDs.</p>
    pub fn set_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_ids(input);
        self
    }
    /// <p>Specify the pagination token from a previous request to retrieve the next page of results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>Specify the pagination token from a previous request to retrieve the next page of results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>A filter to apply to the list.</p>
    pub fn filter(mut self, input: crate::model::ListVariantImportJobsFilter) -> Self {
        self.inner = self.inner.filter(input);
        self
    }
    /// <p>A filter to apply to the list.</p>
    pub fn set_filter(
        mut self,
        input: std::option::Option<crate::model::ListVariantImportJobsFilter>,
    ) -> Self {
        self.inner = self.inner.set_filter(input);
        self
    }
}

/// Fluent builder constructing a request to `ListVariantStores`.
///
/// <p>Retrieves a list of variant stores.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListVariantStores {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_variant_stores_input::Builder,
}
impl ListVariantStores {
    /// Creates a new `ListVariantStores`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListVariantStores,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListVariantStoresError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListVariantStoresOutput,
        aws_smithy_http::result::SdkError<crate::error::ListVariantStoresError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListVariantStoresPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListVariantStoresPaginator {
        crate::paginator::ListVariantStoresPaginator::new(self.handle, self.inner)
    }
    /// <p>The maximum number of stores to return in one page of results.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of stores to return in one page of results.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// Appends an item to `ids`.
    ///
    /// To override the contents of this collection use [`set_ids`](Self::set_ids).
    ///
    /// <p>A list of store IDs.</p>
    pub fn ids(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.ids(input.into());
        self
    }
    /// <p>A list of store IDs.</p>
    pub fn set_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_ids(input);
        self
    }
    /// <p>Specify the pagination token from a previous request to retrieve the next page of results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>Specify the pagination token from a previous request to retrieve the next page of results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>A filter to apply to the list.</p>
    pub fn filter(mut self, input: crate::model::ListVariantStoresFilter) -> Self {
        self.inner = self.inner.filter(input);
        self
    }
    /// <p>A filter to apply to the list.</p>
    pub fn set_filter(
        mut self,
        input: std::option::Option<crate::model::ListVariantStoresFilter>,
    ) -> Self {
        self.inner = self.inner.set_filter(input);
        self
    }
}

/// Fluent builder constructing a request to `ListWorkflows`.
///
/// <p>Retrieves a list of workflows.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListWorkflows {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_workflows_input::Builder,
}
impl ListWorkflows {
    /// Creates a new `ListWorkflows`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListWorkflows,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListWorkflowsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListWorkflowsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListWorkflowsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListWorkflowsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListWorkflowsPaginator {
        crate::paginator::ListWorkflowsPaginator::new(self.handle, self.inner)
    }
    /// <p>The workflows' type.</p>
    pub fn r#type(mut self, input: crate::model::WorkflowType) -> Self {
        self.inner = self.inner.r#type(input);
        self
    }
    /// <p>The workflows' type.</p>
    pub fn set_type(mut self, input: std::option::Option<crate::model::WorkflowType>) -> Self {
        self.inner = self.inner.set_type(input);
        self
    }
    /// <p>The workflows' name.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>The workflows' name.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p>Specify the pagination token from a previous request to retrieve the next page of results.</p>
    pub fn starting_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.starting_token(input.into());
        self
    }
    /// <p>Specify the pagination token from a previous request to retrieve the next page of results.</p>
    pub fn set_starting_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_starting_token(input);
        self
    }
    /// <p>The maximum number of workflows to return in one page of results.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of workflows to return in one page of results.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
}

/// Fluent builder constructing a request to `StartAnnotationImportJob`.
///
/// <p>Starts an annotation import job.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct StartAnnotationImportJob {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::start_annotation_import_job_input::Builder,
}
impl StartAnnotationImportJob {
    /// Creates a new `StartAnnotationImportJob`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::StartAnnotationImportJob,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::StartAnnotationImportJobError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::StartAnnotationImportJobOutput,
        aws_smithy_http::result::SdkError<crate::error::StartAnnotationImportJobError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>A destination annotation store for the job.</p>
    pub fn destination_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.destination_name(input.into());
        self
    }
    /// <p>A destination annotation store for the job.</p>
    pub fn set_destination_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_destination_name(input);
        self
    }
    /// <p>A service role for the job.</p>
    pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.role_arn(input.into());
        self
    }
    /// <p>A service role for the job.</p>
    pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_role_arn(input);
        self
    }
    /// Appends an item to `items`.
    ///
    /// To override the contents of this collection use [`set_items`](Self::set_items).
    ///
    /// <p>Items to import.</p>
    pub fn items(mut self, input: crate::model::AnnotationImportItemSource) -> Self {
        self.inner = self.inner.items(input);
        self
    }
    /// <p>Items to import.</p>
    pub fn set_items(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::AnnotationImportItemSource>>,
    ) -> Self {
        self.inner = self.inner.set_items(input);
        self
    }
    /// <p>Formatting options for the annotation file.</p>
    pub fn format_options(mut self, input: crate::model::FormatOptions) -> Self {
        self.inner = self.inner.format_options(input);
        self
    }
    /// <p>Formatting options for the annotation file.</p>
    pub fn set_format_options(
        mut self,
        input: std::option::Option<crate::model::FormatOptions>,
    ) -> Self {
        self.inner = self.inner.set_format_options(input);
        self
    }
    /// <p>The job's left normalization setting.</p>
    pub fn run_left_normalization(mut self, input: bool) -> Self {
        self.inner = self.inner.run_left_normalization(input);
        self
    }
    /// <p>The job's left normalization setting.</p>
    pub fn set_run_left_normalization(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_run_left_normalization(input);
        self
    }
}

/// Fluent builder constructing a request to `StartReadSetActivationJob`.
///
/// <p>Starts a read set activation job.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct StartReadSetActivationJob {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::start_read_set_activation_job_input::Builder,
}
impl StartReadSetActivationJob {
    /// Creates a new `StartReadSetActivationJob`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::StartReadSetActivationJob,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::StartReadSetActivationJobError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::StartReadSetActivationJobOutput,
        aws_smithy_http::result::SdkError<crate::error::StartReadSetActivationJobError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The read set's sequence store ID.</p>
    pub fn sequence_store_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.sequence_store_id(input.into());
        self
    }
    /// <p>The read set's sequence store ID.</p>
    pub fn set_sequence_store_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_sequence_store_id(input);
        self
    }
    /// <p>To ensure that jobs don't run multiple times, specify a unique token for each job.</p>
    pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <p>To ensure that jobs don't run multiple times, specify a unique token for each job.</p>
    pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
    /// Appends an item to `sources`.
    ///
    /// To override the contents of this collection use [`set_sources`](Self::set_sources).
    ///
    /// <p>The job's sources.</p>
    pub fn sources(mut self, input: crate::model::StartReadSetActivationJobSourceItem) -> Self {
        self.inner = self.inner.sources(input);
        self
    }
    /// <p>The job's sources.</p>
    pub fn set_sources(
        mut self,
        input: std::option::Option<
            std::vec::Vec<crate::model::StartReadSetActivationJobSourceItem>,
        >,
    ) -> Self {
        self.inner = self.inner.set_sources(input);
        self
    }
}

/// Fluent builder constructing a request to `StartReadSetExportJob`.
///
/// <p>Starts a read set export job.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct StartReadSetExportJob {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::start_read_set_export_job_input::Builder,
}
impl StartReadSetExportJob {
    /// Creates a new `StartReadSetExportJob`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::StartReadSetExportJob,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::StartReadSetExportJobError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::StartReadSetExportJobOutput,
        aws_smithy_http::result::SdkError<crate::error::StartReadSetExportJobError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The read set's sequence store ID.</p>
    pub fn sequence_store_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.sequence_store_id(input.into());
        self
    }
    /// <p>The read set's sequence store ID.</p>
    pub fn set_sequence_store_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_sequence_store_id(input);
        self
    }
    /// <p>A location for exported files in Amazon S3.</p>
    pub fn destination(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.destination(input.into());
        self
    }
    /// <p>A location for exported files in Amazon S3.</p>
    pub fn set_destination(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_destination(input);
        self
    }
    /// <p>A service role for the job.</p>
    pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.role_arn(input.into());
        self
    }
    /// <p>A service role for the job.</p>
    pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_role_arn(input);
        self
    }
    /// <p>To ensure that jobs don't run multiple times, specify a unique token for each job.</p>
    pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <p>To ensure that jobs don't run multiple times, specify a unique token for each job.</p>
    pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
    /// Appends an item to `sources`.
    ///
    /// To override the contents of this collection use [`set_sources`](Self::set_sources).
    ///
    /// <p>Sources for the job.</p>
    pub fn sources(mut self, input: crate::model::ExportReadSet) -> Self {
        self.inner = self.inner.sources(input);
        self
    }
    /// <p>Sources for the job.</p>
    pub fn set_sources(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::ExportReadSet>>,
    ) -> Self {
        self.inner = self.inner.set_sources(input);
        self
    }
}

/// Fluent builder constructing a request to `StartReadSetImportJob`.
///
/// <p>Starts a read set import job.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct StartReadSetImportJob {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::start_read_set_import_job_input::Builder,
}
impl StartReadSetImportJob {
    /// Creates a new `StartReadSetImportJob`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::StartReadSetImportJob,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::StartReadSetImportJobError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::StartReadSetImportJobOutput,
        aws_smithy_http::result::SdkError<crate::error::StartReadSetImportJobError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The read set's sequence store ID.</p>
    pub fn sequence_store_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.sequence_store_id(input.into());
        self
    }
    /// <p>The read set's sequence store ID.</p>
    pub fn set_sequence_store_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_sequence_store_id(input);
        self
    }
    /// <p>A service role for the job.</p>
    pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.role_arn(input.into());
        self
    }
    /// <p>A service role for the job.</p>
    pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_role_arn(input);
        self
    }
    /// <p>To ensure that jobs don't run multiple times, specify a unique token for each job.</p>
    pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <p>To ensure that jobs don't run multiple times, specify a unique token for each job.</p>
    pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
    /// Appends an item to `sources`.
    ///
    /// To override the contents of this collection use [`set_sources`](Self::set_sources).
    ///
    /// <p>Source files to import.</p>
    pub fn sources(mut self, input: crate::model::StartReadSetImportJobSourceItem) -> Self {
        self.inner = self.inner.sources(input);
        self
    }
    /// <p>Source files to import.</p>
    pub fn set_sources(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::StartReadSetImportJobSourceItem>>,
    ) -> Self {
        self.inner = self.inner.set_sources(input);
        self
    }
}

/// Fluent builder constructing a request to `StartReferenceImportJob`.
///
/// <p>Starts a reference import job.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct StartReferenceImportJob {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::start_reference_import_job_input::Builder,
}
impl StartReferenceImportJob {
    /// Creates a new `StartReferenceImportJob`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::StartReferenceImportJob,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::StartReferenceImportJobError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::StartReferenceImportJobOutput,
        aws_smithy_http::result::SdkError<crate::error::StartReferenceImportJobError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The job's reference store ID.</p>
    pub fn reference_store_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.reference_store_id(input.into());
        self
    }
    /// <p>The job's reference store ID.</p>
    pub fn set_reference_store_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_reference_store_id(input);
        self
    }
    /// <p>A service role for the job.</p>
    pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.role_arn(input.into());
        self
    }
    /// <p>A service role for the job.</p>
    pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_role_arn(input);
        self
    }
    /// <p>To ensure that jobs don't run multiple times, specify a unique token for each job.</p>
    pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <p>To ensure that jobs don't run multiple times, specify a unique token for each job.</p>
    pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
    /// Appends an item to `sources`.
    ///
    /// To override the contents of this collection use [`set_sources`](Self::set_sources).
    ///
    /// <p>Sources for the job.</p>
    pub fn sources(mut self, input: crate::model::StartReferenceImportJobSourceItem) -> Self {
        self.inner = self.inner.sources(input);
        self
    }
    /// <p>Sources for the job.</p>
    pub fn set_sources(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::StartReferenceImportJobSourceItem>>,
    ) -> Self {
        self.inner = self.inner.set_sources(input);
        self
    }
}

/// Fluent builder constructing a request to `StartRun`.
///
/// <p>Starts a run.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct StartRun {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::start_run_input::Builder,
}
impl StartRun {
    /// Creates a new `StartRun`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::StartRun,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::StartRunError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::StartRunOutput,
        aws_smithy_http::result::SdkError<crate::error::StartRunError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The run's workflow ID.</p>
    pub fn workflow_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.workflow_id(input.into());
        self
    }
    /// <p>The run's workflow ID.</p>
    pub fn set_workflow_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_workflow_id(input);
        self
    }
    /// <p>The run's workflows type.</p>
    pub fn workflow_type(mut self, input: crate::model::WorkflowType) -> Self {
        self.inner = self.inner.workflow_type(input);
        self
    }
    /// <p>The run's workflows type.</p>
    pub fn set_workflow_type(
        mut self,
        input: std::option::Option<crate::model::WorkflowType>,
    ) -> Self {
        self.inner = self.inner.set_workflow_type(input);
        self
    }
    /// <p>The run's ID.</p>
    pub fn run_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.run_id(input.into());
        self
    }
    /// <p>The run's ID.</p>
    pub fn set_run_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_run_id(input);
        self
    }
    /// <p>A service role for the run.</p>
    pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.role_arn(input.into());
        self
    }
    /// <p>A service role for the run.</p>
    pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_role_arn(input);
        self
    }
    /// <p>A name for the run.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>A name for the run.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p>The run's group ID.</p>
    pub fn run_group_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.run_group_id(input.into());
        self
    }
    /// <p>The run's group ID.</p>
    pub fn set_run_group_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_run_group_id(input);
        self
    }
    /// <p>A priority for the run.</p>
    pub fn priority(mut self, input: i32) -> Self {
        self.inner = self.inner.priority(input);
        self
    }
    /// <p>A priority for the run.</p>
    pub fn set_priority(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_priority(input);
        self
    }
    /// <p>Parameters for the run.</p>
    pub fn parameters(mut self, input: aws_smithy_types::Document) -> Self {
        self.inner = self.inner.parameters(input);
        self
    }
    /// <p>Parameters for the run.</p>
    pub fn set_parameters(
        mut self,
        input: std::option::Option<aws_smithy_types::Document>,
    ) -> Self {
        self.inner = self.inner.set_parameters(input);
        self
    }
    /// <p>A storage capacity for the run.</p>
    pub fn storage_capacity(mut self, input: i32) -> Self {
        self.inner = self.inner.storage_capacity(input);
        self
    }
    /// <p>A storage capacity for the run.</p>
    pub fn set_storage_capacity(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_storage_capacity(input);
        self
    }
    /// <p>An output URI for the run.</p>
    pub fn output_uri(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.output_uri(input.into());
        self
    }
    /// <p>An output URI for the run.</p>
    pub fn set_output_uri(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_output_uri(input);
        self
    }
    /// <p>A log level for the run.</p>
    pub fn log_level(mut self, input: crate::model::RunLogLevel) -> Self {
        self.inner = self.inner.log_level(input);
        self
    }
    /// <p>A log level for the run.</p>
    pub fn set_log_level(mut self, input: std::option::Option<crate::model::RunLogLevel>) -> Self {
        self.inner = self.inner.set_log_level(input);
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Tags for the run.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.tags(k.into(), v.into());
        self
    }
    /// <p>Tags for the run.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>A request ID for the run.</p>
    pub fn request_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.request_id(input.into());
        self
    }
    /// <p>A request ID for the run.</p>
    pub fn set_request_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_request_id(input);
        self
    }
}

/// Fluent builder constructing a request to `StartVariantImportJob`.
///
/// <p>Starts a variant import job.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct StartVariantImportJob {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::start_variant_import_job_input::Builder,
}
impl StartVariantImportJob {
    /// Creates a new `StartVariantImportJob`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::StartVariantImportJob,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::StartVariantImportJobError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::StartVariantImportJobOutput,
        aws_smithy_http::result::SdkError<crate::error::StartVariantImportJobError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The destination variant store for the job.</p>
    pub fn destination_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.destination_name(input.into());
        self
    }
    /// <p>The destination variant store for the job.</p>
    pub fn set_destination_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_destination_name(input);
        self
    }
    /// <p>A service role for the job.</p>
    pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.role_arn(input.into());
        self
    }
    /// <p>A service role for the job.</p>
    pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_role_arn(input);
        self
    }
    /// Appends an item to `items`.
    ///
    /// To override the contents of this collection use [`set_items`](Self::set_items).
    ///
    /// <p>Items to import.</p>
    pub fn items(mut self, input: crate::model::VariantImportItemSource) -> Self {
        self.inner = self.inner.items(input);
        self
    }
    /// <p>Items to import.</p>
    pub fn set_items(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::VariantImportItemSource>>,
    ) -> Self {
        self.inner = self.inner.set_items(input);
        self
    }
    /// <p>The job's left normalization setting.</p>
    pub fn run_left_normalization(mut self, input: bool) -> Self {
        self.inner = self.inner.run_left_normalization(input);
        self
    }
    /// <p>The job's left normalization setting.</p>
    pub fn set_run_left_normalization(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_run_left_normalization(input);
        self
    }
}

/// Fluent builder constructing a request to `TagResource`.
///
/// <p>Tags a resource.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct TagResource {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::tag_resource_input::Builder,
}
impl TagResource {
    /// Creates a new `TagResource`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::TagResource,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::TagResourceError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::TagResourceOutput,
        aws_smithy_http::result::SdkError<crate::error::TagResourceError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The resource's ARN.</p>
    pub fn resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.resource_arn(input.into());
        self
    }
    /// <p>The resource's ARN.</p>
    pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_resource_arn(input);
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Tags for the resource.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.tags(k.into(), v.into());
        self
    }
    /// <p>Tags for the resource.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
}

/// Fluent builder constructing a request to `UntagResource`.
///
/// <p>Removes tags from a resource.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UntagResource {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::untag_resource_input::Builder,
}
impl UntagResource {
    /// Creates a new `UntagResource`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::UntagResource,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::UntagResourceError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::UntagResourceOutput,
        aws_smithy_http::result::SdkError<crate::error::UntagResourceError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The resource's ARN.</p>
    pub fn resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.resource_arn(input.into());
        self
    }
    /// <p>The resource's ARN.</p>
    pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_resource_arn(input);
        self
    }
    /// Appends an item to `tagKeys`.
    ///
    /// To override the contents of this collection use [`set_tag_keys`](Self::set_tag_keys).
    ///
    /// <p>Keys of tags to remove.</p>
    pub fn tag_keys(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.tag_keys(input.into());
        self
    }
    /// <p>Keys of tags to remove.</p>
    pub fn set_tag_keys(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_tag_keys(input);
        self
    }
}

/// Fluent builder constructing a request to `UpdateAnnotationStore`.
///
/// <p>Updates an annotation store.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateAnnotationStore {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::update_annotation_store_input::Builder,
}
impl UpdateAnnotationStore {
    /// Creates a new `UpdateAnnotationStore`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::UpdateAnnotationStore,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::UpdateAnnotationStoreError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::UpdateAnnotationStoreOutput,
        aws_smithy_http::result::SdkError<crate::error::UpdateAnnotationStoreError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>A name for the store.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>A name for the store.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p>A description for the store.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>A description for the store.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
}

/// Fluent builder constructing a request to `UpdateRunGroup`.
///
/// <p>Updates a run group.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateRunGroup {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::update_run_group_input::Builder,
}
impl UpdateRunGroup {
    /// Creates a new `UpdateRunGroup`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::UpdateRunGroup,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::UpdateRunGroupError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::UpdateRunGroupOutput,
        aws_smithy_http::result::SdkError<crate::error::UpdateRunGroupError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The group's ID.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.id(input.into());
        self
    }
    /// <p>The group's ID.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_id(input);
        self
    }
    /// <p>A name for the group.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>A name for the group.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p>The maximum number of CPUs to use.</p>
    pub fn max_cpus(mut self, input: i32) -> Self {
        self.inner = self.inner.max_cpus(input);
        self
    }
    /// <p>The maximum number of CPUs to use.</p>
    pub fn set_max_cpus(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_cpus(input);
        self
    }
    /// <p>The maximum number of concurrent runs for the group.</p>
    pub fn max_runs(mut self, input: i32) -> Self {
        self.inner = self.inner.max_runs(input);
        self
    }
    /// <p>The maximum number of concurrent runs for the group.</p>
    pub fn set_max_runs(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_runs(input);
        self
    }
    /// <p>The maximum amount of time to run.</p>
    pub fn max_duration(mut self, input: i32) -> Self {
        self.inner = self.inner.max_duration(input);
        self
    }
    /// <p>The maximum amount of time to run.</p>
    pub fn set_max_duration(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_duration(input);
        self
    }
}

/// Fluent builder constructing a request to `UpdateVariantStore`.
///
/// <p>Updates a variant store.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateVariantStore {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::update_variant_store_input::Builder,
}
impl UpdateVariantStore {
    /// Creates a new `UpdateVariantStore`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::UpdateVariantStore,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::UpdateVariantStoreError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::UpdateVariantStoreOutput,
        aws_smithy_http::result::SdkError<crate::error::UpdateVariantStoreError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>A name for the store.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>A name for the store.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p>A description for the store.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>A description for the store.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
}

/// Fluent builder constructing a request to `UpdateWorkflow`.
///
/// <p>Updates a workflow.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateWorkflow {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::update_workflow_input::Builder,
}
impl UpdateWorkflow {
    /// Creates a new `UpdateWorkflow`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::UpdateWorkflow,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::UpdateWorkflowError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::UpdateWorkflowOutput,
        aws_smithy_http::result::SdkError<crate::error::UpdateWorkflowError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The workflow's ID.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.id(input.into());
        self
    }
    /// <p>The workflow's ID.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_id(input);
        self
    }
    /// <p>A name for the workflow.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>A name for the workflow.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p>A description for the workflow.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>A description for the workflow.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
}
