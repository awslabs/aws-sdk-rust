// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ListReferences`](crate::client::fluent_builders::ListReferences) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListReferences::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`reference_store_id(impl Into<String>)`](crate::client::fluent_builders::ListReferences::reference_store_id) / [`set_reference_store_id(Option<String>)`](crate::client::fluent_builders::ListReferences::set_reference_store_id): <p>The references' reference store ID.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListReferences::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListReferences::set_max_results): <p>The maximum number of references to return in one page of results.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListReferences::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListReferences::set_next_token): <p>Specify the pagination token from a previous request to retrieve the next page of results.</p>
    ///   - [`filter(ReferenceFilter)`](crate::client::fluent_builders::ListReferences::filter) / [`set_filter(Option<ReferenceFilter>)`](crate::client::fluent_builders::ListReferences::set_filter): <p>A filter to apply to the list.</p>
    /// - On success, responds with [`ListReferencesOutput`](crate::output::ListReferencesOutput) with field(s):
    ///   - [`next_token(Option<String>)`](crate::output::ListReferencesOutput::next_token): <p>A pagination token that's included if more results are available.</p>
    ///   - [`references(Option<Vec<ReferenceListItem>>)`](crate::output::ListReferencesOutput::references): <p>A list of references.</p>
    /// - On failure, responds with [`SdkError<ListReferencesError>`](crate::error::ListReferencesError)
    pub fn list_references(&self) -> crate::client::fluent_builders::ListReferences {
        crate::client::fluent_builders::ListReferences::new(self.handle.clone())
    }
}
