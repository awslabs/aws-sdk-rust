// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateWorkflow`](crate::operation::create_workflow::builders::CreateWorkflowFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::operation::create_workflow::builders::CreateWorkflowFluentBuilder::name) / [`set_name(Option<String>)`](crate::operation::create_workflow::builders::CreateWorkflowFluentBuilder::set_name): <p>A name for the workflow.</p>
    ///   - [`description(impl Into<String>)`](crate::operation::create_workflow::builders::CreateWorkflowFluentBuilder::description) / [`set_description(Option<String>)`](crate::operation::create_workflow::builders::CreateWorkflowFluentBuilder::set_description): <p>A description for the workflow.</p>
    ///   - [`engine(WorkflowEngine)`](crate::operation::create_workflow::builders::CreateWorkflowFluentBuilder::engine) / [`set_engine(Option<WorkflowEngine>)`](crate::operation::create_workflow::builders::CreateWorkflowFluentBuilder::set_engine): <p>An engine for the workflow.</p>
    ///   - [`definition_zip(Blob)`](crate::operation::create_workflow::builders::CreateWorkflowFluentBuilder::definition_zip) / [`set_definition_zip(Option<Blob>)`](crate::operation::create_workflow::builders::CreateWorkflowFluentBuilder::set_definition_zip): <p>A ZIP archive for the workflow.</p>
    ///   - [`definition_uri(impl Into<String>)`](crate::operation::create_workflow::builders::CreateWorkflowFluentBuilder::definition_uri) / [`set_definition_uri(Option<String>)`](crate::operation::create_workflow::builders::CreateWorkflowFluentBuilder::set_definition_uri): <p>The URI of a definition for the workflow.</p>
    ///   - [`main(impl Into<String>)`](crate::operation::create_workflow::builders::CreateWorkflowFluentBuilder::main) / [`set_main(Option<String>)`](crate::operation::create_workflow::builders::CreateWorkflowFluentBuilder::set_main): <p>The path of the main definition file for the workflow.</p>
    ///   - [`parameter_template(HashMap<String, WorkflowParameter>)`](crate::operation::create_workflow::builders::CreateWorkflowFluentBuilder::parameter_template) / [`set_parameter_template(Option<HashMap<String, WorkflowParameter>>)`](crate::operation::create_workflow::builders::CreateWorkflowFluentBuilder::set_parameter_template): <p>A parameter template for the workflow.</p>
    ///   - [`storage_capacity(i32)`](crate::operation::create_workflow::builders::CreateWorkflowFluentBuilder::storage_capacity) / [`set_storage_capacity(Option<i32>)`](crate::operation::create_workflow::builders::CreateWorkflowFluentBuilder::set_storage_capacity): <p>A storage capacity for the workflow.</p>
    ///   - [`tags(HashMap<String, String>)`](crate::operation::create_workflow::builders::CreateWorkflowFluentBuilder::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::operation::create_workflow::builders::CreateWorkflowFluentBuilder::set_tags): <p>Tags for the workflow.</p>
    ///   - [`request_id(impl Into<String>)`](crate::operation::create_workflow::builders::CreateWorkflowFluentBuilder::request_id) / [`set_request_id(Option<String>)`](crate::operation::create_workflow::builders::CreateWorkflowFluentBuilder::set_request_id): <p>A request ID for the workflow.</p>
    /// - On success, responds with [`CreateWorkflowOutput`](crate::operation::create_workflow::CreateWorkflowOutput) with field(s):
    ///   - [`arn(Option<String>)`](crate::operation::create_workflow::CreateWorkflowOutput::arn): <p>The workflow's ARN.</p>
    ///   - [`id(Option<String>)`](crate::operation::create_workflow::CreateWorkflowOutput::id): <p>The workflow's ID.</p>
    ///   - [`status(Option<WorkflowStatus>)`](crate::operation::create_workflow::CreateWorkflowOutput::status): <p>The workflow's status.</p>
    ///   - [`tags(Option<HashMap<String, String>>)`](crate::operation::create_workflow::CreateWorkflowOutput::tags): <p>The workflow's tags.</p>
    /// - On failure, responds with [`SdkError<CreateWorkflowError>`](crate::operation::create_workflow::CreateWorkflowError)
    pub fn create_workflow(
        &self,
    ) -> crate::operation::create_workflow::builders::CreateWorkflowFluentBuilder {
        crate::operation::create_workflow::builders::CreateWorkflowFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
