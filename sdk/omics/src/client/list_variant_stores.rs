// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ListVariantStores`](crate::client::fluent_builders::ListVariantStores) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListVariantStores::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListVariantStores::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListVariantStores::set_max_results): <p>The maximum number of stores to return in one page of results.</p>
    ///   - [`ids(Vec<String>)`](crate::client::fluent_builders::ListVariantStores::ids) / [`set_ids(Option<Vec<String>>)`](crate::client::fluent_builders::ListVariantStores::set_ids): <p>A list of store IDs.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListVariantStores::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListVariantStores::set_next_token): <p>Specify the pagination token from a previous request to retrieve the next page of results.</p>
    ///   - [`filter(ListVariantStoresFilter)`](crate::client::fluent_builders::ListVariantStores::filter) / [`set_filter(Option<ListVariantStoresFilter>)`](crate::client::fluent_builders::ListVariantStores::set_filter): <p>A filter to apply to the list.</p>
    /// - On success, responds with [`ListVariantStoresOutput`](crate::output::ListVariantStoresOutput) with field(s):
    ///   - [`variant_stores(Option<Vec<VariantStoreItem>>)`](crate::output::ListVariantStoresOutput::variant_stores): <p>A list of variant stores.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListVariantStoresOutput::next_token): <p>A pagination token that's included if more results are available.</p>
    /// - On failure, responds with [`SdkError<ListVariantStoresError>`](crate::error::ListVariantStoresError)
    pub fn list_variant_stores(&self) -> crate::client::fluent_builders::ListVariantStores {
        crate::client::fluent_builders::ListVariantStores::new(self.handle.clone())
    }
}
