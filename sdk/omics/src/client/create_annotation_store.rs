// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateAnnotationStore`](crate::operation::create_annotation_store::builders::CreateAnnotationStoreFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`reference(ReferenceItem)`](crate::operation::create_annotation_store::builders::CreateAnnotationStoreFluentBuilder::reference) / [`set_reference(Option<ReferenceItem>)`](crate::operation::create_annotation_store::builders::CreateAnnotationStoreFluentBuilder::set_reference): <p>The genome reference for the store's annotations.</p>
    ///   - [`name(impl Into<String>)`](crate::operation::create_annotation_store::builders::CreateAnnotationStoreFluentBuilder::name) / [`set_name(Option<String>)`](crate::operation::create_annotation_store::builders::CreateAnnotationStoreFluentBuilder::set_name): <p>A name for the store.</p>
    ///   - [`description(impl Into<String>)`](crate::operation::create_annotation_store::builders::CreateAnnotationStoreFluentBuilder::description) / [`set_description(Option<String>)`](crate::operation::create_annotation_store::builders::CreateAnnotationStoreFluentBuilder::set_description): <p>A description for the store.</p>
    ///   - [`tags(HashMap<String, String>)`](crate::operation::create_annotation_store::builders::CreateAnnotationStoreFluentBuilder::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::operation::create_annotation_store::builders::CreateAnnotationStoreFluentBuilder::set_tags): <p>Tags for the store.</p>
    ///   - [`sse_config(SseConfig)`](crate::operation::create_annotation_store::builders::CreateAnnotationStoreFluentBuilder::sse_config) / [`set_sse_config(Option<SseConfig>)`](crate::operation::create_annotation_store::builders::CreateAnnotationStoreFluentBuilder::set_sse_config): <p>Server-side encryption (SSE) settings for the store.</p>
    ///   - [`store_format(StoreFormat)`](crate::operation::create_annotation_store::builders::CreateAnnotationStoreFluentBuilder::store_format) / [`set_store_format(Option<StoreFormat>)`](crate::operation::create_annotation_store::builders::CreateAnnotationStoreFluentBuilder::set_store_format): <p>The annotation file format of the store.</p>
    ///   - [`store_options(StoreOptions)`](crate::operation::create_annotation_store::builders::CreateAnnotationStoreFluentBuilder::store_options) / [`set_store_options(Option<StoreOptions>)`](crate::operation::create_annotation_store::builders::CreateAnnotationStoreFluentBuilder::set_store_options): <p>File parsing options for the annotation store.</p>
    /// - On success, responds with [`CreateAnnotationStoreOutput`](crate::operation::create_annotation_store::CreateAnnotationStoreOutput) with field(s):
    ///   - [`id(Option<String>)`](crate::operation::create_annotation_store::CreateAnnotationStoreOutput::id): <p>The store's ID.</p>
    ///   - [`reference(Option<ReferenceItem>)`](crate::operation::create_annotation_store::CreateAnnotationStoreOutput::reference): <p>The store's genome reference.</p>
    ///   - [`store_format(Option<StoreFormat>)`](crate::operation::create_annotation_store::CreateAnnotationStoreOutput::store_format): <p>The annotation file format of the store.</p>
    ///   - [`store_options(Option<StoreOptions>)`](crate::operation::create_annotation_store::CreateAnnotationStoreOutput::store_options): <p>The store's file parsing options.</p>
    ///   - [`status(Option<StoreStatus>)`](crate::operation::create_annotation_store::CreateAnnotationStoreOutput::status): <p>The store's status.</p>
    ///   - [`name(Option<String>)`](crate::operation::create_annotation_store::CreateAnnotationStoreOutput::name): <p>The store's name.</p>
    ///   - [`creation_time(Option<DateTime>)`](crate::operation::create_annotation_store::CreateAnnotationStoreOutput::creation_time): <p>When the store was created.</p>
    /// - On failure, responds with [`SdkError<CreateAnnotationStoreError>`](crate::operation::create_annotation_store::CreateAnnotationStoreError)
    pub fn create_annotation_store(
        &self,
    ) -> crate::operation::create_annotation_store::builders::CreateAnnotationStoreFluentBuilder
    {
        crate::operation::create_annotation_store::builders::CreateAnnotationStoreFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
