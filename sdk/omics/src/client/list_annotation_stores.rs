// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ListAnnotationStores`](crate::client::fluent_builders::ListAnnotationStores) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListAnnotationStores::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`ids(Vec<String>)`](crate::client::fluent_builders::ListAnnotationStores::ids) / [`set_ids(Option<Vec<String>>)`](crate::client::fluent_builders::ListAnnotationStores::set_ids): <p>IDs of stores to list.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListAnnotationStores::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListAnnotationStores::set_max_results): <p>The maximum number of stores to return in one page of results.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListAnnotationStores::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListAnnotationStores::set_next_token): <p>Specify the pagination token from a previous request to retrieve the next page of results.</p>
    ///   - [`filter(ListAnnotationStoresFilter)`](crate::client::fluent_builders::ListAnnotationStores::filter) / [`set_filter(Option<ListAnnotationStoresFilter>)`](crate::client::fluent_builders::ListAnnotationStores::set_filter): <p>A filter to apply to the list.</p>
    /// - On success, responds with [`ListAnnotationStoresOutput`](crate::output::ListAnnotationStoresOutput) with field(s):
    ///   - [`annotation_stores(Option<Vec<AnnotationStoreItem>>)`](crate::output::ListAnnotationStoresOutput::annotation_stores): <p>A list of stores.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListAnnotationStoresOutput::next_token): <p>A pagination token that's included if more results are available.</p>
    /// - On failure, responds with [`SdkError<ListAnnotationStoresError>`](crate::error::ListAnnotationStoresError)
    pub fn list_annotation_stores(&self) -> crate::client::fluent_builders::ListAnnotationStores {
        crate::client::fluent_builders::ListAnnotationStores::new(self.handle.clone())
    }
}
