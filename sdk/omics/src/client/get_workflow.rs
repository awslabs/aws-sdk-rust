// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`GetWorkflow`](crate::client::fluent_builders::GetWorkflow) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`id(impl Into<String>)`](crate::client::fluent_builders::GetWorkflow::id) / [`set_id(Option<String>)`](crate::client::fluent_builders::GetWorkflow::set_id): <p>The workflow's ID.</p>
    ///   - [`r#type(WorkflowType)`](crate::client::fluent_builders::GetWorkflow::type) / [`set_type(Option<WorkflowType>)`](crate::client::fluent_builders::GetWorkflow::set_type): <p>The workflow's type.</p>
    ///   - [`export(Vec<WorkflowExport>)`](crate::client::fluent_builders::GetWorkflow::export) / [`set_export(Option<Vec<WorkflowExport>>)`](crate::client::fluent_builders::GetWorkflow::set_export): <p>The export format for the workflow.</p>
    /// - On success, responds with [`GetWorkflowOutput`](crate::output::GetWorkflowOutput) with field(s):
    ///   - [`arn(Option<String>)`](crate::output::GetWorkflowOutput::arn): <p>The workflow's ARN.</p>
    ///   - [`id(Option<String>)`](crate::output::GetWorkflowOutput::id): <p>The workflow's ID.</p>
    ///   - [`status(Option<WorkflowStatus>)`](crate::output::GetWorkflowOutput::status): <p>The workflow's status.</p>
    ///   - [`r#type(Option<WorkflowType>)`](crate::output::GetWorkflowOutput::type): <p>The workflow's type.</p>
    ///   - [`name(Option<String>)`](crate::output::GetWorkflowOutput::name): <p>The workflow's name.</p>
    ///   - [`description(Option<String>)`](crate::output::GetWorkflowOutput::description): <p>The workflow's description.</p>
    ///   - [`engine(Option<WorkflowEngine>)`](crate::output::GetWorkflowOutput::engine): <p>The workflow's engine.</p>
    ///   - [`definition(Option<String>)`](crate::output::GetWorkflowOutput::definition): <p>The workflow's definition.</p>
    ///   - [`main(Option<String>)`](crate::output::GetWorkflowOutput::main): <p>The path of the main definition file for the workflow.</p>
    ///   - [`digest(Option<String>)`](crate::output::GetWorkflowOutput::digest): <p>The workflow's digest.</p>
    ///   - [`parameter_template(Option<HashMap<String, WorkflowParameter>>)`](crate::output::GetWorkflowOutput::parameter_template): <p>The workflow's parameter template.</p>
    ///   - [`storage_capacity(Option<i32>)`](crate::output::GetWorkflowOutput::storage_capacity): <p>The workflow's storage capacity.</p>
    ///   - [`creation_time(Option<DateTime>)`](crate::output::GetWorkflowOutput::creation_time): <p>When the workflow was created.</p>
    ///   - [`status_message(Option<String>)`](crate::output::GetWorkflowOutput::status_message): <p>The workflow's status message.</p>
    ///   - [`tags(Option<HashMap<String, String>>)`](crate::output::GetWorkflowOutput::tags): <p>The workflow's tags.</p>
    /// - On failure, responds with [`SdkError<GetWorkflowError>`](crate::error::GetWorkflowError)
    pub fn get_workflow(&self) -> crate::client::fluent_builders::GetWorkflow {
        crate::client::fluent_builders::GetWorkflow::new(self.handle.clone())
    }
}
