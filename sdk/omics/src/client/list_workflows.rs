// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ListWorkflows`](crate::client::fluent_builders::ListWorkflows) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListWorkflows::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`r#type(WorkflowType)`](crate::client::fluent_builders::ListWorkflows::type) / [`set_type(Option<WorkflowType>)`](crate::client::fluent_builders::ListWorkflows::set_type): <p>The workflows' type.</p>
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::ListWorkflows::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::ListWorkflows::set_name): <p>The workflows' name.</p>
    ///   - [`starting_token(impl Into<String>)`](crate::client::fluent_builders::ListWorkflows::starting_token) / [`set_starting_token(Option<String>)`](crate::client::fluent_builders::ListWorkflows::set_starting_token): <p>Specify the pagination token from a previous request to retrieve the next page of results.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListWorkflows::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListWorkflows::set_max_results): <p>The maximum number of workflows to return in one page of results.</p>
    /// - On success, responds with [`ListWorkflowsOutput`](crate::output::ListWorkflowsOutput) with field(s):
    ///   - [`items(Option<Vec<WorkflowListItem>>)`](crate::output::ListWorkflowsOutput::items): <p>The workflows' items.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListWorkflowsOutput::next_token): <p>A pagination token that's included if more results are available.</p>
    /// - On failure, responds with [`SdkError<ListWorkflowsError>`](crate::error::ListWorkflowsError)
    pub fn list_workflows(&self) -> crate::client::fluent_builders::ListWorkflows {
        crate::client::fluent_builders::ListWorkflows::new(self.handle.clone())
    }
}
