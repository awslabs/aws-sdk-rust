// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_list_annotation_import_jobs_output_next_token(
    input: &crate::operation::list_annotation_import_jobs::ListAnnotationImportJobsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_annotation_stores_output_next_token(
    input: &crate::operation::list_annotation_stores::ListAnnotationStoresOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_read_set_activation_jobs_output_next_token(
    input: &crate::operation::list_read_set_activation_jobs::ListReadSetActivationJobsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_read_set_export_jobs_output_next_token(
    input: &crate::operation::list_read_set_export_jobs::ListReadSetExportJobsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_read_set_import_jobs_output_next_token(
    input: &crate::operation::list_read_set_import_jobs::ListReadSetImportJobsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_read_sets_output_next_token(
    input: &crate::operation::list_read_sets::ListReadSetsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_reference_import_jobs_output_next_token(
    input: &crate::operation::list_reference_import_jobs::ListReferenceImportJobsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_reference_stores_output_next_token(
    input: &crate::operation::list_reference_stores::ListReferenceStoresOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_references_output_next_token(
    input: &crate::operation::list_references::ListReferencesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_run_groups_output_next_token(
    input: &crate::operation::list_run_groups::ListRunGroupsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_run_tasks_output_next_token(
    input: &crate::operation::list_run_tasks::ListRunTasksOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_runs_output_next_token(
    input: &crate::operation::list_runs::ListRunsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_sequence_stores_output_next_token(
    input: &crate::operation::list_sequence_stores::ListSequenceStoresOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_variant_import_jobs_output_next_token(
    input: &crate::operation::list_variant_import_jobs::ListVariantImportJobsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_variant_stores_output_next_token(
    input: &crate::operation::list_variant_stores::ListVariantStoresOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_workflows_output_next_token(
    input: &crate::operation::list_workflows::ListWorkflowsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_annotation_import_jobs_output_annotation_import_jobs(
    input: crate::operation::list_annotation_import_jobs::ListAnnotationImportJobsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::AnnotationImportJobItem>> {
    let input = match input.annotation_import_jobs {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_annotation_stores_output_annotation_stores(
    input: crate::operation::list_annotation_stores::ListAnnotationStoresOutput,
) -> std::option::Option<std::vec::Vec<crate::types::AnnotationStoreItem>> {
    let input = match input.annotation_stores {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_read_set_activation_jobs_output_activation_jobs(
    input: crate::operation::list_read_set_activation_jobs::ListReadSetActivationJobsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ActivateReadSetJobItem>> {
    let input = match input.activation_jobs {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_read_set_export_jobs_output_export_jobs(
    input: crate::operation::list_read_set_export_jobs::ListReadSetExportJobsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ExportReadSetJobDetail>> {
    let input = match input.export_jobs {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_read_set_import_jobs_output_import_jobs(
    input: crate::operation::list_read_set_import_jobs::ListReadSetImportJobsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ImportReadSetJobItem>> {
    let input = match input.import_jobs {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_read_sets_output_read_sets(
    input: crate::operation::list_read_sets::ListReadSetsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ReadSetListItem>> {
    let input = match input.read_sets {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_reference_import_jobs_output_import_jobs(
    input: crate::operation::list_reference_import_jobs::ListReferenceImportJobsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ImportReferenceJobItem>> {
    let input = match input.import_jobs {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_reference_stores_output_reference_stores(
    input: crate::operation::list_reference_stores::ListReferenceStoresOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ReferenceStoreDetail>> {
    let input = match input.reference_stores {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_references_output_references(
    input: crate::operation::list_references::ListReferencesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ReferenceListItem>> {
    let input = match input.references {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_run_groups_output_items(
    input: crate::operation::list_run_groups::ListRunGroupsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::RunGroupListItem>> {
    let input = match input.items {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_run_tasks_output_items(
    input: crate::operation::list_run_tasks::ListRunTasksOutput,
) -> std::option::Option<std::vec::Vec<crate::types::TaskListItem>> {
    let input = match input.items {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_runs_output_items(
    input: crate::operation::list_runs::ListRunsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::RunListItem>> {
    let input = match input.items {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_sequence_stores_output_sequence_stores(
    input: crate::operation::list_sequence_stores::ListSequenceStoresOutput,
) -> std::option::Option<std::vec::Vec<crate::types::SequenceStoreDetail>> {
    let input = match input.sequence_stores {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_variant_import_jobs_output_variant_import_jobs(
    input: crate::operation::list_variant_import_jobs::ListVariantImportJobsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::VariantImportJobItem>> {
    let input = match input.variant_import_jobs {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_variant_stores_output_variant_stores(
    input: crate::operation::list_variant_stores::ListVariantStoresOutput,
) -> std::option::Option<std::vec::Vec<crate::types::VariantStoreItem>> {
    let input = match input.variant_stores {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_workflows_output_items(
    input: crate::operation::list_workflows::ListWorkflowsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::WorkflowListItem>> {
    let input = match input.items {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
