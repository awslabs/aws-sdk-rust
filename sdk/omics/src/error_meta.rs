// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>You do not have sufficient access to perform this action.</p>
    AccessDeniedException(crate::types::error::AccessDeniedException),
    /// <p>The request cannot be applied to the target resource in its current state.</p>
    ConflictException(crate::types::error::ConflictException),
    /// <p>An unexpected error occurred. Try the request again.</p>
    InternalServerException(crate::types::error::InternalServerException),
    /// <p>The ranges specified in the request are not valid.</p>
    RangeNotSatisfiableException(crate::types::error::RangeNotSatisfiableException),
    /// <p>The request timed out.</p>
    RequestTimeoutException(crate::types::error::RequestTimeoutException),
    /// <p>The target resource was not found in the current Region.</p>
    ResourceNotFoundException(crate::types::error::ResourceNotFoundException),
    /// <p>The request exceeds a service quota.</p>
    ServiceQuotaExceededException(crate::types::error::ServiceQuotaExceededException),
    /// <p>The request was denied due to request throttling.</p>
    ThrottlingException(crate::types::error::ThrottlingException),
    /// <p>The input fails to satisfy the constraints specified by an AWS service.</p>
    ValidationException(crate::types::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::RangeNotSatisfiableException(inner) => inner.fmt(f),
            Error::RequestTimeoutException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ServiceQuotaExceededException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::batch_delete_read_set::BatchDeleteReadSetError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::batch_delete_read_set::BatchDeleteReadSetError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::batch_delete_read_set::BatchDeleteReadSetError> for Error {
    fn from(err: crate::operation::batch_delete_read_set::BatchDeleteReadSetError) -> Self {
        match err {
            crate::operation::batch_delete_read_set::BatchDeleteReadSetError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::batch_delete_read_set::BatchDeleteReadSetError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::batch_delete_read_set::BatchDeleteReadSetError::RequestTimeoutException(inner) => Error::RequestTimeoutException(inner),
            crate::operation::batch_delete_read_set::BatchDeleteReadSetError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::batch_delete_read_set::BatchDeleteReadSetError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::batch_delete_read_set::BatchDeleteReadSetError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::batch_delete_read_set::BatchDeleteReadSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::cancel_annotation_import_job::CancelAnnotationImportJobError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::cancel_annotation_import_job::CancelAnnotationImportJobError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::cancel_annotation_import_job::CancelAnnotationImportJobError>
    for Error
{
    fn from(
        err: crate::operation::cancel_annotation_import_job::CancelAnnotationImportJobError,
    ) -> Self {
        match err {
            crate::operation::cancel_annotation_import_job::CancelAnnotationImportJobError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::cancel_annotation_import_job::CancelAnnotationImportJobError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::cancel_annotation_import_job::CancelAnnotationImportJobError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::cancel_annotation_import_job::CancelAnnotationImportJobError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::cancel_annotation_import_job::CancelAnnotationImportJobError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::cancel_annotation_import_job::CancelAnnotationImportJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::cancel_run::CancelRunError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::cancel_run::CancelRunError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::cancel_run::CancelRunError> for Error {
    fn from(err: crate::operation::cancel_run::CancelRunError) -> Self {
        match err {
            crate::operation::cancel_run::CancelRunError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::cancel_run::CancelRunError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::cancel_run::CancelRunError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::cancel_run::CancelRunError::RequestTimeoutException(inner) => {
                Error::RequestTimeoutException(inner)
            }
            crate::operation::cancel_run::CancelRunError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::cancel_run::CancelRunError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::cancel_run::CancelRunError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::cancel_run::CancelRunError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::cancel_run::CancelRunError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::cancel_variant_import_job::CancelVariantImportJobError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::cancel_variant_import_job::CancelVariantImportJobError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::cancel_variant_import_job::CancelVariantImportJobError> for Error {
    fn from(err: crate::operation::cancel_variant_import_job::CancelVariantImportJobError) -> Self {
        match err {
            crate::operation::cancel_variant_import_job::CancelVariantImportJobError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::cancel_variant_import_job::CancelVariantImportJobError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::cancel_variant_import_job::CancelVariantImportJobError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::cancel_variant_import_job::CancelVariantImportJobError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::cancel_variant_import_job::CancelVariantImportJobError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::cancel_variant_import_job::CancelVariantImportJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_annotation_store::CreateAnnotationStoreError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_annotation_store::CreateAnnotationStoreError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_annotation_store::CreateAnnotationStoreError> for Error {
    fn from(err: crate::operation::create_annotation_store::CreateAnnotationStoreError) -> Self {
        match err {
            crate::operation::create_annotation_store::CreateAnnotationStoreError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_annotation_store::CreateAnnotationStoreError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_annotation_store::CreateAnnotationStoreError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_annotation_store::CreateAnnotationStoreError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_annotation_store::CreateAnnotationStoreError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_annotation_store::CreateAnnotationStoreError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_annotation_store::CreateAnnotationStoreError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_annotation_store::CreateAnnotationStoreError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_reference_store::CreateReferenceStoreError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_reference_store::CreateReferenceStoreError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_reference_store::CreateReferenceStoreError> for Error {
    fn from(err: crate::operation::create_reference_store::CreateReferenceStoreError) -> Self {
        match err {
            crate::operation::create_reference_store::CreateReferenceStoreError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_reference_store::CreateReferenceStoreError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_reference_store::CreateReferenceStoreError::RequestTimeoutException(inner) => Error::RequestTimeoutException(inner),
            crate::operation::create_reference_store::CreateReferenceStoreError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_reference_store::CreateReferenceStoreError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_reference_store::CreateReferenceStoreError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_reference_store::CreateReferenceStoreError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_run_group::CreateRunGroupError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_run_group::CreateRunGroupError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_run_group::CreateRunGroupError> for Error {
    fn from(err: crate::operation::create_run_group::CreateRunGroupError) -> Self {
        match err {
            crate::operation::create_run_group::CreateRunGroupError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_run_group::CreateRunGroupError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_run_group::CreateRunGroupError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_run_group::CreateRunGroupError::RequestTimeoutException(inner) => Error::RequestTimeoutException(inner),
            crate::operation::create_run_group::CreateRunGroupError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_run_group::CreateRunGroupError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_run_group::CreateRunGroupError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_run_group::CreateRunGroupError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_run_group::CreateRunGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_sequence_store::CreateSequenceStoreError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_sequence_store::CreateSequenceStoreError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_sequence_store::CreateSequenceStoreError> for Error {
    fn from(err: crate::operation::create_sequence_store::CreateSequenceStoreError) -> Self {
        match err {
            crate::operation::create_sequence_store::CreateSequenceStoreError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_sequence_store::CreateSequenceStoreError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_sequence_store::CreateSequenceStoreError::RequestTimeoutException(inner) => Error::RequestTimeoutException(inner),
            crate::operation::create_sequence_store::CreateSequenceStoreError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_sequence_store::CreateSequenceStoreError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_sequence_store::CreateSequenceStoreError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_sequence_store::CreateSequenceStoreError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_variant_store::CreateVariantStoreError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_variant_store::CreateVariantStoreError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_variant_store::CreateVariantStoreError> for Error {
    fn from(err: crate::operation::create_variant_store::CreateVariantStoreError) -> Self {
        match err {
            crate::operation::create_variant_store::CreateVariantStoreError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_variant_store::CreateVariantStoreError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_variant_store::CreateVariantStoreError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_variant_store::CreateVariantStoreError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_variant_store::CreateVariantStoreError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_variant_store::CreateVariantStoreError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_variant_store::CreateVariantStoreError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_variant_store::CreateVariantStoreError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_workflow::CreateWorkflowError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_workflow::CreateWorkflowError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_workflow::CreateWorkflowError> for Error {
    fn from(err: crate::operation::create_workflow::CreateWorkflowError) -> Self {
        match err {
            crate::operation::create_workflow::CreateWorkflowError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_workflow::CreateWorkflowError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_workflow::CreateWorkflowError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_workflow::CreateWorkflowError::RequestTimeoutException(inner) => Error::RequestTimeoutException(inner),
            crate::operation::create_workflow::CreateWorkflowError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_workflow::CreateWorkflowError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_workflow::CreateWorkflowError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_workflow::CreateWorkflowError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_workflow::CreateWorkflowError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_annotation_store::DeleteAnnotationStoreError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_annotation_store::DeleteAnnotationStoreError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_annotation_store::DeleteAnnotationStoreError> for Error {
    fn from(err: crate::operation::delete_annotation_store::DeleteAnnotationStoreError) -> Self {
        match err {
            crate::operation::delete_annotation_store::DeleteAnnotationStoreError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_annotation_store::DeleteAnnotationStoreError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_annotation_store::DeleteAnnotationStoreError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_annotation_store::DeleteAnnotationStoreError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_annotation_store::DeleteAnnotationStoreError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_annotation_store::DeleteAnnotationStoreError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_annotation_store::DeleteAnnotationStoreError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_reference::DeleteReferenceError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_reference::DeleteReferenceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_reference::DeleteReferenceError> for Error {
    fn from(err: crate::operation::delete_reference::DeleteReferenceError) -> Self {
        match err {
            crate::operation::delete_reference::DeleteReferenceError::AccessDeniedException(
                inner,
            ) => Error::AccessDeniedException(inner),
            crate::operation::delete_reference::DeleteReferenceError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::delete_reference::DeleteReferenceError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::delete_reference::DeleteReferenceError::RequestTimeoutException(
                inner,
            ) => Error::RequestTimeoutException(inner),
            crate::operation::delete_reference::DeleteReferenceError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_reference::DeleteReferenceError::ThrottlingException(
                inner,
            ) => Error::ThrottlingException(inner),
            crate::operation::delete_reference::DeleteReferenceError::ValidationException(
                inner,
            ) => Error::ValidationException(inner),
            crate::operation::delete_reference::DeleteReferenceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_reference_store::DeleteReferenceStoreError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_reference_store::DeleteReferenceStoreError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_reference_store::DeleteReferenceStoreError> for Error {
    fn from(err: crate::operation::delete_reference_store::DeleteReferenceStoreError) -> Self {
        match err {
            crate::operation::delete_reference_store::DeleteReferenceStoreError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_reference_store::DeleteReferenceStoreError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_reference_store::DeleteReferenceStoreError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_reference_store::DeleteReferenceStoreError::RequestTimeoutException(inner) => Error::RequestTimeoutException(inner),
            crate::operation::delete_reference_store::DeleteReferenceStoreError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_reference_store::DeleteReferenceStoreError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_reference_store::DeleteReferenceStoreError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_reference_store::DeleteReferenceStoreError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::delete_run::DeleteRunError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::delete_run::DeleteRunError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_run::DeleteRunError> for Error {
    fn from(err: crate::operation::delete_run::DeleteRunError) -> Self {
        match err {
            crate::operation::delete_run::DeleteRunError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_run::DeleteRunError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::delete_run::DeleteRunError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_run::DeleteRunError::RequestTimeoutException(inner) => {
                Error::RequestTimeoutException(inner)
            }
            crate::operation::delete_run::DeleteRunError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_run::DeleteRunError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::delete_run::DeleteRunError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::delete_run::DeleteRunError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_run::DeleteRunError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_run_group::DeleteRunGroupError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_run_group::DeleteRunGroupError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_run_group::DeleteRunGroupError> for Error {
    fn from(err: crate::operation::delete_run_group::DeleteRunGroupError) -> Self {
        match err {
            crate::operation::delete_run_group::DeleteRunGroupError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_run_group::DeleteRunGroupError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_run_group::DeleteRunGroupError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_run_group::DeleteRunGroupError::RequestTimeoutException(inner) => Error::RequestTimeoutException(inner),
            crate::operation::delete_run_group::DeleteRunGroupError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_run_group::DeleteRunGroupError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::delete_run_group::DeleteRunGroupError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_run_group::DeleteRunGroupError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_run_group::DeleteRunGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_sequence_store::DeleteSequenceStoreError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_sequence_store::DeleteSequenceStoreError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_sequence_store::DeleteSequenceStoreError> for Error {
    fn from(err: crate::operation::delete_sequence_store::DeleteSequenceStoreError) -> Self {
        match err {
            crate::operation::delete_sequence_store::DeleteSequenceStoreError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_sequence_store::DeleteSequenceStoreError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_sequence_store::DeleteSequenceStoreError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_sequence_store::DeleteSequenceStoreError::RequestTimeoutException(inner) => Error::RequestTimeoutException(inner),
            crate::operation::delete_sequence_store::DeleteSequenceStoreError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_sequence_store::DeleteSequenceStoreError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_sequence_store::DeleteSequenceStoreError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_sequence_store::DeleteSequenceStoreError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_variant_store::DeleteVariantStoreError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_variant_store::DeleteVariantStoreError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_variant_store::DeleteVariantStoreError> for Error {
    fn from(err: crate::operation::delete_variant_store::DeleteVariantStoreError) -> Self {
        match err {
            crate::operation::delete_variant_store::DeleteVariantStoreError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_variant_store::DeleteVariantStoreError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_variant_store::DeleteVariantStoreError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_variant_store::DeleteVariantStoreError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_variant_store::DeleteVariantStoreError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_variant_store::DeleteVariantStoreError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_variant_store::DeleteVariantStoreError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_workflow::DeleteWorkflowError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_workflow::DeleteWorkflowError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_workflow::DeleteWorkflowError> for Error {
    fn from(err: crate::operation::delete_workflow::DeleteWorkflowError) -> Self {
        match err {
            crate::operation::delete_workflow::DeleteWorkflowError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_workflow::DeleteWorkflowError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_workflow::DeleteWorkflowError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_workflow::DeleteWorkflowError::RequestTimeoutException(inner) => Error::RequestTimeoutException(inner),
            crate::operation::delete_workflow::DeleteWorkflowError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_workflow::DeleteWorkflowError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::delete_workflow::DeleteWorkflowError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_workflow::DeleteWorkflowError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_workflow::DeleteWorkflowError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_annotation_import_job::GetAnnotationImportJobError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_annotation_import_job::GetAnnotationImportJobError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_annotation_import_job::GetAnnotationImportJobError> for Error {
    fn from(err: crate::operation::get_annotation_import_job::GetAnnotationImportJobError) -> Self {
        match err {
            crate::operation::get_annotation_import_job::GetAnnotationImportJobError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_annotation_import_job::GetAnnotationImportJobError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_annotation_import_job::GetAnnotationImportJobError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_annotation_import_job::GetAnnotationImportJobError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_annotation_import_job::GetAnnotationImportJobError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_annotation_import_job::GetAnnotationImportJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_annotation_store::GetAnnotationStoreError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_annotation_store::GetAnnotationStoreError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_annotation_store::GetAnnotationStoreError> for Error {
    fn from(err: crate::operation::get_annotation_store::GetAnnotationStoreError) -> Self {
        match err {
            crate::operation::get_annotation_store::GetAnnotationStoreError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_annotation_store::GetAnnotationStoreError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_annotation_store::GetAnnotationStoreError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_annotation_store::GetAnnotationStoreError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_annotation_store::GetAnnotationStoreError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_annotation_store::GetAnnotationStoreError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::get_read_set::GetReadSetError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::get_read_set::GetReadSetError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_read_set::GetReadSetError> for Error {
    fn from(err: crate::operation::get_read_set::GetReadSetError) -> Self {
        match err {
            crate::operation::get_read_set::GetReadSetError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_read_set::GetReadSetError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::get_read_set::GetReadSetError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_read_set::GetReadSetError::RangeNotSatisfiableException(
                inner,
            ) => Error::RangeNotSatisfiableException(inner),
            crate::operation::get_read_set::GetReadSetError::RequestTimeoutException(inner) => {
                Error::RequestTimeoutException(inner)
            }
            crate::operation::get_read_set::GetReadSetError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_read_set::GetReadSetError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_read_set::GetReadSetError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_read_set::GetReadSetError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_read_set_activation_job::GetReadSetActivationJobError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_read_set_activation_job::GetReadSetActivationJobError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_read_set_activation_job::GetReadSetActivationJobError> for Error {
    fn from(
        err: crate::operation::get_read_set_activation_job::GetReadSetActivationJobError,
    ) -> Self {
        match err {
            crate::operation::get_read_set_activation_job::GetReadSetActivationJobError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_read_set_activation_job::GetReadSetActivationJobError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_read_set_activation_job::GetReadSetActivationJobError::RequestTimeoutException(inner) => Error::RequestTimeoutException(inner),
            crate::operation::get_read_set_activation_job::GetReadSetActivationJobError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_read_set_activation_job::GetReadSetActivationJobError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_read_set_activation_job::GetReadSetActivationJobError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_read_set_activation_job::GetReadSetActivationJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_read_set_export_job::GetReadSetExportJobError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_read_set_export_job::GetReadSetExportJobError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_read_set_export_job::GetReadSetExportJobError> for Error {
    fn from(err: crate::operation::get_read_set_export_job::GetReadSetExportJobError) -> Self {
        match err {
            crate::operation::get_read_set_export_job::GetReadSetExportJobError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_read_set_export_job::GetReadSetExportJobError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_read_set_export_job::GetReadSetExportJobError::RequestTimeoutException(inner) => Error::RequestTimeoutException(inner),
            crate::operation::get_read_set_export_job::GetReadSetExportJobError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_read_set_export_job::GetReadSetExportJobError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_read_set_export_job::GetReadSetExportJobError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_read_set_export_job::GetReadSetExportJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_read_set_import_job::GetReadSetImportJobError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_read_set_import_job::GetReadSetImportJobError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_read_set_import_job::GetReadSetImportJobError> for Error {
    fn from(err: crate::operation::get_read_set_import_job::GetReadSetImportJobError) -> Self {
        match err {
            crate::operation::get_read_set_import_job::GetReadSetImportJobError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_read_set_import_job::GetReadSetImportJobError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_read_set_import_job::GetReadSetImportJobError::RequestTimeoutException(inner) => Error::RequestTimeoutException(inner),
            crate::operation::get_read_set_import_job::GetReadSetImportJobError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_read_set_import_job::GetReadSetImportJobError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_read_set_import_job::GetReadSetImportJobError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_read_set_import_job::GetReadSetImportJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_read_set_metadata::GetReadSetMetadataError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_read_set_metadata::GetReadSetMetadataError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_read_set_metadata::GetReadSetMetadataError> for Error {
    fn from(err: crate::operation::get_read_set_metadata::GetReadSetMetadataError) -> Self {
        match err {
            crate::operation::get_read_set_metadata::GetReadSetMetadataError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_read_set_metadata::GetReadSetMetadataError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_read_set_metadata::GetReadSetMetadataError::RequestTimeoutException(inner) => Error::RequestTimeoutException(inner),
            crate::operation::get_read_set_metadata::GetReadSetMetadataError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_read_set_metadata::GetReadSetMetadataError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_read_set_metadata::GetReadSetMetadataError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_read_set_metadata::GetReadSetMetadataError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::get_reference::GetReferenceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_reference::GetReferenceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_reference::GetReferenceError> for Error {
    fn from(err: crate::operation::get_reference::GetReferenceError) -> Self {
        match err {
            crate::operation::get_reference::GetReferenceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_reference::GetReferenceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_reference::GetReferenceError::RangeNotSatisfiableException(
                inner,
            ) => Error::RangeNotSatisfiableException(inner),
            crate::operation::get_reference::GetReferenceError::RequestTimeoutException(inner) => {
                Error::RequestTimeoutException(inner)
            }
            crate::operation::get_reference::GetReferenceError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::get_reference::GetReferenceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_reference::GetReferenceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_reference::GetReferenceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_reference_import_job::GetReferenceImportJobError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_reference_import_job::GetReferenceImportJobError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_reference_import_job::GetReferenceImportJobError> for Error {
    fn from(err: crate::operation::get_reference_import_job::GetReferenceImportJobError) -> Self {
        match err {
            crate::operation::get_reference_import_job::GetReferenceImportJobError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_reference_import_job::GetReferenceImportJobError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_reference_import_job::GetReferenceImportJobError::RequestTimeoutException(inner) => Error::RequestTimeoutException(inner),
            crate::operation::get_reference_import_job::GetReferenceImportJobError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_reference_import_job::GetReferenceImportJobError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_reference_import_job::GetReferenceImportJobError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_reference_import_job::GetReferenceImportJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_reference_metadata::GetReferenceMetadataError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_reference_metadata::GetReferenceMetadataError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_reference_metadata::GetReferenceMetadataError> for Error {
    fn from(err: crate::operation::get_reference_metadata::GetReferenceMetadataError) -> Self {
        match err {
            crate::operation::get_reference_metadata::GetReferenceMetadataError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_reference_metadata::GetReferenceMetadataError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_reference_metadata::GetReferenceMetadataError::RequestTimeoutException(inner) => Error::RequestTimeoutException(inner),
            crate::operation::get_reference_metadata::GetReferenceMetadataError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_reference_metadata::GetReferenceMetadataError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_reference_metadata::GetReferenceMetadataError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_reference_metadata::GetReferenceMetadataError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_reference_store::GetReferenceStoreError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_reference_store::GetReferenceStoreError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_reference_store::GetReferenceStoreError> for Error {
    fn from(err: crate::operation::get_reference_store::GetReferenceStoreError) -> Self {
        match err {
            crate::operation::get_reference_store::GetReferenceStoreError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_reference_store::GetReferenceStoreError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_reference_store::GetReferenceStoreError::RequestTimeoutException(inner) => Error::RequestTimeoutException(inner),
            crate::operation::get_reference_store::GetReferenceStoreError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_reference_store::GetReferenceStoreError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_reference_store::GetReferenceStoreError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_reference_store::GetReferenceStoreError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::get_run::GetRunError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::get_run::GetRunError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_run::GetRunError> for Error {
    fn from(err: crate::operation::get_run::GetRunError) -> Self {
        match err {
            crate::operation::get_run::GetRunError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_run::GetRunError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::get_run::GetRunError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_run::GetRunError::RequestTimeoutException(inner) => {
                Error::RequestTimeoutException(inner)
            }
            crate::operation::get_run::GetRunError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_run::GetRunError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::get_run::GetRunError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_run::GetRunError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_run::GetRunError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::get_run_group::GetRunGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_run_group::GetRunGroupError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_run_group::GetRunGroupError> for Error {
    fn from(err: crate::operation::get_run_group::GetRunGroupError) -> Self {
        match err {
            crate::operation::get_run_group::GetRunGroupError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_run_group::GetRunGroupError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::get_run_group::GetRunGroupError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_run_group::GetRunGroupError::RequestTimeoutException(inner) => {
                Error::RequestTimeoutException(inner)
            }
            crate::operation::get_run_group::GetRunGroupError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_run_group::GetRunGroupError::ServiceQuotaExceededException(
                inner,
            ) => Error::ServiceQuotaExceededException(inner),
            crate::operation::get_run_group::GetRunGroupError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_run_group::GetRunGroupError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_run_group::GetRunGroupError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::get_run_task::GetRunTaskError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::get_run_task::GetRunTaskError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_run_task::GetRunTaskError> for Error {
    fn from(err: crate::operation::get_run_task::GetRunTaskError) -> Self {
        match err {
            crate::operation::get_run_task::GetRunTaskError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_run_task::GetRunTaskError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::get_run_task::GetRunTaskError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_run_task::GetRunTaskError::RequestTimeoutException(inner) => {
                Error::RequestTimeoutException(inner)
            }
            crate::operation::get_run_task::GetRunTaskError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_run_task::GetRunTaskError::ServiceQuotaExceededException(
                inner,
            ) => Error::ServiceQuotaExceededException(inner),
            crate::operation::get_run_task::GetRunTaskError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_run_task::GetRunTaskError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_run_task::GetRunTaskError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_sequence_store::GetSequenceStoreError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_sequence_store::GetSequenceStoreError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_sequence_store::GetSequenceStoreError> for Error {
    fn from(err: crate::operation::get_sequence_store::GetSequenceStoreError) -> Self {
        match err {
            crate::operation::get_sequence_store::GetSequenceStoreError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_sequence_store::GetSequenceStoreError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_sequence_store::GetSequenceStoreError::RequestTimeoutException(inner) => Error::RequestTimeoutException(inner),
            crate::operation::get_sequence_store::GetSequenceStoreError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_sequence_store::GetSequenceStoreError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_sequence_store::GetSequenceStoreError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_sequence_store::GetSequenceStoreError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_variant_import_job::GetVariantImportJobError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_variant_import_job::GetVariantImportJobError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_variant_import_job::GetVariantImportJobError> for Error {
    fn from(err: crate::operation::get_variant_import_job::GetVariantImportJobError) -> Self {
        match err {
            crate::operation::get_variant_import_job::GetVariantImportJobError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_variant_import_job::GetVariantImportJobError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_variant_import_job::GetVariantImportJobError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_variant_import_job::GetVariantImportJobError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_variant_import_job::GetVariantImportJobError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_variant_import_job::GetVariantImportJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_variant_store::GetVariantStoreError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_variant_store::GetVariantStoreError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_variant_store::GetVariantStoreError> for Error {
    fn from(err: crate::operation::get_variant_store::GetVariantStoreError) -> Self {
        match err {
            crate::operation::get_variant_store::GetVariantStoreError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_variant_store::GetVariantStoreError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_variant_store::GetVariantStoreError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_variant_store::GetVariantStoreError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_variant_store::GetVariantStoreError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_variant_store::GetVariantStoreError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::get_workflow::GetWorkflowError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::get_workflow::GetWorkflowError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_workflow::GetWorkflowError> for Error {
    fn from(err: crate::operation::get_workflow::GetWorkflowError) -> Self {
        match err {
            crate::operation::get_workflow::GetWorkflowError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_workflow::GetWorkflowError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::get_workflow::GetWorkflowError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_workflow::GetWorkflowError::RequestTimeoutException(inner) => {
                Error::RequestTimeoutException(inner)
            }
            crate::operation::get_workflow::GetWorkflowError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_workflow::GetWorkflowError::ServiceQuotaExceededException(
                inner,
            ) => Error::ServiceQuotaExceededException(inner),
            crate::operation::get_workflow::GetWorkflowError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_workflow::GetWorkflowError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_workflow::GetWorkflowError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_annotation_import_jobs::ListAnnotationImportJobsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_annotation_import_jobs::ListAnnotationImportJobsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_annotation_import_jobs::ListAnnotationImportJobsError> for Error {
    fn from(
        err: crate::operation::list_annotation_import_jobs::ListAnnotationImportJobsError,
    ) -> Self {
        match err {
            crate::operation::list_annotation_import_jobs::ListAnnotationImportJobsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_annotation_import_jobs::ListAnnotationImportJobsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_annotation_import_jobs::ListAnnotationImportJobsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_annotation_import_jobs::ListAnnotationImportJobsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_annotation_import_jobs::ListAnnotationImportJobsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_annotation_import_jobs::ListAnnotationImportJobsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_annotation_stores::ListAnnotationStoresError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_annotation_stores::ListAnnotationStoresError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_annotation_stores::ListAnnotationStoresError> for Error {
    fn from(err: crate::operation::list_annotation_stores::ListAnnotationStoresError) -> Self {
        match err {
            crate::operation::list_annotation_stores::ListAnnotationStoresError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_annotation_stores::ListAnnotationStoresError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_annotation_stores::ListAnnotationStoresError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_annotation_stores::ListAnnotationStoresError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_annotation_stores::ListAnnotationStoresError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_annotation_stores::ListAnnotationStoresError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_read_set_activation_jobs::ListReadSetActivationJobsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_read_set_activation_jobs::ListReadSetActivationJobsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_read_set_activation_jobs::ListReadSetActivationJobsError>
    for Error
{
    fn from(
        err: crate::operation::list_read_set_activation_jobs::ListReadSetActivationJobsError,
    ) -> Self {
        match err {
            crate::operation::list_read_set_activation_jobs::ListReadSetActivationJobsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_read_set_activation_jobs::ListReadSetActivationJobsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_read_set_activation_jobs::ListReadSetActivationJobsError::RequestTimeoutException(inner) => Error::RequestTimeoutException(inner),
            crate::operation::list_read_set_activation_jobs::ListReadSetActivationJobsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_read_set_activation_jobs::ListReadSetActivationJobsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_read_set_activation_jobs::ListReadSetActivationJobsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_read_set_activation_jobs::ListReadSetActivationJobsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_read_set_export_jobs::ListReadSetExportJobsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_read_set_export_jobs::ListReadSetExportJobsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_read_set_export_jobs::ListReadSetExportJobsError> for Error {
    fn from(err: crate::operation::list_read_set_export_jobs::ListReadSetExportJobsError) -> Self {
        match err {
            crate::operation::list_read_set_export_jobs::ListReadSetExportJobsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_read_set_export_jobs::ListReadSetExportJobsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_read_set_export_jobs::ListReadSetExportJobsError::RequestTimeoutException(inner) => Error::RequestTimeoutException(inner),
            crate::operation::list_read_set_export_jobs::ListReadSetExportJobsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_read_set_export_jobs::ListReadSetExportJobsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_read_set_export_jobs::ListReadSetExportJobsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_read_set_export_jobs::ListReadSetExportJobsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_read_set_import_jobs::ListReadSetImportJobsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_read_set_import_jobs::ListReadSetImportJobsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_read_set_import_jobs::ListReadSetImportJobsError> for Error {
    fn from(err: crate::operation::list_read_set_import_jobs::ListReadSetImportJobsError) -> Self {
        match err {
            crate::operation::list_read_set_import_jobs::ListReadSetImportJobsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_read_set_import_jobs::ListReadSetImportJobsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_read_set_import_jobs::ListReadSetImportJobsError::RequestTimeoutException(inner) => Error::RequestTimeoutException(inner),
            crate::operation::list_read_set_import_jobs::ListReadSetImportJobsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_read_set_import_jobs::ListReadSetImportJobsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_read_set_import_jobs::ListReadSetImportJobsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_read_set_import_jobs::ListReadSetImportJobsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::list_read_sets::ListReadSetsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_read_sets::ListReadSetsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_read_sets::ListReadSetsError> for Error {
    fn from(err: crate::operation::list_read_sets::ListReadSetsError) -> Self {
        match err {
            crate::operation::list_read_sets::ListReadSetsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_read_sets::ListReadSetsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_read_sets::ListReadSetsError::RequestTimeoutException(inner) => {
                Error::RequestTimeoutException(inner)
            }
            crate::operation::list_read_sets::ListReadSetsError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::list_read_sets::ListReadSetsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_read_sets::ListReadSetsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_read_sets::ListReadSetsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_reference_import_jobs::ListReferenceImportJobsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_reference_import_jobs::ListReferenceImportJobsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_reference_import_jobs::ListReferenceImportJobsError> for Error {
    fn from(
        err: crate::operation::list_reference_import_jobs::ListReferenceImportJobsError,
    ) -> Self {
        match err {
            crate::operation::list_reference_import_jobs::ListReferenceImportJobsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_reference_import_jobs::ListReferenceImportJobsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_reference_import_jobs::ListReferenceImportJobsError::RequestTimeoutException(inner) => Error::RequestTimeoutException(inner),
            crate::operation::list_reference_import_jobs::ListReferenceImportJobsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_reference_import_jobs::ListReferenceImportJobsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_reference_import_jobs::ListReferenceImportJobsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_reference_import_jobs::ListReferenceImportJobsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_references::ListReferencesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_references::ListReferencesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_references::ListReferencesError> for Error {
    fn from(err: crate::operation::list_references::ListReferencesError) -> Self {
        match err {
            crate::operation::list_references::ListReferencesError::AccessDeniedException(
                inner,
            ) => Error::AccessDeniedException(inner),
            crate::operation::list_references::ListReferencesError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::list_references::ListReferencesError::RequestTimeoutException(
                inner,
            ) => Error::RequestTimeoutException(inner),
            crate::operation::list_references::ListReferencesError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::list_references::ListReferencesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_references::ListReferencesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_references::ListReferencesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_reference_stores::ListReferenceStoresError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_reference_stores::ListReferenceStoresError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_reference_stores::ListReferenceStoresError> for Error {
    fn from(err: crate::operation::list_reference_stores::ListReferenceStoresError) -> Self {
        match err {
            crate::operation::list_reference_stores::ListReferenceStoresError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_reference_stores::ListReferenceStoresError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_reference_stores::ListReferenceStoresError::RequestTimeoutException(inner) => Error::RequestTimeoutException(inner),
            crate::operation::list_reference_stores::ListReferenceStoresError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_reference_stores::ListReferenceStoresError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_reference_stores::ListReferenceStoresError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<crate::operation::list_run_groups::ListRunGroupsError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_run_groups::ListRunGroupsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_run_groups::ListRunGroupsError> for Error {
    fn from(err: crate::operation::list_run_groups::ListRunGroupsError) -> Self {
        match err {
            crate::operation::list_run_groups::ListRunGroupsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_run_groups::ListRunGroupsError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::list_run_groups::ListRunGroupsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_run_groups::ListRunGroupsError::RequestTimeoutException(inner) => Error::RequestTimeoutException(inner),
            crate::operation::list_run_groups::ListRunGroupsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_run_groups::ListRunGroupsError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::list_run_groups::ListRunGroupsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_run_groups::ListRunGroupsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_run_groups::ListRunGroupsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::list_runs::ListRunsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::list_runs::ListRunsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_runs::ListRunsError> for Error {
    fn from(err: crate::operation::list_runs::ListRunsError) -> Self {
        match err {
            crate::operation::list_runs::ListRunsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_runs::ListRunsError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::list_runs::ListRunsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_runs::ListRunsError::RequestTimeoutException(inner) => {
                Error::RequestTimeoutException(inner)
            }
            crate::operation::list_runs::ListRunsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_runs::ListRunsError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::list_runs::ListRunsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_runs::ListRunsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_runs::ListRunsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::list_run_tasks::ListRunTasksError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_run_tasks::ListRunTasksError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_run_tasks::ListRunTasksError> for Error {
    fn from(err: crate::operation::list_run_tasks::ListRunTasksError) -> Self {
        match err {
            crate::operation::list_run_tasks::ListRunTasksError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_run_tasks::ListRunTasksError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::list_run_tasks::ListRunTasksError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_run_tasks::ListRunTasksError::RequestTimeoutException(inner) => {
                Error::RequestTimeoutException(inner)
            }
            crate::operation::list_run_tasks::ListRunTasksError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::list_run_tasks::ListRunTasksError::ServiceQuotaExceededException(
                inner,
            ) => Error::ServiceQuotaExceededException(inner),
            crate::operation::list_run_tasks::ListRunTasksError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_run_tasks::ListRunTasksError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_run_tasks::ListRunTasksError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_sequence_stores::ListSequenceStoresError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_sequence_stores::ListSequenceStoresError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_sequence_stores::ListSequenceStoresError> for Error {
    fn from(err: crate::operation::list_sequence_stores::ListSequenceStoresError) -> Self {
        match err {
            crate::operation::list_sequence_stores::ListSequenceStoresError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_sequence_stores::ListSequenceStoresError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_sequence_stores::ListSequenceStoresError::RequestTimeoutException(inner) => Error::RequestTimeoutException(inner),
            crate::operation::list_sequence_stores::ListSequenceStoresError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_sequence_stores::ListSequenceStoresError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_sequence_stores::ListSequenceStoresError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_tags_for_resource::ListTagsForResourceError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_tags_for_resource::ListTagsForResourceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_tags_for_resource::ListTagsForResourceError> for Error {
    fn from(err: crate::operation::list_tags_for_resource::ListTagsForResourceError) -> Self {
        match err {
            crate::operation::list_tags_for_resource::ListTagsForResourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::RequestTimeoutException(inner) => Error::RequestTimeoutException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_variant_import_jobs::ListVariantImportJobsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_variant_import_jobs::ListVariantImportJobsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_variant_import_jobs::ListVariantImportJobsError> for Error {
    fn from(err: crate::operation::list_variant_import_jobs::ListVariantImportJobsError) -> Self {
        match err {
            crate::operation::list_variant_import_jobs::ListVariantImportJobsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_variant_import_jobs::ListVariantImportJobsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_variant_import_jobs::ListVariantImportJobsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_variant_import_jobs::ListVariantImportJobsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_variant_import_jobs::ListVariantImportJobsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_variant_import_jobs::ListVariantImportJobsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_variant_stores::ListVariantStoresError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_variant_stores::ListVariantStoresError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_variant_stores::ListVariantStoresError> for Error {
    fn from(err: crate::operation::list_variant_stores::ListVariantStoresError) -> Self {
        match err {
            crate::operation::list_variant_stores::ListVariantStoresError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_variant_stores::ListVariantStoresError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_variant_stores::ListVariantStoresError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_variant_stores::ListVariantStoresError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_variant_stores::ListVariantStoresError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_variant_stores::ListVariantStoresError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::list_workflows::ListWorkflowsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_workflows::ListWorkflowsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_workflows::ListWorkflowsError> for Error {
    fn from(err: crate::operation::list_workflows::ListWorkflowsError) -> Self {
        match err {
            crate::operation::list_workflows::ListWorkflowsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_workflows::ListWorkflowsError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::list_workflows::ListWorkflowsError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::list_workflows::ListWorkflowsError::RequestTimeoutException(
                inner,
            ) => Error::RequestTimeoutException(inner),
            crate::operation::list_workflows::ListWorkflowsError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::list_workflows::ListWorkflowsError::ServiceQuotaExceededException(
                inner,
            ) => Error::ServiceQuotaExceededException(inner),
            crate::operation::list_workflows::ListWorkflowsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_workflows::ListWorkflowsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_workflows::ListWorkflowsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::start_annotation_import_job::StartAnnotationImportJobError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::start_annotation_import_job::StartAnnotationImportJobError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::start_annotation_import_job::StartAnnotationImportJobError> for Error {
    fn from(
        err: crate::operation::start_annotation_import_job::StartAnnotationImportJobError,
    ) -> Self {
        match err {
            crate::operation::start_annotation_import_job::StartAnnotationImportJobError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::start_annotation_import_job::StartAnnotationImportJobError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::start_annotation_import_job::StartAnnotationImportJobError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::start_annotation_import_job::StartAnnotationImportJobError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::start_annotation_import_job::StartAnnotationImportJobError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::start_annotation_import_job::StartAnnotationImportJobError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::start_annotation_import_job::StartAnnotationImportJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::start_read_set_activation_job::StartReadSetActivationJobError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::start_read_set_activation_job::StartReadSetActivationJobError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::start_read_set_activation_job::StartReadSetActivationJobError>
    for Error
{
    fn from(
        err: crate::operation::start_read_set_activation_job::StartReadSetActivationJobError,
    ) -> Self {
        match err {
            crate::operation::start_read_set_activation_job::StartReadSetActivationJobError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::start_read_set_activation_job::StartReadSetActivationJobError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::start_read_set_activation_job::StartReadSetActivationJobError::RequestTimeoutException(inner) => Error::RequestTimeoutException(inner),
            crate::operation::start_read_set_activation_job::StartReadSetActivationJobError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::start_read_set_activation_job::StartReadSetActivationJobError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::start_read_set_activation_job::StartReadSetActivationJobError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::start_read_set_activation_job::StartReadSetActivationJobError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::start_read_set_activation_job::StartReadSetActivationJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::start_read_set_export_job::StartReadSetExportJobError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::start_read_set_export_job::StartReadSetExportJobError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::start_read_set_export_job::StartReadSetExportJobError> for Error {
    fn from(err: crate::operation::start_read_set_export_job::StartReadSetExportJobError) -> Self {
        match err {
            crate::operation::start_read_set_export_job::StartReadSetExportJobError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::start_read_set_export_job::StartReadSetExportJobError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::start_read_set_export_job::StartReadSetExportJobError::RequestTimeoutException(inner) => Error::RequestTimeoutException(inner),
            crate::operation::start_read_set_export_job::StartReadSetExportJobError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::start_read_set_export_job::StartReadSetExportJobError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::start_read_set_export_job::StartReadSetExportJobError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::start_read_set_export_job::StartReadSetExportJobError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::start_read_set_export_job::StartReadSetExportJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::start_read_set_import_job::StartReadSetImportJobError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::start_read_set_import_job::StartReadSetImportJobError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::start_read_set_import_job::StartReadSetImportJobError> for Error {
    fn from(err: crate::operation::start_read_set_import_job::StartReadSetImportJobError) -> Self {
        match err {
            crate::operation::start_read_set_import_job::StartReadSetImportJobError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::start_read_set_import_job::StartReadSetImportJobError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::start_read_set_import_job::StartReadSetImportJobError::RequestTimeoutException(inner) => Error::RequestTimeoutException(inner),
            crate::operation::start_read_set_import_job::StartReadSetImportJobError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::start_read_set_import_job::StartReadSetImportJobError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::start_read_set_import_job::StartReadSetImportJobError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::start_read_set_import_job::StartReadSetImportJobError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::start_read_set_import_job::StartReadSetImportJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::start_reference_import_job::StartReferenceImportJobError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::start_reference_import_job::StartReferenceImportJobError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::start_reference_import_job::StartReferenceImportJobError> for Error {
    fn from(
        err: crate::operation::start_reference_import_job::StartReferenceImportJobError,
    ) -> Self {
        match err {
            crate::operation::start_reference_import_job::StartReferenceImportJobError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::start_reference_import_job::StartReferenceImportJobError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::start_reference_import_job::StartReferenceImportJobError::RequestTimeoutException(inner) => Error::RequestTimeoutException(inner),
            crate::operation::start_reference_import_job::StartReferenceImportJobError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::start_reference_import_job::StartReferenceImportJobError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::start_reference_import_job::StartReferenceImportJobError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::start_reference_import_job::StartReferenceImportJobError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::start_reference_import_job::StartReferenceImportJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::start_run::StartRunError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::start_run::StartRunError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::start_run::StartRunError> for Error {
    fn from(err: crate::operation::start_run::StartRunError) -> Self {
        match err {
            crate::operation::start_run::StartRunError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::start_run::StartRunError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::start_run::StartRunError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::start_run::StartRunError::RequestTimeoutException(inner) => {
                Error::RequestTimeoutException(inner)
            }
            crate::operation::start_run::StartRunError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::start_run::StartRunError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::start_run::StartRunError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::start_run::StartRunError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::start_run::StartRunError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::start_variant_import_job::StartVariantImportJobError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::start_variant_import_job::StartVariantImportJobError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::start_variant_import_job::StartVariantImportJobError> for Error {
    fn from(err: crate::operation::start_variant_import_job::StartVariantImportJobError) -> Self {
        match err {
            crate::operation::start_variant_import_job::StartVariantImportJobError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::start_variant_import_job::StartVariantImportJobError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::start_variant_import_job::StartVariantImportJobError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::start_variant_import_job::StartVariantImportJobError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::start_variant_import_job::StartVariantImportJobError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::start_variant_import_job::StartVariantImportJobError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::start_variant_import_job::StartVariantImportJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::tag_resource::TagResourceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::tag_resource::TagResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::tag_resource::TagResourceError> for Error {
    fn from(err: crate::operation::tag_resource::TagResourceError) -> Self {
        match err {
            crate::operation::tag_resource::TagResourceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::tag_resource::TagResourceError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::tag_resource::TagResourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::tag_resource::TagResourceError::RequestTimeoutException(inner) => {
                Error::RequestTimeoutException(inner)
            }
            crate::operation::tag_resource::TagResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::tag_resource::TagResourceError::ServiceQuotaExceededException(
                inner,
            ) => Error::ServiceQuotaExceededException(inner),
            crate::operation::tag_resource::TagResourceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::tag_resource::TagResourceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::tag_resource::TagResourceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::untag_resource::UntagResourceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::untag_resource::UntagResourceError> for Error {
    fn from(err: crate::operation::untag_resource::UntagResourceError) -> Self {
        match err {
            crate::operation::untag_resource::UntagResourceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::untag_resource::UntagResourceError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::untag_resource::UntagResourceError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::untag_resource::UntagResourceError::RequestTimeoutException(
                inner,
            ) => Error::RequestTimeoutException(inner),
            crate::operation::untag_resource::UntagResourceError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::untag_resource::UntagResourceError::ServiceQuotaExceededException(
                inner,
            ) => Error::ServiceQuotaExceededException(inner),
            crate::operation::untag_resource::UntagResourceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::untag_resource::UntagResourceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::untag_resource::UntagResourceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_annotation_store::UpdateAnnotationStoreError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_annotation_store::UpdateAnnotationStoreError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_annotation_store::UpdateAnnotationStoreError> for Error {
    fn from(err: crate::operation::update_annotation_store::UpdateAnnotationStoreError) -> Self {
        match err {
            crate::operation::update_annotation_store::UpdateAnnotationStoreError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_annotation_store::UpdateAnnotationStoreError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_annotation_store::UpdateAnnotationStoreError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_annotation_store::UpdateAnnotationStoreError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_annotation_store::UpdateAnnotationStoreError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_annotation_store::UpdateAnnotationStoreError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_run_group::UpdateRunGroupError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_run_group::UpdateRunGroupError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_run_group::UpdateRunGroupError> for Error {
    fn from(err: crate::operation::update_run_group::UpdateRunGroupError) -> Self {
        match err {
            crate::operation::update_run_group::UpdateRunGroupError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_run_group::UpdateRunGroupError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_run_group::UpdateRunGroupError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_run_group::UpdateRunGroupError::RequestTimeoutException(inner) => Error::RequestTimeoutException(inner),
            crate::operation::update_run_group::UpdateRunGroupError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_run_group::UpdateRunGroupError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::update_run_group::UpdateRunGroupError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_run_group::UpdateRunGroupError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_run_group::UpdateRunGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_variant_store::UpdateVariantStoreError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_variant_store::UpdateVariantStoreError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_variant_store::UpdateVariantStoreError> for Error {
    fn from(err: crate::operation::update_variant_store::UpdateVariantStoreError) -> Self {
        match err {
            crate::operation::update_variant_store::UpdateVariantStoreError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_variant_store::UpdateVariantStoreError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_variant_store::UpdateVariantStoreError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_variant_store::UpdateVariantStoreError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_variant_store::UpdateVariantStoreError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_variant_store::UpdateVariantStoreError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_workflow::UpdateWorkflowError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_workflow::UpdateWorkflowError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_workflow::UpdateWorkflowError> for Error {
    fn from(err: crate::operation::update_workflow::UpdateWorkflowError) -> Self {
        match err {
            crate::operation::update_workflow::UpdateWorkflowError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_workflow::UpdateWorkflowError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_workflow::UpdateWorkflowError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_workflow::UpdateWorkflowError::RequestTimeoutException(inner) => Error::RequestTimeoutException(inner),
            crate::operation::update_workflow::UpdateWorkflowError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_workflow::UpdateWorkflowError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::update_workflow::UpdateWorkflowError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_workflow::UpdateWorkflowError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_workflow::UpdateWorkflowError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::InternalServerException(e) => e.request_id(),
            Self::RangeNotSatisfiableException(e) => e.request_id(),
            Self::RequestTimeoutException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ServiceQuotaExceededException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
