// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// Operation shape for `BatchDeleteReadSet`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`batch_delete_read_set`](crate::client::Client::batch_delete_read_set).
///
/// See [`crate::client::fluent_builders::BatchDeleteReadSet`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct BatchDeleteReadSet {
    _private: (),
}
impl BatchDeleteReadSet {
    /// Creates a new builder-style object to manufacture [`BatchDeleteReadSetInput`](crate::input::BatchDeleteReadSetInput).
    pub fn builder() -> crate::input::batch_delete_read_set_input::Builder {
        crate::input::batch_delete_read_set_input::Builder::default()
    }
    /// Creates a new `BatchDeleteReadSet` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for BatchDeleteReadSet {
    type Output = std::result::Result<
        crate::output::BatchDeleteReadSetOutput,
        crate::error::BatchDeleteReadSetError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_batch_delete_read_set_error(response)
        } else {
            crate::operation_deser::parse_batch_delete_read_set_response(response)
        }
    }
}

/// Operation shape for `CancelAnnotationImportJob`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`cancel_annotation_import_job`](crate::client::Client::cancel_annotation_import_job).
///
/// See [`crate::client::fluent_builders::CancelAnnotationImportJob`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CancelAnnotationImportJob {
    _private: (),
}
impl CancelAnnotationImportJob {
    /// Creates a new builder-style object to manufacture [`CancelAnnotationImportJobInput`](crate::input::CancelAnnotationImportJobInput).
    pub fn builder() -> crate::input::cancel_annotation_import_job_input::Builder {
        crate::input::cancel_annotation_import_job_input::Builder::default()
    }
    /// Creates a new `CancelAnnotationImportJob` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CancelAnnotationImportJob {
    type Output = std::result::Result<
        crate::output::CancelAnnotationImportJobOutput,
        crate::error::CancelAnnotationImportJobError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_cancel_annotation_import_job_error(response)
        } else {
            crate::operation_deser::parse_cancel_annotation_import_job_response(response)
        }
    }
}

/// Operation shape for `CancelRun`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`cancel_run`](crate::client::Client::cancel_run).
///
/// See [`crate::client::fluent_builders::CancelRun`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CancelRun {
    _private: (),
}
impl CancelRun {
    /// Creates a new builder-style object to manufacture [`CancelRunInput`](crate::input::CancelRunInput).
    pub fn builder() -> crate::input::cancel_run_input::Builder {
        crate::input::cancel_run_input::Builder::default()
    }
    /// Creates a new `CancelRun` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CancelRun {
    type Output = std::result::Result<crate::output::CancelRunOutput, crate::error::CancelRunError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 202 {
            crate::operation_deser::parse_cancel_run_error(response)
        } else {
            crate::operation_deser::parse_cancel_run_response(response)
        }
    }
}

/// Operation shape for `CancelVariantImportJob`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`cancel_variant_import_job`](crate::client::Client::cancel_variant_import_job).
///
/// See [`crate::client::fluent_builders::CancelVariantImportJob`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CancelVariantImportJob {
    _private: (),
}
impl CancelVariantImportJob {
    /// Creates a new builder-style object to manufacture [`CancelVariantImportJobInput`](crate::input::CancelVariantImportJobInput).
    pub fn builder() -> crate::input::cancel_variant_import_job_input::Builder {
        crate::input::cancel_variant_import_job_input::Builder::default()
    }
    /// Creates a new `CancelVariantImportJob` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CancelVariantImportJob {
    type Output = std::result::Result<
        crate::output::CancelVariantImportJobOutput,
        crate::error::CancelVariantImportJobError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_cancel_variant_import_job_error(response)
        } else {
            crate::operation_deser::parse_cancel_variant_import_job_response(response)
        }
    }
}

/// Operation shape for `CreateAnnotationStore`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_annotation_store`](crate::client::Client::create_annotation_store).
///
/// See [`crate::client::fluent_builders::CreateAnnotationStore`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateAnnotationStore {
    _private: (),
}
impl CreateAnnotationStore {
    /// Creates a new builder-style object to manufacture [`CreateAnnotationStoreInput`](crate::input::CreateAnnotationStoreInput).
    pub fn builder() -> crate::input::create_annotation_store_input::Builder {
        crate::input::create_annotation_store_input::Builder::default()
    }
    /// Creates a new `CreateAnnotationStore` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateAnnotationStore {
    type Output = std::result::Result<
        crate::output::CreateAnnotationStoreOutput,
        crate::error::CreateAnnotationStoreError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_annotation_store_error(response)
        } else {
            crate::operation_deser::parse_create_annotation_store_response(response)
        }
    }
}

/// Operation shape for `CreateReferenceStore`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_reference_store`](crate::client::Client::create_reference_store).
///
/// See [`crate::client::fluent_builders::CreateReferenceStore`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateReferenceStore {
    _private: (),
}
impl CreateReferenceStore {
    /// Creates a new builder-style object to manufacture [`CreateReferenceStoreInput`](crate::input::CreateReferenceStoreInput).
    pub fn builder() -> crate::input::create_reference_store_input::Builder {
        crate::input::create_reference_store_input::Builder::default()
    }
    /// Creates a new `CreateReferenceStore` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateReferenceStore {
    type Output = std::result::Result<
        crate::output::CreateReferenceStoreOutput,
        crate::error::CreateReferenceStoreError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_reference_store_error(response)
        } else {
            crate::operation_deser::parse_create_reference_store_response(response)
        }
    }
}

/// Operation shape for `CreateRunGroup`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_run_group`](crate::client::Client::create_run_group).
///
/// See [`crate::client::fluent_builders::CreateRunGroup`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateRunGroup {
    _private: (),
}
impl CreateRunGroup {
    /// Creates a new builder-style object to manufacture [`CreateRunGroupInput`](crate::input::CreateRunGroupInput).
    pub fn builder() -> crate::input::create_run_group_input::Builder {
        crate::input::create_run_group_input::Builder::default()
    }
    /// Creates a new `CreateRunGroup` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateRunGroup {
    type Output =
        std::result::Result<crate::output::CreateRunGroupOutput, crate::error::CreateRunGroupError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 201 {
            crate::operation_deser::parse_create_run_group_error(response)
        } else {
            crate::operation_deser::parse_create_run_group_response(response)
        }
    }
}

/// Operation shape for `CreateSequenceStore`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_sequence_store`](crate::client::Client::create_sequence_store).
///
/// See [`crate::client::fluent_builders::CreateSequenceStore`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateSequenceStore {
    _private: (),
}
impl CreateSequenceStore {
    /// Creates a new builder-style object to manufacture [`CreateSequenceStoreInput`](crate::input::CreateSequenceStoreInput).
    pub fn builder() -> crate::input::create_sequence_store_input::Builder {
        crate::input::create_sequence_store_input::Builder::default()
    }
    /// Creates a new `CreateSequenceStore` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateSequenceStore {
    type Output = std::result::Result<
        crate::output::CreateSequenceStoreOutput,
        crate::error::CreateSequenceStoreError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_sequence_store_error(response)
        } else {
            crate::operation_deser::parse_create_sequence_store_response(response)
        }
    }
}

/// Operation shape for `CreateVariantStore`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_variant_store`](crate::client::Client::create_variant_store).
///
/// See [`crate::client::fluent_builders::CreateVariantStore`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateVariantStore {
    _private: (),
}
impl CreateVariantStore {
    /// Creates a new builder-style object to manufacture [`CreateVariantStoreInput`](crate::input::CreateVariantStoreInput).
    pub fn builder() -> crate::input::create_variant_store_input::Builder {
        crate::input::create_variant_store_input::Builder::default()
    }
    /// Creates a new `CreateVariantStore` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateVariantStore {
    type Output = std::result::Result<
        crate::output::CreateVariantStoreOutput,
        crate::error::CreateVariantStoreError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_variant_store_error(response)
        } else {
            crate::operation_deser::parse_create_variant_store_response(response)
        }
    }
}

/// Operation shape for `CreateWorkflow`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_workflow`](crate::client::Client::create_workflow).
///
/// See [`crate::client::fluent_builders::CreateWorkflow`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateWorkflow {
    _private: (),
}
impl CreateWorkflow {
    /// Creates a new builder-style object to manufacture [`CreateWorkflowInput`](crate::input::CreateWorkflowInput).
    pub fn builder() -> crate::input::create_workflow_input::Builder {
        crate::input::create_workflow_input::Builder::default()
    }
    /// Creates a new `CreateWorkflow` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateWorkflow {
    type Output =
        std::result::Result<crate::output::CreateWorkflowOutput, crate::error::CreateWorkflowError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 201 {
            crate::operation_deser::parse_create_workflow_error(response)
        } else {
            crate::operation_deser::parse_create_workflow_response(response)
        }
    }
}

/// Operation shape for `DeleteAnnotationStore`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_annotation_store`](crate::client::Client::delete_annotation_store).
///
/// See [`crate::client::fluent_builders::DeleteAnnotationStore`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteAnnotationStore {
    _private: (),
}
impl DeleteAnnotationStore {
    /// Creates a new builder-style object to manufacture [`DeleteAnnotationStoreInput`](crate::input::DeleteAnnotationStoreInput).
    pub fn builder() -> crate::input::delete_annotation_store_input::Builder {
        crate::input::delete_annotation_store_input::Builder::default()
    }
    /// Creates a new `DeleteAnnotationStore` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteAnnotationStore {
    type Output = std::result::Result<
        crate::output::DeleteAnnotationStoreOutput,
        crate::error::DeleteAnnotationStoreError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_annotation_store_error(response)
        } else {
            crate::operation_deser::parse_delete_annotation_store_response(response)
        }
    }
}

/// Operation shape for `DeleteReference`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_reference`](crate::client::Client::delete_reference).
///
/// See [`crate::client::fluent_builders::DeleteReference`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteReference {
    _private: (),
}
impl DeleteReference {
    /// Creates a new builder-style object to manufacture [`DeleteReferenceInput`](crate::input::DeleteReferenceInput).
    pub fn builder() -> crate::input::delete_reference_input::Builder {
        crate::input::delete_reference_input::Builder::default()
    }
    /// Creates a new `DeleteReference` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteReference {
    type Output = std::result::Result<
        crate::output::DeleteReferenceOutput,
        crate::error::DeleteReferenceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_reference_error(response)
        } else {
            crate::operation_deser::parse_delete_reference_response(response)
        }
    }
}

/// Operation shape for `DeleteReferenceStore`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_reference_store`](crate::client::Client::delete_reference_store).
///
/// See [`crate::client::fluent_builders::DeleteReferenceStore`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteReferenceStore {
    _private: (),
}
impl DeleteReferenceStore {
    /// Creates a new builder-style object to manufacture [`DeleteReferenceStoreInput`](crate::input::DeleteReferenceStoreInput).
    pub fn builder() -> crate::input::delete_reference_store_input::Builder {
        crate::input::delete_reference_store_input::Builder::default()
    }
    /// Creates a new `DeleteReferenceStore` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteReferenceStore {
    type Output = std::result::Result<
        crate::output::DeleteReferenceStoreOutput,
        crate::error::DeleteReferenceStoreError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_reference_store_error(response)
        } else {
            crate::operation_deser::parse_delete_reference_store_response(response)
        }
    }
}

/// Operation shape for `DeleteRun`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_run`](crate::client::Client::delete_run).
///
/// See [`crate::client::fluent_builders::DeleteRun`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteRun {
    _private: (),
}
impl DeleteRun {
    /// Creates a new builder-style object to manufacture [`DeleteRunInput`](crate::input::DeleteRunInput).
    pub fn builder() -> crate::input::delete_run_input::Builder {
        crate::input::delete_run_input::Builder::default()
    }
    /// Creates a new `DeleteRun` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteRun {
    type Output = std::result::Result<crate::output::DeleteRunOutput, crate::error::DeleteRunError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 202 {
            crate::operation_deser::parse_delete_run_error(response)
        } else {
            crate::operation_deser::parse_delete_run_response(response)
        }
    }
}

/// Operation shape for `DeleteRunGroup`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_run_group`](crate::client::Client::delete_run_group).
///
/// See [`crate::client::fluent_builders::DeleteRunGroup`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteRunGroup {
    _private: (),
}
impl DeleteRunGroup {
    /// Creates a new builder-style object to manufacture [`DeleteRunGroupInput`](crate::input::DeleteRunGroupInput).
    pub fn builder() -> crate::input::delete_run_group_input::Builder {
        crate::input::delete_run_group_input::Builder::default()
    }
    /// Creates a new `DeleteRunGroup` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteRunGroup {
    type Output =
        std::result::Result<crate::output::DeleteRunGroupOutput, crate::error::DeleteRunGroupError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 202 {
            crate::operation_deser::parse_delete_run_group_error(response)
        } else {
            crate::operation_deser::parse_delete_run_group_response(response)
        }
    }
}

/// Operation shape for `DeleteSequenceStore`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_sequence_store`](crate::client::Client::delete_sequence_store).
///
/// See [`crate::client::fluent_builders::DeleteSequenceStore`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteSequenceStore {
    _private: (),
}
impl DeleteSequenceStore {
    /// Creates a new builder-style object to manufacture [`DeleteSequenceStoreInput`](crate::input::DeleteSequenceStoreInput).
    pub fn builder() -> crate::input::delete_sequence_store_input::Builder {
        crate::input::delete_sequence_store_input::Builder::default()
    }
    /// Creates a new `DeleteSequenceStore` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteSequenceStore {
    type Output = std::result::Result<
        crate::output::DeleteSequenceStoreOutput,
        crate::error::DeleteSequenceStoreError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_sequence_store_error(response)
        } else {
            crate::operation_deser::parse_delete_sequence_store_response(response)
        }
    }
}

/// Operation shape for `DeleteVariantStore`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_variant_store`](crate::client::Client::delete_variant_store).
///
/// See [`crate::client::fluent_builders::DeleteVariantStore`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteVariantStore {
    _private: (),
}
impl DeleteVariantStore {
    /// Creates a new builder-style object to manufacture [`DeleteVariantStoreInput`](crate::input::DeleteVariantStoreInput).
    pub fn builder() -> crate::input::delete_variant_store_input::Builder {
        crate::input::delete_variant_store_input::Builder::default()
    }
    /// Creates a new `DeleteVariantStore` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteVariantStore {
    type Output = std::result::Result<
        crate::output::DeleteVariantStoreOutput,
        crate::error::DeleteVariantStoreError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_variant_store_error(response)
        } else {
            crate::operation_deser::parse_delete_variant_store_response(response)
        }
    }
}

/// Operation shape for `DeleteWorkflow`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_workflow`](crate::client::Client::delete_workflow).
///
/// See [`crate::client::fluent_builders::DeleteWorkflow`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteWorkflow {
    _private: (),
}
impl DeleteWorkflow {
    /// Creates a new builder-style object to manufacture [`DeleteWorkflowInput`](crate::input::DeleteWorkflowInput).
    pub fn builder() -> crate::input::delete_workflow_input::Builder {
        crate::input::delete_workflow_input::Builder::default()
    }
    /// Creates a new `DeleteWorkflow` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteWorkflow {
    type Output =
        std::result::Result<crate::output::DeleteWorkflowOutput, crate::error::DeleteWorkflowError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 202 {
            crate::operation_deser::parse_delete_workflow_error(response)
        } else {
            crate::operation_deser::parse_delete_workflow_response(response)
        }
    }
}

/// Operation shape for `GetAnnotationImportJob`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_annotation_import_job`](crate::client::Client::get_annotation_import_job).
///
/// See [`crate::client::fluent_builders::GetAnnotationImportJob`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetAnnotationImportJob {
    _private: (),
}
impl GetAnnotationImportJob {
    /// Creates a new builder-style object to manufacture [`GetAnnotationImportJobInput`](crate::input::GetAnnotationImportJobInput).
    pub fn builder() -> crate::input::get_annotation_import_job_input::Builder {
        crate::input::get_annotation_import_job_input::Builder::default()
    }
    /// Creates a new `GetAnnotationImportJob` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetAnnotationImportJob {
    type Output = std::result::Result<
        crate::output::GetAnnotationImportJobOutput,
        crate::error::GetAnnotationImportJobError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_annotation_import_job_error(response)
        } else {
            crate::operation_deser::parse_get_annotation_import_job_response(response)
        }
    }
}

/// Operation shape for `GetAnnotationStore`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_annotation_store`](crate::client::Client::get_annotation_store).
///
/// See [`crate::client::fluent_builders::GetAnnotationStore`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetAnnotationStore {
    _private: (),
}
impl GetAnnotationStore {
    /// Creates a new builder-style object to manufacture [`GetAnnotationStoreInput`](crate::input::GetAnnotationStoreInput).
    pub fn builder() -> crate::input::get_annotation_store_input::Builder {
        crate::input::get_annotation_store_input::Builder::default()
    }
    /// Creates a new `GetAnnotationStore` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetAnnotationStore {
    type Output = std::result::Result<
        crate::output::GetAnnotationStoreOutput,
        crate::error::GetAnnotationStoreError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_annotation_store_error(response)
        } else {
            crate::operation_deser::parse_get_annotation_store_response(response)
        }
    }
}

/// Operation shape for `GetReadSet`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_read_set`](crate::client::Client::get_read_set).
///
/// See [`crate::client::fluent_builders::GetReadSet`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetReadSet {
    _private: (),
}
impl GetReadSet {
    /// Creates a new builder-style object to manufacture [`GetReadSetInput`](crate::input::GetReadSetInput).
    pub fn builder() -> crate::input::get_read_set_input::Builder {
        crate::input::get_read_set_input::Builder::default()
    }
    /// Creates a new `GetReadSet` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseHttpResponse for GetReadSet {
    type Output =
        std::result::Result<crate::output::GetReadSetOutput, crate::error::GetReadSetError>;
    fn parse_unloaded(
        &self,
        response: &mut aws_smithy_http::operation::Response,
    ) -> Option<Self::Output> {
        // This is an error, defer to the non-streaming parser
        if !response.http().status().is_success() && response.http().status().as_u16() != 200 {
            return None;
        }
        Some(crate::operation_deser::parse_get_read_set(response))
    }
    fn parse_loaded(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        // if streaming, we only hit this case if its an error
        crate::operation_deser::parse_get_read_set_error(response)
    }
}

/// Operation shape for `GetReadSetActivationJob`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_read_set_activation_job`](crate::client::Client::get_read_set_activation_job).
///
/// See [`crate::client::fluent_builders::GetReadSetActivationJob`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetReadSetActivationJob {
    _private: (),
}
impl GetReadSetActivationJob {
    /// Creates a new builder-style object to manufacture [`GetReadSetActivationJobInput`](crate::input::GetReadSetActivationJobInput).
    pub fn builder() -> crate::input::get_read_set_activation_job_input::Builder {
        crate::input::get_read_set_activation_job_input::Builder::default()
    }
    /// Creates a new `GetReadSetActivationJob` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetReadSetActivationJob {
    type Output = std::result::Result<
        crate::output::GetReadSetActivationJobOutput,
        crate::error::GetReadSetActivationJobError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_read_set_activation_job_error(response)
        } else {
            crate::operation_deser::parse_get_read_set_activation_job_response(response)
        }
    }
}

/// Operation shape for `GetReadSetExportJob`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_read_set_export_job`](crate::client::Client::get_read_set_export_job).
///
/// See [`crate::client::fluent_builders::GetReadSetExportJob`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetReadSetExportJob {
    _private: (),
}
impl GetReadSetExportJob {
    /// Creates a new builder-style object to manufacture [`GetReadSetExportJobInput`](crate::input::GetReadSetExportJobInput).
    pub fn builder() -> crate::input::get_read_set_export_job_input::Builder {
        crate::input::get_read_set_export_job_input::Builder::default()
    }
    /// Creates a new `GetReadSetExportJob` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetReadSetExportJob {
    type Output = std::result::Result<
        crate::output::GetReadSetExportJobOutput,
        crate::error::GetReadSetExportJobError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_read_set_export_job_error(response)
        } else {
            crate::operation_deser::parse_get_read_set_export_job_response(response)
        }
    }
}

/// Operation shape for `GetReadSetImportJob`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_read_set_import_job`](crate::client::Client::get_read_set_import_job).
///
/// See [`crate::client::fluent_builders::GetReadSetImportJob`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetReadSetImportJob {
    _private: (),
}
impl GetReadSetImportJob {
    /// Creates a new builder-style object to manufacture [`GetReadSetImportJobInput`](crate::input::GetReadSetImportJobInput).
    pub fn builder() -> crate::input::get_read_set_import_job_input::Builder {
        crate::input::get_read_set_import_job_input::Builder::default()
    }
    /// Creates a new `GetReadSetImportJob` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetReadSetImportJob {
    type Output = std::result::Result<
        crate::output::GetReadSetImportJobOutput,
        crate::error::GetReadSetImportJobError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_read_set_import_job_error(response)
        } else {
            crate::operation_deser::parse_get_read_set_import_job_response(response)
        }
    }
}

/// Operation shape for `GetReadSetMetadata`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_read_set_metadata`](crate::client::Client::get_read_set_metadata).
///
/// See [`crate::client::fluent_builders::GetReadSetMetadata`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetReadSetMetadata {
    _private: (),
}
impl GetReadSetMetadata {
    /// Creates a new builder-style object to manufacture [`GetReadSetMetadataInput`](crate::input::GetReadSetMetadataInput).
    pub fn builder() -> crate::input::get_read_set_metadata_input::Builder {
        crate::input::get_read_set_metadata_input::Builder::default()
    }
    /// Creates a new `GetReadSetMetadata` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetReadSetMetadata {
    type Output = std::result::Result<
        crate::output::GetReadSetMetadataOutput,
        crate::error::GetReadSetMetadataError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_read_set_metadata_error(response)
        } else {
            crate::operation_deser::parse_get_read_set_metadata_response(response)
        }
    }
}

/// Operation shape for `GetReference`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_reference`](crate::client::Client::get_reference).
///
/// See [`crate::client::fluent_builders::GetReference`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetReference {
    _private: (),
}
impl GetReference {
    /// Creates a new builder-style object to manufacture [`GetReferenceInput`](crate::input::GetReferenceInput).
    pub fn builder() -> crate::input::get_reference_input::Builder {
        crate::input::get_reference_input::Builder::default()
    }
    /// Creates a new `GetReference` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseHttpResponse for GetReference {
    type Output =
        std::result::Result<crate::output::GetReferenceOutput, crate::error::GetReferenceError>;
    fn parse_unloaded(
        &self,
        response: &mut aws_smithy_http::operation::Response,
    ) -> Option<Self::Output> {
        // This is an error, defer to the non-streaming parser
        if !response.http().status().is_success() && response.http().status().as_u16() != 200 {
            return None;
        }
        Some(crate::operation_deser::parse_get_reference(response))
    }
    fn parse_loaded(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        // if streaming, we only hit this case if its an error
        crate::operation_deser::parse_get_reference_error(response)
    }
}

/// Operation shape for `GetReferenceImportJob`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_reference_import_job`](crate::client::Client::get_reference_import_job).
///
/// See [`crate::client::fluent_builders::GetReferenceImportJob`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetReferenceImportJob {
    _private: (),
}
impl GetReferenceImportJob {
    /// Creates a new builder-style object to manufacture [`GetReferenceImportJobInput`](crate::input::GetReferenceImportJobInput).
    pub fn builder() -> crate::input::get_reference_import_job_input::Builder {
        crate::input::get_reference_import_job_input::Builder::default()
    }
    /// Creates a new `GetReferenceImportJob` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetReferenceImportJob {
    type Output = std::result::Result<
        crate::output::GetReferenceImportJobOutput,
        crate::error::GetReferenceImportJobError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_reference_import_job_error(response)
        } else {
            crate::operation_deser::parse_get_reference_import_job_response(response)
        }
    }
}

/// Operation shape for `GetReferenceMetadata`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_reference_metadata`](crate::client::Client::get_reference_metadata).
///
/// See [`crate::client::fluent_builders::GetReferenceMetadata`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetReferenceMetadata {
    _private: (),
}
impl GetReferenceMetadata {
    /// Creates a new builder-style object to manufacture [`GetReferenceMetadataInput`](crate::input::GetReferenceMetadataInput).
    pub fn builder() -> crate::input::get_reference_metadata_input::Builder {
        crate::input::get_reference_metadata_input::Builder::default()
    }
    /// Creates a new `GetReferenceMetadata` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetReferenceMetadata {
    type Output = std::result::Result<
        crate::output::GetReferenceMetadataOutput,
        crate::error::GetReferenceMetadataError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_reference_metadata_error(response)
        } else {
            crate::operation_deser::parse_get_reference_metadata_response(response)
        }
    }
}

/// Operation shape for `GetReferenceStore`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_reference_store`](crate::client::Client::get_reference_store).
///
/// See [`crate::client::fluent_builders::GetReferenceStore`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetReferenceStore {
    _private: (),
}
impl GetReferenceStore {
    /// Creates a new builder-style object to manufacture [`GetReferenceStoreInput`](crate::input::GetReferenceStoreInput).
    pub fn builder() -> crate::input::get_reference_store_input::Builder {
        crate::input::get_reference_store_input::Builder::default()
    }
    /// Creates a new `GetReferenceStore` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetReferenceStore {
    type Output = std::result::Result<
        crate::output::GetReferenceStoreOutput,
        crate::error::GetReferenceStoreError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_reference_store_error(response)
        } else {
            crate::operation_deser::parse_get_reference_store_response(response)
        }
    }
}

/// Operation shape for `GetRun`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_run`](crate::client::Client::get_run).
///
/// See [`crate::client::fluent_builders::GetRun`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetRun {
    _private: (),
}
impl GetRun {
    /// Creates a new builder-style object to manufacture [`GetRunInput`](crate::input::GetRunInput).
    pub fn builder() -> crate::input::get_run_input::Builder {
        crate::input::get_run_input::Builder::default()
    }
    /// Creates a new `GetRun` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetRun {
    type Output = std::result::Result<crate::output::GetRunOutput, crate::error::GetRunError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_run_error(response)
        } else {
            crate::operation_deser::parse_get_run_response(response)
        }
    }
}

/// Operation shape for `GetRunGroup`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_run_group`](crate::client::Client::get_run_group).
///
/// See [`crate::client::fluent_builders::GetRunGroup`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetRunGroup {
    _private: (),
}
impl GetRunGroup {
    /// Creates a new builder-style object to manufacture [`GetRunGroupInput`](crate::input::GetRunGroupInput).
    pub fn builder() -> crate::input::get_run_group_input::Builder {
        crate::input::get_run_group_input::Builder::default()
    }
    /// Creates a new `GetRunGroup` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetRunGroup {
    type Output =
        std::result::Result<crate::output::GetRunGroupOutput, crate::error::GetRunGroupError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_run_group_error(response)
        } else {
            crate::operation_deser::parse_get_run_group_response(response)
        }
    }
}

/// Operation shape for `GetRunTask`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_run_task`](crate::client::Client::get_run_task).
///
/// See [`crate::client::fluent_builders::GetRunTask`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetRunTask {
    _private: (),
}
impl GetRunTask {
    /// Creates a new builder-style object to manufacture [`GetRunTaskInput`](crate::input::GetRunTaskInput).
    pub fn builder() -> crate::input::get_run_task_input::Builder {
        crate::input::get_run_task_input::Builder::default()
    }
    /// Creates a new `GetRunTask` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetRunTask {
    type Output =
        std::result::Result<crate::output::GetRunTaskOutput, crate::error::GetRunTaskError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_run_task_error(response)
        } else {
            crate::operation_deser::parse_get_run_task_response(response)
        }
    }
}

/// Operation shape for `GetSequenceStore`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_sequence_store`](crate::client::Client::get_sequence_store).
///
/// See [`crate::client::fluent_builders::GetSequenceStore`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetSequenceStore {
    _private: (),
}
impl GetSequenceStore {
    /// Creates a new builder-style object to manufacture [`GetSequenceStoreInput`](crate::input::GetSequenceStoreInput).
    pub fn builder() -> crate::input::get_sequence_store_input::Builder {
        crate::input::get_sequence_store_input::Builder::default()
    }
    /// Creates a new `GetSequenceStore` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetSequenceStore {
    type Output = std::result::Result<
        crate::output::GetSequenceStoreOutput,
        crate::error::GetSequenceStoreError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_sequence_store_error(response)
        } else {
            crate::operation_deser::parse_get_sequence_store_response(response)
        }
    }
}

/// Operation shape for `GetVariantImportJob`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_variant_import_job`](crate::client::Client::get_variant_import_job).
///
/// See [`crate::client::fluent_builders::GetVariantImportJob`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetVariantImportJob {
    _private: (),
}
impl GetVariantImportJob {
    /// Creates a new builder-style object to manufacture [`GetVariantImportJobInput`](crate::input::GetVariantImportJobInput).
    pub fn builder() -> crate::input::get_variant_import_job_input::Builder {
        crate::input::get_variant_import_job_input::Builder::default()
    }
    /// Creates a new `GetVariantImportJob` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetVariantImportJob {
    type Output = std::result::Result<
        crate::output::GetVariantImportJobOutput,
        crate::error::GetVariantImportJobError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_variant_import_job_error(response)
        } else {
            crate::operation_deser::parse_get_variant_import_job_response(response)
        }
    }
}

/// Operation shape for `GetVariantStore`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_variant_store`](crate::client::Client::get_variant_store).
///
/// See [`crate::client::fluent_builders::GetVariantStore`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetVariantStore {
    _private: (),
}
impl GetVariantStore {
    /// Creates a new builder-style object to manufacture [`GetVariantStoreInput`](crate::input::GetVariantStoreInput).
    pub fn builder() -> crate::input::get_variant_store_input::Builder {
        crate::input::get_variant_store_input::Builder::default()
    }
    /// Creates a new `GetVariantStore` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetVariantStore {
    type Output = std::result::Result<
        crate::output::GetVariantStoreOutput,
        crate::error::GetVariantStoreError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_variant_store_error(response)
        } else {
            crate::operation_deser::parse_get_variant_store_response(response)
        }
    }
}

/// Operation shape for `GetWorkflow`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_workflow`](crate::client::Client::get_workflow).
///
/// See [`crate::client::fluent_builders::GetWorkflow`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetWorkflow {
    _private: (),
}
impl GetWorkflow {
    /// Creates a new builder-style object to manufacture [`GetWorkflowInput`](crate::input::GetWorkflowInput).
    pub fn builder() -> crate::input::get_workflow_input::Builder {
        crate::input::get_workflow_input::Builder::default()
    }
    /// Creates a new `GetWorkflow` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetWorkflow {
    type Output =
        std::result::Result<crate::output::GetWorkflowOutput, crate::error::GetWorkflowError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_workflow_error(response)
        } else {
            crate::operation_deser::parse_get_workflow_response(response)
        }
    }
}

/// Operation shape for `ListAnnotationImportJobs`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_annotation_import_jobs`](crate::client::Client::list_annotation_import_jobs).
///
/// See [`crate::client::fluent_builders::ListAnnotationImportJobs`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListAnnotationImportJobs {
    _private: (),
}
impl ListAnnotationImportJobs {
    /// Creates a new builder-style object to manufacture [`ListAnnotationImportJobsInput`](crate::input::ListAnnotationImportJobsInput).
    pub fn builder() -> crate::input::list_annotation_import_jobs_input::Builder {
        crate::input::list_annotation_import_jobs_input::Builder::default()
    }
    /// Creates a new `ListAnnotationImportJobs` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListAnnotationImportJobs {
    type Output = std::result::Result<
        crate::output::ListAnnotationImportJobsOutput,
        crate::error::ListAnnotationImportJobsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_annotation_import_jobs_error(response)
        } else {
            crate::operation_deser::parse_list_annotation_import_jobs_response(response)
        }
    }
}

/// Operation shape for `ListAnnotationStores`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_annotation_stores`](crate::client::Client::list_annotation_stores).
///
/// See [`crate::client::fluent_builders::ListAnnotationStores`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListAnnotationStores {
    _private: (),
}
impl ListAnnotationStores {
    /// Creates a new builder-style object to manufacture [`ListAnnotationStoresInput`](crate::input::ListAnnotationStoresInput).
    pub fn builder() -> crate::input::list_annotation_stores_input::Builder {
        crate::input::list_annotation_stores_input::Builder::default()
    }
    /// Creates a new `ListAnnotationStores` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListAnnotationStores {
    type Output = std::result::Result<
        crate::output::ListAnnotationStoresOutput,
        crate::error::ListAnnotationStoresError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_annotation_stores_error(response)
        } else {
            crate::operation_deser::parse_list_annotation_stores_response(response)
        }
    }
}

/// Operation shape for `ListReadSetActivationJobs`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_read_set_activation_jobs`](crate::client::Client::list_read_set_activation_jobs).
///
/// See [`crate::client::fluent_builders::ListReadSetActivationJobs`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListReadSetActivationJobs {
    _private: (),
}
impl ListReadSetActivationJobs {
    /// Creates a new builder-style object to manufacture [`ListReadSetActivationJobsInput`](crate::input::ListReadSetActivationJobsInput).
    pub fn builder() -> crate::input::list_read_set_activation_jobs_input::Builder {
        crate::input::list_read_set_activation_jobs_input::Builder::default()
    }
    /// Creates a new `ListReadSetActivationJobs` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListReadSetActivationJobs {
    type Output = std::result::Result<
        crate::output::ListReadSetActivationJobsOutput,
        crate::error::ListReadSetActivationJobsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_read_set_activation_jobs_error(response)
        } else {
            crate::operation_deser::parse_list_read_set_activation_jobs_response(response)
        }
    }
}

/// Operation shape for `ListReadSetExportJobs`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_read_set_export_jobs`](crate::client::Client::list_read_set_export_jobs).
///
/// See [`crate::client::fluent_builders::ListReadSetExportJobs`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListReadSetExportJobs {
    _private: (),
}
impl ListReadSetExportJobs {
    /// Creates a new builder-style object to manufacture [`ListReadSetExportJobsInput`](crate::input::ListReadSetExportJobsInput).
    pub fn builder() -> crate::input::list_read_set_export_jobs_input::Builder {
        crate::input::list_read_set_export_jobs_input::Builder::default()
    }
    /// Creates a new `ListReadSetExportJobs` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListReadSetExportJobs {
    type Output = std::result::Result<
        crate::output::ListReadSetExportJobsOutput,
        crate::error::ListReadSetExportJobsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_read_set_export_jobs_error(response)
        } else {
            crate::operation_deser::parse_list_read_set_export_jobs_response(response)
        }
    }
}

/// Operation shape for `ListReadSetImportJobs`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_read_set_import_jobs`](crate::client::Client::list_read_set_import_jobs).
///
/// See [`crate::client::fluent_builders::ListReadSetImportJobs`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListReadSetImportJobs {
    _private: (),
}
impl ListReadSetImportJobs {
    /// Creates a new builder-style object to manufacture [`ListReadSetImportJobsInput`](crate::input::ListReadSetImportJobsInput).
    pub fn builder() -> crate::input::list_read_set_import_jobs_input::Builder {
        crate::input::list_read_set_import_jobs_input::Builder::default()
    }
    /// Creates a new `ListReadSetImportJobs` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListReadSetImportJobs {
    type Output = std::result::Result<
        crate::output::ListReadSetImportJobsOutput,
        crate::error::ListReadSetImportJobsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_read_set_import_jobs_error(response)
        } else {
            crate::operation_deser::parse_list_read_set_import_jobs_response(response)
        }
    }
}

/// Operation shape for `ListReadSets`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_read_sets`](crate::client::Client::list_read_sets).
///
/// See [`crate::client::fluent_builders::ListReadSets`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListReadSets {
    _private: (),
}
impl ListReadSets {
    /// Creates a new builder-style object to manufacture [`ListReadSetsInput`](crate::input::ListReadSetsInput).
    pub fn builder() -> crate::input::list_read_sets_input::Builder {
        crate::input::list_read_sets_input::Builder::default()
    }
    /// Creates a new `ListReadSets` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListReadSets {
    type Output =
        std::result::Result<crate::output::ListReadSetsOutput, crate::error::ListReadSetsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_read_sets_error(response)
        } else {
            crate::operation_deser::parse_list_read_sets_response(response)
        }
    }
}

/// Operation shape for `ListReferenceImportJobs`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_reference_import_jobs`](crate::client::Client::list_reference_import_jobs).
///
/// See [`crate::client::fluent_builders::ListReferenceImportJobs`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListReferenceImportJobs {
    _private: (),
}
impl ListReferenceImportJobs {
    /// Creates a new builder-style object to manufacture [`ListReferenceImportJobsInput`](crate::input::ListReferenceImportJobsInput).
    pub fn builder() -> crate::input::list_reference_import_jobs_input::Builder {
        crate::input::list_reference_import_jobs_input::Builder::default()
    }
    /// Creates a new `ListReferenceImportJobs` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListReferenceImportJobs {
    type Output = std::result::Result<
        crate::output::ListReferenceImportJobsOutput,
        crate::error::ListReferenceImportJobsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_reference_import_jobs_error(response)
        } else {
            crate::operation_deser::parse_list_reference_import_jobs_response(response)
        }
    }
}

/// Operation shape for `ListReferences`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_references`](crate::client::Client::list_references).
///
/// See [`crate::client::fluent_builders::ListReferences`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListReferences {
    _private: (),
}
impl ListReferences {
    /// Creates a new builder-style object to manufacture [`ListReferencesInput`](crate::input::ListReferencesInput).
    pub fn builder() -> crate::input::list_references_input::Builder {
        crate::input::list_references_input::Builder::default()
    }
    /// Creates a new `ListReferences` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListReferences {
    type Output =
        std::result::Result<crate::output::ListReferencesOutput, crate::error::ListReferencesError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_references_error(response)
        } else {
            crate::operation_deser::parse_list_references_response(response)
        }
    }
}

/// Operation shape for `ListReferenceStores`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_reference_stores`](crate::client::Client::list_reference_stores).
///
/// See [`crate::client::fluent_builders::ListReferenceStores`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListReferenceStores {
    _private: (),
}
impl ListReferenceStores {
    /// Creates a new builder-style object to manufacture [`ListReferenceStoresInput`](crate::input::ListReferenceStoresInput).
    pub fn builder() -> crate::input::list_reference_stores_input::Builder {
        crate::input::list_reference_stores_input::Builder::default()
    }
    /// Creates a new `ListReferenceStores` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListReferenceStores {
    type Output = std::result::Result<
        crate::output::ListReferenceStoresOutput,
        crate::error::ListReferenceStoresError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_reference_stores_error(response)
        } else {
            crate::operation_deser::parse_list_reference_stores_response(response)
        }
    }
}

/// Operation shape for `ListRunGroups`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_run_groups`](crate::client::Client::list_run_groups).
///
/// See [`crate::client::fluent_builders::ListRunGroups`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListRunGroups {
    _private: (),
}
impl ListRunGroups {
    /// Creates a new builder-style object to manufacture [`ListRunGroupsInput`](crate::input::ListRunGroupsInput).
    pub fn builder() -> crate::input::list_run_groups_input::Builder {
        crate::input::list_run_groups_input::Builder::default()
    }
    /// Creates a new `ListRunGroups` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListRunGroups {
    type Output =
        std::result::Result<crate::output::ListRunGroupsOutput, crate::error::ListRunGroupsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_run_groups_error(response)
        } else {
            crate::operation_deser::parse_list_run_groups_response(response)
        }
    }
}

/// Operation shape for `ListRuns`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_runs`](crate::client::Client::list_runs).
///
/// See [`crate::client::fluent_builders::ListRuns`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListRuns {
    _private: (),
}
impl ListRuns {
    /// Creates a new builder-style object to manufacture [`ListRunsInput`](crate::input::ListRunsInput).
    pub fn builder() -> crate::input::list_runs_input::Builder {
        crate::input::list_runs_input::Builder::default()
    }
    /// Creates a new `ListRuns` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListRuns {
    type Output = std::result::Result<crate::output::ListRunsOutput, crate::error::ListRunsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_runs_error(response)
        } else {
            crate::operation_deser::parse_list_runs_response(response)
        }
    }
}

/// Operation shape for `ListRunTasks`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_run_tasks`](crate::client::Client::list_run_tasks).
///
/// See [`crate::client::fluent_builders::ListRunTasks`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListRunTasks {
    _private: (),
}
impl ListRunTasks {
    /// Creates a new builder-style object to manufacture [`ListRunTasksInput`](crate::input::ListRunTasksInput).
    pub fn builder() -> crate::input::list_run_tasks_input::Builder {
        crate::input::list_run_tasks_input::Builder::default()
    }
    /// Creates a new `ListRunTasks` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListRunTasks {
    type Output =
        std::result::Result<crate::output::ListRunTasksOutput, crate::error::ListRunTasksError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_run_tasks_error(response)
        } else {
            crate::operation_deser::parse_list_run_tasks_response(response)
        }
    }
}

/// Operation shape for `ListSequenceStores`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_sequence_stores`](crate::client::Client::list_sequence_stores).
///
/// See [`crate::client::fluent_builders::ListSequenceStores`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListSequenceStores {
    _private: (),
}
impl ListSequenceStores {
    /// Creates a new builder-style object to manufacture [`ListSequenceStoresInput`](crate::input::ListSequenceStoresInput).
    pub fn builder() -> crate::input::list_sequence_stores_input::Builder {
        crate::input::list_sequence_stores_input::Builder::default()
    }
    /// Creates a new `ListSequenceStores` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListSequenceStores {
    type Output = std::result::Result<
        crate::output::ListSequenceStoresOutput,
        crate::error::ListSequenceStoresError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_sequence_stores_error(response)
        } else {
            crate::operation_deser::parse_list_sequence_stores_response(response)
        }
    }
}

/// Operation shape for `ListTagsForResource`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_tags_for_resource`](crate::client::Client::list_tags_for_resource).
///
/// See [`crate::client::fluent_builders::ListTagsForResource`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListTagsForResource {
    _private: (),
}
impl ListTagsForResource {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceInput`](crate::input::ListTagsForResourceInput).
    pub fn builder() -> crate::input::list_tags_for_resource_input::Builder {
        crate::input::list_tags_for_resource_input::Builder::default()
    }
    /// Creates a new `ListTagsForResource` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListTagsForResource {
    type Output = std::result::Result<
        crate::output::ListTagsForResourceOutput,
        crate::error::ListTagsForResourceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_tags_for_resource_error(response)
        } else {
            crate::operation_deser::parse_list_tags_for_resource_response(response)
        }
    }
}

/// Operation shape for `ListVariantImportJobs`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_variant_import_jobs`](crate::client::Client::list_variant_import_jobs).
///
/// See [`crate::client::fluent_builders::ListVariantImportJobs`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListVariantImportJobs {
    _private: (),
}
impl ListVariantImportJobs {
    /// Creates a new builder-style object to manufacture [`ListVariantImportJobsInput`](crate::input::ListVariantImportJobsInput).
    pub fn builder() -> crate::input::list_variant_import_jobs_input::Builder {
        crate::input::list_variant_import_jobs_input::Builder::default()
    }
    /// Creates a new `ListVariantImportJobs` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListVariantImportJobs {
    type Output = std::result::Result<
        crate::output::ListVariantImportJobsOutput,
        crate::error::ListVariantImportJobsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_variant_import_jobs_error(response)
        } else {
            crate::operation_deser::parse_list_variant_import_jobs_response(response)
        }
    }
}

/// Operation shape for `ListVariantStores`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_variant_stores`](crate::client::Client::list_variant_stores).
///
/// See [`crate::client::fluent_builders::ListVariantStores`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListVariantStores {
    _private: (),
}
impl ListVariantStores {
    /// Creates a new builder-style object to manufacture [`ListVariantStoresInput`](crate::input::ListVariantStoresInput).
    pub fn builder() -> crate::input::list_variant_stores_input::Builder {
        crate::input::list_variant_stores_input::Builder::default()
    }
    /// Creates a new `ListVariantStores` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListVariantStores {
    type Output = std::result::Result<
        crate::output::ListVariantStoresOutput,
        crate::error::ListVariantStoresError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_variant_stores_error(response)
        } else {
            crate::operation_deser::parse_list_variant_stores_response(response)
        }
    }
}

/// Operation shape for `ListWorkflows`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_workflows`](crate::client::Client::list_workflows).
///
/// See [`crate::client::fluent_builders::ListWorkflows`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListWorkflows {
    _private: (),
}
impl ListWorkflows {
    /// Creates a new builder-style object to manufacture [`ListWorkflowsInput`](crate::input::ListWorkflowsInput).
    pub fn builder() -> crate::input::list_workflows_input::Builder {
        crate::input::list_workflows_input::Builder::default()
    }
    /// Creates a new `ListWorkflows` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListWorkflows {
    type Output =
        std::result::Result<crate::output::ListWorkflowsOutput, crate::error::ListWorkflowsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_workflows_error(response)
        } else {
            crate::operation_deser::parse_list_workflows_response(response)
        }
    }
}

/// Operation shape for `StartAnnotationImportJob`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`start_annotation_import_job`](crate::client::Client::start_annotation_import_job).
///
/// See [`crate::client::fluent_builders::StartAnnotationImportJob`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct StartAnnotationImportJob {
    _private: (),
}
impl StartAnnotationImportJob {
    /// Creates a new builder-style object to manufacture [`StartAnnotationImportJobInput`](crate::input::StartAnnotationImportJobInput).
    pub fn builder() -> crate::input::start_annotation_import_job_input::Builder {
        crate::input::start_annotation_import_job_input::Builder::default()
    }
    /// Creates a new `StartAnnotationImportJob` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for StartAnnotationImportJob {
    type Output = std::result::Result<
        crate::output::StartAnnotationImportJobOutput,
        crate::error::StartAnnotationImportJobError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_start_annotation_import_job_error(response)
        } else {
            crate::operation_deser::parse_start_annotation_import_job_response(response)
        }
    }
}

/// Operation shape for `StartReadSetActivationJob`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`start_read_set_activation_job`](crate::client::Client::start_read_set_activation_job).
///
/// See [`crate::client::fluent_builders::StartReadSetActivationJob`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct StartReadSetActivationJob {
    _private: (),
}
impl StartReadSetActivationJob {
    /// Creates a new builder-style object to manufacture [`StartReadSetActivationJobInput`](crate::input::StartReadSetActivationJobInput).
    pub fn builder() -> crate::input::start_read_set_activation_job_input::Builder {
        crate::input::start_read_set_activation_job_input::Builder::default()
    }
    /// Creates a new `StartReadSetActivationJob` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for StartReadSetActivationJob {
    type Output = std::result::Result<
        crate::output::StartReadSetActivationJobOutput,
        crate::error::StartReadSetActivationJobError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_start_read_set_activation_job_error(response)
        } else {
            crate::operation_deser::parse_start_read_set_activation_job_response(response)
        }
    }
}

/// Operation shape for `StartReadSetExportJob`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`start_read_set_export_job`](crate::client::Client::start_read_set_export_job).
///
/// See [`crate::client::fluent_builders::StartReadSetExportJob`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct StartReadSetExportJob {
    _private: (),
}
impl StartReadSetExportJob {
    /// Creates a new builder-style object to manufacture [`StartReadSetExportJobInput`](crate::input::StartReadSetExportJobInput).
    pub fn builder() -> crate::input::start_read_set_export_job_input::Builder {
        crate::input::start_read_set_export_job_input::Builder::default()
    }
    /// Creates a new `StartReadSetExportJob` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for StartReadSetExportJob {
    type Output = std::result::Result<
        crate::output::StartReadSetExportJobOutput,
        crate::error::StartReadSetExportJobError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_start_read_set_export_job_error(response)
        } else {
            crate::operation_deser::parse_start_read_set_export_job_response(response)
        }
    }
}

/// Operation shape for `StartReadSetImportJob`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`start_read_set_import_job`](crate::client::Client::start_read_set_import_job).
///
/// See [`crate::client::fluent_builders::StartReadSetImportJob`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct StartReadSetImportJob {
    _private: (),
}
impl StartReadSetImportJob {
    /// Creates a new builder-style object to manufacture [`StartReadSetImportJobInput`](crate::input::StartReadSetImportJobInput).
    pub fn builder() -> crate::input::start_read_set_import_job_input::Builder {
        crate::input::start_read_set_import_job_input::Builder::default()
    }
    /// Creates a new `StartReadSetImportJob` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for StartReadSetImportJob {
    type Output = std::result::Result<
        crate::output::StartReadSetImportJobOutput,
        crate::error::StartReadSetImportJobError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_start_read_set_import_job_error(response)
        } else {
            crate::operation_deser::parse_start_read_set_import_job_response(response)
        }
    }
}

/// Operation shape for `StartReferenceImportJob`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`start_reference_import_job`](crate::client::Client::start_reference_import_job).
///
/// See [`crate::client::fluent_builders::StartReferenceImportJob`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct StartReferenceImportJob {
    _private: (),
}
impl StartReferenceImportJob {
    /// Creates a new builder-style object to manufacture [`StartReferenceImportJobInput`](crate::input::StartReferenceImportJobInput).
    pub fn builder() -> crate::input::start_reference_import_job_input::Builder {
        crate::input::start_reference_import_job_input::Builder::default()
    }
    /// Creates a new `StartReferenceImportJob` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for StartReferenceImportJob {
    type Output = std::result::Result<
        crate::output::StartReferenceImportJobOutput,
        crate::error::StartReferenceImportJobError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_start_reference_import_job_error(response)
        } else {
            crate::operation_deser::parse_start_reference_import_job_response(response)
        }
    }
}

/// Operation shape for `StartRun`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`start_run`](crate::client::Client::start_run).
///
/// See [`crate::client::fluent_builders::StartRun`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct StartRun {
    _private: (),
}
impl StartRun {
    /// Creates a new builder-style object to manufacture [`StartRunInput`](crate::input::StartRunInput).
    pub fn builder() -> crate::input::start_run_input::Builder {
        crate::input::start_run_input::Builder::default()
    }
    /// Creates a new `StartRun` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for StartRun {
    type Output = std::result::Result<crate::output::StartRunOutput, crate::error::StartRunError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 201 {
            crate::operation_deser::parse_start_run_error(response)
        } else {
            crate::operation_deser::parse_start_run_response(response)
        }
    }
}

/// Operation shape for `StartVariantImportJob`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`start_variant_import_job`](crate::client::Client::start_variant_import_job).
///
/// See [`crate::client::fluent_builders::StartVariantImportJob`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct StartVariantImportJob {
    _private: (),
}
impl StartVariantImportJob {
    /// Creates a new builder-style object to manufacture [`StartVariantImportJobInput`](crate::input::StartVariantImportJobInput).
    pub fn builder() -> crate::input::start_variant_import_job_input::Builder {
        crate::input::start_variant_import_job_input::Builder::default()
    }
    /// Creates a new `StartVariantImportJob` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for StartVariantImportJob {
    type Output = std::result::Result<
        crate::output::StartVariantImportJobOutput,
        crate::error::StartVariantImportJobError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_start_variant_import_job_error(response)
        } else {
            crate::operation_deser::parse_start_variant_import_job_response(response)
        }
    }
}

/// Operation shape for `TagResource`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`tag_resource`](crate::client::Client::tag_resource).
///
/// See [`crate::client::fluent_builders::TagResource`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct TagResource {
    _private: (),
}
impl TagResource {
    /// Creates a new builder-style object to manufacture [`TagResourceInput`](crate::input::TagResourceInput).
    pub fn builder() -> crate::input::tag_resource_input::Builder {
        crate::input::tag_resource_input::Builder::default()
    }
    /// Creates a new `TagResource` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for TagResource {
    type Output =
        std::result::Result<crate::output::TagResourceOutput, crate::error::TagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_tag_resource_error(response)
        } else {
            crate::operation_deser::parse_tag_resource_response(response)
        }
    }
}

/// Operation shape for `UntagResource`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`untag_resource`](crate::client::Client::untag_resource).
///
/// See [`crate::client::fluent_builders::UntagResource`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UntagResource {
    _private: (),
}
impl UntagResource {
    /// Creates a new builder-style object to manufacture [`UntagResourceInput`](crate::input::UntagResourceInput).
    pub fn builder() -> crate::input::untag_resource_input::Builder {
        crate::input::untag_resource_input::Builder::default()
    }
    /// Creates a new `UntagResource` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UntagResource {
    type Output =
        std::result::Result<crate::output::UntagResourceOutput, crate::error::UntagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_untag_resource_error(response)
        } else {
            crate::operation_deser::parse_untag_resource_response(response)
        }
    }
}

/// Operation shape for `UpdateAnnotationStore`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_annotation_store`](crate::client::Client::update_annotation_store).
///
/// See [`crate::client::fluent_builders::UpdateAnnotationStore`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateAnnotationStore {
    _private: (),
}
impl UpdateAnnotationStore {
    /// Creates a new builder-style object to manufacture [`UpdateAnnotationStoreInput`](crate::input::UpdateAnnotationStoreInput).
    pub fn builder() -> crate::input::update_annotation_store_input::Builder {
        crate::input::update_annotation_store_input::Builder::default()
    }
    /// Creates a new `UpdateAnnotationStore` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateAnnotationStore {
    type Output = std::result::Result<
        crate::output::UpdateAnnotationStoreOutput,
        crate::error::UpdateAnnotationStoreError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_annotation_store_error(response)
        } else {
            crate::operation_deser::parse_update_annotation_store_response(response)
        }
    }
}

/// Operation shape for `UpdateRunGroup`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_run_group`](crate::client::Client::update_run_group).
///
/// See [`crate::client::fluent_builders::UpdateRunGroup`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateRunGroup {
    _private: (),
}
impl UpdateRunGroup {
    /// Creates a new builder-style object to manufacture [`UpdateRunGroupInput`](crate::input::UpdateRunGroupInput).
    pub fn builder() -> crate::input::update_run_group_input::Builder {
        crate::input::update_run_group_input::Builder::default()
    }
    /// Creates a new `UpdateRunGroup` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateRunGroup {
    type Output =
        std::result::Result<crate::output::UpdateRunGroupOutput, crate::error::UpdateRunGroupError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 202 {
            crate::operation_deser::parse_update_run_group_error(response)
        } else {
            crate::operation_deser::parse_update_run_group_response(response)
        }
    }
}

/// Operation shape for `UpdateVariantStore`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_variant_store`](crate::client::Client::update_variant_store).
///
/// See [`crate::client::fluent_builders::UpdateVariantStore`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateVariantStore {
    _private: (),
}
impl UpdateVariantStore {
    /// Creates a new builder-style object to manufacture [`UpdateVariantStoreInput`](crate::input::UpdateVariantStoreInput).
    pub fn builder() -> crate::input::update_variant_store_input::Builder {
        crate::input::update_variant_store_input::Builder::default()
    }
    /// Creates a new `UpdateVariantStore` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateVariantStore {
    type Output = std::result::Result<
        crate::output::UpdateVariantStoreOutput,
        crate::error::UpdateVariantStoreError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_variant_store_error(response)
        } else {
            crate::operation_deser::parse_update_variant_store_response(response)
        }
    }
}

/// Operation shape for `UpdateWorkflow`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_workflow`](crate::client::Client::update_workflow).
///
/// See [`crate::client::fluent_builders::UpdateWorkflow`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateWorkflow {
    _private: (),
}
impl UpdateWorkflow {
    /// Creates a new builder-style object to manufacture [`UpdateWorkflowInput`](crate::input::UpdateWorkflowInput).
    pub fn builder() -> crate::input::update_workflow_input::Builder {
        crate::input::update_workflow_input::Builder::default()
    }
    /// Creates a new `UpdateWorkflow` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateWorkflow {
    type Output =
        std::result::Result<crate::output::UpdateWorkflowOutput, crate::error::UpdateWorkflowError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 202 {
            crate::operation_deser::parse_update_workflow_error(response)
        } else {
            crate::operation_deser::parse_update_workflow_response(response)
        }
    }
}

/// Operation customization and supporting types
pub mod customize;
