// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_start_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::start_run::StartRunInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.log_level {
        object.key("logLevel").string(var_1.as_str());
    }
    if let Some(var_2) = &input.name {
        object.key("name").string(var_2.as_str());
    }
    if let Some(var_3) = &input.output_uri {
        object.key("outputUri").string(var_3.as_str());
    }
    if let Some(var_4) = &input.parameters {
        object.key("parameters").document(var_4);
    }
    if let Some(var_5) = &input.priority {
        object.key("priority").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5).into()),
        );
    }
    if let Some(var_6) = &input.request_id {
        object.key("requestId").string(var_6.as_str());
    }
    if let Some(var_7) = &input.role_arn {
        object.key("roleArn").string(var_7.as_str());
    }
    if let Some(var_8) = &input.run_group_id {
        object.key("runGroupId").string(var_8.as_str());
    }
    if let Some(var_9) = &input.run_id {
        object.key("runId").string(var_9.as_str());
    }
    if let Some(var_10) = &input.storage_capacity {
        object.key("storageCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_10).into()),
        );
    }
    if let Some(var_11) = &input.tags {
        #[allow(unused_mut)]
        let mut object_12 = object.key("tags").start_object();
        for (key_13, value_14) in var_11 {
            {
                object_12.key(key_13.as_str()).string(value_14.as_str());
            }
        }
        object_12.finish();
    }
    if let Some(var_15) = &input.workflow_id {
        object.key("workflowId").string(var_15.as_str());
    }
    if let Some(var_16) = &input.workflow_type {
        object.key("workflowType").string(var_16.as_str());
    }
    Ok(())
}
