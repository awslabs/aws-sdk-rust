// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn de_abort_multipart_read_set_upload_http_error(
    _response_status: u16,
    _response_headers: &::http::header::HeaderMap,
    _response_body: &[u8],
) -> std::result::Result<
    crate::operation::abort_multipart_read_set_upload::AbortMultipartReadSetUploadOutput,
    crate::operation::abort_multipart_read_set_upload::AbortMultipartReadSetUploadError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(_response_status, _response_headers, _response_body)
        .map_err(crate::operation::abort_multipart_read_set_upload::AbortMultipartReadSetUploadError::unhandled)?;
    generic_builder = ::aws_http::request_id::apply_request_id(generic_builder, _response_headers);
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::operation::abort_multipart_read_set_upload::AbortMultipartReadSetUploadError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "AccessDeniedException" => crate::operation::abort_multipart_read_set_upload::AbortMultipartReadSetUploadError::AccessDeniedException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::AccessDeniedExceptionBuilder::default();
                output = crate::protocol_serde::shape_access_denied_exception::de_access_denied_exception_json_err(_response_body, output)
                    .map_err(crate::operation::abort_multipart_read_set_upload::AbortMultipartReadSetUploadError::unhandled)?;
                let output = output.meta(generic);
                crate::serde_util::access_denied_exception_correct_errors(output)
                    .build()
                    .map_err(crate::operation::abort_multipart_read_set_upload::AbortMultipartReadSetUploadError::unhandled)?
            };
            tmp
        }),
        "InternalServerException" => crate::operation::abort_multipart_read_set_upload::AbortMultipartReadSetUploadError::InternalServerException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::InternalServerExceptionBuilder::default();
                output = crate::protocol_serde::shape_internal_server_exception::de_internal_server_exception_json_err(_response_body, output)
                    .map_err(crate::operation::abort_multipart_read_set_upload::AbortMultipartReadSetUploadError::unhandled)?;
                let output = output.meta(generic);
                crate::serde_util::internal_server_exception_correct_errors(output)
                    .build()
                    .map_err(crate::operation::abort_multipart_read_set_upload::AbortMultipartReadSetUploadError::unhandled)?
            };
            tmp
        }),
        "NotSupportedOperationException" => {
            crate::operation::abort_multipart_read_set_upload::AbortMultipartReadSetUploadError::NotSupportedOperationException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::NotSupportedOperationExceptionBuilder::default();
                    output = crate::protocol_serde::shape_not_supported_operation_exception::de_not_supported_operation_exception_json_err(
                        _response_body,
                        output,
                    )
                    .map_err(crate::operation::abort_multipart_read_set_upload::AbortMultipartReadSetUploadError::unhandled)?;
                    let output = output.meta(generic);
                    crate::serde_util::not_supported_operation_exception_correct_errors(output)
                        .build()
                        .map_err(crate::operation::abort_multipart_read_set_upload::AbortMultipartReadSetUploadError::unhandled)?
                };
                tmp
            })
        }
        "RequestTimeoutException" => crate::operation::abort_multipart_read_set_upload::AbortMultipartReadSetUploadError::RequestTimeoutException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::RequestTimeoutExceptionBuilder::default();
                output = crate::protocol_serde::shape_request_timeout_exception::de_request_timeout_exception_json_err(_response_body, output)
                    .map_err(crate::operation::abort_multipart_read_set_upload::AbortMultipartReadSetUploadError::unhandled)?;
                let output = output.meta(generic);
                crate::serde_util::request_timeout_exception_correct_errors(output)
                    .build()
                    .map_err(crate::operation::abort_multipart_read_set_upload::AbortMultipartReadSetUploadError::unhandled)?
            };
            tmp
        }),
        "ResourceNotFoundException" => {
            crate::operation::abort_multipart_read_set_upload::AbortMultipartReadSetUploadError::ResourceNotFoundException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::ResourceNotFoundExceptionBuilder::default();
                    output =
                        crate::protocol_serde::shape_resource_not_found_exception::de_resource_not_found_exception_json_err(_response_body, output)
                            .map_err(crate::operation::abort_multipart_read_set_upload::AbortMultipartReadSetUploadError::unhandled)?;
                    let output = output.meta(generic);
                    crate::serde_util::resource_not_found_exception_correct_errors(output)
                        .build()
                        .map_err(crate::operation::abort_multipart_read_set_upload::AbortMultipartReadSetUploadError::unhandled)?
                };
                tmp
            })
        }
        "ServiceQuotaExceededException" => {
            crate::operation::abort_multipart_read_set_upload::AbortMultipartReadSetUploadError::ServiceQuotaExceededException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::ServiceQuotaExceededExceptionBuilder::default();
                    output = crate::protocol_serde::shape_service_quota_exceeded_exception::de_service_quota_exceeded_exception_json_err(
                        _response_body,
                        output,
                    )
                    .map_err(crate::operation::abort_multipart_read_set_upload::AbortMultipartReadSetUploadError::unhandled)?;
                    let output = output.meta(generic);
                    crate::serde_util::service_quota_exceeded_exception_correct_errors(output)
                        .build()
                        .map_err(crate::operation::abort_multipart_read_set_upload::AbortMultipartReadSetUploadError::unhandled)?
                };
                tmp
            })
        }
        "ThrottlingException" => crate::operation::abort_multipart_read_set_upload::AbortMultipartReadSetUploadError::ThrottlingException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::ThrottlingExceptionBuilder::default();
                output = crate::protocol_serde::shape_throttling_exception::de_throttling_exception_json_err(_response_body, output)
                    .map_err(crate::operation::abort_multipart_read_set_upload::AbortMultipartReadSetUploadError::unhandled)?;
                let output = output.meta(generic);
                crate::serde_util::throttling_exception_correct_errors(output)
                    .build()
                    .map_err(crate::operation::abort_multipart_read_set_upload::AbortMultipartReadSetUploadError::unhandled)?
            };
            tmp
        }),
        "ValidationException" => crate::operation::abort_multipart_read_set_upload::AbortMultipartReadSetUploadError::ValidationException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::ValidationExceptionBuilder::default();
                output = crate::protocol_serde::shape_validation_exception::de_validation_exception_json_err(_response_body, output)
                    .map_err(crate::operation::abort_multipart_read_set_upload::AbortMultipartReadSetUploadError::unhandled)?;
                let output = output.meta(generic);
                crate::serde_util::validation_exception_correct_errors(output)
                    .build()
                    .map_err(crate::operation::abort_multipart_read_set_upload::AbortMultipartReadSetUploadError::unhandled)?
            };
            tmp
        }),
        _ => crate::operation::abort_multipart_read_set_upload::AbortMultipartReadSetUploadError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_abort_multipart_read_set_upload_http_response(
    _response_status: u16,
    _response_headers: &::http::header::HeaderMap,
    _response_body: &[u8],
) -> std::result::Result<
    crate::operation::abort_multipart_read_set_upload::AbortMultipartReadSetUploadOutput,
    crate::operation::abort_multipart_read_set_upload::AbortMultipartReadSetUploadError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::operation::abort_multipart_read_set_upload::builders::AbortMultipartReadSetUploadOutputBuilder::default();
        output._set_request_id(::aws_http::request_id::RequestId::request_id(_response_headers).map(str::to_string));
        output.build()
    })
}
