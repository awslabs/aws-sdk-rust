// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateAnnotationStoreOutput {
    /// <p>The store's ID.</p>
    pub id: ::std::string::String,
    /// <p>The store's genome reference.</p>
    pub reference: ::std::option::Option<crate::types::ReferenceItem>,
    /// <p>The store's status.</p>
    pub status: crate::types::StoreStatus,
    /// <p>The store's name.</p>
    pub name: ::std::string::String,
    /// <p>The store's description.</p>
    pub description: ::std::string::String,
    /// <p>When the store was created.</p>
    pub creation_time: ::aws_smithy_types::DateTime,
    /// <p>When the store was updated.</p>
    pub update_time: ::aws_smithy_types::DateTime,
    /// <p>Parsing options for the store.</p>
    pub store_options: ::std::option::Option<crate::types::StoreOptions>,
    /// <p>The annotation file format of the store.</p>
    pub store_format: ::std::option::Option<crate::types::StoreFormat>,
    _request_id: Option<String>,
}
impl UpdateAnnotationStoreOutput {
    /// <p>The store's ID.</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>The store's genome reference.</p>
    pub fn reference(&self) -> ::std::option::Option<&crate::types::ReferenceItem> {
        self.reference.as_ref()
    }
    /// <p>The store's status.</p>
    pub fn status(&self) -> &crate::types::StoreStatus {
        &self.status
    }
    /// <p>The store's name.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The store's description.</p>
    pub fn description(&self) -> &str {
        use std::ops::Deref;
        self.description.deref()
    }
    /// <p>When the store was created.</p>
    pub fn creation_time(&self) -> &::aws_smithy_types::DateTime {
        &self.creation_time
    }
    /// <p>When the store was updated.</p>
    pub fn update_time(&self) -> &::aws_smithy_types::DateTime {
        &self.update_time
    }
    /// <p>Parsing options for the store.</p>
    pub fn store_options(&self) -> ::std::option::Option<&crate::types::StoreOptions> {
        self.store_options.as_ref()
    }
    /// <p>The annotation file format of the store.</p>
    pub fn store_format(&self) -> ::std::option::Option<&crate::types::StoreFormat> {
        self.store_format.as_ref()
    }
}
impl ::aws_http::request_id::RequestId for UpdateAnnotationStoreOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateAnnotationStoreOutput {
    /// Creates a new builder-style object to manufacture [`UpdateAnnotationStoreOutput`](crate::operation::update_annotation_store::UpdateAnnotationStoreOutput).
    pub fn builder() -> crate::operation::update_annotation_store::builders::UpdateAnnotationStoreOutputBuilder {
        crate::operation::update_annotation_store::builders::UpdateAnnotationStoreOutputBuilder::default()
    }
}

/// A builder for [`UpdateAnnotationStoreOutput`](crate::operation::update_annotation_store::UpdateAnnotationStoreOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateAnnotationStoreOutputBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) reference: ::std::option::Option<crate::types::ReferenceItem>,
    pub(crate) status: ::std::option::Option<crate::types::StoreStatus>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) update_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) store_options: ::std::option::Option<crate::types::StoreOptions>,
    pub(crate) store_format: ::std::option::Option<crate::types::StoreFormat>,
    _request_id: Option<String>,
}
impl UpdateAnnotationStoreOutputBuilder {
    /// <p>The store's ID.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The store's ID.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The store's ID.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The store's genome reference.</p>
    /// This field is required.
    pub fn reference(mut self, input: crate::types::ReferenceItem) -> Self {
        self.reference = ::std::option::Option::Some(input);
        self
    }
    /// <p>The store's genome reference.</p>
    pub fn set_reference(mut self, input: ::std::option::Option<crate::types::ReferenceItem>) -> Self {
        self.reference = input;
        self
    }
    /// <p>The store's genome reference.</p>
    pub fn get_reference(&self) -> &::std::option::Option<crate::types::ReferenceItem> {
        &self.reference
    }
    /// <p>The store's status.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::StoreStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The store's status.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::StoreStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The store's status.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::StoreStatus> {
        &self.status
    }
    /// <p>The store's name.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The store's name.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The store's name.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The store's description.</p>
    /// This field is required.
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The store's description.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The store's description.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>When the store was created.</p>
    /// This field is required.
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>When the store was created.</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>When the store was created.</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// <p>When the store was updated.</p>
    /// This field is required.
    pub fn update_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.update_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>When the store was updated.</p>
    pub fn set_update_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.update_time = input;
        self
    }
    /// <p>When the store was updated.</p>
    pub fn get_update_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.update_time
    }
    /// <p>Parsing options for the store.</p>
    pub fn store_options(mut self, input: crate::types::StoreOptions) -> Self {
        self.store_options = ::std::option::Option::Some(input);
        self
    }
    /// <p>Parsing options for the store.</p>
    pub fn set_store_options(mut self, input: ::std::option::Option<crate::types::StoreOptions>) -> Self {
        self.store_options = input;
        self
    }
    /// <p>Parsing options for the store.</p>
    pub fn get_store_options(&self) -> &::std::option::Option<crate::types::StoreOptions> {
        &self.store_options
    }
    /// <p>The annotation file format of the store.</p>
    pub fn store_format(mut self, input: crate::types::StoreFormat) -> Self {
        self.store_format = ::std::option::Option::Some(input);
        self
    }
    /// <p>The annotation file format of the store.</p>
    pub fn set_store_format(mut self, input: ::std::option::Option<crate::types::StoreFormat>) -> Self {
        self.store_format = input;
        self
    }
    /// <p>The annotation file format of the store.</p>
    pub fn get_store_format(&self) -> &::std::option::Option<crate::types::StoreFormat> {
        &self.store_format
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`UpdateAnnotationStoreOutput`](crate::operation::update_annotation_store::UpdateAnnotationStoreOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`id`](crate::operation::update_annotation_store::builders::UpdateAnnotationStoreOutputBuilder::id)
    /// - [`status`](crate::operation::update_annotation_store::builders::UpdateAnnotationStoreOutputBuilder::status)
    /// - [`name`](crate::operation::update_annotation_store::builders::UpdateAnnotationStoreOutputBuilder::name)
    /// - [`description`](crate::operation::update_annotation_store::builders::UpdateAnnotationStoreOutputBuilder::description)
    /// - [`creation_time`](crate::operation::update_annotation_store::builders::UpdateAnnotationStoreOutputBuilder::creation_time)
    /// - [`update_time`](crate::operation::update_annotation_store::builders::UpdateAnnotationStoreOutputBuilder::update_time)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_annotation_store::UpdateAnnotationStoreOutput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::update_annotation_store::UpdateAnnotationStoreOutput {
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building UpdateAnnotationStoreOutput",
                )
            })?,
            reference: self.reference,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building UpdateAnnotationStoreOutput",
                )
            })?,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building UpdateAnnotationStoreOutput",
                )
            })?,
            description: self.description.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "description",
                    "description was not specified but it is required when building UpdateAnnotationStoreOutput",
                )
            })?,
            creation_time: self.creation_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "creation_time",
                    "creation_time was not specified but it is required when building UpdateAnnotationStoreOutput",
                )
            })?,
            update_time: self.update_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "update_time",
                    "update_time was not specified but it is required when building UpdateAnnotationStoreOutput",
                )
            })?,
            store_options: self.store_options,
            store_format: self.store_format,
            _request_id: self._request_id,
        })
    }
}
