// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateRunGroupInput {
    /// <p>A name for the group.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of CPUs to use in the group.</p>
    pub max_cpus: ::std::option::Option<i32>,
    /// <p>The maximum number of concurrent runs for the group.</p>
    pub max_runs: ::std::option::Option<i32>,
    /// <p>A maximum run time for the group in minutes.</p>
    pub max_duration: ::std::option::Option<i32>,
    /// <p>Tags for the group.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>To ensure that requests don't run multiple times, specify a unique ID for each request.</p>
    pub request_id: ::std::option::Option<::std::string::String>,
    /// <p> The maximum GPUs that can be used by a run group. </p>
    pub max_gpus: ::std::option::Option<i32>,
}
impl CreateRunGroupInput {
    /// <p>A name for the group.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The maximum number of CPUs to use in the group.</p>
    pub fn max_cpus(&self) -> ::std::option::Option<i32> {
        self.max_cpus
    }
    /// <p>The maximum number of concurrent runs for the group.</p>
    pub fn max_runs(&self) -> ::std::option::Option<i32> {
        self.max_runs
    }
    /// <p>A maximum run time for the group in minutes.</p>
    pub fn max_duration(&self) -> ::std::option::Option<i32> {
        self.max_duration
    }
    /// <p>Tags for the group.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
    /// <p>To ensure that requests don't run multiple times, specify a unique ID for each request.</p>
    pub fn request_id(&self) -> ::std::option::Option<&str> {
        self.request_id.as_deref()
    }
    /// <p> The maximum GPUs that can be used by a run group. </p>
    pub fn max_gpus(&self) -> ::std::option::Option<i32> {
        self.max_gpus
    }
}
impl CreateRunGroupInput {
    /// Creates a new builder-style object to manufacture [`CreateRunGroupInput`](crate::operation::create_run_group::CreateRunGroupInput).
    pub fn builder() -> crate::operation::create_run_group::builders::CreateRunGroupInputBuilder {
        crate::operation::create_run_group::builders::CreateRunGroupInputBuilder::default()
    }
}

/// A builder for [`CreateRunGroupInput`](crate::operation::create_run_group::CreateRunGroupInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateRunGroupInputBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) max_cpus: ::std::option::Option<i32>,
    pub(crate) max_runs: ::std::option::Option<i32>,
    pub(crate) max_duration: ::std::option::Option<i32>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) request_id: ::std::option::Option<::std::string::String>,
    pub(crate) max_gpus: ::std::option::Option<i32>,
}
impl CreateRunGroupInputBuilder {
    /// <p>A name for the group.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A name for the group.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>A name for the group.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The maximum number of CPUs to use in the group.</p>
    pub fn max_cpus(mut self, input: i32) -> Self {
        self.max_cpus = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of CPUs to use in the group.</p>
    pub fn set_max_cpus(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_cpus = input;
        self
    }
    /// <p>The maximum number of CPUs to use in the group.</p>
    pub fn get_max_cpus(&self) -> &::std::option::Option<i32> {
        &self.max_cpus
    }
    /// <p>The maximum number of concurrent runs for the group.</p>
    pub fn max_runs(mut self, input: i32) -> Self {
        self.max_runs = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of concurrent runs for the group.</p>
    pub fn set_max_runs(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_runs = input;
        self
    }
    /// <p>The maximum number of concurrent runs for the group.</p>
    pub fn get_max_runs(&self) -> &::std::option::Option<i32> {
        &self.max_runs
    }
    /// <p>A maximum run time for the group in minutes.</p>
    pub fn max_duration(mut self, input: i32) -> Self {
        self.max_duration = ::std::option::Option::Some(input);
        self
    }
    /// <p>A maximum run time for the group in minutes.</p>
    pub fn set_max_duration(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_duration = input;
        self
    }
    /// <p>A maximum run time for the group in minutes.</p>
    pub fn get_max_duration(&self) -> &::std::option::Option<i32> {
        &self.max_duration
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Tags for the group.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Tags for the group.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>Tags for the group.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// <p>To ensure that requests don't run multiple times, specify a unique ID for each request.</p>
    /// This field is required.
    pub fn request_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.request_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>To ensure that requests don't run multiple times, specify a unique ID for each request.</p>
    pub fn set_request_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.request_id = input;
        self
    }
    /// <p>To ensure that requests don't run multiple times, specify a unique ID for each request.</p>
    pub fn get_request_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.request_id
    }
    /// <p> The maximum GPUs that can be used by a run group. </p>
    pub fn max_gpus(mut self, input: i32) -> Self {
        self.max_gpus = ::std::option::Option::Some(input);
        self
    }
    /// <p> The maximum GPUs that can be used by a run group. </p>
    pub fn set_max_gpus(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_gpus = input;
        self
    }
    /// <p> The maximum GPUs that can be used by a run group. </p>
    pub fn get_max_gpus(&self) -> &::std::option::Option<i32> {
        &self.max_gpus
    }
    /// Consumes the builder and constructs a [`CreateRunGroupInput`](crate::operation::create_run_group::CreateRunGroupInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_run_group::CreateRunGroupInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::create_run_group::CreateRunGroupInput {
            name: self.name,
            max_cpus: self.max_cpus,
            max_runs: self.max_runs,
            max_duration: self.max_duration,
            tags: self.tags,
            request_id: self.request_id,
            max_gpus: self.max_gpus,
        })
    }
}
