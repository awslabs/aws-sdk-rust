// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetReadSetExportJobOutput {
    /// <p>The job's ID.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The job's sequence store ID.</p>
    #[doc(hidden)]
    pub sequence_store_id: std::option::Option<std::string::String>,
    /// <p>The job's destination in Amazon S3.</p>
    #[doc(hidden)]
    pub destination: std::option::Option<std::string::String>,
    /// <p>The job's status.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::ReadSetExportJobStatus>,
    /// <p>The job's status message.</p>
    #[doc(hidden)]
    pub status_message: std::option::Option<std::string::String>,
    /// <p>When the job was created.</p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>When the job completed.</p>
    #[doc(hidden)]
    pub completion_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The job's read sets.</p>
    #[doc(hidden)]
    pub read_sets: std::option::Option<std::vec::Vec<crate::types::ExportReadSetDetail>>,
    _request_id: Option<String>,
}
impl GetReadSetExportJobOutput {
    /// <p>The job's ID.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The job's sequence store ID.</p>
    pub fn sequence_store_id(&self) -> std::option::Option<&str> {
        self.sequence_store_id.as_deref()
    }
    /// <p>The job's destination in Amazon S3.</p>
    pub fn destination(&self) -> std::option::Option<&str> {
        self.destination.as_deref()
    }
    /// <p>The job's status.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::ReadSetExportJobStatus> {
        self.status.as_ref()
    }
    /// <p>The job's status message.</p>
    pub fn status_message(&self) -> std::option::Option<&str> {
        self.status_message.as_deref()
    }
    /// <p>When the job was created.</p>
    pub fn creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>When the job completed.</p>
    pub fn completion_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.completion_time.as_ref()
    }
    /// <p>The job's read sets.</p>
    pub fn read_sets(&self) -> std::option::Option<&[crate::types::ExportReadSetDetail]> {
        self.read_sets.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetReadSetExportJobOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetReadSetExportJobOutput {
    /// Creates a new builder-style object to manufacture [`GetReadSetExportJobOutput`](crate::operation::get_read_set_export_job::GetReadSetExportJobOutput).
    pub fn builder(
    ) -> crate::operation::get_read_set_export_job::builders::GetReadSetExportJobOutputBuilder {
        crate::operation::get_read_set_export_job::builders::GetReadSetExportJobOutputBuilder::default()
    }
}

/// A builder for [`GetReadSetExportJobOutput`](crate::operation::get_read_set_export_job::GetReadSetExportJobOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetReadSetExportJobOutputBuilder {
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) sequence_store_id: std::option::Option<std::string::String>,
    pub(crate) destination: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<crate::types::ReadSetExportJobStatus>,
    pub(crate) status_message: std::option::Option<std::string::String>,
    pub(crate) creation_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) completion_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) read_sets: std::option::Option<std::vec::Vec<crate::types::ExportReadSetDetail>>,
    _request_id: Option<String>,
}
impl GetReadSetExportJobOutputBuilder {
    /// <p>The job's ID.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>The job's ID.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The job's sequence store ID.</p>
    pub fn sequence_store_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.sequence_store_id = Some(input.into());
        self
    }
    /// <p>The job's sequence store ID.</p>
    pub fn set_sequence_store_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.sequence_store_id = input;
        self
    }
    /// <p>The job's destination in Amazon S3.</p>
    pub fn destination(mut self, input: impl Into<std::string::String>) -> Self {
        self.destination = Some(input.into());
        self
    }
    /// <p>The job's destination in Amazon S3.</p>
    pub fn set_destination(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.destination = input;
        self
    }
    /// <p>The job's status.</p>
    pub fn status(mut self, input: crate::types::ReadSetExportJobStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The job's status.</p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::ReadSetExportJobStatus>,
    ) -> Self {
        self.status = input;
        self
    }
    /// <p>The job's status message.</p>
    pub fn status_message(mut self, input: impl Into<std::string::String>) -> Self {
        self.status_message = Some(input.into());
        self
    }
    /// <p>The job's status message.</p>
    pub fn set_status_message(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.status_message = input;
        self
    }
    /// <p>When the job was created.</p>
    pub fn creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.creation_time = Some(input);
        self
    }
    /// <p>When the job was created.</p>
    pub fn set_creation_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>When the job completed.</p>
    pub fn completion_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.completion_time = Some(input);
        self
    }
    /// <p>When the job completed.</p>
    pub fn set_completion_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.completion_time = input;
        self
    }
    /// Appends an item to `read_sets`.
    ///
    /// To override the contents of this collection use [`set_read_sets`](Self::set_read_sets).
    ///
    /// <p>The job's read sets.</p>
    pub fn read_sets(mut self, input: crate::types::ExportReadSetDetail) -> Self {
        let mut v = self.read_sets.unwrap_or_default();
        v.push(input);
        self.read_sets = Some(v);
        self
    }
    /// <p>The job's read sets.</p>
    pub fn set_read_sets(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ExportReadSetDetail>>,
    ) -> Self {
        self.read_sets = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetReadSetExportJobOutput`](crate::operation::get_read_set_export_job::GetReadSetExportJobOutput).
    pub fn build(self) -> crate::operation::get_read_set_export_job::GetReadSetExportJobOutput {
        crate::operation::get_read_set_export_job::GetReadSetExportJobOutput {
            id: self.id,
            sequence_store_id: self.sequence_store_id,
            destination: self.destination,
            status: self.status,
            status_message: self.status_message,
            creation_time: self.creation_time,
            completion_time: self.completion_time,
            read_sets: self.read_sets,
            _request_id: self._request_id,
        }
    }
}
