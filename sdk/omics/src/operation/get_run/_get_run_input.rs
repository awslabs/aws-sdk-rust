// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetRunInput {
    /// <p>The run's ID.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The run's export format.</p>
    #[doc(hidden)]
    pub export: std::option::Option<std::vec::Vec<crate::types::RunExport>>,
}
impl GetRunInput {
    /// <p>The run's ID.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The run's export format.</p>
    pub fn export(&self) -> std::option::Option<&[crate::types::RunExport]> {
        self.export.as_deref()
    }
}
impl GetRunInput {
    /// Creates a new builder-style object to manufacture [`GetRunInput`](crate::operation::get_run::GetRunInput).
    pub fn builder() -> crate::operation::get_run::builders::GetRunInputBuilder {
        crate::operation::get_run::builders::GetRunInputBuilder::default()
    }
}

/// A builder for [`GetRunInput`](crate::operation::get_run::GetRunInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetRunInputBuilder {
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) export: std::option::Option<std::vec::Vec<crate::types::RunExport>>,
}
impl GetRunInputBuilder {
    /// <p>The run's ID.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>The run's ID.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// Appends an item to `export`.
    ///
    /// To override the contents of this collection use [`set_export`](Self::set_export).
    ///
    /// <p>The run's export format.</p>
    pub fn export(mut self, input: crate::types::RunExport) -> Self {
        let mut v = self.export.unwrap_or_default();
        v.push(input);
        self.export = Some(v);
        self
    }
    /// <p>The run's export format.</p>
    pub fn set_export(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::RunExport>>,
    ) -> Self {
        self.export = input;
        self
    }
    /// Consumes the builder and constructs a [`GetRunInput`](crate::operation::get_run::GetRunInput).
    pub fn build(
        self,
    ) -> Result<crate::operation::get_run::GetRunInput, aws_smithy_http::operation::error::BuildError>
    {
        Ok(crate::operation::get_run::GetRunInput {
            id: self.id,
            export: self.export,
        })
    }
}
