// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListReadSetsInput {
    /// <p>The jobs' sequence store ID.</p>
    #[doc(hidden)]
    pub sequence_store_id: std::option::Option<std::string::String>,
    /// <p>The maximum number of read sets to return in one page of results.</p>
    #[doc(hidden)]
    pub max_results: std::option::Option<i32>,
    /// <p>Specify the pagination token from a previous request to retrieve the next page of results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>A filter to apply to the list.</p>
    #[doc(hidden)]
    pub filter: std::option::Option<crate::types::ReadSetFilter>,
}
impl ListReadSetsInput {
    /// <p>The jobs' sequence store ID.</p>
    pub fn sequence_store_id(&self) -> std::option::Option<&str> {
        self.sequence_store_id.as_deref()
    }
    /// <p>The maximum number of read sets to return in one page of results.</p>
    pub fn max_results(&self) -> std::option::Option<i32> {
        self.max_results
    }
    /// <p>Specify the pagination token from a previous request to retrieve the next page of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>A filter to apply to the list.</p>
    pub fn filter(&self) -> std::option::Option<&crate::types::ReadSetFilter> {
        self.filter.as_ref()
    }
}
impl ListReadSetsInput {
    /// Creates a new builder-style object to manufacture [`ListReadSetsInput`](crate::operation::list_read_sets::ListReadSetsInput).
    pub fn builder() -> crate::operation::list_read_sets::builders::ListReadSetsInputBuilder {
        crate::operation::list_read_sets::builders::ListReadSetsInputBuilder::default()
    }
}

/// A builder for [`ListReadSetsInput`](crate::operation::list_read_sets::ListReadSetsInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListReadSetsInputBuilder {
    pub(crate) sequence_store_id: std::option::Option<std::string::String>,
    pub(crate) max_results: std::option::Option<i32>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) filter: std::option::Option<crate::types::ReadSetFilter>,
}
impl ListReadSetsInputBuilder {
    /// <p>The jobs' sequence store ID.</p>
    pub fn sequence_store_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.sequence_store_id = Some(input.into());
        self
    }
    /// <p>The jobs' sequence store ID.</p>
    pub fn set_sequence_store_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.sequence_store_id = input;
        self
    }
    /// <p>The maximum number of read sets to return in one page of results.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// <p>The maximum number of read sets to return in one page of results.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>Specify the pagination token from a previous request to retrieve the next page of results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>Specify the pagination token from a previous request to retrieve the next page of results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>A filter to apply to the list.</p>
    pub fn filter(mut self, input: crate::types::ReadSetFilter) -> Self {
        self.filter = Some(input);
        self
    }
    /// <p>A filter to apply to the list.</p>
    pub fn set_filter(mut self, input: std::option::Option<crate::types::ReadSetFilter>) -> Self {
        self.filter = input;
        self
    }
    /// Consumes the builder and constructs a [`ListReadSetsInput`](crate::operation::list_read_sets::ListReadSetsInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::list_read_sets::ListReadSetsInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::list_read_sets::ListReadSetsInput {
            sequence_store_id: self.sequence_store_id,
            max_results: self.max_results,
            next_token: self.next_token,
            filter: self.filter,
        })
    }
}
