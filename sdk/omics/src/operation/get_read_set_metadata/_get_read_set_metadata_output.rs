// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetReadSetMetadataOutput {
    /// <p>The read set's ID.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The read set's ARN.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The read set's sequence store ID.</p>
    #[doc(hidden)]
    pub sequence_store_id: std::option::Option<std::string::String>,
    /// <p>The read set's subject ID.</p>
    #[doc(hidden)]
    pub subject_id: std::option::Option<std::string::String>,
    /// <p>The read set's sample ID.</p>
    #[doc(hidden)]
    pub sample_id: std::option::Option<std::string::String>,
    /// <p>The read set's status.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::ReadSetStatus>,
    /// <p>The read set's name.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The read set's description.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The read set's file type.</p>
    #[doc(hidden)]
    pub file_type: std::option::Option<crate::types::FileType>,
    /// <p>When the read set was created.</p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The read set's sequence information.</p>
    #[doc(hidden)]
    pub sequence_information: std::option::Option<crate::types::SequenceInformation>,
    /// <p>The read set's genome reference ARN.</p>
    #[doc(hidden)]
    pub reference_arn: std::option::Option<std::string::String>,
    /// <p>The read set's files.</p>
    #[doc(hidden)]
    pub files: std::option::Option<crate::types::ReadSetFiles>,
    _request_id: Option<String>,
}
impl GetReadSetMetadataOutput {
    /// <p>The read set's ID.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The read set's ARN.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The read set's sequence store ID.</p>
    pub fn sequence_store_id(&self) -> std::option::Option<&str> {
        self.sequence_store_id.as_deref()
    }
    /// <p>The read set's subject ID.</p>
    pub fn subject_id(&self) -> std::option::Option<&str> {
        self.subject_id.as_deref()
    }
    /// <p>The read set's sample ID.</p>
    pub fn sample_id(&self) -> std::option::Option<&str> {
        self.sample_id.as_deref()
    }
    /// <p>The read set's status.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::ReadSetStatus> {
        self.status.as_ref()
    }
    /// <p>The read set's name.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The read set's description.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The read set's file type.</p>
    pub fn file_type(&self) -> std::option::Option<&crate::types::FileType> {
        self.file_type.as_ref()
    }
    /// <p>When the read set was created.</p>
    pub fn creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The read set's sequence information.</p>
    pub fn sequence_information(&self) -> std::option::Option<&crate::types::SequenceInformation> {
        self.sequence_information.as_ref()
    }
    /// <p>The read set's genome reference ARN.</p>
    pub fn reference_arn(&self) -> std::option::Option<&str> {
        self.reference_arn.as_deref()
    }
    /// <p>The read set's files.</p>
    pub fn files(&self) -> std::option::Option<&crate::types::ReadSetFiles> {
        self.files.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetReadSetMetadataOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetReadSetMetadataOutput {
    /// Creates a new builder-style object to manufacture [`GetReadSetMetadataOutput`](crate::operation::get_read_set_metadata::GetReadSetMetadataOutput).
    pub fn builder(
    ) -> crate::operation::get_read_set_metadata::builders::GetReadSetMetadataOutputBuilder {
        crate::operation::get_read_set_metadata::builders::GetReadSetMetadataOutputBuilder::default(
        )
    }
}

/// A builder for [`GetReadSetMetadataOutput`](crate::operation::get_read_set_metadata::GetReadSetMetadataOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetReadSetMetadataOutputBuilder {
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) sequence_store_id: std::option::Option<std::string::String>,
    pub(crate) subject_id: std::option::Option<std::string::String>,
    pub(crate) sample_id: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<crate::types::ReadSetStatus>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) file_type: std::option::Option<crate::types::FileType>,
    pub(crate) creation_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) sequence_information: std::option::Option<crate::types::SequenceInformation>,
    pub(crate) reference_arn: std::option::Option<std::string::String>,
    pub(crate) files: std::option::Option<crate::types::ReadSetFiles>,
    _request_id: Option<String>,
}
impl GetReadSetMetadataOutputBuilder {
    /// <p>The read set's ID.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>The read set's ID.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The read set's ARN.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The read set's ARN.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The read set's sequence store ID.</p>
    pub fn sequence_store_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.sequence_store_id = Some(input.into());
        self
    }
    /// <p>The read set's sequence store ID.</p>
    pub fn set_sequence_store_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.sequence_store_id = input;
        self
    }
    /// <p>The read set's subject ID.</p>
    pub fn subject_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.subject_id = Some(input.into());
        self
    }
    /// <p>The read set's subject ID.</p>
    pub fn set_subject_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.subject_id = input;
        self
    }
    /// <p>The read set's sample ID.</p>
    pub fn sample_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.sample_id = Some(input.into());
        self
    }
    /// <p>The read set's sample ID.</p>
    pub fn set_sample_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.sample_id = input;
        self
    }
    /// <p>The read set's status.</p>
    pub fn status(mut self, input: crate::types::ReadSetStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The read set's status.</p>
    pub fn set_status(mut self, input: std::option::Option<crate::types::ReadSetStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The read set's name.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The read set's name.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The read set's description.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The read set's description.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The read set's file type.</p>
    pub fn file_type(mut self, input: crate::types::FileType) -> Self {
        self.file_type = Some(input);
        self
    }
    /// <p>The read set's file type.</p>
    pub fn set_file_type(mut self, input: std::option::Option<crate::types::FileType>) -> Self {
        self.file_type = input;
        self
    }
    /// <p>When the read set was created.</p>
    pub fn creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.creation_time = Some(input);
        self
    }
    /// <p>When the read set was created.</p>
    pub fn set_creation_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The read set's sequence information.</p>
    pub fn sequence_information(mut self, input: crate::types::SequenceInformation) -> Self {
        self.sequence_information = Some(input);
        self
    }
    /// <p>The read set's sequence information.</p>
    pub fn set_sequence_information(
        mut self,
        input: std::option::Option<crate::types::SequenceInformation>,
    ) -> Self {
        self.sequence_information = input;
        self
    }
    /// <p>The read set's genome reference ARN.</p>
    pub fn reference_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.reference_arn = Some(input.into());
        self
    }
    /// <p>The read set's genome reference ARN.</p>
    pub fn set_reference_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.reference_arn = input;
        self
    }
    /// <p>The read set's files.</p>
    pub fn files(mut self, input: crate::types::ReadSetFiles) -> Self {
        self.files = Some(input);
        self
    }
    /// <p>The read set's files.</p>
    pub fn set_files(mut self, input: std::option::Option<crate::types::ReadSetFiles>) -> Self {
        self.files = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetReadSetMetadataOutput`](crate::operation::get_read_set_metadata::GetReadSetMetadataOutput).
    pub fn build(self) -> crate::operation::get_read_set_metadata::GetReadSetMetadataOutput {
        crate::operation::get_read_set_metadata::GetReadSetMetadataOutput {
            id: self.id,
            arn: self.arn,
            sequence_store_id: self.sequence_store_id,
            subject_id: self.subject_id,
            sample_id: self.sample_id,
            status: self.status,
            name: self.name,
            description: self.description,
            file_type: self.file_type,
            creation_time: self.creation_time,
            sequence_information: self.sequence_information,
            reference_arn: self.reference_arn,
            files: self.files,
            _request_id: self._request_id,
        }
    }
}
