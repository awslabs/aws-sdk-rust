// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetRunGroupOutput {
    /// <p>The group's ARN.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The group's ID.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The group's name.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The group's maximum number of CPUs to use.</p>
    #[doc(hidden)]
    pub max_cpus: std::option::Option<i32>,
    /// <p>The maximum number of concurrent runs for the group.</p>
    #[doc(hidden)]
    pub max_runs: std::option::Option<i32>,
    /// <p>The group's maximum run duration.</p>
    #[doc(hidden)]
    pub max_duration: std::option::Option<i32>,
    /// <p>When the group was created.</p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The group's tags.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    _request_id: Option<String>,
}
impl GetRunGroupOutput {
    /// <p>The group's ARN.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The group's ID.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The group's name.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The group's maximum number of CPUs to use.</p>
    pub fn max_cpus(&self) -> std::option::Option<i32> {
        self.max_cpus
    }
    /// <p>The maximum number of concurrent runs for the group.</p>
    pub fn max_runs(&self) -> std::option::Option<i32> {
        self.max_runs
    }
    /// <p>The group's maximum run duration.</p>
    pub fn max_duration(&self) -> std::option::Option<i32> {
        self.max_duration
    }
    /// <p>When the group was created.</p>
    pub fn creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The group's tags.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetRunGroupOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetRunGroupOutput {
    /// Creates a new builder-style object to manufacture [`GetRunGroupOutput`](crate::operation::get_run_group::GetRunGroupOutput).
    pub fn builder() -> crate::operation::get_run_group::builders::GetRunGroupOutputBuilder {
        crate::operation::get_run_group::builders::GetRunGroupOutputBuilder::default()
    }
}

/// A builder for [`GetRunGroupOutput`](crate::operation::get_run_group::GetRunGroupOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetRunGroupOutputBuilder {
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) max_cpus: std::option::Option<i32>,
    pub(crate) max_runs: std::option::Option<i32>,
    pub(crate) max_duration: std::option::Option<i32>,
    pub(crate) creation_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    _request_id: Option<String>,
}
impl GetRunGroupOutputBuilder {
    /// <p>The group's ARN.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The group's ARN.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The group's ID.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>The group's ID.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The group's name.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The group's name.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The group's maximum number of CPUs to use.</p>
    pub fn max_cpus(mut self, input: i32) -> Self {
        self.max_cpus = Some(input);
        self
    }
    /// <p>The group's maximum number of CPUs to use.</p>
    pub fn set_max_cpus(mut self, input: std::option::Option<i32>) -> Self {
        self.max_cpus = input;
        self
    }
    /// <p>The maximum number of concurrent runs for the group.</p>
    pub fn max_runs(mut self, input: i32) -> Self {
        self.max_runs = Some(input);
        self
    }
    /// <p>The maximum number of concurrent runs for the group.</p>
    pub fn set_max_runs(mut self, input: std::option::Option<i32>) -> Self {
        self.max_runs = input;
        self
    }
    /// <p>The group's maximum run duration.</p>
    pub fn max_duration(mut self, input: i32) -> Self {
        self.max_duration = Some(input);
        self
    }
    /// <p>The group's maximum run duration.</p>
    pub fn set_max_duration(mut self, input: std::option::Option<i32>) -> Self {
        self.max_duration = input;
        self
    }
    /// <p>When the group was created.</p>
    pub fn creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.creation_time = Some(input);
        self
    }
    /// <p>When the group was created.</p>
    pub fn set_creation_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.creation_time = input;
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The group's tags.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = Some(hash_map);
        self
    }
    /// <p>The group's tags.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.tags = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetRunGroupOutput`](crate::operation::get_run_group::GetRunGroupOutput).
    pub fn build(self) -> crate::operation::get_run_group::GetRunGroupOutput {
        crate::operation::get_run_group::GetRunGroupOutput {
            arn: self.arn,
            id: self.id,
            name: self.name,
            max_cpus: self.max_cpus,
            max_runs: self.max_runs,
            max_duration: self.max_duration,
            creation_time: self.creation_time,
            tags: self.tags,
            _request_id: self._request_id,
        }
    }
}
