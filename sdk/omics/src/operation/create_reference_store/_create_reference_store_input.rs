// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateReferenceStoreInput {
    /// <p>A name for the store.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>A description for the store.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>Server-side encryption (SSE) settings for the store.</p>
    pub sse_config: ::std::option::Option<crate::types::SseConfig>,
    /// <p>Tags for the store.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>To ensure that requests don't run multiple times, specify a unique token for each request.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
}
impl CreateReferenceStoreInput {
    /// <p>A name for the store.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>A description for the store.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Server-side encryption (SSE) settings for the store.</p>
    pub fn sse_config(&self) -> ::std::option::Option<&crate::types::SseConfig> {
        self.sse_config.as_ref()
    }
    /// <p>Tags for the store.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
    /// <p>To ensure that requests don't run multiple times, specify a unique token for each request.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
}
impl CreateReferenceStoreInput {
    /// Creates a new builder-style object to manufacture [`CreateReferenceStoreInput`](crate::operation::create_reference_store::CreateReferenceStoreInput).
    pub fn builder() -> crate::operation::create_reference_store::builders::CreateReferenceStoreInputBuilder {
        crate::operation::create_reference_store::builders::CreateReferenceStoreInputBuilder::default()
    }
}

/// A builder for [`CreateReferenceStoreInput`](crate::operation::create_reference_store::CreateReferenceStoreInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateReferenceStoreInputBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) sse_config: ::std::option::Option<crate::types::SseConfig>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
}
impl CreateReferenceStoreInputBuilder {
    /// <p>A name for the store.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A name for the store.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>A name for the store.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>A description for the store.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description for the store.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description for the store.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>Server-side encryption (SSE) settings for the store.</p>
    pub fn sse_config(mut self, input: crate::types::SseConfig) -> Self {
        self.sse_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>Server-side encryption (SSE) settings for the store.</p>
    pub fn set_sse_config(mut self, input: ::std::option::Option<crate::types::SseConfig>) -> Self {
        self.sse_config = input;
        self
    }
    /// <p>Server-side encryption (SSE) settings for the store.</p>
    pub fn get_sse_config(&self) -> &::std::option::Option<crate::types::SseConfig> {
        &self.sse_config
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Tags for the store.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Tags for the store.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>Tags for the store.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// <p>To ensure that requests don't run multiple times, specify a unique token for each request.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>To ensure that requests don't run multiple times, specify a unique token for each request.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>To ensure that requests don't run multiple times, specify a unique token for each request.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// Consumes the builder and constructs a [`CreateReferenceStoreInput`](crate::operation::create_reference_store::CreateReferenceStoreInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_reference_store::CreateReferenceStoreInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::create_reference_store::CreateReferenceStoreInput {
            name: self.name,
            description: self.description,
            sse_config: self.sse_config,
            tags: self.tags,
            client_token: self.client_token,
        })
    }
}
