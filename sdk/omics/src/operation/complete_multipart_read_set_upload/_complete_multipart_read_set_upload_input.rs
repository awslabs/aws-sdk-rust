// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CompleteMultipartReadSetUploadInput {
    /// <p> The sequence store ID for the store involved in the multipart upload. </p>
    pub sequence_store_id: ::std::option::Option<::std::string::String>,
    /// <p> The ID for the multipart upload. </p>
    pub upload_id: ::std::option::Option<::std::string::String>,
    /// <p> The individual uploads or parts of a multipart upload. </p>
    pub parts: ::std::option::Option<::std::vec::Vec<crate::types::CompleteReadSetUploadPartListItem>>,
}
impl CompleteMultipartReadSetUploadInput {
    /// <p> The sequence store ID for the store involved in the multipart upload. </p>
    pub fn sequence_store_id(&self) -> ::std::option::Option<&str> {
        self.sequence_store_id.as_deref()
    }
    /// <p> The ID for the multipart upload. </p>
    pub fn upload_id(&self) -> ::std::option::Option<&str> {
        self.upload_id.as_deref()
    }
    /// <p> The individual uploads or parts of a multipart upload. </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.parts.is_none()`.
    pub fn parts(&self) -> &[crate::types::CompleteReadSetUploadPartListItem] {
        self.parts.as_deref().unwrap_or_default()
    }
}
impl CompleteMultipartReadSetUploadInput {
    /// Creates a new builder-style object to manufacture [`CompleteMultipartReadSetUploadInput`](crate::operation::complete_multipart_read_set_upload::CompleteMultipartReadSetUploadInput).
    pub fn builder() -> crate::operation::complete_multipart_read_set_upload::builders::CompleteMultipartReadSetUploadInputBuilder {
        crate::operation::complete_multipart_read_set_upload::builders::CompleteMultipartReadSetUploadInputBuilder::default()
    }
}

/// A builder for [`CompleteMultipartReadSetUploadInput`](crate::operation::complete_multipart_read_set_upload::CompleteMultipartReadSetUploadInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CompleteMultipartReadSetUploadInputBuilder {
    pub(crate) sequence_store_id: ::std::option::Option<::std::string::String>,
    pub(crate) upload_id: ::std::option::Option<::std::string::String>,
    pub(crate) parts: ::std::option::Option<::std::vec::Vec<crate::types::CompleteReadSetUploadPartListItem>>,
}
impl CompleteMultipartReadSetUploadInputBuilder {
    /// <p> The sequence store ID for the store involved in the multipart upload. </p>
    /// This field is required.
    pub fn sequence_store_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.sequence_store_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The sequence store ID for the store involved in the multipart upload. </p>
    pub fn set_sequence_store_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.sequence_store_id = input;
        self
    }
    /// <p> The sequence store ID for the store involved in the multipart upload. </p>
    pub fn get_sequence_store_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.sequence_store_id
    }
    /// <p> The ID for the multipart upload. </p>
    /// This field is required.
    pub fn upload_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.upload_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The ID for the multipart upload. </p>
    pub fn set_upload_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.upload_id = input;
        self
    }
    /// <p> The ID for the multipart upload. </p>
    pub fn get_upload_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.upload_id
    }
    /// Appends an item to `parts`.
    ///
    /// To override the contents of this collection use [`set_parts`](Self::set_parts).
    ///
    /// <p> The individual uploads or parts of a multipart upload. </p>
    pub fn parts(mut self, input: crate::types::CompleteReadSetUploadPartListItem) -> Self {
        let mut v = self.parts.unwrap_or_default();
        v.push(input);
        self.parts = ::std::option::Option::Some(v);
        self
    }
    /// <p> The individual uploads or parts of a multipart upload. </p>
    pub fn set_parts(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::CompleteReadSetUploadPartListItem>>) -> Self {
        self.parts = input;
        self
    }
    /// <p> The individual uploads or parts of a multipart upload. </p>
    pub fn get_parts(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CompleteReadSetUploadPartListItem>> {
        &self.parts
    }
    /// Consumes the builder and constructs a [`CompleteMultipartReadSetUploadInput`](crate::operation::complete_multipart_read_set_upload::CompleteMultipartReadSetUploadInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::complete_multipart_read_set_upload::CompleteMultipartReadSetUploadInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::complete_multipart_read_set_upload::CompleteMultipartReadSetUploadInput {
                sequence_store_id: self.sequence_store_id,
                upload_id: self.upload_id,
                parts: self.parts,
            },
        )
    }
}
