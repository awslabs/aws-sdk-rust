// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetWorkflowInput {
    /// <p>The workflow's ID.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The workflow's type.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::WorkflowType>,
    /// <p>The export format for the workflow.</p>
    #[doc(hidden)]
    pub export: std::option::Option<std::vec::Vec<crate::types::WorkflowExport>>,
}
impl GetWorkflowInput {
    /// <p>The workflow's ID.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The workflow's type.</p>
    pub fn r#type(&self) -> std::option::Option<&crate::types::WorkflowType> {
        self.r#type.as_ref()
    }
    /// <p>The export format for the workflow.</p>
    pub fn export(&self) -> std::option::Option<&[crate::types::WorkflowExport]> {
        self.export.as_deref()
    }
}
impl GetWorkflowInput {
    /// Creates a new builder-style object to manufacture [`GetWorkflowInput`](crate::operation::get_workflow::GetWorkflowInput).
    pub fn builder() -> crate::operation::get_workflow::builders::GetWorkflowInputBuilder {
        crate::operation::get_workflow::builders::GetWorkflowInputBuilder::default()
    }
}

/// A builder for [`GetWorkflowInput`](crate::operation::get_workflow::GetWorkflowInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetWorkflowInputBuilder {
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) r#type: std::option::Option<crate::types::WorkflowType>,
    pub(crate) export: std::option::Option<std::vec::Vec<crate::types::WorkflowExport>>,
}
impl GetWorkflowInputBuilder {
    /// <p>The workflow's ID.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>The workflow's ID.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The workflow's type.</p>
    pub fn r#type(mut self, input: crate::types::WorkflowType) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p>The workflow's type.</p>
    pub fn set_type(mut self, input: std::option::Option<crate::types::WorkflowType>) -> Self {
        self.r#type = input;
        self
    }
    /// Appends an item to `export`.
    ///
    /// To override the contents of this collection use [`set_export`](Self::set_export).
    ///
    /// <p>The export format for the workflow.</p>
    pub fn export(mut self, input: crate::types::WorkflowExport) -> Self {
        let mut v = self.export.unwrap_or_default();
        v.push(input);
        self.export = Some(v);
        self
    }
    /// <p>The export format for the workflow.</p>
    pub fn set_export(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::WorkflowExport>>,
    ) -> Self {
        self.export = input;
        self
    }
    /// Consumes the builder and constructs a [`GetWorkflowInput`](crate::operation::get_workflow::GetWorkflowInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::get_workflow::GetWorkflowInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::get_workflow::GetWorkflowInput {
            id: self.id,
            r#type: self.r#type,
            export: self.export,
        })
    }
}
