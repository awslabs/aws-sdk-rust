// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListRunsInput {
    /// <p>Filter the list by run name.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>Filter the list by run group ID.</p>
    #[doc(hidden)]
    pub run_group_id: std::option::Option<std::string::String>,
    /// <p>Specify the pagination token from a previous request to retrieve the next page of results.</p>
    #[doc(hidden)]
    pub starting_token: std::option::Option<std::string::String>,
    /// <p>The maximum number of runs to return in one page of results.</p>
    #[doc(hidden)]
    pub max_results: std::option::Option<i32>,
}
impl ListRunsInput {
    /// <p>Filter the list by run name.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>Filter the list by run group ID.</p>
    pub fn run_group_id(&self) -> std::option::Option<&str> {
        self.run_group_id.as_deref()
    }
    /// <p>Specify the pagination token from a previous request to retrieve the next page of results.</p>
    pub fn starting_token(&self) -> std::option::Option<&str> {
        self.starting_token.as_deref()
    }
    /// <p>The maximum number of runs to return in one page of results.</p>
    pub fn max_results(&self) -> std::option::Option<i32> {
        self.max_results
    }
}
impl ListRunsInput {
    /// Creates a new builder-style object to manufacture [`ListRunsInput`](crate::operation::list_runs::ListRunsInput).
    pub fn builder() -> crate::operation::list_runs::builders::ListRunsInputBuilder {
        crate::operation::list_runs::builders::ListRunsInputBuilder::default()
    }
}

/// A builder for [`ListRunsInput`](crate::operation::list_runs::ListRunsInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListRunsInputBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) run_group_id: std::option::Option<std::string::String>,
    pub(crate) starting_token: std::option::Option<std::string::String>,
    pub(crate) max_results: std::option::Option<i32>,
}
impl ListRunsInputBuilder {
    /// <p>Filter the list by run name.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>Filter the list by run name.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>Filter the list by run group ID.</p>
    pub fn run_group_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.run_group_id = Some(input.into());
        self
    }
    /// <p>Filter the list by run group ID.</p>
    pub fn set_run_group_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.run_group_id = input;
        self
    }
    /// <p>Specify the pagination token from a previous request to retrieve the next page of results.</p>
    pub fn starting_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.starting_token = Some(input.into());
        self
    }
    /// <p>Specify the pagination token from a previous request to retrieve the next page of results.</p>
    pub fn set_starting_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.starting_token = input;
        self
    }
    /// <p>The maximum number of runs to return in one page of results.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// <p>The maximum number of runs to return in one page of results.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// Consumes the builder and constructs a [`ListRunsInput`](crate::operation::list_runs::ListRunsInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::list_runs::ListRunsInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::list_runs::ListRunsInput {
            name: self.name,
            run_group_id: self.run_group_id,
            starting_token: self.starting_token,
            max_results: self.max_results,
        })
    }
}
