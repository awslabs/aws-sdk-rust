// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListRunsInput {
    /// <p>Filter the list by run name.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>Filter the list by run group ID.</p>
    pub run_group_id: ::std::option::Option<::std::string::String>,
    /// <p>Specify the pagination token from a previous request to retrieve the next page of results.</p>
    pub starting_token: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of runs to return in one page of results.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p> The status of a run. </p>
    pub status: ::std::option::Option<crate::types::RunStatus>,
}
impl ListRunsInput {
    /// <p>Filter the list by run name.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>Filter the list by run group ID.</p>
    pub fn run_group_id(&self) -> ::std::option::Option<&str> {
        self.run_group_id.as_deref()
    }
    /// <p>Specify the pagination token from a previous request to retrieve the next page of results.</p>
    pub fn starting_token(&self) -> ::std::option::Option<&str> {
        self.starting_token.as_deref()
    }
    /// <p>The maximum number of runs to return in one page of results.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p> The status of a run. </p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::RunStatus> {
        self.status.as_ref()
    }
}
impl ListRunsInput {
    /// Creates a new builder-style object to manufacture [`ListRunsInput`](crate::operation::list_runs::ListRunsInput).
    pub fn builder() -> crate::operation::list_runs::builders::ListRunsInputBuilder {
        crate::operation::list_runs::builders::ListRunsInputBuilder::default()
    }
}

/// A builder for [`ListRunsInput`](crate::operation::list_runs::ListRunsInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListRunsInputBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) run_group_id: ::std::option::Option<::std::string::String>,
    pub(crate) starting_token: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) status: ::std::option::Option<crate::types::RunStatus>,
}
impl ListRunsInputBuilder {
    /// <p>Filter the list by run name.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Filter the list by run name.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>Filter the list by run name.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>Filter the list by run group ID.</p>
    pub fn run_group_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.run_group_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Filter the list by run group ID.</p>
    pub fn set_run_group_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.run_group_id = input;
        self
    }
    /// <p>Filter the list by run group ID.</p>
    pub fn get_run_group_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.run_group_id
    }
    /// <p>Specify the pagination token from a previous request to retrieve the next page of results.</p>
    pub fn starting_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.starting_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specify the pagination token from a previous request to retrieve the next page of results.</p>
    pub fn set_starting_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.starting_token = input;
        self
    }
    /// <p>Specify the pagination token from a previous request to retrieve the next page of results.</p>
    pub fn get_starting_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.starting_token
    }
    /// <p>The maximum number of runs to return in one page of results.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of runs to return in one page of results.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of runs to return in one page of results.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p> The status of a run. </p>
    pub fn status(mut self, input: crate::types::RunStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p> The status of a run. </p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::RunStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p> The status of a run. </p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::RunStatus> {
        &self.status
    }
    /// Consumes the builder and constructs a [`ListRunsInput`](crate::operation::list_runs::ListRunsInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::list_runs::ListRunsInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::list_runs::ListRunsInput {
            name: self.name,
            run_group_id: self.run_group_id,
            starting_token: self.starting_token,
            max_results: self.max_results,
            status: self.status,
        })
    }
}
