// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetReferenceInput {
    /// <p>The reference's ID.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The reference's store ID.</p>
    pub reference_store_id: ::std::option::Option<::std::string::String>,
    /// <p>The range to retrieve.</p>
    pub range: ::std::option::Option<::std::string::String>,
    /// <p>The part number to retrieve.</p>
    pub part_number: ::std::option::Option<i32>,
    /// <p>The file to retrieve.</p>
    pub file: ::std::option::Option<crate::types::ReferenceFile>,
}
impl GetReferenceInput {
    /// <p>The reference's ID.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The reference's store ID.</p>
    pub fn reference_store_id(&self) -> ::std::option::Option<&str> {
        self.reference_store_id.as_deref()
    }
    /// <p>The range to retrieve.</p>
    pub fn range(&self) -> ::std::option::Option<&str> {
        self.range.as_deref()
    }
    /// <p>The part number to retrieve.</p>
    pub fn part_number(&self) -> ::std::option::Option<i32> {
        self.part_number
    }
    /// <p>The file to retrieve.</p>
    pub fn file(&self) -> ::std::option::Option<&crate::types::ReferenceFile> {
        self.file.as_ref()
    }
}
impl GetReferenceInput {
    /// Creates a new builder-style object to manufacture [`GetReferenceInput`](crate::operation::get_reference::GetReferenceInput).
    pub fn builder() -> crate::operation::get_reference::builders::GetReferenceInputBuilder {
        crate::operation::get_reference::builders::GetReferenceInputBuilder::default()
    }
}

/// A builder for [`GetReferenceInput`](crate::operation::get_reference::GetReferenceInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetReferenceInputBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) reference_store_id: ::std::option::Option<::std::string::String>,
    pub(crate) range: ::std::option::Option<::std::string::String>,
    pub(crate) part_number: ::std::option::Option<i32>,
    pub(crate) file: ::std::option::Option<crate::types::ReferenceFile>,
}
impl GetReferenceInputBuilder {
    /// <p>The reference's ID.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The reference's ID.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The reference's ID.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The reference's store ID.</p>
    /// This field is required.
    pub fn reference_store_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.reference_store_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The reference's store ID.</p>
    pub fn set_reference_store_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.reference_store_id = input;
        self
    }
    /// <p>The reference's store ID.</p>
    pub fn get_reference_store_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.reference_store_id
    }
    /// <p>The range to retrieve.</p>
    pub fn range(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.range = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The range to retrieve.</p>
    pub fn set_range(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.range = input;
        self
    }
    /// <p>The range to retrieve.</p>
    pub fn get_range(&self) -> &::std::option::Option<::std::string::String> {
        &self.range
    }
    /// <p>The part number to retrieve.</p>
    /// This field is required.
    pub fn part_number(mut self, input: i32) -> Self {
        self.part_number = ::std::option::Option::Some(input);
        self
    }
    /// <p>The part number to retrieve.</p>
    pub fn set_part_number(mut self, input: ::std::option::Option<i32>) -> Self {
        self.part_number = input;
        self
    }
    /// <p>The part number to retrieve.</p>
    pub fn get_part_number(&self) -> &::std::option::Option<i32> {
        &self.part_number
    }
    /// <p>The file to retrieve.</p>
    pub fn file(mut self, input: crate::types::ReferenceFile) -> Self {
        self.file = ::std::option::Option::Some(input);
        self
    }
    /// <p>The file to retrieve.</p>
    pub fn set_file(mut self, input: ::std::option::Option<crate::types::ReferenceFile>) -> Self {
        self.file = input;
        self
    }
    /// <p>The file to retrieve.</p>
    pub fn get_file(&self) -> &::std::option::Option<crate::types::ReferenceFile> {
        &self.file
    }
    /// Consumes the builder and constructs a [`GetReferenceInput`](crate::operation::get_reference::GetReferenceInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::get_reference::GetReferenceInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::get_reference::GetReferenceInput {
            id: self.id,
            reference_store_id: self.reference_store_id,
            range: self.range,
            part_number: self.part_number,
            file: self.file,
        })
    }
}
