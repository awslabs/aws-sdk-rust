// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StartVariantImportJobInput {
    /// <p>The destination variant store for the job.</p>
    pub destination_name: ::std::option::Option<::std::string::String>,
    /// <p>A service role for the job.</p>
    pub role_arn: ::std::option::Option<::std::string::String>,
    /// <p>Items to import.</p>
    pub items: ::std::option::Option<::std::vec::Vec<crate::types::VariantImportItemSource>>,
    /// <p>The job's left normalization setting.</p>
    pub run_left_normalization: ::std::option::Option<bool>,
    /// <p> The annotation schema generated by the parsed annotation data. </p>
    pub annotation_fields: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl StartVariantImportJobInput {
    /// <p>The destination variant store for the job.</p>
    pub fn destination_name(&self) -> ::std::option::Option<&str> {
        self.destination_name.as_deref()
    }
    /// <p>A service role for the job.</p>
    pub fn role_arn(&self) -> ::std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>Items to import.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.items.is_none()`.
    pub fn items(&self) -> &[crate::types::VariantImportItemSource] {
        self.items.as_deref().unwrap_or_default()
    }
    /// <p>The job's left normalization setting.</p>
    pub fn run_left_normalization(&self) -> ::std::option::Option<bool> {
        self.run_left_normalization
    }
    /// <p> The annotation schema generated by the parsed annotation data. </p>
    pub fn annotation_fields(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.annotation_fields.as_ref()
    }
}
impl StartVariantImportJobInput {
    /// Creates a new builder-style object to manufacture [`StartVariantImportJobInput`](crate::operation::start_variant_import_job::StartVariantImportJobInput).
    pub fn builder() -> crate::operation::start_variant_import_job::builders::StartVariantImportJobInputBuilder {
        crate::operation::start_variant_import_job::builders::StartVariantImportJobInputBuilder::default()
    }
}

/// A builder for [`StartVariantImportJobInput`](crate::operation::start_variant_import_job::StartVariantImportJobInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct StartVariantImportJobInputBuilder {
    pub(crate) destination_name: ::std::option::Option<::std::string::String>,
    pub(crate) role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) items: ::std::option::Option<::std::vec::Vec<crate::types::VariantImportItemSource>>,
    pub(crate) run_left_normalization: ::std::option::Option<bool>,
    pub(crate) annotation_fields: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl StartVariantImportJobInputBuilder {
    /// <p>The destination variant store for the job.</p>
    /// This field is required.
    pub fn destination_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.destination_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The destination variant store for the job.</p>
    pub fn set_destination_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.destination_name = input;
        self
    }
    /// <p>The destination variant store for the job.</p>
    pub fn get_destination_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.destination_name
    }
    /// <p>A service role for the job.</p>
    /// This field is required.
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A service role for the job.</p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>A service role for the job.</p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn
    }
    /// Appends an item to `items`.
    ///
    /// To override the contents of this collection use [`set_items`](Self::set_items).
    ///
    /// <p>Items to import.</p>
    pub fn items(mut self, input: crate::types::VariantImportItemSource) -> Self {
        let mut v = self.items.unwrap_or_default();
        v.push(input);
        self.items = ::std::option::Option::Some(v);
        self
    }
    /// <p>Items to import.</p>
    pub fn set_items(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::VariantImportItemSource>>) -> Self {
        self.items = input;
        self
    }
    /// <p>Items to import.</p>
    pub fn get_items(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::VariantImportItemSource>> {
        &self.items
    }
    /// <p>The job's left normalization setting.</p>
    pub fn run_left_normalization(mut self, input: bool) -> Self {
        self.run_left_normalization = ::std::option::Option::Some(input);
        self
    }
    /// <p>The job's left normalization setting.</p>
    pub fn set_run_left_normalization(mut self, input: ::std::option::Option<bool>) -> Self {
        self.run_left_normalization = input;
        self
    }
    /// <p>The job's left normalization setting.</p>
    pub fn get_run_left_normalization(&self) -> &::std::option::Option<bool> {
        &self.run_left_normalization
    }
    /// Adds a key-value pair to `annotation_fields`.
    ///
    /// To override the contents of this collection use [`set_annotation_fields`](Self::set_annotation_fields).
    ///
    /// <p> The annotation schema generated by the parsed annotation data. </p>
    pub fn annotation_fields(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        let mut hash_map = self.annotation_fields.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.annotation_fields = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p> The annotation schema generated by the parsed annotation data. </p>
    pub fn set_annotation_fields(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.annotation_fields = input;
        self
    }
    /// <p> The annotation schema generated by the parsed annotation data. </p>
    pub fn get_annotation_fields(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.annotation_fields
    }
    /// Consumes the builder and constructs a [`StartVariantImportJobInput`](crate::operation::start_variant_import_job::StartVariantImportJobInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::start_variant_import_job::StartVariantImportJobInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::start_variant_import_job::StartVariantImportJobInput {
            destination_name: self.destination_name,
            role_arn: self.role_arn,
            items: self.items,
            run_left_normalization: self.run_left_normalization,
            annotation_fields: self.annotation_fields,
        })
    }
}
