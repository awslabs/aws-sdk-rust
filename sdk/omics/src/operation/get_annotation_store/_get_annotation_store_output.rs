// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetAnnotationStoreOutput {
    /// <p>The store's ID.</p>
    pub id: ::std::string::String,
    /// <p>The store's genome reference.</p>
    pub reference: ::std::option::Option<crate::types::ReferenceItem>,
    /// <p>The store's status.</p>
    pub status: crate::types::StoreStatus,
    /// <p>The store's ARN.</p>
    pub store_arn: ::std::string::String,
    /// <p>The store's name.</p>
    pub name: ::std::string::String,
    /// <p>The store's description.</p>
    pub description: ::std::string::String,
    /// <p>The store's server-side encryption (SSE) settings.</p>
    pub sse_config: ::std::option::Option<crate::types::SseConfig>,
    /// <p>When the store was created.</p>
    pub creation_time: ::aws_smithy_types::DateTime,
    /// <p>When the store was updated.</p>
    pub update_time: ::aws_smithy_types::DateTime,
    /// <p>The store's tags.</p>
    pub tags: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    /// <p>The store's parsing options.</p>
    pub store_options: ::std::option::Option<crate::types::StoreOptions>,
    /// <p>The store's annotation file format.</p>
    pub store_format: ::std::option::Option<crate::types::StoreFormat>,
    /// <p>A status message.</p>
    pub status_message: ::std::string::String,
    /// <p>The store's size in bytes.</p>
    pub store_size_bytes: i64,
    /// <p> An integer indicating how many versions of an annotation store exist. </p>
    pub num_versions: i32,
    _request_id: Option<String>,
}
impl GetAnnotationStoreOutput {
    /// <p>The store's ID.</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>The store's genome reference.</p>
    pub fn reference(&self) -> ::std::option::Option<&crate::types::ReferenceItem> {
        self.reference.as_ref()
    }
    /// <p>The store's status.</p>
    pub fn status(&self) -> &crate::types::StoreStatus {
        &self.status
    }
    /// <p>The store's ARN.</p>
    pub fn store_arn(&self) -> &str {
        use std::ops::Deref;
        self.store_arn.deref()
    }
    /// <p>The store's name.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The store's description.</p>
    pub fn description(&self) -> &str {
        use std::ops::Deref;
        self.description.deref()
    }
    /// <p>The store's server-side encryption (SSE) settings.</p>
    pub fn sse_config(&self) -> ::std::option::Option<&crate::types::SseConfig> {
        self.sse_config.as_ref()
    }
    /// <p>When the store was created.</p>
    pub fn creation_time(&self) -> &::aws_smithy_types::DateTime {
        &self.creation_time
    }
    /// <p>When the store was updated.</p>
    pub fn update_time(&self) -> &::aws_smithy_types::DateTime {
        &self.update_time
    }
    /// <p>The store's tags.</p>
    pub fn tags(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.tags
    }
    /// <p>The store's parsing options.</p>
    pub fn store_options(&self) -> ::std::option::Option<&crate::types::StoreOptions> {
        self.store_options.as_ref()
    }
    /// <p>The store's annotation file format.</p>
    pub fn store_format(&self) -> ::std::option::Option<&crate::types::StoreFormat> {
        self.store_format.as_ref()
    }
    /// <p>A status message.</p>
    pub fn status_message(&self) -> &str {
        use std::ops::Deref;
        self.status_message.deref()
    }
    /// <p>The store's size in bytes.</p>
    pub fn store_size_bytes(&self) -> i64 {
        self.store_size_bytes
    }
    /// <p> An integer indicating how many versions of an annotation store exist. </p>
    pub fn num_versions(&self) -> i32 {
        self.num_versions
    }
}
impl ::aws_http::request_id::RequestId for GetAnnotationStoreOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetAnnotationStoreOutput {
    /// Creates a new builder-style object to manufacture [`GetAnnotationStoreOutput`](crate::operation::get_annotation_store::GetAnnotationStoreOutput).
    pub fn builder() -> crate::operation::get_annotation_store::builders::GetAnnotationStoreOutputBuilder {
        crate::operation::get_annotation_store::builders::GetAnnotationStoreOutputBuilder::default()
    }
}

/// A builder for [`GetAnnotationStoreOutput`](crate::operation::get_annotation_store::GetAnnotationStoreOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetAnnotationStoreOutputBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) reference: ::std::option::Option<crate::types::ReferenceItem>,
    pub(crate) status: ::std::option::Option<crate::types::StoreStatus>,
    pub(crate) store_arn: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) sse_config: ::std::option::Option<crate::types::SseConfig>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) update_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) store_options: ::std::option::Option<crate::types::StoreOptions>,
    pub(crate) store_format: ::std::option::Option<crate::types::StoreFormat>,
    pub(crate) status_message: ::std::option::Option<::std::string::String>,
    pub(crate) store_size_bytes: ::std::option::Option<i64>,
    pub(crate) num_versions: ::std::option::Option<i32>,
    _request_id: Option<String>,
}
impl GetAnnotationStoreOutputBuilder {
    /// <p>The store's ID.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The store's ID.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The store's ID.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The store's genome reference.</p>
    /// This field is required.
    pub fn reference(mut self, input: crate::types::ReferenceItem) -> Self {
        self.reference = ::std::option::Option::Some(input);
        self
    }
    /// <p>The store's genome reference.</p>
    pub fn set_reference(mut self, input: ::std::option::Option<crate::types::ReferenceItem>) -> Self {
        self.reference = input;
        self
    }
    /// <p>The store's genome reference.</p>
    pub fn get_reference(&self) -> &::std::option::Option<crate::types::ReferenceItem> {
        &self.reference
    }
    /// <p>The store's status.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::StoreStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The store's status.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::StoreStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The store's status.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::StoreStatus> {
        &self.status
    }
    /// <p>The store's ARN.</p>
    /// This field is required.
    pub fn store_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.store_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The store's ARN.</p>
    pub fn set_store_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.store_arn = input;
        self
    }
    /// <p>The store's ARN.</p>
    pub fn get_store_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.store_arn
    }
    /// <p>The store's name.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The store's name.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The store's name.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The store's description.</p>
    /// This field is required.
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The store's description.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The store's description.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The store's server-side encryption (SSE) settings.</p>
    /// This field is required.
    pub fn sse_config(mut self, input: crate::types::SseConfig) -> Self {
        self.sse_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>The store's server-side encryption (SSE) settings.</p>
    pub fn set_sse_config(mut self, input: ::std::option::Option<crate::types::SseConfig>) -> Self {
        self.sse_config = input;
        self
    }
    /// <p>The store's server-side encryption (SSE) settings.</p>
    pub fn get_sse_config(&self) -> &::std::option::Option<crate::types::SseConfig> {
        &self.sse_config
    }
    /// <p>When the store was created.</p>
    /// This field is required.
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>When the store was created.</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>When the store was created.</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// <p>When the store was updated.</p>
    /// This field is required.
    pub fn update_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.update_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>When the store was updated.</p>
    pub fn set_update_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.update_time = input;
        self
    }
    /// <p>When the store was updated.</p>
    pub fn get_update_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.update_time
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The store's tags.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The store's tags.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The store's tags.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// <p>The store's parsing options.</p>
    pub fn store_options(mut self, input: crate::types::StoreOptions) -> Self {
        self.store_options = ::std::option::Option::Some(input);
        self
    }
    /// <p>The store's parsing options.</p>
    pub fn set_store_options(mut self, input: ::std::option::Option<crate::types::StoreOptions>) -> Self {
        self.store_options = input;
        self
    }
    /// <p>The store's parsing options.</p>
    pub fn get_store_options(&self) -> &::std::option::Option<crate::types::StoreOptions> {
        &self.store_options
    }
    /// <p>The store's annotation file format.</p>
    pub fn store_format(mut self, input: crate::types::StoreFormat) -> Self {
        self.store_format = ::std::option::Option::Some(input);
        self
    }
    /// <p>The store's annotation file format.</p>
    pub fn set_store_format(mut self, input: ::std::option::Option<crate::types::StoreFormat>) -> Self {
        self.store_format = input;
        self
    }
    /// <p>The store's annotation file format.</p>
    pub fn get_store_format(&self) -> &::std::option::Option<crate::types::StoreFormat> {
        &self.store_format
    }
    /// <p>A status message.</p>
    /// This field is required.
    pub fn status_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A status message.</p>
    pub fn set_status_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status_message = input;
        self
    }
    /// <p>A status message.</p>
    pub fn get_status_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.status_message
    }
    /// <p>The store's size in bytes.</p>
    /// This field is required.
    pub fn store_size_bytes(mut self, input: i64) -> Self {
        self.store_size_bytes = ::std::option::Option::Some(input);
        self
    }
    /// <p>The store's size in bytes.</p>
    pub fn set_store_size_bytes(mut self, input: ::std::option::Option<i64>) -> Self {
        self.store_size_bytes = input;
        self
    }
    /// <p>The store's size in bytes.</p>
    pub fn get_store_size_bytes(&self) -> &::std::option::Option<i64> {
        &self.store_size_bytes
    }
    /// <p> An integer indicating how many versions of an annotation store exist. </p>
    /// This field is required.
    pub fn num_versions(mut self, input: i32) -> Self {
        self.num_versions = ::std::option::Option::Some(input);
        self
    }
    /// <p> An integer indicating how many versions of an annotation store exist. </p>
    pub fn set_num_versions(mut self, input: ::std::option::Option<i32>) -> Self {
        self.num_versions = input;
        self
    }
    /// <p> An integer indicating how many versions of an annotation store exist. </p>
    pub fn get_num_versions(&self) -> &::std::option::Option<i32> {
        &self.num_versions
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetAnnotationStoreOutput`](crate::operation::get_annotation_store::GetAnnotationStoreOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`id`](crate::operation::get_annotation_store::builders::GetAnnotationStoreOutputBuilder::id)
    /// - [`status`](crate::operation::get_annotation_store::builders::GetAnnotationStoreOutputBuilder::status)
    /// - [`store_arn`](crate::operation::get_annotation_store::builders::GetAnnotationStoreOutputBuilder::store_arn)
    /// - [`name`](crate::operation::get_annotation_store::builders::GetAnnotationStoreOutputBuilder::name)
    /// - [`description`](crate::operation::get_annotation_store::builders::GetAnnotationStoreOutputBuilder::description)
    /// - [`creation_time`](crate::operation::get_annotation_store::builders::GetAnnotationStoreOutputBuilder::creation_time)
    /// - [`update_time`](crate::operation::get_annotation_store::builders::GetAnnotationStoreOutputBuilder::update_time)
    /// - [`tags`](crate::operation::get_annotation_store::builders::GetAnnotationStoreOutputBuilder::tags)
    /// - [`status_message`](crate::operation::get_annotation_store::builders::GetAnnotationStoreOutputBuilder::status_message)
    /// - [`store_size_bytes`](crate::operation::get_annotation_store::builders::GetAnnotationStoreOutputBuilder::store_size_bytes)
    /// - [`num_versions`](crate::operation::get_annotation_store::builders::GetAnnotationStoreOutputBuilder::num_versions)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::get_annotation_store::GetAnnotationStoreOutput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::get_annotation_store::GetAnnotationStoreOutput {
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building GetAnnotationStoreOutput",
                )
            })?,
            reference: self.reference,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building GetAnnotationStoreOutput",
                )
            })?,
            store_arn: self.store_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "store_arn",
                    "store_arn was not specified but it is required when building GetAnnotationStoreOutput",
                )
            })?,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building GetAnnotationStoreOutput",
                )
            })?,
            description: self.description.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "description",
                    "description was not specified but it is required when building GetAnnotationStoreOutput",
                )
            })?,
            sse_config: self.sse_config,
            creation_time: self.creation_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "creation_time",
                    "creation_time was not specified but it is required when building GetAnnotationStoreOutput",
                )
            })?,
            update_time: self.update_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "update_time",
                    "update_time was not specified but it is required when building GetAnnotationStoreOutput",
                )
            })?,
            tags: self.tags.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "tags",
                    "tags was not specified but it is required when building GetAnnotationStoreOutput",
                )
            })?,
            store_options: self.store_options,
            store_format: self.store_format,
            status_message: self.status_message.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status_message",
                    "status_message was not specified but it is required when building GetAnnotationStoreOutput",
                )
            })?,
            store_size_bytes: self.store_size_bytes.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "store_size_bytes",
                    "store_size_bytes was not specified but it is required when building GetAnnotationStoreOutput",
                )
            })?,
            num_versions: self.num_versions.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "num_versions",
                    "num_versions was not specified but it is required when building GetAnnotationStoreOutput",
                )
            })?,
            _request_id: self._request_id,
        })
    }
}
