// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetReferenceImportJobOutput {
    /// <p>The job's ID.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The job's reference store ID.</p>
    #[doc(hidden)]
    pub reference_store_id: std::option::Option<std::string::String>,
    /// <p>The job's service role ARN.</p>
    #[doc(hidden)]
    pub role_arn: std::option::Option<std::string::String>,
    /// <p>The job's status.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::ReferenceImportJobStatus>,
    /// <p>The job's status message.</p>
    #[doc(hidden)]
    pub status_message: std::option::Option<std::string::String>,
    /// <p>When the job was created.</p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>When the job completed.</p>
    #[doc(hidden)]
    pub completion_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The job's sources.</p>
    #[doc(hidden)]
    pub sources: std::option::Option<std::vec::Vec<crate::types::ImportReferenceSourceItem>>,
    _request_id: Option<String>,
}
impl GetReferenceImportJobOutput {
    /// <p>The job's ID.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The job's reference store ID.</p>
    pub fn reference_store_id(&self) -> std::option::Option<&str> {
        self.reference_store_id.as_deref()
    }
    /// <p>The job's service role ARN.</p>
    pub fn role_arn(&self) -> std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>The job's status.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::ReferenceImportJobStatus> {
        self.status.as_ref()
    }
    /// <p>The job's status message.</p>
    pub fn status_message(&self) -> std::option::Option<&str> {
        self.status_message.as_deref()
    }
    /// <p>When the job was created.</p>
    pub fn creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>When the job completed.</p>
    pub fn completion_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.completion_time.as_ref()
    }
    /// <p>The job's sources.</p>
    pub fn sources(&self) -> std::option::Option<&[crate::types::ImportReferenceSourceItem]> {
        self.sources.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetReferenceImportJobOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetReferenceImportJobOutput {
    /// Creates a new builder-style object to manufacture [`GetReferenceImportJobOutput`](crate::operation::get_reference_import_job::GetReferenceImportJobOutput).
    pub fn builder(
    ) -> crate::operation::get_reference_import_job::builders::GetReferenceImportJobOutputBuilder
    {
        crate::operation::get_reference_import_job::builders::GetReferenceImportJobOutputBuilder::default()
    }
}

/// A builder for [`GetReferenceImportJobOutput`](crate::operation::get_reference_import_job::GetReferenceImportJobOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetReferenceImportJobOutputBuilder {
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) reference_store_id: std::option::Option<std::string::String>,
    pub(crate) role_arn: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<crate::types::ReferenceImportJobStatus>,
    pub(crate) status_message: std::option::Option<std::string::String>,
    pub(crate) creation_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) completion_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) sources: std::option::Option<std::vec::Vec<crate::types::ImportReferenceSourceItem>>,
    _request_id: Option<String>,
}
impl GetReferenceImportJobOutputBuilder {
    /// <p>The job's ID.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>The job's ID.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The job's reference store ID.</p>
    pub fn reference_store_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.reference_store_id = Some(input.into());
        self
    }
    /// <p>The job's reference store ID.</p>
    pub fn set_reference_store_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.reference_store_id = input;
        self
    }
    /// <p>The job's service role ARN.</p>
    pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.role_arn = Some(input.into());
        self
    }
    /// <p>The job's service role ARN.</p>
    pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The job's status.</p>
    pub fn status(mut self, input: crate::types::ReferenceImportJobStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The job's status.</p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::ReferenceImportJobStatus>,
    ) -> Self {
        self.status = input;
        self
    }
    /// <p>The job's status message.</p>
    pub fn status_message(mut self, input: impl Into<std::string::String>) -> Self {
        self.status_message = Some(input.into());
        self
    }
    /// <p>The job's status message.</p>
    pub fn set_status_message(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.status_message = input;
        self
    }
    /// <p>When the job was created.</p>
    pub fn creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.creation_time = Some(input);
        self
    }
    /// <p>When the job was created.</p>
    pub fn set_creation_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>When the job completed.</p>
    pub fn completion_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.completion_time = Some(input);
        self
    }
    /// <p>When the job completed.</p>
    pub fn set_completion_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.completion_time = input;
        self
    }
    /// Appends an item to `sources`.
    ///
    /// To override the contents of this collection use [`set_sources`](Self::set_sources).
    ///
    /// <p>The job's sources.</p>
    pub fn sources(mut self, input: crate::types::ImportReferenceSourceItem) -> Self {
        let mut v = self.sources.unwrap_or_default();
        v.push(input);
        self.sources = Some(v);
        self
    }
    /// <p>The job's sources.</p>
    pub fn set_sources(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ImportReferenceSourceItem>>,
    ) -> Self {
        self.sources = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetReferenceImportJobOutput`](crate::operation::get_reference_import_job::GetReferenceImportJobOutput).
    pub fn build(self) -> crate::operation::get_reference_import_job::GetReferenceImportJobOutput {
        crate::operation::get_reference_import_job::GetReferenceImportJobOutput {
            id: self.id,
            reference_store_id: self.reference_store_id,
            role_arn: self.role_arn,
            status: self.status,
            status_message: self.status_message,
            creation_time: self.creation_time,
            completion_time: self.completion_time,
            sources: self.sources,
            _request_id: self._request_id,
        }
    }
}
