// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListReadSetUploadPartsInput {
    /// <p> The Sequence Store ID used for the multipart uploads. </p>
    pub sequence_store_id: ::std::option::Option<::std::string::String>,
    /// <p> The ID for the initiated multipart upload. </p>
    pub upload_id: ::std::option::Option<::std::string::String>,
    /// <p> The source file for the upload part. </p>
    pub part_source: ::std::option::Option<crate::types::ReadSetPartSource>,
    /// <p> The maximum number of read set upload parts returned in a page. </p>
    pub max_results: ::std::option::Option<i32>,
    /// <p> Next token returned in the response of a previous ListReadSetUploadPartsRequest call. Used to get the next page of results. </p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p> Attributes used to filter for a specific subset of read set part uploads. </p>
    pub filter: ::std::option::Option<crate::types::ReadSetUploadPartListFilter>,
}
impl ListReadSetUploadPartsInput {
    /// <p> The Sequence Store ID used for the multipart uploads. </p>
    pub fn sequence_store_id(&self) -> ::std::option::Option<&str> {
        self.sequence_store_id.as_deref()
    }
    /// <p> The ID for the initiated multipart upload. </p>
    pub fn upload_id(&self) -> ::std::option::Option<&str> {
        self.upload_id.as_deref()
    }
    /// <p> The source file for the upload part. </p>
    pub fn part_source(&self) -> ::std::option::Option<&crate::types::ReadSetPartSource> {
        self.part_source.as_ref()
    }
    /// <p> The maximum number of read set upload parts returned in a page. </p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p> Next token returned in the response of a previous ListReadSetUploadPartsRequest call. Used to get the next page of results. </p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p> Attributes used to filter for a specific subset of read set part uploads. </p>
    pub fn filter(&self) -> ::std::option::Option<&crate::types::ReadSetUploadPartListFilter> {
        self.filter.as_ref()
    }
}
impl ListReadSetUploadPartsInput {
    /// Creates a new builder-style object to manufacture [`ListReadSetUploadPartsInput`](crate::operation::list_read_set_upload_parts::ListReadSetUploadPartsInput).
    pub fn builder() -> crate::operation::list_read_set_upload_parts::builders::ListReadSetUploadPartsInputBuilder {
        crate::operation::list_read_set_upload_parts::builders::ListReadSetUploadPartsInputBuilder::default()
    }
}

/// A builder for [`ListReadSetUploadPartsInput`](crate::operation::list_read_set_upload_parts::ListReadSetUploadPartsInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListReadSetUploadPartsInputBuilder {
    pub(crate) sequence_store_id: ::std::option::Option<::std::string::String>,
    pub(crate) upload_id: ::std::option::Option<::std::string::String>,
    pub(crate) part_source: ::std::option::Option<crate::types::ReadSetPartSource>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) filter: ::std::option::Option<crate::types::ReadSetUploadPartListFilter>,
}
impl ListReadSetUploadPartsInputBuilder {
    /// <p> The Sequence Store ID used for the multipart uploads. </p>
    /// This field is required.
    pub fn sequence_store_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.sequence_store_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The Sequence Store ID used for the multipart uploads. </p>
    pub fn set_sequence_store_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.sequence_store_id = input;
        self
    }
    /// <p> The Sequence Store ID used for the multipart uploads. </p>
    pub fn get_sequence_store_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.sequence_store_id
    }
    /// <p> The ID for the initiated multipart upload. </p>
    /// This field is required.
    pub fn upload_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.upload_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The ID for the initiated multipart upload. </p>
    pub fn set_upload_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.upload_id = input;
        self
    }
    /// <p> The ID for the initiated multipart upload. </p>
    pub fn get_upload_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.upload_id
    }
    /// <p> The source file for the upload part. </p>
    /// This field is required.
    pub fn part_source(mut self, input: crate::types::ReadSetPartSource) -> Self {
        self.part_source = ::std::option::Option::Some(input);
        self
    }
    /// <p> The source file for the upload part. </p>
    pub fn set_part_source(mut self, input: ::std::option::Option<crate::types::ReadSetPartSource>) -> Self {
        self.part_source = input;
        self
    }
    /// <p> The source file for the upload part. </p>
    pub fn get_part_source(&self) -> &::std::option::Option<crate::types::ReadSetPartSource> {
        &self.part_source
    }
    /// <p> The maximum number of read set upload parts returned in a page. </p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p> The maximum number of read set upload parts returned in a page. </p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p> The maximum number of read set upload parts returned in a page. </p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p> Next token returned in the response of a previous ListReadSetUploadPartsRequest call. Used to get the next page of results. </p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> Next token returned in the response of a previous ListReadSetUploadPartsRequest call. Used to get the next page of results. </p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p> Next token returned in the response of a previous ListReadSetUploadPartsRequest call. Used to get the next page of results. </p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p> Attributes used to filter for a specific subset of read set part uploads. </p>
    pub fn filter(mut self, input: crate::types::ReadSetUploadPartListFilter) -> Self {
        self.filter = ::std::option::Option::Some(input);
        self
    }
    /// <p> Attributes used to filter for a specific subset of read set part uploads. </p>
    pub fn set_filter(mut self, input: ::std::option::Option<crate::types::ReadSetUploadPartListFilter>) -> Self {
        self.filter = input;
        self
    }
    /// <p> Attributes used to filter for a specific subset of read set part uploads. </p>
    pub fn get_filter(&self) -> &::std::option::Option<crate::types::ReadSetUploadPartListFilter> {
        &self.filter
    }
    /// Consumes the builder and constructs a [`ListReadSetUploadPartsInput`](crate::operation::list_read_set_upload_parts::ListReadSetUploadPartsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_read_set_upload_parts::ListReadSetUploadPartsInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::list_read_set_upload_parts::ListReadSetUploadPartsInput {
            sequence_store_id: self.sequence_store_id,
            upload_id: self.upload_id,
            part_source: self.part_source,
            max_results: self.max_results,
            next_token: self.next_token,
            filter: self.filter,
        })
    }
}
