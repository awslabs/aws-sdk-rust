// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StartReadSetActivationJobInput {
    /// <p>The read set's sequence store ID.</p>
    #[doc(hidden)]
    pub sequence_store_id: std::option::Option<std::string::String>,
    /// <p>To ensure that jobs don't run multiple times, specify a unique token for each job.</p>
    #[doc(hidden)]
    pub client_token: std::option::Option<std::string::String>,
    /// <p>The job's sources.</p>
    #[doc(hidden)]
    pub sources:
        std::option::Option<std::vec::Vec<crate::types::StartReadSetActivationJobSourceItem>>,
}
impl StartReadSetActivationJobInput {
    /// <p>The read set's sequence store ID.</p>
    pub fn sequence_store_id(&self) -> std::option::Option<&str> {
        self.sequence_store_id.as_deref()
    }
    /// <p>To ensure that jobs don't run multiple times, specify a unique token for each job.</p>
    pub fn client_token(&self) -> std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>The job's sources.</p>
    pub fn sources(
        &self,
    ) -> std::option::Option<&[crate::types::StartReadSetActivationJobSourceItem]> {
        self.sources.as_deref()
    }
}
impl StartReadSetActivationJobInput {
    /// Creates a new builder-style object to manufacture [`StartReadSetActivationJobInput`](crate::operation::start_read_set_activation_job::StartReadSetActivationJobInput).
    pub fn builder() -> crate::operation::start_read_set_activation_job::builders::StartReadSetActivationJobInputBuilder{
        crate::operation::start_read_set_activation_job::builders::StartReadSetActivationJobInputBuilder::default()
    }
}

/// A builder for [`StartReadSetActivationJobInput`](crate::operation::start_read_set_activation_job::StartReadSetActivationJobInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct StartReadSetActivationJobInputBuilder {
    pub(crate) sequence_store_id: std::option::Option<std::string::String>,
    pub(crate) client_token: std::option::Option<std::string::String>,
    pub(crate) sources:
        std::option::Option<std::vec::Vec<crate::types::StartReadSetActivationJobSourceItem>>,
}
impl StartReadSetActivationJobInputBuilder {
    /// <p>The read set's sequence store ID.</p>
    pub fn sequence_store_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.sequence_store_id = Some(input.into());
        self
    }
    /// <p>The read set's sequence store ID.</p>
    pub fn set_sequence_store_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.sequence_store_id = input;
        self
    }
    /// <p>To ensure that jobs don't run multiple times, specify a unique token for each job.</p>
    pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.client_token = Some(input.into());
        self
    }
    /// <p>To ensure that jobs don't run multiple times, specify a unique token for each job.</p>
    pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// Appends an item to `sources`.
    ///
    /// To override the contents of this collection use [`set_sources`](Self::set_sources).
    ///
    /// <p>The job's sources.</p>
    pub fn sources(mut self, input: crate::types::StartReadSetActivationJobSourceItem) -> Self {
        let mut v = self.sources.unwrap_or_default();
        v.push(input);
        self.sources = Some(v);
        self
    }
    /// <p>The job's sources.</p>
    pub fn set_sources(
        mut self,
        input: std::option::Option<
            std::vec::Vec<crate::types::StartReadSetActivationJobSourceItem>,
        >,
    ) -> Self {
        self.sources = input;
        self
    }
    /// Consumes the builder and constructs a [`StartReadSetActivationJobInput`](crate::operation::start_read_set_activation_job::StartReadSetActivationJobInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::start_read_set_activation_job::StartReadSetActivationJobInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::start_read_set_activation_job::StartReadSetActivationJobInput {
                sequence_store_id: self.sequence_store_id,
                client_token: self.client_token,
                sources: self.sources,
            },
        )
    }
}
