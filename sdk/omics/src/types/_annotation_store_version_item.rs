// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Annotation store versions. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AnnotationStoreVersionItem {
    /// <p> The store ID for an annotation store version. </p>
    pub store_id: ::std::string::String,
    /// <p> The annotation store version ID. </p>
    pub id: ::std::string::String,
    /// <p> The status of an annotation store version. </p>
    pub status: crate::types::VersionStatus,
    /// <p> The Arn for an annotation store version. </p>
    pub version_arn: ::std::string::String,
    /// <p> A name given to an annotation store version to distinguish it from others. </p>
    pub name: ::std::string::String,
    /// <p> The name of an annotation store version. </p>
    pub version_name: ::std::string::String,
    /// <p> The description of an annotation store version. </p>
    pub description: ::std::string::String,
    /// <p> The time stamp for when an annotation store version was created. </p>
    pub creation_time: ::aws_smithy_types::DateTime,
    /// <p> The time stamp for when an annotation store version was updated. </p>
    pub update_time: ::aws_smithy_types::DateTime,
    /// <p> The status of an annotation store version. </p>
    pub status_message: ::std::string::String,
    /// <p> The size of an annotation store version in Bytes. </p>
    pub version_size_bytes: i64,
}
impl AnnotationStoreVersionItem {
    /// <p> The store ID for an annotation store version. </p>
    pub fn store_id(&self) -> &str {
        use std::ops::Deref;
        self.store_id.deref()
    }
    /// <p> The annotation store version ID. </p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p> The status of an annotation store version. </p>
    pub fn status(&self) -> &crate::types::VersionStatus {
        &self.status
    }
    /// <p> The Arn for an annotation store version. </p>
    pub fn version_arn(&self) -> &str {
        use std::ops::Deref;
        self.version_arn.deref()
    }
    /// <p> A name given to an annotation store version to distinguish it from others. </p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p> The name of an annotation store version. </p>
    pub fn version_name(&self) -> &str {
        use std::ops::Deref;
        self.version_name.deref()
    }
    /// <p> The description of an annotation store version. </p>
    pub fn description(&self) -> &str {
        use std::ops::Deref;
        self.description.deref()
    }
    /// <p> The time stamp for when an annotation store version was created. </p>
    pub fn creation_time(&self) -> &::aws_smithy_types::DateTime {
        &self.creation_time
    }
    /// <p> The time stamp for when an annotation store version was updated. </p>
    pub fn update_time(&self) -> &::aws_smithy_types::DateTime {
        &self.update_time
    }
    /// <p> The status of an annotation store version. </p>
    pub fn status_message(&self) -> &str {
        use std::ops::Deref;
        self.status_message.deref()
    }
    /// <p> The size of an annotation store version in Bytes. </p>
    pub fn version_size_bytes(&self) -> i64 {
        self.version_size_bytes
    }
}
impl AnnotationStoreVersionItem {
    /// Creates a new builder-style object to manufacture [`AnnotationStoreVersionItem`](crate::types::AnnotationStoreVersionItem).
    pub fn builder() -> crate::types::builders::AnnotationStoreVersionItemBuilder {
        crate::types::builders::AnnotationStoreVersionItemBuilder::default()
    }
}

/// A builder for [`AnnotationStoreVersionItem`](crate::types::AnnotationStoreVersionItem).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AnnotationStoreVersionItemBuilder {
    pub(crate) store_id: ::std::option::Option<::std::string::String>,
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::VersionStatus>,
    pub(crate) version_arn: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) version_name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) update_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) status_message: ::std::option::Option<::std::string::String>,
    pub(crate) version_size_bytes: ::std::option::Option<i64>,
}
impl AnnotationStoreVersionItemBuilder {
    /// <p> The store ID for an annotation store version. </p>
    /// This field is required.
    pub fn store_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.store_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The store ID for an annotation store version. </p>
    pub fn set_store_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.store_id = input;
        self
    }
    /// <p> The store ID for an annotation store version. </p>
    pub fn get_store_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.store_id
    }
    /// <p> The annotation store version ID. </p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The annotation store version ID. </p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p> The annotation store version ID. </p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p> The status of an annotation store version. </p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::VersionStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p> The status of an annotation store version. </p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::VersionStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p> The status of an annotation store version. </p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::VersionStatus> {
        &self.status
    }
    /// <p> The Arn for an annotation store version. </p>
    /// This field is required.
    pub fn version_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.version_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The Arn for an annotation store version. </p>
    pub fn set_version_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.version_arn = input;
        self
    }
    /// <p> The Arn for an annotation store version. </p>
    pub fn get_version_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.version_arn
    }
    /// <p> A name given to an annotation store version to distinguish it from others. </p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> A name given to an annotation store version to distinguish it from others. </p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p> A name given to an annotation store version to distinguish it from others. </p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p> The name of an annotation store version. </p>
    /// This field is required.
    pub fn version_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.version_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The name of an annotation store version. </p>
    pub fn set_version_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.version_name = input;
        self
    }
    /// <p> The name of an annotation store version. </p>
    pub fn get_version_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.version_name
    }
    /// <p> The description of an annotation store version. </p>
    /// This field is required.
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The description of an annotation store version. </p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p> The description of an annotation store version. </p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p> The time stamp for when an annotation store version was created. </p>
    /// This field is required.
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p> The time stamp for when an annotation store version was created. </p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p> The time stamp for when an annotation store version was created. </p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// <p> The time stamp for when an annotation store version was updated. </p>
    /// This field is required.
    pub fn update_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.update_time = ::std::option::Option::Some(input);
        self
    }
    /// <p> The time stamp for when an annotation store version was updated. </p>
    pub fn set_update_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.update_time = input;
        self
    }
    /// <p> The time stamp for when an annotation store version was updated. </p>
    pub fn get_update_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.update_time
    }
    /// <p> The status of an annotation store version. </p>
    /// This field is required.
    pub fn status_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The status of an annotation store version. </p>
    pub fn set_status_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status_message = input;
        self
    }
    /// <p> The status of an annotation store version. </p>
    pub fn get_status_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.status_message
    }
    /// <p> The size of an annotation store version in Bytes. </p>
    /// This field is required.
    pub fn version_size_bytes(mut self, input: i64) -> Self {
        self.version_size_bytes = ::std::option::Option::Some(input);
        self
    }
    /// <p> The size of an annotation store version in Bytes. </p>
    pub fn set_version_size_bytes(mut self, input: ::std::option::Option<i64>) -> Self {
        self.version_size_bytes = input;
        self
    }
    /// <p> The size of an annotation store version in Bytes. </p>
    pub fn get_version_size_bytes(&self) -> &::std::option::Option<i64> {
        &self.version_size_bytes
    }
    /// Consumes the builder and constructs a [`AnnotationStoreVersionItem`](crate::types::AnnotationStoreVersionItem).
    /// This method will fail if any of the following fields are not set:
    /// - [`store_id`](crate::types::builders::AnnotationStoreVersionItemBuilder::store_id)
    /// - [`id`](crate::types::builders::AnnotationStoreVersionItemBuilder::id)
    /// - [`status`](crate::types::builders::AnnotationStoreVersionItemBuilder::status)
    /// - [`version_arn`](crate::types::builders::AnnotationStoreVersionItemBuilder::version_arn)
    /// - [`name`](crate::types::builders::AnnotationStoreVersionItemBuilder::name)
    /// - [`version_name`](crate::types::builders::AnnotationStoreVersionItemBuilder::version_name)
    /// - [`description`](crate::types::builders::AnnotationStoreVersionItemBuilder::description)
    /// - [`creation_time`](crate::types::builders::AnnotationStoreVersionItemBuilder::creation_time)
    /// - [`update_time`](crate::types::builders::AnnotationStoreVersionItemBuilder::update_time)
    /// - [`status_message`](crate::types::builders::AnnotationStoreVersionItemBuilder::status_message)
    /// - [`version_size_bytes`](crate::types::builders::AnnotationStoreVersionItemBuilder::version_size_bytes)
    pub fn build(self) -> ::std::result::Result<crate::types::AnnotationStoreVersionItem, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AnnotationStoreVersionItem {
            store_id: self.store_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "store_id",
                    "store_id was not specified but it is required when building AnnotationStoreVersionItem",
                )
            })?,
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building AnnotationStoreVersionItem",
                )
            })?,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building AnnotationStoreVersionItem",
                )
            })?,
            version_arn: self.version_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "version_arn",
                    "version_arn was not specified but it is required when building AnnotationStoreVersionItem",
                )
            })?,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building AnnotationStoreVersionItem",
                )
            })?,
            version_name: self.version_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "version_name",
                    "version_name was not specified but it is required when building AnnotationStoreVersionItem",
                )
            })?,
            description: self.description.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "description",
                    "description was not specified but it is required when building AnnotationStoreVersionItem",
                )
            })?,
            creation_time: self.creation_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "creation_time",
                    "creation_time was not specified but it is required when building AnnotationStoreVersionItem",
                )
            })?,
            update_time: self.update_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "update_time",
                    "update_time was not specified but it is required when building AnnotationStoreVersionItem",
                )
            })?,
            status_message: self.status_message.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status_message",
                    "status_message was not specified but it is required when building AnnotationStoreVersionItem",
                )
            })?,
            version_size_bytes: self.version_size_bytes.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "version_size_bytes",
                    "version_size_bytes was not specified but it is required when building AnnotationStoreVersionItem",
                )
            })?,
        })
    }
}
