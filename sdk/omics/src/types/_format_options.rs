// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Formatting options for a file.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub enum FormatOptions {
    /// <p>Options for a TSV file.</p>
    TsvOptions(crate::types::TsvOptions),
    /// <p>Options for a VCF file.</p>
    VcfOptions(crate::types::VcfOptions),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl FormatOptions {
    /// Tries to convert the enum instance into [`TsvOptions`](crate::types::FormatOptions::TsvOptions), extracting the inner [`TsvOptions`](crate::types::TsvOptions).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_tsv_options(&self) -> std::result::Result<&crate::types::TsvOptions, &Self> {
        if let FormatOptions::TsvOptions(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`TsvOptions`](crate::types::FormatOptions::TsvOptions).
    pub fn is_tsv_options(&self) -> bool {
        self.as_tsv_options().is_ok()
    }
    /// Tries to convert the enum instance into [`VcfOptions`](crate::types::FormatOptions::VcfOptions), extracting the inner [`VcfOptions`](crate::types::VcfOptions).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_vcf_options(&self) -> std::result::Result<&crate::types::VcfOptions, &Self> {
        if let FormatOptions::VcfOptions(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`VcfOptions`](crate::types::FormatOptions::VcfOptions).
    pub fn is_vcf_options(&self) -> bool {
        self.as_vcf_options().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
