// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Part of the response to ListMultipartReadSetUploads, excluding completed and aborted multipart uploads. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MultipartReadSetUploadListItem {
    /// <p> The sequence store ID used for the multipart upload. </p>
    pub sequence_store_id: ::std::string::String,
    /// <p> The ID for the initiated multipart upload. </p>
    pub upload_id: ::std::string::String,
    /// <p> The type of file the read set originated from. </p>
    pub source_file_type: crate::types::FileType,
    /// <p> The read set source's subject ID. </p>
    pub subject_id: ::std::string::String,
    /// <p> The read set source's sample ID. </p>
    pub sample_id: ::std::string::String,
    /// <p> The source of an uploaded part. </p>
    pub generated_from: ::std::string::String,
    /// <p> The source's reference ARN. </p>
    pub reference_arn: ::std::string::String,
    /// <p> The name of a read set. </p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p> The description of a read set. </p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p> Any tags you wish to add to a read set. </p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p> The time stamp for when a direct upload was created. </p>
    pub creation_time: ::aws_smithy_types::DateTime,
}
impl MultipartReadSetUploadListItem {
    /// <p> The sequence store ID used for the multipart upload. </p>
    pub fn sequence_store_id(&self) -> &str {
        use std::ops::Deref;
        self.sequence_store_id.deref()
    }
    /// <p> The ID for the initiated multipart upload. </p>
    pub fn upload_id(&self) -> &str {
        use std::ops::Deref;
        self.upload_id.deref()
    }
    /// <p> The type of file the read set originated from. </p>
    pub fn source_file_type(&self) -> &crate::types::FileType {
        &self.source_file_type
    }
    /// <p> The read set source's subject ID. </p>
    pub fn subject_id(&self) -> &str {
        use std::ops::Deref;
        self.subject_id.deref()
    }
    /// <p> The read set source's sample ID. </p>
    pub fn sample_id(&self) -> &str {
        use std::ops::Deref;
        self.sample_id.deref()
    }
    /// <p> The source of an uploaded part. </p>
    pub fn generated_from(&self) -> &str {
        use std::ops::Deref;
        self.generated_from.deref()
    }
    /// <p> The source's reference ARN. </p>
    pub fn reference_arn(&self) -> &str {
        use std::ops::Deref;
        self.reference_arn.deref()
    }
    /// <p> The name of a read set. </p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p> The description of a read set. </p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p> Any tags you wish to add to a read set. </p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
    /// <p> The time stamp for when a direct upload was created. </p>
    pub fn creation_time(&self) -> &::aws_smithy_types::DateTime {
        &self.creation_time
    }
}
impl MultipartReadSetUploadListItem {
    /// Creates a new builder-style object to manufacture [`MultipartReadSetUploadListItem`](crate::types::MultipartReadSetUploadListItem).
    pub fn builder() -> crate::types::builders::MultipartReadSetUploadListItemBuilder {
        crate::types::builders::MultipartReadSetUploadListItemBuilder::default()
    }
}

/// A builder for [`MultipartReadSetUploadListItem`](crate::types::MultipartReadSetUploadListItem).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct MultipartReadSetUploadListItemBuilder {
    pub(crate) sequence_store_id: ::std::option::Option<::std::string::String>,
    pub(crate) upload_id: ::std::option::Option<::std::string::String>,
    pub(crate) source_file_type: ::std::option::Option<crate::types::FileType>,
    pub(crate) subject_id: ::std::option::Option<::std::string::String>,
    pub(crate) sample_id: ::std::option::Option<::std::string::String>,
    pub(crate) generated_from: ::std::option::Option<::std::string::String>,
    pub(crate) reference_arn: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl MultipartReadSetUploadListItemBuilder {
    /// <p> The sequence store ID used for the multipart upload. </p>
    /// This field is required.
    pub fn sequence_store_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.sequence_store_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The sequence store ID used for the multipart upload. </p>
    pub fn set_sequence_store_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.sequence_store_id = input;
        self
    }
    /// <p> The sequence store ID used for the multipart upload. </p>
    pub fn get_sequence_store_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.sequence_store_id
    }
    /// <p> The ID for the initiated multipart upload. </p>
    /// This field is required.
    pub fn upload_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.upload_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The ID for the initiated multipart upload. </p>
    pub fn set_upload_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.upload_id = input;
        self
    }
    /// <p> The ID for the initiated multipart upload. </p>
    pub fn get_upload_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.upload_id
    }
    /// <p> The type of file the read set originated from. </p>
    /// This field is required.
    pub fn source_file_type(mut self, input: crate::types::FileType) -> Self {
        self.source_file_type = ::std::option::Option::Some(input);
        self
    }
    /// <p> The type of file the read set originated from. </p>
    pub fn set_source_file_type(mut self, input: ::std::option::Option<crate::types::FileType>) -> Self {
        self.source_file_type = input;
        self
    }
    /// <p> The type of file the read set originated from. </p>
    pub fn get_source_file_type(&self) -> &::std::option::Option<crate::types::FileType> {
        &self.source_file_type
    }
    /// <p> The read set source's subject ID. </p>
    /// This field is required.
    pub fn subject_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.subject_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The read set source's subject ID. </p>
    pub fn set_subject_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.subject_id = input;
        self
    }
    /// <p> The read set source's subject ID. </p>
    pub fn get_subject_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.subject_id
    }
    /// <p> The read set source's sample ID. </p>
    /// This field is required.
    pub fn sample_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.sample_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The read set source's sample ID. </p>
    pub fn set_sample_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.sample_id = input;
        self
    }
    /// <p> The read set source's sample ID. </p>
    pub fn get_sample_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.sample_id
    }
    /// <p> The source of an uploaded part. </p>
    /// This field is required.
    pub fn generated_from(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.generated_from = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The source of an uploaded part. </p>
    pub fn set_generated_from(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.generated_from = input;
        self
    }
    /// <p> The source of an uploaded part. </p>
    pub fn get_generated_from(&self) -> &::std::option::Option<::std::string::String> {
        &self.generated_from
    }
    /// <p> The source's reference ARN. </p>
    /// This field is required.
    pub fn reference_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.reference_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The source's reference ARN. </p>
    pub fn set_reference_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.reference_arn = input;
        self
    }
    /// <p> The source's reference ARN. </p>
    pub fn get_reference_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.reference_arn
    }
    /// <p> The name of a read set. </p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The name of a read set. </p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p> The name of a read set. </p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p> The description of a read set. </p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The description of a read set. </p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p> The description of a read set. </p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p> Any tags you wish to add to a read set. </p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p> Any tags you wish to add to a read set. </p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p> Any tags you wish to add to a read set. </p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// <p> The time stamp for when a direct upload was created. </p>
    /// This field is required.
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p> The time stamp for when a direct upload was created. </p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p> The time stamp for when a direct upload was created. </p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// Consumes the builder and constructs a [`MultipartReadSetUploadListItem`](crate::types::MultipartReadSetUploadListItem).
    /// This method will fail if any of the following fields are not set:
    /// - [`sequence_store_id`](crate::types::builders::MultipartReadSetUploadListItemBuilder::sequence_store_id)
    /// - [`upload_id`](crate::types::builders::MultipartReadSetUploadListItemBuilder::upload_id)
    /// - [`source_file_type`](crate::types::builders::MultipartReadSetUploadListItemBuilder::source_file_type)
    /// - [`subject_id`](crate::types::builders::MultipartReadSetUploadListItemBuilder::subject_id)
    /// - [`sample_id`](crate::types::builders::MultipartReadSetUploadListItemBuilder::sample_id)
    /// - [`generated_from`](crate::types::builders::MultipartReadSetUploadListItemBuilder::generated_from)
    /// - [`reference_arn`](crate::types::builders::MultipartReadSetUploadListItemBuilder::reference_arn)
    /// - [`creation_time`](crate::types::builders::MultipartReadSetUploadListItemBuilder::creation_time)
    pub fn build(self) -> ::std::result::Result<crate::types::MultipartReadSetUploadListItem, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::MultipartReadSetUploadListItem {
            sequence_store_id: self.sequence_store_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "sequence_store_id",
                    "sequence_store_id was not specified but it is required when building MultipartReadSetUploadListItem",
                )
            })?,
            upload_id: self.upload_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "upload_id",
                    "upload_id was not specified but it is required when building MultipartReadSetUploadListItem",
                )
            })?,
            source_file_type: self.source_file_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "source_file_type",
                    "source_file_type was not specified but it is required when building MultipartReadSetUploadListItem",
                )
            })?,
            subject_id: self.subject_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "subject_id",
                    "subject_id was not specified but it is required when building MultipartReadSetUploadListItem",
                )
            })?,
            sample_id: self.sample_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "sample_id",
                    "sample_id was not specified but it is required when building MultipartReadSetUploadListItem",
                )
            })?,
            generated_from: self.generated_from.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "generated_from",
                    "generated_from was not specified but it is required when building MultipartReadSetUploadListItem",
                )
            })?,
            reference_arn: self.reference_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "reference_arn",
                    "reference_arn was not specified but it is required when building MultipartReadSetUploadListItem",
                )
            })?,
            name: self.name,
            description: self.description,
            tags: self.tags,
            creation_time: self.creation_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "creation_time",
                    "creation_time was not specified but it is required when building MultipartReadSetUploadListItem",
                )
            })?,
        })
    }
}
