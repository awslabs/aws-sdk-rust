// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A filter for variant stores.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListVariantStoresFilter {
    /// <p>A status to filter on.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::StoreStatus>,
}
impl ListVariantStoresFilter {
    /// <p>A status to filter on.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::StoreStatus> {
        self.status.as_ref()
    }
}
impl ListVariantStoresFilter {
    /// Creates a new builder-style object to manufacture [`ListVariantStoresFilter`](crate::types::ListVariantStoresFilter).
    pub fn builder() -> crate::types::builders::ListVariantStoresFilterBuilder {
        crate::types::builders::ListVariantStoresFilterBuilder::default()
    }
}

/// A builder for [`ListVariantStoresFilter`](crate::types::ListVariantStoresFilter).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListVariantStoresFilterBuilder {
    pub(crate) status: std::option::Option<crate::types::StoreStatus>,
}
impl ListVariantStoresFilterBuilder {
    /// <p>A status to filter on.</p>
    pub fn status(mut self, input: crate::types::StoreStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>A status to filter on.</p>
    pub fn set_status(mut self, input: std::option::Option<crate::types::StoreStatus>) -> Self {
        self.status = input;
        self
    }
    /// Consumes the builder and constructs a [`ListVariantStoresFilter`](crate::types::ListVariantStoresFilter).
    pub fn build(self) -> crate::types::ListVariantStoresFilter {
        crate::types::ListVariantStoresFilter {
            status: self.status,
        }
    }
}
