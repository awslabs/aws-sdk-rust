// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details about a read set export job.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ExportReadSetJobDetail {
    /// <p>The job's ID.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The job's sequence store ID.</p>
    #[doc(hidden)]
    pub sequence_store_id: std::option::Option<std::string::String>,
    /// <p>The job's destination in Amazon S3.</p>
    #[doc(hidden)]
    pub destination: std::option::Option<std::string::String>,
    /// <p>The job's status.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::ReadSetExportJobStatus>,
    /// <p>When the job was created.</p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>When the job completed.</p>
    #[doc(hidden)]
    pub completion_time: std::option::Option<aws_smithy_types::DateTime>,
}
impl ExportReadSetJobDetail {
    /// <p>The job's ID.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The job's sequence store ID.</p>
    pub fn sequence_store_id(&self) -> std::option::Option<&str> {
        self.sequence_store_id.as_deref()
    }
    /// <p>The job's destination in Amazon S3.</p>
    pub fn destination(&self) -> std::option::Option<&str> {
        self.destination.as_deref()
    }
    /// <p>The job's status.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::ReadSetExportJobStatus> {
        self.status.as_ref()
    }
    /// <p>When the job was created.</p>
    pub fn creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>When the job completed.</p>
    pub fn completion_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.completion_time.as_ref()
    }
}
impl ExportReadSetJobDetail {
    /// Creates a new builder-style object to manufacture [`ExportReadSetJobDetail`](crate::types::ExportReadSetJobDetail).
    pub fn builder() -> crate::types::builders::ExportReadSetJobDetailBuilder {
        crate::types::builders::ExportReadSetJobDetailBuilder::default()
    }
}

/// A builder for [`ExportReadSetJobDetail`](crate::types::ExportReadSetJobDetail).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ExportReadSetJobDetailBuilder {
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) sequence_store_id: std::option::Option<std::string::String>,
    pub(crate) destination: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<crate::types::ReadSetExportJobStatus>,
    pub(crate) creation_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) completion_time: std::option::Option<aws_smithy_types::DateTime>,
}
impl ExportReadSetJobDetailBuilder {
    /// <p>The job's ID.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>The job's ID.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The job's sequence store ID.</p>
    pub fn sequence_store_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.sequence_store_id = Some(input.into());
        self
    }
    /// <p>The job's sequence store ID.</p>
    pub fn set_sequence_store_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.sequence_store_id = input;
        self
    }
    /// <p>The job's destination in Amazon S3.</p>
    pub fn destination(mut self, input: impl Into<std::string::String>) -> Self {
        self.destination = Some(input.into());
        self
    }
    /// <p>The job's destination in Amazon S3.</p>
    pub fn set_destination(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.destination = input;
        self
    }
    /// <p>The job's status.</p>
    pub fn status(mut self, input: crate::types::ReadSetExportJobStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The job's status.</p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::ReadSetExportJobStatus>,
    ) -> Self {
        self.status = input;
        self
    }
    /// <p>When the job was created.</p>
    pub fn creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.creation_time = Some(input);
        self
    }
    /// <p>When the job was created.</p>
    pub fn set_creation_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>When the job completed.</p>
    pub fn completion_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.completion_time = Some(input);
        self
    }
    /// <p>When the job completed.</p>
    pub fn set_completion_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.completion_time = input;
        self
    }
    /// Consumes the builder and constructs a [`ExportReadSetJobDetail`](crate::types::ExportReadSetJobDetail).
    pub fn build(self) -> crate::types::ExportReadSetJobDetail {
        crate::types::ExportReadSetJobDetail {
            id: self.id,
            sequence_store_id: self.sequence_store_id,
            destination: self.destination,
            status: self.status,
            creation_time: self.creation_time,
            completion_time: self.completion_time,
        }
    }
}
