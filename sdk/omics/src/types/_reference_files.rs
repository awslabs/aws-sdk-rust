// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A set of genome reference files.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ReferenceFiles {
    /// <p>The source file's location in Amazon S3.</p>
    #[doc(hidden)]
    pub source: std::option::Option<crate::types::FileInformation>,
    /// <p>The files' index.</p>
    #[doc(hidden)]
    pub index: std::option::Option<crate::types::FileInformation>,
}
impl ReferenceFiles {
    /// <p>The source file's location in Amazon S3.</p>
    pub fn source(&self) -> std::option::Option<&crate::types::FileInformation> {
        self.source.as_ref()
    }
    /// <p>The files' index.</p>
    pub fn index(&self) -> std::option::Option<&crate::types::FileInformation> {
        self.index.as_ref()
    }
}
impl ReferenceFiles {
    /// Creates a new builder-style object to manufacture [`ReferenceFiles`](crate::types::ReferenceFiles).
    pub fn builder() -> crate::types::builders::ReferenceFilesBuilder {
        crate::types::builders::ReferenceFilesBuilder::default()
    }
}

/// A builder for [`ReferenceFiles`](crate::types::ReferenceFiles).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ReferenceFilesBuilder {
    pub(crate) source: std::option::Option<crate::types::FileInformation>,
    pub(crate) index: std::option::Option<crate::types::FileInformation>,
}
impl ReferenceFilesBuilder {
    /// <p>The source file's location in Amazon S3.</p>
    pub fn source(mut self, input: crate::types::FileInformation) -> Self {
        self.source = Some(input);
        self
    }
    /// <p>The source file's location in Amazon S3.</p>
    pub fn set_source(mut self, input: std::option::Option<crate::types::FileInformation>) -> Self {
        self.source = input;
        self
    }
    /// <p>The files' index.</p>
    pub fn index(mut self, input: crate::types::FileInformation) -> Self {
        self.index = Some(input);
        self
    }
    /// <p>The files' index.</p>
    pub fn set_index(mut self, input: std::option::Option<crate::types::FileInformation>) -> Self {
        self.index = input;
        self
    }
    /// Consumes the builder and constructs a [`ReferenceFiles`](crate::types::ReferenceFiles).
    pub fn build(self) -> crate::types::ReferenceFiles {
        crate::types::ReferenceFiles {
            source: self.source,
            index: self.index,
        }
    }
}
