// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>File settings for a TSV store.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TsvStoreOptions {
    /// <p>The store's annotation type.</p>
    pub annotation_type: ::std::option::Option<crate::types::AnnotationType>,
    /// <p>The store's header key to column name mapping.</p>
    pub format_to_header: ::std::option::Option<::std::collections::HashMap<crate::types::FormatToHeaderKey, ::std::string::String>>,
    /// <p>The store's schema.</p>
    pub schema: ::std::option::Option<::std::vec::Vec<::std::collections::HashMap<::std::string::String, crate::types::SchemaValueType>>>,
}
impl TsvStoreOptions {
    /// <p>The store's annotation type.</p>
    pub fn annotation_type(&self) -> ::std::option::Option<&crate::types::AnnotationType> {
        self.annotation_type.as_ref()
    }
    /// <p>The store's header key to column name mapping.</p>
    pub fn format_to_header(&self) -> ::std::option::Option<&::std::collections::HashMap<crate::types::FormatToHeaderKey, ::std::string::String>> {
        self.format_to_header.as_ref()
    }
    /// <p>The store's schema.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.schema.is_none()`.
    pub fn schema(&self) -> &[::std::collections::HashMap<::std::string::String, crate::types::SchemaValueType>] {
        self.schema.as_deref().unwrap_or_default()
    }
}
impl TsvStoreOptions {
    /// Creates a new builder-style object to manufacture [`TsvStoreOptions`](crate::types::TsvStoreOptions).
    pub fn builder() -> crate::types::builders::TsvStoreOptionsBuilder {
        crate::types::builders::TsvStoreOptionsBuilder::default()
    }
}

/// A builder for [`TsvStoreOptions`](crate::types::TsvStoreOptions).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct TsvStoreOptionsBuilder {
    pub(crate) annotation_type: ::std::option::Option<crate::types::AnnotationType>,
    pub(crate) format_to_header: ::std::option::Option<::std::collections::HashMap<crate::types::FormatToHeaderKey, ::std::string::String>>,
    pub(crate) schema: ::std::option::Option<::std::vec::Vec<::std::collections::HashMap<::std::string::String, crate::types::SchemaValueType>>>,
}
impl TsvStoreOptionsBuilder {
    /// <p>The store's annotation type.</p>
    pub fn annotation_type(mut self, input: crate::types::AnnotationType) -> Self {
        self.annotation_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The store's annotation type.</p>
    pub fn set_annotation_type(mut self, input: ::std::option::Option<crate::types::AnnotationType>) -> Self {
        self.annotation_type = input;
        self
    }
    /// <p>The store's annotation type.</p>
    pub fn get_annotation_type(&self) -> &::std::option::Option<crate::types::AnnotationType> {
        &self.annotation_type
    }
    /// Adds a key-value pair to `format_to_header`.
    ///
    /// To override the contents of this collection use [`set_format_to_header`](Self::set_format_to_header).
    ///
    /// <p>The store's header key to column name mapping.</p>
    pub fn format_to_header(mut self, k: crate::types::FormatToHeaderKey, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.format_to_header.unwrap_or_default();
        hash_map.insert(k, v.into());
        self.format_to_header = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The store's header key to column name mapping.</p>
    pub fn set_format_to_header(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<crate::types::FormatToHeaderKey, ::std::string::String>>,
    ) -> Self {
        self.format_to_header = input;
        self
    }
    /// <p>The store's header key to column name mapping.</p>
    pub fn get_format_to_header(
        &self,
    ) -> &::std::option::Option<::std::collections::HashMap<crate::types::FormatToHeaderKey, ::std::string::String>> {
        &self.format_to_header
    }
    /// Appends an item to `schema`.
    ///
    /// To override the contents of this collection use [`set_schema`](Self::set_schema).
    ///
    /// <p>The store's schema.</p>
    pub fn schema(mut self, input: ::std::collections::HashMap<::std::string::String, crate::types::SchemaValueType>) -> Self {
        let mut v = self.schema.unwrap_or_default();
        v.push(input);
        self.schema = ::std::option::Option::Some(v);
        self
    }
    /// <p>The store's schema.</p>
    pub fn set_schema(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<::std::collections::HashMap<::std::string::String, crate::types::SchemaValueType>>>,
    ) -> Self {
        self.schema = input;
        self
    }
    /// <p>The store's schema.</p>
    pub fn get_schema(
        &self,
    ) -> &::std::option::Option<::std::vec::Vec<::std::collections::HashMap<::std::string::String, crate::types::SchemaValueType>>> {
        &self.schema
    }
    /// Consumes the builder and constructs a [`TsvStoreOptions`](crate::types::TsvStoreOptions).
    pub fn build(self) -> crate::types::TsvStoreOptions {
        crate::types::TsvStoreOptions {
            annotation_type: self.annotation_type,
            format_to_header: self.format_to_header,
            schema: self.schema,
        }
    }
}
