// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Files in a read set.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ReadSetFiles {
    /// <p>The location of the first file in Amazon S3.</p>
    #[doc(hidden)]
    pub source1: std::option::Option<crate::types::FileInformation>,
    /// <p>The location of the second file in Amazon S3.</p>
    #[doc(hidden)]
    pub source2: std::option::Option<crate::types::FileInformation>,
    /// <p>The files' index.</p>
    #[doc(hidden)]
    pub index: std::option::Option<crate::types::FileInformation>,
}
impl ReadSetFiles {
    /// <p>The location of the first file in Amazon S3.</p>
    pub fn source1(&self) -> std::option::Option<&crate::types::FileInformation> {
        self.source1.as_ref()
    }
    /// <p>The location of the second file in Amazon S3.</p>
    pub fn source2(&self) -> std::option::Option<&crate::types::FileInformation> {
        self.source2.as_ref()
    }
    /// <p>The files' index.</p>
    pub fn index(&self) -> std::option::Option<&crate::types::FileInformation> {
        self.index.as_ref()
    }
}
impl ReadSetFiles {
    /// Creates a new builder-style object to manufacture [`ReadSetFiles`](crate::types::ReadSetFiles).
    pub fn builder() -> crate::types::builders::ReadSetFilesBuilder {
        crate::types::builders::ReadSetFilesBuilder::default()
    }
}

/// A builder for [`ReadSetFiles`](crate::types::ReadSetFiles).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ReadSetFilesBuilder {
    pub(crate) source1: std::option::Option<crate::types::FileInformation>,
    pub(crate) source2: std::option::Option<crate::types::FileInformation>,
    pub(crate) index: std::option::Option<crate::types::FileInformation>,
}
impl ReadSetFilesBuilder {
    /// <p>The location of the first file in Amazon S3.</p>
    pub fn source1(mut self, input: crate::types::FileInformation) -> Self {
        self.source1 = Some(input);
        self
    }
    /// <p>The location of the first file in Amazon S3.</p>
    pub fn set_source1(
        mut self,
        input: std::option::Option<crate::types::FileInformation>,
    ) -> Self {
        self.source1 = input;
        self
    }
    /// <p>The location of the second file in Amazon S3.</p>
    pub fn source2(mut self, input: crate::types::FileInformation) -> Self {
        self.source2 = Some(input);
        self
    }
    /// <p>The location of the second file in Amazon S3.</p>
    pub fn set_source2(
        mut self,
        input: std::option::Option<crate::types::FileInformation>,
    ) -> Self {
        self.source2 = input;
        self
    }
    /// <p>The files' index.</p>
    pub fn index(mut self, input: crate::types::FileInformation) -> Self {
        self.index = Some(input);
        self
    }
    /// <p>The files' index.</p>
    pub fn set_index(mut self, input: std::option::Option<crate::types::FileInformation>) -> Self {
        self.index = input;
        self
    }
    /// Consumes the builder and constructs a [`ReadSetFiles`](crate::types::ReadSetFiles).
    pub fn build(self) -> crate::types::ReadSetFiles {
        crate::types::ReadSetFiles {
            source1: self.source1,
            source2: self.source2,
            index: self.index,
        }
    }
}
