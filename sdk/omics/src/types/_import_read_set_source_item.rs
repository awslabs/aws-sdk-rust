// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A source for an import read set job.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ImportReadSetSourceItem {
    /// <p>The source files' location in Amazon S3.</p>
    pub source_files: ::std::option::Option<crate::types::SourceFiles>,
    /// <p>The source's file type.</p>
    pub source_file_type: crate::types::FileType,
    /// <p>The source's status.</p>
    pub status: crate::types::ReadSetImportJobItemStatus,
    /// <p>The source's status message.</p>
    pub status_message: ::std::option::Option<::std::string::String>,
    /// <p>The source's subject ID.</p>
    pub subject_id: ::std::string::String,
    /// <p>The source's sample ID.</p>
    pub sample_id: ::std::string::String,
    /// <p>Where the source originated.</p>
    pub generated_from: ::std::option::Option<::std::string::String>,
    /// <p>The source's genome reference ARN.</p>
    pub reference_arn: ::std::option::Option<::std::string::String>,
    /// <p>The source's name.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The source's description.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The source's tags.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl ImportReadSetSourceItem {
    /// <p>The source files' location in Amazon S3.</p>
    pub fn source_files(&self) -> ::std::option::Option<&crate::types::SourceFiles> {
        self.source_files.as_ref()
    }
    /// <p>The source's file type.</p>
    pub fn source_file_type(&self) -> &crate::types::FileType {
        &self.source_file_type
    }
    /// <p>The source's status.</p>
    pub fn status(&self) -> &crate::types::ReadSetImportJobItemStatus {
        &self.status
    }
    /// <p>The source's status message.</p>
    pub fn status_message(&self) -> ::std::option::Option<&str> {
        self.status_message.as_deref()
    }
    /// <p>The source's subject ID.</p>
    pub fn subject_id(&self) -> &str {
        use std::ops::Deref;
        self.subject_id.deref()
    }
    /// <p>The source's sample ID.</p>
    pub fn sample_id(&self) -> &str {
        use std::ops::Deref;
        self.sample_id.deref()
    }
    /// <p>Where the source originated.</p>
    pub fn generated_from(&self) -> ::std::option::Option<&str> {
        self.generated_from.as_deref()
    }
    /// <p>The source's genome reference ARN.</p>
    pub fn reference_arn(&self) -> ::std::option::Option<&str> {
        self.reference_arn.as_deref()
    }
    /// <p>The source's name.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The source's description.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The source's tags.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl ImportReadSetSourceItem {
    /// Creates a new builder-style object to manufacture [`ImportReadSetSourceItem`](crate::types::ImportReadSetSourceItem).
    pub fn builder() -> crate::types::builders::ImportReadSetSourceItemBuilder {
        crate::types::builders::ImportReadSetSourceItemBuilder::default()
    }
}

/// A builder for [`ImportReadSetSourceItem`](crate::types::ImportReadSetSourceItem).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ImportReadSetSourceItemBuilder {
    pub(crate) source_files: ::std::option::Option<crate::types::SourceFiles>,
    pub(crate) source_file_type: ::std::option::Option<crate::types::FileType>,
    pub(crate) status: ::std::option::Option<crate::types::ReadSetImportJobItemStatus>,
    pub(crate) status_message: ::std::option::Option<::std::string::String>,
    pub(crate) subject_id: ::std::option::Option<::std::string::String>,
    pub(crate) sample_id: ::std::option::Option<::std::string::String>,
    pub(crate) generated_from: ::std::option::Option<::std::string::String>,
    pub(crate) reference_arn: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl ImportReadSetSourceItemBuilder {
    /// <p>The source files' location in Amazon S3.</p>
    /// This field is required.
    pub fn source_files(mut self, input: crate::types::SourceFiles) -> Self {
        self.source_files = ::std::option::Option::Some(input);
        self
    }
    /// <p>The source files' location in Amazon S3.</p>
    pub fn set_source_files(mut self, input: ::std::option::Option<crate::types::SourceFiles>) -> Self {
        self.source_files = input;
        self
    }
    /// <p>The source files' location in Amazon S3.</p>
    pub fn get_source_files(&self) -> &::std::option::Option<crate::types::SourceFiles> {
        &self.source_files
    }
    /// <p>The source's file type.</p>
    /// This field is required.
    pub fn source_file_type(mut self, input: crate::types::FileType) -> Self {
        self.source_file_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The source's file type.</p>
    pub fn set_source_file_type(mut self, input: ::std::option::Option<crate::types::FileType>) -> Self {
        self.source_file_type = input;
        self
    }
    /// <p>The source's file type.</p>
    pub fn get_source_file_type(&self) -> &::std::option::Option<crate::types::FileType> {
        &self.source_file_type
    }
    /// <p>The source's status.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::ReadSetImportJobItemStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The source's status.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ReadSetImportJobItemStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The source's status.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ReadSetImportJobItemStatus> {
        &self.status
    }
    /// <p>The source's status message.</p>
    pub fn status_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The source's status message.</p>
    pub fn set_status_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status_message = input;
        self
    }
    /// <p>The source's status message.</p>
    pub fn get_status_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.status_message
    }
    /// <p>The source's subject ID.</p>
    /// This field is required.
    pub fn subject_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.subject_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The source's subject ID.</p>
    pub fn set_subject_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.subject_id = input;
        self
    }
    /// <p>The source's subject ID.</p>
    pub fn get_subject_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.subject_id
    }
    /// <p>The source's sample ID.</p>
    /// This field is required.
    pub fn sample_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.sample_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The source's sample ID.</p>
    pub fn set_sample_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.sample_id = input;
        self
    }
    /// <p>The source's sample ID.</p>
    pub fn get_sample_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.sample_id
    }
    /// <p>Where the source originated.</p>
    pub fn generated_from(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.generated_from = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Where the source originated.</p>
    pub fn set_generated_from(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.generated_from = input;
        self
    }
    /// <p>Where the source originated.</p>
    pub fn get_generated_from(&self) -> &::std::option::Option<::std::string::String> {
        &self.generated_from
    }
    /// <p>The source's genome reference ARN.</p>
    pub fn reference_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.reference_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The source's genome reference ARN.</p>
    pub fn set_reference_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.reference_arn = input;
        self
    }
    /// <p>The source's genome reference ARN.</p>
    pub fn get_reference_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.reference_arn
    }
    /// <p>The source's name.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The source's name.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The source's name.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The source's description.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The source's description.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The source's description.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The source's tags.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The source's tags.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The source's tags.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`ImportReadSetSourceItem`](crate::types::ImportReadSetSourceItem).
    /// This method will fail if any of the following fields are not set:
    /// - [`source_file_type`](crate::types::builders::ImportReadSetSourceItemBuilder::source_file_type)
    /// - [`status`](crate::types::builders::ImportReadSetSourceItemBuilder::status)
    /// - [`subject_id`](crate::types::builders::ImportReadSetSourceItemBuilder::subject_id)
    /// - [`sample_id`](crate::types::builders::ImportReadSetSourceItemBuilder::sample_id)
    pub fn build(self) -> ::std::result::Result<crate::types::ImportReadSetSourceItem, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ImportReadSetSourceItem {
            source_files: self.source_files,
            source_file_type: self.source_file_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "source_file_type",
                    "source_file_type was not specified but it is required when building ImportReadSetSourceItem",
                )
            })?,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building ImportReadSetSourceItem",
                )
            })?,
            status_message: self.status_message,
            subject_id: self.subject_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "subject_id",
                    "subject_id was not specified but it is required when building ImportReadSetSourceItem",
                )
            })?,
            sample_id: self.sample_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "sample_id",
                    "sample_id was not specified but it is required when building ImportReadSetSourceItem",
                )
            })?,
            generated_from: self.generated_from,
            reference_arn: self.reference_arn,
            name: self.name,
            description: self.description,
            tags: self.tags,
        })
    }
}
