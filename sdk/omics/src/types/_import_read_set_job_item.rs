// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An import read set job.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ImportReadSetJobItem {
    /// <p>The job's ID.</p>
    pub id: ::std::string::String,
    /// <p>The job's sequence store ID.</p>
    pub sequence_store_id: ::std::string::String,
    /// <p>The job's service role ARN.</p>
    pub role_arn: ::std::string::String,
    /// <p>The job's status.</p>
    pub status: crate::types::ReadSetImportJobStatus,
    /// <p>When the job was created.</p>
    pub creation_time: ::aws_smithy_types::DateTime,
    /// <p>When the job completed.</p>
    pub completion_time: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl ImportReadSetJobItem {
    /// <p>The job's ID.</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>The job's sequence store ID.</p>
    pub fn sequence_store_id(&self) -> &str {
        use std::ops::Deref;
        self.sequence_store_id.deref()
    }
    /// <p>The job's service role ARN.</p>
    pub fn role_arn(&self) -> &str {
        use std::ops::Deref;
        self.role_arn.deref()
    }
    /// <p>The job's status.</p>
    pub fn status(&self) -> &crate::types::ReadSetImportJobStatus {
        &self.status
    }
    /// <p>When the job was created.</p>
    pub fn creation_time(&self) -> &::aws_smithy_types::DateTime {
        &self.creation_time
    }
    /// <p>When the job completed.</p>
    pub fn completion_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.completion_time.as_ref()
    }
}
impl ImportReadSetJobItem {
    /// Creates a new builder-style object to manufacture [`ImportReadSetJobItem`](crate::types::ImportReadSetJobItem).
    pub fn builder() -> crate::types::builders::ImportReadSetJobItemBuilder {
        crate::types::builders::ImportReadSetJobItemBuilder::default()
    }
}

/// A builder for [`ImportReadSetJobItem`](crate::types::ImportReadSetJobItem).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ImportReadSetJobItemBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) sequence_store_id: ::std::option::Option<::std::string::String>,
    pub(crate) role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::ReadSetImportJobStatus>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) completion_time: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl ImportReadSetJobItemBuilder {
    /// <p>The job's ID.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The job's ID.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The job's ID.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The job's sequence store ID.</p>
    /// This field is required.
    pub fn sequence_store_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.sequence_store_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The job's sequence store ID.</p>
    pub fn set_sequence_store_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.sequence_store_id = input;
        self
    }
    /// <p>The job's sequence store ID.</p>
    pub fn get_sequence_store_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.sequence_store_id
    }
    /// <p>The job's service role ARN.</p>
    /// This field is required.
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The job's service role ARN.</p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The job's service role ARN.</p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn
    }
    /// <p>The job's status.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::ReadSetImportJobStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The job's status.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ReadSetImportJobStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The job's status.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ReadSetImportJobStatus> {
        &self.status
    }
    /// <p>When the job was created.</p>
    /// This field is required.
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>When the job was created.</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>When the job was created.</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// <p>When the job completed.</p>
    pub fn completion_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.completion_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>When the job completed.</p>
    pub fn set_completion_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.completion_time = input;
        self
    }
    /// <p>When the job completed.</p>
    pub fn get_completion_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.completion_time
    }
    /// Consumes the builder and constructs a [`ImportReadSetJobItem`](crate::types::ImportReadSetJobItem).
    /// This method will fail if any of the following fields are not set:
    /// - [`id`](crate::types::builders::ImportReadSetJobItemBuilder::id)
    /// - [`sequence_store_id`](crate::types::builders::ImportReadSetJobItemBuilder::sequence_store_id)
    /// - [`role_arn`](crate::types::builders::ImportReadSetJobItemBuilder::role_arn)
    /// - [`status`](crate::types::builders::ImportReadSetJobItemBuilder::status)
    /// - [`creation_time`](crate::types::builders::ImportReadSetJobItemBuilder::creation_time)
    pub fn build(self) -> ::std::result::Result<crate::types::ImportReadSetJobItem, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ImportReadSetJobItem {
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building ImportReadSetJobItem",
                )
            })?,
            sequence_store_id: self.sequence_store_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "sequence_store_id",
                    "sequence_store_id was not specified but it is required when building ImportReadSetJobItem",
                )
            })?,
            role_arn: self.role_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "role_arn",
                    "role_arn was not specified but it is required when building ImportReadSetJobItem",
                )
            })?,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building ImportReadSetJobItem",
                )
            })?,
            creation_time: self.creation_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "creation_time",
                    "creation_time was not specified but it is required when building ImportReadSetJobItem",
                )
            })?,
            completion_time: self.completion_time,
        })
    }
}
