// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListWorkflowsOutput {
    /// <p>The workflows' items.</p>
    #[doc(hidden)]
    pub items: std::option::Option<std::vec::Vec<crate::model::WorkflowListItem>>,
    /// <p>A pagination token that's included if more results are available.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListWorkflowsOutput {
    /// <p>The workflows' items.</p>
    pub fn items(&self) -> std::option::Option<&[crate::model::WorkflowListItem]> {
        self.items.as_deref()
    }
    /// <p>A pagination token that's included if more results are available.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListWorkflowsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListWorkflowsOutput`](crate::output::ListWorkflowsOutput).
pub mod list_workflows_output {

    /// A builder for [`ListWorkflowsOutput`](crate::output::ListWorkflowsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) items: std::option::Option<std::vec::Vec<crate::model::WorkflowListItem>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `items`.
        ///
        /// To override the contents of this collection use [`set_items`](Self::set_items).
        ///
        /// <p>The workflows' items.</p>
        pub fn items(mut self, input: crate::model::WorkflowListItem) -> Self {
            let mut v = self.items.unwrap_or_default();
            v.push(input);
            self.items = Some(v);
            self
        }
        /// <p>The workflows' items.</p>
        pub fn set_items(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::WorkflowListItem>>,
        ) -> Self {
            self.items = input;
            self
        }
        /// <p>A pagination token that's included if more results are available.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>A pagination token that's included if more results are available.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListWorkflowsOutput`](crate::output::ListWorkflowsOutput).
        pub fn build(self) -> crate::output::ListWorkflowsOutput {
            crate::output::ListWorkflowsOutput {
                items: self.items,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListWorkflowsOutput {
    /// Creates a new builder-style object to manufacture [`ListWorkflowsOutput`](crate::output::ListWorkflowsOutput).
    pub fn builder() -> crate::output::list_workflows_output::Builder {
        crate::output::list_workflows_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateWorkflowOutput {
    /// <p>The workflow's ARN.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The workflow's ID.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The workflow's status.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::model::WorkflowStatus>,
    /// <p>The workflow's tags.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    _request_id: Option<String>,
}
impl CreateWorkflowOutput {
    /// <p>The workflow's ARN.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The workflow's ID.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The workflow's status.</p>
    pub fn status(&self) -> std::option::Option<&crate::model::WorkflowStatus> {
        self.status.as_ref()
    }
    /// <p>The workflow's tags.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateWorkflowOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateWorkflowOutput`](crate::output::CreateWorkflowOutput).
pub mod create_workflow_output {

    /// A builder for [`CreateWorkflowOutput`](crate::output::CreateWorkflowOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) status: std::option::Option<crate::model::WorkflowStatus>,
        pub(crate) tags: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The workflow's ARN.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// <p>The workflow's ARN.</p>
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// <p>The workflow's ID.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        /// <p>The workflow's ID.</p>
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// <p>The workflow's status.</p>
        pub fn status(mut self, input: crate::model::WorkflowStatus) -> Self {
            self.status = Some(input);
            self
        }
        /// <p>The workflow's status.</p>
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::WorkflowStatus>,
        ) -> Self {
            self.status = input;
            self
        }
        /// Adds a key-value pair to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>The workflow's tags.</p>
        pub fn tags(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            let mut hash_map = self.tags.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.tags = Some(hash_map);
            self
        }
        /// <p>The workflow's tags.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.tags = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateWorkflowOutput`](crate::output::CreateWorkflowOutput).
        pub fn build(self) -> crate::output::CreateWorkflowOutput {
            crate::output::CreateWorkflowOutput {
                arn: self.arn,
                id: self.id,
                status: self.status,
                tags: self.tags,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateWorkflowOutput {
    /// Creates a new builder-style object to manufacture [`CreateWorkflowOutput`](crate::output::CreateWorkflowOutput).
    pub fn builder() -> crate::output::create_workflow_output::Builder {
        crate::output::create_workflow_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteWorkflowOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteWorkflowOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteWorkflowOutput`](crate::output::DeleteWorkflowOutput).
pub mod delete_workflow_output {

    /// A builder for [`DeleteWorkflowOutput`](crate::output::DeleteWorkflowOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteWorkflowOutput`](crate::output::DeleteWorkflowOutput).
        pub fn build(self) -> crate::output::DeleteWorkflowOutput {
            crate::output::DeleteWorkflowOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteWorkflowOutput {
    /// Creates a new builder-style object to manufacture [`DeleteWorkflowOutput`](crate::output::DeleteWorkflowOutput).
    pub fn builder() -> crate::output::delete_workflow_output::Builder {
        crate::output::delete_workflow_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateWorkflowOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for UpdateWorkflowOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`UpdateWorkflowOutput`](crate::output::UpdateWorkflowOutput).
pub mod update_workflow_output {

    /// A builder for [`UpdateWorkflowOutput`](crate::output::UpdateWorkflowOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateWorkflowOutput`](crate::output::UpdateWorkflowOutput).
        pub fn build(self) -> crate::output::UpdateWorkflowOutput {
            crate::output::UpdateWorkflowOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl UpdateWorkflowOutput {
    /// Creates a new builder-style object to manufacture [`UpdateWorkflowOutput`](crate::output::UpdateWorkflowOutput).
    pub fn builder() -> crate::output::update_workflow_output::Builder {
        crate::output::update_workflow_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetWorkflowOutput {
    /// <p>The workflow's ARN.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The workflow's ID.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The workflow's status.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::model::WorkflowStatus>,
    /// <p>The workflow's type.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::model::WorkflowType>,
    /// <p>The workflow's name.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The workflow's description.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The workflow's engine.</p>
    #[doc(hidden)]
    pub engine: std::option::Option<crate::model::WorkflowEngine>,
    /// <p>The workflow's definition.</p>
    #[doc(hidden)]
    pub definition: std::option::Option<std::string::String>,
    /// <p>The path of the main definition file for the workflow.</p>
    #[doc(hidden)]
    pub main: std::option::Option<std::string::String>,
    /// <p>The workflow's digest.</p>
    #[doc(hidden)]
    pub digest: std::option::Option<std::string::String>,
    /// <p>The workflow's parameter template.</p>
    #[doc(hidden)]
    pub parameter_template: std::option::Option<
        std::collections::HashMap<std::string::String, crate::model::WorkflowParameter>,
    >,
    /// <p>The workflow's storage capacity.</p>
    #[doc(hidden)]
    pub storage_capacity: std::option::Option<i32>,
    /// <p>When the workflow was created.</p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The workflow's status message.</p>
    #[doc(hidden)]
    pub status_message: std::option::Option<std::string::String>,
    /// <p>The workflow's tags.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    _request_id: Option<String>,
}
impl GetWorkflowOutput {
    /// <p>The workflow's ARN.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The workflow's ID.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The workflow's status.</p>
    pub fn status(&self) -> std::option::Option<&crate::model::WorkflowStatus> {
        self.status.as_ref()
    }
    /// <p>The workflow's type.</p>
    pub fn r#type(&self) -> std::option::Option<&crate::model::WorkflowType> {
        self.r#type.as_ref()
    }
    /// <p>The workflow's name.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The workflow's description.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The workflow's engine.</p>
    pub fn engine(&self) -> std::option::Option<&crate::model::WorkflowEngine> {
        self.engine.as_ref()
    }
    /// <p>The workflow's definition.</p>
    pub fn definition(&self) -> std::option::Option<&str> {
        self.definition.as_deref()
    }
    /// <p>The path of the main definition file for the workflow.</p>
    pub fn main(&self) -> std::option::Option<&str> {
        self.main.as_deref()
    }
    /// <p>The workflow's digest.</p>
    pub fn digest(&self) -> std::option::Option<&str> {
        self.digest.as_deref()
    }
    /// <p>The workflow's parameter template.</p>
    pub fn parameter_template(
        &self,
    ) -> std::option::Option<
        &std::collections::HashMap<std::string::String, crate::model::WorkflowParameter>,
    > {
        self.parameter_template.as_ref()
    }
    /// <p>The workflow's storage capacity.</p>
    pub fn storage_capacity(&self) -> std::option::Option<i32> {
        self.storage_capacity
    }
    /// <p>When the workflow was created.</p>
    pub fn creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The workflow's status message.</p>
    pub fn status_message(&self) -> std::option::Option<&str> {
        self.status_message.as_deref()
    }
    /// <p>The workflow's tags.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetWorkflowOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetWorkflowOutput`](crate::output::GetWorkflowOutput).
pub mod get_workflow_output {

    /// A builder for [`GetWorkflowOutput`](crate::output::GetWorkflowOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) status: std::option::Option<crate::model::WorkflowStatus>,
        pub(crate) r#type: std::option::Option<crate::model::WorkflowType>,
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) description: std::option::Option<std::string::String>,
        pub(crate) engine: std::option::Option<crate::model::WorkflowEngine>,
        pub(crate) definition: std::option::Option<std::string::String>,
        pub(crate) main: std::option::Option<std::string::String>,
        pub(crate) digest: std::option::Option<std::string::String>,
        pub(crate) parameter_template: std::option::Option<
            std::collections::HashMap<std::string::String, crate::model::WorkflowParameter>,
        >,
        pub(crate) storage_capacity: std::option::Option<i32>,
        pub(crate) creation_time: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) status_message: std::option::Option<std::string::String>,
        pub(crate) tags: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The workflow's ARN.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// <p>The workflow's ARN.</p>
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// <p>The workflow's ID.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        /// <p>The workflow's ID.</p>
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// <p>The workflow's status.</p>
        pub fn status(mut self, input: crate::model::WorkflowStatus) -> Self {
            self.status = Some(input);
            self
        }
        /// <p>The workflow's status.</p>
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::WorkflowStatus>,
        ) -> Self {
            self.status = input;
            self
        }
        /// <p>The workflow's type.</p>
        pub fn r#type(mut self, input: crate::model::WorkflowType) -> Self {
            self.r#type = Some(input);
            self
        }
        /// <p>The workflow's type.</p>
        pub fn set_type(mut self, input: std::option::Option<crate::model::WorkflowType>) -> Self {
            self.r#type = input;
            self
        }
        /// <p>The workflow's name.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        /// <p>The workflow's name.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// <p>The workflow's description.</p>
        pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
            self.description = Some(input.into());
            self
        }
        /// <p>The workflow's description.</p>
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.description = input;
            self
        }
        /// <p>The workflow's engine.</p>
        pub fn engine(mut self, input: crate::model::WorkflowEngine) -> Self {
            self.engine = Some(input);
            self
        }
        /// <p>The workflow's engine.</p>
        pub fn set_engine(
            mut self,
            input: std::option::Option<crate::model::WorkflowEngine>,
        ) -> Self {
            self.engine = input;
            self
        }
        /// <p>The workflow's definition.</p>
        pub fn definition(mut self, input: impl Into<std::string::String>) -> Self {
            self.definition = Some(input.into());
            self
        }
        /// <p>The workflow's definition.</p>
        pub fn set_definition(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.definition = input;
            self
        }
        /// <p>The path of the main definition file for the workflow.</p>
        pub fn main(mut self, input: impl Into<std::string::String>) -> Self {
            self.main = Some(input.into());
            self
        }
        /// <p>The path of the main definition file for the workflow.</p>
        pub fn set_main(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.main = input;
            self
        }
        /// <p>The workflow's digest.</p>
        pub fn digest(mut self, input: impl Into<std::string::String>) -> Self {
            self.digest = Some(input.into());
            self
        }
        /// <p>The workflow's digest.</p>
        pub fn set_digest(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.digest = input;
            self
        }
        /// Adds a key-value pair to `parameter_template`.
        ///
        /// To override the contents of this collection use [`set_parameter_template`](Self::set_parameter_template).
        ///
        /// <p>The workflow's parameter template.</p>
        pub fn parameter_template(
            mut self,
            k: impl Into<std::string::String>,
            v: crate::model::WorkflowParameter,
        ) -> Self {
            let mut hash_map = self.parameter_template.unwrap_or_default();
            hash_map.insert(k.into(), v);
            self.parameter_template = Some(hash_map);
            self
        }
        /// <p>The workflow's parameter template.</p>
        pub fn set_parameter_template(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, crate::model::WorkflowParameter>,
            >,
        ) -> Self {
            self.parameter_template = input;
            self
        }
        /// <p>The workflow's storage capacity.</p>
        pub fn storage_capacity(mut self, input: i32) -> Self {
            self.storage_capacity = Some(input);
            self
        }
        /// <p>The workflow's storage capacity.</p>
        pub fn set_storage_capacity(mut self, input: std::option::Option<i32>) -> Self {
            self.storage_capacity = input;
            self
        }
        /// <p>When the workflow was created.</p>
        pub fn creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.creation_time = Some(input);
            self
        }
        /// <p>When the workflow was created.</p>
        pub fn set_creation_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.creation_time = input;
            self
        }
        /// <p>The workflow's status message.</p>
        pub fn status_message(mut self, input: impl Into<std::string::String>) -> Self {
            self.status_message = Some(input.into());
            self
        }
        /// <p>The workflow's status message.</p>
        pub fn set_status_message(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.status_message = input;
            self
        }
        /// Adds a key-value pair to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>The workflow's tags.</p>
        pub fn tags(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            let mut hash_map = self.tags.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.tags = Some(hash_map);
            self
        }
        /// <p>The workflow's tags.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.tags = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetWorkflowOutput`](crate::output::GetWorkflowOutput).
        pub fn build(self) -> crate::output::GetWorkflowOutput {
            crate::output::GetWorkflowOutput {
                arn: self.arn,
                id: self.id,
                status: self.status,
                r#type: self.r#type,
                name: self.name,
                description: self.description,
                engine: self.engine,
                definition: self.definition,
                main: self.main,
                digest: self.digest,
                parameter_template: self.parameter_template,
                storage_capacity: self.storage_capacity,
                creation_time: self.creation_time,
                status_message: self.status_message,
                tags: self.tags,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetWorkflowOutput {
    /// Creates a new builder-style object to manufacture [`GetWorkflowOutput`](crate::output::GetWorkflowOutput).
    pub fn builder() -> crate::output::get_workflow_output::Builder {
        crate::output::get_workflow_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListVariantStoresOutput {
    /// <p>A list of variant stores.</p>
    #[doc(hidden)]
    pub variant_stores: std::option::Option<std::vec::Vec<crate::model::VariantStoreItem>>,
    /// <p>A pagination token that's included if more results are available.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListVariantStoresOutput {
    /// <p>A list of variant stores.</p>
    pub fn variant_stores(&self) -> std::option::Option<&[crate::model::VariantStoreItem]> {
        self.variant_stores.as_deref()
    }
    /// <p>A pagination token that's included if more results are available.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListVariantStoresOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListVariantStoresOutput`](crate::output::ListVariantStoresOutput).
pub mod list_variant_stores_output {

    /// A builder for [`ListVariantStoresOutput`](crate::output::ListVariantStoresOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) variant_stores:
            std::option::Option<std::vec::Vec<crate::model::VariantStoreItem>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `variant_stores`.
        ///
        /// To override the contents of this collection use [`set_variant_stores`](Self::set_variant_stores).
        ///
        /// <p>A list of variant stores.</p>
        pub fn variant_stores(mut self, input: crate::model::VariantStoreItem) -> Self {
            let mut v = self.variant_stores.unwrap_or_default();
            v.push(input);
            self.variant_stores = Some(v);
            self
        }
        /// <p>A list of variant stores.</p>
        pub fn set_variant_stores(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::VariantStoreItem>>,
        ) -> Self {
            self.variant_stores = input;
            self
        }
        /// <p>A pagination token that's included if more results are available.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>A pagination token that's included if more results are available.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListVariantStoresOutput`](crate::output::ListVariantStoresOutput).
        pub fn build(self) -> crate::output::ListVariantStoresOutput {
            crate::output::ListVariantStoresOutput {
                variant_stores: self.variant_stores,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListVariantStoresOutput {
    /// Creates a new builder-style object to manufacture [`ListVariantStoresOutput`](crate::output::ListVariantStoresOutput).
    pub fn builder() -> crate::output::list_variant_stores_output::Builder {
        crate::output::list_variant_stores_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateVariantStoreOutput {
    /// <p>The store's ID.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The store's genome reference.</p>
    #[doc(hidden)]
    pub reference: std::option::Option<crate::model::ReferenceItem>,
    /// <p>The store's status.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::model::StoreStatus>,
    /// <p>The store's name.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>When the store was created.</p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl CreateVariantStoreOutput {
    /// <p>The store's ID.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The store's genome reference.</p>
    pub fn reference(&self) -> std::option::Option<&crate::model::ReferenceItem> {
        self.reference.as_ref()
    }
    /// <p>The store's status.</p>
    pub fn status(&self) -> std::option::Option<&crate::model::StoreStatus> {
        self.status.as_ref()
    }
    /// <p>The store's name.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>When the store was created.</p>
    pub fn creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateVariantStoreOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateVariantStoreOutput`](crate::output::CreateVariantStoreOutput).
pub mod create_variant_store_output {

    /// A builder for [`CreateVariantStoreOutput`](crate::output::CreateVariantStoreOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) reference: std::option::Option<crate::model::ReferenceItem>,
        pub(crate) status: std::option::Option<crate::model::StoreStatus>,
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) creation_time: std::option::Option<aws_smithy_types::DateTime>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The store's ID.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        /// <p>The store's ID.</p>
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// <p>The store's genome reference.</p>
        pub fn reference(mut self, input: crate::model::ReferenceItem) -> Self {
            self.reference = Some(input);
            self
        }
        /// <p>The store's genome reference.</p>
        pub fn set_reference(
            mut self,
            input: std::option::Option<crate::model::ReferenceItem>,
        ) -> Self {
            self.reference = input;
            self
        }
        /// <p>The store's status.</p>
        pub fn status(mut self, input: crate::model::StoreStatus) -> Self {
            self.status = Some(input);
            self
        }
        /// <p>The store's status.</p>
        pub fn set_status(mut self, input: std::option::Option<crate::model::StoreStatus>) -> Self {
            self.status = input;
            self
        }
        /// <p>The store's name.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        /// <p>The store's name.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// <p>When the store was created.</p>
        pub fn creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.creation_time = Some(input);
            self
        }
        /// <p>When the store was created.</p>
        pub fn set_creation_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.creation_time = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateVariantStoreOutput`](crate::output::CreateVariantStoreOutput).
        pub fn build(self) -> crate::output::CreateVariantStoreOutput {
            crate::output::CreateVariantStoreOutput {
                id: self.id,
                reference: self.reference,
                status: self.status,
                name: self.name,
                creation_time: self.creation_time,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateVariantStoreOutput {
    /// Creates a new builder-style object to manufacture [`CreateVariantStoreOutput`](crate::output::CreateVariantStoreOutput).
    pub fn builder() -> crate::output::create_variant_store_output::Builder {
        crate::output::create_variant_store_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteVariantStoreOutput {
    /// <p>The store's status.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::model::StoreStatus>,
    _request_id: Option<String>,
}
impl DeleteVariantStoreOutput {
    /// <p>The store's status.</p>
    pub fn status(&self) -> std::option::Option<&crate::model::StoreStatus> {
        self.status.as_ref()
    }
}
impl aws_http::request_id::RequestId for DeleteVariantStoreOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteVariantStoreOutput`](crate::output::DeleteVariantStoreOutput).
pub mod delete_variant_store_output {

    /// A builder for [`DeleteVariantStoreOutput`](crate::output::DeleteVariantStoreOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) status: std::option::Option<crate::model::StoreStatus>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The store's status.</p>
        pub fn status(mut self, input: crate::model::StoreStatus) -> Self {
            self.status = Some(input);
            self
        }
        /// <p>The store's status.</p>
        pub fn set_status(mut self, input: std::option::Option<crate::model::StoreStatus>) -> Self {
            self.status = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteVariantStoreOutput`](crate::output::DeleteVariantStoreOutput).
        pub fn build(self) -> crate::output::DeleteVariantStoreOutput {
            crate::output::DeleteVariantStoreOutput {
                status: self.status,
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteVariantStoreOutput {
    /// Creates a new builder-style object to manufacture [`DeleteVariantStoreOutput`](crate::output::DeleteVariantStoreOutput).
    pub fn builder() -> crate::output::delete_variant_store_output::Builder {
        crate::output::delete_variant_store_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateVariantStoreOutput {
    /// <p>The store's ID.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The store's genome reference.</p>
    #[doc(hidden)]
    pub reference: std::option::Option<crate::model::ReferenceItem>,
    /// <p>The store's status.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::model::StoreStatus>,
    /// <p>The store's name.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The store's description.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>When the store was created.</p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>When the store was updated.</p>
    #[doc(hidden)]
    pub update_time: std::option::Option<aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl UpdateVariantStoreOutput {
    /// <p>The store's ID.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The store's genome reference.</p>
    pub fn reference(&self) -> std::option::Option<&crate::model::ReferenceItem> {
        self.reference.as_ref()
    }
    /// <p>The store's status.</p>
    pub fn status(&self) -> std::option::Option<&crate::model::StoreStatus> {
        self.status.as_ref()
    }
    /// <p>The store's name.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The store's description.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>When the store was created.</p>
    pub fn creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>When the store was updated.</p>
    pub fn update_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.update_time.as_ref()
    }
}
impl aws_http::request_id::RequestId for UpdateVariantStoreOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`UpdateVariantStoreOutput`](crate::output::UpdateVariantStoreOutput).
pub mod update_variant_store_output {

    /// A builder for [`UpdateVariantStoreOutput`](crate::output::UpdateVariantStoreOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) reference: std::option::Option<crate::model::ReferenceItem>,
        pub(crate) status: std::option::Option<crate::model::StoreStatus>,
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) description: std::option::Option<std::string::String>,
        pub(crate) creation_time: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) update_time: std::option::Option<aws_smithy_types::DateTime>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The store's ID.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        /// <p>The store's ID.</p>
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// <p>The store's genome reference.</p>
        pub fn reference(mut self, input: crate::model::ReferenceItem) -> Self {
            self.reference = Some(input);
            self
        }
        /// <p>The store's genome reference.</p>
        pub fn set_reference(
            mut self,
            input: std::option::Option<crate::model::ReferenceItem>,
        ) -> Self {
            self.reference = input;
            self
        }
        /// <p>The store's status.</p>
        pub fn status(mut self, input: crate::model::StoreStatus) -> Self {
            self.status = Some(input);
            self
        }
        /// <p>The store's status.</p>
        pub fn set_status(mut self, input: std::option::Option<crate::model::StoreStatus>) -> Self {
            self.status = input;
            self
        }
        /// <p>The store's name.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        /// <p>The store's name.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// <p>The store's description.</p>
        pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
            self.description = Some(input.into());
            self
        }
        /// <p>The store's description.</p>
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.description = input;
            self
        }
        /// <p>When the store was created.</p>
        pub fn creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.creation_time = Some(input);
            self
        }
        /// <p>When the store was created.</p>
        pub fn set_creation_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.creation_time = input;
            self
        }
        /// <p>When the store was updated.</p>
        pub fn update_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.update_time = Some(input);
            self
        }
        /// <p>When the store was updated.</p>
        pub fn set_update_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.update_time = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateVariantStoreOutput`](crate::output::UpdateVariantStoreOutput).
        pub fn build(self) -> crate::output::UpdateVariantStoreOutput {
            crate::output::UpdateVariantStoreOutput {
                id: self.id,
                reference: self.reference,
                status: self.status,
                name: self.name,
                description: self.description,
                creation_time: self.creation_time,
                update_time: self.update_time,
                _request_id: self._request_id,
            }
        }
    }
}
impl UpdateVariantStoreOutput {
    /// Creates a new builder-style object to manufacture [`UpdateVariantStoreOutput`](crate::output::UpdateVariantStoreOutput).
    pub fn builder() -> crate::output::update_variant_store_output::Builder {
        crate::output::update_variant_store_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetVariantStoreOutput {
    /// <p>The store's ID.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The store's genome reference.</p>
    #[doc(hidden)]
    pub reference: std::option::Option<crate::model::ReferenceItem>,
    /// <p>The store's status.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::model::StoreStatus>,
    /// <p>The store's ARN.</p>
    #[doc(hidden)]
    pub store_arn: std::option::Option<std::string::String>,
    /// <p>The store's name.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The store's description.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The store's server-side encryption (SSE) settings.</p>
    #[doc(hidden)]
    pub sse_config: std::option::Option<crate::model::SseConfig>,
    /// <p>When the store was created.</p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>When the store was updated.</p>
    #[doc(hidden)]
    pub update_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The store's tags.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>The store's status message.</p>
    #[doc(hidden)]
    pub status_message: std::option::Option<std::string::String>,
    /// <p>The store's size in bytes.</p>
    #[doc(hidden)]
    pub store_size_bytes: std::option::Option<i64>,
    _request_id: Option<String>,
}
impl GetVariantStoreOutput {
    /// <p>The store's ID.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The store's genome reference.</p>
    pub fn reference(&self) -> std::option::Option<&crate::model::ReferenceItem> {
        self.reference.as_ref()
    }
    /// <p>The store's status.</p>
    pub fn status(&self) -> std::option::Option<&crate::model::StoreStatus> {
        self.status.as_ref()
    }
    /// <p>The store's ARN.</p>
    pub fn store_arn(&self) -> std::option::Option<&str> {
        self.store_arn.as_deref()
    }
    /// <p>The store's name.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The store's description.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The store's server-side encryption (SSE) settings.</p>
    pub fn sse_config(&self) -> std::option::Option<&crate::model::SseConfig> {
        self.sse_config.as_ref()
    }
    /// <p>When the store was created.</p>
    pub fn creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>When the store was updated.</p>
    pub fn update_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.update_time.as_ref()
    }
    /// <p>The store's tags.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
    /// <p>The store's status message.</p>
    pub fn status_message(&self) -> std::option::Option<&str> {
        self.status_message.as_deref()
    }
    /// <p>The store's size in bytes.</p>
    pub fn store_size_bytes(&self) -> std::option::Option<i64> {
        self.store_size_bytes
    }
}
impl aws_http::request_id::RequestId for GetVariantStoreOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetVariantStoreOutput`](crate::output::GetVariantStoreOutput).
pub mod get_variant_store_output {

    /// A builder for [`GetVariantStoreOutput`](crate::output::GetVariantStoreOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) reference: std::option::Option<crate::model::ReferenceItem>,
        pub(crate) status: std::option::Option<crate::model::StoreStatus>,
        pub(crate) store_arn: std::option::Option<std::string::String>,
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) description: std::option::Option<std::string::String>,
        pub(crate) sse_config: std::option::Option<crate::model::SseConfig>,
        pub(crate) creation_time: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) update_time: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) tags: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
        pub(crate) status_message: std::option::Option<std::string::String>,
        pub(crate) store_size_bytes: std::option::Option<i64>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The store's ID.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        /// <p>The store's ID.</p>
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// <p>The store's genome reference.</p>
        pub fn reference(mut self, input: crate::model::ReferenceItem) -> Self {
            self.reference = Some(input);
            self
        }
        /// <p>The store's genome reference.</p>
        pub fn set_reference(
            mut self,
            input: std::option::Option<crate::model::ReferenceItem>,
        ) -> Self {
            self.reference = input;
            self
        }
        /// <p>The store's status.</p>
        pub fn status(mut self, input: crate::model::StoreStatus) -> Self {
            self.status = Some(input);
            self
        }
        /// <p>The store's status.</p>
        pub fn set_status(mut self, input: std::option::Option<crate::model::StoreStatus>) -> Self {
            self.status = input;
            self
        }
        /// <p>The store's ARN.</p>
        pub fn store_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.store_arn = Some(input.into());
            self
        }
        /// <p>The store's ARN.</p>
        pub fn set_store_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.store_arn = input;
            self
        }
        /// <p>The store's name.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        /// <p>The store's name.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// <p>The store's description.</p>
        pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
            self.description = Some(input.into());
            self
        }
        /// <p>The store's description.</p>
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.description = input;
            self
        }
        /// <p>The store's server-side encryption (SSE) settings.</p>
        pub fn sse_config(mut self, input: crate::model::SseConfig) -> Self {
            self.sse_config = Some(input);
            self
        }
        /// <p>The store's server-side encryption (SSE) settings.</p>
        pub fn set_sse_config(
            mut self,
            input: std::option::Option<crate::model::SseConfig>,
        ) -> Self {
            self.sse_config = input;
            self
        }
        /// <p>When the store was created.</p>
        pub fn creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.creation_time = Some(input);
            self
        }
        /// <p>When the store was created.</p>
        pub fn set_creation_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.creation_time = input;
            self
        }
        /// <p>When the store was updated.</p>
        pub fn update_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.update_time = Some(input);
            self
        }
        /// <p>When the store was updated.</p>
        pub fn set_update_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.update_time = input;
            self
        }
        /// Adds a key-value pair to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>The store's tags.</p>
        pub fn tags(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            let mut hash_map = self.tags.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.tags = Some(hash_map);
            self
        }
        /// <p>The store's tags.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.tags = input;
            self
        }
        /// <p>The store's status message.</p>
        pub fn status_message(mut self, input: impl Into<std::string::String>) -> Self {
            self.status_message = Some(input.into());
            self
        }
        /// <p>The store's status message.</p>
        pub fn set_status_message(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.status_message = input;
            self
        }
        /// <p>The store's size in bytes.</p>
        pub fn store_size_bytes(mut self, input: i64) -> Self {
            self.store_size_bytes = Some(input);
            self
        }
        /// <p>The store's size in bytes.</p>
        pub fn set_store_size_bytes(mut self, input: std::option::Option<i64>) -> Self {
            self.store_size_bytes = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetVariantStoreOutput`](crate::output::GetVariantStoreOutput).
        pub fn build(self) -> crate::output::GetVariantStoreOutput {
            crate::output::GetVariantStoreOutput {
                id: self.id,
                reference: self.reference,
                status: self.status,
                store_arn: self.store_arn,
                name: self.name,
                description: self.description,
                sse_config: self.sse_config,
                creation_time: self.creation_time,
                update_time: self.update_time,
                tags: self.tags,
                status_message: self.status_message,
                store_size_bytes: self.store_size_bytes,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetVariantStoreOutput {
    /// Creates a new builder-style object to manufacture [`GetVariantStoreOutput`](crate::output::GetVariantStoreOutput).
    pub fn builder() -> crate::output::get_variant_store_output::Builder {
        crate::output::get_variant_store_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListVariantImportJobsOutput {
    /// <p>A list of jobs.</p>
    #[doc(hidden)]
    pub variant_import_jobs: std::option::Option<std::vec::Vec<crate::model::VariantImportJobItem>>,
    /// <p>A pagination token that's included if more results are available.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListVariantImportJobsOutput {
    /// <p>A list of jobs.</p>
    pub fn variant_import_jobs(
        &self,
    ) -> std::option::Option<&[crate::model::VariantImportJobItem]> {
        self.variant_import_jobs.as_deref()
    }
    /// <p>A pagination token that's included if more results are available.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListVariantImportJobsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListVariantImportJobsOutput`](crate::output::ListVariantImportJobsOutput).
pub mod list_variant_import_jobs_output {

    /// A builder for [`ListVariantImportJobsOutput`](crate::output::ListVariantImportJobsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) variant_import_jobs:
            std::option::Option<std::vec::Vec<crate::model::VariantImportJobItem>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `variant_import_jobs`.
        ///
        /// To override the contents of this collection use [`set_variant_import_jobs`](Self::set_variant_import_jobs).
        ///
        /// <p>A list of jobs.</p>
        pub fn variant_import_jobs(mut self, input: crate::model::VariantImportJobItem) -> Self {
            let mut v = self.variant_import_jobs.unwrap_or_default();
            v.push(input);
            self.variant_import_jobs = Some(v);
            self
        }
        /// <p>A list of jobs.</p>
        pub fn set_variant_import_jobs(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::VariantImportJobItem>>,
        ) -> Self {
            self.variant_import_jobs = input;
            self
        }
        /// <p>A pagination token that's included if more results are available.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>A pagination token that's included if more results are available.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListVariantImportJobsOutput`](crate::output::ListVariantImportJobsOutput).
        pub fn build(self) -> crate::output::ListVariantImportJobsOutput {
            crate::output::ListVariantImportJobsOutput {
                variant_import_jobs: self.variant_import_jobs,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListVariantImportJobsOutput {
    /// Creates a new builder-style object to manufacture [`ListVariantImportJobsOutput`](crate::output::ListVariantImportJobsOutput).
    pub fn builder() -> crate::output::list_variant_import_jobs_output::Builder {
        crate::output::list_variant_import_jobs_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StartVariantImportJobOutput {
    /// <p>The job's ID.</p>
    #[doc(hidden)]
    pub job_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl StartVariantImportJobOutput {
    /// <p>The job's ID.</p>
    pub fn job_id(&self) -> std::option::Option<&str> {
        self.job_id.as_deref()
    }
}
impl aws_http::request_id::RequestId for StartVariantImportJobOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`StartVariantImportJobOutput`](crate::output::StartVariantImportJobOutput).
pub mod start_variant_import_job_output {

    /// A builder for [`StartVariantImportJobOutput`](crate::output::StartVariantImportJobOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) job_id: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The job's ID.</p>
        pub fn job_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.job_id = Some(input.into());
            self
        }
        /// <p>The job's ID.</p>
        pub fn set_job_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.job_id = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`StartVariantImportJobOutput`](crate::output::StartVariantImportJobOutput).
        pub fn build(self) -> crate::output::StartVariantImportJobOutput {
            crate::output::StartVariantImportJobOutput {
                job_id: self.job_id,
                _request_id: self._request_id,
            }
        }
    }
}
impl StartVariantImportJobOutput {
    /// Creates a new builder-style object to manufacture [`StartVariantImportJobOutput`](crate::output::StartVariantImportJobOutput).
    pub fn builder() -> crate::output::start_variant_import_job_output::Builder {
        crate::output::start_variant_import_job_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CancelVariantImportJobOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for CancelVariantImportJobOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CancelVariantImportJobOutput`](crate::output::CancelVariantImportJobOutput).
pub mod cancel_variant_import_job_output {

    /// A builder for [`CancelVariantImportJobOutput`](crate::output::CancelVariantImportJobOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CancelVariantImportJobOutput`](crate::output::CancelVariantImportJobOutput).
        pub fn build(self) -> crate::output::CancelVariantImportJobOutput {
            crate::output::CancelVariantImportJobOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl CancelVariantImportJobOutput {
    /// Creates a new builder-style object to manufacture [`CancelVariantImportJobOutput`](crate::output::CancelVariantImportJobOutput).
    pub fn builder() -> crate::output::cancel_variant_import_job_output::Builder {
        crate::output::cancel_variant_import_job_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetVariantImportJobOutput {
    /// <p>The job's ID.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The job's destination variant store.</p>
    #[doc(hidden)]
    pub destination_name: std::option::Option<std::string::String>,
    /// <p>The job's service role ARN.</p>
    #[doc(hidden)]
    pub role_arn: std::option::Option<std::string::String>,
    /// <p>The job's status.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::model::JobStatus>,
    /// <p>The job's status message.</p>
    #[doc(hidden)]
    pub status_message: std::option::Option<std::string::String>,
    /// <p>When the job was created.</p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>When the job was updated.</p>
    #[doc(hidden)]
    pub update_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>When the job completed.</p>
    #[doc(hidden)]
    pub completion_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The job's items.</p>
    #[doc(hidden)]
    pub items: std::option::Option<std::vec::Vec<crate::model::VariantImportItemDetail>>,
    /// <p>The job's left normalization setting.</p>
    #[doc(hidden)]
    pub run_left_normalization: bool,
    _request_id: Option<String>,
}
impl GetVariantImportJobOutput {
    /// <p>The job's ID.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The job's destination variant store.</p>
    pub fn destination_name(&self) -> std::option::Option<&str> {
        self.destination_name.as_deref()
    }
    /// <p>The job's service role ARN.</p>
    pub fn role_arn(&self) -> std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>The job's status.</p>
    pub fn status(&self) -> std::option::Option<&crate::model::JobStatus> {
        self.status.as_ref()
    }
    /// <p>The job's status message.</p>
    pub fn status_message(&self) -> std::option::Option<&str> {
        self.status_message.as_deref()
    }
    /// <p>When the job was created.</p>
    pub fn creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>When the job was updated.</p>
    pub fn update_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.update_time.as_ref()
    }
    /// <p>When the job completed.</p>
    pub fn completion_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.completion_time.as_ref()
    }
    /// <p>The job's items.</p>
    pub fn items(&self) -> std::option::Option<&[crate::model::VariantImportItemDetail]> {
        self.items.as_deref()
    }
    /// <p>The job's left normalization setting.</p>
    pub fn run_left_normalization(&self) -> bool {
        self.run_left_normalization
    }
}
impl aws_http::request_id::RequestId for GetVariantImportJobOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetVariantImportJobOutput`](crate::output::GetVariantImportJobOutput).
pub mod get_variant_import_job_output {

    /// A builder for [`GetVariantImportJobOutput`](crate::output::GetVariantImportJobOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) destination_name: std::option::Option<std::string::String>,
        pub(crate) role_arn: std::option::Option<std::string::String>,
        pub(crate) status: std::option::Option<crate::model::JobStatus>,
        pub(crate) status_message: std::option::Option<std::string::String>,
        pub(crate) creation_time: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) update_time: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) completion_time: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) items: std::option::Option<std::vec::Vec<crate::model::VariantImportItemDetail>>,
        pub(crate) run_left_normalization: std::option::Option<bool>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The job's ID.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        /// <p>The job's ID.</p>
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// <p>The job's destination variant store.</p>
        pub fn destination_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.destination_name = Some(input.into());
            self
        }
        /// <p>The job's destination variant store.</p>
        pub fn set_destination_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.destination_name = input;
            self
        }
        /// <p>The job's service role ARN.</p>
        pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.role_arn = Some(input.into());
            self
        }
        /// <p>The job's service role ARN.</p>
        pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.role_arn = input;
            self
        }
        /// <p>The job's status.</p>
        pub fn status(mut self, input: crate::model::JobStatus) -> Self {
            self.status = Some(input);
            self
        }
        /// <p>The job's status.</p>
        pub fn set_status(mut self, input: std::option::Option<crate::model::JobStatus>) -> Self {
            self.status = input;
            self
        }
        /// <p>The job's status message.</p>
        pub fn status_message(mut self, input: impl Into<std::string::String>) -> Self {
            self.status_message = Some(input.into());
            self
        }
        /// <p>The job's status message.</p>
        pub fn set_status_message(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.status_message = input;
            self
        }
        /// <p>When the job was created.</p>
        pub fn creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.creation_time = Some(input);
            self
        }
        /// <p>When the job was created.</p>
        pub fn set_creation_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.creation_time = input;
            self
        }
        /// <p>When the job was updated.</p>
        pub fn update_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.update_time = Some(input);
            self
        }
        /// <p>When the job was updated.</p>
        pub fn set_update_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.update_time = input;
            self
        }
        /// <p>When the job completed.</p>
        pub fn completion_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.completion_time = Some(input);
            self
        }
        /// <p>When the job completed.</p>
        pub fn set_completion_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.completion_time = input;
            self
        }
        /// Appends an item to `items`.
        ///
        /// To override the contents of this collection use [`set_items`](Self::set_items).
        ///
        /// <p>The job's items.</p>
        pub fn items(mut self, input: crate::model::VariantImportItemDetail) -> Self {
            let mut v = self.items.unwrap_or_default();
            v.push(input);
            self.items = Some(v);
            self
        }
        /// <p>The job's items.</p>
        pub fn set_items(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::VariantImportItemDetail>>,
        ) -> Self {
            self.items = input;
            self
        }
        /// <p>The job's left normalization setting.</p>
        pub fn run_left_normalization(mut self, input: bool) -> Self {
            self.run_left_normalization = Some(input);
            self
        }
        /// <p>The job's left normalization setting.</p>
        pub fn set_run_left_normalization(mut self, input: std::option::Option<bool>) -> Self {
            self.run_left_normalization = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetVariantImportJobOutput`](crate::output::GetVariantImportJobOutput).
        pub fn build(self) -> crate::output::GetVariantImportJobOutput {
            crate::output::GetVariantImportJobOutput {
                id: self.id,
                destination_name: self.destination_name,
                role_arn: self.role_arn,
                status: self.status,
                status_message: self.status_message,
                creation_time: self.creation_time,
                update_time: self.update_time,
                completion_time: self.completion_time,
                items: self.items,
                run_left_normalization: self.run_left_normalization.unwrap_or_default(),
                _request_id: self._request_id,
            }
        }
    }
}
impl GetVariantImportJobOutput {
    /// Creates a new builder-style object to manufacture [`GetVariantImportJobOutput`](crate::output::GetVariantImportJobOutput).
    pub fn builder() -> crate::output::get_variant_import_job_output::Builder {
        crate::output::get_variant_import_job_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UntagResourceOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for UntagResourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`UntagResourceOutput`](crate::output::UntagResourceOutput).
pub mod untag_resource_output {

    /// A builder for [`UntagResourceOutput`](crate::output::UntagResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UntagResourceOutput`](crate::output::UntagResourceOutput).
        pub fn build(self) -> crate::output::UntagResourceOutput {
            crate::output::UntagResourceOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl UntagResourceOutput {
    /// Creates a new builder-style object to manufacture [`UntagResourceOutput`](crate::output::UntagResourceOutput).
    pub fn builder() -> crate::output::untag_resource_output::Builder {
        crate::output::untag_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TagResourceOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for TagResourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`TagResourceOutput`](crate::output::TagResourceOutput).
pub mod tag_resource_output {

    /// A builder for [`TagResourceOutput`](crate::output::TagResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`TagResourceOutput`](crate::output::TagResourceOutput).
        pub fn build(self) -> crate::output::TagResourceOutput {
            crate::output::TagResourceOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl TagResourceOutput {
    /// Creates a new builder-style object to manufacture [`TagResourceOutput`](crate::output::TagResourceOutput).
    pub fn builder() -> crate::output::tag_resource_output::Builder {
        crate::output::tag_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListTagsForResourceOutput {
    /// <p>A list of tags.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    _request_id: Option<String>,
}
impl ListTagsForResourceOutput {
    /// <p>A list of tags.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl aws_http::request_id::RequestId for ListTagsForResourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
pub mod list_tags_for_resource_output {

    /// A builder for [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) tags: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Adds a key-value pair to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>A list of tags.</p>
        pub fn tags(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            let mut hash_map = self.tags.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.tags = Some(hash_map);
            self
        }
        /// <p>A list of tags.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.tags = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
        pub fn build(self) -> crate::output::ListTagsForResourceOutput {
            crate::output::ListTagsForResourceOutput {
                tags: self.tags,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListTagsForResourceOutput {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
    pub fn builder() -> crate::output::list_tags_for_resource_output::Builder {
        crate::output::list_tags_for_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StartReadSetImportJobOutput {
    /// <p>The job's ID.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The read set's sequence store ID.</p>
    #[doc(hidden)]
    pub sequence_store_id: std::option::Option<std::string::String>,
    /// <p>The job's service role ARN.</p>
    #[doc(hidden)]
    pub role_arn: std::option::Option<std::string::String>,
    /// <p>The job's status.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::model::ReadSetImportJobStatus>,
    /// <p>When the job was created.</p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl StartReadSetImportJobOutput {
    /// <p>The job's ID.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The read set's sequence store ID.</p>
    pub fn sequence_store_id(&self) -> std::option::Option<&str> {
        self.sequence_store_id.as_deref()
    }
    /// <p>The job's service role ARN.</p>
    pub fn role_arn(&self) -> std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>The job's status.</p>
    pub fn status(&self) -> std::option::Option<&crate::model::ReadSetImportJobStatus> {
        self.status.as_ref()
    }
    /// <p>When the job was created.</p>
    pub fn creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
}
impl aws_http::request_id::RequestId for StartReadSetImportJobOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`StartReadSetImportJobOutput`](crate::output::StartReadSetImportJobOutput).
pub mod start_read_set_import_job_output {

    /// A builder for [`StartReadSetImportJobOutput`](crate::output::StartReadSetImportJobOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) sequence_store_id: std::option::Option<std::string::String>,
        pub(crate) role_arn: std::option::Option<std::string::String>,
        pub(crate) status: std::option::Option<crate::model::ReadSetImportJobStatus>,
        pub(crate) creation_time: std::option::Option<aws_smithy_types::DateTime>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The job's ID.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        /// <p>The job's ID.</p>
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// <p>The read set's sequence store ID.</p>
        pub fn sequence_store_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.sequence_store_id = Some(input.into());
            self
        }
        /// <p>The read set's sequence store ID.</p>
        pub fn set_sequence_store_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.sequence_store_id = input;
            self
        }
        /// <p>The job's service role ARN.</p>
        pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.role_arn = Some(input.into());
            self
        }
        /// <p>The job's service role ARN.</p>
        pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.role_arn = input;
            self
        }
        /// <p>The job's status.</p>
        pub fn status(mut self, input: crate::model::ReadSetImportJobStatus) -> Self {
            self.status = Some(input);
            self
        }
        /// <p>The job's status.</p>
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::ReadSetImportJobStatus>,
        ) -> Self {
            self.status = input;
            self
        }
        /// <p>When the job was created.</p>
        pub fn creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.creation_time = Some(input);
            self
        }
        /// <p>When the job was created.</p>
        pub fn set_creation_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.creation_time = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`StartReadSetImportJobOutput`](crate::output::StartReadSetImportJobOutput).
        pub fn build(self) -> crate::output::StartReadSetImportJobOutput {
            crate::output::StartReadSetImportJobOutput {
                id: self.id,
                sequence_store_id: self.sequence_store_id,
                role_arn: self.role_arn,
                status: self.status,
                creation_time: self.creation_time,
                _request_id: self._request_id,
            }
        }
    }
}
impl StartReadSetImportJobOutput {
    /// Creates a new builder-style object to manufacture [`StartReadSetImportJobOutput`](crate::output::StartReadSetImportJobOutput).
    pub fn builder() -> crate::output::start_read_set_import_job_output::Builder {
        crate::output::start_read_set_import_job_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StartReadSetExportJobOutput {
    /// <p>The job's ID.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The read set's sequence store ID.</p>
    #[doc(hidden)]
    pub sequence_store_id: std::option::Option<std::string::String>,
    /// <p>The job's output location.</p>
    #[doc(hidden)]
    pub destination: std::option::Option<std::string::String>,
    /// <p>The job's status.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::model::ReadSetExportJobStatus>,
    /// <p>When the job was created.</p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl StartReadSetExportJobOutput {
    /// <p>The job's ID.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The read set's sequence store ID.</p>
    pub fn sequence_store_id(&self) -> std::option::Option<&str> {
        self.sequence_store_id.as_deref()
    }
    /// <p>The job's output location.</p>
    pub fn destination(&self) -> std::option::Option<&str> {
        self.destination.as_deref()
    }
    /// <p>The job's status.</p>
    pub fn status(&self) -> std::option::Option<&crate::model::ReadSetExportJobStatus> {
        self.status.as_ref()
    }
    /// <p>When the job was created.</p>
    pub fn creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
}
impl aws_http::request_id::RequestId for StartReadSetExportJobOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`StartReadSetExportJobOutput`](crate::output::StartReadSetExportJobOutput).
pub mod start_read_set_export_job_output {

    /// A builder for [`StartReadSetExportJobOutput`](crate::output::StartReadSetExportJobOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) sequence_store_id: std::option::Option<std::string::String>,
        pub(crate) destination: std::option::Option<std::string::String>,
        pub(crate) status: std::option::Option<crate::model::ReadSetExportJobStatus>,
        pub(crate) creation_time: std::option::Option<aws_smithy_types::DateTime>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The job's ID.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        /// <p>The job's ID.</p>
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// <p>The read set's sequence store ID.</p>
        pub fn sequence_store_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.sequence_store_id = Some(input.into());
            self
        }
        /// <p>The read set's sequence store ID.</p>
        pub fn set_sequence_store_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.sequence_store_id = input;
            self
        }
        /// <p>The job's output location.</p>
        pub fn destination(mut self, input: impl Into<std::string::String>) -> Self {
            self.destination = Some(input.into());
            self
        }
        /// <p>The job's output location.</p>
        pub fn set_destination(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.destination = input;
            self
        }
        /// <p>The job's status.</p>
        pub fn status(mut self, input: crate::model::ReadSetExportJobStatus) -> Self {
            self.status = Some(input);
            self
        }
        /// <p>The job's status.</p>
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::ReadSetExportJobStatus>,
        ) -> Self {
            self.status = input;
            self
        }
        /// <p>When the job was created.</p>
        pub fn creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.creation_time = Some(input);
            self
        }
        /// <p>When the job was created.</p>
        pub fn set_creation_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.creation_time = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`StartReadSetExportJobOutput`](crate::output::StartReadSetExportJobOutput).
        pub fn build(self) -> crate::output::StartReadSetExportJobOutput {
            crate::output::StartReadSetExportJobOutput {
                id: self.id,
                sequence_store_id: self.sequence_store_id,
                destination: self.destination,
                status: self.status,
                creation_time: self.creation_time,
                _request_id: self._request_id,
            }
        }
    }
}
impl StartReadSetExportJobOutput {
    /// Creates a new builder-style object to manufacture [`StartReadSetExportJobOutput`](crate::output::StartReadSetExportJobOutput).
    pub fn builder() -> crate::output::start_read_set_export_job_output::Builder {
        crate::output::start_read_set_export_job_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StartReadSetActivationJobOutput {
    /// <p>The job's ID.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The read set's sequence store ID.</p>
    #[doc(hidden)]
    pub sequence_store_id: std::option::Option<std::string::String>,
    /// <p>The job's status.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::model::ReadSetActivationJobStatus>,
    /// <p>When the job was created.</p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl StartReadSetActivationJobOutput {
    /// <p>The job's ID.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The read set's sequence store ID.</p>
    pub fn sequence_store_id(&self) -> std::option::Option<&str> {
        self.sequence_store_id.as_deref()
    }
    /// <p>The job's status.</p>
    pub fn status(&self) -> std::option::Option<&crate::model::ReadSetActivationJobStatus> {
        self.status.as_ref()
    }
    /// <p>When the job was created.</p>
    pub fn creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
}
impl aws_http::request_id::RequestId for StartReadSetActivationJobOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`StartReadSetActivationJobOutput`](crate::output::StartReadSetActivationJobOutput).
pub mod start_read_set_activation_job_output {

    /// A builder for [`StartReadSetActivationJobOutput`](crate::output::StartReadSetActivationJobOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) sequence_store_id: std::option::Option<std::string::String>,
        pub(crate) status: std::option::Option<crate::model::ReadSetActivationJobStatus>,
        pub(crate) creation_time: std::option::Option<aws_smithy_types::DateTime>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The job's ID.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        /// <p>The job's ID.</p>
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// <p>The read set's sequence store ID.</p>
        pub fn sequence_store_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.sequence_store_id = Some(input.into());
            self
        }
        /// <p>The read set's sequence store ID.</p>
        pub fn set_sequence_store_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.sequence_store_id = input;
            self
        }
        /// <p>The job's status.</p>
        pub fn status(mut self, input: crate::model::ReadSetActivationJobStatus) -> Self {
            self.status = Some(input);
            self
        }
        /// <p>The job's status.</p>
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::ReadSetActivationJobStatus>,
        ) -> Self {
            self.status = input;
            self
        }
        /// <p>When the job was created.</p>
        pub fn creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.creation_time = Some(input);
            self
        }
        /// <p>When the job was created.</p>
        pub fn set_creation_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.creation_time = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`StartReadSetActivationJobOutput`](crate::output::StartReadSetActivationJobOutput).
        pub fn build(self) -> crate::output::StartReadSetActivationJobOutput {
            crate::output::StartReadSetActivationJobOutput {
                id: self.id,
                sequence_store_id: self.sequence_store_id,
                status: self.status,
                creation_time: self.creation_time,
                _request_id: self._request_id,
            }
        }
    }
}
impl StartReadSetActivationJobOutput {
    /// Creates a new builder-style object to manufacture [`StartReadSetActivationJobOutput`](crate::output::StartReadSetActivationJobOutput).
    pub fn builder() -> crate::output::start_read_set_activation_job_output::Builder {
        crate::output::start_read_set_activation_job_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListReadSetImportJobsOutput {
    /// <p>A pagination token that's included if more results are available.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>A list of jobs.</p>
    #[doc(hidden)]
    pub import_jobs: std::option::Option<std::vec::Vec<crate::model::ImportReadSetJobItem>>,
    _request_id: Option<String>,
}
impl ListReadSetImportJobsOutput {
    /// <p>A pagination token that's included if more results are available.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>A list of jobs.</p>
    pub fn import_jobs(&self) -> std::option::Option<&[crate::model::ImportReadSetJobItem]> {
        self.import_jobs.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListReadSetImportJobsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListReadSetImportJobsOutput`](crate::output::ListReadSetImportJobsOutput).
pub mod list_read_set_import_jobs_output {

    /// A builder for [`ListReadSetImportJobsOutput`](crate::output::ListReadSetImportJobsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) import_jobs:
            std::option::Option<std::vec::Vec<crate::model::ImportReadSetJobItem>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>A pagination token that's included if more results are available.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>A pagination token that's included if more results are available.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Appends an item to `import_jobs`.
        ///
        /// To override the contents of this collection use [`set_import_jobs`](Self::set_import_jobs).
        ///
        /// <p>A list of jobs.</p>
        pub fn import_jobs(mut self, input: crate::model::ImportReadSetJobItem) -> Self {
            let mut v = self.import_jobs.unwrap_or_default();
            v.push(input);
            self.import_jobs = Some(v);
            self
        }
        /// <p>A list of jobs.</p>
        pub fn set_import_jobs(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ImportReadSetJobItem>>,
        ) -> Self {
            self.import_jobs = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListReadSetImportJobsOutput`](crate::output::ListReadSetImportJobsOutput).
        pub fn build(self) -> crate::output::ListReadSetImportJobsOutput {
            crate::output::ListReadSetImportJobsOutput {
                next_token: self.next_token,
                import_jobs: self.import_jobs,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListReadSetImportJobsOutput {
    /// Creates a new builder-style object to manufacture [`ListReadSetImportJobsOutput`](crate::output::ListReadSetImportJobsOutput).
    pub fn builder() -> crate::output::list_read_set_import_jobs_output::Builder {
        crate::output::list_read_set_import_jobs_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListReadSetExportJobsOutput {
    /// <p>A pagination token that's included if more results are available.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>A list of jobs.</p>
    #[doc(hidden)]
    pub export_jobs: std::option::Option<std::vec::Vec<crate::model::ExportReadSetJobDetail>>,
    _request_id: Option<String>,
}
impl ListReadSetExportJobsOutput {
    /// <p>A pagination token that's included if more results are available.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>A list of jobs.</p>
    pub fn export_jobs(&self) -> std::option::Option<&[crate::model::ExportReadSetJobDetail]> {
        self.export_jobs.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListReadSetExportJobsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListReadSetExportJobsOutput`](crate::output::ListReadSetExportJobsOutput).
pub mod list_read_set_export_jobs_output {

    /// A builder for [`ListReadSetExportJobsOutput`](crate::output::ListReadSetExportJobsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) export_jobs:
            std::option::Option<std::vec::Vec<crate::model::ExportReadSetJobDetail>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>A pagination token that's included if more results are available.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>A pagination token that's included if more results are available.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Appends an item to `export_jobs`.
        ///
        /// To override the contents of this collection use [`set_export_jobs`](Self::set_export_jobs).
        ///
        /// <p>A list of jobs.</p>
        pub fn export_jobs(mut self, input: crate::model::ExportReadSetJobDetail) -> Self {
            let mut v = self.export_jobs.unwrap_or_default();
            v.push(input);
            self.export_jobs = Some(v);
            self
        }
        /// <p>A list of jobs.</p>
        pub fn set_export_jobs(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ExportReadSetJobDetail>>,
        ) -> Self {
            self.export_jobs = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListReadSetExportJobsOutput`](crate::output::ListReadSetExportJobsOutput).
        pub fn build(self) -> crate::output::ListReadSetExportJobsOutput {
            crate::output::ListReadSetExportJobsOutput {
                next_token: self.next_token,
                export_jobs: self.export_jobs,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListReadSetExportJobsOutput {
    /// Creates a new builder-style object to manufacture [`ListReadSetExportJobsOutput`](crate::output::ListReadSetExportJobsOutput).
    pub fn builder() -> crate::output::list_read_set_export_jobs_output::Builder {
        crate::output::list_read_set_export_jobs_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListReadSetActivationJobsOutput {
    /// <p>A pagination token that's included if more results are available.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>A list of jobs.</p>
    #[doc(hidden)]
    pub activation_jobs: std::option::Option<std::vec::Vec<crate::model::ActivateReadSetJobItem>>,
    _request_id: Option<String>,
}
impl ListReadSetActivationJobsOutput {
    /// <p>A pagination token that's included if more results are available.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>A list of jobs.</p>
    pub fn activation_jobs(&self) -> std::option::Option<&[crate::model::ActivateReadSetJobItem]> {
        self.activation_jobs.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListReadSetActivationJobsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListReadSetActivationJobsOutput`](crate::output::ListReadSetActivationJobsOutput).
pub mod list_read_set_activation_jobs_output {

    /// A builder for [`ListReadSetActivationJobsOutput`](crate::output::ListReadSetActivationJobsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) activation_jobs:
            std::option::Option<std::vec::Vec<crate::model::ActivateReadSetJobItem>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>A pagination token that's included if more results are available.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>A pagination token that's included if more results are available.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Appends an item to `activation_jobs`.
        ///
        /// To override the contents of this collection use [`set_activation_jobs`](Self::set_activation_jobs).
        ///
        /// <p>A list of jobs.</p>
        pub fn activation_jobs(mut self, input: crate::model::ActivateReadSetJobItem) -> Self {
            let mut v = self.activation_jobs.unwrap_or_default();
            v.push(input);
            self.activation_jobs = Some(v);
            self
        }
        /// <p>A list of jobs.</p>
        pub fn set_activation_jobs(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ActivateReadSetJobItem>>,
        ) -> Self {
            self.activation_jobs = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListReadSetActivationJobsOutput`](crate::output::ListReadSetActivationJobsOutput).
        pub fn build(self) -> crate::output::ListReadSetActivationJobsOutput {
            crate::output::ListReadSetActivationJobsOutput {
                next_token: self.next_token,
                activation_jobs: self.activation_jobs,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListReadSetActivationJobsOutput {
    /// Creates a new builder-style object to manufacture [`ListReadSetActivationJobsOutput`](crate::output::ListReadSetActivationJobsOutput).
    pub fn builder() -> crate::output::list_read_set_activation_jobs_output::Builder {
        crate::output::list_read_set_activation_jobs_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetReadSetImportJobOutput {
    /// <p>The job's ID.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The job's sequence store ID.</p>
    #[doc(hidden)]
    pub sequence_store_id: std::option::Option<std::string::String>,
    /// <p>The job's service role ARN.</p>
    #[doc(hidden)]
    pub role_arn: std::option::Option<std::string::String>,
    /// <p>The job's status.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::model::ReadSetImportJobStatus>,
    /// <p>The job's status message.</p>
    #[doc(hidden)]
    pub status_message: std::option::Option<std::string::String>,
    /// <p>When the job was created.</p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>When the job completed.</p>
    #[doc(hidden)]
    pub completion_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The job's sources.</p>
    #[doc(hidden)]
    pub sources: std::option::Option<std::vec::Vec<crate::model::ImportReadSetSourceItem>>,
    _request_id: Option<String>,
}
impl GetReadSetImportJobOutput {
    /// <p>The job's ID.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The job's sequence store ID.</p>
    pub fn sequence_store_id(&self) -> std::option::Option<&str> {
        self.sequence_store_id.as_deref()
    }
    /// <p>The job's service role ARN.</p>
    pub fn role_arn(&self) -> std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>The job's status.</p>
    pub fn status(&self) -> std::option::Option<&crate::model::ReadSetImportJobStatus> {
        self.status.as_ref()
    }
    /// <p>The job's status message.</p>
    pub fn status_message(&self) -> std::option::Option<&str> {
        self.status_message.as_deref()
    }
    /// <p>When the job was created.</p>
    pub fn creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>When the job completed.</p>
    pub fn completion_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.completion_time.as_ref()
    }
    /// <p>The job's sources.</p>
    pub fn sources(&self) -> std::option::Option<&[crate::model::ImportReadSetSourceItem]> {
        self.sources.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetReadSetImportJobOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetReadSetImportJobOutput`](crate::output::GetReadSetImportJobOutput).
pub mod get_read_set_import_job_output {

    /// A builder for [`GetReadSetImportJobOutput`](crate::output::GetReadSetImportJobOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) sequence_store_id: std::option::Option<std::string::String>,
        pub(crate) role_arn: std::option::Option<std::string::String>,
        pub(crate) status: std::option::Option<crate::model::ReadSetImportJobStatus>,
        pub(crate) status_message: std::option::Option<std::string::String>,
        pub(crate) creation_time: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) completion_time: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) sources:
            std::option::Option<std::vec::Vec<crate::model::ImportReadSetSourceItem>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The job's ID.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        /// <p>The job's ID.</p>
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// <p>The job's sequence store ID.</p>
        pub fn sequence_store_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.sequence_store_id = Some(input.into());
            self
        }
        /// <p>The job's sequence store ID.</p>
        pub fn set_sequence_store_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.sequence_store_id = input;
            self
        }
        /// <p>The job's service role ARN.</p>
        pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.role_arn = Some(input.into());
            self
        }
        /// <p>The job's service role ARN.</p>
        pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.role_arn = input;
            self
        }
        /// <p>The job's status.</p>
        pub fn status(mut self, input: crate::model::ReadSetImportJobStatus) -> Self {
            self.status = Some(input);
            self
        }
        /// <p>The job's status.</p>
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::ReadSetImportJobStatus>,
        ) -> Self {
            self.status = input;
            self
        }
        /// <p>The job's status message.</p>
        pub fn status_message(mut self, input: impl Into<std::string::String>) -> Self {
            self.status_message = Some(input.into());
            self
        }
        /// <p>The job's status message.</p>
        pub fn set_status_message(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.status_message = input;
            self
        }
        /// <p>When the job was created.</p>
        pub fn creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.creation_time = Some(input);
            self
        }
        /// <p>When the job was created.</p>
        pub fn set_creation_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.creation_time = input;
            self
        }
        /// <p>When the job completed.</p>
        pub fn completion_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.completion_time = Some(input);
            self
        }
        /// <p>When the job completed.</p>
        pub fn set_completion_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.completion_time = input;
            self
        }
        /// Appends an item to `sources`.
        ///
        /// To override the contents of this collection use [`set_sources`](Self::set_sources).
        ///
        /// <p>The job's sources.</p>
        pub fn sources(mut self, input: crate::model::ImportReadSetSourceItem) -> Self {
            let mut v = self.sources.unwrap_or_default();
            v.push(input);
            self.sources = Some(v);
            self
        }
        /// <p>The job's sources.</p>
        pub fn set_sources(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ImportReadSetSourceItem>>,
        ) -> Self {
            self.sources = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetReadSetImportJobOutput`](crate::output::GetReadSetImportJobOutput).
        pub fn build(self) -> crate::output::GetReadSetImportJobOutput {
            crate::output::GetReadSetImportJobOutput {
                id: self.id,
                sequence_store_id: self.sequence_store_id,
                role_arn: self.role_arn,
                status: self.status,
                status_message: self.status_message,
                creation_time: self.creation_time,
                completion_time: self.completion_time,
                sources: self.sources,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetReadSetImportJobOutput {
    /// Creates a new builder-style object to manufacture [`GetReadSetImportJobOutput`](crate::output::GetReadSetImportJobOutput).
    pub fn builder() -> crate::output::get_read_set_import_job_output::Builder {
        crate::output::get_read_set_import_job_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetReadSetExportJobOutput {
    /// <p>The job's ID.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The job's sequence store ID.</p>
    #[doc(hidden)]
    pub sequence_store_id: std::option::Option<std::string::String>,
    /// <p>The job's destination in Amazon S3.</p>
    #[doc(hidden)]
    pub destination: std::option::Option<std::string::String>,
    /// <p>The job's status.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::model::ReadSetExportJobStatus>,
    /// <p>The job's status message.</p>
    #[doc(hidden)]
    pub status_message: std::option::Option<std::string::String>,
    /// <p>When the job was created.</p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>When the job completed.</p>
    #[doc(hidden)]
    pub completion_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The job's read sets.</p>
    #[doc(hidden)]
    pub read_sets: std::option::Option<std::vec::Vec<crate::model::ExportReadSetDetail>>,
    _request_id: Option<String>,
}
impl GetReadSetExportJobOutput {
    /// <p>The job's ID.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The job's sequence store ID.</p>
    pub fn sequence_store_id(&self) -> std::option::Option<&str> {
        self.sequence_store_id.as_deref()
    }
    /// <p>The job's destination in Amazon S3.</p>
    pub fn destination(&self) -> std::option::Option<&str> {
        self.destination.as_deref()
    }
    /// <p>The job's status.</p>
    pub fn status(&self) -> std::option::Option<&crate::model::ReadSetExportJobStatus> {
        self.status.as_ref()
    }
    /// <p>The job's status message.</p>
    pub fn status_message(&self) -> std::option::Option<&str> {
        self.status_message.as_deref()
    }
    /// <p>When the job was created.</p>
    pub fn creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>When the job completed.</p>
    pub fn completion_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.completion_time.as_ref()
    }
    /// <p>The job's read sets.</p>
    pub fn read_sets(&self) -> std::option::Option<&[crate::model::ExportReadSetDetail]> {
        self.read_sets.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetReadSetExportJobOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetReadSetExportJobOutput`](crate::output::GetReadSetExportJobOutput).
pub mod get_read_set_export_job_output {

    /// A builder for [`GetReadSetExportJobOutput`](crate::output::GetReadSetExportJobOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) sequence_store_id: std::option::Option<std::string::String>,
        pub(crate) destination: std::option::Option<std::string::String>,
        pub(crate) status: std::option::Option<crate::model::ReadSetExportJobStatus>,
        pub(crate) status_message: std::option::Option<std::string::String>,
        pub(crate) creation_time: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) completion_time: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) read_sets: std::option::Option<std::vec::Vec<crate::model::ExportReadSetDetail>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The job's ID.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        /// <p>The job's ID.</p>
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// <p>The job's sequence store ID.</p>
        pub fn sequence_store_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.sequence_store_id = Some(input.into());
            self
        }
        /// <p>The job's sequence store ID.</p>
        pub fn set_sequence_store_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.sequence_store_id = input;
            self
        }
        /// <p>The job's destination in Amazon S3.</p>
        pub fn destination(mut self, input: impl Into<std::string::String>) -> Self {
            self.destination = Some(input.into());
            self
        }
        /// <p>The job's destination in Amazon S3.</p>
        pub fn set_destination(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.destination = input;
            self
        }
        /// <p>The job's status.</p>
        pub fn status(mut self, input: crate::model::ReadSetExportJobStatus) -> Self {
            self.status = Some(input);
            self
        }
        /// <p>The job's status.</p>
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::ReadSetExportJobStatus>,
        ) -> Self {
            self.status = input;
            self
        }
        /// <p>The job's status message.</p>
        pub fn status_message(mut self, input: impl Into<std::string::String>) -> Self {
            self.status_message = Some(input.into());
            self
        }
        /// <p>The job's status message.</p>
        pub fn set_status_message(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.status_message = input;
            self
        }
        /// <p>When the job was created.</p>
        pub fn creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.creation_time = Some(input);
            self
        }
        /// <p>When the job was created.</p>
        pub fn set_creation_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.creation_time = input;
            self
        }
        /// <p>When the job completed.</p>
        pub fn completion_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.completion_time = Some(input);
            self
        }
        /// <p>When the job completed.</p>
        pub fn set_completion_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.completion_time = input;
            self
        }
        /// Appends an item to `read_sets`.
        ///
        /// To override the contents of this collection use [`set_read_sets`](Self::set_read_sets).
        ///
        /// <p>The job's read sets.</p>
        pub fn read_sets(mut self, input: crate::model::ExportReadSetDetail) -> Self {
            let mut v = self.read_sets.unwrap_or_default();
            v.push(input);
            self.read_sets = Some(v);
            self
        }
        /// <p>The job's read sets.</p>
        pub fn set_read_sets(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ExportReadSetDetail>>,
        ) -> Self {
            self.read_sets = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetReadSetExportJobOutput`](crate::output::GetReadSetExportJobOutput).
        pub fn build(self) -> crate::output::GetReadSetExportJobOutput {
            crate::output::GetReadSetExportJobOutput {
                id: self.id,
                sequence_store_id: self.sequence_store_id,
                destination: self.destination,
                status: self.status,
                status_message: self.status_message,
                creation_time: self.creation_time,
                completion_time: self.completion_time,
                read_sets: self.read_sets,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetReadSetExportJobOutput {
    /// Creates a new builder-style object to manufacture [`GetReadSetExportJobOutput`](crate::output::GetReadSetExportJobOutput).
    pub fn builder() -> crate::output::get_read_set_export_job_output::Builder {
        crate::output::get_read_set_export_job_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetReadSetActivationJobOutput {
    /// <p>The job's ID.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The job's sequence store ID.</p>
    #[doc(hidden)]
    pub sequence_store_id: std::option::Option<std::string::String>,
    /// <p>The job's status.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::model::ReadSetActivationJobStatus>,
    /// <p>The job's status message.</p>
    #[doc(hidden)]
    pub status_message: std::option::Option<std::string::String>,
    /// <p>When the job was created.</p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>When the job completed.</p>
    #[doc(hidden)]
    pub completion_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The job's sources.</p>
    #[doc(hidden)]
    pub sources: std::option::Option<std::vec::Vec<crate::model::ActivateReadSetSourceItem>>,
    _request_id: Option<String>,
}
impl GetReadSetActivationJobOutput {
    /// <p>The job's ID.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The job's sequence store ID.</p>
    pub fn sequence_store_id(&self) -> std::option::Option<&str> {
        self.sequence_store_id.as_deref()
    }
    /// <p>The job's status.</p>
    pub fn status(&self) -> std::option::Option<&crate::model::ReadSetActivationJobStatus> {
        self.status.as_ref()
    }
    /// <p>The job's status message.</p>
    pub fn status_message(&self) -> std::option::Option<&str> {
        self.status_message.as_deref()
    }
    /// <p>When the job was created.</p>
    pub fn creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>When the job completed.</p>
    pub fn completion_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.completion_time.as_ref()
    }
    /// <p>The job's sources.</p>
    pub fn sources(&self) -> std::option::Option<&[crate::model::ActivateReadSetSourceItem]> {
        self.sources.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetReadSetActivationJobOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetReadSetActivationJobOutput`](crate::output::GetReadSetActivationJobOutput).
pub mod get_read_set_activation_job_output {

    /// A builder for [`GetReadSetActivationJobOutput`](crate::output::GetReadSetActivationJobOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) sequence_store_id: std::option::Option<std::string::String>,
        pub(crate) status: std::option::Option<crate::model::ReadSetActivationJobStatus>,
        pub(crate) status_message: std::option::Option<std::string::String>,
        pub(crate) creation_time: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) completion_time: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) sources:
            std::option::Option<std::vec::Vec<crate::model::ActivateReadSetSourceItem>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The job's ID.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        /// <p>The job's ID.</p>
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// <p>The job's sequence store ID.</p>
        pub fn sequence_store_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.sequence_store_id = Some(input.into());
            self
        }
        /// <p>The job's sequence store ID.</p>
        pub fn set_sequence_store_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.sequence_store_id = input;
            self
        }
        /// <p>The job's status.</p>
        pub fn status(mut self, input: crate::model::ReadSetActivationJobStatus) -> Self {
            self.status = Some(input);
            self
        }
        /// <p>The job's status.</p>
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::ReadSetActivationJobStatus>,
        ) -> Self {
            self.status = input;
            self
        }
        /// <p>The job's status message.</p>
        pub fn status_message(mut self, input: impl Into<std::string::String>) -> Self {
            self.status_message = Some(input.into());
            self
        }
        /// <p>The job's status message.</p>
        pub fn set_status_message(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.status_message = input;
            self
        }
        /// <p>When the job was created.</p>
        pub fn creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.creation_time = Some(input);
            self
        }
        /// <p>When the job was created.</p>
        pub fn set_creation_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.creation_time = input;
            self
        }
        /// <p>When the job completed.</p>
        pub fn completion_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.completion_time = Some(input);
            self
        }
        /// <p>When the job completed.</p>
        pub fn set_completion_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.completion_time = input;
            self
        }
        /// Appends an item to `sources`.
        ///
        /// To override the contents of this collection use [`set_sources`](Self::set_sources).
        ///
        /// <p>The job's sources.</p>
        pub fn sources(mut self, input: crate::model::ActivateReadSetSourceItem) -> Self {
            let mut v = self.sources.unwrap_or_default();
            v.push(input);
            self.sources = Some(v);
            self
        }
        /// <p>The job's sources.</p>
        pub fn set_sources(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ActivateReadSetSourceItem>>,
        ) -> Self {
            self.sources = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetReadSetActivationJobOutput`](crate::output::GetReadSetActivationJobOutput).
        pub fn build(self) -> crate::output::GetReadSetActivationJobOutput {
            crate::output::GetReadSetActivationJobOutput {
                id: self.id,
                sequence_store_id: self.sequence_store_id,
                status: self.status,
                status_message: self.status_message,
                creation_time: self.creation_time,
                completion_time: self.completion_time,
                sources: self.sources,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetReadSetActivationJobOutput {
    /// Creates a new builder-style object to manufacture [`GetReadSetActivationJobOutput`](crate::output::GetReadSetActivationJobOutput).
    pub fn builder() -> crate::output::get_read_set_activation_job_output::Builder {
        crate::output::get_read_set_activation_job_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListSequenceStoresOutput {
    /// <p>A pagination token that's included if more results are available.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>A list of sequence stores.</p>
    #[doc(hidden)]
    pub sequence_stores: std::option::Option<std::vec::Vec<crate::model::SequenceStoreDetail>>,
    _request_id: Option<String>,
}
impl ListSequenceStoresOutput {
    /// <p>A pagination token that's included if more results are available.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>A list of sequence stores.</p>
    pub fn sequence_stores(&self) -> std::option::Option<&[crate::model::SequenceStoreDetail]> {
        self.sequence_stores.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListSequenceStoresOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListSequenceStoresOutput`](crate::output::ListSequenceStoresOutput).
pub mod list_sequence_stores_output {

    /// A builder for [`ListSequenceStoresOutput`](crate::output::ListSequenceStoresOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) sequence_stores:
            std::option::Option<std::vec::Vec<crate::model::SequenceStoreDetail>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>A pagination token that's included if more results are available.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>A pagination token that's included if more results are available.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Appends an item to `sequence_stores`.
        ///
        /// To override the contents of this collection use [`set_sequence_stores`](Self::set_sequence_stores).
        ///
        /// <p>A list of sequence stores.</p>
        pub fn sequence_stores(mut self, input: crate::model::SequenceStoreDetail) -> Self {
            let mut v = self.sequence_stores.unwrap_or_default();
            v.push(input);
            self.sequence_stores = Some(v);
            self
        }
        /// <p>A list of sequence stores.</p>
        pub fn set_sequence_stores(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::SequenceStoreDetail>>,
        ) -> Self {
            self.sequence_stores = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListSequenceStoresOutput`](crate::output::ListSequenceStoresOutput).
        pub fn build(self) -> crate::output::ListSequenceStoresOutput {
            crate::output::ListSequenceStoresOutput {
                next_token: self.next_token,
                sequence_stores: self.sequence_stores,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListSequenceStoresOutput {
    /// Creates a new builder-style object to manufacture [`ListSequenceStoresOutput`](crate::output::ListSequenceStoresOutput).
    pub fn builder() -> crate::output::list_sequence_stores_output::Builder {
        crate::output::list_sequence_stores_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateSequenceStoreOutput {
    /// <p>The store's ID.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The store's ARN.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The store's name.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The store's description.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The store's SSE settings.</p>
    #[doc(hidden)]
    pub sse_config: std::option::Option<crate::model::SseConfig>,
    /// <p>When the store was created.</p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl CreateSequenceStoreOutput {
    /// <p>The store's ID.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The store's ARN.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The store's name.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The store's description.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The store's SSE settings.</p>
    pub fn sse_config(&self) -> std::option::Option<&crate::model::SseConfig> {
        self.sse_config.as_ref()
    }
    /// <p>When the store was created.</p>
    pub fn creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateSequenceStoreOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateSequenceStoreOutput`](crate::output::CreateSequenceStoreOutput).
pub mod create_sequence_store_output {

    /// A builder for [`CreateSequenceStoreOutput`](crate::output::CreateSequenceStoreOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) description: std::option::Option<std::string::String>,
        pub(crate) sse_config: std::option::Option<crate::model::SseConfig>,
        pub(crate) creation_time: std::option::Option<aws_smithy_types::DateTime>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The store's ID.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        /// <p>The store's ID.</p>
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// <p>The store's ARN.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// <p>The store's ARN.</p>
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// <p>The store's name.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        /// <p>The store's name.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// <p>The store's description.</p>
        pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
            self.description = Some(input.into());
            self
        }
        /// <p>The store's description.</p>
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.description = input;
            self
        }
        /// <p>The store's SSE settings.</p>
        pub fn sse_config(mut self, input: crate::model::SseConfig) -> Self {
            self.sse_config = Some(input);
            self
        }
        /// <p>The store's SSE settings.</p>
        pub fn set_sse_config(
            mut self,
            input: std::option::Option<crate::model::SseConfig>,
        ) -> Self {
            self.sse_config = input;
            self
        }
        /// <p>When the store was created.</p>
        pub fn creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.creation_time = Some(input);
            self
        }
        /// <p>When the store was created.</p>
        pub fn set_creation_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.creation_time = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateSequenceStoreOutput`](crate::output::CreateSequenceStoreOutput).
        pub fn build(self) -> crate::output::CreateSequenceStoreOutput {
            crate::output::CreateSequenceStoreOutput {
                id: self.id,
                arn: self.arn,
                name: self.name,
                description: self.description,
                sse_config: self.sse_config,
                creation_time: self.creation_time,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateSequenceStoreOutput {
    /// Creates a new builder-style object to manufacture [`CreateSequenceStoreOutput`](crate::output::CreateSequenceStoreOutput).
    pub fn builder() -> crate::output::create_sequence_store_output::Builder {
        crate::output::create_sequence_store_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteSequenceStoreOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteSequenceStoreOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteSequenceStoreOutput`](crate::output::DeleteSequenceStoreOutput).
pub mod delete_sequence_store_output {

    /// A builder for [`DeleteSequenceStoreOutput`](crate::output::DeleteSequenceStoreOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteSequenceStoreOutput`](crate::output::DeleteSequenceStoreOutput).
        pub fn build(self) -> crate::output::DeleteSequenceStoreOutput {
            crate::output::DeleteSequenceStoreOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteSequenceStoreOutput {
    /// Creates a new builder-style object to manufacture [`DeleteSequenceStoreOutput`](crate::output::DeleteSequenceStoreOutput).
    pub fn builder() -> crate::output::delete_sequence_store_output::Builder {
        crate::output::delete_sequence_store_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetSequenceStoreOutput {
    /// <p>The store's ID.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The store's ARN.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The store's name.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The store's description.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The store's server-side encryption (SSE) settings.</p>
    #[doc(hidden)]
    pub sse_config: std::option::Option<crate::model::SseConfig>,
    /// <p>When the store was created.</p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl GetSequenceStoreOutput {
    /// <p>The store's ID.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The store's ARN.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The store's name.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The store's description.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The store's server-side encryption (SSE) settings.</p>
    pub fn sse_config(&self) -> std::option::Option<&crate::model::SseConfig> {
        self.sse_config.as_ref()
    }
    /// <p>When the store was created.</p>
    pub fn creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetSequenceStoreOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetSequenceStoreOutput`](crate::output::GetSequenceStoreOutput).
pub mod get_sequence_store_output {

    /// A builder for [`GetSequenceStoreOutput`](crate::output::GetSequenceStoreOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) description: std::option::Option<std::string::String>,
        pub(crate) sse_config: std::option::Option<crate::model::SseConfig>,
        pub(crate) creation_time: std::option::Option<aws_smithy_types::DateTime>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The store's ID.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        /// <p>The store's ID.</p>
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// <p>The store's ARN.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// <p>The store's ARN.</p>
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// <p>The store's name.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        /// <p>The store's name.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// <p>The store's description.</p>
        pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
            self.description = Some(input.into());
            self
        }
        /// <p>The store's description.</p>
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.description = input;
            self
        }
        /// <p>The store's server-side encryption (SSE) settings.</p>
        pub fn sse_config(mut self, input: crate::model::SseConfig) -> Self {
            self.sse_config = Some(input);
            self
        }
        /// <p>The store's server-side encryption (SSE) settings.</p>
        pub fn set_sse_config(
            mut self,
            input: std::option::Option<crate::model::SseConfig>,
        ) -> Self {
            self.sse_config = input;
            self
        }
        /// <p>When the store was created.</p>
        pub fn creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.creation_time = Some(input);
            self
        }
        /// <p>When the store was created.</p>
        pub fn set_creation_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.creation_time = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetSequenceStoreOutput`](crate::output::GetSequenceStoreOutput).
        pub fn build(self) -> crate::output::GetSequenceStoreOutput {
            crate::output::GetSequenceStoreOutput {
                id: self.id,
                arn: self.arn,
                name: self.name,
                description: self.description,
                sse_config: self.sse_config,
                creation_time: self.creation_time,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetSequenceStoreOutput {
    /// Creates a new builder-style object to manufacture [`GetSequenceStoreOutput`](crate::output::GetSequenceStoreOutput).
    pub fn builder() -> crate::output::get_sequence_store_output::Builder {
        crate::output::get_sequence_store_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct GetReadSetOutput {
    /// <p>The read set file payload.</p>
    pub payload: aws_smithy_http::byte_stream::ByteStream,
    _request_id: Option<String>,
}
impl GetReadSetOutput {
    /// <p>The read set file payload.</p>
    pub fn payload(&self) -> &aws_smithy_http::byte_stream::ByteStream {
        &self.payload
    }
}
impl aws_http::request_id::RequestId for GetReadSetOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetReadSetOutput`](crate::output::GetReadSetOutput).
pub mod get_read_set_output {

    /// A builder for [`GetReadSetOutput`](crate::output::GetReadSetOutput).
    #[non_exhaustive]
    #[derive(std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) payload: std::option::Option<aws_smithy_http::byte_stream::ByteStream>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The read set file payload.</p>
        pub fn payload(mut self, input: aws_smithy_http::byte_stream::ByteStream) -> Self {
            self.payload = Some(input);
            self
        }
        /// <p>The read set file payload.</p>
        pub fn set_payload(
            mut self,
            input: std::option::Option<aws_smithy_http::byte_stream::ByteStream>,
        ) -> Self {
            self.payload = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetReadSetOutput`](crate::output::GetReadSetOutput).
        pub fn build(self) -> crate::output::GetReadSetOutput {
            crate::output::GetReadSetOutput {
                payload: self.payload.unwrap_or_default(),
                _request_id: self._request_id,
            }
        }
    }
}
impl GetReadSetOutput {
    /// Creates a new builder-style object to manufacture [`GetReadSetOutput`](crate::output::GetReadSetOutput).
    pub fn builder() -> crate::output::get_read_set_output::Builder {
        crate::output::get_read_set_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BatchDeleteReadSetOutput {
    /// <p>Errors returned by individual delete operations.</p>
    #[doc(hidden)]
    pub errors: std::option::Option<std::vec::Vec<crate::model::ReadSetBatchError>>,
    _request_id: Option<String>,
}
impl BatchDeleteReadSetOutput {
    /// <p>Errors returned by individual delete operations.</p>
    pub fn errors(&self) -> std::option::Option<&[crate::model::ReadSetBatchError]> {
        self.errors.as_deref()
    }
}
impl aws_http::request_id::RequestId for BatchDeleteReadSetOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`BatchDeleteReadSetOutput`](crate::output::BatchDeleteReadSetOutput).
pub mod batch_delete_read_set_output {

    /// A builder for [`BatchDeleteReadSetOutput`](crate::output::BatchDeleteReadSetOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) errors: std::option::Option<std::vec::Vec<crate::model::ReadSetBatchError>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `errors`.
        ///
        /// To override the contents of this collection use [`set_errors`](Self::set_errors).
        ///
        /// <p>Errors returned by individual delete operations.</p>
        pub fn errors(mut self, input: crate::model::ReadSetBatchError) -> Self {
            let mut v = self.errors.unwrap_or_default();
            v.push(input);
            self.errors = Some(v);
            self
        }
        /// <p>Errors returned by individual delete operations.</p>
        pub fn set_errors(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ReadSetBatchError>>,
        ) -> Self {
            self.errors = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`BatchDeleteReadSetOutput`](crate::output::BatchDeleteReadSetOutput).
        pub fn build(self) -> crate::output::BatchDeleteReadSetOutput {
            crate::output::BatchDeleteReadSetOutput {
                errors: self.errors,
                _request_id: self._request_id,
            }
        }
    }
}
impl BatchDeleteReadSetOutput {
    /// Creates a new builder-style object to manufacture [`BatchDeleteReadSetOutput`](crate::output::BatchDeleteReadSetOutput).
    pub fn builder() -> crate::output::batch_delete_read_set_output::Builder {
        crate::output::batch_delete_read_set_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListReadSetsOutput {
    /// <p>A pagination token that's included if more results are available.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>A list of read sets.</p>
    #[doc(hidden)]
    pub read_sets: std::option::Option<std::vec::Vec<crate::model::ReadSetListItem>>,
    _request_id: Option<String>,
}
impl ListReadSetsOutput {
    /// <p>A pagination token that's included if more results are available.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>A list of read sets.</p>
    pub fn read_sets(&self) -> std::option::Option<&[crate::model::ReadSetListItem]> {
        self.read_sets.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListReadSetsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListReadSetsOutput`](crate::output::ListReadSetsOutput).
pub mod list_read_sets_output {

    /// A builder for [`ListReadSetsOutput`](crate::output::ListReadSetsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) read_sets: std::option::Option<std::vec::Vec<crate::model::ReadSetListItem>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>A pagination token that's included if more results are available.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>A pagination token that's included if more results are available.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Appends an item to `read_sets`.
        ///
        /// To override the contents of this collection use [`set_read_sets`](Self::set_read_sets).
        ///
        /// <p>A list of read sets.</p>
        pub fn read_sets(mut self, input: crate::model::ReadSetListItem) -> Self {
            let mut v = self.read_sets.unwrap_or_default();
            v.push(input);
            self.read_sets = Some(v);
            self
        }
        /// <p>A list of read sets.</p>
        pub fn set_read_sets(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ReadSetListItem>>,
        ) -> Self {
            self.read_sets = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListReadSetsOutput`](crate::output::ListReadSetsOutput).
        pub fn build(self) -> crate::output::ListReadSetsOutput {
            crate::output::ListReadSetsOutput {
                next_token: self.next_token,
                read_sets: self.read_sets,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListReadSetsOutput {
    /// Creates a new builder-style object to manufacture [`ListReadSetsOutput`](crate::output::ListReadSetsOutput).
    pub fn builder() -> crate::output::list_read_sets_output::Builder {
        crate::output::list_read_sets_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetReadSetMetadataOutput {
    /// <p>The read set's ID.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The read set's ARN.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The read set's sequence store ID.</p>
    #[doc(hidden)]
    pub sequence_store_id: std::option::Option<std::string::String>,
    /// <p>The read set's subject ID.</p>
    #[doc(hidden)]
    pub subject_id: std::option::Option<std::string::String>,
    /// <p>The read set's sample ID.</p>
    #[doc(hidden)]
    pub sample_id: std::option::Option<std::string::String>,
    /// <p>The read set's status.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::model::ReadSetStatus>,
    /// <p>The read set's name.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The read set's description.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The read set's file type.</p>
    #[doc(hidden)]
    pub file_type: std::option::Option<crate::model::FileType>,
    /// <p>When the read set was created.</p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The read set's sequence information.</p>
    #[doc(hidden)]
    pub sequence_information: std::option::Option<crate::model::SequenceInformation>,
    /// <p>The read set's genome reference ARN.</p>
    #[doc(hidden)]
    pub reference_arn: std::option::Option<std::string::String>,
    /// <p>The read set's files.</p>
    #[doc(hidden)]
    pub files: std::option::Option<crate::model::ReadSetFiles>,
    _request_id: Option<String>,
}
impl GetReadSetMetadataOutput {
    /// <p>The read set's ID.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The read set's ARN.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The read set's sequence store ID.</p>
    pub fn sequence_store_id(&self) -> std::option::Option<&str> {
        self.sequence_store_id.as_deref()
    }
    /// <p>The read set's subject ID.</p>
    pub fn subject_id(&self) -> std::option::Option<&str> {
        self.subject_id.as_deref()
    }
    /// <p>The read set's sample ID.</p>
    pub fn sample_id(&self) -> std::option::Option<&str> {
        self.sample_id.as_deref()
    }
    /// <p>The read set's status.</p>
    pub fn status(&self) -> std::option::Option<&crate::model::ReadSetStatus> {
        self.status.as_ref()
    }
    /// <p>The read set's name.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The read set's description.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The read set's file type.</p>
    pub fn file_type(&self) -> std::option::Option<&crate::model::FileType> {
        self.file_type.as_ref()
    }
    /// <p>When the read set was created.</p>
    pub fn creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The read set's sequence information.</p>
    pub fn sequence_information(&self) -> std::option::Option<&crate::model::SequenceInformation> {
        self.sequence_information.as_ref()
    }
    /// <p>The read set's genome reference ARN.</p>
    pub fn reference_arn(&self) -> std::option::Option<&str> {
        self.reference_arn.as_deref()
    }
    /// <p>The read set's files.</p>
    pub fn files(&self) -> std::option::Option<&crate::model::ReadSetFiles> {
        self.files.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetReadSetMetadataOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetReadSetMetadataOutput`](crate::output::GetReadSetMetadataOutput).
pub mod get_read_set_metadata_output {

    /// A builder for [`GetReadSetMetadataOutput`](crate::output::GetReadSetMetadataOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) sequence_store_id: std::option::Option<std::string::String>,
        pub(crate) subject_id: std::option::Option<std::string::String>,
        pub(crate) sample_id: std::option::Option<std::string::String>,
        pub(crate) status: std::option::Option<crate::model::ReadSetStatus>,
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) description: std::option::Option<std::string::String>,
        pub(crate) file_type: std::option::Option<crate::model::FileType>,
        pub(crate) creation_time: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) sequence_information: std::option::Option<crate::model::SequenceInformation>,
        pub(crate) reference_arn: std::option::Option<std::string::String>,
        pub(crate) files: std::option::Option<crate::model::ReadSetFiles>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The read set's ID.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        /// <p>The read set's ID.</p>
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// <p>The read set's ARN.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// <p>The read set's ARN.</p>
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// <p>The read set's sequence store ID.</p>
        pub fn sequence_store_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.sequence_store_id = Some(input.into());
            self
        }
        /// <p>The read set's sequence store ID.</p>
        pub fn set_sequence_store_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.sequence_store_id = input;
            self
        }
        /// <p>The read set's subject ID.</p>
        pub fn subject_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.subject_id = Some(input.into());
            self
        }
        /// <p>The read set's subject ID.</p>
        pub fn set_subject_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.subject_id = input;
            self
        }
        /// <p>The read set's sample ID.</p>
        pub fn sample_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.sample_id = Some(input.into());
            self
        }
        /// <p>The read set's sample ID.</p>
        pub fn set_sample_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.sample_id = input;
            self
        }
        /// <p>The read set's status.</p>
        pub fn status(mut self, input: crate::model::ReadSetStatus) -> Self {
            self.status = Some(input);
            self
        }
        /// <p>The read set's status.</p>
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::ReadSetStatus>,
        ) -> Self {
            self.status = input;
            self
        }
        /// <p>The read set's name.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        /// <p>The read set's name.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// <p>The read set's description.</p>
        pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
            self.description = Some(input.into());
            self
        }
        /// <p>The read set's description.</p>
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.description = input;
            self
        }
        /// <p>The read set's file type.</p>
        pub fn file_type(mut self, input: crate::model::FileType) -> Self {
            self.file_type = Some(input);
            self
        }
        /// <p>The read set's file type.</p>
        pub fn set_file_type(mut self, input: std::option::Option<crate::model::FileType>) -> Self {
            self.file_type = input;
            self
        }
        /// <p>When the read set was created.</p>
        pub fn creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.creation_time = Some(input);
            self
        }
        /// <p>When the read set was created.</p>
        pub fn set_creation_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.creation_time = input;
            self
        }
        /// <p>The read set's sequence information.</p>
        pub fn sequence_information(mut self, input: crate::model::SequenceInformation) -> Self {
            self.sequence_information = Some(input);
            self
        }
        /// <p>The read set's sequence information.</p>
        pub fn set_sequence_information(
            mut self,
            input: std::option::Option<crate::model::SequenceInformation>,
        ) -> Self {
            self.sequence_information = input;
            self
        }
        /// <p>The read set's genome reference ARN.</p>
        pub fn reference_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.reference_arn = Some(input.into());
            self
        }
        /// <p>The read set's genome reference ARN.</p>
        pub fn set_reference_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.reference_arn = input;
            self
        }
        /// <p>The read set's files.</p>
        pub fn files(mut self, input: crate::model::ReadSetFiles) -> Self {
            self.files = Some(input);
            self
        }
        /// <p>The read set's files.</p>
        pub fn set_files(mut self, input: std::option::Option<crate::model::ReadSetFiles>) -> Self {
            self.files = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetReadSetMetadataOutput`](crate::output::GetReadSetMetadataOutput).
        pub fn build(self) -> crate::output::GetReadSetMetadataOutput {
            crate::output::GetReadSetMetadataOutput {
                id: self.id,
                arn: self.arn,
                sequence_store_id: self.sequence_store_id,
                subject_id: self.subject_id,
                sample_id: self.sample_id,
                status: self.status,
                name: self.name,
                description: self.description,
                file_type: self.file_type,
                creation_time: self.creation_time,
                sequence_information: self.sequence_information,
                reference_arn: self.reference_arn,
                files: self.files,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetReadSetMetadataOutput {
    /// Creates a new builder-style object to manufacture [`GetReadSetMetadataOutput`](crate::output::GetReadSetMetadataOutput).
    pub fn builder() -> crate::output::get_read_set_metadata_output::Builder {
        crate::output::get_read_set_metadata_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CancelRunOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for CancelRunOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CancelRunOutput`](crate::output::CancelRunOutput).
pub mod cancel_run_output {

    /// A builder for [`CancelRunOutput`](crate::output::CancelRunOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CancelRunOutput`](crate::output::CancelRunOutput).
        pub fn build(self) -> crate::output::CancelRunOutput {
            crate::output::CancelRunOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl CancelRunOutput {
    /// Creates a new builder-style object to manufacture [`CancelRunOutput`](crate::output::CancelRunOutput).
    pub fn builder() -> crate::output::cancel_run_output::Builder {
        crate::output::cancel_run_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListRunsOutput {
    /// <p>A list of runs.</p>
    #[doc(hidden)]
    pub items: std::option::Option<std::vec::Vec<crate::model::RunListItem>>,
    /// <p>A pagination token that's included if more results are available.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListRunsOutput {
    /// <p>A list of runs.</p>
    pub fn items(&self) -> std::option::Option<&[crate::model::RunListItem]> {
        self.items.as_deref()
    }
    /// <p>A pagination token that's included if more results are available.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListRunsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListRunsOutput`](crate::output::ListRunsOutput).
pub mod list_runs_output {

    /// A builder for [`ListRunsOutput`](crate::output::ListRunsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) items: std::option::Option<std::vec::Vec<crate::model::RunListItem>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `items`.
        ///
        /// To override the contents of this collection use [`set_items`](Self::set_items).
        ///
        /// <p>A list of runs.</p>
        pub fn items(mut self, input: crate::model::RunListItem) -> Self {
            let mut v = self.items.unwrap_or_default();
            v.push(input);
            self.items = Some(v);
            self
        }
        /// <p>A list of runs.</p>
        pub fn set_items(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::RunListItem>>,
        ) -> Self {
            self.items = input;
            self
        }
        /// <p>A pagination token that's included if more results are available.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>A pagination token that's included if more results are available.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListRunsOutput`](crate::output::ListRunsOutput).
        pub fn build(self) -> crate::output::ListRunsOutput {
            crate::output::ListRunsOutput {
                items: self.items,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListRunsOutput {
    /// Creates a new builder-style object to manufacture [`ListRunsOutput`](crate::output::ListRunsOutput).
    pub fn builder() -> crate::output::list_runs_output::Builder {
        crate::output::list_runs_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StartRunOutput {
    /// <p>The run's ARN.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The run's ID.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The run's status.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::model::RunStatus>,
    /// <p>The run's tags.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    _request_id: Option<String>,
}
impl StartRunOutput {
    /// <p>The run's ARN.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The run's ID.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The run's status.</p>
    pub fn status(&self) -> std::option::Option<&crate::model::RunStatus> {
        self.status.as_ref()
    }
    /// <p>The run's tags.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl aws_http::request_id::RequestId for StartRunOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`StartRunOutput`](crate::output::StartRunOutput).
pub mod start_run_output {

    /// A builder for [`StartRunOutput`](crate::output::StartRunOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) status: std::option::Option<crate::model::RunStatus>,
        pub(crate) tags: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The run's ARN.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// <p>The run's ARN.</p>
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// <p>The run's ID.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        /// <p>The run's ID.</p>
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// <p>The run's status.</p>
        pub fn status(mut self, input: crate::model::RunStatus) -> Self {
            self.status = Some(input);
            self
        }
        /// <p>The run's status.</p>
        pub fn set_status(mut self, input: std::option::Option<crate::model::RunStatus>) -> Self {
            self.status = input;
            self
        }
        /// Adds a key-value pair to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>The run's tags.</p>
        pub fn tags(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            let mut hash_map = self.tags.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.tags = Some(hash_map);
            self
        }
        /// <p>The run's tags.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.tags = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`StartRunOutput`](crate::output::StartRunOutput).
        pub fn build(self) -> crate::output::StartRunOutput {
            crate::output::StartRunOutput {
                arn: self.arn,
                id: self.id,
                status: self.status,
                tags: self.tags,
                _request_id: self._request_id,
            }
        }
    }
}
impl StartRunOutput {
    /// Creates a new builder-style object to manufacture [`StartRunOutput`](crate::output::StartRunOutput).
    pub fn builder() -> crate::output::start_run_output::Builder {
        crate::output::start_run_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteRunOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteRunOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteRunOutput`](crate::output::DeleteRunOutput).
pub mod delete_run_output {

    /// A builder for [`DeleteRunOutput`](crate::output::DeleteRunOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteRunOutput`](crate::output::DeleteRunOutput).
        pub fn build(self) -> crate::output::DeleteRunOutput {
            crate::output::DeleteRunOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteRunOutput {
    /// Creates a new builder-style object to manufacture [`DeleteRunOutput`](crate::output::DeleteRunOutput).
    pub fn builder() -> crate::output::delete_run_output::Builder {
        crate::output::delete_run_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetRunOutput {
    /// <p>The run's ARN.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The run's ID.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The run's status.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::model::RunStatus>,
    /// <p>The run's workflow ID.</p>
    #[doc(hidden)]
    pub workflow_id: std::option::Option<std::string::String>,
    /// <p>The run's workflow type.</p>
    #[doc(hidden)]
    pub workflow_type: std::option::Option<crate::model::WorkflowType>,
    /// <p>The run's ID.</p>
    #[doc(hidden)]
    pub run_id: std::option::Option<std::string::String>,
    /// <p>The run's service role ARN.</p>
    #[doc(hidden)]
    pub role_arn: std::option::Option<std::string::String>,
    /// <p>The run's name.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The run's group ID.</p>
    #[doc(hidden)]
    pub run_group_id: std::option::Option<std::string::String>,
    /// <p>The run's priority.</p>
    #[doc(hidden)]
    pub priority: std::option::Option<i32>,
    /// <p>The run's definition.</p>
    #[doc(hidden)]
    pub definition: std::option::Option<std::string::String>,
    /// <p>The run's digest.</p>
    #[doc(hidden)]
    pub digest: std::option::Option<std::string::String>,
    /// <p>The run's parameters.</p>
    #[doc(hidden)]
    pub parameters: std::option::Option<aws_smithy_types::Document>,
    /// <p>The run's storage capacity.</p>
    #[doc(hidden)]
    pub storage_capacity: std::option::Option<i32>,
    /// <p>The run's output URI.</p>
    #[doc(hidden)]
    pub output_uri: std::option::Option<std::string::String>,
    /// <p>The run's log level.</p>
    #[doc(hidden)]
    pub log_level: std::option::Option<crate::model::RunLogLevel>,
    /// <p>The run's resource digests.</p>
    #[doc(hidden)]
    pub resource_digests:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>Who started the run.</p>
    #[doc(hidden)]
    pub started_by: std::option::Option<std::string::String>,
    /// <p>When the run was created.</p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>When the run started.</p>
    #[doc(hidden)]
    pub start_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The run's stop time.</p>
    #[doc(hidden)]
    pub stop_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The run's status message.</p>
    #[doc(hidden)]
    pub status_message: std::option::Option<std::string::String>,
    /// <p>The run's tags.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    _request_id: Option<String>,
}
impl GetRunOutput {
    /// <p>The run's ARN.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The run's ID.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The run's status.</p>
    pub fn status(&self) -> std::option::Option<&crate::model::RunStatus> {
        self.status.as_ref()
    }
    /// <p>The run's workflow ID.</p>
    pub fn workflow_id(&self) -> std::option::Option<&str> {
        self.workflow_id.as_deref()
    }
    /// <p>The run's workflow type.</p>
    pub fn workflow_type(&self) -> std::option::Option<&crate::model::WorkflowType> {
        self.workflow_type.as_ref()
    }
    /// <p>The run's ID.</p>
    pub fn run_id(&self) -> std::option::Option<&str> {
        self.run_id.as_deref()
    }
    /// <p>The run's service role ARN.</p>
    pub fn role_arn(&self) -> std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>The run's name.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The run's group ID.</p>
    pub fn run_group_id(&self) -> std::option::Option<&str> {
        self.run_group_id.as_deref()
    }
    /// <p>The run's priority.</p>
    pub fn priority(&self) -> std::option::Option<i32> {
        self.priority
    }
    /// <p>The run's definition.</p>
    pub fn definition(&self) -> std::option::Option<&str> {
        self.definition.as_deref()
    }
    /// <p>The run's digest.</p>
    pub fn digest(&self) -> std::option::Option<&str> {
        self.digest.as_deref()
    }
    /// <p>The run's parameters.</p>
    pub fn parameters(&self) -> std::option::Option<&aws_smithy_types::Document> {
        self.parameters.as_ref()
    }
    /// <p>The run's storage capacity.</p>
    pub fn storage_capacity(&self) -> std::option::Option<i32> {
        self.storage_capacity
    }
    /// <p>The run's output URI.</p>
    pub fn output_uri(&self) -> std::option::Option<&str> {
        self.output_uri.as_deref()
    }
    /// <p>The run's log level.</p>
    pub fn log_level(&self) -> std::option::Option<&crate::model::RunLogLevel> {
        self.log_level.as_ref()
    }
    /// <p>The run's resource digests.</p>
    pub fn resource_digests(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.resource_digests.as_ref()
    }
    /// <p>Who started the run.</p>
    pub fn started_by(&self) -> std::option::Option<&str> {
        self.started_by.as_deref()
    }
    /// <p>When the run was created.</p>
    pub fn creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>When the run started.</p>
    pub fn start_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
    /// <p>The run's stop time.</p>
    pub fn stop_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.stop_time.as_ref()
    }
    /// <p>The run's status message.</p>
    pub fn status_message(&self) -> std::option::Option<&str> {
        self.status_message.as_deref()
    }
    /// <p>The run's tags.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetRunOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetRunOutput`](crate::output::GetRunOutput).
pub mod get_run_output {

    /// A builder for [`GetRunOutput`](crate::output::GetRunOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) status: std::option::Option<crate::model::RunStatus>,
        pub(crate) workflow_id: std::option::Option<std::string::String>,
        pub(crate) workflow_type: std::option::Option<crate::model::WorkflowType>,
        pub(crate) run_id: std::option::Option<std::string::String>,
        pub(crate) role_arn: std::option::Option<std::string::String>,
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) run_group_id: std::option::Option<std::string::String>,
        pub(crate) priority: std::option::Option<i32>,
        pub(crate) definition: std::option::Option<std::string::String>,
        pub(crate) digest: std::option::Option<std::string::String>,
        pub(crate) parameters: std::option::Option<aws_smithy_types::Document>,
        pub(crate) storage_capacity: std::option::Option<i32>,
        pub(crate) output_uri: std::option::Option<std::string::String>,
        pub(crate) log_level: std::option::Option<crate::model::RunLogLevel>,
        pub(crate) resource_digests: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
        pub(crate) started_by: std::option::Option<std::string::String>,
        pub(crate) creation_time: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) start_time: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) stop_time: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) status_message: std::option::Option<std::string::String>,
        pub(crate) tags: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The run's ARN.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// <p>The run's ARN.</p>
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// <p>The run's ID.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        /// <p>The run's ID.</p>
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// <p>The run's status.</p>
        pub fn status(mut self, input: crate::model::RunStatus) -> Self {
            self.status = Some(input);
            self
        }
        /// <p>The run's status.</p>
        pub fn set_status(mut self, input: std::option::Option<crate::model::RunStatus>) -> Self {
            self.status = input;
            self
        }
        /// <p>The run's workflow ID.</p>
        pub fn workflow_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.workflow_id = Some(input.into());
            self
        }
        /// <p>The run's workflow ID.</p>
        pub fn set_workflow_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.workflow_id = input;
            self
        }
        /// <p>The run's workflow type.</p>
        pub fn workflow_type(mut self, input: crate::model::WorkflowType) -> Self {
            self.workflow_type = Some(input);
            self
        }
        /// <p>The run's workflow type.</p>
        pub fn set_workflow_type(
            mut self,
            input: std::option::Option<crate::model::WorkflowType>,
        ) -> Self {
            self.workflow_type = input;
            self
        }
        /// <p>The run's ID.</p>
        pub fn run_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.run_id = Some(input.into());
            self
        }
        /// <p>The run's ID.</p>
        pub fn set_run_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.run_id = input;
            self
        }
        /// <p>The run's service role ARN.</p>
        pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.role_arn = Some(input.into());
            self
        }
        /// <p>The run's service role ARN.</p>
        pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.role_arn = input;
            self
        }
        /// <p>The run's name.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        /// <p>The run's name.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// <p>The run's group ID.</p>
        pub fn run_group_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.run_group_id = Some(input.into());
            self
        }
        /// <p>The run's group ID.</p>
        pub fn set_run_group_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.run_group_id = input;
            self
        }
        /// <p>The run's priority.</p>
        pub fn priority(mut self, input: i32) -> Self {
            self.priority = Some(input);
            self
        }
        /// <p>The run's priority.</p>
        pub fn set_priority(mut self, input: std::option::Option<i32>) -> Self {
            self.priority = input;
            self
        }
        /// <p>The run's definition.</p>
        pub fn definition(mut self, input: impl Into<std::string::String>) -> Self {
            self.definition = Some(input.into());
            self
        }
        /// <p>The run's definition.</p>
        pub fn set_definition(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.definition = input;
            self
        }
        /// <p>The run's digest.</p>
        pub fn digest(mut self, input: impl Into<std::string::String>) -> Self {
            self.digest = Some(input.into());
            self
        }
        /// <p>The run's digest.</p>
        pub fn set_digest(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.digest = input;
            self
        }
        /// <p>The run's parameters.</p>
        pub fn parameters(mut self, input: aws_smithy_types::Document) -> Self {
            self.parameters = Some(input);
            self
        }
        /// <p>The run's parameters.</p>
        pub fn set_parameters(
            mut self,
            input: std::option::Option<aws_smithy_types::Document>,
        ) -> Self {
            self.parameters = input;
            self
        }
        /// <p>The run's storage capacity.</p>
        pub fn storage_capacity(mut self, input: i32) -> Self {
            self.storage_capacity = Some(input);
            self
        }
        /// <p>The run's storage capacity.</p>
        pub fn set_storage_capacity(mut self, input: std::option::Option<i32>) -> Self {
            self.storage_capacity = input;
            self
        }
        /// <p>The run's output URI.</p>
        pub fn output_uri(mut self, input: impl Into<std::string::String>) -> Self {
            self.output_uri = Some(input.into());
            self
        }
        /// <p>The run's output URI.</p>
        pub fn set_output_uri(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.output_uri = input;
            self
        }
        /// <p>The run's log level.</p>
        pub fn log_level(mut self, input: crate::model::RunLogLevel) -> Self {
            self.log_level = Some(input);
            self
        }
        /// <p>The run's log level.</p>
        pub fn set_log_level(
            mut self,
            input: std::option::Option<crate::model::RunLogLevel>,
        ) -> Self {
            self.log_level = input;
            self
        }
        /// Adds a key-value pair to `resource_digests`.
        ///
        /// To override the contents of this collection use [`set_resource_digests`](Self::set_resource_digests).
        ///
        /// <p>The run's resource digests.</p>
        pub fn resource_digests(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            let mut hash_map = self.resource_digests.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.resource_digests = Some(hash_map);
            self
        }
        /// <p>The run's resource digests.</p>
        pub fn set_resource_digests(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.resource_digests = input;
            self
        }
        /// <p>Who started the run.</p>
        pub fn started_by(mut self, input: impl Into<std::string::String>) -> Self {
            self.started_by = Some(input.into());
            self
        }
        /// <p>Who started the run.</p>
        pub fn set_started_by(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.started_by = input;
            self
        }
        /// <p>When the run was created.</p>
        pub fn creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.creation_time = Some(input);
            self
        }
        /// <p>When the run was created.</p>
        pub fn set_creation_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.creation_time = input;
            self
        }
        /// <p>When the run started.</p>
        pub fn start_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.start_time = Some(input);
            self
        }
        /// <p>When the run started.</p>
        pub fn set_start_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.start_time = input;
            self
        }
        /// <p>The run's stop time.</p>
        pub fn stop_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.stop_time = Some(input);
            self
        }
        /// <p>The run's stop time.</p>
        pub fn set_stop_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.stop_time = input;
            self
        }
        /// <p>The run's status message.</p>
        pub fn status_message(mut self, input: impl Into<std::string::String>) -> Self {
            self.status_message = Some(input.into());
            self
        }
        /// <p>The run's status message.</p>
        pub fn set_status_message(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.status_message = input;
            self
        }
        /// Adds a key-value pair to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>The run's tags.</p>
        pub fn tags(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            let mut hash_map = self.tags.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.tags = Some(hash_map);
            self
        }
        /// <p>The run's tags.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.tags = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetRunOutput`](crate::output::GetRunOutput).
        pub fn build(self) -> crate::output::GetRunOutput {
            crate::output::GetRunOutput {
                arn: self.arn,
                id: self.id,
                status: self.status,
                workflow_id: self.workflow_id,
                workflow_type: self.workflow_type,
                run_id: self.run_id,
                role_arn: self.role_arn,
                name: self.name,
                run_group_id: self.run_group_id,
                priority: self.priority,
                definition: self.definition,
                digest: self.digest,
                parameters: self.parameters,
                storage_capacity: self.storage_capacity,
                output_uri: self.output_uri,
                log_level: self.log_level,
                resource_digests: self.resource_digests,
                started_by: self.started_by,
                creation_time: self.creation_time,
                start_time: self.start_time,
                stop_time: self.stop_time,
                status_message: self.status_message,
                tags: self.tags,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetRunOutput {
    /// Creates a new builder-style object to manufacture [`GetRunOutput`](crate::output::GetRunOutput).
    pub fn builder() -> crate::output::get_run_output::Builder {
        crate::output::get_run_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListRunTasksOutput {
    /// <p>A list of tasks.</p>
    #[doc(hidden)]
    pub items: std::option::Option<std::vec::Vec<crate::model::TaskListItem>>,
    /// <p>A pagination token that's included if more results are available.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListRunTasksOutput {
    /// <p>A list of tasks.</p>
    pub fn items(&self) -> std::option::Option<&[crate::model::TaskListItem]> {
        self.items.as_deref()
    }
    /// <p>A pagination token that's included if more results are available.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListRunTasksOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListRunTasksOutput`](crate::output::ListRunTasksOutput).
pub mod list_run_tasks_output {

    /// A builder for [`ListRunTasksOutput`](crate::output::ListRunTasksOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) items: std::option::Option<std::vec::Vec<crate::model::TaskListItem>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `items`.
        ///
        /// To override the contents of this collection use [`set_items`](Self::set_items).
        ///
        /// <p>A list of tasks.</p>
        pub fn items(mut self, input: crate::model::TaskListItem) -> Self {
            let mut v = self.items.unwrap_or_default();
            v.push(input);
            self.items = Some(v);
            self
        }
        /// <p>A list of tasks.</p>
        pub fn set_items(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::TaskListItem>>,
        ) -> Self {
            self.items = input;
            self
        }
        /// <p>A pagination token that's included if more results are available.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>A pagination token that's included if more results are available.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListRunTasksOutput`](crate::output::ListRunTasksOutput).
        pub fn build(self) -> crate::output::ListRunTasksOutput {
            crate::output::ListRunTasksOutput {
                items: self.items,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListRunTasksOutput {
    /// Creates a new builder-style object to manufacture [`ListRunTasksOutput`](crate::output::ListRunTasksOutput).
    pub fn builder() -> crate::output::list_run_tasks_output::Builder {
        crate::output::list_run_tasks_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetRunTaskOutput {
    /// <p>The task's ID.</p>
    #[doc(hidden)]
    pub task_id: std::option::Option<std::string::String>,
    /// <p>The task's status.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::model::TaskStatus>,
    /// <p>The task's name.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The task's CPU usage.</p>
    #[doc(hidden)]
    pub cpus: std::option::Option<i32>,
    /// <p>The task's memory setting.</p>
    #[doc(hidden)]
    pub memory: std::option::Option<i32>,
    /// <p>When the task was created.</p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The task's start time.</p>
    #[doc(hidden)]
    pub start_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The task's stop time.</p>
    #[doc(hidden)]
    pub stop_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The task's status message.</p>
    #[doc(hidden)]
    pub status_message: std::option::Option<std::string::String>,
    /// <p>The task's log stream.</p>
    #[doc(hidden)]
    pub log_stream: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetRunTaskOutput {
    /// <p>The task's ID.</p>
    pub fn task_id(&self) -> std::option::Option<&str> {
        self.task_id.as_deref()
    }
    /// <p>The task's status.</p>
    pub fn status(&self) -> std::option::Option<&crate::model::TaskStatus> {
        self.status.as_ref()
    }
    /// <p>The task's name.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The task's CPU usage.</p>
    pub fn cpus(&self) -> std::option::Option<i32> {
        self.cpus
    }
    /// <p>The task's memory setting.</p>
    pub fn memory(&self) -> std::option::Option<i32> {
        self.memory
    }
    /// <p>When the task was created.</p>
    pub fn creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The task's start time.</p>
    pub fn start_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
    /// <p>The task's stop time.</p>
    pub fn stop_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.stop_time.as_ref()
    }
    /// <p>The task's status message.</p>
    pub fn status_message(&self) -> std::option::Option<&str> {
        self.status_message.as_deref()
    }
    /// <p>The task's log stream.</p>
    pub fn log_stream(&self) -> std::option::Option<&str> {
        self.log_stream.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetRunTaskOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetRunTaskOutput`](crate::output::GetRunTaskOutput).
pub mod get_run_task_output {

    /// A builder for [`GetRunTaskOutput`](crate::output::GetRunTaskOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) task_id: std::option::Option<std::string::String>,
        pub(crate) status: std::option::Option<crate::model::TaskStatus>,
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) cpus: std::option::Option<i32>,
        pub(crate) memory: std::option::Option<i32>,
        pub(crate) creation_time: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) start_time: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) stop_time: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) status_message: std::option::Option<std::string::String>,
        pub(crate) log_stream: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The task's ID.</p>
        pub fn task_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.task_id = Some(input.into());
            self
        }
        /// <p>The task's ID.</p>
        pub fn set_task_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.task_id = input;
            self
        }
        /// <p>The task's status.</p>
        pub fn status(mut self, input: crate::model::TaskStatus) -> Self {
            self.status = Some(input);
            self
        }
        /// <p>The task's status.</p>
        pub fn set_status(mut self, input: std::option::Option<crate::model::TaskStatus>) -> Self {
            self.status = input;
            self
        }
        /// <p>The task's name.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        /// <p>The task's name.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// <p>The task's CPU usage.</p>
        pub fn cpus(mut self, input: i32) -> Self {
            self.cpus = Some(input);
            self
        }
        /// <p>The task's CPU usage.</p>
        pub fn set_cpus(mut self, input: std::option::Option<i32>) -> Self {
            self.cpus = input;
            self
        }
        /// <p>The task's memory setting.</p>
        pub fn memory(mut self, input: i32) -> Self {
            self.memory = Some(input);
            self
        }
        /// <p>The task's memory setting.</p>
        pub fn set_memory(mut self, input: std::option::Option<i32>) -> Self {
            self.memory = input;
            self
        }
        /// <p>When the task was created.</p>
        pub fn creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.creation_time = Some(input);
            self
        }
        /// <p>When the task was created.</p>
        pub fn set_creation_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.creation_time = input;
            self
        }
        /// <p>The task's start time.</p>
        pub fn start_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.start_time = Some(input);
            self
        }
        /// <p>The task's start time.</p>
        pub fn set_start_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.start_time = input;
            self
        }
        /// <p>The task's stop time.</p>
        pub fn stop_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.stop_time = Some(input);
            self
        }
        /// <p>The task's stop time.</p>
        pub fn set_stop_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.stop_time = input;
            self
        }
        /// <p>The task's status message.</p>
        pub fn status_message(mut self, input: impl Into<std::string::String>) -> Self {
            self.status_message = Some(input.into());
            self
        }
        /// <p>The task's status message.</p>
        pub fn set_status_message(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.status_message = input;
            self
        }
        /// <p>The task's log stream.</p>
        pub fn log_stream(mut self, input: impl Into<std::string::String>) -> Self {
            self.log_stream = Some(input.into());
            self
        }
        /// <p>The task's log stream.</p>
        pub fn set_log_stream(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.log_stream = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetRunTaskOutput`](crate::output::GetRunTaskOutput).
        pub fn build(self) -> crate::output::GetRunTaskOutput {
            crate::output::GetRunTaskOutput {
                task_id: self.task_id,
                status: self.status,
                name: self.name,
                cpus: self.cpus,
                memory: self.memory,
                creation_time: self.creation_time,
                start_time: self.start_time,
                stop_time: self.stop_time,
                status_message: self.status_message,
                log_stream: self.log_stream,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetRunTaskOutput {
    /// Creates a new builder-style object to manufacture [`GetRunTaskOutput`](crate::output::GetRunTaskOutput).
    pub fn builder() -> crate::output::get_run_task_output::Builder {
        crate::output::get_run_task_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListRunGroupsOutput {
    /// <p>A list of groups.</p>
    #[doc(hidden)]
    pub items: std::option::Option<std::vec::Vec<crate::model::RunGroupListItem>>,
    /// <p>A pagination token that's included if more results are available.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListRunGroupsOutput {
    /// <p>A list of groups.</p>
    pub fn items(&self) -> std::option::Option<&[crate::model::RunGroupListItem]> {
        self.items.as_deref()
    }
    /// <p>A pagination token that's included if more results are available.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListRunGroupsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListRunGroupsOutput`](crate::output::ListRunGroupsOutput).
pub mod list_run_groups_output {

    /// A builder for [`ListRunGroupsOutput`](crate::output::ListRunGroupsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) items: std::option::Option<std::vec::Vec<crate::model::RunGroupListItem>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `items`.
        ///
        /// To override the contents of this collection use [`set_items`](Self::set_items).
        ///
        /// <p>A list of groups.</p>
        pub fn items(mut self, input: crate::model::RunGroupListItem) -> Self {
            let mut v = self.items.unwrap_or_default();
            v.push(input);
            self.items = Some(v);
            self
        }
        /// <p>A list of groups.</p>
        pub fn set_items(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::RunGroupListItem>>,
        ) -> Self {
            self.items = input;
            self
        }
        /// <p>A pagination token that's included if more results are available.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>A pagination token that's included if more results are available.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListRunGroupsOutput`](crate::output::ListRunGroupsOutput).
        pub fn build(self) -> crate::output::ListRunGroupsOutput {
            crate::output::ListRunGroupsOutput {
                items: self.items,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListRunGroupsOutput {
    /// Creates a new builder-style object to manufacture [`ListRunGroupsOutput`](crate::output::ListRunGroupsOutput).
    pub fn builder() -> crate::output::list_run_groups_output::Builder {
        crate::output::list_run_groups_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateRunGroupOutput {
    /// <p>The group's ARN.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The group's ID.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>Tags for the run group.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    _request_id: Option<String>,
}
impl CreateRunGroupOutput {
    /// <p>The group's ARN.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The group's ID.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>Tags for the run group.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateRunGroupOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateRunGroupOutput`](crate::output::CreateRunGroupOutput).
pub mod create_run_group_output {

    /// A builder for [`CreateRunGroupOutput`](crate::output::CreateRunGroupOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) tags: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The group's ARN.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// <p>The group's ARN.</p>
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// <p>The group's ID.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        /// <p>The group's ID.</p>
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// Adds a key-value pair to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>Tags for the run group.</p>
        pub fn tags(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            let mut hash_map = self.tags.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.tags = Some(hash_map);
            self
        }
        /// <p>Tags for the run group.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.tags = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateRunGroupOutput`](crate::output::CreateRunGroupOutput).
        pub fn build(self) -> crate::output::CreateRunGroupOutput {
            crate::output::CreateRunGroupOutput {
                arn: self.arn,
                id: self.id,
                tags: self.tags,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateRunGroupOutput {
    /// Creates a new builder-style object to manufacture [`CreateRunGroupOutput`](crate::output::CreateRunGroupOutput).
    pub fn builder() -> crate::output::create_run_group_output::Builder {
        crate::output::create_run_group_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteRunGroupOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteRunGroupOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteRunGroupOutput`](crate::output::DeleteRunGroupOutput).
pub mod delete_run_group_output {

    /// A builder for [`DeleteRunGroupOutput`](crate::output::DeleteRunGroupOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteRunGroupOutput`](crate::output::DeleteRunGroupOutput).
        pub fn build(self) -> crate::output::DeleteRunGroupOutput {
            crate::output::DeleteRunGroupOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteRunGroupOutput {
    /// Creates a new builder-style object to manufacture [`DeleteRunGroupOutput`](crate::output::DeleteRunGroupOutput).
    pub fn builder() -> crate::output::delete_run_group_output::Builder {
        crate::output::delete_run_group_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateRunGroupOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for UpdateRunGroupOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`UpdateRunGroupOutput`](crate::output::UpdateRunGroupOutput).
pub mod update_run_group_output {

    /// A builder for [`UpdateRunGroupOutput`](crate::output::UpdateRunGroupOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateRunGroupOutput`](crate::output::UpdateRunGroupOutput).
        pub fn build(self) -> crate::output::UpdateRunGroupOutput {
            crate::output::UpdateRunGroupOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl UpdateRunGroupOutput {
    /// Creates a new builder-style object to manufacture [`UpdateRunGroupOutput`](crate::output::UpdateRunGroupOutput).
    pub fn builder() -> crate::output::update_run_group_output::Builder {
        crate::output::update_run_group_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetRunGroupOutput {
    /// <p>The group's ARN.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The group's ID.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The group's name.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The group's maximum number of CPUs to use.</p>
    #[doc(hidden)]
    pub max_cpus: std::option::Option<i32>,
    /// <p>The maximum number of concurrent runs for the group.</p>
    #[doc(hidden)]
    pub max_runs: std::option::Option<i32>,
    /// <p>The group's maximum run duration.</p>
    #[doc(hidden)]
    pub max_duration: std::option::Option<i32>,
    /// <p>When the group was created.</p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The group's tags.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    _request_id: Option<String>,
}
impl GetRunGroupOutput {
    /// <p>The group's ARN.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The group's ID.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The group's name.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The group's maximum number of CPUs to use.</p>
    pub fn max_cpus(&self) -> std::option::Option<i32> {
        self.max_cpus
    }
    /// <p>The maximum number of concurrent runs for the group.</p>
    pub fn max_runs(&self) -> std::option::Option<i32> {
        self.max_runs
    }
    /// <p>The group's maximum run duration.</p>
    pub fn max_duration(&self) -> std::option::Option<i32> {
        self.max_duration
    }
    /// <p>When the group was created.</p>
    pub fn creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The group's tags.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetRunGroupOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetRunGroupOutput`](crate::output::GetRunGroupOutput).
pub mod get_run_group_output {

    /// A builder for [`GetRunGroupOutput`](crate::output::GetRunGroupOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) max_cpus: std::option::Option<i32>,
        pub(crate) max_runs: std::option::Option<i32>,
        pub(crate) max_duration: std::option::Option<i32>,
        pub(crate) creation_time: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) tags: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The group's ARN.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// <p>The group's ARN.</p>
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// <p>The group's ID.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        /// <p>The group's ID.</p>
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// <p>The group's name.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        /// <p>The group's name.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// <p>The group's maximum number of CPUs to use.</p>
        pub fn max_cpus(mut self, input: i32) -> Self {
            self.max_cpus = Some(input);
            self
        }
        /// <p>The group's maximum number of CPUs to use.</p>
        pub fn set_max_cpus(mut self, input: std::option::Option<i32>) -> Self {
            self.max_cpus = input;
            self
        }
        /// <p>The maximum number of concurrent runs for the group.</p>
        pub fn max_runs(mut self, input: i32) -> Self {
            self.max_runs = Some(input);
            self
        }
        /// <p>The maximum number of concurrent runs for the group.</p>
        pub fn set_max_runs(mut self, input: std::option::Option<i32>) -> Self {
            self.max_runs = input;
            self
        }
        /// <p>The group's maximum run duration.</p>
        pub fn max_duration(mut self, input: i32) -> Self {
            self.max_duration = Some(input);
            self
        }
        /// <p>The group's maximum run duration.</p>
        pub fn set_max_duration(mut self, input: std::option::Option<i32>) -> Self {
            self.max_duration = input;
            self
        }
        /// <p>When the group was created.</p>
        pub fn creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.creation_time = Some(input);
            self
        }
        /// <p>When the group was created.</p>
        pub fn set_creation_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.creation_time = input;
            self
        }
        /// Adds a key-value pair to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>The group's tags.</p>
        pub fn tags(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            let mut hash_map = self.tags.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.tags = Some(hash_map);
            self
        }
        /// <p>The group's tags.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.tags = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetRunGroupOutput`](crate::output::GetRunGroupOutput).
        pub fn build(self) -> crate::output::GetRunGroupOutput {
            crate::output::GetRunGroupOutput {
                arn: self.arn,
                id: self.id,
                name: self.name,
                max_cpus: self.max_cpus,
                max_runs: self.max_runs,
                max_duration: self.max_duration,
                creation_time: self.creation_time,
                tags: self.tags,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetRunGroupOutput {
    /// Creates a new builder-style object to manufacture [`GetRunGroupOutput`](crate::output::GetRunGroupOutput).
    pub fn builder() -> crate::output::get_run_group_output::Builder {
        crate::output::get_run_group_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StartReferenceImportJobOutput {
    /// <p>The job's ID.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The job's reference store ID.</p>
    #[doc(hidden)]
    pub reference_store_id: std::option::Option<std::string::String>,
    /// <p>The job's service role ARN.</p>
    #[doc(hidden)]
    pub role_arn: std::option::Option<std::string::String>,
    /// <p>The job's status.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::model::ReferenceImportJobStatus>,
    /// <p>When the job was created.</p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl StartReferenceImportJobOutput {
    /// <p>The job's ID.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The job's reference store ID.</p>
    pub fn reference_store_id(&self) -> std::option::Option<&str> {
        self.reference_store_id.as_deref()
    }
    /// <p>The job's service role ARN.</p>
    pub fn role_arn(&self) -> std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>The job's status.</p>
    pub fn status(&self) -> std::option::Option<&crate::model::ReferenceImportJobStatus> {
        self.status.as_ref()
    }
    /// <p>When the job was created.</p>
    pub fn creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
}
impl aws_http::request_id::RequestId for StartReferenceImportJobOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`StartReferenceImportJobOutput`](crate::output::StartReferenceImportJobOutput).
pub mod start_reference_import_job_output {

    /// A builder for [`StartReferenceImportJobOutput`](crate::output::StartReferenceImportJobOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) reference_store_id: std::option::Option<std::string::String>,
        pub(crate) role_arn: std::option::Option<std::string::String>,
        pub(crate) status: std::option::Option<crate::model::ReferenceImportJobStatus>,
        pub(crate) creation_time: std::option::Option<aws_smithy_types::DateTime>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The job's ID.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        /// <p>The job's ID.</p>
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// <p>The job's reference store ID.</p>
        pub fn reference_store_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.reference_store_id = Some(input.into());
            self
        }
        /// <p>The job's reference store ID.</p>
        pub fn set_reference_store_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.reference_store_id = input;
            self
        }
        /// <p>The job's service role ARN.</p>
        pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.role_arn = Some(input.into());
            self
        }
        /// <p>The job's service role ARN.</p>
        pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.role_arn = input;
            self
        }
        /// <p>The job's status.</p>
        pub fn status(mut self, input: crate::model::ReferenceImportJobStatus) -> Self {
            self.status = Some(input);
            self
        }
        /// <p>The job's status.</p>
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::ReferenceImportJobStatus>,
        ) -> Self {
            self.status = input;
            self
        }
        /// <p>When the job was created.</p>
        pub fn creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.creation_time = Some(input);
            self
        }
        /// <p>When the job was created.</p>
        pub fn set_creation_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.creation_time = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`StartReferenceImportJobOutput`](crate::output::StartReferenceImportJobOutput).
        pub fn build(self) -> crate::output::StartReferenceImportJobOutput {
            crate::output::StartReferenceImportJobOutput {
                id: self.id,
                reference_store_id: self.reference_store_id,
                role_arn: self.role_arn,
                status: self.status,
                creation_time: self.creation_time,
                _request_id: self._request_id,
            }
        }
    }
}
impl StartReferenceImportJobOutput {
    /// Creates a new builder-style object to manufacture [`StartReferenceImportJobOutput`](crate::output::StartReferenceImportJobOutput).
    pub fn builder() -> crate::output::start_reference_import_job_output::Builder {
        crate::output::start_reference_import_job_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListReferenceImportJobsOutput {
    /// <p>A pagination token that's included if more results are available.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>A lis of jobs.</p>
    #[doc(hidden)]
    pub import_jobs: std::option::Option<std::vec::Vec<crate::model::ImportReferenceJobItem>>,
    _request_id: Option<String>,
}
impl ListReferenceImportJobsOutput {
    /// <p>A pagination token that's included if more results are available.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>A lis of jobs.</p>
    pub fn import_jobs(&self) -> std::option::Option<&[crate::model::ImportReferenceJobItem]> {
        self.import_jobs.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListReferenceImportJobsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListReferenceImportJobsOutput`](crate::output::ListReferenceImportJobsOutput).
pub mod list_reference_import_jobs_output {

    /// A builder for [`ListReferenceImportJobsOutput`](crate::output::ListReferenceImportJobsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) import_jobs:
            std::option::Option<std::vec::Vec<crate::model::ImportReferenceJobItem>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>A pagination token that's included if more results are available.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>A pagination token that's included if more results are available.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Appends an item to `import_jobs`.
        ///
        /// To override the contents of this collection use [`set_import_jobs`](Self::set_import_jobs).
        ///
        /// <p>A lis of jobs.</p>
        pub fn import_jobs(mut self, input: crate::model::ImportReferenceJobItem) -> Self {
            let mut v = self.import_jobs.unwrap_or_default();
            v.push(input);
            self.import_jobs = Some(v);
            self
        }
        /// <p>A lis of jobs.</p>
        pub fn set_import_jobs(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ImportReferenceJobItem>>,
        ) -> Self {
            self.import_jobs = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListReferenceImportJobsOutput`](crate::output::ListReferenceImportJobsOutput).
        pub fn build(self) -> crate::output::ListReferenceImportJobsOutput {
            crate::output::ListReferenceImportJobsOutput {
                next_token: self.next_token,
                import_jobs: self.import_jobs,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListReferenceImportJobsOutput {
    /// Creates a new builder-style object to manufacture [`ListReferenceImportJobsOutput`](crate::output::ListReferenceImportJobsOutput).
    pub fn builder() -> crate::output::list_reference_import_jobs_output::Builder {
        crate::output::list_reference_import_jobs_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetReferenceImportJobOutput {
    /// <p>The job's ID.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The job's reference store ID.</p>
    #[doc(hidden)]
    pub reference_store_id: std::option::Option<std::string::String>,
    /// <p>The job's service role ARN.</p>
    #[doc(hidden)]
    pub role_arn: std::option::Option<std::string::String>,
    /// <p>The job's status.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::model::ReferenceImportJobStatus>,
    /// <p>The job's status message.</p>
    #[doc(hidden)]
    pub status_message: std::option::Option<std::string::String>,
    /// <p>When the job was created.</p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>When the job completed.</p>
    #[doc(hidden)]
    pub completion_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The job's sources.</p>
    #[doc(hidden)]
    pub sources: std::option::Option<std::vec::Vec<crate::model::ImportReferenceSourceItem>>,
    _request_id: Option<String>,
}
impl GetReferenceImportJobOutput {
    /// <p>The job's ID.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The job's reference store ID.</p>
    pub fn reference_store_id(&self) -> std::option::Option<&str> {
        self.reference_store_id.as_deref()
    }
    /// <p>The job's service role ARN.</p>
    pub fn role_arn(&self) -> std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>The job's status.</p>
    pub fn status(&self) -> std::option::Option<&crate::model::ReferenceImportJobStatus> {
        self.status.as_ref()
    }
    /// <p>The job's status message.</p>
    pub fn status_message(&self) -> std::option::Option<&str> {
        self.status_message.as_deref()
    }
    /// <p>When the job was created.</p>
    pub fn creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>When the job completed.</p>
    pub fn completion_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.completion_time.as_ref()
    }
    /// <p>The job's sources.</p>
    pub fn sources(&self) -> std::option::Option<&[crate::model::ImportReferenceSourceItem]> {
        self.sources.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetReferenceImportJobOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetReferenceImportJobOutput`](crate::output::GetReferenceImportJobOutput).
pub mod get_reference_import_job_output {

    /// A builder for [`GetReferenceImportJobOutput`](crate::output::GetReferenceImportJobOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) reference_store_id: std::option::Option<std::string::String>,
        pub(crate) role_arn: std::option::Option<std::string::String>,
        pub(crate) status: std::option::Option<crate::model::ReferenceImportJobStatus>,
        pub(crate) status_message: std::option::Option<std::string::String>,
        pub(crate) creation_time: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) completion_time: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) sources:
            std::option::Option<std::vec::Vec<crate::model::ImportReferenceSourceItem>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The job's ID.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        /// <p>The job's ID.</p>
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// <p>The job's reference store ID.</p>
        pub fn reference_store_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.reference_store_id = Some(input.into());
            self
        }
        /// <p>The job's reference store ID.</p>
        pub fn set_reference_store_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.reference_store_id = input;
            self
        }
        /// <p>The job's service role ARN.</p>
        pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.role_arn = Some(input.into());
            self
        }
        /// <p>The job's service role ARN.</p>
        pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.role_arn = input;
            self
        }
        /// <p>The job's status.</p>
        pub fn status(mut self, input: crate::model::ReferenceImportJobStatus) -> Self {
            self.status = Some(input);
            self
        }
        /// <p>The job's status.</p>
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::ReferenceImportJobStatus>,
        ) -> Self {
            self.status = input;
            self
        }
        /// <p>The job's status message.</p>
        pub fn status_message(mut self, input: impl Into<std::string::String>) -> Self {
            self.status_message = Some(input.into());
            self
        }
        /// <p>The job's status message.</p>
        pub fn set_status_message(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.status_message = input;
            self
        }
        /// <p>When the job was created.</p>
        pub fn creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.creation_time = Some(input);
            self
        }
        /// <p>When the job was created.</p>
        pub fn set_creation_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.creation_time = input;
            self
        }
        /// <p>When the job completed.</p>
        pub fn completion_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.completion_time = Some(input);
            self
        }
        /// <p>When the job completed.</p>
        pub fn set_completion_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.completion_time = input;
            self
        }
        /// Appends an item to `sources`.
        ///
        /// To override the contents of this collection use [`set_sources`](Self::set_sources).
        ///
        /// <p>The job's sources.</p>
        pub fn sources(mut self, input: crate::model::ImportReferenceSourceItem) -> Self {
            let mut v = self.sources.unwrap_or_default();
            v.push(input);
            self.sources = Some(v);
            self
        }
        /// <p>The job's sources.</p>
        pub fn set_sources(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ImportReferenceSourceItem>>,
        ) -> Self {
            self.sources = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetReferenceImportJobOutput`](crate::output::GetReferenceImportJobOutput).
        pub fn build(self) -> crate::output::GetReferenceImportJobOutput {
            crate::output::GetReferenceImportJobOutput {
                id: self.id,
                reference_store_id: self.reference_store_id,
                role_arn: self.role_arn,
                status: self.status,
                status_message: self.status_message,
                creation_time: self.creation_time,
                completion_time: self.completion_time,
                sources: self.sources,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetReferenceImportJobOutput {
    /// Creates a new builder-style object to manufacture [`GetReferenceImportJobOutput`](crate::output::GetReferenceImportJobOutput).
    pub fn builder() -> crate::output::get_reference_import_job_output::Builder {
        crate::output::get_reference_import_job_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListReferenceStoresOutput {
    /// <p>A pagination token that's included if more results are available.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>A list of reference stores.</p>
    #[doc(hidden)]
    pub reference_stores: std::option::Option<std::vec::Vec<crate::model::ReferenceStoreDetail>>,
    _request_id: Option<String>,
}
impl ListReferenceStoresOutput {
    /// <p>A pagination token that's included if more results are available.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>A list of reference stores.</p>
    pub fn reference_stores(&self) -> std::option::Option<&[crate::model::ReferenceStoreDetail]> {
        self.reference_stores.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListReferenceStoresOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListReferenceStoresOutput`](crate::output::ListReferenceStoresOutput).
pub mod list_reference_stores_output {

    /// A builder for [`ListReferenceStoresOutput`](crate::output::ListReferenceStoresOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) reference_stores:
            std::option::Option<std::vec::Vec<crate::model::ReferenceStoreDetail>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>A pagination token that's included if more results are available.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>A pagination token that's included if more results are available.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Appends an item to `reference_stores`.
        ///
        /// To override the contents of this collection use [`set_reference_stores`](Self::set_reference_stores).
        ///
        /// <p>A list of reference stores.</p>
        pub fn reference_stores(mut self, input: crate::model::ReferenceStoreDetail) -> Self {
            let mut v = self.reference_stores.unwrap_or_default();
            v.push(input);
            self.reference_stores = Some(v);
            self
        }
        /// <p>A list of reference stores.</p>
        pub fn set_reference_stores(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ReferenceStoreDetail>>,
        ) -> Self {
            self.reference_stores = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListReferenceStoresOutput`](crate::output::ListReferenceStoresOutput).
        pub fn build(self) -> crate::output::ListReferenceStoresOutput {
            crate::output::ListReferenceStoresOutput {
                next_token: self.next_token,
                reference_stores: self.reference_stores,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListReferenceStoresOutput {
    /// Creates a new builder-style object to manufacture [`ListReferenceStoresOutput`](crate::output::ListReferenceStoresOutput).
    pub fn builder() -> crate::output::list_reference_stores_output::Builder {
        crate::output::list_reference_stores_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateReferenceStoreOutput {
    /// <p>The store's ID.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The store's ARN.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The store's name.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The store's description.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The store's SSE settings.</p>
    #[doc(hidden)]
    pub sse_config: std::option::Option<crate::model::SseConfig>,
    /// <p>When the store was created.</p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl CreateReferenceStoreOutput {
    /// <p>The store's ID.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The store's ARN.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The store's name.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The store's description.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The store's SSE settings.</p>
    pub fn sse_config(&self) -> std::option::Option<&crate::model::SseConfig> {
        self.sse_config.as_ref()
    }
    /// <p>When the store was created.</p>
    pub fn creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateReferenceStoreOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateReferenceStoreOutput`](crate::output::CreateReferenceStoreOutput).
pub mod create_reference_store_output {

    /// A builder for [`CreateReferenceStoreOutput`](crate::output::CreateReferenceStoreOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) description: std::option::Option<std::string::String>,
        pub(crate) sse_config: std::option::Option<crate::model::SseConfig>,
        pub(crate) creation_time: std::option::Option<aws_smithy_types::DateTime>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The store's ID.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        /// <p>The store's ID.</p>
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// <p>The store's ARN.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// <p>The store's ARN.</p>
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// <p>The store's name.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        /// <p>The store's name.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// <p>The store's description.</p>
        pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
            self.description = Some(input.into());
            self
        }
        /// <p>The store's description.</p>
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.description = input;
            self
        }
        /// <p>The store's SSE settings.</p>
        pub fn sse_config(mut self, input: crate::model::SseConfig) -> Self {
            self.sse_config = Some(input);
            self
        }
        /// <p>The store's SSE settings.</p>
        pub fn set_sse_config(
            mut self,
            input: std::option::Option<crate::model::SseConfig>,
        ) -> Self {
            self.sse_config = input;
            self
        }
        /// <p>When the store was created.</p>
        pub fn creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.creation_time = Some(input);
            self
        }
        /// <p>When the store was created.</p>
        pub fn set_creation_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.creation_time = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateReferenceStoreOutput`](crate::output::CreateReferenceStoreOutput).
        pub fn build(self) -> crate::output::CreateReferenceStoreOutput {
            crate::output::CreateReferenceStoreOutput {
                id: self.id,
                arn: self.arn,
                name: self.name,
                description: self.description,
                sse_config: self.sse_config,
                creation_time: self.creation_time,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateReferenceStoreOutput {
    /// Creates a new builder-style object to manufacture [`CreateReferenceStoreOutput`](crate::output::CreateReferenceStoreOutput).
    pub fn builder() -> crate::output::create_reference_store_output::Builder {
        crate::output::create_reference_store_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteReferenceStoreOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteReferenceStoreOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteReferenceStoreOutput`](crate::output::DeleteReferenceStoreOutput).
pub mod delete_reference_store_output {

    /// A builder for [`DeleteReferenceStoreOutput`](crate::output::DeleteReferenceStoreOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteReferenceStoreOutput`](crate::output::DeleteReferenceStoreOutput).
        pub fn build(self) -> crate::output::DeleteReferenceStoreOutput {
            crate::output::DeleteReferenceStoreOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteReferenceStoreOutput {
    /// Creates a new builder-style object to manufacture [`DeleteReferenceStoreOutput`](crate::output::DeleteReferenceStoreOutput).
    pub fn builder() -> crate::output::delete_reference_store_output::Builder {
        crate::output::delete_reference_store_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetReferenceStoreOutput {
    /// <p>The store's ID.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The store's ARN.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The store's name.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The store's description.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The store's server-side encryption (SSE) settings.</p>
    #[doc(hidden)]
    pub sse_config: std::option::Option<crate::model::SseConfig>,
    /// <p>When the store was created.</p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl GetReferenceStoreOutput {
    /// <p>The store's ID.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The store's ARN.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The store's name.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The store's description.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The store's server-side encryption (SSE) settings.</p>
    pub fn sse_config(&self) -> std::option::Option<&crate::model::SseConfig> {
        self.sse_config.as_ref()
    }
    /// <p>When the store was created.</p>
    pub fn creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetReferenceStoreOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetReferenceStoreOutput`](crate::output::GetReferenceStoreOutput).
pub mod get_reference_store_output {

    /// A builder for [`GetReferenceStoreOutput`](crate::output::GetReferenceStoreOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) description: std::option::Option<std::string::String>,
        pub(crate) sse_config: std::option::Option<crate::model::SseConfig>,
        pub(crate) creation_time: std::option::Option<aws_smithy_types::DateTime>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The store's ID.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        /// <p>The store's ID.</p>
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// <p>The store's ARN.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// <p>The store's ARN.</p>
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// <p>The store's name.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        /// <p>The store's name.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// <p>The store's description.</p>
        pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
            self.description = Some(input.into());
            self
        }
        /// <p>The store's description.</p>
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.description = input;
            self
        }
        /// <p>The store's server-side encryption (SSE) settings.</p>
        pub fn sse_config(mut self, input: crate::model::SseConfig) -> Self {
            self.sse_config = Some(input);
            self
        }
        /// <p>The store's server-side encryption (SSE) settings.</p>
        pub fn set_sse_config(
            mut self,
            input: std::option::Option<crate::model::SseConfig>,
        ) -> Self {
            self.sse_config = input;
            self
        }
        /// <p>When the store was created.</p>
        pub fn creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.creation_time = Some(input);
            self
        }
        /// <p>When the store was created.</p>
        pub fn set_creation_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.creation_time = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetReferenceStoreOutput`](crate::output::GetReferenceStoreOutput).
        pub fn build(self) -> crate::output::GetReferenceStoreOutput {
            crate::output::GetReferenceStoreOutput {
                id: self.id,
                arn: self.arn,
                name: self.name,
                description: self.description,
                sse_config: self.sse_config,
                creation_time: self.creation_time,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetReferenceStoreOutput {
    /// Creates a new builder-style object to manufacture [`GetReferenceStoreOutput`](crate::output::GetReferenceStoreOutput).
    pub fn builder() -> crate::output::get_reference_store_output::Builder {
        crate::output::get_reference_store_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct GetReferenceOutput {
    /// <p>The reference file payload.</p>
    pub payload: aws_smithy_http::byte_stream::ByteStream,
    _request_id: Option<String>,
}
impl GetReferenceOutput {
    /// <p>The reference file payload.</p>
    pub fn payload(&self) -> &aws_smithy_http::byte_stream::ByteStream {
        &self.payload
    }
}
impl aws_http::request_id::RequestId for GetReferenceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetReferenceOutput`](crate::output::GetReferenceOutput).
pub mod get_reference_output {

    /// A builder for [`GetReferenceOutput`](crate::output::GetReferenceOutput).
    #[non_exhaustive]
    #[derive(std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) payload: std::option::Option<aws_smithy_http::byte_stream::ByteStream>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The reference file payload.</p>
        pub fn payload(mut self, input: aws_smithy_http::byte_stream::ByteStream) -> Self {
            self.payload = Some(input);
            self
        }
        /// <p>The reference file payload.</p>
        pub fn set_payload(
            mut self,
            input: std::option::Option<aws_smithy_http::byte_stream::ByteStream>,
        ) -> Self {
            self.payload = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetReferenceOutput`](crate::output::GetReferenceOutput).
        pub fn build(self) -> crate::output::GetReferenceOutput {
            crate::output::GetReferenceOutput {
                payload: self.payload.unwrap_or_default(),
                _request_id: self._request_id,
            }
        }
    }
}
impl GetReferenceOutput {
    /// Creates a new builder-style object to manufacture [`GetReferenceOutput`](crate::output::GetReferenceOutput).
    pub fn builder() -> crate::output::get_reference_output::Builder {
        crate::output::get_reference_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListReferencesOutput {
    /// <p>A pagination token that's included if more results are available.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>A list of references.</p>
    #[doc(hidden)]
    pub references: std::option::Option<std::vec::Vec<crate::model::ReferenceListItem>>,
    _request_id: Option<String>,
}
impl ListReferencesOutput {
    /// <p>A pagination token that's included if more results are available.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>A list of references.</p>
    pub fn references(&self) -> std::option::Option<&[crate::model::ReferenceListItem]> {
        self.references.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListReferencesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListReferencesOutput`](crate::output::ListReferencesOutput).
pub mod list_references_output {

    /// A builder for [`ListReferencesOutput`](crate::output::ListReferencesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) references: std::option::Option<std::vec::Vec<crate::model::ReferenceListItem>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>A pagination token that's included if more results are available.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>A pagination token that's included if more results are available.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Appends an item to `references`.
        ///
        /// To override the contents of this collection use [`set_references`](Self::set_references).
        ///
        /// <p>A list of references.</p>
        pub fn references(mut self, input: crate::model::ReferenceListItem) -> Self {
            let mut v = self.references.unwrap_or_default();
            v.push(input);
            self.references = Some(v);
            self
        }
        /// <p>A list of references.</p>
        pub fn set_references(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ReferenceListItem>>,
        ) -> Self {
            self.references = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListReferencesOutput`](crate::output::ListReferencesOutput).
        pub fn build(self) -> crate::output::ListReferencesOutput {
            crate::output::ListReferencesOutput {
                next_token: self.next_token,
                references: self.references,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListReferencesOutput {
    /// Creates a new builder-style object to manufacture [`ListReferencesOutput`](crate::output::ListReferencesOutput).
    pub fn builder() -> crate::output::list_references_output::Builder {
        crate::output::list_references_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteReferenceOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteReferenceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteReferenceOutput`](crate::output::DeleteReferenceOutput).
pub mod delete_reference_output {

    /// A builder for [`DeleteReferenceOutput`](crate::output::DeleteReferenceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteReferenceOutput`](crate::output::DeleteReferenceOutput).
        pub fn build(self) -> crate::output::DeleteReferenceOutput {
            crate::output::DeleteReferenceOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteReferenceOutput {
    /// Creates a new builder-style object to manufacture [`DeleteReferenceOutput`](crate::output::DeleteReferenceOutput).
    pub fn builder() -> crate::output::delete_reference_output::Builder {
        crate::output::delete_reference_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetReferenceMetadataOutput {
    /// <p>The reference's ID.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The reference's ARN.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The reference's reference store ID.</p>
    #[doc(hidden)]
    pub reference_store_id: std::option::Option<std::string::String>,
    /// <p>The reference's MD5 checksum.</p>
    #[doc(hidden)]
    pub md5: std::option::Option<std::string::String>,
    /// <p>The reference's status.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::model::ReferenceStatus>,
    /// <p>The reference's name.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The reference's description.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>When the reference was created.</p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>When the reference was updated.</p>
    #[doc(hidden)]
    pub update_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The reference's files.</p>
    #[doc(hidden)]
    pub files: std::option::Option<crate::model::ReferenceFiles>,
    _request_id: Option<String>,
}
impl GetReferenceMetadataOutput {
    /// <p>The reference's ID.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The reference's ARN.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The reference's reference store ID.</p>
    pub fn reference_store_id(&self) -> std::option::Option<&str> {
        self.reference_store_id.as_deref()
    }
    /// <p>The reference's MD5 checksum.</p>
    pub fn md5(&self) -> std::option::Option<&str> {
        self.md5.as_deref()
    }
    /// <p>The reference's status.</p>
    pub fn status(&self) -> std::option::Option<&crate::model::ReferenceStatus> {
        self.status.as_ref()
    }
    /// <p>The reference's name.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The reference's description.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>When the reference was created.</p>
    pub fn creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>When the reference was updated.</p>
    pub fn update_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.update_time.as_ref()
    }
    /// <p>The reference's files.</p>
    pub fn files(&self) -> std::option::Option<&crate::model::ReferenceFiles> {
        self.files.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetReferenceMetadataOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetReferenceMetadataOutput`](crate::output::GetReferenceMetadataOutput).
pub mod get_reference_metadata_output {

    /// A builder for [`GetReferenceMetadataOutput`](crate::output::GetReferenceMetadataOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) reference_store_id: std::option::Option<std::string::String>,
        pub(crate) md5: std::option::Option<std::string::String>,
        pub(crate) status: std::option::Option<crate::model::ReferenceStatus>,
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) description: std::option::Option<std::string::String>,
        pub(crate) creation_time: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) update_time: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) files: std::option::Option<crate::model::ReferenceFiles>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The reference's ID.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        /// <p>The reference's ID.</p>
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// <p>The reference's ARN.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// <p>The reference's ARN.</p>
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// <p>The reference's reference store ID.</p>
        pub fn reference_store_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.reference_store_id = Some(input.into());
            self
        }
        /// <p>The reference's reference store ID.</p>
        pub fn set_reference_store_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.reference_store_id = input;
            self
        }
        /// <p>The reference's MD5 checksum.</p>
        pub fn md5(mut self, input: impl Into<std::string::String>) -> Self {
            self.md5 = Some(input.into());
            self
        }
        /// <p>The reference's MD5 checksum.</p>
        pub fn set_md5(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.md5 = input;
            self
        }
        /// <p>The reference's status.</p>
        pub fn status(mut self, input: crate::model::ReferenceStatus) -> Self {
            self.status = Some(input);
            self
        }
        /// <p>The reference's status.</p>
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::ReferenceStatus>,
        ) -> Self {
            self.status = input;
            self
        }
        /// <p>The reference's name.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        /// <p>The reference's name.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// <p>The reference's description.</p>
        pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
            self.description = Some(input.into());
            self
        }
        /// <p>The reference's description.</p>
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.description = input;
            self
        }
        /// <p>When the reference was created.</p>
        pub fn creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.creation_time = Some(input);
            self
        }
        /// <p>When the reference was created.</p>
        pub fn set_creation_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.creation_time = input;
            self
        }
        /// <p>When the reference was updated.</p>
        pub fn update_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.update_time = Some(input);
            self
        }
        /// <p>When the reference was updated.</p>
        pub fn set_update_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.update_time = input;
            self
        }
        /// <p>The reference's files.</p>
        pub fn files(mut self, input: crate::model::ReferenceFiles) -> Self {
            self.files = Some(input);
            self
        }
        /// <p>The reference's files.</p>
        pub fn set_files(
            mut self,
            input: std::option::Option<crate::model::ReferenceFiles>,
        ) -> Self {
            self.files = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetReferenceMetadataOutput`](crate::output::GetReferenceMetadataOutput).
        pub fn build(self) -> crate::output::GetReferenceMetadataOutput {
            crate::output::GetReferenceMetadataOutput {
                id: self.id,
                arn: self.arn,
                reference_store_id: self.reference_store_id,
                md5: self.md5,
                status: self.status,
                name: self.name,
                description: self.description,
                creation_time: self.creation_time,
                update_time: self.update_time,
                files: self.files,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetReferenceMetadataOutput {
    /// Creates a new builder-style object to manufacture [`GetReferenceMetadataOutput`](crate::output::GetReferenceMetadataOutput).
    pub fn builder() -> crate::output::get_reference_metadata_output::Builder {
        crate::output::get_reference_metadata_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListAnnotationStoresOutput {
    /// <p>A list of stores.</p>
    #[doc(hidden)]
    pub annotation_stores: std::option::Option<std::vec::Vec<crate::model::AnnotationStoreItem>>,
    /// <p>A pagination token that's included if more results are available.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListAnnotationStoresOutput {
    /// <p>A list of stores.</p>
    pub fn annotation_stores(&self) -> std::option::Option<&[crate::model::AnnotationStoreItem]> {
        self.annotation_stores.as_deref()
    }
    /// <p>A pagination token that's included if more results are available.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListAnnotationStoresOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListAnnotationStoresOutput`](crate::output::ListAnnotationStoresOutput).
pub mod list_annotation_stores_output {

    /// A builder for [`ListAnnotationStoresOutput`](crate::output::ListAnnotationStoresOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) annotation_stores:
            std::option::Option<std::vec::Vec<crate::model::AnnotationStoreItem>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `annotation_stores`.
        ///
        /// To override the contents of this collection use [`set_annotation_stores`](Self::set_annotation_stores).
        ///
        /// <p>A list of stores.</p>
        pub fn annotation_stores(mut self, input: crate::model::AnnotationStoreItem) -> Self {
            let mut v = self.annotation_stores.unwrap_or_default();
            v.push(input);
            self.annotation_stores = Some(v);
            self
        }
        /// <p>A list of stores.</p>
        pub fn set_annotation_stores(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::AnnotationStoreItem>>,
        ) -> Self {
            self.annotation_stores = input;
            self
        }
        /// <p>A pagination token that's included if more results are available.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>A pagination token that's included if more results are available.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListAnnotationStoresOutput`](crate::output::ListAnnotationStoresOutput).
        pub fn build(self) -> crate::output::ListAnnotationStoresOutput {
            crate::output::ListAnnotationStoresOutput {
                annotation_stores: self.annotation_stores,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListAnnotationStoresOutput {
    /// Creates a new builder-style object to manufacture [`ListAnnotationStoresOutput`](crate::output::ListAnnotationStoresOutput).
    pub fn builder() -> crate::output::list_annotation_stores_output::Builder {
        crate::output::list_annotation_stores_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateAnnotationStoreOutput {
    /// <p>The store's ID.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The store's genome reference.</p>
    #[doc(hidden)]
    pub reference: std::option::Option<crate::model::ReferenceItem>,
    /// <p>The annotation file format of the store.</p>
    #[doc(hidden)]
    pub store_format: std::option::Option<crate::model::StoreFormat>,
    /// <p>The store's file parsing options.</p>
    #[doc(hidden)]
    pub store_options: std::option::Option<crate::model::StoreOptions>,
    /// <p>The store's status.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::model::StoreStatus>,
    /// <p>The store's name.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>When the store was created.</p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl CreateAnnotationStoreOutput {
    /// <p>The store's ID.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The store's genome reference.</p>
    pub fn reference(&self) -> std::option::Option<&crate::model::ReferenceItem> {
        self.reference.as_ref()
    }
    /// <p>The annotation file format of the store.</p>
    pub fn store_format(&self) -> std::option::Option<&crate::model::StoreFormat> {
        self.store_format.as_ref()
    }
    /// <p>The store's file parsing options.</p>
    pub fn store_options(&self) -> std::option::Option<&crate::model::StoreOptions> {
        self.store_options.as_ref()
    }
    /// <p>The store's status.</p>
    pub fn status(&self) -> std::option::Option<&crate::model::StoreStatus> {
        self.status.as_ref()
    }
    /// <p>The store's name.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>When the store was created.</p>
    pub fn creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateAnnotationStoreOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateAnnotationStoreOutput`](crate::output::CreateAnnotationStoreOutput).
pub mod create_annotation_store_output {

    /// A builder for [`CreateAnnotationStoreOutput`](crate::output::CreateAnnotationStoreOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) reference: std::option::Option<crate::model::ReferenceItem>,
        pub(crate) store_format: std::option::Option<crate::model::StoreFormat>,
        pub(crate) store_options: std::option::Option<crate::model::StoreOptions>,
        pub(crate) status: std::option::Option<crate::model::StoreStatus>,
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) creation_time: std::option::Option<aws_smithy_types::DateTime>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The store's ID.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        /// <p>The store's ID.</p>
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// <p>The store's genome reference.</p>
        pub fn reference(mut self, input: crate::model::ReferenceItem) -> Self {
            self.reference = Some(input);
            self
        }
        /// <p>The store's genome reference.</p>
        pub fn set_reference(
            mut self,
            input: std::option::Option<crate::model::ReferenceItem>,
        ) -> Self {
            self.reference = input;
            self
        }
        /// <p>The annotation file format of the store.</p>
        pub fn store_format(mut self, input: crate::model::StoreFormat) -> Self {
            self.store_format = Some(input);
            self
        }
        /// <p>The annotation file format of the store.</p>
        pub fn set_store_format(
            mut self,
            input: std::option::Option<crate::model::StoreFormat>,
        ) -> Self {
            self.store_format = input;
            self
        }
        /// <p>The store's file parsing options.</p>
        pub fn store_options(mut self, input: crate::model::StoreOptions) -> Self {
            self.store_options = Some(input);
            self
        }
        /// <p>The store's file parsing options.</p>
        pub fn set_store_options(
            mut self,
            input: std::option::Option<crate::model::StoreOptions>,
        ) -> Self {
            self.store_options = input;
            self
        }
        /// <p>The store's status.</p>
        pub fn status(mut self, input: crate::model::StoreStatus) -> Self {
            self.status = Some(input);
            self
        }
        /// <p>The store's status.</p>
        pub fn set_status(mut self, input: std::option::Option<crate::model::StoreStatus>) -> Self {
            self.status = input;
            self
        }
        /// <p>The store's name.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        /// <p>The store's name.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// <p>When the store was created.</p>
        pub fn creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.creation_time = Some(input);
            self
        }
        /// <p>When the store was created.</p>
        pub fn set_creation_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.creation_time = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateAnnotationStoreOutput`](crate::output::CreateAnnotationStoreOutput).
        pub fn build(self) -> crate::output::CreateAnnotationStoreOutput {
            crate::output::CreateAnnotationStoreOutput {
                id: self.id,
                reference: self.reference,
                store_format: self.store_format,
                store_options: self.store_options,
                status: self.status,
                name: self.name,
                creation_time: self.creation_time,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateAnnotationStoreOutput {
    /// Creates a new builder-style object to manufacture [`CreateAnnotationStoreOutput`](crate::output::CreateAnnotationStoreOutput).
    pub fn builder() -> crate::output::create_annotation_store_output::Builder {
        crate::output::create_annotation_store_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteAnnotationStoreOutput {
    /// <p>The store's status.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::model::StoreStatus>,
    _request_id: Option<String>,
}
impl DeleteAnnotationStoreOutput {
    /// <p>The store's status.</p>
    pub fn status(&self) -> std::option::Option<&crate::model::StoreStatus> {
        self.status.as_ref()
    }
}
impl aws_http::request_id::RequestId for DeleteAnnotationStoreOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteAnnotationStoreOutput`](crate::output::DeleteAnnotationStoreOutput).
pub mod delete_annotation_store_output {

    /// A builder for [`DeleteAnnotationStoreOutput`](crate::output::DeleteAnnotationStoreOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) status: std::option::Option<crate::model::StoreStatus>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The store's status.</p>
        pub fn status(mut self, input: crate::model::StoreStatus) -> Self {
            self.status = Some(input);
            self
        }
        /// <p>The store's status.</p>
        pub fn set_status(mut self, input: std::option::Option<crate::model::StoreStatus>) -> Self {
            self.status = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteAnnotationStoreOutput`](crate::output::DeleteAnnotationStoreOutput).
        pub fn build(self) -> crate::output::DeleteAnnotationStoreOutput {
            crate::output::DeleteAnnotationStoreOutput {
                status: self.status,
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteAnnotationStoreOutput {
    /// Creates a new builder-style object to manufacture [`DeleteAnnotationStoreOutput`](crate::output::DeleteAnnotationStoreOutput).
    pub fn builder() -> crate::output::delete_annotation_store_output::Builder {
        crate::output::delete_annotation_store_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateAnnotationStoreOutput {
    /// <p>The store's ID.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The store's genome reference.</p>
    #[doc(hidden)]
    pub reference: std::option::Option<crate::model::ReferenceItem>,
    /// <p>The store's status.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::model::StoreStatus>,
    /// <p>The store's name.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The store's description.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>When the store was created.</p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>When the store was updated.</p>
    #[doc(hidden)]
    pub update_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>Parsing options for the store.</p>
    #[doc(hidden)]
    pub store_options: std::option::Option<crate::model::StoreOptions>,
    /// <p>The annotation file format of the store.</p>
    #[doc(hidden)]
    pub store_format: std::option::Option<crate::model::StoreFormat>,
    _request_id: Option<String>,
}
impl UpdateAnnotationStoreOutput {
    /// <p>The store's ID.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The store's genome reference.</p>
    pub fn reference(&self) -> std::option::Option<&crate::model::ReferenceItem> {
        self.reference.as_ref()
    }
    /// <p>The store's status.</p>
    pub fn status(&self) -> std::option::Option<&crate::model::StoreStatus> {
        self.status.as_ref()
    }
    /// <p>The store's name.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The store's description.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>When the store was created.</p>
    pub fn creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>When the store was updated.</p>
    pub fn update_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.update_time.as_ref()
    }
    /// <p>Parsing options for the store.</p>
    pub fn store_options(&self) -> std::option::Option<&crate::model::StoreOptions> {
        self.store_options.as_ref()
    }
    /// <p>The annotation file format of the store.</p>
    pub fn store_format(&self) -> std::option::Option<&crate::model::StoreFormat> {
        self.store_format.as_ref()
    }
}
impl aws_http::request_id::RequestId for UpdateAnnotationStoreOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`UpdateAnnotationStoreOutput`](crate::output::UpdateAnnotationStoreOutput).
pub mod update_annotation_store_output {

    /// A builder for [`UpdateAnnotationStoreOutput`](crate::output::UpdateAnnotationStoreOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) reference: std::option::Option<crate::model::ReferenceItem>,
        pub(crate) status: std::option::Option<crate::model::StoreStatus>,
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) description: std::option::Option<std::string::String>,
        pub(crate) creation_time: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) update_time: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) store_options: std::option::Option<crate::model::StoreOptions>,
        pub(crate) store_format: std::option::Option<crate::model::StoreFormat>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The store's ID.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        /// <p>The store's ID.</p>
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// <p>The store's genome reference.</p>
        pub fn reference(mut self, input: crate::model::ReferenceItem) -> Self {
            self.reference = Some(input);
            self
        }
        /// <p>The store's genome reference.</p>
        pub fn set_reference(
            mut self,
            input: std::option::Option<crate::model::ReferenceItem>,
        ) -> Self {
            self.reference = input;
            self
        }
        /// <p>The store's status.</p>
        pub fn status(mut self, input: crate::model::StoreStatus) -> Self {
            self.status = Some(input);
            self
        }
        /// <p>The store's status.</p>
        pub fn set_status(mut self, input: std::option::Option<crate::model::StoreStatus>) -> Self {
            self.status = input;
            self
        }
        /// <p>The store's name.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        /// <p>The store's name.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// <p>The store's description.</p>
        pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
            self.description = Some(input.into());
            self
        }
        /// <p>The store's description.</p>
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.description = input;
            self
        }
        /// <p>When the store was created.</p>
        pub fn creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.creation_time = Some(input);
            self
        }
        /// <p>When the store was created.</p>
        pub fn set_creation_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.creation_time = input;
            self
        }
        /// <p>When the store was updated.</p>
        pub fn update_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.update_time = Some(input);
            self
        }
        /// <p>When the store was updated.</p>
        pub fn set_update_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.update_time = input;
            self
        }
        /// <p>Parsing options for the store.</p>
        pub fn store_options(mut self, input: crate::model::StoreOptions) -> Self {
            self.store_options = Some(input);
            self
        }
        /// <p>Parsing options for the store.</p>
        pub fn set_store_options(
            mut self,
            input: std::option::Option<crate::model::StoreOptions>,
        ) -> Self {
            self.store_options = input;
            self
        }
        /// <p>The annotation file format of the store.</p>
        pub fn store_format(mut self, input: crate::model::StoreFormat) -> Self {
            self.store_format = Some(input);
            self
        }
        /// <p>The annotation file format of the store.</p>
        pub fn set_store_format(
            mut self,
            input: std::option::Option<crate::model::StoreFormat>,
        ) -> Self {
            self.store_format = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateAnnotationStoreOutput`](crate::output::UpdateAnnotationStoreOutput).
        pub fn build(self) -> crate::output::UpdateAnnotationStoreOutput {
            crate::output::UpdateAnnotationStoreOutput {
                id: self.id,
                reference: self.reference,
                status: self.status,
                name: self.name,
                description: self.description,
                creation_time: self.creation_time,
                update_time: self.update_time,
                store_options: self.store_options,
                store_format: self.store_format,
                _request_id: self._request_id,
            }
        }
    }
}
impl UpdateAnnotationStoreOutput {
    /// Creates a new builder-style object to manufacture [`UpdateAnnotationStoreOutput`](crate::output::UpdateAnnotationStoreOutput).
    pub fn builder() -> crate::output::update_annotation_store_output::Builder {
        crate::output::update_annotation_store_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetAnnotationStoreOutput {
    /// <p>The store's ID.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The store's genome reference.</p>
    #[doc(hidden)]
    pub reference: std::option::Option<crate::model::ReferenceItem>,
    /// <p>The store's status.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::model::StoreStatus>,
    /// <p>The store's ARN.</p>
    #[doc(hidden)]
    pub store_arn: std::option::Option<std::string::String>,
    /// <p>The store's name.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The store's description.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The store's server-side encryption (SSE) settings.</p>
    #[doc(hidden)]
    pub sse_config: std::option::Option<crate::model::SseConfig>,
    /// <p>When the store was created.</p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>When the store was updated.</p>
    #[doc(hidden)]
    pub update_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The store's tags.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>The store's parsing options.</p>
    #[doc(hidden)]
    pub store_options: std::option::Option<crate::model::StoreOptions>,
    /// <p>The store's annotation file format.</p>
    #[doc(hidden)]
    pub store_format: std::option::Option<crate::model::StoreFormat>,
    /// <p>A status message.</p>
    #[doc(hidden)]
    pub status_message: std::option::Option<std::string::String>,
    /// <p>The store's size in bytes.</p>
    #[doc(hidden)]
    pub store_size_bytes: std::option::Option<i64>,
    _request_id: Option<String>,
}
impl GetAnnotationStoreOutput {
    /// <p>The store's ID.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The store's genome reference.</p>
    pub fn reference(&self) -> std::option::Option<&crate::model::ReferenceItem> {
        self.reference.as_ref()
    }
    /// <p>The store's status.</p>
    pub fn status(&self) -> std::option::Option<&crate::model::StoreStatus> {
        self.status.as_ref()
    }
    /// <p>The store's ARN.</p>
    pub fn store_arn(&self) -> std::option::Option<&str> {
        self.store_arn.as_deref()
    }
    /// <p>The store's name.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The store's description.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The store's server-side encryption (SSE) settings.</p>
    pub fn sse_config(&self) -> std::option::Option<&crate::model::SseConfig> {
        self.sse_config.as_ref()
    }
    /// <p>When the store was created.</p>
    pub fn creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>When the store was updated.</p>
    pub fn update_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.update_time.as_ref()
    }
    /// <p>The store's tags.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
    /// <p>The store's parsing options.</p>
    pub fn store_options(&self) -> std::option::Option<&crate::model::StoreOptions> {
        self.store_options.as_ref()
    }
    /// <p>The store's annotation file format.</p>
    pub fn store_format(&self) -> std::option::Option<&crate::model::StoreFormat> {
        self.store_format.as_ref()
    }
    /// <p>A status message.</p>
    pub fn status_message(&self) -> std::option::Option<&str> {
        self.status_message.as_deref()
    }
    /// <p>The store's size in bytes.</p>
    pub fn store_size_bytes(&self) -> std::option::Option<i64> {
        self.store_size_bytes
    }
}
impl aws_http::request_id::RequestId for GetAnnotationStoreOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetAnnotationStoreOutput`](crate::output::GetAnnotationStoreOutput).
pub mod get_annotation_store_output {

    /// A builder for [`GetAnnotationStoreOutput`](crate::output::GetAnnotationStoreOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) reference: std::option::Option<crate::model::ReferenceItem>,
        pub(crate) status: std::option::Option<crate::model::StoreStatus>,
        pub(crate) store_arn: std::option::Option<std::string::String>,
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) description: std::option::Option<std::string::String>,
        pub(crate) sse_config: std::option::Option<crate::model::SseConfig>,
        pub(crate) creation_time: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) update_time: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) tags: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
        pub(crate) store_options: std::option::Option<crate::model::StoreOptions>,
        pub(crate) store_format: std::option::Option<crate::model::StoreFormat>,
        pub(crate) status_message: std::option::Option<std::string::String>,
        pub(crate) store_size_bytes: std::option::Option<i64>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The store's ID.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        /// <p>The store's ID.</p>
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// <p>The store's genome reference.</p>
        pub fn reference(mut self, input: crate::model::ReferenceItem) -> Self {
            self.reference = Some(input);
            self
        }
        /// <p>The store's genome reference.</p>
        pub fn set_reference(
            mut self,
            input: std::option::Option<crate::model::ReferenceItem>,
        ) -> Self {
            self.reference = input;
            self
        }
        /// <p>The store's status.</p>
        pub fn status(mut self, input: crate::model::StoreStatus) -> Self {
            self.status = Some(input);
            self
        }
        /// <p>The store's status.</p>
        pub fn set_status(mut self, input: std::option::Option<crate::model::StoreStatus>) -> Self {
            self.status = input;
            self
        }
        /// <p>The store's ARN.</p>
        pub fn store_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.store_arn = Some(input.into());
            self
        }
        /// <p>The store's ARN.</p>
        pub fn set_store_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.store_arn = input;
            self
        }
        /// <p>The store's name.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        /// <p>The store's name.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// <p>The store's description.</p>
        pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
            self.description = Some(input.into());
            self
        }
        /// <p>The store's description.</p>
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.description = input;
            self
        }
        /// <p>The store's server-side encryption (SSE) settings.</p>
        pub fn sse_config(mut self, input: crate::model::SseConfig) -> Self {
            self.sse_config = Some(input);
            self
        }
        /// <p>The store's server-side encryption (SSE) settings.</p>
        pub fn set_sse_config(
            mut self,
            input: std::option::Option<crate::model::SseConfig>,
        ) -> Self {
            self.sse_config = input;
            self
        }
        /// <p>When the store was created.</p>
        pub fn creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.creation_time = Some(input);
            self
        }
        /// <p>When the store was created.</p>
        pub fn set_creation_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.creation_time = input;
            self
        }
        /// <p>When the store was updated.</p>
        pub fn update_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.update_time = Some(input);
            self
        }
        /// <p>When the store was updated.</p>
        pub fn set_update_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.update_time = input;
            self
        }
        /// Adds a key-value pair to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>The store's tags.</p>
        pub fn tags(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            let mut hash_map = self.tags.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.tags = Some(hash_map);
            self
        }
        /// <p>The store's tags.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.tags = input;
            self
        }
        /// <p>The store's parsing options.</p>
        pub fn store_options(mut self, input: crate::model::StoreOptions) -> Self {
            self.store_options = Some(input);
            self
        }
        /// <p>The store's parsing options.</p>
        pub fn set_store_options(
            mut self,
            input: std::option::Option<crate::model::StoreOptions>,
        ) -> Self {
            self.store_options = input;
            self
        }
        /// <p>The store's annotation file format.</p>
        pub fn store_format(mut self, input: crate::model::StoreFormat) -> Self {
            self.store_format = Some(input);
            self
        }
        /// <p>The store's annotation file format.</p>
        pub fn set_store_format(
            mut self,
            input: std::option::Option<crate::model::StoreFormat>,
        ) -> Self {
            self.store_format = input;
            self
        }
        /// <p>A status message.</p>
        pub fn status_message(mut self, input: impl Into<std::string::String>) -> Self {
            self.status_message = Some(input.into());
            self
        }
        /// <p>A status message.</p>
        pub fn set_status_message(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.status_message = input;
            self
        }
        /// <p>The store's size in bytes.</p>
        pub fn store_size_bytes(mut self, input: i64) -> Self {
            self.store_size_bytes = Some(input);
            self
        }
        /// <p>The store's size in bytes.</p>
        pub fn set_store_size_bytes(mut self, input: std::option::Option<i64>) -> Self {
            self.store_size_bytes = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetAnnotationStoreOutput`](crate::output::GetAnnotationStoreOutput).
        pub fn build(self) -> crate::output::GetAnnotationStoreOutput {
            crate::output::GetAnnotationStoreOutput {
                id: self.id,
                reference: self.reference,
                status: self.status,
                store_arn: self.store_arn,
                name: self.name,
                description: self.description,
                sse_config: self.sse_config,
                creation_time: self.creation_time,
                update_time: self.update_time,
                tags: self.tags,
                store_options: self.store_options,
                store_format: self.store_format,
                status_message: self.status_message,
                store_size_bytes: self.store_size_bytes,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetAnnotationStoreOutput {
    /// Creates a new builder-style object to manufacture [`GetAnnotationStoreOutput`](crate::output::GetAnnotationStoreOutput).
    pub fn builder() -> crate::output::get_annotation_store_output::Builder {
        crate::output::get_annotation_store_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListAnnotationImportJobsOutput {
    /// <p>A list of jobs.</p>
    #[doc(hidden)]
    pub annotation_import_jobs:
        std::option::Option<std::vec::Vec<crate::model::AnnotationImportJobItem>>,
    /// <p>A pagination token that's included if more results are available.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListAnnotationImportJobsOutput {
    /// <p>A list of jobs.</p>
    pub fn annotation_import_jobs(
        &self,
    ) -> std::option::Option<&[crate::model::AnnotationImportJobItem]> {
        self.annotation_import_jobs.as_deref()
    }
    /// <p>A pagination token that's included if more results are available.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListAnnotationImportJobsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListAnnotationImportJobsOutput`](crate::output::ListAnnotationImportJobsOutput).
pub mod list_annotation_import_jobs_output {

    /// A builder for [`ListAnnotationImportJobsOutput`](crate::output::ListAnnotationImportJobsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) annotation_import_jobs:
            std::option::Option<std::vec::Vec<crate::model::AnnotationImportJobItem>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `annotation_import_jobs`.
        ///
        /// To override the contents of this collection use [`set_annotation_import_jobs`](Self::set_annotation_import_jobs).
        ///
        /// <p>A list of jobs.</p>
        pub fn annotation_import_jobs(
            mut self,
            input: crate::model::AnnotationImportJobItem,
        ) -> Self {
            let mut v = self.annotation_import_jobs.unwrap_or_default();
            v.push(input);
            self.annotation_import_jobs = Some(v);
            self
        }
        /// <p>A list of jobs.</p>
        pub fn set_annotation_import_jobs(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::AnnotationImportJobItem>>,
        ) -> Self {
            self.annotation_import_jobs = input;
            self
        }
        /// <p>A pagination token that's included if more results are available.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>A pagination token that's included if more results are available.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListAnnotationImportJobsOutput`](crate::output::ListAnnotationImportJobsOutput).
        pub fn build(self) -> crate::output::ListAnnotationImportJobsOutput {
            crate::output::ListAnnotationImportJobsOutput {
                annotation_import_jobs: self.annotation_import_jobs,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListAnnotationImportJobsOutput {
    /// Creates a new builder-style object to manufacture [`ListAnnotationImportJobsOutput`](crate::output::ListAnnotationImportJobsOutput).
    pub fn builder() -> crate::output::list_annotation_import_jobs_output::Builder {
        crate::output::list_annotation_import_jobs_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StartAnnotationImportJobOutput {
    /// <p>The job's ID.</p>
    #[doc(hidden)]
    pub job_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl StartAnnotationImportJobOutput {
    /// <p>The job's ID.</p>
    pub fn job_id(&self) -> std::option::Option<&str> {
        self.job_id.as_deref()
    }
}
impl aws_http::request_id::RequestId for StartAnnotationImportJobOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`StartAnnotationImportJobOutput`](crate::output::StartAnnotationImportJobOutput).
pub mod start_annotation_import_job_output {

    /// A builder for [`StartAnnotationImportJobOutput`](crate::output::StartAnnotationImportJobOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) job_id: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The job's ID.</p>
        pub fn job_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.job_id = Some(input.into());
            self
        }
        /// <p>The job's ID.</p>
        pub fn set_job_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.job_id = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`StartAnnotationImportJobOutput`](crate::output::StartAnnotationImportJobOutput).
        pub fn build(self) -> crate::output::StartAnnotationImportJobOutput {
            crate::output::StartAnnotationImportJobOutput {
                job_id: self.job_id,
                _request_id: self._request_id,
            }
        }
    }
}
impl StartAnnotationImportJobOutput {
    /// Creates a new builder-style object to manufacture [`StartAnnotationImportJobOutput`](crate::output::StartAnnotationImportJobOutput).
    pub fn builder() -> crate::output::start_annotation_import_job_output::Builder {
        crate::output::start_annotation_import_job_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CancelAnnotationImportJobOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for CancelAnnotationImportJobOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CancelAnnotationImportJobOutput`](crate::output::CancelAnnotationImportJobOutput).
pub mod cancel_annotation_import_job_output {

    /// A builder for [`CancelAnnotationImportJobOutput`](crate::output::CancelAnnotationImportJobOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CancelAnnotationImportJobOutput`](crate::output::CancelAnnotationImportJobOutput).
        pub fn build(self) -> crate::output::CancelAnnotationImportJobOutput {
            crate::output::CancelAnnotationImportJobOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl CancelAnnotationImportJobOutput {
    /// Creates a new builder-style object to manufacture [`CancelAnnotationImportJobOutput`](crate::output::CancelAnnotationImportJobOutput).
    pub fn builder() -> crate::output::cancel_annotation_import_job_output::Builder {
        crate::output::cancel_annotation_import_job_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetAnnotationImportJobOutput {
    /// <p>The job's ID.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The job's destination annotation store.</p>
    #[doc(hidden)]
    pub destination_name: std::option::Option<std::string::String>,
    /// <p>The job's service role ARN.</p>
    #[doc(hidden)]
    pub role_arn: std::option::Option<std::string::String>,
    /// <p>The job's status.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::model::JobStatus>,
    /// <p>The job's status message.</p>
    #[doc(hidden)]
    pub status_message: std::option::Option<std::string::String>,
    /// <p>When the job was created.</p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>When the job was updated.</p>
    #[doc(hidden)]
    pub update_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>When the job completed.</p>
    #[doc(hidden)]
    pub completion_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The job's imported items.</p>
    #[doc(hidden)]
    pub items: std::option::Option<std::vec::Vec<crate::model::AnnotationImportItemDetail>>,
    /// <p>The job's left normalization setting.</p>
    #[doc(hidden)]
    pub run_left_normalization: bool,
    /// <p>Formatting options for a file.</p>
    #[doc(hidden)]
    pub format_options: std::option::Option<crate::model::FormatOptions>,
    _request_id: Option<String>,
}
impl GetAnnotationImportJobOutput {
    /// <p>The job's ID.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The job's destination annotation store.</p>
    pub fn destination_name(&self) -> std::option::Option<&str> {
        self.destination_name.as_deref()
    }
    /// <p>The job's service role ARN.</p>
    pub fn role_arn(&self) -> std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>The job's status.</p>
    pub fn status(&self) -> std::option::Option<&crate::model::JobStatus> {
        self.status.as_ref()
    }
    /// <p>The job's status message.</p>
    pub fn status_message(&self) -> std::option::Option<&str> {
        self.status_message.as_deref()
    }
    /// <p>When the job was created.</p>
    pub fn creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>When the job was updated.</p>
    pub fn update_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.update_time.as_ref()
    }
    /// <p>When the job completed.</p>
    pub fn completion_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.completion_time.as_ref()
    }
    /// <p>The job's imported items.</p>
    pub fn items(&self) -> std::option::Option<&[crate::model::AnnotationImportItemDetail]> {
        self.items.as_deref()
    }
    /// <p>The job's left normalization setting.</p>
    pub fn run_left_normalization(&self) -> bool {
        self.run_left_normalization
    }
    /// <p>Formatting options for a file.</p>
    pub fn format_options(&self) -> std::option::Option<&crate::model::FormatOptions> {
        self.format_options.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetAnnotationImportJobOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetAnnotationImportJobOutput`](crate::output::GetAnnotationImportJobOutput).
pub mod get_annotation_import_job_output {

    /// A builder for [`GetAnnotationImportJobOutput`](crate::output::GetAnnotationImportJobOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) destination_name: std::option::Option<std::string::String>,
        pub(crate) role_arn: std::option::Option<std::string::String>,
        pub(crate) status: std::option::Option<crate::model::JobStatus>,
        pub(crate) status_message: std::option::Option<std::string::String>,
        pub(crate) creation_time: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) update_time: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) completion_time: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) items:
            std::option::Option<std::vec::Vec<crate::model::AnnotationImportItemDetail>>,
        pub(crate) run_left_normalization: std::option::Option<bool>,
        pub(crate) format_options: std::option::Option<crate::model::FormatOptions>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The job's ID.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        /// <p>The job's ID.</p>
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// <p>The job's destination annotation store.</p>
        pub fn destination_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.destination_name = Some(input.into());
            self
        }
        /// <p>The job's destination annotation store.</p>
        pub fn set_destination_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.destination_name = input;
            self
        }
        /// <p>The job's service role ARN.</p>
        pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.role_arn = Some(input.into());
            self
        }
        /// <p>The job's service role ARN.</p>
        pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.role_arn = input;
            self
        }
        /// <p>The job's status.</p>
        pub fn status(mut self, input: crate::model::JobStatus) -> Self {
            self.status = Some(input);
            self
        }
        /// <p>The job's status.</p>
        pub fn set_status(mut self, input: std::option::Option<crate::model::JobStatus>) -> Self {
            self.status = input;
            self
        }
        /// <p>The job's status message.</p>
        pub fn status_message(mut self, input: impl Into<std::string::String>) -> Self {
            self.status_message = Some(input.into());
            self
        }
        /// <p>The job's status message.</p>
        pub fn set_status_message(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.status_message = input;
            self
        }
        /// <p>When the job was created.</p>
        pub fn creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.creation_time = Some(input);
            self
        }
        /// <p>When the job was created.</p>
        pub fn set_creation_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.creation_time = input;
            self
        }
        /// <p>When the job was updated.</p>
        pub fn update_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.update_time = Some(input);
            self
        }
        /// <p>When the job was updated.</p>
        pub fn set_update_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.update_time = input;
            self
        }
        /// <p>When the job completed.</p>
        pub fn completion_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.completion_time = Some(input);
            self
        }
        /// <p>When the job completed.</p>
        pub fn set_completion_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.completion_time = input;
            self
        }
        /// Appends an item to `items`.
        ///
        /// To override the contents of this collection use [`set_items`](Self::set_items).
        ///
        /// <p>The job's imported items.</p>
        pub fn items(mut self, input: crate::model::AnnotationImportItemDetail) -> Self {
            let mut v = self.items.unwrap_or_default();
            v.push(input);
            self.items = Some(v);
            self
        }
        /// <p>The job's imported items.</p>
        pub fn set_items(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::AnnotationImportItemDetail>>,
        ) -> Self {
            self.items = input;
            self
        }
        /// <p>The job's left normalization setting.</p>
        pub fn run_left_normalization(mut self, input: bool) -> Self {
            self.run_left_normalization = Some(input);
            self
        }
        /// <p>The job's left normalization setting.</p>
        pub fn set_run_left_normalization(mut self, input: std::option::Option<bool>) -> Self {
            self.run_left_normalization = input;
            self
        }
        /// <p>Formatting options for a file.</p>
        pub fn format_options(mut self, input: crate::model::FormatOptions) -> Self {
            self.format_options = Some(input);
            self
        }
        /// <p>Formatting options for a file.</p>
        pub fn set_format_options(
            mut self,
            input: std::option::Option<crate::model::FormatOptions>,
        ) -> Self {
            self.format_options = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetAnnotationImportJobOutput`](crate::output::GetAnnotationImportJobOutput).
        pub fn build(self) -> crate::output::GetAnnotationImportJobOutput {
            crate::output::GetAnnotationImportJobOutput {
                id: self.id,
                destination_name: self.destination_name,
                role_arn: self.role_arn,
                status: self.status,
                status_message: self.status_message,
                creation_time: self.creation_time,
                update_time: self.update_time,
                completion_time: self.completion_time,
                items: self.items,
                run_left_normalization: self.run_left_normalization.unwrap_or_default(),
                format_options: self.format_options,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetAnnotationImportJobOutput {
    /// Creates a new builder-style object to manufacture [`GetAnnotationImportJobOutput`](crate::output::GetAnnotationImportJobOutput).
    pub fn builder() -> crate::output::get_annotation_import_job_output::Builder {
        crate::output::get_annotation_import_job_output::Builder::default()
    }
}
