// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[doc(inline)]
pub use aws_smithy_client::Builder;
#[derive(Debug)]
pub(crate) struct Handle {
    pub(crate) client: aws_smithy_client::Client<
        aws_smithy_client::erase::DynConnector,
        aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
    >,
    pub(crate) conf: crate::Config,
}

/// Client for Amazon Omics
///
/// Client for invoking operations on Amazon Omics. Each operation on Amazon Omics is a method on this
/// this struct. `.send()` MUST be invoked on the generated operations to dispatch the request to the service.
///
/// # Examples
/// **Constructing a client and invoking an operation**
/// ```rust,no_run
/// # async fn docs() {
///     // create a shared configuration. This can be used & shared between multiple service clients.
///     let shared_config = aws_config::load_from_env().await;
///     let client = aws_sdk_omics::Client::new(&shared_config);
///     // invoke an operation
///     /* let rsp = client
///         .<operation_name>().
///         .<param>("some value")
///         .send().await; */
/// # }
/// ```
/// **Constructing a client with custom configuration**
/// ```rust,no_run
/// use aws_config::retry::RetryConfig;
/// # async fn docs() {
/// let shared_config = aws_config::load_from_env().await;
/// let config = aws_sdk_omics::config::Builder::from(&shared_config)
///   .retry_config(RetryConfig::disabled())
///   .build();
/// let client = aws_sdk_omics::Client::from_conf(config);
/// # }
#[derive(std::fmt::Debug)]
pub struct Client {
    handle: std::sync::Arc<Handle>,
}

impl std::clone::Clone for Client {
    fn clone(&self) -> Self {
        Self {
            handle: self.handle.clone(),
        }
    }
}

impl
    From<
        aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    > for Client
{
    fn from(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    ) -> Self {
        Self::with_config(client, crate::Config::builder().build())
    }
}

impl Client {
    /// Creates a client with the given service configuration.
    pub fn with_config(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
        conf: crate::Config,
    ) -> Self {
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    /// Returns the client's configuration.
    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl Client {
    /// Constructs a fluent builder for the [`BatchDeleteReadSet`](crate::client::fluent_builders::BatchDeleteReadSet) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`ids(Vec<String>)`](crate::client::fluent_builders::BatchDeleteReadSet::ids) / [`set_ids(Option<Vec<String>>)`](crate::client::fluent_builders::BatchDeleteReadSet::set_ids): <p>The read sets' IDs.</p>
    ///   - [`sequence_store_id(impl Into<String>)`](crate::client::fluent_builders::BatchDeleteReadSet::sequence_store_id) / [`set_sequence_store_id(Option<String>)`](crate::client::fluent_builders::BatchDeleteReadSet::set_sequence_store_id): <p>The read sets' sequence store ID.</p>
    /// - On success, responds with [`BatchDeleteReadSetOutput`](crate::output::BatchDeleteReadSetOutput) with field(s):
    ///   - [`errors(Option<Vec<ReadSetBatchError>>)`](crate::output::BatchDeleteReadSetOutput::errors): <p>Errors returned by individual delete operations.</p>
    /// - On failure, responds with [`SdkError<BatchDeleteReadSetError>`](crate::error::BatchDeleteReadSetError)
    pub fn batch_delete_read_set(&self) -> crate::client::fluent_builders::BatchDeleteReadSet {
        crate::client::fluent_builders::BatchDeleteReadSet::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CancelAnnotationImportJob`](crate::client::fluent_builders::CancelAnnotationImportJob) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`job_id(impl Into<String>)`](crate::client::fluent_builders::CancelAnnotationImportJob::job_id) / [`set_job_id(Option<String>)`](crate::client::fluent_builders::CancelAnnotationImportJob::set_job_id): <p>The job's ID.</p>
    /// - On success, responds with [`CancelAnnotationImportJobOutput`](crate::output::CancelAnnotationImportJobOutput)

    /// - On failure, responds with [`SdkError<CancelAnnotationImportJobError>`](crate::error::CancelAnnotationImportJobError)
    pub fn cancel_annotation_import_job(
        &self,
    ) -> crate::client::fluent_builders::CancelAnnotationImportJob {
        crate::client::fluent_builders::CancelAnnotationImportJob::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CancelRun`](crate::client::fluent_builders::CancelRun) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`id(impl Into<String>)`](crate::client::fluent_builders::CancelRun::id) / [`set_id(Option<String>)`](crate::client::fluent_builders::CancelRun::set_id): <p>The run's ID.</p>
    /// - On success, responds with [`CancelRunOutput`](crate::output::CancelRunOutput)

    /// - On failure, responds with [`SdkError<CancelRunError>`](crate::error::CancelRunError)
    pub fn cancel_run(&self) -> crate::client::fluent_builders::CancelRun {
        crate::client::fluent_builders::CancelRun::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CancelVariantImportJob`](crate::client::fluent_builders::CancelVariantImportJob) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`job_id(impl Into<String>)`](crate::client::fluent_builders::CancelVariantImportJob::job_id) / [`set_job_id(Option<String>)`](crate::client::fluent_builders::CancelVariantImportJob::set_job_id): <p>The job's ID.</p>
    /// - On success, responds with [`CancelVariantImportJobOutput`](crate::output::CancelVariantImportJobOutput)

    /// - On failure, responds with [`SdkError<CancelVariantImportJobError>`](crate::error::CancelVariantImportJobError)
    pub fn cancel_variant_import_job(
        &self,
    ) -> crate::client::fluent_builders::CancelVariantImportJob {
        crate::client::fluent_builders::CancelVariantImportJob::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateAnnotationStore`](crate::client::fluent_builders::CreateAnnotationStore) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`reference(ReferenceItem)`](crate::client::fluent_builders::CreateAnnotationStore::reference) / [`set_reference(Option<ReferenceItem>)`](crate::client::fluent_builders::CreateAnnotationStore::set_reference): <p>The genome reference for the store's annotations.</p>
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::CreateAnnotationStore::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::CreateAnnotationStore::set_name): <p>A name for the store.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::CreateAnnotationStore::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::CreateAnnotationStore::set_description): <p>A description for the store.</p>
    ///   - [`tags(HashMap<String, String>)`](crate::client::fluent_builders::CreateAnnotationStore::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::client::fluent_builders::CreateAnnotationStore::set_tags): <p>Tags for the store.</p>
    ///   - [`sse_config(SseConfig)`](crate::client::fluent_builders::CreateAnnotationStore::sse_config) / [`set_sse_config(Option<SseConfig>)`](crate::client::fluent_builders::CreateAnnotationStore::set_sse_config): <p>Server-side encryption (SSE) settings for the store.</p>
    ///   - [`store_format(StoreFormat)`](crate::client::fluent_builders::CreateAnnotationStore::store_format) / [`set_store_format(Option<StoreFormat>)`](crate::client::fluent_builders::CreateAnnotationStore::set_store_format): <p>The annotation file format of the store.</p>
    ///   - [`store_options(StoreOptions)`](crate::client::fluent_builders::CreateAnnotationStore::store_options) / [`set_store_options(Option<StoreOptions>)`](crate::client::fluent_builders::CreateAnnotationStore::set_store_options): <p>File parsing options for the annotation store.</p>
    /// - On success, responds with [`CreateAnnotationStoreOutput`](crate::output::CreateAnnotationStoreOutput) with field(s):
    ///   - [`id(Option<String>)`](crate::output::CreateAnnotationStoreOutput::id): <p>The store's ID.</p>
    ///   - [`reference(Option<ReferenceItem>)`](crate::output::CreateAnnotationStoreOutput::reference): <p>The store's genome reference.</p>
    ///   - [`store_format(Option<StoreFormat>)`](crate::output::CreateAnnotationStoreOutput::store_format): <p>The annotation file format of the store.</p>
    ///   - [`store_options(Option<StoreOptions>)`](crate::output::CreateAnnotationStoreOutput::store_options): <p>The store's file parsing options.</p>
    ///   - [`status(Option<StoreStatus>)`](crate::output::CreateAnnotationStoreOutput::status): <p>The store's status.</p>
    ///   - [`name(Option<String>)`](crate::output::CreateAnnotationStoreOutput::name): <p>The store's name.</p>
    ///   - [`creation_time(Option<DateTime>)`](crate::output::CreateAnnotationStoreOutput::creation_time): <p>When the store was created.</p>
    /// - On failure, responds with [`SdkError<CreateAnnotationStoreError>`](crate::error::CreateAnnotationStoreError)
    pub fn create_annotation_store(&self) -> crate::client::fluent_builders::CreateAnnotationStore {
        crate::client::fluent_builders::CreateAnnotationStore::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateReferenceStore`](crate::client::fluent_builders::CreateReferenceStore) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::CreateReferenceStore::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::CreateReferenceStore::set_name): <p>A name for the store.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::CreateReferenceStore::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::CreateReferenceStore::set_description): <p>A description for the store.</p>
    ///   - [`sse_config(SseConfig)`](crate::client::fluent_builders::CreateReferenceStore::sse_config) / [`set_sse_config(Option<SseConfig>)`](crate::client::fluent_builders::CreateReferenceStore::set_sse_config): <p>Server-side encryption (SSE) settings for the store.</p>
    ///   - [`tags(HashMap<String, String>)`](crate::client::fluent_builders::CreateReferenceStore::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::client::fluent_builders::CreateReferenceStore::set_tags): <p>Tags for the store.</p>
    ///   - [`client_token(impl Into<String>)`](crate::client::fluent_builders::CreateReferenceStore::client_token) / [`set_client_token(Option<String>)`](crate::client::fluent_builders::CreateReferenceStore::set_client_token): <p>To ensure that requests don't run multiple times, specify a unique token for each request.</p>
    /// - On success, responds with [`CreateReferenceStoreOutput`](crate::output::CreateReferenceStoreOutput) with field(s):
    ///   - [`id(Option<String>)`](crate::output::CreateReferenceStoreOutput::id): <p>The store's ID.</p>
    ///   - [`arn(Option<String>)`](crate::output::CreateReferenceStoreOutput::arn): <p>The store's ARN.</p>
    ///   - [`name(Option<String>)`](crate::output::CreateReferenceStoreOutput::name): <p>The store's name.</p>
    ///   - [`description(Option<String>)`](crate::output::CreateReferenceStoreOutput::description): <p>The store's description.</p>
    ///   - [`sse_config(Option<SseConfig>)`](crate::output::CreateReferenceStoreOutput::sse_config): <p>The store's SSE settings.</p>
    ///   - [`creation_time(Option<DateTime>)`](crate::output::CreateReferenceStoreOutput::creation_time): <p>When the store was created.</p>
    /// - On failure, responds with [`SdkError<CreateReferenceStoreError>`](crate::error::CreateReferenceStoreError)
    pub fn create_reference_store(&self) -> crate::client::fluent_builders::CreateReferenceStore {
        crate::client::fluent_builders::CreateReferenceStore::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateRunGroup`](crate::client::fluent_builders::CreateRunGroup) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::CreateRunGroup::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::CreateRunGroup::set_name): <p>A name for the group.</p>
    ///   - [`max_cpus(i32)`](crate::client::fluent_builders::CreateRunGroup::max_cpus) / [`set_max_cpus(Option<i32>)`](crate::client::fluent_builders::CreateRunGroup::set_max_cpus): <p>The maximum number of CPUs to use in the group.</p>
    ///   - [`max_runs(i32)`](crate::client::fluent_builders::CreateRunGroup::max_runs) / [`set_max_runs(Option<i32>)`](crate::client::fluent_builders::CreateRunGroup::set_max_runs): <p>The maximum number of concurrent runs for the group.</p>
    ///   - [`max_duration(i32)`](crate::client::fluent_builders::CreateRunGroup::max_duration) / [`set_max_duration(Option<i32>)`](crate::client::fluent_builders::CreateRunGroup::set_max_duration): <p>A max duration for the group.</p>
    ///   - [`tags(HashMap<String, String>)`](crate::client::fluent_builders::CreateRunGroup::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::client::fluent_builders::CreateRunGroup::set_tags): <p>Tags for the group.</p>
    ///   - [`request_id(impl Into<String>)`](crate::client::fluent_builders::CreateRunGroup::request_id) / [`set_request_id(Option<String>)`](crate::client::fluent_builders::CreateRunGroup::set_request_id): <p>A request ID for the group.</p>
    /// - On success, responds with [`CreateRunGroupOutput`](crate::output::CreateRunGroupOutput) with field(s):
    ///   - [`arn(Option<String>)`](crate::output::CreateRunGroupOutput::arn): <p>The group's ARN.</p>
    ///   - [`id(Option<String>)`](crate::output::CreateRunGroupOutput::id): <p>The group's ID.</p>
    ///   - [`tags(Option<HashMap<String, String>>)`](crate::output::CreateRunGroupOutput::tags): <p>Tags for the run group.</p>
    /// - On failure, responds with [`SdkError<CreateRunGroupError>`](crate::error::CreateRunGroupError)
    pub fn create_run_group(&self) -> crate::client::fluent_builders::CreateRunGroup {
        crate::client::fluent_builders::CreateRunGroup::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateSequenceStore`](crate::client::fluent_builders::CreateSequenceStore) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::CreateSequenceStore::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::CreateSequenceStore::set_name): <p>A name for the store.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::CreateSequenceStore::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::CreateSequenceStore::set_description): <p>A description for the store.</p>
    ///   - [`sse_config(SseConfig)`](crate::client::fluent_builders::CreateSequenceStore::sse_config) / [`set_sse_config(Option<SseConfig>)`](crate::client::fluent_builders::CreateSequenceStore::set_sse_config): <p>Server-side encryption (SSE) settings for the store.</p>
    ///   - [`tags(HashMap<String, String>)`](crate::client::fluent_builders::CreateSequenceStore::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::client::fluent_builders::CreateSequenceStore::set_tags): <p>Tags for the store.</p>
    ///   - [`client_token(impl Into<String>)`](crate::client::fluent_builders::CreateSequenceStore::client_token) / [`set_client_token(Option<String>)`](crate::client::fluent_builders::CreateSequenceStore::set_client_token): <p>To ensure that requests don't run multiple times, specify a unique token for each request.</p>
    /// - On success, responds with [`CreateSequenceStoreOutput`](crate::output::CreateSequenceStoreOutput) with field(s):
    ///   - [`id(Option<String>)`](crate::output::CreateSequenceStoreOutput::id): <p>The store's ID.</p>
    ///   - [`arn(Option<String>)`](crate::output::CreateSequenceStoreOutput::arn): <p>The store's ARN.</p>
    ///   - [`name(Option<String>)`](crate::output::CreateSequenceStoreOutput::name): <p>The store's name.</p>
    ///   - [`description(Option<String>)`](crate::output::CreateSequenceStoreOutput::description): <p>The store's description.</p>
    ///   - [`sse_config(Option<SseConfig>)`](crate::output::CreateSequenceStoreOutput::sse_config): <p>The store's SSE settings.</p>
    ///   - [`creation_time(Option<DateTime>)`](crate::output::CreateSequenceStoreOutput::creation_time): <p>When the store was created.</p>
    /// - On failure, responds with [`SdkError<CreateSequenceStoreError>`](crate::error::CreateSequenceStoreError)
    pub fn create_sequence_store(&self) -> crate::client::fluent_builders::CreateSequenceStore {
        crate::client::fluent_builders::CreateSequenceStore::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateVariantStore`](crate::client::fluent_builders::CreateVariantStore) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`reference(ReferenceItem)`](crate::client::fluent_builders::CreateVariantStore::reference) / [`set_reference(Option<ReferenceItem>)`](crate::client::fluent_builders::CreateVariantStore::set_reference): <p>The genome reference for the store's variants.</p>
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::CreateVariantStore::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::CreateVariantStore::set_name): <p>A name for the store.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::CreateVariantStore::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::CreateVariantStore::set_description): <p>A description for the store.</p>
    ///   - [`tags(HashMap<String, String>)`](crate::client::fluent_builders::CreateVariantStore::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::client::fluent_builders::CreateVariantStore::set_tags): <p>Tags for the store.</p>
    ///   - [`sse_config(SseConfig)`](crate::client::fluent_builders::CreateVariantStore::sse_config) / [`set_sse_config(Option<SseConfig>)`](crate::client::fluent_builders::CreateVariantStore::set_sse_config): <p>Server-side encryption (SSE) settings for the store.</p>
    /// - On success, responds with [`CreateVariantStoreOutput`](crate::output::CreateVariantStoreOutput) with field(s):
    ///   - [`id(Option<String>)`](crate::output::CreateVariantStoreOutput::id): <p>The store's ID.</p>
    ///   - [`reference(Option<ReferenceItem>)`](crate::output::CreateVariantStoreOutput::reference): <p>The store's genome reference.</p>
    ///   - [`status(Option<StoreStatus>)`](crate::output::CreateVariantStoreOutput::status): <p>The store's status.</p>
    ///   - [`name(Option<String>)`](crate::output::CreateVariantStoreOutput::name): <p>The store's name.</p>
    ///   - [`creation_time(Option<DateTime>)`](crate::output::CreateVariantStoreOutput::creation_time): <p>When the store was created.</p>
    /// - On failure, responds with [`SdkError<CreateVariantStoreError>`](crate::error::CreateVariantStoreError)
    pub fn create_variant_store(&self) -> crate::client::fluent_builders::CreateVariantStore {
        crate::client::fluent_builders::CreateVariantStore::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateWorkflow`](crate::client::fluent_builders::CreateWorkflow) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::CreateWorkflow::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::CreateWorkflow::set_name): <p>A name for the workflow.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::CreateWorkflow::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::CreateWorkflow::set_description): <p>A description for the workflow.</p>
    ///   - [`engine(WorkflowEngine)`](crate::client::fluent_builders::CreateWorkflow::engine) / [`set_engine(Option<WorkflowEngine>)`](crate::client::fluent_builders::CreateWorkflow::set_engine): <p>An engine for the workflow.</p>
    ///   - [`definition_zip(Blob)`](crate::client::fluent_builders::CreateWorkflow::definition_zip) / [`set_definition_zip(Option<Blob>)`](crate::client::fluent_builders::CreateWorkflow::set_definition_zip): <p>A ZIP archive for the workflow.</p>
    ///   - [`definition_uri(impl Into<String>)`](crate::client::fluent_builders::CreateWorkflow::definition_uri) / [`set_definition_uri(Option<String>)`](crate::client::fluent_builders::CreateWorkflow::set_definition_uri): <p>The URI of a definition for the workflow.</p>
    ///   - [`main(impl Into<String>)`](crate::client::fluent_builders::CreateWorkflow::main) / [`set_main(Option<String>)`](crate::client::fluent_builders::CreateWorkflow::set_main): <p>The path of the main definition file for the workflow.</p>
    ///   - [`parameter_template(HashMap<String, WorkflowParameter>)`](crate::client::fluent_builders::CreateWorkflow::parameter_template) / [`set_parameter_template(Option<HashMap<String, WorkflowParameter>>)`](crate::client::fluent_builders::CreateWorkflow::set_parameter_template): <p>A parameter template for the workflow.</p>
    ///   - [`storage_capacity(i32)`](crate::client::fluent_builders::CreateWorkflow::storage_capacity) / [`set_storage_capacity(Option<i32>)`](crate::client::fluent_builders::CreateWorkflow::set_storage_capacity): <p>A storage capacity for the workflow.</p>
    ///   - [`tags(HashMap<String, String>)`](crate::client::fluent_builders::CreateWorkflow::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::client::fluent_builders::CreateWorkflow::set_tags): <p>Tags for the workflow.</p>
    ///   - [`request_id(impl Into<String>)`](crate::client::fluent_builders::CreateWorkflow::request_id) / [`set_request_id(Option<String>)`](crate::client::fluent_builders::CreateWorkflow::set_request_id): <p>A request ID for the workflow.</p>
    /// - On success, responds with [`CreateWorkflowOutput`](crate::output::CreateWorkflowOutput) with field(s):
    ///   - [`arn(Option<String>)`](crate::output::CreateWorkflowOutput::arn): <p>The workflow's ARN.</p>
    ///   - [`id(Option<String>)`](crate::output::CreateWorkflowOutput::id): <p>The workflow's ID.</p>
    ///   - [`status(Option<WorkflowStatus>)`](crate::output::CreateWorkflowOutput::status): <p>The workflow's status.</p>
    ///   - [`tags(Option<HashMap<String, String>>)`](crate::output::CreateWorkflowOutput::tags): <p>The workflow's tags.</p>
    /// - On failure, responds with [`SdkError<CreateWorkflowError>`](crate::error::CreateWorkflowError)
    pub fn create_workflow(&self) -> crate::client::fluent_builders::CreateWorkflow {
        crate::client::fluent_builders::CreateWorkflow::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteAnnotationStore`](crate::client::fluent_builders::DeleteAnnotationStore) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::DeleteAnnotationStore::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::DeleteAnnotationStore::set_name): <p>The store's name.</p>
    ///   - [`force(bool)`](crate::client::fluent_builders::DeleteAnnotationStore::force) / [`set_force(Option<bool>)`](crate::client::fluent_builders::DeleteAnnotationStore::set_force): <p>Whether to force deletion.</p>
    /// - On success, responds with [`DeleteAnnotationStoreOutput`](crate::output::DeleteAnnotationStoreOutput) with field(s):
    ///   - [`status(Option<StoreStatus>)`](crate::output::DeleteAnnotationStoreOutput::status): <p>The store's status.</p>
    /// - On failure, responds with [`SdkError<DeleteAnnotationStoreError>`](crate::error::DeleteAnnotationStoreError)
    pub fn delete_annotation_store(&self) -> crate::client::fluent_builders::DeleteAnnotationStore {
        crate::client::fluent_builders::DeleteAnnotationStore::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteReference`](crate::client::fluent_builders::DeleteReference) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`id(impl Into<String>)`](crate::client::fluent_builders::DeleteReference::id) / [`set_id(Option<String>)`](crate::client::fluent_builders::DeleteReference::set_id): <p>The reference's ID.</p>
    ///   - [`reference_store_id(impl Into<String>)`](crate::client::fluent_builders::DeleteReference::reference_store_id) / [`set_reference_store_id(Option<String>)`](crate::client::fluent_builders::DeleteReference::set_reference_store_id): <p>The reference's store ID.</p>
    /// - On success, responds with [`DeleteReferenceOutput`](crate::output::DeleteReferenceOutput)

    /// - On failure, responds with [`SdkError<DeleteReferenceError>`](crate::error::DeleteReferenceError)
    pub fn delete_reference(&self) -> crate::client::fluent_builders::DeleteReference {
        crate::client::fluent_builders::DeleteReference::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteReferenceStore`](crate::client::fluent_builders::DeleteReferenceStore) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`id(impl Into<String>)`](crate::client::fluent_builders::DeleteReferenceStore::id) / [`set_id(Option<String>)`](crate::client::fluent_builders::DeleteReferenceStore::set_id): <p>The store's ID.</p>
    /// - On success, responds with [`DeleteReferenceStoreOutput`](crate::output::DeleteReferenceStoreOutput)

    /// - On failure, responds with [`SdkError<DeleteReferenceStoreError>`](crate::error::DeleteReferenceStoreError)
    pub fn delete_reference_store(&self) -> crate::client::fluent_builders::DeleteReferenceStore {
        crate::client::fluent_builders::DeleteReferenceStore::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteRun`](crate::client::fluent_builders::DeleteRun) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`id(impl Into<String>)`](crate::client::fluent_builders::DeleteRun::id) / [`set_id(Option<String>)`](crate::client::fluent_builders::DeleteRun::set_id): <p>The run's ID.</p>
    /// - On success, responds with [`DeleteRunOutput`](crate::output::DeleteRunOutput)

    /// - On failure, responds with [`SdkError<DeleteRunError>`](crate::error::DeleteRunError)
    pub fn delete_run(&self) -> crate::client::fluent_builders::DeleteRun {
        crate::client::fluent_builders::DeleteRun::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteRunGroup`](crate::client::fluent_builders::DeleteRunGroup) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`id(impl Into<String>)`](crate::client::fluent_builders::DeleteRunGroup::id) / [`set_id(Option<String>)`](crate::client::fluent_builders::DeleteRunGroup::set_id): <p>The run group's ID.</p>
    /// - On success, responds with [`DeleteRunGroupOutput`](crate::output::DeleteRunGroupOutput)

    /// - On failure, responds with [`SdkError<DeleteRunGroupError>`](crate::error::DeleteRunGroupError)
    pub fn delete_run_group(&self) -> crate::client::fluent_builders::DeleteRunGroup {
        crate::client::fluent_builders::DeleteRunGroup::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteSequenceStore`](crate::client::fluent_builders::DeleteSequenceStore) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`id(impl Into<String>)`](crate::client::fluent_builders::DeleteSequenceStore::id) / [`set_id(Option<String>)`](crate::client::fluent_builders::DeleteSequenceStore::set_id): <p>The sequence store's ID.</p>
    /// - On success, responds with [`DeleteSequenceStoreOutput`](crate::output::DeleteSequenceStoreOutput)

    /// - On failure, responds with [`SdkError<DeleteSequenceStoreError>`](crate::error::DeleteSequenceStoreError)
    pub fn delete_sequence_store(&self) -> crate::client::fluent_builders::DeleteSequenceStore {
        crate::client::fluent_builders::DeleteSequenceStore::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteVariantStore`](crate::client::fluent_builders::DeleteVariantStore) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::DeleteVariantStore::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::DeleteVariantStore::set_name): <p>The store's name.</p>
    ///   - [`force(bool)`](crate::client::fluent_builders::DeleteVariantStore::force) / [`set_force(Option<bool>)`](crate::client::fluent_builders::DeleteVariantStore::set_force): <p>Whether to force deletion.</p>
    /// - On success, responds with [`DeleteVariantStoreOutput`](crate::output::DeleteVariantStoreOutput) with field(s):
    ///   - [`status(Option<StoreStatus>)`](crate::output::DeleteVariantStoreOutput::status): <p>The store's status.</p>
    /// - On failure, responds with [`SdkError<DeleteVariantStoreError>`](crate::error::DeleteVariantStoreError)
    pub fn delete_variant_store(&self) -> crate::client::fluent_builders::DeleteVariantStore {
        crate::client::fluent_builders::DeleteVariantStore::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteWorkflow`](crate::client::fluent_builders::DeleteWorkflow) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`id(impl Into<String>)`](crate::client::fluent_builders::DeleteWorkflow::id) / [`set_id(Option<String>)`](crate::client::fluent_builders::DeleteWorkflow::set_id): <p>The workflow's ID.</p>
    /// - On success, responds with [`DeleteWorkflowOutput`](crate::output::DeleteWorkflowOutput)

    /// - On failure, responds with [`SdkError<DeleteWorkflowError>`](crate::error::DeleteWorkflowError)
    pub fn delete_workflow(&self) -> crate::client::fluent_builders::DeleteWorkflow {
        crate::client::fluent_builders::DeleteWorkflow::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetAnnotationImportJob`](crate::client::fluent_builders::GetAnnotationImportJob) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`job_id(impl Into<String>)`](crate::client::fluent_builders::GetAnnotationImportJob::job_id) / [`set_job_id(Option<String>)`](crate::client::fluent_builders::GetAnnotationImportJob::set_job_id): <p>The job's ID.</p>
    /// - On success, responds with [`GetAnnotationImportJobOutput`](crate::output::GetAnnotationImportJobOutput) with field(s):
    ///   - [`id(Option<String>)`](crate::output::GetAnnotationImportJobOutput::id): <p>The job's ID.</p>
    ///   - [`destination_name(Option<String>)`](crate::output::GetAnnotationImportJobOutput::destination_name): <p>The job's destination annotation store.</p>
    ///   - [`role_arn(Option<String>)`](crate::output::GetAnnotationImportJobOutput::role_arn): <p>The job's service role ARN.</p>
    ///   - [`status(Option<JobStatus>)`](crate::output::GetAnnotationImportJobOutput::status): <p>The job's status.</p>
    ///   - [`status_message(Option<String>)`](crate::output::GetAnnotationImportJobOutput::status_message): <p>The job's status message.</p>
    ///   - [`creation_time(Option<DateTime>)`](crate::output::GetAnnotationImportJobOutput::creation_time): <p>When the job was created.</p>
    ///   - [`update_time(Option<DateTime>)`](crate::output::GetAnnotationImportJobOutput::update_time): <p>When the job was updated.</p>
    ///   - [`completion_time(Option<DateTime>)`](crate::output::GetAnnotationImportJobOutput::completion_time): <p>When the job completed.</p>
    ///   - [`items(Option<Vec<AnnotationImportItemDetail>>)`](crate::output::GetAnnotationImportJobOutput::items): <p>The job's imported items.</p>
    ///   - [`run_left_normalization(bool)`](crate::output::GetAnnotationImportJobOutput::run_left_normalization): <p>The job's left normalization setting.</p>
    ///   - [`format_options(Option<FormatOptions>)`](crate::output::GetAnnotationImportJobOutput::format_options): <p>Formatting options for a file.</p>
    /// - On failure, responds with [`SdkError<GetAnnotationImportJobError>`](crate::error::GetAnnotationImportJobError)
    pub fn get_annotation_import_job(
        &self,
    ) -> crate::client::fluent_builders::GetAnnotationImportJob {
        crate::client::fluent_builders::GetAnnotationImportJob::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetAnnotationStore`](crate::client::fluent_builders::GetAnnotationStore) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::GetAnnotationStore::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::GetAnnotationStore::set_name): <p>The store's name.</p>
    /// - On success, responds with [`GetAnnotationStoreOutput`](crate::output::GetAnnotationStoreOutput) with field(s):
    ///   - [`id(Option<String>)`](crate::output::GetAnnotationStoreOutput::id): <p>The store's ID.</p>
    ///   - [`reference(Option<ReferenceItem>)`](crate::output::GetAnnotationStoreOutput::reference): <p>The store's genome reference.</p>
    ///   - [`status(Option<StoreStatus>)`](crate::output::GetAnnotationStoreOutput::status): <p>The store's status.</p>
    ///   - [`store_arn(Option<String>)`](crate::output::GetAnnotationStoreOutput::store_arn): <p>The store's ARN.</p>
    ///   - [`name(Option<String>)`](crate::output::GetAnnotationStoreOutput::name): <p>The store's name.</p>
    ///   - [`description(Option<String>)`](crate::output::GetAnnotationStoreOutput::description): <p>The store's description.</p>
    ///   - [`sse_config(Option<SseConfig>)`](crate::output::GetAnnotationStoreOutput::sse_config): <p>The store's server-side encryption (SSE) settings.</p>
    ///   - [`creation_time(Option<DateTime>)`](crate::output::GetAnnotationStoreOutput::creation_time): <p>When the store was created.</p>
    ///   - [`update_time(Option<DateTime>)`](crate::output::GetAnnotationStoreOutput::update_time): <p>When the store was updated.</p>
    ///   - [`tags(Option<HashMap<String, String>>)`](crate::output::GetAnnotationStoreOutput::tags): <p>The store's tags.</p>
    ///   - [`store_options(Option<StoreOptions>)`](crate::output::GetAnnotationStoreOutput::store_options): <p>The store's parsing options.</p>
    ///   - [`store_format(Option<StoreFormat>)`](crate::output::GetAnnotationStoreOutput::store_format): <p>The store's annotation file format.</p>
    ///   - [`status_message(Option<String>)`](crate::output::GetAnnotationStoreOutput::status_message): <p>A status message.</p>
    ///   - [`store_size_bytes(Option<i64>)`](crate::output::GetAnnotationStoreOutput::store_size_bytes): <p>The store's size in bytes.</p>
    /// - On failure, responds with [`SdkError<GetAnnotationStoreError>`](crate::error::GetAnnotationStoreError)
    pub fn get_annotation_store(&self) -> crate::client::fluent_builders::GetAnnotationStore {
        crate::client::fluent_builders::GetAnnotationStore::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetReadSet`](crate::client::fluent_builders::GetReadSet) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`id(impl Into<String>)`](crate::client::fluent_builders::GetReadSet::id) / [`set_id(Option<String>)`](crate::client::fluent_builders::GetReadSet::set_id): <p>The read set's ID.</p>
    ///   - [`sequence_store_id(impl Into<String>)`](crate::client::fluent_builders::GetReadSet::sequence_store_id) / [`set_sequence_store_id(Option<String>)`](crate::client::fluent_builders::GetReadSet::set_sequence_store_id): <p>The read set's sequence store ID.</p>
    ///   - [`file(ReadSetFile)`](crate::client::fluent_builders::GetReadSet::file) / [`set_file(Option<ReadSetFile>)`](crate::client::fluent_builders::GetReadSet::set_file): <p>The file to retrieve.</p>
    ///   - [`part_number(i32)`](crate::client::fluent_builders::GetReadSet::part_number) / [`set_part_number(Option<i32>)`](crate::client::fluent_builders::GetReadSet::set_part_number): <p>The part number to retrieve.</p>
    /// - On success, responds with [`GetReadSetOutput`](crate::output::GetReadSetOutput) with field(s):
    ///   - [`payload(ByteStream)`](crate::output::GetReadSetOutput::payload): <p>The read set file payload.</p>
    /// - On failure, responds with [`SdkError<GetReadSetError>`](crate::error::GetReadSetError)
    pub fn get_read_set(&self) -> crate::client::fluent_builders::GetReadSet {
        crate::client::fluent_builders::GetReadSet::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetReadSetActivationJob`](crate::client::fluent_builders::GetReadSetActivationJob) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`id(impl Into<String>)`](crate::client::fluent_builders::GetReadSetActivationJob::id) / [`set_id(Option<String>)`](crate::client::fluent_builders::GetReadSetActivationJob::set_id): <p>The job's ID.</p>
    ///   - [`sequence_store_id(impl Into<String>)`](crate::client::fluent_builders::GetReadSetActivationJob::sequence_store_id) / [`set_sequence_store_id(Option<String>)`](crate::client::fluent_builders::GetReadSetActivationJob::set_sequence_store_id): <p>The job's sequence store ID.</p>
    /// - On success, responds with [`GetReadSetActivationJobOutput`](crate::output::GetReadSetActivationJobOutput) with field(s):
    ///   - [`id(Option<String>)`](crate::output::GetReadSetActivationJobOutput::id): <p>The job's ID.</p>
    ///   - [`sequence_store_id(Option<String>)`](crate::output::GetReadSetActivationJobOutput::sequence_store_id): <p>The job's sequence store ID.</p>
    ///   - [`status(Option<ReadSetActivationJobStatus>)`](crate::output::GetReadSetActivationJobOutput::status): <p>The job's status.</p>
    ///   - [`status_message(Option<String>)`](crate::output::GetReadSetActivationJobOutput::status_message): <p>The job's status message.</p>
    ///   - [`creation_time(Option<DateTime>)`](crate::output::GetReadSetActivationJobOutput::creation_time): <p>When the job was created.</p>
    ///   - [`completion_time(Option<DateTime>)`](crate::output::GetReadSetActivationJobOutput::completion_time): <p>When the job completed.</p>
    ///   - [`sources(Option<Vec<ActivateReadSetSourceItem>>)`](crate::output::GetReadSetActivationJobOutput::sources): <p>The job's sources.</p>
    /// - On failure, responds with [`SdkError<GetReadSetActivationJobError>`](crate::error::GetReadSetActivationJobError)
    pub fn get_read_set_activation_job(
        &self,
    ) -> crate::client::fluent_builders::GetReadSetActivationJob {
        crate::client::fluent_builders::GetReadSetActivationJob::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetReadSetExportJob`](crate::client::fluent_builders::GetReadSetExportJob) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`sequence_store_id(impl Into<String>)`](crate::client::fluent_builders::GetReadSetExportJob::sequence_store_id) / [`set_sequence_store_id(Option<String>)`](crate::client::fluent_builders::GetReadSetExportJob::set_sequence_store_id): <p>The job's sequence store ID.</p>
    ///   - [`id(impl Into<String>)`](crate::client::fluent_builders::GetReadSetExportJob::id) / [`set_id(Option<String>)`](crate::client::fluent_builders::GetReadSetExportJob::set_id): <p>The job's ID.</p>
    /// - On success, responds with [`GetReadSetExportJobOutput`](crate::output::GetReadSetExportJobOutput) with field(s):
    ///   - [`id(Option<String>)`](crate::output::GetReadSetExportJobOutput::id): <p>The job's ID.</p>
    ///   - [`sequence_store_id(Option<String>)`](crate::output::GetReadSetExportJobOutput::sequence_store_id): <p>The job's sequence store ID.</p>
    ///   - [`destination(Option<String>)`](crate::output::GetReadSetExportJobOutput::destination): <p>The job's destination in Amazon S3.</p>
    ///   - [`status(Option<ReadSetExportJobStatus>)`](crate::output::GetReadSetExportJobOutput::status): <p>The job's status.</p>
    ///   - [`status_message(Option<String>)`](crate::output::GetReadSetExportJobOutput::status_message): <p>The job's status message.</p>
    ///   - [`creation_time(Option<DateTime>)`](crate::output::GetReadSetExportJobOutput::creation_time): <p>When the job was created.</p>
    ///   - [`completion_time(Option<DateTime>)`](crate::output::GetReadSetExportJobOutput::completion_time): <p>When the job completed.</p>
    ///   - [`read_sets(Option<Vec<ExportReadSetDetail>>)`](crate::output::GetReadSetExportJobOutput::read_sets): <p>The job's read sets.</p>
    /// - On failure, responds with [`SdkError<GetReadSetExportJobError>`](crate::error::GetReadSetExportJobError)
    pub fn get_read_set_export_job(&self) -> crate::client::fluent_builders::GetReadSetExportJob {
        crate::client::fluent_builders::GetReadSetExportJob::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetReadSetImportJob`](crate::client::fluent_builders::GetReadSetImportJob) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`id(impl Into<String>)`](crate::client::fluent_builders::GetReadSetImportJob::id) / [`set_id(Option<String>)`](crate::client::fluent_builders::GetReadSetImportJob::set_id): <p>The job's ID.</p>
    ///   - [`sequence_store_id(impl Into<String>)`](crate::client::fluent_builders::GetReadSetImportJob::sequence_store_id) / [`set_sequence_store_id(Option<String>)`](crate::client::fluent_builders::GetReadSetImportJob::set_sequence_store_id): <p>The job's sequence store ID.</p>
    /// - On success, responds with [`GetReadSetImportJobOutput`](crate::output::GetReadSetImportJobOutput) with field(s):
    ///   - [`id(Option<String>)`](crate::output::GetReadSetImportJobOutput::id): <p>The job's ID.</p>
    ///   - [`sequence_store_id(Option<String>)`](crate::output::GetReadSetImportJobOutput::sequence_store_id): <p>The job's sequence store ID.</p>
    ///   - [`role_arn(Option<String>)`](crate::output::GetReadSetImportJobOutput::role_arn): <p>The job's service role ARN.</p>
    ///   - [`status(Option<ReadSetImportJobStatus>)`](crate::output::GetReadSetImportJobOutput::status): <p>The job's status.</p>
    ///   - [`status_message(Option<String>)`](crate::output::GetReadSetImportJobOutput::status_message): <p>The job's status message.</p>
    ///   - [`creation_time(Option<DateTime>)`](crate::output::GetReadSetImportJobOutput::creation_time): <p>When the job was created.</p>
    ///   - [`completion_time(Option<DateTime>)`](crate::output::GetReadSetImportJobOutput::completion_time): <p>When the job completed.</p>
    ///   - [`sources(Option<Vec<ImportReadSetSourceItem>>)`](crate::output::GetReadSetImportJobOutput::sources): <p>The job's sources.</p>
    /// - On failure, responds with [`SdkError<GetReadSetImportJobError>`](crate::error::GetReadSetImportJobError)
    pub fn get_read_set_import_job(&self) -> crate::client::fluent_builders::GetReadSetImportJob {
        crate::client::fluent_builders::GetReadSetImportJob::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetReadSetMetadata`](crate::client::fluent_builders::GetReadSetMetadata) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`id(impl Into<String>)`](crate::client::fluent_builders::GetReadSetMetadata::id) / [`set_id(Option<String>)`](crate::client::fluent_builders::GetReadSetMetadata::set_id): <p>The read set's ID.</p>
    ///   - [`sequence_store_id(impl Into<String>)`](crate::client::fluent_builders::GetReadSetMetadata::sequence_store_id) / [`set_sequence_store_id(Option<String>)`](crate::client::fluent_builders::GetReadSetMetadata::set_sequence_store_id): <p>The read set's sequence store ID.</p>
    /// - On success, responds with [`GetReadSetMetadataOutput`](crate::output::GetReadSetMetadataOutput) with field(s):
    ///   - [`id(Option<String>)`](crate::output::GetReadSetMetadataOutput::id): <p>The read set's ID.</p>
    ///   - [`arn(Option<String>)`](crate::output::GetReadSetMetadataOutput::arn): <p>The read set's ARN.</p>
    ///   - [`sequence_store_id(Option<String>)`](crate::output::GetReadSetMetadataOutput::sequence_store_id): <p>The read set's sequence store ID.</p>
    ///   - [`subject_id(Option<String>)`](crate::output::GetReadSetMetadataOutput::subject_id): <p>The read set's subject ID.</p>
    ///   - [`sample_id(Option<String>)`](crate::output::GetReadSetMetadataOutput::sample_id): <p>The read set's sample ID.</p>
    ///   - [`status(Option<ReadSetStatus>)`](crate::output::GetReadSetMetadataOutput::status): <p>The read set's status.</p>
    ///   - [`name(Option<String>)`](crate::output::GetReadSetMetadataOutput::name): <p>The read set's name.</p>
    ///   - [`description(Option<String>)`](crate::output::GetReadSetMetadataOutput::description): <p>The read set's description.</p>
    ///   - [`file_type(Option<FileType>)`](crate::output::GetReadSetMetadataOutput::file_type): <p>The read set's file type.</p>
    ///   - [`creation_time(Option<DateTime>)`](crate::output::GetReadSetMetadataOutput::creation_time): <p>When the read set was created.</p>
    ///   - [`sequence_information(Option<SequenceInformation>)`](crate::output::GetReadSetMetadataOutput::sequence_information): <p>The read set's sequence information.</p>
    ///   - [`reference_arn(Option<String>)`](crate::output::GetReadSetMetadataOutput::reference_arn): <p>The read set's genome reference ARN.</p>
    ///   - [`files(Option<ReadSetFiles>)`](crate::output::GetReadSetMetadataOutput::files): <p>The read set's files.</p>
    /// - On failure, responds with [`SdkError<GetReadSetMetadataError>`](crate::error::GetReadSetMetadataError)
    pub fn get_read_set_metadata(&self) -> crate::client::fluent_builders::GetReadSetMetadata {
        crate::client::fluent_builders::GetReadSetMetadata::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetReference`](crate::client::fluent_builders::GetReference) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`id(impl Into<String>)`](crate::client::fluent_builders::GetReference::id) / [`set_id(Option<String>)`](crate::client::fluent_builders::GetReference::set_id): <p>The reference's ID.</p>
    ///   - [`reference_store_id(impl Into<String>)`](crate::client::fluent_builders::GetReference::reference_store_id) / [`set_reference_store_id(Option<String>)`](crate::client::fluent_builders::GetReference::set_reference_store_id): <p>The reference's store ID.</p>
    ///   - [`range(impl Into<String>)`](crate::client::fluent_builders::GetReference::range) / [`set_range(Option<String>)`](crate::client::fluent_builders::GetReference::set_range): <p>The range to retrieve.</p>
    ///   - [`part_number(i32)`](crate::client::fluent_builders::GetReference::part_number) / [`set_part_number(Option<i32>)`](crate::client::fluent_builders::GetReference::set_part_number): <p>The part number to retrieve.</p>
    ///   - [`file(ReferenceFile)`](crate::client::fluent_builders::GetReference::file) / [`set_file(Option<ReferenceFile>)`](crate::client::fluent_builders::GetReference::set_file): <p>The file to retrieve.</p>
    /// - On success, responds with [`GetReferenceOutput`](crate::output::GetReferenceOutput) with field(s):
    ///   - [`payload(ByteStream)`](crate::output::GetReferenceOutput::payload): <p>The reference file payload.</p>
    /// - On failure, responds with [`SdkError<GetReferenceError>`](crate::error::GetReferenceError)
    pub fn get_reference(&self) -> crate::client::fluent_builders::GetReference {
        crate::client::fluent_builders::GetReference::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetReferenceImportJob`](crate::client::fluent_builders::GetReferenceImportJob) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`id(impl Into<String>)`](crate::client::fluent_builders::GetReferenceImportJob::id) / [`set_id(Option<String>)`](crate::client::fluent_builders::GetReferenceImportJob::set_id): <p>The job's ID.</p>
    ///   - [`reference_store_id(impl Into<String>)`](crate::client::fluent_builders::GetReferenceImportJob::reference_store_id) / [`set_reference_store_id(Option<String>)`](crate::client::fluent_builders::GetReferenceImportJob::set_reference_store_id): <p>The job's reference store ID.</p>
    /// - On success, responds with [`GetReferenceImportJobOutput`](crate::output::GetReferenceImportJobOutput) with field(s):
    ///   - [`id(Option<String>)`](crate::output::GetReferenceImportJobOutput::id): <p>The job's ID.</p>
    ///   - [`reference_store_id(Option<String>)`](crate::output::GetReferenceImportJobOutput::reference_store_id): <p>The job's reference store ID.</p>
    ///   - [`role_arn(Option<String>)`](crate::output::GetReferenceImportJobOutput::role_arn): <p>The job's service role ARN.</p>
    ///   - [`status(Option<ReferenceImportJobStatus>)`](crate::output::GetReferenceImportJobOutput::status): <p>The job's status.</p>
    ///   - [`status_message(Option<String>)`](crate::output::GetReferenceImportJobOutput::status_message): <p>The job's status message.</p>
    ///   - [`creation_time(Option<DateTime>)`](crate::output::GetReferenceImportJobOutput::creation_time): <p>When the job was created.</p>
    ///   - [`completion_time(Option<DateTime>)`](crate::output::GetReferenceImportJobOutput::completion_time): <p>When the job completed.</p>
    ///   - [`sources(Option<Vec<ImportReferenceSourceItem>>)`](crate::output::GetReferenceImportJobOutput::sources): <p>The job's sources.</p>
    /// - On failure, responds with [`SdkError<GetReferenceImportJobError>`](crate::error::GetReferenceImportJobError)
    pub fn get_reference_import_job(
        &self,
    ) -> crate::client::fluent_builders::GetReferenceImportJob {
        crate::client::fluent_builders::GetReferenceImportJob::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetReferenceMetadata`](crate::client::fluent_builders::GetReferenceMetadata) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`id(impl Into<String>)`](crate::client::fluent_builders::GetReferenceMetadata::id) / [`set_id(Option<String>)`](crate::client::fluent_builders::GetReferenceMetadata::set_id): <p>The reference's ID.</p>
    ///   - [`reference_store_id(impl Into<String>)`](crate::client::fluent_builders::GetReferenceMetadata::reference_store_id) / [`set_reference_store_id(Option<String>)`](crate::client::fluent_builders::GetReferenceMetadata::set_reference_store_id): <p>The reference's reference store ID.</p>
    /// - On success, responds with [`GetReferenceMetadataOutput`](crate::output::GetReferenceMetadataOutput) with field(s):
    ///   - [`id(Option<String>)`](crate::output::GetReferenceMetadataOutput::id): <p>The reference's ID.</p>
    ///   - [`arn(Option<String>)`](crate::output::GetReferenceMetadataOutput::arn): <p>The reference's ARN.</p>
    ///   - [`reference_store_id(Option<String>)`](crate::output::GetReferenceMetadataOutput::reference_store_id): <p>The reference's reference store ID.</p>
    ///   - [`md5(Option<String>)`](crate::output::GetReferenceMetadataOutput::md5): <p>The reference's MD5 checksum.</p>
    ///   - [`status(Option<ReferenceStatus>)`](crate::output::GetReferenceMetadataOutput::status): <p>The reference's status.</p>
    ///   - [`name(Option<String>)`](crate::output::GetReferenceMetadataOutput::name): <p>The reference's name.</p>
    ///   - [`description(Option<String>)`](crate::output::GetReferenceMetadataOutput::description): <p>The reference's description.</p>
    ///   - [`creation_time(Option<DateTime>)`](crate::output::GetReferenceMetadataOutput::creation_time): <p>When the reference was created.</p>
    ///   - [`update_time(Option<DateTime>)`](crate::output::GetReferenceMetadataOutput::update_time): <p>When the reference was updated.</p>
    ///   - [`files(Option<ReferenceFiles>)`](crate::output::GetReferenceMetadataOutput::files): <p>The reference's files.</p>
    /// - On failure, responds with [`SdkError<GetReferenceMetadataError>`](crate::error::GetReferenceMetadataError)
    pub fn get_reference_metadata(&self) -> crate::client::fluent_builders::GetReferenceMetadata {
        crate::client::fluent_builders::GetReferenceMetadata::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetReferenceStore`](crate::client::fluent_builders::GetReferenceStore) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`id(impl Into<String>)`](crate::client::fluent_builders::GetReferenceStore::id) / [`set_id(Option<String>)`](crate::client::fluent_builders::GetReferenceStore::set_id): <p>The store's ID.</p>
    /// - On success, responds with [`GetReferenceStoreOutput`](crate::output::GetReferenceStoreOutput) with field(s):
    ///   - [`id(Option<String>)`](crate::output::GetReferenceStoreOutput::id): <p>The store's ID.</p>
    ///   - [`arn(Option<String>)`](crate::output::GetReferenceStoreOutput::arn): <p>The store's ARN.</p>
    ///   - [`name(Option<String>)`](crate::output::GetReferenceStoreOutput::name): <p>The store's name.</p>
    ///   - [`description(Option<String>)`](crate::output::GetReferenceStoreOutput::description): <p>The store's description.</p>
    ///   - [`sse_config(Option<SseConfig>)`](crate::output::GetReferenceStoreOutput::sse_config): <p>The store's server-side encryption (SSE) settings.</p>
    ///   - [`creation_time(Option<DateTime>)`](crate::output::GetReferenceStoreOutput::creation_time): <p>When the store was created.</p>
    /// - On failure, responds with [`SdkError<GetReferenceStoreError>`](crate::error::GetReferenceStoreError)
    pub fn get_reference_store(&self) -> crate::client::fluent_builders::GetReferenceStore {
        crate::client::fluent_builders::GetReferenceStore::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetRun`](crate::client::fluent_builders::GetRun) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`id(impl Into<String>)`](crate::client::fluent_builders::GetRun::id) / [`set_id(Option<String>)`](crate::client::fluent_builders::GetRun::set_id): <p>The run's ID.</p>
    ///   - [`export(Vec<RunExport>)`](crate::client::fluent_builders::GetRun::export) / [`set_export(Option<Vec<RunExport>>)`](crate::client::fluent_builders::GetRun::set_export): <p>The run's export format.</p>
    /// - On success, responds with [`GetRunOutput`](crate::output::GetRunOutput) with field(s):
    ///   - [`arn(Option<String>)`](crate::output::GetRunOutput::arn): <p>The run's ARN.</p>
    ///   - [`id(Option<String>)`](crate::output::GetRunOutput::id): <p>The run's ID.</p>
    ///   - [`status(Option<RunStatus>)`](crate::output::GetRunOutput::status): <p>The run's status.</p>
    ///   - [`workflow_id(Option<String>)`](crate::output::GetRunOutput::workflow_id): <p>The run's workflow ID.</p>
    ///   - [`workflow_type(Option<WorkflowType>)`](crate::output::GetRunOutput::workflow_type): <p>The run's workflow type.</p>
    ///   - [`run_id(Option<String>)`](crate::output::GetRunOutput::run_id): <p>The run's ID.</p>
    ///   - [`role_arn(Option<String>)`](crate::output::GetRunOutput::role_arn): <p>The run's service role ARN.</p>
    ///   - [`name(Option<String>)`](crate::output::GetRunOutput::name): <p>The run's name.</p>
    ///   - [`run_group_id(Option<String>)`](crate::output::GetRunOutput::run_group_id): <p>The run's group ID.</p>
    ///   - [`priority(Option<i32>)`](crate::output::GetRunOutput::priority): <p>The run's priority.</p>
    ///   - [`definition(Option<String>)`](crate::output::GetRunOutput::definition): <p>The run's definition.</p>
    ///   - [`digest(Option<String>)`](crate::output::GetRunOutput::digest): <p>The run's digest.</p>
    ///   - [`parameters(Option<Document>)`](crate::output::GetRunOutput::parameters): <p>The run's parameters.</p>
    ///   - [`storage_capacity(Option<i32>)`](crate::output::GetRunOutput::storage_capacity): <p>The run's storage capacity.</p>
    ///   - [`output_uri(Option<String>)`](crate::output::GetRunOutput::output_uri): <p>The run's output URI.</p>
    ///   - [`log_level(Option<RunLogLevel>)`](crate::output::GetRunOutput::log_level): <p>The run's log level.</p>
    ///   - [`resource_digests(Option<HashMap<String, String>>)`](crate::output::GetRunOutput::resource_digests): <p>The run's resource digests.</p>
    ///   - [`started_by(Option<String>)`](crate::output::GetRunOutput::started_by): <p>Who started the run.</p>
    ///   - [`creation_time(Option<DateTime>)`](crate::output::GetRunOutput::creation_time): <p>When the run was created.</p>
    ///   - [`start_time(Option<DateTime>)`](crate::output::GetRunOutput::start_time): <p>When the run started.</p>
    ///   - [`stop_time(Option<DateTime>)`](crate::output::GetRunOutput::stop_time): <p>The run's stop time.</p>
    ///   - [`status_message(Option<String>)`](crate::output::GetRunOutput::status_message): <p>The run's status message.</p>
    ///   - [`tags(Option<HashMap<String, String>>)`](crate::output::GetRunOutput::tags): <p>The run's tags.</p>
    /// - On failure, responds with [`SdkError<GetRunError>`](crate::error::GetRunError)
    pub fn get_run(&self) -> crate::client::fluent_builders::GetRun {
        crate::client::fluent_builders::GetRun::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetRunGroup`](crate::client::fluent_builders::GetRunGroup) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`id(impl Into<String>)`](crate::client::fluent_builders::GetRunGroup::id) / [`set_id(Option<String>)`](crate::client::fluent_builders::GetRunGroup::set_id): <p>The group's ID.</p>
    /// - On success, responds with [`GetRunGroupOutput`](crate::output::GetRunGroupOutput) with field(s):
    ///   - [`arn(Option<String>)`](crate::output::GetRunGroupOutput::arn): <p>The group's ARN.</p>
    ///   - [`id(Option<String>)`](crate::output::GetRunGroupOutput::id): <p>The group's ID.</p>
    ///   - [`name(Option<String>)`](crate::output::GetRunGroupOutput::name): <p>The group's name.</p>
    ///   - [`max_cpus(Option<i32>)`](crate::output::GetRunGroupOutput::max_cpus): <p>The group's maximum number of CPUs to use.</p>
    ///   - [`max_runs(Option<i32>)`](crate::output::GetRunGroupOutput::max_runs): <p>The maximum number of concurrent runs for the group.</p>
    ///   - [`max_duration(Option<i32>)`](crate::output::GetRunGroupOutput::max_duration): <p>The group's maximum run duration.</p>
    ///   - [`creation_time(Option<DateTime>)`](crate::output::GetRunGroupOutput::creation_time): <p>When the group was created.</p>
    ///   - [`tags(Option<HashMap<String, String>>)`](crate::output::GetRunGroupOutput::tags): <p>The group's tags.</p>
    /// - On failure, responds with [`SdkError<GetRunGroupError>`](crate::error::GetRunGroupError)
    pub fn get_run_group(&self) -> crate::client::fluent_builders::GetRunGroup {
        crate::client::fluent_builders::GetRunGroup::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetRunTask`](crate::client::fluent_builders::GetRunTask) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`id(impl Into<String>)`](crate::client::fluent_builders::GetRunTask::id) / [`set_id(Option<String>)`](crate::client::fluent_builders::GetRunTask::set_id): <p>The task's ID.</p>
    ///   - [`task_id(impl Into<String>)`](crate::client::fluent_builders::GetRunTask::task_id) / [`set_task_id(Option<String>)`](crate::client::fluent_builders::GetRunTask::set_task_id): <p>The task's ID.</p>
    /// - On success, responds with [`GetRunTaskOutput`](crate::output::GetRunTaskOutput) with field(s):
    ///   - [`task_id(Option<String>)`](crate::output::GetRunTaskOutput::task_id): <p>The task's ID.</p>
    ///   - [`status(Option<TaskStatus>)`](crate::output::GetRunTaskOutput::status): <p>The task's status.</p>
    ///   - [`name(Option<String>)`](crate::output::GetRunTaskOutput::name): <p>The task's name.</p>
    ///   - [`cpus(Option<i32>)`](crate::output::GetRunTaskOutput::cpus): <p>The task's CPU usage.</p>
    ///   - [`memory(Option<i32>)`](crate::output::GetRunTaskOutput::memory): <p>The task's memory setting.</p>
    ///   - [`creation_time(Option<DateTime>)`](crate::output::GetRunTaskOutput::creation_time): <p>When the task was created.</p>
    ///   - [`start_time(Option<DateTime>)`](crate::output::GetRunTaskOutput::start_time): <p>The task's start time.</p>
    ///   - [`stop_time(Option<DateTime>)`](crate::output::GetRunTaskOutput::stop_time): <p>The task's stop time.</p>
    ///   - [`status_message(Option<String>)`](crate::output::GetRunTaskOutput::status_message): <p>The task's status message.</p>
    ///   - [`log_stream(Option<String>)`](crate::output::GetRunTaskOutput::log_stream): <p>The task's log stream.</p>
    /// - On failure, responds with [`SdkError<GetRunTaskError>`](crate::error::GetRunTaskError)
    pub fn get_run_task(&self) -> crate::client::fluent_builders::GetRunTask {
        crate::client::fluent_builders::GetRunTask::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetSequenceStore`](crate::client::fluent_builders::GetSequenceStore) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`id(impl Into<String>)`](crate::client::fluent_builders::GetSequenceStore::id) / [`set_id(Option<String>)`](crate::client::fluent_builders::GetSequenceStore::set_id): <p>The store's ID.</p>
    /// - On success, responds with [`GetSequenceStoreOutput`](crate::output::GetSequenceStoreOutput) with field(s):
    ///   - [`id(Option<String>)`](crate::output::GetSequenceStoreOutput::id): <p>The store's ID.</p>
    ///   - [`arn(Option<String>)`](crate::output::GetSequenceStoreOutput::arn): <p>The store's ARN.</p>
    ///   - [`name(Option<String>)`](crate::output::GetSequenceStoreOutput::name): <p>The store's name.</p>
    ///   - [`description(Option<String>)`](crate::output::GetSequenceStoreOutput::description): <p>The store's description.</p>
    ///   - [`sse_config(Option<SseConfig>)`](crate::output::GetSequenceStoreOutput::sse_config): <p>The store's server-side encryption (SSE) settings.</p>
    ///   - [`creation_time(Option<DateTime>)`](crate::output::GetSequenceStoreOutput::creation_time): <p>When the store was created.</p>
    /// - On failure, responds with [`SdkError<GetSequenceStoreError>`](crate::error::GetSequenceStoreError)
    pub fn get_sequence_store(&self) -> crate::client::fluent_builders::GetSequenceStore {
        crate::client::fluent_builders::GetSequenceStore::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetVariantImportJob`](crate::client::fluent_builders::GetVariantImportJob) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`job_id(impl Into<String>)`](crate::client::fluent_builders::GetVariantImportJob::job_id) / [`set_job_id(Option<String>)`](crate::client::fluent_builders::GetVariantImportJob::set_job_id): <p>The job's ID.</p>
    /// - On success, responds with [`GetVariantImportJobOutput`](crate::output::GetVariantImportJobOutput) with field(s):
    ///   - [`id(Option<String>)`](crate::output::GetVariantImportJobOutput::id): <p>The job's ID.</p>
    ///   - [`destination_name(Option<String>)`](crate::output::GetVariantImportJobOutput::destination_name): <p>The job's destination variant store.</p>
    ///   - [`role_arn(Option<String>)`](crate::output::GetVariantImportJobOutput::role_arn): <p>The job's service role ARN.</p>
    ///   - [`status(Option<JobStatus>)`](crate::output::GetVariantImportJobOutput::status): <p>The job's status.</p>
    ///   - [`status_message(Option<String>)`](crate::output::GetVariantImportJobOutput::status_message): <p>The job's status message.</p>
    ///   - [`creation_time(Option<DateTime>)`](crate::output::GetVariantImportJobOutput::creation_time): <p>When the job was created.</p>
    ///   - [`update_time(Option<DateTime>)`](crate::output::GetVariantImportJobOutput::update_time): <p>When the job was updated.</p>
    ///   - [`completion_time(Option<DateTime>)`](crate::output::GetVariantImportJobOutput::completion_time): <p>When the job completed.</p>
    ///   - [`items(Option<Vec<VariantImportItemDetail>>)`](crate::output::GetVariantImportJobOutput::items): <p>The job's items.</p>
    ///   - [`run_left_normalization(bool)`](crate::output::GetVariantImportJobOutput::run_left_normalization): <p>The job's left normalization setting.</p>
    /// - On failure, responds with [`SdkError<GetVariantImportJobError>`](crate::error::GetVariantImportJobError)
    pub fn get_variant_import_job(&self) -> crate::client::fluent_builders::GetVariantImportJob {
        crate::client::fluent_builders::GetVariantImportJob::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetVariantStore`](crate::client::fluent_builders::GetVariantStore) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::GetVariantStore::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::GetVariantStore::set_name): <p>The store's name.</p>
    /// - On success, responds with [`GetVariantStoreOutput`](crate::output::GetVariantStoreOutput) with field(s):
    ///   - [`id(Option<String>)`](crate::output::GetVariantStoreOutput::id): <p>The store's ID.</p>
    ///   - [`reference(Option<ReferenceItem>)`](crate::output::GetVariantStoreOutput::reference): <p>The store's genome reference.</p>
    ///   - [`status(Option<StoreStatus>)`](crate::output::GetVariantStoreOutput::status): <p>The store's status.</p>
    ///   - [`store_arn(Option<String>)`](crate::output::GetVariantStoreOutput::store_arn): <p>The store's ARN.</p>
    ///   - [`name(Option<String>)`](crate::output::GetVariantStoreOutput::name): <p>The store's name.</p>
    ///   - [`description(Option<String>)`](crate::output::GetVariantStoreOutput::description): <p>The store's description.</p>
    ///   - [`sse_config(Option<SseConfig>)`](crate::output::GetVariantStoreOutput::sse_config): <p>The store's server-side encryption (SSE) settings.</p>
    ///   - [`creation_time(Option<DateTime>)`](crate::output::GetVariantStoreOutput::creation_time): <p>When the store was created.</p>
    ///   - [`update_time(Option<DateTime>)`](crate::output::GetVariantStoreOutput::update_time): <p>When the store was updated.</p>
    ///   - [`tags(Option<HashMap<String, String>>)`](crate::output::GetVariantStoreOutput::tags): <p>The store's tags.</p>
    ///   - [`status_message(Option<String>)`](crate::output::GetVariantStoreOutput::status_message): <p>The store's status message.</p>
    ///   - [`store_size_bytes(Option<i64>)`](crate::output::GetVariantStoreOutput::store_size_bytes): <p>The store's size in bytes.</p>
    /// - On failure, responds with [`SdkError<GetVariantStoreError>`](crate::error::GetVariantStoreError)
    pub fn get_variant_store(&self) -> crate::client::fluent_builders::GetVariantStore {
        crate::client::fluent_builders::GetVariantStore::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetWorkflow`](crate::client::fluent_builders::GetWorkflow) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`id(impl Into<String>)`](crate::client::fluent_builders::GetWorkflow::id) / [`set_id(Option<String>)`](crate::client::fluent_builders::GetWorkflow::set_id): <p>The workflow's ID.</p>
    ///   - [`r#type(WorkflowType)`](crate::client::fluent_builders::GetWorkflow::type) / [`set_type(Option<WorkflowType>)`](crate::client::fluent_builders::GetWorkflow::set_type): <p>The workflow's type.</p>
    ///   - [`export(Vec<WorkflowExport>)`](crate::client::fluent_builders::GetWorkflow::export) / [`set_export(Option<Vec<WorkflowExport>>)`](crate::client::fluent_builders::GetWorkflow::set_export): <p>The export format for the workflow.</p>
    /// - On success, responds with [`GetWorkflowOutput`](crate::output::GetWorkflowOutput) with field(s):
    ///   - [`arn(Option<String>)`](crate::output::GetWorkflowOutput::arn): <p>The workflow's ARN.</p>
    ///   - [`id(Option<String>)`](crate::output::GetWorkflowOutput::id): <p>The workflow's ID.</p>
    ///   - [`status(Option<WorkflowStatus>)`](crate::output::GetWorkflowOutput::status): <p>The workflow's status.</p>
    ///   - [`r#type(Option<WorkflowType>)`](crate::output::GetWorkflowOutput::type): <p>The workflow's type.</p>
    ///   - [`name(Option<String>)`](crate::output::GetWorkflowOutput::name): <p>The workflow's name.</p>
    ///   - [`description(Option<String>)`](crate::output::GetWorkflowOutput::description): <p>The workflow's description.</p>
    ///   - [`engine(Option<WorkflowEngine>)`](crate::output::GetWorkflowOutput::engine): <p>The workflow's engine.</p>
    ///   - [`definition(Option<String>)`](crate::output::GetWorkflowOutput::definition): <p>The workflow's definition.</p>
    ///   - [`main(Option<String>)`](crate::output::GetWorkflowOutput::main): <p>The path of the main definition file for the workflow.</p>
    ///   - [`digest(Option<String>)`](crate::output::GetWorkflowOutput::digest): <p>The workflow's digest.</p>
    ///   - [`parameter_template(Option<HashMap<String, WorkflowParameter>>)`](crate::output::GetWorkflowOutput::parameter_template): <p>The workflow's parameter template.</p>
    ///   - [`storage_capacity(Option<i32>)`](crate::output::GetWorkflowOutput::storage_capacity): <p>The workflow's storage capacity.</p>
    ///   - [`creation_time(Option<DateTime>)`](crate::output::GetWorkflowOutput::creation_time): <p>When the workflow was created.</p>
    ///   - [`status_message(Option<String>)`](crate::output::GetWorkflowOutput::status_message): <p>The workflow's status message.</p>
    ///   - [`tags(Option<HashMap<String, String>>)`](crate::output::GetWorkflowOutput::tags): <p>The workflow's tags.</p>
    /// - On failure, responds with [`SdkError<GetWorkflowError>`](crate::error::GetWorkflowError)
    pub fn get_workflow(&self) -> crate::client::fluent_builders::GetWorkflow {
        crate::client::fluent_builders::GetWorkflow::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListAnnotationImportJobs`](crate::client::fluent_builders::ListAnnotationImportJobs) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListAnnotationImportJobs::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListAnnotationImportJobs::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListAnnotationImportJobs::set_max_results): <p>The maximum number of jobs to return in one page of results.</p>
    ///   - [`ids(Vec<String>)`](crate::client::fluent_builders::ListAnnotationImportJobs::ids) / [`set_ids(Option<Vec<String>>)`](crate::client::fluent_builders::ListAnnotationImportJobs::set_ids): <p>IDs of annotation import jobs to retrieve.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListAnnotationImportJobs::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListAnnotationImportJobs::set_next_token): <p>Specify the pagination token from a previous request to retrieve the next page of results.</p>
    ///   - [`filter(ListAnnotationImportJobsFilter)`](crate::client::fluent_builders::ListAnnotationImportJobs::filter) / [`set_filter(Option<ListAnnotationImportJobsFilter>)`](crate::client::fluent_builders::ListAnnotationImportJobs::set_filter): <p>A filter to apply to the list.</p>
    /// - On success, responds with [`ListAnnotationImportJobsOutput`](crate::output::ListAnnotationImportJobsOutput) with field(s):
    ///   - [`annotation_import_jobs(Option<Vec<AnnotationImportJobItem>>)`](crate::output::ListAnnotationImportJobsOutput::annotation_import_jobs): <p>A list of jobs.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListAnnotationImportJobsOutput::next_token): <p>A pagination token that's included if more results are available.</p>
    /// - On failure, responds with [`SdkError<ListAnnotationImportJobsError>`](crate::error::ListAnnotationImportJobsError)
    pub fn list_annotation_import_jobs(
        &self,
    ) -> crate::client::fluent_builders::ListAnnotationImportJobs {
        crate::client::fluent_builders::ListAnnotationImportJobs::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListAnnotationStores`](crate::client::fluent_builders::ListAnnotationStores) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListAnnotationStores::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`ids(Vec<String>)`](crate::client::fluent_builders::ListAnnotationStores::ids) / [`set_ids(Option<Vec<String>>)`](crate::client::fluent_builders::ListAnnotationStores::set_ids): <p>IDs of stores to list.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListAnnotationStores::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListAnnotationStores::set_max_results): <p>The maximum number of stores to return in one page of results.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListAnnotationStores::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListAnnotationStores::set_next_token): <p>Specify the pagination token from a previous request to retrieve the next page of results.</p>
    ///   - [`filter(ListAnnotationStoresFilter)`](crate::client::fluent_builders::ListAnnotationStores::filter) / [`set_filter(Option<ListAnnotationStoresFilter>)`](crate::client::fluent_builders::ListAnnotationStores::set_filter): <p>A filter to apply to the list.</p>
    /// - On success, responds with [`ListAnnotationStoresOutput`](crate::output::ListAnnotationStoresOutput) with field(s):
    ///   - [`annotation_stores(Option<Vec<AnnotationStoreItem>>)`](crate::output::ListAnnotationStoresOutput::annotation_stores): <p>A list of stores.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListAnnotationStoresOutput::next_token): <p>A pagination token that's included if more results are available.</p>
    /// - On failure, responds with [`SdkError<ListAnnotationStoresError>`](crate::error::ListAnnotationStoresError)
    pub fn list_annotation_stores(&self) -> crate::client::fluent_builders::ListAnnotationStores {
        crate::client::fluent_builders::ListAnnotationStores::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListReadSetActivationJobs`](crate::client::fluent_builders::ListReadSetActivationJobs) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListReadSetActivationJobs::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`sequence_store_id(impl Into<String>)`](crate::client::fluent_builders::ListReadSetActivationJobs::sequence_store_id) / [`set_sequence_store_id(Option<String>)`](crate::client::fluent_builders::ListReadSetActivationJobs::set_sequence_store_id): <p>The read set's sequence store ID.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListReadSetActivationJobs::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListReadSetActivationJobs::set_max_results): <p>The maximum number of read set activation jobs to return in one page of results.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListReadSetActivationJobs::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListReadSetActivationJobs::set_next_token): <p>Specify the pagination token from a previous request to retrieve the next page of results.</p>
    ///   - [`filter(ActivateReadSetFilter)`](crate::client::fluent_builders::ListReadSetActivationJobs::filter) / [`set_filter(Option<ActivateReadSetFilter>)`](crate::client::fluent_builders::ListReadSetActivationJobs::set_filter): <p>A filter to apply to the list.</p>
    /// - On success, responds with [`ListReadSetActivationJobsOutput`](crate::output::ListReadSetActivationJobsOutput) with field(s):
    ///   - [`next_token(Option<String>)`](crate::output::ListReadSetActivationJobsOutput::next_token): <p>A pagination token that's included if more results are available.</p>
    ///   - [`activation_jobs(Option<Vec<ActivateReadSetJobItem>>)`](crate::output::ListReadSetActivationJobsOutput::activation_jobs): <p>A list of jobs.</p>
    /// - On failure, responds with [`SdkError<ListReadSetActivationJobsError>`](crate::error::ListReadSetActivationJobsError)
    pub fn list_read_set_activation_jobs(
        &self,
    ) -> crate::client::fluent_builders::ListReadSetActivationJobs {
        crate::client::fluent_builders::ListReadSetActivationJobs::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListReadSetExportJobs`](crate::client::fluent_builders::ListReadSetExportJobs) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListReadSetExportJobs::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`sequence_store_id(impl Into<String>)`](crate::client::fluent_builders::ListReadSetExportJobs::sequence_store_id) / [`set_sequence_store_id(Option<String>)`](crate::client::fluent_builders::ListReadSetExportJobs::set_sequence_store_id): <p>The jobs' sequence store ID.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListReadSetExportJobs::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListReadSetExportJobs::set_max_results): <p>The maximum number of jobs to return in one page of results.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListReadSetExportJobs::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListReadSetExportJobs::set_next_token): <p>Specify the pagination token from a previous request to retrieve the next page of results.</p>
    ///   - [`filter(ExportReadSetFilter)`](crate::client::fluent_builders::ListReadSetExportJobs::filter) / [`set_filter(Option<ExportReadSetFilter>)`](crate::client::fluent_builders::ListReadSetExportJobs::set_filter): <p>A filter to apply to the list.</p>
    /// - On success, responds with [`ListReadSetExportJobsOutput`](crate::output::ListReadSetExportJobsOutput) with field(s):
    ///   - [`next_token(Option<String>)`](crate::output::ListReadSetExportJobsOutput::next_token): <p>A pagination token that's included if more results are available.</p>
    ///   - [`export_jobs(Option<Vec<ExportReadSetJobDetail>>)`](crate::output::ListReadSetExportJobsOutput::export_jobs): <p>A list of jobs.</p>
    /// - On failure, responds with [`SdkError<ListReadSetExportJobsError>`](crate::error::ListReadSetExportJobsError)
    pub fn list_read_set_export_jobs(
        &self,
    ) -> crate::client::fluent_builders::ListReadSetExportJobs {
        crate::client::fluent_builders::ListReadSetExportJobs::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListReadSetImportJobs`](crate::client::fluent_builders::ListReadSetImportJobs) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListReadSetImportJobs::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListReadSetImportJobs::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListReadSetImportJobs::set_max_results): <p>The maximum number of jobs to return in one page of results.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListReadSetImportJobs::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListReadSetImportJobs::set_next_token): <p>Specify the pagination token from a previous request to retrieve the next page of results.</p>
    ///   - [`sequence_store_id(impl Into<String>)`](crate::client::fluent_builders::ListReadSetImportJobs::sequence_store_id) / [`set_sequence_store_id(Option<String>)`](crate::client::fluent_builders::ListReadSetImportJobs::set_sequence_store_id): <p>The jobs' sequence store ID.</p>
    ///   - [`filter(ImportReadSetFilter)`](crate::client::fluent_builders::ListReadSetImportJobs::filter) / [`set_filter(Option<ImportReadSetFilter>)`](crate::client::fluent_builders::ListReadSetImportJobs::set_filter): <p>A filter to apply to the list.</p>
    /// - On success, responds with [`ListReadSetImportJobsOutput`](crate::output::ListReadSetImportJobsOutput) with field(s):
    ///   - [`next_token(Option<String>)`](crate::output::ListReadSetImportJobsOutput::next_token): <p>A pagination token that's included if more results are available.</p>
    ///   - [`import_jobs(Option<Vec<ImportReadSetJobItem>>)`](crate::output::ListReadSetImportJobsOutput::import_jobs): <p>A list of jobs.</p>
    /// - On failure, responds with [`SdkError<ListReadSetImportJobsError>`](crate::error::ListReadSetImportJobsError)
    pub fn list_read_set_import_jobs(
        &self,
    ) -> crate::client::fluent_builders::ListReadSetImportJobs {
        crate::client::fluent_builders::ListReadSetImportJobs::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListReadSets`](crate::client::fluent_builders::ListReadSets) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListReadSets::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`sequence_store_id(impl Into<String>)`](crate::client::fluent_builders::ListReadSets::sequence_store_id) / [`set_sequence_store_id(Option<String>)`](crate::client::fluent_builders::ListReadSets::set_sequence_store_id): <p>The jobs' sequence store ID.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListReadSets::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListReadSets::set_max_results): <p>The maximum number of read sets to return in one page of results.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListReadSets::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListReadSets::set_next_token): <p>Specify the pagination token from a previous request to retrieve the next page of results.</p>
    ///   - [`filter(ReadSetFilter)`](crate::client::fluent_builders::ListReadSets::filter) / [`set_filter(Option<ReadSetFilter>)`](crate::client::fluent_builders::ListReadSets::set_filter): <p>A filter to apply to the list.</p>
    /// - On success, responds with [`ListReadSetsOutput`](crate::output::ListReadSetsOutput) with field(s):
    ///   - [`next_token(Option<String>)`](crate::output::ListReadSetsOutput::next_token): <p>A pagination token that's included if more results are available.</p>
    ///   - [`read_sets(Option<Vec<ReadSetListItem>>)`](crate::output::ListReadSetsOutput::read_sets): <p>A list of read sets.</p>
    /// - On failure, responds with [`SdkError<ListReadSetsError>`](crate::error::ListReadSetsError)
    pub fn list_read_sets(&self) -> crate::client::fluent_builders::ListReadSets {
        crate::client::fluent_builders::ListReadSets::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListReferenceImportJobs`](crate::client::fluent_builders::ListReferenceImportJobs) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListReferenceImportJobs::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListReferenceImportJobs::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListReferenceImportJobs::set_max_results): <p>The maximum number of jobs to return in one page of results.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListReferenceImportJobs::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListReferenceImportJobs::set_next_token): <p>Specify the pagination token from a previous request to retrieve the next page of results.</p>
    ///   - [`reference_store_id(impl Into<String>)`](crate::client::fluent_builders::ListReferenceImportJobs::reference_store_id) / [`set_reference_store_id(Option<String>)`](crate::client::fluent_builders::ListReferenceImportJobs::set_reference_store_id): <p>The job's reference store ID.</p>
    ///   - [`filter(ImportReferenceFilter)`](crate::client::fluent_builders::ListReferenceImportJobs::filter) / [`set_filter(Option<ImportReferenceFilter>)`](crate::client::fluent_builders::ListReferenceImportJobs::set_filter): <p>A filter to apply to the list.</p>
    /// - On success, responds with [`ListReferenceImportJobsOutput`](crate::output::ListReferenceImportJobsOutput) with field(s):
    ///   - [`next_token(Option<String>)`](crate::output::ListReferenceImportJobsOutput::next_token): <p>A pagination token that's included if more results are available.</p>
    ///   - [`import_jobs(Option<Vec<ImportReferenceJobItem>>)`](crate::output::ListReferenceImportJobsOutput::import_jobs): <p>A lis of jobs.</p>
    /// - On failure, responds with [`SdkError<ListReferenceImportJobsError>`](crate::error::ListReferenceImportJobsError)
    pub fn list_reference_import_jobs(
        &self,
    ) -> crate::client::fluent_builders::ListReferenceImportJobs {
        crate::client::fluent_builders::ListReferenceImportJobs::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListReferences`](crate::client::fluent_builders::ListReferences) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListReferences::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`reference_store_id(impl Into<String>)`](crate::client::fluent_builders::ListReferences::reference_store_id) / [`set_reference_store_id(Option<String>)`](crate::client::fluent_builders::ListReferences::set_reference_store_id): <p>The references' reference store ID.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListReferences::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListReferences::set_max_results): <p>The maximum number of references to return in one page of results.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListReferences::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListReferences::set_next_token): <p>Specify the pagination token from a previous request to retrieve the next page of results.</p>
    ///   - [`filter(ReferenceFilter)`](crate::client::fluent_builders::ListReferences::filter) / [`set_filter(Option<ReferenceFilter>)`](crate::client::fluent_builders::ListReferences::set_filter): <p>A filter to apply to the list.</p>
    /// - On success, responds with [`ListReferencesOutput`](crate::output::ListReferencesOutput) with field(s):
    ///   - [`next_token(Option<String>)`](crate::output::ListReferencesOutput::next_token): <p>A pagination token that's included if more results are available.</p>
    ///   - [`references(Option<Vec<ReferenceListItem>>)`](crate::output::ListReferencesOutput::references): <p>A list of references.</p>
    /// - On failure, responds with [`SdkError<ListReferencesError>`](crate::error::ListReferencesError)
    pub fn list_references(&self) -> crate::client::fluent_builders::ListReferences {
        crate::client::fluent_builders::ListReferences::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListReferenceStores`](crate::client::fluent_builders::ListReferenceStores) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListReferenceStores::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListReferenceStores::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListReferenceStores::set_max_results): <p>The maximum number of stores to return in one page of results.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListReferenceStores::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListReferenceStores::set_next_token): <p>Specify the pagination token from a previous request to retrieve the next page of results.</p>
    ///   - [`filter(ReferenceStoreFilter)`](crate::client::fluent_builders::ListReferenceStores::filter) / [`set_filter(Option<ReferenceStoreFilter>)`](crate::client::fluent_builders::ListReferenceStores::set_filter): <p>A filter to apply to the list.</p>
    /// - On success, responds with [`ListReferenceStoresOutput`](crate::output::ListReferenceStoresOutput) with field(s):
    ///   - [`next_token(Option<String>)`](crate::output::ListReferenceStoresOutput::next_token): <p>A pagination token that's included if more results are available.</p>
    ///   - [`reference_stores(Option<Vec<ReferenceStoreDetail>>)`](crate::output::ListReferenceStoresOutput::reference_stores): <p>A list of reference stores.</p>
    /// - On failure, responds with [`SdkError<ListReferenceStoresError>`](crate::error::ListReferenceStoresError)
    pub fn list_reference_stores(&self) -> crate::client::fluent_builders::ListReferenceStores {
        crate::client::fluent_builders::ListReferenceStores::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListRunGroups`](crate::client::fluent_builders::ListRunGroups) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListRunGroups::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::ListRunGroups::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::ListRunGroups::set_name): <p>The run groups' name.</p>
    ///   - [`starting_token(impl Into<String>)`](crate::client::fluent_builders::ListRunGroups::starting_token) / [`set_starting_token(Option<String>)`](crate::client::fluent_builders::ListRunGroups::set_starting_token): <p>Specify the pagination token from a previous request to retrieve the next page of results.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListRunGroups::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListRunGroups::set_max_results): <p>The maximum number of run groups to return in one page of results.</p>
    /// - On success, responds with [`ListRunGroupsOutput`](crate::output::ListRunGroupsOutput) with field(s):
    ///   - [`items(Option<Vec<RunGroupListItem>>)`](crate::output::ListRunGroupsOutput::items): <p>A list of groups.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListRunGroupsOutput::next_token): <p>A pagination token that's included if more results are available.</p>
    /// - On failure, responds with [`SdkError<ListRunGroupsError>`](crate::error::ListRunGroupsError)
    pub fn list_run_groups(&self) -> crate::client::fluent_builders::ListRunGroups {
        crate::client::fluent_builders::ListRunGroups::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListRuns`](crate::client::fluent_builders::ListRuns) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListRuns::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::ListRuns::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::ListRuns::set_name): <p>Filter the list by run name.</p>
    ///   - [`run_group_id(impl Into<String>)`](crate::client::fluent_builders::ListRuns::run_group_id) / [`set_run_group_id(Option<String>)`](crate::client::fluent_builders::ListRuns::set_run_group_id): <p>Filter the list by run group ID.</p>
    ///   - [`starting_token(impl Into<String>)`](crate::client::fluent_builders::ListRuns::starting_token) / [`set_starting_token(Option<String>)`](crate::client::fluent_builders::ListRuns::set_starting_token): <p>Specify the pagination token from a previous request to retrieve the next page of results.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListRuns::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListRuns::set_max_results): <p>The maximum number of runs to return in one page of results.</p>
    /// - On success, responds with [`ListRunsOutput`](crate::output::ListRunsOutput) with field(s):
    ///   - [`items(Option<Vec<RunListItem>>)`](crate::output::ListRunsOutput::items): <p>A list of runs.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListRunsOutput::next_token): <p>A pagination token that's included if more results are available.</p>
    /// - On failure, responds with [`SdkError<ListRunsError>`](crate::error::ListRunsError)
    pub fn list_runs(&self) -> crate::client::fluent_builders::ListRuns {
        crate::client::fluent_builders::ListRuns::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListRunTasks`](crate::client::fluent_builders::ListRunTasks) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListRunTasks::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`id(impl Into<String>)`](crate::client::fluent_builders::ListRunTasks::id) / [`set_id(Option<String>)`](crate::client::fluent_builders::ListRunTasks::set_id): <p>The run's ID.</p>
    ///   - [`status(TaskStatus)`](crate::client::fluent_builders::ListRunTasks::status) / [`set_status(Option<TaskStatus>)`](crate::client::fluent_builders::ListRunTasks::set_status): <p>Filter the list by status.</p>
    ///   - [`starting_token(impl Into<String>)`](crate::client::fluent_builders::ListRunTasks::starting_token) / [`set_starting_token(Option<String>)`](crate::client::fluent_builders::ListRunTasks::set_starting_token): <p>Specify the pagination token from a previous request to retrieve the next page of results.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListRunTasks::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListRunTasks::set_max_results): <p>The maximum number of run tasks to return in one page of results.</p>
    /// - On success, responds with [`ListRunTasksOutput`](crate::output::ListRunTasksOutput) with field(s):
    ///   - [`items(Option<Vec<TaskListItem>>)`](crate::output::ListRunTasksOutput::items): <p>A list of tasks.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListRunTasksOutput::next_token): <p>A pagination token that's included if more results are available.</p>
    /// - On failure, responds with [`SdkError<ListRunTasksError>`](crate::error::ListRunTasksError)
    pub fn list_run_tasks(&self) -> crate::client::fluent_builders::ListRunTasks {
        crate::client::fluent_builders::ListRunTasks::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListSequenceStores`](crate::client::fluent_builders::ListSequenceStores) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListSequenceStores::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListSequenceStores::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListSequenceStores::set_max_results): <p>The maximum number of stores to return in one page of results.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListSequenceStores::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListSequenceStores::set_next_token): <p>Specify the pagination token from a previous request to retrieve the next page of results.</p>
    ///   - [`filter(SequenceStoreFilter)`](crate::client::fluent_builders::ListSequenceStores::filter) / [`set_filter(Option<SequenceStoreFilter>)`](crate::client::fluent_builders::ListSequenceStores::set_filter): <p>A filter to apply to the list.</p>
    /// - On success, responds with [`ListSequenceStoresOutput`](crate::output::ListSequenceStoresOutput) with field(s):
    ///   - [`next_token(Option<String>)`](crate::output::ListSequenceStoresOutput::next_token): <p>A pagination token that's included if more results are available.</p>
    ///   - [`sequence_stores(Option<Vec<SequenceStoreDetail>>)`](crate::output::ListSequenceStoresOutput::sequence_stores): <p>A list of sequence stores.</p>
    /// - On failure, responds with [`SdkError<ListSequenceStoresError>`](crate::error::ListSequenceStoresError)
    pub fn list_sequence_stores(&self) -> crate::client::fluent_builders::ListSequenceStores {
        crate::client::fluent_builders::ListSequenceStores::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListTagsForResource`](crate::client::fluent_builders::ListTagsForResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::ListTagsForResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::ListTagsForResource::set_resource_arn): <p>The resource's ARN.</p>
    /// - On success, responds with [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput) with field(s):
    ///   - [`tags(Option<HashMap<String, String>>)`](crate::output::ListTagsForResourceOutput::tags): <p>A list of tags.</p>
    /// - On failure, responds with [`SdkError<ListTagsForResourceError>`](crate::error::ListTagsForResourceError)
    pub fn list_tags_for_resource(&self) -> crate::client::fluent_builders::ListTagsForResource {
        crate::client::fluent_builders::ListTagsForResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListVariantImportJobs`](crate::client::fluent_builders::ListVariantImportJobs) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListVariantImportJobs::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListVariantImportJobs::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListVariantImportJobs::set_max_results): <p>The maximum number of import jobs to return in one page of results.</p>
    ///   - [`ids(Vec<String>)`](crate::client::fluent_builders::ListVariantImportJobs::ids) / [`set_ids(Option<Vec<String>>)`](crate::client::fluent_builders::ListVariantImportJobs::set_ids): <p>A list of job IDs.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListVariantImportJobs::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListVariantImportJobs::set_next_token): <p>Specify the pagination token from a previous request to retrieve the next page of results.</p>
    ///   - [`filter(ListVariantImportJobsFilter)`](crate::client::fluent_builders::ListVariantImportJobs::filter) / [`set_filter(Option<ListVariantImportJobsFilter>)`](crate::client::fluent_builders::ListVariantImportJobs::set_filter): <p>A filter to apply to the list.</p>
    /// - On success, responds with [`ListVariantImportJobsOutput`](crate::output::ListVariantImportJobsOutput) with field(s):
    ///   - [`variant_import_jobs(Option<Vec<VariantImportJobItem>>)`](crate::output::ListVariantImportJobsOutput::variant_import_jobs): <p>A list of jobs.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListVariantImportJobsOutput::next_token): <p>A pagination token that's included if more results are available.</p>
    /// - On failure, responds with [`SdkError<ListVariantImportJobsError>`](crate::error::ListVariantImportJobsError)
    pub fn list_variant_import_jobs(
        &self,
    ) -> crate::client::fluent_builders::ListVariantImportJobs {
        crate::client::fluent_builders::ListVariantImportJobs::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListVariantStores`](crate::client::fluent_builders::ListVariantStores) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListVariantStores::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListVariantStores::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListVariantStores::set_max_results): <p>The maximum number of stores to return in one page of results.</p>
    ///   - [`ids(Vec<String>)`](crate::client::fluent_builders::ListVariantStores::ids) / [`set_ids(Option<Vec<String>>)`](crate::client::fluent_builders::ListVariantStores::set_ids): <p>A list of store IDs.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListVariantStores::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListVariantStores::set_next_token): <p>Specify the pagination token from a previous request to retrieve the next page of results.</p>
    ///   - [`filter(ListVariantStoresFilter)`](crate::client::fluent_builders::ListVariantStores::filter) / [`set_filter(Option<ListVariantStoresFilter>)`](crate::client::fluent_builders::ListVariantStores::set_filter): <p>A filter to apply to the list.</p>
    /// - On success, responds with [`ListVariantStoresOutput`](crate::output::ListVariantStoresOutput) with field(s):
    ///   - [`variant_stores(Option<Vec<VariantStoreItem>>)`](crate::output::ListVariantStoresOutput::variant_stores): <p>A list of variant stores.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListVariantStoresOutput::next_token): <p>A pagination token that's included if more results are available.</p>
    /// - On failure, responds with [`SdkError<ListVariantStoresError>`](crate::error::ListVariantStoresError)
    pub fn list_variant_stores(&self) -> crate::client::fluent_builders::ListVariantStores {
        crate::client::fluent_builders::ListVariantStores::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListWorkflows`](crate::client::fluent_builders::ListWorkflows) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListWorkflows::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`r#type(WorkflowType)`](crate::client::fluent_builders::ListWorkflows::type) / [`set_type(Option<WorkflowType>)`](crate::client::fluent_builders::ListWorkflows::set_type): <p>The workflows' type.</p>
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::ListWorkflows::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::ListWorkflows::set_name): <p>The workflows' name.</p>
    ///   - [`starting_token(impl Into<String>)`](crate::client::fluent_builders::ListWorkflows::starting_token) / [`set_starting_token(Option<String>)`](crate::client::fluent_builders::ListWorkflows::set_starting_token): <p>Specify the pagination token from a previous request to retrieve the next page of results.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListWorkflows::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListWorkflows::set_max_results): <p>The maximum number of workflows to return in one page of results.</p>
    /// - On success, responds with [`ListWorkflowsOutput`](crate::output::ListWorkflowsOutput) with field(s):
    ///   - [`items(Option<Vec<WorkflowListItem>>)`](crate::output::ListWorkflowsOutput::items): <p>The workflows' items.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListWorkflowsOutput::next_token): <p>A pagination token that's included if more results are available.</p>
    /// - On failure, responds with [`SdkError<ListWorkflowsError>`](crate::error::ListWorkflowsError)
    pub fn list_workflows(&self) -> crate::client::fluent_builders::ListWorkflows {
        crate::client::fluent_builders::ListWorkflows::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`StartAnnotationImportJob`](crate::client::fluent_builders::StartAnnotationImportJob) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`destination_name(impl Into<String>)`](crate::client::fluent_builders::StartAnnotationImportJob::destination_name) / [`set_destination_name(Option<String>)`](crate::client::fluent_builders::StartAnnotationImportJob::set_destination_name): <p>A destination annotation store for the job.</p>
    ///   - [`role_arn(impl Into<String>)`](crate::client::fluent_builders::StartAnnotationImportJob::role_arn) / [`set_role_arn(Option<String>)`](crate::client::fluent_builders::StartAnnotationImportJob::set_role_arn): <p>A service role for the job.</p>
    ///   - [`items(Vec<AnnotationImportItemSource>)`](crate::client::fluent_builders::StartAnnotationImportJob::items) / [`set_items(Option<Vec<AnnotationImportItemSource>>)`](crate::client::fluent_builders::StartAnnotationImportJob::set_items): <p>Items to import.</p>
    ///   - [`format_options(FormatOptions)`](crate::client::fluent_builders::StartAnnotationImportJob::format_options) / [`set_format_options(Option<FormatOptions>)`](crate::client::fluent_builders::StartAnnotationImportJob::set_format_options): <p>Formatting options for the annotation file.</p>
    ///   - [`run_left_normalization(bool)`](crate::client::fluent_builders::StartAnnotationImportJob::run_left_normalization) / [`set_run_left_normalization(Option<bool>)`](crate::client::fluent_builders::StartAnnotationImportJob::set_run_left_normalization): <p>The job's left normalization setting.</p>
    /// - On success, responds with [`StartAnnotationImportJobOutput`](crate::output::StartAnnotationImportJobOutput) with field(s):
    ///   - [`job_id(Option<String>)`](crate::output::StartAnnotationImportJobOutput::job_id): <p>The job's ID.</p>
    /// - On failure, responds with [`SdkError<StartAnnotationImportJobError>`](crate::error::StartAnnotationImportJobError)
    pub fn start_annotation_import_job(
        &self,
    ) -> crate::client::fluent_builders::StartAnnotationImportJob {
        crate::client::fluent_builders::StartAnnotationImportJob::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`StartReadSetActivationJob`](crate::client::fluent_builders::StartReadSetActivationJob) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`sequence_store_id(impl Into<String>)`](crate::client::fluent_builders::StartReadSetActivationJob::sequence_store_id) / [`set_sequence_store_id(Option<String>)`](crate::client::fluent_builders::StartReadSetActivationJob::set_sequence_store_id): <p>The read set's sequence store ID.</p>
    ///   - [`client_token(impl Into<String>)`](crate::client::fluent_builders::StartReadSetActivationJob::client_token) / [`set_client_token(Option<String>)`](crate::client::fluent_builders::StartReadSetActivationJob::set_client_token): <p>To ensure that jobs don't run multiple times, specify a unique token for each job.</p>
    ///   - [`sources(Vec<StartReadSetActivationJobSourceItem>)`](crate::client::fluent_builders::StartReadSetActivationJob::sources) / [`set_sources(Option<Vec<StartReadSetActivationJobSourceItem>>)`](crate::client::fluent_builders::StartReadSetActivationJob::set_sources): <p>The job's sources.</p>
    /// - On success, responds with [`StartReadSetActivationJobOutput`](crate::output::StartReadSetActivationJobOutput) with field(s):
    ///   - [`id(Option<String>)`](crate::output::StartReadSetActivationJobOutput::id): <p>The job's ID.</p>
    ///   - [`sequence_store_id(Option<String>)`](crate::output::StartReadSetActivationJobOutput::sequence_store_id): <p>The read set's sequence store ID.</p>
    ///   - [`status(Option<ReadSetActivationJobStatus>)`](crate::output::StartReadSetActivationJobOutput::status): <p>The job's status.</p>
    ///   - [`creation_time(Option<DateTime>)`](crate::output::StartReadSetActivationJobOutput::creation_time): <p>When the job was created.</p>
    /// - On failure, responds with [`SdkError<StartReadSetActivationJobError>`](crate::error::StartReadSetActivationJobError)
    pub fn start_read_set_activation_job(
        &self,
    ) -> crate::client::fluent_builders::StartReadSetActivationJob {
        crate::client::fluent_builders::StartReadSetActivationJob::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`StartReadSetExportJob`](crate::client::fluent_builders::StartReadSetExportJob) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`sequence_store_id(impl Into<String>)`](crate::client::fluent_builders::StartReadSetExportJob::sequence_store_id) / [`set_sequence_store_id(Option<String>)`](crate::client::fluent_builders::StartReadSetExportJob::set_sequence_store_id): <p>The read set's sequence store ID.</p>
    ///   - [`destination(impl Into<String>)`](crate::client::fluent_builders::StartReadSetExportJob::destination) / [`set_destination(Option<String>)`](crate::client::fluent_builders::StartReadSetExportJob::set_destination): <p>A location for exported files in Amazon S3.</p>
    ///   - [`role_arn(impl Into<String>)`](crate::client::fluent_builders::StartReadSetExportJob::role_arn) / [`set_role_arn(Option<String>)`](crate::client::fluent_builders::StartReadSetExportJob::set_role_arn): <p>A service role for the job.</p>
    ///   - [`client_token(impl Into<String>)`](crate::client::fluent_builders::StartReadSetExportJob::client_token) / [`set_client_token(Option<String>)`](crate::client::fluent_builders::StartReadSetExportJob::set_client_token): <p>To ensure that jobs don't run multiple times, specify a unique token for each job.</p>
    ///   - [`sources(Vec<ExportReadSet>)`](crate::client::fluent_builders::StartReadSetExportJob::sources) / [`set_sources(Option<Vec<ExportReadSet>>)`](crate::client::fluent_builders::StartReadSetExportJob::set_sources): <p>Sources for the job.</p>
    /// - On success, responds with [`StartReadSetExportJobOutput`](crate::output::StartReadSetExportJobOutput) with field(s):
    ///   - [`id(Option<String>)`](crate::output::StartReadSetExportJobOutput::id): <p>The job's ID.</p>
    ///   - [`sequence_store_id(Option<String>)`](crate::output::StartReadSetExportJobOutput::sequence_store_id): <p>The read set's sequence store ID.</p>
    ///   - [`destination(Option<String>)`](crate::output::StartReadSetExportJobOutput::destination): <p>The job's output location.</p>
    ///   - [`status(Option<ReadSetExportJobStatus>)`](crate::output::StartReadSetExportJobOutput::status): <p>The job's status.</p>
    ///   - [`creation_time(Option<DateTime>)`](crate::output::StartReadSetExportJobOutput::creation_time): <p>When the job was created.</p>
    /// - On failure, responds with [`SdkError<StartReadSetExportJobError>`](crate::error::StartReadSetExportJobError)
    pub fn start_read_set_export_job(
        &self,
    ) -> crate::client::fluent_builders::StartReadSetExportJob {
        crate::client::fluent_builders::StartReadSetExportJob::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`StartReadSetImportJob`](crate::client::fluent_builders::StartReadSetImportJob) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`sequence_store_id(impl Into<String>)`](crate::client::fluent_builders::StartReadSetImportJob::sequence_store_id) / [`set_sequence_store_id(Option<String>)`](crate::client::fluent_builders::StartReadSetImportJob::set_sequence_store_id): <p>The read set's sequence store ID.</p>
    ///   - [`role_arn(impl Into<String>)`](crate::client::fluent_builders::StartReadSetImportJob::role_arn) / [`set_role_arn(Option<String>)`](crate::client::fluent_builders::StartReadSetImportJob::set_role_arn): <p>A service role for the job.</p>
    ///   - [`client_token(impl Into<String>)`](crate::client::fluent_builders::StartReadSetImportJob::client_token) / [`set_client_token(Option<String>)`](crate::client::fluent_builders::StartReadSetImportJob::set_client_token): <p>To ensure that jobs don't run multiple times, specify a unique token for each job.</p>
    ///   - [`sources(Vec<StartReadSetImportJobSourceItem>)`](crate::client::fluent_builders::StartReadSetImportJob::sources) / [`set_sources(Option<Vec<StartReadSetImportJobSourceItem>>)`](crate::client::fluent_builders::StartReadSetImportJob::set_sources): <p>Source files to import.</p>
    /// - On success, responds with [`StartReadSetImportJobOutput`](crate::output::StartReadSetImportJobOutput) with field(s):
    ///   - [`id(Option<String>)`](crate::output::StartReadSetImportJobOutput::id): <p>The job's ID.</p>
    ///   - [`sequence_store_id(Option<String>)`](crate::output::StartReadSetImportJobOutput::sequence_store_id): <p>The read set's sequence store ID.</p>
    ///   - [`role_arn(Option<String>)`](crate::output::StartReadSetImportJobOutput::role_arn): <p>The job's service role ARN.</p>
    ///   - [`status(Option<ReadSetImportJobStatus>)`](crate::output::StartReadSetImportJobOutput::status): <p>The job's status.</p>
    ///   - [`creation_time(Option<DateTime>)`](crate::output::StartReadSetImportJobOutput::creation_time): <p>When the job was created.</p>
    /// - On failure, responds with [`SdkError<StartReadSetImportJobError>`](crate::error::StartReadSetImportJobError)
    pub fn start_read_set_import_job(
        &self,
    ) -> crate::client::fluent_builders::StartReadSetImportJob {
        crate::client::fluent_builders::StartReadSetImportJob::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`StartReferenceImportJob`](crate::client::fluent_builders::StartReferenceImportJob) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`reference_store_id(impl Into<String>)`](crate::client::fluent_builders::StartReferenceImportJob::reference_store_id) / [`set_reference_store_id(Option<String>)`](crate::client::fluent_builders::StartReferenceImportJob::set_reference_store_id): <p>The job's reference store ID.</p>
    ///   - [`role_arn(impl Into<String>)`](crate::client::fluent_builders::StartReferenceImportJob::role_arn) / [`set_role_arn(Option<String>)`](crate::client::fluent_builders::StartReferenceImportJob::set_role_arn): <p>A service role for the job.</p>
    ///   - [`client_token(impl Into<String>)`](crate::client::fluent_builders::StartReferenceImportJob::client_token) / [`set_client_token(Option<String>)`](crate::client::fluent_builders::StartReferenceImportJob::set_client_token): <p>To ensure that jobs don't run multiple times, specify a unique token for each job.</p>
    ///   - [`sources(Vec<StartReferenceImportJobSourceItem>)`](crate::client::fluent_builders::StartReferenceImportJob::sources) / [`set_sources(Option<Vec<StartReferenceImportJobSourceItem>>)`](crate::client::fluent_builders::StartReferenceImportJob::set_sources): <p>Sources for the job.</p>
    /// - On success, responds with [`StartReferenceImportJobOutput`](crate::output::StartReferenceImportJobOutput) with field(s):
    ///   - [`id(Option<String>)`](crate::output::StartReferenceImportJobOutput::id): <p>The job's ID.</p>
    ///   - [`reference_store_id(Option<String>)`](crate::output::StartReferenceImportJobOutput::reference_store_id): <p>The job's reference store ID.</p>
    ///   - [`role_arn(Option<String>)`](crate::output::StartReferenceImportJobOutput::role_arn): <p>The job's service role ARN.</p>
    ///   - [`status(Option<ReferenceImportJobStatus>)`](crate::output::StartReferenceImportJobOutput::status): <p>The job's status.</p>
    ///   - [`creation_time(Option<DateTime>)`](crate::output::StartReferenceImportJobOutput::creation_time): <p>When the job was created.</p>
    /// - On failure, responds with [`SdkError<StartReferenceImportJobError>`](crate::error::StartReferenceImportJobError)
    pub fn start_reference_import_job(
        &self,
    ) -> crate::client::fluent_builders::StartReferenceImportJob {
        crate::client::fluent_builders::StartReferenceImportJob::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`StartRun`](crate::client::fluent_builders::StartRun) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`workflow_id(impl Into<String>)`](crate::client::fluent_builders::StartRun::workflow_id) / [`set_workflow_id(Option<String>)`](crate::client::fluent_builders::StartRun::set_workflow_id): <p>The run's workflow ID.</p>
    ///   - [`workflow_type(WorkflowType)`](crate::client::fluent_builders::StartRun::workflow_type) / [`set_workflow_type(Option<WorkflowType>)`](crate::client::fluent_builders::StartRun::set_workflow_type): <p>The run's workflows type.</p>
    ///   - [`run_id(impl Into<String>)`](crate::client::fluent_builders::StartRun::run_id) / [`set_run_id(Option<String>)`](crate::client::fluent_builders::StartRun::set_run_id): <p>The run's ID.</p>
    ///   - [`role_arn(impl Into<String>)`](crate::client::fluent_builders::StartRun::role_arn) / [`set_role_arn(Option<String>)`](crate::client::fluent_builders::StartRun::set_role_arn): <p>A service role for the run.</p>
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::StartRun::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::StartRun::set_name): <p>A name for the run.</p>
    ///   - [`run_group_id(impl Into<String>)`](crate::client::fluent_builders::StartRun::run_group_id) / [`set_run_group_id(Option<String>)`](crate::client::fluent_builders::StartRun::set_run_group_id): <p>The run's group ID.</p>
    ///   - [`priority(i32)`](crate::client::fluent_builders::StartRun::priority) / [`set_priority(Option<i32>)`](crate::client::fluent_builders::StartRun::set_priority): <p>A priority for the run.</p>
    ///   - [`parameters(Document)`](crate::client::fluent_builders::StartRun::parameters) / [`set_parameters(Option<Document>)`](crate::client::fluent_builders::StartRun::set_parameters): <p>Parameters for the run.</p>
    ///   - [`storage_capacity(i32)`](crate::client::fluent_builders::StartRun::storage_capacity) / [`set_storage_capacity(Option<i32>)`](crate::client::fluent_builders::StartRun::set_storage_capacity): <p>A storage capacity for the run.</p>
    ///   - [`output_uri(impl Into<String>)`](crate::client::fluent_builders::StartRun::output_uri) / [`set_output_uri(Option<String>)`](crate::client::fluent_builders::StartRun::set_output_uri): <p>An output URI for the run.</p>
    ///   - [`log_level(RunLogLevel)`](crate::client::fluent_builders::StartRun::log_level) / [`set_log_level(Option<RunLogLevel>)`](crate::client::fluent_builders::StartRun::set_log_level): <p>A log level for the run.</p>
    ///   - [`tags(HashMap<String, String>)`](crate::client::fluent_builders::StartRun::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::client::fluent_builders::StartRun::set_tags): <p>Tags for the run.</p>
    ///   - [`request_id(impl Into<String>)`](crate::client::fluent_builders::StartRun::request_id) / [`set_request_id(Option<String>)`](crate::client::fluent_builders::StartRun::set_request_id): <p>A request ID for the run.</p>
    /// - On success, responds with [`StartRunOutput`](crate::output::StartRunOutput) with field(s):
    ///   - [`arn(Option<String>)`](crate::output::StartRunOutput::arn): <p>The run's ARN.</p>
    ///   - [`id(Option<String>)`](crate::output::StartRunOutput::id): <p>The run's ID.</p>
    ///   - [`status(Option<RunStatus>)`](crate::output::StartRunOutput::status): <p>The run's status.</p>
    ///   - [`tags(Option<HashMap<String, String>>)`](crate::output::StartRunOutput::tags): <p>The run's tags.</p>
    /// - On failure, responds with [`SdkError<StartRunError>`](crate::error::StartRunError)
    pub fn start_run(&self) -> crate::client::fluent_builders::StartRun {
        crate::client::fluent_builders::StartRun::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`StartVariantImportJob`](crate::client::fluent_builders::StartVariantImportJob) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`destination_name(impl Into<String>)`](crate::client::fluent_builders::StartVariantImportJob::destination_name) / [`set_destination_name(Option<String>)`](crate::client::fluent_builders::StartVariantImportJob::set_destination_name): <p>The destination variant store for the job.</p>
    ///   - [`role_arn(impl Into<String>)`](crate::client::fluent_builders::StartVariantImportJob::role_arn) / [`set_role_arn(Option<String>)`](crate::client::fluent_builders::StartVariantImportJob::set_role_arn): <p>A service role for the job.</p>
    ///   - [`items(Vec<VariantImportItemSource>)`](crate::client::fluent_builders::StartVariantImportJob::items) / [`set_items(Option<Vec<VariantImportItemSource>>)`](crate::client::fluent_builders::StartVariantImportJob::set_items): <p>Items to import.</p>
    ///   - [`run_left_normalization(bool)`](crate::client::fluent_builders::StartVariantImportJob::run_left_normalization) / [`set_run_left_normalization(Option<bool>)`](crate::client::fluent_builders::StartVariantImportJob::set_run_left_normalization): <p>The job's left normalization setting.</p>
    /// - On success, responds with [`StartVariantImportJobOutput`](crate::output::StartVariantImportJobOutput) with field(s):
    ///   - [`job_id(Option<String>)`](crate::output::StartVariantImportJobOutput::job_id): <p>The job's ID.</p>
    /// - On failure, responds with [`SdkError<StartVariantImportJobError>`](crate::error::StartVariantImportJobError)
    pub fn start_variant_import_job(
        &self,
    ) -> crate::client::fluent_builders::StartVariantImportJob {
        crate::client::fluent_builders::StartVariantImportJob::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`TagResource`](crate::client::fluent_builders::TagResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::TagResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::TagResource::set_resource_arn): <p>The resource's ARN.</p>
    ///   - [`tags(HashMap<String, String>)`](crate::client::fluent_builders::TagResource::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::client::fluent_builders::TagResource::set_tags): <p>Tags for the resource.</p>
    /// - On success, responds with [`TagResourceOutput`](crate::output::TagResourceOutput)

    /// - On failure, responds with [`SdkError<TagResourceError>`](crate::error::TagResourceError)
    pub fn tag_resource(&self) -> crate::client::fluent_builders::TagResource {
        crate::client::fluent_builders::TagResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UntagResource`](crate::client::fluent_builders::UntagResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::UntagResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::UntagResource::set_resource_arn): <p>The resource's ARN.</p>
    ///   - [`tag_keys(Vec<String>)`](crate::client::fluent_builders::UntagResource::tag_keys) / [`set_tag_keys(Option<Vec<String>>)`](crate::client::fluent_builders::UntagResource::set_tag_keys): <p>Keys of tags to remove.</p>
    /// - On success, responds with [`UntagResourceOutput`](crate::output::UntagResourceOutput)

    /// - On failure, responds with [`SdkError<UntagResourceError>`](crate::error::UntagResourceError)
    pub fn untag_resource(&self) -> crate::client::fluent_builders::UntagResource {
        crate::client::fluent_builders::UntagResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateAnnotationStore`](crate::client::fluent_builders::UpdateAnnotationStore) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::UpdateAnnotationStore::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::UpdateAnnotationStore::set_name): <p>A name for the store.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::UpdateAnnotationStore::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::UpdateAnnotationStore::set_description): <p>A description for the store.</p>
    /// - On success, responds with [`UpdateAnnotationStoreOutput`](crate::output::UpdateAnnotationStoreOutput) with field(s):
    ///   - [`id(Option<String>)`](crate::output::UpdateAnnotationStoreOutput::id): <p>The store's ID.</p>
    ///   - [`reference(Option<ReferenceItem>)`](crate::output::UpdateAnnotationStoreOutput::reference): <p>The store's genome reference.</p>
    ///   - [`status(Option<StoreStatus>)`](crate::output::UpdateAnnotationStoreOutput::status): <p>The store's status.</p>
    ///   - [`name(Option<String>)`](crate::output::UpdateAnnotationStoreOutput::name): <p>The store's name.</p>
    ///   - [`description(Option<String>)`](crate::output::UpdateAnnotationStoreOutput::description): <p>The store's description.</p>
    ///   - [`creation_time(Option<DateTime>)`](crate::output::UpdateAnnotationStoreOutput::creation_time): <p>When the store was created.</p>
    ///   - [`update_time(Option<DateTime>)`](crate::output::UpdateAnnotationStoreOutput::update_time): <p>When the store was updated.</p>
    ///   - [`store_options(Option<StoreOptions>)`](crate::output::UpdateAnnotationStoreOutput::store_options): <p>Parsing options for the store.</p>
    ///   - [`store_format(Option<StoreFormat>)`](crate::output::UpdateAnnotationStoreOutput::store_format): <p>The annotation file format of the store.</p>
    /// - On failure, responds with [`SdkError<UpdateAnnotationStoreError>`](crate::error::UpdateAnnotationStoreError)
    pub fn update_annotation_store(&self) -> crate::client::fluent_builders::UpdateAnnotationStore {
        crate::client::fluent_builders::UpdateAnnotationStore::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateRunGroup`](crate::client::fluent_builders::UpdateRunGroup) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`id(impl Into<String>)`](crate::client::fluent_builders::UpdateRunGroup::id) / [`set_id(Option<String>)`](crate::client::fluent_builders::UpdateRunGroup::set_id): <p>The group's ID.</p>
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::UpdateRunGroup::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::UpdateRunGroup::set_name): <p>A name for the group.</p>
    ///   - [`max_cpus(i32)`](crate::client::fluent_builders::UpdateRunGroup::max_cpus) / [`set_max_cpus(Option<i32>)`](crate::client::fluent_builders::UpdateRunGroup::set_max_cpus): <p>The maximum number of CPUs to use.</p>
    ///   - [`max_runs(i32)`](crate::client::fluent_builders::UpdateRunGroup::max_runs) / [`set_max_runs(Option<i32>)`](crate::client::fluent_builders::UpdateRunGroup::set_max_runs): <p>The maximum number of concurrent runs for the group.</p>
    ///   - [`max_duration(i32)`](crate::client::fluent_builders::UpdateRunGroup::max_duration) / [`set_max_duration(Option<i32>)`](crate::client::fluent_builders::UpdateRunGroup::set_max_duration): <p>The maximum amount of time to run.</p>
    /// - On success, responds with [`UpdateRunGroupOutput`](crate::output::UpdateRunGroupOutput)

    /// - On failure, responds with [`SdkError<UpdateRunGroupError>`](crate::error::UpdateRunGroupError)
    pub fn update_run_group(&self) -> crate::client::fluent_builders::UpdateRunGroup {
        crate::client::fluent_builders::UpdateRunGroup::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateVariantStore`](crate::client::fluent_builders::UpdateVariantStore) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::UpdateVariantStore::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::UpdateVariantStore::set_name): <p>A name for the store.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::UpdateVariantStore::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::UpdateVariantStore::set_description): <p>A description for the store.</p>
    /// - On success, responds with [`UpdateVariantStoreOutput`](crate::output::UpdateVariantStoreOutput) with field(s):
    ///   - [`id(Option<String>)`](crate::output::UpdateVariantStoreOutput::id): <p>The store's ID.</p>
    ///   - [`reference(Option<ReferenceItem>)`](crate::output::UpdateVariantStoreOutput::reference): <p>The store's genome reference.</p>
    ///   - [`status(Option<StoreStatus>)`](crate::output::UpdateVariantStoreOutput::status): <p>The store's status.</p>
    ///   - [`name(Option<String>)`](crate::output::UpdateVariantStoreOutput::name): <p>The store's name.</p>
    ///   - [`description(Option<String>)`](crate::output::UpdateVariantStoreOutput::description): <p>The store's description.</p>
    ///   - [`creation_time(Option<DateTime>)`](crate::output::UpdateVariantStoreOutput::creation_time): <p>When the store was created.</p>
    ///   - [`update_time(Option<DateTime>)`](crate::output::UpdateVariantStoreOutput::update_time): <p>When the store was updated.</p>
    /// - On failure, responds with [`SdkError<UpdateVariantStoreError>`](crate::error::UpdateVariantStoreError)
    pub fn update_variant_store(&self) -> crate::client::fluent_builders::UpdateVariantStore {
        crate::client::fluent_builders::UpdateVariantStore::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateWorkflow`](crate::client::fluent_builders::UpdateWorkflow) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`id(impl Into<String>)`](crate::client::fluent_builders::UpdateWorkflow::id) / [`set_id(Option<String>)`](crate::client::fluent_builders::UpdateWorkflow::set_id): <p>The workflow's ID.</p>
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::UpdateWorkflow::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::UpdateWorkflow::set_name): <p>A name for the workflow.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::UpdateWorkflow::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::UpdateWorkflow::set_description): <p>A description for the workflow.</p>
    /// - On success, responds with [`UpdateWorkflowOutput`](crate::output::UpdateWorkflowOutput)

    /// - On failure, responds with [`SdkError<UpdateWorkflowError>`](crate::error::UpdateWorkflowError)
    pub fn update_workflow(&self) -> crate::client::fluent_builders::UpdateWorkflow {
        crate::client::fluent_builders::UpdateWorkflow::new(self.handle.clone())
    }
}

impl Client {
    /// Creates a new client from an [SDK Config](aws_types::sdk_config::SdkConfig).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `sdk_config` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `sdk_config` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn new(sdk_config: &aws_types::sdk_config::SdkConfig) -> Self {
        Self::from_conf(sdk_config.into())
    }

    /// Creates a new client from the service [`Config`](crate::Config).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `conf` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `conf` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn from_conf(conf: crate::Config) -> Self {
        let retry_config = conf
            .retry_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::retry::RetryConfig::disabled);
        let timeout_config = conf
            .timeout_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
        let sleep_impl = conf.sleep_impl();
        if (retry_config.has_retry() || timeout_config.has_timeouts()) && sleep_impl.is_none() {
            panic!("An async sleep implementation is required for retries or timeouts to work. \
                                    Set the `sleep_impl` on the Config passed into this function to fix this panic.");
        }

        let connector = conf.http_connector().and_then(|c| {
            let timeout_config = conf
                .timeout_config()
                .cloned()
                .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
            let connector_settings =
                aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                    &timeout_config,
                );
            c.connector(&connector_settings, conf.sleep_impl())
        });

        let builder = aws_smithy_client::Builder::new();

        let builder = match connector {
            // Use provided connector
            Some(c) => builder.connector(c),
            None => {
                #[cfg(any(feature = "rustls", feature = "native-tls"))]
                {
                    // Use default connector based on enabled features
                    builder.dyn_https_connector(
                        aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                            &timeout_config,
                        ),
                    )
                }
                #[cfg(not(any(feature = "rustls", feature = "native-tls")))]
                {
                    panic!("No HTTP connector was available. Enable the `rustls` or `native-tls` crate feature or set a connector to fix this.");
                }
            }
        };
        let mut builder = builder
            .middleware(aws_smithy_client::erase::DynMiddleware::new(
                crate::middleware::DefaultMiddleware::new(),
            ))
            .retry_config(retry_config.into())
            .operation_timeout_config(timeout_config.into());
        builder.set_sleep_impl(sleep_impl);
        let client = builder.build();

        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}

/// Utilities to ergonomically construct a request to the service.
///
/// Fluent builders are created through the [`Client`](crate::client::Client) by calling
/// one if its operation methods. After parameters are set using the builder methods,
/// the `send` method can be called to initiate the request.
pub mod fluent_builders;
