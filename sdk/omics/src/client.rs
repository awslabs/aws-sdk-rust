// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[derive(Debug)]
pub(crate) struct Handle {
    pub(crate) conf: crate::Config,
    #[allow(dead_code)] // unused when a service does not provide any operations
    pub(crate) runtime_plugins: ::aws_smithy_runtime_api::client::runtime_plugin::RuntimePlugins,
}

/// Client for Amazon Omics
///
/// Client for invoking operations on Amazon Omics. Each operation on Amazon Omics is a method on this
/// this struct. `.send()` MUST be invoked on the generated operations to dispatch the request to the service.
/// ## Constructing a `Client`
///
/// A [`Config`] is required to construct a client. For most use cases, the [`aws-config`]
/// crate should be used to automatically resolve this config using
/// [`aws_config::load_from_env()`], since this will resolve an [`SdkConfig`] which can be shared
/// across multiple different AWS SDK clients. This config resolution process can be customized
/// by calling [`aws_config::from_env()`] instead, which returns a [`ConfigLoader`] that uses
/// the [builder pattern] to customize the default config.
///
/// In the simplest case, creating a client looks as follows:
/// ```rust,no_run
/// # async fn wrapper() {
/// let config = aws_config::load_from_env().await;
/// let client = aws_sdk_omics::Client::new(&config);
/// # }
/// ```
///
/// Occasionally, SDKs may have additional service-specific values that can be set on the [`Config`] that
/// is absent from [`SdkConfig`], or slightly different settings for a specific client may be desired.
/// The [`Builder`](crate::config::Builder) struct implements `From<&SdkConfig>`, so setting these specific settings can be
/// done as follows:
///
/// ```rust,no_run
/// # async fn wrapper() {
/// let sdk_config = ::aws_config::load_from_env().await;
/// let config = aws_sdk_omics::config::Builder::from(&sdk_config)
/// # /*
///     .some_service_specific_setting("value")
/// # */
///     .build();
/// # }
/// ```
///
/// See the [`aws-config` docs] and [`Config`] for more information on customizing configuration.
///
/// _Note:_ Client construction is expensive due to connection thread pool initialization, and should
/// be done once at application start-up.
///
/// [`Config`]: crate::Config
/// [`ConfigLoader`]: https://docs.rs/aws-config/*/aws_config/struct.ConfigLoader.html
/// [`SdkConfig`]: https://docs.rs/aws-config/*/aws_config/struct.SdkConfig.html
/// [`aws-config` docs]: https://docs.rs/aws-config/*
/// [`aws-config`]: https://crates.io/crates/aws-config
/// [`aws_config::from_env()`]: https://docs.rs/aws-config/*/aws_config/fn.from_env.html
/// [`aws_config::load_from_env()`]: https://docs.rs/aws-config/*/aws_config/fn.load_from_env.html
/// [builder pattern]: https://rust-lang.github.io/api-guidelines/type-safety.html#builders-enable-construction-of-complex-values-c-builder
/// # Waiters
///
/// This client provides `wait_until` methods behind the [`Waiters`](crate::client::Waiters) trait.
/// To use them, simply import the trait, and then call one of the `wait_until` methods. This will
/// return a waiter fluent builder that takes various parameters, which are documented on the builder
/// type. Once parameters have been provided, the `wait` method can be called to initiate waiting.
///
/// For example, if there was a `wait_until_thing` method, it could look like:
/// ```rust,ignore
/// let result = client.wait_until_thing()
///     .thing_id("someId")
///     .wait(Duration::from_secs(120))
///     .await;
/// ```
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct Client {
    handle: ::std::sync::Arc<Handle>,
}

impl Client {
    /// Creates a new client from the service [`Config`](crate::Config).
    ///
    /// # Panics
    ///
    /// This method will panic in the following cases:
    ///
    /// - Retries or timeouts are enabled without a `sleep_impl` configured.
    /// - Identity caching is enabled without a `sleep_impl` and `time_source` configured.
    /// - No `behavior_version` is provided.
    ///
    /// The panic message for each of these will have instructions on how to resolve them.
    #[track_caller]
    pub fn from_conf(conf: crate::Config) -> Self {
        let handle = Handle {
            conf: conf.clone(),
            runtime_plugins: crate::config::base_client_runtime_plugins(conf),
        };
        if let Err(err) = Self::validate_config(&handle) {
            panic!("Invalid client configuration: {err}");
        }
        Self {
            handle: ::std::sync::Arc::new(handle),
        }
    }

    /// Returns the client's configuration.
    pub fn config(&self) -> &crate::Config {
        &self.handle.conf
    }

    fn validate_config(handle: &Handle) -> Result<(), ::aws_smithy_runtime_api::box_error::BoxError> {
        let mut cfg = ::aws_smithy_types::config_bag::ConfigBag::base();
        handle
            .runtime_plugins
            .apply_client_configuration(&mut cfg)?
            .validate_base_client_config(&cfg)?;
        Ok(())
    }
}

///
/// Waiter functions for the client.
///
/// Import this trait to get `wait_until` methods on the client.
///
pub trait Waiters {
    /// Wait until an annotation import is completed
    fn wait_until_annotation_import_job_created(&self) -> crate::waiters::annotation_import_job_created::AnnotationImportJobCreatedFluentBuilder;
    /// Wait until an annotation store is created
    fn wait_until_annotation_store_created(&self) -> crate::waiters::annotation_store_created::AnnotationStoreCreatedFluentBuilder;
    /// Wait until an annotation store is deleted.
    fn wait_until_annotation_store_deleted(&self) -> crate::waiters::annotation_store_deleted::AnnotationStoreDeletedFluentBuilder;
    /// Wait until an annotation store version is created
    fn wait_until_annotation_store_version_created(
        &self,
    ) -> crate::waiters::annotation_store_version_created::AnnotationStoreVersionCreatedFluentBuilder;
    /// Wait until an annotation store version is deleted.
    fn wait_until_annotation_store_version_deleted(
        &self,
    ) -> crate::waiters::annotation_store_version_deleted::AnnotationStoreVersionDeletedFluentBuilder;
    /// Wait until a job is completed.
    fn wait_until_read_set_activation_job_completed(
        &self,
    ) -> crate::waiters::read_set_activation_job_completed::ReadSetActivationJobCompletedFluentBuilder;
    /// Wait until a job is completed.
    fn wait_until_read_set_export_job_completed(&self) -> crate::waiters::read_set_export_job_completed::ReadSetExportJobCompletedFluentBuilder;
    /// Wait until a job is completed.
    fn wait_until_read_set_import_job_completed(&self) -> crate::waiters::read_set_import_job_completed::ReadSetImportJobCompletedFluentBuilder;
    /// Wait until a job is completed.
    fn wait_until_reference_import_job_completed(&self) -> crate::waiters::reference_import_job_completed::ReferenceImportJobCompletedFluentBuilder;
    /// Wait until a run is running.
    fn wait_until_run_running(&self) -> crate::waiters::run_running::RunRunningFluentBuilder;
    /// Wait until a run is completed.
    fn wait_until_run_completed(&self) -> crate::waiters::run_completed::RunCompletedFluentBuilder;
    /// Wait until a task is running.
    fn wait_until_task_running(&self) -> crate::waiters::task_running::TaskRunningFluentBuilder;
    /// Wait until a task is completed.
    fn wait_until_task_completed(&self) -> crate::waiters::task_completed::TaskCompletedFluentBuilder;
    /// Wait until variant import is completed
    fn wait_until_variant_import_job_created(&self) -> crate::waiters::variant_import_job_created::VariantImportJobCreatedFluentBuilder;
    /// Wait until a variant store is created
    fn wait_until_variant_store_created(&self) -> crate::waiters::variant_store_created::VariantStoreCreatedFluentBuilder;
    /// Wait until a variant store is deleted.
    fn wait_until_variant_store_deleted(&self) -> crate::waiters::variant_store_deleted::VariantStoreDeletedFluentBuilder;
    /// Wait until a workflow is active.
    fn wait_until_workflow_active(&self) -> crate::waiters::workflow_active::WorkflowActiveFluentBuilder;
}
impl Waiters for Client {
    fn wait_until_annotation_import_job_created(&self) -> crate::waiters::annotation_import_job_created::AnnotationImportJobCreatedFluentBuilder {
        crate::waiters::annotation_import_job_created::AnnotationImportJobCreatedFluentBuilder::new(self.handle.clone())
    }
    fn wait_until_annotation_store_created(&self) -> crate::waiters::annotation_store_created::AnnotationStoreCreatedFluentBuilder {
        crate::waiters::annotation_store_created::AnnotationStoreCreatedFluentBuilder::new(self.handle.clone())
    }
    fn wait_until_annotation_store_deleted(&self) -> crate::waiters::annotation_store_deleted::AnnotationStoreDeletedFluentBuilder {
        crate::waiters::annotation_store_deleted::AnnotationStoreDeletedFluentBuilder::new(self.handle.clone())
    }
    fn wait_until_annotation_store_version_created(
        &self,
    ) -> crate::waiters::annotation_store_version_created::AnnotationStoreVersionCreatedFluentBuilder {
        crate::waiters::annotation_store_version_created::AnnotationStoreVersionCreatedFluentBuilder::new(self.handle.clone())
    }
    fn wait_until_annotation_store_version_deleted(
        &self,
    ) -> crate::waiters::annotation_store_version_deleted::AnnotationStoreVersionDeletedFluentBuilder {
        crate::waiters::annotation_store_version_deleted::AnnotationStoreVersionDeletedFluentBuilder::new(self.handle.clone())
    }
    fn wait_until_read_set_activation_job_completed(
        &self,
    ) -> crate::waiters::read_set_activation_job_completed::ReadSetActivationJobCompletedFluentBuilder {
        crate::waiters::read_set_activation_job_completed::ReadSetActivationJobCompletedFluentBuilder::new(self.handle.clone())
    }
    fn wait_until_read_set_export_job_completed(&self) -> crate::waiters::read_set_export_job_completed::ReadSetExportJobCompletedFluentBuilder {
        crate::waiters::read_set_export_job_completed::ReadSetExportJobCompletedFluentBuilder::new(self.handle.clone())
    }
    fn wait_until_read_set_import_job_completed(&self) -> crate::waiters::read_set_import_job_completed::ReadSetImportJobCompletedFluentBuilder {
        crate::waiters::read_set_import_job_completed::ReadSetImportJobCompletedFluentBuilder::new(self.handle.clone())
    }
    fn wait_until_reference_import_job_completed(&self) -> crate::waiters::reference_import_job_completed::ReferenceImportJobCompletedFluentBuilder {
        crate::waiters::reference_import_job_completed::ReferenceImportJobCompletedFluentBuilder::new(self.handle.clone())
    }
    fn wait_until_run_running(&self) -> crate::waiters::run_running::RunRunningFluentBuilder {
        crate::waiters::run_running::RunRunningFluentBuilder::new(self.handle.clone())
    }
    fn wait_until_run_completed(&self) -> crate::waiters::run_completed::RunCompletedFluentBuilder {
        crate::waiters::run_completed::RunCompletedFluentBuilder::new(self.handle.clone())
    }
    fn wait_until_task_running(&self) -> crate::waiters::task_running::TaskRunningFluentBuilder {
        crate::waiters::task_running::TaskRunningFluentBuilder::new(self.handle.clone())
    }
    fn wait_until_task_completed(&self) -> crate::waiters::task_completed::TaskCompletedFluentBuilder {
        crate::waiters::task_completed::TaskCompletedFluentBuilder::new(self.handle.clone())
    }
    fn wait_until_variant_import_job_created(&self) -> crate::waiters::variant_import_job_created::VariantImportJobCreatedFluentBuilder {
        crate::waiters::variant_import_job_created::VariantImportJobCreatedFluentBuilder::new(self.handle.clone())
    }
    fn wait_until_variant_store_created(&self) -> crate::waiters::variant_store_created::VariantStoreCreatedFluentBuilder {
        crate::waiters::variant_store_created::VariantStoreCreatedFluentBuilder::new(self.handle.clone())
    }
    fn wait_until_variant_store_deleted(&self) -> crate::waiters::variant_store_deleted::VariantStoreDeletedFluentBuilder {
        crate::waiters::variant_store_deleted::VariantStoreDeletedFluentBuilder::new(self.handle.clone())
    }
    fn wait_until_workflow_active(&self) -> crate::waiters::workflow_active::WorkflowActiveFluentBuilder {
        crate::waiters::workflow_active::WorkflowActiveFluentBuilder::new(self.handle.clone())
    }
}

impl Client {
    /// Creates a new client from an [SDK Config](::aws_types::sdk_config::SdkConfig).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `sdk_config` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `sdk_config` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    /// - This method will panic if no `BehaviorVersion` is provided. If you experience this panic, set `behavior_version` on the Config or enable the `behavior-version-latest` Cargo feature.
    #[track_caller]
    pub fn new(sdk_config: &::aws_types::sdk_config::SdkConfig) -> Self {
        Self::from_conf(sdk_config.into())
    }
}

mod abort_multipart_read_set_upload;

mod accept_share;

mod batch_delete_read_set;

mod cancel_annotation_import_job;

mod cancel_run;

mod cancel_variant_import_job;

mod complete_multipart_read_set_upload;

mod create_annotation_store;

mod create_annotation_store_version;

mod create_multipart_read_set_upload;

mod create_reference_store;

mod create_run_group;

mod create_sequence_store;

mod create_share;

mod create_variant_store;

mod create_workflow;

/// Operation customization and supporting types.
///
pub mod customize;

mod delete_annotation_store;

mod delete_annotation_store_versions;

mod delete_reference;

mod delete_reference_store;

mod delete_run;

mod delete_run_group;

mod delete_sequence_store;

mod delete_share;

mod delete_variant_store;

mod delete_workflow;

mod get_annotation_import_job;

mod get_annotation_store;

mod get_annotation_store_version;

mod get_read_set;

mod get_read_set_activation_job;

mod get_read_set_export_job;

mod get_read_set_import_job;

mod get_read_set_metadata;

mod get_reference;

mod get_reference_import_job;

mod get_reference_metadata;

mod get_reference_store;

mod get_run;

mod get_run_group;

mod get_run_task;

mod get_sequence_store;

mod get_share;

mod get_variant_import_job;

mod get_variant_store;

mod get_workflow;

mod list_annotation_import_jobs;

mod list_annotation_store_versions;

mod list_annotation_stores;

mod list_multipart_read_set_uploads;

mod list_read_set_activation_jobs;

mod list_read_set_export_jobs;

mod list_read_set_import_jobs;

mod list_read_set_upload_parts;

mod list_read_sets;

mod list_reference_import_jobs;

mod list_reference_stores;

mod list_references;

mod list_run_groups;

mod list_run_tasks;

mod list_runs;

mod list_sequence_stores;

mod list_shares;

mod list_tags_for_resource;

mod list_variant_import_jobs;

mod list_variant_stores;

mod list_workflows;

mod start_annotation_import_job;

mod start_read_set_activation_job;

mod start_read_set_export_job;

mod start_read_set_import_job;

mod start_reference_import_job;

mod start_run;

mod start_variant_import_job;

mod tag_resource;

mod untag_resource;

mod update_annotation_store;

mod update_annotation_store_version;

mod update_run_group;

mod update_variant_store;

mod update_workflow;

mod upload_read_set_part;
