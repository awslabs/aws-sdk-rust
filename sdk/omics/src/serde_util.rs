// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn access_denied_exception_correct_errors(
    mut builder: crate::types::error::builders::AccessDeniedExceptionBuilder,
) -> crate::types::error::builders::AccessDeniedExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn internal_server_exception_correct_errors(
    mut builder: crate::types::error::builders::InternalServerExceptionBuilder,
) -> crate::types::error::builders::InternalServerExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn not_supported_operation_exception_correct_errors(
    mut builder: crate::types::error::builders::NotSupportedOperationExceptionBuilder,
) -> crate::types::error::builders::NotSupportedOperationExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn request_timeout_exception_correct_errors(
    mut builder: crate::types::error::builders::RequestTimeoutExceptionBuilder,
) -> crate::types::error::builders::RequestTimeoutExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_not_found_exception_correct_errors(
    mut builder: crate::types::error::builders::ResourceNotFoundExceptionBuilder,
) -> crate::types::error::builders::ResourceNotFoundExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn service_quota_exceeded_exception_correct_errors(
    mut builder: crate::types::error::builders::ServiceQuotaExceededExceptionBuilder,
) -> crate::types::error::builders::ServiceQuotaExceededExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn throttling_exception_correct_errors(
    mut builder: crate::types::error::builders::ThrottlingExceptionBuilder,
) -> crate::types::error::builders::ThrottlingExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_exception_correct_errors(
    mut builder: crate::types::error::builders::ValidationExceptionBuilder,
) -> crate::types::error::builders::ValidationExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn conflict_exception_correct_errors(
    mut builder: crate::types::error::builders::ConflictExceptionBuilder,
) -> crate::types::error::builders::ConflictExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn complete_multipart_read_set_upload_output_correct_errors(
    mut builder: crate::operation::complete_multipart_read_set_upload::builders::CompleteMultipartReadSetUploadOutputBuilder,
) -> crate::operation::complete_multipart_read_set_upload::builders::CompleteMultipartReadSetUploadOutputBuilder {
    if builder.read_set_id.is_none() {
        builder.read_set_id = Some(Default::default())
    }
    builder
}

pub(crate) fn create_annotation_store_output_correct_errors(
    mut builder: crate::operation::create_annotation_store::builders::CreateAnnotationStoreOutputBuilder,
) -> crate::operation::create_annotation_store::builders::CreateAnnotationStoreOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::StoreStatus>().ok()
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.version_name.is_none() {
        builder.version_name = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn create_annotation_store_version_output_correct_errors(
    mut builder: crate::operation::create_annotation_store_version::builders::CreateAnnotationStoreVersionOutputBuilder,
) -> crate::operation::create_annotation_store_version::builders::CreateAnnotationStoreVersionOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.version_name.is_none() {
        builder.version_name = Some(Default::default())
    }
    if builder.store_id.is_none() {
        builder.store_id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::VersionStatus>().ok()
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn create_multipart_read_set_upload_output_correct_errors(
    mut builder: crate::operation::create_multipart_read_set_upload::builders::CreateMultipartReadSetUploadOutputBuilder,
) -> crate::operation::create_multipart_read_set_upload::builders::CreateMultipartReadSetUploadOutputBuilder {
    if builder.sequence_store_id.is_none() {
        builder.sequence_store_id = Some(Default::default())
    }
    if builder.upload_id.is_none() {
        builder.upload_id = Some(Default::default())
    }
    if builder.source_file_type.is_none() {
        builder.source_file_type = "no value was set".parse::<crate::types::FileType>().ok()
    }
    if builder.subject_id.is_none() {
        builder.subject_id = Some(Default::default())
    }
    if builder.sample_id.is_none() {
        builder.sample_id = Some(Default::default())
    }
    if builder.reference_arn.is_none() {
        builder.reference_arn = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn create_reference_store_output_correct_errors(
    mut builder: crate::operation::create_reference_store::builders::CreateReferenceStoreOutputBuilder,
) -> crate::operation::create_reference_store::builders::CreateReferenceStoreOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn create_sequence_store_output_correct_errors(
    mut builder: crate::operation::create_sequence_store::builders::CreateSequenceStoreOutputBuilder,
) -> crate::operation::create_sequence_store::builders::CreateSequenceStoreOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn create_variant_store_output_correct_errors(
    mut builder: crate::operation::create_variant_store::builders::CreateVariantStoreOutputBuilder,
) -> crate::operation::create_variant_store::builders::CreateVariantStoreOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::StoreStatus>().ok()
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn delete_annotation_store_output_correct_errors(
    mut builder: crate::operation::delete_annotation_store::builders::DeleteAnnotationStoreOutputBuilder,
) -> crate::operation::delete_annotation_store::builders::DeleteAnnotationStoreOutputBuilder {
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::StoreStatus>().ok()
    }
    builder
}

pub(crate) fn delete_variant_store_output_correct_errors(
    mut builder: crate::operation::delete_variant_store::builders::DeleteVariantStoreOutputBuilder,
) -> crate::operation::delete_variant_store::builders::DeleteVariantStoreOutputBuilder {
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::StoreStatus>().ok()
    }
    builder
}

pub(crate) fn get_annotation_import_job_output_correct_errors(
    mut builder: crate::operation::get_annotation_import_job::builders::GetAnnotationImportJobOutputBuilder,
) -> crate::operation::get_annotation_import_job::builders::GetAnnotationImportJobOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.destination_name.is_none() {
        builder.destination_name = Some(Default::default())
    }
    if builder.version_name.is_none() {
        builder.version_name = Some(Default::default())
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::JobStatus>().ok()
    }
    if builder.status_message.is_none() {
        builder.status_message = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.update_time.is_none() {
        builder.update_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.completion_time.is_none() {
        builder.completion_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.items.is_none() {
        builder.items = Some(Default::default())
    }
    if builder.run_left_normalization.is_none() {
        builder.run_left_normalization = Some(Default::default())
    }
    if builder.format_options.is_none() {
        builder.format_options = Some(crate::types::FormatOptions::Unknown)
    }
    builder
}

pub(crate) fn get_annotation_store_output_correct_errors(
    mut builder: crate::operation::get_annotation_store::builders::GetAnnotationStoreOutputBuilder,
) -> crate::operation::get_annotation_store::builders::GetAnnotationStoreOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.reference.is_none() {
        builder.reference = Some(crate::types::ReferenceItem::Unknown)
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::StoreStatus>().ok()
    }
    if builder.store_arn.is_none() {
        builder.store_arn = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.description.is_none() {
        builder.description = Some(Default::default())
    }
    if builder.sse_config.is_none() {
        builder.sse_config = {
            let builder = crate::types::builders::SseConfigBuilder::default();
            crate::serde_util::sse_config_correct_errors(builder).build().ok()
        }
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.update_time.is_none() {
        builder.update_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.tags.is_none() {
        builder.tags = Some(Default::default())
    }
    if builder.status_message.is_none() {
        builder.status_message = Some(Default::default())
    }
    if builder.store_size_bytes.is_none() {
        builder.store_size_bytes = Some(Default::default())
    }
    if builder.num_versions.is_none() {
        builder.num_versions = Some(Default::default())
    }
    builder
}

pub(crate) fn get_annotation_store_version_output_correct_errors(
    mut builder: crate::operation::get_annotation_store_version::builders::GetAnnotationStoreVersionOutputBuilder,
) -> crate::operation::get_annotation_store_version::builders::GetAnnotationStoreVersionOutputBuilder {
    if builder.store_id.is_none() {
        builder.store_id = Some(Default::default())
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::VersionStatus>().ok()
    }
    if builder.version_arn.is_none() {
        builder.version_arn = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.version_name.is_none() {
        builder.version_name = Some(Default::default())
    }
    if builder.description.is_none() {
        builder.description = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.update_time.is_none() {
        builder.update_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.tags.is_none() {
        builder.tags = Some(Default::default())
    }
    if builder.status_message.is_none() {
        builder.status_message = Some(Default::default())
    }
    if builder.version_size_bytes.is_none() {
        builder.version_size_bytes = Some(Default::default())
    }
    builder
}

pub(crate) fn range_not_satisfiable_exception_correct_errors(
    mut builder: crate::types::error::builders::RangeNotSatisfiableExceptionBuilder,
) -> crate::types::error::builders::RangeNotSatisfiableExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn get_read_set_activation_job_output_correct_errors(
    mut builder: crate::operation::get_read_set_activation_job::builders::GetReadSetActivationJobOutputBuilder,
) -> crate::operation::get_read_set_activation_job::builders::GetReadSetActivationJobOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.sequence_store_id.is_none() {
        builder.sequence_store_id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::ReadSetActivationJobStatus>().ok()
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn get_read_set_export_job_output_correct_errors(
    mut builder: crate::operation::get_read_set_export_job::builders::GetReadSetExportJobOutputBuilder,
) -> crate::operation::get_read_set_export_job::builders::GetReadSetExportJobOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.sequence_store_id.is_none() {
        builder.sequence_store_id = Some(Default::default())
    }
    if builder.destination.is_none() {
        builder.destination = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::ReadSetExportJobStatus>().ok()
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn get_read_set_import_job_output_correct_errors(
    mut builder: crate::operation::get_read_set_import_job::builders::GetReadSetImportJobOutputBuilder,
) -> crate::operation::get_read_set_import_job::builders::GetReadSetImportJobOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.sequence_store_id.is_none() {
        builder.sequence_store_id = Some(Default::default())
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::ReadSetImportJobStatus>().ok()
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.sources.is_none() {
        builder.sources = Some(Default::default())
    }
    builder
}

pub(crate) fn get_read_set_metadata_output_correct_errors(
    mut builder: crate::operation::get_read_set_metadata::builders::GetReadSetMetadataOutputBuilder,
) -> crate::operation::get_read_set_metadata::builders::GetReadSetMetadataOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.sequence_store_id.is_none() {
        builder.sequence_store_id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::ReadSetStatus>().ok()
    }
    if builder.file_type.is_none() {
        builder.file_type = "no value was set".parse::<crate::types::FileType>().ok()
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn get_reference_import_job_output_correct_errors(
    mut builder: crate::operation::get_reference_import_job::builders::GetReferenceImportJobOutputBuilder,
) -> crate::operation::get_reference_import_job::builders::GetReferenceImportJobOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.reference_store_id.is_none() {
        builder.reference_store_id = Some(Default::default())
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::ReferenceImportJobStatus>().ok()
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.sources.is_none() {
        builder.sources = Some(Default::default())
    }
    builder
}

pub(crate) fn get_reference_metadata_output_correct_errors(
    mut builder: crate::operation::get_reference_metadata::builders::GetReferenceMetadataOutputBuilder,
) -> crate::operation::get_reference_metadata::builders::GetReferenceMetadataOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.reference_store_id.is_none() {
        builder.reference_store_id = Some(Default::default())
    }
    if builder.md5.is_none() {
        builder.md5 = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.update_time.is_none() {
        builder.update_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn get_reference_store_output_correct_errors(
    mut builder: crate::operation::get_reference_store::builders::GetReferenceStoreOutputBuilder,
) -> crate::operation::get_reference_store::builders::GetReferenceStoreOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn get_sequence_store_output_correct_errors(
    mut builder: crate::operation::get_sequence_store::builders::GetSequenceStoreOutputBuilder,
) -> crate::operation::get_sequence_store::builders::GetSequenceStoreOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn get_variant_import_job_output_correct_errors(
    mut builder: crate::operation::get_variant_import_job::builders::GetVariantImportJobOutputBuilder,
) -> crate::operation::get_variant_import_job::builders::GetVariantImportJobOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.destination_name.is_none() {
        builder.destination_name = Some(Default::default())
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::JobStatus>().ok()
    }
    if builder.status_message.is_none() {
        builder.status_message = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.update_time.is_none() {
        builder.update_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.items.is_none() {
        builder.items = Some(Default::default())
    }
    if builder.run_left_normalization.is_none() {
        builder.run_left_normalization = Some(Default::default())
    }
    builder
}

pub(crate) fn get_variant_store_output_correct_errors(
    mut builder: crate::operation::get_variant_store::builders::GetVariantStoreOutputBuilder,
) -> crate::operation::get_variant_store::builders::GetVariantStoreOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.reference.is_none() {
        builder.reference = Some(crate::types::ReferenceItem::Unknown)
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::StoreStatus>().ok()
    }
    if builder.store_arn.is_none() {
        builder.store_arn = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.description.is_none() {
        builder.description = Some(Default::default())
    }
    if builder.sse_config.is_none() {
        builder.sse_config = {
            let builder = crate::types::builders::SseConfigBuilder::default();
            crate::serde_util::sse_config_correct_errors(builder).build().ok()
        }
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.update_time.is_none() {
        builder.update_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.tags.is_none() {
        builder.tags = Some(Default::default())
    }
    if builder.status_message.is_none() {
        builder.status_message = Some(Default::default())
    }
    if builder.store_size_bytes.is_none() {
        builder.store_size_bytes = Some(Default::default())
    }
    builder
}

pub(crate) fn list_read_sets_output_correct_errors(
    mut builder: crate::operation::list_read_sets::builders::ListReadSetsOutputBuilder,
) -> crate::operation::list_read_sets::builders::ListReadSetsOutputBuilder {
    if builder.read_sets.is_none() {
        builder.read_sets = Some(Default::default())
    }
    builder
}

pub(crate) fn list_reference_stores_output_correct_errors(
    mut builder: crate::operation::list_reference_stores::builders::ListReferenceStoresOutputBuilder,
) -> crate::operation::list_reference_stores::builders::ListReferenceStoresOutputBuilder {
    if builder.reference_stores.is_none() {
        builder.reference_stores = Some(Default::default())
    }
    builder
}

pub(crate) fn list_references_output_correct_errors(
    mut builder: crate::operation::list_references::builders::ListReferencesOutputBuilder,
) -> crate::operation::list_references::builders::ListReferencesOutputBuilder {
    if builder.references.is_none() {
        builder.references = Some(Default::default())
    }
    builder
}

pub(crate) fn list_sequence_stores_output_correct_errors(
    mut builder: crate::operation::list_sequence_stores::builders::ListSequenceStoresOutputBuilder,
) -> crate::operation::list_sequence_stores::builders::ListSequenceStoresOutputBuilder {
    if builder.sequence_stores.is_none() {
        builder.sequence_stores = Some(Default::default())
    }
    builder
}

pub(crate) fn list_shares_output_correct_errors(
    mut builder: crate::operation::list_shares::builders::ListSharesOutputBuilder,
) -> crate::operation::list_shares::builders::ListSharesOutputBuilder {
    if builder.shares.is_none() {
        builder.shares = Some(Default::default())
    }
    builder
}

pub(crate) fn list_tags_for_resource_output_correct_errors(
    mut builder: crate::operation::list_tags_for_resource::builders::ListTagsForResourceOutputBuilder,
) -> crate::operation::list_tags_for_resource::builders::ListTagsForResourceOutputBuilder {
    if builder.tags.is_none() {
        builder.tags = Some(Default::default())
    }
    builder
}

pub(crate) fn start_annotation_import_job_output_correct_errors(
    mut builder: crate::operation::start_annotation_import_job::builders::StartAnnotationImportJobOutputBuilder,
) -> crate::operation::start_annotation_import_job::builders::StartAnnotationImportJobOutputBuilder {
    if builder.job_id.is_none() {
        builder.job_id = Some(Default::default())
    }
    builder
}

pub(crate) fn start_read_set_activation_job_output_correct_errors(
    mut builder: crate::operation::start_read_set_activation_job::builders::StartReadSetActivationJobOutputBuilder,
) -> crate::operation::start_read_set_activation_job::builders::StartReadSetActivationJobOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.sequence_store_id.is_none() {
        builder.sequence_store_id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::ReadSetActivationJobStatus>().ok()
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn start_read_set_export_job_output_correct_errors(
    mut builder: crate::operation::start_read_set_export_job::builders::StartReadSetExportJobOutputBuilder,
) -> crate::operation::start_read_set_export_job::builders::StartReadSetExportJobOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.sequence_store_id.is_none() {
        builder.sequence_store_id = Some(Default::default())
    }
    if builder.destination.is_none() {
        builder.destination = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::ReadSetExportJobStatus>().ok()
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn start_read_set_import_job_output_correct_errors(
    mut builder: crate::operation::start_read_set_import_job::builders::StartReadSetImportJobOutputBuilder,
) -> crate::operation::start_read_set_import_job::builders::StartReadSetImportJobOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.sequence_store_id.is_none() {
        builder.sequence_store_id = Some(Default::default())
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::ReadSetImportJobStatus>().ok()
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn start_reference_import_job_output_correct_errors(
    mut builder: crate::operation::start_reference_import_job::builders::StartReferenceImportJobOutputBuilder,
) -> crate::operation::start_reference_import_job::builders::StartReferenceImportJobOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.reference_store_id.is_none() {
        builder.reference_store_id = Some(Default::default())
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::ReferenceImportJobStatus>().ok()
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn start_variant_import_job_output_correct_errors(
    mut builder: crate::operation::start_variant_import_job::builders::StartVariantImportJobOutputBuilder,
) -> crate::operation::start_variant_import_job::builders::StartVariantImportJobOutputBuilder {
    if builder.job_id.is_none() {
        builder.job_id = Some(Default::default())
    }
    builder
}

pub(crate) fn update_annotation_store_output_correct_errors(
    mut builder: crate::operation::update_annotation_store::builders::UpdateAnnotationStoreOutputBuilder,
) -> crate::operation::update_annotation_store::builders::UpdateAnnotationStoreOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.reference.is_none() {
        builder.reference = Some(crate::types::ReferenceItem::Unknown)
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::StoreStatus>().ok()
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.description.is_none() {
        builder.description = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.update_time.is_none() {
        builder.update_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn update_annotation_store_version_output_correct_errors(
    mut builder: crate::operation::update_annotation_store_version::builders::UpdateAnnotationStoreVersionOutputBuilder,
) -> crate::operation::update_annotation_store_version::builders::UpdateAnnotationStoreVersionOutputBuilder {
    if builder.store_id.is_none() {
        builder.store_id = Some(Default::default())
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::VersionStatus>().ok()
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.version_name.is_none() {
        builder.version_name = Some(Default::default())
    }
    if builder.description.is_none() {
        builder.description = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.update_time.is_none() {
        builder.update_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn update_variant_store_output_correct_errors(
    mut builder: crate::operation::update_variant_store::builders::UpdateVariantStoreOutputBuilder,
) -> crate::operation::update_variant_store::builders::UpdateVariantStoreOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.reference.is_none() {
        builder.reference = Some(crate::types::ReferenceItem::Unknown)
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::StoreStatus>().ok()
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.description.is_none() {
        builder.description = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.update_time.is_none() {
        builder.update_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn upload_read_set_part_output_correct_errors(
    mut builder: crate::operation::upload_read_set_part::builders::UploadReadSetPartOutputBuilder,
) -> crate::operation::upload_read_set_part::builders::UploadReadSetPartOutputBuilder {
    if builder.checksum.is_none() {
        builder.checksum = Some(Default::default())
    }
    builder
}

pub(crate) fn sse_config_correct_errors(mut builder: crate::types::builders::SseConfigBuilder) -> crate::types::builders::SseConfigBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::EncryptionType>().ok()
    }
    builder
}

pub(crate) fn activate_read_set_job_item_correct_errors(
    mut builder: crate::types::builders::ActivateReadSetJobItemBuilder,
) -> crate::types::builders::ActivateReadSetJobItemBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.sequence_store_id.is_none() {
        builder.sequence_store_id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::ReadSetActivationJobStatus>().ok()
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn activate_read_set_source_item_correct_errors(
    mut builder: crate::types::builders::ActivateReadSetSourceItemBuilder,
) -> crate::types::builders::ActivateReadSetSourceItemBuilder {
    if builder.read_set_id.is_none() {
        builder.read_set_id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::ReadSetActivationJobItemStatus>().ok()
    }
    builder
}

pub(crate) fn annotation_import_item_detail_correct_errors(
    mut builder: crate::types::builders::AnnotationImportItemDetailBuilder,
) -> crate::types::builders::AnnotationImportItemDetailBuilder {
    if builder.source.is_none() {
        builder.source = Some(Default::default())
    }
    if builder.job_status.is_none() {
        builder.job_status = "no value was set".parse::<crate::types::JobStatus>().ok()
    }
    builder
}

pub(crate) fn annotation_import_job_item_correct_errors(
    mut builder: crate::types::builders::AnnotationImportJobItemBuilder,
) -> crate::types::builders::AnnotationImportJobItemBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.destination_name.is_none() {
        builder.destination_name = Some(Default::default())
    }
    if builder.version_name.is_none() {
        builder.version_name = Some(Default::default())
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::JobStatus>().ok()
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.update_time.is_none() {
        builder.update_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn annotation_store_item_correct_errors(
    mut builder: crate::types::builders::AnnotationStoreItemBuilder,
) -> crate::types::builders::AnnotationStoreItemBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.reference.is_none() {
        builder.reference = Some(crate::types::ReferenceItem::Unknown)
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::StoreStatus>().ok()
    }
    if builder.store_arn.is_none() {
        builder.store_arn = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.store_format.is_none() {
        builder.store_format = "no value was set".parse::<crate::types::StoreFormat>().ok()
    }
    if builder.description.is_none() {
        builder.description = Some(Default::default())
    }
    if builder.sse_config.is_none() {
        builder.sse_config = {
            let builder = crate::types::builders::SseConfigBuilder::default();
            crate::serde_util::sse_config_correct_errors(builder).build().ok()
        }
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.update_time.is_none() {
        builder.update_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.status_message.is_none() {
        builder.status_message = Some(Default::default())
    }
    if builder.store_size_bytes.is_none() {
        builder.store_size_bytes = Some(Default::default())
    }
    builder
}

pub(crate) fn annotation_store_version_item_correct_errors(
    mut builder: crate::types::builders::AnnotationStoreVersionItemBuilder,
) -> crate::types::builders::AnnotationStoreVersionItemBuilder {
    if builder.store_id.is_none() {
        builder.store_id = Some(Default::default())
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::VersionStatus>().ok()
    }
    if builder.version_arn.is_none() {
        builder.version_arn = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.version_name.is_none() {
        builder.version_name = Some(Default::default())
    }
    if builder.description.is_none() {
        builder.description = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.update_time.is_none() {
        builder.update_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.status_message.is_none() {
        builder.status_message = Some(Default::default())
    }
    if builder.version_size_bytes.is_none() {
        builder.version_size_bytes = Some(Default::default())
    }
    builder
}

pub(crate) fn export_read_set_detail_correct_errors(
    mut builder: crate::types::builders::ExportReadSetDetailBuilder,
) -> crate::types::builders::ExportReadSetDetailBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::ReadSetExportJobItemStatus>().ok()
    }
    builder
}

pub(crate) fn export_read_set_job_detail_correct_errors(
    mut builder: crate::types::builders::ExportReadSetJobDetailBuilder,
) -> crate::types::builders::ExportReadSetJobDetailBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.sequence_store_id.is_none() {
        builder.sequence_store_id = Some(Default::default())
    }
    if builder.destination.is_none() {
        builder.destination = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::ReadSetExportJobStatus>().ok()
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn import_read_set_job_item_correct_errors(
    mut builder: crate::types::builders::ImportReadSetJobItemBuilder,
) -> crate::types::builders::ImportReadSetJobItemBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.sequence_store_id.is_none() {
        builder.sequence_store_id = Some(Default::default())
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::ReadSetImportJobStatus>().ok()
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn import_read_set_source_item_correct_errors(
    mut builder: crate::types::builders::ImportReadSetSourceItemBuilder,
) -> crate::types::builders::ImportReadSetSourceItemBuilder {
    if builder.source_files.is_none() {
        builder.source_files = {
            let builder = crate::types::builders::SourceFilesBuilder::default();
            crate::serde_util::source_files_correct_errors(builder).build().ok()
        }
    }
    if builder.source_file_type.is_none() {
        builder.source_file_type = "no value was set".parse::<crate::types::FileType>().ok()
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::ReadSetImportJobItemStatus>().ok()
    }
    if builder.subject_id.is_none() {
        builder.subject_id = Some(Default::default())
    }
    if builder.sample_id.is_none() {
        builder.sample_id = Some(Default::default())
    }
    builder
}

pub(crate) fn import_reference_job_item_correct_errors(
    mut builder: crate::types::builders::ImportReferenceJobItemBuilder,
) -> crate::types::builders::ImportReferenceJobItemBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.reference_store_id.is_none() {
        builder.reference_store_id = Some(Default::default())
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::ReferenceImportJobStatus>().ok()
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn import_reference_source_item_correct_errors(
    mut builder: crate::types::builders::ImportReferenceSourceItemBuilder,
) -> crate::types::builders::ImportReferenceSourceItemBuilder {
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::ReferenceImportJobItemStatus>().ok()
    }
    builder
}

pub(crate) fn multipart_read_set_upload_list_item_correct_errors(
    mut builder: crate::types::builders::MultipartReadSetUploadListItemBuilder,
) -> crate::types::builders::MultipartReadSetUploadListItemBuilder {
    if builder.sequence_store_id.is_none() {
        builder.sequence_store_id = Some(Default::default())
    }
    if builder.upload_id.is_none() {
        builder.upload_id = Some(Default::default())
    }
    if builder.source_file_type.is_none() {
        builder.source_file_type = "no value was set".parse::<crate::types::FileType>().ok()
    }
    if builder.subject_id.is_none() {
        builder.subject_id = Some(Default::default())
    }
    if builder.sample_id.is_none() {
        builder.sample_id = Some(Default::default())
    }
    if builder.generated_from.is_none() {
        builder.generated_from = Some(Default::default())
    }
    if builder.reference_arn.is_none() {
        builder.reference_arn = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn read_set_batch_error_correct_errors(
    mut builder: crate::types::builders::ReadSetBatchErrorBuilder,
) -> crate::types::builders::ReadSetBatchErrorBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.code.is_none() {
        builder.code = Some(Default::default())
    }
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn read_set_list_item_correct_errors(
    mut builder: crate::types::builders::ReadSetListItemBuilder,
) -> crate::types::builders::ReadSetListItemBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.sequence_store_id.is_none() {
        builder.sequence_store_id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::ReadSetStatus>().ok()
    }
    if builder.file_type.is_none() {
        builder.file_type = "no value was set".parse::<crate::types::FileType>().ok()
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn read_set_upload_part_list_item_correct_errors(
    mut builder: crate::types::builders::ReadSetUploadPartListItemBuilder,
) -> crate::types::builders::ReadSetUploadPartListItemBuilder {
    if builder.part_number.is_none() {
        builder.part_number = Some(Default::default())
    }
    if builder.part_size.is_none() {
        builder.part_size = Some(Default::default())
    }
    if builder.part_source.is_none() {
        builder.part_source = "no value was set".parse::<crate::types::ReadSetPartSource>().ok()
    }
    if builder.checksum.is_none() {
        builder.checksum = Some(Default::default())
    }
    builder
}

pub(crate) fn reference_list_item_correct_errors(
    mut builder: crate::types::builders::ReferenceListItemBuilder,
) -> crate::types::builders::ReferenceListItemBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.reference_store_id.is_none() {
        builder.reference_store_id = Some(Default::default())
    }
    if builder.md5.is_none() {
        builder.md5 = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.update_time.is_none() {
        builder.update_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn reference_store_detail_correct_errors(
    mut builder: crate::types::builders::ReferenceStoreDetailBuilder,
) -> crate::types::builders::ReferenceStoreDetailBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn sequence_store_detail_correct_errors(
    mut builder: crate::types::builders::SequenceStoreDetailBuilder,
) -> crate::types::builders::SequenceStoreDetailBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn variant_import_item_detail_correct_errors(
    mut builder: crate::types::builders::VariantImportItemDetailBuilder,
) -> crate::types::builders::VariantImportItemDetailBuilder {
    if builder.source.is_none() {
        builder.source = Some(Default::default())
    }
    if builder.job_status.is_none() {
        builder.job_status = "no value was set".parse::<crate::types::JobStatus>().ok()
    }
    builder
}

pub(crate) fn variant_import_job_item_correct_errors(
    mut builder: crate::types::builders::VariantImportJobItemBuilder,
) -> crate::types::builders::VariantImportJobItemBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.destination_name.is_none() {
        builder.destination_name = Some(Default::default())
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::JobStatus>().ok()
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.update_time.is_none() {
        builder.update_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn variant_store_item_correct_errors(
    mut builder: crate::types::builders::VariantStoreItemBuilder,
) -> crate::types::builders::VariantStoreItemBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.reference.is_none() {
        builder.reference = Some(crate::types::ReferenceItem::Unknown)
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::StoreStatus>().ok()
    }
    if builder.store_arn.is_none() {
        builder.store_arn = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.description.is_none() {
        builder.description = Some(Default::default())
    }
    if builder.sse_config.is_none() {
        builder.sse_config = {
            let builder = crate::types::builders::SseConfigBuilder::default();
            crate::serde_util::sse_config_correct_errors(builder).build().ok()
        }
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.update_time.is_none() {
        builder.update_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.status_message.is_none() {
        builder.status_message = Some(Default::default())
    }
    if builder.store_size_bytes.is_none() {
        builder.store_size_bytes = Some(Default::default())
    }
    builder
}

pub(crate) fn version_delete_error_correct_errors(
    mut builder: crate::types::builders::VersionDeleteErrorBuilder,
) -> crate::types::builders::VersionDeleteErrorBuilder {
    if builder.version_name.is_none() {
        builder.version_name = Some(Default::default())
    }
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn source_files_correct_errors(mut builder: crate::types::builders::SourceFilesBuilder) -> crate::types::builders::SourceFilesBuilder {
    if builder.source1.is_none() {
        builder.source1 = Some(Default::default())
    }
    builder
}
