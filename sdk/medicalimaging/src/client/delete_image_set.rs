// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DeleteImageSet`](crate::operation::delete_image_set::builders::DeleteImageSetFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`datastore_id(impl Into<String>)`](crate::operation::delete_image_set::builders::DeleteImageSetFluentBuilder::datastore_id) / [`set_datastore_id(Option<String>)`](crate::operation::delete_image_set::builders::DeleteImageSetFluentBuilder::set_datastore_id):<br>required: **true**<br><p>The data store identifier.</p><br>
    ///   - [`image_set_id(impl Into<String>)`](crate::operation::delete_image_set::builders::DeleteImageSetFluentBuilder::image_set_id) / [`set_image_set_id(Option<String>)`](crate::operation::delete_image_set::builders::DeleteImageSetFluentBuilder::set_image_set_id):<br>required: **true**<br><p>The image set identifier.</p><br>
    /// - On success, responds with [`DeleteImageSetOutput`](crate::operation::delete_image_set::DeleteImageSetOutput) with field(s):
    ///   - [`datastore_id(String)`](crate::operation::delete_image_set::DeleteImageSetOutput::datastore_id): <p>The data store identifier.</p>
    ///   - [`image_set_id(String)`](crate::operation::delete_image_set::DeleteImageSetOutput::image_set_id): <p>The image set identifier.</p>
    ///   - [`image_set_state(ImageSetState)`](crate::operation::delete_image_set::DeleteImageSetOutput::image_set_state): <p>The image set state.</p>
    ///   - [`image_set_workflow_status(ImageSetWorkflowStatus)`](crate::operation::delete_image_set::DeleteImageSetOutput::image_set_workflow_status): <p>The image set workflow status.</p>
    /// - On failure, responds with [`SdkError<DeleteImageSetError>`](crate::operation::delete_image_set::DeleteImageSetError)
    pub fn delete_image_set(&self) -> crate::operation::delete_image_set::builders::DeleteImageSetFluentBuilder {
        crate::operation::delete_image_set::builders::DeleteImageSetFluentBuilder::new(self.handle.clone())
    }
}
