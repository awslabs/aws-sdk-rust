// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateDatastore`](crate::operation::create_datastore::builders::CreateDatastoreFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`datastore_name(impl Into<String>)`](crate::operation::create_datastore::builders::CreateDatastoreFluentBuilder::datastore_name) / [`set_datastore_name(Option<String>)`](crate::operation::create_datastore::builders::CreateDatastoreFluentBuilder::set_datastore_name):<br>required: **false**<br><p>The data store name.</p><br>
    ///   - [`client_token(impl Into<String>)`](crate::operation::create_datastore::builders::CreateDatastoreFluentBuilder::client_token) / [`set_client_token(Option<String>)`](crate::operation::create_datastore::builders::CreateDatastoreFluentBuilder::set_client_token):<br>required: **true**<br><p>A unique identifier for API idempotency.</p><br>
    ///   - [`tags(impl Into<String>, impl Into<String>)`](crate::operation::create_datastore::builders::CreateDatastoreFluentBuilder::tags) / [`set_tags(Option<HashMap::<String, String>>)`](crate::operation::create_datastore::builders::CreateDatastoreFluentBuilder::set_tags):<br>required: **false**<br><p>The tags provided when creating a data store.</p><br>
    ///   - [`kms_key_arn(impl Into<String>)`](crate::operation::create_datastore::builders::CreateDatastoreFluentBuilder::kms_key_arn) / [`set_kms_key_arn(Option<String>)`](crate::operation::create_datastore::builders::CreateDatastoreFluentBuilder::set_kms_key_arn):<br>required: **false**<br><p>The Amazon Resource Name (ARN) assigned to the Key Management Service (KMS) key for accessing encrypted data.</p><br>
    /// - On success, responds with [`CreateDatastoreOutput`](crate::operation::create_datastore::CreateDatastoreOutput) with field(s):
    ///   - [`datastore_id(String)`](crate::operation::create_datastore::CreateDatastoreOutput::datastore_id): <p>The data store identifier.</p>
    ///   - [`datastore_status(DatastoreStatus)`](crate::operation::create_datastore::CreateDatastoreOutput::datastore_status): <p>The data store status.</p>
    /// - On failure, responds with [`SdkError<CreateDatastoreError>`](crate::operation::create_datastore::CreateDatastoreError)
    pub fn create_datastore(&self) -> crate::operation::create_datastore::builders::CreateDatastoreFluentBuilder {
        crate::operation::create_datastore::builders::CreateDatastoreFluentBuilder::new(self.handle.clone())
    }
}
