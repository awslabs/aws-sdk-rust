// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`StartDICOMImportJob`](crate::operation::start_dicom_import_job::builders::StartDICOMImportJobFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`job_name(impl Into<String>)`](crate::operation::start_dicom_import_job::builders::StartDICOMImportJobFluentBuilder::job_name) / [`set_job_name(Option<String>)`](crate::operation::start_dicom_import_job::builders::StartDICOMImportJobFluentBuilder::set_job_name):<br>required: **false**<br><p>The import job name.</p><br>
    ///   - [`data_access_role_arn(impl Into<String>)`](crate::operation::start_dicom_import_job::builders::StartDICOMImportJobFluentBuilder::data_access_role_arn) / [`set_data_access_role_arn(Option<String>)`](crate::operation::start_dicom_import_job::builders::StartDICOMImportJobFluentBuilder::set_data_access_role_arn):<br>required: **true**<br><p>The Amazon Resource Name (ARN) of the IAM role that grants permission to access medical imaging resources.</p><br>
    ///   - [`client_token(impl Into<String>)`](crate::operation::start_dicom_import_job::builders::StartDICOMImportJobFluentBuilder::client_token) / [`set_client_token(Option<String>)`](crate::operation::start_dicom_import_job::builders::StartDICOMImportJobFluentBuilder::set_client_token):<br>required: **true**<br><p>A unique identifier for API idempotency.</p><br>
    ///   - [`datastore_id(impl Into<String>)`](crate::operation::start_dicom_import_job::builders::StartDICOMImportJobFluentBuilder::datastore_id) / [`set_datastore_id(Option<String>)`](crate::operation::start_dicom_import_job::builders::StartDICOMImportJobFluentBuilder::set_datastore_id):<br>required: **true**<br><p>The data store identifier.</p><br>
    ///   - [`input_s3_uri(impl Into<String>)`](crate::operation::start_dicom_import_job::builders::StartDICOMImportJobFluentBuilder::input_s3_uri) / [`set_input_s3_uri(Option<String>)`](crate::operation::start_dicom_import_job::builders::StartDICOMImportJobFluentBuilder::set_input_s3_uri):<br>required: **true**<br><p>The input prefix path for the S3 bucket that contains the DICOM files to be imported.</p><br>
    ///   - [`output_s3_uri(impl Into<String>)`](crate::operation::start_dicom_import_job::builders::StartDICOMImportJobFluentBuilder::output_s3_uri) / [`set_output_s3_uri(Option<String>)`](crate::operation::start_dicom_import_job::builders::StartDICOMImportJobFluentBuilder::set_output_s3_uri):<br>required: **true**<br><p>The output prefix of the S3 bucket to upload the results of the DICOM import job.</p><br>
    /// - On success, responds with [`StartDicomImportJobOutput`](crate::operation::start_dicom_import_job::StartDicomImportJobOutput) with field(s):
    ///   - [`datastore_id(String)`](crate::operation::start_dicom_import_job::StartDicomImportJobOutput::datastore_id): <p>The data store identifier.</p>
    ///   - [`job_id(String)`](crate::operation::start_dicom_import_job::StartDicomImportJobOutput::job_id): <p>The import job identifier.</p>
    ///   - [`job_status(JobStatus)`](crate::operation::start_dicom_import_job::StartDicomImportJobOutput::job_status): <p>The import job status.</p>
    ///   - [`submitted_at(DateTime)`](crate::operation::start_dicom_import_job::StartDicomImportJobOutput::submitted_at): <p>The timestamp when the import job was submitted.</p>
    /// - On failure, responds with [`SdkError<StartDICOMImportJobError>`](crate::operation::start_dicom_import_job::StartDICOMImportJobError)
    pub fn start_dicom_import_job(&self) -> crate::operation::start_dicom_import_job::builders::StartDICOMImportJobFluentBuilder {
        crate::operation::start_dicom_import_job::builders::StartDICOMImportJobFluentBuilder::new(self.handle.clone())
    }
}
