// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The aggregated structure to store DICOM study date and study time for search capabilities.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct DicomStudyDateAndTime {
    /// <p>The DICOM study date provided in <code>yyMMdd</code> format.</p>
    pub dicom_study_date: ::std::string::String,
    /// <p>The DICOM study time provided in <code>HHmmss.FFFFFF</code> format.</p>
    pub dicom_study_time: ::std::option::Option<::std::string::String>,
}
impl DicomStudyDateAndTime {
    /// <p>The DICOM study date provided in <code>yyMMdd</code> format.</p>
    pub fn dicom_study_date(&self) -> &str {
        use std::ops::Deref;
        self.dicom_study_date.deref()
    }
    /// <p>The DICOM study time provided in <code>HHmmss.FFFFFF</code> format.</p>
    pub fn dicom_study_time(&self) -> ::std::option::Option<&str> {
        self.dicom_study_time.as_deref()
    }
}
impl ::std::fmt::Debug for DicomStudyDateAndTime {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("DicomStudyDateAndTime");
        formatter.field("dicom_study_date", &"*** Sensitive Data Redacted ***");
        formatter.field("dicom_study_time", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl DicomStudyDateAndTime {
    /// Creates a new builder-style object to manufacture [`DicomStudyDateAndTime`](crate::types::DicomStudyDateAndTime).
    pub fn builder() -> crate::types::builders::DicomStudyDateAndTimeBuilder {
        crate::types::builders::DicomStudyDateAndTimeBuilder::default()
    }
}

/// A builder for [`DicomStudyDateAndTime`](crate::types::DicomStudyDateAndTime).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct DicomStudyDateAndTimeBuilder {
    pub(crate) dicom_study_date: ::std::option::Option<::std::string::String>,
    pub(crate) dicom_study_time: ::std::option::Option<::std::string::String>,
}
impl DicomStudyDateAndTimeBuilder {
    /// <p>The DICOM study date provided in <code>yyMMdd</code> format.</p>
    /// This field is required.
    pub fn dicom_study_date(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.dicom_study_date = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The DICOM study date provided in <code>yyMMdd</code> format.</p>
    pub fn set_dicom_study_date(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.dicom_study_date = input;
        self
    }
    /// <p>The DICOM study date provided in <code>yyMMdd</code> format.</p>
    pub fn get_dicom_study_date(&self) -> &::std::option::Option<::std::string::String> {
        &self.dicom_study_date
    }
    /// <p>The DICOM study time provided in <code>HHmmss.FFFFFF</code> format.</p>
    pub fn dicom_study_time(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.dicom_study_time = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The DICOM study time provided in <code>HHmmss.FFFFFF</code> format.</p>
    pub fn set_dicom_study_time(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.dicom_study_time = input;
        self
    }
    /// <p>The DICOM study time provided in <code>HHmmss.FFFFFF</code> format.</p>
    pub fn get_dicom_study_time(&self) -> &::std::option::Option<::std::string::String> {
        &self.dicom_study_time
    }
    /// Consumes the builder and constructs a [`DicomStudyDateAndTime`](crate::types::DicomStudyDateAndTime).
    /// This method will fail if any of the following fields are not set:
    /// - [`dicom_study_date`](crate::types::builders::DicomStudyDateAndTimeBuilder::dicom_study_date)
    pub fn build(self) -> ::std::result::Result<crate::types::DicomStudyDateAndTime, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::DicomStudyDateAndTime {
            dicom_study_date: self.dicom_study_date.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "dicom_study_date",
                    "dicom_study_date was not specified but it is required when building DicomStudyDateAndTime",
                )
            })?,
            dicom_study_time: self.dicom_study_time,
        })
    }
}
impl ::std::fmt::Debug for DicomStudyDateAndTimeBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("DicomStudyDateAndTimeBuilder");
        formatter.field("dicom_study_date", &"*** Sensitive Data Redacted ***");
        formatter.field("dicom_study_time", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
