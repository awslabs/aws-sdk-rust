// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>List of summaries of data stores.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DatastoreSummary {
    /// <p>The data store identifier.</p>
    pub datastore_id: ::std::string::String,
    /// <p>The data store name.</p>
    pub datastore_name: ::std::string::String,
    /// <p>The data store status.</p>
    pub datastore_status: crate::types::DatastoreStatus,
    /// <p>The Amazon Resource Name (ARN) for the data store.</p>
    pub datastore_arn: ::std::option::Option<::std::string::String>,
    /// <p>The timestamp when the data store was created.</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The timestamp when the data store was last updated.</p>
    pub updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl DatastoreSummary {
    /// <p>The data store identifier.</p>
    pub fn datastore_id(&self) -> &str {
        use std::ops::Deref;
        self.datastore_id.deref()
    }
    /// <p>The data store name.</p>
    pub fn datastore_name(&self) -> &str {
        use std::ops::Deref;
        self.datastore_name.deref()
    }
    /// <p>The data store status.</p>
    pub fn datastore_status(&self) -> &crate::types::DatastoreStatus {
        &self.datastore_status
    }
    /// <p>The Amazon Resource Name (ARN) for the data store.</p>
    pub fn datastore_arn(&self) -> ::std::option::Option<&str> {
        self.datastore_arn.as_deref()
    }
    /// <p>The timestamp when the data store was created.</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The timestamp when the data store was last updated.</p>
    pub fn updated_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.updated_at.as_ref()
    }
}
impl DatastoreSummary {
    /// Creates a new builder-style object to manufacture [`DatastoreSummary`](crate::types::DatastoreSummary).
    pub fn builder() -> crate::types::builders::DatastoreSummaryBuilder {
        crate::types::builders::DatastoreSummaryBuilder::default()
    }
}

/// A builder for [`DatastoreSummary`](crate::types::DatastoreSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DatastoreSummaryBuilder {
    pub(crate) datastore_id: ::std::option::Option<::std::string::String>,
    pub(crate) datastore_name: ::std::option::Option<::std::string::String>,
    pub(crate) datastore_status: ::std::option::Option<crate::types::DatastoreStatus>,
    pub(crate) datastore_arn: ::std::option::Option<::std::string::String>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl DatastoreSummaryBuilder {
    /// <p>The data store identifier.</p>
    /// This field is required.
    pub fn datastore_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.datastore_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The data store identifier.</p>
    pub fn set_datastore_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.datastore_id = input;
        self
    }
    /// <p>The data store identifier.</p>
    pub fn get_datastore_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.datastore_id
    }
    /// <p>The data store name.</p>
    /// This field is required.
    pub fn datastore_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.datastore_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The data store name.</p>
    pub fn set_datastore_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.datastore_name = input;
        self
    }
    /// <p>The data store name.</p>
    pub fn get_datastore_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.datastore_name
    }
    /// <p>The data store status.</p>
    /// This field is required.
    pub fn datastore_status(mut self, input: crate::types::DatastoreStatus) -> Self {
        self.datastore_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The data store status.</p>
    pub fn set_datastore_status(mut self, input: ::std::option::Option<crate::types::DatastoreStatus>) -> Self {
        self.datastore_status = input;
        self
    }
    /// <p>The data store status.</p>
    pub fn get_datastore_status(&self) -> &::std::option::Option<crate::types::DatastoreStatus> {
        &self.datastore_status
    }
    /// <p>The Amazon Resource Name (ARN) for the data store.</p>
    pub fn datastore_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.datastore_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the data store.</p>
    pub fn set_datastore_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.datastore_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the data store.</p>
    pub fn get_datastore_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.datastore_arn
    }
    /// <p>The timestamp when the data store was created.</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the data store was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The timestamp when the data store was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The timestamp when the data store was last updated.</p>
    pub fn updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the data store was last updated.</p>
    pub fn set_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.updated_at = input;
        self
    }
    /// <p>The timestamp when the data store was last updated.</p>
    pub fn get_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.updated_at
    }
    /// Consumes the builder and constructs a [`DatastoreSummary`](crate::types::DatastoreSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`datastore_id`](crate::types::builders::DatastoreSummaryBuilder::datastore_id)
    /// - [`datastore_name`](crate::types::builders::DatastoreSummaryBuilder::datastore_name)
    /// - [`datastore_status`](crate::types::builders::DatastoreSummaryBuilder::datastore_status)
    pub fn build(self) -> ::std::result::Result<crate::types::DatastoreSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::DatastoreSummary {
            datastore_id: self.datastore_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "datastore_id",
                    "datastore_id was not specified but it is required when building DatastoreSummary",
                )
            })?,
            datastore_name: self.datastore_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "datastore_name",
                    "datastore_name was not specified but it is required when building DatastoreSummary",
                )
            })?,
            datastore_status: self.datastore_status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "datastore_status",
                    "datastore_status was not specified but it is required when building DatastoreSummary",
                )
            })?,
            datastore_arn: self.datastore_arn,
            created_at: self.created_at,
            updated_at: self.updated_at,
        })
    }
}
