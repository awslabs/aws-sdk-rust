// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum Error {
    /// <p>The user does not have sufficient access to perform this action.</p>
    AccessDeniedException(crate::types::error::AccessDeniedException),
    /// <p>Updating or deleting a resource can cause an inconsistent state.</p>
    ConflictException(crate::types::error::ConflictException),
    /// <p>An unexpected error occurred during processing of the request.</p>
    InternalServerException(crate::types::error::InternalServerException),
    /// <p>The request references a resource which does not exist.</p>
    ResourceNotFoundException(crate::types::error::ResourceNotFoundException),
    /// <p>The request caused a service quota to be exceeded.</p>
    ServiceQuotaExceededException(crate::types::error::ServiceQuotaExceededException),
    /// <p>The request was denied due to throttling.</p>
    ThrottlingException(crate::types::error::ThrottlingException),
    /// <p>The input fails to satisfy the constraints set by the service.</p>
    ValidationException(crate::types::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(::aws_smithy_types::error::Unhandled),
}
impl ::std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ServiceQuotaExceededException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::copy_image_set::CopyImageSetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::copy_image_set::CopyImageSetError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::copy_image_set::CopyImageSetError> for Error {
    fn from(err: crate::operation::copy_image_set::CopyImageSetError) -> Self {
        match err {
            crate::operation::copy_image_set::CopyImageSetError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::copy_image_set::CopyImageSetError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::copy_image_set::CopyImageSetError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::copy_image_set::CopyImageSetError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::copy_image_set::CopyImageSetError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::copy_image_set::CopyImageSetError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::copy_image_set::CopyImageSetError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::copy_image_set::CopyImageSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_datastore::CreateDatastoreError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_datastore::CreateDatastoreError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_datastore::CreateDatastoreError> for Error {
    fn from(err: crate::operation::create_datastore::CreateDatastoreError) -> Self {
        match err {
            crate::operation::create_datastore::CreateDatastoreError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_datastore::CreateDatastoreError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_datastore::CreateDatastoreError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_datastore::CreateDatastoreError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_datastore::CreateDatastoreError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_datastore::CreateDatastoreError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_datastore::CreateDatastoreError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_datastore::DeleteDatastoreError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_datastore::DeleteDatastoreError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_datastore::DeleteDatastoreError> for Error {
    fn from(err: crate::operation::delete_datastore::DeleteDatastoreError) -> Self {
        match err {
            crate::operation::delete_datastore::DeleteDatastoreError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_datastore::DeleteDatastoreError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_datastore::DeleteDatastoreError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_datastore::DeleteDatastoreError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_datastore::DeleteDatastoreError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_datastore::DeleteDatastoreError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_datastore::DeleteDatastoreError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_image_set::DeleteImageSetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_image_set::DeleteImageSetError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_image_set::DeleteImageSetError> for Error {
    fn from(err: crate::operation::delete_image_set::DeleteImageSetError) -> Self {
        match err {
            crate::operation::delete_image_set::DeleteImageSetError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_image_set::DeleteImageSetError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_image_set::DeleteImageSetError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_image_set::DeleteImageSetError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_image_set::DeleteImageSetError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_image_set::DeleteImageSetError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_image_set::DeleteImageSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_datastore::GetDatastoreError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_datastore::GetDatastoreError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_datastore::GetDatastoreError> for Error {
    fn from(err: crate::operation::get_datastore::GetDatastoreError) -> Self {
        match err {
            crate::operation::get_datastore::GetDatastoreError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_datastore::GetDatastoreError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_datastore::GetDatastoreError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_datastore::GetDatastoreError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_datastore::GetDatastoreError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_datastore::GetDatastoreError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_dicom_import_job::GetDICOMImportJobError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_dicom_import_job::GetDICOMImportJobError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_dicom_import_job::GetDICOMImportJobError> for Error {
    fn from(err: crate::operation::get_dicom_import_job::GetDICOMImportJobError) -> Self {
        match err {
            crate::operation::get_dicom_import_job::GetDICOMImportJobError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_dicom_import_job::GetDICOMImportJobError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::get_dicom_import_job::GetDICOMImportJobError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_dicom_import_job::GetDICOMImportJobError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_dicom_import_job::GetDICOMImportJobError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_dicom_import_job::GetDICOMImportJobError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_dicom_import_job::GetDICOMImportJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_image_frame::GetImageFrameError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_image_frame::GetImageFrameError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_image_frame::GetImageFrameError> for Error {
    fn from(err: crate::operation::get_image_frame::GetImageFrameError) -> Self {
        match err {
            crate::operation::get_image_frame::GetImageFrameError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_image_frame::GetImageFrameError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::get_image_frame::GetImageFrameError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_image_frame::GetImageFrameError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_image_frame::GetImageFrameError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_image_frame::GetImageFrameError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_image_frame::GetImageFrameError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_image_set::GetImageSetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_image_set::GetImageSetError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_image_set::GetImageSetError> for Error {
    fn from(err: crate::operation::get_image_set::GetImageSetError) -> Self {
        match err {
            crate::operation::get_image_set::GetImageSetError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_image_set::GetImageSetError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::get_image_set::GetImageSetError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_image_set::GetImageSetError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_image_set::GetImageSetError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_image_set::GetImageSetError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_image_set::GetImageSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_image_set_metadata::GetImageSetMetadataError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_image_set_metadata::GetImageSetMetadataError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_image_set_metadata::GetImageSetMetadataError> for Error {
    fn from(err: crate::operation::get_image_set_metadata::GetImageSetMetadataError) -> Self {
        match err {
            crate::operation::get_image_set_metadata::GetImageSetMetadataError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_image_set_metadata::GetImageSetMetadataError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::get_image_set_metadata::GetImageSetMetadataError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_image_set_metadata::GetImageSetMetadataError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_image_set_metadata::GetImageSetMetadataError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_image_set_metadata::GetImageSetMetadataError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_image_set_metadata::GetImageSetMetadataError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_datastores::ListDatastoresError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_datastores::ListDatastoresError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_datastores::ListDatastoresError> for Error {
    fn from(err: crate::operation::list_datastores::ListDatastoresError) -> Self {
        match err {
            crate::operation::list_datastores::ListDatastoresError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_datastores::ListDatastoresError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_datastores::ListDatastoresError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_datastores::ListDatastoresError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_datastores::ListDatastoresError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_dicom_import_jobs::ListDICOMImportJobsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_dicom_import_jobs::ListDICOMImportJobsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_dicom_import_jobs::ListDICOMImportJobsError> for Error {
    fn from(err: crate::operation::list_dicom_import_jobs::ListDICOMImportJobsError) -> Self {
        match err {
            crate::operation::list_dicom_import_jobs::ListDICOMImportJobsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_dicom_import_jobs::ListDICOMImportJobsError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::list_dicom_import_jobs::ListDICOMImportJobsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_dicom_import_jobs::ListDICOMImportJobsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_dicom_import_jobs::ListDICOMImportJobsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_dicom_import_jobs::ListDICOMImportJobsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_dicom_import_jobs::ListDICOMImportJobsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_image_set_versions::ListImageSetVersionsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_image_set_versions::ListImageSetVersionsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_image_set_versions::ListImageSetVersionsError> for Error {
    fn from(err: crate::operation::list_image_set_versions::ListImageSetVersionsError) -> Self {
        match err {
            crate::operation::list_image_set_versions::ListImageSetVersionsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_image_set_versions::ListImageSetVersionsError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::list_image_set_versions::ListImageSetVersionsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_image_set_versions::ListImageSetVersionsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_image_set_versions::ListImageSetVersionsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_image_set_versions::ListImageSetVersionsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_image_set_versions::ListImageSetVersionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_tags_for_resource::ListTagsForResourceError> for Error {
    fn from(err: crate::operation::list_tags_for_resource::ListTagsForResourceError) -> Self {
        match err {
            crate::operation::list_tags_for_resource::ListTagsForResourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::search_image_sets::SearchImageSetsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::search_image_sets::SearchImageSetsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::search_image_sets::SearchImageSetsError> for Error {
    fn from(err: crate::operation::search_image_sets::SearchImageSetsError) -> Self {
        match err {
            crate::operation::search_image_sets::SearchImageSetsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::search_image_sets::SearchImageSetsError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::search_image_sets::SearchImageSetsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::search_image_sets::SearchImageSetsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::search_image_sets::SearchImageSetsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::search_image_sets::SearchImageSetsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::search_image_sets::SearchImageSetsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_dicom_import_job::StartDICOMImportJobError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_dicom_import_job::StartDICOMImportJobError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::start_dicom_import_job::StartDICOMImportJobError> for Error {
    fn from(err: crate::operation::start_dicom_import_job::StartDICOMImportJobError) -> Self {
        match err {
            crate::operation::start_dicom_import_job::StartDICOMImportJobError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::start_dicom_import_job::StartDICOMImportJobError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::start_dicom_import_job::StartDICOMImportJobError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::start_dicom_import_job::StartDICOMImportJobError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::start_dicom_import_job::StartDICOMImportJobError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::start_dicom_import_job::StartDICOMImportJobError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::start_dicom_import_job::StartDICOMImportJobError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::start_dicom_import_job::StartDICOMImportJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::tag_resource::TagResourceError> for Error {
    fn from(err: crate::operation::tag_resource::TagResourceError) -> Self {
        match err {
            crate::operation::tag_resource::TagResourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::tag_resource::TagResourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::tag_resource::TagResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::tag_resource::TagResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::tag_resource::TagResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::tag_resource::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::untag_resource::UntagResourceError> for Error {
    fn from(err: crate::operation::untag_resource::UntagResourceError) -> Self {
        match err {
            crate::operation::untag_resource::UntagResourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::untag_resource::UntagResourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::untag_resource::UntagResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::untag_resource::UntagResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::untag_resource::UntagResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::untag_resource::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_image_set_metadata::UpdateImageSetMetadataError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_image_set_metadata::UpdateImageSetMetadataError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_image_set_metadata::UpdateImageSetMetadataError> for Error {
    fn from(err: crate::operation::update_image_set_metadata::UpdateImageSetMetadataError) -> Self {
        match err {
            crate::operation::update_image_set_metadata::UpdateImageSetMetadataError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_image_set_metadata::UpdateImageSetMetadataError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_image_set_metadata::UpdateImageSetMetadataError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_image_set_metadata::UpdateImageSetMetadataError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_image_set_metadata::UpdateImageSetMetadataError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::update_image_set_metadata::UpdateImageSetMetadataError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_image_set_metadata::UpdateImageSetMetadataError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_image_set_metadata::UpdateImageSetMetadataError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl ::std::error::Error for Error {
    fn source(&self) -> std::option::Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            Error::AccessDeniedException(inner) => inner.source(),
            Error::ConflictException(inner) => inner.source(),
            Error::InternalServerException(inner) => inner.source(),
            Error::ResourceNotFoundException(inner) => inner.source(),
            Error::ServiceQuotaExceededException(inner) => inner.source(),
            Error::ThrottlingException(inner) => inner.source(),
            Error::ValidationException(inner) => inner.source(),
            Error::Unhandled(inner) => inner.source(),
        }
    }
}
impl ::aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::InternalServerException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ServiceQuotaExceededException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
