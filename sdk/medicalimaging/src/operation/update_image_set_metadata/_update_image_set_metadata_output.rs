// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateImageSetMetadataOutput {
    /// <p>The data store identifier.</p>
    pub datastore_id: ::std::string::String,
    /// <p>The image set identifier.</p>
    pub image_set_id: ::std::string::String,
    /// <p>The latest image set version identifier.</p>
    pub latest_version_id: ::std::string::String,
    /// <p>The image set state.</p>
    pub image_set_state: crate::types::ImageSetState,
    /// <p>The image set workflow status.</p>
    pub image_set_workflow_status: ::std::option::Option<crate::types::ImageSetWorkflowStatus>,
    /// <p>The timestamp when image set metadata was created.</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The timestamp when image set metadata was updated.</p>
    pub updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The error message thrown if an update image set metadata action fails.</p>
    pub message: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl UpdateImageSetMetadataOutput {
    /// <p>The data store identifier.</p>
    pub fn datastore_id(&self) -> &str {
        use std::ops::Deref;
        self.datastore_id.deref()
    }
    /// <p>The image set identifier.</p>
    pub fn image_set_id(&self) -> &str {
        use std::ops::Deref;
        self.image_set_id.deref()
    }
    /// <p>The latest image set version identifier.</p>
    pub fn latest_version_id(&self) -> &str {
        use std::ops::Deref;
        self.latest_version_id.deref()
    }
    /// <p>The image set state.</p>
    pub fn image_set_state(&self) -> &crate::types::ImageSetState {
        &self.image_set_state
    }
    /// <p>The image set workflow status.</p>
    pub fn image_set_workflow_status(&self) -> ::std::option::Option<&crate::types::ImageSetWorkflowStatus> {
        self.image_set_workflow_status.as_ref()
    }
    /// <p>The timestamp when image set metadata was created.</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The timestamp when image set metadata was updated.</p>
    pub fn updated_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.updated_at.as_ref()
    }
    /// <p>The error message thrown if an update image set metadata action fails.</p>
    pub fn message(&self) -> ::std::option::Option<&str> {
        self.message.as_deref()
    }
}
impl ::aws_http::request_id::RequestId for UpdateImageSetMetadataOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateImageSetMetadataOutput {
    /// Creates a new builder-style object to manufacture [`UpdateImageSetMetadataOutput`](crate::operation::update_image_set_metadata::UpdateImageSetMetadataOutput).
    pub fn builder() -> crate::operation::update_image_set_metadata::builders::UpdateImageSetMetadataOutputBuilder {
        crate::operation::update_image_set_metadata::builders::UpdateImageSetMetadataOutputBuilder::default()
    }
}

/// A builder for [`UpdateImageSetMetadataOutput`](crate::operation::update_image_set_metadata::UpdateImageSetMetadataOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateImageSetMetadataOutputBuilder {
    pub(crate) datastore_id: ::std::option::Option<::std::string::String>,
    pub(crate) image_set_id: ::std::option::Option<::std::string::String>,
    pub(crate) latest_version_id: ::std::option::Option<::std::string::String>,
    pub(crate) image_set_state: ::std::option::Option<crate::types::ImageSetState>,
    pub(crate) image_set_workflow_status: ::std::option::Option<crate::types::ImageSetWorkflowStatus>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) message: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl UpdateImageSetMetadataOutputBuilder {
    /// <p>The data store identifier.</p>
    /// This field is required.
    pub fn datastore_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.datastore_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The data store identifier.</p>
    pub fn set_datastore_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.datastore_id = input;
        self
    }
    /// <p>The data store identifier.</p>
    pub fn get_datastore_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.datastore_id
    }
    /// <p>The image set identifier.</p>
    /// This field is required.
    pub fn image_set_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.image_set_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The image set identifier.</p>
    pub fn set_image_set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.image_set_id = input;
        self
    }
    /// <p>The image set identifier.</p>
    pub fn get_image_set_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.image_set_id
    }
    /// <p>The latest image set version identifier.</p>
    /// This field is required.
    pub fn latest_version_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.latest_version_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The latest image set version identifier.</p>
    pub fn set_latest_version_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.latest_version_id = input;
        self
    }
    /// <p>The latest image set version identifier.</p>
    pub fn get_latest_version_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.latest_version_id
    }
    /// <p>The image set state.</p>
    /// This field is required.
    pub fn image_set_state(mut self, input: crate::types::ImageSetState) -> Self {
        self.image_set_state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The image set state.</p>
    pub fn set_image_set_state(mut self, input: ::std::option::Option<crate::types::ImageSetState>) -> Self {
        self.image_set_state = input;
        self
    }
    /// <p>The image set state.</p>
    pub fn get_image_set_state(&self) -> &::std::option::Option<crate::types::ImageSetState> {
        &self.image_set_state
    }
    /// <p>The image set workflow status.</p>
    pub fn image_set_workflow_status(mut self, input: crate::types::ImageSetWorkflowStatus) -> Self {
        self.image_set_workflow_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The image set workflow status.</p>
    pub fn set_image_set_workflow_status(mut self, input: ::std::option::Option<crate::types::ImageSetWorkflowStatus>) -> Self {
        self.image_set_workflow_status = input;
        self
    }
    /// <p>The image set workflow status.</p>
    pub fn get_image_set_workflow_status(&self) -> &::std::option::Option<crate::types::ImageSetWorkflowStatus> {
        &self.image_set_workflow_status
    }
    /// <p>The timestamp when image set metadata was created.</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when image set metadata was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The timestamp when image set metadata was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The timestamp when image set metadata was updated.</p>
    pub fn updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when image set metadata was updated.</p>
    pub fn set_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.updated_at = input;
        self
    }
    /// <p>The timestamp when image set metadata was updated.</p>
    pub fn get_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.updated_at
    }
    /// <p>The error message thrown if an update image set metadata action fails.</p>
    pub fn message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The error message thrown if an update image set metadata action fails.</p>
    pub fn set_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.message = input;
        self
    }
    /// <p>The error message thrown if an update image set metadata action fails.</p>
    pub fn get_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.message
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`UpdateImageSetMetadataOutput`](crate::operation::update_image_set_metadata::UpdateImageSetMetadataOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`datastore_id`](crate::operation::update_image_set_metadata::builders::UpdateImageSetMetadataOutputBuilder::datastore_id)
    /// - [`image_set_id`](crate::operation::update_image_set_metadata::builders::UpdateImageSetMetadataOutputBuilder::image_set_id)
    /// - [`latest_version_id`](crate::operation::update_image_set_metadata::builders::UpdateImageSetMetadataOutputBuilder::latest_version_id)
    /// - [`image_set_state`](crate::operation::update_image_set_metadata::builders::UpdateImageSetMetadataOutputBuilder::image_set_state)
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_image_set_metadata::UpdateImageSetMetadataOutput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::update_image_set_metadata::UpdateImageSetMetadataOutput {
            datastore_id: self.datastore_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "datastore_id",
                    "datastore_id was not specified but it is required when building UpdateImageSetMetadataOutput",
                )
            })?,
            image_set_id: self.image_set_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "image_set_id",
                    "image_set_id was not specified but it is required when building UpdateImageSetMetadataOutput",
                )
            })?,
            latest_version_id: self.latest_version_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "latest_version_id",
                    "latest_version_id was not specified but it is required when building UpdateImageSetMetadataOutput",
                )
            })?,
            image_set_state: self.image_set_state.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "image_set_state",
                    "image_set_state was not specified but it is required when building UpdateImageSetMetadataOutput",
                )
            })?,
            image_set_workflow_status: self.image_set_workflow_status,
            created_at: self.created_at,
            updated_at: self.updated_at,
            message: self.message,
            _request_id: self._request_id,
        })
    }
}
