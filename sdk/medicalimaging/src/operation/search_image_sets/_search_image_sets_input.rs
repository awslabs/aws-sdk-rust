// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct SearchImageSetsInput {
    /// <p>The identifier of the data store where the image sets reside.</p>
    pub datastore_id: ::std::option::Option<::std::string::String>,
    /// <p>The search criteria that filters by applying a maximum of 1 item to <code>SearchByAttribute</code>.</p>
    pub search_criteria: ::std::option::Option<crate::types::SearchCriteria>,
    /// <p>The maximum number of results that can be returned in a search.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>The token used for pagination of results returned in the response. Use the token returned from the previous request to continue results where the previous request ended.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
}
impl SearchImageSetsInput {
    /// <p>The identifier of the data store where the image sets reside.</p>
    pub fn datastore_id(&self) -> ::std::option::Option<&str> {
        self.datastore_id.as_deref()
    }
    /// <p>The search criteria that filters by applying a maximum of 1 item to <code>SearchByAttribute</code>.</p>
    pub fn search_criteria(&self) -> ::std::option::Option<&crate::types::SearchCriteria> {
        self.search_criteria.as_ref()
    }
    /// <p>The maximum number of results that can be returned in a search.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>The token used for pagination of results returned in the response. Use the token returned from the previous request to continue results where the previous request ended.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ::std::fmt::Debug for SearchImageSetsInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("SearchImageSetsInput");
        formatter.field("datastore_id", &self.datastore_id);
        formatter.field("search_criteria", &"*** Sensitive Data Redacted ***");
        formatter.field("max_results", &self.max_results);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
impl SearchImageSetsInput {
    /// Creates a new builder-style object to manufacture [`SearchImageSetsInput`](crate::operation::search_image_sets::SearchImageSetsInput).
    pub fn builder() -> crate::operation::search_image_sets::builders::SearchImageSetsInputBuilder {
        crate::operation::search_image_sets::builders::SearchImageSetsInputBuilder::default()
    }
}

/// A builder for [`SearchImageSetsInput`](crate::operation::search_image_sets::SearchImageSetsInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct SearchImageSetsInputBuilder {
    pub(crate) datastore_id: ::std::option::Option<::std::string::String>,
    pub(crate) search_criteria: ::std::option::Option<crate::types::SearchCriteria>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
}
impl SearchImageSetsInputBuilder {
    /// <p>The identifier of the data store where the image sets reside.</p>
    /// This field is required.
    pub fn datastore_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.datastore_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the data store where the image sets reside.</p>
    pub fn set_datastore_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.datastore_id = input;
        self
    }
    /// <p>The identifier of the data store where the image sets reside.</p>
    pub fn get_datastore_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.datastore_id
    }
    /// <p>The search criteria that filters by applying a maximum of 1 item to <code>SearchByAttribute</code>.</p>
    pub fn search_criteria(mut self, input: crate::types::SearchCriteria) -> Self {
        self.search_criteria = ::std::option::Option::Some(input);
        self
    }
    /// <p>The search criteria that filters by applying a maximum of 1 item to <code>SearchByAttribute</code>.</p>
    pub fn set_search_criteria(mut self, input: ::std::option::Option<crate::types::SearchCriteria>) -> Self {
        self.search_criteria = input;
        self
    }
    /// <p>The search criteria that filters by applying a maximum of 1 item to <code>SearchByAttribute</code>.</p>
    pub fn get_search_criteria(&self) -> &::std::option::Option<crate::types::SearchCriteria> {
        &self.search_criteria
    }
    /// <p>The maximum number of results that can be returned in a search.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of results that can be returned in a search.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of results that can be returned in a search.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>The token used for pagination of results returned in the response. Use the token returned from the previous request to continue results where the previous request ended.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The token used for pagination of results returned in the response. Use the token returned from the previous request to continue results where the previous request ended.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The token used for pagination of results returned in the response. Use the token returned from the previous request to continue results where the previous request ended.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Consumes the builder and constructs a [`SearchImageSetsInput`](crate::operation::search_image_sets::SearchImageSetsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::search_image_sets::SearchImageSetsInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::search_image_sets::SearchImageSetsInput {
            datastore_id: self.datastore_id,
            search_criteria: self.search_criteria,
            max_results: self.max_results,
            next_token: self.next_token,
        })
    }
}
impl ::std::fmt::Debug for SearchImageSetsInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("SearchImageSetsInputBuilder");
        formatter.field("datastore_id", &self.datastore_id);
        formatter.field("search_criteria", &"*** Sensitive Data Redacted ***");
        formatter.field("max_results", &self.max_results);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
