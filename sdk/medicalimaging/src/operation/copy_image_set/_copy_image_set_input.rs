// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CopyImageSetInput {
    /// <p>The data store identifier.</p>
    pub datastore_id: ::std::option::Option<::std::string::String>,
    /// <p>The source image set identifier.</p>
    pub source_image_set_id: ::std::option::Option<::std::string::String>,
    /// <p>Copy image set information.</p>
    pub copy_image_set_information: ::std::option::Option<crate::types::CopyImageSetInformation>,
}
impl CopyImageSetInput {
    /// <p>The data store identifier.</p>
    pub fn datastore_id(&self) -> ::std::option::Option<&str> {
        self.datastore_id.as_deref()
    }
    /// <p>The source image set identifier.</p>
    pub fn source_image_set_id(&self) -> ::std::option::Option<&str> {
        self.source_image_set_id.as_deref()
    }
    /// <p>Copy image set information.</p>
    pub fn copy_image_set_information(&self) -> ::std::option::Option<&crate::types::CopyImageSetInformation> {
        self.copy_image_set_information.as_ref()
    }
}
impl CopyImageSetInput {
    /// Creates a new builder-style object to manufacture [`CopyImageSetInput`](crate::operation::copy_image_set::CopyImageSetInput).
    pub fn builder() -> crate::operation::copy_image_set::builders::CopyImageSetInputBuilder {
        crate::operation::copy_image_set::builders::CopyImageSetInputBuilder::default()
    }
}

/// A builder for [`CopyImageSetInput`](crate::operation::copy_image_set::CopyImageSetInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CopyImageSetInputBuilder {
    pub(crate) datastore_id: ::std::option::Option<::std::string::String>,
    pub(crate) source_image_set_id: ::std::option::Option<::std::string::String>,
    pub(crate) copy_image_set_information: ::std::option::Option<crate::types::CopyImageSetInformation>,
}
impl CopyImageSetInputBuilder {
    /// <p>The data store identifier.</p>
    /// This field is required.
    pub fn datastore_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.datastore_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The data store identifier.</p>
    pub fn set_datastore_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.datastore_id = input;
        self
    }
    /// <p>The data store identifier.</p>
    pub fn get_datastore_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.datastore_id
    }
    /// <p>The source image set identifier.</p>
    /// This field is required.
    pub fn source_image_set_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_image_set_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The source image set identifier.</p>
    pub fn set_source_image_set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_image_set_id = input;
        self
    }
    /// <p>The source image set identifier.</p>
    pub fn get_source_image_set_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_image_set_id
    }
    /// <p>Copy image set information.</p>
    /// This field is required.
    pub fn copy_image_set_information(mut self, input: crate::types::CopyImageSetInformation) -> Self {
        self.copy_image_set_information = ::std::option::Option::Some(input);
        self
    }
    /// <p>Copy image set information.</p>
    pub fn set_copy_image_set_information(mut self, input: ::std::option::Option<crate::types::CopyImageSetInformation>) -> Self {
        self.copy_image_set_information = input;
        self
    }
    /// <p>Copy image set information.</p>
    pub fn get_copy_image_set_information(&self) -> &::std::option::Option<crate::types::CopyImageSetInformation> {
        &self.copy_image_set_information
    }
    /// Consumes the builder and constructs a [`CopyImageSetInput`](crate::operation::copy_image_set::CopyImageSetInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::copy_image_set::CopyImageSetInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::copy_image_set::CopyImageSetInput {
            datastore_id: self.datastore_id,
            source_image_set_id: self.source_image_set_id,
            copy_image_set_information: self.copy_image_set_information,
        })
    }
}
