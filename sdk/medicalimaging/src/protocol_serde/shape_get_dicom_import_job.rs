// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn de_get_dicom_import_job_http_error(
    _response_status: u16,
    _response_headers: &::http::header::HeaderMap,
    _response_body: &[u8],
) -> std::result::Result<
    crate::operation::get_dicom_import_job::GetDicomImportJobOutput,
    crate::operation::get_dicom_import_job::GetDICOMImportJobError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(_response_status, _response_headers, _response_body)
        .map_err(crate::operation::get_dicom_import_job::GetDICOMImportJobError::unhandled)?;
    generic_builder = ::aws_http::request_id::apply_request_id(generic_builder, _response_headers);
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::operation::get_dicom_import_job::GetDICOMImportJobError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "AccessDeniedException" => crate::operation::get_dicom_import_job::GetDICOMImportJobError::AccessDeniedException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::AccessDeniedExceptionBuilder::default();
                output = crate::protocol_serde::shape_access_denied_exception::de_access_denied_exception_json_err(_response_body, output)
                    .map_err(crate::operation::get_dicom_import_job::GetDICOMImportJobError::unhandled)?;
                let output = output.meta(generic);
                crate::serde_util::access_denied_exception_correct_errors(output)
                    .build()
                    .map_err(crate::operation::get_dicom_import_job::GetDICOMImportJobError::unhandled)?
            };
            tmp
        }),
        "ConflictException" => crate::operation::get_dicom_import_job::GetDICOMImportJobError::ConflictException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::ConflictExceptionBuilder::default();
                output = crate::protocol_serde::shape_conflict_exception::de_conflict_exception_json_err(_response_body, output)
                    .map_err(crate::operation::get_dicom_import_job::GetDICOMImportJobError::unhandled)?;
                let output = output.meta(generic);
                crate::serde_util::conflict_exception_correct_errors(output)
                    .build()
                    .map_err(crate::operation::get_dicom_import_job::GetDICOMImportJobError::unhandled)?
            };
            tmp
        }),
        "InternalServerException" => crate::operation::get_dicom_import_job::GetDICOMImportJobError::InternalServerException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::InternalServerExceptionBuilder::default();
                output = crate::protocol_serde::shape_internal_server_exception::de_internal_server_exception_json_err(_response_body, output)
                    .map_err(crate::operation::get_dicom_import_job::GetDICOMImportJobError::unhandled)?;
                let output = output.meta(generic);
                crate::serde_util::internal_server_exception_correct_errors(output)
                    .build()
                    .map_err(crate::operation::get_dicom_import_job::GetDICOMImportJobError::unhandled)?
            };
            tmp
        }),
        "ResourceNotFoundException" => crate::operation::get_dicom_import_job::GetDICOMImportJobError::ResourceNotFoundException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::ResourceNotFoundExceptionBuilder::default();
                output = crate::protocol_serde::shape_resource_not_found_exception::de_resource_not_found_exception_json_err(_response_body, output)
                    .map_err(crate::operation::get_dicom_import_job::GetDICOMImportJobError::unhandled)?;
                let output = output.meta(generic);
                crate::serde_util::resource_not_found_exception_correct_errors(output)
                    .build()
                    .map_err(crate::operation::get_dicom_import_job::GetDICOMImportJobError::unhandled)?
            };
            tmp
        }),
        "ThrottlingException" => crate::operation::get_dicom_import_job::GetDICOMImportJobError::ThrottlingException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::ThrottlingExceptionBuilder::default();
                output = crate::protocol_serde::shape_throttling_exception::de_throttling_exception_json_err(_response_body, output)
                    .map_err(crate::operation::get_dicom_import_job::GetDICOMImportJobError::unhandled)?;
                let output = output.meta(generic);
                crate::serde_util::throttling_exception_correct_errors(output)
                    .build()
                    .map_err(crate::operation::get_dicom_import_job::GetDICOMImportJobError::unhandled)?
            };
            tmp
        }),
        "ValidationException" => crate::operation::get_dicom_import_job::GetDICOMImportJobError::ValidationException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::ValidationExceptionBuilder::default();
                output = crate::protocol_serde::shape_validation_exception::de_validation_exception_json_err(_response_body, output)
                    .map_err(crate::operation::get_dicom_import_job::GetDICOMImportJobError::unhandled)?;
                let output = output.meta(generic);
                crate::serde_util::validation_exception_correct_errors(output)
                    .build()
                    .map_err(crate::operation::get_dicom_import_job::GetDICOMImportJobError::unhandled)?
            };
            tmp
        }),
        _ => crate::operation::get_dicom_import_job::GetDICOMImportJobError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_get_dicom_import_job_http_response(
    _response_status: u16,
    _response_headers: &::http::header::HeaderMap,
    _response_body: &[u8],
) -> std::result::Result<
    crate::operation::get_dicom_import_job::GetDicomImportJobOutput,
    crate::operation::get_dicom_import_job::GetDICOMImportJobError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::operation::get_dicom_import_job::builders::GetDicomImportJobOutputBuilder::default();
        output = crate::protocol_serde::shape_get_dicom_import_job::de_get_dicom_import_job(_response_body, output)
            .map_err(crate::operation::get_dicom_import_job::GetDICOMImportJobError::unhandled)?;
        output._set_request_id(::aws_http::request_id::RequestId::request_id(_response_headers).map(str::to_string));
        crate::serde_util::get_dicom_import_job_output_correct_errors(output).build()
    })
}

pub(crate) fn de_get_dicom_import_job(
    value: &[u8],
    mut builder: crate::operation::get_dicom_import_job::builders::GetDicomImportJobOutputBuilder,
) -> Result<crate::operation::get_dicom_import_job::builders::GetDicomImportJobOutputBuilder, ::aws_smithy_json::deserialize::error::DeserializeError>
{
    let mut tokens_owned = ::aws_smithy_json::deserialize::json_token_iter(crate::protocol_serde::or_empty_doc(value)).peekable();
    let tokens = &mut tokens_owned;
    ::aws_smithy_json::deserialize::token::expect_start_object(tokens.next())?;
    loop {
        match tokens.next().transpose()? {
            Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
            Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                "jobProperties" => {
                    builder = builder.set_job_properties(crate::protocol_serde::shape_dicom_import_job_properties::de_dicom_import_job_properties(
                        tokens,
                    )?);
                }
                _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
            },
            other => {
                return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                    "expected object key or end object, found: {:?}",
                    other
                )))
            }
        }
    }
    if tokens.next().is_some() {
        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "found more JSON tokens after completing parsing",
        ));
    }
    Ok(builder)
}
