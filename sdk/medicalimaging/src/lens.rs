// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_list_datastores_output_next_token(
    input: &crate::operation::list_datastores::ListDatastoresOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_dicom_import_jobs_output_next_token(
    input: &crate::operation::list_dicom_import_jobs::ListDicomImportJobsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_image_set_versions_output_next_token(
    input: &crate::operation::list_image_set_versions::ListImageSetVersionsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_search_image_sets_output_next_token(
    input: &crate::operation::search_image_sets::SearchImageSetsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_datastores_output_datastore_summaries(
    input: crate::operation::list_datastores::ListDatastoresOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::DatastoreSummary>> {
    let input = match input.datastore_summaries {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_dicom_import_jobs_output_job_summaries(
    input: crate::operation::list_dicom_import_jobs::ListDicomImportJobsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::DicomImportJobSummary>> {
    let input = input.job_summaries;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_image_set_versions_output_image_set_properties_list(
    input: crate::operation::list_image_set_versions::ListImageSetVersionsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ImageSetProperties>> {
    let input = input.image_set_properties_list;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_search_image_sets_output_image_sets_metadata_summaries(
    input: crate::operation::search_image_sets::SearchImageSetsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ImageSetsMetadataSummary>> {
    let input = input.image_sets_metadata_summaries;
    ::std::option::Option::Some(input)
}
