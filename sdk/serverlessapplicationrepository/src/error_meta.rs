// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum Error {
    /// <p>One of the parameters in the request is invalid.</p>
    BadRequestException(crate::types::error::BadRequestException),
    /// <p>The resource already exists.</p>
    ConflictException(crate::types::error::ConflictException),
    /// <p>The client is not authenticated.</p>
    ForbiddenException(crate::types::error::ForbiddenException),
    /// <p>The AWS Serverless Application Repository service encountered an internal error.</p>
    InternalServerErrorException(crate::types::error::InternalServerErrorException),
    /// <p>The resource (for example, an access policy statement) specified in the request doesn't exist.</p>
    NotFoundException(crate::types::error::NotFoundException),
    /// <p>The client is sending more than the allowed number of requests per unit of time.</p>
    TooManyRequestsException(crate::types::error::TooManyRequestsException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(::aws_smithy_types::error::Unhandled),
}
impl ::std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::BadRequestException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::ForbiddenException(inner) => inner.fmt(f),
            Error::InternalServerErrorException(inner) => inner.fmt(f),
            Error::NotFoundException(inner) => inner.fmt(f),
            Error::TooManyRequestsException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_application::CreateApplicationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_application::CreateApplicationError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_application::CreateApplicationError> for Error {
    fn from(err: crate::operation::create_application::CreateApplicationError) -> Self {
        match err {
            crate::operation::create_application::CreateApplicationError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::create_application::CreateApplicationError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_application::CreateApplicationError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::create_application::CreateApplicationError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::create_application::CreateApplicationError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::create_application::CreateApplicationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_application_version::CreateApplicationVersionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_application_version::CreateApplicationVersionError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_application_version::CreateApplicationVersionError> for Error {
    fn from(err: crate::operation::create_application_version::CreateApplicationVersionError) -> Self {
        match err {
            crate::operation::create_application_version::CreateApplicationVersionError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::create_application_version::CreateApplicationVersionError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_application_version::CreateApplicationVersionError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::create_application_version::CreateApplicationVersionError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::create_application_version::CreateApplicationVersionError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::create_application_version::CreateApplicationVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_cloud_formation_change_set::CreateCloudFormationChangeSetError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_cloud_formation_change_set::CreateCloudFormationChangeSetError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_cloud_formation_change_set::CreateCloudFormationChangeSetError> for Error {
    fn from(err: crate::operation::create_cloud_formation_change_set::CreateCloudFormationChangeSetError) -> Self {
        match err {
            crate::operation::create_cloud_formation_change_set::CreateCloudFormationChangeSetError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::create_cloud_formation_change_set::CreateCloudFormationChangeSetError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::create_cloud_formation_change_set::CreateCloudFormationChangeSetError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::create_cloud_formation_change_set::CreateCloudFormationChangeSetError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::create_cloud_formation_change_set::CreateCloudFormationChangeSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_cloud_formation_template::CreateCloudFormationTemplateError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_cloud_formation_template::CreateCloudFormationTemplateError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_cloud_formation_template::CreateCloudFormationTemplateError> for Error {
    fn from(err: crate::operation::create_cloud_formation_template::CreateCloudFormationTemplateError) -> Self {
        match err {
            crate::operation::create_cloud_formation_template::CreateCloudFormationTemplateError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::create_cloud_formation_template::CreateCloudFormationTemplateError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::create_cloud_formation_template::CreateCloudFormationTemplateError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::create_cloud_formation_template::CreateCloudFormationTemplateError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::create_cloud_formation_template::CreateCloudFormationTemplateError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::create_cloud_formation_template::CreateCloudFormationTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_application::DeleteApplicationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_application::DeleteApplicationError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_application::DeleteApplicationError> for Error {
    fn from(err: crate::operation::delete_application::DeleteApplicationError) -> Self {
        match err {
            crate::operation::delete_application::DeleteApplicationError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::delete_application::DeleteApplicationError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_application::DeleteApplicationError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::delete_application::DeleteApplicationError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::delete_application::DeleteApplicationError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_application::DeleteApplicationError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::delete_application::DeleteApplicationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_application::GetApplicationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_application::GetApplicationError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_application::GetApplicationError> for Error {
    fn from(err: crate::operation::get_application::GetApplicationError) -> Self {
        match err {
            crate::operation::get_application::GetApplicationError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_application::GetApplicationError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::get_application::GetApplicationError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::get_application::GetApplicationError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_application::GetApplicationError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::get_application::GetApplicationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_application_policy::GetApplicationPolicyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_application_policy::GetApplicationPolicyError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_application_policy::GetApplicationPolicyError> for Error {
    fn from(err: crate::operation::get_application_policy::GetApplicationPolicyError) -> Self {
        match err {
            crate::operation::get_application_policy::GetApplicationPolicyError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_application_policy::GetApplicationPolicyError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::get_application_policy::GetApplicationPolicyError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::get_application_policy::GetApplicationPolicyError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_application_policy::GetApplicationPolicyError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::get_application_policy::GetApplicationPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_cloud_formation_template::GetCloudFormationTemplateError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_cloud_formation_template::GetCloudFormationTemplateError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_cloud_formation_template::GetCloudFormationTemplateError> for Error {
    fn from(err: crate::operation::get_cloud_formation_template::GetCloudFormationTemplateError) -> Self {
        match err {
            crate::operation::get_cloud_formation_template::GetCloudFormationTemplateError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::get_cloud_formation_template::GetCloudFormationTemplateError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::get_cloud_formation_template::GetCloudFormationTemplateError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::get_cloud_formation_template::GetCloudFormationTemplateError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::get_cloud_formation_template::GetCloudFormationTemplateError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::get_cloud_formation_template::GetCloudFormationTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_application_dependencies::ListApplicationDependenciesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_application_dependencies::ListApplicationDependenciesError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_application_dependencies::ListApplicationDependenciesError> for Error {
    fn from(err: crate::operation::list_application_dependencies::ListApplicationDependenciesError) -> Self {
        match err {
            crate::operation::list_application_dependencies::ListApplicationDependenciesError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::list_application_dependencies::ListApplicationDependenciesError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::list_application_dependencies::ListApplicationDependenciesError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::list_application_dependencies::ListApplicationDependenciesError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::list_application_dependencies::ListApplicationDependenciesError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::list_application_dependencies::ListApplicationDependenciesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_applications::ListApplicationsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_applications::ListApplicationsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_applications::ListApplicationsError> for Error {
    fn from(err: crate::operation::list_applications::ListApplicationsError) -> Self {
        match err {
            crate::operation::list_applications::ListApplicationsError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::list_applications::ListApplicationsError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::list_applications::ListApplicationsError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::list_applications::ListApplicationsError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::list_applications::ListApplicationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_application_versions::ListApplicationVersionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_application_versions::ListApplicationVersionsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_application_versions::ListApplicationVersionsError> for Error {
    fn from(err: crate::operation::list_application_versions::ListApplicationVersionsError) -> Self {
        match err {
            crate::operation::list_application_versions::ListApplicationVersionsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::list_application_versions::ListApplicationVersionsError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::list_application_versions::ListApplicationVersionsError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::list_application_versions::ListApplicationVersionsError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::list_application_versions::ListApplicationVersionsError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::list_application_versions::ListApplicationVersionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_application_policy::PutApplicationPolicyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_application_policy::PutApplicationPolicyError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::put_application_policy::PutApplicationPolicyError> for Error {
    fn from(err: crate::operation::put_application_policy::PutApplicationPolicyError) -> Self {
        match err {
            crate::operation::put_application_policy::PutApplicationPolicyError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::put_application_policy::PutApplicationPolicyError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::put_application_policy::PutApplicationPolicyError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::put_application_policy::PutApplicationPolicyError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::put_application_policy::PutApplicationPolicyError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::put_application_policy::PutApplicationPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::unshare_application::UnshareApplicationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::unshare_application::UnshareApplicationError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::unshare_application::UnshareApplicationError> for Error {
    fn from(err: crate::operation::unshare_application::UnshareApplicationError) -> Self {
        match err {
            crate::operation::unshare_application::UnshareApplicationError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::unshare_application::UnshareApplicationError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::unshare_application::UnshareApplicationError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::unshare_application::UnshareApplicationError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::unshare_application::UnshareApplicationError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::unshare_application::UnshareApplicationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_application::UpdateApplicationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_application::UpdateApplicationError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_application::UpdateApplicationError> for Error {
    fn from(err: crate::operation::update_application::UpdateApplicationError) -> Self {
        match err {
            crate::operation::update_application::UpdateApplicationError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::update_application::UpdateApplicationError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_application::UpdateApplicationError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::update_application::UpdateApplicationError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::update_application::UpdateApplicationError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_application::UpdateApplicationError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::update_application::UpdateApplicationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl ::std::error::Error for Error {
    fn source(&self) -> std::option::Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            Error::BadRequestException(inner) => inner.source(),
            Error::ConflictException(inner) => inner.source(),
            Error::ForbiddenException(inner) => inner.source(),
            Error::InternalServerErrorException(inner) => inner.source(),
            Error::NotFoundException(inner) => inner.source(),
            Error::TooManyRequestsException(inner) => inner.source(),
            Error::Unhandled(inner) => inner.source(),
        }
    }
}
impl ::aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::BadRequestException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::ForbiddenException(e) => e.request_id(),
            Self::InternalServerErrorException(e) => e.request_id(),
            Self::NotFoundException(e) => e.request_id(),
            Self::TooManyRequestsException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
