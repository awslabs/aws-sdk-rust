// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>One of the parameters in the request is invalid.</p>
    BadRequestException(crate::error::BadRequestException),
    /// <p>The resource already exists.</p>
    ConflictException(crate::error::ConflictException),
    /// <p>The client is not authenticated.</p>
    ForbiddenException(crate::error::ForbiddenException),
    /// <p>The AWS Serverless Application Repository service encountered an internal error.</p>
    InternalServerErrorException(crate::error::InternalServerErrorException),
    /// <p>The resource (for example, an access policy statement) specified in the request doesn't exist.</p>
    NotFoundException(crate::error::NotFoundException),
    /// <p>The client is sending more than the allowed number of requests per unit of time.</p>
    TooManyRequestsException(crate::error::TooManyRequestsException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::BadRequestException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::ForbiddenException(inner) => inner.fmt(f),
            Error::InternalServerErrorException(inner) => inner.fmt(f),
            Error::NotFoundException(inner) => inner.fmt(f),
            Error::TooManyRequestsException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateApplicationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateApplicationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateApplicationError> for Error {
    fn from(err: crate::error::CreateApplicationError) -> Self {
        match err {
            crate::error::CreateApplicationError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreateApplicationError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateApplicationError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::CreateApplicationError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::CreateApplicationError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::CreateApplicationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateApplicationVersionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateApplicationVersionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateApplicationVersionError> for Error {
    fn from(err: crate::error::CreateApplicationVersionError) -> Self {
        match err {
            crate::error::CreateApplicationVersionError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreateApplicationVersionError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateApplicationVersionError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::CreateApplicationVersionError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::CreateApplicationVersionError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::CreateApplicationVersionError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateCloudFormationChangeSetError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateCloudFormationChangeSetError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateCloudFormationChangeSetError> for Error {
    fn from(err: crate::error::CreateCloudFormationChangeSetError) -> Self {
        match err {
            crate::error::CreateCloudFormationChangeSetError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreateCloudFormationChangeSetError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::CreateCloudFormationChangeSetError::InternalServerErrorException(
                inner,
            ) => Error::InternalServerErrorException(inner),
            crate::error::CreateCloudFormationChangeSetError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::CreateCloudFormationChangeSetError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateCloudFormationTemplateError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateCloudFormationTemplateError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateCloudFormationTemplateError> for Error {
    fn from(err: crate::error::CreateCloudFormationTemplateError) -> Self {
        match err {
            crate::error::CreateCloudFormationTemplateError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreateCloudFormationTemplateError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::CreateCloudFormationTemplateError::InternalServerErrorException(
                inner,
            ) => Error::InternalServerErrorException(inner),
            crate::error::CreateCloudFormationTemplateError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::CreateCloudFormationTemplateError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::CreateCloudFormationTemplateError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteApplicationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteApplicationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteApplicationError> for Error {
    fn from(err: crate::error::DeleteApplicationError) -> Self {
        match err {
            crate::error::DeleteApplicationError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteApplicationError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteApplicationError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DeleteApplicationError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::DeleteApplicationError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteApplicationError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DeleteApplicationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetApplicationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetApplicationError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetApplicationError> for Error {
    fn from(err: crate::error::GetApplicationError) -> Self {
        match err {
            crate::error::GetApplicationError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetApplicationError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetApplicationError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::GetApplicationError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetApplicationError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetApplicationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetApplicationPolicyError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetApplicationPolicyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetApplicationPolicyError> for Error {
    fn from(err: crate::error::GetApplicationPolicyError) -> Self {
        match err {
            crate::error::GetApplicationPolicyError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetApplicationPolicyError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetApplicationPolicyError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::GetApplicationPolicyError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetApplicationPolicyError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetApplicationPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetCloudFormationTemplateError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetCloudFormationTemplateError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetCloudFormationTemplateError> for Error {
    fn from(err: crate::error::GetCloudFormationTemplateError) -> Self {
        match err {
            crate::error::GetCloudFormationTemplateError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetCloudFormationTemplateError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetCloudFormationTemplateError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::GetCloudFormationTemplateError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetCloudFormationTemplateError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetCloudFormationTemplateError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListApplicationDependenciesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListApplicationDependenciesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListApplicationDependenciesError> for Error {
    fn from(err: crate::error::ListApplicationDependenciesError) -> Self {
        match err {
            crate::error::ListApplicationDependenciesError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::ListApplicationDependenciesError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::ListApplicationDependenciesError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::ListApplicationDependenciesError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::ListApplicationDependenciesError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::ListApplicationDependenciesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListApplicationsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListApplicationsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListApplicationsError> for Error {
    fn from(err: crate::error::ListApplicationsError) -> Self {
        match err {
            crate::error::ListApplicationsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::ListApplicationsError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::ListApplicationsError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::ListApplicationsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::ListApplicationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListApplicationVersionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListApplicationVersionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListApplicationVersionsError> for Error {
    fn from(err: crate::error::ListApplicationVersionsError) -> Self {
        match err {
            crate::error::ListApplicationVersionsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::ListApplicationVersionsError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::ListApplicationVersionsError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::ListApplicationVersionsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::ListApplicationVersionsError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::ListApplicationVersionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutApplicationPolicyError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::PutApplicationPolicyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutApplicationPolicyError> for Error {
    fn from(err: crate::error::PutApplicationPolicyError) -> Self {
        match err {
            crate::error::PutApplicationPolicyError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::PutApplicationPolicyError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::PutApplicationPolicyError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::PutApplicationPolicyError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::PutApplicationPolicyError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::PutApplicationPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UnshareApplicationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UnshareApplicationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UnshareApplicationError> for Error {
    fn from(err: crate::error::UnshareApplicationError) -> Self {
        match err {
            crate::error::UnshareApplicationError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UnshareApplicationError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::UnshareApplicationError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::UnshareApplicationError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UnshareApplicationError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::UnshareApplicationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateApplicationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateApplicationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateApplicationError> for Error {
    fn from(err: crate::error::UpdateApplicationError) -> Self {
        match err {
            crate::error::UpdateApplicationError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateApplicationError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateApplicationError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::UpdateApplicationError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::UpdateApplicationError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateApplicationError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::UpdateApplicationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::BadRequestException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::ForbiddenException(e) => e.request_id(),
            Self::InternalServerErrorException(e) => e.request_id(),
            Self::NotFoundException(e) => e.request_id(),
            Self::TooManyRequestsException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
