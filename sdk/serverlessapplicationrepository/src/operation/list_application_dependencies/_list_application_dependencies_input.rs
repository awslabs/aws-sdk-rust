// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListApplicationDependenciesInput {
    /// <p>The Amazon Resource Name (ARN) of the application.</p>
    #[doc(hidden)]
    pub application_id: std::option::Option<std::string::String>,
    /// <p>The total number of items to return.</p>
    #[doc(hidden)]
    pub max_items: i32,
    /// <p>A token to specify where to start paginating.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The semantic version of the application to get.</p>
    #[doc(hidden)]
    pub semantic_version: std::option::Option<std::string::String>,
}
impl ListApplicationDependenciesInput {
    /// <p>The Amazon Resource Name (ARN) of the application.</p>
    pub fn application_id(&self) -> std::option::Option<&str> {
        self.application_id.as_deref()
    }
    /// <p>The total number of items to return.</p>
    pub fn max_items(&self) -> i32 {
        self.max_items
    }
    /// <p>A token to specify where to start paginating.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The semantic version of the application to get.</p>
    pub fn semantic_version(&self) -> std::option::Option<&str> {
        self.semantic_version.as_deref()
    }
}
impl ListApplicationDependenciesInput {
    /// Creates a new builder-style object to manufacture [`ListApplicationDependenciesInput`](crate::operation::list_application_dependencies::ListApplicationDependenciesInput).
    pub fn builder() -> crate::operation::list_application_dependencies::builders::ListApplicationDependenciesInputBuilder{
        crate::operation::list_application_dependencies::builders::ListApplicationDependenciesInputBuilder::default()
    }
}

/// A builder for [`ListApplicationDependenciesInput`](crate::operation::list_application_dependencies::ListApplicationDependenciesInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListApplicationDependenciesInputBuilder {
    pub(crate) application_id: std::option::Option<std::string::String>,
    pub(crate) max_items: std::option::Option<i32>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) semantic_version: std::option::Option<std::string::String>,
}
impl ListApplicationDependenciesInputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the application.</p>
    pub fn application_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.application_id = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the application.</p>
    pub fn set_application_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.application_id = input;
        self
    }
    /// <p>The total number of items to return.</p>
    pub fn max_items(mut self, input: i32) -> Self {
        self.max_items = Some(input);
        self
    }
    /// <p>The total number of items to return.</p>
    pub fn set_max_items(mut self, input: std::option::Option<i32>) -> Self {
        self.max_items = input;
        self
    }
    /// <p>A token to specify where to start paginating.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>A token to specify where to start paginating.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The semantic version of the application to get.</p>
    pub fn semantic_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.semantic_version = Some(input.into());
        self
    }
    /// <p>The semantic version of the application to get.</p>
    pub fn set_semantic_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.semantic_version = input;
        self
    }
    /// Consumes the builder and constructs a [`ListApplicationDependenciesInput`](crate::operation::list_application_dependencies::ListApplicationDependenciesInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::list_application_dependencies::ListApplicationDependenciesInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::list_application_dependencies::ListApplicationDependenciesInput {
                application_id: self.application_id,
                max_items: self.max_items.unwrap_or_default(),
                next_token: self.next_token,
                semantic_version: self.semantic_version,
            },
        )
    }
}
