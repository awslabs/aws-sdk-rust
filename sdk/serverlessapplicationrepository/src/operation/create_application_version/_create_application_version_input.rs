// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateApplicationVersionInput {
    /// <p>The Amazon Resource Name (ARN) of the application.</p>
    pub application_id: ::std::option::Option<::std::string::String>,
    /// <p>The semantic version of the new version.</p>
    pub semantic_version: ::std::option::Option<::std::string::String>,
    /// <p>A link to the S3 object that contains the ZIP archive of the source code for this version of your application.</p>
    /// <p>Maximum size 50 MB</p>
    pub source_code_archive_url: ::std::option::Option<::std::string::String>,
    /// <p>A link to a public repository for the source code of your application, for example the URL of a specific GitHub commit.</p>
    pub source_code_url: ::std::option::Option<::std::string::String>,
    /// <p>The raw packaged AWS SAM template of your application.</p>
    pub template_body: ::std::option::Option<::std::string::String>,
    /// <p>A link to the packaged AWS SAM template of your application.</p>
    pub template_url: ::std::option::Option<::std::string::String>,
}
impl CreateApplicationVersionInput {
    /// <p>The Amazon Resource Name (ARN) of the application.</p>
    pub fn application_id(&self) -> ::std::option::Option<&str> {
        self.application_id.as_deref()
    }
    /// <p>The semantic version of the new version.</p>
    pub fn semantic_version(&self) -> ::std::option::Option<&str> {
        self.semantic_version.as_deref()
    }
    /// <p>A link to the S3 object that contains the ZIP archive of the source code for this version of your application.</p>
    /// <p>Maximum size 50 MB</p>
    pub fn source_code_archive_url(&self) -> ::std::option::Option<&str> {
        self.source_code_archive_url.as_deref()
    }
    /// <p>A link to a public repository for the source code of your application, for example the URL of a specific GitHub commit.</p>
    pub fn source_code_url(&self) -> ::std::option::Option<&str> {
        self.source_code_url.as_deref()
    }
    /// <p>The raw packaged AWS SAM template of your application.</p>
    pub fn template_body(&self) -> ::std::option::Option<&str> {
        self.template_body.as_deref()
    }
    /// <p>A link to the packaged AWS SAM template of your application.</p>
    pub fn template_url(&self) -> ::std::option::Option<&str> {
        self.template_url.as_deref()
    }
}
impl CreateApplicationVersionInput {
    /// Creates a new builder-style object to manufacture [`CreateApplicationVersionInput`](crate::operation::create_application_version::CreateApplicationVersionInput).
    pub fn builder() -> crate::operation::create_application_version::builders::CreateApplicationVersionInputBuilder {
        crate::operation::create_application_version::builders::CreateApplicationVersionInputBuilder::default()
    }
}

/// A builder for [`CreateApplicationVersionInput`](crate::operation::create_application_version::CreateApplicationVersionInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateApplicationVersionInputBuilder {
    pub(crate) application_id: ::std::option::Option<::std::string::String>,
    pub(crate) semantic_version: ::std::option::Option<::std::string::String>,
    pub(crate) source_code_archive_url: ::std::option::Option<::std::string::String>,
    pub(crate) source_code_url: ::std::option::Option<::std::string::String>,
    pub(crate) template_body: ::std::option::Option<::std::string::String>,
    pub(crate) template_url: ::std::option::Option<::std::string::String>,
}
impl CreateApplicationVersionInputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the application.</p>
    /// This field is required.
    pub fn application_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.application_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the application.</p>
    pub fn set_application_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.application_id = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the application.</p>
    pub fn get_application_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.application_id
    }
    /// <p>The semantic version of the new version.</p>
    /// This field is required.
    pub fn semantic_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.semantic_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The semantic version of the new version.</p>
    pub fn set_semantic_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.semantic_version = input;
        self
    }
    /// <p>The semantic version of the new version.</p>
    pub fn get_semantic_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.semantic_version
    }
    /// <p>A link to the S3 object that contains the ZIP archive of the source code for this version of your application.</p>
    /// <p>Maximum size 50 MB</p>
    pub fn source_code_archive_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_code_archive_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A link to the S3 object that contains the ZIP archive of the source code for this version of your application.</p>
    /// <p>Maximum size 50 MB</p>
    pub fn set_source_code_archive_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_code_archive_url = input;
        self
    }
    /// <p>A link to the S3 object that contains the ZIP archive of the source code for this version of your application.</p>
    /// <p>Maximum size 50 MB</p>
    pub fn get_source_code_archive_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_code_archive_url
    }
    /// <p>A link to a public repository for the source code of your application, for example the URL of a specific GitHub commit.</p>
    pub fn source_code_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_code_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A link to a public repository for the source code of your application, for example the URL of a specific GitHub commit.</p>
    pub fn set_source_code_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_code_url = input;
        self
    }
    /// <p>A link to a public repository for the source code of your application, for example the URL of a specific GitHub commit.</p>
    pub fn get_source_code_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_code_url
    }
    /// <p>The raw packaged AWS SAM template of your application.</p>
    pub fn template_body(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.template_body = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The raw packaged AWS SAM template of your application.</p>
    pub fn set_template_body(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.template_body = input;
        self
    }
    /// <p>The raw packaged AWS SAM template of your application.</p>
    pub fn get_template_body(&self) -> &::std::option::Option<::std::string::String> {
        &self.template_body
    }
    /// <p>A link to the packaged AWS SAM template of your application.</p>
    pub fn template_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.template_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A link to the packaged AWS SAM template of your application.</p>
    pub fn set_template_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.template_url = input;
        self
    }
    /// <p>A link to the packaged AWS SAM template of your application.</p>
    pub fn get_template_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.template_url
    }
    /// Consumes the builder and constructs a [`CreateApplicationVersionInput`](crate::operation::create_application_version::CreateApplicationVersionInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_application_version::CreateApplicationVersionInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::create_application_version::CreateApplicationVersionInput {
            application_id: self.application_id,
            semantic_version: self.semantic_version,
            source_code_archive_url: self.source_code_archive_url,
            source_code_url: self.source_code_url,
            template_body: self.template_body,
            template_url: self.template_url,
        })
    }
}
