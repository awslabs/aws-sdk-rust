// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An application version summary.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct VersionSummary {
    /// <p>The application Amazon Resource Name (ARN).</p>
    #[doc(hidden)]
    pub application_id: std::option::Option<std::string::String>,
    /// <p>The date and time this resource was created.</p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<std::string::String>,
    /// <p>The semantic version of the application:</p>
    /// <p> <a href="https://semver.org/">https://semver.org/</a> </p>
    #[doc(hidden)]
    pub semantic_version: std::option::Option<std::string::String>,
    /// <p>A link to a public repository for the source code of your application, for example the URL of a specific GitHub commit.</p>
    #[doc(hidden)]
    pub source_code_url: std::option::Option<std::string::String>,
}
impl VersionSummary {
    /// <p>The application Amazon Resource Name (ARN).</p>
    pub fn application_id(&self) -> std::option::Option<&str> {
        self.application_id.as_deref()
    }
    /// <p>The date and time this resource was created.</p>
    pub fn creation_time(&self) -> std::option::Option<&str> {
        self.creation_time.as_deref()
    }
    /// <p>The semantic version of the application:</p>
    /// <p> <a href="https://semver.org/">https://semver.org/</a> </p>
    pub fn semantic_version(&self) -> std::option::Option<&str> {
        self.semantic_version.as_deref()
    }
    /// <p>A link to a public repository for the source code of your application, for example the URL of a specific GitHub commit.</p>
    pub fn source_code_url(&self) -> std::option::Option<&str> {
        self.source_code_url.as_deref()
    }
}
impl VersionSummary {
    /// Creates a new builder-style object to manufacture [`VersionSummary`](crate::types::VersionSummary).
    pub fn builder() -> crate::types::builders::VersionSummaryBuilder {
        crate::types::builders::VersionSummaryBuilder::default()
    }
}

/// A builder for [`VersionSummary`](crate::types::VersionSummary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct VersionSummaryBuilder {
    pub(crate) application_id: std::option::Option<std::string::String>,
    pub(crate) creation_time: std::option::Option<std::string::String>,
    pub(crate) semantic_version: std::option::Option<std::string::String>,
    pub(crate) source_code_url: std::option::Option<std::string::String>,
}
impl VersionSummaryBuilder {
    /// <p>The application Amazon Resource Name (ARN).</p>
    pub fn application_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.application_id = Some(input.into());
        self
    }
    /// <p>The application Amazon Resource Name (ARN).</p>
    pub fn set_application_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.application_id = input;
        self
    }
    /// <p>The date and time this resource was created.</p>
    pub fn creation_time(mut self, input: impl Into<std::string::String>) -> Self {
        self.creation_time = Some(input.into());
        self
    }
    /// <p>The date and time this resource was created.</p>
    pub fn set_creation_time(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The semantic version of the application:</p>
    /// <p> <a href="https://semver.org/">https://semver.org/</a> </p>
    pub fn semantic_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.semantic_version = Some(input.into());
        self
    }
    /// <p>The semantic version of the application:</p>
    /// <p> <a href="https://semver.org/">https://semver.org/</a> </p>
    pub fn set_semantic_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.semantic_version = input;
        self
    }
    /// <p>A link to a public repository for the source code of your application, for example the URL of a specific GitHub commit.</p>
    pub fn source_code_url(mut self, input: impl Into<std::string::String>) -> Self {
        self.source_code_url = Some(input.into());
        self
    }
    /// <p>A link to a public repository for the source code of your application, for example the URL of a specific GitHub commit.</p>
    pub fn set_source_code_url(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.source_code_url = input;
        self
    }
    /// Consumes the builder and constructs a [`VersionSummary`](crate::types::VersionSummary).
    pub fn build(self) -> crate::types::VersionSummary {
        crate::types::VersionSummary {
            application_id: self.application_id,
            creation_time: self.creation_time,
            semantic_version: self.semantic_version,
            source_code_url: self.source_code_url,
        }
    }
}
