// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// Operation shape for `AbortDocumentVersionUpload`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`abort_document_version_upload`](crate::client::fluent_builders::AbortDocumentVersionUpload).
///
/// `ParseStrictResponse` impl for `AbortDocumentVersionUpload`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct AbortDocumentVersionUpload {
    _private: (),
}
impl AbortDocumentVersionUpload {
    /// Creates a new builder-style object to manufacture [`AbortDocumentVersionUploadInput`](crate::input::AbortDocumentVersionUploadInput).
    pub fn builder() -> crate::input::abort_document_version_upload_input::Builder {
        crate::input::abort_document_version_upload_input::Builder::default()
    }
    /// Creates a new `AbortDocumentVersionUpload` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for AbortDocumentVersionUpload {
    type Output = std::result::Result<
        crate::output::AbortDocumentVersionUploadOutput,
        crate::error::AbortDocumentVersionUploadError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::protocol_serde::shape_abort_document_version_upload::de_abort_document_version_upload_http_error(response)
        } else {
            crate::protocol_serde::shape_abort_document_version_upload::de_abort_document_version_upload_http_response(response)
        }
    }
}

/// Operation shape for `ActivateUser`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`activate_user`](crate::client::fluent_builders::ActivateUser).
///
/// `ParseStrictResponse` impl for `ActivateUser`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ActivateUser {
    _private: (),
}
impl ActivateUser {
    /// Creates a new builder-style object to manufacture [`ActivateUserInput`](crate::input::ActivateUserInput).
    pub fn builder() -> crate::input::activate_user_input::Builder {
        crate::input::activate_user_input::Builder::default()
    }
    /// Creates a new `ActivateUser` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ActivateUser {
    type Output =
        std::result::Result<crate::output::ActivateUserOutput, crate::error::ActivateUserError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_activate_user::de_activate_user_http_error(response)
        } else {
            crate::protocol_serde::shape_activate_user::de_activate_user_http_response(response)
        }
    }
}

/// Operation shape for `AddResourcePermissions`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`add_resource_permissions`](crate::client::fluent_builders::AddResourcePermissions).
///
/// `ParseStrictResponse` impl for `AddResourcePermissions`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct AddResourcePermissions {
    _private: (),
}
impl AddResourcePermissions {
    /// Creates a new builder-style object to manufacture [`AddResourcePermissionsInput`](crate::input::AddResourcePermissionsInput).
    pub fn builder() -> crate::input::add_resource_permissions_input::Builder {
        crate::input::add_resource_permissions_input::Builder::default()
    }
    /// Creates a new `AddResourcePermissions` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for AddResourcePermissions {
    type Output = std::result::Result<
        crate::output::AddResourcePermissionsOutput,
        crate::error::AddResourcePermissionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 201 {
            crate::protocol_serde::shape_add_resource_permissions::de_add_resource_permissions_http_error(response)
        } else {
            crate::protocol_serde::shape_add_resource_permissions::de_add_resource_permissions_http_response(response)
        }
    }
}

/// Operation shape for `CreateComment`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_comment`](crate::client::fluent_builders::CreateComment).
///
/// `ParseStrictResponse` impl for `CreateComment`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateComment {
    _private: (),
}
impl CreateComment {
    /// Creates a new builder-style object to manufacture [`CreateCommentInput`](crate::input::CreateCommentInput).
    pub fn builder() -> crate::input::create_comment_input::Builder {
        crate::input::create_comment_input::Builder::default()
    }
    /// Creates a new `CreateComment` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateComment {
    type Output =
        std::result::Result<crate::output::CreateCommentOutput, crate::error::CreateCommentError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 201 {
            crate::protocol_serde::shape_create_comment::de_create_comment_http_error(response)
        } else {
            crate::protocol_serde::shape_create_comment::de_create_comment_http_response(response)
        }
    }
}

/// Operation shape for `CreateCustomMetadata`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_custom_metadata`](crate::client::fluent_builders::CreateCustomMetadata).
///
/// `ParseStrictResponse` impl for `CreateCustomMetadata`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateCustomMetadata {
    _private: (),
}
impl CreateCustomMetadata {
    /// Creates a new builder-style object to manufacture [`CreateCustomMetadataInput`](crate::input::CreateCustomMetadataInput).
    pub fn builder() -> crate::input::create_custom_metadata_input::Builder {
        crate::input::create_custom_metadata_input::Builder::default()
    }
    /// Creates a new `CreateCustomMetadata` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateCustomMetadata {
    type Output = std::result::Result<
        crate::output::CreateCustomMetadataOutput,
        crate::error::CreateCustomMetadataError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_create_custom_metadata::de_create_custom_metadata_http_error(response)
        } else {
            crate::protocol_serde::shape_create_custom_metadata::de_create_custom_metadata_http_response(response)
        }
    }
}

/// Operation shape for `CreateFolder`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_folder`](crate::client::fluent_builders::CreateFolder).
///
/// `ParseStrictResponse` impl for `CreateFolder`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateFolder {
    _private: (),
}
impl CreateFolder {
    /// Creates a new builder-style object to manufacture [`CreateFolderInput`](crate::input::CreateFolderInput).
    pub fn builder() -> crate::input::create_folder_input::Builder {
        crate::input::create_folder_input::Builder::default()
    }
    /// Creates a new `CreateFolder` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateFolder {
    type Output =
        std::result::Result<crate::output::CreateFolderOutput, crate::error::CreateFolderError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 201 {
            crate::protocol_serde::shape_create_folder::de_create_folder_http_error(response)
        } else {
            crate::protocol_serde::shape_create_folder::de_create_folder_http_response(response)
        }
    }
}

/// Operation shape for `CreateLabels`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_labels`](crate::client::fluent_builders::CreateLabels).
///
/// `ParseStrictResponse` impl for `CreateLabels`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateLabels {
    _private: (),
}
impl CreateLabels {
    /// Creates a new builder-style object to manufacture [`CreateLabelsInput`](crate::input::CreateLabelsInput).
    pub fn builder() -> crate::input::create_labels_input::Builder {
        crate::input::create_labels_input::Builder::default()
    }
    /// Creates a new `CreateLabels` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateLabels {
    type Output =
        std::result::Result<crate::output::CreateLabelsOutput, crate::error::CreateLabelsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_create_labels::de_create_labels_http_error(response)
        } else {
            crate::protocol_serde::shape_create_labels::de_create_labels_http_response(response)
        }
    }
}

/// Operation shape for `CreateNotificationSubscription`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_notification_subscription`](crate::client::fluent_builders::CreateNotificationSubscription).
///
/// `ParseStrictResponse` impl for `CreateNotificationSubscription`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateNotificationSubscription {
    _private: (),
}
impl CreateNotificationSubscription {
    /// Creates a new builder-style object to manufacture [`CreateNotificationSubscriptionInput`](crate::input::CreateNotificationSubscriptionInput).
    pub fn builder() -> crate::input::create_notification_subscription_input::Builder {
        crate::input::create_notification_subscription_input::Builder::default()
    }
    /// Creates a new `CreateNotificationSubscription` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateNotificationSubscription {
    type Output = std::result::Result<
        crate::output::CreateNotificationSubscriptionOutput,
        crate::error::CreateNotificationSubscriptionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_create_notification_subscription::de_create_notification_subscription_http_error(response)
        } else {
            crate::protocol_serde::shape_create_notification_subscription::de_create_notification_subscription_http_response(response)
        }
    }
}

/// Operation shape for `CreateUser`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_user`](crate::client::fluent_builders::CreateUser).
///
/// `ParseStrictResponse` impl for `CreateUser`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateUser {
    _private: (),
}
impl CreateUser {
    /// Creates a new builder-style object to manufacture [`CreateUserInput`](crate::input::CreateUserInput).
    pub fn builder() -> crate::input::create_user_input::Builder {
        crate::input::create_user_input::Builder::default()
    }
    /// Creates a new `CreateUser` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateUser {
    type Output =
        std::result::Result<crate::output::CreateUserOutput, crate::error::CreateUserError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 201 {
            crate::protocol_serde::shape_create_user::de_create_user_http_error(response)
        } else {
            crate::protocol_serde::shape_create_user::de_create_user_http_response(response)
        }
    }
}

/// Operation shape for `DeactivateUser`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`deactivate_user`](crate::client::fluent_builders::DeactivateUser).
///
/// `ParseStrictResponse` impl for `DeactivateUser`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeactivateUser {
    _private: (),
}
impl DeactivateUser {
    /// Creates a new builder-style object to manufacture [`DeactivateUserInput`](crate::input::DeactivateUserInput).
    pub fn builder() -> crate::input::deactivate_user_input::Builder {
        crate::input::deactivate_user_input::Builder::default()
    }
    /// Creates a new `DeactivateUser` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeactivateUser {
    type Output =
        std::result::Result<crate::output::DeactivateUserOutput, crate::error::DeactivateUserError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::protocol_serde::shape_deactivate_user::de_deactivate_user_http_error(response)
        } else {
            crate::protocol_serde::shape_deactivate_user::de_deactivate_user_http_response(response)
        }
    }
}

/// Operation shape for `DeleteComment`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_comment`](crate::client::fluent_builders::DeleteComment).
///
/// `ParseStrictResponse` impl for `DeleteComment`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteComment {
    _private: (),
}
impl DeleteComment {
    /// Creates a new builder-style object to manufacture [`DeleteCommentInput`](crate::input::DeleteCommentInput).
    pub fn builder() -> crate::input::delete_comment_input::Builder {
        crate::input::delete_comment_input::Builder::default()
    }
    /// Creates a new `DeleteComment` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteComment {
    type Output =
        std::result::Result<crate::output::DeleteCommentOutput, crate::error::DeleteCommentError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::protocol_serde::shape_delete_comment::de_delete_comment_http_error(response)
        } else {
            crate::protocol_serde::shape_delete_comment::de_delete_comment_http_response(response)
        }
    }
}

/// Operation shape for `DeleteCustomMetadata`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_custom_metadata`](crate::client::fluent_builders::DeleteCustomMetadata).
///
/// `ParseStrictResponse` impl for `DeleteCustomMetadata`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteCustomMetadata {
    _private: (),
}
impl DeleteCustomMetadata {
    /// Creates a new builder-style object to manufacture [`DeleteCustomMetadataInput`](crate::input::DeleteCustomMetadataInput).
    pub fn builder() -> crate::input::delete_custom_metadata_input::Builder {
        crate::input::delete_custom_metadata_input::Builder::default()
    }
    /// Creates a new `DeleteCustomMetadata` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteCustomMetadata {
    type Output = std::result::Result<
        crate::output::DeleteCustomMetadataOutput,
        crate::error::DeleteCustomMetadataError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_delete_custom_metadata::de_delete_custom_metadata_http_error(response)
        } else {
            crate::protocol_serde::shape_delete_custom_metadata::de_delete_custom_metadata_http_response(response)
        }
    }
}

/// Operation shape for `DeleteDocument`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_document`](crate::client::fluent_builders::DeleteDocument).
///
/// `ParseStrictResponse` impl for `DeleteDocument`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteDocument {
    _private: (),
}
impl DeleteDocument {
    /// Creates a new builder-style object to manufacture [`DeleteDocumentInput`](crate::input::DeleteDocumentInput).
    pub fn builder() -> crate::input::delete_document_input::Builder {
        crate::input::delete_document_input::Builder::default()
    }
    /// Creates a new `DeleteDocument` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteDocument {
    type Output =
        std::result::Result<crate::output::DeleteDocumentOutput, crate::error::DeleteDocumentError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::protocol_serde::shape_delete_document::de_delete_document_http_error(response)
        } else {
            crate::protocol_serde::shape_delete_document::de_delete_document_http_response(response)
        }
    }
}

/// Operation shape for `DeleteDocumentVersion`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_document_version`](crate::client::fluent_builders::DeleteDocumentVersion).
///
/// `ParseStrictResponse` impl for `DeleteDocumentVersion`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteDocumentVersion {
    _private: (),
}
impl DeleteDocumentVersion {
    /// Creates a new builder-style object to manufacture [`DeleteDocumentVersionInput`](crate::input::DeleteDocumentVersionInput).
    pub fn builder() -> crate::input::delete_document_version_input::Builder {
        crate::input::delete_document_version_input::Builder::default()
    }
    /// Creates a new `DeleteDocumentVersion` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteDocumentVersion {
    type Output = std::result::Result<
        crate::output::DeleteDocumentVersionOutput,
        crate::error::DeleteDocumentVersionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::protocol_serde::shape_delete_document_version::de_delete_document_version_http_error(response)
        } else {
            crate::protocol_serde::shape_delete_document_version::de_delete_document_version_http_response(response)
        }
    }
}

/// Operation shape for `DeleteFolder`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_folder`](crate::client::fluent_builders::DeleteFolder).
///
/// `ParseStrictResponse` impl for `DeleteFolder`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteFolder {
    _private: (),
}
impl DeleteFolder {
    /// Creates a new builder-style object to manufacture [`DeleteFolderInput`](crate::input::DeleteFolderInput).
    pub fn builder() -> crate::input::delete_folder_input::Builder {
        crate::input::delete_folder_input::Builder::default()
    }
    /// Creates a new `DeleteFolder` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteFolder {
    type Output =
        std::result::Result<crate::output::DeleteFolderOutput, crate::error::DeleteFolderError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::protocol_serde::shape_delete_folder::de_delete_folder_http_error(response)
        } else {
            crate::protocol_serde::shape_delete_folder::de_delete_folder_http_response(response)
        }
    }
}

/// Operation shape for `DeleteFolderContents`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_folder_contents`](crate::client::fluent_builders::DeleteFolderContents).
///
/// `ParseStrictResponse` impl for `DeleteFolderContents`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteFolderContents {
    _private: (),
}
impl DeleteFolderContents {
    /// Creates a new builder-style object to manufacture [`DeleteFolderContentsInput`](crate::input::DeleteFolderContentsInput).
    pub fn builder() -> crate::input::delete_folder_contents_input::Builder {
        crate::input::delete_folder_contents_input::Builder::default()
    }
    /// Creates a new `DeleteFolderContents` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteFolderContents {
    type Output = std::result::Result<
        crate::output::DeleteFolderContentsOutput,
        crate::error::DeleteFolderContentsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::protocol_serde::shape_delete_folder_contents::de_delete_folder_contents_http_error(response)
        } else {
            crate::protocol_serde::shape_delete_folder_contents::de_delete_folder_contents_http_response(response)
        }
    }
}

/// Operation shape for `DeleteLabels`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_labels`](crate::client::fluent_builders::DeleteLabels).
///
/// `ParseStrictResponse` impl for `DeleteLabels`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteLabels {
    _private: (),
}
impl DeleteLabels {
    /// Creates a new builder-style object to manufacture [`DeleteLabelsInput`](crate::input::DeleteLabelsInput).
    pub fn builder() -> crate::input::delete_labels_input::Builder {
        crate::input::delete_labels_input::Builder::default()
    }
    /// Creates a new `DeleteLabels` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteLabels {
    type Output =
        std::result::Result<crate::output::DeleteLabelsOutput, crate::error::DeleteLabelsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_delete_labels::de_delete_labels_http_error(response)
        } else {
            crate::protocol_serde::shape_delete_labels::de_delete_labels_http_response(response)
        }
    }
}

/// Operation shape for `DeleteNotificationSubscription`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_notification_subscription`](crate::client::fluent_builders::DeleteNotificationSubscription).
///
/// `ParseStrictResponse` impl for `DeleteNotificationSubscription`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteNotificationSubscription {
    _private: (),
}
impl DeleteNotificationSubscription {
    /// Creates a new builder-style object to manufacture [`DeleteNotificationSubscriptionInput`](crate::input::DeleteNotificationSubscriptionInput).
    pub fn builder() -> crate::input::delete_notification_subscription_input::Builder {
        crate::input::delete_notification_subscription_input::Builder::default()
    }
    /// Creates a new `DeleteNotificationSubscription` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteNotificationSubscription {
    type Output = std::result::Result<
        crate::output::DeleteNotificationSubscriptionOutput,
        crate::error::DeleteNotificationSubscriptionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_delete_notification_subscription::de_delete_notification_subscription_http_error(response)
        } else {
            crate::protocol_serde::shape_delete_notification_subscription::de_delete_notification_subscription_http_response(response)
        }
    }
}

/// Operation shape for `DeleteUser`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_user`](crate::client::fluent_builders::DeleteUser).
///
/// `ParseStrictResponse` impl for `DeleteUser`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteUser {
    _private: (),
}
impl DeleteUser {
    /// Creates a new builder-style object to manufacture [`DeleteUserInput`](crate::input::DeleteUserInput).
    pub fn builder() -> crate::input::delete_user_input::Builder {
        crate::input::delete_user_input::Builder::default()
    }
    /// Creates a new `DeleteUser` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteUser {
    type Output =
        std::result::Result<crate::output::DeleteUserOutput, crate::error::DeleteUserError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::protocol_serde::shape_delete_user::de_delete_user_http_error(response)
        } else {
            crate::protocol_serde::shape_delete_user::de_delete_user_http_response(response)
        }
    }
}

/// Operation shape for `DescribeActivities`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_activities`](crate::client::fluent_builders::DescribeActivities).
///
/// `ParseStrictResponse` impl for `DescribeActivities`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeActivities {
    _private: (),
}
impl DescribeActivities {
    /// Creates a new builder-style object to manufacture [`DescribeActivitiesInput`](crate::input::DescribeActivitiesInput).
    pub fn builder() -> crate::input::describe_activities_input::Builder {
        crate::input::describe_activities_input::Builder::default()
    }
    /// Creates a new `DescribeActivities` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeActivities {
    type Output = std::result::Result<
        crate::output::DescribeActivitiesOutput,
        crate::error::DescribeActivitiesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_activities::de_describe_activities_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_describe_activities::de_describe_activities_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `DescribeComments`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_comments`](crate::client::fluent_builders::DescribeComments).
///
/// `ParseStrictResponse` impl for `DescribeComments`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeComments {
    _private: (),
}
impl DescribeComments {
    /// Creates a new builder-style object to manufacture [`DescribeCommentsInput`](crate::input::DescribeCommentsInput).
    pub fn builder() -> crate::input::describe_comments_input::Builder {
        crate::input::describe_comments_input::Builder::default()
    }
    /// Creates a new `DescribeComments` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeComments {
    type Output = std::result::Result<
        crate::output::DescribeCommentsOutput,
        crate::error::DescribeCommentsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_comments::de_describe_comments_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_describe_comments::de_describe_comments_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `DescribeDocumentVersions`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_document_versions`](crate::client::fluent_builders::DescribeDocumentVersions).
///
/// `ParseStrictResponse` impl for `DescribeDocumentVersions`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeDocumentVersions {
    _private: (),
}
impl DescribeDocumentVersions {
    /// Creates a new builder-style object to manufacture [`DescribeDocumentVersionsInput`](crate::input::DescribeDocumentVersionsInput).
    pub fn builder() -> crate::input::describe_document_versions_input::Builder {
        crate::input::describe_document_versions_input::Builder::default()
    }
    /// Creates a new `DescribeDocumentVersions` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeDocumentVersions {
    type Output = std::result::Result<
        crate::output::DescribeDocumentVersionsOutput,
        crate::error::DescribeDocumentVersionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_document_versions::de_describe_document_versions_http_error(response)
        } else {
            crate::protocol_serde::shape_describe_document_versions::de_describe_document_versions_http_response(response)
        }
    }
}

/// Operation shape for `DescribeFolderContents`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_folder_contents`](crate::client::fluent_builders::DescribeFolderContents).
///
/// `ParseStrictResponse` impl for `DescribeFolderContents`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeFolderContents {
    _private: (),
}
impl DescribeFolderContents {
    /// Creates a new builder-style object to manufacture [`DescribeFolderContentsInput`](crate::input::DescribeFolderContentsInput).
    pub fn builder() -> crate::input::describe_folder_contents_input::Builder {
        crate::input::describe_folder_contents_input::Builder::default()
    }
    /// Creates a new `DescribeFolderContents` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeFolderContents {
    type Output = std::result::Result<
        crate::output::DescribeFolderContentsOutput,
        crate::error::DescribeFolderContentsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_folder_contents::de_describe_folder_contents_http_error(response)
        } else {
            crate::protocol_serde::shape_describe_folder_contents::de_describe_folder_contents_http_response(response)
        }
    }
}

/// Operation shape for `DescribeGroups`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_groups`](crate::client::fluent_builders::DescribeGroups).
///
/// `ParseStrictResponse` impl for `DescribeGroups`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeGroups {
    _private: (),
}
impl DescribeGroups {
    /// Creates a new builder-style object to manufacture [`DescribeGroupsInput`](crate::input::DescribeGroupsInput).
    pub fn builder() -> crate::input::describe_groups_input::Builder {
        crate::input::describe_groups_input::Builder::default()
    }
    /// Creates a new `DescribeGroups` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeGroups {
    type Output =
        std::result::Result<crate::output::DescribeGroupsOutput, crate::error::DescribeGroupsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_groups::de_describe_groups_http_error(response)
        } else {
            crate::protocol_serde::shape_describe_groups::de_describe_groups_http_response(response)
        }
    }
}

/// Operation shape for `DescribeNotificationSubscriptions`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_notification_subscriptions`](crate::client::fluent_builders::DescribeNotificationSubscriptions).
///
/// `ParseStrictResponse` impl for `DescribeNotificationSubscriptions`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeNotificationSubscriptions {
    _private: (),
}
impl DescribeNotificationSubscriptions {
    /// Creates a new builder-style object to manufacture [`DescribeNotificationSubscriptionsInput`](crate::input::DescribeNotificationSubscriptionsInput).
    pub fn builder() -> crate::input::describe_notification_subscriptions_input::Builder {
        crate::input::describe_notification_subscriptions_input::Builder::default()
    }
    /// Creates a new `DescribeNotificationSubscriptions` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeNotificationSubscriptions {
    type Output = std::result::Result<
        crate::output::DescribeNotificationSubscriptionsOutput,
        crate::error::DescribeNotificationSubscriptionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_notification_subscriptions::de_describe_notification_subscriptions_http_error(response)
        } else {
            crate::protocol_serde::shape_describe_notification_subscriptions::de_describe_notification_subscriptions_http_response(response)
        }
    }
}

/// Operation shape for `DescribeResourcePermissions`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_resource_permissions`](crate::client::fluent_builders::DescribeResourcePermissions).
///
/// `ParseStrictResponse` impl for `DescribeResourcePermissions`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeResourcePermissions {
    _private: (),
}
impl DescribeResourcePermissions {
    /// Creates a new builder-style object to manufacture [`DescribeResourcePermissionsInput`](crate::input::DescribeResourcePermissionsInput).
    pub fn builder() -> crate::input::describe_resource_permissions_input::Builder {
        crate::input::describe_resource_permissions_input::Builder::default()
    }
    /// Creates a new `DescribeResourcePermissions` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeResourcePermissions {
    type Output = std::result::Result<
        crate::output::DescribeResourcePermissionsOutput,
        crate::error::DescribeResourcePermissionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_resource_permissions::de_describe_resource_permissions_http_error(response)
        } else {
            crate::protocol_serde::shape_describe_resource_permissions::de_describe_resource_permissions_http_response(response)
        }
    }
}

/// Operation shape for `DescribeRootFolders`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_root_folders`](crate::client::fluent_builders::DescribeRootFolders).
///
/// `ParseStrictResponse` impl for `DescribeRootFolders`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeRootFolders {
    _private: (),
}
impl DescribeRootFolders {
    /// Creates a new builder-style object to manufacture [`DescribeRootFoldersInput`](crate::input::DescribeRootFoldersInput).
    pub fn builder() -> crate::input::describe_root_folders_input::Builder {
        crate::input::describe_root_folders_input::Builder::default()
    }
    /// Creates a new `DescribeRootFolders` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeRootFolders {
    type Output = std::result::Result<
        crate::output::DescribeRootFoldersOutput,
        crate::error::DescribeRootFoldersError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_root_folders::de_describe_root_folders_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_describe_root_folders::de_describe_root_folders_http_response(response)
        }
    }
}

/// Operation shape for `DescribeUsers`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_users`](crate::client::fluent_builders::DescribeUsers).
///
/// `ParseStrictResponse` impl for `DescribeUsers`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeUsers {
    _private: (),
}
impl DescribeUsers {
    /// Creates a new builder-style object to manufacture [`DescribeUsersInput`](crate::input::DescribeUsersInput).
    pub fn builder() -> crate::input::describe_users_input::Builder {
        crate::input::describe_users_input::Builder::default()
    }
    /// Creates a new `DescribeUsers` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeUsers {
    type Output =
        std::result::Result<crate::output::DescribeUsersOutput, crate::error::DescribeUsersError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_users::de_describe_users_http_error(response)
        } else {
            crate::protocol_serde::shape_describe_users::de_describe_users_http_response(response)
        }
    }
}

/// Operation shape for `GetCurrentUser`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_current_user`](crate::client::fluent_builders::GetCurrentUser).
///
/// `ParseStrictResponse` impl for `GetCurrentUser`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetCurrentUser {
    _private: (),
}
impl GetCurrentUser {
    /// Creates a new builder-style object to manufacture [`GetCurrentUserInput`](crate::input::GetCurrentUserInput).
    pub fn builder() -> crate::input::get_current_user_input::Builder {
        crate::input::get_current_user_input::Builder::default()
    }
    /// Creates a new `GetCurrentUser` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetCurrentUser {
    type Output =
        std::result::Result<crate::output::GetCurrentUserOutput, crate::error::GetCurrentUserError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_current_user::de_get_current_user_http_error(response)
        } else {
            crate::protocol_serde::shape_get_current_user::de_get_current_user_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `GetDocument`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_document`](crate::client::fluent_builders::GetDocument).
///
/// `ParseStrictResponse` impl for `GetDocument`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetDocument {
    _private: (),
}
impl GetDocument {
    /// Creates a new builder-style object to manufacture [`GetDocumentInput`](crate::input::GetDocumentInput).
    pub fn builder() -> crate::input::get_document_input::Builder {
        crate::input::get_document_input::Builder::default()
    }
    /// Creates a new `GetDocument` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetDocument {
    type Output =
        std::result::Result<crate::output::GetDocumentOutput, crate::error::GetDocumentError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_document::de_get_document_http_error(response)
        } else {
            crate::protocol_serde::shape_get_document::de_get_document_http_response(response)
        }
    }
}

/// Operation shape for `GetDocumentPath`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_document_path`](crate::client::fluent_builders::GetDocumentPath).
///
/// `ParseStrictResponse` impl for `GetDocumentPath`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetDocumentPath {
    _private: (),
}
impl GetDocumentPath {
    /// Creates a new builder-style object to manufacture [`GetDocumentPathInput`](crate::input::GetDocumentPathInput).
    pub fn builder() -> crate::input::get_document_path_input::Builder {
        crate::input::get_document_path_input::Builder::default()
    }
    /// Creates a new `GetDocumentPath` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetDocumentPath {
    type Output = std::result::Result<
        crate::output::GetDocumentPathOutput,
        crate::error::GetDocumentPathError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_document_path::de_get_document_path_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_get_document_path::de_get_document_path_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `GetDocumentVersion`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_document_version`](crate::client::fluent_builders::GetDocumentVersion).
///
/// `ParseStrictResponse` impl for `GetDocumentVersion`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetDocumentVersion {
    _private: (),
}
impl GetDocumentVersion {
    /// Creates a new builder-style object to manufacture [`GetDocumentVersionInput`](crate::input::GetDocumentVersionInput).
    pub fn builder() -> crate::input::get_document_version_input::Builder {
        crate::input::get_document_version_input::Builder::default()
    }
    /// Creates a new `GetDocumentVersion` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetDocumentVersion {
    type Output = std::result::Result<
        crate::output::GetDocumentVersionOutput,
        crate::error::GetDocumentVersionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_document_version::de_get_document_version_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_get_document_version::de_get_document_version_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `GetFolder`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_folder`](crate::client::fluent_builders::GetFolder).
///
/// `ParseStrictResponse` impl for `GetFolder`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetFolder {
    _private: (),
}
impl GetFolder {
    /// Creates a new builder-style object to manufacture [`GetFolderInput`](crate::input::GetFolderInput).
    pub fn builder() -> crate::input::get_folder_input::Builder {
        crate::input::get_folder_input::Builder::default()
    }
    /// Creates a new `GetFolder` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetFolder {
    type Output = std::result::Result<crate::output::GetFolderOutput, crate::error::GetFolderError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_folder::de_get_folder_http_error(response)
        } else {
            crate::protocol_serde::shape_get_folder::de_get_folder_http_response(response)
        }
    }
}

/// Operation shape for `GetFolderPath`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_folder_path`](crate::client::fluent_builders::GetFolderPath).
///
/// `ParseStrictResponse` impl for `GetFolderPath`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetFolderPath {
    _private: (),
}
impl GetFolderPath {
    /// Creates a new builder-style object to manufacture [`GetFolderPathInput`](crate::input::GetFolderPathInput).
    pub fn builder() -> crate::input::get_folder_path_input::Builder {
        crate::input::get_folder_path_input::Builder::default()
    }
    /// Creates a new `GetFolderPath` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetFolderPath {
    type Output =
        std::result::Result<crate::output::GetFolderPathOutput, crate::error::GetFolderPathError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_folder_path::de_get_folder_path_http_error(response)
        } else {
            crate::protocol_serde::shape_get_folder_path::de_get_folder_path_http_response(response)
        }
    }
}

/// Operation shape for `GetResources`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_resources`](crate::client::fluent_builders::GetResources).
///
/// `ParseStrictResponse` impl for `GetResources`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetResources {
    _private: (),
}
impl GetResources {
    /// Creates a new builder-style object to manufacture [`GetResourcesInput`](crate::input::GetResourcesInput).
    pub fn builder() -> crate::input::get_resources_input::Builder {
        crate::input::get_resources_input::Builder::default()
    }
    /// Creates a new `GetResources` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetResources {
    type Output =
        std::result::Result<crate::output::GetResourcesOutput, crate::error::GetResourcesError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_resources::de_get_resources_http_error(response)
        } else {
            crate::protocol_serde::shape_get_resources::de_get_resources_http_response(response)
        }
    }
}

/// Operation shape for `InitiateDocumentVersionUpload`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`initiate_document_version_upload`](crate::client::fluent_builders::InitiateDocumentVersionUpload).
///
/// `ParseStrictResponse` impl for `InitiateDocumentVersionUpload`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct InitiateDocumentVersionUpload {
    _private: (),
}
impl InitiateDocumentVersionUpload {
    /// Creates a new builder-style object to manufacture [`InitiateDocumentVersionUploadInput`](crate::input::InitiateDocumentVersionUploadInput).
    pub fn builder() -> crate::input::initiate_document_version_upload_input::Builder {
        crate::input::initiate_document_version_upload_input::Builder::default()
    }
    /// Creates a new `InitiateDocumentVersionUpload` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for InitiateDocumentVersionUpload {
    type Output = std::result::Result<
        crate::output::InitiateDocumentVersionUploadOutput,
        crate::error::InitiateDocumentVersionUploadError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 201 {
            crate::protocol_serde::shape_initiate_document_version_upload::de_initiate_document_version_upload_http_error(response)
        } else {
            crate::protocol_serde::shape_initiate_document_version_upload::de_initiate_document_version_upload_http_response(response)
        }
    }
}

/// Operation shape for `RemoveAllResourcePermissions`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`remove_all_resource_permissions`](crate::client::fluent_builders::RemoveAllResourcePermissions).
///
/// `ParseStrictResponse` impl for `RemoveAllResourcePermissions`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct RemoveAllResourcePermissions {
    _private: (),
}
impl RemoveAllResourcePermissions {
    /// Creates a new builder-style object to manufacture [`RemoveAllResourcePermissionsInput`](crate::input::RemoveAllResourcePermissionsInput).
    pub fn builder() -> crate::input::remove_all_resource_permissions_input::Builder {
        crate::input::remove_all_resource_permissions_input::Builder::default()
    }
    /// Creates a new `RemoveAllResourcePermissions` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for RemoveAllResourcePermissions {
    type Output = std::result::Result<
        crate::output::RemoveAllResourcePermissionsOutput,
        crate::error::RemoveAllResourcePermissionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::protocol_serde::shape_remove_all_resource_permissions::de_remove_all_resource_permissions_http_error(response)
        } else {
            crate::protocol_serde::shape_remove_all_resource_permissions::de_remove_all_resource_permissions_http_response(response)
        }
    }
}

/// Operation shape for `RemoveResourcePermission`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`remove_resource_permission`](crate::client::fluent_builders::RemoveResourcePermission).
///
/// `ParseStrictResponse` impl for `RemoveResourcePermission`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct RemoveResourcePermission {
    _private: (),
}
impl RemoveResourcePermission {
    /// Creates a new builder-style object to manufacture [`RemoveResourcePermissionInput`](crate::input::RemoveResourcePermissionInput).
    pub fn builder() -> crate::input::remove_resource_permission_input::Builder {
        crate::input::remove_resource_permission_input::Builder::default()
    }
    /// Creates a new `RemoveResourcePermission` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for RemoveResourcePermission {
    type Output = std::result::Result<
        crate::output::RemoveResourcePermissionOutput,
        crate::error::RemoveResourcePermissionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::protocol_serde::shape_remove_resource_permission::de_remove_resource_permission_http_error(response)
        } else {
            crate::protocol_serde::shape_remove_resource_permission::de_remove_resource_permission_http_response(response)
        }
    }
}

/// Operation shape for `RestoreDocumentVersions`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`restore_document_versions`](crate::client::fluent_builders::RestoreDocumentVersions).
///
/// `ParseStrictResponse` impl for `RestoreDocumentVersions`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct RestoreDocumentVersions {
    _private: (),
}
impl RestoreDocumentVersions {
    /// Creates a new builder-style object to manufacture [`RestoreDocumentVersionsInput`](crate::input::RestoreDocumentVersionsInput).
    pub fn builder() -> crate::input::restore_document_versions_input::Builder {
        crate::input::restore_document_versions_input::Builder::default()
    }
    /// Creates a new `RestoreDocumentVersions` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for RestoreDocumentVersions {
    type Output = std::result::Result<
        crate::output::RestoreDocumentVersionsOutput,
        crate::error::RestoreDocumentVersionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::protocol_serde::shape_restore_document_versions::de_restore_document_versions_http_error(response)
        } else {
            crate::protocol_serde::shape_restore_document_versions::de_restore_document_versions_http_response(response)
        }
    }
}

/// Operation shape for `UpdateDocument`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_document`](crate::client::fluent_builders::UpdateDocument).
///
/// `ParseStrictResponse` impl for `UpdateDocument`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateDocument {
    _private: (),
}
impl UpdateDocument {
    /// Creates a new builder-style object to manufacture [`UpdateDocumentInput`](crate::input::UpdateDocumentInput).
    pub fn builder() -> crate::input::update_document_input::Builder {
        crate::input::update_document_input::Builder::default()
    }
    /// Creates a new `UpdateDocument` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateDocument {
    type Output =
        std::result::Result<crate::output::UpdateDocumentOutput, crate::error::UpdateDocumentError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_update_document::de_update_document_http_error(response)
        } else {
            crate::protocol_serde::shape_update_document::de_update_document_http_response(response)
        }
    }
}

/// Operation shape for `UpdateDocumentVersion`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_document_version`](crate::client::fluent_builders::UpdateDocumentVersion).
///
/// `ParseStrictResponse` impl for `UpdateDocumentVersion`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateDocumentVersion {
    _private: (),
}
impl UpdateDocumentVersion {
    /// Creates a new builder-style object to manufacture [`UpdateDocumentVersionInput`](crate::input::UpdateDocumentVersionInput).
    pub fn builder() -> crate::input::update_document_version_input::Builder {
        crate::input::update_document_version_input::Builder::default()
    }
    /// Creates a new `UpdateDocumentVersion` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateDocumentVersion {
    type Output = std::result::Result<
        crate::output::UpdateDocumentVersionOutput,
        crate::error::UpdateDocumentVersionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_update_document_version::de_update_document_version_http_error(response)
        } else {
            crate::protocol_serde::shape_update_document_version::de_update_document_version_http_response(response)
        }
    }
}

/// Operation shape for `UpdateFolder`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_folder`](crate::client::fluent_builders::UpdateFolder).
///
/// `ParseStrictResponse` impl for `UpdateFolder`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateFolder {
    _private: (),
}
impl UpdateFolder {
    /// Creates a new builder-style object to manufacture [`UpdateFolderInput`](crate::input::UpdateFolderInput).
    pub fn builder() -> crate::input::update_folder_input::Builder {
        crate::input::update_folder_input::Builder::default()
    }
    /// Creates a new `UpdateFolder` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateFolder {
    type Output =
        std::result::Result<crate::output::UpdateFolderOutput, crate::error::UpdateFolderError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_update_folder::de_update_folder_http_error(response)
        } else {
            crate::protocol_serde::shape_update_folder::de_update_folder_http_response(response)
        }
    }
}

/// Operation shape for `UpdateUser`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_user`](crate::client::fluent_builders::UpdateUser).
///
/// `ParseStrictResponse` impl for `UpdateUser`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateUser {
    _private: (),
}
impl UpdateUser {
    /// Creates a new builder-style object to manufacture [`UpdateUserInput`](crate::input::UpdateUserInput).
    pub fn builder() -> crate::input::update_user_input::Builder {
        crate::input::update_user_input::Builder::default()
    }
    /// Creates a new `UpdateUser` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateUser {
    type Output =
        std::result::Result<crate::output::UpdateUserOutput, crate::error::UpdateUserError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_update_user::de_update_user_http_error(response)
        } else {
            crate::protocol_serde::shape_update_user::de_update_user_http_response(response)
        }
    }
}

/// Operation customization and supporting types
pub mod customize;
