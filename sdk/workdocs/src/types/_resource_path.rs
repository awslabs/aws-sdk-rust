// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the path information of a resource.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ResourcePath {
    /// <p>The components of the resource path.</p>
    #[doc(hidden)]
    pub components: std::option::Option<std::vec::Vec<crate::types::ResourcePathComponent>>,
}
impl ResourcePath {
    /// <p>The components of the resource path.</p>
    pub fn components(&self) -> std::option::Option<&[crate::types::ResourcePathComponent]> {
        self.components.as_deref()
    }
}
impl ResourcePath {
    /// Creates a new builder-style object to manufacture [`ResourcePath`](crate::types::ResourcePath).
    pub fn builder() -> crate::types::builders::ResourcePathBuilder {
        crate::types::builders::ResourcePathBuilder::default()
    }
}

/// A builder for [`ResourcePath`](crate::types::ResourcePath).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ResourcePathBuilder {
    pub(crate) components: std::option::Option<std::vec::Vec<crate::types::ResourcePathComponent>>,
}
impl ResourcePathBuilder {
    /// Appends an item to `components`.
    ///
    /// To override the contents of this collection use [`set_components`](Self::set_components).
    ///
    /// <p>The components of the resource path.</p>
    pub fn components(mut self, input: crate::types::ResourcePathComponent) -> Self {
        let mut v = self.components.unwrap_or_default();
        v.push(input);
        self.components = Some(v);
        self
    }
    /// <p>The components of the resource path.</p>
    pub fn set_components(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ResourcePathComponent>>,
    ) -> Self {
        self.components = input;
        self
    }
    /// Consumes the builder and constructs a [`ResourcePath`](crate::types::ResourcePath).
    pub fn build(self) -> crate::types::ResourcePath {
        crate::types::ResourcePath {
            components: self.components,
        }
    }
}
