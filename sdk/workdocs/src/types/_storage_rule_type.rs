// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the storage for a user.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StorageRuleType {
    /// <p>The amount of storage allocated, in bytes.</p>
    #[doc(hidden)]
    pub storage_allocated_in_bytes: std::option::Option<i64>,
    /// <p>The type of storage.</p>
    #[doc(hidden)]
    pub storage_type: std::option::Option<crate::types::StorageType>,
}
impl StorageRuleType {
    /// <p>The amount of storage allocated, in bytes.</p>
    pub fn storage_allocated_in_bytes(&self) -> std::option::Option<i64> {
        self.storage_allocated_in_bytes
    }
    /// <p>The type of storage.</p>
    pub fn storage_type(&self) -> std::option::Option<&crate::types::StorageType> {
        self.storage_type.as_ref()
    }
}
impl StorageRuleType {
    /// Creates a new builder-style object to manufacture [`StorageRuleType`](crate::types::StorageRuleType).
    pub fn builder() -> crate::types::builders::StorageRuleTypeBuilder {
        crate::types::builders::StorageRuleTypeBuilder::default()
    }
}

/// A builder for [`StorageRuleType`](crate::types::StorageRuleType).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct StorageRuleTypeBuilder {
    pub(crate) storage_allocated_in_bytes: std::option::Option<i64>,
    pub(crate) storage_type: std::option::Option<crate::types::StorageType>,
}
impl StorageRuleTypeBuilder {
    /// <p>The amount of storage allocated, in bytes.</p>
    pub fn storage_allocated_in_bytes(mut self, input: i64) -> Self {
        self.storage_allocated_in_bytes = Some(input);
        self
    }
    /// <p>The amount of storage allocated, in bytes.</p>
    pub fn set_storage_allocated_in_bytes(mut self, input: std::option::Option<i64>) -> Self {
        self.storage_allocated_in_bytes = input;
        self
    }
    /// <p>The type of storage.</p>
    pub fn storage_type(mut self, input: crate::types::StorageType) -> Self {
        self.storage_type = Some(input);
        self
    }
    /// <p>The type of storage.</p>
    pub fn set_storage_type(
        mut self,
        input: std::option::Option<crate::types::StorageType>,
    ) -> Self {
        self.storage_type = input;
        self
    }
    /// Consumes the builder and constructs a [`StorageRuleType`](crate::types::StorageRuleType).
    pub fn build(self) -> crate::types::StorageRuleType {
        crate::types::StorageRuleType {
            storage_allocated_in_bytes: self.storage_allocated_in_bytes,
            storage_type: self.storage_type,
        }
    }
}
