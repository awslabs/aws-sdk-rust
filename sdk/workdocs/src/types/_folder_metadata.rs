// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a folder.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct FolderMetadata {
    /// <p>The ID of the folder.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The name of the folder.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The ID of the creator.</p>
    #[doc(hidden)]
    pub creator_id: std::option::Option<std::string::String>,
    /// <p>The ID of the parent folder.</p>
    #[doc(hidden)]
    pub parent_folder_id: std::option::Option<std::string::String>,
    /// <p>The time when the folder was created.</p>
    #[doc(hidden)]
    pub created_timestamp: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The time when the folder was updated.</p>
    #[doc(hidden)]
    pub modified_timestamp: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The resource state of the folder.</p>
    #[doc(hidden)]
    pub resource_state: std::option::Option<crate::types::ResourceStateType>,
    /// <p>The unique identifier created from the subfolders and documents of the folder.</p>
    #[doc(hidden)]
    pub signature: std::option::Option<std::string::String>,
    /// <p>List of labels on the folder.</p>
    #[doc(hidden)]
    pub labels: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The size of the folder metadata.</p>
    #[doc(hidden)]
    pub size: std::option::Option<i64>,
    /// <p>The size of the latest version of the folder metadata.</p>
    #[doc(hidden)]
    pub latest_version_size: std::option::Option<i64>,
}
impl FolderMetadata {
    /// <p>The ID of the folder.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The name of the folder.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The ID of the creator.</p>
    pub fn creator_id(&self) -> std::option::Option<&str> {
        self.creator_id.as_deref()
    }
    /// <p>The ID of the parent folder.</p>
    pub fn parent_folder_id(&self) -> std::option::Option<&str> {
        self.parent_folder_id.as_deref()
    }
    /// <p>The time when the folder was created.</p>
    pub fn created_timestamp(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_timestamp.as_ref()
    }
    /// <p>The time when the folder was updated.</p>
    pub fn modified_timestamp(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.modified_timestamp.as_ref()
    }
    /// <p>The resource state of the folder.</p>
    pub fn resource_state(&self) -> std::option::Option<&crate::types::ResourceStateType> {
        self.resource_state.as_ref()
    }
    /// <p>The unique identifier created from the subfolders and documents of the folder.</p>
    pub fn signature(&self) -> std::option::Option<&str> {
        self.signature.as_deref()
    }
    /// <p>List of labels on the folder.</p>
    pub fn labels(&self) -> std::option::Option<&[std::string::String]> {
        self.labels.as_deref()
    }
    /// <p>The size of the folder metadata.</p>
    pub fn size(&self) -> std::option::Option<i64> {
        self.size
    }
    /// <p>The size of the latest version of the folder metadata.</p>
    pub fn latest_version_size(&self) -> std::option::Option<i64> {
        self.latest_version_size
    }
}
impl FolderMetadata {
    /// Creates a new builder-style object to manufacture [`FolderMetadata`](crate::types::FolderMetadata).
    pub fn builder() -> crate::types::builders::FolderMetadataBuilder {
        crate::types::builders::FolderMetadataBuilder::default()
    }
}

/// A builder for [`FolderMetadata`](crate::types::FolderMetadata).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct FolderMetadataBuilder {
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) creator_id: std::option::Option<std::string::String>,
    pub(crate) parent_folder_id: std::option::Option<std::string::String>,
    pub(crate) created_timestamp: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) modified_timestamp: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) resource_state: std::option::Option<crate::types::ResourceStateType>,
    pub(crate) signature: std::option::Option<std::string::String>,
    pub(crate) labels: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) size: std::option::Option<i64>,
    pub(crate) latest_version_size: std::option::Option<i64>,
}
impl FolderMetadataBuilder {
    /// <p>The ID of the folder.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>The ID of the folder.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The name of the folder.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the folder.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The ID of the creator.</p>
    pub fn creator_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.creator_id = Some(input.into());
        self
    }
    /// <p>The ID of the creator.</p>
    pub fn set_creator_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.creator_id = input;
        self
    }
    /// <p>The ID of the parent folder.</p>
    pub fn parent_folder_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.parent_folder_id = Some(input.into());
        self
    }
    /// <p>The ID of the parent folder.</p>
    pub fn set_parent_folder_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.parent_folder_id = input;
        self
    }
    /// <p>The time when the folder was created.</p>
    pub fn created_timestamp(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_timestamp = Some(input);
        self
    }
    /// <p>The time when the folder was created.</p>
    pub fn set_created_timestamp(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_timestamp = input;
        self
    }
    /// <p>The time when the folder was updated.</p>
    pub fn modified_timestamp(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.modified_timestamp = Some(input);
        self
    }
    /// <p>The time when the folder was updated.</p>
    pub fn set_modified_timestamp(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.modified_timestamp = input;
        self
    }
    /// <p>The resource state of the folder.</p>
    pub fn resource_state(mut self, input: crate::types::ResourceStateType) -> Self {
        self.resource_state = Some(input);
        self
    }
    /// <p>The resource state of the folder.</p>
    pub fn set_resource_state(
        mut self,
        input: std::option::Option<crate::types::ResourceStateType>,
    ) -> Self {
        self.resource_state = input;
        self
    }
    /// <p>The unique identifier created from the subfolders and documents of the folder.</p>
    pub fn signature(mut self, input: impl Into<std::string::String>) -> Self {
        self.signature = Some(input.into());
        self
    }
    /// <p>The unique identifier created from the subfolders and documents of the folder.</p>
    pub fn set_signature(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.signature = input;
        self
    }
    /// Appends an item to `labels`.
    ///
    /// To override the contents of this collection use [`set_labels`](Self::set_labels).
    ///
    /// <p>List of labels on the folder.</p>
    pub fn labels(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.labels.unwrap_or_default();
        v.push(input.into());
        self.labels = Some(v);
        self
    }
    /// <p>List of labels on the folder.</p>
    pub fn set_labels(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.labels = input;
        self
    }
    /// <p>The size of the folder metadata.</p>
    pub fn size(mut self, input: i64) -> Self {
        self.size = Some(input);
        self
    }
    /// <p>The size of the folder metadata.</p>
    pub fn set_size(mut self, input: std::option::Option<i64>) -> Self {
        self.size = input;
        self
    }
    /// <p>The size of the latest version of the folder metadata.</p>
    pub fn latest_version_size(mut self, input: i64) -> Self {
        self.latest_version_size = Some(input);
        self
    }
    /// <p>The size of the latest version of the folder metadata.</p>
    pub fn set_latest_version_size(mut self, input: std::option::Option<i64>) -> Self {
        self.latest_version_size = input;
        self
    }
    /// Consumes the builder and constructs a [`FolderMetadata`](crate::types::FolderMetadata).
    pub fn build(self) -> crate::types::FolderMetadata {
        crate::types::FolderMetadata {
            id: self.id,
            name: self.name,
            creator_id: self.creator_id,
            parent_folder_id: self.parent_folder_id,
            created_timestamp: self.created_timestamp,
            modified_timestamp: self.modified_timestamp,
            resource_state: self.resource_state,
            signature: self.signature,
            labels: self.labels,
            size: self.size,
            latest_version_size: self.latest_version_size,
        }
    }
}
