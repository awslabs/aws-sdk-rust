// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `ActivityType`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let activitytype = unimplemented!();
/// match activitytype {
///     ActivityType::DocumentAnnotationAdded => { /* ... */ },
///     ActivityType::DocumentAnnotationDeleted => { /* ... */ },
///     ActivityType::DocumentCheckedIn => { /* ... */ },
///     ActivityType::DocumentCheckedOut => { /* ... */ },
///     ActivityType::DocumentCommentAdded => { /* ... */ },
///     ActivityType::DocumentCommentDeleted => { /* ... */ },
///     ActivityType::DocumentMoved => { /* ... */ },
///     ActivityType::DocumentRecycled => { /* ... */ },
///     ActivityType::DocumentRenamed => { /* ... */ },
///     ActivityType::DocumentRestored => { /* ... */ },
///     ActivityType::DocumentReverted => { /* ... */ },
///     ActivityType::DocumentShareableLinkCreated => { /* ... */ },
///     ActivityType::DocumentShareableLinkPermissionChanged => { /* ... */ },
///     ActivityType::DocumentShareableLinkRemoved => { /* ... */ },
///     ActivityType::DocumentShared => { /* ... */ },
///     ActivityType::DocumentSharePermissionChanged => { /* ... */ },
///     ActivityType::DocumentUnshared => { /* ... */ },
///     ActivityType::DocumentVersionDeleted => { /* ... */ },
///     ActivityType::DocumentVersionDownloaded => { /* ... */ },
///     ActivityType::DocumentVersionUploaded => { /* ... */ },
///     ActivityType::DocumentVersionViewed => { /* ... */ },
///     ActivityType::FolderCreated => { /* ... */ },
///     ActivityType::FolderDeleted => { /* ... */ },
///     ActivityType::FolderMoved => { /* ... */ },
///     ActivityType::FolderRecycled => { /* ... */ },
///     ActivityType::FolderRenamed => { /* ... */ },
///     ActivityType::FolderRestored => { /* ... */ },
///     ActivityType::FolderShareableLinkCreated => { /* ... */ },
///     ActivityType::FolderShareableLinkPermissionChanged => { /* ... */ },
///     ActivityType::FolderShareableLinkRemoved => { /* ... */ },
///     ActivityType::FolderShared => { /* ... */ },
///     ActivityType::FolderSharePermissionChanged => { /* ... */ },
///     ActivityType::FolderUnshared => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `activitytype` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `ActivityType::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `ActivityType::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `ActivityType::NewFeature` is defined.
/// Specifically, when `activitytype` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `ActivityType::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum ActivityType {
    #[allow(missing_docs)] // documentation missing in model
    DocumentAnnotationAdded,
    #[allow(missing_docs)] // documentation missing in model
    DocumentAnnotationDeleted,
    #[allow(missing_docs)] // documentation missing in model
    DocumentCheckedIn,
    #[allow(missing_docs)] // documentation missing in model
    DocumentCheckedOut,
    #[allow(missing_docs)] // documentation missing in model
    DocumentCommentAdded,
    #[allow(missing_docs)] // documentation missing in model
    DocumentCommentDeleted,
    #[allow(missing_docs)] // documentation missing in model
    DocumentMoved,
    #[allow(missing_docs)] // documentation missing in model
    DocumentRecycled,
    #[allow(missing_docs)] // documentation missing in model
    DocumentRenamed,
    #[allow(missing_docs)] // documentation missing in model
    DocumentRestored,
    #[allow(missing_docs)] // documentation missing in model
    DocumentReverted,
    #[allow(missing_docs)] // documentation missing in model
    DocumentShareableLinkCreated,
    #[allow(missing_docs)] // documentation missing in model
    DocumentShareableLinkPermissionChanged,
    #[allow(missing_docs)] // documentation missing in model
    DocumentShareableLinkRemoved,
    #[allow(missing_docs)] // documentation missing in model
    DocumentShared,
    #[allow(missing_docs)] // documentation missing in model
    DocumentSharePermissionChanged,
    #[allow(missing_docs)] // documentation missing in model
    DocumentUnshared,
    #[allow(missing_docs)] // documentation missing in model
    DocumentVersionDeleted,
    #[allow(missing_docs)] // documentation missing in model
    DocumentVersionDownloaded,
    #[allow(missing_docs)] // documentation missing in model
    DocumentVersionUploaded,
    #[allow(missing_docs)] // documentation missing in model
    DocumentVersionViewed,
    #[allow(missing_docs)] // documentation missing in model
    FolderCreated,
    #[allow(missing_docs)] // documentation missing in model
    FolderDeleted,
    #[allow(missing_docs)] // documentation missing in model
    FolderMoved,
    #[allow(missing_docs)] // documentation missing in model
    FolderRecycled,
    #[allow(missing_docs)] // documentation missing in model
    FolderRenamed,
    #[allow(missing_docs)] // documentation missing in model
    FolderRestored,
    #[allow(missing_docs)] // documentation missing in model
    FolderShareableLinkCreated,
    #[allow(missing_docs)] // documentation missing in model
    FolderShareableLinkPermissionChanged,
    #[allow(missing_docs)] // documentation missing in model
    FolderShareableLinkRemoved,
    #[allow(missing_docs)] // documentation missing in model
    FolderShared,
    #[allow(missing_docs)] // documentation missing in model
    FolderSharePermissionChanged,
    #[allow(missing_docs)] // documentation missing in model
    FolderUnshared,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl std::convert::From<&str> for ActivityType {
    fn from(s: &str) -> Self {
        match s {
            "DOCUMENT_ANNOTATION_ADDED" => ActivityType::DocumentAnnotationAdded,
            "DOCUMENT_ANNOTATION_DELETED" => ActivityType::DocumentAnnotationDeleted,
            "DOCUMENT_CHECKED_IN" => ActivityType::DocumentCheckedIn,
            "DOCUMENT_CHECKED_OUT" => ActivityType::DocumentCheckedOut,
            "DOCUMENT_COMMENT_ADDED" => ActivityType::DocumentCommentAdded,
            "DOCUMENT_COMMENT_DELETED" => ActivityType::DocumentCommentDeleted,
            "DOCUMENT_MOVED" => ActivityType::DocumentMoved,
            "DOCUMENT_RECYCLED" => ActivityType::DocumentRecycled,
            "DOCUMENT_RENAMED" => ActivityType::DocumentRenamed,
            "DOCUMENT_RESTORED" => ActivityType::DocumentRestored,
            "DOCUMENT_REVERTED" => ActivityType::DocumentReverted,
            "DOCUMENT_SHAREABLE_LINK_CREATED" => ActivityType::DocumentShareableLinkCreated,
            "DOCUMENT_SHAREABLE_LINK_PERMISSION_CHANGED" => {
                ActivityType::DocumentShareableLinkPermissionChanged
            }
            "DOCUMENT_SHAREABLE_LINK_REMOVED" => ActivityType::DocumentShareableLinkRemoved,
            "DOCUMENT_SHARED" => ActivityType::DocumentShared,
            "DOCUMENT_SHARE_PERMISSION_CHANGED" => ActivityType::DocumentSharePermissionChanged,
            "DOCUMENT_UNSHARED" => ActivityType::DocumentUnshared,
            "DOCUMENT_VERSION_DELETED" => ActivityType::DocumentVersionDeleted,
            "DOCUMENT_VERSION_DOWNLOADED" => ActivityType::DocumentVersionDownloaded,
            "DOCUMENT_VERSION_UPLOADED" => ActivityType::DocumentVersionUploaded,
            "DOCUMENT_VERSION_VIEWED" => ActivityType::DocumentVersionViewed,
            "FOLDER_CREATED" => ActivityType::FolderCreated,
            "FOLDER_DELETED" => ActivityType::FolderDeleted,
            "FOLDER_MOVED" => ActivityType::FolderMoved,
            "FOLDER_RECYCLED" => ActivityType::FolderRecycled,
            "FOLDER_RENAMED" => ActivityType::FolderRenamed,
            "FOLDER_RESTORED" => ActivityType::FolderRestored,
            "FOLDER_SHAREABLE_LINK_CREATED" => ActivityType::FolderShareableLinkCreated,
            "FOLDER_SHAREABLE_LINK_PERMISSION_CHANGED" => {
                ActivityType::FolderShareableLinkPermissionChanged
            }
            "FOLDER_SHAREABLE_LINK_REMOVED" => ActivityType::FolderShareableLinkRemoved,
            "FOLDER_SHARED" => ActivityType::FolderShared,
            "FOLDER_SHARE_PERMISSION_CHANGED" => ActivityType::FolderSharePermissionChanged,
            "FOLDER_UNSHARED" => ActivityType::FolderUnshared,
            other => {
                ActivityType::Unknown(crate::primitives::UnknownVariantValue(other.to_owned()))
            }
        }
    }
}
impl std::str::FromStr for ActivityType {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(ActivityType::from(s))
    }
}
impl ActivityType {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            ActivityType::DocumentAnnotationAdded => "DOCUMENT_ANNOTATION_ADDED",
            ActivityType::DocumentAnnotationDeleted => "DOCUMENT_ANNOTATION_DELETED",
            ActivityType::DocumentCheckedIn => "DOCUMENT_CHECKED_IN",
            ActivityType::DocumentCheckedOut => "DOCUMENT_CHECKED_OUT",
            ActivityType::DocumentCommentAdded => "DOCUMENT_COMMENT_ADDED",
            ActivityType::DocumentCommentDeleted => "DOCUMENT_COMMENT_DELETED",
            ActivityType::DocumentMoved => "DOCUMENT_MOVED",
            ActivityType::DocumentRecycled => "DOCUMENT_RECYCLED",
            ActivityType::DocumentRenamed => "DOCUMENT_RENAMED",
            ActivityType::DocumentRestored => "DOCUMENT_RESTORED",
            ActivityType::DocumentReverted => "DOCUMENT_REVERTED",
            ActivityType::DocumentShareableLinkCreated => "DOCUMENT_SHAREABLE_LINK_CREATED",
            ActivityType::DocumentShareableLinkPermissionChanged => {
                "DOCUMENT_SHAREABLE_LINK_PERMISSION_CHANGED"
            }
            ActivityType::DocumentShareableLinkRemoved => "DOCUMENT_SHAREABLE_LINK_REMOVED",
            ActivityType::DocumentShared => "DOCUMENT_SHARED",
            ActivityType::DocumentSharePermissionChanged => "DOCUMENT_SHARE_PERMISSION_CHANGED",
            ActivityType::DocumentUnshared => "DOCUMENT_UNSHARED",
            ActivityType::DocumentVersionDeleted => "DOCUMENT_VERSION_DELETED",
            ActivityType::DocumentVersionDownloaded => "DOCUMENT_VERSION_DOWNLOADED",
            ActivityType::DocumentVersionUploaded => "DOCUMENT_VERSION_UPLOADED",
            ActivityType::DocumentVersionViewed => "DOCUMENT_VERSION_VIEWED",
            ActivityType::FolderCreated => "FOLDER_CREATED",
            ActivityType::FolderDeleted => "FOLDER_DELETED",
            ActivityType::FolderMoved => "FOLDER_MOVED",
            ActivityType::FolderRecycled => "FOLDER_RECYCLED",
            ActivityType::FolderRenamed => "FOLDER_RENAMED",
            ActivityType::FolderRestored => "FOLDER_RESTORED",
            ActivityType::FolderShareableLinkCreated => "FOLDER_SHAREABLE_LINK_CREATED",
            ActivityType::FolderShareableLinkPermissionChanged => {
                "FOLDER_SHAREABLE_LINK_PERMISSION_CHANGED"
            }
            ActivityType::FolderShareableLinkRemoved => "FOLDER_SHAREABLE_LINK_REMOVED",
            ActivityType::FolderShared => "FOLDER_SHARED",
            ActivityType::FolderSharePermissionChanged => "FOLDER_SHARE_PERMISSION_CHANGED",
            ActivityType::FolderUnshared => "FOLDER_UNSHARED",
            ActivityType::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "DOCUMENT_ANNOTATION_ADDED",
            "DOCUMENT_ANNOTATION_DELETED",
            "DOCUMENT_CHECKED_IN",
            "DOCUMENT_CHECKED_OUT",
            "DOCUMENT_COMMENT_ADDED",
            "DOCUMENT_COMMENT_DELETED",
            "DOCUMENT_MOVED",
            "DOCUMENT_RECYCLED",
            "DOCUMENT_RENAMED",
            "DOCUMENT_RESTORED",
            "DOCUMENT_REVERTED",
            "DOCUMENT_SHAREABLE_LINK_CREATED",
            "DOCUMENT_SHAREABLE_LINK_PERMISSION_CHANGED",
            "DOCUMENT_SHAREABLE_LINK_REMOVED",
            "DOCUMENT_SHARED",
            "DOCUMENT_SHARE_PERMISSION_CHANGED",
            "DOCUMENT_UNSHARED",
            "DOCUMENT_VERSION_DELETED",
            "DOCUMENT_VERSION_DOWNLOADED",
            "DOCUMENT_VERSION_UPLOADED",
            "DOCUMENT_VERSION_VIEWED",
            "FOLDER_CREATED",
            "FOLDER_DELETED",
            "FOLDER_MOVED",
            "FOLDER_RECYCLED",
            "FOLDER_RENAMED",
            "FOLDER_RESTORED",
            "FOLDER_SHAREABLE_LINK_CREATED",
            "FOLDER_SHAREABLE_LINK_PERMISSION_CHANGED",
            "FOLDER_SHAREABLE_LINK_REMOVED",
            "FOLDER_SHARED",
            "FOLDER_SHARE_PERMISSION_CHANGED",
            "FOLDER_UNSHARED",
        ]
    }
}
impl AsRef<str> for ActivityType {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
