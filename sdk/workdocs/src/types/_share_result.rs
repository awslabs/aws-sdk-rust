// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the share results of a resource.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ShareResult {
    /// <p>The ID of the principal.</p>
    #[doc(hidden)]
    pub principal_id: std::option::Option<std::string::String>,
    /// <p>The ID of the invited user.</p>
    #[doc(hidden)]
    pub invitee_principal_id: std::option::Option<std::string::String>,
    /// <p>The role.</p>
    #[doc(hidden)]
    pub role: std::option::Option<crate::types::RoleType>,
    /// <p>The status.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::ShareStatusType>,
    /// <p>The ID of the resource that was shared.</p>
    #[doc(hidden)]
    pub share_id: std::option::Option<std::string::String>,
    /// <p>The status message.</p>
    #[doc(hidden)]
    pub status_message: std::option::Option<std::string::String>,
}
impl ShareResult {
    /// <p>The ID of the principal.</p>
    pub fn principal_id(&self) -> std::option::Option<&str> {
        self.principal_id.as_deref()
    }
    /// <p>The ID of the invited user.</p>
    pub fn invitee_principal_id(&self) -> std::option::Option<&str> {
        self.invitee_principal_id.as_deref()
    }
    /// <p>The role.</p>
    pub fn role(&self) -> std::option::Option<&crate::types::RoleType> {
        self.role.as_ref()
    }
    /// <p>The status.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::ShareStatusType> {
        self.status.as_ref()
    }
    /// <p>The ID of the resource that was shared.</p>
    pub fn share_id(&self) -> std::option::Option<&str> {
        self.share_id.as_deref()
    }
    /// <p>The status message.</p>
    pub fn status_message(&self) -> std::option::Option<&str> {
        self.status_message.as_deref()
    }
}
impl std::fmt::Debug for ShareResult {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ShareResult");
        formatter.field("principal_id", &self.principal_id);
        formatter.field("invitee_principal_id", &self.invitee_principal_id);
        formatter.field("role", &self.role);
        formatter.field("status", &self.status);
        formatter.field("share_id", &self.share_id);
        formatter.field("status_message", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl ShareResult {
    /// Creates a new builder-style object to manufacture [`ShareResult`](crate::types::ShareResult).
    pub fn builder() -> crate::types::builders::ShareResultBuilder {
        crate::types::builders::ShareResultBuilder::default()
    }
}

/// A builder for [`ShareResult`](crate::types::ShareResult).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct ShareResultBuilder {
    pub(crate) principal_id: std::option::Option<std::string::String>,
    pub(crate) invitee_principal_id: std::option::Option<std::string::String>,
    pub(crate) role: std::option::Option<crate::types::RoleType>,
    pub(crate) status: std::option::Option<crate::types::ShareStatusType>,
    pub(crate) share_id: std::option::Option<std::string::String>,
    pub(crate) status_message: std::option::Option<std::string::String>,
}
impl ShareResultBuilder {
    /// <p>The ID of the principal.</p>
    pub fn principal_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.principal_id = Some(input.into());
        self
    }
    /// <p>The ID of the principal.</p>
    pub fn set_principal_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.principal_id = input;
        self
    }
    /// <p>The ID of the invited user.</p>
    pub fn invitee_principal_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.invitee_principal_id = Some(input.into());
        self
    }
    /// <p>The ID of the invited user.</p>
    pub fn set_invitee_principal_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.invitee_principal_id = input;
        self
    }
    /// <p>The role.</p>
    pub fn role(mut self, input: crate::types::RoleType) -> Self {
        self.role = Some(input);
        self
    }
    /// <p>The role.</p>
    pub fn set_role(mut self, input: std::option::Option<crate::types::RoleType>) -> Self {
        self.role = input;
        self
    }
    /// <p>The status.</p>
    pub fn status(mut self, input: crate::types::ShareStatusType) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The status.</p>
    pub fn set_status(mut self, input: std::option::Option<crate::types::ShareStatusType>) -> Self {
        self.status = input;
        self
    }
    /// <p>The ID of the resource that was shared.</p>
    pub fn share_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.share_id = Some(input.into());
        self
    }
    /// <p>The ID of the resource that was shared.</p>
    pub fn set_share_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.share_id = input;
        self
    }
    /// <p>The status message.</p>
    pub fn status_message(mut self, input: impl Into<std::string::String>) -> Self {
        self.status_message = Some(input.into());
        self
    }
    /// <p>The status message.</p>
    pub fn set_status_message(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.status_message = input;
        self
    }
    /// Consumes the builder and constructs a [`ShareResult`](crate::types::ShareResult).
    pub fn build(self) -> crate::types::ShareResult {
        crate::types::ShareResult {
            principal_id: self.principal_id,
            invitee_principal_id: self.invitee_principal_id,
            role: self.role,
            status: self.status,
            share_id: self.share_id,
            status_message: self.status_message,
        }
    }
}
impl std::fmt::Debug for ShareResultBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ShareResultBuilder");
        formatter.field("principal_id", &self.principal_id);
        formatter.field("invitee_principal_id", &self.invitee_principal_id);
        formatter.field("role", &self.role);
        formatter.field("status", &self.status);
        formatter.field("share_id", &self.share_id);
        formatter.field("status_message", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
