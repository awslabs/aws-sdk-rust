// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a resource.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Principal {
    /// <p>The ID of the resource.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The type of resource.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::PrincipalType>,
    /// <p>The permission information for the resource.</p>
    #[doc(hidden)]
    pub roles: std::option::Option<std::vec::Vec<crate::types::PermissionInfo>>,
}
impl Principal {
    /// <p>The ID of the resource.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The type of resource.</p>
    pub fn r#type(&self) -> std::option::Option<&crate::types::PrincipalType> {
        self.r#type.as_ref()
    }
    /// <p>The permission information for the resource.</p>
    pub fn roles(&self) -> std::option::Option<&[crate::types::PermissionInfo]> {
        self.roles.as_deref()
    }
}
impl Principal {
    /// Creates a new builder-style object to manufacture [`Principal`](crate::types::Principal).
    pub fn builder() -> crate::types::builders::PrincipalBuilder {
        crate::types::builders::PrincipalBuilder::default()
    }
}

/// A builder for [`Principal`](crate::types::Principal).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PrincipalBuilder {
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) r#type: std::option::Option<crate::types::PrincipalType>,
    pub(crate) roles: std::option::Option<std::vec::Vec<crate::types::PermissionInfo>>,
}
impl PrincipalBuilder {
    /// <p>The ID of the resource.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>The ID of the resource.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The type of resource.</p>
    pub fn r#type(mut self, input: crate::types::PrincipalType) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p>The type of resource.</p>
    pub fn set_type(mut self, input: std::option::Option<crate::types::PrincipalType>) -> Self {
        self.r#type = input;
        self
    }
    /// Appends an item to `roles`.
    ///
    /// To override the contents of this collection use [`set_roles`](Self::set_roles).
    ///
    /// <p>The permission information for the resource.</p>
    pub fn roles(mut self, input: crate::types::PermissionInfo) -> Self {
        let mut v = self.roles.unwrap_or_default();
        v.push(input);
        self.roles = Some(v);
        self
    }
    /// <p>The permission information for the resource.</p>
    pub fn set_roles(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::PermissionInfo>>,
    ) -> Self {
        self.roles = input;
        self
    }
    /// Consumes the builder and constructs a [`Principal`](crate::types::Principal).
    pub fn build(self) -> crate::types::Principal {
        crate::types::Principal {
            id: self.id,
            r#type: self.r#type,
            roles: self.roles,
        }
    }
}
