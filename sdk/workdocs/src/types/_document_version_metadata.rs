// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a version of a document.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DocumentVersionMetadata {
    /// <p>The ID of the version.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The name of the version.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The content type of the document.</p>
    #[doc(hidden)]
    pub content_type: std::option::Option<std::string::String>,
    /// <p>The size of the document, in bytes.</p>
    #[doc(hidden)]
    pub size: std::option::Option<i64>,
    /// <p>The signature of the document.</p>
    #[doc(hidden)]
    pub signature: std::option::Option<std::string::String>,
    /// <p>The status of the document.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::DocumentStatusType>,
    /// <p>The timestamp when the document was first uploaded.</p>
    #[doc(hidden)]
    pub created_timestamp: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The timestamp when the document was last uploaded.</p>
    #[doc(hidden)]
    pub modified_timestamp: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The timestamp when the content of the document was originally created.</p>
    #[doc(hidden)]
    pub content_created_timestamp: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The timestamp when the content of the document was modified.</p>
    #[doc(hidden)]
    pub content_modified_timestamp: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The ID of the creator.</p>
    #[doc(hidden)]
    pub creator_id: std::option::Option<std::string::String>,
    /// <p>The thumbnail of the document.</p>
    #[doc(hidden)]
    pub thumbnail: std::option::Option<
        std::collections::HashMap<crate::types::DocumentThumbnailType, std::string::String>,
    >,
    /// <p>The source of the document.</p>
    #[doc(hidden)]
    pub source: std::option::Option<
        std::collections::HashMap<crate::types::DocumentSourceType, std::string::String>,
    >,
}
impl DocumentVersionMetadata {
    /// <p>The ID of the version.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The name of the version.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The content type of the document.</p>
    pub fn content_type(&self) -> std::option::Option<&str> {
        self.content_type.as_deref()
    }
    /// <p>The size of the document, in bytes.</p>
    pub fn size(&self) -> std::option::Option<i64> {
        self.size
    }
    /// <p>The signature of the document.</p>
    pub fn signature(&self) -> std::option::Option<&str> {
        self.signature.as_deref()
    }
    /// <p>The status of the document.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::DocumentStatusType> {
        self.status.as_ref()
    }
    /// <p>The timestamp when the document was first uploaded.</p>
    pub fn created_timestamp(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_timestamp.as_ref()
    }
    /// <p>The timestamp when the document was last uploaded.</p>
    pub fn modified_timestamp(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.modified_timestamp.as_ref()
    }
    /// <p>The timestamp when the content of the document was originally created.</p>
    pub fn content_created_timestamp(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.content_created_timestamp.as_ref()
    }
    /// <p>The timestamp when the content of the document was modified.</p>
    pub fn content_modified_timestamp(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.content_modified_timestamp.as_ref()
    }
    /// <p>The ID of the creator.</p>
    pub fn creator_id(&self) -> std::option::Option<&str> {
        self.creator_id.as_deref()
    }
    /// <p>The thumbnail of the document.</p>
    pub fn thumbnail(
        &self,
    ) -> std::option::Option<
        &std::collections::HashMap<crate::types::DocumentThumbnailType, std::string::String>,
    > {
        self.thumbnail.as_ref()
    }
    /// <p>The source of the document.</p>
    pub fn source(
        &self,
    ) -> std::option::Option<
        &std::collections::HashMap<crate::types::DocumentSourceType, std::string::String>,
    > {
        self.source.as_ref()
    }
}
impl DocumentVersionMetadata {
    /// Creates a new builder-style object to manufacture [`DocumentVersionMetadata`](crate::types::DocumentVersionMetadata).
    pub fn builder() -> crate::types::builders::DocumentVersionMetadataBuilder {
        crate::types::builders::DocumentVersionMetadataBuilder::default()
    }
}

/// A builder for [`DocumentVersionMetadata`](crate::types::DocumentVersionMetadata).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DocumentVersionMetadataBuilder {
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) content_type: std::option::Option<std::string::String>,
    pub(crate) size: std::option::Option<i64>,
    pub(crate) signature: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<crate::types::DocumentStatusType>,
    pub(crate) created_timestamp: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) modified_timestamp: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) content_created_timestamp: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) content_modified_timestamp: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) creator_id: std::option::Option<std::string::String>,
    pub(crate) thumbnail: std::option::Option<
        std::collections::HashMap<crate::types::DocumentThumbnailType, std::string::String>,
    >,
    pub(crate) source: std::option::Option<
        std::collections::HashMap<crate::types::DocumentSourceType, std::string::String>,
    >,
}
impl DocumentVersionMetadataBuilder {
    /// <p>The ID of the version.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>The ID of the version.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The name of the version.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the version.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The content type of the document.</p>
    pub fn content_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.content_type = Some(input.into());
        self
    }
    /// <p>The content type of the document.</p>
    pub fn set_content_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.content_type = input;
        self
    }
    /// <p>The size of the document, in bytes.</p>
    pub fn size(mut self, input: i64) -> Self {
        self.size = Some(input);
        self
    }
    /// <p>The size of the document, in bytes.</p>
    pub fn set_size(mut self, input: std::option::Option<i64>) -> Self {
        self.size = input;
        self
    }
    /// <p>The signature of the document.</p>
    pub fn signature(mut self, input: impl Into<std::string::String>) -> Self {
        self.signature = Some(input.into());
        self
    }
    /// <p>The signature of the document.</p>
    pub fn set_signature(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.signature = input;
        self
    }
    /// <p>The status of the document.</p>
    pub fn status(mut self, input: crate::types::DocumentStatusType) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The status of the document.</p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::DocumentStatusType>,
    ) -> Self {
        self.status = input;
        self
    }
    /// <p>The timestamp when the document was first uploaded.</p>
    pub fn created_timestamp(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_timestamp = Some(input);
        self
    }
    /// <p>The timestamp when the document was first uploaded.</p>
    pub fn set_created_timestamp(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_timestamp = input;
        self
    }
    /// <p>The timestamp when the document was last uploaded.</p>
    pub fn modified_timestamp(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.modified_timestamp = Some(input);
        self
    }
    /// <p>The timestamp when the document was last uploaded.</p>
    pub fn set_modified_timestamp(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.modified_timestamp = input;
        self
    }
    /// <p>The timestamp when the content of the document was originally created.</p>
    pub fn content_created_timestamp(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.content_created_timestamp = Some(input);
        self
    }
    /// <p>The timestamp when the content of the document was originally created.</p>
    pub fn set_content_created_timestamp(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.content_created_timestamp = input;
        self
    }
    /// <p>The timestamp when the content of the document was modified.</p>
    pub fn content_modified_timestamp(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.content_modified_timestamp = Some(input);
        self
    }
    /// <p>The timestamp when the content of the document was modified.</p>
    pub fn set_content_modified_timestamp(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.content_modified_timestamp = input;
        self
    }
    /// <p>The ID of the creator.</p>
    pub fn creator_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.creator_id = Some(input.into());
        self
    }
    /// <p>The ID of the creator.</p>
    pub fn set_creator_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.creator_id = input;
        self
    }
    /// Adds a key-value pair to `thumbnail`.
    ///
    /// To override the contents of this collection use [`set_thumbnail`](Self::set_thumbnail).
    ///
    /// <p>The thumbnail of the document.</p>
    pub fn thumbnail(
        mut self,
        k: crate::types::DocumentThumbnailType,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.thumbnail.unwrap_or_default();
        hash_map.insert(k, v.into());
        self.thumbnail = Some(hash_map);
        self
    }
    /// <p>The thumbnail of the document.</p>
    pub fn set_thumbnail(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<crate::types::DocumentThumbnailType, std::string::String>,
        >,
    ) -> Self {
        self.thumbnail = input;
        self
    }
    /// Adds a key-value pair to `source`.
    ///
    /// To override the contents of this collection use [`set_source`](Self::set_source).
    ///
    /// <p>The source of the document.</p>
    pub fn source(
        mut self,
        k: crate::types::DocumentSourceType,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.source.unwrap_or_default();
        hash_map.insert(k, v.into());
        self.source = Some(hash_map);
        self
    }
    /// <p>The source of the document.</p>
    pub fn set_source(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<crate::types::DocumentSourceType, std::string::String>,
        >,
    ) -> Self {
        self.source = input;
        self
    }
    /// Consumes the builder and constructs a [`DocumentVersionMetadata`](crate::types::DocumentVersionMetadata).
    pub fn build(self) -> crate::types::DocumentVersionMetadata {
        crate::types::DocumentVersionMetadata {
            id: self.id,
            name: self.name,
            content_type: self.content_type,
            size: self.size,
            signature: self.signature,
            status: self.status,
            created_timestamp: self.created_timestamp,
            modified_timestamp: self.modified_timestamp,
            content_created_timestamp: self.content_created_timestamp,
            content_modified_timestamp: self.content_modified_timestamp,
            creator_id: self.creator_id,
            thumbnail: self.thumbnail,
            source: self.source,
        }
    }
}
