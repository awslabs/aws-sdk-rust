// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the metadata of a comment.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CommentMetadata {
    /// <p>The ID of the comment.</p>
    #[doc(hidden)]
    pub comment_id: std::option::Option<std::string::String>,
    /// <p>The user who made the comment.</p>
    #[doc(hidden)]
    pub contributor: std::option::Option<crate::types::User>,
    /// <p>The timestamp that the comment was created.</p>
    #[doc(hidden)]
    pub created_timestamp: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The status of the comment.</p>
    #[doc(hidden)]
    pub comment_status: std::option::Option<crate::types::CommentStatusType>,
    /// <p>The ID of the user being replied to.</p>
    #[doc(hidden)]
    pub recipient_id: std::option::Option<std::string::String>,
}
impl CommentMetadata {
    /// <p>The ID of the comment.</p>
    pub fn comment_id(&self) -> std::option::Option<&str> {
        self.comment_id.as_deref()
    }
    /// <p>The user who made the comment.</p>
    pub fn contributor(&self) -> std::option::Option<&crate::types::User> {
        self.contributor.as_ref()
    }
    /// <p>The timestamp that the comment was created.</p>
    pub fn created_timestamp(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_timestamp.as_ref()
    }
    /// <p>The status of the comment.</p>
    pub fn comment_status(&self) -> std::option::Option<&crate::types::CommentStatusType> {
        self.comment_status.as_ref()
    }
    /// <p>The ID of the user being replied to.</p>
    pub fn recipient_id(&self) -> std::option::Option<&str> {
        self.recipient_id.as_deref()
    }
}
impl CommentMetadata {
    /// Creates a new builder-style object to manufacture [`CommentMetadata`](crate::types::CommentMetadata).
    pub fn builder() -> crate::types::builders::CommentMetadataBuilder {
        crate::types::builders::CommentMetadataBuilder::default()
    }
}

/// A builder for [`CommentMetadata`](crate::types::CommentMetadata).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CommentMetadataBuilder {
    pub(crate) comment_id: std::option::Option<std::string::String>,
    pub(crate) contributor: std::option::Option<crate::types::User>,
    pub(crate) created_timestamp: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) comment_status: std::option::Option<crate::types::CommentStatusType>,
    pub(crate) recipient_id: std::option::Option<std::string::String>,
}
impl CommentMetadataBuilder {
    /// <p>The ID of the comment.</p>
    pub fn comment_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.comment_id = Some(input.into());
        self
    }
    /// <p>The ID of the comment.</p>
    pub fn set_comment_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.comment_id = input;
        self
    }
    /// <p>The user who made the comment.</p>
    pub fn contributor(mut self, input: crate::types::User) -> Self {
        self.contributor = Some(input);
        self
    }
    /// <p>The user who made the comment.</p>
    pub fn set_contributor(mut self, input: std::option::Option<crate::types::User>) -> Self {
        self.contributor = input;
        self
    }
    /// <p>The timestamp that the comment was created.</p>
    pub fn created_timestamp(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_timestamp = Some(input);
        self
    }
    /// <p>The timestamp that the comment was created.</p>
    pub fn set_created_timestamp(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_timestamp = input;
        self
    }
    /// <p>The status of the comment.</p>
    pub fn comment_status(mut self, input: crate::types::CommentStatusType) -> Self {
        self.comment_status = Some(input);
        self
    }
    /// <p>The status of the comment.</p>
    pub fn set_comment_status(
        mut self,
        input: std::option::Option<crate::types::CommentStatusType>,
    ) -> Self {
        self.comment_status = input;
        self
    }
    /// <p>The ID of the user being replied to.</p>
    pub fn recipient_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.recipient_id = Some(input.into());
        self
    }
    /// <p>The ID of the user being replied to.</p>
    pub fn set_recipient_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.recipient_id = input;
        self
    }
    /// Consumes the builder and constructs a [`CommentMetadata`](crate::types::CommentMetadata).
    pub fn build(self) -> crate::types::CommentMetadata {
        crate::types::CommentMetadata {
            comment_id: self.comment_id,
            contributor: self.contributor,
            created_timestamp: self.created_timestamp,
            comment_status: self.comment_status,
            recipient_id: self.recipient_id,
        }
    }
}
