// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Filter based on UserIds or GroupIds.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SearchPrincipalType {
    /// <p>UserIds or GroupIds.</p>
    pub id: ::std::string::String,
    /// <p>The Role of a User or Group.</p>
    pub roles: ::std::option::Option<::std::vec::Vec<crate::types::PrincipalRoleType>>,
}
impl SearchPrincipalType {
    /// <p>UserIds or GroupIds.</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>The Role of a User or Group.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.roles.is_none()`.
    pub fn roles(&self) -> &[crate::types::PrincipalRoleType] {
        self.roles.as_deref().unwrap_or_default()
    }
}
impl SearchPrincipalType {
    /// Creates a new builder-style object to manufacture [`SearchPrincipalType`](crate::types::SearchPrincipalType).
    pub fn builder() -> crate::types::builders::SearchPrincipalTypeBuilder {
        crate::types::builders::SearchPrincipalTypeBuilder::default()
    }
}

/// A builder for [`SearchPrincipalType`](crate::types::SearchPrincipalType).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SearchPrincipalTypeBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) roles: ::std::option::Option<::std::vec::Vec<crate::types::PrincipalRoleType>>,
}
impl SearchPrincipalTypeBuilder {
    /// <p>UserIds or GroupIds.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>UserIds or GroupIds.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>UserIds or GroupIds.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// Appends an item to `roles`.
    ///
    /// To override the contents of this collection use [`set_roles`](Self::set_roles).
    ///
    /// <p>The Role of a User or Group.</p>
    pub fn roles(mut self, input: crate::types::PrincipalRoleType) -> Self {
        let mut v = self.roles.unwrap_or_default();
        v.push(input);
        self.roles = ::std::option::Option::Some(v);
        self
    }
    /// <p>The Role of a User or Group.</p>
    pub fn set_roles(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::PrincipalRoleType>>) -> Self {
        self.roles = input;
        self
    }
    /// <p>The Role of a User or Group.</p>
    pub fn get_roles(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::PrincipalRoleType>> {
        &self.roles
    }
    /// Consumes the builder and constructs a [`SearchPrincipalType`](crate::types::SearchPrincipalType).
    /// This method will fail if any of the following fields are not set:
    /// - [`id`](crate::types::builders::SearchPrincipalTypeBuilder::id)
    pub fn build(self) -> ::std::result::Result<crate::types::SearchPrincipalType, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::SearchPrincipalType {
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building SearchPrincipalType",
                )
            })?,
            roles: self.roles,
        })
    }
}
