// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the activity information.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Activity {
    /// <p>The activity type.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::ActivityType>,
    /// <p>The timestamp when the action was performed.</p>
    #[doc(hidden)]
    pub time_stamp: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>Indicates whether an activity is indirect or direct. An indirect activity results from a direct activity performed on a parent resource. For example, sharing a parent folder (the direct activity) shares all of the subfolders and documents within the parent folder (the indirect activity).</p>
    #[doc(hidden)]
    pub is_indirect_activity: bool,
    /// <p>The ID of the organization.</p>
    #[doc(hidden)]
    pub organization_id: std::option::Option<std::string::String>,
    /// <p>The user who performed the action.</p>
    #[doc(hidden)]
    pub initiator: std::option::Option<crate::types::UserMetadata>,
    /// <p>The list of users or groups impacted by this action. This is an optional field and is filled for the following sharing activities: DOCUMENT_SHARED, DOCUMENT_SHARED, DOCUMENT_UNSHARED, FOLDER_SHARED, FOLDER_UNSHARED.</p>
    #[doc(hidden)]
    pub participants: std::option::Option<crate::types::Participants>,
    /// <p>The metadata of the resource involved in the user action.</p>
    #[doc(hidden)]
    pub resource_metadata: std::option::Option<crate::types::ResourceMetadata>,
    /// <p>The original parent of the resource. This is an optional field and is filled for move activities.</p>
    #[doc(hidden)]
    pub original_parent: std::option::Option<crate::types::ResourceMetadata>,
    /// <p>Metadata of the commenting activity. This is an optional field and is filled for commenting activities.</p>
    #[doc(hidden)]
    pub comment_metadata: std::option::Option<crate::types::CommentMetadata>,
}
impl Activity {
    /// <p>The activity type.</p>
    pub fn r#type(&self) -> std::option::Option<&crate::types::ActivityType> {
        self.r#type.as_ref()
    }
    /// <p>The timestamp when the action was performed.</p>
    pub fn time_stamp(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.time_stamp.as_ref()
    }
    /// <p>Indicates whether an activity is indirect or direct. An indirect activity results from a direct activity performed on a parent resource. For example, sharing a parent folder (the direct activity) shares all of the subfolders and documents within the parent folder (the indirect activity).</p>
    pub fn is_indirect_activity(&self) -> bool {
        self.is_indirect_activity
    }
    /// <p>The ID of the organization.</p>
    pub fn organization_id(&self) -> std::option::Option<&str> {
        self.organization_id.as_deref()
    }
    /// <p>The user who performed the action.</p>
    pub fn initiator(&self) -> std::option::Option<&crate::types::UserMetadata> {
        self.initiator.as_ref()
    }
    /// <p>The list of users or groups impacted by this action. This is an optional field and is filled for the following sharing activities: DOCUMENT_SHARED, DOCUMENT_SHARED, DOCUMENT_UNSHARED, FOLDER_SHARED, FOLDER_UNSHARED.</p>
    pub fn participants(&self) -> std::option::Option<&crate::types::Participants> {
        self.participants.as_ref()
    }
    /// <p>The metadata of the resource involved in the user action.</p>
    pub fn resource_metadata(&self) -> std::option::Option<&crate::types::ResourceMetadata> {
        self.resource_metadata.as_ref()
    }
    /// <p>The original parent of the resource. This is an optional field and is filled for move activities.</p>
    pub fn original_parent(&self) -> std::option::Option<&crate::types::ResourceMetadata> {
        self.original_parent.as_ref()
    }
    /// <p>Metadata of the commenting activity. This is an optional field and is filled for commenting activities.</p>
    pub fn comment_metadata(&self) -> std::option::Option<&crate::types::CommentMetadata> {
        self.comment_metadata.as_ref()
    }
}
impl Activity {
    /// Creates a new builder-style object to manufacture [`Activity`](crate::types::Activity).
    pub fn builder() -> crate::types::builders::ActivityBuilder {
        crate::types::builders::ActivityBuilder::default()
    }
}

/// A builder for [`Activity`](crate::types::Activity).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ActivityBuilder {
    pub(crate) r#type: std::option::Option<crate::types::ActivityType>,
    pub(crate) time_stamp: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) is_indirect_activity: std::option::Option<bool>,
    pub(crate) organization_id: std::option::Option<std::string::String>,
    pub(crate) initiator: std::option::Option<crate::types::UserMetadata>,
    pub(crate) participants: std::option::Option<crate::types::Participants>,
    pub(crate) resource_metadata: std::option::Option<crate::types::ResourceMetadata>,
    pub(crate) original_parent: std::option::Option<crate::types::ResourceMetadata>,
    pub(crate) comment_metadata: std::option::Option<crate::types::CommentMetadata>,
}
impl ActivityBuilder {
    /// <p>The activity type.</p>
    pub fn r#type(mut self, input: crate::types::ActivityType) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p>The activity type.</p>
    pub fn set_type(mut self, input: std::option::Option<crate::types::ActivityType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The timestamp when the action was performed.</p>
    pub fn time_stamp(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.time_stamp = Some(input);
        self
    }
    /// <p>The timestamp when the action was performed.</p>
    pub fn set_time_stamp(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.time_stamp = input;
        self
    }
    /// <p>Indicates whether an activity is indirect or direct. An indirect activity results from a direct activity performed on a parent resource. For example, sharing a parent folder (the direct activity) shares all of the subfolders and documents within the parent folder (the indirect activity).</p>
    pub fn is_indirect_activity(mut self, input: bool) -> Self {
        self.is_indirect_activity = Some(input);
        self
    }
    /// <p>Indicates whether an activity is indirect or direct. An indirect activity results from a direct activity performed on a parent resource. For example, sharing a parent folder (the direct activity) shares all of the subfolders and documents within the parent folder (the indirect activity).</p>
    pub fn set_is_indirect_activity(mut self, input: std::option::Option<bool>) -> Self {
        self.is_indirect_activity = input;
        self
    }
    /// <p>The ID of the organization.</p>
    pub fn organization_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.organization_id = Some(input.into());
        self
    }
    /// <p>The ID of the organization.</p>
    pub fn set_organization_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.organization_id = input;
        self
    }
    /// <p>The user who performed the action.</p>
    pub fn initiator(mut self, input: crate::types::UserMetadata) -> Self {
        self.initiator = Some(input);
        self
    }
    /// <p>The user who performed the action.</p>
    pub fn set_initiator(mut self, input: std::option::Option<crate::types::UserMetadata>) -> Self {
        self.initiator = input;
        self
    }
    /// <p>The list of users or groups impacted by this action. This is an optional field and is filled for the following sharing activities: DOCUMENT_SHARED, DOCUMENT_SHARED, DOCUMENT_UNSHARED, FOLDER_SHARED, FOLDER_UNSHARED.</p>
    pub fn participants(mut self, input: crate::types::Participants) -> Self {
        self.participants = Some(input);
        self
    }
    /// <p>The list of users or groups impacted by this action. This is an optional field and is filled for the following sharing activities: DOCUMENT_SHARED, DOCUMENT_SHARED, DOCUMENT_UNSHARED, FOLDER_SHARED, FOLDER_UNSHARED.</p>
    pub fn set_participants(
        mut self,
        input: std::option::Option<crate::types::Participants>,
    ) -> Self {
        self.participants = input;
        self
    }
    /// <p>The metadata of the resource involved in the user action.</p>
    pub fn resource_metadata(mut self, input: crate::types::ResourceMetadata) -> Self {
        self.resource_metadata = Some(input);
        self
    }
    /// <p>The metadata of the resource involved in the user action.</p>
    pub fn set_resource_metadata(
        mut self,
        input: std::option::Option<crate::types::ResourceMetadata>,
    ) -> Self {
        self.resource_metadata = input;
        self
    }
    /// <p>The original parent of the resource. This is an optional field and is filled for move activities.</p>
    pub fn original_parent(mut self, input: crate::types::ResourceMetadata) -> Self {
        self.original_parent = Some(input);
        self
    }
    /// <p>The original parent of the resource. This is an optional field and is filled for move activities.</p>
    pub fn set_original_parent(
        mut self,
        input: std::option::Option<crate::types::ResourceMetadata>,
    ) -> Self {
        self.original_parent = input;
        self
    }
    /// <p>Metadata of the commenting activity. This is an optional field and is filled for commenting activities.</p>
    pub fn comment_metadata(mut self, input: crate::types::CommentMetadata) -> Self {
        self.comment_metadata = Some(input);
        self
    }
    /// <p>Metadata of the commenting activity. This is an optional field and is filled for commenting activities.</p>
    pub fn set_comment_metadata(
        mut self,
        input: std::option::Option<crate::types::CommentMetadata>,
    ) -> Self {
        self.comment_metadata = input;
        self
    }
    /// Consumes the builder and constructs a [`Activity`](crate::types::Activity).
    pub fn build(self) -> crate::types::Activity {
        crate::types::Activity {
            r#type: self.r#type,
            time_stamp: self.time_stamp,
            is_indirect_activity: self.is_indirect_activity.unwrap_or_default(),
            organization_id: self.organization_id,
            initiator: self.initiator,
            participants: self.participants,
            resource_metadata: self.resource_metadata,
            original_parent: self.original_parent,
            comment_metadata: self.comment_metadata,
        }
    }
}
