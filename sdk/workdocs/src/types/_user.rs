// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a user.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct User {
    /// <p>The ID of the user.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The login name of the user.</p>
    #[doc(hidden)]
    pub username: std::option::Option<std::string::String>,
    /// <p>The email address of the user.</p>
    #[doc(hidden)]
    pub email_address: std::option::Option<std::string::String>,
    /// <p>The given name of the user.</p>
    #[doc(hidden)]
    pub given_name: std::option::Option<std::string::String>,
    /// <p>The surname of the user.</p>
    #[doc(hidden)]
    pub surname: std::option::Option<std::string::String>,
    /// <p>The ID of the organization.</p>
    #[doc(hidden)]
    pub organization_id: std::option::Option<std::string::String>,
    /// <p>The ID of the root folder.</p>
    #[doc(hidden)]
    pub root_folder_id: std::option::Option<std::string::String>,
    /// <p>The ID of the recycle bin folder.</p>
    #[doc(hidden)]
    pub recycle_bin_folder_id: std::option::Option<std::string::String>,
    /// <p>The status of the user.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::UserStatusType>,
    /// <p>The type of user.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::UserType>,
    /// <p>The time when the user was created.</p>
    #[doc(hidden)]
    pub created_timestamp: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The time when the user was modified.</p>
    #[doc(hidden)]
    pub modified_timestamp: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The time zone ID of the user.</p>
    #[doc(hidden)]
    pub time_zone_id: std::option::Option<std::string::String>,
    /// <p>The locale of the user.</p>
    #[doc(hidden)]
    pub locale: std::option::Option<crate::types::LocaleType>,
    /// <p>The storage for the user.</p>
    #[doc(hidden)]
    pub storage: std::option::Option<crate::types::UserStorageMetadata>,
}
impl User {
    /// <p>The ID of the user.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The login name of the user.</p>
    pub fn username(&self) -> std::option::Option<&str> {
        self.username.as_deref()
    }
    /// <p>The email address of the user.</p>
    pub fn email_address(&self) -> std::option::Option<&str> {
        self.email_address.as_deref()
    }
    /// <p>The given name of the user.</p>
    pub fn given_name(&self) -> std::option::Option<&str> {
        self.given_name.as_deref()
    }
    /// <p>The surname of the user.</p>
    pub fn surname(&self) -> std::option::Option<&str> {
        self.surname.as_deref()
    }
    /// <p>The ID of the organization.</p>
    pub fn organization_id(&self) -> std::option::Option<&str> {
        self.organization_id.as_deref()
    }
    /// <p>The ID of the root folder.</p>
    pub fn root_folder_id(&self) -> std::option::Option<&str> {
        self.root_folder_id.as_deref()
    }
    /// <p>The ID of the recycle bin folder.</p>
    pub fn recycle_bin_folder_id(&self) -> std::option::Option<&str> {
        self.recycle_bin_folder_id.as_deref()
    }
    /// <p>The status of the user.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::UserStatusType> {
        self.status.as_ref()
    }
    /// <p>The type of user.</p>
    pub fn r#type(&self) -> std::option::Option<&crate::types::UserType> {
        self.r#type.as_ref()
    }
    /// <p>The time when the user was created.</p>
    pub fn created_timestamp(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_timestamp.as_ref()
    }
    /// <p>The time when the user was modified.</p>
    pub fn modified_timestamp(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.modified_timestamp.as_ref()
    }
    /// <p>The time zone ID of the user.</p>
    pub fn time_zone_id(&self) -> std::option::Option<&str> {
        self.time_zone_id.as_deref()
    }
    /// <p>The locale of the user.</p>
    pub fn locale(&self) -> std::option::Option<&crate::types::LocaleType> {
        self.locale.as_ref()
    }
    /// <p>The storage for the user.</p>
    pub fn storage(&self) -> std::option::Option<&crate::types::UserStorageMetadata> {
        self.storage.as_ref()
    }
}
impl std::fmt::Debug for User {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("User");
        formatter.field("id", &self.id);
        formatter.field("username", &self.username);
        formatter.field("email_address", &"*** Sensitive Data Redacted ***");
        formatter.field("given_name", &self.given_name);
        formatter.field("surname", &self.surname);
        formatter.field("organization_id", &self.organization_id);
        formatter.field("root_folder_id", &self.root_folder_id);
        formatter.field("recycle_bin_folder_id", &self.recycle_bin_folder_id);
        formatter.field("status", &self.status);
        formatter.field("r#type", &self.r#type);
        formatter.field("created_timestamp", &self.created_timestamp);
        formatter.field("modified_timestamp", &self.modified_timestamp);
        formatter.field("time_zone_id", &self.time_zone_id);
        formatter.field("locale", &self.locale);
        formatter.field("storage", &self.storage);
        formatter.finish()
    }
}
impl User {
    /// Creates a new builder-style object to manufacture [`User`](crate::types::User).
    pub fn builder() -> crate::types::builders::UserBuilder {
        crate::types::builders::UserBuilder::default()
    }
}

/// A builder for [`User`](crate::types::User).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct UserBuilder {
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) username: std::option::Option<std::string::String>,
    pub(crate) email_address: std::option::Option<std::string::String>,
    pub(crate) given_name: std::option::Option<std::string::String>,
    pub(crate) surname: std::option::Option<std::string::String>,
    pub(crate) organization_id: std::option::Option<std::string::String>,
    pub(crate) root_folder_id: std::option::Option<std::string::String>,
    pub(crate) recycle_bin_folder_id: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<crate::types::UserStatusType>,
    pub(crate) r#type: std::option::Option<crate::types::UserType>,
    pub(crate) created_timestamp: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) modified_timestamp: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) time_zone_id: std::option::Option<std::string::String>,
    pub(crate) locale: std::option::Option<crate::types::LocaleType>,
    pub(crate) storage: std::option::Option<crate::types::UserStorageMetadata>,
}
impl UserBuilder {
    /// <p>The ID of the user.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>The ID of the user.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The login name of the user.</p>
    pub fn username(mut self, input: impl Into<std::string::String>) -> Self {
        self.username = Some(input.into());
        self
    }
    /// <p>The login name of the user.</p>
    pub fn set_username(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.username = input;
        self
    }
    /// <p>The email address of the user.</p>
    pub fn email_address(mut self, input: impl Into<std::string::String>) -> Self {
        self.email_address = Some(input.into());
        self
    }
    /// <p>The email address of the user.</p>
    pub fn set_email_address(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.email_address = input;
        self
    }
    /// <p>The given name of the user.</p>
    pub fn given_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.given_name = Some(input.into());
        self
    }
    /// <p>The given name of the user.</p>
    pub fn set_given_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.given_name = input;
        self
    }
    /// <p>The surname of the user.</p>
    pub fn surname(mut self, input: impl Into<std::string::String>) -> Self {
        self.surname = Some(input.into());
        self
    }
    /// <p>The surname of the user.</p>
    pub fn set_surname(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.surname = input;
        self
    }
    /// <p>The ID of the organization.</p>
    pub fn organization_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.organization_id = Some(input.into());
        self
    }
    /// <p>The ID of the organization.</p>
    pub fn set_organization_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.organization_id = input;
        self
    }
    /// <p>The ID of the root folder.</p>
    pub fn root_folder_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.root_folder_id = Some(input.into());
        self
    }
    /// <p>The ID of the root folder.</p>
    pub fn set_root_folder_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.root_folder_id = input;
        self
    }
    /// <p>The ID of the recycle bin folder.</p>
    pub fn recycle_bin_folder_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.recycle_bin_folder_id = Some(input.into());
        self
    }
    /// <p>The ID of the recycle bin folder.</p>
    pub fn set_recycle_bin_folder_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.recycle_bin_folder_id = input;
        self
    }
    /// <p>The status of the user.</p>
    pub fn status(mut self, input: crate::types::UserStatusType) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The status of the user.</p>
    pub fn set_status(mut self, input: std::option::Option<crate::types::UserStatusType>) -> Self {
        self.status = input;
        self
    }
    /// <p>The type of user.</p>
    pub fn r#type(mut self, input: crate::types::UserType) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p>The type of user.</p>
    pub fn set_type(mut self, input: std::option::Option<crate::types::UserType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The time when the user was created.</p>
    pub fn created_timestamp(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_timestamp = Some(input);
        self
    }
    /// <p>The time when the user was created.</p>
    pub fn set_created_timestamp(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_timestamp = input;
        self
    }
    /// <p>The time when the user was modified.</p>
    pub fn modified_timestamp(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.modified_timestamp = Some(input);
        self
    }
    /// <p>The time when the user was modified.</p>
    pub fn set_modified_timestamp(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.modified_timestamp = input;
        self
    }
    /// <p>The time zone ID of the user.</p>
    pub fn time_zone_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.time_zone_id = Some(input.into());
        self
    }
    /// <p>The time zone ID of the user.</p>
    pub fn set_time_zone_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.time_zone_id = input;
        self
    }
    /// <p>The locale of the user.</p>
    pub fn locale(mut self, input: crate::types::LocaleType) -> Self {
        self.locale = Some(input);
        self
    }
    /// <p>The locale of the user.</p>
    pub fn set_locale(mut self, input: std::option::Option<crate::types::LocaleType>) -> Self {
        self.locale = input;
        self
    }
    /// <p>The storage for the user.</p>
    pub fn storage(mut self, input: crate::types::UserStorageMetadata) -> Self {
        self.storage = Some(input);
        self
    }
    /// <p>The storage for the user.</p>
    pub fn set_storage(
        mut self,
        input: std::option::Option<crate::types::UserStorageMetadata>,
    ) -> Self {
        self.storage = input;
        self
    }
    /// Consumes the builder and constructs a [`User`](crate::types::User).
    pub fn build(self) -> crate::types::User {
        crate::types::User {
            id: self.id,
            username: self.username,
            email_address: self.email_address,
            given_name: self.given_name,
            surname: self.surname,
            organization_id: self.organization_id,
            root_folder_id: self.root_folder_id,
            recycle_bin_folder_id: self.recycle_bin_folder_id,
            status: self.status,
            r#type: self.r#type,
            created_timestamp: self.created_timestamp,
            modified_timestamp: self.modified_timestamp,
            time_zone_id: self.time_zone_id,
            locale: self.locale,
            storage: self.storage,
        }
    }
}
impl std::fmt::Debug for UserBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UserBuilder");
        formatter.field("id", &self.id);
        formatter.field("username", &self.username);
        formatter.field("email_address", &"*** Sensitive Data Redacted ***");
        formatter.field("given_name", &self.given_name);
        formatter.field("surname", &self.surname);
        formatter.field("organization_id", &self.organization_id);
        formatter.field("root_folder_id", &self.root_folder_id);
        formatter.field("recycle_bin_folder_id", &self.recycle_bin_folder_id);
        formatter.field("status", &self.status);
        formatter.field("r#type", &self.r#type);
        formatter.field("created_timestamp", &self.created_timestamp);
        formatter.field("modified_timestamp", &self.modified_timestamp);
        formatter.field("time_zone_id", &self.time_zone_id);
        formatter.field("locale", &self.locale);
        formatter.field("storage", &self.storage);
        formatter.finish()
    }
}
