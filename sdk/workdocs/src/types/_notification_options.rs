// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Set of options which defines notification preferences of given action.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct NotificationOptions {
    /// <p>Boolean value to indicate an email notification should be sent to the receipients.</p>
    #[doc(hidden)]
    pub send_email: bool,
    /// <p>Text value to be included in the email body.</p>
    #[doc(hidden)]
    pub email_message: std::option::Option<std::string::String>,
}
impl NotificationOptions {
    /// <p>Boolean value to indicate an email notification should be sent to the receipients.</p>
    pub fn send_email(&self) -> bool {
        self.send_email
    }
    /// <p>Text value to be included in the email body.</p>
    pub fn email_message(&self) -> std::option::Option<&str> {
        self.email_message.as_deref()
    }
}
impl std::fmt::Debug for NotificationOptions {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("NotificationOptions");
        formatter.field("send_email", &self.send_email);
        formatter.field("email_message", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl NotificationOptions {
    /// Creates a new builder-style object to manufacture [`NotificationOptions`](crate::types::NotificationOptions).
    pub fn builder() -> crate::types::builders::NotificationOptionsBuilder {
        crate::types::builders::NotificationOptionsBuilder::default()
    }
}

/// A builder for [`NotificationOptions`](crate::types::NotificationOptions).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct NotificationOptionsBuilder {
    pub(crate) send_email: std::option::Option<bool>,
    pub(crate) email_message: std::option::Option<std::string::String>,
}
impl NotificationOptionsBuilder {
    /// <p>Boolean value to indicate an email notification should be sent to the receipients.</p>
    pub fn send_email(mut self, input: bool) -> Self {
        self.send_email = Some(input);
        self
    }
    /// <p>Boolean value to indicate an email notification should be sent to the receipients.</p>
    pub fn set_send_email(mut self, input: std::option::Option<bool>) -> Self {
        self.send_email = input;
        self
    }
    /// <p>Text value to be included in the email body.</p>
    pub fn email_message(mut self, input: impl Into<std::string::String>) -> Self {
        self.email_message = Some(input.into());
        self
    }
    /// <p>Text value to be included in the email body.</p>
    pub fn set_email_message(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.email_message = input;
        self
    }
    /// Consumes the builder and constructs a [`NotificationOptions`](crate::types::NotificationOptions).
    pub fn build(self) -> crate::types::NotificationOptions {
        crate::types::NotificationOptions {
            send_email: self.send_email.unwrap_or_default(),
            email_message: self.email_message,
        }
    }
}
impl std::fmt::Debug for NotificationOptionsBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("NotificationOptionsBuilder");
        formatter.field("send_email", &self.send_email);
        formatter.field("email_message", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
