// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `LanguageCodeType`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let languagecodetype = unimplemented!();
/// match languagecodetype {
///     LanguageCodeType::Ar => { /* ... */ },
///     LanguageCodeType::Bg => { /* ... */ },
///     LanguageCodeType::Bn => { /* ... */ },
///     LanguageCodeType::Cs => { /* ... */ },
///     LanguageCodeType::Da => { /* ... */ },
///     LanguageCodeType::De => { /* ... */ },
///     LanguageCodeType::Default => { /* ... */ },
///     LanguageCodeType::El => { /* ... */ },
///     LanguageCodeType::En => { /* ... */ },
///     LanguageCodeType::Es => { /* ... */ },
///     LanguageCodeType::Fa => { /* ... */ },
///     LanguageCodeType::Fi => { /* ... */ },
///     LanguageCodeType::Fr => { /* ... */ },
///     LanguageCodeType::Hi => { /* ... */ },
///     LanguageCodeType::Hu => { /* ... */ },
///     LanguageCodeType::Id => { /* ... */ },
///     LanguageCodeType::It => { /* ... */ },
///     LanguageCodeType::Ja => { /* ... */ },
///     LanguageCodeType::Ko => { /* ... */ },
///     LanguageCodeType::Lt => { /* ... */ },
///     LanguageCodeType::Lv => { /* ... */ },
///     LanguageCodeType::Nl => { /* ... */ },
///     LanguageCodeType::No => { /* ... */ },
///     LanguageCodeType::Pt => { /* ... */ },
///     LanguageCodeType::Ro => { /* ... */ },
///     LanguageCodeType::Ru => { /* ... */ },
///     LanguageCodeType::Sv => { /* ... */ },
///     LanguageCodeType::Sw => { /* ... */ },
///     LanguageCodeType::Th => { /* ... */ },
///     LanguageCodeType::Tr => { /* ... */ },
///     LanguageCodeType::Zh => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `languagecodetype` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `LanguageCodeType::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `LanguageCodeType::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `LanguageCodeType::NewFeature` is defined.
/// Specifically, when `languagecodetype` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `LanguageCodeType::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
///
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::Ord, ::std::cmp::PartialEq, ::std::cmp::PartialOrd, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub enum LanguageCodeType {
    #[allow(missing_docs)] // documentation missing in model
    Ar,
    #[allow(missing_docs)] // documentation missing in model
    Bg,
    #[allow(missing_docs)] // documentation missing in model
    Bn,
    #[allow(missing_docs)] // documentation missing in model
    Cs,
    #[allow(missing_docs)] // documentation missing in model
    Da,
    #[allow(missing_docs)] // documentation missing in model
    De,
    #[allow(missing_docs)] // documentation missing in model
    Default,
    #[allow(missing_docs)] // documentation missing in model
    El,
    #[allow(missing_docs)] // documentation missing in model
    En,
    #[allow(missing_docs)] // documentation missing in model
    Es,
    #[allow(missing_docs)] // documentation missing in model
    Fa,
    #[allow(missing_docs)] // documentation missing in model
    Fi,
    #[allow(missing_docs)] // documentation missing in model
    Fr,
    #[allow(missing_docs)] // documentation missing in model
    Hi,
    #[allow(missing_docs)] // documentation missing in model
    Hu,
    #[allow(missing_docs)] // documentation missing in model
    Id,
    #[allow(missing_docs)] // documentation missing in model
    It,
    #[allow(missing_docs)] // documentation missing in model
    Ja,
    #[allow(missing_docs)] // documentation missing in model
    Ko,
    #[allow(missing_docs)] // documentation missing in model
    Lt,
    #[allow(missing_docs)] // documentation missing in model
    Lv,
    #[allow(missing_docs)] // documentation missing in model
    Nl,
    #[allow(missing_docs)] // documentation missing in model
    No,
    #[allow(missing_docs)] // documentation missing in model
    Pt,
    #[allow(missing_docs)] // documentation missing in model
    Ro,
    #[allow(missing_docs)] // documentation missing in model
    Ru,
    #[allow(missing_docs)] // documentation missing in model
    Sv,
    #[allow(missing_docs)] // documentation missing in model
    Sw,
    #[allow(missing_docs)] // documentation missing in model
    Th,
    #[allow(missing_docs)] // documentation missing in model
    Tr,
    #[allow(missing_docs)] // documentation missing in model
    Zh,
    /// `Unknown` contains new variants that have been added since this code was generated.
    #[deprecated(note = "Don't directly match on `Unknown`. See the docs on this enum for the correct way to handle unknown variants.")]
    Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue),
}
impl ::std::convert::From<&str> for LanguageCodeType {
    fn from(s: &str) -> Self {
        match s {
            "AR" => LanguageCodeType::Ar,
            "BG" => LanguageCodeType::Bg,
            "BN" => LanguageCodeType::Bn,
            "CS" => LanguageCodeType::Cs,
            "DA" => LanguageCodeType::Da,
            "DE" => LanguageCodeType::De,
            "DEFAULT" => LanguageCodeType::Default,
            "EL" => LanguageCodeType::El,
            "EN" => LanguageCodeType::En,
            "ES" => LanguageCodeType::Es,
            "FA" => LanguageCodeType::Fa,
            "FI" => LanguageCodeType::Fi,
            "FR" => LanguageCodeType::Fr,
            "HI" => LanguageCodeType::Hi,
            "HU" => LanguageCodeType::Hu,
            "ID" => LanguageCodeType::Id,
            "IT" => LanguageCodeType::It,
            "JA" => LanguageCodeType::Ja,
            "KO" => LanguageCodeType::Ko,
            "LT" => LanguageCodeType::Lt,
            "LV" => LanguageCodeType::Lv,
            "NL" => LanguageCodeType::Nl,
            "NO" => LanguageCodeType::No,
            "PT" => LanguageCodeType::Pt,
            "RO" => LanguageCodeType::Ro,
            "RU" => LanguageCodeType::Ru,
            "SV" => LanguageCodeType::Sv,
            "SW" => LanguageCodeType::Sw,
            "TH" => LanguageCodeType::Th,
            "TR" => LanguageCodeType::Tr,
            "ZH" => LanguageCodeType::Zh,
            other => LanguageCodeType::Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl ::std::str::FromStr for LanguageCodeType {
    type Err = ::std::convert::Infallible;

    fn from_str(s: &str) -> ::std::result::Result<Self, <Self as ::std::str::FromStr>::Err> {
        ::std::result::Result::Ok(LanguageCodeType::from(s))
    }
}
impl LanguageCodeType {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            LanguageCodeType::Ar => "AR",
            LanguageCodeType::Bg => "BG",
            LanguageCodeType::Bn => "BN",
            LanguageCodeType::Cs => "CS",
            LanguageCodeType::Da => "DA",
            LanguageCodeType::De => "DE",
            LanguageCodeType::Default => "DEFAULT",
            LanguageCodeType::El => "EL",
            LanguageCodeType::En => "EN",
            LanguageCodeType::Es => "ES",
            LanguageCodeType::Fa => "FA",
            LanguageCodeType::Fi => "FI",
            LanguageCodeType::Fr => "FR",
            LanguageCodeType::Hi => "HI",
            LanguageCodeType::Hu => "HU",
            LanguageCodeType::Id => "ID",
            LanguageCodeType::It => "IT",
            LanguageCodeType::Ja => "JA",
            LanguageCodeType::Ko => "KO",
            LanguageCodeType::Lt => "LT",
            LanguageCodeType::Lv => "LV",
            LanguageCodeType::Nl => "NL",
            LanguageCodeType::No => "NO",
            LanguageCodeType::Pt => "PT",
            LanguageCodeType::Ro => "RO",
            LanguageCodeType::Ru => "RU",
            LanguageCodeType::Sv => "SV",
            LanguageCodeType::Sw => "SW",
            LanguageCodeType::Th => "TH",
            LanguageCodeType::Tr => "TR",
            LanguageCodeType::Zh => "ZH",
            LanguageCodeType::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "AR", "BG", "BN", "CS", "DA", "DE", "DEFAULT", "EL", "EN", "ES", "FA", "FI", "FR", "HI", "HU", "ID", "IT", "JA", "KO", "LT", "LV", "NL",
            "NO", "PT", "RO", "RU", "SV", "SW", "TH", "TR", "ZH",
        ]
    }
}
impl ::std::convert::AsRef<str> for LanguageCodeType {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
impl LanguageCodeType {
    /// Parses the enum value while disallowing unknown variants.
    ///
    /// Unknown variants will result in an error.
    pub fn try_parse(value: &str) -> ::std::result::Result<Self, crate::error::UnknownVariantError> {
        match Self::from(value) {
            #[allow(deprecated)]
            Self::Unknown(_) => ::std::result::Result::Err(crate::error::UnknownVariantError::new(value)),
            known => Ok(known),
        }
    }
}
impl ::std::fmt::Display for LanguageCodeType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match self {
            LanguageCodeType::Ar => write!(f, "AR"),
            LanguageCodeType::Bg => write!(f, "BG"),
            LanguageCodeType::Bn => write!(f, "BN"),
            LanguageCodeType::Cs => write!(f, "CS"),
            LanguageCodeType::Da => write!(f, "DA"),
            LanguageCodeType::De => write!(f, "DE"),
            LanguageCodeType::Default => write!(f, "DEFAULT"),
            LanguageCodeType::El => write!(f, "EL"),
            LanguageCodeType::En => write!(f, "EN"),
            LanguageCodeType::Es => write!(f, "ES"),
            LanguageCodeType::Fa => write!(f, "FA"),
            LanguageCodeType::Fi => write!(f, "FI"),
            LanguageCodeType::Fr => write!(f, "FR"),
            LanguageCodeType::Hi => write!(f, "HI"),
            LanguageCodeType::Hu => write!(f, "HU"),
            LanguageCodeType::Id => write!(f, "ID"),
            LanguageCodeType::It => write!(f, "IT"),
            LanguageCodeType::Ja => write!(f, "JA"),
            LanguageCodeType::Ko => write!(f, "KO"),
            LanguageCodeType::Lt => write!(f, "LT"),
            LanguageCodeType::Lv => write!(f, "LV"),
            LanguageCodeType::Nl => write!(f, "NL"),
            LanguageCodeType::No => write!(f, "NO"),
            LanguageCodeType::Pt => write!(f, "PT"),
            LanguageCodeType::Ro => write!(f, "RO"),
            LanguageCodeType::Ru => write!(f, "RU"),
            LanguageCodeType::Sv => write!(f, "SV"),
            LanguageCodeType::Sw => write!(f, "SW"),
            LanguageCodeType::Th => write!(f, "TH"),
            LanguageCodeType::Tr => write!(f, "TR"),
            LanguageCodeType::Zh => write!(f, "ZH"),
            LanguageCodeType::Unknown(value) => write!(f, "{value}"),
        }
    }
}
