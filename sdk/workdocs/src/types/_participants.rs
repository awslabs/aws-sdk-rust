// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the users or user groups.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Participants {
    /// <p>The list of users.</p>
    pub users: ::std::option::Option<::std::vec::Vec<crate::types::UserMetadata>>,
    /// <p>The list of user groups.</p>
    pub groups: ::std::option::Option<::std::vec::Vec<crate::types::GroupMetadata>>,
}
impl Participants {
    /// <p>The list of users.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.users.is_none()`.
    pub fn users(&self) -> &[crate::types::UserMetadata] {
        self.users.as_deref().unwrap_or_default()
    }
    /// <p>The list of user groups.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.groups.is_none()`.
    pub fn groups(&self) -> &[crate::types::GroupMetadata] {
        self.groups.as_deref().unwrap_or_default()
    }
}
impl Participants {
    /// Creates a new builder-style object to manufacture [`Participants`](crate::types::Participants).
    pub fn builder() -> crate::types::builders::ParticipantsBuilder {
        crate::types::builders::ParticipantsBuilder::default()
    }
}

/// A builder for [`Participants`](crate::types::Participants).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ParticipantsBuilder {
    pub(crate) users: ::std::option::Option<::std::vec::Vec<crate::types::UserMetadata>>,
    pub(crate) groups: ::std::option::Option<::std::vec::Vec<crate::types::GroupMetadata>>,
}
impl ParticipantsBuilder {
    /// Appends an item to `users`.
    ///
    /// To override the contents of this collection use [`set_users`](Self::set_users).
    ///
    /// <p>The list of users.</p>
    pub fn users(mut self, input: crate::types::UserMetadata) -> Self {
        let mut v = self.users.unwrap_or_default();
        v.push(input);
        self.users = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of users.</p>
    pub fn set_users(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::UserMetadata>>) -> Self {
        self.users = input;
        self
    }
    /// <p>The list of users.</p>
    pub fn get_users(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::UserMetadata>> {
        &self.users
    }
    /// Appends an item to `groups`.
    ///
    /// To override the contents of this collection use [`set_groups`](Self::set_groups).
    ///
    /// <p>The list of user groups.</p>
    pub fn groups(mut self, input: crate::types::GroupMetadata) -> Self {
        let mut v = self.groups.unwrap_or_default();
        v.push(input);
        self.groups = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of user groups.</p>
    pub fn set_groups(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::GroupMetadata>>) -> Self {
        self.groups = input;
        self
    }
    /// <p>The list of user groups.</p>
    pub fn get_groups(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::GroupMetadata>> {
        &self.groups
    }
    /// Consumes the builder and constructs a [`Participants`](crate::types::Participants).
    pub fn build(self) -> crate::types::Participants {
        crate::types::Participants {
            users: self.users,
            groups: self.groups,
        }
    }
}
