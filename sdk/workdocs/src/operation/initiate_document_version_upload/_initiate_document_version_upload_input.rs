// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct InitiateDocumentVersionUploadInput {
    /// <p>Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.</p>
    #[doc(hidden)]
    pub authentication_token: std::option::Option<std::string::String>,
    /// <p>The ID of the document.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The name of the document.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The timestamp when the content of the document was originally created.</p>
    #[doc(hidden)]
    pub content_created_timestamp: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The timestamp when the content of the document was modified.</p>
    #[doc(hidden)]
    pub content_modified_timestamp: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The content type of the document.</p>
    #[doc(hidden)]
    pub content_type: std::option::Option<std::string::String>,
    /// <p>The size of the document, in bytes.</p>
    #[doc(hidden)]
    pub document_size_in_bytes: std::option::Option<i64>,
    /// <p>The ID of the parent folder.</p>
    #[doc(hidden)]
    pub parent_folder_id: std::option::Option<std::string::String>,
}
impl InitiateDocumentVersionUploadInput {
    /// <p>Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.</p>
    pub fn authentication_token(&self) -> std::option::Option<&str> {
        self.authentication_token.as_deref()
    }
    /// <p>The ID of the document.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The name of the document.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The timestamp when the content of the document was originally created.</p>
    pub fn content_created_timestamp(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.content_created_timestamp.as_ref()
    }
    /// <p>The timestamp when the content of the document was modified.</p>
    pub fn content_modified_timestamp(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.content_modified_timestamp.as_ref()
    }
    /// <p>The content type of the document.</p>
    pub fn content_type(&self) -> std::option::Option<&str> {
        self.content_type.as_deref()
    }
    /// <p>The size of the document, in bytes.</p>
    pub fn document_size_in_bytes(&self) -> std::option::Option<i64> {
        self.document_size_in_bytes
    }
    /// <p>The ID of the parent folder.</p>
    pub fn parent_folder_id(&self) -> std::option::Option<&str> {
        self.parent_folder_id.as_deref()
    }
}
impl std::fmt::Debug for InitiateDocumentVersionUploadInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("InitiateDocumentVersionUploadInput");
        formatter.field("authentication_token", &"*** Sensitive Data Redacted ***");
        formatter.field("id", &self.id);
        formatter.field("name", &self.name);
        formatter.field("content_created_timestamp", &self.content_created_timestamp);
        formatter.field(
            "content_modified_timestamp",
            &self.content_modified_timestamp,
        );
        formatter.field("content_type", &self.content_type);
        formatter.field("document_size_in_bytes", &self.document_size_in_bytes);
        formatter.field("parent_folder_id", &self.parent_folder_id);
        formatter.finish()
    }
}
impl InitiateDocumentVersionUploadInput {
    /// Creates a new builder-style object to manufacture [`InitiateDocumentVersionUploadInput`](crate::operation::initiate_document_version_upload::InitiateDocumentVersionUploadInput).
    pub fn builder() -> crate::operation::initiate_document_version_upload::builders::InitiateDocumentVersionUploadInputBuilder{
        crate::operation::initiate_document_version_upload::builders::InitiateDocumentVersionUploadInputBuilder::default()
    }
}

/// A builder for [`InitiateDocumentVersionUploadInput`](crate::operation::initiate_document_version_upload::InitiateDocumentVersionUploadInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct InitiateDocumentVersionUploadInputBuilder {
    pub(crate) authentication_token: std::option::Option<std::string::String>,
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) content_created_timestamp: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) content_modified_timestamp: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) content_type: std::option::Option<std::string::String>,
    pub(crate) document_size_in_bytes: std::option::Option<i64>,
    pub(crate) parent_folder_id: std::option::Option<std::string::String>,
}
impl InitiateDocumentVersionUploadInputBuilder {
    /// <p>Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.</p>
    pub fn authentication_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.authentication_token = Some(input.into());
        self
    }
    /// <p>Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.</p>
    pub fn set_authentication_token(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.authentication_token = input;
        self
    }
    /// <p>The ID of the document.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>The ID of the document.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The name of the document.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the document.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The timestamp when the content of the document was originally created.</p>
    pub fn content_created_timestamp(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.content_created_timestamp = Some(input);
        self
    }
    /// <p>The timestamp when the content of the document was originally created.</p>
    pub fn set_content_created_timestamp(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.content_created_timestamp = input;
        self
    }
    /// <p>The timestamp when the content of the document was modified.</p>
    pub fn content_modified_timestamp(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.content_modified_timestamp = Some(input);
        self
    }
    /// <p>The timestamp when the content of the document was modified.</p>
    pub fn set_content_modified_timestamp(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.content_modified_timestamp = input;
        self
    }
    /// <p>The content type of the document.</p>
    pub fn content_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.content_type = Some(input.into());
        self
    }
    /// <p>The content type of the document.</p>
    pub fn set_content_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.content_type = input;
        self
    }
    /// <p>The size of the document, in bytes.</p>
    pub fn document_size_in_bytes(mut self, input: i64) -> Self {
        self.document_size_in_bytes = Some(input);
        self
    }
    /// <p>The size of the document, in bytes.</p>
    pub fn set_document_size_in_bytes(mut self, input: std::option::Option<i64>) -> Self {
        self.document_size_in_bytes = input;
        self
    }
    /// <p>The ID of the parent folder.</p>
    pub fn parent_folder_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.parent_folder_id = Some(input.into());
        self
    }
    /// <p>The ID of the parent folder.</p>
    pub fn set_parent_folder_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.parent_folder_id = input;
        self
    }
    /// Consumes the builder and constructs a [`InitiateDocumentVersionUploadInput`](crate::operation::initiate_document_version_upload::InitiateDocumentVersionUploadInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::initiate_document_version_upload::InitiateDocumentVersionUploadInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::initiate_document_version_upload::InitiateDocumentVersionUploadInput {
                authentication_token: self.authentication_token
                ,
                id: self.id
                ,
                name: self.name
                ,
                content_created_timestamp: self.content_created_timestamp
                ,
                content_modified_timestamp: self.content_modified_timestamp
                ,
                content_type: self.content_type
                ,
                document_size_in_bytes: self.document_size_in_bytes
                ,
                parent_folder_id: self.parent_folder_id
                ,
            }
        )
    }
}
impl std::fmt::Debug for InitiateDocumentVersionUploadInputBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("InitiateDocumentVersionUploadInputBuilder");
        formatter.field("authentication_token", &"*** Sensitive Data Redacted ***");
        formatter.field("id", &self.id);
        formatter.field("name", &self.name);
        formatter.field("content_created_timestamp", &self.content_created_timestamp);
        formatter.field(
            "content_modified_timestamp",
            &self.content_modified_timestamp,
        );
        formatter.field("content_type", &self.content_type);
        formatter.field("document_size_in_bytes", &self.document_size_in_bytes);
        formatter.field("parent_folder_id", &self.parent_folder_id);
        formatter.finish()
    }
}
