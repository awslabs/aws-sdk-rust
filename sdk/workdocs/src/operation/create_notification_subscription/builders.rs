// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_notification_subscription::_create_notification_subscription_output::CreateNotificationSubscriptionOutputBuilder;

pub use crate::operation::create_notification_subscription::_create_notification_subscription_input::CreateNotificationSubscriptionInputBuilder;

/// Fluent builder constructing a request to `CreateNotificationSubscription`.
///
/// <p>Configure Amazon WorkDocs to use Amazon SNS notifications. The endpoint receives a confirmation message, and must confirm the subscription.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/workdocs/latest/developerguide/manage-notifications.html">Setting up notifications for an IAM user or role</a> in the <i>Amazon WorkDocs Developer Guide</i>.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateNotificationSubscriptionFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::create_notification_subscription::builders::CreateNotificationSubscriptionInputBuilder
            }
impl CreateNotificationSubscriptionFluentBuilder {
    /// Creates a new `CreateNotificationSubscription`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::create_notification_subscription::CreateNotificationSubscription,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::create_notification_subscription::CreateNotificationSubscriptionError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::create_notification_subscription::CreateNotificationSubscriptionOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::create_notification_subscription::CreateNotificationSubscriptionError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The ID of the organization.</p>
    pub fn organization_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.organization_id(input.into());
        self
    }
    /// <p>The ID of the organization.</p>
    pub fn set_organization_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_organization_id(input);
        self
    }
    /// <p>The endpoint to receive the notifications. If the protocol is HTTPS, the endpoint is a URL that begins with <code>https</code>.</p>
    pub fn endpoint(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.endpoint(input.into());
        self
    }
    /// <p>The endpoint to receive the notifications. If the protocol is HTTPS, the endpoint is a URL that begins with <code>https</code>.</p>
    pub fn set_endpoint(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_endpoint(input);
        self
    }
    /// <p>The protocol to use. The supported value is https, which delivers JSON-encoded messages using HTTPS POST.</p>
    pub fn protocol(mut self, input: crate::types::SubscriptionProtocolType) -> Self {
        self.inner = self.inner.protocol(input);
        self
    }
    /// <p>The protocol to use. The supported value is https, which delivers JSON-encoded messages using HTTPS POST.</p>
    pub fn set_protocol(
        mut self,
        input: std::option::Option<crate::types::SubscriptionProtocolType>,
    ) -> Self {
        self.inner = self.inner.set_protocol(input);
        self
    }
    /// <p>The notification type.</p>
    pub fn subscription_type(mut self, input: crate::types::SubscriptionType) -> Self {
        self.inner = self.inner.subscription_type(input);
        self
    }
    /// <p>The notification type.</p>
    pub fn set_subscription_type(
        mut self,
        input: std::option::Option<crate::types::SubscriptionType>,
    ) -> Self {
        self.inner = self.inner.set_subscription_type(input);
        self
    }
}
