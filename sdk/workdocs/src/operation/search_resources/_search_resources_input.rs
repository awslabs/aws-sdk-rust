// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct SearchResourcesInput {
    /// <p>Amazon WorkDocs authentication token. Not required when using Amazon Web Services administrator credentials to access the API.</p>
    pub authentication_token: ::std::option::Option<::std::string::String>,
    /// <p>The String to search for. Searches across different text fields based on request parameters. Use double quotes around the query string for exact phrase matches.</p>
    pub query_text: ::std::option::Option<::std::string::String>,
    /// <p>Filter based on the text field type. A Folder has only a name and no content. A Comment has only content and no name. A Document or Document Version has a name and content</p>
    pub query_scopes: ::std::option::Option<::std::vec::Vec<crate::types::SearchQueryScopeType>>,
    /// <p>Filters based on the resource owner OrgId. This is a mandatory parameter when using Admin SigV4 credentials.</p>
    pub organization_id: ::std::option::Option<::std::string::String>,
    /// <p>A list of attributes to include in the response. Used to request fields that are not normally returned in a standard response.</p>
    pub additional_response_fields: ::std::option::Option<::std::vec::Vec<crate::types::AdditionalResponseFieldType>>,
    /// <p>Filters results based on entity metadata.</p>
    pub filters: ::std::option::Option<crate::types::Filters>,
    /// <p>Order by results in one or more categories.</p>
    pub order_by: ::std::option::Option<::std::vec::Vec<crate::types::SearchSortResult>>,
    /// <p>Max results count per page.</p>
    pub limit: ::std::option::Option<i32>,
    /// <p>The marker for the next set of results.</p>
    pub marker: ::std::option::Option<::std::string::String>,
}
impl SearchResourcesInput {
    /// <p>Amazon WorkDocs authentication token. Not required when using Amazon Web Services administrator credentials to access the API.</p>
    pub fn authentication_token(&self) -> ::std::option::Option<&str> {
        self.authentication_token.as_deref()
    }
    /// <p>The String to search for. Searches across different text fields based on request parameters. Use double quotes around the query string for exact phrase matches.</p>
    pub fn query_text(&self) -> ::std::option::Option<&str> {
        self.query_text.as_deref()
    }
    /// <p>Filter based on the text field type. A Folder has only a name and no content. A Comment has only content and no name. A Document or Document Version has a name and content</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.query_scopes.is_none()`.
    pub fn query_scopes(&self) -> &[crate::types::SearchQueryScopeType] {
        self.query_scopes.as_deref().unwrap_or_default()
    }
    /// <p>Filters based on the resource owner OrgId. This is a mandatory parameter when using Admin SigV4 credentials.</p>
    pub fn organization_id(&self) -> ::std::option::Option<&str> {
        self.organization_id.as_deref()
    }
    /// <p>A list of attributes to include in the response. Used to request fields that are not normally returned in a standard response.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.additional_response_fields.is_none()`.
    pub fn additional_response_fields(&self) -> &[crate::types::AdditionalResponseFieldType] {
        self.additional_response_fields.as_deref().unwrap_or_default()
    }
    /// <p>Filters results based on entity metadata.</p>
    pub fn filters(&self) -> ::std::option::Option<&crate::types::Filters> {
        self.filters.as_ref()
    }
    /// <p>Order by results in one or more categories.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.order_by.is_none()`.
    pub fn order_by(&self) -> &[crate::types::SearchSortResult] {
        self.order_by.as_deref().unwrap_or_default()
    }
    /// <p>Max results count per page.</p>
    pub fn limit(&self) -> ::std::option::Option<i32> {
        self.limit
    }
    /// <p>The marker for the next set of results.</p>
    pub fn marker(&self) -> ::std::option::Option<&str> {
        self.marker.as_deref()
    }
}
impl ::std::fmt::Debug for SearchResourcesInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("SearchResourcesInput");
        formatter.field("authentication_token", &"*** Sensitive Data Redacted ***");
        formatter.field("query_text", &"*** Sensitive Data Redacted ***");
        formatter.field("query_scopes", &self.query_scopes);
        formatter.field("organization_id", &self.organization_id);
        formatter.field("additional_response_fields", &self.additional_response_fields);
        formatter.field("filters", &self.filters);
        formatter.field("order_by", &self.order_by);
        formatter.field("limit", &self.limit);
        formatter.field("marker", &self.marker);
        formatter.finish()
    }
}
impl SearchResourcesInput {
    /// Creates a new builder-style object to manufacture [`SearchResourcesInput`](crate::operation::search_resources::SearchResourcesInput).
    pub fn builder() -> crate::operation::search_resources::builders::SearchResourcesInputBuilder {
        crate::operation::search_resources::builders::SearchResourcesInputBuilder::default()
    }
}

/// A builder for [`SearchResourcesInput`](crate::operation::search_resources::SearchResourcesInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct SearchResourcesInputBuilder {
    pub(crate) authentication_token: ::std::option::Option<::std::string::String>,
    pub(crate) query_text: ::std::option::Option<::std::string::String>,
    pub(crate) query_scopes: ::std::option::Option<::std::vec::Vec<crate::types::SearchQueryScopeType>>,
    pub(crate) organization_id: ::std::option::Option<::std::string::String>,
    pub(crate) additional_response_fields: ::std::option::Option<::std::vec::Vec<crate::types::AdditionalResponseFieldType>>,
    pub(crate) filters: ::std::option::Option<crate::types::Filters>,
    pub(crate) order_by: ::std::option::Option<::std::vec::Vec<crate::types::SearchSortResult>>,
    pub(crate) limit: ::std::option::Option<i32>,
    pub(crate) marker: ::std::option::Option<::std::string::String>,
}
impl SearchResourcesInputBuilder {
    /// <p>Amazon WorkDocs authentication token. Not required when using Amazon Web Services administrator credentials to access the API.</p>
    pub fn authentication_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.authentication_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Amazon WorkDocs authentication token. Not required when using Amazon Web Services administrator credentials to access the API.</p>
    pub fn set_authentication_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.authentication_token = input;
        self
    }
    /// <p>Amazon WorkDocs authentication token. Not required when using Amazon Web Services administrator credentials to access the API.</p>
    pub fn get_authentication_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.authentication_token
    }
    /// <p>The String to search for. Searches across different text fields based on request parameters. Use double quotes around the query string for exact phrase matches.</p>
    pub fn query_text(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.query_text = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The String to search for. Searches across different text fields based on request parameters. Use double quotes around the query string for exact phrase matches.</p>
    pub fn set_query_text(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.query_text = input;
        self
    }
    /// <p>The String to search for. Searches across different text fields based on request parameters. Use double quotes around the query string for exact phrase matches.</p>
    pub fn get_query_text(&self) -> &::std::option::Option<::std::string::String> {
        &self.query_text
    }
    /// Appends an item to `query_scopes`.
    ///
    /// To override the contents of this collection use [`set_query_scopes`](Self::set_query_scopes).
    ///
    /// <p>Filter based on the text field type. A Folder has only a name and no content. A Comment has only content and no name. A Document or Document Version has a name and content</p>
    pub fn query_scopes(mut self, input: crate::types::SearchQueryScopeType) -> Self {
        let mut v = self.query_scopes.unwrap_or_default();
        v.push(input);
        self.query_scopes = ::std::option::Option::Some(v);
        self
    }
    /// <p>Filter based on the text field type. A Folder has only a name and no content. A Comment has only content and no name. A Document or Document Version has a name and content</p>
    pub fn set_query_scopes(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::SearchQueryScopeType>>) -> Self {
        self.query_scopes = input;
        self
    }
    /// <p>Filter based on the text field type. A Folder has only a name and no content. A Comment has only content and no name. A Document or Document Version has a name and content</p>
    pub fn get_query_scopes(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SearchQueryScopeType>> {
        &self.query_scopes
    }
    /// <p>Filters based on the resource owner OrgId. This is a mandatory parameter when using Admin SigV4 credentials.</p>
    pub fn organization_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.organization_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Filters based on the resource owner OrgId. This is a mandatory parameter when using Admin SigV4 credentials.</p>
    pub fn set_organization_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.organization_id = input;
        self
    }
    /// <p>Filters based on the resource owner OrgId. This is a mandatory parameter when using Admin SigV4 credentials.</p>
    pub fn get_organization_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.organization_id
    }
    /// Appends an item to `additional_response_fields`.
    ///
    /// To override the contents of this collection use [`set_additional_response_fields`](Self::set_additional_response_fields).
    ///
    /// <p>A list of attributes to include in the response. Used to request fields that are not normally returned in a standard response.</p>
    pub fn additional_response_fields(mut self, input: crate::types::AdditionalResponseFieldType) -> Self {
        let mut v = self.additional_response_fields.unwrap_or_default();
        v.push(input);
        self.additional_response_fields = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of attributes to include in the response. Used to request fields that are not normally returned in a standard response.</p>
    pub fn set_additional_response_fields(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::AdditionalResponseFieldType>>,
    ) -> Self {
        self.additional_response_fields = input;
        self
    }
    /// <p>A list of attributes to include in the response. Used to request fields that are not normally returned in a standard response.</p>
    pub fn get_additional_response_fields(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AdditionalResponseFieldType>> {
        &self.additional_response_fields
    }
    /// <p>Filters results based on entity metadata.</p>
    pub fn filters(mut self, input: crate::types::Filters) -> Self {
        self.filters = ::std::option::Option::Some(input);
        self
    }
    /// <p>Filters results based on entity metadata.</p>
    pub fn set_filters(mut self, input: ::std::option::Option<crate::types::Filters>) -> Self {
        self.filters = input;
        self
    }
    /// <p>Filters results based on entity metadata.</p>
    pub fn get_filters(&self) -> &::std::option::Option<crate::types::Filters> {
        &self.filters
    }
    /// Appends an item to `order_by`.
    ///
    /// To override the contents of this collection use [`set_order_by`](Self::set_order_by).
    ///
    /// <p>Order by results in one or more categories.</p>
    pub fn order_by(mut self, input: crate::types::SearchSortResult) -> Self {
        let mut v = self.order_by.unwrap_or_default();
        v.push(input);
        self.order_by = ::std::option::Option::Some(v);
        self
    }
    /// <p>Order by results in one or more categories.</p>
    pub fn set_order_by(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::SearchSortResult>>) -> Self {
        self.order_by = input;
        self
    }
    /// <p>Order by results in one or more categories.</p>
    pub fn get_order_by(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SearchSortResult>> {
        &self.order_by
    }
    /// <p>Max results count per page.</p>
    pub fn limit(mut self, input: i32) -> Self {
        self.limit = ::std::option::Option::Some(input);
        self
    }
    /// <p>Max results count per page.</p>
    pub fn set_limit(mut self, input: ::std::option::Option<i32>) -> Self {
        self.limit = input;
        self
    }
    /// <p>Max results count per page.</p>
    pub fn get_limit(&self) -> &::std::option::Option<i32> {
        &self.limit
    }
    /// <p>The marker for the next set of results.</p>
    pub fn marker(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.marker = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The marker for the next set of results.</p>
    pub fn set_marker(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.marker = input;
        self
    }
    /// <p>The marker for the next set of results.</p>
    pub fn get_marker(&self) -> &::std::option::Option<::std::string::String> {
        &self.marker
    }
    /// Consumes the builder and constructs a [`SearchResourcesInput`](crate::operation::search_resources::SearchResourcesInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::search_resources::SearchResourcesInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::search_resources::SearchResourcesInput {
            authentication_token: self.authentication_token,
            query_text: self.query_text,
            query_scopes: self.query_scopes,
            organization_id: self.organization_id,
            additional_response_fields: self.additional_response_fields,
            filters: self.filters,
            order_by: self.order_by,
            limit: self.limit,
            marker: self.marker,
        })
    }
}
impl ::std::fmt::Debug for SearchResourcesInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("SearchResourcesInputBuilder");
        formatter.field("authentication_token", &"*** Sensitive Data Redacted ***");
        formatter.field("query_text", &"*** Sensitive Data Redacted ***");
        formatter.field("query_scopes", &self.query_scopes);
        formatter.field("organization_id", &self.organization_id);
        formatter.field("additional_response_fields", &self.additional_response_fields);
        formatter.field("filters", &self.filters);
        formatter.field("order_by", &self.order_by);
        formatter.field("limit", &self.limit);
        formatter.field("marker", &self.marker);
        formatter.finish()
    }
}
