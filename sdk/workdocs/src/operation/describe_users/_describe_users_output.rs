// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeUsersOutput {
    /// <p>The users.</p>
    #[doc(hidden)]
    pub users: std::option::Option<std::vec::Vec<crate::types::User>>,
    /// <p>The total number of users included in the results.</p>
    #[deprecated]
    #[doc(hidden)]
    pub total_number_of_users: std::option::Option<i64>,
    /// <p>The marker to use when requesting the next set of results. If there are no additional results, the string is empty.</p>
    #[doc(hidden)]
    pub marker: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeUsersOutput {
    /// <p>The users.</p>
    pub fn users(&self) -> std::option::Option<&[crate::types::User]> {
        self.users.as_deref()
    }
    /// <p>The total number of users included in the results.</p>
    #[deprecated]
    pub fn total_number_of_users(&self) -> std::option::Option<i64> {
        self.total_number_of_users
    }
    /// <p>The marker to use when requesting the next set of results. If there are no additional results, the string is empty.</p>
    pub fn marker(&self) -> std::option::Option<&str> {
        self.marker.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeUsersOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeUsersOutput {
    /// Creates a new builder-style object to manufacture [`DescribeUsersOutput`](crate::operation::describe_users::DescribeUsersOutput).
    pub fn builder() -> crate::operation::describe_users::builders::DescribeUsersOutputBuilder {
        crate::operation::describe_users::builders::DescribeUsersOutputBuilder::default()
    }
}

/// A builder for [`DescribeUsersOutput`](crate::operation::describe_users::DescribeUsersOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeUsersOutputBuilder {
    pub(crate) users: std::option::Option<std::vec::Vec<crate::types::User>>,
    pub(crate) total_number_of_users: std::option::Option<i64>,
    pub(crate) marker: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeUsersOutputBuilder {
    /// Appends an item to `users`.
    ///
    /// To override the contents of this collection use [`set_users`](Self::set_users).
    ///
    /// <p>The users.</p>
    pub fn users(mut self, input: crate::types::User) -> Self {
        let mut v = self.users.unwrap_or_default();
        v.push(input);
        self.users = Some(v);
        self
    }
    /// <p>The users.</p>
    pub fn set_users(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::User>>,
    ) -> Self {
        self.users = input;
        self
    }
    /// <p>The total number of users included in the results.</p>
    #[deprecated]
    pub fn total_number_of_users(mut self, input: i64) -> Self {
        self.total_number_of_users = Some(input);
        self
    }
    /// <p>The total number of users included in the results.</p>
    #[deprecated]
    pub fn set_total_number_of_users(mut self, input: std::option::Option<i64>) -> Self {
        self.total_number_of_users = input;
        self
    }
    /// <p>The marker to use when requesting the next set of results. If there are no additional results, the string is empty.</p>
    pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
        self.marker = Some(input.into());
        self
    }
    /// <p>The marker to use when requesting the next set of results. If there are no additional results, the string is empty.</p>
    pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.marker = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeUsersOutput`](crate::operation::describe_users::DescribeUsersOutput).
    pub fn build(self) -> crate::operation::describe_users::DescribeUsersOutput {
        crate::operation::describe_users::DescribeUsersOutput {
            users: self.users,
            total_number_of_users: self.total_number_of_users,
            marker: self.marker,
            _request_id: self._request_id,
        }
    }
}
