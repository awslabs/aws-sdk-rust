// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::describe_users::_describe_users_output::DescribeUsersOutputBuilder;

pub use crate::operation::describe_users::_describe_users_input::DescribeUsersInputBuilder;

impl DescribeUsersInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::describe_users::DescribeUsersOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_users::DescribeUsersError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.describe_users();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `DescribeUsers`.
///
/// <p>Describes the specified users. You can describe all users or filter the results (for example, by status or organization).</p>
/// <p>By default, Amazon WorkDocs returns the first 24 active or pending users. If there are more results, the response includes a marker that you can use to request the next set of results.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct DescribeUsersFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::describe_users::builders::DescribeUsersInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::describe_users::DescribeUsersOutput,
        crate::operation::describe_users::DescribeUsersError,
    > for DescribeUsersFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::describe_users::DescribeUsersOutput,
            crate::operation::describe_users::DescribeUsersError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl DescribeUsersFluentBuilder {
    /// Creates a new `DescribeUsers`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the DescribeUsers as a reference.
    pub fn as_input(&self) -> &crate::operation::describe_users::builders::DescribeUsersInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::describe_users::DescribeUsersOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_users::DescribeUsersError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::describe_users::DescribeUsers::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::describe_users::DescribeUsers::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::describe_users::DescribeUsersOutput,
        crate::operation::describe_users::DescribeUsersError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::describe_users::paginator::DescribeUsersPaginator::send) which returns a [`PaginationStream`](aws_smithy_async::future::pagination_stream::PaginationStream).
    pub fn into_paginator(self) -> crate::operation::describe_users::paginator::DescribeUsersPaginator {
        crate::operation::describe_users::paginator::DescribeUsersPaginator::new(self.handle, self.inner)
    }
    /// <p>Amazon WorkDocs authentication token. Not required when using Amazon Web Services administrator credentials to access the API.</p>
    pub fn authentication_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.authentication_token(input.into());
        self
    }
    /// <p>Amazon WorkDocs authentication token. Not required when using Amazon Web Services administrator credentials to access the API.</p>
    pub fn set_authentication_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_authentication_token(input);
        self
    }
    /// <p>Amazon WorkDocs authentication token. Not required when using Amazon Web Services administrator credentials to access the API.</p>
    pub fn get_authentication_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_authentication_token()
    }
    /// <p>The ID of the organization.</p>
    pub fn organization_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.organization_id(input.into());
        self
    }
    /// <p>The ID of the organization.</p>
    pub fn set_organization_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_organization_id(input);
        self
    }
    /// <p>The ID of the organization.</p>
    pub fn get_organization_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_organization_id()
    }
    /// <p>The IDs of the users.</p>
    pub fn user_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.user_ids(input.into());
        self
    }
    /// <p>The IDs of the users.</p>
    pub fn set_user_ids(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_user_ids(input);
        self
    }
    /// <p>The IDs of the users.</p>
    pub fn get_user_ids(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_user_ids()
    }
    /// <p>A query to filter users by user name. Remember the following about the <code>Userids</code> and <code>Query</code> parameters:</p>
    /// <ul>
    /// <li> <p>If you don't use either parameter, the API returns a paginated list of all users on the site.</p> </li>
    /// <li> <p>If you use both parameters, the API ignores the <code>Query</code> parameter.</p> </li>
    /// <li> <p>The <code>Userid</code> parameter only returns user names that match a corresponding user ID.</p> </li>
    /// <li> <p>The <code>Query</code> parameter runs a "prefix" search for users by the <code>GivenName</code>, <code>SurName</code>, or <code>UserName</code> fields included in a <a href="https://docs.aws.amazon.com/workdocs/latest/APIReference/API_CreateUser.html">CreateUser</a> API call. For example, querying on <code>Ma</code> returns Márcia Oliveira, María García, and Mateo Jackson. If you use multiple characters, the API only returns data that matches all characters. For example, querying on <code>Ma J</code> only returns Mateo Jackson.</p> </li>
    /// </ul>
    pub fn query(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.query(input.into());
        self
    }
    /// <p>A query to filter users by user name. Remember the following about the <code>Userids</code> and <code>Query</code> parameters:</p>
    /// <ul>
    /// <li> <p>If you don't use either parameter, the API returns a paginated list of all users on the site.</p> </li>
    /// <li> <p>If you use both parameters, the API ignores the <code>Query</code> parameter.</p> </li>
    /// <li> <p>The <code>Userid</code> parameter only returns user names that match a corresponding user ID.</p> </li>
    /// <li> <p>The <code>Query</code> parameter runs a "prefix" search for users by the <code>GivenName</code>, <code>SurName</code>, or <code>UserName</code> fields included in a <a href="https://docs.aws.amazon.com/workdocs/latest/APIReference/API_CreateUser.html">CreateUser</a> API call. For example, querying on <code>Ma</code> returns Márcia Oliveira, María García, and Mateo Jackson. If you use multiple characters, the API only returns data that matches all characters. For example, querying on <code>Ma J</code> only returns Mateo Jackson.</p> </li>
    /// </ul>
    pub fn set_query(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_query(input);
        self
    }
    /// <p>A query to filter users by user name. Remember the following about the <code>Userids</code> and <code>Query</code> parameters:</p>
    /// <ul>
    /// <li> <p>If you don't use either parameter, the API returns a paginated list of all users on the site.</p> </li>
    /// <li> <p>If you use both parameters, the API ignores the <code>Query</code> parameter.</p> </li>
    /// <li> <p>The <code>Userid</code> parameter only returns user names that match a corresponding user ID.</p> </li>
    /// <li> <p>The <code>Query</code> parameter runs a "prefix" search for users by the <code>GivenName</code>, <code>SurName</code>, or <code>UserName</code> fields included in a <a href="https://docs.aws.amazon.com/workdocs/latest/APIReference/API_CreateUser.html">CreateUser</a> API call. For example, querying on <code>Ma</code> returns Márcia Oliveira, María García, and Mateo Jackson. If you use multiple characters, the API only returns data that matches all characters. For example, querying on <code>Ma J</code> only returns Mateo Jackson.</p> </li>
    /// </ul>
    pub fn get_query(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_query()
    }
    /// <p>The state of the users. Specify "ALL" to include inactive users.</p>
    pub fn include(mut self, input: crate::types::UserFilterType) -> Self {
        self.inner = self.inner.include(input);
        self
    }
    /// <p>The state of the users. Specify "ALL" to include inactive users.</p>
    pub fn set_include(mut self, input: ::std::option::Option<crate::types::UserFilterType>) -> Self {
        self.inner = self.inner.set_include(input);
        self
    }
    /// <p>The state of the users. Specify "ALL" to include inactive users.</p>
    pub fn get_include(&self) -> &::std::option::Option<crate::types::UserFilterType> {
        self.inner.get_include()
    }
    /// <p>The order for the results.</p>
    pub fn order(mut self, input: crate::types::OrderType) -> Self {
        self.inner = self.inner.order(input);
        self
    }
    /// <p>The order for the results.</p>
    pub fn set_order(mut self, input: ::std::option::Option<crate::types::OrderType>) -> Self {
        self.inner = self.inner.set_order(input);
        self
    }
    /// <p>The order for the results.</p>
    pub fn get_order(&self) -> &::std::option::Option<crate::types::OrderType> {
        self.inner.get_order()
    }
    /// <p>The sorting criteria.</p>
    pub fn sort(mut self, input: crate::types::UserSortType) -> Self {
        self.inner = self.inner.sort(input);
        self
    }
    /// <p>The sorting criteria.</p>
    pub fn set_sort(mut self, input: ::std::option::Option<crate::types::UserSortType>) -> Self {
        self.inner = self.inner.set_sort(input);
        self
    }
    /// <p>The sorting criteria.</p>
    pub fn get_sort(&self) -> &::std::option::Option<crate::types::UserSortType> {
        self.inner.get_sort()
    }
    /// <p>The marker for the next set of results. (You received this marker from a previous call.)</p>
    pub fn marker(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.marker(input.into());
        self
    }
    /// <p>The marker for the next set of results. (You received this marker from a previous call.)</p>
    pub fn set_marker(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_marker(input);
        self
    }
    /// <p>The marker for the next set of results. (You received this marker from a previous call.)</p>
    pub fn get_marker(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_marker()
    }
    /// <p>The maximum number of items to return.</p>
    pub fn limit(mut self, input: i32) -> Self {
        self.inner = self.inner.limit(input);
        self
    }
    /// <p>The maximum number of items to return.</p>
    pub fn set_limit(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_limit(input);
        self
    }
    /// <p>The maximum number of items to return.</p>
    pub fn get_limit(&self) -> &::std::option::Option<i32> {
        self.inner.get_limit()
    }
    /// <p>A comma-separated list of values. Specify "STORAGE_METADATA" to include the user storage quota and utilization information.</p>
    pub fn fields(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.fields(input.into());
        self
    }
    /// <p>A comma-separated list of values. Specify "STORAGE_METADATA" to include the user storage quota and utilization information.</p>
    pub fn set_fields(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_fields(input);
        self
    }
    /// <p>A comma-separated list of values. Specify "STORAGE_METADATA" to include the user storage quota and utilization information.</p>
    pub fn get_fields(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_fields()
    }
}
