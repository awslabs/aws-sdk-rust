// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct DescribeFolderContentsInput {
    /// <p>Amazon WorkDocs authentication token. Not required when using Amazon Web Services administrator credentials to access the API.</p>
    pub authentication_token: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the folder.</p>
    pub folder_id: ::std::option::Option<::std::string::String>,
    /// <p>The sorting criteria.</p>
    pub sort: ::std::option::Option<crate::types::ResourceSortType>,
    /// <p>The order for the contents of the folder.</p>
    pub order: ::std::option::Option<crate::types::OrderType>,
    /// <p>The maximum number of items to return with this call.</p>
    pub limit: ::std::option::Option<i32>,
    /// <p>The marker for the next set of results. This marker was received from a previous call.</p>
    pub marker: ::std::option::Option<::std::string::String>,
    /// <p>The type of items.</p>
    pub r#type: ::std::option::Option<crate::types::FolderContentType>,
    /// <p>The contents to include. Specify "INITIALIZED" to include initialized documents.</p>
    pub include: ::std::option::Option<::std::string::String>,
}
impl DescribeFolderContentsInput {
    /// <p>Amazon WorkDocs authentication token. Not required when using Amazon Web Services administrator credentials to access the API.</p>
    pub fn authentication_token(&self) -> ::std::option::Option<&str> {
        self.authentication_token.as_deref()
    }
    /// <p>The ID of the folder.</p>
    pub fn folder_id(&self) -> ::std::option::Option<&str> {
        self.folder_id.as_deref()
    }
    /// <p>The sorting criteria.</p>
    pub fn sort(&self) -> ::std::option::Option<&crate::types::ResourceSortType> {
        self.sort.as_ref()
    }
    /// <p>The order for the contents of the folder.</p>
    pub fn order(&self) -> ::std::option::Option<&crate::types::OrderType> {
        self.order.as_ref()
    }
    /// <p>The maximum number of items to return with this call.</p>
    pub fn limit(&self) -> ::std::option::Option<i32> {
        self.limit
    }
    /// <p>The marker for the next set of results. This marker was received from a previous call.</p>
    pub fn marker(&self) -> ::std::option::Option<&str> {
        self.marker.as_deref()
    }
    /// <p>The type of items.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::FolderContentType> {
        self.r#type.as_ref()
    }
    /// <p>The contents to include. Specify "INITIALIZED" to include initialized documents.</p>
    pub fn include(&self) -> ::std::option::Option<&str> {
        self.include.as_deref()
    }
}
impl ::std::fmt::Debug for DescribeFolderContentsInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeFolderContentsInput");
        formatter.field("authentication_token", &"*** Sensitive Data Redacted ***");
        formatter.field("folder_id", &self.folder_id);
        formatter.field("sort", &self.sort);
        formatter.field("order", &self.order);
        formatter.field("limit", &self.limit);
        formatter.field("marker", &self.marker);
        formatter.field("r#type", &self.r#type);
        formatter.field("include", &self.include);
        formatter.finish()
    }
}
impl DescribeFolderContentsInput {
    /// Creates a new builder-style object to manufacture [`DescribeFolderContentsInput`](crate::operation::describe_folder_contents::DescribeFolderContentsInput).
    pub fn builder() -> crate::operation::describe_folder_contents::builders::DescribeFolderContentsInputBuilder {
        crate::operation::describe_folder_contents::builders::DescribeFolderContentsInputBuilder::default()
    }
}

/// A builder for [`DescribeFolderContentsInput`](crate::operation::describe_folder_contents::DescribeFolderContentsInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct DescribeFolderContentsInputBuilder {
    pub(crate) authentication_token: ::std::option::Option<::std::string::String>,
    pub(crate) folder_id: ::std::option::Option<::std::string::String>,
    pub(crate) sort: ::std::option::Option<crate::types::ResourceSortType>,
    pub(crate) order: ::std::option::Option<crate::types::OrderType>,
    pub(crate) limit: ::std::option::Option<i32>,
    pub(crate) marker: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<crate::types::FolderContentType>,
    pub(crate) include: ::std::option::Option<::std::string::String>,
}
impl DescribeFolderContentsInputBuilder {
    /// <p>Amazon WorkDocs authentication token. Not required when using Amazon Web Services administrator credentials to access the API.</p>
    pub fn authentication_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.authentication_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Amazon WorkDocs authentication token. Not required when using Amazon Web Services administrator credentials to access the API.</p>
    pub fn set_authentication_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.authentication_token = input;
        self
    }
    /// <p>Amazon WorkDocs authentication token. Not required when using Amazon Web Services administrator credentials to access the API.</p>
    pub fn get_authentication_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.authentication_token
    }
    /// <p>The ID of the folder.</p>
    /// This field is required.
    pub fn folder_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.folder_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the folder.</p>
    pub fn set_folder_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.folder_id = input;
        self
    }
    /// <p>The ID of the folder.</p>
    pub fn get_folder_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.folder_id
    }
    /// <p>The sorting criteria.</p>
    pub fn sort(mut self, input: crate::types::ResourceSortType) -> Self {
        self.sort = ::std::option::Option::Some(input);
        self
    }
    /// <p>The sorting criteria.</p>
    pub fn set_sort(mut self, input: ::std::option::Option<crate::types::ResourceSortType>) -> Self {
        self.sort = input;
        self
    }
    /// <p>The sorting criteria.</p>
    pub fn get_sort(&self) -> &::std::option::Option<crate::types::ResourceSortType> {
        &self.sort
    }
    /// <p>The order for the contents of the folder.</p>
    pub fn order(mut self, input: crate::types::OrderType) -> Self {
        self.order = ::std::option::Option::Some(input);
        self
    }
    /// <p>The order for the contents of the folder.</p>
    pub fn set_order(mut self, input: ::std::option::Option<crate::types::OrderType>) -> Self {
        self.order = input;
        self
    }
    /// <p>The order for the contents of the folder.</p>
    pub fn get_order(&self) -> &::std::option::Option<crate::types::OrderType> {
        &self.order
    }
    /// <p>The maximum number of items to return with this call.</p>
    pub fn limit(mut self, input: i32) -> Self {
        self.limit = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of items to return with this call.</p>
    pub fn set_limit(mut self, input: ::std::option::Option<i32>) -> Self {
        self.limit = input;
        self
    }
    /// <p>The maximum number of items to return with this call.</p>
    pub fn get_limit(&self) -> &::std::option::Option<i32> {
        &self.limit
    }
    /// <p>The marker for the next set of results. This marker was received from a previous call.</p>
    pub fn marker(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.marker = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The marker for the next set of results. This marker was received from a previous call.</p>
    pub fn set_marker(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.marker = input;
        self
    }
    /// <p>The marker for the next set of results. This marker was received from a previous call.</p>
    pub fn get_marker(&self) -> &::std::option::Option<::std::string::String> {
        &self.marker
    }
    /// <p>The type of items.</p>
    pub fn r#type(mut self, input: crate::types::FolderContentType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of items.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::FolderContentType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of items.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::FolderContentType> {
        &self.r#type
    }
    /// <p>The contents to include. Specify "INITIALIZED" to include initialized documents.</p>
    pub fn include(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.include = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The contents to include. Specify "INITIALIZED" to include initialized documents.</p>
    pub fn set_include(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.include = input;
        self
    }
    /// <p>The contents to include. Specify "INITIALIZED" to include initialized documents.</p>
    pub fn get_include(&self) -> &::std::option::Option<::std::string::String> {
        &self.include
    }
    /// Consumes the builder and constructs a [`DescribeFolderContentsInput`](crate::operation::describe_folder_contents::DescribeFolderContentsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::describe_folder_contents::DescribeFolderContentsInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::describe_folder_contents::DescribeFolderContentsInput {
            authentication_token: self.authentication_token,
            folder_id: self.folder_id,
            sort: self.sort,
            order: self.order,
            limit: self.limit,
            marker: self.marker,
            r#type: self.r#type,
            include: self.include,
        })
    }
}
impl ::std::fmt::Debug for DescribeFolderContentsInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeFolderContentsInputBuilder");
        formatter.field("authentication_token", &"*** Sensitive Data Redacted ***");
        formatter.field("folder_id", &self.folder_id);
        formatter.field("sort", &self.sort);
        formatter.field("order", &self.order);
        formatter.field("limit", &self.limit);
        formatter.field("marker", &self.marker);
        formatter.field("r#type", &self.r#type);
        formatter.field("include", &self.include);
        formatter.finish()
    }
}
