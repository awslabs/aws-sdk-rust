// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::describe_folder_contents::_describe_folder_contents_output::DescribeFolderContentsOutputBuilder;

pub use crate::operation::describe_folder_contents::_describe_folder_contents_input::DescribeFolderContentsInputBuilder;

/// Fluent builder constructing a request to `DescribeFolderContents`.
///
/// <p>Describes the contents of the specified folder, including its documents and subfolders.</p>
/// <p>By default, Amazon WorkDocs returns the first 100 active document and folder metadata items. If there are more results, the response includes a marker that you can use to request the next set of results. You can also request initialized documents.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeFolderContentsFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::describe_folder_contents::builders::DescribeFolderContentsInputBuilder,
}
impl DescribeFolderContentsFluentBuilder {
    /// Creates a new `DescribeFolderContents`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::describe_folder_contents::DescribeFolderContents,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::describe_folder_contents::DescribeFolderContentsError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::describe_folder_contents::DescribeFolderContentsOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::describe_folder_contents::DescribeFolderContentsError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::describe_folder_contents::paginator::DescribeFolderContentsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(
        self,
    ) -> crate::operation::describe_folder_contents::paginator::DescribeFolderContentsPaginator
    {
        crate::operation::describe_folder_contents::paginator::DescribeFolderContentsPaginator::new(
            self.handle,
            self.inner,
        )
    }
    /// <p>Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.</p>
    pub fn authentication_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.authentication_token(input.into());
        self
    }
    /// <p>Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.</p>
    pub fn set_authentication_token(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_authentication_token(input);
        self
    }
    /// <p>The ID of the folder.</p>
    pub fn folder_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.folder_id(input.into());
        self
    }
    /// <p>The ID of the folder.</p>
    pub fn set_folder_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_folder_id(input);
        self
    }
    /// <p>The sorting criteria.</p>
    pub fn sort(mut self, input: crate::types::ResourceSortType) -> Self {
        self.inner = self.inner.sort(input);
        self
    }
    /// <p>The sorting criteria.</p>
    pub fn set_sort(mut self, input: std::option::Option<crate::types::ResourceSortType>) -> Self {
        self.inner = self.inner.set_sort(input);
        self
    }
    /// <p>The order for the contents of the folder.</p>
    pub fn order(mut self, input: crate::types::OrderType) -> Self {
        self.inner = self.inner.order(input);
        self
    }
    /// <p>The order for the contents of the folder.</p>
    pub fn set_order(mut self, input: std::option::Option<crate::types::OrderType>) -> Self {
        self.inner = self.inner.set_order(input);
        self
    }
    /// <p>The maximum number of items to return with this call.</p>
    pub fn limit(mut self, input: i32) -> Self {
        self.inner = self.inner.limit(input);
        self
    }
    /// <p>The maximum number of items to return with this call.</p>
    pub fn set_limit(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_limit(input);
        self
    }
    /// <p>The marker for the next set of results. This marker was received from a previous call.</p>
    pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.marker(input.into());
        self
    }
    /// <p>The marker for the next set of results. This marker was received from a previous call.</p>
    pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_marker(input);
        self
    }
    /// <p>The type of items.</p>
    pub fn r#type(mut self, input: crate::types::FolderContentType) -> Self {
        self.inner = self.inner.r#type(input);
        self
    }
    /// <p>The type of items.</p>
    pub fn set_type(mut self, input: std::option::Option<crate::types::FolderContentType>) -> Self {
        self.inner = self.inner.set_type(input);
        self
    }
    /// <p>The contents to include. Specify "INITIALIZED" to include initialized documents.</p>
    pub fn include(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.include(input.into());
        self
    }
    /// <p>The contents to include. Specify "INITIALIZED" to include initialized documents.</p>
    pub fn set_include(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_include(input);
        self
    }
}
