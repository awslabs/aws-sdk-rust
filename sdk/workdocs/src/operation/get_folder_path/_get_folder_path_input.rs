// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetFolderPathInput {
    /// <p>Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.</p>
    #[doc(hidden)]
    pub authentication_token: std::option::Option<std::string::String>,
    /// <p>The ID of the folder.</p>
    #[doc(hidden)]
    pub folder_id: std::option::Option<std::string::String>,
    /// <p>The maximum number of levels in the hierarchy to return.</p>
    #[doc(hidden)]
    pub limit: std::option::Option<i32>,
    /// <p>A comma-separated list of values. Specify "NAME" to include the names of the parent folders.</p>
    #[doc(hidden)]
    pub fields: std::option::Option<std::string::String>,
    /// <p>This value is not supported.</p>
    #[doc(hidden)]
    pub marker: std::option::Option<std::string::String>,
}
impl GetFolderPathInput {
    /// <p>Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.</p>
    pub fn authentication_token(&self) -> std::option::Option<&str> {
        self.authentication_token.as_deref()
    }
    /// <p>The ID of the folder.</p>
    pub fn folder_id(&self) -> std::option::Option<&str> {
        self.folder_id.as_deref()
    }
    /// <p>The maximum number of levels in the hierarchy to return.</p>
    pub fn limit(&self) -> std::option::Option<i32> {
        self.limit
    }
    /// <p>A comma-separated list of values. Specify "NAME" to include the names of the parent folders.</p>
    pub fn fields(&self) -> std::option::Option<&str> {
        self.fields.as_deref()
    }
    /// <p>This value is not supported.</p>
    pub fn marker(&self) -> std::option::Option<&str> {
        self.marker.as_deref()
    }
}
impl std::fmt::Debug for GetFolderPathInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetFolderPathInput");
        formatter.field("authentication_token", &"*** Sensitive Data Redacted ***");
        formatter.field("folder_id", &self.folder_id);
        formatter.field("limit", &self.limit);
        formatter.field("fields", &self.fields);
        formatter.field("marker", &self.marker);
        formatter.finish()
    }
}
impl GetFolderPathInput {
    /// Creates a new builder-style object to manufacture [`GetFolderPathInput`](crate::operation::get_folder_path::GetFolderPathInput).
    pub fn builder() -> crate::operation::get_folder_path::builders::GetFolderPathInputBuilder {
        crate::operation::get_folder_path::builders::GetFolderPathInputBuilder::default()
    }
}

/// A builder for [`GetFolderPathInput`](crate::operation::get_folder_path::GetFolderPathInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct GetFolderPathInputBuilder {
    pub(crate) authentication_token: std::option::Option<std::string::String>,
    pub(crate) folder_id: std::option::Option<std::string::String>,
    pub(crate) limit: std::option::Option<i32>,
    pub(crate) fields: std::option::Option<std::string::String>,
    pub(crate) marker: std::option::Option<std::string::String>,
}
impl GetFolderPathInputBuilder {
    /// <p>Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.</p>
    pub fn authentication_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.authentication_token = Some(input.into());
        self
    }
    /// <p>Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.</p>
    pub fn set_authentication_token(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.authentication_token = input;
        self
    }
    /// <p>The ID of the folder.</p>
    pub fn folder_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.folder_id = Some(input.into());
        self
    }
    /// <p>The ID of the folder.</p>
    pub fn set_folder_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.folder_id = input;
        self
    }
    /// <p>The maximum number of levels in the hierarchy to return.</p>
    pub fn limit(mut self, input: i32) -> Self {
        self.limit = Some(input);
        self
    }
    /// <p>The maximum number of levels in the hierarchy to return.</p>
    pub fn set_limit(mut self, input: std::option::Option<i32>) -> Self {
        self.limit = input;
        self
    }
    /// <p>A comma-separated list of values. Specify "NAME" to include the names of the parent folders.</p>
    pub fn fields(mut self, input: impl Into<std::string::String>) -> Self {
        self.fields = Some(input.into());
        self
    }
    /// <p>A comma-separated list of values. Specify "NAME" to include the names of the parent folders.</p>
    pub fn set_fields(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.fields = input;
        self
    }
    /// <p>This value is not supported.</p>
    pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
        self.marker = Some(input.into());
        self
    }
    /// <p>This value is not supported.</p>
    pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.marker = input;
        self
    }
    /// Consumes the builder and constructs a [`GetFolderPathInput`](crate::operation::get_folder_path::GetFolderPathInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::get_folder_path::GetFolderPathInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::get_folder_path::GetFolderPathInput {
            authentication_token: self.authentication_token,
            folder_id: self.folder_id,
            limit: self.limit,
            fields: self.fields,
            marker: self.marker,
        })
    }
}
impl std::fmt::Debug for GetFolderPathInputBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetFolderPathInputBuilder");
        formatter.field("authentication_token", &"*** Sensitive Data Redacted ***");
        formatter.field("folder_id", &self.folder_id);
        formatter.field("limit", &self.limit);
        formatter.field("fields", &self.fields);
        formatter.field("marker", &self.marker);
        formatter.finish()
    }
}
