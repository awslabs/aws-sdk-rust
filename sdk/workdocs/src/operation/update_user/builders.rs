// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_user::_update_user_output::UpdateUserOutputBuilder;

pub use crate::operation::update_user::_update_user_input::UpdateUserInputBuilder;

/// Fluent builder constructing a request to `UpdateUser`.
///
/// <p>Updates the specified attributes of the specified user, and grants or revokes administrative privileges to the Amazon WorkDocs site.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateUserFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_user::builders::UpdateUserInputBuilder,
}
impl UpdateUserFluentBuilder {
    /// Creates a new `UpdateUser`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::update_user::UpdateUser,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::operation::update_user::UpdateUserError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::update_user::UpdateUserOutput,
        aws_smithy_http::result::SdkError<crate::operation::update_user::UpdateUserError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.</p>
    pub fn authentication_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.authentication_token(input.into());
        self
    }
    /// <p>Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.</p>
    pub fn set_authentication_token(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_authentication_token(input);
        self
    }
    /// <p>The ID of the user.</p>
    pub fn user_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.user_id(input.into());
        self
    }
    /// <p>The ID of the user.</p>
    pub fn set_user_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_user_id(input);
        self
    }
    /// <p>The given name of the user.</p>
    pub fn given_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.given_name(input.into());
        self
    }
    /// <p>The given name of the user.</p>
    pub fn set_given_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_given_name(input);
        self
    }
    /// <p>The surname of the user.</p>
    pub fn surname(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.surname(input.into());
        self
    }
    /// <p>The surname of the user.</p>
    pub fn set_surname(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_surname(input);
        self
    }
    /// <p>The type of the user.</p>
    pub fn r#type(mut self, input: crate::types::UserType) -> Self {
        self.inner = self.inner.r#type(input);
        self
    }
    /// <p>The type of the user.</p>
    pub fn set_type(mut self, input: std::option::Option<crate::types::UserType>) -> Self {
        self.inner = self.inner.set_type(input);
        self
    }
    /// <p>The amount of storage for the user.</p>
    pub fn storage_rule(mut self, input: crate::types::StorageRuleType) -> Self {
        self.inner = self.inner.storage_rule(input);
        self
    }
    /// <p>The amount of storage for the user.</p>
    pub fn set_storage_rule(
        mut self,
        input: std::option::Option<crate::types::StorageRuleType>,
    ) -> Self {
        self.inner = self.inner.set_storage_rule(input);
        self
    }
    /// <p>The time zone ID of the user.</p>
    pub fn time_zone_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.time_zone_id(input.into());
        self
    }
    /// <p>The time zone ID of the user.</p>
    pub fn set_time_zone_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_time_zone_id(input);
        self
    }
    /// <p>The locale of the user.</p>
    pub fn locale(mut self, input: crate::types::LocaleType) -> Self {
        self.inner = self.inner.locale(input);
        self
    }
    /// <p>The locale of the user.</p>
    pub fn set_locale(mut self, input: std::option::Option<crate::types::LocaleType>) -> Self {
        self.inner = self.inner.set_locale(input);
        self
    }
    /// <p>Boolean value to determine whether the user is granted Poweruser privileges.</p>
    pub fn grant_poweruser_privileges(mut self, input: crate::types::BooleanEnumType) -> Self {
        self.inner = self.inner.grant_poweruser_privileges(input);
        self
    }
    /// <p>Boolean value to determine whether the user is granted Poweruser privileges.</p>
    pub fn set_grant_poweruser_privileges(
        mut self,
        input: std::option::Option<crate::types::BooleanEnumType>,
    ) -> Self {
        self.inner = self.inner.set_grant_poweruser_privileges(input);
        self
    }
}
