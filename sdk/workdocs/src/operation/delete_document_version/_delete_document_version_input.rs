// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct DeleteDocumentVersionInput {
    /// <p>Amazon WorkDocs authentication token. Not required when using Amazon Web Services administrator credentials to access the API.</p>
    pub authentication_token: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the document associated with the version being deleted.</p>
    pub document_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the version being deleted.</p>
    pub version_id: ::std::option::Option<::std::string::String>,
    /// <p>Deletes all versions of a document prior to the current version.</p>
    pub delete_prior_versions: ::std::option::Option<bool>,
}
impl DeleteDocumentVersionInput {
    /// <p>Amazon WorkDocs authentication token. Not required when using Amazon Web Services administrator credentials to access the API.</p>
    pub fn authentication_token(&self) -> ::std::option::Option<&str> {
        self.authentication_token.as_deref()
    }
    /// <p>The ID of the document associated with the version being deleted.</p>
    pub fn document_id(&self) -> ::std::option::Option<&str> {
        self.document_id.as_deref()
    }
    /// <p>The ID of the version being deleted.</p>
    pub fn version_id(&self) -> ::std::option::Option<&str> {
        self.version_id.as_deref()
    }
    /// <p>Deletes all versions of a document prior to the current version.</p>
    pub fn delete_prior_versions(&self) -> ::std::option::Option<bool> {
        self.delete_prior_versions
    }
}
impl ::std::fmt::Debug for DeleteDocumentVersionInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteDocumentVersionInput");
        formatter.field("authentication_token", &"*** Sensitive Data Redacted ***");
        formatter.field("document_id", &self.document_id);
        formatter.field("version_id", &self.version_id);
        formatter.field("delete_prior_versions", &self.delete_prior_versions);
        formatter.finish()
    }
}
impl DeleteDocumentVersionInput {
    /// Creates a new builder-style object to manufacture [`DeleteDocumentVersionInput`](crate::operation::delete_document_version::DeleteDocumentVersionInput).
    pub fn builder() -> crate::operation::delete_document_version::builders::DeleteDocumentVersionInputBuilder {
        crate::operation::delete_document_version::builders::DeleteDocumentVersionInputBuilder::default()
    }
}

/// A builder for [`DeleteDocumentVersionInput`](crate::operation::delete_document_version::DeleteDocumentVersionInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct DeleteDocumentVersionInputBuilder {
    pub(crate) authentication_token: ::std::option::Option<::std::string::String>,
    pub(crate) document_id: ::std::option::Option<::std::string::String>,
    pub(crate) version_id: ::std::option::Option<::std::string::String>,
    pub(crate) delete_prior_versions: ::std::option::Option<bool>,
}
impl DeleteDocumentVersionInputBuilder {
    /// <p>Amazon WorkDocs authentication token. Not required when using Amazon Web Services administrator credentials to access the API.</p>
    pub fn authentication_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.authentication_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Amazon WorkDocs authentication token. Not required when using Amazon Web Services administrator credentials to access the API.</p>
    pub fn set_authentication_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.authentication_token = input;
        self
    }
    /// <p>Amazon WorkDocs authentication token. Not required when using Amazon Web Services administrator credentials to access the API.</p>
    pub fn get_authentication_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.authentication_token
    }
    /// <p>The ID of the document associated with the version being deleted.</p>
    /// This field is required.
    pub fn document_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.document_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the document associated with the version being deleted.</p>
    pub fn set_document_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.document_id = input;
        self
    }
    /// <p>The ID of the document associated with the version being deleted.</p>
    pub fn get_document_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.document_id
    }
    /// <p>The ID of the version being deleted.</p>
    /// This field is required.
    pub fn version_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.version_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the version being deleted.</p>
    pub fn set_version_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.version_id = input;
        self
    }
    /// <p>The ID of the version being deleted.</p>
    pub fn get_version_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.version_id
    }
    /// <p>Deletes all versions of a document prior to the current version.</p>
    /// This field is required.
    pub fn delete_prior_versions(mut self, input: bool) -> Self {
        self.delete_prior_versions = ::std::option::Option::Some(input);
        self
    }
    /// <p>Deletes all versions of a document prior to the current version.</p>
    pub fn set_delete_prior_versions(mut self, input: ::std::option::Option<bool>) -> Self {
        self.delete_prior_versions = input;
        self
    }
    /// <p>Deletes all versions of a document prior to the current version.</p>
    pub fn get_delete_prior_versions(&self) -> &::std::option::Option<bool> {
        &self.delete_prior_versions
    }
    /// Consumes the builder and constructs a [`DeleteDocumentVersionInput`](crate::operation::delete_document_version::DeleteDocumentVersionInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::delete_document_version::DeleteDocumentVersionInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::delete_document_version::DeleteDocumentVersionInput {
            authentication_token: self.authentication_token,
            document_id: self.document_id,
            version_id: self.version_id,
            delete_prior_versions: self.delete_prior_versions,
        })
    }
}
impl ::std::fmt::Debug for DeleteDocumentVersionInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteDocumentVersionInputBuilder");
        formatter.field("authentication_token", &"*** Sensitive Data Redacted ***");
        formatter.field("document_id", &self.document_id);
        formatter.field("version_id", &self.version_id);
        formatter.field("delete_prior_versions", &self.delete_prior_versions);
        formatter.finish()
    }
}
