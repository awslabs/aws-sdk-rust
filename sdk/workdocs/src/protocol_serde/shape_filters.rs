// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_filters(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::Filters,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.text_locales {
        let mut array_2 = object.key("TextLocales").start_array();
        for item_3 in var_1 {
            {
                array_2.value().string(item_3.as_str());
            }
        }
        array_2.finish();
    }
    if let Some(var_4) = &input.content_categories {
        let mut array_5 = object.key("ContentCategories").start_array();
        for item_6 in var_4 {
            {
                array_5.value().string(item_6.as_str());
            }
        }
        array_5.finish();
    }
    if let Some(var_7) = &input.resource_types {
        let mut array_8 = object.key("ResourceTypes").start_array();
        for item_9 in var_7 {
            {
                array_8.value().string(item_9.as_str());
            }
        }
        array_8.finish();
    }
    if let Some(var_10) = &input.labels {
        let mut array_11 = object.key("Labels").start_array();
        for item_12 in var_10 {
            {
                array_11.value().string(item_12.as_str());
            }
        }
        array_11.finish();
    }
    if let Some(var_13) = &input.principals {
        let mut array_14 = object.key("Principals").start_array();
        for item_15 in var_13 {
            {
                #[allow(unused_mut)]
                let mut object_16 = array_14.value().start_object();
                crate::protocol_serde::shape_search_principal_type::ser_search_principal_type(&mut object_16, item_15)?;
                object_16.finish();
            }
        }
        array_14.finish();
    }
    if let Some(var_17) = &input.ancestor_ids {
        let mut array_18 = object.key("AncestorIds").start_array();
        for item_19 in var_17 {
            {
                array_18.value().string(item_19.as_str());
            }
        }
        array_18.finish();
    }
    if let Some(var_20) = &input.search_collection_types {
        let mut array_21 = object.key("SearchCollectionTypes").start_array();
        for item_22 in var_20 {
            {
                array_21.value().string(item_22.as_str());
            }
        }
        array_21.finish();
    }
    if let Some(var_23) = &input.size_range {
        #[allow(unused_mut)]
        let mut object_24 = object.key("SizeRange").start_object();
        crate::protocol_serde::shape_long_range_type::ser_long_range_type(&mut object_24, var_23)?;
        object_24.finish();
    }
    if let Some(var_25) = &input.created_range {
        #[allow(unused_mut)]
        let mut object_26 = object.key("CreatedRange").start_object();
        crate::protocol_serde::shape_date_range_type::ser_date_range_type(&mut object_26, var_25)?;
        object_26.finish();
    }
    if let Some(var_27) = &input.modified_range {
        #[allow(unused_mut)]
        let mut object_28 = object.key("ModifiedRange").start_object();
        crate::protocol_serde::shape_date_range_type::ser_date_range_type(&mut object_28, var_27)?;
        object_28.finish();
    }
    Ok(())
}
