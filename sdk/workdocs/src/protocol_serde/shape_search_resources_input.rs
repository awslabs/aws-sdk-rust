// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_search_resources_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::search_resources::SearchResourcesInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.additional_response_fields {
        let mut array_2 = object.key("AdditionalResponseFields").start_array();
        for item_3 in var_1 {
            {
                array_2.value().string(item_3.as_str());
            }
        }
        array_2.finish();
    }
    if let Some(var_4) = &input.filters {
        #[allow(unused_mut)]
        let mut object_5 = object.key("Filters").start_object();
        crate::protocol_serde::shape_filters::ser_filters(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_6).into()),
        );
    }
    if let Some(var_7) = &input.marker {
        object.key("Marker").string(var_7.as_str());
    }
    if let Some(var_8) = &input.order_by {
        let mut array_9 = object.key("OrderBy").start_array();
        for item_10 in var_8 {
            {
                #[allow(unused_mut)]
                let mut object_11 = array_9.value().start_object();
                crate::protocol_serde::shape_search_sort_result::ser_search_sort_result(&mut object_11, item_10)?;
                object_11.finish();
            }
        }
        array_9.finish();
    }
    if let Some(var_12) = &input.organization_id {
        object.key("OrganizationId").string(var_12.as_str());
    }
    if let Some(var_13) = &input.query_scopes {
        let mut array_14 = object.key("QueryScopes").start_array();
        for item_15 in var_13 {
            {
                array_14.value().string(item_15.as_str());
            }
        }
        array_14.finish();
    }
    if let Some(var_16) = &input.query_text {
        object.key("QueryText").string(var_16.as_str());
    }
    Ok(())
}
