// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct RegisterScalableTargetOutput {}
impl std::fmt::Debug for RegisterScalableTargetOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("RegisterScalableTargetOutput");
        formatter.finish()
    }
}
/// See [`RegisterScalableTargetOutput`](crate::output::RegisterScalableTargetOutput)
pub mod register_scalable_target_output {
    /// A builder for [`RegisterScalableTargetOutput`](crate::output::RegisterScalableTargetOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`RegisterScalableTargetOutput`](crate::output::RegisterScalableTargetOutput)
        pub fn build(self) -> crate::output::RegisterScalableTargetOutput {
            crate::output::RegisterScalableTargetOutput {}
        }
    }
}
impl RegisterScalableTargetOutput {
    /// Creates a new builder-style object to manufacture [`RegisterScalableTargetOutput`](crate::output::RegisterScalableTargetOutput)
    pub fn builder() -> crate::output::register_scalable_target_output::Builder {
        crate::output::register_scalable_target_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct PutScheduledActionOutput {}
impl std::fmt::Debug for PutScheduledActionOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("PutScheduledActionOutput");
        formatter.finish()
    }
}
/// See [`PutScheduledActionOutput`](crate::output::PutScheduledActionOutput)
pub mod put_scheduled_action_output {
    /// A builder for [`PutScheduledActionOutput`](crate::output::PutScheduledActionOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`PutScheduledActionOutput`](crate::output::PutScheduledActionOutput)
        pub fn build(self) -> crate::output::PutScheduledActionOutput {
            crate::output::PutScheduledActionOutput {}
        }
    }
}
impl PutScheduledActionOutput {
    /// Creates a new builder-style object to manufacture [`PutScheduledActionOutput`](crate::output::PutScheduledActionOutput)
    pub fn builder() -> crate::output::put_scheduled_action_output::Builder {
        crate::output::put_scheduled_action_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct PutScalingPolicyOutput {
    /// <p>The Amazon Resource Name (ARN) of the resulting scaling policy.</p>
    pub policy_arn: std::option::Option<std::string::String>,
    /// <p>The CloudWatch alarms created for the target tracking scaling policy.</p>
    pub alarms: std::option::Option<std::vec::Vec<crate::model::Alarm>>,
}
impl PutScalingPolicyOutput {
    /// <p>The Amazon Resource Name (ARN) of the resulting scaling policy.</p>
    pub fn policy_arn(&self) -> std::option::Option<&str> {
        self.policy_arn.as_deref()
    }
    /// <p>The CloudWatch alarms created for the target tracking scaling policy.</p>
    pub fn alarms(&self) -> std::option::Option<&[crate::model::Alarm]> {
        self.alarms.as_deref()
    }
}
impl std::fmt::Debug for PutScalingPolicyOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("PutScalingPolicyOutput");
        formatter.field("policy_arn", &self.policy_arn);
        formatter.field("alarms", &self.alarms);
        formatter.finish()
    }
}
/// See [`PutScalingPolicyOutput`](crate::output::PutScalingPolicyOutput)
pub mod put_scaling_policy_output {
    /// A builder for [`PutScalingPolicyOutput`](crate::output::PutScalingPolicyOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) policy_arn: std::option::Option<std::string::String>,
        pub(crate) alarms: std::option::Option<std::vec::Vec<crate::model::Alarm>>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name (ARN) of the resulting scaling policy.</p>
        pub fn policy_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.policy_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the resulting scaling policy.</p>
        pub fn set_policy_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.policy_arn = input;
            self
        }
        /// Appends an item to `alarms`.
        ///
        /// To override the contents of this collection use [`set_alarms`](Self::set_alarms).
        ///
        /// <p>The CloudWatch alarms created for the target tracking scaling policy.</p>
        pub fn alarms(mut self, input: crate::model::Alarm) -> Self {
            let mut v = self.alarms.unwrap_or_default();
            v.push(input);
            self.alarms = Some(v);
            self
        }
        /// <p>The CloudWatch alarms created for the target tracking scaling policy.</p>
        pub fn set_alarms(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Alarm>>,
        ) -> Self {
            self.alarms = input;
            self
        }
        /// Consumes the builder and constructs a [`PutScalingPolicyOutput`](crate::output::PutScalingPolicyOutput)
        pub fn build(self) -> crate::output::PutScalingPolicyOutput {
            crate::output::PutScalingPolicyOutput {
                policy_arn: self.policy_arn,
                alarms: self.alarms,
            }
        }
    }
}
impl PutScalingPolicyOutput {
    /// Creates a new builder-style object to manufacture [`PutScalingPolicyOutput`](crate::output::PutScalingPolicyOutput)
    pub fn builder() -> crate::output::put_scaling_policy_output::Builder {
        crate::output::put_scaling_policy_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeScheduledActionsOutput {
    /// <p>Information about the scheduled actions.</p>
    pub scheduled_actions: std::option::Option<std::vec::Vec<crate::model::ScheduledAction>>,
    /// <p>The token required to get the next set of results. This value is <code>null</code> if there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl DescribeScheduledActionsOutput {
    /// <p>Information about the scheduled actions.</p>
    pub fn scheduled_actions(&self) -> std::option::Option<&[crate::model::ScheduledAction]> {
        self.scheduled_actions.as_deref()
    }
    /// <p>The token required to get the next set of results. This value is <code>null</code> if there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for DescribeScheduledActionsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeScheduledActionsOutput");
        formatter.field("scheduled_actions", &self.scheduled_actions);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`DescribeScheduledActionsOutput`](crate::output::DescribeScheduledActionsOutput)
pub mod describe_scheduled_actions_output {
    /// A builder for [`DescribeScheduledActionsOutput`](crate::output::DescribeScheduledActionsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) scheduled_actions:
            std::option::Option<std::vec::Vec<crate::model::ScheduledAction>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `scheduled_actions`.
        ///
        /// To override the contents of this collection use [`set_scheduled_actions`](Self::set_scheduled_actions).
        ///
        /// <p>Information about the scheduled actions.</p>
        pub fn scheduled_actions(mut self, input: crate::model::ScheduledAction) -> Self {
            let mut v = self.scheduled_actions.unwrap_or_default();
            v.push(input);
            self.scheduled_actions = Some(v);
            self
        }
        /// <p>Information about the scheduled actions.</p>
        pub fn set_scheduled_actions(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ScheduledAction>>,
        ) -> Self {
            self.scheduled_actions = input;
            self
        }
        /// <p>The token required to get the next set of results. This value is <code>null</code> if there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token required to get the next set of results. This value is <code>null</code> if there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeScheduledActionsOutput`](crate::output::DescribeScheduledActionsOutput)
        pub fn build(self) -> crate::output::DescribeScheduledActionsOutput {
            crate::output::DescribeScheduledActionsOutput {
                scheduled_actions: self.scheduled_actions,
                next_token: self.next_token,
            }
        }
    }
}
impl DescribeScheduledActionsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeScheduledActionsOutput`](crate::output::DescribeScheduledActionsOutput)
    pub fn builder() -> crate::output::describe_scheduled_actions_output::Builder {
        crate::output::describe_scheduled_actions_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeScalingPoliciesOutput {
    /// <p>Information about the scaling policies.</p>
    pub scaling_policies: std::option::Option<std::vec::Vec<crate::model::ScalingPolicy>>,
    /// <p>The token required to get the next set of results. This value is <code>null</code> if there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl DescribeScalingPoliciesOutput {
    /// <p>Information about the scaling policies.</p>
    pub fn scaling_policies(&self) -> std::option::Option<&[crate::model::ScalingPolicy]> {
        self.scaling_policies.as_deref()
    }
    /// <p>The token required to get the next set of results. This value is <code>null</code> if there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for DescribeScalingPoliciesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeScalingPoliciesOutput");
        formatter.field("scaling_policies", &self.scaling_policies);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`DescribeScalingPoliciesOutput`](crate::output::DescribeScalingPoliciesOutput)
pub mod describe_scaling_policies_output {
    /// A builder for [`DescribeScalingPoliciesOutput`](crate::output::DescribeScalingPoliciesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) scaling_policies:
            std::option::Option<std::vec::Vec<crate::model::ScalingPolicy>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `scaling_policies`.
        ///
        /// To override the contents of this collection use [`set_scaling_policies`](Self::set_scaling_policies).
        ///
        /// <p>Information about the scaling policies.</p>
        pub fn scaling_policies(mut self, input: crate::model::ScalingPolicy) -> Self {
            let mut v = self.scaling_policies.unwrap_or_default();
            v.push(input);
            self.scaling_policies = Some(v);
            self
        }
        /// <p>Information about the scaling policies.</p>
        pub fn set_scaling_policies(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ScalingPolicy>>,
        ) -> Self {
            self.scaling_policies = input;
            self
        }
        /// <p>The token required to get the next set of results. This value is <code>null</code> if there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token required to get the next set of results. This value is <code>null</code> if there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeScalingPoliciesOutput`](crate::output::DescribeScalingPoliciesOutput)
        pub fn build(self) -> crate::output::DescribeScalingPoliciesOutput {
            crate::output::DescribeScalingPoliciesOutput {
                scaling_policies: self.scaling_policies,
                next_token: self.next_token,
            }
        }
    }
}
impl DescribeScalingPoliciesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeScalingPoliciesOutput`](crate::output::DescribeScalingPoliciesOutput)
    pub fn builder() -> crate::output::describe_scaling_policies_output::Builder {
        crate::output::describe_scaling_policies_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeScalingActivitiesOutput {
    /// <p>A list of scaling activity objects.</p>
    pub scaling_activities: std::option::Option<std::vec::Vec<crate::model::ScalingActivity>>,
    /// <p>The token required to get the next set of results. This value is <code>null</code> if there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl DescribeScalingActivitiesOutput {
    /// <p>A list of scaling activity objects.</p>
    pub fn scaling_activities(&self) -> std::option::Option<&[crate::model::ScalingActivity]> {
        self.scaling_activities.as_deref()
    }
    /// <p>The token required to get the next set of results. This value is <code>null</code> if there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for DescribeScalingActivitiesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeScalingActivitiesOutput");
        formatter.field("scaling_activities", &self.scaling_activities);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`DescribeScalingActivitiesOutput`](crate::output::DescribeScalingActivitiesOutput)
pub mod describe_scaling_activities_output {
    /// A builder for [`DescribeScalingActivitiesOutput`](crate::output::DescribeScalingActivitiesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) scaling_activities:
            std::option::Option<std::vec::Vec<crate::model::ScalingActivity>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `scaling_activities`.
        ///
        /// To override the contents of this collection use [`set_scaling_activities`](Self::set_scaling_activities).
        ///
        /// <p>A list of scaling activity objects.</p>
        pub fn scaling_activities(mut self, input: crate::model::ScalingActivity) -> Self {
            let mut v = self.scaling_activities.unwrap_or_default();
            v.push(input);
            self.scaling_activities = Some(v);
            self
        }
        /// <p>A list of scaling activity objects.</p>
        pub fn set_scaling_activities(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ScalingActivity>>,
        ) -> Self {
            self.scaling_activities = input;
            self
        }
        /// <p>The token required to get the next set of results. This value is <code>null</code> if there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token required to get the next set of results. This value is <code>null</code> if there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeScalingActivitiesOutput`](crate::output::DescribeScalingActivitiesOutput)
        pub fn build(self) -> crate::output::DescribeScalingActivitiesOutput {
            crate::output::DescribeScalingActivitiesOutput {
                scaling_activities: self.scaling_activities,
                next_token: self.next_token,
            }
        }
    }
}
impl DescribeScalingActivitiesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeScalingActivitiesOutput`](crate::output::DescribeScalingActivitiesOutput)
    pub fn builder() -> crate::output::describe_scaling_activities_output::Builder {
        crate::output::describe_scaling_activities_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeScalableTargetsOutput {
    /// <p>The scalable targets that match the request parameters.</p>
    pub scalable_targets: std::option::Option<std::vec::Vec<crate::model::ScalableTarget>>,
    /// <p>The token required to get the next set of results. This value is <code>null</code> if there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl DescribeScalableTargetsOutput {
    /// <p>The scalable targets that match the request parameters.</p>
    pub fn scalable_targets(&self) -> std::option::Option<&[crate::model::ScalableTarget]> {
        self.scalable_targets.as_deref()
    }
    /// <p>The token required to get the next set of results. This value is <code>null</code> if there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for DescribeScalableTargetsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeScalableTargetsOutput");
        formatter.field("scalable_targets", &self.scalable_targets);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`DescribeScalableTargetsOutput`](crate::output::DescribeScalableTargetsOutput)
pub mod describe_scalable_targets_output {
    /// A builder for [`DescribeScalableTargetsOutput`](crate::output::DescribeScalableTargetsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) scalable_targets:
            std::option::Option<std::vec::Vec<crate::model::ScalableTarget>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `scalable_targets`.
        ///
        /// To override the contents of this collection use [`set_scalable_targets`](Self::set_scalable_targets).
        ///
        /// <p>The scalable targets that match the request parameters.</p>
        pub fn scalable_targets(mut self, input: crate::model::ScalableTarget) -> Self {
            let mut v = self.scalable_targets.unwrap_or_default();
            v.push(input);
            self.scalable_targets = Some(v);
            self
        }
        /// <p>The scalable targets that match the request parameters.</p>
        pub fn set_scalable_targets(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ScalableTarget>>,
        ) -> Self {
            self.scalable_targets = input;
            self
        }
        /// <p>The token required to get the next set of results. This value is <code>null</code> if there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token required to get the next set of results. This value is <code>null</code> if there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeScalableTargetsOutput`](crate::output::DescribeScalableTargetsOutput)
        pub fn build(self) -> crate::output::DescribeScalableTargetsOutput {
            crate::output::DescribeScalableTargetsOutput {
                scalable_targets: self.scalable_targets,
                next_token: self.next_token,
            }
        }
    }
}
impl DescribeScalableTargetsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeScalableTargetsOutput`](crate::output::DescribeScalableTargetsOutput)
    pub fn builder() -> crate::output::describe_scalable_targets_output::Builder {
        crate::output::describe_scalable_targets_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeregisterScalableTargetOutput {}
impl std::fmt::Debug for DeregisterScalableTargetOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeregisterScalableTargetOutput");
        formatter.finish()
    }
}
/// See [`DeregisterScalableTargetOutput`](crate::output::DeregisterScalableTargetOutput)
pub mod deregister_scalable_target_output {
    /// A builder for [`DeregisterScalableTargetOutput`](crate::output::DeregisterScalableTargetOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeregisterScalableTargetOutput`](crate::output::DeregisterScalableTargetOutput)
        pub fn build(self) -> crate::output::DeregisterScalableTargetOutput {
            crate::output::DeregisterScalableTargetOutput {}
        }
    }
}
impl DeregisterScalableTargetOutput {
    /// Creates a new builder-style object to manufacture [`DeregisterScalableTargetOutput`](crate::output::DeregisterScalableTargetOutput)
    pub fn builder() -> crate::output::deregister_scalable_target_output::Builder {
        crate::output::deregister_scalable_target_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteScheduledActionOutput {}
impl std::fmt::Debug for DeleteScheduledActionOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteScheduledActionOutput");
        formatter.finish()
    }
}
/// See [`DeleteScheduledActionOutput`](crate::output::DeleteScheduledActionOutput)
pub mod delete_scheduled_action_output {
    /// A builder for [`DeleteScheduledActionOutput`](crate::output::DeleteScheduledActionOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteScheduledActionOutput`](crate::output::DeleteScheduledActionOutput)
        pub fn build(self) -> crate::output::DeleteScheduledActionOutput {
            crate::output::DeleteScheduledActionOutput {}
        }
    }
}
impl DeleteScheduledActionOutput {
    /// Creates a new builder-style object to manufacture [`DeleteScheduledActionOutput`](crate::output::DeleteScheduledActionOutput)
    pub fn builder() -> crate::output::delete_scheduled_action_output::Builder {
        crate::output::delete_scheduled_action_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteScalingPolicyOutput {}
impl std::fmt::Debug for DeleteScalingPolicyOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteScalingPolicyOutput");
        formatter.finish()
    }
}
/// See [`DeleteScalingPolicyOutput`](crate::output::DeleteScalingPolicyOutput)
pub mod delete_scaling_policy_output {
    /// A builder for [`DeleteScalingPolicyOutput`](crate::output::DeleteScalingPolicyOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteScalingPolicyOutput`](crate::output::DeleteScalingPolicyOutput)
        pub fn build(self) -> crate::output::DeleteScalingPolicyOutput {
            crate::output::DeleteScalingPolicyOutput {}
        }
    }
}
impl DeleteScalingPolicyOutput {
    /// Creates a new builder-style object to manufacture [`DeleteScalingPolicyOutput`](crate::output::DeleteScalingPolicyOutput)
    pub fn builder() -> crate::output::delete_scaling_policy_output::Builder {
        crate::output::delete_scaling_policy_output::Builder::default()
    }
}
