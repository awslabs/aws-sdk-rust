// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[derive(Debug)]
pub(crate) struct Handle<
    C = aws_smithy_client::erase::DynConnector,
    M = crate::middleware::DefaultMiddleware,
    R = aws_smithy_client::retry::Standard,
> {
    client: aws_smithy_client::Client<C, M, R>,
    conf: crate::Config,
}

/// Client for Application Auto Scaling
///
/// Client for invoking operations on Application Auto Scaling. Each operation on Application Auto Scaling is a method on this
/// this struct. `.send()` MUST be invoked on the generated operations to dispatch the request to the service.
///
/// # Examples
/// **Constructing a client and invoking an operation**
/// ```rust,no_run
/// # async fn docs() {
///     // create a shared configuration. This can be used & shared between multiple service clients.
///     let shared_config = aws_config::load_from_env().await;
///     let client = aws_sdk_applicationautoscaling::Client::new(&shared_config);
///     // invoke an operation
///     /* let rsp = client
///         .<operation_name>().
///         .<param>("some value")
///         .send().await; */
/// # }
/// ```
/// **Constructing a client with custom configuration**
/// ```rust,no_run
/// use aws_config::RetryConfig;
/// # async fn docs() {
///     let shared_config = aws_config::load_from_env().await;
///     let config = aws_sdk_applicationautoscaling::config::Builder::from(&shared_config)
///         .retry_config(RetryConfig::disabled())
///         .build();
///     let client = aws_sdk_applicationautoscaling::Client::from_conf(config);
/// # }
#[derive(std::fmt::Debug)]
pub struct Client<
    C = aws_smithy_client::erase::DynConnector,
    M = crate::middleware::DefaultMiddleware,
    R = aws_smithy_client::retry::Standard,
> {
    handle: std::sync::Arc<Handle<C, M, R>>,
}

impl<C, M, R> std::clone::Clone for Client<C, M, R> {
    fn clone(&self) -> Self {
        Self {
            handle: self.handle.clone(),
        }
    }
}

#[doc(inline)]
pub use aws_smithy_client::Builder;

impl<C, M, R> From<aws_smithy_client::Client<C, M, R>> for Client<C, M, R> {
    fn from(client: aws_smithy_client::Client<C, M, R>) -> Self {
        Self::with_config(client, crate::Config::builder().build())
    }
}

impl<C, M, R> Client<C, M, R> {
    /// Creates a client with the given service configuration.
    pub fn with_config(client: aws_smithy_client::Client<C, M, R>, conf: crate::Config) -> Self {
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    /// Returns the client's configuration.
    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl<C, M, R> Client<C, M, R>
where
    C: aws_smithy_client::bounds::SmithyConnector,
    M: aws_smithy_client::bounds::SmithyMiddleware<C>,
    R: aws_smithy_client::retry::NewRequestPolicy,
{
    /// Constructs a fluent builder for the `DeleteScalingPolicy` operation.
    ///
    /// See [`DeleteScalingPolicy`](crate::client::fluent_builders::DeleteScalingPolicy) for more information about the
    /// operation and its arguments.
    pub fn delete_scaling_policy(&self) -> fluent_builders::DeleteScalingPolicy<C, M, R> {
        fluent_builders::DeleteScalingPolicy::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `DeleteScheduledAction` operation.
    ///
    /// See [`DeleteScheduledAction`](crate::client::fluent_builders::DeleteScheduledAction) for more information about the
    /// operation and its arguments.
    pub fn delete_scheduled_action(&self) -> fluent_builders::DeleteScheduledAction<C, M, R> {
        fluent_builders::DeleteScheduledAction::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `DeregisterScalableTarget` operation.
    ///
    /// See [`DeregisterScalableTarget`](crate::client::fluent_builders::DeregisterScalableTarget) for more information about the
    /// operation and its arguments.
    pub fn deregister_scalable_target(&self) -> fluent_builders::DeregisterScalableTarget<C, M, R> {
        fluent_builders::DeregisterScalableTarget::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `DescribeScalableTargets` operation.
    ///
    /// See [`DescribeScalableTargets`](crate::client::fluent_builders::DescribeScalableTargets) for more information about the
    /// operation and its arguments.
    pub fn describe_scalable_targets(&self) -> fluent_builders::DescribeScalableTargets<C, M, R> {
        fluent_builders::DescribeScalableTargets::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `DescribeScalingActivities` operation.
    ///
    /// See [`DescribeScalingActivities`](crate::client::fluent_builders::DescribeScalingActivities) for more information about the
    /// operation and its arguments.
    pub fn describe_scaling_activities(
        &self,
    ) -> fluent_builders::DescribeScalingActivities<C, M, R> {
        fluent_builders::DescribeScalingActivities::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `DescribeScalingPolicies` operation.
    ///
    /// See [`DescribeScalingPolicies`](crate::client::fluent_builders::DescribeScalingPolicies) for more information about the
    /// operation and its arguments.
    pub fn describe_scaling_policies(&self) -> fluent_builders::DescribeScalingPolicies<C, M, R> {
        fluent_builders::DescribeScalingPolicies::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `DescribeScheduledActions` operation.
    ///
    /// See [`DescribeScheduledActions`](crate::client::fluent_builders::DescribeScheduledActions) for more information about the
    /// operation and its arguments.
    pub fn describe_scheduled_actions(&self) -> fluent_builders::DescribeScheduledActions<C, M, R> {
        fluent_builders::DescribeScheduledActions::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `PutScalingPolicy` operation.
    ///
    /// See [`PutScalingPolicy`](crate::client::fluent_builders::PutScalingPolicy) for more information about the
    /// operation and its arguments.
    pub fn put_scaling_policy(&self) -> fluent_builders::PutScalingPolicy<C, M, R> {
        fluent_builders::PutScalingPolicy::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `PutScheduledAction` operation.
    ///
    /// See [`PutScheduledAction`](crate::client::fluent_builders::PutScheduledAction) for more information about the
    /// operation and its arguments.
    pub fn put_scheduled_action(&self) -> fluent_builders::PutScheduledAction<C, M, R> {
        fluent_builders::PutScheduledAction::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `RegisterScalableTarget` operation.
    ///
    /// See [`RegisterScalableTarget`](crate::client::fluent_builders::RegisterScalableTarget) for more information about the
    /// operation and its arguments.
    pub fn register_scalable_target(&self) -> fluent_builders::RegisterScalableTarget<C, M, R> {
        fluent_builders::RegisterScalableTarget::new(self.handle.clone())
    }
}
pub mod fluent_builders {
    //!
    //! Utilities to ergonomically construct a request to the service.
    //!
    //! Fluent builders are created through the [`Client`](crate::client::Client) by calling
    //! one if its operation methods. After parameters are set using the builder methods,
    //! the `send` method can be called to initiate the request.
    //!
    /// Fluent builder constructing a request to `DeleteScalingPolicy`.
    ///
    /// <p>Deletes the specified scaling policy for an Application Auto Scaling scalable target.</p>
    /// <p>Deleting a step scaling policy deletes the underlying alarm action, but does not delete
    /// the CloudWatch alarm associated with the scaling policy, even if it no longer has an associated
    /// action.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/application/userguide/application-auto-scaling-step-scaling-policies.html#delete-step-scaling-policy">Delete a step scaling policy</a> and <a href="https://docs.aws.amazon.com/autoscaling/application/userguide/application-auto-scaling-target-tracking.html#delete-target-tracking-policy">Delete a target tracking scaling policy</a> in the
    /// <i>Application Auto Scaling User Guide</i>.</p>
    #[derive(std::fmt::Debug)]
    pub struct DeleteScalingPolicy<
        C = aws_smithy_client::erase::DynConnector,
        M = crate::middleware::DefaultMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::delete_scaling_policy_input::Builder,
    }
    impl<C, M, R> DeleteScalingPolicy<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `DeleteScalingPolicy`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteScalingPolicyOutput,
            aws_smithy_http::result::SdkError<crate::error::DeleteScalingPolicyError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DeleteScalingPolicyInputOperationOutputAlias,
                crate::output::DeleteScalingPolicyOutput,
                crate::error::DeleteScalingPolicyError,
                crate::input::DeleteScalingPolicyInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the scaling policy.</p>
        pub fn policy_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.policy_name(inp);
            self
        }
        /// <p>The name of the scaling policy.</p>
        pub fn set_policy_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_policy_name(input);
            self
        }
        /// <p>The namespace of the Amazon Web Services service that provides the resource. For a resource provided
        /// by your own application or service, use <code>custom-resource</code> instead.</p>
        pub fn service_namespace(mut self, inp: crate::model::ServiceNamespace) -> Self {
            self.inner = self.inner.service_namespace(inp);
            self
        }
        /// <p>The namespace of the Amazon Web Services service that provides the resource. For a resource provided
        /// by your own application or service, use <code>custom-resource</code> instead.</p>
        pub fn set_service_namespace(
            mut self,
            input: std::option::Option<crate::model::ServiceNamespace>,
        ) -> Self {
            self.inner = self.inner.set_service_namespace(input);
            self
        }
        /// <p>The identifier of the resource associated with the scalable target.
        /// This string consists of the resource type and unique identifier.</p>
        /// <ul>
        /// <li>
        /// <p>ECS service - The resource type is <code>service</code> and the unique identifier is the cluster name  
        /// and service name. Example: <code>service/default/sample-webapp</code>.</p>
        /// </li>
        /// <li>
        /// <p>Spot Fleet - The resource type is <code>spot-fleet-request</code> and the unique identifier is the
        /// Spot Fleet request ID. Example: <code>spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE</code>.</p>
        /// </li>
        /// <li>
        /// <p>EMR cluster - The resource type is <code>instancegroup</code> and the unique identifier is the cluster ID and instance group ID.
        /// Example: <code>instancegroup/j-2EEZNYKUA1NTV/ig-1791Y4E1L8YI0</code>.</p>
        /// </li>
        /// <li>
        /// <p>AppStream 2.0 fleet - The resource type is <code>fleet</code> and the unique identifier is the fleet name.
        /// Example: <code>fleet/sample-fleet</code>.</p>
        /// </li>
        /// <li>
        /// <p>DynamoDB table - The resource type is <code>table</code> and the unique identifier is the table name.
        /// Example: <code>table/my-table</code>.</p>
        /// </li>
        /// <li>
        /// <p>DynamoDB global secondary index - The resource type is <code>index</code> and the unique identifier is the index name.
        /// Example: <code>table/my-table/index/my-table-index</code>.</p>
        /// </li>
        /// <li>
        /// <p>Aurora DB cluster - The resource type is <code>cluster</code> and the unique identifier is the cluster name.
        /// Example: <code>cluster:my-db-cluster</code>.</p>
        /// </li>
        /// <li>
        /// <p>SageMaker endpoint variant - The resource type is <code>variant</code> and the unique identifier is the resource ID.
        /// Example: <code>endpoint/my-end-point/variant/KMeansClustering</code>.</p>
        /// </li>
        /// <li>
        /// <p>Custom resources are not supported with a resource type. This parameter must specify the <code>OutputValue</code> from the CloudFormation template stack used to access the resources. The unique identifier is defined by the service provider. More information
        /// is available in our <a href="https://github.com/aws/aws-auto-scaling-custom-resource">GitHub
        /// repository</a>.</p>
        /// </li>
        /// <li>
        /// <p>Amazon Comprehend document classification endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: <code>arn:aws:comprehend:us-west-2:123456789012:document-classifier-endpoint/EXAMPLE</code>.</p>
        /// </li>
        /// <li>
        /// <p>Amazon Comprehend entity recognizer endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: <code>arn:aws:comprehend:us-west-2:123456789012:entity-recognizer-endpoint/EXAMPLE</code>.</p>
        /// </li>
        /// <li>
        /// <p>Lambda provisioned concurrency - The resource type is <code>function</code> and the unique identifier is the function name with a function version or alias name suffix that is not <code>$LATEST</code>.
        /// Example: <code>function:my-function:prod</code> or <code>function:my-function:1</code>.</p>
        /// </li>
        /// <li>
        /// <p>Amazon Keyspaces table - The resource type is <code>table</code> and the unique identifier is the table name.
        /// Example: <code>keyspace/mykeyspace/table/mytable</code>.</p>
        /// </li>
        /// <li>
        /// <p>Amazon MSK cluster - The resource type and unique identifier are specified using the cluster ARN.
        /// Example: <code>arn:aws:kafka:us-east-1:123456789012:cluster/demo-cluster-1/6357e0b2-0e6a-4b86-a0b4-70df934c2e31-5</code>.</p>
        /// </li>
        /// <li>
        /// <p>Amazon ElastiCache replication group - The resource type is <code>replication-group</code> and the unique identifier is the replication group name.
        /// Example: <code>replication-group/mycluster</code>.</p>
        /// </li>
        /// <li>
        /// <p>Neptune cluster - The resource type is <code>cluster</code> and the unique identifier is the cluster name. Example: <code>cluster:mycluster</code>.</p>
        /// </li>
        /// </ul>
        pub fn resource_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_id(inp);
            self
        }
        /// <p>The identifier of the resource associated with the scalable target.
        /// This string consists of the resource type and unique identifier.</p>
        /// <ul>
        /// <li>
        /// <p>ECS service - The resource type is <code>service</code> and the unique identifier is the cluster name  
        /// and service name. Example: <code>service/default/sample-webapp</code>.</p>
        /// </li>
        /// <li>
        /// <p>Spot Fleet - The resource type is <code>spot-fleet-request</code> and the unique identifier is the
        /// Spot Fleet request ID. Example: <code>spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE</code>.</p>
        /// </li>
        /// <li>
        /// <p>EMR cluster - The resource type is <code>instancegroup</code> and the unique identifier is the cluster ID and instance group ID.
        /// Example: <code>instancegroup/j-2EEZNYKUA1NTV/ig-1791Y4E1L8YI0</code>.</p>
        /// </li>
        /// <li>
        /// <p>AppStream 2.0 fleet - The resource type is <code>fleet</code> and the unique identifier is the fleet name.
        /// Example: <code>fleet/sample-fleet</code>.</p>
        /// </li>
        /// <li>
        /// <p>DynamoDB table - The resource type is <code>table</code> and the unique identifier is the table name.
        /// Example: <code>table/my-table</code>.</p>
        /// </li>
        /// <li>
        /// <p>DynamoDB global secondary index - The resource type is <code>index</code> and the unique identifier is the index name.
        /// Example: <code>table/my-table/index/my-table-index</code>.</p>
        /// </li>
        /// <li>
        /// <p>Aurora DB cluster - The resource type is <code>cluster</code> and the unique identifier is the cluster name.
        /// Example: <code>cluster:my-db-cluster</code>.</p>
        /// </li>
        /// <li>
        /// <p>SageMaker endpoint variant - The resource type is <code>variant</code> and the unique identifier is the resource ID.
        /// Example: <code>endpoint/my-end-point/variant/KMeansClustering</code>.</p>
        /// </li>
        /// <li>
        /// <p>Custom resources are not supported with a resource type. This parameter must specify the <code>OutputValue</code> from the CloudFormation template stack used to access the resources. The unique identifier is defined by the service provider. More information
        /// is available in our <a href="https://github.com/aws/aws-auto-scaling-custom-resource">GitHub
        /// repository</a>.</p>
        /// </li>
        /// <li>
        /// <p>Amazon Comprehend document classification endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: <code>arn:aws:comprehend:us-west-2:123456789012:document-classifier-endpoint/EXAMPLE</code>.</p>
        /// </li>
        /// <li>
        /// <p>Amazon Comprehend entity recognizer endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: <code>arn:aws:comprehend:us-west-2:123456789012:entity-recognizer-endpoint/EXAMPLE</code>.</p>
        /// </li>
        /// <li>
        /// <p>Lambda provisioned concurrency - The resource type is <code>function</code> and the unique identifier is the function name with a function version or alias name suffix that is not <code>$LATEST</code>.
        /// Example: <code>function:my-function:prod</code> or <code>function:my-function:1</code>.</p>
        /// </li>
        /// <li>
        /// <p>Amazon Keyspaces table - The resource type is <code>table</code> and the unique identifier is the table name.
        /// Example: <code>keyspace/mykeyspace/table/mytable</code>.</p>
        /// </li>
        /// <li>
        /// <p>Amazon MSK cluster - The resource type and unique identifier are specified using the cluster ARN.
        /// Example: <code>arn:aws:kafka:us-east-1:123456789012:cluster/demo-cluster-1/6357e0b2-0e6a-4b86-a0b4-70df934c2e31-5</code>.</p>
        /// </li>
        /// <li>
        /// <p>Amazon ElastiCache replication group - The resource type is <code>replication-group</code> and the unique identifier is the replication group name.
        /// Example: <code>replication-group/mycluster</code>.</p>
        /// </li>
        /// <li>
        /// <p>Neptune cluster - The resource type is <code>cluster</code> and the unique identifier is the cluster name. Example: <code>cluster:mycluster</code>.</p>
        /// </li>
        /// </ul>
        pub fn set_resource_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_resource_id(input);
            self
        }
        /// <p>The scalable dimension. This string consists of the service namespace, resource type, and scaling property.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>ecs:service:DesiredCount</code> - The desired task count of an ECS service.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>elasticmapreduce:instancegroup:InstanceCount</code> - The instance count of an EMR Instance Group.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>ec2:spot-fleet-request:TargetCapacity</code> - The target capacity of a Spot Fleet.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>appstream:fleet:DesiredCapacity</code> - The desired capacity of an AppStream 2.0 fleet.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>dynamodb:table:ReadCapacityUnits</code> - The provisioned read capacity for a DynamoDB table.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>dynamodb:table:WriteCapacityUnits</code> - The provisioned write capacity for a DynamoDB table.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>dynamodb:index:ReadCapacityUnits</code> - The provisioned read capacity for a DynamoDB global secondary index.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>dynamodb:index:WriteCapacityUnits</code> - The provisioned write capacity for a DynamoDB global secondary index.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>rds:cluster:ReadReplicaCount</code> - The count of Aurora Replicas in an Aurora DB cluster. Available for Aurora MySQL-compatible edition and Aurora PostgreSQL-compatible edition.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>sagemaker:variant:DesiredInstanceCount</code> - The number of EC2 instances for an SageMaker model endpoint variant.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>custom-resource:ResourceType:Property</code> - The scalable dimension for a custom resource provided by your own application or service.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>comprehend:document-classifier-endpoint:DesiredInferenceUnits</code> - The number of inference units for an Amazon Comprehend document classification endpoint.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>comprehend:entity-recognizer-endpoint:DesiredInferenceUnits</code> - The number of inference units for an Amazon Comprehend entity recognizer endpoint.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>lambda:function:ProvisionedConcurrency</code> - The provisioned concurrency for a Lambda function.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>cassandra:table:ReadCapacityUnits</code> - The provisioned read capacity for an Amazon Keyspaces table.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>cassandra:table:WriteCapacityUnits</code> - The provisioned write capacity for an Amazon Keyspaces table.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>kafka:broker-storage:VolumeSize</code> - The provisioned volume size (in GiB) for brokers in an Amazon MSK cluster.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>elasticache:replication-group:NodeGroups</code> - The number of node groups for an Amazon ElastiCache replication group.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>elasticache:replication-group:Replicas</code> - The number of replicas per node group for an Amazon ElastiCache replication group.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>neptune:cluster:ReadReplicaCount</code> - The count of read replicas in an Amazon Neptune DB cluster.</p>
        /// </li>
        /// </ul>
        pub fn scalable_dimension(mut self, inp: crate::model::ScalableDimension) -> Self {
            self.inner = self.inner.scalable_dimension(inp);
            self
        }
        /// <p>The scalable dimension. This string consists of the service namespace, resource type, and scaling property.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>ecs:service:DesiredCount</code> - The desired task count of an ECS service.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>elasticmapreduce:instancegroup:InstanceCount</code> - The instance count of an EMR Instance Group.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>ec2:spot-fleet-request:TargetCapacity</code> - The target capacity of a Spot Fleet.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>appstream:fleet:DesiredCapacity</code> - The desired capacity of an AppStream 2.0 fleet.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>dynamodb:table:ReadCapacityUnits</code> - The provisioned read capacity for a DynamoDB table.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>dynamodb:table:WriteCapacityUnits</code> - The provisioned write capacity for a DynamoDB table.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>dynamodb:index:ReadCapacityUnits</code> - The provisioned read capacity for a DynamoDB global secondary index.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>dynamodb:index:WriteCapacityUnits</code> - The provisioned write capacity for a DynamoDB global secondary index.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>rds:cluster:ReadReplicaCount</code> - The count of Aurora Replicas in an Aurora DB cluster. Available for Aurora MySQL-compatible edition and Aurora PostgreSQL-compatible edition.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>sagemaker:variant:DesiredInstanceCount</code> - The number of EC2 instances for an SageMaker model endpoint variant.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>custom-resource:ResourceType:Property</code> - The scalable dimension for a custom resource provided by your own application or service.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>comprehend:document-classifier-endpoint:DesiredInferenceUnits</code> - The number of inference units for an Amazon Comprehend document classification endpoint.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>comprehend:entity-recognizer-endpoint:DesiredInferenceUnits</code> - The number of inference units for an Amazon Comprehend entity recognizer endpoint.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>lambda:function:ProvisionedConcurrency</code> - The provisioned concurrency for a Lambda function.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>cassandra:table:ReadCapacityUnits</code> - The provisioned read capacity for an Amazon Keyspaces table.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>cassandra:table:WriteCapacityUnits</code> - The provisioned write capacity for an Amazon Keyspaces table.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>kafka:broker-storage:VolumeSize</code> - The provisioned volume size (in GiB) for brokers in an Amazon MSK cluster.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>elasticache:replication-group:NodeGroups</code> - The number of node groups for an Amazon ElastiCache replication group.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>elasticache:replication-group:Replicas</code> - The number of replicas per node group for an Amazon ElastiCache replication group.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>neptune:cluster:ReadReplicaCount</code> - The count of read replicas in an Amazon Neptune DB cluster.</p>
        /// </li>
        /// </ul>
        pub fn set_scalable_dimension(
            mut self,
            input: std::option::Option<crate::model::ScalableDimension>,
        ) -> Self {
            self.inner = self.inner.set_scalable_dimension(input);
            self
        }
    }
    /// Fluent builder constructing a request to `DeleteScheduledAction`.
    ///
    /// <p>Deletes the specified scheduled action for an Application Auto Scaling scalable target.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/application/userguide/scheduled-scaling-additional-cli-commands.html#delete-scheduled-action">Delete a scheduled action</a> in the <i>Application Auto Scaling User Guide</i>.</p>
    #[derive(std::fmt::Debug)]
    pub struct DeleteScheduledAction<
        C = aws_smithy_client::erase::DynConnector,
        M = crate::middleware::DefaultMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::delete_scheduled_action_input::Builder,
    }
    impl<C, M, R> DeleteScheduledAction<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `DeleteScheduledAction`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteScheduledActionOutput,
            aws_smithy_http::result::SdkError<crate::error::DeleteScheduledActionError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DeleteScheduledActionInputOperationOutputAlias,
                crate::output::DeleteScheduledActionOutput,
                crate::error::DeleteScheduledActionError,
                crate::input::DeleteScheduledActionInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The namespace of the Amazon Web Services service that provides the resource. For a resource provided
        /// by your own application or service, use <code>custom-resource</code> instead.</p>
        pub fn service_namespace(mut self, inp: crate::model::ServiceNamespace) -> Self {
            self.inner = self.inner.service_namespace(inp);
            self
        }
        /// <p>The namespace of the Amazon Web Services service that provides the resource. For a resource provided
        /// by your own application or service, use <code>custom-resource</code> instead.</p>
        pub fn set_service_namespace(
            mut self,
            input: std::option::Option<crate::model::ServiceNamespace>,
        ) -> Self {
            self.inner = self.inner.set_service_namespace(input);
            self
        }
        /// <p>The name of the scheduled action.</p>
        pub fn scheduled_action_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.scheduled_action_name(inp);
            self
        }
        /// <p>The name of the scheduled action.</p>
        pub fn set_scheduled_action_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_scheduled_action_name(input);
            self
        }
        /// <p>The identifier of the resource associated with the scheduled action.
        /// This string consists of the resource type and unique identifier.</p>
        /// <ul>
        /// <li>
        /// <p>ECS service - The resource type is <code>service</code> and the unique identifier is the cluster name  
        /// and service name. Example: <code>service/default/sample-webapp</code>.</p>
        /// </li>
        /// <li>
        /// <p>Spot Fleet - The resource type is <code>spot-fleet-request</code> and the unique identifier is the
        /// Spot Fleet request ID. Example: <code>spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE</code>.</p>
        /// </li>
        /// <li>
        /// <p>EMR cluster - The resource type is <code>instancegroup</code> and the unique identifier is the cluster ID and instance group ID.
        /// Example: <code>instancegroup/j-2EEZNYKUA1NTV/ig-1791Y4E1L8YI0</code>.</p>
        /// </li>
        /// <li>
        /// <p>AppStream 2.0 fleet - The resource type is <code>fleet</code> and the unique identifier is the fleet name.
        /// Example: <code>fleet/sample-fleet</code>.</p>
        /// </li>
        /// <li>
        /// <p>DynamoDB table - The resource type is <code>table</code> and the unique identifier is the table name.
        /// Example: <code>table/my-table</code>.</p>
        /// </li>
        /// <li>
        /// <p>DynamoDB global secondary index - The resource type is <code>index</code> and the unique identifier is the index name.
        /// Example: <code>table/my-table/index/my-table-index</code>.</p>
        /// </li>
        /// <li>
        /// <p>Aurora DB cluster - The resource type is <code>cluster</code> and the unique identifier is the cluster name.
        /// Example: <code>cluster:my-db-cluster</code>.</p>
        /// </li>
        /// <li>
        /// <p>SageMaker endpoint variant - The resource type is <code>variant</code> and the unique identifier is the resource ID.
        /// Example: <code>endpoint/my-end-point/variant/KMeansClustering</code>.</p>
        /// </li>
        /// <li>
        /// <p>Custom resources are not supported with a resource type. This parameter must specify the <code>OutputValue</code> from the CloudFormation template stack used to access the resources. The unique identifier is defined by the service provider. More information
        /// is available in our <a href="https://github.com/aws/aws-auto-scaling-custom-resource">GitHub
        /// repository</a>.</p>
        /// </li>
        /// <li>
        /// <p>Amazon Comprehend document classification endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: <code>arn:aws:comprehend:us-west-2:123456789012:document-classifier-endpoint/EXAMPLE</code>.</p>
        /// </li>
        /// <li>
        /// <p>Amazon Comprehend entity recognizer endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: <code>arn:aws:comprehend:us-west-2:123456789012:entity-recognizer-endpoint/EXAMPLE</code>.</p>
        /// </li>
        /// <li>
        /// <p>Lambda provisioned concurrency - The resource type is <code>function</code> and the unique identifier is the function name with a function version or alias name suffix that is not <code>$LATEST</code>.
        /// Example: <code>function:my-function:prod</code> or <code>function:my-function:1</code>.</p>
        /// </li>
        /// <li>
        /// <p>Amazon Keyspaces table - The resource type is <code>table</code> and the unique identifier is the table name.
        /// Example: <code>keyspace/mykeyspace/table/mytable</code>.</p>
        /// </li>
        /// <li>
        /// <p>Amazon MSK cluster - The resource type and unique identifier are specified using the cluster ARN.
        /// Example: <code>arn:aws:kafka:us-east-1:123456789012:cluster/demo-cluster-1/6357e0b2-0e6a-4b86-a0b4-70df934c2e31-5</code>.</p>
        /// </li>
        /// <li>
        /// <p>Amazon ElastiCache replication group - The resource type is <code>replication-group</code> and the unique identifier is the replication group name.
        /// Example: <code>replication-group/mycluster</code>.</p>
        /// </li>
        /// <li>
        /// <p>Neptune cluster - The resource type is <code>cluster</code> and the unique identifier is the cluster name. Example: <code>cluster:mycluster</code>.</p>
        /// </li>
        /// </ul>
        pub fn resource_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_id(inp);
            self
        }
        /// <p>The identifier of the resource associated with the scheduled action.
        /// This string consists of the resource type and unique identifier.</p>
        /// <ul>
        /// <li>
        /// <p>ECS service - The resource type is <code>service</code> and the unique identifier is the cluster name  
        /// and service name. Example: <code>service/default/sample-webapp</code>.</p>
        /// </li>
        /// <li>
        /// <p>Spot Fleet - The resource type is <code>spot-fleet-request</code> and the unique identifier is the
        /// Spot Fleet request ID. Example: <code>spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE</code>.</p>
        /// </li>
        /// <li>
        /// <p>EMR cluster - The resource type is <code>instancegroup</code> and the unique identifier is the cluster ID and instance group ID.
        /// Example: <code>instancegroup/j-2EEZNYKUA1NTV/ig-1791Y4E1L8YI0</code>.</p>
        /// </li>
        /// <li>
        /// <p>AppStream 2.0 fleet - The resource type is <code>fleet</code> and the unique identifier is the fleet name.
        /// Example: <code>fleet/sample-fleet</code>.</p>
        /// </li>
        /// <li>
        /// <p>DynamoDB table - The resource type is <code>table</code> and the unique identifier is the table name.
        /// Example: <code>table/my-table</code>.</p>
        /// </li>
        /// <li>
        /// <p>DynamoDB global secondary index - The resource type is <code>index</code> and the unique identifier is the index name.
        /// Example: <code>table/my-table/index/my-table-index</code>.</p>
        /// </li>
        /// <li>
        /// <p>Aurora DB cluster - The resource type is <code>cluster</code> and the unique identifier is the cluster name.
        /// Example: <code>cluster:my-db-cluster</code>.</p>
        /// </li>
        /// <li>
        /// <p>SageMaker endpoint variant - The resource type is <code>variant</code> and the unique identifier is the resource ID.
        /// Example: <code>endpoint/my-end-point/variant/KMeansClustering</code>.</p>
        /// </li>
        /// <li>
        /// <p>Custom resources are not supported with a resource type. This parameter must specify the <code>OutputValue</code> from the CloudFormation template stack used to access the resources. The unique identifier is defined by the service provider. More information
        /// is available in our <a href="https://github.com/aws/aws-auto-scaling-custom-resource">GitHub
        /// repository</a>.</p>
        /// </li>
        /// <li>
        /// <p>Amazon Comprehend document classification endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: <code>arn:aws:comprehend:us-west-2:123456789012:document-classifier-endpoint/EXAMPLE</code>.</p>
        /// </li>
        /// <li>
        /// <p>Amazon Comprehend entity recognizer endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: <code>arn:aws:comprehend:us-west-2:123456789012:entity-recognizer-endpoint/EXAMPLE</code>.</p>
        /// </li>
        /// <li>
        /// <p>Lambda provisioned concurrency - The resource type is <code>function</code> and the unique identifier is the function name with a function version or alias name suffix that is not <code>$LATEST</code>.
        /// Example: <code>function:my-function:prod</code> or <code>function:my-function:1</code>.</p>
        /// </li>
        /// <li>
        /// <p>Amazon Keyspaces table - The resource type is <code>table</code> and the unique identifier is the table name.
        /// Example: <code>keyspace/mykeyspace/table/mytable</code>.</p>
        /// </li>
        /// <li>
        /// <p>Amazon MSK cluster - The resource type and unique identifier are specified using the cluster ARN.
        /// Example: <code>arn:aws:kafka:us-east-1:123456789012:cluster/demo-cluster-1/6357e0b2-0e6a-4b86-a0b4-70df934c2e31-5</code>.</p>
        /// </li>
        /// <li>
        /// <p>Amazon ElastiCache replication group - The resource type is <code>replication-group</code> and the unique identifier is the replication group name.
        /// Example: <code>replication-group/mycluster</code>.</p>
        /// </li>
        /// <li>
        /// <p>Neptune cluster - The resource type is <code>cluster</code> and the unique identifier is the cluster name. Example: <code>cluster:mycluster</code>.</p>
        /// </li>
        /// </ul>
        pub fn set_resource_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_resource_id(input);
            self
        }
        /// <p>The scalable dimension. This string consists of the service namespace, resource type, and scaling property.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>ecs:service:DesiredCount</code> - The desired task count of an ECS service.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>elasticmapreduce:instancegroup:InstanceCount</code> - The instance count of an EMR Instance Group.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>ec2:spot-fleet-request:TargetCapacity</code> - The target capacity of a Spot Fleet.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>appstream:fleet:DesiredCapacity</code> - The desired capacity of an AppStream 2.0 fleet.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>dynamodb:table:ReadCapacityUnits</code> - The provisioned read capacity for a DynamoDB table.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>dynamodb:table:WriteCapacityUnits</code> - The provisioned write capacity for a DynamoDB table.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>dynamodb:index:ReadCapacityUnits</code> - The provisioned read capacity for a DynamoDB global secondary index.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>dynamodb:index:WriteCapacityUnits</code> - The provisioned write capacity for a DynamoDB global secondary index.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>rds:cluster:ReadReplicaCount</code> - The count of Aurora Replicas in an Aurora DB cluster. Available for Aurora MySQL-compatible edition and Aurora PostgreSQL-compatible edition.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>sagemaker:variant:DesiredInstanceCount</code> - The number of EC2 instances for an SageMaker model endpoint variant.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>custom-resource:ResourceType:Property</code> - The scalable dimension for a custom resource provided by your own application or service.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>comprehend:document-classifier-endpoint:DesiredInferenceUnits</code> - The number of inference units for an Amazon Comprehend document classification endpoint.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>comprehend:entity-recognizer-endpoint:DesiredInferenceUnits</code> - The number of inference units for an Amazon Comprehend entity recognizer endpoint.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>lambda:function:ProvisionedConcurrency</code> - The provisioned concurrency for a Lambda function.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>cassandra:table:ReadCapacityUnits</code> - The provisioned read capacity for an Amazon Keyspaces table.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>cassandra:table:WriteCapacityUnits</code> - The provisioned write capacity for an Amazon Keyspaces table.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>kafka:broker-storage:VolumeSize</code> - The provisioned volume size (in GiB) for brokers in an Amazon MSK cluster.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>elasticache:replication-group:NodeGroups</code> - The number of node groups for an Amazon ElastiCache replication group.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>elasticache:replication-group:Replicas</code> - The number of replicas per node group for an Amazon ElastiCache replication group.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>neptune:cluster:ReadReplicaCount</code> - The count of read replicas in an Amazon Neptune DB cluster.</p>
        /// </li>
        /// </ul>
        pub fn scalable_dimension(mut self, inp: crate::model::ScalableDimension) -> Self {
            self.inner = self.inner.scalable_dimension(inp);
            self
        }
        /// <p>The scalable dimension. This string consists of the service namespace, resource type, and scaling property.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>ecs:service:DesiredCount</code> - The desired task count of an ECS service.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>elasticmapreduce:instancegroup:InstanceCount</code> - The instance count of an EMR Instance Group.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>ec2:spot-fleet-request:TargetCapacity</code> - The target capacity of a Spot Fleet.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>appstream:fleet:DesiredCapacity</code> - The desired capacity of an AppStream 2.0 fleet.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>dynamodb:table:ReadCapacityUnits</code> - The provisioned read capacity for a DynamoDB table.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>dynamodb:table:WriteCapacityUnits</code> - The provisioned write capacity for a DynamoDB table.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>dynamodb:index:ReadCapacityUnits</code> - The provisioned read capacity for a DynamoDB global secondary index.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>dynamodb:index:WriteCapacityUnits</code> - The provisioned write capacity for a DynamoDB global secondary index.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>rds:cluster:ReadReplicaCount</code> - The count of Aurora Replicas in an Aurora DB cluster. Available for Aurora MySQL-compatible edition and Aurora PostgreSQL-compatible edition.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>sagemaker:variant:DesiredInstanceCount</code> - The number of EC2 instances for an SageMaker model endpoint variant.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>custom-resource:ResourceType:Property</code> - The scalable dimension for a custom resource provided by your own application or service.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>comprehend:document-classifier-endpoint:DesiredInferenceUnits</code> - The number of inference units for an Amazon Comprehend document classification endpoint.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>comprehend:entity-recognizer-endpoint:DesiredInferenceUnits</code> - The number of inference units for an Amazon Comprehend entity recognizer endpoint.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>lambda:function:ProvisionedConcurrency</code> - The provisioned concurrency for a Lambda function.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>cassandra:table:ReadCapacityUnits</code> - The provisioned read capacity for an Amazon Keyspaces table.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>cassandra:table:WriteCapacityUnits</code> - The provisioned write capacity for an Amazon Keyspaces table.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>kafka:broker-storage:VolumeSize</code> - The provisioned volume size (in GiB) for brokers in an Amazon MSK cluster.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>elasticache:replication-group:NodeGroups</code> - The number of node groups for an Amazon ElastiCache replication group.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>elasticache:replication-group:Replicas</code> - The number of replicas per node group for an Amazon ElastiCache replication group.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>neptune:cluster:ReadReplicaCount</code> - The count of read replicas in an Amazon Neptune DB cluster.</p>
        /// </li>
        /// </ul>
        pub fn set_scalable_dimension(
            mut self,
            input: std::option::Option<crate::model::ScalableDimension>,
        ) -> Self {
            self.inner = self.inner.set_scalable_dimension(input);
            self
        }
    }
    /// Fluent builder constructing a request to `DeregisterScalableTarget`.
    ///
    /// <p>Deregisters an Application Auto Scaling scalable target when you have finished using it. To see which
    /// resources have been registered, use <a href="https://docs.aws.amazon.com/autoscaling/application/APIReference/API_DescribeScalableTargets.html">DescribeScalableTargets</a>. </p>
    /// <note>
    /// <p>Deregistering a scalable target deletes the scaling policies and the scheduled
    /// actions that are associated with it.</p>
    /// </note>
    #[derive(std::fmt::Debug)]
    pub struct DeregisterScalableTarget<
        C = aws_smithy_client::erase::DynConnector,
        M = crate::middleware::DefaultMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::deregister_scalable_target_input::Builder,
    }
    impl<C, M, R> DeregisterScalableTarget<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `DeregisterScalableTarget`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeregisterScalableTargetOutput,
            aws_smithy_http::result::SdkError<crate::error::DeregisterScalableTargetError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DeregisterScalableTargetInputOperationOutputAlias,
                crate::output::DeregisterScalableTargetOutput,
                crate::error::DeregisterScalableTargetError,
                crate::input::DeregisterScalableTargetInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The namespace of the Amazon Web Services service that provides the resource. For a resource provided
        /// by your own application or service, use <code>custom-resource</code> instead.</p>
        pub fn service_namespace(mut self, inp: crate::model::ServiceNamespace) -> Self {
            self.inner = self.inner.service_namespace(inp);
            self
        }
        /// <p>The namespace of the Amazon Web Services service that provides the resource. For a resource provided
        /// by your own application or service, use <code>custom-resource</code> instead.</p>
        pub fn set_service_namespace(
            mut self,
            input: std::option::Option<crate::model::ServiceNamespace>,
        ) -> Self {
            self.inner = self.inner.set_service_namespace(input);
            self
        }
        /// <p>The identifier of the resource associated with the scalable target.
        /// This string consists of the resource type and unique identifier.</p>
        /// <ul>
        /// <li>
        /// <p>ECS service - The resource type is <code>service</code> and the unique identifier is the cluster name  
        /// and service name. Example: <code>service/default/sample-webapp</code>.</p>
        /// </li>
        /// <li>
        /// <p>Spot Fleet - The resource type is <code>spot-fleet-request</code> and the unique identifier is the
        /// Spot Fleet request ID. Example: <code>spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE</code>.</p>
        /// </li>
        /// <li>
        /// <p>EMR cluster - The resource type is <code>instancegroup</code> and the unique identifier is the cluster ID and instance group ID.
        /// Example: <code>instancegroup/j-2EEZNYKUA1NTV/ig-1791Y4E1L8YI0</code>.</p>
        /// </li>
        /// <li>
        /// <p>AppStream 2.0 fleet - The resource type is <code>fleet</code> and the unique identifier is the fleet name.
        /// Example: <code>fleet/sample-fleet</code>.</p>
        /// </li>
        /// <li>
        /// <p>DynamoDB table - The resource type is <code>table</code> and the unique identifier is the table name.
        /// Example: <code>table/my-table</code>.</p>
        /// </li>
        /// <li>
        /// <p>DynamoDB global secondary index - The resource type is <code>index</code> and the unique identifier is the index name.
        /// Example: <code>table/my-table/index/my-table-index</code>.</p>
        /// </li>
        /// <li>
        /// <p>Aurora DB cluster - The resource type is <code>cluster</code> and the unique identifier is the cluster name.
        /// Example: <code>cluster:my-db-cluster</code>.</p>
        /// </li>
        /// <li>
        /// <p>SageMaker endpoint variant - The resource type is <code>variant</code> and the unique identifier is the resource ID.
        /// Example: <code>endpoint/my-end-point/variant/KMeansClustering</code>.</p>
        /// </li>
        /// <li>
        /// <p>Custom resources are not supported with a resource type. This parameter must specify the <code>OutputValue</code> from the CloudFormation template stack used to access the resources. The unique identifier is defined by the service provider. More information
        /// is available in our <a href="https://github.com/aws/aws-auto-scaling-custom-resource">GitHub
        /// repository</a>.</p>
        /// </li>
        /// <li>
        /// <p>Amazon Comprehend document classification endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: <code>arn:aws:comprehend:us-west-2:123456789012:document-classifier-endpoint/EXAMPLE</code>.</p>
        /// </li>
        /// <li>
        /// <p>Amazon Comprehend entity recognizer endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: <code>arn:aws:comprehend:us-west-2:123456789012:entity-recognizer-endpoint/EXAMPLE</code>.</p>
        /// </li>
        /// <li>
        /// <p>Lambda provisioned concurrency - The resource type is <code>function</code> and the unique identifier is the function name with a function version or alias name suffix that is not <code>$LATEST</code>.
        /// Example: <code>function:my-function:prod</code> or <code>function:my-function:1</code>.</p>
        /// </li>
        /// <li>
        /// <p>Amazon Keyspaces table - The resource type is <code>table</code> and the unique identifier is the table name.
        /// Example: <code>keyspace/mykeyspace/table/mytable</code>.</p>
        /// </li>
        /// <li>
        /// <p>Amazon MSK cluster - The resource type and unique identifier are specified using the cluster ARN.
        /// Example: <code>arn:aws:kafka:us-east-1:123456789012:cluster/demo-cluster-1/6357e0b2-0e6a-4b86-a0b4-70df934c2e31-5</code>.</p>
        /// </li>
        /// <li>
        /// <p>Amazon ElastiCache replication group - The resource type is <code>replication-group</code> and the unique identifier is the replication group name.
        /// Example: <code>replication-group/mycluster</code>.</p>
        /// </li>
        /// <li>
        /// <p>Neptune cluster - The resource type is <code>cluster</code> and the unique identifier is the cluster name. Example: <code>cluster:mycluster</code>.</p>
        /// </li>
        /// </ul>
        pub fn resource_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_id(inp);
            self
        }
        /// <p>The identifier of the resource associated with the scalable target.
        /// This string consists of the resource type and unique identifier.</p>
        /// <ul>
        /// <li>
        /// <p>ECS service - The resource type is <code>service</code> and the unique identifier is the cluster name  
        /// and service name. Example: <code>service/default/sample-webapp</code>.</p>
        /// </li>
        /// <li>
        /// <p>Spot Fleet - The resource type is <code>spot-fleet-request</code> and the unique identifier is the
        /// Spot Fleet request ID. Example: <code>spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE</code>.</p>
        /// </li>
        /// <li>
        /// <p>EMR cluster - The resource type is <code>instancegroup</code> and the unique identifier is the cluster ID and instance group ID.
        /// Example: <code>instancegroup/j-2EEZNYKUA1NTV/ig-1791Y4E1L8YI0</code>.</p>
        /// </li>
        /// <li>
        /// <p>AppStream 2.0 fleet - The resource type is <code>fleet</code> and the unique identifier is the fleet name.
        /// Example: <code>fleet/sample-fleet</code>.</p>
        /// </li>
        /// <li>
        /// <p>DynamoDB table - The resource type is <code>table</code> and the unique identifier is the table name.
        /// Example: <code>table/my-table</code>.</p>
        /// </li>
        /// <li>
        /// <p>DynamoDB global secondary index - The resource type is <code>index</code> and the unique identifier is the index name.
        /// Example: <code>table/my-table/index/my-table-index</code>.</p>
        /// </li>
        /// <li>
        /// <p>Aurora DB cluster - The resource type is <code>cluster</code> and the unique identifier is the cluster name.
        /// Example: <code>cluster:my-db-cluster</code>.</p>
        /// </li>
        /// <li>
        /// <p>SageMaker endpoint variant - The resource type is <code>variant</code> and the unique identifier is the resource ID.
        /// Example: <code>endpoint/my-end-point/variant/KMeansClustering</code>.</p>
        /// </li>
        /// <li>
        /// <p>Custom resources are not supported with a resource type. This parameter must specify the <code>OutputValue</code> from the CloudFormation template stack used to access the resources. The unique identifier is defined by the service provider. More information
        /// is available in our <a href="https://github.com/aws/aws-auto-scaling-custom-resource">GitHub
        /// repository</a>.</p>
        /// </li>
        /// <li>
        /// <p>Amazon Comprehend document classification endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: <code>arn:aws:comprehend:us-west-2:123456789012:document-classifier-endpoint/EXAMPLE</code>.</p>
        /// </li>
        /// <li>
        /// <p>Amazon Comprehend entity recognizer endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: <code>arn:aws:comprehend:us-west-2:123456789012:entity-recognizer-endpoint/EXAMPLE</code>.</p>
        /// </li>
        /// <li>
        /// <p>Lambda provisioned concurrency - The resource type is <code>function</code> and the unique identifier is the function name with a function version or alias name suffix that is not <code>$LATEST</code>.
        /// Example: <code>function:my-function:prod</code> or <code>function:my-function:1</code>.</p>
        /// </li>
        /// <li>
        /// <p>Amazon Keyspaces table - The resource type is <code>table</code> and the unique identifier is the table name.
        /// Example: <code>keyspace/mykeyspace/table/mytable</code>.</p>
        /// </li>
        /// <li>
        /// <p>Amazon MSK cluster - The resource type and unique identifier are specified using the cluster ARN.
        /// Example: <code>arn:aws:kafka:us-east-1:123456789012:cluster/demo-cluster-1/6357e0b2-0e6a-4b86-a0b4-70df934c2e31-5</code>.</p>
        /// </li>
        /// <li>
        /// <p>Amazon ElastiCache replication group - The resource type is <code>replication-group</code> and the unique identifier is the replication group name.
        /// Example: <code>replication-group/mycluster</code>.</p>
        /// </li>
        /// <li>
        /// <p>Neptune cluster - The resource type is <code>cluster</code> and the unique identifier is the cluster name. Example: <code>cluster:mycluster</code>.</p>
        /// </li>
        /// </ul>
        pub fn set_resource_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_resource_id(input);
            self
        }
        /// <p>The scalable dimension associated with the scalable target.
        /// This string consists of the service namespace, resource type, and scaling property.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>ecs:service:DesiredCount</code> - The desired task count of an ECS service.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>elasticmapreduce:instancegroup:InstanceCount</code> - The instance count of an EMR Instance Group.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>ec2:spot-fleet-request:TargetCapacity</code> - The target capacity of a Spot Fleet.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>appstream:fleet:DesiredCapacity</code> - The desired capacity of an AppStream 2.0 fleet.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>dynamodb:table:ReadCapacityUnits</code> - The provisioned read capacity for a DynamoDB table.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>dynamodb:table:WriteCapacityUnits</code> - The provisioned write capacity for a DynamoDB table.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>dynamodb:index:ReadCapacityUnits</code> - The provisioned read capacity for a DynamoDB global secondary index.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>dynamodb:index:WriteCapacityUnits</code> - The provisioned write capacity for a DynamoDB global secondary index.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>rds:cluster:ReadReplicaCount</code> - The count of Aurora Replicas in an Aurora DB cluster. Available for Aurora MySQL-compatible edition and Aurora PostgreSQL-compatible edition.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>sagemaker:variant:DesiredInstanceCount</code> - The number of EC2 instances for an SageMaker model endpoint variant.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>custom-resource:ResourceType:Property</code> - The scalable dimension for a custom resource provided by your own application or service.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>comprehend:document-classifier-endpoint:DesiredInferenceUnits</code> - The number of inference units for an Amazon Comprehend document classification endpoint.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>comprehend:entity-recognizer-endpoint:DesiredInferenceUnits</code> - The number of inference units for an Amazon Comprehend entity recognizer endpoint.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>lambda:function:ProvisionedConcurrency</code> - The provisioned concurrency for a Lambda function.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>cassandra:table:ReadCapacityUnits</code> - The provisioned read capacity for an Amazon Keyspaces table.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>cassandra:table:WriteCapacityUnits</code> - The provisioned write capacity for an Amazon Keyspaces table.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>kafka:broker-storage:VolumeSize</code> - The provisioned volume size (in GiB) for brokers in an Amazon MSK cluster.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>elasticache:replication-group:NodeGroups</code> - The number of node groups for an Amazon ElastiCache replication group.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>elasticache:replication-group:Replicas</code> - The number of replicas per node group for an Amazon ElastiCache replication group.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>neptune:cluster:ReadReplicaCount</code> - The count of read replicas in an Amazon Neptune DB cluster.</p>
        /// </li>
        /// </ul>
        pub fn scalable_dimension(mut self, inp: crate::model::ScalableDimension) -> Self {
            self.inner = self.inner.scalable_dimension(inp);
            self
        }
        /// <p>The scalable dimension associated with the scalable target.
        /// This string consists of the service namespace, resource type, and scaling property.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>ecs:service:DesiredCount</code> - The desired task count of an ECS service.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>elasticmapreduce:instancegroup:InstanceCount</code> - The instance count of an EMR Instance Group.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>ec2:spot-fleet-request:TargetCapacity</code> - The target capacity of a Spot Fleet.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>appstream:fleet:DesiredCapacity</code> - The desired capacity of an AppStream 2.0 fleet.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>dynamodb:table:ReadCapacityUnits</code> - The provisioned read capacity for a DynamoDB table.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>dynamodb:table:WriteCapacityUnits</code> - The provisioned write capacity for a DynamoDB table.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>dynamodb:index:ReadCapacityUnits</code> - The provisioned read capacity for a DynamoDB global secondary index.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>dynamodb:index:WriteCapacityUnits</code> - The provisioned write capacity for a DynamoDB global secondary index.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>rds:cluster:ReadReplicaCount</code> - The count of Aurora Replicas in an Aurora DB cluster. Available for Aurora MySQL-compatible edition and Aurora PostgreSQL-compatible edition.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>sagemaker:variant:DesiredInstanceCount</code> - The number of EC2 instances for an SageMaker model endpoint variant.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>custom-resource:ResourceType:Property</code> - The scalable dimension for a custom resource provided by your own application or service.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>comprehend:document-classifier-endpoint:DesiredInferenceUnits</code> - The number of inference units for an Amazon Comprehend document classification endpoint.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>comprehend:entity-recognizer-endpoint:DesiredInferenceUnits</code> - The number of inference units for an Amazon Comprehend entity recognizer endpoint.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>lambda:function:ProvisionedConcurrency</code> - The provisioned concurrency for a Lambda function.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>cassandra:table:ReadCapacityUnits</code> - The provisioned read capacity for an Amazon Keyspaces table.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>cassandra:table:WriteCapacityUnits</code> - The provisioned write capacity for an Amazon Keyspaces table.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>kafka:broker-storage:VolumeSize</code> - The provisioned volume size (in GiB) for brokers in an Amazon MSK cluster.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>elasticache:replication-group:NodeGroups</code> - The number of node groups for an Amazon ElastiCache replication group.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>elasticache:replication-group:Replicas</code> - The number of replicas per node group for an Amazon ElastiCache replication group.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>neptune:cluster:ReadReplicaCount</code> - The count of read replicas in an Amazon Neptune DB cluster.</p>
        /// </li>
        /// </ul>
        pub fn set_scalable_dimension(
            mut self,
            input: std::option::Option<crate::model::ScalableDimension>,
        ) -> Self {
            self.inner = self.inner.set_scalable_dimension(input);
            self
        }
    }
    /// Fluent builder constructing a request to `DescribeScalableTargets`.
    ///
    /// <p>Gets information about the scalable targets in the specified namespace.</p>
    /// <p>You can filter the results using <code>ResourceIds</code> and
    /// <code>ScalableDimension</code>.</p>
    #[derive(std::fmt::Debug)]
    pub struct DescribeScalableTargets<
        C = aws_smithy_client::erase::DynConnector,
        M = crate::middleware::DefaultMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_scalable_targets_input::Builder,
    }
    impl<C, M, R> DescribeScalableTargets<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `DescribeScalableTargets`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeScalableTargetsOutput,
            aws_smithy_http::result::SdkError<crate::error::DescribeScalableTargetsError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeScalableTargetsInputOperationOutputAlias,
                crate::output::DescribeScalableTargetsOutput,
                crate::error::DescribeScalableTargetsError,
                crate::input::DescribeScalableTargetsInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The namespace of the Amazon Web Services service that provides the resource. For a resource provided
        /// by your own application or service, use <code>custom-resource</code> instead.</p>
        pub fn service_namespace(mut self, inp: crate::model::ServiceNamespace) -> Self {
            self.inner = self.inner.service_namespace(inp);
            self
        }
        /// <p>The namespace of the Amazon Web Services service that provides the resource. For a resource provided
        /// by your own application or service, use <code>custom-resource</code> instead.</p>
        pub fn set_service_namespace(
            mut self,
            input: std::option::Option<crate::model::ServiceNamespace>,
        ) -> Self {
            self.inner = self.inner.set_service_namespace(input);
            self
        }
        /// Appends an item to `ResourceIds`.
        ///
        /// To override the contents of this collection use [`set_resource_ids`](Self::set_resource_ids).
        ///
        /// <p>The identifier of the resource associated with the scalable target.
        /// This string consists of the resource type and unique identifier.</p>
        /// <ul>
        /// <li>
        /// <p>ECS service - The resource type is <code>service</code> and the unique identifier is the cluster name  
        /// and service name. Example: <code>service/default/sample-webapp</code>.</p>
        /// </li>
        /// <li>
        /// <p>Spot Fleet - The resource type is <code>spot-fleet-request</code> and the unique identifier is the
        /// Spot Fleet request ID. Example: <code>spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE</code>.</p>
        /// </li>
        /// <li>
        /// <p>EMR cluster - The resource type is <code>instancegroup</code> and the unique identifier is the cluster ID and instance group ID.
        /// Example: <code>instancegroup/j-2EEZNYKUA1NTV/ig-1791Y4E1L8YI0</code>.</p>
        /// </li>
        /// <li>
        /// <p>AppStream 2.0 fleet - The resource type is <code>fleet</code> and the unique identifier is the fleet name.
        /// Example: <code>fleet/sample-fleet</code>.</p>
        /// </li>
        /// <li>
        /// <p>DynamoDB table - The resource type is <code>table</code> and the unique identifier is the table name.
        /// Example: <code>table/my-table</code>.</p>
        /// </li>
        /// <li>
        /// <p>DynamoDB global secondary index - The resource type is <code>index</code> and the unique identifier is the index name.
        /// Example: <code>table/my-table/index/my-table-index</code>.</p>
        /// </li>
        /// <li>
        /// <p>Aurora DB cluster - The resource type is <code>cluster</code> and the unique identifier is the cluster name.
        /// Example: <code>cluster:my-db-cluster</code>.</p>
        /// </li>
        /// <li>
        /// <p>SageMaker endpoint variant - The resource type is <code>variant</code> and the unique identifier is the resource ID.
        /// Example: <code>endpoint/my-end-point/variant/KMeansClustering</code>.</p>
        /// </li>
        /// <li>
        /// <p>Custom resources are not supported with a resource type. This parameter must specify the <code>OutputValue</code> from the CloudFormation template stack used to access the resources. The unique identifier is defined by the service provider. More information
        /// is available in our <a href="https://github.com/aws/aws-auto-scaling-custom-resource">GitHub
        /// repository</a>.</p>
        /// </li>
        /// <li>
        /// <p>Amazon Comprehend document classification endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: <code>arn:aws:comprehend:us-west-2:123456789012:document-classifier-endpoint/EXAMPLE</code>.</p>
        /// </li>
        /// <li>
        /// <p>Amazon Comprehend entity recognizer endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: <code>arn:aws:comprehend:us-west-2:123456789012:entity-recognizer-endpoint/EXAMPLE</code>.</p>
        /// </li>
        /// <li>
        /// <p>Lambda provisioned concurrency - The resource type is <code>function</code> and the unique identifier is the function name with a function version or alias name suffix that is not <code>$LATEST</code>.
        /// Example: <code>function:my-function:prod</code> or <code>function:my-function:1</code>.</p>
        /// </li>
        /// <li>
        /// <p>Amazon Keyspaces table - The resource type is <code>table</code> and the unique identifier is the table name.
        /// Example: <code>keyspace/mykeyspace/table/mytable</code>.</p>
        /// </li>
        /// <li>
        /// <p>Amazon MSK cluster - The resource type and unique identifier are specified using the cluster ARN.
        /// Example: <code>arn:aws:kafka:us-east-1:123456789012:cluster/demo-cluster-1/6357e0b2-0e6a-4b86-a0b4-70df934c2e31-5</code>.</p>
        /// </li>
        /// <li>
        /// <p>Amazon ElastiCache replication group - The resource type is <code>replication-group</code> and the unique identifier is the replication group name.
        /// Example: <code>replication-group/mycluster</code>.</p>
        /// </li>
        /// <li>
        /// <p>Neptune cluster - The resource type is <code>cluster</code> and the unique identifier is the cluster name. Example: <code>cluster:mycluster</code>.</p>
        /// </li>
        /// </ul>
        pub fn resource_ids(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_ids(inp);
            self
        }
        /// <p>The identifier of the resource associated with the scalable target.
        /// This string consists of the resource type and unique identifier.</p>
        /// <ul>
        /// <li>
        /// <p>ECS service - The resource type is <code>service</code> and the unique identifier is the cluster name  
        /// and service name. Example: <code>service/default/sample-webapp</code>.</p>
        /// </li>
        /// <li>
        /// <p>Spot Fleet - The resource type is <code>spot-fleet-request</code> and the unique identifier is the
        /// Spot Fleet request ID. Example: <code>spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE</code>.</p>
        /// </li>
        /// <li>
        /// <p>EMR cluster - The resource type is <code>instancegroup</code> and the unique identifier is the cluster ID and instance group ID.
        /// Example: <code>instancegroup/j-2EEZNYKUA1NTV/ig-1791Y4E1L8YI0</code>.</p>
        /// </li>
        /// <li>
        /// <p>AppStream 2.0 fleet - The resource type is <code>fleet</code> and the unique identifier is the fleet name.
        /// Example: <code>fleet/sample-fleet</code>.</p>
        /// </li>
        /// <li>
        /// <p>DynamoDB table - The resource type is <code>table</code> and the unique identifier is the table name.
        /// Example: <code>table/my-table</code>.</p>
        /// </li>
        /// <li>
        /// <p>DynamoDB global secondary index - The resource type is <code>index</code> and the unique identifier is the index name.
        /// Example: <code>table/my-table/index/my-table-index</code>.</p>
        /// </li>
        /// <li>
        /// <p>Aurora DB cluster - The resource type is <code>cluster</code> and the unique identifier is the cluster name.
        /// Example: <code>cluster:my-db-cluster</code>.</p>
        /// </li>
        /// <li>
        /// <p>SageMaker endpoint variant - The resource type is <code>variant</code> and the unique identifier is the resource ID.
        /// Example: <code>endpoint/my-end-point/variant/KMeansClustering</code>.</p>
        /// </li>
        /// <li>
        /// <p>Custom resources are not supported with a resource type. This parameter must specify the <code>OutputValue</code> from the CloudFormation template stack used to access the resources. The unique identifier is defined by the service provider. More information
        /// is available in our <a href="https://github.com/aws/aws-auto-scaling-custom-resource">GitHub
        /// repository</a>.</p>
        /// </li>
        /// <li>
        /// <p>Amazon Comprehend document classification endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: <code>arn:aws:comprehend:us-west-2:123456789012:document-classifier-endpoint/EXAMPLE</code>.</p>
        /// </li>
        /// <li>
        /// <p>Amazon Comprehend entity recognizer endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: <code>arn:aws:comprehend:us-west-2:123456789012:entity-recognizer-endpoint/EXAMPLE</code>.</p>
        /// </li>
        /// <li>
        /// <p>Lambda provisioned concurrency - The resource type is <code>function</code> and the unique identifier is the function name with a function version or alias name suffix that is not <code>$LATEST</code>.
        /// Example: <code>function:my-function:prod</code> or <code>function:my-function:1</code>.</p>
        /// </li>
        /// <li>
        /// <p>Amazon Keyspaces table - The resource type is <code>table</code> and the unique identifier is the table name.
        /// Example: <code>keyspace/mykeyspace/table/mytable</code>.</p>
        /// </li>
        /// <li>
        /// <p>Amazon MSK cluster - The resource type and unique identifier are specified using the cluster ARN.
        /// Example: <code>arn:aws:kafka:us-east-1:123456789012:cluster/demo-cluster-1/6357e0b2-0e6a-4b86-a0b4-70df934c2e31-5</code>.</p>
        /// </li>
        /// <li>
        /// <p>Amazon ElastiCache replication group - The resource type is <code>replication-group</code> and the unique identifier is the replication group name.
        /// Example: <code>replication-group/mycluster</code>.</p>
        /// </li>
        /// <li>
        /// <p>Neptune cluster - The resource type is <code>cluster</code> and the unique identifier is the cluster name. Example: <code>cluster:mycluster</code>.</p>
        /// </li>
        /// </ul>
        pub fn set_resource_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_resource_ids(input);
            self
        }
        /// <p>The scalable dimension associated with the scalable target.
        /// This string consists of the service namespace, resource type, and scaling property. If you specify a scalable dimension, you must also specify a resource ID.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>ecs:service:DesiredCount</code> - The desired task count of an ECS service.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>elasticmapreduce:instancegroup:InstanceCount</code> - The instance count of an EMR Instance Group.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>ec2:spot-fleet-request:TargetCapacity</code> - The target capacity of a Spot Fleet.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>appstream:fleet:DesiredCapacity</code> - The desired capacity of an AppStream 2.0 fleet.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>dynamodb:table:ReadCapacityUnits</code> - The provisioned read capacity for a DynamoDB table.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>dynamodb:table:WriteCapacityUnits</code> - The provisioned write capacity for a DynamoDB table.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>dynamodb:index:ReadCapacityUnits</code> - The provisioned read capacity for a DynamoDB global secondary index.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>dynamodb:index:WriteCapacityUnits</code> - The provisioned write capacity for a DynamoDB global secondary index.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>rds:cluster:ReadReplicaCount</code> - The count of Aurora Replicas in an Aurora DB cluster. Available for Aurora MySQL-compatible edition and Aurora PostgreSQL-compatible edition.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>sagemaker:variant:DesiredInstanceCount</code> - The number of EC2 instances for an SageMaker model endpoint variant.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>custom-resource:ResourceType:Property</code> - The scalable dimension for a custom resource provided by your own application or service.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>comprehend:document-classifier-endpoint:DesiredInferenceUnits</code> - The number of inference units for an Amazon Comprehend document classification endpoint.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>comprehend:entity-recognizer-endpoint:DesiredInferenceUnits</code> - The number of inference units for an Amazon Comprehend entity recognizer endpoint.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>lambda:function:ProvisionedConcurrency</code> - The provisioned concurrency for a Lambda function.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>cassandra:table:ReadCapacityUnits</code> - The provisioned read capacity for an Amazon Keyspaces table.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>cassandra:table:WriteCapacityUnits</code> - The provisioned write capacity for an Amazon Keyspaces table.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>kafka:broker-storage:VolumeSize</code> - The provisioned volume size (in GiB) for brokers in an Amazon MSK cluster.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>elasticache:replication-group:NodeGroups</code> - The number of node groups for an Amazon ElastiCache replication group.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>elasticache:replication-group:Replicas</code> - The number of replicas per node group for an Amazon ElastiCache replication group.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>neptune:cluster:ReadReplicaCount</code> - The count of read replicas in an Amazon Neptune DB cluster.</p>
        /// </li>
        /// </ul>
        pub fn scalable_dimension(mut self, inp: crate::model::ScalableDimension) -> Self {
            self.inner = self.inner.scalable_dimension(inp);
            self
        }
        /// <p>The scalable dimension associated with the scalable target.
        /// This string consists of the service namespace, resource type, and scaling property. If you specify a scalable dimension, you must also specify a resource ID.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>ecs:service:DesiredCount</code> - The desired task count of an ECS service.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>elasticmapreduce:instancegroup:InstanceCount</code> - The instance count of an EMR Instance Group.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>ec2:spot-fleet-request:TargetCapacity</code> - The target capacity of a Spot Fleet.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>appstream:fleet:DesiredCapacity</code> - The desired capacity of an AppStream 2.0 fleet.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>dynamodb:table:ReadCapacityUnits</code> - The provisioned read capacity for a DynamoDB table.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>dynamodb:table:WriteCapacityUnits</code> - The provisioned write capacity for a DynamoDB table.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>dynamodb:index:ReadCapacityUnits</code> - The provisioned read capacity for a DynamoDB global secondary index.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>dynamodb:index:WriteCapacityUnits</code> - The provisioned write capacity for a DynamoDB global secondary index.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>rds:cluster:ReadReplicaCount</code> - The count of Aurora Replicas in an Aurora DB cluster. Available for Aurora MySQL-compatible edition and Aurora PostgreSQL-compatible edition.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>sagemaker:variant:DesiredInstanceCount</code> - The number of EC2 instances for an SageMaker model endpoint variant.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>custom-resource:ResourceType:Property</code> - The scalable dimension for a custom resource provided by your own application or service.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>comprehend:document-classifier-endpoint:DesiredInferenceUnits</code> - The number of inference units for an Amazon Comprehend document classification endpoint.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>comprehend:entity-recognizer-endpoint:DesiredInferenceUnits</code> - The number of inference units for an Amazon Comprehend entity recognizer endpoint.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>lambda:function:ProvisionedConcurrency</code> - The provisioned concurrency for a Lambda function.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>cassandra:table:ReadCapacityUnits</code> - The provisioned read capacity for an Amazon Keyspaces table.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>cassandra:table:WriteCapacityUnits</code> - The provisioned write capacity for an Amazon Keyspaces table.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>kafka:broker-storage:VolumeSize</code> - The provisioned volume size (in GiB) for brokers in an Amazon MSK cluster.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>elasticache:replication-group:NodeGroups</code> - The number of node groups for an Amazon ElastiCache replication group.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>elasticache:replication-group:Replicas</code> - The number of replicas per node group for an Amazon ElastiCache replication group.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>neptune:cluster:ReadReplicaCount</code> - The count of read replicas in an Amazon Neptune DB cluster.</p>
        /// </li>
        /// </ul>
        pub fn set_scalable_dimension(
            mut self,
            input: std::option::Option<crate::model::ScalableDimension>,
        ) -> Self {
            self.inner = self.inner.set_scalable_dimension(input);
            self
        }
        /// <p>The maximum number of scalable targets. This value can be between 1 and
        /// 50. The default value is 50.</p>
        /// <p>If this parameter is used, the operation returns up to <code>MaxResults</code> results
        /// at a time, along with a <code>NextToken</code> value. To get the next set of results,
        /// include the <code>NextToken</code> value in a subsequent call. If this parameter is not
        /// used, the operation returns up to 50 results and a
        /// <code>NextToken</code> value, if applicable.</p>
        pub fn max_results(mut self, inp: i32) -> Self {
            self.inner = self.inner.max_results(inp);
            self
        }
        /// <p>The maximum number of scalable targets. This value can be between 1 and
        /// 50. The default value is 50.</p>
        /// <p>If this parameter is used, the operation returns up to <code>MaxResults</code> results
        /// at a time, along with a <code>NextToken</code> value. To get the next set of results,
        /// include the <code>NextToken</code> value in a subsequent call. If this parameter is not
        /// used, the operation returns up to 50 results and a
        /// <code>NextToken</code> value, if applicable.</p>
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
        /// <p>The token for the next set of results.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(inp);
            self
        }
        /// <p>The token for the next set of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
    }
    /// Fluent builder constructing a request to `DescribeScalingActivities`.
    ///
    /// <p>Provides descriptive information about the scaling activities in the specified namespace
    /// from the previous six weeks.</p>
    /// <p>You can filter the results using <code>ResourceId</code> and
    /// <code>ScalableDimension</code>.</p>
    #[derive(std::fmt::Debug)]
    pub struct DescribeScalingActivities<
        C = aws_smithy_client::erase::DynConnector,
        M = crate::middleware::DefaultMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_scaling_activities_input::Builder,
    }
    impl<C, M, R> DescribeScalingActivities<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `DescribeScalingActivities`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeScalingActivitiesOutput,
            aws_smithy_http::result::SdkError<crate::error::DescribeScalingActivitiesError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeScalingActivitiesInputOperationOutputAlias,
                crate::output::DescribeScalingActivitiesOutput,
                crate::error::DescribeScalingActivitiesError,
                crate::input::DescribeScalingActivitiesInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The namespace of the Amazon Web Services service that provides the resource. For a resource provided
        /// by your own application or service, use <code>custom-resource</code> instead.</p>
        pub fn service_namespace(mut self, inp: crate::model::ServiceNamespace) -> Self {
            self.inner = self.inner.service_namespace(inp);
            self
        }
        /// <p>The namespace of the Amazon Web Services service that provides the resource. For a resource provided
        /// by your own application or service, use <code>custom-resource</code> instead.</p>
        pub fn set_service_namespace(
            mut self,
            input: std::option::Option<crate::model::ServiceNamespace>,
        ) -> Self {
            self.inner = self.inner.set_service_namespace(input);
            self
        }
        /// <p>The identifier of the resource associated with the scaling activity.
        /// This string consists of the resource type and unique identifier.</p>
        /// <ul>
        /// <li>
        /// <p>ECS service - The resource type is <code>service</code> and the unique identifier is the cluster name  
        /// and service name. Example: <code>service/default/sample-webapp</code>.</p>
        /// </li>
        /// <li>
        /// <p>Spot Fleet - The resource type is <code>spot-fleet-request</code> and the unique identifier is the
        /// Spot Fleet request ID. Example: <code>spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE</code>.</p>
        /// </li>
        /// <li>
        /// <p>EMR cluster - The resource type is <code>instancegroup</code> and the unique identifier is the cluster ID and instance group ID.
        /// Example: <code>instancegroup/j-2EEZNYKUA1NTV/ig-1791Y4E1L8YI0</code>.</p>
        /// </li>
        /// <li>
        /// <p>AppStream 2.0 fleet - The resource type is <code>fleet</code> and the unique identifier is the fleet name.
        /// Example: <code>fleet/sample-fleet</code>.</p>
        /// </li>
        /// <li>
        /// <p>DynamoDB table - The resource type is <code>table</code> and the unique identifier is the table name.
        /// Example: <code>table/my-table</code>.</p>
        /// </li>
        /// <li>
        /// <p>DynamoDB global secondary index - The resource type is <code>index</code> and the unique identifier is the index name.
        /// Example: <code>table/my-table/index/my-table-index</code>.</p>
        /// </li>
        /// <li>
        /// <p>Aurora DB cluster - The resource type is <code>cluster</code> and the unique identifier is the cluster name.
        /// Example: <code>cluster:my-db-cluster</code>.</p>
        /// </li>
        /// <li>
        /// <p>SageMaker endpoint variant - The resource type is <code>variant</code> and the unique identifier is the resource ID.
        /// Example: <code>endpoint/my-end-point/variant/KMeansClustering</code>.</p>
        /// </li>
        /// <li>
        /// <p>Custom resources are not supported with a resource type. This parameter must specify the <code>OutputValue</code> from the CloudFormation template stack used to access the resources. The unique identifier is defined by the service provider. More information
        /// is available in our <a href="https://github.com/aws/aws-auto-scaling-custom-resource">GitHub
        /// repository</a>.</p>
        /// </li>
        /// <li>
        /// <p>Amazon Comprehend document classification endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: <code>arn:aws:comprehend:us-west-2:123456789012:document-classifier-endpoint/EXAMPLE</code>.</p>
        /// </li>
        /// <li>
        /// <p>Amazon Comprehend entity recognizer endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: <code>arn:aws:comprehend:us-west-2:123456789012:entity-recognizer-endpoint/EXAMPLE</code>.</p>
        /// </li>
        /// <li>
        /// <p>Lambda provisioned concurrency - The resource type is <code>function</code> and the unique identifier is the function name with a function version or alias name suffix that is not <code>$LATEST</code>.
        /// Example: <code>function:my-function:prod</code> or <code>function:my-function:1</code>.</p>
        /// </li>
        /// <li>
        /// <p>Amazon Keyspaces table - The resource type is <code>table</code> and the unique identifier is the table name.
        /// Example: <code>keyspace/mykeyspace/table/mytable</code>.</p>
        /// </li>
        /// <li>
        /// <p>Amazon MSK cluster - The resource type and unique identifier are specified using the cluster ARN.
        /// Example: <code>arn:aws:kafka:us-east-1:123456789012:cluster/demo-cluster-1/6357e0b2-0e6a-4b86-a0b4-70df934c2e31-5</code>.</p>
        /// </li>
        /// <li>
        /// <p>Amazon ElastiCache replication group - The resource type is <code>replication-group</code> and the unique identifier is the replication group name.
        /// Example: <code>replication-group/mycluster</code>.</p>
        /// </li>
        /// <li>
        /// <p>Neptune cluster - The resource type is <code>cluster</code> and the unique identifier is the cluster name. Example: <code>cluster:mycluster</code>.</p>
        /// </li>
        /// </ul>
        pub fn resource_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_id(inp);
            self
        }
        /// <p>The identifier of the resource associated with the scaling activity.
        /// This string consists of the resource type and unique identifier.</p>
        /// <ul>
        /// <li>
        /// <p>ECS service - The resource type is <code>service</code> and the unique identifier is the cluster name  
        /// and service name. Example: <code>service/default/sample-webapp</code>.</p>
        /// </li>
        /// <li>
        /// <p>Spot Fleet - The resource type is <code>spot-fleet-request</code> and the unique identifier is the
        /// Spot Fleet request ID. Example: <code>spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE</code>.</p>
        /// </li>
        /// <li>
        /// <p>EMR cluster - The resource type is <code>instancegroup</code> and the unique identifier is the cluster ID and instance group ID.
        /// Example: <code>instancegroup/j-2EEZNYKUA1NTV/ig-1791Y4E1L8YI0</code>.</p>
        /// </li>
        /// <li>
        /// <p>AppStream 2.0 fleet - The resource type is <code>fleet</code> and the unique identifier is the fleet name.
        /// Example: <code>fleet/sample-fleet</code>.</p>
        /// </li>
        /// <li>
        /// <p>DynamoDB table - The resource type is <code>table</code> and the unique identifier is the table name.
        /// Example: <code>table/my-table</code>.</p>
        /// </li>
        /// <li>
        /// <p>DynamoDB global secondary index - The resource type is <code>index</code> and the unique identifier is the index name.
        /// Example: <code>table/my-table/index/my-table-index</code>.</p>
        /// </li>
        /// <li>
        /// <p>Aurora DB cluster - The resource type is <code>cluster</code> and the unique identifier is the cluster name.
        /// Example: <code>cluster:my-db-cluster</code>.</p>
        /// </li>
        /// <li>
        /// <p>SageMaker endpoint variant - The resource type is <code>variant</code> and the unique identifier is the resource ID.
        /// Example: <code>endpoint/my-end-point/variant/KMeansClustering</code>.</p>
        /// </li>
        /// <li>
        /// <p>Custom resources are not supported with a resource type. This parameter must specify the <code>OutputValue</code> from the CloudFormation template stack used to access the resources. The unique identifier is defined by the service provider. More information
        /// is available in our <a href="https://github.com/aws/aws-auto-scaling-custom-resource">GitHub
        /// repository</a>.</p>
        /// </li>
        /// <li>
        /// <p>Amazon Comprehend document classification endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: <code>arn:aws:comprehend:us-west-2:123456789012:document-classifier-endpoint/EXAMPLE</code>.</p>
        /// </li>
        /// <li>
        /// <p>Amazon Comprehend entity recognizer endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: <code>arn:aws:comprehend:us-west-2:123456789012:entity-recognizer-endpoint/EXAMPLE</code>.</p>
        /// </li>
        /// <li>
        /// <p>Lambda provisioned concurrency - The resource type is <code>function</code> and the unique identifier is the function name with a function version or alias name suffix that is not <code>$LATEST</code>.
        /// Example: <code>function:my-function:prod</code> or <code>function:my-function:1</code>.</p>
        /// </li>
        /// <li>
        /// <p>Amazon Keyspaces table - The resource type is <code>table</code> and the unique identifier is the table name.
        /// Example: <code>keyspace/mykeyspace/table/mytable</code>.</p>
        /// </li>
        /// <li>
        /// <p>Amazon MSK cluster - The resource type and unique identifier are specified using the cluster ARN.
        /// Example: <code>arn:aws:kafka:us-east-1:123456789012:cluster/demo-cluster-1/6357e0b2-0e6a-4b86-a0b4-70df934c2e31-5</code>.</p>
        /// </li>
        /// <li>
        /// <p>Amazon ElastiCache replication group - The resource type is <code>replication-group</code> and the unique identifier is the replication group name.
        /// Example: <code>replication-group/mycluster</code>.</p>
        /// </li>
        /// <li>
        /// <p>Neptune cluster - The resource type is <code>cluster</code> and the unique identifier is the cluster name. Example: <code>cluster:mycluster</code>.</p>
        /// </li>
        /// </ul>
        pub fn set_resource_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_resource_id(input);
            self
        }
        /// <p>The scalable dimension. This string consists of the service namespace, resource type, and scaling property.
        /// If you specify a scalable dimension, you must also specify a resource ID.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>ecs:service:DesiredCount</code> - The desired task count of an ECS service.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>elasticmapreduce:instancegroup:InstanceCount</code> - The instance count of an EMR Instance Group.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>ec2:spot-fleet-request:TargetCapacity</code> - The target capacity of a Spot Fleet.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>appstream:fleet:DesiredCapacity</code> - The desired capacity of an AppStream 2.0 fleet.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>dynamodb:table:ReadCapacityUnits</code> - The provisioned read capacity for a DynamoDB table.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>dynamodb:table:WriteCapacityUnits</code> - The provisioned write capacity for a DynamoDB table.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>dynamodb:index:ReadCapacityUnits</code> - The provisioned read capacity for a DynamoDB global secondary index.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>dynamodb:index:WriteCapacityUnits</code> - The provisioned write capacity for a DynamoDB global secondary index.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>rds:cluster:ReadReplicaCount</code> - The count of Aurora Replicas in an Aurora DB cluster. Available for Aurora MySQL-compatible edition and Aurora PostgreSQL-compatible edition.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>sagemaker:variant:DesiredInstanceCount</code> - The number of EC2 instances for an SageMaker model endpoint variant.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>custom-resource:ResourceType:Property</code> - The scalable dimension for a custom resource provided by your own application or service.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>comprehend:document-classifier-endpoint:DesiredInferenceUnits</code> - The number of inference units for an Amazon Comprehend document classification endpoint.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>comprehend:entity-recognizer-endpoint:DesiredInferenceUnits</code> - The number of inference units for an Amazon Comprehend entity recognizer endpoint.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>lambda:function:ProvisionedConcurrency</code> - The provisioned concurrency for a Lambda function.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>cassandra:table:ReadCapacityUnits</code> - The provisioned read capacity for an Amazon Keyspaces table.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>cassandra:table:WriteCapacityUnits</code> - The provisioned write capacity for an Amazon Keyspaces table.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>kafka:broker-storage:VolumeSize</code> - The provisioned volume size (in GiB) for brokers in an Amazon MSK cluster.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>elasticache:replication-group:NodeGroups</code> - The number of node groups for an Amazon ElastiCache replication group.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>elasticache:replication-group:Replicas</code> - The number of replicas per node group for an Amazon ElastiCache replication group.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>neptune:cluster:ReadReplicaCount</code> - The count of read replicas in an Amazon Neptune DB cluster.</p>
        /// </li>
        /// </ul>
        pub fn scalable_dimension(mut self, inp: crate::model::ScalableDimension) -> Self {
            self.inner = self.inner.scalable_dimension(inp);
            self
        }
        /// <p>The scalable dimension. This string consists of the service namespace, resource type, and scaling property.
        /// If you specify a scalable dimension, you must also specify a resource ID.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>ecs:service:DesiredCount</code> - The desired task count of an ECS service.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>elasticmapreduce:instancegroup:InstanceCount</code> - The instance count of an EMR Instance Group.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>ec2:spot-fleet-request:TargetCapacity</code> - The target capacity of a Spot Fleet.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>appstream:fleet:DesiredCapacity</code> - The desired capacity of an AppStream 2.0 fleet.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>dynamodb:table:ReadCapacityUnits</code> - The provisioned read capacity for a DynamoDB table.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>dynamodb:table:WriteCapacityUnits</code> - The provisioned write capacity for a DynamoDB table.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>dynamodb:index:ReadCapacityUnits</code> - The provisioned read capacity for a DynamoDB global secondary index.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>dynamodb:index:WriteCapacityUnits</code> - The provisioned write capacity for a DynamoDB global secondary index.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>rds:cluster:ReadReplicaCount</code> - The count of Aurora Replicas in an Aurora DB cluster. Available for Aurora MySQL-compatible edition and Aurora PostgreSQL-compatible edition.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>sagemaker:variant:DesiredInstanceCount</code> - The number of EC2 instances for an SageMaker model endpoint variant.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>custom-resource:ResourceType:Property</code> - The scalable dimension for a custom resource provided by your own application or service.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>comprehend:document-classifier-endpoint:DesiredInferenceUnits</code> - The number of inference units for an Amazon Comprehend document classification endpoint.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>comprehend:entity-recognizer-endpoint:DesiredInferenceUnits</code> - The number of inference units for an Amazon Comprehend entity recognizer endpoint.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>lambda:function:ProvisionedConcurrency</code> - The provisioned concurrency for a Lambda function.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>cassandra:table:ReadCapacityUnits</code> - The provisioned read capacity for an Amazon Keyspaces table.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>cassandra:table:WriteCapacityUnits</code> - The provisioned write capacity for an Amazon Keyspaces table.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>kafka:broker-storage:VolumeSize</code> - The provisioned volume size (in GiB) for brokers in an Amazon MSK cluster.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>elasticache:replication-group:NodeGroups</code> - The number of node groups for an Amazon ElastiCache replication group.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>elasticache:replication-group:Replicas</code> - The number of replicas per node group for an Amazon ElastiCache replication group.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>neptune:cluster:ReadReplicaCount</code> - The count of read replicas in an Amazon Neptune DB cluster.</p>
        /// </li>
        /// </ul>
        pub fn set_scalable_dimension(
            mut self,
            input: std::option::Option<crate::model::ScalableDimension>,
        ) -> Self {
            self.inner = self.inner.set_scalable_dimension(input);
            self
        }
        /// <p>The maximum number of scalable targets. This value can be between 1 and
        /// 50. The default value is 50.</p>
        /// <p>If this parameter is used, the operation returns up to <code>MaxResults</code> results
        /// at a time, along with a <code>NextToken</code> value. To get the next set of results,
        /// include the <code>NextToken</code> value in a subsequent call. If this parameter is not
        /// used, the operation returns up to 50 results and a
        /// <code>NextToken</code> value, if applicable.</p>
        pub fn max_results(mut self, inp: i32) -> Self {
            self.inner = self.inner.max_results(inp);
            self
        }
        /// <p>The maximum number of scalable targets. This value can be between 1 and
        /// 50. The default value is 50.</p>
        /// <p>If this parameter is used, the operation returns up to <code>MaxResults</code> results
        /// at a time, along with a <code>NextToken</code> value. To get the next set of results,
        /// include the <code>NextToken</code> value in a subsequent call. If this parameter is not
        /// used, the operation returns up to 50 results and a
        /// <code>NextToken</code> value, if applicable.</p>
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
        /// <p>The token for the next set of results.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(inp);
            self
        }
        /// <p>The token for the next set of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
    }
    /// Fluent builder constructing a request to `DescribeScalingPolicies`.
    ///
    /// <p>Describes the Application Auto Scaling scaling policies for the specified service namespace.</p>
    /// <p>You can filter the results using <code>ResourceId</code>,
    /// <code>ScalableDimension</code>, and <code>PolicyNames</code>.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/application/userguide/application-auto-scaling-target-tracking.html">Target tracking scaling policies</a> and <a href="https://docs.aws.amazon.com/autoscaling/application/userguide/application-auto-scaling-step-scaling-policies.html">Step scaling policies</a> in the <i>Application Auto Scaling User Guide</i>.</p>
    #[derive(std::fmt::Debug)]
    pub struct DescribeScalingPolicies<
        C = aws_smithy_client::erase::DynConnector,
        M = crate::middleware::DefaultMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_scaling_policies_input::Builder,
    }
    impl<C, M, R> DescribeScalingPolicies<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `DescribeScalingPolicies`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeScalingPoliciesOutput,
            aws_smithy_http::result::SdkError<crate::error::DescribeScalingPoliciesError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeScalingPoliciesInputOperationOutputAlias,
                crate::output::DescribeScalingPoliciesOutput,
                crate::error::DescribeScalingPoliciesError,
                crate::input::DescribeScalingPoliciesInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// Appends an item to `PolicyNames`.
        ///
        /// To override the contents of this collection use [`set_policy_names`](Self::set_policy_names).
        ///
        /// <p>The names of the scaling policies to describe.</p>
        pub fn policy_names(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.policy_names(inp);
            self
        }
        /// <p>The names of the scaling policies to describe.</p>
        pub fn set_policy_names(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_policy_names(input);
            self
        }
        /// <p>The namespace of the Amazon Web Services service that provides the resource. For a resource provided
        /// by your own application or service, use <code>custom-resource</code> instead.</p>
        pub fn service_namespace(mut self, inp: crate::model::ServiceNamespace) -> Self {
            self.inner = self.inner.service_namespace(inp);
            self
        }
        /// <p>The namespace of the Amazon Web Services service that provides the resource. For a resource provided
        /// by your own application or service, use <code>custom-resource</code> instead.</p>
        pub fn set_service_namespace(
            mut self,
            input: std::option::Option<crate::model::ServiceNamespace>,
        ) -> Self {
            self.inner = self.inner.set_service_namespace(input);
            self
        }
        /// <p>The identifier of the resource associated with the scaling policy.
        /// This string consists of the resource type and unique identifier.</p>
        /// <ul>
        /// <li>
        /// <p>ECS service - The resource type is <code>service</code> and the unique identifier is the cluster name  
        /// and service name. Example: <code>service/default/sample-webapp</code>.</p>
        /// </li>
        /// <li>
        /// <p>Spot Fleet - The resource type is <code>spot-fleet-request</code> and the unique identifier is the
        /// Spot Fleet request ID. Example: <code>spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE</code>.</p>
        /// </li>
        /// <li>
        /// <p>EMR cluster - The resource type is <code>instancegroup</code> and the unique identifier is the cluster ID and instance group ID.
        /// Example: <code>instancegroup/j-2EEZNYKUA1NTV/ig-1791Y4E1L8YI0</code>.</p>
        /// </li>
        /// <li>
        /// <p>AppStream 2.0 fleet - The resource type is <code>fleet</code> and the unique identifier is the fleet name.
        /// Example: <code>fleet/sample-fleet</code>.</p>
        /// </li>
        /// <li>
        /// <p>DynamoDB table - The resource type is <code>table</code> and the unique identifier is the table name.
        /// Example: <code>table/my-table</code>.</p>
        /// </li>
        /// <li>
        /// <p>DynamoDB global secondary index - The resource type is <code>index</code> and the unique identifier is the index name.
        /// Example: <code>table/my-table/index/my-table-index</code>.</p>
        /// </li>
        /// <li>
        /// <p>Aurora DB cluster - The resource type is <code>cluster</code> and the unique identifier is the cluster name.
        /// Example: <code>cluster:my-db-cluster</code>.</p>
        /// </li>
        /// <li>
        /// <p>SageMaker endpoint variant - The resource type is <code>variant</code> and the unique identifier is the resource ID.
        /// Example: <code>endpoint/my-end-point/variant/KMeansClustering</code>.</p>
        /// </li>
        /// <li>
        /// <p>Custom resources are not supported with a resource type. This parameter must specify the <code>OutputValue</code> from the CloudFormation template stack used to access the resources. The unique identifier is defined by the service provider. More information
        /// is available in our <a href="https://github.com/aws/aws-auto-scaling-custom-resource">GitHub
        /// repository</a>.</p>
        /// </li>
        /// <li>
        /// <p>Amazon Comprehend document classification endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: <code>arn:aws:comprehend:us-west-2:123456789012:document-classifier-endpoint/EXAMPLE</code>.</p>
        /// </li>
        /// <li>
        /// <p>Amazon Comprehend entity recognizer endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: <code>arn:aws:comprehend:us-west-2:123456789012:entity-recognizer-endpoint/EXAMPLE</code>.</p>
        /// </li>
        /// <li>
        /// <p>Lambda provisioned concurrency - The resource type is <code>function</code> and the unique identifier is the function name with a function version or alias name suffix that is not <code>$LATEST</code>.
        /// Example: <code>function:my-function:prod</code> or <code>function:my-function:1</code>.</p>
        /// </li>
        /// <li>
        /// <p>Amazon Keyspaces table - The resource type is <code>table</code> and the unique identifier is the table name.
        /// Example: <code>keyspace/mykeyspace/table/mytable</code>.</p>
        /// </li>
        /// <li>
        /// <p>Amazon MSK cluster - The resource type and unique identifier are specified using the cluster ARN.
        /// Example: <code>arn:aws:kafka:us-east-1:123456789012:cluster/demo-cluster-1/6357e0b2-0e6a-4b86-a0b4-70df934c2e31-5</code>.</p>
        /// </li>
        /// <li>
        /// <p>Amazon ElastiCache replication group - The resource type is <code>replication-group</code> and the unique identifier is the replication group name.
        /// Example: <code>replication-group/mycluster</code>.</p>
        /// </li>
        /// <li>
        /// <p>Neptune cluster - The resource type is <code>cluster</code> and the unique identifier is the cluster name. Example: <code>cluster:mycluster</code>.</p>
        /// </li>
        /// </ul>
        pub fn resource_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_id(inp);
            self
        }
        /// <p>The identifier of the resource associated with the scaling policy.
        /// This string consists of the resource type and unique identifier.</p>
        /// <ul>
        /// <li>
        /// <p>ECS service - The resource type is <code>service</code> and the unique identifier is the cluster name  
        /// and service name. Example: <code>service/default/sample-webapp</code>.</p>
        /// </li>
        /// <li>
        /// <p>Spot Fleet - The resource type is <code>spot-fleet-request</code> and the unique identifier is the
        /// Spot Fleet request ID. Example: <code>spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE</code>.</p>
        /// </li>
        /// <li>
        /// <p>EMR cluster - The resource type is <code>instancegroup</code> and the unique identifier is the cluster ID and instance group ID.
        /// Example: <code>instancegroup/j-2EEZNYKUA1NTV/ig-1791Y4E1L8YI0</code>.</p>
        /// </li>
        /// <li>
        /// <p>AppStream 2.0 fleet - The resource type is <code>fleet</code> and the unique identifier is the fleet name.
        /// Example: <code>fleet/sample-fleet</code>.</p>
        /// </li>
        /// <li>
        /// <p>DynamoDB table - The resource type is <code>table</code> and the unique identifier is the table name.
        /// Example: <code>table/my-table</code>.</p>
        /// </li>
        /// <li>
        /// <p>DynamoDB global secondary index - The resource type is <code>index</code> and the unique identifier is the index name.
        /// Example: <code>table/my-table/index/my-table-index</code>.</p>
        /// </li>
        /// <li>
        /// <p>Aurora DB cluster - The resource type is <code>cluster</code> and the unique identifier is the cluster name.
        /// Example: <code>cluster:my-db-cluster</code>.</p>
        /// </li>
        /// <li>
        /// <p>SageMaker endpoint variant - The resource type is <code>variant</code> and the unique identifier is the resource ID.
        /// Example: <code>endpoint/my-end-point/variant/KMeansClustering</code>.</p>
        /// </li>
        /// <li>
        /// <p>Custom resources are not supported with a resource type. This parameter must specify the <code>OutputValue</code> from the CloudFormation template stack used to access the resources. The unique identifier is defined by the service provider. More information
        /// is available in our <a href="https://github.com/aws/aws-auto-scaling-custom-resource">GitHub
        /// repository</a>.</p>
        /// </li>
        /// <li>
        /// <p>Amazon Comprehend document classification endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: <code>arn:aws:comprehend:us-west-2:123456789012:document-classifier-endpoint/EXAMPLE</code>.</p>
        /// </li>
        /// <li>
        /// <p>Amazon Comprehend entity recognizer endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: <code>arn:aws:comprehend:us-west-2:123456789012:entity-recognizer-endpoint/EXAMPLE</code>.</p>
        /// </li>
        /// <li>
        /// <p>Lambda provisioned concurrency - The resource type is <code>function</code> and the unique identifier is the function name with a function version or alias name suffix that is not <code>$LATEST</code>.
        /// Example: <code>function:my-function:prod</code> or <code>function:my-function:1</code>.</p>
        /// </li>
        /// <li>
        /// <p>Amazon Keyspaces table - The resource type is <code>table</code> and the unique identifier is the table name.
        /// Example: <code>keyspace/mykeyspace/table/mytable</code>.</p>
        /// </li>
        /// <li>
        /// <p>Amazon MSK cluster - The resource type and unique identifier are specified using the cluster ARN.
        /// Example: <code>arn:aws:kafka:us-east-1:123456789012:cluster/demo-cluster-1/6357e0b2-0e6a-4b86-a0b4-70df934c2e31-5</code>.</p>
        /// </li>
        /// <li>
        /// <p>Amazon ElastiCache replication group - The resource type is <code>replication-group</code> and the unique identifier is the replication group name.
        /// Example: <code>replication-group/mycluster</code>.</p>
        /// </li>
        /// <li>
        /// <p>Neptune cluster - The resource type is <code>cluster</code> and the unique identifier is the cluster name. Example: <code>cluster:mycluster</code>.</p>
        /// </li>
        /// </ul>
        pub fn set_resource_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_resource_id(input);
            self
        }
        /// <p>The scalable dimension. This string consists of the service namespace, resource type, and scaling property.
        /// If you specify a scalable dimension, you must also specify a resource ID.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>ecs:service:DesiredCount</code> - The desired task count of an ECS service.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>elasticmapreduce:instancegroup:InstanceCount</code> - The instance count of an EMR Instance Group.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>ec2:spot-fleet-request:TargetCapacity</code> - The target capacity of a Spot Fleet.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>appstream:fleet:DesiredCapacity</code> - The desired capacity of an AppStream 2.0 fleet.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>dynamodb:table:ReadCapacityUnits</code> - The provisioned read capacity for a DynamoDB table.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>dynamodb:table:WriteCapacityUnits</code> - The provisioned write capacity for a DynamoDB table.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>dynamodb:index:ReadCapacityUnits</code> - The provisioned read capacity for a DynamoDB global secondary index.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>dynamodb:index:WriteCapacityUnits</code> - The provisioned write capacity for a DynamoDB global secondary index.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>rds:cluster:ReadReplicaCount</code> - The count of Aurora Replicas in an Aurora DB cluster. Available for Aurora MySQL-compatible edition and Aurora PostgreSQL-compatible edition.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>sagemaker:variant:DesiredInstanceCount</code> - The number of EC2 instances for an SageMaker model endpoint variant.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>custom-resource:ResourceType:Property</code> - The scalable dimension for a custom resource provided by your own application or service.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>comprehend:document-classifier-endpoint:DesiredInferenceUnits</code> - The number of inference units for an Amazon Comprehend document classification endpoint.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>comprehend:entity-recognizer-endpoint:DesiredInferenceUnits</code> - The number of inference units for an Amazon Comprehend entity recognizer endpoint.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>lambda:function:ProvisionedConcurrency</code> - The provisioned concurrency for a Lambda function.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>cassandra:table:ReadCapacityUnits</code> - The provisioned read capacity for an Amazon Keyspaces table.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>cassandra:table:WriteCapacityUnits</code> - The provisioned write capacity for an Amazon Keyspaces table.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>kafka:broker-storage:VolumeSize</code> - The provisioned volume size (in GiB) for brokers in an Amazon MSK cluster.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>elasticache:replication-group:NodeGroups</code> - The number of node groups for an Amazon ElastiCache replication group.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>elasticache:replication-group:Replicas</code> - The number of replicas per node group for an Amazon ElastiCache replication group.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>neptune:cluster:ReadReplicaCount</code> - The count of read replicas in an Amazon Neptune DB cluster.</p>
        /// </li>
        /// </ul>
        pub fn scalable_dimension(mut self, inp: crate::model::ScalableDimension) -> Self {
            self.inner = self.inner.scalable_dimension(inp);
            self
        }
        /// <p>The scalable dimension. This string consists of the service namespace, resource type, and scaling property.
        /// If you specify a scalable dimension, you must also specify a resource ID.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>ecs:service:DesiredCount</code> - The desired task count of an ECS service.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>elasticmapreduce:instancegroup:InstanceCount</code> - The instance count of an EMR Instance Group.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>ec2:spot-fleet-request:TargetCapacity</code> - The target capacity of a Spot Fleet.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>appstream:fleet:DesiredCapacity</code> - The desired capacity of an AppStream 2.0 fleet.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>dynamodb:table:ReadCapacityUnits</code> - The provisioned read capacity for a DynamoDB table.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>dynamodb:table:WriteCapacityUnits</code> - The provisioned write capacity for a DynamoDB table.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>dynamodb:index:ReadCapacityUnits</code> - The provisioned read capacity for a DynamoDB global secondary index.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>dynamodb:index:WriteCapacityUnits</code> - The provisioned write capacity for a DynamoDB global secondary index.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>rds:cluster:ReadReplicaCount</code> - The count of Aurora Replicas in an Aurora DB cluster. Available for Aurora MySQL-compatible edition and Aurora PostgreSQL-compatible edition.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>sagemaker:variant:DesiredInstanceCount</code> - The number of EC2 instances for an SageMaker model endpoint variant.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>custom-resource:ResourceType:Property</code> - The scalable dimension for a custom resource provided by your own application or service.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>comprehend:document-classifier-endpoint:DesiredInferenceUnits</code> - The number of inference units for an Amazon Comprehend document classification endpoint.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>comprehend:entity-recognizer-endpoint:DesiredInferenceUnits</code> - The number of inference units for an Amazon Comprehend entity recognizer endpoint.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>lambda:function:ProvisionedConcurrency</code> - The provisioned concurrency for a Lambda function.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>cassandra:table:ReadCapacityUnits</code> - The provisioned read capacity for an Amazon Keyspaces table.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>cassandra:table:WriteCapacityUnits</code> - The provisioned write capacity for an Amazon Keyspaces table.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>kafka:broker-storage:VolumeSize</code> - The provisioned volume size (in GiB) for brokers in an Amazon MSK cluster.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>elasticache:replication-group:NodeGroups</code> - The number of node groups for an Amazon ElastiCache replication group.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>elasticache:replication-group:Replicas</code> - The number of replicas per node group for an Amazon ElastiCache replication group.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>neptune:cluster:ReadReplicaCount</code> - The count of read replicas in an Amazon Neptune DB cluster.</p>
        /// </li>
        /// </ul>
        pub fn set_scalable_dimension(
            mut self,
            input: std::option::Option<crate::model::ScalableDimension>,
        ) -> Self {
            self.inner = self.inner.set_scalable_dimension(input);
            self
        }
        /// <p>The maximum number of scalable targets. This value can be between 1 and 10. The default
        /// value is 10.</p>
        /// <p>If this parameter is used, the operation returns up to <code>MaxResults</code> results
        /// at a time, along with a <code>NextToken</code> value. To get the next set of results,
        /// include the <code>NextToken</code> value in a subsequent call. If this parameter is not
        /// used, the operation returns up to 10 results and a <code>NextToken</code> value, if
        /// applicable.</p>
        pub fn max_results(mut self, inp: i32) -> Self {
            self.inner = self.inner.max_results(inp);
            self
        }
        /// <p>The maximum number of scalable targets. This value can be between 1 and 10. The default
        /// value is 10.</p>
        /// <p>If this parameter is used, the operation returns up to <code>MaxResults</code> results
        /// at a time, along with a <code>NextToken</code> value. To get the next set of results,
        /// include the <code>NextToken</code> value in a subsequent call. If this parameter is not
        /// used, the operation returns up to 10 results and a <code>NextToken</code> value, if
        /// applicable.</p>
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
        /// <p>The token for the next set of results.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(inp);
            self
        }
        /// <p>The token for the next set of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
    }
    /// Fluent builder constructing a request to `DescribeScheduledActions`.
    ///
    /// <p>Describes the Application Auto Scaling scheduled actions for the specified service namespace.</p>
    /// <p>You can filter the results using the <code>ResourceId</code>,
    /// <code>ScalableDimension</code>, and <code>ScheduledActionNames</code> parameters.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/application/userguide/application-auto-scaling-scheduled-scaling.html">Scheduled scaling</a> and <a href="https://docs.aws.amazon.com/autoscaling/application/userguide/scheduled-scaling-additional-cli-commands.html">Managing scheduled scaling</a> in the
    /// <i>Application Auto Scaling User Guide</i>.</p>
    #[derive(std::fmt::Debug)]
    pub struct DescribeScheduledActions<
        C = aws_smithy_client::erase::DynConnector,
        M = crate::middleware::DefaultMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_scheduled_actions_input::Builder,
    }
    impl<C, M, R> DescribeScheduledActions<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `DescribeScheduledActions`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeScheduledActionsOutput,
            aws_smithy_http::result::SdkError<crate::error::DescribeScheduledActionsError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeScheduledActionsInputOperationOutputAlias,
                crate::output::DescribeScheduledActionsOutput,
                crate::error::DescribeScheduledActionsError,
                crate::input::DescribeScheduledActionsInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// Appends an item to `ScheduledActionNames`.
        ///
        /// To override the contents of this collection use [`set_scheduled_action_names`](Self::set_scheduled_action_names).
        ///
        /// <p>The names of the scheduled actions to describe.</p>
        pub fn scheduled_action_names(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.scheduled_action_names(inp);
            self
        }
        /// <p>The names of the scheduled actions to describe.</p>
        pub fn set_scheduled_action_names(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_scheduled_action_names(input);
            self
        }
        /// <p>The namespace of the Amazon Web Services service that provides the resource. For a resource provided
        /// by your own application or service, use <code>custom-resource</code> instead.</p>
        pub fn service_namespace(mut self, inp: crate::model::ServiceNamespace) -> Self {
            self.inner = self.inner.service_namespace(inp);
            self
        }
        /// <p>The namespace of the Amazon Web Services service that provides the resource. For a resource provided
        /// by your own application or service, use <code>custom-resource</code> instead.</p>
        pub fn set_service_namespace(
            mut self,
            input: std::option::Option<crate::model::ServiceNamespace>,
        ) -> Self {
            self.inner = self.inner.set_service_namespace(input);
            self
        }
        /// <p>The identifier of the resource associated with the scheduled action.
        /// This string consists of the resource type and unique identifier.</p>
        /// <ul>
        /// <li>
        /// <p>ECS service - The resource type is <code>service</code> and the unique identifier is the cluster name  
        /// and service name. Example: <code>service/default/sample-webapp</code>.</p>
        /// </li>
        /// <li>
        /// <p>Spot Fleet - The resource type is <code>spot-fleet-request</code> and the unique identifier is the
        /// Spot Fleet request ID. Example: <code>spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE</code>.</p>
        /// </li>
        /// <li>
        /// <p>EMR cluster - The resource type is <code>instancegroup</code> and the unique identifier is the cluster ID and instance group ID.
        /// Example: <code>instancegroup/j-2EEZNYKUA1NTV/ig-1791Y4E1L8YI0</code>.</p>
        /// </li>
        /// <li>
        /// <p>AppStream 2.0 fleet - The resource type is <code>fleet</code> and the unique identifier is the fleet name.
        /// Example: <code>fleet/sample-fleet</code>.</p>
        /// </li>
        /// <li>
        /// <p>DynamoDB table - The resource type is <code>table</code> and the unique identifier is the table name.
        /// Example: <code>table/my-table</code>.</p>
        /// </li>
        /// <li>
        /// <p>DynamoDB global secondary index - The resource type is <code>index</code> and the unique identifier is the index name.
        /// Example: <code>table/my-table/index/my-table-index</code>.</p>
        /// </li>
        /// <li>
        /// <p>Aurora DB cluster - The resource type is <code>cluster</code> and the unique identifier is the cluster name.
        /// Example: <code>cluster:my-db-cluster</code>.</p>
        /// </li>
        /// <li>
        /// <p>SageMaker endpoint variant - The resource type is <code>variant</code> and the unique identifier is the resource ID.
        /// Example: <code>endpoint/my-end-point/variant/KMeansClustering</code>.</p>
        /// </li>
        /// <li>
        /// <p>Custom resources are not supported with a resource type. This parameter must specify the <code>OutputValue</code> from the CloudFormation template stack used to access the resources. The unique identifier is defined by the service provider. More information
        /// is available in our <a href="https://github.com/aws/aws-auto-scaling-custom-resource">GitHub
        /// repository</a>.</p>
        /// </li>
        /// <li>
        /// <p>Amazon Comprehend document classification endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: <code>arn:aws:comprehend:us-west-2:123456789012:document-classifier-endpoint/EXAMPLE</code>.</p>
        /// </li>
        /// <li>
        /// <p>Amazon Comprehend entity recognizer endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: <code>arn:aws:comprehend:us-west-2:123456789012:entity-recognizer-endpoint/EXAMPLE</code>.</p>
        /// </li>
        /// <li>
        /// <p>Lambda provisioned concurrency - The resource type is <code>function</code> and the unique identifier is the function name with a function version or alias name suffix that is not <code>$LATEST</code>.
        /// Example: <code>function:my-function:prod</code> or <code>function:my-function:1</code>.</p>
        /// </li>
        /// <li>
        /// <p>Amazon Keyspaces table - The resource type is <code>table</code> and the unique identifier is the table name.
        /// Example: <code>keyspace/mykeyspace/table/mytable</code>.</p>
        /// </li>
        /// <li>
        /// <p>Amazon MSK cluster - The resource type and unique identifier are specified using the cluster ARN.
        /// Example: <code>arn:aws:kafka:us-east-1:123456789012:cluster/demo-cluster-1/6357e0b2-0e6a-4b86-a0b4-70df934c2e31-5</code>.</p>
        /// </li>
        /// <li>
        /// <p>Amazon ElastiCache replication group - The resource type is <code>replication-group</code> and the unique identifier is the replication group name.
        /// Example: <code>replication-group/mycluster</code>.</p>
        /// </li>
        /// <li>
        /// <p>Neptune cluster - The resource type is <code>cluster</code> and the unique identifier is the cluster name. Example: <code>cluster:mycluster</code>.</p>
        /// </li>
        /// </ul>
        pub fn resource_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_id(inp);
            self
        }
        /// <p>The identifier of the resource associated with the scheduled action.
        /// This string consists of the resource type and unique identifier.</p>
        /// <ul>
        /// <li>
        /// <p>ECS service - The resource type is <code>service</code> and the unique identifier is the cluster name  
        /// and service name. Example: <code>service/default/sample-webapp</code>.</p>
        /// </li>
        /// <li>
        /// <p>Spot Fleet - The resource type is <code>spot-fleet-request</code> and the unique identifier is the
        /// Spot Fleet request ID. Example: <code>spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE</code>.</p>
        /// </li>
        /// <li>
        /// <p>EMR cluster - The resource type is <code>instancegroup</code> and the unique identifier is the cluster ID and instance group ID.
        /// Example: <code>instancegroup/j-2EEZNYKUA1NTV/ig-1791Y4E1L8YI0</code>.</p>
        /// </li>
        /// <li>
        /// <p>AppStream 2.0 fleet - The resource type is <code>fleet</code> and the unique identifier is the fleet name.
        /// Example: <code>fleet/sample-fleet</code>.</p>
        /// </li>
        /// <li>
        /// <p>DynamoDB table - The resource type is <code>table</code> and the unique identifier is the table name.
        /// Example: <code>table/my-table</code>.</p>
        /// </li>
        /// <li>
        /// <p>DynamoDB global secondary index - The resource type is <code>index</code> and the unique identifier is the index name.
        /// Example: <code>table/my-table/index/my-table-index</code>.</p>
        /// </li>
        /// <li>
        /// <p>Aurora DB cluster - The resource type is <code>cluster</code> and the unique identifier is the cluster name.
        /// Example: <code>cluster:my-db-cluster</code>.</p>
        /// </li>
        /// <li>
        /// <p>SageMaker endpoint variant - The resource type is <code>variant</code> and the unique identifier is the resource ID.
        /// Example: <code>endpoint/my-end-point/variant/KMeansClustering</code>.</p>
        /// </li>
        /// <li>
        /// <p>Custom resources are not supported with a resource type. This parameter must specify the <code>OutputValue</code> from the CloudFormation template stack used to access the resources. The unique identifier is defined by the service provider. More information
        /// is available in our <a href="https://github.com/aws/aws-auto-scaling-custom-resource">GitHub
        /// repository</a>.</p>
        /// </li>
        /// <li>
        /// <p>Amazon Comprehend document classification endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: <code>arn:aws:comprehend:us-west-2:123456789012:document-classifier-endpoint/EXAMPLE</code>.</p>
        /// </li>
        /// <li>
        /// <p>Amazon Comprehend entity recognizer endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: <code>arn:aws:comprehend:us-west-2:123456789012:entity-recognizer-endpoint/EXAMPLE</code>.</p>
        /// </li>
        /// <li>
        /// <p>Lambda provisioned concurrency - The resource type is <code>function</code> and the unique identifier is the function name with a function version or alias name suffix that is not <code>$LATEST</code>.
        /// Example: <code>function:my-function:prod</code> or <code>function:my-function:1</code>.</p>
        /// </li>
        /// <li>
        /// <p>Amazon Keyspaces table - The resource type is <code>table</code> and the unique identifier is the table name.
        /// Example: <code>keyspace/mykeyspace/table/mytable</code>.</p>
        /// </li>
        /// <li>
        /// <p>Amazon MSK cluster - The resource type and unique identifier are specified using the cluster ARN.
        /// Example: <code>arn:aws:kafka:us-east-1:123456789012:cluster/demo-cluster-1/6357e0b2-0e6a-4b86-a0b4-70df934c2e31-5</code>.</p>
        /// </li>
        /// <li>
        /// <p>Amazon ElastiCache replication group - The resource type is <code>replication-group</code> and the unique identifier is the replication group name.
        /// Example: <code>replication-group/mycluster</code>.</p>
        /// </li>
        /// <li>
        /// <p>Neptune cluster - The resource type is <code>cluster</code> and the unique identifier is the cluster name. Example: <code>cluster:mycluster</code>.</p>
        /// </li>
        /// </ul>
        pub fn set_resource_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_resource_id(input);
            self
        }
        /// <p>The scalable dimension. This string consists of the service namespace, resource type, and scaling property.
        /// If you specify a scalable dimension, you must also specify a resource ID.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>ecs:service:DesiredCount</code> - The desired task count of an ECS service.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>elasticmapreduce:instancegroup:InstanceCount</code> - The instance count of an EMR Instance Group.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>ec2:spot-fleet-request:TargetCapacity</code> - The target capacity of a Spot Fleet.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>appstream:fleet:DesiredCapacity</code> - The desired capacity of an AppStream 2.0 fleet.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>dynamodb:table:ReadCapacityUnits</code> - The provisioned read capacity for a DynamoDB table.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>dynamodb:table:WriteCapacityUnits</code> - The provisioned write capacity for a DynamoDB table.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>dynamodb:index:ReadCapacityUnits</code> - The provisioned read capacity for a DynamoDB global secondary index.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>dynamodb:index:WriteCapacityUnits</code> - The provisioned write capacity for a DynamoDB global secondary index.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>rds:cluster:ReadReplicaCount</code> - The count of Aurora Replicas in an Aurora DB cluster. Available for Aurora MySQL-compatible edition and Aurora PostgreSQL-compatible edition.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>sagemaker:variant:DesiredInstanceCount</code> - The number of EC2 instances for an SageMaker model endpoint variant.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>custom-resource:ResourceType:Property</code> - The scalable dimension for a custom resource provided by your own application or service.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>comprehend:document-classifier-endpoint:DesiredInferenceUnits</code> - The number of inference units for an Amazon Comprehend document classification endpoint.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>comprehend:entity-recognizer-endpoint:DesiredInferenceUnits</code> - The number of inference units for an Amazon Comprehend entity recognizer endpoint.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>lambda:function:ProvisionedConcurrency</code> - The provisioned concurrency for a Lambda function.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>cassandra:table:ReadCapacityUnits</code> - The provisioned read capacity for an Amazon Keyspaces table.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>cassandra:table:WriteCapacityUnits</code> - The provisioned write capacity for an Amazon Keyspaces table.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>kafka:broker-storage:VolumeSize</code> - The provisioned volume size (in GiB) for brokers in an Amazon MSK cluster.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>elasticache:replication-group:NodeGroups</code> - The number of node groups for an Amazon ElastiCache replication group.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>elasticache:replication-group:Replicas</code> - The number of replicas per node group for an Amazon ElastiCache replication group.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>neptune:cluster:ReadReplicaCount</code> - The count of read replicas in an Amazon Neptune DB cluster.</p>
        /// </li>
        /// </ul>
        pub fn scalable_dimension(mut self, inp: crate::model::ScalableDimension) -> Self {
            self.inner = self.inner.scalable_dimension(inp);
            self
        }
        /// <p>The scalable dimension. This string consists of the service namespace, resource type, and scaling property.
        /// If you specify a scalable dimension, you must also specify a resource ID.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>ecs:service:DesiredCount</code> - The desired task count of an ECS service.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>elasticmapreduce:instancegroup:InstanceCount</code> - The instance count of an EMR Instance Group.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>ec2:spot-fleet-request:TargetCapacity</code> - The target capacity of a Spot Fleet.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>appstream:fleet:DesiredCapacity</code> - The desired capacity of an AppStream 2.0 fleet.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>dynamodb:table:ReadCapacityUnits</code> - The provisioned read capacity for a DynamoDB table.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>dynamodb:table:WriteCapacityUnits</code> - The provisioned write capacity for a DynamoDB table.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>dynamodb:index:ReadCapacityUnits</code> - The provisioned read capacity for a DynamoDB global secondary index.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>dynamodb:index:WriteCapacityUnits</code> - The provisioned write capacity for a DynamoDB global secondary index.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>rds:cluster:ReadReplicaCount</code> - The count of Aurora Replicas in an Aurora DB cluster. Available for Aurora MySQL-compatible edition and Aurora PostgreSQL-compatible edition.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>sagemaker:variant:DesiredInstanceCount</code> - The number of EC2 instances for an SageMaker model endpoint variant.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>custom-resource:ResourceType:Property</code> - The scalable dimension for a custom resource provided by your own application or service.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>comprehend:document-classifier-endpoint:DesiredInferenceUnits</code> - The number of inference units for an Amazon Comprehend document classification endpoint.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>comprehend:entity-recognizer-endpoint:DesiredInferenceUnits</code> - The number of inference units for an Amazon Comprehend entity recognizer endpoint.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>lambda:function:ProvisionedConcurrency</code> - The provisioned concurrency for a Lambda function.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>cassandra:table:ReadCapacityUnits</code> - The provisioned read capacity for an Amazon Keyspaces table.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>cassandra:table:WriteCapacityUnits</code> - The provisioned write capacity for an Amazon Keyspaces table.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>kafka:broker-storage:VolumeSize</code> - The provisioned volume size (in GiB) for brokers in an Amazon MSK cluster.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>elasticache:replication-group:NodeGroups</code> - The number of node groups for an Amazon ElastiCache replication group.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>elasticache:replication-group:Replicas</code> - The number of replicas per node group for an Amazon ElastiCache replication group.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>neptune:cluster:ReadReplicaCount</code> - The count of read replicas in an Amazon Neptune DB cluster.</p>
        /// </li>
        /// </ul>
        pub fn set_scalable_dimension(
            mut self,
            input: std::option::Option<crate::model::ScalableDimension>,
        ) -> Self {
            self.inner = self.inner.set_scalable_dimension(input);
            self
        }
        /// <p>The maximum number of scheduled action results. This value can be between
        /// 1 and 50. The default value is 50.</p>
        /// <p>If this parameter is used, the operation returns up to <code>MaxResults</code> results
        /// at a time, along with a <code>NextToken</code> value. To get the next set of results,
        /// include the <code>NextToken</code> value in a subsequent call. If this parameter is not
        /// used, the operation returns up to 50 results and a
        /// <code>NextToken</code> value, if applicable.</p>
        pub fn max_results(mut self, inp: i32) -> Self {
            self.inner = self.inner.max_results(inp);
            self
        }
        /// <p>The maximum number of scheduled action results. This value can be between
        /// 1 and 50. The default value is 50.</p>
        /// <p>If this parameter is used, the operation returns up to <code>MaxResults</code> results
        /// at a time, along with a <code>NextToken</code> value. To get the next set of results,
        /// include the <code>NextToken</code> value in a subsequent call. If this parameter is not
        /// used, the operation returns up to 50 results and a
        /// <code>NextToken</code> value, if applicable.</p>
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
        /// <p>The token for the next set of results.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(inp);
            self
        }
        /// <p>The token for the next set of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
    }
    /// Fluent builder constructing a request to `PutScalingPolicy`.
    ///
    /// <p>Creates or updates a scaling policy for an Application Auto Scaling scalable target.</p>
    /// <p>Each scalable target is identified by a service namespace, resource ID, and scalable
    /// dimension. A scaling policy applies to the scalable target identified by those three
    /// attributes. You cannot create a scaling policy until you have registered the resource as a
    /// scalable target.</p>
    /// <p>Multiple scaling policies can be in force at the same time for the same scalable target.
    /// You can have one or more target tracking scaling policies, one or more step scaling
    /// policies, or both. However, there is a chance that multiple policies could conflict,
    /// instructing the scalable target to scale out or in at the same time. Application Auto Scaling gives
    /// precedence to the policy that provides the largest capacity for both scale out and scale
    /// in. For example, if one policy increases capacity by 3, another policy increases capacity
    /// by 200 percent, and the current capacity is 10, Application Auto Scaling uses the policy with the highest
    /// calculated capacity (200% of 10 = 20) and scales out to 30. </p>
    /// <p>We recommend caution, however, when using target tracking scaling policies with step
    /// scaling policies because conflicts between these policies can cause undesirable behavior.
    /// For example, if the step scaling policy initiates a scale-in activity before the target
    /// tracking policy is ready to scale in, the scale-in activity will not be blocked. After the
    /// scale-in activity completes, the target tracking policy could instruct the scalable target
    /// to scale out again. </p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/application/userguide/application-auto-scaling-target-tracking.html">Target tracking scaling policies</a> and <a href="https://docs.aws.amazon.com/autoscaling/application/userguide/application-auto-scaling-step-scaling-policies.html">Step scaling policies</a> in the <i>Application Auto Scaling User Guide</i>.</p>
    /// <note>
    /// <p>If a scalable target is deregistered, the scalable target is no longer available to
    /// execute scaling policies. Any scaling policies that were specified for the scalable
    /// target are deleted.</p>
    /// </note>
    #[derive(std::fmt::Debug)]
    pub struct PutScalingPolicy<
        C = aws_smithy_client::erase::DynConnector,
        M = crate::middleware::DefaultMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::put_scaling_policy_input::Builder,
    }
    impl<C, M, R> PutScalingPolicy<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `PutScalingPolicy`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::PutScalingPolicyOutput,
            aws_smithy_http::result::SdkError<crate::error::PutScalingPolicyError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::PutScalingPolicyInputOperationOutputAlias,
                crate::output::PutScalingPolicyOutput,
                crate::error::PutScalingPolicyError,
                crate::input::PutScalingPolicyInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the scaling policy.</p>
        pub fn policy_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.policy_name(inp);
            self
        }
        /// <p>The name of the scaling policy.</p>
        pub fn set_policy_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_policy_name(input);
            self
        }
        /// <p>The namespace of the Amazon Web Services service that provides the resource. For a resource provided
        /// by your own application or service, use <code>custom-resource</code> instead.</p>
        pub fn service_namespace(mut self, inp: crate::model::ServiceNamespace) -> Self {
            self.inner = self.inner.service_namespace(inp);
            self
        }
        /// <p>The namespace of the Amazon Web Services service that provides the resource. For a resource provided
        /// by your own application or service, use <code>custom-resource</code> instead.</p>
        pub fn set_service_namespace(
            mut self,
            input: std::option::Option<crate::model::ServiceNamespace>,
        ) -> Self {
            self.inner = self.inner.set_service_namespace(input);
            self
        }
        /// <p>The identifier of the resource associated with the scaling policy.
        /// This string consists of the resource type and unique identifier.</p>
        /// <ul>
        /// <li>
        /// <p>ECS service - The resource type is <code>service</code> and the unique identifier is the cluster name  
        /// and service name. Example: <code>service/default/sample-webapp</code>.</p>
        /// </li>
        /// <li>
        /// <p>Spot Fleet - The resource type is <code>spot-fleet-request</code> and the unique identifier is the
        /// Spot Fleet request ID. Example: <code>spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE</code>.</p>
        /// </li>
        /// <li>
        /// <p>EMR cluster - The resource type is <code>instancegroup</code> and the unique identifier is the cluster ID and instance group ID.
        /// Example: <code>instancegroup/j-2EEZNYKUA1NTV/ig-1791Y4E1L8YI0</code>.</p>
        /// </li>
        /// <li>
        /// <p>AppStream 2.0 fleet - The resource type is <code>fleet</code> and the unique identifier is the fleet name.
        /// Example: <code>fleet/sample-fleet</code>.</p>
        /// </li>
        /// <li>
        /// <p>DynamoDB table - The resource type is <code>table</code> and the unique identifier is the table name.
        /// Example: <code>table/my-table</code>.</p>
        /// </li>
        /// <li>
        /// <p>DynamoDB global secondary index - The resource type is <code>index</code> and the unique identifier is the index name.
        /// Example: <code>table/my-table/index/my-table-index</code>.</p>
        /// </li>
        /// <li>
        /// <p>Aurora DB cluster - The resource type is <code>cluster</code> and the unique identifier is the cluster name.
        /// Example: <code>cluster:my-db-cluster</code>.</p>
        /// </li>
        /// <li>
        /// <p>SageMaker endpoint variant - The resource type is <code>variant</code> and the unique identifier is the resource ID.
        /// Example: <code>endpoint/my-end-point/variant/KMeansClustering</code>.</p>
        /// </li>
        /// <li>
        /// <p>Custom resources are not supported with a resource type. This parameter must specify the <code>OutputValue</code> from the CloudFormation template stack used to access the resources. The unique identifier is defined by the service provider. More information
        /// is available in our <a href="https://github.com/aws/aws-auto-scaling-custom-resource">GitHub
        /// repository</a>.</p>
        /// </li>
        /// <li>
        /// <p>Amazon Comprehend document classification endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: <code>arn:aws:comprehend:us-west-2:123456789012:document-classifier-endpoint/EXAMPLE</code>.</p>
        /// </li>
        /// <li>
        /// <p>Amazon Comprehend entity recognizer endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: <code>arn:aws:comprehend:us-west-2:123456789012:entity-recognizer-endpoint/EXAMPLE</code>.</p>
        /// </li>
        /// <li>
        /// <p>Lambda provisioned concurrency - The resource type is <code>function</code> and the unique identifier is the function name with a function version or alias name suffix that is not <code>$LATEST</code>.
        /// Example: <code>function:my-function:prod</code> or <code>function:my-function:1</code>.</p>
        /// </li>
        /// <li>
        /// <p>Amazon Keyspaces table - The resource type is <code>table</code> and the unique identifier is the table name.
        /// Example: <code>keyspace/mykeyspace/table/mytable</code>.</p>
        /// </li>
        /// <li>
        /// <p>Amazon MSK cluster - The resource type and unique identifier are specified using the cluster ARN.
        /// Example: <code>arn:aws:kafka:us-east-1:123456789012:cluster/demo-cluster-1/6357e0b2-0e6a-4b86-a0b4-70df934c2e31-5</code>.</p>
        /// </li>
        /// <li>
        /// <p>Amazon ElastiCache replication group - The resource type is <code>replication-group</code> and the unique identifier is the replication group name.
        /// Example: <code>replication-group/mycluster</code>.</p>
        /// </li>
        /// <li>
        /// <p>Neptune cluster - The resource type is <code>cluster</code> and the unique identifier is the cluster name. Example: <code>cluster:mycluster</code>.</p>
        /// </li>
        /// </ul>
        pub fn resource_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_id(inp);
            self
        }
        /// <p>The identifier of the resource associated with the scaling policy.
        /// This string consists of the resource type and unique identifier.</p>
        /// <ul>
        /// <li>
        /// <p>ECS service - The resource type is <code>service</code> and the unique identifier is the cluster name  
        /// and service name. Example: <code>service/default/sample-webapp</code>.</p>
        /// </li>
        /// <li>
        /// <p>Spot Fleet - The resource type is <code>spot-fleet-request</code> and the unique identifier is the
        /// Spot Fleet request ID. Example: <code>spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE</code>.</p>
        /// </li>
        /// <li>
        /// <p>EMR cluster - The resource type is <code>instancegroup</code> and the unique identifier is the cluster ID and instance group ID.
        /// Example: <code>instancegroup/j-2EEZNYKUA1NTV/ig-1791Y4E1L8YI0</code>.</p>
        /// </li>
        /// <li>
        /// <p>AppStream 2.0 fleet - The resource type is <code>fleet</code> and the unique identifier is the fleet name.
        /// Example: <code>fleet/sample-fleet</code>.</p>
        /// </li>
        /// <li>
        /// <p>DynamoDB table - The resource type is <code>table</code> and the unique identifier is the table name.
        /// Example: <code>table/my-table</code>.</p>
        /// </li>
        /// <li>
        /// <p>DynamoDB global secondary index - The resource type is <code>index</code> and the unique identifier is the index name.
        /// Example: <code>table/my-table/index/my-table-index</code>.</p>
        /// </li>
        /// <li>
        /// <p>Aurora DB cluster - The resource type is <code>cluster</code> and the unique identifier is the cluster name.
        /// Example: <code>cluster:my-db-cluster</code>.</p>
        /// </li>
        /// <li>
        /// <p>SageMaker endpoint variant - The resource type is <code>variant</code> and the unique identifier is the resource ID.
        /// Example: <code>endpoint/my-end-point/variant/KMeansClustering</code>.</p>
        /// </li>
        /// <li>
        /// <p>Custom resources are not supported with a resource type. This parameter must specify the <code>OutputValue</code> from the CloudFormation template stack used to access the resources. The unique identifier is defined by the service provider. More information
        /// is available in our <a href="https://github.com/aws/aws-auto-scaling-custom-resource">GitHub
        /// repository</a>.</p>
        /// </li>
        /// <li>
        /// <p>Amazon Comprehend document classification endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: <code>arn:aws:comprehend:us-west-2:123456789012:document-classifier-endpoint/EXAMPLE</code>.</p>
        /// </li>
        /// <li>
        /// <p>Amazon Comprehend entity recognizer endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: <code>arn:aws:comprehend:us-west-2:123456789012:entity-recognizer-endpoint/EXAMPLE</code>.</p>
        /// </li>
        /// <li>
        /// <p>Lambda provisioned concurrency - The resource type is <code>function</code> and the unique identifier is the function name with a function version or alias name suffix that is not <code>$LATEST</code>.
        /// Example: <code>function:my-function:prod</code> or <code>function:my-function:1</code>.</p>
        /// </li>
        /// <li>
        /// <p>Amazon Keyspaces table - The resource type is <code>table</code> and the unique identifier is the table name.
        /// Example: <code>keyspace/mykeyspace/table/mytable</code>.</p>
        /// </li>
        /// <li>
        /// <p>Amazon MSK cluster - The resource type and unique identifier are specified using the cluster ARN.
        /// Example: <code>arn:aws:kafka:us-east-1:123456789012:cluster/demo-cluster-1/6357e0b2-0e6a-4b86-a0b4-70df934c2e31-5</code>.</p>
        /// </li>
        /// <li>
        /// <p>Amazon ElastiCache replication group - The resource type is <code>replication-group</code> and the unique identifier is the replication group name.
        /// Example: <code>replication-group/mycluster</code>.</p>
        /// </li>
        /// <li>
        /// <p>Neptune cluster - The resource type is <code>cluster</code> and the unique identifier is the cluster name. Example: <code>cluster:mycluster</code>.</p>
        /// </li>
        /// </ul>
        pub fn set_resource_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_resource_id(input);
            self
        }
        /// <p>The scalable dimension. This string consists of the service namespace, resource type, and scaling property.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>ecs:service:DesiredCount</code> - The desired task count of an ECS service.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>elasticmapreduce:instancegroup:InstanceCount</code> - The instance count of an EMR Instance Group.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>ec2:spot-fleet-request:TargetCapacity</code> - The target capacity of a Spot Fleet.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>appstream:fleet:DesiredCapacity</code> - The desired capacity of an AppStream 2.0 fleet.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>dynamodb:table:ReadCapacityUnits</code> - The provisioned read capacity for a DynamoDB table.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>dynamodb:table:WriteCapacityUnits</code> - The provisioned write capacity for a DynamoDB table.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>dynamodb:index:ReadCapacityUnits</code> - The provisioned read capacity for a DynamoDB global secondary index.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>dynamodb:index:WriteCapacityUnits</code> - The provisioned write capacity for a DynamoDB global secondary index.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>rds:cluster:ReadReplicaCount</code> - The count of Aurora Replicas in an Aurora DB cluster. Available for Aurora MySQL-compatible edition and Aurora PostgreSQL-compatible edition.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>sagemaker:variant:DesiredInstanceCount</code> - The number of EC2 instances for an SageMaker model endpoint variant.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>custom-resource:ResourceType:Property</code> - The scalable dimension for a custom resource provided by your own application or service.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>comprehend:document-classifier-endpoint:DesiredInferenceUnits</code> - The number of inference units for an Amazon Comprehend document classification endpoint.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>comprehend:entity-recognizer-endpoint:DesiredInferenceUnits</code> - The number of inference units for an Amazon Comprehend entity recognizer endpoint.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>lambda:function:ProvisionedConcurrency</code> - The provisioned concurrency for a Lambda function.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>cassandra:table:ReadCapacityUnits</code> - The provisioned read capacity for an Amazon Keyspaces table.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>cassandra:table:WriteCapacityUnits</code> - The provisioned write capacity for an Amazon Keyspaces table.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>kafka:broker-storage:VolumeSize</code> - The provisioned volume size (in GiB) for brokers in an Amazon MSK cluster.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>elasticache:replication-group:NodeGroups</code> - The number of node groups for an Amazon ElastiCache replication group.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>elasticache:replication-group:Replicas</code> - The number of replicas per node group for an Amazon ElastiCache replication group.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>neptune:cluster:ReadReplicaCount</code> - The count of read replicas in an Amazon Neptune DB cluster.</p>
        /// </li>
        /// </ul>
        pub fn scalable_dimension(mut self, inp: crate::model::ScalableDimension) -> Self {
            self.inner = self.inner.scalable_dimension(inp);
            self
        }
        /// <p>The scalable dimension. This string consists of the service namespace, resource type, and scaling property.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>ecs:service:DesiredCount</code> - The desired task count of an ECS service.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>elasticmapreduce:instancegroup:InstanceCount</code> - The instance count of an EMR Instance Group.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>ec2:spot-fleet-request:TargetCapacity</code> - The target capacity of a Spot Fleet.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>appstream:fleet:DesiredCapacity</code> - The desired capacity of an AppStream 2.0 fleet.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>dynamodb:table:ReadCapacityUnits</code> - The provisioned read capacity for a DynamoDB table.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>dynamodb:table:WriteCapacityUnits</code> - The provisioned write capacity for a DynamoDB table.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>dynamodb:index:ReadCapacityUnits</code> - The provisioned read capacity for a DynamoDB global secondary index.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>dynamodb:index:WriteCapacityUnits</code> - The provisioned write capacity for a DynamoDB global secondary index.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>rds:cluster:ReadReplicaCount</code> - The count of Aurora Replicas in an Aurora DB cluster. Available for Aurora MySQL-compatible edition and Aurora PostgreSQL-compatible edition.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>sagemaker:variant:DesiredInstanceCount</code> - The number of EC2 instances for an SageMaker model endpoint variant.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>custom-resource:ResourceType:Property</code> - The scalable dimension for a custom resource provided by your own application or service.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>comprehend:document-classifier-endpoint:DesiredInferenceUnits</code> - The number of inference units for an Amazon Comprehend document classification endpoint.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>comprehend:entity-recognizer-endpoint:DesiredInferenceUnits</code> - The number of inference units for an Amazon Comprehend entity recognizer endpoint.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>lambda:function:ProvisionedConcurrency</code> - The provisioned concurrency for a Lambda function.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>cassandra:table:ReadCapacityUnits</code> - The provisioned read capacity for an Amazon Keyspaces table.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>cassandra:table:WriteCapacityUnits</code> - The provisioned write capacity for an Amazon Keyspaces table.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>kafka:broker-storage:VolumeSize</code> - The provisioned volume size (in GiB) for brokers in an Amazon MSK cluster.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>elasticache:replication-group:NodeGroups</code> - The number of node groups for an Amazon ElastiCache replication group.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>elasticache:replication-group:Replicas</code> - The number of replicas per node group for an Amazon ElastiCache replication group.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>neptune:cluster:ReadReplicaCount</code> - The count of read replicas in an Amazon Neptune DB cluster.</p>
        /// </li>
        /// </ul>
        pub fn set_scalable_dimension(
            mut self,
            input: std::option::Option<crate::model::ScalableDimension>,
        ) -> Self {
            self.inner = self.inner.set_scalable_dimension(input);
            self
        }
        /// <p>The policy type. This parameter is required if you are creating a scaling policy.</p>
        /// <p>The following policy types are supported: </p>
        /// <p>
        /// <code>TargetTrackingScaling</code>—Not supported for Amazon EMR</p>
        /// <p>
        /// <code>StepScaling</code>—Not supported for DynamoDB, Amazon Comprehend, Lambda, Amazon Keyspaces, Amazon MSK, Amazon ElastiCache, or
        /// Neptune.</p>
        /// <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/application/userguide/application-auto-scaling-target-tracking.html">Target
        /// tracking scaling policies</a> and <a href="https://docs.aws.amazon.com/autoscaling/application/userguide/application-auto-scaling-step-scaling-policies.html">Step scaling policies</a> in the <i>Application Auto Scaling User Guide</i>.</p>
        pub fn policy_type(mut self, inp: crate::model::PolicyType) -> Self {
            self.inner = self.inner.policy_type(inp);
            self
        }
        /// <p>The policy type. This parameter is required if you are creating a scaling policy.</p>
        /// <p>The following policy types are supported: </p>
        /// <p>
        /// <code>TargetTrackingScaling</code>—Not supported for Amazon EMR</p>
        /// <p>
        /// <code>StepScaling</code>—Not supported for DynamoDB, Amazon Comprehend, Lambda, Amazon Keyspaces, Amazon MSK, Amazon ElastiCache, or
        /// Neptune.</p>
        /// <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/application/userguide/application-auto-scaling-target-tracking.html">Target
        /// tracking scaling policies</a> and <a href="https://docs.aws.amazon.com/autoscaling/application/userguide/application-auto-scaling-step-scaling-policies.html">Step scaling policies</a> in the <i>Application Auto Scaling User Guide</i>.</p>
        pub fn set_policy_type(
            mut self,
            input: std::option::Option<crate::model::PolicyType>,
        ) -> Self {
            self.inner = self.inner.set_policy_type(input);
            self
        }
        /// <p>A step scaling policy.</p>
        /// <p>This parameter is required if you are creating a policy and the policy type is
        /// <code>StepScaling</code>.</p>
        pub fn step_scaling_policy_configuration(
            mut self,
            inp: crate::model::StepScalingPolicyConfiguration,
        ) -> Self {
            self.inner = self.inner.step_scaling_policy_configuration(inp);
            self
        }
        /// <p>A step scaling policy.</p>
        /// <p>This parameter is required if you are creating a policy and the policy type is
        /// <code>StepScaling</code>.</p>
        pub fn set_step_scaling_policy_configuration(
            mut self,
            input: std::option::Option<crate::model::StepScalingPolicyConfiguration>,
        ) -> Self {
            self.inner = self.inner.set_step_scaling_policy_configuration(input);
            self
        }
        /// <p>A target tracking scaling policy. Includes support for predefined or customized
        /// metrics.</p>
        /// <p>This parameter is required if you are creating a policy and the policy type is
        /// <code>TargetTrackingScaling</code>.</p>
        pub fn target_tracking_scaling_policy_configuration(
            mut self,
            inp: crate::model::TargetTrackingScalingPolicyConfiguration,
        ) -> Self {
            self.inner = self.inner.target_tracking_scaling_policy_configuration(inp);
            self
        }
        /// <p>A target tracking scaling policy. Includes support for predefined or customized
        /// metrics.</p>
        /// <p>This parameter is required if you are creating a policy and the policy type is
        /// <code>TargetTrackingScaling</code>.</p>
        pub fn set_target_tracking_scaling_policy_configuration(
            mut self,
            input: std::option::Option<crate::model::TargetTrackingScalingPolicyConfiguration>,
        ) -> Self {
            self.inner = self
                .inner
                .set_target_tracking_scaling_policy_configuration(input);
            self
        }
    }
    /// Fluent builder constructing a request to `PutScheduledAction`.
    ///
    /// <p>Creates or updates a scheduled action for an Application Auto Scaling scalable target. </p>
    /// <p>Each scalable target is identified by a service namespace, resource ID, and scalable
    /// dimension. A scheduled action applies to the scalable target identified by those three
    /// attributes. You cannot create a scheduled action until you have registered the resource as
    /// a scalable target.</p>
    /// <p>When start and end times are specified with a recurring schedule using a cron expression
    /// or rates, they form the boundaries for when the recurring action starts and stops.</p>
    /// <p>To update a scheduled action, specify the parameters that you want to change. If you
    /// don't specify start and end times, the old values are deleted.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/application/userguide/application-auto-scaling-scheduled-scaling.html">Scheduled scaling</a> in the <i>Application Auto Scaling User Guide</i>.</p>
    /// <note>
    /// <p>If a scalable target is deregistered, the scalable target is no longer available to
    /// run scheduled actions. Any scheduled actions that were specified for the scalable target
    /// are deleted.</p>
    /// </note>
    #[derive(std::fmt::Debug)]
    pub struct PutScheduledAction<
        C = aws_smithy_client::erase::DynConnector,
        M = crate::middleware::DefaultMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::put_scheduled_action_input::Builder,
    }
    impl<C, M, R> PutScheduledAction<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `PutScheduledAction`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::PutScheduledActionOutput,
            aws_smithy_http::result::SdkError<crate::error::PutScheduledActionError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::PutScheduledActionInputOperationOutputAlias,
                crate::output::PutScheduledActionOutput,
                crate::error::PutScheduledActionError,
                crate::input::PutScheduledActionInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The namespace of the Amazon Web Services service that provides the resource. For a resource provided
        /// by your own application or service, use <code>custom-resource</code> instead.</p>
        pub fn service_namespace(mut self, inp: crate::model::ServiceNamespace) -> Self {
            self.inner = self.inner.service_namespace(inp);
            self
        }
        /// <p>The namespace of the Amazon Web Services service that provides the resource. For a resource provided
        /// by your own application or service, use <code>custom-resource</code> instead.</p>
        pub fn set_service_namespace(
            mut self,
            input: std::option::Option<crate::model::ServiceNamespace>,
        ) -> Self {
            self.inner = self.inner.set_service_namespace(input);
            self
        }
        /// <p>The schedule for this action. The following formats are supported:</p>
        /// <ul>
        /// <li>
        /// <p>At expressions - "<code>at(<i>yyyy</i>-<i>mm</i>-<i>dd</i>T<i>hh</i>:<i>mm</i>:<i>ss</i>)</code>"</p>
        /// </li>
        /// <li>
        /// <p>Rate expressions - "<code>rate(<i>value</i>
        /// <i>unit</i>)</code>"</p>
        /// </li>
        /// <li>
        /// <p>Cron expressions - "<code>cron(<i>fields</i>)</code>"</p>
        /// </li>
        /// </ul>
        /// <p>At expressions are useful for one-time schedules. Cron expressions are useful for
        /// scheduled actions that run periodically at a specified date and time, and rate expressions
        /// are useful for scheduled actions that run at a regular interval.</p>
        /// <p>At and cron expressions use Universal Coordinated Time (UTC) by
        /// default.</p>
        /// <p>The cron format consists of six fields separated by white spaces: [Minutes] [Hours] [Day_of_Month] [Month] [Day_of_Week] [Year].</p>
        /// <p>For rate expressions, <i>value</i> is a positive integer and <i>unit</i> is
        /// <code>minute</code> | <code>minutes</code> | <code>hour</code> | <code>hours</code> | <code>day</code> | <code>days</code>.</p>
        /// <p>For more information and examples, see <a href="https://docs.aws.amazon.com/autoscaling/application/userguide/examples-scheduled-actions.html">Example scheduled actions for Application Auto Scaling</a> in the <i>Application Auto Scaling User Guide</i>.</p>
        pub fn schedule(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.schedule(inp);
            self
        }
        /// <p>The schedule for this action. The following formats are supported:</p>
        /// <ul>
        /// <li>
        /// <p>At expressions - "<code>at(<i>yyyy</i>-<i>mm</i>-<i>dd</i>T<i>hh</i>:<i>mm</i>:<i>ss</i>)</code>"</p>
        /// </li>
        /// <li>
        /// <p>Rate expressions - "<code>rate(<i>value</i>
        /// <i>unit</i>)</code>"</p>
        /// </li>
        /// <li>
        /// <p>Cron expressions - "<code>cron(<i>fields</i>)</code>"</p>
        /// </li>
        /// </ul>
        /// <p>At expressions are useful for one-time schedules. Cron expressions are useful for
        /// scheduled actions that run periodically at a specified date and time, and rate expressions
        /// are useful for scheduled actions that run at a regular interval.</p>
        /// <p>At and cron expressions use Universal Coordinated Time (UTC) by
        /// default.</p>
        /// <p>The cron format consists of six fields separated by white spaces: [Minutes] [Hours] [Day_of_Month] [Month] [Day_of_Week] [Year].</p>
        /// <p>For rate expressions, <i>value</i> is a positive integer and <i>unit</i> is
        /// <code>minute</code> | <code>minutes</code> | <code>hour</code> | <code>hours</code> | <code>day</code> | <code>days</code>.</p>
        /// <p>For more information and examples, see <a href="https://docs.aws.amazon.com/autoscaling/application/userguide/examples-scheduled-actions.html">Example scheduled actions for Application Auto Scaling</a> in the <i>Application Auto Scaling User Guide</i>.</p>
        pub fn set_schedule(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_schedule(input);
            self
        }
        /// <p>Specifies the time zone used when setting a scheduled action by using an at or cron
        /// expression. If a time zone is not provided, UTC is used by default.</p>
        /// <p>Valid values are the canonical names of the IANA time zones supported by Joda-Time (such
        /// as <code>Etc/GMT+9</code> or <code>Pacific/Tahiti</code>). For more information, see <a href="https://www.joda.org/joda-time/timezones.html">https://www.joda.org/joda-time/timezones.html</a>.</p>
        pub fn timezone(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.timezone(inp);
            self
        }
        /// <p>Specifies the time zone used when setting a scheduled action by using an at or cron
        /// expression. If a time zone is not provided, UTC is used by default.</p>
        /// <p>Valid values are the canonical names of the IANA time zones supported by Joda-Time (such
        /// as <code>Etc/GMT+9</code> or <code>Pacific/Tahiti</code>). For more information, see <a href="https://www.joda.org/joda-time/timezones.html">https://www.joda.org/joda-time/timezones.html</a>.</p>
        pub fn set_timezone(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_timezone(input);
            self
        }
        /// <p>The name of the scheduled action. This name must be unique among all other scheduled
        /// actions on the specified scalable target. </p>
        pub fn scheduled_action_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.scheduled_action_name(inp);
            self
        }
        /// <p>The name of the scheduled action. This name must be unique among all other scheduled
        /// actions on the specified scalable target. </p>
        pub fn set_scheduled_action_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_scheduled_action_name(input);
            self
        }
        /// <p>The identifier of the resource associated with the scheduled action.
        /// This string consists of the resource type and unique identifier.</p>
        /// <ul>
        /// <li>
        /// <p>ECS service - The resource type is <code>service</code> and the unique identifier is the cluster name  
        /// and service name. Example: <code>service/default/sample-webapp</code>.</p>
        /// </li>
        /// <li>
        /// <p>Spot Fleet - The resource type is <code>spot-fleet-request</code> and the unique identifier is the
        /// Spot Fleet request ID. Example: <code>spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE</code>.</p>
        /// </li>
        /// <li>
        /// <p>EMR cluster - The resource type is <code>instancegroup</code> and the unique identifier is the cluster ID and instance group ID.
        /// Example: <code>instancegroup/j-2EEZNYKUA1NTV/ig-1791Y4E1L8YI0</code>.</p>
        /// </li>
        /// <li>
        /// <p>AppStream 2.0 fleet - The resource type is <code>fleet</code> and the unique identifier is the fleet name.
        /// Example: <code>fleet/sample-fleet</code>.</p>
        /// </li>
        /// <li>
        /// <p>DynamoDB table - The resource type is <code>table</code> and the unique identifier is the table name.
        /// Example: <code>table/my-table</code>.</p>
        /// </li>
        /// <li>
        /// <p>DynamoDB global secondary index - The resource type is <code>index</code> and the unique identifier is the index name.
        /// Example: <code>table/my-table/index/my-table-index</code>.</p>
        /// </li>
        /// <li>
        /// <p>Aurora DB cluster - The resource type is <code>cluster</code> and the unique identifier is the cluster name.
        /// Example: <code>cluster:my-db-cluster</code>.</p>
        /// </li>
        /// <li>
        /// <p>SageMaker endpoint variant - The resource type is <code>variant</code> and the unique identifier is the resource ID.
        /// Example: <code>endpoint/my-end-point/variant/KMeansClustering</code>.</p>
        /// </li>
        /// <li>
        /// <p>Custom resources are not supported with a resource type. This parameter must specify the <code>OutputValue</code> from the CloudFormation template stack used to access the resources. The unique identifier is defined by the service provider. More information
        /// is available in our <a href="https://github.com/aws/aws-auto-scaling-custom-resource">GitHub
        /// repository</a>.</p>
        /// </li>
        /// <li>
        /// <p>Amazon Comprehend document classification endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: <code>arn:aws:comprehend:us-west-2:123456789012:document-classifier-endpoint/EXAMPLE</code>.</p>
        /// </li>
        /// <li>
        /// <p>Amazon Comprehend entity recognizer endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: <code>arn:aws:comprehend:us-west-2:123456789012:entity-recognizer-endpoint/EXAMPLE</code>.</p>
        /// </li>
        /// <li>
        /// <p>Lambda provisioned concurrency - The resource type is <code>function</code> and the unique identifier is the function name with a function version or alias name suffix that is not <code>$LATEST</code>.
        /// Example: <code>function:my-function:prod</code> or <code>function:my-function:1</code>.</p>
        /// </li>
        /// <li>
        /// <p>Amazon Keyspaces table - The resource type is <code>table</code> and the unique identifier is the table name.
        /// Example: <code>keyspace/mykeyspace/table/mytable</code>.</p>
        /// </li>
        /// <li>
        /// <p>Amazon MSK cluster - The resource type and unique identifier are specified using the cluster ARN.
        /// Example: <code>arn:aws:kafka:us-east-1:123456789012:cluster/demo-cluster-1/6357e0b2-0e6a-4b86-a0b4-70df934c2e31-5</code>.</p>
        /// </li>
        /// <li>
        /// <p>Amazon ElastiCache replication group - The resource type is <code>replication-group</code> and the unique identifier is the replication group name.
        /// Example: <code>replication-group/mycluster</code>.</p>
        /// </li>
        /// <li>
        /// <p>Neptune cluster - The resource type is <code>cluster</code> and the unique identifier is the cluster name. Example: <code>cluster:mycluster</code>.</p>
        /// </li>
        /// </ul>
        pub fn resource_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_id(inp);
            self
        }
        /// <p>The identifier of the resource associated with the scheduled action.
        /// This string consists of the resource type and unique identifier.</p>
        /// <ul>
        /// <li>
        /// <p>ECS service - The resource type is <code>service</code> and the unique identifier is the cluster name  
        /// and service name. Example: <code>service/default/sample-webapp</code>.</p>
        /// </li>
        /// <li>
        /// <p>Spot Fleet - The resource type is <code>spot-fleet-request</code> and the unique identifier is the
        /// Spot Fleet request ID. Example: <code>spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE</code>.</p>
        /// </li>
        /// <li>
        /// <p>EMR cluster - The resource type is <code>instancegroup</code> and the unique identifier is the cluster ID and instance group ID.
        /// Example: <code>instancegroup/j-2EEZNYKUA1NTV/ig-1791Y4E1L8YI0</code>.</p>
        /// </li>
        /// <li>
        /// <p>AppStream 2.0 fleet - The resource type is <code>fleet</code> and the unique identifier is the fleet name.
        /// Example: <code>fleet/sample-fleet</code>.</p>
        /// </li>
        /// <li>
        /// <p>DynamoDB table - The resource type is <code>table</code> and the unique identifier is the table name.
        /// Example: <code>table/my-table</code>.</p>
        /// </li>
        /// <li>
        /// <p>DynamoDB global secondary index - The resource type is <code>index</code> and the unique identifier is the index name.
        /// Example: <code>table/my-table/index/my-table-index</code>.</p>
        /// </li>
        /// <li>
        /// <p>Aurora DB cluster - The resource type is <code>cluster</code> and the unique identifier is the cluster name.
        /// Example: <code>cluster:my-db-cluster</code>.</p>
        /// </li>
        /// <li>
        /// <p>SageMaker endpoint variant - The resource type is <code>variant</code> and the unique identifier is the resource ID.
        /// Example: <code>endpoint/my-end-point/variant/KMeansClustering</code>.</p>
        /// </li>
        /// <li>
        /// <p>Custom resources are not supported with a resource type. This parameter must specify the <code>OutputValue</code> from the CloudFormation template stack used to access the resources. The unique identifier is defined by the service provider. More information
        /// is available in our <a href="https://github.com/aws/aws-auto-scaling-custom-resource">GitHub
        /// repository</a>.</p>
        /// </li>
        /// <li>
        /// <p>Amazon Comprehend document classification endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: <code>arn:aws:comprehend:us-west-2:123456789012:document-classifier-endpoint/EXAMPLE</code>.</p>
        /// </li>
        /// <li>
        /// <p>Amazon Comprehend entity recognizer endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: <code>arn:aws:comprehend:us-west-2:123456789012:entity-recognizer-endpoint/EXAMPLE</code>.</p>
        /// </li>
        /// <li>
        /// <p>Lambda provisioned concurrency - The resource type is <code>function</code> and the unique identifier is the function name with a function version or alias name suffix that is not <code>$LATEST</code>.
        /// Example: <code>function:my-function:prod</code> or <code>function:my-function:1</code>.</p>
        /// </li>
        /// <li>
        /// <p>Amazon Keyspaces table - The resource type is <code>table</code> and the unique identifier is the table name.
        /// Example: <code>keyspace/mykeyspace/table/mytable</code>.</p>
        /// </li>
        /// <li>
        /// <p>Amazon MSK cluster - The resource type and unique identifier are specified using the cluster ARN.
        /// Example: <code>arn:aws:kafka:us-east-1:123456789012:cluster/demo-cluster-1/6357e0b2-0e6a-4b86-a0b4-70df934c2e31-5</code>.</p>
        /// </li>
        /// <li>
        /// <p>Amazon ElastiCache replication group - The resource type is <code>replication-group</code> and the unique identifier is the replication group name.
        /// Example: <code>replication-group/mycluster</code>.</p>
        /// </li>
        /// <li>
        /// <p>Neptune cluster - The resource type is <code>cluster</code> and the unique identifier is the cluster name. Example: <code>cluster:mycluster</code>.</p>
        /// </li>
        /// </ul>
        pub fn set_resource_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_resource_id(input);
            self
        }
        /// <p>The scalable dimension. This string consists of the service namespace, resource type, and scaling property.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>ecs:service:DesiredCount</code> - The desired task count of an ECS service.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>elasticmapreduce:instancegroup:InstanceCount</code> - The instance count of an EMR Instance Group.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>ec2:spot-fleet-request:TargetCapacity</code> - The target capacity of a Spot Fleet.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>appstream:fleet:DesiredCapacity</code> - The desired capacity of an AppStream 2.0 fleet.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>dynamodb:table:ReadCapacityUnits</code> - The provisioned read capacity for a DynamoDB table.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>dynamodb:table:WriteCapacityUnits</code> - The provisioned write capacity for a DynamoDB table.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>dynamodb:index:ReadCapacityUnits</code> - The provisioned read capacity for a DynamoDB global secondary index.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>dynamodb:index:WriteCapacityUnits</code> - The provisioned write capacity for a DynamoDB global secondary index.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>rds:cluster:ReadReplicaCount</code> - The count of Aurora Replicas in an Aurora DB cluster. Available for Aurora MySQL-compatible edition and Aurora PostgreSQL-compatible edition.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>sagemaker:variant:DesiredInstanceCount</code> - The number of EC2 instances for an SageMaker model endpoint variant.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>custom-resource:ResourceType:Property</code> - The scalable dimension for a custom resource provided by your own application or service.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>comprehend:document-classifier-endpoint:DesiredInferenceUnits</code> - The number of inference units for an Amazon Comprehend document classification endpoint.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>comprehend:entity-recognizer-endpoint:DesiredInferenceUnits</code> - The number of inference units for an Amazon Comprehend entity recognizer endpoint.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>lambda:function:ProvisionedConcurrency</code> - The provisioned concurrency for a Lambda function.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>cassandra:table:ReadCapacityUnits</code> - The provisioned read capacity for an Amazon Keyspaces table.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>cassandra:table:WriteCapacityUnits</code> - The provisioned write capacity for an Amazon Keyspaces table.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>kafka:broker-storage:VolumeSize</code> - The provisioned volume size (in GiB) for brokers in an Amazon MSK cluster.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>elasticache:replication-group:NodeGroups</code> - The number of node groups for an Amazon ElastiCache replication group.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>elasticache:replication-group:Replicas</code> - The number of replicas per node group for an Amazon ElastiCache replication group.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>neptune:cluster:ReadReplicaCount</code> - The count of read replicas in an Amazon Neptune DB cluster.</p>
        /// </li>
        /// </ul>
        pub fn scalable_dimension(mut self, inp: crate::model::ScalableDimension) -> Self {
            self.inner = self.inner.scalable_dimension(inp);
            self
        }
        /// <p>The scalable dimension. This string consists of the service namespace, resource type, and scaling property.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>ecs:service:DesiredCount</code> - The desired task count of an ECS service.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>elasticmapreduce:instancegroup:InstanceCount</code> - The instance count of an EMR Instance Group.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>ec2:spot-fleet-request:TargetCapacity</code> - The target capacity of a Spot Fleet.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>appstream:fleet:DesiredCapacity</code> - The desired capacity of an AppStream 2.0 fleet.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>dynamodb:table:ReadCapacityUnits</code> - The provisioned read capacity for a DynamoDB table.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>dynamodb:table:WriteCapacityUnits</code> - The provisioned write capacity for a DynamoDB table.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>dynamodb:index:ReadCapacityUnits</code> - The provisioned read capacity for a DynamoDB global secondary index.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>dynamodb:index:WriteCapacityUnits</code> - The provisioned write capacity for a DynamoDB global secondary index.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>rds:cluster:ReadReplicaCount</code> - The count of Aurora Replicas in an Aurora DB cluster. Available for Aurora MySQL-compatible edition and Aurora PostgreSQL-compatible edition.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>sagemaker:variant:DesiredInstanceCount</code> - The number of EC2 instances for an SageMaker model endpoint variant.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>custom-resource:ResourceType:Property</code> - The scalable dimension for a custom resource provided by your own application or service.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>comprehend:document-classifier-endpoint:DesiredInferenceUnits</code> - The number of inference units for an Amazon Comprehend document classification endpoint.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>comprehend:entity-recognizer-endpoint:DesiredInferenceUnits</code> - The number of inference units for an Amazon Comprehend entity recognizer endpoint.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>lambda:function:ProvisionedConcurrency</code> - The provisioned concurrency for a Lambda function.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>cassandra:table:ReadCapacityUnits</code> - The provisioned read capacity for an Amazon Keyspaces table.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>cassandra:table:WriteCapacityUnits</code> - The provisioned write capacity for an Amazon Keyspaces table.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>kafka:broker-storage:VolumeSize</code> - The provisioned volume size (in GiB) for brokers in an Amazon MSK cluster.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>elasticache:replication-group:NodeGroups</code> - The number of node groups for an Amazon ElastiCache replication group.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>elasticache:replication-group:Replicas</code> - The number of replicas per node group for an Amazon ElastiCache replication group.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>neptune:cluster:ReadReplicaCount</code> - The count of read replicas in an Amazon Neptune DB cluster.</p>
        /// </li>
        /// </ul>
        pub fn set_scalable_dimension(
            mut self,
            input: std::option::Option<crate::model::ScalableDimension>,
        ) -> Self {
            self.inner = self.inner.set_scalable_dimension(input);
            self
        }
        /// <p>The date and time for this scheduled action to start, in UTC.</p>
        pub fn start_time(mut self, inp: aws_smithy_types::DateTime) -> Self {
            self.inner = self.inner.start_time(inp);
            self
        }
        /// <p>The date and time for this scheduled action to start, in UTC.</p>
        pub fn set_start_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.inner = self.inner.set_start_time(input);
            self
        }
        /// <p>The date and time for the recurring schedule to end, in UTC.</p>
        pub fn end_time(mut self, inp: aws_smithy_types::DateTime) -> Self {
            self.inner = self.inner.end_time(inp);
            self
        }
        /// <p>The date and time for the recurring schedule to end, in UTC.</p>
        pub fn set_end_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.inner = self.inner.set_end_time(input);
            self
        }
        /// <p>The new minimum and maximum capacity. You can set both values or just one. At the
        /// scheduled time, if the current capacity is below the minimum capacity, Application Auto Scaling scales out
        /// to the minimum capacity. If the current capacity is above the maximum capacity, Application Auto Scaling
        /// scales in to the maximum capacity.</p>
        pub fn scalable_target_action(mut self, inp: crate::model::ScalableTargetAction) -> Self {
            self.inner = self.inner.scalable_target_action(inp);
            self
        }
        /// <p>The new minimum and maximum capacity. You can set both values or just one. At the
        /// scheduled time, if the current capacity is below the minimum capacity, Application Auto Scaling scales out
        /// to the minimum capacity. If the current capacity is above the maximum capacity, Application Auto Scaling
        /// scales in to the maximum capacity.</p>
        pub fn set_scalable_target_action(
            mut self,
            input: std::option::Option<crate::model::ScalableTargetAction>,
        ) -> Self {
            self.inner = self.inner.set_scalable_target_action(input);
            self
        }
    }
    /// Fluent builder constructing a request to `RegisterScalableTarget`.
    ///
    /// <p>Registers or updates a scalable target. </p>
    /// <p>A scalable target is a resource that Application Auto Scaling can scale out and scale in. Scalable
    /// targets are uniquely identified by the combination of resource ID, scalable dimension, and
    /// namespace. </p>
    /// <p>When you register a new scalable target, you must specify values for minimum and maximum
    /// capacity. Current capacity will be adjusted within the specified range when scaling starts.
    /// Application Auto Scaling scaling policies will not scale capacity to values that are outside of this
    /// range.</p>
    /// <p>After you register a scalable target, you do not need to register it again to use other
    /// Application Auto Scaling operations. To see which resources have been registered, use <a href="https://docs.aws.amazon.com/autoscaling/application/APIReference/API_DescribeScalableTargets.html">DescribeScalableTargets</a>. You can also view the scaling policies for a service
    /// namespace by using <a href="https://docs.aws.amazon.com/autoscaling/application/APIReference/API_DescribeScalableTargets.html">DescribeScalableTargets</a>. If you no longer need a scalable target, you can
    /// deregister it by using <a href="https://docs.aws.amazon.com/autoscaling/application/APIReference/API_DeregisterScalableTarget.html">DeregisterScalableTarget</a>.</p>
    /// <p>To update a scalable target, specify the parameters that you want to change. Include the
    /// parameters that identify the scalable target: resource ID, scalable dimension, and
    /// namespace. Any parameters that you don't specify are not changed by this update request. </p>
    /// <note>
    /// <p>If you call the <code>RegisterScalableTarget</code> API to update an existing
    /// scalable target, Application Auto Scaling retrieves the current capacity of the resource. If it is below
    /// the minimum capacity or above the maximum capacity, Application Auto Scaling adjusts the capacity of the
    /// scalable target to place it within these bounds, even if you don't include the
    /// <code>MinCapacity</code> or <code>MaxCapacity</code> request parameters.</p>
    /// </note>
    #[derive(std::fmt::Debug)]
    pub struct RegisterScalableTarget<
        C = aws_smithy_client::erase::DynConnector,
        M = crate::middleware::DefaultMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::register_scalable_target_input::Builder,
    }
    impl<C, M, R> RegisterScalableTarget<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `RegisterScalableTarget`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::RegisterScalableTargetOutput,
            aws_smithy_http::result::SdkError<crate::error::RegisterScalableTargetError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::RegisterScalableTargetInputOperationOutputAlias,
                crate::output::RegisterScalableTargetOutput,
                crate::error::RegisterScalableTargetError,
                crate::input::RegisterScalableTargetInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The namespace of the Amazon Web Services service that provides the resource. For a resource provided
        /// by your own application or service, use <code>custom-resource</code> instead.</p>
        pub fn service_namespace(mut self, inp: crate::model::ServiceNamespace) -> Self {
            self.inner = self.inner.service_namespace(inp);
            self
        }
        /// <p>The namespace of the Amazon Web Services service that provides the resource. For a resource provided
        /// by your own application or service, use <code>custom-resource</code> instead.</p>
        pub fn set_service_namespace(
            mut self,
            input: std::option::Option<crate::model::ServiceNamespace>,
        ) -> Self {
            self.inner = self.inner.set_service_namespace(input);
            self
        }
        /// <p>The identifier of the resource that is associated with the scalable target.
        /// This string consists of the resource type and unique identifier.</p>
        /// <ul>
        /// <li>
        /// <p>ECS service - The resource type is <code>service</code> and the unique identifier is the cluster name  
        /// and service name. Example: <code>service/default/sample-webapp</code>.</p>
        /// </li>
        /// <li>
        /// <p>Spot Fleet - The resource type is <code>spot-fleet-request</code> and the unique identifier is the
        /// Spot Fleet request ID. Example: <code>spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE</code>.</p>
        /// </li>
        /// <li>
        /// <p>EMR cluster - The resource type is <code>instancegroup</code> and the unique identifier is the cluster ID and instance group ID.
        /// Example: <code>instancegroup/j-2EEZNYKUA1NTV/ig-1791Y4E1L8YI0</code>.</p>
        /// </li>
        /// <li>
        /// <p>AppStream 2.0 fleet - The resource type is <code>fleet</code> and the unique identifier is the fleet name.
        /// Example: <code>fleet/sample-fleet</code>.</p>
        /// </li>
        /// <li>
        /// <p>DynamoDB table - The resource type is <code>table</code> and the unique identifier is the table name.
        /// Example: <code>table/my-table</code>.</p>
        /// </li>
        /// <li>
        /// <p>DynamoDB global secondary index - The resource type is <code>index</code> and the unique identifier is the index name.
        /// Example: <code>table/my-table/index/my-table-index</code>.</p>
        /// </li>
        /// <li>
        /// <p>Aurora DB cluster - The resource type is <code>cluster</code> and the unique identifier is the cluster name.
        /// Example: <code>cluster:my-db-cluster</code>.</p>
        /// </li>
        /// <li>
        /// <p>SageMaker endpoint variant - The resource type is <code>variant</code> and the unique identifier is the resource ID.
        /// Example: <code>endpoint/my-end-point/variant/KMeansClustering</code>.</p>
        /// </li>
        /// <li>
        /// <p>Custom resources are not supported with a resource type. This parameter must specify the <code>OutputValue</code> from the CloudFormation template stack used to access the resources. The unique identifier is defined by the service provider. More information
        /// is available in our <a href="https://github.com/aws/aws-auto-scaling-custom-resource">GitHub
        /// repository</a>.</p>
        /// </li>
        /// <li>
        /// <p>Amazon Comprehend document classification endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: <code>arn:aws:comprehend:us-west-2:123456789012:document-classifier-endpoint/EXAMPLE</code>.</p>
        /// </li>
        /// <li>
        /// <p>Amazon Comprehend entity recognizer endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: <code>arn:aws:comprehend:us-west-2:123456789012:entity-recognizer-endpoint/EXAMPLE</code>.</p>
        /// </li>
        /// <li>
        /// <p>Lambda provisioned concurrency - The resource type is <code>function</code> and the unique identifier is the function name with a function version or alias name suffix that is not <code>$LATEST</code>.
        /// Example: <code>function:my-function:prod</code> or <code>function:my-function:1</code>.</p>
        /// </li>
        /// <li>
        /// <p>Amazon Keyspaces table - The resource type is <code>table</code> and the unique identifier is the table name.
        /// Example: <code>keyspace/mykeyspace/table/mytable</code>.</p>
        /// </li>
        /// <li>
        /// <p>Amazon MSK cluster - The resource type and unique identifier are specified using the cluster ARN.
        /// Example: <code>arn:aws:kafka:us-east-1:123456789012:cluster/demo-cluster-1/6357e0b2-0e6a-4b86-a0b4-70df934c2e31-5</code>.</p>
        /// </li>
        /// <li>
        /// <p>Amazon ElastiCache replication group - The resource type is <code>replication-group</code> and the unique identifier is the replication group name.
        /// Example: <code>replication-group/mycluster</code>.</p>
        /// </li>
        /// <li>
        /// <p>Neptune cluster - The resource type is <code>cluster</code> and the unique identifier is the cluster name. Example: <code>cluster:mycluster</code>.</p>
        /// </li>
        /// </ul>
        pub fn resource_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_id(inp);
            self
        }
        /// <p>The identifier of the resource that is associated with the scalable target.
        /// This string consists of the resource type and unique identifier.</p>
        /// <ul>
        /// <li>
        /// <p>ECS service - The resource type is <code>service</code> and the unique identifier is the cluster name  
        /// and service name. Example: <code>service/default/sample-webapp</code>.</p>
        /// </li>
        /// <li>
        /// <p>Spot Fleet - The resource type is <code>spot-fleet-request</code> and the unique identifier is the
        /// Spot Fleet request ID. Example: <code>spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE</code>.</p>
        /// </li>
        /// <li>
        /// <p>EMR cluster - The resource type is <code>instancegroup</code> and the unique identifier is the cluster ID and instance group ID.
        /// Example: <code>instancegroup/j-2EEZNYKUA1NTV/ig-1791Y4E1L8YI0</code>.</p>
        /// </li>
        /// <li>
        /// <p>AppStream 2.0 fleet - The resource type is <code>fleet</code> and the unique identifier is the fleet name.
        /// Example: <code>fleet/sample-fleet</code>.</p>
        /// </li>
        /// <li>
        /// <p>DynamoDB table - The resource type is <code>table</code> and the unique identifier is the table name.
        /// Example: <code>table/my-table</code>.</p>
        /// </li>
        /// <li>
        /// <p>DynamoDB global secondary index - The resource type is <code>index</code> and the unique identifier is the index name.
        /// Example: <code>table/my-table/index/my-table-index</code>.</p>
        /// </li>
        /// <li>
        /// <p>Aurora DB cluster - The resource type is <code>cluster</code> and the unique identifier is the cluster name.
        /// Example: <code>cluster:my-db-cluster</code>.</p>
        /// </li>
        /// <li>
        /// <p>SageMaker endpoint variant - The resource type is <code>variant</code> and the unique identifier is the resource ID.
        /// Example: <code>endpoint/my-end-point/variant/KMeansClustering</code>.</p>
        /// </li>
        /// <li>
        /// <p>Custom resources are not supported with a resource type. This parameter must specify the <code>OutputValue</code> from the CloudFormation template stack used to access the resources. The unique identifier is defined by the service provider. More information
        /// is available in our <a href="https://github.com/aws/aws-auto-scaling-custom-resource">GitHub
        /// repository</a>.</p>
        /// </li>
        /// <li>
        /// <p>Amazon Comprehend document classification endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: <code>arn:aws:comprehend:us-west-2:123456789012:document-classifier-endpoint/EXAMPLE</code>.</p>
        /// </li>
        /// <li>
        /// <p>Amazon Comprehend entity recognizer endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: <code>arn:aws:comprehend:us-west-2:123456789012:entity-recognizer-endpoint/EXAMPLE</code>.</p>
        /// </li>
        /// <li>
        /// <p>Lambda provisioned concurrency - The resource type is <code>function</code> and the unique identifier is the function name with a function version or alias name suffix that is not <code>$LATEST</code>.
        /// Example: <code>function:my-function:prod</code> or <code>function:my-function:1</code>.</p>
        /// </li>
        /// <li>
        /// <p>Amazon Keyspaces table - The resource type is <code>table</code> and the unique identifier is the table name.
        /// Example: <code>keyspace/mykeyspace/table/mytable</code>.</p>
        /// </li>
        /// <li>
        /// <p>Amazon MSK cluster - The resource type and unique identifier are specified using the cluster ARN.
        /// Example: <code>arn:aws:kafka:us-east-1:123456789012:cluster/demo-cluster-1/6357e0b2-0e6a-4b86-a0b4-70df934c2e31-5</code>.</p>
        /// </li>
        /// <li>
        /// <p>Amazon ElastiCache replication group - The resource type is <code>replication-group</code> and the unique identifier is the replication group name.
        /// Example: <code>replication-group/mycluster</code>.</p>
        /// </li>
        /// <li>
        /// <p>Neptune cluster - The resource type is <code>cluster</code> and the unique identifier is the cluster name. Example: <code>cluster:mycluster</code>.</p>
        /// </li>
        /// </ul>
        pub fn set_resource_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_resource_id(input);
            self
        }
        /// <p>The scalable dimension associated with the scalable target.
        /// This string consists of the service namespace, resource type, and scaling property.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>ecs:service:DesiredCount</code> - The desired task count of an ECS service.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>elasticmapreduce:instancegroup:InstanceCount</code> - The instance count of an EMR Instance Group.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>ec2:spot-fleet-request:TargetCapacity</code> - The target capacity of a Spot Fleet.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>appstream:fleet:DesiredCapacity</code> - The desired capacity of an AppStream 2.0 fleet.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>dynamodb:table:ReadCapacityUnits</code> - The provisioned read capacity for a DynamoDB table.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>dynamodb:table:WriteCapacityUnits</code> - The provisioned write capacity for a DynamoDB table.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>dynamodb:index:ReadCapacityUnits</code> - The provisioned read capacity for a DynamoDB global secondary index.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>dynamodb:index:WriteCapacityUnits</code> - The provisioned write capacity for a DynamoDB global secondary index.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>rds:cluster:ReadReplicaCount</code> - The count of Aurora Replicas in an Aurora DB cluster. Available for Aurora MySQL-compatible edition and Aurora PostgreSQL-compatible edition.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>sagemaker:variant:DesiredInstanceCount</code> - The number of EC2 instances for an SageMaker model endpoint variant.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>custom-resource:ResourceType:Property</code> - The scalable dimension for a custom resource provided by your own application or service.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>comprehend:document-classifier-endpoint:DesiredInferenceUnits</code> - The number of inference units for an Amazon Comprehend document classification endpoint.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>comprehend:entity-recognizer-endpoint:DesiredInferenceUnits</code> - The number of inference units for an Amazon Comprehend entity recognizer endpoint.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>lambda:function:ProvisionedConcurrency</code> - The provisioned concurrency for a Lambda function.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>cassandra:table:ReadCapacityUnits</code> - The provisioned read capacity for an Amazon Keyspaces table.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>cassandra:table:WriteCapacityUnits</code> - The provisioned write capacity for an Amazon Keyspaces table.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>kafka:broker-storage:VolumeSize</code> - The provisioned volume size (in GiB) for brokers in an Amazon MSK cluster.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>elasticache:replication-group:NodeGroups</code> - The number of node groups for an Amazon ElastiCache replication group.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>elasticache:replication-group:Replicas</code> - The number of replicas per node group for an Amazon ElastiCache replication group.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>neptune:cluster:ReadReplicaCount</code> - The count of read replicas in an Amazon Neptune DB cluster.</p>
        /// </li>
        /// </ul>
        pub fn scalable_dimension(mut self, inp: crate::model::ScalableDimension) -> Self {
            self.inner = self.inner.scalable_dimension(inp);
            self
        }
        /// <p>The scalable dimension associated with the scalable target.
        /// This string consists of the service namespace, resource type, and scaling property.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>ecs:service:DesiredCount</code> - The desired task count of an ECS service.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>elasticmapreduce:instancegroup:InstanceCount</code> - The instance count of an EMR Instance Group.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>ec2:spot-fleet-request:TargetCapacity</code> - The target capacity of a Spot Fleet.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>appstream:fleet:DesiredCapacity</code> - The desired capacity of an AppStream 2.0 fleet.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>dynamodb:table:ReadCapacityUnits</code> - The provisioned read capacity for a DynamoDB table.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>dynamodb:table:WriteCapacityUnits</code> - The provisioned write capacity for a DynamoDB table.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>dynamodb:index:ReadCapacityUnits</code> - The provisioned read capacity for a DynamoDB global secondary index.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>dynamodb:index:WriteCapacityUnits</code> - The provisioned write capacity for a DynamoDB global secondary index.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>rds:cluster:ReadReplicaCount</code> - The count of Aurora Replicas in an Aurora DB cluster. Available for Aurora MySQL-compatible edition and Aurora PostgreSQL-compatible edition.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>sagemaker:variant:DesiredInstanceCount</code> - The number of EC2 instances for an SageMaker model endpoint variant.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>custom-resource:ResourceType:Property</code> - The scalable dimension for a custom resource provided by your own application or service.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>comprehend:document-classifier-endpoint:DesiredInferenceUnits</code> - The number of inference units for an Amazon Comprehend document classification endpoint.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>comprehend:entity-recognizer-endpoint:DesiredInferenceUnits</code> - The number of inference units for an Amazon Comprehend entity recognizer endpoint.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>lambda:function:ProvisionedConcurrency</code> - The provisioned concurrency for a Lambda function.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>cassandra:table:ReadCapacityUnits</code> - The provisioned read capacity for an Amazon Keyspaces table.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>cassandra:table:WriteCapacityUnits</code> - The provisioned write capacity for an Amazon Keyspaces table.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>kafka:broker-storage:VolumeSize</code> - The provisioned volume size (in GiB) for brokers in an Amazon MSK cluster.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>elasticache:replication-group:NodeGroups</code> - The number of node groups for an Amazon ElastiCache replication group.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>elasticache:replication-group:Replicas</code> - The number of replicas per node group for an Amazon ElastiCache replication group.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>neptune:cluster:ReadReplicaCount</code> - The count of read replicas in an Amazon Neptune DB cluster.</p>
        /// </li>
        /// </ul>
        pub fn set_scalable_dimension(
            mut self,
            input: std::option::Option<crate::model::ScalableDimension>,
        ) -> Self {
            self.inner = self.inner.set_scalable_dimension(input);
            self
        }
        /// <p>The minimum value that you plan to scale in to. When a scaling policy is in effect,
        /// Application Auto Scaling can scale in (contract) as needed to the minimum capacity limit in response to
        /// changing demand. This property is required when registering a new scalable target.</p>
        /// <p>For certain resources, the minimum value allowed is 0. This includes Lambda provisioned
        /// concurrency, Spot Fleet, ECS services, Aurora DB clusters, EMR clusters, and custom resources.
        /// For all other resources, the minimum value allowed is 1.</p>
        pub fn min_capacity(mut self, inp: i32) -> Self {
            self.inner = self.inner.min_capacity(inp);
            self
        }
        /// <p>The minimum value that you plan to scale in to. When a scaling policy is in effect,
        /// Application Auto Scaling can scale in (contract) as needed to the minimum capacity limit in response to
        /// changing demand. This property is required when registering a new scalable target.</p>
        /// <p>For certain resources, the minimum value allowed is 0. This includes Lambda provisioned
        /// concurrency, Spot Fleet, ECS services, Aurora DB clusters, EMR clusters, and custom resources.
        /// For all other resources, the minimum value allowed is 1.</p>
        pub fn set_min_capacity(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_min_capacity(input);
            self
        }
        /// <p>The maximum value that you plan to scale out to. When a scaling policy is in effect,
        /// Application Auto Scaling can scale out (expand) as needed to the maximum capacity limit in response to
        /// changing demand. This property is required when registering a new scalable target.</p>
        /// <p>Although you can specify a large maximum capacity, note that service quotas may impose
        /// lower limits. Each service has its own default quotas for the maximum capacity of the
        /// resource. If you want to specify a higher limit, you can request an increase. For more
        /// information, consult the documentation for that service. For information about the default
        /// quotas for each service, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-service-information.html">Service Endpoints and
        /// Quotas</a> in the <i>Amazon Web Services General Reference</i>.</p>
        pub fn max_capacity(mut self, inp: i32) -> Self {
            self.inner = self.inner.max_capacity(inp);
            self
        }
        /// <p>The maximum value that you plan to scale out to. When a scaling policy is in effect,
        /// Application Auto Scaling can scale out (expand) as needed to the maximum capacity limit in response to
        /// changing demand. This property is required when registering a new scalable target.</p>
        /// <p>Although you can specify a large maximum capacity, note that service quotas may impose
        /// lower limits. Each service has its own default quotas for the maximum capacity of the
        /// resource. If you want to specify a higher limit, you can request an increase. For more
        /// information, consult the documentation for that service. For information about the default
        /// quotas for each service, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-service-information.html">Service Endpoints and
        /// Quotas</a> in the <i>Amazon Web Services General Reference</i>.</p>
        pub fn set_max_capacity(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_capacity(input);
            self
        }
        /// <p>This parameter is required for services that do not support service-linked roles (such as
        /// Amazon EMR), and it must specify the ARN of an IAM role that allows Application Auto Scaling to modify the scalable
        /// target on your behalf. </p>
        /// <p>If the service supports service-linked roles, Application Auto Scaling uses a service-linked role, which
        /// it creates if it does not yet exist. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/application/userguide/security_iam_service-with-iam.html#security_iam_service-with-iam-roles">Application Auto Scaling IAM roles</a>.</p>
        pub fn role_arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.role_arn(inp);
            self
        }
        /// <p>This parameter is required for services that do not support service-linked roles (such as
        /// Amazon EMR), and it must specify the ARN of an IAM role that allows Application Auto Scaling to modify the scalable
        /// target on your behalf. </p>
        /// <p>If the service supports service-linked roles, Application Auto Scaling uses a service-linked role, which
        /// it creates if it does not yet exist. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/application/userguide/security_iam_service-with-iam.html#security_iam_service-with-iam-roles">Application Auto Scaling IAM roles</a>.</p>
        pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_role_arn(input);
            self
        }
        /// <p>An embedded object that contains attributes and attribute values that are used to
        /// suspend and resume automatic scaling. Setting the value of an attribute to
        /// <code>true</code> suspends the specified scaling activities. Setting it to
        /// <code>false</code> (default) resumes the specified scaling activities. </p>
        /// <p>
        /// <b>Suspension Outcomes</b>
        /// </p>
        /// <ul>
        /// <li>
        /// <p>For <code>DynamicScalingInSuspended</code>, while a suspension is in effect, all
        /// scale-in activities that are triggered by a scaling policy are suspended.</p>
        /// </li>
        /// <li>
        /// <p>For <code>DynamicScalingOutSuspended</code>, while a suspension is in effect, all
        /// scale-out activities that are triggered by a scaling policy are suspended.</p>
        /// </li>
        /// <li>
        /// <p>For <code>ScheduledScalingSuspended</code>, while a suspension is in effect, all
        /// scaling activities that involve scheduled actions are suspended. </p>
        /// </li>
        /// </ul>
        /// <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/application/userguide/application-auto-scaling-suspend-resume-scaling.html">Suspending and resuming scaling</a> in the <i>Application Auto Scaling User
        /// Guide</i>.</p>
        pub fn suspended_state(mut self, inp: crate::model::SuspendedState) -> Self {
            self.inner = self.inner.suspended_state(inp);
            self
        }
        /// <p>An embedded object that contains attributes and attribute values that are used to
        /// suspend and resume automatic scaling. Setting the value of an attribute to
        /// <code>true</code> suspends the specified scaling activities. Setting it to
        /// <code>false</code> (default) resumes the specified scaling activities. </p>
        /// <p>
        /// <b>Suspension Outcomes</b>
        /// </p>
        /// <ul>
        /// <li>
        /// <p>For <code>DynamicScalingInSuspended</code>, while a suspension is in effect, all
        /// scale-in activities that are triggered by a scaling policy are suspended.</p>
        /// </li>
        /// <li>
        /// <p>For <code>DynamicScalingOutSuspended</code>, while a suspension is in effect, all
        /// scale-out activities that are triggered by a scaling policy are suspended.</p>
        /// </li>
        /// <li>
        /// <p>For <code>ScheduledScalingSuspended</code>, while a suspension is in effect, all
        /// scaling activities that involve scheduled actions are suspended. </p>
        /// </li>
        /// </ul>
        /// <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/application/userguide/application-auto-scaling-suspend-resume-scaling.html">Suspending and resuming scaling</a> in the <i>Application Auto Scaling User
        /// Guide</i>.</p>
        pub fn set_suspended_state(
            mut self,
            input: std::option::Option<crate::model::SuspendedState>,
        ) -> Self {
            self.inner = self.inner.set_suspended_state(input);
            self
        }
    }
}
impl<C> Client<C, crate::middleware::DefaultMiddleware, aws_smithy_client::retry::Standard> {
    /// Creates a client with the given service config and connector override.
    pub fn from_conf_conn(conf: crate::Config, conn: C) -> Self {
        let retry_config = conf.retry_config.as_ref().cloned().unwrap_or_default();
        let timeout_config = conf.timeout_config.as_ref().cloned().unwrap_or_default();
        let sleep_impl = conf.sleep_impl.clone();
        let mut builder = aws_smithy_client::Builder::new()
            .connector(conn)
            .middleware(crate::middleware::DefaultMiddleware::new());
        builder.set_retry_config(retry_config.into());
        builder.set_timeout_config(timeout_config);
        if let Some(sleep_impl) = sleep_impl {
            builder.set_sleep_impl(Some(sleep_impl));
        }
        let client = builder.build();
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}
impl
    Client<
        aws_smithy_client::erase::DynConnector,
        crate::middleware::DefaultMiddleware,
        aws_smithy_client::retry::Standard,
    >
{
    /// Creates a new client from a shared config.
    #[cfg(any(feature = "rustls", feature = "native-tls"))]
    pub fn new(config: &aws_types::config::Config) -> Self {
        Self::from_conf(config.into())
    }

    /// Creates a new client from the service [`Config`](crate::Config).
    #[cfg(any(feature = "rustls", feature = "native-tls"))]
    pub fn from_conf(conf: crate::Config) -> Self {
        let retry_config = conf.retry_config.as_ref().cloned().unwrap_or_default();
        let timeout_config = conf.timeout_config.as_ref().cloned().unwrap_or_default();
        let sleep_impl = conf.sleep_impl.clone();
        let mut builder = aws_smithy_client::Builder::dyn_https()
            .middleware(crate::middleware::DefaultMiddleware::new());
        builder.set_retry_config(retry_config.into());
        builder.set_timeout_config(timeout_config);
        // the builder maintains a try-state. To avoid suppressing the warning when sleep is unset,
        // only set it if we actually have a sleep impl.
        if let Some(sleep_impl) = sleep_impl {
            builder.set_sleep_impl(Some(sleep_impl));
        }
        let client = builder.build();

        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}
