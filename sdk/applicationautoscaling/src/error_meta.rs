// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>Concurrent updates caused an exception, for example, if you request an update to an Application Auto Scaling resource that already has a pending update.</p>
    ConcurrentUpdateException(crate::error::ConcurrentUpdateException),
    /// <p>Failed access to resources caused an exception. This exception is thrown when Application Auto Scaling is unable to retrieve the alarms associated with a scaling policy due to a client error, for example, if the role ARN specified for a scalable target does not have permission to call the CloudWatch <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_DescribeAlarms.html">DescribeAlarms</a> on your behalf.</p>
    FailedResourceAccessException(crate::error::FailedResourceAccessException),
    /// <p>The service encountered an internal error.</p>
    InternalServiceException(crate::error::InternalServiceException),
    /// <p>The next token supplied was invalid.</p>
    InvalidNextTokenException(crate::error::InvalidNextTokenException),
    /// <p>A per-account resource limit is exceeded. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/application/userguide/application-auto-scaling-limits.html">Application Auto Scaling service quotas</a>.</p>
    LimitExceededException(crate::error::LimitExceededException),
    /// <p>The specified object could not be found. For any operation that depends on the existence of a scalable target, this exception is thrown if the scalable target with the specified service namespace, resource ID, and scalable dimension does not exist. For any operation that deletes or deregisters a resource, this exception is thrown if the resource cannot be found.</p>
    ObjectNotFoundException(crate::error::ObjectNotFoundException),
    /// <p>An exception was thrown for a validation issue. Review the available parameters for the API request.</p>
    ValidationException(crate::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::ConcurrentUpdateException(inner) => inner.fmt(f),
            Error::FailedResourceAccessException(inner) => inner.fmt(f),
            Error::InternalServiceException(inner) => inner.fmt(f),
            Error::InvalidNextTokenException(inner) => inner.fmt(f),
            Error::LimitExceededException(inner) => inner.fmt(f),
            Error::ObjectNotFoundException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteScalingPolicyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteScalingPolicyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteScalingPolicyError> for Error {
    fn from(err: crate::error::DeleteScalingPolicyError) -> Self {
        match err {
            crate::error::DeleteScalingPolicyError::ConcurrentUpdateException(inner) => {
                Error::ConcurrentUpdateException(inner)
            }
            crate::error::DeleteScalingPolicyError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::DeleteScalingPolicyError::ObjectNotFoundException(inner) => {
                Error::ObjectNotFoundException(inner)
            }
            crate::error::DeleteScalingPolicyError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteScalingPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteScheduledActionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteScheduledActionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteScheduledActionError> for Error {
    fn from(err: crate::error::DeleteScheduledActionError) -> Self {
        match err {
            crate::error::DeleteScheduledActionError::ConcurrentUpdateException(inner) => {
                Error::ConcurrentUpdateException(inner)
            }
            crate::error::DeleteScheduledActionError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::DeleteScheduledActionError::ObjectNotFoundException(inner) => {
                Error::ObjectNotFoundException(inner)
            }
            crate::error::DeleteScheduledActionError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteScheduledActionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeregisterScalableTargetError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeregisterScalableTargetError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeregisterScalableTargetError> for Error {
    fn from(err: crate::error::DeregisterScalableTargetError) -> Self {
        match err {
            crate::error::DeregisterScalableTargetError::ConcurrentUpdateException(inner) => {
                Error::ConcurrentUpdateException(inner)
            }
            crate::error::DeregisterScalableTargetError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::DeregisterScalableTargetError::ObjectNotFoundException(inner) => {
                Error::ObjectNotFoundException(inner)
            }
            crate::error::DeregisterScalableTargetError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeregisterScalableTargetError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeScalableTargetsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeScalableTargetsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeScalableTargetsError> for Error {
    fn from(err: crate::error::DescribeScalableTargetsError) -> Self {
        match err {
            crate::error::DescribeScalableTargetsError::ConcurrentUpdateException(inner) => {
                Error::ConcurrentUpdateException(inner)
            }
            crate::error::DescribeScalableTargetsError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::DescribeScalableTargetsError::InvalidNextTokenException(inner) => {
                Error::InvalidNextTokenException(inner)
            }
            crate::error::DescribeScalableTargetsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DescribeScalableTargetsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeScalingActivitiesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeScalingActivitiesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeScalingActivitiesError> for Error {
    fn from(err: crate::error::DescribeScalingActivitiesError) -> Self {
        match err {
            crate::error::DescribeScalingActivitiesError::ConcurrentUpdateException(inner) => {
                Error::ConcurrentUpdateException(inner)
            }
            crate::error::DescribeScalingActivitiesError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::DescribeScalingActivitiesError::InvalidNextTokenException(inner) => {
                Error::InvalidNextTokenException(inner)
            }
            crate::error::DescribeScalingActivitiesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DescribeScalingActivitiesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeScalingPoliciesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeScalingPoliciesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeScalingPoliciesError> for Error {
    fn from(err: crate::error::DescribeScalingPoliciesError) -> Self {
        match err {
            crate::error::DescribeScalingPoliciesError::ConcurrentUpdateException(inner) => {
                Error::ConcurrentUpdateException(inner)
            }
            crate::error::DescribeScalingPoliciesError::FailedResourceAccessException(inner) => {
                Error::FailedResourceAccessException(inner)
            }
            crate::error::DescribeScalingPoliciesError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::DescribeScalingPoliciesError::InvalidNextTokenException(inner) => {
                Error::InvalidNextTokenException(inner)
            }
            crate::error::DescribeScalingPoliciesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DescribeScalingPoliciesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeScheduledActionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeScheduledActionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeScheduledActionsError> for Error {
    fn from(err: crate::error::DescribeScheduledActionsError) -> Self {
        match err {
            crate::error::DescribeScheduledActionsError::ConcurrentUpdateException(inner) => {
                Error::ConcurrentUpdateException(inner)
            }
            crate::error::DescribeScheduledActionsError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::DescribeScheduledActionsError::InvalidNextTokenException(inner) => {
                Error::InvalidNextTokenException(inner)
            }
            crate::error::DescribeScheduledActionsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DescribeScheduledActionsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutScalingPolicyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::PutScalingPolicyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutScalingPolicyError> for Error {
    fn from(err: crate::error::PutScalingPolicyError) -> Self {
        match err {
            crate::error::PutScalingPolicyError::ConcurrentUpdateException(inner) => {
                Error::ConcurrentUpdateException(inner)
            }
            crate::error::PutScalingPolicyError::FailedResourceAccessException(inner) => {
                Error::FailedResourceAccessException(inner)
            }
            crate::error::PutScalingPolicyError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::PutScalingPolicyError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::PutScalingPolicyError::ObjectNotFoundException(inner) => {
                Error::ObjectNotFoundException(inner)
            }
            crate::error::PutScalingPolicyError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::PutScalingPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutScheduledActionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::PutScheduledActionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutScheduledActionError> for Error {
    fn from(err: crate::error::PutScheduledActionError) -> Self {
        match err {
            crate::error::PutScheduledActionError::ConcurrentUpdateException(inner) => {
                Error::ConcurrentUpdateException(inner)
            }
            crate::error::PutScheduledActionError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::PutScheduledActionError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::PutScheduledActionError::ObjectNotFoundException(inner) => {
                Error::ObjectNotFoundException(inner)
            }
            crate::error::PutScheduledActionError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::PutScheduledActionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RegisterScalableTargetError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::RegisterScalableTargetError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RegisterScalableTargetError> for Error {
    fn from(err: crate::error::RegisterScalableTargetError) -> Self {
        match err {
            crate::error::RegisterScalableTargetError::ConcurrentUpdateException(inner) => {
                Error::ConcurrentUpdateException(inner)
            }
            crate::error::RegisterScalableTargetError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::RegisterScalableTargetError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::RegisterScalableTargetError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::RegisterScalableTargetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::ConcurrentUpdateException(e) => e.request_id(),
            Self::FailedResourceAccessException(e) => e.request_id(),
            Self::InternalServiceException(e) => e.request_id(),
            Self::InvalidNextTokenException(e) => e.request_id(),
            Self::LimitExceededException(e) => e.request_id(),
            Self::ObjectNotFoundException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
