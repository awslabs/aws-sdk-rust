// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>Concurrent updates caused an exception, for example, if you request an update to an Application Auto Scaling resource that already has a pending update.</p>
    ConcurrentUpdateException(crate::types::error::ConcurrentUpdateException),
    /// <p>Failed access to resources caused an exception. This exception is thrown when Application Auto Scaling is unable to retrieve the alarms associated with a scaling policy due to a client error, for example, if the role ARN specified for a scalable target does not have permission to call the CloudWatch <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_DescribeAlarms.html">DescribeAlarms</a> on your behalf.</p>
    FailedResourceAccessException(crate::types::error::FailedResourceAccessException),
    /// <p>The service encountered an internal error.</p>
    InternalServiceException(crate::types::error::InternalServiceException),
    /// <p>The next token supplied was invalid.</p>
    InvalidNextTokenException(crate::types::error::InvalidNextTokenException),
    /// <p>A per-account resource limit is exceeded. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/application/userguide/application-auto-scaling-limits.html">Application Auto Scaling service quotas</a>.</p>
    LimitExceededException(crate::types::error::LimitExceededException),
    /// <p>The specified object could not be found. For any operation that depends on the existence of a scalable target, this exception is thrown if the scalable target with the specified service namespace, resource ID, and scalable dimension does not exist. For any operation that deletes or deregisters a resource, this exception is thrown if the resource cannot be found.</p>
    ObjectNotFoundException(crate::types::error::ObjectNotFoundException),
    /// <p>An exception was thrown for a validation issue. Review the available parameters for the API request.</p>
    ValidationException(crate::types::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::ConcurrentUpdateException(inner) => inner.fmt(f),
            Error::FailedResourceAccessException(inner) => inner.fmt(f),
            Error::InternalServiceException(inner) => inner.fmt(f),
            Error::InvalidNextTokenException(inner) => inner.fmt(f),
            Error::LimitExceededException(inner) => inner.fmt(f),
            Error::ObjectNotFoundException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_scaling_policy::DeleteScalingPolicyError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_scaling_policy::DeleteScalingPolicyError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_scaling_policy::DeleteScalingPolicyError> for Error {
    fn from(err: crate::operation::delete_scaling_policy::DeleteScalingPolicyError) -> Self {
        match err {
            crate::operation::delete_scaling_policy::DeleteScalingPolicyError::ConcurrentUpdateException(inner) => Error::ConcurrentUpdateException(inner),
            crate::operation::delete_scaling_policy::DeleteScalingPolicyError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::operation::delete_scaling_policy::DeleteScalingPolicyError::ObjectNotFoundException(inner) => Error::ObjectNotFoundException(inner),
            crate::operation::delete_scaling_policy::DeleteScalingPolicyError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_scaling_policy::DeleteScalingPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_scheduled_action::DeleteScheduledActionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_scheduled_action::DeleteScheduledActionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_scheduled_action::DeleteScheduledActionError> for Error {
    fn from(err: crate::operation::delete_scheduled_action::DeleteScheduledActionError) -> Self {
        match err {
            crate::operation::delete_scheduled_action::DeleteScheduledActionError::ConcurrentUpdateException(inner) => Error::ConcurrentUpdateException(inner),
            crate::operation::delete_scheduled_action::DeleteScheduledActionError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::operation::delete_scheduled_action::DeleteScheduledActionError::ObjectNotFoundException(inner) => Error::ObjectNotFoundException(inner),
            crate::operation::delete_scheduled_action::DeleteScheduledActionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_scheduled_action::DeleteScheduledActionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::deregister_scalable_target::DeregisterScalableTargetError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::deregister_scalable_target::DeregisterScalableTargetError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::deregister_scalable_target::DeregisterScalableTargetError> for Error {
    fn from(
        err: crate::operation::deregister_scalable_target::DeregisterScalableTargetError,
    ) -> Self {
        match err {
            crate::operation::deregister_scalable_target::DeregisterScalableTargetError::ConcurrentUpdateException(inner) => Error::ConcurrentUpdateException(inner),
            crate::operation::deregister_scalable_target::DeregisterScalableTargetError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::operation::deregister_scalable_target::DeregisterScalableTargetError::ObjectNotFoundException(inner) => Error::ObjectNotFoundException(inner),
            crate::operation::deregister_scalable_target::DeregisterScalableTargetError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::deregister_scalable_target::DeregisterScalableTargetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_scalable_targets::DescribeScalableTargetsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_scalable_targets::DescribeScalableTargetsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_scalable_targets::DescribeScalableTargetsError> for Error {
    fn from(
        err: crate::operation::describe_scalable_targets::DescribeScalableTargetsError,
    ) -> Self {
        match err {
            crate::operation::describe_scalable_targets::DescribeScalableTargetsError::ConcurrentUpdateException(inner) => Error::ConcurrentUpdateException(inner),
            crate::operation::describe_scalable_targets::DescribeScalableTargetsError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::operation::describe_scalable_targets::DescribeScalableTargetsError::InvalidNextTokenException(inner) => Error::InvalidNextTokenException(inner),
            crate::operation::describe_scalable_targets::DescribeScalableTargetsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::describe_scalable_targets::DescribeScalableTargetsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_scaling_activities::DescribeScalingActivitiesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_scaling_activities::DescribeScalingActivitiesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_scaling_activities::DescribeScalingActivitiesError> for Error {
    fn from(
        err: crate::operation::describe_scaling_activities::DescribeScalingActivitiesError,
    ) -> Self {
        match err {
            crate::operation::describe_scaling_activities::DescribeScalingActivitiesError::ConcurrentUpdateException(inner) => Error::ConcurrentUpdateException(inner),
            crate::operation::describe_scaling_activities::DescribeScalingActivitiesError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::operation::describe_scaling_activities::DescribeScalingActivitiesError::InvalidNextTokenException(inner) => Error::InvalidNextTokenException(inner),
            crate::operation::describe_scaling_activities::DescribeScalingActivitiesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::describe_scaling_activities::DescribeScalingActivitiesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_scaling_policies::DescribeScalingPoliciesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_scaling_policies::DescribeScalingPoliciesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_scaling_policies::DescribeScalingPoliciesError> for Error {
    fn from(
        err: crate::operation::describe_scaling_policies::DescribeScalingPoliciesError,
    ) -> Self {
        match err {
            crate::operation::describe_scaling_policies::DescribeScalingPoliciesError::ConcurrentUpdateException(inner) => Error::ConcurrentUpdateException(inner),
            crate::operation::describe_scaling_policies::DescribeScalingPoliciesError::FailedResourceAccessException(inner) => Error::FailedResourceAccessException(inner),
            crate::operation::describe_scaling_policies::DescribeScalingPoliciesError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::operation::describe_scaling_policies::DescribeScalingPoliciesError::InvalidNextTokenException(inner) => Error::InvalidNextTokenException(inner),
            crate::operation::describe_scaling_policies::DescribeScalingPoliciesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::describe_scaling_policies::DescribeScalingPoliciesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_scheduled_actions::DescribeScheduledActionsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_scheduled_actions::DescribeScheduledActionsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_scheduled_actions::DescribeScheduledActionsError> for Error {
    fn from(
        err: crate::operation::describe_scheduled_actions::DescribeScheduledActionsError,
    ) -> Self {
        match err {
            crate::operation::describe_scheduled_actions::DescribeScheduledActionsError::ConcurrentUpdateException(inner) => Error::ConcurrentUpdateException(inner),
            crate::operation::describe_scheduled_actions::DescribeScheduledActionsError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::operation::describe_scheduled_actions::DescribeScheduledActionsError::InvalidNextTokenException(inner) => Error::InvalidNextTokenException(inner),
            crate::operation::describe_scheduled_actions::DescribeScheduledActionsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::describe_scheduled_actions::DescribeScheduledActionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::put_scaling_policy::PutScalingPolicyError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::put_scaling_policy::PutScalingPolicyError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::put_scaling_policy::PutScalingPolicyError> for Error {
    fn from(err: crate::operation::put_scaling_policy::PutScalingPolicyError) -> Self {
        match err {
            crate::operation::put_scaling_policy::PutScalingPolicyError::ConcurrentUpdateException(inner) => Error::ConcurrentUpdateException(inner),
            crate::operation::put_scaling_policy::PutScalingPolicyError::FailedResourceAccessException(inner) => Error::FailedResourceAccessException(inner),
            crate::operation::put_scaling_policy::PutScalingPolicyError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::operation::put_scaling_policy::PutScalingPolicyError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::put_scaling_policy::PutScalingPolicyError::ObjectNotFoundException(inner) => Error::ObjectNotFoundException(inner),
            crate::operation::put_scaling_policy::PutScalingPolicyError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::put_scaling_policy::PutScalingPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::put_scheduled_action::PutScheduledActionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::put_scheduled_action::PutScheduledActionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::put_scheduled_action::PutScheduledActionError> for Error {
    fn from(err: crate::operation::put_scheduled_action::PutScheduledActionError) -> Self {
        match err {
            crate::operation::put_scheduled_action::PutScheduledActionError::ConcurrentUpdateException(inner) => Error::ConcurrentUpdateException(inner),
            crate::operation::put_scheduled_action::PutScheduledActionError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::operation::put_scheduled_action::PutScheduledActionError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::put_scheduled_action::PutScheduledActionError::ObjectNotFoundException(inner) => Error::ObjectNotFoundException(inner),
            crate::operation::put_scheduled_action::PutScheduledActionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::put_scheduled_action::PutScheduledActionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::register_scalable_target::RegisterScalableTargetError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::register_scalable_target::RegisterScalableTargetError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::register_scalable_target::RegisterScalableTargetError> for Error {
    fn from(err: crate::operation::register_scalable_target::RegisterScalableTargetError) -> Self {
        match err {
            crate::operation::register_scalable_target::RegisterScalableTargetError::ConcurrentUpdateException(inner) => Error::ConcurrentUpdateException(inner),
            crate::operation::register_scalable_target::RegisterScalableTargetError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::operation::register_scalable_target::RegisterScalableTargetError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::register_scalable_target::RegisterScalableTargetError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::register_scalable_target::RegisterScalableTargetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::ConcurrentUpdateException(e) => e.request_id(),
            Self::FailedResourceAccessException(e) => e.request_id(),
            Self::InternalServiceException(e) => e.request_id(),
            Self::InvalidNextTokenException(e) => e.request_id(),
            Self::LimitExceededException(e) => e.request_id(),
            Self::ObjectNotFoundException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
