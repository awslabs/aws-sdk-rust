// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn put_scaling_policy_output_correct_errors(
    mut builder: crate::operation::put_scaling_policy::builders::PutScalingPolicyOutputBuilder,
) -> crate::operation::put_scaling_policy::builders::PutScalingPolicyOutputBuilder {
    if builder.policy_arn.is_none() {
        builder.policy_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn alarm_correct_errors(mut builder: crate::types::builders::AlarmBuilder) -> crate::types::builders::AlarmBuilder {
    if builder.alarm_name.is_none() {
        builder.alarm_name = Some(Default::default())
    }
    if builder.alarm_arn.is_none() {
        builder.alarm_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn scalable_target_correct_errors(
    mut builder: crate::types::builders::ScalableTargetBuilder,
) -> crate::types::builders::ScalableTargetBuilder {
    if builder.service_namespace.is_none() {
        builder.service_namespace = "no value was set".parse::<crate::types::ServiceNamespace>().ok()
    }
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    if builder.scalable_dimension.is_none() {
        builder.scalable_dimension = "no value was set".parse::<crate::types::ScalableDimension>().ok()
    }
    if builder.min_capacity.is_none() {
        builder.min_capacity = Some(Default::default())
    }
    if builder.max_capacity.is_none() {
        builder.max_capacity = Some(Default::default())
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn scaling_activity_correct_errors(
    mut builder: crate::types::builders::ScalingActivityBuilder,
) -> crate::types::builders::ScalingActivityBuilder {
    if builder.activity_id.is_none() {
        builder.activity_id = Some(Default::default())
    }
    if builder.service_namespace.is_none() {
        builder.service_namespace = "no value was set".parse::<crate::types::ServiceNamespace>().ok()
    }
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    if builder.scalable_dimension.is_none() {
        builder.scalable_dimension = "no value was set".parse::<crate::types::ScalableDimension>().ok()
    }
    if builder.description.is_none() {
        builder.description = Some(Default::default())
    }
    if builder.cause.is_none() {
        builder.cause = Some(Default::default())
    }
    if builder.start_time.is_none() {
        builder.start_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.status_code.is_none() {
        builder.status_code = "no value was set".parse::<crate::types::ScalingActivityStatusCode>().ok()
    }
    builder
}

pub(crate) fn scaling_policy_correct_errors(
    mut builder: crate::types::builders::ScalingPolicyBuilder,
) -> crate::types::builders::ScalingPolicyBuilder {
    if builder.policy_arn.is_none() {
        builder.policy_arn = Some(Default::default())
    }
    if builder.policy_name.is_none() {
        builder.policy_name = Some(Default::default())
    }
    if builder.service_namespace.is_none() {
        builder.service_namespace = "no value was set".parse::<crate::types::ServiceNamespace>().ok()
    }
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    if builder.scalable_dimension.is_none() {
        builder.scalable_dimension = "no value was set".parse::<crate::types::ScalableDimension>().ok()
    }
    if builder.policy_type.is_none() {
        builder.policy_type = "no value was set".parse::<crate::types::PolicyType>().ok()
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn scheduled_action_correct_errors(
    mut builder: crate::types::builders::ScheduledActionBuilder,
) -> crate::types::builders::ScheduledActionBuilder {
    if builder.scheduled_action_name.is_none() {
        builder.scheduled_action_name = Some(Default::default())
    }
    if builder.scheduled_action_arn.is_none() {
        builder.scheduled_action_arn = Some(Default::default())
    }
    if builder.service_namespace.is_none() {
        builder.service_namespace = "no value was set".parse::<crate::types::ServiceNamespace>().ok()
    }
    if builder.schedule.is_none() {
        builder.schedule = Some(Default::default())
    }
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn target_tracking_scaling_policy_configuration_correct_errors(
    mut builder: crate::types::builders::TargetTrackingScalingPolicyConfigurationBuilder,
) -> crate::types::builders::TargetTrackingScalingPolicyConfigurationBuilder {
    if builder.target_value.is_none() {
        builder.target_value = Some(Default::default())
    }
    builder
}

pub(crate) fn not_scaled_reason_correct_errors(
    mut builder: crate::types::builders::NotScaledReasonBuilder,
) -> crate::types::builders::NotScaledReasonBuilder {
    if builder.code.is_none() {
        builder.code = Some(Default::default())
    }
    builder
}

pub(crate) fn predefined_metric_specification_correct_errors(
    mut builder: crate::types::builders::PredefinedMetricSpecificationBuilder,
) -> crate::types::builders::PredefinedMetricSpecificationBuilder {
    if builder.predefined_metric_type.is_none() {
        builder.predefined_metric_type = "no value was set".parse::<crate::types::MetricType>().ok()
    }
    builder
}

pub(crate) fn step_adjustment_correct_errors(
    mut builder: crate::types::builders::StepAdjustmentBuilder,
) -> crate::types::builders::StepAdjustmentBuilder {
    if builder.scaling_adjustment.is_none() {
        builder.scaling_adjustment = Some(Default::default())
    }
    builder
}

pub(crate) fn metric_dimension_correct_errors(
    mut builder: crate::types::builders::MetricDimensionBuilder,
) -> crate::types::builders::MetricDimensionBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn target_tracking_metric_data_query_correct_errors(
    mut builder: crate::types::builders::TargetTrackingMetricDataQueryBuilder,
) -> crate::types::builders::TargetTrackingMetricDataQueryBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    builder
}

pub(crate) fn target_tracking_metric_stat_correct_errors(
    mut builder: crate::types::builders::TargetTrackingMetricStatBuilder,
) -> crate::types::builders::TargetTrackingMetricStatBuilder {
    if builder.metric.is_none() {
        builder.metric = {
            let builder = crate::types::builders::TargetTrackingMetricBuilder::default();
            Some(builder.build())
        }
    }
    if builder.stat.is_none() {
        builder.stat = Some(Default::default())
    }
    builder
}

pub(crate) fn target_tracking_metric_dimension_correct_errors(
    mut builder: crate::types::builders::TargetTrackingMetricDimensionBuilder,
) -> crate::types::builders::TargetTrackingMetricDimensionBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}
