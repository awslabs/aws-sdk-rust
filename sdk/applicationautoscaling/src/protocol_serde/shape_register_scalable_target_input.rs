// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_register_scalable_target_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::register_scalable_target::RegisterScalableTargetInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.service_namespace {
        object.key("ServiceNamespace").string(var_1.as_str());
    }
    if let Some(var_2) = &input.resource_id {
        object.key("ResourceId").string(var_2.as_str());
    }
    if let Some(var_3) = &input.scalable_dimension {
        object.key("ScalableDimension").string(var_3.as_str());
    }
    if let Some(var_4) = &input.min_capacity {
        object.key("MinCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4).into()),
        );
    }
    if let Some(var_5) = &input.max_capacity {
        object.key("MaxCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5).into()),
        );
    }
    if let Some(var_6) = &input.role_arn {
        object.key("RoleARN").string(var_6.as_str());
    }
    if let Some(var_7) = &input.suspended_state {
        #[allow(unused_mut)]
        let mut object_8 = object.key("SuspendedState").start_object();
        crate::protocol_serde::shape_suspended_state::ser_suspended_state(&mut object_8, var_7)?;
        object_8.finish();
    }
    Ok(())
}
