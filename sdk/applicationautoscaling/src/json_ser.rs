// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_delete_scaling_policy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteScalingPolicyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.policy_name {
        object.key("PolicyName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.service_namespace {
        object.key("ServiceNamespace").string(var_2.as_str());
    }
    if let Some(var_3) = &input.resource_id {
        object.key("ResourceId").string(var_3.as_str());
    }
    if let Some(var_4) = &input.scalable_dimension {
        object.key("ScalableDimension").string(var_4.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_scheduled_action_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteScheduledActionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_5) = &input.service_namespace {
        object.key("ServiceNamespace").string(var_5.as_str());
    }
    if let Some(var_6) = &input.scheduled_action_name {
        object.key("ScheduledActionName").string(var_6.as_str());
    }
    if let Some(var_7) = &input.resource_id {
        object.key("ResourceId").string(var_7.as_str());
    }
    if let Some(var_8) = &input.scalable_dimension {
        object.key("ScalableDimension").string(var_8.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_deregister_scalable_target_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeregisterScalableTargetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_9) = &input.service_namespace {
        object.key("ServiceNamespace").string(var_9.as_str());
    }
    if let Some(var_10) = &input.resource_id {
        object.key("ResourceId").string(var_10.as_str());
    }
    if let Some(var_11) = &input.scalable_dimension {
        object.key("ScalableDimension").string(var_11.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_scalable_targets_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeScalableTargetsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_12) = &input.service_namespace {
        object.key("ServiceNamespace").string(var_12.as_str());
    }
    if let Some(var_13) = &input.resource_ids {
        let mut array_14 = object.key("ResourceIds").start_array();
        for item_15 in var_13 {
            {
                array_14.value().string(item_15.as_str());
            }
        }
        array_14.finish();
    }
    if let Some(var_16) = &input.scalable_dimension {
        object.key("ScalableDimension").string(var_16.as_str());
    }
    if let Some(var_17) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_17).into()),
        );
    }
    if let Some(var_18) = &input.next_token {
        object.key("NextToken").string(var_18.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_scaling_activities_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeScalingActivitiesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_19) = &input.service_namespace {
        object.key("ServiceNamespace").string(var_19.as_str());
    }
    if let Some(var_20) = &input.resource_id {
        object.key("ResourceId").string(var_20.as_str());
    }
    if let Some(var_21) = &input.scalable_dimension {
        object.key("ScalableDimension").string(var_21.as_str());
    }
    if let Some(var_22) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_22).into()),
        );
    }
    if let Some(var_23) = &input.next_token {
        object.key("NextToken").string(var_23.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_scaling_policies_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeScalingPoliciesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_24) = &input.policy_names {
        let mut array_25 = object.key("PolicyNames").start_array();
        for item_26 in var_24 {
            {
                array_25.value().string(item_26.as_str());
            }
        }
        array_25.finish();
    }
    if let Some(var_27) = &input.service_namespace {
        object.key("ServiceNamespace").string(var_27.as_str());
    }
    if let Some(var_28) = &input.resource_id {
        object.key("ResourceId").string(var_28.as_str());
    }
    if let Some(var_29) = &input.scalable_dimension {
        object.key("ScalableDimension").string(var_29.as_str());
    }
    if let Some(var_30) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_30).into()),
        );
    }
    if let Some(var_31) = &input.next_token {
        object.key("NextToken").string(var_31.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_scheduled_actions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeScheduledActionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_32) = &input.scheduled_action_names {
        let mut array_33 = object.key("ScheduledActionNames").start_array();
        for item_34 in var_32 {
            {
                array_33.value().string(item_34.as_str());
            }
        }
        array_33.finish();
    }
    if let Some(var_35) = &input.service_namespace {
        object.key("ServiceNamespace").string(var_35.as_str());
    }
    if let Some(var_36) = &input.resource_id {
        object.key("ResourceId").string(var_36.as_str());
    }
    if let Some(var_37) = &input.scalable_dimension {
        object.key("ScalableDimension").string(var_37.as_str());
    }
    if let Some(var_38) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_38).into()),
        );
    }
    if let Some(var_39) = &input.next_token {
        object.key("NextToken").string(var_39.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_scaling_policy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutScalingPolicyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_40) = &input.policy_name {
        object.key("PolicyName").string(var_40.as_str());
    }
    if let Some(var_41) = &input.service_namespace {
        object.key("ServiceNamespace").string(var_41.as_str());
    }
    if let Some(var_42) = &input.resource_id {
        object.key("ResourceId").string(var_42.as_str());
    }
    if let Some(var_43) = &input.scalable_dimension {
        object.key("ScalableDimension").string(var_43.as_str());
    }
    if let Some(var_44) = &input.policy_type {
        object.key("PolicyType").string(var_44.as_str());
    }
    if let Some(var_45) = &input.step_scaling_policy_configuration {
        let mut object_46 = object.key("StepScalingPolicyConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_step_scaling_policy_configuration(
            &mut object_46,
            var_45,
        )?;
        object_46.finish();
    }
    if let Some(var_47) = &input.target_tracking_scaling_policy_configuration {
        let mut object_48 = object
            .key("TargetTrackingScalingPolicyConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_target_tracking_scaling_policy_configuration(&mut object_48, var_47)?;
        object_48.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_scheduled_action_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutScheduledActionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_49) = &input.service_namespace {
        object.key("ServiceNamespace").string(var_49.as_str());
    }
    if let Some(var_50) = &input.schedule {
        object.key("Schedule").string(var_50.as_str());
    }
    if let Some(var_51) = &input.timezone {
        object.key("Timezone").string(var_51.as_str());
    }
    if let Some(var_52) = &input.scheduled_action_name {
        object.key("ScheduledActionName").string(var_52.as_str());
    }
    if let Some(var_53) = &input.resource_id {
        object.key("ResourceId").string(var_53.as_str());
    }
    if let Some(var_54) = &input.scalable_dimension {
        object.key("ScalableDimension").string(var_54.as_str());
    }
    if let Some(var_55) = &input.start_time {
        object
            .key("StartTime")
            .date_time(var_55, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_56) = &input.end_time {
        object
            .key("EndTime")
            .date_time(var_56, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_57) = &input.scalable_target_action {
        let mut object_58 = object.key("ScalableTargetAction").start_object();
        crate::json_ser::serialize_structure_crate_model_scalable_target_action(
            &mut object_58,
            var_57,
        )?;
        object_58.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_register_scalable_target_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RegisterScalableTargetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_59) = &input.service_namespace {
        object.key("ServiceNamespace").string(var_59.as_str());
    }
    if let Some(var_60) = &input.resource_id {
        object.key("ResourceId").string(var_60.as_str());
    }
    if let Some(var_61) = &input.scalable_dimension {
        object.key("ScalableDimension").string(var_61.as_str());
    }
    if let Some(var_62) = &input.min_capacity {
        object.key("MinCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_62).into()),
        );
    }
    if let Some(var_63) = &input.max_capacity {
        object.key("MaxCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_63).into()),
        );
    }
    if let Some(var_64) = &input.role_arn {
        object.key("RoleARN").string(var_64.as_str());
    }
    if let Some(var_65) = &input.suspended_state {
        let mut object_66 = object.key("SuspendedState").start_object();
        crate::json_ser::serialize_structure_crate_model_suspended_state(&mut object_66, var_65)?;
        object_66.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_step_scaling_policy_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StepScalingPolicyConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_67) = &input.adjustment_type {
        object.key("AdjustmentType").string(var_67.as_str());
    }
    if let Some(var_68) = &input.step_adjustments {
        let mut array_69 = object.key("StepAdjustments").start_array();
        for item_70 in var_68 {
            {
                let mut object_71 = array_69.value().start_object();
                crate::json_ser::serialize_structure_crate_model_step_adjustment(
                    &mut object_71,
                    item_70,
                )?;
                object_71.finish();
            }
        }
        array_69.finish();
    }
    if let Some(var_72) = &input.min_adjustment_magnitude {
        object.key("MinAdjustmentMagnitude").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_72).into()),
        );
    }
    if let Some(var_73) = &input.cooldown {
        object.key("Cooldown").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_73).into()),
        );
    }
    if let Some(var_74) = &input.metric_aggregation_type {
        object.key("MetricAggregationType").string(var_74.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_target_tracking_scaling_policy_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TargetTrackingScalingPolicyConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_75) = &input.target_value {
        object.key("TargetValue").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_75).into()),
        );
    }
    if let Some(var_76) = &input.predefined_metric_specification {
        let mut object_77 = object.key("PredefinedMetricSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_predefined_metric_specification(
            &mut object_77,
            var_76,
        )?;
        object_77.finish();
    }
    if let Some(var_78) = &input.customized_metric_specification {
        let mut object_79 = object.key("CustomizedMetricSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_customized_metric_specification(
            &mut object_79,
            var_78,
        )?;
        object_79.finish();
    }
    if let Some(var_80) = &input.scale_out_cooldown {
        object.key("ScaleOutCooldown").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_80).into()),
        );
    }
    if let Some(var_81) = &input.scale_in_cooldown {
        object.key("ScaleInCooldown").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_81).into()),
        );
    }
    if let Some(var_82) = &input.disable_scale_in {
        object.key("DisableScaleIn").boolean(*var_82);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_scalable_target_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ScalableTargetAction,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_83) = &input.min_capacity {
        object.key("MinCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_83).into()),
        );
    }
    if let Some(var_84) = &input.max_capacity {
        object.key("MaxCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_84).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_suspended_state(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SuspendedState,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_85) = &input.dynamic_scaling_in_suspended {
        object.key("DynamicScalingInSuspended").boolean(*var_85);
    }
    if let Some(var_86) = &input.dynamic_scaling_out_suspended {
        object.key("DynamicScalingOutSuspended").boolean(*var_86);
    }
    if let Some(var_87) = &input.scheduled_scaling_suspended {
        object.key("ScheduledScalingSuspended").boolean(*var_87);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_step_adjustment(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StepAdjustment,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_88) = &input.metric_interval_lower_bound {
        object.key("MetricIntervalLowerBound").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_88).into()),
        );
    }
    if let Some(var_89) = &input.metric_interval_upper_bound {
        object.key("MetricIntervalUpperBound").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_89).into()),
        );
    }
    if let Some(var_90) = &input.scaling_adjustment {
        object.key("ScalingAdjustment").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_90).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_predefined_metric_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PredefinedMetricSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_91) = &input.predefined_metric_type {
        object.key("PredefinedMetricType").string(var_91.as_str());
    }
    if let Some(var_92) = &input.resource_label {
        object.key("ResourceLabel").string(var_92.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_customized_metric_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CustomizedMetricSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_93) = &input.metric_name {
        object.key("MetricName").string(var_93.as_str());
    }
    if let Some(var_94) = &input.namespace {
        object.key("Namespace").string(var_94.as_str());
    }
    if let Some(var_95) = &input.dimensions {
        let mut array_96 = object.key("Dimensions").start_array();
        for item_97 in var_95 {
            {
                let mut object_98 = array_96.value().start_object();
                crate::json_ser::serialize_structure_crate_model_metric_dimension(
                    &mut object_98,
                    item_97,
                )?;
                object_98.finish();
            }
        }
        array_96.finish();
    }
    if let Some(var_99) = &input.statistic {
        object.key("Statistic").string(var_99.as_str());
    }
    if let Some(var_100) = &input.unit {
        object.key("Unit").string(var_100.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_metric_dimension(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MetricDimension,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_101) = &input.name {
        object.key("Name").string(var_101.as_str());
    }
    if let Some(var_102) = &input.value {
        object.key("Value").string(var_102.as_str());
    }
    Ok(())
}
