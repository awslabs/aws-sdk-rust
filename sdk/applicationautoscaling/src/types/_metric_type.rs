// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `MetricType`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let metrictype = unimplemented!();
/// match metrictype {
///     MetricType::AlbRequestCountPerTarget => { /* ... */ },
///     MetricType::AppStreamAverageCapacityUtilization => { /* ... */ },
///     MetricType::CassandraReadCapacityUtilization => { /* ... */ },
///     MetricType::CassandraWriteCapacityUtilization => { /* ... */ },
///     MetricType::ComprehendInferenceUtilization => { /* ... */ },
///     MetricType::DynamoDbReadCapacityUtilization => { /* ... */ },
///     MetricType::DynamoDbWriteCapacityUtilization => { /* ... */ },
///     MetricType::Ec2SpotFleetRequestAverageCpuUtilization => { /* ... */ },
///     MetricType::Ec2SpotFleetRequestAverageNetworkIn => { /* ... */ },
///     MetricType::Ec2SpotFleetRequestAverageNetworkOut => { /* ... */ },
///     MetricType::EcsServiceAverageCpuUtilization => { /* ... */ },
///     MetricType::EcsServiceAverageMemoryUtilization => { /* ... */ },
///     MetricType::ElastiCacheDatabaseCapacityUsageCountedForEvictPercentage => { /* ... */ },
///     MetricType::ElastiCacheDatabaseMemoryUsageCountedForEvictPercentage => { /* ... */ },
///     MetricType::ElastiCacheDatabaseMemoryUsagePercentage => { /* ... */ },
///     MetricType::ElastiCacheEngineCpuUtilization => { /* ... */ },
///     MetricType::ElastiCachePrimaryEngineCpuUtilization => { /* ... */ },
///     MetricType::ElastiCacheReplicaEngineCpuUtilization => { /* ... */ },
///     MetricType::KafkaBrokerStorageUtilization => { /* ... */ },
///     MetricType::LambdaProvisionedConcurrencyUtilization => { /* ... */ },
///     MetricType::NeptuneReaderAverageCpuUtilization => { /* ... */ },
///     MetricType::RdsReaderAverageCpuUtilization => { /* ... */ },
///     MetricType::RdsReaderAverageDatabaseConnections => { /* ... */ },
///     MetricType::SageMakerInferenceComponentConcurrentRequestsPerCopyHighResolution => { /* ... */ },
///     MetricType::SageMakerInferenceComponentInvocationsPerCopy => { /* ... */ },
///     MetricType::SageMakerVariantConcurrentRequestsPerModelHighResolution => { /* ... */ },
///     MetricType::SageMakerVariantInvocationsPerInstance => { /* ... */ },
///     MetricType::SageMakerVariantProvisionedConcurrencyUtilization => { /* ... */ },
///     MetricType::WorkSpacesAverageUserSessionsCapacityUtilization => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `metrictype` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `MetricType::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `MetricType::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `MetricType::NewFeature` is defined.
/// Specifically, when `metrictype` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `MetricType::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
///
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::Ord, ::std::cmp::PartialEq, ::std::cmp::PartialOrd, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub enum MetricType {
    #[allow(missing_docs)] // documentation missing in model
    AlbRequestCountPerTarget,
    #[allow(missing_docs)] // documentation missing in model
    AppStreamAverageCapacityUtilization,
    #[allow(missing_docs)] // documentation missing in model
    CassandraReadCapacityUtilization,
    #[allow(missing_docs)] // documentation missing in model
    CassandraWriteCapacityUtilization,
    #[allow(missing_docs)] // documentation missing in model
    ComprehendInferenceUtilization,
    #[allow(missing_docs)] // documentation missing in model
    DynamoDbReadCapacityUtilization,
    #[allow(missing_docs)] // documentation missing in model
    DynamoDbWriteCapacityUtilization,
    #[allow(missing_docs)] // documentation missing in model
    Ec2SpotFleetRequestAverageCpuUtilization,
    #[allow(missing_docs)] // documentation missing in model
    Ec2SpotFleetRequestAverageNetworkIn,
    #[allow(missing_docs)] // documentation missing in model
    Ec2SpotFleetRequestAverageNetworkOut,
    #[allow(missing_docs)] // documentation missing in model
    EcsServiceAverageCpuUtilization,
    #[allow(missing_docs)] // documentation missing in model
    EcsServiceAverageMemoryUtilization,
    #[allow(missing_docs)] // documentation missing in model
    ElastiCacheDatabaseCapacityUsageCountedForEvictPercentage,
    #[allow(missing_docs)] // documentation missing in model
    ElastiCacheDatabaseMemoryUsageCountedForEvictPercentage,
    #[allow(missing_docs)] // documentation missing in model
    ElastiCacheDatabaseMemoryUsagePercentage,
    #[allow(missing_docs)] // documentation missing in model
    ElastiCacheEngineCpuUtilization,
    #[allow(missing_docs)] // documentation missing in model
    ElastiCachePrimaryEngineCpuUtilization,
    #[allow(missing_docs)] // documentation missing in model
    ElastiCacheReplicaEngineCpuUtilization,
    #[allow(missing_docs)] // documentation missing in model
    KafkaBrokerStorageUtilization,
    #[allow(missing_docs)] // documentation missing in model
    LambdaProvisionedConcurrencyUtilization,
    #[allow(missing_docs)] // documentation missing in model
    NeptuneReaderAverageCpuUtilization,
    #[allow(missing_docs)] // documentation missing in model
    RdsReaderAverageCpuUtilization,
    #[allow(missing_docs)] // documentation missing in model
    RdsReaderAverageDatabaseConnections,
    #[allow(missing_docs)] // documentation missing in model
    SageMakerInferenceComponentConcurrentRequestsPerCopyHighResolution,
    #[allow(missing_docs)] // documentation missing in model
    SageMakerInferenceComponentInvocationsPerCopy,
    #[allow(missing_docs)] // documentation missing in model
    SageMakerVariantConcurrentRequestsPerModelHighResolution,
    #[allow(missing_docs)] // documentation missing in model
    SageMakerVariantInvocationsPerInstance,
    #[allow(missing_docs)] // documentation missing in model
    SageMakerVariantProvisionedConcurrencyUtilization,
    #[allow(missing_docs)] // documentation missing in model
    WorkSpacesAverageUserSessionsCapacityUtilization,
    /// `Unknown` contains new variants that have been added since this code was generated.
    #[deprecated(note = "Don't directly match on `Unknown`. See the docs on this enum for the correct way to handle unknown variants.")]
    Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue),
}
impl ::std::convert::From<&str> for MetricType {
    fn from(s: &str) -> Self {
        match s {
            "ALBRequestCountPerTarget" => MetricType::AlbRequestCountPerTarget,
            "AppStreamAverageCapacityUtilization" => MetricType::AppStreamAverageCapacityUtilization,
            "CassandraReadCapacityUtilization" => MetricType::CassandraReadCapacityUtilization,
            "CassandraWriteCapacityUtilization" => MetricType::CassandraWriteCapacityUtilization,
            "ComprehendInferenceUtilization" => MetricType::ComprehendInferenceUtilization,
            "DynamoDBReadCapacityUtilization" => MetricType::DynamoDbReadCapacityUtilization,
            "DynamoDBWriteCapacityUtilization" => MetricType::DynamoDbWriteCapacityUtilization,
            "EC2SpotFleetRequestAverageCPUUtilization" => MetricType::Ec2SpotFleetRequestAverageCpuUtilization,
            "EC2SpotFleetRequestAverageNetworkIn" => MetricType::Ec2SpotFleetRequestAverageNetworkIn,
            "EC2SpotFleetRequestAverageNetworkOut" => MetricType::Ec2SpotFleetRequestAverageNetworkOut,
            "ECSServiceAverageCPUUtilization" => MetricType::EcsServiceAverageCpuUtilization,
            "ECSServiceAverageMemoryUtilization" => MetricType::EcsServiceAverageMemoryUtilization,
            "ElastiCacheDatabaseCapacityUsageCountedForEvictPercentage" => MetricType::ElastiCacheDatabaseCapacityUsageCountedForEvictPercentage,
            "ElastiCacheDatabaseMemoryUsageCountedForEvictPercentage" => MetricType::ElastiCacheDatabaseMemoryUsageCountedForEvictPercentage,
            "ElastiCacheDatabaseMemoryUsagePercentage" => MetricType::ElastiCacheDatabaseMemoryUsagePercentage,
            "ElastiCacheEngineCPUUtilization" => MetricType::ElastiCacheEngineCpuUtilization,
            "ElastiCachePrimaryEngineCPUUtilization" => MetricType::ElastiCachePrimaryEngineCpuUtilization,
            "ElastiCacheReplicaEngineCPUUtilization" => MetricType::ElastiCacheReplicaEngineCpuUtilization,
            "KafkaBrokerStorageUtilization" => MetricType::KafkaBrokerStorageUtilization,
            "LambdaProvisionedConcurrencyUtilization" => MetricType::LambdaProvisionedConcurrencyUtilization,
            "NeptuneReaderAverageCPUUtilization" => MetricType::NeptuneReaderAverageCpuUtilization,
            "RDSReaderAverageCPUUtilization" => MetricType::RdsReaderAverageCpuUtilization,
            "RDSReaderAverageDatabaseConnections" => MetricType::RdsReaderAverageDatabaseConnections,
            "SageMakerInferenceComponentConcurrentRequestsPerCopyHighResolution" => {
                MetricType::SageMakerInferenceComponentConcurrentRequestsPerCopyHighResolution
            }
            "SageMakerInferenceComponentInvocationsPerCopy" => MetricType::SageMakerInferenceComponentInvocationsPerCopy,
            "SageMakerVariantConcurrentRequestsPerModelHighResolution" => MetricType::SageMakerVariantConcurrentRequestsPerModelHighResolution,
            "SageMakerVariantInvocationsPerInstance" => MetricType::SageMakerVariantInvocationsPerInstance,
            "SageMakerVariantProvisionedConcurrencyUtilization" => MetricType::SageMakerVariantProvisionedConcurrencyUtilization,
            "WorkSpacesAverageUserSessionsCapacityUtilization" => MetricType::WorkSpacesAverageUserSessionsCapacityUtilization,
            other => MetricType::Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl ::std::str::FromStr for MetricType {
    type Err = ::std::convert::Infallible;

    fn from_str(s: &str) -> ::std::result::Result<Self, <Self as ::std::str::FromStr>::Err> {
        ::std::result::Result::Ok(MetricType::from(s))
    }
}
impl MetricType {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            MetricType::AlbRequestCountPerTarget => "ALBRequestCountPerTarget",
            MetricType::AppStreamAverageCapacityUtilization => "AppStreamAverageCapacityUtilization",
            MetricType::CassandraReadCapacityUtilization => "CassandraReadCapacityUtilization",
            MetricType::CassandraWriteCapacityUtilization => "CassandraWriteCapacityUtilization",
            MetricType::ComprehendInferenceUtilization => "ComprehendInferenceUtilization",
            MetricType::DynamoDbReadCapacityUtilization => "DynamoDBReadCapacityUtilization",
            MetricType::DynamoDbWriteCapacityUtilization => "DynamoDBWriteCapacityUtilization",
            MetricType::Ec2SpotFleetRequestAverageCpuUtilization => "EC2SpotFleetRequestAverageCPUUtilization",
            MetricType::Ec2SpotFleetRequestAverageNetworkIn => "EC2SpotFleetRequestAverageNetworkIn",
            MetricType::Ec2SpotFleetRequestAverageNetworkOut => "EC2SpotFleetRequestAverageNetworkOut",
            MetricType::EcsServiceAverageCpuUtilization => "ECSServiceAverageCPUUtilization",
            MetricType::EcsServiceAverageMemoryUtilization => "ECSServiceAverageMemoryUtilization",
            MetricType::ElastiCacheDatabaseCapacityUsageCountedForEvictPercentage => "ElastiCacheDatabaseCapacityUsageCountedForEvictPercentage",
            MetricType::ElastiCacheDatabaseMemoryUsageCountedForEvictPercentage => "ElastiCacheDatabaseMemoryUsageCountedForEvictPercentage",
            MetricType::ElastiCacheDatabaseMemoryUsagePercentage => "ElastiCacheDatabaseMemoryUsagePercentage",
            MetricType::ElastiCacheEngineCpuUtilization => "ElastiCacheEngineCPUUtilization",
            MetricType::ElastiCachePrimaryEngineCpuUtilization => "ElastiCachePrimaryEngineCPUUtilization",
            MetricType::ElastiCacheReplicaEngineCpuUtilization => "ElastiCacheReplicaEngineCPUUtilization",
            MetricType::KafkaBrokerStorageUtilization => "KafkaBrokerStorageUtilization",
            MetricType::LambdaProvisionedConcurrencyUtilization => "LambdaProvisionedConcurrencyUtilization",
            MetricType::NeptuneReaderAverageCpuUtilization => "NeptuneReaderAverageCPUUtilization",
            MetricType::RdsReaderAverageCpuUtilization => "RDSReaderAverageCPUUtilization",
            MetricType::RdsReaderAverageDatabaseConnections => "RDSReaderAverageDatabaseConnections",
            MetricType::SageMakerInferenceComponentConcurrentRequestsPerCopyHighResolution => {
                "SageMakerInferenceComponentConcurrentRequestsPerCopyHighResolution"
            }
            MetricType::SageMakerInferenceComponentInvocationsPerCopy => "SageMakerInferenceComponentInvocationsPerCopy",
            MetricType::SageMakerVariantConcurrentRequestsPerModelHighResolution => "SageMakerVariantConcurrentRequestsPerModelHighResolution",
            MetricType::SageMakerVariantInvocationsPerInstance => "SageMakerVariantInvocationsPerInstance",
            MetricType::SageMakerVariantProvisionedConcurrencyUtilization => "SageMakerVariantProvisionedConcurrencyUtilization",
            MetricType::WorkSpacesAverageUserSessionsCapacityUtilization => "WorkSpacesAverageUserSessionsCapacityUtilization",
            MetricType::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "ALBRequestCountPerTarget",
            "AppStreamAverageCapacityUtilization",
            "CassandraReadCapacityUtilization",
            "CassandraWriteCapacityUtilization",
            "ComprehendInferenceUtilization",
            "DynamoDBReadCapacityUtilization",
            "DynamoDBWriteCapacityUtilization",
            "EC2SpotFleetRequestAverageCPUUtilization",
            "EC2SpotFleetRequestAverageNetworkIn",
            "EC2SpotFleetRequestAverageNetworkOut",
            "ECSServiceAverageCPUUtilization",
            "ECSServiceAverageMemoryUtilization",
            "ElastiCacheDatabaseCapacityUsageCountedForEvictPercentage",
            "ElastiCacheDatabaseMemoryUsageCountedForEvictPercentage",
            "ElastiCacheDatabaseMemoryUsagePercentage",
            "ElastiCacheEngineCPUUtilization",
            "ElastiCachePrimaryEngineCPUUtilization",
            "ElastiCacheReplicaEngineCPUUtilization",
            "KafkaBrokerStorageUtilization",
            "LambdaProvisionedConcurrencyUtilization",
            "NeptuneReaderAverageCPUUtilization",
            "RDSReaderAverageCPUUtilization",
            "RDSReaderAverageDatabaseConnections",
            "SageMakerInferenceComponentConcurrentRequestsPerCopyHighResolution",
            "SageMakerInferenceComponentInvocationsPerCopy",
            "SageMakerVariantConcurrentRequestsPerModelHighResolution",
            "SageMakerVariantInvocationsPerInstance",
            "SageMakerVariantProvisionedConcurrencyUtilization",
            "WorkSpacesAverageUserSessionsCapacityUtilization",
        ]
    }
}
impl ::std::convert::AsRef<str> for MetricType {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
impl MetricType {
    /// Parses the enum value while disallowing unknown variants.
    ///
    /// Unknown variants will result in an error.
    pub fn try_parse(value: &str) -> ::std::result::Result<Self, crate::error::UnknownVariantError> {
        match Self::from(value) {
            #[allow(deprecated)]
            Self::Unknown(_) => ::std::result::Result::Err(crate::error::UnknownVariantError::new(value)),
            known => Ok(known),
        }
    }
}
impl ::std::fmt::Display for MetricType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match self {
            MetricType::AlbRequestCountPerTarget => write!(f, "ALBRequestCountPerTarget"),
            MetricType::AppStreamAverageCapacityUtilization => write!(f, "AppStreamAverageCapacityUtilization"),
            MetricType::CassandraReadCapacityUtilization => write!(f, "CassandraReadCapacityUtilization"),
            MetricType::CassandraWriteCapacityUtilization => write!(f, "CassandraWriteCapacityUtilization"),
            MetricType::ComprehendInferenceUtilization => write!(f, "ComprehendInferenceUtilization"),
            MetricType::DynamoDbReadCapacityUtilization => write!(f, "DynamoDBReadCapacityUtilization"),
            MetricType::DynamoDbWriteCapacityUtilization => write!(f, "DynamoDBWriteCapacityUtilization"),
            MetricType::Ec2SpotFleetRequestAverageCpuUtilization => write!(f, "EC2SpotFleetRequestAverageCPUUtilization"),
            MetricType::Ec2SpotFleetRequestAverageNetworkIn => write!(f, "EC2SpotFleetRequestAverageNetworkIn"),
            MetricType::Ec2SpotFleetRequestAverageNetworkOut => write!(f, "EC2SpotFleetRequestAverageNetworkOut"),
            MetricType::EcsServiceAverageCpuUtilization => write!(f, "ECSServiceAverageCPUUtilization"),
            MetricType::EcsServiceAverageMemoryUtilization => write!(f, "ECSServiceAverageMemoryUtilization"),
            MetricType::ElastiCacheDatabaseCapacityUsageCountedForEvictPercentage => {
                write!(f, "ElastiCacheDatabaseCapacityUsageCountedForEvictPercentage")
            }
            MetricType::ElastiCacheDatabaseMemoryUsageCountedForEvictPercentage => {
                write!(f, "ElastiCacheDatabaseMemoryUsageCountedForEvictPercentage")
            }
            MetricType::ElastiCacheDatabaseMemoryUsagePercentage => write!(f, "ElastiCacheDatabaseMemoryUsagePercentage"),
            MetricType::ElastiCacheEngineCpuUtilization => write!(f, "ElastiCacheEngineCPUUtilization"),
            MetricType::ElastiCachePrimaryEngineCpuUtilization => write!(f, "ElastiCachePrimaryEngineCPUUtilization"),
            MetricType::ElastiCacheReplicaEngineCpuUtilization => write!(f, "ElastiCacheReplicaEngineCPUUtilization"),
            MetricType::KafkaBrokerStorageUtilization => write!(f, "KafkaBrokerStorageUtilization"),
            MetricType::LambdaProvisionedConcurrencyUtilization => write!(f, "LambdaProvisionedConcurrencyUtilization"),
            MetricType::NeptuneReaderAverageCpuUtilization => write!(f, "NeptuneReaderAverageCPUUtilization"),
            MetricType::RdsReaderAverageCpuUtilization => write!(f, "RDSReaderAverageCPUUtilization"),
            MetricType::RdsReaderAverageDatabaseConnections => write!(f, "RDSReaderAverageDatabaseConnections"),
            MetricType::SageMakerInferenceComponentConcurrentRequestsPerCopyHighResolution => {
                write!(f, "SageMakerInferenceComponentConcurrentRequestsPerCopyHighResolution")
            }
            MetricType::SageMakerInferenceComponentInvocationsPerCopy => write!(f, "SageMakerInferenceComponentInvocationsPerCopy"),
            MetricType::SageMakerVariantConcurrentRequestsPerModelHighResolution => {
                write!(f, "SageMakerVariantConcurrentRequestsPerModelHighResolution")
            }
            MetricType::SageMakerVariantInvocationsPerInstance => write!(f, "SageMakerVariantInvocationsPerInstance"),
            MetricType::SageMakerVariantProvisionedConcurrencyUtilization => write!(f, "SageMakerVariantProvisionedConcurrencyUtilization"),
            MetricType::WorkSpacesAverageUserSessionsCapacityUtilization => write!(f, "WorkSpacesAverageUserSessionsCapacityUtilization"),
            MetricType::Unknown(value) => write!(f, "{value}"),
        }
    }
}
