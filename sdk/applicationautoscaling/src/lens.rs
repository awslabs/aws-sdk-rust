// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_structure_crate_output_describe_scalable_targets_output_next_token(
    input: &crate::output::DescribeScalableTargetsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_scaling_activities_output_next_token(
    input: &crate::output::DescribeScalingActivitiesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_scaling_policies_output_next_token(
    input: &crate::output::DescribeScalingPoliciesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_scheduled_actions_output_next_token(
    input: &crate::output::DescribeScheduledActionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_scalable_targets_output_scalable_targets(
    input: crate::output::DescribeScalableTargetsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::ScalableTarget>> {
    let input = match input.scalable_targets {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_scaling_activities_output_scaling_activities(
    input: crate::output::DescribeScalingActivitiesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::ScalingActivity>> {
    let input = match input.scaling_activities {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_scaling_policies_output_scaling_policies(
    input: crate::output::DescribeScalingPoliciesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::ScalingPolicy>> {
    let input = match input.scaling_policies {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_scheduled_actions_output_scheduled_actions(
    input: crate::output::DescribeScheduledActionsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::ScheduledAction>> {
    let input = match input.scheduled_actions {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
