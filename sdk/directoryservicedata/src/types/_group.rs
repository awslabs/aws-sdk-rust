// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A group object that contains identifying information and attributes for a specified group.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct Group {
    /// <p>The unique security identifier (SID) of the group.</p>
    pub sid: ::std::option::Option<::std::string::String>,
    /// <p>The name of the group.</p>
    pub sam_account_name: ::std::string::String,
    /// <p>The <a href="https://learn.microsoft.com/en-us/windows/win32/ad/object-names-and-identities#distinguished-name">distinguished name</a> of the object.</p>
    pub distinguished_name: ::std::option::Option<::std::string::String>,
    /// <p>The AD group type. For details, see <a href="https://learn.microsoft.com/en-us/windows-server/identity/ad-ds/manage/understand-security-groups#how-active-directory-security-groups-work">Active Directory security group type</a>.</p>
    pub group_type: ::std::option::Option<crate::types::GroupType>,
    /// <p>The scope of the AD group. For details, see <a href="https://learn.microsoft.com/en-us/windows-server/identity/ad-ds/manage/understand-security-groups#group-scope">Active Directory security groups</a></p>
    pub group_scope: ::std::option::Option<crate::types::GroupScope>,
    /// <p>An expression of one or more attributes, data types, and the values of a group.</p>
    pub other_attributes: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::AttributeValue>>,
}
impl Group {
    /// <p>The unique security identifier (SID) of the group.</p>
    pub fn sid(&self) -> ::std::option::Option<&str> {
        self.sid.as_deref()
    }
    /// <p>The name of the group.</p>
    pub fn sam_account_name(&self) -> &str {
        use std::ops::Deref;
        self.sam_account_name.deref()
    }
    /// <p>The <a href="https://learn.microsoft.com/en-us/windows/win32/ad/object-names-and-identities#distinguished-name">distinguished name</a> of the object.</p>
    pub fn distinguished_name(&self) -> ::std::option::Option<&str> {
        self.distinguished_name.as_deref()
    }
    /// <p>The AD group type. For details, see <a href="https://learn.microsoft.com/en-us/windows-server/identity/ad-ds/manage/understand-security-groups#how-active-directory-security-groups-work">Active Directory security group type</a>.</p>
    pub fn group_type(&self) -> ::std::option::Option<&crate::types::GroupType> {
        self.group_type.as_ref()
    }
    /// <p>The scope of the AD group. For details, see <a href="https://learn.microsoft.com/en-us/windows-server/identity/ad-ds/manage/understand-security-groups#group-scope">Active Directory security groups</a></p>
    pub fn group_scope(&self) -> ::std::option::Option<&crate::types::GroupScope> {
        self.group_scope.as_ref()
    }
    /// <p>An expression of one or more attributes, data types, and the values of a group.</p>
    pub fn other_attributes(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, crate::types::AttributeValue>> {
        self.other_attributes.as_ref()
    }
}
impl ::std::fmt::Debug for Group {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("Group");
        formatter.field("sid", &self.sid);
        formatter.field("sam_account_name", &self.sam_account_name);
        formatter.field("distinguished_name", &"*** Sensitive Data Redacted ***");
        formatter.field("group_type", &self.group_type);
        formatter.field("group_scope", &self.group_scope);
        formatter.field("other_attributes", &self.other_attributes);
        formatter.finish()
    }
}
impl Group {
    /// Creates a new builder-style object to manufacture [`Group`](crate::types::Group).
    pub fn builder() -> crate::types::builders::GroupBuilder {
        crate::types::builders::GroupBuilder::default()
    }
}

/// A builder for [`Group`](crate::types::Group).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct GroupBuilder {
    pub(crate) sid: ::std::option::Option<::std::string::String>,
    pub(crate) sam_account_name: ::std::option::Option<::std::string::String>,
    pub(crate) distinguished_name: ::std::option::Option<::std::string::String>,
    pub(crate) group_type: ::std::option::Option<crate::types::GroupType>,
    pub(crate) group_scope: ::std::option::Option<crate::types::GroupScope>,
    pub(crate) other_attributes: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::AttributeValue>>,
}
impl GroupBuilder {
    /// <p>The unique security identifier (SID) of the group.</p>
    pub fn sid(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.sid = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique security identifier (SID) of the group.</p>
    pub fn set_sid(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.sid = input;
        self
    }
    /// <p>The unique security identifier (SID) of the group.</p>
    pub fn get_sid(&self) -> &::std::option::Option<::std::string::String> {
        &self.sid
    }
    /// <p>The name of the group.</p>
    /// This field is required.
    pub fn sam_account_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.sam_account_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the group.</p>
    pub fn set_sam_account_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.sam_account_name = input;
        self
    }
    /// <p>The name of the group.</p>
    pub fn get_sam_account_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.sam_account_name
    }
    /// <p>The <a href="https://learn.microsoft.com/en-us/windows/win32/ad/object-names-and-identities#distinguished-name">distinguished name</a> of the object.</p>
    pub fn distinguished_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.distinguished_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The <a href="https://learn.microsoft.com/en-us/windows/win32/ad/object-names-and-identities#distinguished-name">distinguished name</a> of the object.</p>
    pub fn set_distinguished_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.distinguished_name = input;
        self
    }
    /// <p>The <a href="https://learn.microsoft.com/en-us/windows/win32/ad/object-names-and-identities#distinguished-name">distinguished name</a> of the object.</p>
    pub fn get_distinguished_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.distinguished_name
    }
    /// <p>The AD group type. For details, see <a href="https://learn.microsoft.com/en-us/windows-server/identity/ad-ds/manage/understand-security-groups#how-active-directory-security-groups-work">Active Directory security group type</a>.</p>
    pub fn group_type(mut self, input: crate::types::GroupType) -> Self {
        self.group_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The AD group type. For details, see <a href="https://learn.microsoft.com/en-us/windows-server/identity/ad-ds/manage/understand-security-groups#how-active-directory-security-groups-work">Active Directory security group type</a>.</p>
    pub fn set_group_type(mut self, input: ::std::option::Option<crate::types::GroupType>) -> Self {
        self.group_type = input;
        self
    }
    /// <p>The AD group type. For details, see <a href="https://learn.microsoft.com/en-us/windows-server/identity/ad-ds/manage/understand-security-groups#how-active-directory-security-groups-work">Active Directory security group type</a>.</p>
    pub fn get_group_type(&self) -> &::std::option::Option<crate::types::GroupType> {
        &self.group_type
    }
    /// <p>The scope of the AD group. For details, see <a href="https://learn.microsoft.com/en-us/windows-server/identity/ad-ds/manage/understand-security-groups#group-scope">Active Directory security groups</a></p>
    pub fn group_scope(mut self, input: crate::types::GroupScope) -> Self {
        self.group_scope = ::std::option::Option::Some(input);
        self
    }
    /// <p>The scope of the AD group. For details, see <a href="https://learn.microsoft.com/en-us/windows-server/identity/ad-ds/manage/understand-security-groups#group-scope">Active Directory security groups</a></p>
    pub fn set_group_scope(mut self, input: ::std::option::Option<crate::types::GroupScope>) -> Self {
        self.group_scope = input;
        self
    }
    /// <p>The scope of the AD group. For details, see <a href="https://learn.microsoft.com/en-us/windows-server/identity/ad-ds/manage/understand-security-groups#group-scope">Active Directory security groups</a></p>
    pub fn get_group_scope(&self) -> &::std::option::Option<crate::types::GroupScope> {
        &self.group_scope
    }
    /// Adds a key-value pair to `other_attributes`.
    ///
    /// To override the contents of this collection use [`set_other_attributes`](Self::set_other_attributes).
    ///
    /// <p>An expression of one or more attributes, data types, and the values of a group.</p>
    pub fn other_attributes(mut self, k: impl ::std::convert::Into<::std::string::String>, v: crate::types::AttributeValue) -> Self {
        let mut hash_map = self.other_attributes.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.other_attributes = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>An expression of one or more attributes, data types, and the values of a group.</p>
    pub fn set_other_attributes(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::AttributeValue>>,
    ) -> Self {
        self.other_attributes = input;
        self
    }
    /// <p>An expression of one or more attributes, data types, and the values of a group.</p>
    pub fn get_other_attributes(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::AttributeValue>> {
        &self.other_attributes
    }
    /// Consumes the builder and constructs a [`Group`](crate::types::Group).
    /// This method will fail if any of the following fields are not set:
    /// - [`sam_account_name`](crate::types::builders::GroupBuilder::sam_account_name)
    pub fn build(self) -> ::std::result::Result<crate::types::Group, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::Group {
            sid: self.sid,
            sam_account_name: self.sam_account_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "sam_account_name",
                    "sam_account_name was not specified but it is required when building Group",
                )
            })?,
            distinguished_name: self.distinguished_name,
            group_type: self.group_type,
            group_scope: self.group_scope,
            other_attributes: self.other_attributes,
        })
    }
}
impl ::std::fmt::Debug for GroupBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GroupBuilder");
        formatter.field("sid", &self.sid);
        formatter.field("sam_account_name", &self.sam_account_name);
        formatter.field("distinguished_name", &"*** Sensitive Data Redacted ***");
        formatter.field("group_type", &self.group_type);
        formatter.field("group_scope", &self.group_scope);
        formatter.field("other_attributes", &self.other_attributes);
        formatter.finish()
    }
}
