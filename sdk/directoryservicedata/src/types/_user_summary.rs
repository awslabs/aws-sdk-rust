// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure containing a subset of the fields of a user object from a directory.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct UserSummary {
    /// <p>The unique security identifier (SID) of the user.</p>
    pub sid: ::std::string::String,
    /// <p>The name of the user.</p>
    pub sam_account_name: ::std::string::String,
    /// <p>The first name of the user.</p>
    pub given_name: ::std::option::Option<::std::string::String>,
    /// <p>The last name of the user.</p>
    pub surname: ::std::option::Option<::std::string::String>,
    /// <p>Indicates whether the user account is active.</p>
    pub enabled: bool,
}
impl UserSummary {
    /// <p>The unique security identifier (SID) of the user.</p>
    pub fn sid(&self) -> &str {
        use std::ops::Deref;
        self.sid.deref()
    }
    /// <p>The name of the user.</p>
    pub fn sam_account_name(&self) -> &str {
        use std::ops::Deref;
        self.sam_account_name.deref()
    }
    /// <p>The first name of the user.</p>
    pub fn given_name(&self) -> ::std::option::Option<&str> {
        self.given_name.as_deref()
    }
    /// <p>The last name of the user.</p>
    pub fn surname(&self) -> ::std::option::Option<&str> {
        self.surname.as_deref()
    }
    /// <p>Indicates whether the user account is active.</p>
    pub fn enabled(&self) -> bool {
        self.enabled
    }
}
impl ::std::fmt::Debug for UserSummary {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UserSummary");
        formatter.field("sid", &self.sid);
        formatter.field("sam_account_name", &self.sam_account_name);
        formatter.field("given_name", &"*** Sensitive Data Redacted ***");
        formatter.field("surname", &"*** Sensitive Data Redacted ***");
        formatter.field("enabled", &self.enabled);
        formatter.finish()
    }
}
impl UserSummary {
    /// Creates a new builder-style object to manufacture [`UserSummary`](crate::types::UserSummary).
    pub fn builder() -> crate::types::builders::UserSummaryBuilder {
        crate::types::builders::UserSummaryBuilder::default()
    }
}

/// A builder for [`UserSummary`](crate::types::UserSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct UserSummaryBuilder {
    pub(crate) sid: ::std::option::Option<::std::string::String>,
    pub(crate) sam_account_name: ::std::option::Option<::std::string::String>,
    pub(crate) given_name: ::std::option::Option<::std::string::String>,
    pub(crate) surname: ::std::option::Option<::std::string::String>,
    pub(crate) enabled: ::std::option::Option<bool>,
}
impl UserSummaryBuilder {
    /// <p>The unique security identifier (SID) of the user.</p>
    /// This field is required.
    pub fn sid(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.sid = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique security identifier (SID) of the user.</p>
    pub fn set_sid(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.sid = input;
        self
    }
    /// <p>The unique security identifier (SID) of the user.</p>
    pub fn get_sid(&self) -> &::std::option::Option<::std::string::String> {
        &self.sid
    }
    /// <p>The name of the user.</p>
    /// This field is required.
    pub fn sam_account_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.sam_account_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the user.</p>
    pub fn set_sam_account_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.sam_account_name = input;
        self
    }
    /// <p>The name of the user.</p>
    pub fn get_sam_account_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.sam_account_name
    }
    /// <p>The first name of the user.</p>
    pub fn given_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.given_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The first name of the user.</p>
    pub fn set_given_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.given_name = input;
        self
    }
    /// <p>The first name of the user.</p>
    pub fn get_given_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.given_name
    }
    /// <p>The last name of the user.</p>
    pub fn surname(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.surname = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The last name of the user.</p>
    pub fn set_surname(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.surname = input;
        self
    }
    /// <p>The last name of the user.</p>
    pub fn get_surname(&self) -> &::std::option::Option<::std::string::String> {
        &self.surname
    }
    /// <p>Indicates whether the user account is active.</p>
    /// This field is required.
    pub fn enabled(mut self, input: bool) -> Self {
        self.enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether the user account is active.</p>
    pub fn set_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.enabled = input;
        self
    }
    /// <p>Indicates whether the user account is active.</p>
    pub fn get_enabled(&self) -> &::std::option::Option<bool> {
        &self.enabled
    }
    /// Consumes the builder and constructs a [`UserSummary`](crate::types::UserSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`sid`](crate::types::builders::UserSummaryBuilder::sid)
    /// - [`sam_account_name`](crate::types::builders::UserSummaryBuilder::sam_account_name)
    /// - [`enabled`](crate::types::builders::UserSummaryBuilder::enabled)
    pub fn build(self) -> ::std::result::Result<crate::types::UserSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::UserSummary {
            sid: self.sid.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "sid",
                    "sid was not specified but it is required when building UserSummary",
                )
            })?,
            sam_account_name: self.sam_account_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "sam_account_name",
                    "sam_account_name was not specified but it is required when building UserSummary",
                )
            })?,
            given_name: self.given_name,
            surname: self.surname,
            enabled: self.enabled.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "enabled",
                    "enabled was not specified but it is required when building UserSummary",
                )
            })?,
        })
    }
}
impl ::std::fmt::Debug for UserSummaryBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UserSummaryBuilder");
        formatter.field("sid", &self.sid);
        formatter.field("sam_account_name", &self.sam_account_name);
        formatter.field("given_name", &"*** Sensitive Data Redacted ***");
        formatter.field("surname", &"*** Sensitive Data Redacted ***");
        formatter.field("enabled", &self.enabled);
        formatter.finish()
    }
}
