// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A member object that contains identifying information for a specified member.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Member {
    /// <p>The unique security identifier (SID) of the group member.</p>
    pub sid: ::std::string::String,
    /// <p>The name of the group member.</p>
    pub sam_account_name: ::std::string::String,
    /// <p>The AD type of the member object.</p>
    pub member_type: crate::types::MemberType,
}
impl Member {
    /// <p>The unique security identifier (SID) of the group member.</p>
    pub fn sid(&self) -> &str {
        use std::ops::Deref;
        self.sid.deref()
    }
    /// <p>The name of the group member.</p>
    pub fn sam_account_name(&self) -> &str {
        use std::ops::Deref;
        self.sam_account_name.deref()
    }
    /// <p>The AD type of the member object.</p>
    pub fn member_type(&self) -> &crate::types::MemberType {
        &self.member_type
    }
}
impl Member {
    /// Creates a new builder-style object to manufacture [`Member`](crate::types::Member).
    pub fn builder() -> crate::types::builders::MemberBuilder {
        crate::types::builders::MemberBuilder::default()
    }
}

/// A builder for [`Member`](crate::types::Member).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct MemberBuilder {
    pub(crate) sid: ::std::option::Option<::std::string::String>,
    pub(crate) sam_account_name: ::std::option::Option<::std::string::String>,
    pub(crate) member_type: ::std::option::Option<crate::types::MemberType>,
}
impl MemberBuilder {
    /// <p>The unique security identifier (SID) of the group member.</p>
    /// This field is required.
    pub fn sid(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.sid = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique security identifier (SID) of the group member.</p>
    pub fn set_sid(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.sid = input;
        self
    }
    /// <p>The unique security identifier (SID) of the group member.</p>
    pub fn get_sid(&self) -> &::std::option::Option<::std::string::String> {
        &self.sid
    }
    /// <p>The name of the group member.</p>
    /// This field is required.
    pub fn sam_account_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.sam_account_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the group member.</p>
    pub fn set_sam_account_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.sam_account_name = input;
        self
    }
    /// <p>The name of the group member.</p>
    pub fn get_sam_account_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.sam_account_name
    }
    /// <p>The AD type of the member object.</p>
    /// This field is required.
    pub fn member_type(mut self, input: crate::types::MemberType) -> Self {
        self.member_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The AD type of the member object.</p>
    pub fn set_member_type(mut self, input: ::std::option::Option<crate::types::MemberType>) -> Self {
        self.member_type = input;
        self
    }
    /// <p>The AD type of the member object.</p>
    pub fn get_member_type(&self) -> &::std::option::Option<crate::types::MemberType> {
        &self.member_type
    }
    /// Consumes the builder and constructs a [`Member`](crate::types::Member).
    /// This method will fail if any of the following fields are not set:
    /// - [`sid`](crate::types::builders::MemberBuilder::sid)
    /// - [`sam_account_name`](crate::types::builders::MemberBuilder::sam_account_name)
    /// - [`member_type`](crate::types::builders::MemberBuilder::member_type)
    pub fn build(self) -> ::std::result::Result<crate::types::Member, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::Member {
            sid: self.sid.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "sid",
                    "sid was not specified but it is required when building Member",
                )
            })?,
            sam_account_name: self.sam_account_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "sam_account_name",
                    "sam_account_name was not specified but it is required when building Member",
                )
            })?,
            member_type: self.member_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "member_type",
                    "member_type was not specified but it is required when building Member",
                )
            })?,
        })
    }
}
