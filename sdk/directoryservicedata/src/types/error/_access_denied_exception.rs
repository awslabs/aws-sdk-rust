// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>You don't have permission to perform the request or access the directory. It can also occur when the <code>DirectoryId</code> doesn't exist or the user, member, or group might be outside of your organizational unit (OU).</p>
/// <p>Make sure that you have the authentication and authorization to perform the action. Review the directory information in the request, and make sure that the object isn't outside of your OU.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AccessDeniedException {
    #[allow(missing_docs)] // documentation missing in model
    pub message: ::std::option::Option<::std::string::String>,
    /// <p>Reason the request was unauthorized.</p>
    pub reason: ::std::option::Option<crate::types::AccessDeniedReason>,
    pub(crate) meta: ::aws_smithy_types::error::ErrorMetadata,
}
impl AccessDeniedException {
    /// <p>Reason the request was unauthorized.</p>
    pub fn reason(&self) -> ::std::option::Option<&crate::types::AccessDeniedReason> {
        self.reason.as_ref()
    }
}
impl AccessDeniedException {
    /// Returns the error message.
    pub fn message(&self) -> ::std::option::Option<&str> {
        self.message.as_deref()
    }
}
impl ::std::fmt::Display for AccessDeniedException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        ::std::write!(f, "AccessDeniedException")?;
        if let ::std::option::Option::Some(inner_1) = &self.message {
            {
                ::std::write!(f, ": {}", inner_1)?;
            }
        }
        Ok(())
    }
}
impl ::std::error::Error for AccessDeniedException {}
impl ::aws_types::request_id::RequestId for crate::types::error::AccessDeniedException {
    fn request_id(&self) -> Option<&str> {
        use ::aws_smithy_types::error::metadata::ProvideErrorMetadata;
        self.meta().request_id()
    }
}
impl ::aws_smithy_types::error::metadata::ProvideErrorMetadata for AccessDeniedException {
    fn meta(&self) -> &::aws_smithy_types::error::ErrorMetadata {
        &self.meta
    }
}
impl AccessDeniedException {
    /// Creates a new builder-style object to manufacture [`AccessDeniedException`](crate::types::error::AccessDeniedException).
    pub fn builder() -> crate::types::error::builders::AccessDeniedExceptionBuilder {
        crate::types::error::builders::AccessDeniedExceptionBuilder::default()
    }
}

/// A builder for [`AccessDeniedException`](crate::types::error::AccessDeniedException).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AccessDeniedExceptionBuilder {
    pub(crate) message: ::std::option::Option<::std::string::String>,
    pub(crate) reason: ::std::option::Option<crate::types::AccessDeniedReason>,
    meta: std::option::Option<::aws_smithy_types::error::ErrorMetadata>,
}
impl AccessDeniedExceptionBuilder {
    #[allow(missing_docs)] // documentation missing in model
    pub fn message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.message = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.message = input;
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.message
    }
    /// <p>Reason the request was unauthorized.</p>
    pub fn reason(mut self, input: crate::types::AccessDeniedReason) -> Self {
        self.reason = ::std::option::Option::Some(input);
        self
    }
    /// <p>Reason the request was unauthorized.</p>
    pub fn set_reason(mut self, input: ::std::option::Option<crate::types::AccessDeniedReason>) -> Self {
        self.reason = input;
        self
    }
    /// <p>Reason the request was unauthorized.</p>
    pub fn get_reason(&self) -> &::std::option::Option<crate::types::AccessDeniedReason> {
        &self.reason
    }
    /// Sets error metadata
    pub fn meta(mut self, meta: ::aws_smithy_types::error::ErrorMetadata) -> Self {
        self.meta = Some(meta);
        self
    }

    /// Sets error metadata
    pub fn set_meta(&mut self, meta: std::option::Option<::aws_smithy_types::error::ErrorMetadata>) -> &mut Self {
        self.meta = meta;
        self
    }
    /// Consumes the builder and constructs a [`AccessDeniedException`](crate::types::error::AccessDeniedException).
    pub fn build(self) -> crate::types::error::AccessDeniedException {
        crate::types::error::AccessDeniedException {
            message: self.message,
            reason: self.reason,
            meta: self.meta.unwrap_or_default(),
        }
    }
}
