// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DisableUser`](crate::operation::disable_user::builders::DisableUserFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`directory_id(impl Into<String>)`](crate::operation::disable_user::builders::DisableUserFluentBuilder::directory_id) / [`set_directory_id(Option<String>)`](crate::operation::disable_user::builders::DisableUserFluentBuilder::set_directory_id):<br>required: **true**<br><p>The identifier (ID) of the directory that's associated with the user.</p><br>
    ///   - [`sam_account_name(impl Into<String>)`](crate::operation::disable_user::builders::DisableUserFluentBuilder::sam_account_name) / [`set_sam_account_name(Option<String>)`](crate::operation::disable_user::builders::DisableUserFluentBuilder::set_sam_account_name):<br>required: **true**<br><p>The name of the user.</p><br>
    ///   - [`client_token(impl Into<String>)`](crate::operation::disable_user::builders::DisableUserFluentBuilder::client_token) / [`set_client_token(Option<String>)`](crate::operation::disable_user::builders::DisableUserFluentBuilder::set_client_token):<br>required: **false**<br><p>A unique and case-sensitive identifier that you provide to make sure the idempotency of the request, so multiple identical calls have the same effect as one single call.</p> <p>A client token is valid for 8 hours after the first request that uses it completes. After 8 hours, any request with the same client token is treated as a new request. If the request succeeds, any future uses of that token will be idempotent for another 8 hours.</p> <p>If you submit a request with the same client token but change one of the other parameters within the 8-hour idempotency window, Directory Service Data returns an <code>ConflictException</code>.</p><note>  <p>This parameter is optional when using the CLI or SDK.</p> </note><br>
    /// - On success, responds with [`DisableUserOutput`](crate::operation::disable_user::DisableUserOutput)
    /// - On failure, responds with [`SdkError<DisableUserError>`](crate::operation::disable_user::DisableUserError)
    pub fn disable_user(&self) -> crate::operation::disable_user::builders::DisableUserFluentBuilder {
        crate::operation::disable_user::builders::DisableUserFluentBuilder::new(self.handle.clone())
    }
}
