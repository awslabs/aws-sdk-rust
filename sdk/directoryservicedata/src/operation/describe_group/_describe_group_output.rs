// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct DescribeGroupOutput {
    /// <p>The identifier (ID) of the directory that's associated with the group.</p>
    pub directory_id: ::std::option::Option<::std::string::String>,
    /// <p>The domain name that's associated with the group.</p>
    pub realm: ::std::option::Option<::std::string::String>,
    /// <p>The unique security identifier (SID) of the group.</p>
    pub sid: ::std::option::Option<::std::string::String>,
    /// <p>The name of the group.</p>
    pub sam_account_name: ::std::option::Option<::std::string::String>,
    /// <p>The <a href="https://learn.microsoft.com/en-us/windows/win32/ad/object-names-and-identities#distinguished-name">distinguished name</a> of the object.</p>
    pub distinguished_name: ::std::option::Option<::std::string::String>,
    /// <p>The AD group type. For details, see <a href="https://learn.microsoft.com/en-us/windows-server/identity/ad-ds/manage/understand-security-groups#how-active-directory-security-groups-work">Active Directory security group type</a>.</p>
    pub group_type: ::std::option::Option<crate::types::GroupType>,
    /// <p>The scope of the AD group. For details, see <a href="https://learn.microsoft.com/en-us/windows-server/identity/ad-ds/manage/understand-security-groups#group-scope">Active Directory security groups</a>.</p>
    pub group_scope: ::std::option::Option<crate::types::GroupScope>,
    /// <p>The attribute values that are returned for the attribute names that are included in the request.</p>
    pub other_attributes: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::AttributeValue>>,
    _request_id: Option<String>,
}
impl DescribeGroupOutput {
    /// <p>The identifier (ID) of the directory that's associated with the group.</p>
    pub fn directory_id(&self) -> ::std::option::Option<&str> {
        self.directory_id.as_deref()
    }
    /// <p>The domain name that's associated with the group.</p>
    pub fn realm(&self) -> ::std::option::Option<&str> {
        self.realm.as_deref()
    }
    /// <p>The unique security identifier (SID) of the group.</p>
    pub fn sid(&self) -> ::std::option::Option<&str> {
        self.sid.as_deref()
    }
    /// <p>The name of the group.</p>
    pub fn sam_account_name(&self) -> ::std::option::Option<&str> {
        self.sam_account_name.as_deref()
    }
    /// <p>The <a href="https://learn.microsoft.com/en-us/windows/win32/ad/object-names-and-identities#distinguished-name">distinguished name</a> of the object.</p>
    pub fn distinguished_name(&self) -> ::std::option::Option<&str> {
        self.distinguished_name.as_deref()
    }
    /// <p>The AD group type. For details, see <a href="https://learn.microsoft.com/en-us/windows-server/identity/ad-ds/manage/understand-security-groups#how-active-directory-security-groups-work">Active Directory security group type</a>.</p>
    pub fn group_type(&self) -> ::std::option::Option<&crate::types::GroupType> {
        self.group_type.as_ref()
    }
    /// <p>The scope of the AD group. For details, see <a href="https://learn.microsoft.com/en-us/windows-server/identity/ad-ds/manage/understand-security-groups#group-scope">Active Directory security groups</a>.</p>
    pub fn group_scope(&self) -> ::std::option::Option<&crate::types::GroupScope> {
        self.group_scope.as_ref()
    }
    /// <p>The attribute values that are returned for the attribute names that are included in the request.</p>
    pub fn other_attributes(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, crate::types::AttributeValue>> {
        self.other_attributes.as_ref()
    }
}
impl ::std::fmt::Debug for DescribeGroupOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeGroupOutput");
        formatter.field("directory_id", &self.directory_id);
        formatter.field("realm", &self.realm);
        formatter.field("sid", &self.sid);
        formatter.field("sam_account_name", &self.sam_account_name);
        formatter.field("distinguished_name", &"*** Sensitive Data Redacted ***");
        formatter.field("group_type", &self.group_type);
        formatter.field("group_scope", &self.group_scope);
        formatter.field("other_attributes", &self.other_attributes);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl ::aws_types::request_id::RequestId for DescribeGroupOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeGroupOutput {
    /// Creates a new builder-style object to manufacture [`DescribeGroupOutput`](crate::operation::describe_group::DescribeGroupOutput).
    pub fn builder() -> crate::operation::describe_group::builders::DescribeGroupOutputBuilder {
        crate::operation::describe_group::builders::DescribeGroupOutputBuilder::default()
    }
}

/// A builder for [`DescribeGroupOutput`](crate::operation::describe_group::DescribeGroupOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct DescribeGroupOutputBuilder {
    pub(crate) directory_id: ::std::option::Option<::std::string::String>,
    pub(crate) realm: ::std::option::Option<::std::string::String>,
    pub(crate) sid: ::std::option::Option<::std::string::String>,
    pub(crate) sam_account_name: ::std::option::Option<::std::string::String>,
    pub(crate) distinguished_name: ::std::option::Option<::std::string::String>,
    pub(crate) group_type: ::std::option::Option<crate::types::GroupType>,
    pub(crate) group_scope: ::std::option::Option<crate::types::GroupScope>,
    pub(crate) other_attributes: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::AttributeValue>>,
    _request_id: Option<String>,
}
impl DescribeGroupOutputBuilder {
    /// <p>The identifier (ID) of the directory that's associated with the group.</p>
    pub fn directory_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.directory_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier (ID) of the directory that's associated with the group.</p>
    pub fn set_directory_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.directory_id = input;
        self
    }
    /// <p>The identifier (ID) of the directory that's associated with the group.</p>
    pub fn get_directory_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.directory_id
    }
    /// <p>The domain name that's associated with the group.</p>
    pub fn realm(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.realm = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The domain name that's associated with the group.</p>
    pub fn set_realm(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.realm = input;
        self
    }
    /// <p>The domain name that's associated with the group.</p>
    pub fn get_realm(&self) -> &::std::option::Option<::std::string::String> {
        &self.realm
    }
    /// <p>The unique security identifier (SID) of the group.</p>
    pub fn sid(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.sid = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique security identifier (SID) of the group.</p>
    pub fn set_sid(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.sid = input;
        self
    }
    /// <p>The unique security identifier (SID) of the group.</p>
    pub fn get_sid(&self) -> &::std::option::Option<::std::string::String> {
        &self.sid
    }
    /// <p>The name of the group.</p>
    pub fn sam_account_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.sam_account_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the group.</p>
    pub fn set_sam_account_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.sam_account_name = input;
        self
    }
    /// <p>The name of the group.</p>
    pub fn get_sam_account_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.sam_account_name
    }
    /// <p>The <a href="https://learn.microsoft.com/en-us/windows/win32/ad/object-names-and-identities#distinguished-name">distinguished name</a> of the object.</p>
    pub fn distinguished_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.distinguished_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The <a href="https://learn.microsoft.com/en-us/windows/win32/ad/object-names-and-identities#distinguished-name">distinguished name</a> of the object.</p>
    pub fn set_distinguished_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.distinguished_name = input;
        self
    }
    /// <p>The <a href="https://learn.microsoft.com/en-us/windows/win32/ad/object-names-and-identities#distinguished-name">distinguished name</a> of the object.</p>
    pub fn get_distinguished_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.distinguished_name
    }
    /// <p>The AD group type. For details, see <a href="https://learn.microsoft.com/en-us/windows-server/identity/ad-ds/manage/understand-security-groups#how-active-directory-security-groups-work">Active Directory security group type</a>.</p>
    pub fn group_type(mut self, input: crate::types::GroupType) -> Self {
        self.group_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The AD group type. For details, see <a href="https://learn.microsoft.com/en-us/windows-server/identity/ad-ds/manage/understand-security-groups#how-active-directory-security-groups-work">Active Directory security group type</a>.</p>
    pub fn set_group_type(mut self, input: ::std::option::Option<crate::types::GroupType>) -> Self {
        self.group_type = input;
        self
    }
    /// <p>The AD group type. For details, see <a href="https://learn.microsoft.com/en-us/windows-server/identity/ad-ds/manage/understand-security-groups#how-active-directory-security-groups-work">Active Directory security group type</a>.</p>
    pub fn get_group_type(&self) -> &::std::option::Option<crate::types::GroupType> {
        &self.group_type
    }
    /// <p>The scope of the AD group. For details, see <a href="https://learn.microsoft.com/en-us/windows-server/identity/ad-ds/manage/understand-security-groups#group-scope">Active Directory security groups</a>.</p>
    pub fn group_scope(mut self, input: crate::types::GroupScope) -> Self {
        self.group_scope = ::std::option::Option::Some(input);
        self
    }
    /// <p>The scope of the AD group. For details, see <a href="https://learn.microsoft.com/en-us/windows-server/identity/ad-ds/manage/understand-security-groups#group-scope">Active Directory security groups</a>.</p>
    pub fn set_group_scope(mut self, input: ::std::option::Option<crate::types::GroupScope>) -> Self {
        self.group_scope = input;
        self
    }
    /// <p>The scope of the AD group. For details, see <a href="https://learn.microsoft.com/en-us/windows-server/identity/ad-ds/manage/understand-security-groups#group-scope">Active Directory security groups</a>.</p>
    pub fn get_group_scope(&self) -> &::std::option::Option<crate::types::GroupScope> {
        &self.group_scope
    }
    /// Adds a key-value pair to `other_attributes`.
    ///
    /// To override the contents of this collection use [`set_other_attributes`](Self::set_other_attributes).
    ///
    /// <p>The attribute values that are returned for the attribute names that are included in the request.</p>
    pub fn other_attributes(mut self, k: impl ::std::convert::Into<::std::string::String>, v: crate::types::AttributeValue) -> Self {
        let mut hash_map = self.other_attributes.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.other_attributes = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The attribute values that are returned for the attribute names that are included in the request.</p>
    pub fn set_other_attributes(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::AttributeValue>>,
    ) -> Self {
        self.other_attributes = input;
        self
    }
    /// <p>The attribute values that are returned for the attribute names that are included in the request.</p>
    pub fn get_other_attributes(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::AttributeValue>> {
        &self.other_attributes
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeGroupOutput`](crate::operation::describe_group::DescribeGroupOutput).
    pub fn build(self) -> crate::operation::describe_group::DescribeGroupOutput {
        crate::operation::describe_group::DescribeGroupOutput {
            directory_id: self.directory_id,
            realm: self.realm,
            sid: self.sid,
            sam_account_name: self.sam_account_name,
            distinguished_name: self.distinguished_name,
            group_type: self.group_type,
            group_scope: self.group_scope,
            other_attributes: self.other_attributes,
            _request_id: self._request_id,
        }
    }
}
impl ::std::fmt::Debug for DescribeGroupOutputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeGroupOutputBuilder");
        formatter.field("directory_id", &self.directory_id);
        formatter.field("realm", &self.realm);
        formatter.field("sid", &self.sid);
        formatter.field("sam_account_name", &self.sam_account_name);
        formatter.field("distinguished_name", &"*** Sensitive Data Redacted ***");
        formatter.field("group_type", &self.group_type);
        formatter.field("group_scope", &self.group_scope);
        formatter.field("other_attributes", &self.other_attributes);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
