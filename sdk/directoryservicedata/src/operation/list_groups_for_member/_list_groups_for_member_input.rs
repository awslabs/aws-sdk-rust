// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct ListGroupsForMemberInput {
    /// <p>The identifier (ID) of the directory that's associated with the member.</p>
    pub directory_id: ::std::option::Option<::std::string::String>,
    /// <p>The domain name that's associated with the group.</p><note>
    /// <p>This parameter is optional, so you can return groups outside of your Managed Microsoft AD domain. When no value is defined, only your Managed Microsoft AD groups are returned.</p>
    /// <p>This value is case insensitive and defaults to your Managed Microsoft AD domain.</p>
    /// </note>
    pub realm: ::std::option::Option<::std::string::String>,
    /// <p>The domain name that's associated with the group member.</p><note>
    /// <p>This parameter is optional, so you can limit your results to the group members in a specific domain.</p>
    /// <p>This parameter is case insensitive and defaults to <code>Realm</code></p>
    /// </note>
    pub member_realm: ::std::option::Option<::std::string::String>,
    /// <p>The <code>SAMAccountName</code> of the user, group, or computer that's a member of the group.</p>
    pub sam_account_name: ::std::option::Option<::std::string::String>,
    /// <p>An encoded paging token for paginated calls that can be passed back to retrieve the next page.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of results to be returned per request.</p>
    pub max_results: ::std::option::Option<i32>,
}
impl ListGroupsForMemberInput {
    /// <p>The identifier (ID) of the directory that's associated with the member.</p>
    pub fn directory_id(&self) -> ::std::option::Option<&str> {
        self.directory_id.as_deref()
    }
    /// <p>The domain name that's associated with the group.</p><note>
    /// <p>This parameter is optional, so you can return groups outside of your Managed Microsoft AD domain. When no value is defined, only your Managed Microsoft AD groups are returned.</p>
    /// <p>This value is case insensitive and defaults to your Managed Microsoft AD domain.</p>
    /// </note>
    pub fn realm(&self) -> ::std::option::Option<&str> {
        self.realm.as_deref()
    }
    /// <p>The domain name that's associated with the group member.</p><note>
    /// <p>This parameter is optional, so you can limit your results to the group members in a specific domain.</p>
    /// <p>This parameter is case insensitive and defaults to <code>Realm</code></p>
    /// </note>
    pub fn member_realm(&self) -> ::std::option::Option<&str> {
        self.member_realm.as_deref()
    }
    /// <p>The <code>SAMAccountName</code> of the user, group, or computer that's a member of the group.</p>
    pub fn sam_account_name(&self) -> ::std::option::Option<&str> {
        self.sam_account_name.as_deref()
    }
    /// <p>An encoded paging token for paginated calls that can be passed back to retrieve the next page.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of results to be returned per request.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
}
impl ::std::fmt::Debug for ListGroupsForMemberInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ListGroupsForMemberInput");
        formatter.field("directory_id", &self.directory_id);
        formatter.field("realm", &self.realm);
        formatter.field("member_realm", &self.member_realm);
        formatter.field("sam_account_name", &self.sam_account_name);
        formatter.field("next_token", &"*** Sensitive Data Redacted ***");
        formatter.field("max_results", &self.max_results);
        formatter.finish()
    }
}
impl ListGroupsForMemberInput {
    /// Creates a new builder-style object to manufacture [`ListGroupsForMemberInput`](crate::operation::list_groups_for_member::ListGroupsForMemberInput).
    pub fn builder() -> crate::operation::list_groups_for_member::builders::ListGroupsForMemberInputBuilder {
        crate::operation::list_groups_for_member::builders::ListGroupsForMemberInputBuilder::default()
    }
}

/// A builder for [`ListGroupsForMemberInput`](crate::operation::list_groups_for_member::ListGroupsForMemberInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct ListGroupsForMemberInputBuilder {
    pub(crate) directory_id: ::std::option::Option<::std::string::String>,
    pub(crate) realm: ::std::option::Option<::std::string::String>,
    pub(crate) member_realm: ::std::option::Option<::std::string::String>,
    pub(crate) sam_account_name: ::std::option::Option<::std::string::String>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
}
impl ListGroupsForMemberInputBuilder {
    /// <p>The identifier (ID) of the directory that's associated with the member.</p>
    /// This field is required.
    pub fn directory_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.directory_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier (ID) of the directory that's associated with the member.</p>
    pub fn set_directory_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.directory_id = input;
        self
    }
    /// <p>The identifier (ID) of the directory that's associated with the member.</p>
    pub fn get_directory_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.directory_id
    }
    /// <p>The domain name that's associated with the group.</p><note>
    /// <p>This parameter is optional, so you can return groups outside of your Managed Microsoft AD domain. When no value is defined, only your Managed Microsoft AD groups are returned.</p>
    /// <p>This value is case insensitive and defaults to your Managed Microsoft AD domain.</p>
    /// </note>
    pub fn realm(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.realm = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The domain name that's associated with the group.</p><note>
    /// <p>This parameter is optional, so you can return groups outside of your Managed Microsoft AD domain. When no value is defined, only your Managed Microsoft AD groups are returned.</p>
    /// <p>This value is case insensitive and defaults to your Managed Microsoft AD domain.</p>
    /// </note>
    pub fn set_realm(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.realm = input;
        self
    }
    /// <p>The domain name that's associated with the group.</p><note>
    /// <p>This parameter is optional, so you can return groups outside of your Managed Microsoft AD domain. When no value is defined, only your Managed Microsoft AD groups are returned.</p>
    /// <p>This value is case insensitive and defaults to your Managed Microsoft AD domain.</p>
    /// </note>
    pub fn get_realm(&self) -> &::std::option::Option<::std::string::String> {
        &self.realm
    }
    /// <p>The domain name that's associated with the group member.</p><note>
    /// <p>This parameter is optional, so you can limit your results to the group members in a specific domain.</p>
    /// <p>This parameter is case insensitive and defaults to <code>Realm</code></p>
    /// </note>
    pub fn member_realm(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.member_realm = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The domain name that's associated with the group member.</p><note>
    /// <p>This parameter is optional, so you can limit your results to the group members in a specific domain.</p>
    /// <p>This parameter is case insensitive and defaults to <code>Realm</code></p>
    /// </note>
    pub fn set_member_realm(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.member_realm = input;
        self
    }
    /// <p>The domain name that's associated with the group member.</p><note>
    /// <p>This parameter is optional, so you can limit your results to the group members in a specific domain.</p>
    /// <p>This parameter is case insensitive and defaults to <code>Realm</code></p>
    /// </note>
    pub fn get_member_realm(&self) -> &::std::option::Option<::std::string::String> {
        &self.member_realm
    }
    /// <p>The <code>SAMAccountName</code> of the user, group, or computer that's a member of the group.</p>
    /// This field is required.
    pub fn sam_account_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.sam_account_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The <code>SAMAccountName</code> of the user, group, or computer that's a member of the group.</p>
    pub fn set_sam_account_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.sam_account_name = input;
        self
    }
    /// <p>The <code>SAMAccountName</code> of the user, group, or computer that's a member of the group.</p>
    pub fn get_sam_account_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.sam_account_name
    }
    /// <p>An encoded paging token for paginated calls that can be passed back to retrieve the next page.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An encoded paging token for paginated calls that can be passed back to retrieve the next page.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>An encoded paging token for paginated calls that can be passed back to retrieve the next page.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>The maximum number of results to be returned per request.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of results to be returned per request.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of results to be returned per request.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// Consumes the builder and constructs a [`ListGroupsForMemberInput`](crate::operation::list_groups_for_member::ListGroupsForMemberInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_groups_for_member::ListGroupsForMemberInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::list_groups_for_member::ListGroupsForMemberInput {
            directory_id: self.directory_id,
            realm: self.realm,
            member_realm: self.member_realm,
            sam_account_name: self.sam_account_name,
            next_token: self.next_token,
            max_results: self.max_results,
        })
    }
}
impl ::std::fmt::Debug for ListGroupsForMemberInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ListGroupsForMemberInputBuilder");
        formatter.field("directory_id", &self.directory_id);
        formatter.field("realm", &self.realm);
        formatter.field("member_realm", &self.member_realm);
        formatter.field("sam_account_name", &self.sam_account_name);
        formatter.field("next_token", &"*** Sensitive Data Redacted ***");
        formatter.field("max_results", &self.max_results);
        formatter.finish()
    }
}
