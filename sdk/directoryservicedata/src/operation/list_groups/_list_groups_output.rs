// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct ListGroupsOutput {
    /// <p>The identifier (ID) of the directory that's associated with the group.</p>
    pub directory_id: ::std::option::Option<::std::string::String>,
    /// <p>The domain name associated with the group.</p>
    pub realm: ::std::option::Option<::std::string::String>,
    /// <p>The group information that the request returns.</p>
    pub groups: ::std::option::Option<::std::vec::Vec<crate::types::GroupSummary>>,
    /// <p>An encoded paging token for paginated calls that can be passed back to retrieve the next page.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListGroupsOutput {
    /// <p>The identifier (ID) of the directory that's associated with the group.</p>
    pub fn directory_id(&self) -> ::std::option::Option<&str> {
        self.directory_id.as_deref()
    }
    /// <p>The domain name associated with the group.</p>
    pub fn realm(&self) -> ::std::option::Option<&str> {
        self.realm.as_deref()
    }
    /// <p>The group information that the request returns.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.groups.is_none()`.
    pub fn groups(&self) -> &[crate::types::GroupSummary] {
        self.groups.as_deref().unwrap_or_default()
    }
    /// <p>An encoded paging token for paginated calls that can be passed back to retrieve the next page.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ::std::fmt::Debug for ListGroupsOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ListGroupsOutput");
        formatter.field("directory_id", &self.directory_id);
        formatter.field("realm", &self.realm);
        formatter.field("groups", &self.groups);
        formatter.field("next_token", &"*** Sensitive Data Redacted ***");
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl ::aws_types::request_id::RequestId for ListGroupsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListGroupsOutput {
    /// Creates a new builder-style object to manufacture [`ListGroupsOutput`](crate::operation::list_groups::ListGroupsOutput).
    pub fn builder() -> crate::operation::list_groups::builders::ListGroupsOutputBuilder {
        crate::operation::list_groups::builders::ListGroupsOutputBuilder::default()
    }
}

/// A builder for [`ListGroupsOutput`](crate::operation::list_groups::ListGroupsOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct ListGroupsOutputBuilder {
    pub(crate) directory_id: ::std::option::Option<::std::string::String>,
    pub(crate) realm: ::std::option::Option<::std::string::String>,
    pub(crate) groups: ::std::option::Option<::std::vec::Vec<crate::types::GroupSummary>>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListGroupsOutputBuilder {
    /// <p>The identifier (ID) of the directory that's associated with the group.</p>
    pub fn directory_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.directory_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier (ID) of the directory that's associated with the group.</p>
    pub fn set_directory_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.directory_id = input;
        self
    }
    /// <p>The identifier (ID) of the directory that's associated with the group.</p>
    pub fn get_directory_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.directory_id
    }
    /// <p>The domain name associated with the group.</p>
    pub fn realm(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.realm = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The domain name associated with the group.</p>
    pub fn set_realm(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.realm = input;
        self
    }
    /// <p>The domain name associated with the group.</p>
    pub fn get_realm(&self) -> &::std::option::Option<::std::string::String> {
        &self.realm
    }
    /// Appends an item to `groups`.
    ///
    /// To override the contents of this collection use [`set_groups`](Self::set_groups).
    ///
    /// <p>The group information that the request returns.</p>
    pub fn groups(mut self, input: crate::types::GroupSummary) -> Self {
        let mut v = self.groups.unwrap_or_default();
        v.push(input);
        self.groups = ::std::option::Option::Some(v);
        self
    }
    /// <p>The group information that the request returns.</p>
    pub fn set_groups(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::GroupSummary>>) -> Self {
        self.groups = input;
        self
    }
    /// <p>The group information that the request returns.</p>
    pub fn get_groups(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::GroupSummary>> {
        &self.groups
    }
    /// <p>An encoded paging token for paginated calls that can be passed back to retrieve the next page.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An encoded paging token for paginated calls that can be passed back to retrieve the next page.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>An encoded paging token for paginated calls that can be passed back to retrieve the next page.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListGroupsOutput`](crate::operation::list_groups::ListGroupsOutput).
    pub fn build(self) -> crate::operation::list_groups::ListGroupsOutput {
        crate::operation::list_groups::ListGroupsOutput {
            directory_id: self.directory_id,
            realm: self.realm,
            groups: self.groups,
            next_token: self.next_token,
            _request_id: self._request_id,
        }
    }
}
impl ::std::fmt::Debug for ListGroupsOutputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ListGroupsOutputBuilder");
        formatter.field("directory_id", &self.directory_id);
        formatter.field("realm", &self.realm);
        formatter.field("groups", &self.groups);
        formatter.field("next_token", &"*** Sensitive Data Redacted ***");
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
