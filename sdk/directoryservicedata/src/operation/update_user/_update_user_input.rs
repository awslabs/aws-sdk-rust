// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct UpdateUserInput {
    /// <p>The identifier (ID) of the directory that's associated with the user.</p>
    pub directory_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the user.</p>
    pub sam_account_name: ::std::option::Option<::std::string::String>,
    /// <p>The email address of the user.</p>
    pub email_address: ::std::option::Option<::std::string::String>,
    /// <p>The first name of the user.</p>
    pub given_name: ::std::option::Option<::std::string::String>,
    /// <p>The last name of the user.</p>
    pub surname: ::std::option::Option<::std::string::String>,
    /// <p>An expression that defines one or more attribute names with the data type and value of each attribute. A key is an attribute name, and the value is a list of maps. For a list of supported attributes, see <a href="https://docs.aws.amazon.com/directoryservice/latest/admin-guide/ad_data-attributes.html">Directory Service Data Attributes</a>.</p><note>
    /// <p>Attribute names are case insensitive.</p>
    /// </note>
    pub other_attributes: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::AttributeValue>>,
    /// <p>The type of update to be performed. If no value exists for the attribute, use <code>ADD</code>. Otherwise, use <code>REPLACE</code> to change an attribute value or <code>REMOVE</code> to clear the attribute value.</p>
    pub update_type: ::std::option::Option<crate::types::UpdateType>,
    /// <p>A unique and case-sensitive identifier that you provide to make sure the idempotency of the request, so multiple identical calls have the same effect as one single call.</p>
    /// <p>A client token is valid for 8 hours after the first request that uses it completes. After 8 hours, any request with the same client token is treated as a new request. If the request succeeds, any future uses of that token will be idempotent for another 8 hours.</p>
    /// <p>If you submit a request with the same client token but change one of the other parameters within the 8-hour idempotency window, Directory Service Data returns an <code>ConflictException</code>.</p><note>
    /// <p>This parameter is optional when using the CLI or SDK.</p>
    /// </note>
    pub client_token: ::std::option::Option<::std::string::String>,
}
impl UpdateUserInput {
    /// <p>The identifier (ID) of the directory that's associated with the user.</p>
    pub fn directory_id(&self) -> ::std::option::Option<&str> {
        self.directory_id.as_deref()
    }
    /// <p>The name of the user.</p>
    pub fn sam_account_name(&self) -> ::std::option::Option<&str> {
        self.sam_account_name.as_deref()
    }
    /// <p>The email address of the user.</p>
    pub fn email_address(&self) -> ::std::option::Option<&str> {
        self.email_address.as_deref()
    }
    /// <p>The first name of the user.</p>
    pub fn given_name(&self) -> ::std::option::Option<&str> {
        self.given_name.as_deref()
    }
    /// <p>The last name of the user.</p>
    pub fn surname(&self) -> ::std::option::Option<&str> {
        self.surname.as_deref()
    }
    /// <p>An expression that defines one or more attribute names with the data type and value of each attribute. A key is an attribute name, and the value is a list of maps. For a list of supported attributes, see <a href="https://docs.aws.amazon.com/directoryservice/latest/admin-guide/ad_data-attributes.html">Directory Service Data Attributes</a>.</p><note>
    /// <p>Attribute names are case insensitive.</p>
    /// </note>
    pub fn other_attributes(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, crate::types::AttributeValue>> {
        self.other_attributes.as_ref()
    }
    /// <p>The type of update to be performed. If no value exists for the attribute, use <code>ADD</code>. Otherwise, use <code>REPLACE</code> to change an attribute value or <code>REMOVE</code> to clear the attribute value.</p>
    pub fn update_type(&self) -> ::std::option::Option<&crate::types::UpdateType> {
        self.update_type.as_ref()
    }
    /// <p>A unique and case-sensitive identifier that you provide to make sure the idempotency of the request, so multiple identical calls have the same effect as one single call.</p>
    /// <p>A client token is valid for 8 hours after the first request that uses it completes. After 8 hours, any request with the same client token is treated as a new request. If the request succeeds, any future uses of that token will be idempotent for another 8 hours.</p>
    /// <p>If you submit a request with the same client token but change one of the other parameters within the 8-hour idempotency window, Directory Service Data returns an <code>ConflictException</code>.</p><note>
    /// <p>This parameter is optional when using the CLI or SDK.</p>
    /// </note>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
}
impl ::std::fmt::Debug for UpdateUserInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateUserInput");
        formatter.field("directory_id", &self.directory_id);
        formatter.field("sam_account_name", &self.sam_account_name);
        formatter.field("email_address", &"*** Sensitive Data Redacted ***");
        formatter.field("given_name", &"*** Sensitive Data Redacted ***");
        formatter.field("surname", &"*** Sensitive Data Redacted ***");
        formatter.field("other_attributes", &self.other_attributes);
        formatter.field("update_type", &self.update_type);
        formatter.field("client_token", &self.client_token);
        formatter.finish()
    }
}
impl UpdateUserInput {
    /// Creates a new builder-style object to manufacture [`UpdateUserInput`](crate::operation::update_user::UpdateUserInput).
    pub fn builder() -> crate::operation::update_user::builders::UpdateUserInputBuilder {
        crate::operation::update_user::builders::UpdateUserInputBuilder::default()
    }
}

/// A builder for [`UpdateUserInput`](crate::operation::update_user::UpdateUserInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct UpdateUserInputBuilder {
    pub(crate) directory_id: ::std::option::Option<::std::string::String>,
    pub(crate) sam_account_name: ::std::option::Option<::std::string::String>,
    pub(crate) email_address: ::std::option::Option<::std::string::String>,
    pub(crate) given_name: ::std::option::Option<::std::string::String>,
    pub(crate) surname: ::std::option::Option<::std::string::String>,
    pub(crate) other_attributes: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::AttributeValue>>,
    pub(crate) update_type: ::std::option::Option<crate::types::UpdateType>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
}
impl UpdateUserInputBuilder {
    /// <p>The identifier (ID) of the directory that's associated with the user.</p>
    /// This field is required.
    pub fn directory_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.directory_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier (ID) of the directory that's associated with the user.</p>
    pub fn set_directory_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.directory_id = input;
        self
    }
    /// <p>The identifier (ID) of the directory that's associated with the user.</p>
    pub fn get_directory_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.directory_id
    }
    /// <p>The name of the user.</p>
    /// This field is required.
    pub fn sam_account_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.sam_account_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the user.</p>
    pub fn set_sam_account_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.sam_account_name = input;
        self
    }
    /// <p>The name of the user.</p>
    pub fn get_sam_account_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.sam_account_name
    }
    /// <p>The email address of the user.</p>
    pub fn email_address(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.email_address = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The email address of the user.</p>
    pub fn set_email_address(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.email_address = input;
        self
    }
    /// <p>The email address of the user.</p>
    pub fn get_email_address(&self) -> &::std::option::Option<::std::string::String> {
        &self.email_address
    }
    /// <p>The first name of the user.</p>
    pub fn given_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.given_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The first name of the user.</p>
    pub fn set_given_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.given_name = input;
        self
    }
    /// <p>The first name of the user.</p>
    pub fn get_given_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.given_name
    }
    /// <p>The last name of the user.</p>
    pub fn surname(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.surname = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The last name of the user.</p>
    pub fn set_surname(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.surname = input;
        self
    }
    /// <p>The last name of the user.</p>
    pub fn get_surname(&self) -> &::std::option::Option<::std::string::String> {
        &self.surname
    }
    /// Adds a key-value pair to `other_attributes`.
    ///
    /// To override the contents of this collection use [`set_other_attributes`](Self::set_other_attributes).
    ///
    /// <p>An expression that defines one or more attribute names with the data type and value of each attribute. A key is an attribute name, and the value is a list of maps. For a list of supported attributes, see <a href="https://docs.aws.amazon.com/directoryservice/latest/admin-guide/ad_data-attributes.html">Directory Service Data Attributes</a>.</p><note>
    /// <p>Attribute names are case insensitive.</p>
    /// </note>
    pub fn other_attributes(mut self, k: impl ::std::convert::Into<::std::string::String>, v: crate::types::AttributeValue) -> Self {
        let mut hash_map = self.other_attributes.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.other_attributes = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>An expression that defines one or more attribute names with the data type and value of each attribute. A key is an attribute name, and the value is a list of maps. For a list of supported attributes, see <a href="https://docs.aws.amazon.com/directoryservice/latest/admin-guide/ad_data-attributes.html">Directory Service Data Attributes</a>.</p><note>
    /// <p>Attribute names are case insensitive.</p>
    /// </note>
    pub fn set_other_attributes(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::AttributeValue>>,
    ) -> Self {
        self.other_attributes = input;
        self
    }
    /// <p>An expression that defines one or more attribute names with the data type and value of each attribute. A key is an attribute name, and the value is a list of maps. For a list of supported attributes, see <a href="https://docs.aws.amazon.com/directoryservice/latest/admin-guide/ad_data-attributes.html">Directory Service Data Attributes</a>.</p><note>
    /// <p>Attribute names are case insensitive.</p>
    /// </note>
    pub fn get_other_attributes(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::AttributeValue>> {
        &self.other_attributes
    }
    /// <p>The type of update to be performed. If no value exists for the attribute, use <code>ADD</code>. Otherwise, use <code>REPLACE</code> to change an attribute value or <code>REMOVE</code> to clear the attribute value.</p>
    pub fn update_type(mut self, input: crate::types::UpdateType) -> Self {
        self.update_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of update to be performed. If no value exists for the attribute, use <code>ADD</code>. Otherwise, use <code>REPLACE</code> to change an attribute value or <code>REMOVE</code> to clear the attribute value.</p>
    pub fn set_update_type(mut self, input: ::std::option::Option<crate::types::UpdateType>) -> Self {
        self.update_type = input;
        self
    }
    /// <p>The type of update to be performed. If no value exists for the attribute, use <code>ADD</code>. Otherwise, use <code>REPLACE</code> to change an attribute value or <code>REMOVE</code> to clear the attribute value.</p>
    pub fn get_update_type(&self) -> &::std::option::Option<crate::types::UpdateType> {
        &self.update_type
    }
    /// <p>A unique and case-sensitive identifier that you provide to make sure the idempotency of the request, so multiple identical calls have the same effect as one single call.</p>
    /// <p>A client token is valid for 8 hours after the first request that uses it completes. After 8 hours, any request with the same client token is treated as a new request. If the request succeeds, any future uses of that token will be idempotent for another 8 hours.</p>
    /// <p>If you submit a request with the same client token but change one of the other parameters within the 8-hour idempotency window, Directory Service Data returns an <code>ConflictException</code>.</p><note>
    /// <p>This parameter is optional when using the CLI or SDK.</p>
    /// </note>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique and case-sensitive identifier that you provide to make sure the idempotency of the request, so multiple identical calls have the same effect as one single call.</p>
    /// <p>A client token is valid for 8 hours after the first request that uses it completes. After 8 hours, any request with the same client token is treated as a new request. If the request succeeds, any future uses of that token will be idempotent for another 8 hours.</p>
    /// <p>If you submit a request with the same client token but change one of the other parameters within the 8-hour idempotency window, Directory Service Data returns an <code>ConflictException</code>.</p><note>
    /// <p>This parameter is optional when using the CLI or SDK.</p>
    /// </note>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>A unique and case-sensitive identifier that you provide to make sure the idempotency of the request, so multiple identical calls have the same effect as one single call.</p>
    /// <p>A client token is valid for 8 hours after the first request that uses it completes. After 8 hours, any request with the same client token is treated as a new request. If the request succeeds, any future uses of that token will be idempotent for another 8 hours.</p>
    /// <p>If you submit a request with the same client token but change one of the other parameters within the 8-hour idempotency window, Directory Service Data returns an <code>ConflictException</code>.</p><note>
    /// <p>This parameter is optional when using the CLI or SDK.</p>
    /// </note>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// Consumes the builder and constructs a [`UpdateUserInput`](crate::operation::update_user::UpdateUserInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::update_user::UpdateUserInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_user::UpdateUserInput {
            directory_id: self.directory_id,
            sam_account_name: self.sam_account_name,
            email_address: self.email_address,
            given_name: self.given_name,
            surname: self.surname,
            other_attributes: self.other_attributes,
            update_type: self.update_type,
            client_token: self.client_token,
        })
    }
}
impl ::std::fmt::Debug for UpdateUserInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateUserInputBuilder");
        formatter.field("directory_id", &self.directory_id);
        formatter.field("sam_account_name", &self.sam_account_name);
        formatter.field("email_address", &"*** Sensitive Data Redacted ***");
        formatter.field("given_name", &"*** Sensitive Data Redacted ***");
        formatter.field("surname", &"*** Sensitive Data Redacted ***");
        formatter.field("other_attributes", &self.other_attributes);
        formatter.field("update_type", &self.update_type);
        formatter.field("client_token", &self.client_token);
        formatter.finish()
    }
}
