// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AddGroupMemberInput {
    /// <p>The identifier (ID) of the directory that's associated with the group.</p>
    pub directory_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the group.</p>
    pub group_name: ::std::option::Option<::std::string::String>,
    /// <p>The <code>SAMAccountName</code> of the user, group, or computer to add as a group member.</p>
    pub member_name: ::std::option::Option<::std::string::String>,
    /// <p>The domain name that's associated with the group member. This parameter is required only when adding a member outside of your Managed Microsoft AD domain to a group inside of your Managed Microsoft AD domain. This parameter defaults to the Managed Microsoft AD domain.</p><note>
    /// <p>This parameter is case insensitive.</p>
    /// </note>
    pub member_realm: ::std::option::Option<::std::string::String>,
    /// <p>A unique and case-sensitive identifier that you provide to make sure the idempotency of the request, so multiple identical calls have the same effect as one single call.</p>
    /// <p>A client token is valid for 8 hours after the first request that uses it completes. After 8 hours, any request with the same client token is treated as a new request. If the request succeeds, any future uses of that token will be idempotent for another 8 hours.</p>
    /// <p>If you submit a request with the same client token but change one of the other parameters within the 8-hour idempotency window, Directory Service Data returns an <code>ConflictException</code>.</p><note>
    /// <p>This parameter is optional when using the CLI or SDK.</p>
    /// </note>
    pub client_token: ::std::option::Option<::std::string::String>,
}
impl AddGroupMemberInput {
    /// <p>The identifier (ID) of the directory that's associated with the group.</p>
    pub fn directory_id(&self) -> ::std::option::Option<&str> {
        self.directory_id.as_deref()
    }
    /// <p>The name of the group.</p>
    pub fn group_name(&self) -> ::std::option::Option<&str> {
        self.group_name.as_deref()
    }
    /// <p>The <code>SAMAccountName</code> of the user, group, or computer to add as a group member.</p>
    pub fn member_name(&self) -> ::std::option::Option<&str> {
        self.member_name.as_deref()
    }
    /// <p>The domain name that's associated with the group member. This parameter is required only when adding a member outside of your Managed Microsoft AD domain to a group inside of your Managed Microsoft AD domain. This parameter defaults to the Managed Microsoft AD domain.</p><note>
    /// <p>This parameter is case insensitive.</p>
    /// </note>
    pub fn member_realm(&self) -> ::std::option::Option<&str> {
        self.member_realm.as_deref()
    }
    /// <p>A unique and case-sensitive identifier that you provide to make sure the idempotency of the request, so multiple identical calls have the same effect as one single call.</p>
    /// <p>A client token is valid for 8 hours after the first request that uses it completes. After 8 hours, any request with the same client token is treated as a new request. If the request succeeds, any future uses of that token will be idempotent for another 8 hours.</p>
    /// <p>If you submit a request with the same client token but change one of the other parameters within the 8-hour idempotency window, Directory Service Data returns an <code>ConflictException</code>.</p><note>
    /// <p>This parameter is optional when using the CLI or SDK.</p>
    /// </note>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
}
impl AddGroupMemberInput {
    /// Creates a new builder-style object to manufacture [`AddGroupMemberInput`](crate::operation::add_group_member::AddGroupMemberInput).
    pub fn builder() -> crate::operation::add_group_member::builders::AddGroupMemberInputBuilder {
        crate::operation::add_group_member::builders::AddGroupMemberInputBuilder::default()
    }
}

/// A builder for [`AddGroupMemberInput`](crate::operation::add_group_member::AddGroupMemberInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AddGroupMemberInputBuilder {
    pub(crate) directory_id: ::std::option::Option<::std::string::String>,
    pub(crate) group_name: ::std::option::Option<::std::string::String>,
    pub(crate) member_name: ::std::option::Option<::std::string::String>,
    pub(crate) member_realm: ::std::option::Option<::std::string::String>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
}
impl AddGroupMemberInputBuilder {
    /// <p>The identifier (ID) of the directory that's associated with the group.</p>
    /// This field is required.
    pub fn directory_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.directory_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier (ID) of the directory that's associated with the group.</p>
    pub fn set_directory_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.directory_id = input;
        self
    }
    /// <p>The identifier (ID) of the directory that's associated with the group.</p>
    pub fn get_directory_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.directory_id
    }
    /// <p>The name of the group.</p>
    /// This field is required.
    pub fn group_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.group_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the group.</p>
    pub fn set_group_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.group_name = input;
        self
    }
    /// <p>The name of the group.</p>
    pub fn get_group_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.group_name
    }
    /// <p>The <code>SAMAccountName</code> of the user, group, or computer to add as a group member.</p>
    /// This field is required.
    pub fn member_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.member_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The <code>SAMAccountName</code> of the user, group, or computer to add as a group member.</p>
    pub fn set_member_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.member_name = input;
        self
    }
    /// <p>The <code>SAMAccountName</code> of the user, group, or computer to add as a group member.</p>
    pub fn get_member_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.member_name
    }
    /// <p>The domain name that's associated with the group member. This parameter is required only when adding a member outside of your Managed Microsoft AD domain to a group inside of your Managed Microsoft AD domain. This parameter defaults to the Managed Microsoft AD domain.</p><note>
    /// <p>This parameter is case insensitive.</p>
    /// </note>
    pub fn member_realm(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.member_realm = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The domain name that's associated with the group member. This parameter is required only when adding a member outside of your Managed Microsoft AD domain to a group inside of your Managed Microsoft AD domain. This parameter defaults to the Managed Microsoft AD domain.</p><note>
    /// <p>This parameter is case insensitive.</p>
    /// </note>
    pub fn set_member_realm(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.member_realm = input;
        self
    }
    /// <p>The domain name that's associated with the group member. This parameter is required only when adding a member outside of your Managed Microsoft AD domain to a group inside of your Managed Microsoft AD domain. This parameter defaults to the Managed Microsoft AD domain.</p><note>
    /// <p>This parameter is case insensitive.</p>
    /// </note>
    pub fn get_member_realm(&self) -> &::std::option::Option<::std::string::String> {
        &self.member_realm
    }
    /// <p>A unique and case-sensitive identifier that you provide to make sure the idempotency of the request, so multiple identical calls have the same effect as one single call.</p>
    /// <p>A client token is valid for 8 hours after the first request that uses it completes. After 8 hours, any request with the same client token is treated as a new request. If the request succeeds, any future uses of that token will be idempotent for another 8 hours.</p>
    /// <p>If you submit a request with the same client token but change one of the other parameters within the 8-hour idempotency window, Directory Service Data returns an <code>ConflictException</code>.</p><note>
    /// <p>This parameter is optional when using the CLI or SDK.</p>
    /// </note>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique and case-sensitive identifier that you provide to make sure the idempotency of the request, so multiple identical calls have the same effect as one single call.</p>
    /// <p>A client token is valid for 8 hours after the first request that uses it completes. After 8 hours, any request with the same client token is treated as a new request. If the request succeeds, any future uses of that token will be idempotent for another 8 hours.</p>
    /// <p>If you submit a request with the same client token but change one of the other parameters within the 8-hour idempotency window, Directory Service Data returns an <code>ConflictException</code>.</p><note>
    /// <p>This parameter is optional when using the CLI or SDK.</p>
    /// </note>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>A unique and case-sensitive identifier that you provide to make sure the idempotency of the request, so multiple identical calls have the same effect as one single call.</p>
    /// <p>A client token is valid for 8 hours after the first request that uses it completes. After 8 hours, any request with the same client token is treated as a new request. If the request succeeds, any future uses of that token will be idempotent for another 8 hours.</p>
    /// <p>If you submit a request with the same client token but change one of the other parameters within the 8-hour idempotency window, Directory Service Data returns an <code>ConflictException</code>.</p><note>
    /// <p>This parameter is optional when using the CLI or SDK.</p>
    /// </note>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// Consumes the builder and constructs a [`AddGroupMemberInput`](crate::operation::add_group_member::AddGroupMemberInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::add_group_member::AddGroupMemberInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::add_group_member::AddGroupMemberInput {
            directory_id: self.directory_id,
            group_name: self.group_name,
            member_name: self.member_name,
            member_realm: self.member_realm,
            client_token: self.client_token,
        })
    }
}
