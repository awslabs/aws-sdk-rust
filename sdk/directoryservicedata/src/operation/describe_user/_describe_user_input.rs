// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeUserInput {
    /// <p>The identifier (ID) of the directory that's associated with the user.</p>
    pub directory_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the user.</p>
    pub sam_account_name: ::std::option::Option<::std::string::String>,
    /// <p>One or more attribute names to be returned for the user. A key is an attribute name, and the value is a list of maps. For a list of supported attributes, see <a href="https://docs.aws.amazon.com/directoryservice/latest/admin-guide/ad_data_attributes.html">Directory Service Data Attributes</a>.</p>
    pub other_attributes: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The domain name that's associated with the user.</p><note>
    /// <p>This parameter is optional, so you can return users outside your Managed Microsoft AD domain. When no value is defined, only your Managed Microsoft AD users are returned.</p>
    /// <p>This value is case insensitive.</p>
    /// </note>
    pub realm: ::std::option::Option<::std::string::String>,
}
impl DescribeUserInput {
    /// <p>The identifier (ID) of the directory that's associated with the user.</p>
    pub fn directory_id(&self) -> ::std::option::Option<&str> {
        self.directory_id.as_deref()
    }
    /// <p>The name of the user.</p>
    pub fn sam_account_name(&self) -> ::std::option::Option<&str> {
        self.sam_account_name.as_deref()
    }
    /// <p>One or more attribute names to be returned for the user. A key is an attribute name, and the value is a list of maps. For a list of supported attributes, see <a href="https://docs.aws.amazon.com/directoryservice/latest/admin-guide/ad_data_attributes.html">Directory Service Data Attributes</a>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.other_attributes.is_none()`.
    pub fn other_attributes(&self) -> &[::std::string::String] {
        self.other_attributes.as_deref().unwrap_or_default()
    }
    /// <p>The domain name that's associated with the user.</p><note>
    /// <p>This parameter is optional, so you can return users outside your Managed Microsoft AD domain. When no value is defined, only your Managed Microsoft AD users are returned.</p>
    /// <p>This value is case insensitive.</p>
    /// </note>
    pub fn realm(&self) -> ::std::option::Option<&str> {
        self.realm.as_deref()
    }
}
impl DescribeUserInput {
    /// Creates a new builder-style object to manufacture [`DescribeUserInput`](crate::operation::describe_user::DescribeUserInput).
    pub fn builder() -> crate::operation::describe_user::builders::DescribeUserInputBuilder {
        crate::operation::describe_user::builders::DescribeUserInputBuilder::default()
    }
}

/// A builder for [`DescribeUserInput`](crate::operation::describe_user::DescribeUserInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DescribeUserInputBuilder {
    pub(crate) directory_id: ::std::option::Option<::std::string::String>,
    pub(crate) sam_account_name: ::std::option::Option<::std::string::String>,
    pub(crate) other_attributes: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) realm: ::std::option::Option<::std::string::String>,
}
impl DescribeUserInputBuilder {
    /// <p>The identifier (ID) of the directory that's associated with the user.</p>
    /// This field is required.
    pub fn directory_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.directory_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier (ID) of the directory that's associated with the user.</p>
    pub fn set_directory_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.directory_id = input;
        self
    }
    /// <p>The identifier (ID) of the directory that's associated with the user.</p>
    pub fn get_directory_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.directory_id
    }
    /// <p>The name of the user.</p>
    /// This field is required.
    pub fn sam_account_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.sam_account_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the user.</p>
    pub fn set_sam_account_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.sam_account_name = input;
        self
    }
    /// <p>The name of the user.</p>
    pub fn get_sam_account_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.sam_account_name
    }
    /// Appends an item to `other_attributes`.
    ///
    /// To override the contents of this collection use [`set_other_attributes`](Self::set_other_attributes).
    ///
    /// <p>One or more attribute names to be returned for the user. A key is an attribute name, and the value is a list of maps. For a list of supported attributes, see <a href="https://docs.aws.amazon.com/directoryservice/latest/admin-guide/ad_data_attributes.html">Directory Service Data Attributes</a>.</p>
    pub fn other_attributes(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.other_attributes.unwrap_or_default();
        v.push(input.into());
        self.other_attributes = ::std::option::Option::Some(v);
        self
    }
    /// <p>One or more attribute names to be returned for the user. A key is an attribute name, and the value is a list of maps. For a list of supported attributes, see <a href="https://docs.aws.amazon.com/directoryservice/latest/admin-guide/ad_data_attributes.html">Directory Service Data Attributes</a>.</p>
    pub fn set_other_attributes(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.other_attributes = input;
        self
    }
    /// <p>One or more attribute names to be returned for the user. A key is an attribute name, and the value is a list of maps. For a list of supported attributes, see <a href="https://docs.aws.amazon.com/directoryservice/latest/admin-guide/ad_data_attributes.html">Directory Service Data Attributes</a>.</p>
    pub fn get_other_attributes(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.other_attributes
    }
    /// <p>The domain name that's associated with the user.</p><note>
    /// <p>This parameter is optional, so you can return users outside your Managed Microsoft AD domain. When no value is defined, only your Managed Microsoft AD users are returned.</p>
    /// <p>This value is case insensitive.</p>
    /// </note>
    pub fn realm(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.realm = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The domain name that's associated with the user.</p><note>
    /// <p>This parameter is optional, so you can return users outside your Managed Microsoft AD domain. When no value is defined, only your Managed Microsoft AD users are returned.</p>
    /// <p>This value is case insensitive.</p>
    /// </note>
    pub fn set_realm(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.realm = input;
        self
    }
    /// <p>The domain name that's associated with the user.</p><note>
    /// <p>This parameter is optional, so you can return users outside your Managed Microsoft AD domain. When no value is defined, only your Managed Microsoft AD users are returned.</p>
    /// <p>This value is case insensitive.</p>
    /// </note>
    pub fn get_realm(&self) -> &::std::option::Option<::std::string::String> {
        &self.realm
    }
    /// Consumes the builder and constructs a [`DescribeUserInput`](crate::operation::describe_user::DescribeUserInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::describe_user::DescribeUserInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::describe_user::DescribeUserInput {
            directory_id: self.directory_id,
            sam_account_name: self.sam_account_name,
            other_attributes: self.other_attributes,
            realm: self.realm,
        })
    }
}
