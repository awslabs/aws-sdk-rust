// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateGroupInput {
    /// <p>The identifier (ID) of the directory that's associated with the group.</p>
    pub directory_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the group.</p>
    pub sam_account_name: ::std::option::Option<::std::string::String>,
    /// <p>The AD group type. For details, see <a href="https://learn.microsoft.com/en-us/windows-server/identity/ad-ds/manage/understand-security-groups#how-active-directory-security-groups-work">Active Directory security group type</a>.</p>
    pub group_type: ::std::option::Option<crate::types::GroupType>,
    /// <p>The scope of the AD group. For details, see <a href="https://learn.microsoft.com/en-us/windows-server/identity/ad-ds/manage/understand-security-groups#group-scope">Active Directory security group scope</a>.</p>
    pub group_scope: ::std::option::Option<crate::types::GroupScope>,
    /// <p>An expression that defines one or more attributes with the data type and value of each attribute.</p>
    pub other_attributes: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::AttributeValue>>,
    /// <p>A unique and case-sensitive identifier that you provide to make sure the idempotency of the request, so multiple identical calls have the same effect as one single call.</p>
    /// <p>A client token is valid for 8 hours after the first request that uses it completes. After 8 hours, any request with the same client token is treated as a new request. If the request succeeds, any future uses of that token will be idempotent for another 8 hours.</p>
    /// <p>If you submit a request with the same client token but change one of the other parameters within the 8-hour idempotency window, Directory Service Data returns an <code>ConflictException</code>.</p><note>
    /// <p>This parameter is optional when using the CLI or SDK.</p>
    /// </note>
    pub client_token: ::std::option::Option<::std::string::String>,
}
impl CreateGroupInput {
    /// <p>The identifier (ID) of the directory that's associated with the group.</p>
    pub fn directory_id(&self) -> ::std::option::Option<&str> {
        self.directory_id.as_deref()
    }
    /// <p>The name of the group.</p>
    pub fn sam_account_name(&self) -> ::std::option::Option<&str> {
        self.sam_account_name.as_deref()
    }
    /// <p>The AD group type. For details, see <a href="https://learn.microsoft.com/en-us/windows-server/identity/ad-ds/manage/understand-security-groups#how-active-directory-security-groups-work">Active Directory security group type</a>.</p>
    pub fn group_type(&self) -> ::std::option::Option<&crate::types::GroupType> {
        self.group_type.as_ref()
    }
    /// <p>The scope of the AD group. For details, see <a href="https://learn.microsoft.com/en-us/windows-server/identity/ad-ds/manage/understand-security-groups#group-scope">Active Directory security group scope</a>.</p>
    pub fn group_scope(&self) -> ::std::option::Option<&crate::types::GroupScope> {
        self.group_scope.as_ref()
    }
    /// <p>An expression that defines one or more attributes with the data type and value of each attribute.</p>
    pub fn other_attributes(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, crate::types::AttributeValue>> {
        self.other_attributes.as_ref()
    }
    /// <p>A unique and case-sensitive identifier that you provide to make sure the idempotency of the request, so multiple identical calls have the same effect as one single call.</p>
    /// <p>A client token is valid for 8 hours after the first request that uses it completes. After 8 hours, any request with the same client token is treated as a new request. If the request succeeds, any future uses of that token will be idempotent for another 8 hours.</p>
    /// <p>If you submit a request with the same client token but change one of the other parameters within the 8-hour idempotency window, Directory Service Data returns an <code>ConflictException</code>.</p><note>
    /// <p>This parameter is optional when using the CLI or SDK.</p>
    /// </note>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
}
impl CreateGroupInput {
    /// Creates a new builder-style object to manufacture [`CreateGroupInput`](crate::operation::create_group::CreateGroupInput).
    pub fn builder() -> crate::operation::create_group::builders::CreateGroupInputBuilder {
        crate::operation::create_group::builders::CreateGroupInputBuilder::default()
    }
}

/// A builder for [`CreateGroupInput`](crate::operation::create_group::CreateGroupInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateGroupInputBuilder {
    pub(crate) directory_id: ::std::option::Option<::std::string::String>,
    pub(crate) sam_account_name: ::std::option::Option<::std::string::String>,
    pub(crate) group_type: ::std::option::Option<crate::types::GroupType>,
    pub(crate) group_scope: ::std::option::Option<crate::types::GroupScope>,
    pub(crate) other_attributes: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::AttributeValue>>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
}
impl CreateGroupInputBuilder {
    /// <p>The identifier (ID) of the directory that's associated with the group.</p>
    /// This field is required.
    pub fn directory_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.directory_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier (ID) of the directory that's associated with the group.</p>
    pub fn set_directory_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.directory_id = input;
        self
    }
    /// <p>The identifier (ID) of the directory that's associated with the group.</p>
    pub fn get_directory_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.directory_id
    }
    /// <p>The name of the group.</p>
    /// This field is required.
    pub fn sam_account_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.sam_account_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the group.</p>
    pub fn set_sam_account_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.sam_account_name = input;
        self
    }
    /// <p>The name of the group.</p>
    pub fn get_sam_account_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.sam_account_name
    }
    /// <p>The AD group type. For details, see <a href="https://learn.microsoft.com/en-us/windows-server/identity/ad-ds/manage/understand-security-groups#how-active-directory-security-groups-work">Active Directory security group type</a>.</p>
    pub fn group_type(mut self, input: crate::types::GroupType) -> Self {
        self.group_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The AD group type. For details, see <a href="https://learn.microsoft.com/en-us/windows-server/identity/ad-ds/manage/understand-security-groups#how-active-directory-security-groups-work">Active Directory security group type</a>.</p>
    pub fn set_group_type(mut self, input: ::std::option::Option<crate::types::GroupType>) -> Self {
        self.group_type = input;
        self
    }
    /// <p>The AD group type. For details, see <a href="https://learn.microsoft.com/en-us/windows-server/identity/ad-ds/manage/understand-security-groups#how-active-directory-security-groups-work">Active Directory security group type</a>.</p>
    pub fn get_group_type(&self) -> &::std::option::Option<crate::types::GroupType> {
        &self.group_type
    }
    /// <p>The scope of the AD group. For details, see <a href="https://learn.microsoft.com/en-us/windows-server/identity/ad-ds/manage/understand-security-groups#group-scope">Active Directory security group scope</a>.</p>
    pub fn group_scope(mut self, input: crate::types::GroupScope) -> Self {
        self.group_scope = ::std::option::Option::Some(input);
        self
    }
    /// <p>The scope of the AD group. For details, see <a href="https://learn.microsoft.com/en-us/windows-server/identity/ad-ds/manage/understand-security-groups#group-scope">Active Directory security group scope</a>.</p>
    pub fn set_group_scope(mut self, input: ::std::option::Option<crate::types::GroupScope>) -> Self {
        self.group_scope = input;
        self
    }
    /// <p>The scope of the AD group. For details, see <a href="https://learn.microsoft.com/en-us/windows-server/identity/ad-ds/manage/understand-security-groups#group-scope">Active Directory security group scope</a>.</p>
    pub fn get_group_scope(&self) -> &::std::option::Option<crate::types::GroupScope> {
        &self.group_scope
    }
    /// Adds a key-value pair to `other_attributes`.
    ///
    /// To override the contents of this collection use [`set_other_attributes`](Self::set_other_attributes).
    ///
    /// <p>An expression that defines one or more attributes with the data type and value of each attribute.</p>
    pub fn other_attributes(mut self, k: impl ::std::convert::Into<::std::string::String>, v: crate::types::AttributeValue) -> Self {
        let mut hash_map = self.other_attributes.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.other_attributes = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>An expression that defines one or more attributes with the data type and value of each attribute.</p>
    pub fn set_other_attributes(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::AttributeValue>>,
    ) -> Self {
        self.other_attributes = input;
        self
    }
    /// <p>An expression that defines one or more attributes with the data type and value of each attribute.</p>
    pub fn get_other_attributes(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::AttributeValue>> {
        &self.other_attributes
    }
    /// <p>A unique and case-sensitive identifier that you provide to make sure the idempotency of the request, so multiple identical calls have the same effect as one single call.</p>
    /// <p>A client token is valid for 8 hours after the first request that uses it completes. After 8 hours, any request with the same client token is treated as a new request. If the request succeeds, any future uses of that token will be idempotent for another 8 hours.</p>
    /// <p>If you submit a request with the same client token but change one of the other parameters within the 8-hour idempotency window, Directory Service Data returns an <code>ConflictException</code>.</p><note>
    /// <p>This parameter is optional when using the CLI or SDK.</p>
    /// </note>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique and case-sensitive identifier that you provide to make sure the idempotency of the request, so multiple identical calls have the same effect as one single call.</p>
    /// <p>A client token is valid for 8 hours after the first request that uses it completes. After 8 hours, any request with the same client token is treated as a new request. If the request succeeds, any future uses of that token will be idempotent for another 8 hours.</p>
    /// <p>If you submit a request with the same client token but change one of the other parameters within the 8-hour idempotency window, Directory Service Data returns an <code>ConflictException</code>.</p><note>
    /// <p>This parameter is optional when using the CLI or SDK.</p>
    /// </note>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>A unique and case-sensitive identifier that you provide to make sure the idempotency of the request, so multiple identical calls have the same effect as one single call.</p>
    /// <p>A client token is valid for 8 hours after the first request that uses it completes. After 8 hours, any request with the same client token is treated as a new request. If the request succeeds, any future uses of that token will be idempotent for another 8 hours.</p>
    /// <p>If you submit a request with the same client token but change one of the other parameters within the 8-hour idempotency window, Directory Service Data returns an <code>ConflictException</code>.</p><note>
    /// <p>This parameter is optional when using the CLI or SDK.</p>
    /// </note>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// Consumes the builder and constructs a [`CreateGroupInput`](crate::operation::create_group::CreateGroupInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::create_group::CreateGroupInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::create_group::CreateGroupInput {
            directory_id: self.directory_id,
            sam_account_name: self.sam_account_name,
            group_type: self.group_type,
            group_scope: self.group_scope,
            other_attributes: self.other_attributes,
            client_token: self.client_token,
        })
    }
}
