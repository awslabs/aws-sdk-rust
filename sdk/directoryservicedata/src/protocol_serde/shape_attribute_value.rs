// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_attribute_value(
    object_8: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::AttributeValue,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    match input {
        crate::types::AttributeValue::S(inner) => {
            object_8.key("S").string(inner.as_str());
        }
        crate::types::AttributeValue::N(inner) => {
            object_8.key("N").number(
                #[allow(clippy::useless_conversion)]
                ::aws_smithy_types::Number::NegInt((*inner).into()),
            );
        }
        crate::types::AttributeValue::Bool(inner) => {
            object_8.key("BOOL").boolean(*inner);
        }
        crate::types::AttributeValue::Ss(inner) => {
            let mut array_1 = object_8.key("SS").start_array();
            for item_2 in inner {
                {
                    array_1.value().string(item_2.as_str());
                }
            }
            array_1.finish();
        }
        crate::types::AttributeValue::Unknown => {
            return Err(::aws_smithy_types::error::operation::SerializationError::unknown_variant(
                "AttributeValue",
            ))
        }
    }
    Ok(())
}

pub(crate) fn de_attribute_value<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::AttributeValue>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    let mut variant = None;
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => return Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => loop {
            match tokens.next().transpose()? {
                Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                    if let ::std::option::Option::Some(::std::result::Result::Ok(::aws_smithy_json::deserialize::Token::ValueNull { .. })) =
                        tokens.peek()
                    {
                        let _ = tokens.next().expect("peek returned a token")?;
                        continue;
                    }
                    let key = key.to_unescaped()?;
                    if key == "__type" {
                        ::aws_smithy_json::deserialize::token::skip_value(tokens)?;
                        continue;
                    }
                    if variant.is_some() {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
                            "encountered mixed variants in union",
                        ));
                    }
                    variant = match key.as_ref() {
                        "S" => Some(crate::types::AttributeValue::S(
                            ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                .transpose()?
                                .ok_or_else(|| ::aws_smithy_json::deserialize::error::DeserializeError::custom("value for 'S' cannot be null"))?,
                        )),
                        "N" => Some(crate::types::AttributeValue::N(
                            ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                .map(i64::try_from)
                                .transpose()?
                                .ok_or_else(|| ::aws_smithy_json::deserialize::error::DeserializeError::custom("value for 'N' cannot be null"))?,
                        )),
                        "BOOL" => Some(crate::types::AttributeValue::Bool(
                            ::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?
                                .ok_or_else(|| ::aws_smithy_json::deserialize::error::DeserializeError::custom("value for 'BOOL' cannot be null"))?,
                        )),
                        "SS" => Some(crate::types::AttributeValue::Ss(
                            crate::protocol_serde::shape_string_set_attribute_value::de_string_set_attribute_value(tokens)?
                                .ok_or_else(|| ::aws_smithy_json::deserialize::error::DeserializeError::custom("value for 'SS' cannot be null"))?,
                        )),
                        _ => {
                            ::aws_smithy_json::deserialize::token::skip_value(tokens)?;
                            Some(crate::types::AttributeValue::Unknown)
                        }
                    };
                }
                other => {
                    return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                        "expected object key or end object, found: {:?}",
                        other
                    )))
                }
            }
        },
        _ => {
            return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ))
        }
    }
    if variant.is_none() {
        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "Union did not contain a valid variant.",
        ));
    }
    Ok(variant)
}
