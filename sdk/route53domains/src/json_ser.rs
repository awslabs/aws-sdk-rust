// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_accept_domain_transfer_from_another_aws_account_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AcceptDomainTransferFromAnotherAwsAccountInput,
) {
    if let Some(var_1) = &input.domain_name {
        object.key("DomainName").string(var_1);
    }
    if let Some(var_2) = &input.password {
        object.key("Password").string(var_2);
    }
}

pub fn serialize_structure_crate_input_cancel_domain_transfer_to_another_aws_account_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CancelDomainTransferToAnotherAwsAccountInput,
) {
    if let Some(var_3) = &input.domain_name {
        object.key("DomainName").string(var_3);
    }
}

pub fn serialize_structure_crate_input_check_domain_availability_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CheckDomainAvailabilityInput,
) {
    if let Some(var_4) = &input.domain_name {
        object.key("DomainName").string(var_4);
    }
    if let Some(var_5) = &input.idn_lang_code {
        object.key("IdnLangCode").string(var_5);
    }
}

pub fn serialize_structure_crate_input_check_domain_transferability_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CheckDomainTransferabilityInput,
) {
    if let Some(var_6) = &input.domain_name {
        object.key("DomainName").string(var_6);
    }
    if let Some(var_7) = &input.auth_code {
        object.key("AuthCode").string(var_7);
    }
}

pub fn serialize_structure_crate_input_delete_tags_for_domain_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteTagsForDomainInput,
) {
    if let Some(var_8) = &input.domain_name {
        object.key("DomainName").string(var_8);
    }
    if let Some(var_9) = &input.tags_to_delete {
        let mut array_10 = object.key("TagsToDelete").start_array();
        for item_11 in var_9 {
            {
                array_10.value().string(item_11);
            }
        }
        array_10.finish();
    }
}

pub fn serialize_structure_crate_input_disable_domain_auto_renew_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisableDomainAutoRenewInput,
) {
    if let Some(var_12) = &input.domain_name {
        object.key("DomainName").string(var_12);
    }
}

pub fn serialize_structure_crate_input_disable_domain_transfer_lock_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisableDomainTransferLockInput,
) {
    if let Some(var_13) = &input.domain_name {
        object.key("DomainName").string(var_13);
    }
}

pub fn serialize_structure_crate_input_enable_domain_auto_renew_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::EnableDomainAutoRenewInput,
) {
    if let Some(var_14) = &input.domain_name {
        object.key("DomainName").string(var_14);
    }
}

pub fn serialize_structure_crate_input_enable_domain_transfer_lock_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::EnableDomainTransferLockInput,
) {
    if let Some(var_15) = &input.domain_name {
        object.key("DomainName").string(var_15);
    }
}

pub fn serialize_structure_crate_input_get_contact_reachability_status_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetContactReachabilityStatusInput,
) {
    if let Some(var_16) = &input.domain_name {
        object.key("domainName").string(var_16);
    }
}

pub fn serialize_structure_crate_input_get_domain_detail_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetDomainDetailInput,
) {
    if let Some(var_17) = &input.domain_name {
        object.key("DomainName").string(var_17);
    }
}

pub fn serialize_structure_crate_input_get_domain_suggestions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetDomainSuggestionsInput,
) {
    if let Some(var_18) = &input.domain_name {
        object.key("DomainName").string(var_18);
    }
    {
        object.key("SuggestionCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.suggestion_count).into()),
        );
    }
    if let Some(var_19) = &input.only_available {
        object.key("OnlyAvailable").boolean(*var_19);
    }
}

pub fn serialize_structure_crate_input_get_operation_detail_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetOperationDetailInput,
) {
    if let Some(var_20) = &input.operation_id {
        object.key("OperationId").string(var_20);
    }
}

pub fn serialize_structure_crate_input_list_domains_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDomainsInput,
) {
    if let Some(var_21) = &input.marker {
        object.key("Marker").string(var_21);
    }
    if let Some(var_22) = &input.max_items {
        object.key("MaxItems").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_22).into()),
        );
    }
}

pub fn serialize_structure_crate_input_list_operations_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListOperationsInput,
) {
    if let Some(var_23) = &input.submitted_since {
        object
            .key("SubmittedSince")
            .instant(var_23, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_24) = &input.marker {
        object.key("Marker").string(var_24);
    }
    if let Some(var_25) = &input.max_items {
        object.key("MaxItems").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_25).into()),
        );
    }
}

pub fn serialize_structure_crate_input_list_tags_for_domain_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTagsForDomainInput,
) {
    if let Some(var_26) = &input.domain_name {
        object.key("DomainName").string(var_26);
    }
}

pub fn serialize_structure_crate_input_register_domain_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RegisterDomainInput,
) {
    if let Some(var_27) = &input.domain_name {
        object.key("DomainName").string(var_27);
    }
    if let Some(var_28) = &input.idn_lang_code {
        object.key("IdnLangCode").string(var_28);
    }
    if let Some(var_29) = &input.duration_in_years {
        object.key("DurationInYears").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_29).into()),
        );
    }
    if let Some(var_30) = &input.auto_renew {
        object.key("AutoRenew").boolean(*var_30);
    }
    if let Some(var_31) = &input.admin_contact {
        let mut object_32 = object.key("AdminContact").start_object();
        crate::json_ser::serialize_structure_crate_model_contact_detail(&mut object_32, var_31);
        object_32.finish();
    }
    if let Some(var_33) = &input.registrant_contact {
        let mut object_34 = object.key("RegistrantContact").start_object();
        crate::json_ser::serialize_structure_crate_model_contact_detail(&mut object_34, var_33);
        object_34.finish();
    }
    if let Some(var_35) = &input.tech_contact {
        let mut object_36 = object.key("TechContact").start_object();
        crate::json_ser::serialize_structure_crate_model_contact_detail(&mut object_36, var_35);
        object_36.finish();
    }
    if let Some(var_37) = &input.privacy_protect_admin_contact {
        object.key("PrivacyProtectAdminContact").boolean(*var_37);
    }
    if let Some(var_38) = &input.privacy_protect_registrant_contact {
        object
            .key("PrivacyProtectRegistrantContact")
            .boolean(*var_38);
    }
    if let Some(var_39) = &input.privacy_protect_tech_contact {
        object.key("PrivacyProtectTechContact").boolean(*var_39);
    }
}

pub fn serialize_structure_crate_input_reject_domain_transfer_from_another_aws_account_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RejectDomainTransferFromAnotherAwsAccountInput,
) {
    if let Some(var_40) = &input.domain_name {
        object.key("DomainName").string(var_40);
    }
}

pub fn serialize_structure_crate_input_renew_domain_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RenewDomainInput,
) {
    if let Some(var_41) = &input.domain_name {
        object.key("DomainName").string(var_41);
    }
    if let Some(var_42) = &input.duration_in_years {
        object.key("DurationInYears").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_42).into()),
        );
    }
    {
        object.key("CurrentExpiryYear").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.current_expiry_year).into()),
        );
    }
}

pub fn serialize_structure_crate_input_resend_contact_reachability_email_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ResendContactReachabilityEmailInput,
) {
    if let Some(var_43) = &input.domain_name {
        object.key("domainName").string(var_43);
    }
}

pub fn serialize_structure_crate_input_retrieve_domain_auth_code_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RetrieveDomainAuthCodeInput,
) {
    if let Some(var_44) = &input.domain_name {
        object.key("DomainName").string(var_44);
    }
}

pub fn serialize_structure_crate_input_transfer_domain_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TransferDomainInput,
) {
    if let Some(var_45) = &input.domain_name {
        object.key("DomainName").string(var_45);
    }
    if let Some(var_46) = &input.idn_lang_code {
        object.key("IdnLangCode").string(var_46);
    }
    if let Some(var_47) = &input.duration_in_years {
        object.key("DurationInYears").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_47).into()),
        );
    }
    if let Some(var_48) = &input.nameservers {
        let mut array_49 = object.key("Nameservers").start_array();
        for item_50 in var_48 {
            {
                let mut object_51 = array_49.value().start_object();
                crate::json_ser::serialize_structure_crate_model_nameserver(
                    &mut object_51,
                    item_50,
                );
                object_51.finish();
            }
        }
        array_49.finish();
    }
    if let Some(var_52) = &input.auth_code {
        object.key("AuthCode").string(var_52);
    }
    if let Some(var_53) = &input.auto_renew {
        object.key("AutoRenew").boolean(*var_53);
    }
    if let Some(var_54) = &input.admin_contact {
        let mut object_55 = object.key("AdminContact").start_object();
        crate::json_ser::serialize_structure_crate_model_contact_detail(&mut object_55, var_54);
        object_55.finish();
    }
    if let Some(var_56) = &input.registrant_contact {
        let mut object_57 = object.key("RegistrantContact").start_object();
        crate::json_ser::serialize_structure_crate_model_contact_detail(&mut object_57, var_56);
        object_57.finish();
    }
    if let Some(var_58) = &input.tech_contact {
        let mut object_59 = object.key("TechContact").start_object();
        crate::json_ser::serialize_structure_crate_model_contact_detail(&mut object_59, var_58);
        object_59.finish();
    }
    if let Some(var_60) = &input.privacy_protect_admin_contact {
        object.key("PrivacyProtectAdminContact").boolean(*var_60);
    }
    if let Some(var_61) = &input.privacy_protect_registrant_contact {
        object
            .key("PrivacyProtectRegistrantContact")
            .boolean(*var_61);
    }
    if let Some(var_62) = &input.privacy_protect_tech_contact {
        object.key("PrivacyProtectTechContact").boolean(*var_62);
    }
}

pub fn serialize_structure_crate_input_transfer_domain_to_another_aws_account_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TransferDomainToAnotherAwsAccountInput,
) {
    if let Some(var_63) = &input.domain_name {
        object.key("DomainName").string(var_63);
    }
    if let Some(var_64) = &input.account_id {
        object.key("AccountId").string(var_64);
    }
}

pub fn serialize_structure_crate_input_update_domain_contact_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDomainContactInput,
) {
    if let Some(var_65) = &input.domain_name {
        object.key("DomainName").string(var_65);
    }
    if let Some(var_66) = &input.admin_contact {
        let mut object_67 = object.key("AdminContact").start_object();
        crate::json_ser::serialize_structure_crate_model_contact_detail(&mut object_67, var_66);
        object_67.finish();
    }
    if let Some(var_68) = &input.registrant_contact {
        let mut object_69 = object.key("RegistrantContact").start_object();
        crate::json_ser::serialize_structure_crate_model_contact_detail(&mut object_69, var_68);
        object_69.finish();
    }
    if let Some(var_70) = &input.tech_contact {
        let mut object_71 = object.key("TechContact").start_object();
        crate::json_ser::serialize_structure_crate_model_contact_detail(&mut object_71, var_70);
        object_71.finish();
    }
}

pub fn serialize_structure_crate_input_update_domain_contact_privacy_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDomainContactPrivacyInput,
) {
    if let Some(var_72) = &input.domain_name {
        object.key("DomainName").string(var_72);
    }
    if let Some(var_73) = &input.admin_privacy {
        object.key("AdminPrivacy").boolean(*var_73);
    }
    if let Some(var_74) = &input.registrant_privacy {
        object.key("RegistrantPrivacy").boolean(*var_74);
    }
    if let Some(var_75) = &input.tech_privacy {
        object.key("TechPrivacy").boolean(*var_75);
    }
}

pub fn serialize_structure_crate_input_update_domain_nameservers_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDomainNameserversInput,
) {
    if let Some(var_76) = &input.domain_name {
        object.key("DomainName").string(var_76);
    }
    if let Some(var_77) = &input.fi_auth_key {
        object.key("FIAuthKey").string(var_77);
    }
    if let Some(var_78) = &input.nameservers {
        let mut array_79 = object.key("Nameservers").start_array();
        for item_80 in var_78 {
            {
                let mut object_81 = array_79.value().start_object();
                crate::json_ser::serialize_structure_crate_model_nameserver(
                    &mut object_81,
                    item_80,
                );
                object_81.finish();
            }
        }
        array_79.finish();
    }
}

pub fn serialize_structure_crate_input_update_tags_for_domain_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateTagsForDomainInput,
) {
    if let Some(var_82) = &input.domain_name {
        object.key("DomainName").string(var_82);
    }
    if let Some(var_83) = &input.tags_to_update {
        let mut array_84 = object.key("TagsToUpdate").start_array();
        for item_85 in var_83 {
            {
                let mut object_86 = array_84.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_86, item_85);
                object_86.finish();
            }
        }
        array_84.finish();
    }
}

pub fn serialize_structure_crate_input_view_billing_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ViewBillingInput,
) {
    if let Some(var_87) = &input.start {
        object
            .key("Start")
            .instant(var_87, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_88) = &input.end {
        object
            .key("End")
            .instant(var_88, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_89) = &input.marker {
        object.key("Marker").string(var_89);
    }
    if let Some(var_90) = &input.max_items {
        object.key("MaxItems").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_90).into()),
        );
    }
}

pub fn serialize_structure_crate_model_contact_detail(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ContactDetail,
) {
    if let Some(var_91) = &input.first_name {
        object.key("FirstName").string(var_91);
    }
    if let Some(var_92) = &input.last_name {
        object.key("LastName").string(var_92);
    }
    if let Some(var_93) = &input.contact_type {
        object.key("ContactType").string(var_93.as_str());
    }
    if let Some(var_94) = &input.organization_name {
        object.key("OrganizationName").string(var_94);
    }
    if let Some(var_95) = &input.address_line1 {
        object.key("AddressLine1").string(var_95);
    }
    if let Some(var_96) = &input.address_line2 {
        object.key("AddressLine2").string(var_96);
    }
    if let Some(var_97) = &input.city {
        object.key("City").string(var_97);
    }
    if let Some(var_98) = &input.state {
        object.key("State").string(var_98);
    }
    if let Some(var_99) = &input.country_code {
        object.key("CountryCode").string(var_99.as_str());
    }
    if let Some(var_100) = &input.zip_code {
        object.key("ZipCode").string(var_100);
    }
    if let Some(var_101) = &input.phone_number {
        object.key("PhoneNumber").string(var_101);
    }
    if let Some(var_102) = &input.email {
        object.key("Email").string(var_102);
    }
    if let Some(var_103) = &input.fax {
        object.key("Fax").string(var_103);
    }
    if let Some(var_104) = &input.extra_params {
        let mut array_105 = object.key("ExtraParams").start_array();
        for item_106 in var_104 {
            {
                let mut object_107 = array_105.value().start_object();
                crate::json_ser::serialize_structure_crate_model_extra_param(
                    &mut object_107,
                    item_106,
                );
                object_107.finish();
            }
        }
        array_105.finish();
    }
}

pub fn serialize_structure_crate_model_nameserver(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Nameserver,
) {
    if let Some(var_108) = &input.name {
        object.key("Name").string(var_108);
    }
    if let Some(var_109) = &input.glue_ips {
        let mut array_110 = object.key("GlueIps").start_array();
        for item_111 in var_109 {
            {
                array_110.value().string(item_111);
            }
        }
        array_110.finish();
    }
}

pub fn serialize_structure_crate_model_tag(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tag,
) {
    if let Some(var_112) = &input.key {
        object.key("Key").string(var_112);
    }
    if let Some(var_113) = &input.value {
        object.key("Value").string(var_113);
    }
}

pub fn serialize_structure_crate_model_extra_param(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ExtraParam,
) {
    if let Some(var_114) = &input.name {
        object.key("Name").string(var_114.as_str());
    }
    if let Some(var_115) = &input.value {
        object.key("Value").string(var_115);
    }
}
