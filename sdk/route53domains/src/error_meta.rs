// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    DomainLimitExceeded(crate::error::DomainLimitExceeded),
    DuplicateRequest(crate::error::DuplicateRequest),
    InvalidInput(crate::error::InvalidInput),
    OperationLimitExceeded(crate::error::OperationLimitExceeded),
    TldRulesViolation(crate::error::TldRulesViolation),
    UnsupportedTld(crate::error::UnsupportedTld),
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::DomainLimitExceeded(inner) => inner.fmt(f),
            Error::DuplicateRequest(inner) => inner.fmt(f),
            Error::InvalidInput(inner) => inner.fmt(f),
            Error::OperationLimitExceeded(inner) => inner.fmt(f),
            Error::TldRulesViolation(inner) => inner.fmt(f),
            Error::UnsupportedTld(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl
    From<
        smithy_http::result::SdkError<crate::error::AcceptDomainTransferFromAnotherAwsAccountError>,
    > for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::AcceptDomainTransferFromAnotherAwsAccountError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::AcceptDomainTransferFromAnotherAwsAccountErrorKind::DomainLimitExceeded(inner) => Error::DomainLimitExceeded(inner),
                crate::error::AcceptDomainTransferFromAnotherAwsAccountErrorKind::InvalidInput(inner) => Error::InvalidInput(inner),
                crate::error::AcceptDomainTransferFromAnotherAwsAccountErrorKind::OperationLimitExceeded(inner) => Error::OperationLimitExceeded(inner),
                crate::error::AcceptDomainTransferFromAnotherAwsAccountErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CancelDomainTransferToAnotherAwsAccountError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::CancelDomainTransferToAnotherAwsAccountError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::CancelDomainTransferToAnotherAwsAccountErrorKind::InvalidInput(inner) => Error::InvalidInput(inner),
                crate::error::CancelDomainTransferToAnotherAwsAccountErrorKind::OperationLimitExceeded(inner) => Error::OperationLimitExceeded(inner),
                crate::error::CancelDomainTransferToAnotherAwsAccountErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CheckDomainAvailabilityError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::CheckDomainAvailabilityError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CheckDomainAvailabilityErrorKind::InvalidInput(inner) => {
                    Error::InvalidInput(inner)
                }
                crate::error::CheckDomainAvailabilityErrorKind::UnsupportedTld(inner) => {
                    Error::UnsupportedTld(inner)
                }
                crate::error::CheckDomainAvailabilityErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CheckDomainTransferabilityError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::CheckDomainTransferabilityError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CheckDomainTransferabilityErrorKind::InvalidInput(inner) => {
                    Error::InvalidInput(inner)
                }
                crate::error::CheckDomainTransferabilityErrorKind::UnsupportedTld(inner) => {
                    Error::UnsupportedTld(inner)
                }
                crate::error::CheckDomainTransferabilityErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteTagsForDomainError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteTagsForDomainError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteTagsForDomainErrorKind::InvalidInput(inner) => {
                    Error::InvalidInput(inner)
                }
                crate::error::DeleteTagsForDomainErrorKind::OperationLimitExceeded(inner) => {
                    Error::OperationLimitExceeded(inner)
                }
                crate::error::DeleteTagsForDomainErrorKind::UnsupportedTld(inner) => {
                    Error::UnsupportedTld(inner)
                }
                crate::error::DeleteTagsForDomainErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DisableDomainAutoRenewError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DisableDomainAutoRenewError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DisableDomainAutoRenewErrorKind::InvalidInput(inner) => {
                    Error::InvalidInput(inner)
                }
                crate::error::DisableDomainAutoRenewErrorKind::UnsupportedTld(inner) => {
                    Error::UnsupportedTld(inner)
                }
                crate::error::DisableDomainAutoRenewErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DisableDomainTransferLockError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DisableDomainTransferLockError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DisableDomainTransferLockErrorKind::DuplicateRequest(inner) => {
                    Error::DuplicateRequest(inner)
                }
                crate::error::DisableDomainTransferLockErrorKind::InvalidInput(inner) => {
                    Error::InvalidInput(inner)
                }
                crate::error::DisableDomainTransferLockErrorKind::OperationLimitExceeded(inner) => {
                    Error::OperationLimitExceeded(inner)
                }
                crate::error::DisableDomainTransferLockErrorKind::TldRulesViolation(inner) => {
                    Error::TldRulesViolation(inner)
                }
                crate::error::DisableDomainTransferLockErrorKind::UnsupportedTld(inner) => {
                    Error::UnsupportedTld(inner)
                }
                crate::error::DisableDomainTransferLockErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::EnableDomainAutoRenewError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::EnableDomainAutoRenewError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::EnableDomainAutoRenewErrorKind::InvalidInput(inner) => {
                    Error::InvalidInput(inner)
                }
                crate::error::EnableDomainAutoRenewErrorKind::TldRulesViolation(inner) => {
                    Error::TldRulesViolation(inner)
                }
                crate::error::EnableDomainAutoRenewErrorKind::UnsupportedTld(inner) => {
                    Error::UnsupportedTld(inner)
                }
                crate::error::EnableDomainAutoRenewErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::EnableDomainTransferLockError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::EnableDomainTransferLockError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::EnableDomainTransferLockErrorKind::DuplicateRequest(inner) => {
                    Error::DuplicateRequest(inner)
                }
                crate::error::EnableDomainTransferLockErrorKind::InvalidInput(inner) => {
                    Error::InvalidInput(inner)
                }
                crate::error::EnableDomainTransferLockErrorKind::OperationLimitExceeded(inner) => {
                    Error::OperationLimitExceeded(inner)
                }
                crate::error::EnableDomainTransferLockErrorKind::TldRulesViolation(inner) => {
                    Error::TldRulesViolation(inner)
                }
                crate::error::EnableDomainTransferLockErrorKind::UnsupportedTld(inner) => {
                    Error::UnsupportedTld(inner)
                }
                crate::error::EnableDomainTransferLockErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetContactReachabilityStatusError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::GetContactReachabilityStatusError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetContactReachabilityStatusErrorKind::InvalidInput(inner) => {
                    Error::InvalidInput(inner)
                }
                crate::error::GetContactReachabilityStatusErrorKind::OperationLimitExceeded(
                    inner,
                ) => Error::OperationLimitExceeded(inner),
                crate::error::GetContactReachabilityStatusErrorKind::UnsupportedTld(inner) => {
                    Error::UnsupportedTld(inner)
                }
                crate::error::GetContactReachabilityStatusErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetDomainDetailError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetDomainDetailError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetDomainDetailErrorKind::InvalidInput(inner) => {
                    Error::InvalidInput(inner)
                }
                crate::error::GetDomainDetailErrorKind::UnsupportedTld(inner) => {
                    Error::UnsupportedTld(inner)
                }
                crate::error::GetDomainDetailErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetDomainSuggestionsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetDomainSuggestionsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetDomainSuggestionsErrorKind::InvalidInput(inner) => {
                    Error::InvalidInput(inner)
                }
                crate::error::GetDomainSuggestionsErrorKind::UnsupportedTld(inner) => {
                    Error::UnsupportedTld(inner)
                }
                crate::error::GetDomainSuggestionsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetOperationDetailError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetOperationDetailError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetOperationDetailErrorKind::InvalidInput(inner) => {
                    Error::InvalidInput(inner)
                }
                crate::error::GetOperationDetailErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListDomainsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListDomainsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListDomainsErrorKind::InvalidInput(inner) => {
                    Error::InvalidInput(inner)
                }
                crate::error::ListDomainsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListOperationsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListOperationsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListOperationsErrorKind::InvalidInput(inner) => {
                    Error::InvalidInput(inner)
                }
                crate::error::ListOperationsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListTagsForDomainError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListTagsForDomainError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListTagsForDomainErrorKind::InvalidInput(inner) => {
                    Error::InvalidInput(inner)
                }
                crate::error::ListTagsForDomainErrorKind::OperationLimitExceeded(inner) => {
                    Error::OperationLimitExceeded(inner)
                }
                crate::error::ListTagsForDomainErrorKind::UnsupportedTld(inner) => {
                    Error::UnsupportedTld(inner)
                }
                crate::error::ListTagsForDomainErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::RegisterDomainError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::RegisterDomainError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::RegisterDomainErrorKind::DomainLimitExceeded(inner) => {
                    Error::DomainLimitExceeded(inner)
                }
                crate::error::RegisterDomainErrorKind::DuplicateRequest(inner) => {
                    Error::DuplicateRequest(inner)
                }
                crate::error::RegisterDomainErrorKind::InvalidInput(inner) => {
                    Error::InvalidInput(inner)
                }
                crate::error::RegisterDomainErrorKind::OperationLimitExceeded(inner) => {
                    Error::OperationLimitExceeded(inner)
                }
                crate::error::RegisterDomainErrorKind::TldRulesViolation(inner) => {
                    Error::TldRulesViolation(inner)
                }
                crate::error::RegisterDomainErrorKind::UnsupportedTld(inner) => {
                    Error::UnsupportedTld(inner)
                }
                crate::error::RegisterDomainErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl
    From<
        smithy_http::result::SdkError<crate::error::RejectDomainTransferFromAnotherAwsAccountError>,
    > for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::RejectDomainTransferFromAnotherAwsAccountError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::RejectDomainTransferFromAnotherAwsAccountErrorKind::InvalidInput(inner) => Error::InvalidInput(inner),
                crate::error::RejectDomainTransferFromAnotherAwsAccountErrorKind::OperationLimitExceeded(inner) => Error::OperationLimitExceeded(inner),
                crate::error::RejectDomainTransferFromAnotherAwsAccountErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::RenewDomainError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::RenewDomainError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::RenewDomainErrorKind::DuplicateRequest(inner) => {
                    Error::DuplicateRequest(inner)
                }
                crate::error::RenewDomainErrorKind::InvalidInput(inner) => {
                    Error::InvalidInput(inner)
                }
                crate::error::RenewDomainErrorKind::OperationLimitExceeded(inner) => {
                    Error::OperationLimitExceeded(inner)
                }
                crate::error::RenewDomainErrorKind::TldRulesViolation(inner) => {
                    Error::TldRulesViolation(inner)
                }
                crate::error::RenewDomainErrorKind::UnsupportedTld(inner) => {
                    Error::UnsupportedTld(inner)
                }
                crate::error::RenewDomainErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ResendContactReachabilityEmailError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::ResendContactReachabilityEmailError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ResendContactReachabilityEmailErrorKind::InvalidInput(inner) => {
                    Error::InvalidInput(inner)
                }
                crate::error::ResendContactReachabilityEmailErrorKind::OperationLimitExceeded(
                    inner,
                ) => Error::OperationLimitExceeded(inner),
                crate::error::ResendContactReachabilityEmailErrorKind::UnsupportedTld(inner) => {
                    Error::UnsupportedTld(inner)
                }
                crate::error::ResendContactReachabilityEmailErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::RetrieveDomainAuthCodeError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::RetrieveDomainAuthCodeError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::RetrieveDomainAuthCodeErrorKind::InvalidInput(inner) => {
                    Error::InvalidInput(inner)
                }
                crate::error::RetrieveDomainAuthCodeErrorKind::UnsupportedTld(inner) => {
                    Error::UnsupportedTld(inner)
                }
                crate::error::RetrieveDomainAuthCodeErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::TransferDomainError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::TransferDomainError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::TransferDomainErrorKind::DomainLimitExceeded(inner) => {
                    Error::DomainLimitExceeded(inner)
                }
                crate::error::TransferDomainErrorKind::DuplicateRequest(inner) => {
                    Error::DuplicateRequest(inner)
                }
                crate::error::TransferDomainErrorKind::InvalidInput(inner) => {
                    Error::InvalidInput(inner)
                }
                crate::error::TransferDomainErrorKind::OperationLimitExceeded(inner) => {
                    Error::OperationLimitExceeded(inner)
                }
                crate::error::TransferDomainErrorKind::TldRulesViolation(inner) => {
                    Error::TldRulesViolation(inner)
                }
                crate::error::TransferDomainErrorKind::UnsupportedTld(inner) => {
                    Error::UnsupportedTld(inner)
                }
                crate::error::TransferDomainErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::TransferDomainToAnotherAwsAccountError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::TransferDomainToAnotherAwsAccountError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::TransferDomainToAnotherAwsAccountErrorKind::DuplicateRequest(inner) => Error::DuplicateRequest(inner),
                crate::error::TransferDomainToAnotherAwsAccountErrorKind::InvalidInput(inner) => Error::InvalidInput(inner),
                crate::error::TransferDomainToAnotherAwsAccountErrorKind::OperationLimitExceeded(inner) => Error::OperationLimitExceeded(inner),
                crate::error::TransferDomainToAnotherAwsAccountErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateDomainContactError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateDomainContactError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateDomainContactErrorKind::DuplicateRequest(inner) => {
                    Error::DuplicateRequest(inner)
                }
                crate::error::UpdateDomainContactErrorKind::InvalidInput(inner) => {
                    Error::InvalidInput(inner)
                }
                crate::error::UpdateDomainContactErrorKind::OperationLimitExceeded(inner) => {
                    Error::OperationLimitExceeded(inner)
                }
                crate::error::UpdateDomainContactErrorKind::TldRulesViolation(inner) => {
                    Error::TldRulesViolation(inner)
                }
                crate::error::UpdateDomainContactErrorKind::UnsupportedTld(inner) => {
                    Error::UnsupportedTld(inner)
                }
                crate::error::UpdateDomainContactErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateDomainContactPrivacyError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::UpdateDomainContactPrivacyError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateDomainContactPrivacyErrorKind::DuplicateRequest(inner) => {
                    Error::DuplicateRequest(inner)
                }
                crate::error::UpdateDomainContactPrivacyErrorKind::InvalidInput(inner) => {
                    Error::InvalidInput(inner)
                }
                crate::error::UpdateDomainContactPrivacyErrorKind::OperationLimitExceeded(
                    inner,
                ) => Error::OperationLimitExceeded(inner),
                crate::error::UpdateDomainContactPrivacyErrorKind::TldRulesViolation(inner) => {
                    Error::TldRulesViolation(inner)
                }
                crate::error::UpdateDomainContactPrivacyErrorKind::UnsupportedTld(inner) => {
                    Error::UnsupportedTld(inner)
                }
                crate::error::UpdateDomainContactPrivacyErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateDomainNameserversError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::UpdateDomainNameserversError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateDomainNameserversErrorKind::DuplicateRequest(inner) => {
                    Error::DuplicateRequest(inner)
                }
                crate::error::UpdateDomainNameserversErrorKind::InvalidInput(inner) => {
                    Error::InvalidInput(inner)
                }
                crate::error::UpdateDomainNameserversErrorKind::OperationLimitExceeded(inner) => {
                    Error::OperationLimitExceeded(inner)
                }
                crate::error::UpdateDomainNameserversErrorKind::TldRulesViolation(inner) => {
                    Error::TldRulesViolation(inner)
                }
                crate::error::UpdateDomainNameserversErrorKind::UnsupportedTld(inner) => {
                    Error::UnsupportedTld(inner)
                }
                crate::error::UpdateDomainNameserversErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateTagsForDomainError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateTagsForDomainError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateTagsForDomainErrorKind::InvalidInput(inner) => {
                    Error::InvalidInput(inner)
                }
                crate::error::UpdateTagsForDomainErrorKind::OperationLimitExceeded(inner) => {
                    Error::OperationLimitExceeded(inner)
                }
                crate::error::UpdateTagsForDomainErrorKind::UnsupportedTld(inner) => {
                    Error::UnsupportedTld(inner)
                }
                crate::error::UpdateTagsForDomainErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ViewBillingError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ViewBillingError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ViewBillingErrorKind::InvalidInput(inner) => {
                    Error::InvalidInput(inner)
                }
                crate::error::ViewBillingErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl std::error::Error for Error {}
