// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_domain_contact_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_domain_contact::UpdateDomainContactInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.domain_name {
        object.key("DomainName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.admin_contact {
        #[allow(unused_mut)]
        let mut object_3 = object.key("AdminContact").start_object();
        crate::protocol_serde::shape_contact_detail::ser_contact_detail(&mut object_3, var_2)?;
        object_3.finish();
    }
    if let Some(var_4) = &input.registrant_contact {
        #[allow(unused_mut)]
        let mut object_5 = object.key("RegistrantContact").start_object();
        crate::protocol_serde::shape_contact_detail::ser_contact_detail(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.tech_contact {
        #[allow(unused_mut)]
        let mut object_7 = object.key("TechContact").start_object();
        crate::protocol_serde::shape_contact_detail::ser_contact_detail(&mut object_7, var_6)?;
        object_7.finish();
    }
    if let Some(var_8) = &input.consent {
        #[allow(unused_mut)]
        let mut object_9 = object.key("Consent").start_object();
        crate::protocol_serde::shape_consent::ser_consent(&mut object_9, var_8)?;
        object_9.finish();
    }
    Ok(())
}
