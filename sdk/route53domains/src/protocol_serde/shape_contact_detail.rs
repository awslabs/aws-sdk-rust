// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn de_contact_detail<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::ContactDetail>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::ContactDetailBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "FirstName" => {
                            builder = builder.set_first_name(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "LastName" => {
                            builder = builder.set_last_name(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "ContactType" => {
                            builder = builder.set_contact_type(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::ContactType::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "OrganizationName" => {
                            builder = builder.set_organization_name(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "AddressLine1" => {
                            builder = builder.set_address_line1(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "AddressLine2" => {
                            builder = builder.set_address_line2(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "City" => {
                            builder = builder.set_city(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "State" => {
                            builder = builder.set_state(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "CountryCode" => {
                            builder = builder.set_country_code(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::CountryCode::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "ZipCode" => {
                            builder = builder.set_zip_code(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "PhoneNumber" => {
                            builder = builder.set_phone_number(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "Email" => {
                            builder = builder.set_email(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "Fax" => {
                            builder = builder.set_fax(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "ExtraParams" => {
                            builder = builder.set_extra_params(crate::protocol_serde::shape_extra_param_list::de_extra_param_list(tokens)?);
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}

pub fn ser_contact_detail(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::ContactDetail,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.first_name {
        object.key("FirstName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.last_name {
        object.key("LastName").string(var_2.as_str());
    }
    if let Some(var_3) = &input.contact_type {
        object.key("ContactType").string(var_3.as_str());
    }
    if let Some(var_4) = &input.organization_name {
        object.key("OrganizationName").string(var_4.as_str());
    }
    if let Some(var_5) = &input.address_line1 {
        object.key("AddressLine1").string(var_5.as_str());
    }
    if let Some(var_6) = &input.address_line2 {
        object.key("AddressLine2").string(var_6.as_str());
    }
    if let Some(var_7) = &input.city {
        object.key("City").string(var_7.as_str());
    }
    if let Some(var_8) = &input.state {
        object.key("State").string(var_8.as_str());
    }
    if let Some(var_9) = &input.country_code {
        object.key("CountryCode").string(var_9.as_str());
    }
    if let Some(var_10) = &input.zip_code {
        object.key("ZipCode").string(var_10.as_str());
    }
    if let Some(var_11) = &input.phone_number {
        object.key("PhoneNumber").string(var_11.as_str());
    }
    if let Some(var_12) = &input.email {
        object.key("Email").string(var_12.as_str());
    }
    if let Some(var_13) = &input.fax {
        object.key("Fax").string(var_13.as_str());
    }
    if let Some(var_14) = &input.extra_params {
        let mut array_15 = object.key("ExtraParams").start_array();
        for item_16 in var_14 {
            {
                #[allow(unused_mut)]
                let mut object_17 = array_15.value().start_object();
                crate::protocol_serde::shape_extra_param::ser_extra_param(&mut object_17, item_16)?;
                object_17.finish();
            }
        }
        array_15.finish();
    }
    Ok(())
}
