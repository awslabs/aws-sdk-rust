// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_get_domain_detail_input(
    input: &crate::operation::get_domain_detail::GetDomainDetailInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    let mut object = aws_smithy_json::serialize::JsonObjectWriter::new(&mut out);
    crate::protocol_serde::shape_get_domain_detail_input::ser_get_domain_detail_input(
        &mut object,
        input,
    )?;
    object.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_get_domain_detail_http_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::operation::get_domain_detail::GetDomainDetailOutput,
    crate::operation::get_domain_detail::GetDomainDetailError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(response)
        .map_err(crate::operation::get_domain_detail::GetDomainDetailError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(
                crate::operation::get_domain_detail::GetDomainDetailError::unhandled(generic),
            )
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "InvalidInput" => {
            crate::operation::get_domain_detail::GetDomainDetailError::InvalidInput({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::InvalidInputBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_invalid_input::de_invalid_input_json_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(
                        crate::operation::get_domain_detail::GetDomainDetailError::unhandled,
                    )?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "UnsupportedTLD" => {
            crate::operation::get_domain_detail::GetDomainDetailError::UnsupportedTld({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::types::error::builders::UnsupportedTldBuilder::default();
                    let _ = response;
                    output =
                        crate::protocol_serde::shape_unsupported_tld::de_unsupported_tld_json_err(
                            response.body().as_ref(),
                            output,
                        )
                        .map_err(
                            crate::operation::get_domain_detail::GetDomainDetailError::unhandled,
                        )?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        _ => crate::operation::get_domain_detail::GetDomainDetailError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_get_domain_detail_http_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::operation::get_domain_detail::GetDomainDetailOutput,
    crate::operation::get_domain_detail::GetDomainDetailError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output =
            crate::operation::get_domain_detail::builders::GetDomainDetailOutputBuilder::default();
        let _ = response;
        output = crate::protocol_serde::shape_get_domain_detail::de_get_domain_detail(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::operation::get_domain_detail::GetDomainDetailError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

pub(crate) fn de_get_domain_detail(
    value: &[u8],
    mut builder: crate::operation::get_domain_detail::builders::GetDomainDetailOutputBuilder,
) -> Result<
    crate::operation::get_domain_detail::builders::GetDomainDetailOutputBuilder,
    aws_smithy_json::deserialize::error::DeserializeError,
> {
    let mut tokens_owned =
        aws_smithy_json::deserialize::json_token_iter(crate::protocol_serde::or_empty_doc(value))
            .peekable();
    let tokens = &mut tokens_owned;
    aws_smithy_json::deserialize::token::expect_start_object(tokens.next())?;
    loop {
        match tokens.next().transpose()? {
            Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
            Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                match key.to_unescaped()?.as_ref() {
                    "DomainName" => {
                        builder = builder.set_domain_name(
                            aws_smithy_json::deserialize::token::expect_string_or_null(
                                tokens.next(),
                            )?
                            .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                            .transpose()?,
                        );
                    }
                    "Nameservers" => {
                        builder = builder.set_nameservers(
                            crate::protocol_serde::shape_nameserver_list::de_nameserver_list(
                                tokens,
                            )?,
                        );
                    }
                    "AutoRenew" => {
                        builder = builder.set_auto_renew(
                            aws_smithy_json::deserialize::token::expect_bool_or_null(
                                tokens.next(),
                            )?,
                        );
                    }
                    "AdminContact" => {
                        builder = builder.set_admin_contact(
                            crate::protocol_serde::shape_contact_detail::de_contact_detail(tokens)?,
                        );
                    }
                    "RegistrantContact" => {
                        builder = builder.set_registrant_contact(
                            crate::protocol_serde::shape_contact_detail::de_contact_detail(tokens)?,
                        );
                    }
                    "TechContact" => {
                        builder = builder.set_tech_contact(
                            crate::protocol_serde::shape_contact_detail::de_contact_detail(tokens)?,
                        );
                    }
                    "AdminPrivacy" => {
                        builder = builder.set_admin_privacy(
                            aws_smithy_json::deserialize::token::expect_bool_or_null(
                                tokens.next(),
                            )?,
                        );
                    }
                    "RegistrantPrivacy" => {
                        builder = builder.set_registrant_privacy(
                            aws_smithy_json::deserialize::token::expect_bool_or_null(
                                tokens.next(),
                            )?,
                        );
                    }
                    "TechPrivacy" => {
                        builder = builder.set_tech_privacy(
                            aws_smithy_json::deserialize::token::expect_bool_or_null(
                                tokens.next(),
                            )?,
                        );
                    }
                    "RegistrarName" => {
                        builder = builder.set_registrar_name(
                            aws_smithy_json::deserialize::token::expect_string_or_null(
                                tokens.next(),
                            )?
                            .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                            .transpose()?,
                        );
                    }
                    "WhoIsServer" => {
                        builder = builder.set_who_is_server(
                            aws_smithy_json::deserialize::token::expect_string_or_null(
                                tokens.next(),
                            )?
                            .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                            .transpose()?,
                        );
                    }
                    "RegistrarUrl" => {
                        builder = builder.set_registrar_url(
                            aws_smithy_json::deserialize::token::expect_string_or_null(
                                tokens.next(),
                            )?
                            .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                            .transpose()?,
                        );
                    }
                    "AbuseContactEmail" => {
                        builder = builder.set_abuse_contact_email(
                            aws_smithy_json::deserialize::token::expect_string_or_null(
                                tokens.next(),
                            )?
                            .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                            .transpose()?,
                        );
                    }
                    "AbuseContactPhone" => {
                        builder = builder.set_abuse_contact_phone(
                            aws_smithy_json::deserialize::token::expect_string_or_null(
                                tokens.next(),
                            )?
                            .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                            .transpose()?,
                        );
                    }
                    "RegistryDomainId" => {
                        builder = builder.set_registry_domain_id(
                            aws_smithy_json::deserialize::token::expect_string_or_null(
                                tokens.next(),
                            )?
                            .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                            .transpose()?,
                        );
                    }
                    "CreationDate" => {
                        builder = builder.set_creation_date(
                            aws_smithy_json::deserialize::token::expect_timestamp_or_null(
                                tokens.next(),
                                aws_smithy_types::date_time::Format::EpochSeconds,
                            )?,
                        );
                    }
                    "UpdatedDate" => {
                        builder = builder.set_updated_date(
                            aws_smithy_json::deserialize::token::expect_timestamp_or_null(
                                tokens.next(),
                                aws_smithy_types::date_time::Format::EpochSeconds,
                            )?,
                        );
                    }
                    "ExpirationDate" => {
                        builder = builder.set_expiration_date(
                            aws_smithy_json::deserialize::token::expect_timestamp_or_null(
                                tokens.next(),
                                aws_smithy_types::date_time::Format::EpochSeconds,
                            )?,
                        );
                    }
                    "Reseller" => {
                        builder = builder.set_reseller(
                            aws_smithy_json::deserialize::token::expect_string_or_null(
                                tokens.next(),
                            )?
                            .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                            .transpose()?,
                        );
                    }
                    "DnsSec" => {
                        builder = builder.set_dns_sec(
                            aws_smithy_json::deserialize::token::expect_string_or_null(
                                tokens.next(),
                            )?
                            .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                            .transpose()?,
                        );
                    }
                    "StatusList" => {
                        builder = builder.set_status_list(
                            crate::protocol_serde::shape_domain_status_list::de_domain_status_list(
                                tokens,
                            )?,
                        );
                    }
                    "DnssecKeys" => {
                        builder = builder.set_dnssec_keys(
                            crate::protocol_serde::shape_dnssec_key_list::de_dnssec_key_list(
                                tokens,
                            )?,
                        );
                    }
                    _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                }
            }
            other => {
                return Err(
                    aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                        "expected object key or end object, found: {:?}",
                        other
                    )),
                )
            }
        }
    }
    if tokens.next().is_some() {
        return Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "found more JSON tokens after completing parsing",
            ),
        );
    }
    Ok(builder)
}
