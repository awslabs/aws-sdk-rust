// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>OperationSummary includes the following elements.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct OperationSummary {
    /// <p>Identifier returned to track the requested action.</p>
    #[doc(hidden)]
    pub operation_id: std::option::Option<std::string::String>,
    /// <p>The current status of the requested operation in the system.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::OperationStatus>,
    /// <p>Type of the action requested.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::OperationType>,
    /// <p>The date when the request was submitted.</p>
    #[doc(hidden)]
    pub submitted_date: std::option::Option<aws_smithy_types::DateTime>,
    /// <p> Name of the domain. </p>
    #[doc(hidden)]
    pub domain_name: std::option::Option<std::string::String>,
    /// <p> Message about the operation. </p>
    #[doc(hidden)]
    pub message: std::option::Option<std::string::String>,
    /// <p> Automatically checks whether there are no outstanding operations on domains that need customer attention. </p>
    /// <p> Valid values are:</p>
    /// <ul>
    /// <li> <p> <code>PENDING_ACCEPTANCE</code>: The operation is waiting for acceptance from the account that is receiving the domain.</p> </li>
    /// <li> <p> <code>PENDING_CUSTOMER_ACTION</code>: The operation is waiting for customer action, for example, returning an email.</p> </li>
    /// <li> <p> <code>PENDING_AUTHORIZATION</code>: The operation is waiting for the form of authorization. For more information, see <a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_ResendOperationAuthorization.html">ResendOperationAuthorization</a>.</p> </li>
    /// <li> <p> <code>PENDING_PAYMENT_VERIFICATION</code>: The operation is waiting for the payment method to validate.</p> </li>
    /// <li> <p> <code>PENDING_SUPPORT_CASE</code>: The operation includes a support case and is waiting for its resolution.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub status_flag: std::option::Option<crate::types::StatusFlag>,
    /// <p> The date when the last change was made in Unix time format and Coordinated Universal Time (UTC). </p>
    #[doc(hidden)]
    pub last_updated_date: std::option::Option<aws_smithy_types::DateTime>,
}
impl OperationSummary {
    /// <p>Identifier returned to track the requested action.</p>
    pub fn operation_id(&self) -> std::option::Option<&str> {
        self.operation_id.as_deref()
    }
    /// <p>The current status of the requested operation in the system.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::OperationStatus> {
        self.status.as_ref()
    }
    /// <p>Type of the action requested.</p>
    pub fn r#type(&self) -> std::option::Option<&crate::types::OperationType> {
        self.r#type.as_ref()
    }
    /// <p>The date when the request was submitted.</p>
    pub fn submitted_date(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.submitted_date.as_ref()
    }
    /// <p> Name of the domain. </p>
    pub fn domain_name(&self) -> std::option::Option<&str> {
        self.domain_name.as_deref()
    }
    /// <p> Message about the operation. </p>
    pub fn message(&self) -> std::option::Option<&str> {
        self.message.as_deref()
    }
    /// <p> Automatically checks whether there are no outstanding operations on domains that need customer attention. </p>
    /// <p> Valid values are:</p>
    /// <ul>
    /// <li> <p> <code>PENDING_ACCEPTANCE</code>: The operation is waiting for acceptance from the account that is receiving the domain.</p> </li>
    /// <li> <p> <code>PENDING_CUSTOMER_ACTION</code>: The operation is waiting for customer action, for example, returning an email.</p> </li>
    /// <li> <p> <code>PENDING_AUTHORIZATION</code>: The operation is waiting for the form of authorization. For more information, see <a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_ResendOperationAuthorization.html">ResendOperationAuthorization</a>.</p> </li>
    /// <li> <p> <code>PENDING_PAYMENT_VERIFICATION</code>: The operation is waiting for the payment method to validate.</p> </li>
    /// <li> <p> <code>PENDING_SUPPORT_CASE</code>: The operation includes a support case and is waiting for its resolution.</p> </li>
    /// </ul>
    pub fn status_flag(&self) -> std::option::Option<&crate::types::StatusFlag> {
        self.status_flag.as_ref()
    }
    /// <p> The date when the last change was made in Unix time format and Coordinated Universal Time (UTC). </p>
    pub fn last_updated_date(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_updated_date.as_ref()
    }
}
impl OperationSummary {
    /// Creates a new builder-style object to manufacture [`OperationSummary`](crate::types::OperationSummary).
    pub fn builder() -> crate::types::builders::OperationSummaryBuilder {
        crate::types::builders::OperationSummaryBuilder::default()
    }
}

/// A builder for [`OperationSummary`](crate::types::OperationSummary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct OperationSummaryBuilder {
    pub(crate) operation_id: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<crate::types::OperationStatus>,
    pub(crate) r#type: std::option::Option<crate::types::OperationType>,
    pub(crate) submitted_date: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) domain_name: std::option::Option<std::string::String>,
    pub(crate) message: std::option::Option<std::string::String>,
    pub(crate) status_flag: std::option::Option<crate::types::StatusFlag>,
    pub(crate) last_updated_date: std::option::Option<aws_smithy_types::DateTime>,
}
impl OperationSummaryBuilder {
    /// <p>Identifier returned to track the requested action.</p>
    pub fn operation_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.operation_id = Some(input.into());
        self
    }
    /// <p>Identifier returned to track the requested action.</p>
    pub fn set_operation_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.operation_id = input;
        self
    }
    /// <p>The current status of the requested operation in the system.</p>
    pub fn status(mut self, input: crate::types::OperationStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The current status of the requested operation in the system.</p>
    pub fn set_status(mut self, input: std::option::Option<crate::types::OperationStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>Type of the action requested.</p>
    pub fn r#type(mut self, input: crate::types::OperationType) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p>Type of the action requested.</p>
    pub fn set_type(mut self, input: std::option::Option<crate::types::OperationType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The date when the request was submitted.</p>
    pub fn submitted_date(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.submitted_date = Some(input);
        self
    }
    /// <p>The date when the request was submitted.</p>
    pub fn set_submitted_date(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.submitted_date = input;
        self
    }
    /// <p> Name of the domain. </p>
    pub fn domain_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.domain_name = Some(input.into());
        self
    }
    /// <p> Name of the domain. </p>
    pub fn set_domain_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.domain_name = input;
        self
    }
    /// <p> Message about the operation. </p>
    pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
        self.message = Some(input.into());
        self
    }
    /// <p> Message about the operation. </p>
    pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.message = input;
        self
    }
    /// <p> Automatically checks whether there are no outstanding operations on domains that need customer attention. </p>
    /// <p> Valid values are:</p>
    /// <ul>
    /// <li> <p> <code>PENDING_ACCEPTANCE</code>: The operation is waiting for acceptance from the account that is receiving the domain.</p> </li>
    /// <li> <p> <code>PENDING_CUSTOMER_ACTION</code>: The operation is waiting for customer action, for example, returning an email.</p> </li>
    /// <li> <p> <code>PENDING_AUTHORIZATION</code>: The operation is waiting for the form of authorization. For more information, see <a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_ResendOperationAuthorization.html">ResendOperationAuthorization</a>.</p> </li>
    /// <li> <p> <code>PENDING_PAYMENT_VERIFICATION</code>: The operation is waiting for the payment method to validate.</p> </li>
    /// <li> <p> <code>PENDING_SUPPORT_CASE</code>: The operation includes a support case and is waiting for its resolution.</p> </li>
    /// </ul>
    pub fn status_flag(mut self, input: crate::types::StatusFlag) -> Self {
        self.status_flag = Some(input);
        self
    }
    /// <p> Automatically checks whether there are no outstanding operations on domains that need customer attention. </p>
    /// <p> Valid values are:</p>
    /// <ul>
    /// <li> <p> <code>PENDING_ACCEPTANCE</code>: The operation is waiting for acceptance from the account that is receiving the domain.</p> </li>
    /// <li> <p> <code>PENDING_CUSTOMER_ACTION</code>: The operation is waiting for customer action, for example, returning an email.</p> </li>
    /// <li> <p> <code>PENDING_AUTHORIZATION</code>: The operation is waiting for the form of authorization. For more information, see <a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_ResendOperationAuthorization.html">ResendOperationAuthorization</a>.</p> </li>
    /// <li> <p> <code>PENDING_PAYMENT_VERIFICATION</code>: The operation is waiting for the payment method to validate.</p> </li>
    /// <li> <p> <code>PENDING_SUPPORT_CASE</code>: The operation includes a support case and is waiting for its resolution.</p> </li>
    /// </ul>
    pub fn set_status_flag(mut self, input: std::option::Option<crate::types::StatusFlag>) -> Self {
        self.status_flag = input;
        self
    }
    /// <p> The date when the last change was made in Unix time format and Coordinated Universal Time (UTC). </p>
    pub fn last_updated_date(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_updated_date = Some(input);
        self
    }
    /// <p> The date when the last change was made in Unix time format and Coordinated Universal Time (UTC). </p>
    pub fn set_last_updated_date(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_updated_date = input;
        self
    }
    /// Consumes the builder and constructs a [`OperationSummary`](crate::types::OperationSummary).
    pub fn build(self) -> crate::types::OperationSummary {
        crate::types::OperationSummary {
            operation_id: self.operation_id,
            status: self.status,
            r#type: self.r#type,
            submitted_date: self.submitted_date,
            domain_name: self.domain_name,
            message: self.message,
            status_flag: self.status_flag,
            last_updated_date: self.last_updated_date,
        }
    }
}
