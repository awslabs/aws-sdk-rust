// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the domain price associated with a TLD.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DomainPrice {
    /// <p>The name of the TLD for which the prices apply.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The price for domain registration with Route&nbsp;53.</p>
    #[doc(hidden)]
    pub registration_price: std::option::Option<crate::types::PriceWithCurrency>,
    /// <p>The price for transferring the domain registration to Route&nbsp;53.</p>
    #[doc(hidden)]
    pub transfer_price: std::option::Option<crate::types::PriceWithCurrency>,
    /// <p>The price for renewing domain registration with Route&nbsp;53.</p>
    #[doc(hidden)]
    pub renewal_price: std::option::Option<crate::types::PriceWithCurrency>,
    /// <p>The price for changing domain ownership.</p>
    #[doc(hidden)]
    pub change_ownership_price: std::option::Option<crate::types::PriceWithCurrency>,
    /// <p>The price for restoring the domain with Route&nbsp;53.</p>
    #[doc(hidden)]
    pub restoration_price: std::option::Option<crate::types::PriceWithCurrency>,
}
impl DomainPrice {
    /// <p>The name of the TLD for which the prices apply.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The price for domain registration with Route&nbsp;53.</p>
    pub fn registration_price(&self) -> std::option::Option<&crate::types::PriceWithCurrency> {
        self.registration_price.as_ref()
    }
    /// <p>The price for transferring the domain registration to Route&nbsp;53.</p>
    pub fn transfer_price(&self) -> std::option::Option<&crate::types::PriceWithCurrency> {
        self.transfer_price.as_ref()
    }
    /// <p>The price for renewing domain registration with Route&nbsp;53.</p>
    pub fn renewal_price(&self) -> std::option::Option<&crate::types::PriceWithCurrency> {
        self.renewal_price.as_ref()
    }
    /// <p>The price for changing domain ownership.</p>
    pub fn change_ownership_price(&self) -> std::option::Option<&crate::types::PriceWithCurrency> {
        self.change_ownership_price.as_ref()
    }
    /// <p>The price for restoring the domain with Route&nbsp;53.</p>
    pub fn restoration_price(&self) -> std::option::Option<&crate::types::PriceWithCurrency> {
        self.restoration_price.as_ref()
    }
}
impl DomainPrice {
    /// Creates a new builder-style object to manufacture [`DomainPrice`](crate::types::DomainPrice).
    pub fn builder() -> crate::types::builders::DomainPriceBuilder {
        crate::types::builders::DomainPriceBuilder::default()
    }
}

/// A builder for [`DomainPrice`](crate::types::DomainPrice).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DomainPriceBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) registration_price: std::option::Option<crate::types::PriceWithCurrency>,
    pub(crate) transfer_price: std::option::Option<crate::types::PriceWithCurrency>,
    pub(crate) renewal_price: std::option::Option<crate::types::PriceWithCurrency>,
    pub(crate) change_ownership_price: std::option::Option<crate::types::PriceWithCurrency>,
    pub(crate) restoration_price: std::option::Option<crate::types::PriceWithCurrency>,
}
impl DomainPriceBuilder {
    /// <p>The name of the TLD for which the prices apply.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the TLD for which the prices apply.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The price for domain registration with Route&nbsp;53.</p>
    pub fn registration_price(mut self, input: crate::types::PriceWithCurrency) -> Self {
        self.registration_price = Some(input);
        self
    }
    /// <p>The price for domain registration with Route&nbsp;53.</p>
    pub fn set_registration_price(
        mut self,
        input: std::option::Option<crate::types::PriceWithCurrency>,
    ) -> Self {
        self.registration_price = input;
        self
    }
    /// <p>The price for transferring the domain registration to Route&nbsp;53.</p>
    pub fn transfer_price(mut self, input: crate::types::PriceWithCurrency) -> Self {
        self.transfer_price = Some(input);
        self
    }
    /// <p>The price for transferring the domain registration to Route&nbsp;53.</p>
    pub fn set_transfer_price(
        mut self,
        input: std::option::Option<crate::types::PriceWithCurrency>,
    ) -> Self {
        self.transfer_price = input;
        self
    }
    /// <p>The price for renewing domain registration with Route&nbsp;53.</p>
    pub fn renewal_price(mut self, input: crate::types::PriceWithCurrency) -> Self {
        self.renewal_price = Some(input);
        self
    }
    /// <p>The price for renewing domain registration with Route&nbsp;53.</p>
    pub fn set_renewal_price(
        mut self,
        input: std::option::Option<crate::types::PriceWithCurrency>,
    ) -> Self {
        self.renewal_price = input;
        self
    }
    /// <p>The price for changing domain ownership.</p>
    pub fn change_ownership_price(mut self, input: crate::types::PriceWithCurrency) -> Self {
        self.change_ownership_price = Some(input);
        self
    }
    /// <p>The price for changing domain ownership.</p>
    pub fn set_change_ownership_price(
        mut self,
        input: std::option::Option<crate::types::PriceWithCurrency>,
    ) -> Self {
        self.change_ownership_price = input;
        self
    }
    /// <p>The price for restoring the domain with Route&nbsp;53.</p>
    pub fn restoration_price(mut self, input: crate::types::PriceWithCurrency) -> Self {
        self.restoration_price = Some(input);
        self
    }
    /// <p>The price for restoring the domain with Route&nbsp;53.</p>
    pub fn set_restoration_price(
        mut self,
        input: std::option::Option<crate::types::PriceWithCurrency>,
    ) -> Self {
        self.restoration_price = input;
        self
    }
    /// Consumes the builder and constructs a [`DomainPrice`](crate::types::DomainPrice).
    pub fn build(self) -> crate::types::DomainPrice {
        crate::types::DomainPrice {
            name: self.name,
            registration_price: self.registration_price,
            transfer_price: self.transfer_price,
            renewal_price: self.renewal_price,
            change_ownership_price: self.change_ownership_price,
            restoration_price: self.restoration_price,
        }
    }
}
