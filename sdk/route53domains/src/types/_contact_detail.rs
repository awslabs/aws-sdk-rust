// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>ContactDetail includes the following elements.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ContactDetail {
    /// <p>First name of contact.</p>
    #[doc(hidden)]
    pub first_name: std::option::Option<std::string::String>,
    /// <p>Last name of contact.</p>
    #[doc(hidden)]
    pub last_name: std::option::Option<std::string::String>,
    /// <p>Indicates whether the contact is a person, company, association, or public organization. Note the following:</p>
    /// <ul>
    /// <li> <p>If you specify a value other than <code>PERSON</code>, you must also specify a value for <code>OrganizationName</code>.</p> </li>
    /// <li> <p>For some TLDs, the privacy protection available depends on the value that you specify for <code>Contact Type</code>. For the privacy protection settings for your TLD, see <a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/registrar-tld-list.html">Domains that You Can Register with Amazon Route 53</a> in the <i>Amazon Route 53 Developer Guide</i> </p> </li>
    /// <li> <p>For .es domains, the value of <code>ContactType</code> must be <code>PERSON</code> for all three contacts.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub contact_type: std::option::Option<crate::types::ContactType>,
    /// <p>Name of the organization for contact types other than <code>PERSON</code>.</p>
    #[doc(hidden)]
    pub organization_name: std::option::Option<std::string::String>,
    /// <p>First line of the contact's address.</p>
    #[doc(hidden)]
    pub address_line1: std::option::Option<std::string::String>,
    /// <p>Second line of contact's address, if any.</p>
    #[doc(hidden)]
    pub address_line2: std::option::Option<std::string::String>,
    /// <p>The city of the contact's address.</p>
    #[doc(hidden)]
    pub city: std::option::Option<std::string::String>,
    /// <p>The state or province of the contact's city.</p>
    #[doc(hidden)]
    pub state: std::option::Option<std::string::String>,
    /// <p>Code for the country of the contact's address.</p>
    #[doc(hidden)]
    pub country_code: std::option::Option<crate::types::CountryCode>,
    /// <p>The zip or postal code of the contact's address.</p>
    #[doc(hidden)]
    pub zip_code: std::option::Option<std::string::String>,
    /// <p>The phone number of the contact.</p>
    /// <p>Constraints: Phone number must be specified in the format "+[country dialing code].[number including any area code&gt;]". For example, a US phone number might appear as <code>"+1.1234567890"</code>.</p>
    #[doc(hidden)]
    pub phone_number: std::option::Option<std::string::String>,
    /// <p>Email address of the contact.</p>
    #[doc(hidden)]
    pub email: std::option::Option<std::string::String>,
    /// <p>Fax number of the contact.</p>
    /// <p>Constraints: Phone number must be specified in the format "+[country dialing code].[number including any area code]". For example, a US phone number might appear as <code>"+1.1234567890"</code>.</p>
    #[doc(hidden)]
    pub fax: std::option::Option<std::string::String>,
    /// <p>A list of name-value pairs for parameters required by certain top-level domains.</p>
    #[doc(hidden)]
    pub extra_params: std::option::Option<std::vec::Vec<crate::types::ExtraParam>>,
}
impl ContactDetail {
    /// <p>First name of contact.</p>
    pub fn first_name(&self) -> std::option::Option<&str> {
        self.first_name.as_deref()
    }
    /// <p>Last name of contact.</p>
    pub fn last_name(&self) -> std::option::Option<&str> {
        self.last_name.as_deref()
    }
    /// <p>Indicates whether the contact is a person, company, association, or public organization. Note the following:</p>
    /// <ul>
    /// <li> <p>If you specify a value other than <code>PERSON</code>, you must also specify a value for <code>OrganizationName</code>.</p> </li>
    /// <li> <p>For some TLDs, the privacy protection available depends on the value that you specify for <code>Contact Type</code>. For the privacy protection settings for your TLD, see <a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/registrar-tld-list.html">Domains that You Can Register with Amazon Route 53</a> in the <i>Amazon Route 53 Developer Guide</i> </p> </li>
    /// <li> <p>For .es domains, the value of <code>ContactType</code> must be <code>PERSON</code> for all three contacts.</p> </li>
    /// </ul>
    pub fn contact_type(&self) -> std::option::Option<&crate::types::ContactType> {
        self.contact_type.as_ref()
    }
    /// <p>Name of the organization for contact types other than <code>PERSON</code>.</p>
    pub fn organization_name(&self) -> std::option::Option<&str> {
        self.organization_name.as_deref()
    }
    /// <p>First line of the contact's address.</p>
    pub fn address_line1(&self) -> std::option::Option<&str> {
        self.address_line1.as_deref()
    }
    /// <p>Second line of contact's address, if any.</p>
    pub fn address_line2(&self) -> std::option::Option<&str> {
        self.address_line2.as_deref()
    }
    /// <p>The city of the contact's address.</p>
    pub fn city(&self) -> std::option::Option<&str> {
        self.city.as_deref()
    }
    /// <p>The state or province of the contact's city.</p>
    pub fn state(&self) -> std::option::Option<&str> {
        self.state.as_deref()
    }
    /// <p>Code for the country of the contact's address.</p>
    pub fn country_code(&self) -> std::option::Option<&crate::types::CountryCode> {
        self.country_code.as_ref()
    }
    /// <p>The zip or postal code of the contact's address.</p>
    pub fn zip_code(&self) -> std::option::Option<&str> {
        self.zip_code.as_deref()
    }
    /// <p>The phone number of the contact.</p>
    /// <p>Constraints: Phone number must be specified in the format "+[country dialing code].[number including any area code&gt;]". For example, a US phone number might appear as <code>"+1.1234567890"</code>.</p>
    pub fn phone_number(&self) -> std::option::Option<&str> {
        self.phone_number.as_deref()
    }
    /// <p>Email address of the contact.</p>
    pub fn email(&self) -> std::option::Option<&str> {
        self.email.as_deref()
    }
    /// <p>Fax number of the contact.</p>
    /// <p>Constraints: Phone number must be specified in the format "+[country dialing code].[number including any area code]". For example, a US phone number might appear as <code>"+1.1234567890"</code>.</p>
    pub fn fax(&self) -> std::option::Option<&str> {
        self.fax.as_deref()
    }
    /// <p>A list of name-value pairs for parameters required by certain top-level domains.</p>
    pub fn extra_params(&self) -> std::option::Option<&[crate::types::ExtraParam]> {
        self.extra_params.as_deref()
    }
}
impl std::fmt::Debug for ContactDetail {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ContactDetail");
        formatter.field("first_name", &"*** Sensitive Data Redacted ***");
        formatter.field("last_name", &"*** Sensitive Data Redacted ***");
        formatter.field("contact_type", &"*** Sensitive Data Redacted ***");
        formatter.field("organization_name", &"*** Sensitive Data Redacted ***");
        formatter.field("address_line1", &"*** Sensitive Data Redacted ***");
        formatter.field("address_line2", &"*** Sensitive Data Redacted ***");
        formatter.field("city", &"*** Sensitive Data Redacted ***");
        formatter.field("state", &"*** Sensitive Data Redacted ***");
        formatter.field("country_code", &"*** Sensitive Data Redacted ***");
        formatter.field("zip_code", &"*** Sensitive Data Redacted ***");
        formatter.field("phone_number", &"*** Sensitive Data Redacted ***");
        formatter.field("email", &"*** Sensitive Data Redacted ***");
        formatter.field("fax", &"*** Sensitive Data Redacted ***");
        formatter.field("extra_params", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl ContactDetail {
    /// Creates a new builder-style object to manufacture [`ContactDetail`](crate::types::ContactDetail).
    pub fn builder() -> crate::types::builders::ContactDetailBuilder {
        crate::types::builders::ContactDetailBuilder::default()
    }
}

/// A builder for [`ContactDetail`](crate::types::ContactDetail).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct ContactDetailBuilder {
    pub(crate) first_name: std::option::Option<std::string::String>,
    pub(crate) last_name: std::option::Option<std::string::String>,
    pub(crate) contact_type: std::option::Option<crate::types::ContactType>,
    pub(crate) organization_name: std::option::Option<std::string::String>,
    pub(crate) address_line1: std::option::Option<std::string::String>,
    pub(crate) address_line2: std::option::Option<std::string::String>,
    pub(crate) city: std::option::Option<std::string::String>,
    pub(crate) state: std::option::Option<std::string::String>,
    pub(crate) country_code: std::option::Option<crate::types::CountryCode>,
    pub(crate) zip_code: std::option::Option<std::string::String>,
    pub(crate) phone_number: std::option::Option<std::string::String>,
    pub(crate) email: std::option::Option<std::string::String>,
    pub(crate) fax: std::option::Option<std::string::String>,
    pub(crate) extra_params: std::option::Option<std::vec::Vec<crate::types::ExtraParam>>,
}
impl ContactDetailBuilder {
    /// <p>First name of contact.</p>
    pub fn first_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.first_name = Some(input.into());
        self
    }
    /// <p>First name of contact.</p>
    pub fn set_first_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.first_name = input;
        self
    }
    /// <p>Last name of contact.</p>
    pub fn last_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.last_name = Some(input.into());
        self
    }
    /// <p>Last name of contact.</p>
    pub fn set_last_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.last_name = input;
        self
    }
    /// <p>Indicates whether the contact is a person, company, association, or public organization. Note the following:</p>
    /// <ul>
    /// <li> <p>If you specify a value other than <code>PERSON</code>, you must also specify a value for <code>OrganizationName</code>.</p> </li>
    /// <li> <p>For some TLDs, the privacy protection available depends on the value that you specify for <code>Contact Type</code>. For the privacy protection settings for your TLD, see <a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/registrar-tld-list.html">Domains that You Can Register with Amazon Route 53</a> in the <i>Amazon Route 53 Developer Guide</i> </p> </li>
    /// <li> <p>For .es domains, the value of <code>ContactType</code> must be <code>PERSON</code> for all three contacts.</p> </li>
    /// </ul>
    pub fn contact_type(mut self, input: crate::types::ContactType) -> Self {
        self.contact_type = Some(input);
        self
    }
    /// <p>Indicates whether the contact is a person, company, association, or public organization. Note the following:</p>
    /// <ul>
    /// <li> <p>If you specify a value other than <code>PERSON</code>, you must also specify a value for <code>OrganizationName</code>.</p> </li>
    /// <li> <p>For some TLDs, the privacy protection available depends on the value that you specify for <code>Contact Type</code>. For the privacy protection settings for your TLD, see <a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/registrar-tld-list.html">Domains that You Can Register with Amazon Route 53</a> in the <i>Amazon Route 53 Developer Guide</i> </p> </li>
    /// <li> <p>For .es domains, the value of <code>ContactType</code> must be <code>PERSON</code> for all three contacts.</p> </li>
    /// </ul>
    pub fn set_contact_type(
        mut self,
        input: std::option::Option<crate::types::ContactType>,
    ) -> Self {
        self.contact_type = input;
        self
    }
    /// <p>Name of the organization for contact types other than <code>PERSON</code>.</p>
    pub fn organization_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.organization_name = Some(input.into());
        self
    }
    /// <p>Name of the organization for contact types other than <code>PERSON</code>.</p>
    pub fn set_organization_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.organization_name = input;
        self
    }
    /// <p>First line of the contact's address.</p>
    pub fn address_line1(mut self, input: impl Into<std::string::String>) -> Self {
        self.address_line1 = Some(input.into());
        self
    }
    /// <p>First line of the contact's address.</p>
    pub fn set_address_line1(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.address_line1 = input;
        self
    }
    /// <p>Second line of contact's address, if any.</p>
    pub fn address_line2(mut self, input: impl Into<std::string::String>) -> Self {
        self.address_line2 = Some(input.into());
        self
    }
    /// <p>Second line of contact's address, if any.</p>
    pub fn set_address_line2(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.address_line2 = input;
        self
    }
    /// <p>The city of the contact's address.</p>
    pub fn city(mut self, input: impl Into<std::string::String>) -> Self {
        self.city = Some(input.into());
        self
    }
    /// <p>The city of the contact's address.</p>
    pub fn set_city(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.city = input;
        self
    }
    /// <p>The state or province of the contact's city.</p>
    pub fn state(mut self, input: impl Into<std::string::String>) -> Self {
        self.state = Some(input.into());
        self
    }
    /// <p>The state or province of the contact's city.</p>
    pub fn set_state(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.state = input;
        self
    }
    /// <p>Code for the country of the contact's address.</p>
    pub fn country_code(mut self, input: crate::types::CountryCode) -> Self {
        self.country_code = Some(input);
        self
    }
    /// <p>Code for the country of the contact's address.</p>
    pub fn set_country_code(
        mut self,
        input: std::option::Option<crate::types::CountryCode>,
    ) -> Self {
        self.country_code = input;
        self
    }
    /// <p>The zip or postal code of the contact's address.</p>
    pub fn zip_code(mut self, input: impl Into<std::string::String>) -> Self {
        self.zip_code = Some(input.into());
        self
    }
    /// <p>The zip or postal code of the contact's address.</p>
    pub fn set_zip_code(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.zip_code = input;
        self
    }
    /// <p>The phone number of the contact.</p>
    /// <p>Constraints: Phone number must be specified in the format "+[country dialing code].[number including any area code&gt;]". For example, a US phone number might appear as <code>"+1.1234567890"</code>.</p>
    pub fn phone_number(mut self, input: impl Into<std::string::String>) -> Self {
        self.phone_number = Some(input.into());
        self
    }
    /// <p>The phone number of the contact.</p>
    /// <p>Constraints: Phone number must be specified in the format "+[country dialing code].[number including any area code&gt;]". For example, a US phone number might appear as <code>"+1.1234567890"</code>.</p>
    pub fn set_phone_number(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.phone_number = input;
        self
    }
    /// <p>Email address of the contact.</p>
    pub fn email(mut self, input: impl Into<std::string::String>) -> Self {
        self.email = Some(input.into());
        self
    }
    /// <p>Email address of the contact.</p>
    pub fn set_email(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.email = input;
        self
    }
    /// <p>Fax number of the contact.</p>
    /// <p>Constraints: Phone number must be specified in the format "+[country dialing code].[number including any area code]". For example, a US phone number might appear as <code>"+1.1234567890"</code>.</p>
    pub fn fax(mut self, input: impl Into<std::string::String>) -> Self {
        self.fax = Some(input.into());
        self
    }
    /// <p>Fax number of the contact.</p>
    /// <p>Constraints: Phone number must be specified in the format "+[country dialing code].[number including any area code]". For example, a US phone number might appear as <code>"+1.1234567890"</code>.</p>
    pub fn set_fax(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.fax = input;
        self
    }
    /// Appends an item to `extra_params`.
    ///
    /// To override the contents of this collection use [`set_extra_params`](Self::set_extra_params).
    ///
    /// <p>A list of name-value pairs for parameters required by certain top-level domains.</p>
    pub fn extra_params(mut self, input: crate::types::ExtraParam) -> Self {
        let mut v = self.extra_params.unwrap_or_default();
        v.push(input);
        self.extra_params = Some(v);
        self
    }
    /// <p>A list of name-value pairs for parameters required by certain top-level domains.</p>
    pub fn set_extra_params(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ExtraParam>>,
    ) -> Self {
        self.extra_params = input;
        self
    }
    /// Consumes the builder and constructs a [`ContactDetail`](crate::types::ContactDetail).
    pub fn build(self) -> crate::types::ContactDetail {
        crate::types::ContactDetail {
            first_name: self.first_name,
            last_name: self.last_name,
            contact_type: self.contact_type,
            organization_name: self.organization_name,
            address_line1: self.address_line1,
            address_line2: self.address_line2,
            city: self.city,
            state: self.state,
            country_code: self.country_code,
            zip_code: self.zip_code,
            phone_number: self.phone_number,
            email: self.email,
            fax: self.fax,
            extra_params: self.extra_params,
        }
    }
}
impl std::fmt::Debug for ContactDetailBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ContactDetailBuilder");
        formatter.field("first_name", &"*** Sensitive Data Redacted ***");
        formatter.field("last_name", &"*** Sensitive Data Redacted ***");
        formatter.field("contact_type", &"*** Sensitive Data Redacted ***");
        formatter.field("organization_name", &"*** Sensitive Data Redacted ***");
        formatter.field("address_line1", &"*** Sensitive Data Redacted ***");
        formatter.field("address_line2", &"*** Sensitive Data Redacted ***");
        formatter.field("city", &"*** Sensitive Data Redacted ***");
        formatter.field("state", &"*** Sensitive Data Redacted ***");
        formatter.field("country_code", &"*** Sensitive Data Redacted ***");
        formatter.field("zip_code", &"*** Sensitive Data Redacted ***");
        formatter.field("phone_number", &"*** Sensitive Data Redacted ***");
        formatter.field("email", &"*** Sensitive Data Redacted ***");
        formatter.field("fax", &"*** Sensitive Data Redacted ***");
        formatter.field("extra_params", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
