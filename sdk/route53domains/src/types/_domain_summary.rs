// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Summary information about one domain.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DomainSummary {
    /// <p>The name of the domain that the summary information applies to.</p>
    #[doc(hidden)]
    pub domain_name: std::option::Option<std::string::String>,
    /// <p>Indicates whether the domain is automatically renewed upon expiration.</p>
    #[doc(hidden)]
    pub auto_renew: std::option::Option<bool>,
    /// <p>Indicates whether a domain is locked from unauthorized transfer to another party.</p>
    #[doc(hidden)]
    pub transfer_lock: std::option::Option<bool>,
    /// <p>Expiration date of the domain in Unix time format and Coordinated Universal Time (UTC).</p>
    #[doc(hidden)]
    pub expiry: std::option::Option<aws_smithy_types::DateTime>,
}
impl DomainSummary {
    /// <p>The name of the domain that the summary information applies to.</p>
    pub fn domain_name(&self) -> std::option::Option<&str> {
        self.domain_name.as_deref()
    }
    /// <p>Indicates whether the domain is automatically renewed upon expiration.</p>
    pub fn auto_renew(&self) -> std::option::Option<bool> {
        self.auto_renew
    }
    /// <p>Indicates whether a domain is locked from unauthorized transfer to another party.</p>
    pub fn transfer_lock(&self) -> std::option::Option<bool> {
        self.transfer_lock
    }
    /// <p>Expiration date of the domain in Unix time format and Coordinated Universal Time (UTC).</p>
    pub fn expiry(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.expiry.as_ref()
    }
}
impl DomainSummary {
    /// Creates a new builder-style object to manufacture [`DomainSummary`](crate::types::DomainSummary).
    pub fn builder() -> crate::types::builders::DomainSummaryBuilder {
        crate::types::builders::DomainSummaryBuilder::default()
    }
}

/// A builder for [`DomainSummary`](crate::types::DomainSummary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DomainSummaryBuilder {
    pub(crate) domain_name: std::option::Option<std::string::String>,
    pub(crate) auto_renew: std::option::Option<bool>,
    pub(crate) transfer_lock: std::option::Option<bool>,
    pub(crate) expiry: std::option::Option<aws_smithy_types::DateTime>,
}
impl DomainSummaryBuilder {
    /// <p>The name of the domain that the summary information applies to.</p>
    pub fn domain_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.domain_name = Some(input.into());
        self
    }
    /// <p>The name of the domain that the summary information applies to.</p>
    pub fn set_domain_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.domain_name = input;
        self
    }
    /// <p>Indicates whether the domain is automatically renewed upon expiration.</p>
    pub fn auto_renew(mut self, input: bool) -> Self {
        self.auto_renew = Some(input);
        self
    }
    /// <p>Indicates whether the domain is automatically renewed upon expiration.</p>
    pub fn set_auto_renew(mut self, input: std::option::Option<bool>) -> Self {
        self.auto_renew = input;
        self
    }
    /// <p>Indicates whether a domain is locked from unauthorized transfer to another party.</p>
    pub fn transfer_lock(mut self, input: bool) -> Self {
        self.transfer_lock = Some(input);
        self
    }
    /// <p>Indicates whether a domain is locked from unauthorized transfer to another party.</p>
    pub fn set_transfer_lock(mut self, input: std::option::Option<bool>) -> Self {
        self.transfer_lock = input;
        self
    }
    /// <p>Expiration date of the domain in Unix time format and Coordinated Universal Time (UTC).</p>
    pub fn expiry(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.expiry = Some(input);
        self
    }
    /// <p>Expiration date of the domain in Unix time format and Coordinated Universal Time (UTC).</p>
    pub fn set_expiry(mut self, input: std::option::Option<aws_smithy_types::DateTime>) -> Self {
        self.expiry = input;
        self
    }
    /// Consumes the builder and constructs a [`DomainSummary`](crate::types::DomainSummary).
    pub fn build(self) -> crate::types::DomainSummary {
        crate::types::DomainSummary {
            domain_name: self.domain_name,
            auto_renew: self.auto_renew,
            transfer_lock: self.transfer_lock,
            expiry: self.expiry,
        }
    }
}
