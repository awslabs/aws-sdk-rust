// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Customer's consent for the owner change request. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Consent {
    /// <p> Maximum amount the customer agreed to accept. </p>
    #[doc(hidden)]
    pub max_price: f64,
    /// <p> Currency for the <code>MaxPrice</code>. </p>
    #[doc(hidden)]
    pub currency: std::option::Option<std::string::String>,
}
impl Consent {
    /// <p> Maximum amount the customer agreed to accept. </p>
    pub fn max_price(&self) -> f64 {
        self.max_price
    }
    /// <p> Currency for the <code>MaxPrice</code>. </p>
    pub fn currency(&self) -> std::option::Option<&str> {
        self.currency.as_deref()
    }
}
impl Consent {
    /// Creates a new builder-style object to manufacture [`Consent`](crate::types::Consent).
    pub fn builder() -> crate::types::builders::ConsentBuilder {
        crate::types::builders::ConsentBuilder::default()
    }
}

/// A builder for [`Consent`](crate::types::Consent).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ConsentBuilder {
    pub(crate) max_price: std::option::Option<f64>,
    pub(crate) currency: std::option::Option<std::string::String>,
}
impl ConsentBuilder {
    /// <p> Maximum amount the customer agreed to accept. </p>
    pub fn max_price(mut self, input: f64) -> Self {
        self.max_price = Some(input);
        self
    }
    /// <p> Maximum amount the customer agreed to accept. </p>
    pub fn set_max_price(mut self, input: std::option::Option<f64>) -> Self {
        self.max_price = input;
        self
    }
    /// <p> Currency for the <code>MaxPrice</code>. </p>
    pub fn currency(mut self, input: impl Into<std::string::String>) -> Self {
        self.currency = Some(input.into());
        self
    }
    /// <p> Currency for the <code>MaxPrice</code>. </p>
    pub fn set_currency(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.currency = input;
        self
    }
    /// Consumes the builder and constructs a [`Consent`](crate::types::Consent).
    pub fn build(self) -> crate::types::Consent {
        crate::types::Consent {
            max_price: self.max_price.unwrap_or_default(),
            currency: self.currency,
        }
    }
}
