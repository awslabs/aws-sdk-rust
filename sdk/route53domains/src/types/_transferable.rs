// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `Transferable`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let transferable = unimplemented!();
/// match transferable {
///     Transferable::DomainInAnotherAccount => { /* ... */ },
///     Transferable::DomainInOwnAccount => { /* ... */ },
///     Transferable::DontKnow => { /* ... */ },
///     Transferable::PremiumDomain => { /* ... */ },
///     Transferable::Transferable => { /* ... */ },
///     Transferable::Untransferable => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `transferable` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `Transferable::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `Transferable::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `Transferable::NewFeature` is defined.
/// Specifically, when `transferable` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `Transferable::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
/// <p>Whether the domain name can be transferred to Route 53.</p>
/// <note>
/// <p>You can transfer only domains that have a value of <code>TRANSFERABLE</code> or
/// <code>Transferable</code>.</p>
/// </note>
/// <p>Valid values:</p>
/// <dl>
/// <dt>TRANSFERABLE</dt>
/// <dd>
/// <p>The domain name can be transferred to Route 53.</p>
/// </dd>
/// <dt>UNTRANSFERRABLE</dt>
/// <dd>
/// <p>The domain name can't be transferred to Route 53.</p>
/// </dd>
/// <dt>DONT_KNOW</dt>
/// <dd>
/// <p>Reserved for future use.</p>
/// </dd>
/// <dt>DOMAIN_IN_OWN_ACCOUNT</dt>
/// <dd>
/// <p>The domain already exists in the current Amazon Web Services account.</p>
/// </dd>
/// <dt>DOMAIN_IN_ANOTHER_ACCOUNT</dt>
/// <dd>
/// <p> the domain exists in another Amazon Web Services account.</p>
/// </dd>
/// <dt>PREMIUM_DOMAIN</dt>
/// <dd>
/// <p>Premium domain transfer is not supported.</p>
/// </dd>
/// </dl>
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum Transferable {
    #[allow(missing_docs)] // documentation missing in model
    DomainInAnotherAccount,
    #[allow(missing_docs)] // documentation missing in model
    DomainInOwnAccount,
    #[allow(missing_docs)] // documentation missing in model
    DontKnow,
    #[allow(missing_docs)] // documentation missing in model
    PremiumDomain,
    #[allow(missing_docs)] // documentation missing in model
    Transferable,
    #[allow(missing_docs)] // documentation missing in model
    Untransferable,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl std::convert::From<&str> for Transferable {
    fn from(s: &str) -> Self {
        match s {
            "DOMAIN_IN_ANOTHER_ACCOUNT" => Transferable::DomainInAnotherAccount,
            "DOMAIN_IN_OWN_ACCOUNT" => Transferable::DomainInOwnAccount,
            "DONT_KNOW" => Transferable::DontKnow,
            "PREMIUM_DOMAIN" => Transferable::PremiumDomain,
            "TRANSFERABLE" => Transferable::Transferable,
            "UNTRANSFERABLE" => Transferable::Untransferable,
            other => {
                Transferable::Unknown(crate::primitives::UnknownVariantValue(other.to_owned()))
            }
        }
    }
}
impl std::str::FromStr for Transferable {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(Transferable::from(s))
    }
}
impl Transferable {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            Transferable::DomainInAnotherAccount => "DOMAIN_IN_ANOTHER_ACCOUNT",
            Transferable::DomainInOwnAccount => "DOMAIN_IN_OWN_ACCOUNT",
            Transferable::DontKnow => "DONT_KNOW",
            Transferable::PremiumDomain => "PREMIUM_DOMAIN",
            Transferable::Transferable => "TRANSFERABLE",
            Transferable::Untransferable => "UNTRANSFERABLE",
            Transferable::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "DOMAIN_IN_ANOTHER_ACCOUNT",
            "DOMAIN_IN_OWN_ACCOUNT",
            "DONT_KNOW",
            "PREMIUM_DOMAIN",
            "TRANSFERABLE",
            "UNTRANSFERABLE",
        ]
    }
}
impl AsRef<str> for Transferable {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
