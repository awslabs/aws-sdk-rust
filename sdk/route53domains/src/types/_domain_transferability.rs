// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A complex type that contains information about whether the specified domain can be transferred to Route 53.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DomainTransferability {
    /// <p>Whether the domain name can be transferred to Route 53.</p> <note>
    /// <p>You can transfer only domains that have a value of <code>TRANSFERABLE</code> or <code>Transferable</code>.</p>
    /// </note>
    /// <p>Valid values:</p>
    /// <dl>
    /// <dt>
    /// TRANSFERABLE
    /// </dt>
    /// <dd>
    /// <p>The domain name can be transferred to Route 53.</p>
    /// </dd>
    /// <dt>
    /// UNTRANSFERRABLE
    /// </dt>
    /// <dd>
    /// <p>The domain name can't be transferred to Route 53.</p>
    /// </dd>
    /// <dt>
    /// DONT_KNOW
    /// </dt>
    /// <dd>
    /// <p>Reserved for future use.</p>
    /// </dd>
    /// <dt>
    /// DOMAIN_IN_OWN_ACCOUNT
    /// </dt>
    /// <dd>
    /// <p>The domain already exists in the current Amazon Web Services account.</p>
    /// </dd>
    /// <dt>
    /// DOMAIN_IN_ANOTHER_ACCOUNT
    /// </dt>
    /// <dd>
    /// <p> the domain exists in another Amazon Web Services account.</p>
    /// </dd>
    /// <dt>
    /// PREMIUM_DOMAIN
    /// </dt>
    /// <dd>
    /// <p>Premium domain transfer is not supported.</p>
    /// </dd>
    /// </dl>
    #[doc(hidden)]
    pub transferable: std::option::Option<crate::types::Transferable>,
}
impl DomainTransferability {
    /// <p>Whether the domain name can be transferred to Route 53.</p> <note>
    /// <p>You can transfer only domains that have a value of <code>TRANSFERABLE</code> or <code>Transferable</code>.</p>
    /// </note>
    /// <p>Valid values:</p>
    /// <dl>
    /// <dt>
    /// TRANSFERABLE
    /// </dt>
    /// <dd>
    /// <p>The domain name can be transferred to Route 53.</p>
    /// </dd>
    /// <dt>
    /// UNTRANSFERRABLE
    /// </dt>
    /// <dd>
    /// <p>The domain name can't be transferred to Route 53.</p>
    /// </dd>
    /// <dt>
    /// DONT_KNOW
    /// </dt>
    /// <dd>
    /// <p>Reserved for future use.</p>
    /// </dd>
    /// <dt>
    /// DOMAIN_IN_OWN_ACCOUNT
    /// </dt>
    /// <dd>
    /// <p>The domain already exists in the current Amazon Web Services account.</p>
    /// </dd>
    /// <dt>
    /// DOMAIN_IN_ANOTHER_ACCOUNT
    /// </dt>
    /// <dd>
    /// <p> the domain exists in another Amazon Web Services account.</p>
    /// </dd>
    /// <dt>
    /// PREMIUM_DOMAIN
    /// </dt>
    /// <dd>
    /// <p>Premium domain transfer is not supported.</p>
    /// </dd>
    /// </dl>
    pub fn transferable(&self) -> std::option::Option<&crate::types::Transferable> {
        self.transferable.as_ref()
    }
}
impl DomainTransferability {
    /// Creates a new builder-style object to manufacture [`DomainTransferability`](crate::types::DomainTransferability).
    pub fn builder() -> crate::types::builders::DomainTransferabilityBuilder {
        crate::types::builders::DomainTransferabilityBuilder::default()
    }
}

/// A builder for [`DomainTransferability`](crate::types::DomainTransferability).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DomainTransferabilityBuilder {
    pub(crate) transferable: std::option::Option<crate::types::Transferable>,
}
impl DomainTransferabilityBuilder {
    /// <p>Whether the domain name can be transferred to Route 53.</p> <note>
    /// <p>You can transfer only domains that have a value of <code>TRANSFERABLE</code> or <code>Transferable</code>.</p>
    /// </note>
    /// <p>Valid values:</p>
    /// <dl>
    /// <dt>
    /// TRANSFERABLE
    /// </dt>
    /// <dd>
    /// <p>The domain name can be transferred to Route 53.</p>
    /// </dd>
    /// <dt>
    /// UNTRANSFERRABLE
    /// </dt>
    /// <dd>
    /// <p>The domain name can't be transferred to Route 53.</p>
    /// </dd>
    /// <dt>
    /// DONT_KNOW
    /// </dt>
    /// <dd>
    /// <p>Reserved for future use.</p>
    /// </dd>
    /// <dt>
    /// DOMAIN_IN_OWN_ACCOUNT
    /// </dt>
    /// <dd>
    /// <p>The domain already exists in the current Amazon Web Services account.</p>
    /// </dd>
    /// <dt>
    /// DOMAIN_IN_ANOTHER_ACCOUNT
    /// </dt>
    /// <dd>
    /// <p> the domain exists in another Amazon Web Services account.</p>
    /// </dd>
    /// <dt>
    /// PREMIUM_DOMAIN
    /// </dt>
    /// <dd>
    /// <p>Premium domain transfer is not supported.</p>
    /// </dd>
    /// </dl>
    pub fn transferable(mut self, input: crate::types::Transferable) -> Self {
        self.transferable = Some(input);
        self
    }
    /// <p>Whether the domain name can be transferred to Route 53.</p> <note>
    /// <p>You can transfer only domains that have a value of <code>TRANSFERABLE</code> or <code>Transferable</code>.</p>
    /// </note>
    /// <p>Valid values:</p>
    /// <dl>
    /// <dt>
    /// TRANSFERABLE
    /// </dt>
    /// <dd>
    /// <p>The domain name can be transferred to Route 53.</p>
    /// </dd>
    /// <dt>
    /// UNTRANSFERRABLE
    /// </dt>
    /// <dd>
    /// <p>The domain name can't be transferred to Route 53.</p>
    /// </dd>
    /// <dt>
    /// DONT_KNOW
    /// </dt>
    /// <dd>
    /// <p>Reserved for future use.</p>
    /// </dd>
    /// <dt>
    /// DOMAIN_IN_OWN_ACCOUNT
    /// </dt>
    /// <dd>
    /// <p>The domain already exists in the current Amazon Web Services account.</p>
    /// </dd>
    /// <dt>
    /// DOMAIN_IN_ANOTHER_ACCOUNT
    /// </dt>
    /// <dd>
    /// <p> the domain exists in another Amazon Web Services account.</p>
    /// </dd>
    /// <dt>
    /// PREMIUM_DOMAIN
    /// </dt>
    /// <dd>
    /// <p>Premium domain transfer is not supported.</p>
    /// </dd>
    /// </dl>
    pub fn set_transferable(
        mut self,
        input: std::option::Option<crate::types::Transferable>,
    ) -> Self {
        self.transferable = input;
        self
    }
    /// Consumes the builder and constructs a [`DomainTransferability`](crate::types::DomainTransferability).
    pub fn build(self) -> crate::types::DomainTransferability {
        crate::types::DomainTransferability {
            transferable: self.transferable,
        }
    }
}
