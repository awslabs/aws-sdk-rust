// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::list_prices::_list_prices_output::ListPricesOutputBuilder;

pub use crate::operation::list_prices::_list_prices_input::ListPricesInputBuilder;

/// Fluent builder constructing a request to `ListPrices`.
///
/// <p>Lists the following prices for either all the TLDs supported by Route&nbsp;53, or the specified TLD:</p>
/// <ul>
/// <li> <p>Registration</p> </li>
/// <li> <p>Transfer</p> </li>
/// <li> <p>Owner change</p> </li>
/// <li> <p>Domain renewal</p> </li>
/// <li> <p>Domain restoration</p> </li>
/// </ul>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListPricesFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::list_prices::builders::ListPricesInputBuilder,
}
impl ListPricesFluentBuilder {
    /// Creates a new `ListPrices`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::list_prices::ListPrices,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::operation::list_prices::ListPricesError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::list_prices::ListPricesOutput,
        aws_smithy_http::result::SdkError<crate::operation::list_prices::ListPricesError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::list_prices::paginator::ListPricesPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::operation::list_prices::paginator::ListPricesPaginator {
        crate::operation::list_prices::paginator::ListPricesPaginator::new(self.handle, self.inner)
    }
    /// <p>The TLD for which you want to receive the pricing information. For example. <code>.net</code>.</p>
    /// <p>If a <code>Tld</code> value is not provided, a list of prices for all TLDs supported by Route&nbsp;53 is returned.</p>
    pub fn tld(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.tld(input.into());
        self
    }
    /// <p>The TLD for which you want to receive the pricing information. For example. <code>.net</code>.</p>
    /// <p>If a <code>Tld</code> value is not provided, a list of prices for all TLDs supported by Route&nbsp;53 is returned.</p>
    pub fn set_tld(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_tld(input);
        self
    }
    /// <p>For an initial request for a list of prices, omit this element. If the number of prices that are not yet complete is greater than the value that you specified for <code>MaxItems</code>, you can use <code>Marker</code> to return additional prices. Get the value of <code>NextPageMarker</code> from the previous response, and submit another request that includes the value of <code>NextPageMarker</code> in the <code>Marker</code> element. </p>
    /// <p>Used only for all TLDs. If you specify a TLD, don't specify a <code>Marker</code>.</p>
    pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.marker(input.into());
        self
    }
    /// <p>For an initial request for a list of prices, omit this element. If the number of prices that are not yet complete is greater than the value that you specified for <code>MaxItems</code>, you can use <code>Marker</code> to return additional prices. Get the value of <code>NextPageMarker</code> from the previous response, and submit another request that includes the value of <code>NextPageMarker</code> in the <code>Marker</code> element. </p>
    /// <p>Used only for all TLDs. If you specify a TLD, don't specify a <code>Marker</code>.</p>
    pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_marker(input);
        self
    }
    /// <p>Number of <code>Prices</code> to be returned.</p>
    /// <p>Used only for all TLDs. If you specify a TLD, don't specify a <code>MaxItems</code>.</p>
    pub fn max_items(mut self, input: i32) -> Self {
        self.inner = self.inner.max_items(input);
        self
    }
    /// <p>Number of <code>Prices</code> to be returned.</p>
    /// <p>Used only for all TLDs. If you specify a TLD, don't specify a <code>MaxItems</code>.</p>
    pub fn set_max_items(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_items(input);
        self
    }
}
