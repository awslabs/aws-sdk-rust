// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListPricesOutput {
    /// <p>A complex type that includes all the pricing information. If you specify a TLD, this array contains only the pricing for that TLD.</p>
    #[doc(hidden)]
    pub prices: std::option::Option<std::vec::Vec<crate::types::DomainPrice>>,
    /// <p>If there are more prices than you specified for <code>MaxItems</code> in the request, submit another request and include the value of <code>NextPageMarker</code> in the value of <code>Marker</code>. </p>
    /// <p>Used only for all TLDs. If you specify a TLD, don't specify a <code>NextPageMarker</code>.</p>
    #[doc(hidden)]
    pub next_page_marker: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListPricesOutput {
    /// <p>A complex type that includes all the pricing information. If you specify a TLD, this array contains only the pricing for that TLD.</p>
    pub fn prices(&self) -> std::option::Option<&[crate::types::DomainPrice]> {
        self.prices.as_deref()
    }
    /// <p>If there are more prices than you specified for <code>MaxItems</code> in the request, submit another request and include the value of <code>NextPageMarker</code> in the value of <code>Marker</code>. </p>
    /// <p>Used only for all TLDs. If you specify a TLD, don't specify a <code>NextPageMarker</code>.</p>
    pub fn next_page_marker(&self) -> std::option::Option<&str> {
        self.next_page_marker.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListPricesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListPricesOutput {
    /// Creates a new builder-style object to manufacture [`ListPricesOutput`](crate::operation::list_prices::ListPricesOutput).
    pub fn builder() -> crate::operation::list_prices::builders::ListPricesOutputBuilder {
        crate::operation::list_prices::builders::ListPricesOutputBuilder::default()
    }
}

/// A builder for [`ListPricesOutput`](crate::operation::list_prices::ListPricesOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListPricesOutputBuilder {
    pub(crate) prices: std::option::Option<std::vec::Vec<crate::types::DomainPrice>>,
    pub(crate) next_page_marker: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListPricesOutputBuilder {
    /// Appends an item to `prices`.
    ///
    /// To override the contents of this collection use [`set_prices`](Self::set_prices).
    ///
    /// <p>A complex type that includes all the pricing information. If you specify a TLD, this array contains only the pricing for that TLD.</p>
    pub fn prices(mut self, input: crate::types::DomainPrice) -> Self {
        let mut v = self.prices.unwrap_or_default();
        v.push(input);
        self.prices = Some(v);
        self
    }
    /// <p>A complex type that includes all the pricing information. If you specify a TLD, this array contains only the pricing for that TLD.</p>
    pub fn set_prices(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::DomainPrice>>,
    ) -> Self {
        self.prices = input;
        self
    }
    /// <p>If there are more prices than you specified for <code>MaxItems</code> in the request, submit another request and include the value of <code>NextPageMarker</code> in the value of <code>Marker</code>. </p>
    /// <p>Used only for all TLDs. If you specify a TLD, don't specify a <code>NextPageMarker</code>.</p>
    pub fn next_page_marker(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_page_marker = Some(input.into());
        self
    }
    /// <p>If there are more prices than you specified for <code>MaxItems</code> in the request, submit another request and include the value of <code>NextPageMarker</code> in the value of <code>Marker</code>. </p>
    /// <p>Used only for all TLDs. If you specify a TLD, don't specify a <code>NextPageMarker</code>.</p>
    pub fn set_next_page_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_page_marker = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListPricesOutput`](crate::operation::list_prices::ListPricesOutput).
    pub fn build(self) -> crate::operation::list_prices::ListPricesOutput {
        crate::operation::list_prices::ListPricesOutput {
            prices: self.prices,
            next_page_marker: self.next_page_marker,
            _request_id: self._request_id,
        }
    }
}
