// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListPricesInput {
    /// <p>The TLD for which you want to receive the pricing information. For example. <code>.net</code>.</p>
    /// <p>If a <code>Tld</code> value is not provided, a list of prices for all TLDs supported by Route&nbsp;53 is returned.</p>
    #[doc(hidden)]
    pub tld: std::option::Option<std::string::String>,
    /// <p>For an initial request for a list of prices, omit this element. If the number of prices that are not yet complete is greater than the value that you specified for <code>MaxItems</code>, you can use <code>Marker</code> to return additional prices. Get the value of <code>NextPageMarker</code> from the previous response, and submit another request that includes the value of <code>NextPageMarker</code> in the <code>Marker</code> element. </p>
    /// <p>Used only for all TLDs. If you specify a TLD, don't specify a <code>Marker</code>.</p>
    #[doc(hidden)]
    pub marker: std::option::Option<std::string::String>,
    /// <p>Number of <code>Prices</code> to be returned.</p>
    /// <p>Used only for all TLDs. If you specify a TLD, don't specify a <code>MaxItems</code>.</p>
    #[doc(hidden)]
    pub max_items: std::option::Option<i32>,
}
impl ListPricesInput {
    /// <p>The TLD for which you want to receive the pricing information. For example. <code>.net</code>.</p>
    /// <p>If a <code>Tld</code> value is not provided, a list of prices for all TLDs supported by Route&nbsp;53 is returned.</p>
    pub fn tld(&self) -> std::option::Option<&str> {
        self.tld.as_deref()
    }
    /// <p>For an initial request for a list of prices, omit this element. If the number of prices that are not yet complete is greater than the value that you specified for <code>MaxItems</code>, you can use <code>Marker</code> to return additional prices. Get the value of <code>NextPageMarker</code> from the previous response, and submit another request that includes the value of <code>NextPageMarker</code> in the <code>Marker</code> element. </p>
    /// <p>Used only for all TLDs. If you specify a TLD, don't specify a <code>Marker</code>.</p>
    pub fn marker(&self) -> std::option::Option<&str> {
        self.marker.as_deref()
    }
    /// <p>Number of <code>Prices</code> to be returned.</p>
    /// <p>Used only for all TLDs. If you specify a TLD, don't specify a <code>MaxItems</code>.</p>
    pub fn max_items(&self) -> std::option::Option<i32> {
        self.max_items
    }
}
impl ListPricesInput {
    /// Creates a new builder-style object to manufacture [`ListPricesInput`](crate::operation::list_prices::ListPricesInput).
    pub fn builder() -> crate::operation::list_prices::builders::ListPricesInputBuilder {
        crate::operation::list_prices::builders::ListPricesInputBuilder::default()
    }
}

/// A builder for [`ListPricesInput`](crate::operation::list_prices::ListPricesInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListPricesInputBuilder {
    pub(crate) tld: std::option::Option<std::string::String>,
    pub(crate) marker: std::option::Option<std::string::String>,
    pub(crate) max_items: std::option::Option<i32>,
}
impl ListPricesInputBuilder {
    /// <p>The TLD for which you want to receive the pricing information. For example. <code>.net</code>.</p>
    /// <p>If a <code>Tld</code> value is not provided, a list of prices for all TLDs supported by Route&nbsp;53 is returned.</p>
    pub fn tld(mut self, input: impl Into<std::string::String>) -> Self {
        self.tld = Some(input.into());
        self
    }
    /// <p>The TLD for which you want to receive the pricing information. For example. <code>.net</code>.</p>
    /// <p>If a <code>Tld</code> value is not provided, a list of prices for all TLDs supported by Route&nbsp;53 is returned.</p>
    pub fn set_tld(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.tld = input;
        self
    }
    /// <p>For an initial request for a list of prices, omit this element. If the number of prices that are not yet complete is greater than the value that you specified for <code>MaxItems</code>, you can use <code>Marker</code> to return additional prices. Get the value of <code>NextPageMarker</code> from the previous response, and submit another request that includes the value of <code>NextPageMarker</code> in the <code>Marker</code> element. </p>
    /// <p>Used only for all TLDs. If you specify a TLD, don't specify a <code>Marker</code>.</p>
    pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
        self.marker = Some(input.into());
        self
    }
    /// <p>For an initial request for a list of prices, omit this element. If the number of prices that are not yet complete is greater than the value that you specified for <code>MaxItems</code>, you can use <code>Marker</code> to return additional prices. Get the value of <code>NextPageMarker</code> from the previous response, and submit another request that includes the value of <code>NextPageMarker</code> in the <code>Marker</code> element. </p>
    /// <p>Used only for all TLDs. If you specify a TLD, don't specify a <code>Marker</code>.</p>
    pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.marker = input;
        self
    }
    /// <p>Number of <code>Prices</code> to be returned.</p>
    /// <p>Used only for all TLDs. If you specify a TLD, don't specify a <code>MaxItems</code>.</p>
    pub fn max_items(mut self, input: i32) -> Self {
        self.max_items = Some(input);
        self
    }
    /// <p>Number of <code>Prices</code> to be returned.</p>
    /// <p>Used only for all TLDs. If you specify a TLD, don't specify a <code>MaxItems</code>.</p>
    pub fn set_max_items(mut self, input: std::option::Option<i32>) -> Self {
        self.max_items = input;
        self
    }
    /// Consumes the builder and constructs a [`ListPricesInput`](crate::operation::list_prices::ListPricesInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::list_prices::ListPricesInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::list_prices::ListPricesInput {
            tld: self.tld,
            marker: self.marker,
            max_items: self.max_items,
        })
    }
}
