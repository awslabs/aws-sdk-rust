// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DisassociateDelegationSignerFromDomainInput {
    /// <p>Name of the domain.</p>
    #[doc(hidden)]
    pub domain_name: std::option::Option<std::string::String>,
    /// <p>An internal identification number assigned to each DS record after it’s created. You can retrieve it as part of DNSSEC information returned by <a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetDomainDetail.html">GetDomainDetail</a>.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
}
impl DisassociateDelegationSignerFromDomainInput {
    /// <p>Name of the domain.</p>
    pub fn domain_name(&self) -> std::option::Option<&str> {
        self.domain_name.as_deref()
    }
    /// <p>An internal identification number assigned to each DS record after it’s created. You can retrieve it as part of DNSSEC information returned by <a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetDomainDetail.html">GetDomainDetail</a>.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
}
impl DisassociateDelegationSignerFromDomainInput {
    /// Creates a new builder-style object to manufacture [`DisassociateDelegationSignerFromDomainInput`](crate::operation::disassociate_delegation_signer_from_domain::DisassociateDelegationSignerFromDomainInput).
    pub fn builder() -> crate::operation::disassociate_delegation_signer_from_domain::builders::DisassociateDelegationSignerFromDomainInputBuilder{
        crate::operation::disassociate_delegation_signer_from_domain::builders::DisassociateDelegationSignerFromDomainInputBuilder::default()
    }
}

/// A builder for [`DisassociateDelegationSignerFromDomainInput`](crate::operation::disassociate_delegation_signer_from_domain::DisassociateDelegationSignerFromDomainInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DisassociateDelegationSignerFromDomainInputBuilder {
    pub(crate) domain_name: std::option::Option<std::string::String>,
    pub(crate) id: std::option::Option<std::string::String>,
}
impl DisassociateDelegationSignerFromDomainInputBuilder {
    /// <p>Name of the domain.</p>
    pub fn domain_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.domain_name = Some(input.into());
        self
    }
    /// <p>Name of the domain.</p>
    pub fn set_domain_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.domain_name = input;
        self
    }
    /// <p>An internal identification number assigned to each DS record after it’s created. You can retrieve it as part of DNSSEC information returned by <a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetDomainDetail.html">GetDomainDetail</a>.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>An internal identification number assigned to each DS record after it’s created. You can retrieve it as part of DNSSEC information returned by <a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetDomainDetail.html">GetDomainDetail</a>.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// Consumes the builder and constructs a [`DisassociateDelegationSignerFromDomainInput`](crate::operation::disassociate_delegation_signer_from_domain::DisassociateDelegationSignerFromDomainInput).
    pub fn build(self) -> Result<crate::operation::disassociate_delegation_signer_from_domain::DisassociateDelegationSignerFromDomainInput, aws_smithy_http::operation::error::BuildError>{
        Ok(
            crate::operation::disassociate_delegation_signer_from_domain::DisassociateDelegationSignerFromDomainInput {
                domain_name: self.domain_name
                ,
                id: self.id
                ,
            }
        )
    }
}
