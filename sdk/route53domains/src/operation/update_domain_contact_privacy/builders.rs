// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_domain_contact_privacy::_update_domain_contact_privacy_output::UpdateDomainContactPrivacyOutputBuilder;

pub use crate::operation::update_domain_contact_privacy::_update_domain_contact_privacy_input::UpdateDomainContactPrivacyInputBuilder;

impl crate::operation::update_domain_contact_privacy::builders::UpdateDomainContactPrivacyInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::update_domain_contact_privacy::UpdateDomainContactPrivacyOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_domain_contact_privacy::UpdateDomainContactPrivacyError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.update_domain_contact_privacy();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `UpdateDomainContactPrivacy`.
///
/// <p>This operation updates the specified domain contact's privacy setting. When privacy protection is enabled, your contact information is replaced with contact information for the registrar or with the phrase "REDACTED FOR PRIVACY", or "On behalf of <domain name>
/// owner."
/// </domain></p><note>
/// <p>While some domains may allow different privacy settings per contact, we recommend specifying the same privacy setting for all contacts.</p>
/// </note>
/// <p>This operation affects only the contact information for the specified contact type (administrative, registrant, or technical). If the request succeeds, Amazon Route 53 returns an operation ID that you can use with <a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html">GetOperationDetail</a> to track the progress and completion of the action. If the request doesn't complete successfully, the domain registrant will be notified by email.</p><important>
/// <p>By disabling the privacy service via API, you consent to the publication of the contact information provided for this domain via the public WHOIS database. You certify that you are the registrant of this domain name and have the authority to make this decision. You may withdraw your consent at any time by enabling privacy protection using either <code>UpdateDomainContactPrivacy</code> or the Route 53 console. Enabling privacy protection removes the contact information provided for this domain from the WHOIS database. For more information on our privacy practices, see <a href="https://aws.amazon.com/privacy/">https://aws.amazon.com/privacy/</a>.</p>
/// </important>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct UpdateDomainContactPrivacyFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_domain_contact_privacy::builders::UpdateDomainContactPrivacyInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::update_domain_contact_privacy::UpdateDomainContactPrivacyOutput,
        crate::operation::update_domain_contact_privacy::UpdateDomainContactPrivacyError,
    > for UpdateDomainContactPrivacyFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::update_domain_contact_privacy::UpdateDomainContactPrivacyOutput,
            crate::operation::update_domain_contact_privacy::UpdateDomainContactPrivacyError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl UpdateDomainContactPrivacyFluentBuilder {
    /// Creates a new `UpdateDomainContactPrivacy`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the UpdateDomainContactPrivacy as a reference.
    pub fn as_input(&self) -> &crate::operation::update_domain_contact_privacy::builders::UpdateDomainContactPrivacyInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_domain_contact_privacy::UpdateDomainContactPrivacyOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_domain_contact_privacy::UpdateDomainContactPrivacyError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::update_domain_contact_privacy::UpdateDomainContactPrivacy::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::update_domain_contact_privacy::UpdateDomainContactPrivacy::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::update_domain_contact_privacy::UpdateDomainContactPrivacyOutput,
        crate::operation::update_domain_contact_privacy::UpdateDomainContactPrivacyError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The name of the domain that you want to update the privacy setting for.</p>
    pub fn domain_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.domain_name(input.into());
        self
    }
    /// <p>The name of the domain that you want to update the privacy setting for.</p>
    pub fn set_domain_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_domain_name(input);
        self
    }
    /// <p>The name of the domain that you want to update the privacy setting for.</p>
    pub fn get_domain_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_domain_name()
    }
    /// <p>Whether you want to conceal contact information from WHOIS queries. If you specify <code>true</code>, WHOIS ("who is") queries return contact information either for Amazon Registrar or for our registrar associate, Gandi. If you specify <code>false</code>, WHOIS queries return the information that you entered for the admin contact.</p><note>
    /// <p>You must specify the same privacy setting for the administrative, billing, registrant, and technical contacts.</p>
    /// </note>
    pub fn admin_privacy(mut self, input: bool) -> Self {
        self.inner = self.inner.admin_privacy(input);
        self
    }
    /// <p>Whether you want to conceal contact information from WHOIS queries. If you specify <code>true</code>, WHOIS ("who is") queries return contact information either for Amazon Registrar or for our registrar associate, Gandi. If you specify <code>false</code>, WHOIS queries return the information that you entered for the admin contact.</p><note>
    /// <p>You must specify the same privacy setting for the administrative, billing, registrant, and technical contacts.</p>
    /// </note>
    pub fn set_admin_privacy(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_admin_privacy(input);
        self
    }
    /// <p>Whether you want to conceal contact information from WHOIS queries. If you specify <code>true</code>, WHOIS ("who is") queries return contact information either for Amazon Registrar or for our registrar associate, Gandi. If you specify <code>false</code>, WHOIS queries return the information that you entered for the admin contact.</p><note>
    /// <p>You must specify the same privacy setting for the administrative, billing, registrant, and technical contacts.</p>
    /// </note>
    pub fn get_admin_privacy(&self) -> &::std::option::Option<bool> {
        self.inner.get_admin_privacy()
    }
    /// <p>Whether you want to conceal contact information from WHOIS queries. If you specify <code>true</code>, WHOIS ("who is") queries return contact information either for Amazon Registrar or for our registrar associate, Gandi. If you specify <code>false</code>, WHOIS queries return the information that you entered for the registrant contact (domain owner).</p><note>
    /// <p>You must specify the same privacy setting for the administrative, billing, registrant, and technical contacts.</p>
    /// </note>
    pub fn registrant_privacy(mut self, input: bool) -> Self {
        self.inner = self.inner.registrant_privacy(input);
        self
    }
    /// <p>Whether you want to conceal contact information from WHOIS queries. If you specify <code>true</code>, WHOIS ("who is") queries return contact information either for Amazon Registrar or for our registrar associate, Gandi. If you specify <code>false</code>, WHOIS queries return the information that you entered for the registrant contact (domain owner).</p><note>
    /// <p>You must specify the same privacy setting for the administrative, billing, registrant, and technical contacts.</p>
    /// </note>
    pub fn set_registrant_privacy(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_registrant_privacy(input);
        self
    }
    /// <p>Whether you want to conceal contact information from WHOIS queries. If you specify <code>true</code>, WHOIS ("who is") queries return contact information either for Amazon Registrar or for our registrar associate, Gandi. If you specify <code>false</code>, WHOIS queries return the information that you entered for the registrant contact (domain owner).</p><note>
    /// <p>You must specify the same privacy setting for the administrative, billing, registrant, and technical contacts.</p>
    /// </note>
    pub fn get_registrant_privacy(&self) -> &::std::option::Option<bool> {
        self.inner.get_registrant_privacy()
    }
    /// <p>Whether you want to conceal contact information from WHOIS queries. If you specify <code>true</code>, WHOIS ("who is") queries return contact information either for Amazon Registrar or for our registrar associate, Gandi. If you specify <code>false</code>, WHOIS queries return the information that you entered for the technical contact.</p><note>
    /// <p>You must specify the same privacy setting for the administrative, billing, registrant, and technical contacts.</p>
    /// </note>
    pub fn tech_privacy(mut self, input: bool) -> Self {
        self.inner = self.inner.tech_privacy(input);
        self
    }
    /// <p>Whether you want to conceal contact information from WHOIS queries. If you specify <code>true</code>, WHOIS ("who is") queries return contact information either for Amazon Registrar or for our registrar associate, Gandi. If you specify <code>false</code>, WHOIS queries return the information that you entered for the technical contact.</p><note>
    /// <p>You must specify the same privacy setting for the administrative, billing, registrant, and technical contacts.</p>
    /// </note>
    pub fn set_tech_privacy(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_tech_privacy(input);
        self
    }
    /// <p>Whether you want to conceal contact information from WHOIS queries. If you specify <code>true</code>, WHOIS ("who is") queries return contact information either for Amazon Registrar or for our registrar associate, Gandi. If you specify <code>false</code>, WHOIS queries return the information that you entered for the technical contact.</p><note>
    /// <p>You must specify the same privacy setting for the administrative, billing, registrant, and technical contacts.</p>
    /// </note>
    pub fn get_tech_privacy(&self) -> &::std::option::Option<bool> {
        self.inner.get_tech_privacy()
    }
    /// <p>Whether you want to conceal contact information from WHOIS queries. If you specify <code>true</code>, WHOIS ("who is") queries return contact information either for Amazon Registrar or for our registrar associate, Gandi. If you specify <code>false</code>, WHOIS queries return the information that you entered for the billing contact.</p><note>
    /// <p>You must specify the same privacy setting for the administrative, billing, registrant, and technical contacts.</p>
    /// </note>
    pub fn billing_privacy(mut self, input: bool) -> Self {
        self.inner = self.inner.billing_privacy(input);
        self
    }
    /// <p>Whether you want to conceal contact information from WHOIS queries. If you specify <code>true</code>, WHOIS ("who is") queries return contact information either for Amazon Registrar or for our registrar associate, Gandi. If you specify <code>false</code>, WHOIS queries return the information that you entered for the billing contact.</p><note>
    /// <p>You must specify the same privacy setting for the administrative, billing, registrant, and technical contacts.</p>
    /// </note>
    pub fn set_billing_privacy(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_billing_privacy(input);
        self
    }
    /// <p>Whether you want to conceal contact information from WHOIS queries. If you specify <code>true</code>, WHOIS ("who is") queries return contact information either for Amazon Registrar or for our registrar associate, Gandi. If you specify <code>false</code>, WHOIS queries return the information that you entered for the billing contact.</p><note>
    /// <p>You must specify the same privacy setting for the administrative, billing, registrant, and technical contacts.</p>
    /// </note>
    pub fn get_billing_privacy(&self) -> &::std::option::Option<bool> {
        self.inner.get_billing_privacy()
    }
}
