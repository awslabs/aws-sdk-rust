// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::check_domain_transferability::_check_domain_transferability_output::CheckDomainTransferabilityOutputBuilder;

pub use crate::operation::check_domain_transferability::_check_domain_transferability_input::CheckDomainTransferabilityInputBuilder;

/// Fluent builder constructing a request to `CheckDomainTransferability`.
///
/// <p>Checks whether a domain name can be transferred to Amazon Route 53. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CheckDomainTransferabilityFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::check_domain_transferability::builders::CheckDomainTransferabilityInputBuilder
            }
impl CheckDomainTransferabilityFluentBuilder {
    /// Creates a new `CheckDomainTransferability`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::check_domain_transferability::CheckDomainTransferability,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::check_domain_transferability::CheckDomainTransferabilityError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::check_domain_transferability::CheckDomainTransferabilityOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::check_domain_transferability::CheckDomainTransferabilityError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the domain that you want to transfer to Route 53. The top-level domain (TLD), such as .com, must be a TLD that Route 53 supports. For a list of supported TLDs, see <a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/registrar-tld-list.html">Domains that You Can Register with Amazon Route 53</a> in the <i>Amazon Route 53 Developer Guide</i>.</p>
    /// <p>The domain name can contain only the following characters:</p>
    /// <ul>
    /// <li> <p>Letters a through z. Domain names are not case sensitive.</p> </li>
    /// <li> <p>Numbers 0 through 9.</p> </li>
    /// <li> <p>Hyphen (-). You can't specify a hyphen at the beginning or end of a label. </p> </li>
    /// <li> <p>Period (.) to separate the labels in the name, such as the <code>.</code> in <code>example.com</code>.</p> </li>
    /// </ul>
    pub fn domain_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.domain_name(input.into());
        self
    }
    /// <p>The name of the domain that you want to transfer to Route 53. The top-level domain (TLD), such as .com, must be a TLD that Route 53 supports. For a list of supported TLDs, see <a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/registrar-tld-list.html">Domains that You Can Register with Amazon Route 53</a> in the <i>Amazon Route 53 Developer Guide</i>.</p>
    /// <p>The domain name can contain only the following characters:</p>
    /// <ul>
    /// <li> <p>Letters a through z. Domain names are not case sensitive.</p> </li>
    /// <li> <p>Numbers 0 through 9.</p> </li>
    /// <li> <p>Hyphen (-). You can't specify a hyphen at the beginning or end of a label. </p> </li>
    /// <li> <p>Period (.) to separate the labels in the name, such as the <code>.</code> in <code>example.com</code>.</p> </li>
    /// </ul>
    pub fn set_domain_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_domain_name(input);
        self
    }
    /// <p>If the registrar for the top-level domain (TLD) requires an authorization code to transfer the domain, the code that you got from the current registrar for the domain.</p>
    pub fn auth_code(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.auth_code(input.into());
        self
    }
    /// <p>If the registrar for the top-level domain (TLD) requires an authorization code to transfer the domain, the code that you got from the current registrar for the domain.</p>
    pub fn set_auth_code(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_auth_code(input);
        self
    }
}
