// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::transfer_domain::_transfer_domain_output::TransferDomainOutputBuilder;

pub use crate::operation::transfer_domain::_transfer_domain_input::TransferDomainInputBuilder;

/// Fluent builder constructing a request to `TransferDomain`.
///
/// <p>Transfers a domain from another registrar to Amazon Route 53. When the transfer is complete, the domain is registered either with Amazon Registrar (for .com, .net, and .org domains) or with our registrar associate, Gandi (for all other TLDs).</p>
/// <p>For more information about transferring domains, see the following topics:</p>
/// <ul>
/// <li> <p>For transfer requirements, a detailed procedure, and information about viewing the status of a domain that you're transferring to Route 53, see <a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/domain-transfer-to-route-53.html">Transferring Registration for a Domain to Amazon Route 53</a> in the <i>Amazon Route 53 Developer Guide</i>.</p> </li>
/// <li> <p>For information about how to transfer a domain from one Amazon Web Services account to another, see <a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_TransferDomainToAnotherAwsAccount.html">TransferDomainToAnotherAwsAccount</a>. </p> </li>
/// <li> <p>For information about how to transfer a domain to another domain registrar, see <a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/domain-transfer-from-route-53.html">Transferring a Domain from Amazon Route 53 to Another Registrar</a> in the <i>Amazon Route 53 Developer Guide</i>.</p> </li>
/// </ul>
/// <p>If the registrar for your domain is also the DNS service provider for the domain, we highly recommend that you transfer your DNS service to Route 53 or to another DNS service provider before you transfer your registration. Some registrars provide free DNS service when you purchase a domain registration. When you transfer the registration, the previous registrar will not renew your domain registration and could end your DNS service at any time.</p> <important>
/// <p>If the registrar for your domain is also the DNS service provider for the domain and you don't transfer DNS service to another provider, your website, email, and the web applications associated with the domain might become unavailable.</p>
/// </important>
/// <p>If the transfer is successful, this method returns an operation ID that you can use to track the progress and completion of the action. If the transfer doesn't complete successfully, the domain registrant will be notified by email.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct TransferDomainFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::transfer_domain::builders::TransferDomainInputBuilder,
}
impl TransferDomainFluentBuilder {
    /// Creates a new `TransferDomain`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::transfer_domain::TransferDomain,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::operation::transfer_domain::TransferDomainError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::transfer_domain::TransferDomainOutput,
        aws_smithy_http::result::SdkError<crate::operation::transfer_domain::TransferDomainError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the domain that you want to transfer to Route 53. The top-level domain (TLD), such as .com, must be a TLD that Route 53 supports. For a list of supported TLDs, see <a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/registrar-tld-list.html">Domains that You Can Register with Amazon Route 53</a> in the <i>Amazon Route 53 Developer Guide</i>.</p>
    /// <p>The domain name can contain only the following characters:</p>
    /// <ul>
    /// <li> <p>Letters a through z. Domain names are not case sensitive.</p> </li>
    /// <li> <p>Numbers 0 through 9.</p> </li>
    /// <li> <p>Hyphen (-). You can't specify a hyphen at the beginning or end of a label. </p> </li>
    /// <li> <p>Period (.) to separate the labels in the name, such as the <code>.</code> in <code>example.com</code>.</p> </li>
    /// </ul>
    pub fn domain_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.domain_name(input.into());
        self
    }
    /// <p>The name of the domain that you want to transfer to Route 53. The top-level domain (TLD), such as .com, must be a TLD that Route 53 supports. For a list of supported TLDs, see <a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/registrar-tld-list.html">Domains that You Can Register with Amazon Route 53</a> in the <i>Amazon Route 53 Developer Guide</i>.</p>
    /// <p>The domain name can contain only the following characters:</p>
    /// <ul>
    /// <li> <p>Letters a through z. Domain names are not case sensitive.</p> </li>
    /// <li> <p>Numbers 0 through 9.</p> </li>
    /// <li> <p>Hyphen (-). You can't specify a hyphen at the beginning or end of a label. </p> </li>
    /// <li> <p>Period (.) to separate the labels in the name, such as the <code>.</code> in <code>example.com</code>.</p> </li>
    /// </ul>
    pub fn set_domain_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_domain_name(input);
        self
    }
    /// <p>Reserved for future use.</p>
    pub fn idn_lang_code(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.idn_lang_code(input.into());
        self
    }
    /// <p>Reserved for future use.</p>
    pub fn set_idn_lang_code(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_idn_lang_code(input);
        self
    }
    /// <p>The number of years that you want to register the domain for. Domains are registered for a minimum of one year. The maximum period depends on the top-level domain.</p>
    /// <p>Default: 1</p>
    pub fn duration_in_years(mut self, input: i32) -> Self {
        self.inner = self.inner.duration_in_years(input);
        self
    }
    /// <p>The number of years that you want to register the domain for. Domains are registered for a minimum of one year. The maximum period depends on the top-level domain.</p>
    /// <p>Default: 1</p>
    pub fn set_duration_in_years(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_duration_in_years(input);
        self
    }
    /// Appends an item to `Nameservers`.
    ///
    /// To override the contents of this collection use [`set_nameservers`](Self::set_nameservers).
    ///
    /// <p>Contains details for the host and glue IP addresses.</p>
    pub fn nameservers(mut self, input: crate::types::Nameserver) -> Self {
        self.inner = self.inner.nameservers(input);
        self
    }
    /// <p>Contains details for the host and glue IP addresses.</p>
    pub fn set_nameservers(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Nameserver>>,
    ) -> Self {
        self.inner = self.inner.set_nameservers(input);
        self
    }
    /// <p>The authorization code for the domain. You get this value from the current registrar.</p>
    pub fn auth_code(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.auth_code(input.into());
        self
    }
    /// <p>The authorization code for the domain. You get this value from the current registrar.</p>
    pub fn set_auth_code(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_auth_code(input);
        self
    }
    /// <p>Indicates whether the domain will be automatically renewed (true) or not (false). Auto renewal only takes effect after the account is charged.</p>
    /// <p>Default: true</p>
    pub fn auto_renew(mut self, input: bool) -> Self {
        self.inner = self.inner.auto_renew(input);
        self
    }
    /// <p>Indicates whether the domain will be automatically renewed (true) or not (false). Auto renewal only takes effect after the account is charged.</p>
    /// <p>Default: true</p>
    pub fn set_auto_renew(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_auto_renew(input);
        self
    }
    /// <p>Provides detailed contact information.</p>
    pub fn admin_contact(mut self, input: crate::types::ContactDetail) -> Self {
        self.inner = self.inner.admin_contact(input);
        self
    }
    /// <p>Provides detailed contact information.</p>
    pub fn set_admin_contact(
        mut self,
        input: std::option::Option<crate::types::ContactDetail>,
    ) -> Self {
        self.inner = self.inner.set_admin_contact(input);
        self
    }
    /// <p>Provides detailed contact information.</p>
    pub fn registrant_contact(mut self, input: crate::types::ContactDetail) -> Self {
        self.inner = self.inner.registrant_contact(input);
        self
    }
    /// <p>Provides detailed contact information.</p>
    pub fn set_registrant_contact(
        mut self,
        input: std::option::Option<crate::types::ContactDetail>,
    ) -> Self {
        self.inner = self.inner.set_registrant_contact(input);
        self
    }
    /// <p>Provides detailed contact information.</p>
    pub fn tech_contact(mut self, input: crate::types::ContactDetail) -> Self {
        self.inner = self.inner.tech_contact(input);
        self
    }
    /// <p>Provides detailed contact information.</p>
    pub fn set_tech_contact(
        mut self,
        input: std::option::Option<crate::types::ContactDetail>,
    ) -> Self {
        self.inner = self.inner.set_tech_contact(input);
        self
    }
    /// <p>Whether you want to conceal contact information from WHOIS queries. If you specify <code>true</code>, WHOIS ("who is") queries return contact information either for Amazon Registrar (for .com, .net, and .org domains) or for our registrar associate, Gandi (for all other TLDs). If you specify <code>false</code>, WHOIS queries return the information that you entered for the admin contact.</p> <note>
    /// <p>You must specify the same privacy setting for the administrative, registrant, and technical contacts.</p>
    /// </note>
    /// <p>Default: <code>true</code> </p>
    pub fn privacy_protect_admin_contact(mut self, input: bool) -> Self {
        self.inner = self.inner.privacy_protect_admin_contact(input);
        self
    }
    /// <p>Whether you want to conceal contact information from WHOIS queries. If you specify <code>true</code>, WHOIS ("who is") queries return contact information either for Amazon Registrar (for .com, .net, and .org domains) or for our registrar associate, Gandi (for all other TLDs). If you specify <code>false</code>, WHOIS queries return the information that you entered for the admin contact.</p> <note>
    /// <p>You must specify the same privacy setting for the administrative, registrant, and technical contacts.</p>
    /// </note>
    /// <p>Default: <code>true</code> </p>
    pub fn set_privacy_protect_admin_contact(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_privacy_protect_admin_contact(input);
        self
    }
    /// <p>Whether you want to conceal contact information from WHOIS queries. If you specify <code>true</code>, WHOIS ("who is") queries return contact information either for Amazon Registrar (for .com, .net, and .org domains) or for our registrar associate, Gandi (for all other TLDs). If you specify <code>false</code>, WHOIS queries return the information that you entered for the registrant contact (domain owner).</p> <note>
    /// <p>You must specify the same privacy setting for the administrative, registrant, and technical contacts.</p>
    /// </note>
    /// <p>Default: <code>true</code> </p>
    pub fn privacy_protect_registrant_contact(mut self, input: bool) -> Self {
        self.inner = self.inner.privacy_protect_registrant_contact(input);
        self
    }
    /// <p>Whether you want to conceal contact information from WHOIS queries. If you specify <code>true</code>, WHOIS ("who is") queries return contact information either for Amazon Registrar (for .com, .net, and .org domains) or for our registrar associate, Gandi (for all other TLDs). If you specify <code>false</code>, WHOIS queries return the information that you entered for the registrant contact (domain owner).</p> <note>
    /// <p>You must specify the same privacy setting for the administrative, registrant, and technical contacts.</p>
    /// </note>
    /// <p>Default: <code>true</code> </p>
    pub fn set_privacy_protect_registrant_contact(
        mut self,
        input: std::option::Option<bool>,
    ) -> Self {
        self.inner = self.inner.set_privacy_protect_registrant_contact(input);
        self
    }
    /// <p>Whether you want to conceal contact information from WHOIS queries. If you specify <code>true</code>, WHOIS ("who is") queries return contact information either for Amazon Registrar (for .com, .net, and .org domains) or for our registrar associate, Gandi (for all other TLDs). If you specify <code>false</code>, WHOIS queries return the information that you entered for the technical contact.</p> <note>
    /// <p>You must specify the same privacy setting for the administrative, registrant, and technical contacts.</p>
    /// </note>
    /// <p>Default: <code>true</code> </p>
    pub fn privacy_protect_tech_contact(mut self, input: bool) -> Self {
        self.inner = self.inner.privacy_protect_tech_contact(input);
        self
    }
    /// <p>Whether you want to conceal contact information from WHOIS queries. If you specify <code>true</code>, WHOIS ("who is") queries return contact information either for Amazon Registrar (for .com, .net, and .org domains) or for our registrar associate, Gandi (for all other TLDs). If you specify <code>false</code>, WHOIS queries return the information that you entered for the technical contact.</p> <note>
    /// <p>You must specify the same privacy setting for the administrative, registrant, and technical contacts.</p>
    /// </note>
    /// <p>Default: <code>true</code> </p>
    pub fn set_privacy_protect_tech_contact(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_privacy_protect_tech_contact(input);
        self
    }
}
