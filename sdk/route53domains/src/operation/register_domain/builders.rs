// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::register_domain::_register_domain_output::RegisterDomainOutputBuilder;

pub use crate::operation::register_domain::_register_domain_input::RegisterDomainInputBuilder;

impl RegisterDomainInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::register_domain::RegisterDomainOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::register_domain::RegisterDomainError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.register_domain();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `RegisterDomain`.
///
/// <p>This operation registers a domain. For some top-level domains (TLDs), this operation requires extra parameters.</p>
/// <p>When you register a domain, Amazon Route 53 does the following:</p>
/// <ul>
/// <li> <p>Creates a Route 53 hosted zone that has the same name as the domain. Route 53 assigns four name servers to your hosted zone and automatically updates your domain registration with the names of these name servers.</p> </li>
/// <li> <p>Enables auto renew, so your domain registration will renew automatically each year. We'll notify you in advance of the renewal date so you can choose whether to renew the registration.</p> </li>
/// <li> <p>Optionally enables privacy protection, so WHOIS queries return contact for the registrar or the phrase "REDACTED FOR PRIVACY", or "On behalf of <domain name>
/// owner." If you don't enable privacy protection, WHOIS queries return the information that you entered for the administrative, registrant, and technical contacts.
/// </domain></p> <note>
/// <p>While some domains may allow different privacy settings per contact, we recommend specifying the same privacy setting for all contacts.</p>
/// </note> </li>
/// <li> <p>If registration is successful, returns an operation ID that you can use to track the progress and completion of the action. If the request is not completed successfully, the domain registrant is notified by email.</p> </li>
/// <li> <p>Charges your Amazon Web Services account an amount based on the top-level domain. For more information, see <a href="http://aws.amazon.com/route53/pricing/">Amazon Route 53 Pricing</a>.</p> </li>
/// </ul>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct RegisterDomainFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::register_domain::builders::RegisterDomainInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::register_domain::RegisterDomainOutput,
        crate::operation::register_domain::RegisterDomainError,
    > for RegisterDomainFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::register_domain::RegisterDomainOutput,
            crate::operation::register_domain::RegisterDomainError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl RegisterDomainFluentBuilder {
    /// Creates a new `RegisterDomain`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the RegisterDomain as a reference.
    pub fn as_input(&self) -> &crate::operation::register_domain::builders::RegisterDomainInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::register_domain::RegisterDomainOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::register_domain::RegisterDomainError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::register_domain::RegisterDomain::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::register_domain::RegisterDomain::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::register_domain::RegisterDomainOutput,
        crate::operation::register_domain::RegisterDomainError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The domain name that you want to register. The top-level domain (TLD), such as .com, must be a TLD that Route 53 supports. For a list of supported TLDs, see <a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/registrar-tld-list.html">Domains that You Can Register with Amazon Route 53</a> in the <i>Amazon Route 53 Developer Guide</i>.</p>
    /// <p>The domain name can contain only the following characters:</p>
    /// <ul>
    /// <li> <p>Letters a through z. Domain names are not case sensitive.</p> </li>
    /// <li> <p>Numbers 0 through 9.</p> </li>
    /// <li> <p>Hyphen (-). You can't specify a hyphen at the beginning or end of a label. </p> </li>
    /// <li> <p>Period (.) to separate the labels in the name, such as the <code>.</code> in <code>example.com</code>.</p> </li>
    /// </ul>
    /// <p>Internationalized domain names are not supported for some top-level domains. To determine whether the TLD that you want to use supports internationalized domain names, see <a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/registrar-tld-list.html">Domains that You Can Register with Amazon Route 53</a>. For more information, see <a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/DomainNameFormat.html#domain-name-format-idns">Formatting Internationalized Domain Names</a>. </p>
    pub fn domain_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.domain_name(input.into());
        self
    }
    /// <p>The domain name that you want to register. The top-level domain (TLD), such as .com, must be a TLD that Route 53 supports. For a list of supported TLDs, see <a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/registrar-tld-list.html">Domains that You Can Register with Amazon Route 53</a> in the <i>Amazon Route 53 Developer Guide</i>.</p>
    /// <p>The domain name can contain only the following characters:</p>
    /// <ul>
    /// <li> <p>Letters a through z. Domain names are not case sensitive.</p> </li>
    /// <li> <p>Numbers 0 through 9.</p> </li>
    /// <li> <p>Hyphen (-). You can't specify a hyphen at the beginning or end of a label. </p> </li>
    /// <li> <p>Period (.) to separate the labels in the name, such as the <code>.</code> in <code>example.com</code>.</p> </li>
    /// </ul>
    /// <p>Internationalized domain names are not supported for some top-level domains. To determine whether the TLD that you want to use supports internationalized domain names, see <a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/registrar-tld-list.html">Domains that You Can Register with Amazon Route 53</a>. For more information, see <a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/DomainNameFormat.html#domain-name-format-idns">Formatting Internationalized Domain Names</a>. </p>
    pub fn set_domain_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_domain_name(input);
        self
    }
    /// <p>The domain name that you want to register. The top-level domain (TLD), such as .com, must be a TLD that Route 53 supports. For a list of supported TLDs, see <a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/registrar-tld-list.html">Domains that You Can Register with Amazon Route 53</a> in the <i>Amazon Route 53 Developer Guide</i>.</p>
    /// <p>The domain name can contain only the following characters:</p>
    /// <ul>
    /// <li> <p>Letters a through z. Domain names are not case sensitive.</p> </li>
    /// <li> <p>Numbers 0 through 9.</p> </li>
    /// <li> <p>Hyphen (-). You can't specify a hyphen at the beginning or end of a label. </p> </li>
    /// <li> <p>Period (.) to separate the labels in the name, such as the <code>.</code> in <code>example.com</code>.</p> </li>
    /// </ul>
    /// <p>Internationalized domain names are not supported for some top-level domains. To determine whether the TLD that you want to use supports internationalized domain names, see <a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/registrar-tld-list.html">Domains that You Can Register with Amazon Route 53</a>. For more information, see <a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/DomainNameFormat.html#domain-name-format-idns">Formatting Internationalized Domain Names</a>. </p>
    pub fn get_domain_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_domain_name()
    }
    /// <p>Reserved for future use.</p>
    pub fn idn_lang_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.idn_lang_code(input.into());
        self
    }
    /// <p>Reserved for future use.</p>
    pub fn set_idn_lang_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_idn_lang_code(input);
        self
    }
    /// <p>Reserved for future use.</p>
    pub fn get_idn_lang_code(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_idn_lang_code()
    }
    /// <p>The number of years that you want to register the domain for. Domains are registered for a minimum of one year. The maximum period depends on the top-level domain. For the range of valid values for your domain, see <a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/registrar-tld-list.html">Domains that You Can Register with Amazon Route 53</a> in the <i>Amazon Route 53 Developer Guide</i>.</p>
    /// <p>Default: 1</p>
    pub fn duration_in_years(mut self, input: i32) -> Self {
        self.inner = self.inner.duration_in_years(input);
        self
    }
    /// <p>The number of years that you want to register the domain for. Domains are registered for a minimum of one year. The maximum period depends on the top-level domain. For the range of valid values for your domain, see <a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/registrar-tld-list.html">Domains that You Can Register with Amazon Route 53</a> in the <i>Amazon Route 53 Developer Guide</i>.</p>
    /// <p>Default: 1</p>
    pub fn set_duration_in_years(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_duration_in_years(input);
        self
    }
    /// <p>The number of years that you want to register the domain for. Domains are registered for a minimum of one year. The maximum period depends on the top-level domain. For the range of valid values for your domain, see <a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/registrar-tld-list.html">Domains that You Can Register with Amazon Route 53</a> in the <i>Amazon Route 53 Developer Guide</i>.</p>
    /// <p>Default: 1</p>
    pub fn get_duration_in_years(&self) -> &::std::option::Option<i32> {
        self.inner.get_duration_in_years()
    }
    /// <p>Indicates whether the domain will be automatically renewed (<code>true</code>) or not (<code>false</code>). Auto renewal only takes effect after the account is charged.</p>
    /// <p>Default: <code>true</code> </p>
    pub fn auto_renew(mut self, input: bool) -> Self {
        self.inner = self.inner.auto_renew(input);
        self
    }
    /// <p>Indicates whether the domain will be automatically renewed (<code>true</code>) or not (<code>false</code>). Auto renewal only takes effect after the account is charged.</p>
    /// <p>Default: <code>true</code> </p>
    pub fn set_auto_renew(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_auto_renew(input);
        self
    }
    /// <p>Indicates whether the domain will be automatically renewed (<code>true</code>) or not (<code>false</code>). Auto renewal only takes effect after the account is charged.</p>
    /// <p>Default: <code>true</code> </p>
    pub fn get_auto_renew(&self) -> &::std::option::Option<bool> {
        self.inner.get_auto_renew()
    }
    /// <p>Provides detailed contact information. For information about the values that you specify for each element, see <a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_ContactDetail.html">ContactDetail</a>.</p>
    pub fn admin_contact(mut self, input: crate::types::ContactDetail) -> Self {
        self.inner = self.inner.admin_contact(input);
        self
    }
    /// <p>Provides detailed contact information. For information about the values that you specify for each element, see <a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_ContactDetail.html">ContactDetail</a>.</p>
    pub fn set_admin_contact(mut self, input: ::std::option::Option<crate::types::ContactDetail>) -> Self {
        self.inner = self.inner.set_admin_contact(input);
        self
    }
    /// <p>Provides detailed contact information. For information about the values that you specify for each element, see <a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_ContactDetail.html">ContactDetail</a>.</p>
    pub fn get_admin_contact(&self) -> &::std::option::Option<crate::types::ContactDetail> {
        self.inner.get_admin_contact()
    }
    /// <p>Provides detailed contact information. For information about the values that you specify for each element, see <a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_ContactDetail.html">ContactDetail</a>.</p>
    pub fn registrant_contact(mut self, input: crate::types::ContactDetail) -> Self {
        self.inner = self.inner.registrant_contact(input);
        self
    }
    /// <p>Provides detailed contact information. For information about the values that you specify for each element, see <a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_ContactDetail.html">ContactDetail</a>.</p>
    pub fn set_registrant_contact(mut self, input: ::std::option::Option<crate::types::ContactDetail>) -> Self {
        self.inner = self.inner.set_registrant_contact(input);
        self
    }
    /// <p>Provides detailed contact information. For information about the values that you specify for each element, see <a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_ContactDetail.html">ContactDetail</a>.</p>
    pub fn get_registrant_contact(&self) -> &::std::option::Option<crate::types::ContactDetail> {
        self.inner.get_registrant_contact()
    }
    /// <p>Provides detailed contact information. For information about the values that you specify for each element, see <a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_ContactDetail.html">ContactDetail</a>.</p>
    pub fn tech_contact(mut self, input: crate::types::ContactDetail) -> Self {
        self.inner = self.inner.tech_contact(input);
        self
    }
    /// <p>Provides detailed contact information. For information about the values that you specify for each element, see <a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_ContactDetail.html">ContactDetail</a>.</p>
    pub fn set_tech_contact(mut self, input: ::std::option::Option<crate::types::ContactDetail>) -> Self {
        self.inner = self.inner.set_tech_contact(input);
        self
    }
    /// <p>Provides detailed contact information. For information about the values that you specify for each element, see <a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_ContactDetail.html">ContactDetail</a>.</p>
    pub fn get_tech_contact(&self) -> &::std::option::Option<crate::types::ContactDetail> {
        self.inner.get_tech_contact()
    }
    /// <p>Whether you want to conceal contact information from WHOIS queries. If you specify <code>true</code>, WHOIS ("who is") queries return contact information either for Amazon Registrar (for .com, .net, and .org domains) or for our registrar associate, Gandi (for all other TLDs). If you specify <code>false</code>, WHOIS queries return the information that you entered for the admin contact.</p> <note>
    /// <p>You must specify the same privacy setting for the administrative, registrant, and technical contacts.</p>
    /// </note>
    /// <p>Default: <code>true</code> </p>
    pub fn privacy_protect_admin_contact(mut self, input: bool) -> Self {
        self.inner = self.inner.privacy_protect_admin_contact(input);
        self
    }
    /// <p>Whether you want to conceal contact information from WHOIS queries. If you specify <code>true</code>, WHOIS ("who is") queries return contact information either for Amazon Registrar (for .com, .net, and .org domains) or for our registrar associate, Gandi (for all other TLDs). If you specify <code>false</code>, WHOIS queries return the information that you entered for the admin contact.</p> <note>
    /// <p>You must specify the same privacy setting for the administrative, registrant, and technical contacts.</p>
    /// </note>
    /// <p>Default: <code>true</code> </p>
    pub fn set_privacy_protect_admin_contact(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_privacy_protect_admin_contact(input);
        self
    }
    /// <p>Whether you want to conceal contact information from WHOIS queries. If you specify <code>true</code>, WHOIS ("who is") queries return contact information either for Amazon Registrar (for .com, .net, and .org domains) or for our registrar associate, Gandi (for all other TLDs). If you specify <code>false</code>, WHOIS queries return the information that you entered for the admin contact.</p> <note>
    /// <p>You must specify the same privacy setting for the administrative, registrant, and technical contacts.</p>
    /// </note>
    /// <p>Default: <code>true</code> </p>
    pub fn get_privacy_protect_admin_contact(&self) -> &::std::option::Option<bool> {
        self.inner.get_privacy_protect_admin_contact()
    }
    /// <p>Whether you want to conceal contact information from WHOIS queries. If you specify <code>true</code>, WHOIS ("who is") queries return contact information either for Amazon Registrar (for .com, .net, and .org domains) or for our registrar associate, Gandi (for all other TLDs). If you specify <code>false</code>, WHOIS queries return the information that you entered for the registrant contact (the domain owner).</p> <note>
    /// <p>You must specify the same privacy setting for the administrative, registrant, and technical contacts.</p>
    /// </note>
    /// <p>Default: <code>true</code> </p>
    pub fn privacy_protect_registrant_contact(mut self, input: bool) -> Self {
        self.inner = self.inner.privacy_protect_registrant_contact(input);
        self
    }
    /// <p>Whether you want to conceal contact information from WHOIS queries. If you specify <code>true</code>, WHOIS ("who is") queries return contact information either for Amazon Registrar (for .com, .net, and .org domains) or for our registrar associate, Gandi (for all other TLDs). If you specify <code>false</code>, WHOIS queries return the information that you entered for the registrant contact (the domain owner).</p> <note>
    /// <p>You must specify the same privacy setting for the administrative, registrant, and technical contacts.</p>
    /// </note>
    /// <p>Default: <code>true</code> </p>
    pub fn set_privacy_protect_registrant_contact(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_privacy_protect_registrant_contact(input);
        self
    }
    /// <p>Whether you want to conceal contact information from WHOIS queries. If you specify <code>true</code>, WHOIS ("who is") queries return contact information either for Amazon Registrar (for .com, .net, and .org domains) or for our registrar associate, Gandi (for all other TLDs). If you specify <code>false</code>, WHOIS queries return the information that you entered for the registrant contact (the domain owner).</p> <note>
    /// <p>You must specify the same privacy setting for the administrative, registrant, and technical contacts.</p>
    /// </note>
    /// <p>Default: <code>true</code> </p>
    pub fn get_privacy_protect_registrant_contact(&self) -> &::std::option::Option<bool> {
        self.inner.get_privacy_protect_registrant_contact()
    }
    /// <p>Whether you want to conceal contact information from WHOIS queries. If you specify <code>true</code>, WHOIS ("who is") queries return contact information either for Amazon Registrar (for .com, .net, and .org domains) or for our registrar associate, Gandi (for all other TLDs). If you specify <code>false</code>, WHOIS queries return the information that you entered for the technical contact.</p> <note>
    /// <p>You must specify the same privacy setting for the administrative, registrant, and technical contacts.</p>
    /// </note>
    /// <p>Default: <code>true</code> </p>
    pub fn privacy_protect_tech_contact(mut self, input: bool) -> Self {
        self.inner = self.inner.privacy_protect_tech_contact(input);
        self
    }
    /// <p>Whether you want to conceal contact information from WHOIS queries. If you specify <code>true</code>, WHOIS ("who is") queries return contact information either for Amazon Registrar (for .com, .net, and .org domains) or for our registrar associate, Gandi (for all other TLDs). If you specify <code>false</code>, WHOIS queries return the information that you entered for the technical contact.</p> <note>
    /// <p>You must specify the same privacy setting for the administrative, registrant, and technical contacts.</p>
    /// </note>
    /// <p>Default: <code>true</code> </p>
    pub fn set_privacy_protect_tech_contact(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_privacy_protect_tech_contact(input);
        self
    }
    /// <p>Whether you want to conceal contact information from WHOIS queries. If you specify <code>true</code>, WHOIS ("who is") queries return contact information either for Amazon Registrar (for .com, .net, and .org domains) or for our registrar associate, Gandi (for all other TLDs). If you specify <code>false</code>, WHOIS queries return the information that you entered for the technical contact.</p> <note>
    /// <p>You must specify the same privacy setting for the administrative, registrant, and technical contacts.</p>
    /// </note>
    /// <p>Default: <code>true</code> </p>
    pub fn get_privacy_protect_tech_contact(&self) -> &::std::option::Option<bool> {
        self.inner.get_privacy_protect_tech_contact()
    }
}
