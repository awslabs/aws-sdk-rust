// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::list_domains::_list_domains_output::ListDomainsOutputBuilder;

pub use crate::operation::list_domains::_list_domains_input::ListDomainsInputBuilder;

/// Fluent builder constructing a request to `ListDomains`.
///
/// <p>This operation returns all the domain names registered with Amazon Route 53 for the current Amazon Web Services account if no filtering conditions are used.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListDomainsFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::list_domains::builders::ListDomainsInputBuilder,
}
impl ListDomainsFluentBuilder {
    /// Creates a new `ListDomains`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::list_domains::ListDomains,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::operation::list_domains::ListDomainsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::list_domains::ListDomainsOutput,
        aws_smithy_http::result::SdkError<crate::operation::list_domains::ListDomainsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::list_domains::paginator::ListDomainsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::operation::list_domains::paginator::ListDomainsPaginator {
        crate::operation::list_domains::paginator::ListDomainsPaginator::new(
            self.handle,
            self.inner,
        )
    }
    /// Appends an item to `FilterConditions`.
    ///
    /// To override the contents of this collection use [`set_filter_conditions`](Self::set_filter_conditions).
    ///
    /// <p>A complex type that contains information about the filters applied during the <code>ListDomains</code> request. The filter conditions can include domain name and domain expiration.</p>
    pub fn filter_conditions(mut self, input: crate::types::FilterCondition) -> Self {
        self.inner = self.inner.filter_conditions(input);
        self
    }
    /// <p>A complex type that contains information about the filters applied during the <code>ListDomains</code> request. The filter conditions can include domain name and domain expiration.</p>
    pub fn set_filter_conditions(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::FilterCondition>>,
    ) -> Self {
        self.inner = self.inner.set_filter_conditions(input);
        self
    }
    /// <p>A complex type that contains information about the requested ordering of domains in the returned list.</p>
    pub fn sort_condition(mut self, input: crate::types::SortCondition) -> Self {
        self.inner = self.inner.sort_condition(input);
        self
    }
    /// <p>A complex type that contains information about the requested ordering of domains in the returned list.</p>
    pub fn set_sort_condition(
        mut self,
        input: std::option::Option<crate::types::SortCondition>,
    ) -> Self {
        self.inner = self.inner.set_sort_condition(input);
        self
    }
    /// <p>For an initial request for a list of domains, omit this element. If the number of domains that are associated with the current Amazon Web Services account is greater than the value that you specified for <code>MaxItems</code>, you can use <code>Marker</code> to return additional domains. Get the value of <code>NextPageMarker</code> from the previous response, and submit another request that includes the value of <code>NextPageMarker</code> in the <code>Marker</code> element.</p>
    /// <p>Constraints: The marker must match the value specified in the previous request.</p>
    pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.marker(input.into());
        self
    }
    /// <p>For an initial request for a list of domains, omit this element. If the number of domains that are associated with the current Amazon Web Services account is greater than the value that you specified for <code>MaxItems</code>, you can use <code>Marker</code> to return additional domains. Get the value of <code>NextPageMarker</code> from the previous response, and submit another request that includes the value of <code>NextPageMarker</code> in the <code>Marker</code> element.</p>
    /// <p>Constraints: The marker must match the value specified in the previous request.</p>
    pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_marker(input);
        self
    }
    /// <p>Number of domains to be returned.</p>
    /// <p>Default: 20</p>
    pub fn max_items(mut self, input: i32) -> Self {
        self.inner = self.inner.max_items(input);
        self
    }
    /// <p>Number of domains to be returned.</p>
    /// <p>Default: 20</p>
    pub fn set_max_items(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_items(input);
        self
    }
}
