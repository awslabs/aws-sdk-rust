// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetContactReachabilityStatusOutput {
    /// <p>The domain name for which you requested the reachability status.</p>
    #[doc(hidden)]
    pub domain_name: std::option::Option<std::string::String>,
    /// <p>Whether the registrant contact has responded. Values include the following:</p>
    /// <dl>
    /// <dt>
    /// PENDING
    /// </dt>
    /// <dd>
    /// <p>We sent the confirmation email and haven't received a response yet.</p>
    /// </dd>
    /// <dt>
    /// DONE
    /// </dt>
    /// <dd>
    /// <p>We sent the email and got confirmation from the registrant contact.</p>
    /// </dd>
    /// <dt>
    /// EXPIRED
    /// </dt>
    /// <dd>
    /// <p>The time limit expired before the registrant contact responded.</p>
    /// </dd>
    /// </dl>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::ReachabilityStatus>,
    _request_id: Option<String>,
}
impl GetContactReachabilityStatusOutput {
    /// <p>The domain name for which you requested the reachability status.</p>
    pub fn domain_name(&self) -> std::option::Option<&str> {
        self.domain_name.as_deref()
    }
    /// <p>Whether the registrant contact has responded. Values include the following:</p>
    /// <dl>
    /// <dt>
    /// PENDING
    /// </dt>
    /// <dd>
    /// <p>We sent the confirmation email and haven't received a response yet.</p>
    /// </dd>
    /// <dt>
    /// DONE
    /// </dt>
    /// <dd>
    /// <p>We sent the email and got confirmation from the registrant contact.</p>
    /// </dd>
    /// <dt>
    /// EXPIRED
    /// </dt>
    /// <dd>
    /// <p>The time limit expired before the registrant contact responded.</p>
    /// </dd>
    /// </dl>
    pub fn status(&self) -> std::option::Option<&crate::types::ReachabilityStatus> {
        self.status.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetContactReachabilityStatusOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetContactReachabilityStatusOutput {
    /// Creates a new builder-style object to manufacture [`GetContactReachabilityStatusOutput`](crate::operation::get_contact_reachability_status::GetContactReachabilityStatusOutput).
    pub fn builder() -> crate::operation::get_contact_reachability_status::builders::GetContactReachabilityStatusOutputBuilder{
        crate::operation::get_contact_reachability_status::builders::GetContactReachabilityStatusOutputBuilder::default()
    }
}

/// A builder for [`GetContactReachabilityStatusOutput`](crate::operation::get_contact_reachability_status::GetContactReachabilityStatusOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetContactReachabilityStatusOutputBuilder {
    pub(crate) domain_name: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<crate::types::ReachabilityStatus>,
    _request_id: Option<String>,
}
impl GetContactReachabilityStatusOutputBuilder {
    /// <p>The domain name for which you requested the reachability status.</p>
    pub fn domain_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.domain_name = Some(input.into());
        self
    }
    /// <p>The domain name for which you requested the reachability status.</p>
    pub fn set_domain_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.domain_name = input;
        self
    }
    /// <p>Whether the registrant contact has responded. Values include the following:</p>
    /// <dl>
    /// <dt>
    /// PENDING
    /// </dt>
    /// <dd>
    /// <p>We sent the confirmation email and haven't received a response yet.</p>
    /// </dd>
    /// <dt>
    /// DONE
    /// </dt>
    /// <dd>
    /// <p>We sent the email and got confirmation from the registrant contact.</p>
    /// </dd>
    /// <dt>
    /// EXPIRED
    /// </dt>
    /// <dd>
    /// <p>The time limit expired before the registrant contact responded.</p>
    /// </dd>
    /// </dl>
    pub fn status(mut self, input: crate::types::ReachabilityStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>Whether the registrant contact has responded. Values include the following:</p>
    /// <dl>
    /// <dt>
    /// PENDING
    /// </dt>
    /// <dd>
    /// <p>We sent the confirmation email and haven't received a response yet.</p>
    /// </dd>
    /// <dt>
    /// DONE
    /// </dt>
    /// <dd>
    /// <p>We sent the email and got confirmation from the registrant contact.</p>
    /// </dd>
    /// <dt>
    /// EXPIRED
    /// </dt>
    /// <dd>
    /// <p>The time limit expired before the registrant contact responded.</p>
    /// </dd>
    /// </dl>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::ReachabilityStatus>,
    ) -> Self {
        self.status = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetContactReachabilityStatusOutput`](crate::operation::get_contact_reachability_status::GetContactReachabilityStatusOutput).
    pub fn build(
        self,
    ) -> crate::operation::get_contact_reachability_status::GetContactReachabilityStatusOutput {
        crate::operation::get_contact_reachability_status::GetContactReachabilityStatusOutput {
            domain_name: self.domain_name,
            status: self.status,
            _request_id: self._request_id,
        }
    }
}
