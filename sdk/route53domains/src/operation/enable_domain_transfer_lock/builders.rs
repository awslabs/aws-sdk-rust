// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::enable_domain_transfer_lock::_enable_domain_transfer_lock_output::EnableDomainTransferLockOutputBuilder;

pub use crate::operation::enable_domain_transfer_lock::_enable_domain_transfer_lock_input::EnableDomainTransferLockInputBuilder;

impl EnableDomainTransferLockInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::enable_domain_transfer_lock::EnableDomainTransferLockOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::enable_domain_transfer_lock::EnableDomainTransferLockError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.enable_domain_transfer_lock();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `EnableDomainTransferLock`.
///
/// <p>This operation sets the transfer lock on the domain (specifically the <code>clientTransferProhibited</code> status) to prevent domain transfers. Successful submission returns an operation ID that you can use to track the progress and completion of the action. If the request is not completed successfully, the domain registrant will be notified by email.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct EnableDomainTransferLockFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::enable_domain_transfer_lock::builders::EnableDomainTransferLockInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::enable_domain_transfer_lock::EnableDomainTransferLockOutput,
        crate::operation::enable_domain_transfer_lock::EnableDomainTransferLockError,
    > for EnableDomainTransferLockFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::enable_domain_transfer_lock::EnableDomainTransferLockOutput,
            crate::operation::enable_domain_transfer_lock::EnableDomainTransferLockError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl EnableDomainTransferLockFluentBuilder {
    /// Creates a new `EnableDomainTransferLock`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the EnableDomainTransferLock as a reference.
    pub fn as_input(&self) -> &crate::operation::enable_domain_transfer_lock::builders::EnableDomainTransferLockInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::enable_domain_transfer_lock::EnableDomainTransferLockOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::enable_domain_transfer_lock::EnableDomainTransferLockError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::enable_domain_transfer_lock::EnableDomainTransferLock::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::enable_domain_transfer_lock::EnableDomainTransferLock::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::enable_domain_transfer_lock::EnableDomainTransferLockOutput,
        crate::operation::enable_domain_transfer_lock::EnableDomainTransferLockError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The name of the domain that you want to set the transfer lock for.</p>
    pub fn domain_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.domain_name(input.into());
        self
    }
    /// <p>The name of the domain that you want to set the transfer lock for.</p>
    pub fn set_domain_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_domain_name(input);
        self
    }
    /// <p>The name of the domain that you want to set the transfer lock for.</p>
    pub fn get_domain_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_domain_name()
    }
}
