// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::associate_delegation_signer_to_domain::_associate_delegation_signer_to_domain_output::AssociateDelegationSignerToDomainOutputBuilder;

pub use crate::operation::associate_delegation_signer_to_domain::_associate_delegation_signer_to_domain_input::AssociateDelegationSignerToDomainInputBuilder;

impl AssociateDelegationSignerToDomainInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::associate_delegation_signer_to_domain::AssociateDelegationSignerToDomainOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::associate_delegation_signer_to_domain::AssociateDelegationSignerToDomainError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.associate_delegation_signer_to_domain();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `AssociateDelegationSignerToDomain`.
///
/// <p> Creates a delegation signer (DS) record in the registry zone for this domain name.</p>
/// <p>Note that creating DS record at the registry impacts DNSSEC validation of your DNS records. This action may render your domain name unavailable on the internet if the steps are completed in the wrong order, or with incorrect timing. For more information about DNSSEC signing, see <a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-configuring-dnssec.html">Configuring DNSSEC signing</a> in the <i>Route&nbsp;53 developer guide</i>.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct AssociateDelegationSignerToDomainFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::associate_delegation_signer_to_domain::builders::AssociateDelegationSignerToDomainInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::associate_delegation_signer_to_domain::AssociateDelegationSignerToDomainOutput,
        crate::operation::associate_delegation_signer_to_domain::AssociateDelegationSignerToDomainError,
    > for AssociateDelegationSignerToDomainFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::associate_delegation_signer_to_domain::AssociateDelegationSignerToDomainOutput,
            crate::operation::associate_delegation_signer_to_domain::AssociateDelegationSignerToDomainError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl AssociateDelegationSignerToDomainFluentBuilder {
    /// Creates a new `AssociateDelegationSignerToDomain`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the AssociateDelegationSignerToDomain as a reference.
    pub fn as_input(&self) -> &crate::operation::associate_delegation_signer_to_domain::builders::AssociateDelegationSignerToDomainInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::associate_delegation_signer_to_domain::AssociateDelegationSignerToDomainOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::associate_delegation_signer_to_domain::AssociateDelegationSignerToDomainError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::associate_delegation_signer_to_domain::AssociateDelegationSignerToDomain::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::associate_delegation_signer_to_domain::AssociateDelegationSignerToDomain::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::associate_delegation_signer_to_domain::AssociateDelegationSignerToDomainOutput,
        crate::operation::associate_delegation_signer_to_domain::AssociateDelegationSignerToDomainError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The name of the domain.</p>
    pub fn domain_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.domain_name(input.into());
        self
    }
    /// <p>The name of the domain.</p>
    pub fn set_domain_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_domain_name(input);
        self
    }
    /// <p>The name of the domain.</p>
    pub fn get_domain_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_domain_name()
    }
    /// <p>The information about a key, including the algorithm, public key-value, and flags.</p>
    pub fn signing_attributes(mut self, input: crate::types::DnssecSigningAttributes) -> Self {
        self.inner = self.inner.signing_attributes(input);
        self
    }
    /// <p>The information about a key, including the algorithm, public key-value, and flags.</p>
    pub fn set_signing_attributes(mut self, input: ::std::option::Option<crate::types::DnssecSigningAttributes>) -> Self {
        self.inner = self.inner.set_signing_attributes(input);
        self
    }
    /// <p>The information about a key, including the algorithm, public key-value, and flags.</p>
    pub fn get_signing_attributes(&self) -> &::std::option::Option<crate::types::DnssecSigningAttributes> {
        self.inner.get_signing_attributes()
    }
}
