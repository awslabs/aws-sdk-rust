// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_domain_nameservers::_update_domain_nameservers_output::UpdateDomainNameserversOutputBuilder;

pub use crate::operation::update_domain_nameservers::_update_domain_nameservers_input::UpdateDomainNameserversInputBuilder;

/// Fluent builder constructing a request to `UpdateDomainNameservers`.
///
/// <p>This operation replaces the current set of name servers for the domain with the specified set of name servers. If you use Amazon Route 53 as your DNS service, specify the four name servers in the delegation set for the hosted zone for the domain.</p>
/// <p>If successful, this operation returns an operation ID that you can use to track the progress and completion of the action. If the request is not completed successfully, the domain registrant will be notified by email.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateDomainNameserversFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner:
        crate::operation::update_domain_nameservers::builders::UpdateDomainNameserversInputBuilder,
}
impl UpdateDomainNameserversFluentBuilder {
    /// Creates a new `UpdateDomainNameservers`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::update_domain_nameservers::UpdateDomainNameservers,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::update_domain_nameservers::UpdateDomainNameserversError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::update_domain_nameservers::UpdateDomainNameserversOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::update_domain_nameservers::UpdateDomainNameserversError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the domain that you want to change name servers for.</p>
    pub fn domain_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.domain_name(input.into());
        self
    }
    /// <p>The name of the domain that you want to change name servers for.</p>
    pub fn set_domain_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_domain_name(input);
        self
    }
    /// <p>The authorization key for .fi domains</p>
    #[deprecated]
    pub fn fi_auth_key(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.fi_auth_key(input.into());
        self
    }
    /// <p>The authorization key for .fi domains</p>
    #[deprecated]
    pub fn set_fi_auth_key(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_fi_auth_key(input);
        self
    }
    /// Appends an item to `Nameservers`.
    ///
    /// To override the contents of this collection use [`set_nameservers`](Self::set_nameservers).
    ///
    /// <p>A list of new name servers for the domain.</p>
    pub fn nameservers(mut self, input: crate::types::Nameserver) -> Self {
        self.inner = self.inner.nameservers(input);
        self
    }
    /// <p>A list of new name servers for the domain.</p>
    pub fn set_nameservers(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Nameserver>>,
    ) -> Self {
        self.inner = self.inner.set_nameservers(input);
        self
    }
}
