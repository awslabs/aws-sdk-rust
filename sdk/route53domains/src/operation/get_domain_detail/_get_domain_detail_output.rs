// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The GetDomainDetail response includes the following elements.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct GetDomainDetailOutput {
    /// <p>The name of a domain.</p>
    pub domain_name: ::std::option::Option<::std::string::String>,
    /// <p>The name servers of the domain.</p>
    pub nameservers: ::std::option::Option<::std::vec::Vec<crate::types::Nameserver>>,
    /// <p>Specifies whether the domain registration is set to renew automatically.</p>
    pub auto_renew: ::std::option::Option<bool>,
    /// <p>Provides details about the domain administrative contact.</p>
    pub admin_contact: ::std::option::Option<crate::types::ContactDetail>,
    /// <p>Provides details about the domain registrant.</p>
    pub registrant_contact: ::std::option::Option<crate::types::ContactDetail>,
    /// <p>Provides details about the domain technical contact.</p>
    pub tech_contact: ::std::option::Option<crate::types::ContactDetail>,
    /// <p>Specifies whether contact information is concealed from WHOIS queries. If the value is <code>true</code>, WHOIS ("who is") queries return contact information either for Amazon Registrar (for .com, .net, and .org domains) or for our registrar associate, Gandi (for all other TLDs). If the value is <code>false</code>, WHOIS queries return the information that you entered for the admin contact.</p>
    pub admin_privacy: ::std::option::Option<bool>,
    /// <p>Specifies whether contact information is concealed from WHOIS queries. If the value is <code>true</code>, WHOIS ("who is") queries return contact information either for Amazon Registrar (for .com, .net, and .org domains) or for our registrar associate, Gandi (for all other TLDs). If the value is <code>false</code>, WHOIS queries return the information that you entered for the registrant contact (domain owner).</p>
    pub registrant_privacy: ::std::option::Option<bool>,
    /// <p>Specifies whether contact information is concealed from WHOIS queries. If the value is <code>true</code>, WHOIS ("who is") queries return contact information either for Amazon Registrar (for .com, .net, and .org domains) or for our registrar associate, Gandi (for all other TLDs). If the value is <code>false</code>, WHOIS queries return the information that you entered for the technical contact.</p>
    pub tech_privacy: ::std::option::Option<bool>,
    /// <p>Name of the registrar of the domain as identified in the registry. Domains with a .com, .net, or .org TLD are registered by Amazon Registrar. All other domains are registered by our registrar associate, Gandi. The value for domains that are registered by Gandi is <code>"GANDI SAS"</code>. </p>
    pub registrar_name: ::std::option::Option<::std::string::String>,
    /// <p>The fully qualified name of the WHOIS server that can answer the WHOIS query for the domain.</p>
    pub who_is_server: ::std::option::Option<::std::string::String>,
    /// <p>Web address of the registrar.</p>
    pub registrar_url: ::std::option::Option<::std::string::String>,
    /// <p>Email address to contact to report incorrect contact information for a domain, to report that the domain is being used to send spam, to report that someone is cybersquatting on a domain name, or report some other type of abuse.</p>
    pub abuse_contact_email: ::std::option::Option<::std::string::String>,
    /// <p>Phone number for reporting abuse.</p>
    pub abuse_contact_phone: ::std::option::Option<::std::string::String>,
    /// <p>Reserved for future use.</p>
    pub registry_domain_id: ::std::option::Option<::std::string::String>,
    /// <p>The date when the domain was created as found in the response to a WHOIS query. The date and time is in Unix time format and Coordinated Universal time (UTC).</p>
    pub creation_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The last updated date of the domain as found in the response to a WHOIS query. The date and time is in Unix time format and Coordinated Universal time (UTC).</p>
    pub updated_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The date when the registration for the domain is set to expire. The date and time is in Unix time format and Coordinated Universal time (UTC).</p>
    pub expiration_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Reseller of the domain. Domains registered or transferred using Route 53 domains will have <code>"Amazon"</code> as the reseller. </p>
    pub reseller: ::std::option::Option<::std::string::String>,
    /// <p>Deprecated.</p>
    pub dns_sec: ::std::option::Option<::std::string::String>,
    /// <p>An array of domain name status codes, also known as Extensible Provisioning Protocol (EPP) status codes.</p>
    /// <p>ICANN, the organization that maintains a central database of domain names, has developed a set of domain name status codes that tell you the status of a variety of operations on a domain name, for example, registering a domain name, transferring a domain name to another registrar, renewing the registration for a domain name, and so on. All registrars use this same set of status codes.</p>
    /// <p>For a current list of domain name status codes and an explanation of what each code means, go to the <a href="https://www.icann.org/">ICANN website</a> and search for <code>epp status codes</code>. (Search on the ICANN website; web searches sometimes return an old version of the document.)</p>
    pub status_list: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>A complex type that contains information about the DNSSEC configuration.</p>
    pub dnssec_keys: ::std::option::Option<::std::vec::Vec<crate::types::DnssecKey>>,
    _request_id: Option<String>,
}
impl GetDomainDetailOutput {
    /// <p>The name of a domain.</p>
    pub fn domain_name(&self) -> ::std::option::Option<&str> {
        self.domain_name.as_deref()
    }
    /// <p>The name servers of the domain.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.nameservers.is_none()`.
    pub fn nameservers(&self) -> &[crate::types::Nameserver] {
        self.nameservers.as_deref().unwrap_or_default()
    }
    /// <p>Specifies whether the domain registration is set to renew automatically.</p>
    pub fn auto_renew(&self) -> ::std::option::Option<bool> {
        self.auto_renew
    }
    /// <p>Provides details about the domain administrative contact.</p>
    pub fn admin_contact(&self) -> ::std::option::Option<&crate::types::ContactDetail> {
        self.admin_contact.as_ref()
    }
    /// <p>Provides details about the domain registrant.</p>
    pub fn registrant_contact(&self) -> ::std::option::Option<&crate::types::ContactDetail> {
        self.registrant_contact.as_ref()
    }
    /// <p>Provides details about the domain technical contact.</p>
    pub fn tech_contact(&self) -> ::std::option::Option<&crate::types::ContactDetail> {
        self.tech_contact.as_ref()
    }
    /// <p>Specifies whether contact information is concealed from WHOIS queries. If the value is <code>true</code>, WHOIS ("who is") queries return contact information either for Amazon Registrar (for .com, .net, and .org domains) or for our registrar associate, Gandi (for all other TLDs). If the value is <code>false</code>, WHOIS queries return the information that you entered for the admin contact.</p>
    pub fn admin_privacy(&self) -> ::std::option::Option<bool> {
        self.admin_privacy
    }
    /// <p>Specifies whether contact information is concealed from WHOIS queries. If the value is <code>true</code>, WHOIS ("who is") queries return contact information either for Amazon Registrar (for .com, .net, and .org domains) or for our registrar associate, Gandi (for all other TLDs). If the value is <code>false</code>, WHOIS queries return the information that you entered for the registrant contact (domain owner).</p>
    pub fn registrant_privacy(&self) -> ::std::option::Option<bool> {
        self.registrant_privacy
    }
    /// <p>Specifies whether contact information is concealed from WHOIS queries. If the value is <code>true</code>, WHOIS ("who is") queries return contact information either for Amazon Registrar (for .com, .net, and .org domains) or for our registrar associate, Gandi (for all other TLDs). If the value is <code>false</code>, WHOIS queries return the information that you entered for the technical contact.</p>
    pub fn tech_privacy(&self) -> ::std::option::Option<bool> {
        self.tech_privacy
    }
    /// <p>Name of the registrar of the domain as identified in the registry. Domains with a .com, .net, or .org TLD are registered by Amazon Registrar. All other domains are registered by our registrar associate, Gandi. The value for domains that are registered by Gandi is <code>"GANDI SAS"</code>. </p>
    pub fn registrar_name(&self) -> ::std::option::Option<&str> {
        self.registrar_name.as_deref()
    }
    /// <p>The fully qualified name of the WHOIS server that can answer the WHOIS query for the domain.</p>
    pub fn who_is_server(&self) -> ::std::option::Option<&str> {
        self.who_is_server.as_deref()
    }
    /// <p>Web address of the registrar.</p>
    pub fn registrar_url(&self) -> ::std::option::Option<&str> {
        self.registrar_url.as_deref()
    }
    /// <p>Email address to contact to report incorrect contact information for a domain, to report that the domain is being used to send spam, to report that someone is cybersquatting on a domain name, or report some other type of abuse.</p>
    pub fn abuse_contact_email(&self) -> ::std::option::Option<&str> {
        self.abuse_contact_email.as_deref()
    }
    /// <p>Phone number for reporting abuse.</p>
    pub fn abuse_contact_phone(&self) -> ::std::option::Option<&str> {
        self.abuse_contact_phone.as_deref()
    }
    /// <p>Reserved for future use.</p>
    pub fn registry_domain_id(&self) -> ::std::option::Option<&str> {
        self.registry_domain_id.as_deref()
    }
    /// <p>The date when the domain was created as found in the response to a WHOIS query. The date and time is in Unix time format and Coordinated Universal time (UTC).</p>
    pub fn creation_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_date.as_ref()
    }
    /// <p>The last updated date of the domain as found in the response to a WHOIS query. The date and time is in Unix time format and Coordinated Universal time (UTC).</p>
    pub fn updated_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.updated_date.as_ref()
    }
    /// <p>The date when the registration for the domain is set to expire. The date and time is in Unix time format and Coordinated Universal time (UTC).</p>
    pub fn expiration_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.expiration_date.as_ref()
    }
    /// <p>Reseller of the domain. Domains registered or transferred using Route 53 domains will have <code>"Amazon"</code> as the reseller. </p>
    pub fn reseller(&self) -> ::std::option::Option<&str> {
        self.reseller.as_deref()
    }
    /// <p>Deprecated.</p>
    pub fn dns_sec(&self) -> ::std::option::Option<&str> {
        self.dns_sec.as_deref()
    }
    /// <p>An array of domain name status codes, also known as Extensible Provisioning Protocol (EPP) status codes.</p>
    /// <p>ICANN, the organization that maintains a central database of domain names, has developed a set of domain name status codes that tell you the status of a variety of operations on a domain name, for example, registering a domain name, transferring a domain name to another registrar, renewing the registration for a domain name, and so on. All registrars use this same set of status codes.</p>
    /// <p>For a current list of domain name status codes and an explanation of what each code means, go to the <a href="https://www.icann.org/">ICANN website</a> and search for <code>epp status codes</code>. (Search on the ICANN website; web searches sometimes return an old version of the document.)</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.status_list.is_none()`.
    pub fn status_list(&self) -> &[::std::string::String] {
        self.status_list.as_deref().unwrap_or_default()
    }
    /// <p>A complex type that contains information about the DNSSEC configuration.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.dnssec_keys.is_none()`.
    pub fn dnssec_keys(&self) -> &[crate::types::DnssecKey] {
        self.dnssec_keys.as_deref().unwrap_or_default()
    }
}
impl ::std::fmt::Debug for GetDomainDetailOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetDomainDetailOutput");
        formatter.field("domain_name", &self.domain_name);
        formatter.field("nameservers", &self.nameservers);
        formatter.field("auto_renew", &self.auto_renew);
        formatter.field("admin_contact", &"*** Sensitive Data Redacted ***");
        formatter.field("registrant_contact", &"*** Sensitive Data Redacted ***");
        formatter.field("tech_contact", &"*** Sensitive Data Redacted ***");
        formatter.field("admin_privacy", &self.admin_privacy);
        formatter.field("registrant_privacy", &self.registrant_privacy);
        formatter.field("tech_privacy", &self.tech_privacy);
        formatter.field("registrar_name", &self.registrar_name);
        formatter.field("who_is_server", &self.who_is_server);
        formatter.field("registrar_url", &self.registrar_url);
        formatter.field("abuse_contact_email", &"*** Sensitive Data Redacted ***");
        formatter.field("abuse_contact_phone", &"*** Sensitive Data Redacted ***");
        formatter.field("registry_domain_id", &self.registry_domain_id);
        formatter.field("creation_date", &self.creation_date);
        formatter.field("updated_date", &self.updated_date);
        formatter.field("expiration_date", &self.expiration_date);
        formatter.field("reseller", &self.reseller);
        formatter.field("dns_sec", &self.dns_sec);
        formatter.field("status_list", &self.status_list);
        formatter.field("dnssec_keys", &self.dnssec_keys);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl ::aws_http::request_id::RequestId for GetDomainDetailOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetDomainDetailOutput {
    /// Creates a new builder-style object to manufacture [`GetDomainDetailOutput`](crate::operation::get_domain_detail::GetDomainDetailOutput).
    pub fn builder() -> crate::operation::get_domain_detail::builders::GetDomainDetailOutputBuilder {
        crate::operation::get_domain_detail::builders::GetDomainDetailOutputBuilder::default()
    }
}

/// A builder for [`GetDomainDetailOutput`](crate::operation::get_domain_detail::GetDomainDetailOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct GetDomainDetailOutputBuilder {
    pub(crate) domain_name: ::std::option::Option<::std::string::String>,
    pub(crate) nameservers: ::std::option::Option<::std::vec::Vec<crate::types::Nameserver>>,
    pub(crate) auto_renew: ::std::option::Option<bool>,
    pub(crate) admin_contact: ::std::option::Option<crate::types::ContactDetail>,
    pub(crate) registrant_contact: ::std::option::Option<crate::types::ContactDetail>,
    pub(crate) tech_contact: ::std::option::Option<crate::types::ContactDetail>,
    pub(crate) admin_privacy: ::std::option::Option<bool>,
    pub(crate) registrant_privacy: ::std::option::Option<bool>,
    pub(crate) tech_privacy: ::std::option::Option<bool>,
    pub(crate) registrar_name: ::std::option::Option<::std::string::String>,
    pub(crate) who_is_server: ::std::option::Option<::std::string::String>,
    pub(crate) registrar_url: ::std::option::Option<::std::string::String>,
    pub(crate) abuse_contact_email: ::std::option::Option<::std::string::String>,
    pub(crate) abuse_contact_phone: ::std::option::Option<::std::string::String>,
    pub(crate) registry_domain_id: ::std::option::Option<::std::string::String>,
    pub(crate) creation_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) updated_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) expiration_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) reseller: ::std::option::Option<::std::string::String>,
    pub(crate) dns_sec: ::std::option::Option<::std::string::String>,
    pub(crate) status_list: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) dnssec_keys: ::std::option::Option<::std::vec::Vec<crate::types::DnssecKey>>,
    _request_id: Option<String>,
}
impl GetDomainDetailOutputBuilder {
    /// <p>The name of a domain.</p>
    pub fn domain_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of a domain.</p>
    pub fn set_domain_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_name = input;
        self
    }
    /// <p>The name of a domain.</p>
    pub fn get_domain_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_name
    }
    /// Appends an item to `nameservers`.
    ///
    /// To override the contents of this collection use [`set_nameservers`](Self::set_nameservers).
    ///
    /// <p>The name servers of the domain.</p>
    pub fn nameservers(mut self, input: crate::types::Nameserver) -> Self {
        let mut v = self.nameservers.unwrap_or_default();
        v.push(input);
        self.nameservers = ::std::option::Option::Some(v);
        self
    }
    /// <p>The name servers of the domain.</p>
    pub fn set_nameservers(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Nameserver>>) -> Self {
        self.nameservers = input;
        self
    }
    /// <p>The name servers of the domain.</p>
    pub fn get_nameservers(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Nameserver>> {
        &self.nameservers
    }
    /// <p>Specifies whether the domain registration is set to renew automatically.</p>
    pub fn auto_renew(mut self, input: bool) -> Self {
        self.auto_renew = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether the domain registration is set to renew automatically.</p>
    pub fn set_auto_renew(mut self, input: ::std::option::Option<bool>) -> Self {
        self.auto_renew = input;
        self
    }
    /// <p>Specifies whether the domain registration is set to renew automatically.</p>
    pub fn get_auto_renew(&self) -> &::std::option::Option<bool> {
        &self.auto_renew
    }
    /// <p>Provides details about the domain administrative contact.</p>
    pub fn admin_contact(mut self, input: crate::types::ContactDetail) -> Self {
        self.admin_contact = ::std::option::Option::Some(input);
        self
    }
    /// <p>Provides details about the domain administrative contact.</p>
    pub fn set_admin_contact(mut self, input: ::std::option::Option<crate::types::ContactDetail>) -> Self {
        self.admin_contact = input;
        self
    }
    /// <p>Provides details about the domain administrative contact.</p>
    pub fn get_admin_contact(&self) -> &::std::option::Option<crate::types::ContactDetail> {
        &self.admin_contact
    }
    /// <p>Provides details about the domain registrant.</p>
    pub fn registrant_contact(mut self, input: crate::types::ContactDetail) -> Self {
        self.registrant_contact = ::std::option::Option::Some(input);
        self
    }
    /// <p>Provides details about the domain registrant.</p>
    pub fn set_registrant_contact(mut self, input: ::std::option::Option<crate::types::ContactDetail>) -> Self {
        self.registrant_contact = input;
        self
    }
    /// <p>Provides details about the domain registrant.</p>
    pub fn get_registrant_contact(&self) -> &::std::option::Option<crate::types::ContactDetail> {
        &self.registrant_contact
    }
    /// <p>Provides details about the domain technical contact.</p>
    pub fn tech_contact(mut self, input: crate::types::ContactDetail) -> Self {
        self.tech_contact = ::std::option::Option::Some(input);
        self
    }
    /// <p>Provides details about the domain technical contact.</p>
    pub fn set_tech_contact(mut self, input: ::std::option::Option<crate::types::ContactDetail>) -> Self {
        self.tech_contact = input;
        self
    }
    /// <p>Provides details about the domain technical contact.</p>
    pub fn get_tech_contact(&self) -> &::std::option::Option<crate::types::ContactDetail> {
        &self.tech_contact
    }
    /// <p>Specifies whether contact information is concealed from WHOIS queries. If the value is <code>true</code>, WHOIS ("who is") queries return contact information either for Amazon Registrar (for .com, .net, and .org domains) or for our registrar associate, Gandi (for all other TLDs). If the value is <code>false</code>, WHOIS queries return the information that you entered for the admin contact.</p>
    pub fn admin_privacy(mut self, input: bool) -> Self {
        self.admin_privacy = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether contact information is concealed from WHOIS queries. If the value is <code>true</code>, WHOIS ("who is") queries return contact information either for Amazon Registrar (for .com, .net, and .org domains) or for our registrar associate, Gandi (for all other TLDs). If the value is <code>false</code>, WHOIS queries return the information that you entered for the admin contact.</p>
    pub fn set_admin_privacy(mut self, input: ::std::option::Option<bool>) -> Self {
        self.admin_privacy = input;
        self
    }
    /// <p>Specifies whether contact information is concealed from WHOIS queries. If the value is <code>true</code>, WHOIS ("who is") queries return contact information either for Amazon Registrar (for .com, .net, and .org domains) or for our registrar associate, Gandi (for all other TLDs). If the value is <code>false</code>, WHOIS queries return the information that you entered for the admin contact.</p>
    pub fn get_admin_privacy(&self) -> &::std::option::Option<bool> {
        &self.admin_privacy
    }
    /// <p>Specifies whether contact information is concealed from WHOIS queries. If the value is <code>true</code>, WHOIS ("who is") queries return contact information either for Amazon Registrar (for .com, .net, and .org domains) or for our registrar associate, Gandi (for all other TLDs). If the value is <code>false</code>, WHOIS queries return the information that you entered for the registrant contact (domain owner).</p>
    pub fn registrant_privacy(mut self, input: bool) -> Self {
        self.registrant_privacy = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether contact information is concealed from WHOIS queries. If the value is <code>true</code>, WHOIS ("who is") queries return contact information either for Amazon Registrar (for .com, .net, and .org domains) or for our registrar associate, Gandi (for all other TLDs). If the value is <code>false</code>, WHOIS queries return the information that you entered for the registrant contact (domain owner).</p>
    pub fn set_registrant_privacy(mut self, input: ::std::option::Option<bool>) -> Self {
        self.registrant_privacy = input;
        self
    }
    /// <p>Specifies whether contact information is concealed from WHOIS queries. If the value is <code>true</code>, WHOIS ("who is") queries return contact information either for Amazon Registrar (for .com, .net, and .org domains) or for our registrar associate, Gandi (for all other TLDs). If the value is <code>false</code>, WHOIS queries return the information that you entered for the registrant contact (domain owner).</p>
    pub fn get_registrant_privacy(&self) -> &::std::option::Option<bool> {
        &self.registrant_privacy
    }
    /// <p>Specifies whether contact information is concealed from WHOIS queries. If the value is <code>true</code>, WHOIS ("who is") queries return contact information either for Amazon Registrar (for .com, .net, and .org domains) or for our registrar associate, Gandi (for all other TLDs). If the value is <code>false</code>, WHOIS queries return the information that you entered for the technical contact.</p>
    pub fn tech_privacy(mut self, input: bool) -> Self {
        self.tech_privacy = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether contact information is concealed from WHOIS queries. If the value is <code>true</code>, WHOIS ("who is") queries return contact information either for Amazon Registrar (for .com, .net, and .org domains) or for our registrar associate, Gandi (for all other TLDs). If the value is <code>false</code>, WHOIS queries return the information that you entered for the technical contact.</p>
    pub fn set_tech_privacy(mut self, input: ::std::option::Option<bool>) -> Self {
        self.tech_privacy = input;
        self
    }
    /// <p>Specifies whether contact information is concealed from WHOIS queries. If the value is <code>true</code>, WHOIS ("who is") queries return contact information either for Amazon Registrar (for .com, .net, and .org domains) or for our registrar associate, Gandi (for all other TLDs). If the value is <code>false</code>, WHOIS queries return the information that you entered for the technical contact.</p>
    pub fn get_tech_privacy(&self) -> &::std::option::Option<bool> {
        &self.tech_privacy
    }
    /// <p>Name of the registrar of the domain as identified in the registry. Domains with a .com, .net, or .org TLD are registered by Amazon Registrar. All other domains are registered by our registrar associate, Gandi. The value for domains that are registered by Gandi is <code>"GANDI SAS"</code>. </p>
    pub fn registrar_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.registrar_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Name of the registrar of the domain as identified in the registry. Domains with a .com, .net, or .org TLD are registered by Amazon Registrar. All other domains are registered by our registrar associate, Gandi. The value for domains that are registered by Gandi is <code>"GANDI SAS"</code>. </p>
    pub fn set_registrar_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.registrar_name = input;
        self
    }
    /// <p>Name of the registrar of the domain as identified in the registry. Domains with a .com, .net, or .org TLD are registered by Amazon Registrar. All other domains are registered by our registrar associate, Gandi. The value for domains that are registered by Gandi is <code>"GANDI SAS"</code>. </p>
    pub fn get_registrar_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.registrar_name
    }
    /// <p>The fully qualified name of the WHOIS server that can answer the WHOIS query for the domain.</p>
    pub fn who_is_server(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.who_is_server = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The fully qualified name of the WHOIS server that can answer the WHOIS query for the domain.</p>
    pub fn set_who_is_server(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.who_is_server = input;
        self
    }
    /// <p>The fully qualified name of the WHOIS server that can answer the WHOIS query for the domain.</p>
    pub fn get_who_is_server(&self) -> &::std::option::Option<::std::string::String> {
        &self.who_is_server
    }
    /// <p>Web address of the registrar.</p>
    pub fn registrar_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.registrar_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Web address of the registrar.</p>
    pub fn set_registrar_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.registrar_url = input;
        self
    }
    /// <p>Web address of the registrar.</p>
    pub fn get_registrar_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.registrar_url
    }
    /// <p>Email address to contact to report incorrect contact information for a domain, to report that the domain is being used to send spam, to report that someone is cybersquatting on a domain name, or report some other type of abuse.</p>
    pub fn abuse_contact_email(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.abuse_contact_email = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Email address to contact to report incorrect contact information for a domain, to report that the domain is being used to send spam, to report that someone is cybersquatting on a domain name, or report some other type of abuse.</p>
    pub fn set_abuse_contact_email(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.abuse_contact_email = input;
        self
    }
    /// <p>Email address to contact to report incorrect contact information for a domain, to report that the domain is being used to send spam, to report that someone is cybersquatting on a domain name, or report some other type of abuse.</p>
    pub fn get_abuse_contact_email(&self) -> &::std::option::Option<::std::string::String> {
        &self.abuse_contact_email
    }
    /// <p>Phone number for reporting abuse.</p>
    pub fn abuse_contact_phone(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.abuse_contact_phone = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Phone number for reporting abuse.</p>
    pub fn set_abuse_contact_phone(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.abuse_contact_phone = input;
        self
    }
    /// <p>Phone number for reporting abuse.</p>
    pub fn get_abuse_contact_phone(&self) -> &::std::option::Option<::std::string::String> {
        &self.abuse_contact_phone
    }
    /// <p>Reserved for future use.</p>
    pub fn registry_domain_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.registry_domain_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Reserved for future use.</p>
    pub fn set_registry_domain_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.registry_domain_id = input;
        self
    }
    /// <p>Reserved for future use.</p>
    pub fn get_registry_domain_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.registry_domain_id
    }
    /// <p>The date when the domain was created as found in the response to a WHOIS query. The date and time is in Unix time format and Coordinated Universal time (UTC).</p>
    pub fn creation_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date when the domain was created as found in the response to a WHOIS query. The date and time is in Unix time format and Coordinated Universal time (UTC).</p>
    pub fn set_creation_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_date = input;
        self
    }
    /// <p>The date when the domain was created as found in the response to a WHOIS query. The date and time is in Unix time format and Coordinated Universal time (UTC).</p>
    pub fn get_creation_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_date
    }
    /// <p>The last updated date of the domain as found in the response to a WHOIS query. The date and time is in Unix time format and Coordinated Universal time (UTC).</p>
    pub fn updated_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.updated_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The last updated date of the domain as found in the response to a WHOIS query. The date and time is in Unix time format and Coordinated Universal time (UTC).</p>
    pub fn set_updated_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.updated_date = input;
        self
    }
    /// <p>The last updated date of the domain as found in the response to a WHOIS query. The date and time is in Unix time format and Coordinated Universal time (UTC).</p>
    pub fn get_updated_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.updated_date
    }
    /// <p>The date when the registration for the domain is set to expire. The date and time is in Unix time format and Coordinated Universal time (UTC).</p>
    pub fn expiration_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.expiration_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date when the registration for the domain is set to expire. The date and time is in Unix time format and Coordinated Universal time (UTC).</p>
    pub fn set_expiration_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.expiration_date = input;
        self
    }
    /// <p>The date when the registration for the domain is set to expire. The date and time is in Unix time format and Coordinated Universal time (UTC).</p>
    pub fn get_expiration_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.expiration_date
    }
    /// <p>Reseller of the domain. Domains registered or transferred using Route 53 domains will have <code>"Amazon"</code> as the reseller. </p>
    pub fn reseller(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.reseller = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Reseller of the domain. Domains registered or transferred using Route 53 domains will have <code>"Amazon"</code> as the reseller. </p>
    pub fn set_reseller(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.reseller = input;
        self
    }
    /// <p>Reseller of the domain. Domains registered or transferred using Route 53 domains will have <code>"Amazon"</code> as the reseller. </p>
    pub fn get_reseller(&self) -> &::std::option::Option<::std::string::String> {
        &self.reseller
    }
    /// <p>Deprecated.</p>
    pub fn dns_sec(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.dns_sec = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Deprecated.</p>
    pub fn set_dns_sec(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.dns_sec = input;
        self
    }
    /// <p>Deprecated.</p>
    pub fn get_dns_sec(&self) -> &::std::option::Option<::std::string::String> {
        &self.dns_sec
    }
    /// Appends an item to `status_list`.
    ///
    /// To override the contents of this collection use [`set_status_list`](Self::set_status_list).
    ///
    /// <p>An array of domain name status codes, also known as Extensible Provisioning Protocol (EPP) status codes.</p>
    /// <p>ICANN, the organization that maintains a central database of domain names, has developed a set of domain name status codes that tell you the status of a variety of operations on a domain name, for example, registering a domain name, transferring a domain name to another registrar, renewing the registration for a domain name, and so on. All registrars use this same set of status codes.</p>
    /// <p>For a current list of domain name status codes and an explanation of what each code means, go to the <a href="https://www.icann.org/">ICANN website</a> and search for <code>epp status codes</code>. (Search on the ICANN website; web searches sometimes return an old version of the document.)</p>
    pub fn status_list(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.status_list.unwrap_or_default();
        v.push(input.into());
        self.status_list = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of domain name status codes, also known as Extensible Provisioning Protocol (EPP) status codes.</p>
    /// <p>ICANN, the organization that maintains a central database of domain names, has developed a set of domain name status codes that tell you the status of a variety of operations on a domain name, for example, registering a domain name, transferring a domain name to another registrar, renewing the registration for a domain name, and so on. All registrars use this same set of status codes.</p>
    /// <p>For a current list of domain name status codes and an explanation of what each code means, go to the <a href="https://www.icann.org/">ICANN website</a> and search for <code>epp status codes</code>. (Search on the ICANN website; web searches sometimes return an old version of the document.)</p>
    pub fn set_status_list(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.status_list = input;
        self
    }
    /// <p>An array of domain name status codes, also known as Extensible Provisioning Protocol (EPP) status codes.</p>
    /// <p>ICANN, the organization that maintains a central database of domain names, has developed a set of domain name status codes that tell you the status of a variety of operations on a domain name, for example, registering a domain name, transferring a domain name to another registrar, renewing the registration for a domain name, and so on. All registrars use this same set of status codes.</p>
    /// <p>For a current list of domain name status codes and an explanation of what each code means, go to the <a href="https://www.icann.org/">ICANN website</a> and search for <code>epp status codes</code>. (Search on the ICANN website; web searches sometimes return an old version of the document.)</p>
    pub fn get_status_list(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.status_list
    }
    /// Appends an item to `dnssec_keys`.
    ///
    /// To override the contents of this collection use [`set_dnssec_keys`](Self::set_dnssec_keys).
    ///
    /// <p>A complex type that contains information about the DNSSEC configuration.</p>
    pub fn dnssec_keys(mut self, input: crate::types::DnssecKey) -> Self {
        let mut v = self.dnssec_keys.unwrap_or_default();
        v.push(input);
        self.dnssec_keys = ::std::option::Option::Some(v);
        self
    }
    /// <p>A complex type that contains information about the DNSSEC configuration.</p>
    pub fn set_dnssec_keys(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DnssecKey>>) -> Self {
        self.dnssec_keys = input;
        self
    }
    /// <p>A complex type that contains information about the DNSSEC configuration.</p>
    pub fn get_dnssec_keys(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DnssecKey>> {
        &self.dnssec_keys
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetDomainDetailOutput`](crate::operation::get_domain_detail::GetDomainDetailOutput).
    pub fn build(self) -> crate::operation::get_domain_detail::GetDomainDetailOutput {
        crate::operation::get_domain_detail::GetDomainDetailOutput {
            domain_name: self.domain_name,
            nameservers: self.nameservers,
            auto_renew: self.auto_renew,
            admin_contact: self.admin_contact,
            registrant_contact: self.registrant_contact,
            tech_contact: self.tech_contact,
            admin_privacy: self.admin_privacy,
            registrant_privacy: self.registrant_privacy,
            tech_privacy: self.tech_privacy,
            registrar_name: self.registrar_name,
            who_is_server: self.who_is_server,
            registrar_url: self.registrar_url,
            abuse_contact_email: self.abuse_contact_email,
            abuse_contact_phone: self.abuse_contact_phone,
            registry_domain_id: self.registry_domain_id,
            creation_date: self.creation_date,
            updated_date: self.updated_date,
            expiration_date: self.expiration_date,
            reseller: self.reseller,
            dns_sec: self.dns_sec,
            status_list: self.status_list,
            dnssec_keys: self.dnssec_keys,
            _request_id: self._request_id,
        }
    }
}
impl ::std::fmt::Debug for GetDomainDetailOutputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetDomainDetailOutputBuilder");
        formatter.field("domain_name", &self.domain_name);
        formatter.field("nameservers", &self.nameservers);
        formatter.field("auto_renew", &self.auto_renew);
        formatter.field("admin_contact", &"*** Sensitive Data Redacted ***");
        formatter.field("registrant_contact", &"*** Sensitive Data Redacted ***");
        formatter.field("tech_contact", &"*** Sensitive Data Redacted ***");
        formatter.field("admin_privacy", &self.admin_privacy);
        formatter.field("registrant_privacy", &self.registrant_privacy);
        formatter.field("tech_privacy", &self.tech_privacy);
        formatter.field("registrar_name", &self.registrar_name);
        formatter.field("who_is_server", &self.who_is_server);
        formatter.field("registrar_url", &self.registrar_url);
        formatter.field("abuse_contact_email", &"*** Sensitive Data Redacted ***");
        formatter.field("abuse_contact_phone", &"*** Sensitive Data Redacted ***");
        formatter.field("registry_domain_id", &self.registry_domain_id);
        formatter.field("creation_date", &self.creation_date);
        formatter.field("updated_date", &self.updated_date);
        formatter.field("expiration_date", &self.expiration_date);
        formatter.field("reseller", &self.reseller);
        formatter.field("dns_sec", &self.dns_sec);
        formatter.field("status_list", &self.status_list);
        formatter.field("dnssec_keys", &self.dnssec_keys);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
