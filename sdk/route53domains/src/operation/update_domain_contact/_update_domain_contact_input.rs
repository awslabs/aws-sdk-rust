// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The UpdateDomainContact request includes the following elements.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateDomainContactInput {
    /// <p>The name of the domain that you want to update contact information for.</p>
    #[doc(hidden)]
    pub domain_name: std::option::Option<std::string::String>,
    /// <p>Provides detailed contact information.</p>
    #[doc(hidden)]
    pub admin_contact: std::option::Option<crate::types::ContactDetail>,
    /// <p>Provides detailed contact information.</p>
    #[doc(hidden)]
    pub registrant_contact: std::option::Option<crate::types::ContactDetail>,
    /// <p>Provides detailed contact information.</p>
    #[doc(hidden)]
    pub tech_contact: std::option::Option<crate::types::ContactDetail>,
    /// <p> Customer's consent for the owner change request. </p>
    #[doc(hidden)]
    pub consent: std::option::Option<crate::types::Consent>,
}
impl UpdateDomainContactInput {
    /// <p>The name of the domain that you want to update contact information for.</p>
    pub fn domain_name(&self) -> std::option::Option<&str> {
        self.domain_name.as_deref()
    }
    /// <p>Provides detailed contact information.</p>
    pub fn admin_contact(&self) -> std::option::Option<&crate::types::ContactDetail> {
        self.admin_contact.as_ref()
    }
    /// <p>Provides detailed contact information.</p>
    pub fn registrant_contact(&self) -> std::option::Option<&crate::types::ContactDetail> {
        self.registrant_contact.as_ref()
    }
    /// <p>Provides detailed contact information.</p>
    pub fn tech_contact(&self) -> std::option::Option<&crate::types::ContactDetail> {
        self.tech_contact.as_ref()
    }
    /// <p> Customer's consent for the owner change request. </p>
    pub fn consent(&self) -> std::option::Option<&crate::types::Consent> {
        self.consent.as_ref()
    }
}
impl std::fmt::Debug for UpdateDomainContactInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateDomainContactInput");
        formatter.field("domain_name", &self.domain_name);
        formatter.field("admin_contact", &"*** Sensitive Data Redacted ***");
        formatter.field("registrant_contact", &"*** Sensitive Data Redacted ***");
        formatter.field("tech_contact", &"*** Sensitive Data Redacted ***");
        formatter.field("consent", &self.consent);
        formatter.finish()
    }
}
impl UpdateDomainContactInput {
    /// Creates a new builder-style object to manufacture [`UpdateDomainContactInput`](crate::operation::update_domain_contact::UpdateDomainContactInput).
    pub fn builder(
    ) -> crate::operation::update_domain_contact::builders::UpdateDomainContactInputBuilder {
        crate::operation::update_domain_contact::builders::UpdateDomainContactInputBuilder::default(
        )
    }
}

/// A builder for [`UpdateDomainContactInput`](crate::operation::update_domain_contact::UpdateDomainContactInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct UpdateDomainContactInputBuilder {
    pub(crate) domain_name: std::option::Option<std::string::String>,
    pub(crate) admin_contact: std::option::Option<crate::types::ContactDetail>,
    pub(crate) registrant_contact: std::option::Option<crate::types::ContactDetail>,
    pub(crate) tech_contact: std::option::Option<crate::types::ContactDetail>,
    pub(crate) consent: std::option::Option<crate::types::Consent>,
}
impl UpdateDomainContactInputBuilder {
    /// <p>The name of the domain that you want to update contact information for.</p>
    pub fn domain_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.domain_name = Some(input.into());
        self
    }
    /// <p>The name of the domain that you want to update contact information for.</p>
    pub fn set_domain_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.domain_name = input;
        self
    }
    /// <p>Provides detailed contact information.</p>
    pub fn admin_contact(mut self, input: crate::types::ContactDetail) -> Self {
        self.admin_contact = Some(input);
        self
    }
    /// <p>Provides detailed contact information.</p>
    pub fn set_admin_contact(
        mut self,
        input: std::option::Option<crate::types::ContactDetail>,
    ) -> Self {
        self.admin_contact = input;
        self
    }
    /// <p>Provides detailed contact information.</p>
    pub fn registrant_contact(mut self, input: crate::types::ContactDetail) -> Self {
        self.registrant_contact = Some(input);
        self
    }
    /// <p>Provides detailed contact information.</p>
    pub fn set_registrant_contact(
        mut self,
        input: std::option::Option<crate::types::ContactDetail>,
    ) -> Self {
        self.registrant_contact = input;
        self
    }
    /// <p>Provides detailed contact information.</p>
    pub fn tech_contact(mut self, input: crate::types::ContactDetail) -> Self {
        self.tech_contact = Some(input);
        self
    }
    /// <p>Provides detailed contact information.</p>
    pub fn set_tech_contact(
        mut self,
        input: std::option::Option<crate::types::ContactDetail>,
    ) -> Self {
        self.tech_contact = input;
        self
    }
    /// <p> Customer's consent for the owner change request. </p>
    pub fn consent(mut self, input: crate::types::Consent) -> Self {
        self.consent = Some(input);
        self
    }
    /// <p> Customer's consent for the owner change request. </p>
    pub fn set_consent(mut self, input: std::option::Option<crate::types::Consent>) -> Self {
        self.consent = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateDomainContactInput`](crate::operation::update_domain_contact::UpdateDomainContactInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::update_domain_contact::UpdateDomainContactInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::update_domain_contact::UpdateDomainContactInput {
                domain_name: self.domain_name,
                admin_contact: self.admin_contact,
                registrant_contact: self.registrant_contact,
                tech_contact: self.tech_contact,
                consent: self.consent,
            },
        )
    }
}
impl std::fmt::Debug for UpdateDomainContactInputBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateDomainContactInputBuilder");
        formatter.field("domain_name", &self.domain_name);
        formatter.field("admin_contact", &"*** Sensitive Data Redacted ***");
        formatter.field("registrant_contact", &"*** Sensitive Data Redacted ***");
        formatter.field("tech_contact", &"*** Sensitive Data Redacted ***");
        formatter.field("consent", &self.consent);
        formatter.finish()
    }
}
