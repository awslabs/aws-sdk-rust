// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn parse_accept_domain_transfer_from_another_aws_account_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::AcceptDomainTransferFromAnotherAwsAccountOutput,
    crate::error::AcceptDomainTransferFromAnotherAwsAccountError,
> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::AcceptDomainTransferFromAnotherAwsAccountError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(
                crate::error::AcceptDomainTransferFromAnotherAwsAccountError::unhandled(generic),
            )
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "DomainLimitExceeded" => crate::error::AcceptDomainTransferFromAnotherAwsAccountError { meta: generic, kind: crate::error::AcceptDomainTransferFromAnotherAwsAccountErrorKind::DomainLimitExceeded({
            #[allow(unused_mut)]let mut tmp =
                 {
                    #[allow(unused_mut)]let mut output = crate::error::domain_limit_exceeded::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_domain_limit_exceededjson_err(response.body().as_ref(), output).map_err(crate::error::AcceptDomainTransferFromAnotherAwsAccountError::unhandled)?;
                    output.build()
                }
            ;
            if (&tmp.message).is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        })},
        "InvalidInput" => crate::error::AcceptDomainTransferFromAnotherAwsAccountError { meta: generic, kind: crate::error::AcceptDomainTransferFromAnotherAwsAccountErrorKind::InvalidInput({
            #[allow(unused_mut)]let mut tmp =
                 {
                    #[allow(unused_mut)]let mut output = crate::error::invalid_input::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_invalid_inputjson_err(response.body().as_ref(), output).map_err(crate::error::AcceptDomainTransferFromAnotherAwsAccountError::unhandled)?;
                    output.build()
                }
            ;
            if (&tmp.message).is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        })},
        "OperationLimitExceeded" => crate::error::AcceptDomainTransferFromAnotherAwsAccountError { meta: generic, kind: crate::error::AcceptDomainTransferFromAnotherAwsAccountErrorKind::OperationLimitExceeded({
            #[allow(unused_mut)]let mut tmp =
                 {
                    #[allow(unused_mut)]let mut output = crate::error::operation_limit_exceeded::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_operation_limit_exceededjson_err(response.body().as_ref(), output).map_err(crate::error::AcceptDomainTransferFromAnotherAwsAccountError::unhandled)?;
                    output.build()
                }
            ;
            if (&tmp.message).is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        })},
        _ => crate::error::AcceptDomainTransferFromAnotherAwsAccountError::generic(generic)
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_accept_domain_transfer_from_another_aws_account_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::AcceptDomainTransferFromAnotherAwsAccountOutput,
    crate::error::AcceptDomainTransferFromAnotherAwsAccountError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output =
            crate::output::accept_domain_transfer_from_another_aws_account_output::Builder::default(
            );
        let _ = response;
        output =
            crate::json_deser::deser_operation_accept_domain_transfer_from_another_aws_account(
                response.body().as_ref(),
                output,
            )
            .map_err(crate::error::AcceptDomainTransferFromAnotherAwsAccountError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_cancel_domain_transfer_to_another_aws_account_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::CancelDomainTransferToAnotherAwsAccountOutput,
    crate::error::CancelDomainTransferToAnotherAwsAccountError,
> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::CancelDomainTransferToAnotherAwsAccountError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(
                crate::error::CancelDomainTransferToAnotherAwsAccountError::unhandled(generic),
            )
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "InvalidInput" => crate::error::CancelDomainTransferToAnotherAwsAccountError { meta: generic, kind: crate::error::CancelDomainTransferToAnotherAwsAccountErrorKind::InvalidInput({
            #[allow(unused_mut)]let mut tmp =
                 {
                    #[allow(unused_mut)]let mut output = crate::error::invalid_input::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_invalid_inputjson_err(response.body().as_ref(), output).map_err(crate::error::CancelDomainTransferToAnotherAwsAccountError::unhandled)?;
                    output.build()
                }
            ;
            if (&tmp.message).is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        })},
        "OperationLimitExceeded" => crate::error::CancelDomainTransferToAnotherAwsAccountError { meta: generic, kind: crate::error::CancelDomainTransferToAnotherAwsAccountErrorKind::OperationLimitExceeded({
            #[allow(unused_mut)]let mut tmp =
                 {
                    #[allow(unused_mut)]let mut output = crate::error::operation_limit_exceeded::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_operation_limit_exceededjson_err(response.body().as_ref(), output).map_err(crate::error::CancelDomainTransferToAnotherAwsAccountError::unhandled)?;
                    output.build()
                }
            ;
            if (&tmp.message).is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        })},
        _ => crate::error::CancelDomainTransferToAnotherAwsAccountError::generic(generic)
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_cancel_domain_transfer_to_another_aws_account_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::CancelDomainTransferToAnotherAwsAccountOutput,
    crate::error::CancelDomainTransferToAnotherAwsAccountError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output =
            crate::output::cancel_domain_transfer_to_another_aws_account_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_cancel_domain_transfer_to_another_aws_account(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::CancelDomainTransferToAnotherAwsAccountError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_check_domain_availability_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::CheckDomainAvailabilityOutput,
    crate::error::CheckDomainAvailabilityError,
> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::CheckDomainAvailabilityError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::CheckDomainAvailabilityError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "InvalidInput" => crate::error::CheckDomainAvailabilityError {
            meta: generic,
            kind: crate::error::CheckDomainAvailabilityErrorKind::InvalidInput({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::invalid_input::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_invalid_inputjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::CheckDomainAvailabilityError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "UnsupportedTLD" => crate::error::CheckDomainAvailabilityError {
            meta: generic,
            kind: crate::error::CheckDomainAvailabilityErrorKind::UnsupportedTld({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::unsupported_tld::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_unsupported_tldjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::CheckDomainAvailabilityError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::CheckDomainAvailabilityError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_check_domain_availability_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::CheckDomainAvailabilityOutput,
    crate::error::CheckDomainAvailabilityError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::check_domain_availability_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_check_domain_availability(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::CheckDomainAvailabilityError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_check_domain_transferability_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::CheckDomainTransferabilityOutput,
    crate::error::CheckDomainTransferabilityError,
> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::CheckDomainTransferabilityError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::CheckDomainTransferabilityError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "InvalidInput" => crate::error::CheckDomainTransferabilityError {
            meta: generic,
            kind: crate::error::CheckDomainTransferabilityErrorKind::InvalidInput({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::invalid_input::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_invalid_inputjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::CheckDomainTransferabilityError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "UnsupportedTLD" => crate::error::CheckDomainTransferabilityError {
            meta: generic,
            kind: crate::error::CheckDomainTransferabilityErrorKind::UnsupportedTld({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::unsupported_tld::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_unsupported_tldjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::CheckDomainTransferabilityError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::CheckDomainTransferabilityError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_check_domain_transferability_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::CheckDomainTransferabilityOutput,
    crate::error::CheckDomainTransferabilityError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::check_domain_transferability_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_check_domain_transferability(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::CheckDomainTransferabilityError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_delete_tags_for_domain_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DeleteTagsForDomainOutput,
    crate::error::DeleteTagsForDomainError,
> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::DeleteTagsForDomainError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::DeleteTagsForDomainError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "InvalidInput" => crate::error::DeleteTagsForDomainError {
            meta: generic,
            kind: crate::error::DeleteTagsForDomainErrorKind::InvalidInput({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::invalid_input::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_invalid_inputjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::DeleteTagsForDomainError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "OperationLimitExceeded" => crate::error::DeleteTagsForDomainError {
            meta: generic,
            kind: crate::error::DeleteTagsForDomainErrorKind::OperationLimitExceeded({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::operation_limit_exceeded::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_operation_limit_exceededjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::DeleteTagsForDomainError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "UnsupportedTLD" => crate::error::DeleteTagsForDomainError {
            meta: generic,
            kind: crate::error::DeleteTagsForDomainErrorKind::UnsupportedTld({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::unsupported_tld::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_unsupported_tldjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::DeleteTagsForDomainError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::DeleteTagsForDomainError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_delete_tags_for_domain_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DeleteTagsForDomainOutput,
    crate::error::DeleteTagsForDomainError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::delete_tags_for_domain_output::Builder::default();
        let _ = response;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_disable_domain_auto_renew_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DisableDomainAutoRenewOutput,
    crate::error::DisableDomainAutoRenewError,
> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::DisableDomainAutoRenewError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::DisableDomainAutoRenewError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "InvalidInput" => crate::error::DisableDomainAutoRenewError {
            meta: generic,
            kind: crate::error::DisableDomainAutoRenewErrorKind::InvalidInput({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::invalid_input::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_invalid_inputjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::DisableDomainAutoRenewError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "UnsupportedTLD" => crate::error::DisableDomainAutoRenewError {
            meta: generic,
            kind: crate::error::DisableDomainAutoRenewErrorKind::UnsupportedTld({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::unsupported_tld::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_unsupported_tldjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::DisableDomainAutoRenewError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::DisableDomainAutoRenewError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_disable_domain_auto_renew_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DisableDomainAutoRenewOutput,
    crate::error::DisableDomainAutoRenewError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::disable_domain_auto_renew_output::Builder::default();
        let _ = response;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_disable_domain_transfer_lock_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DisableDomainTransferLockOutput,
    crate::error::DisableDomainTransferLockError,
> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::DisableDomainTransferLockError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::DisableDomainTransferLockError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "DuplicateRequest" => crate::error::DisableDomainTransferLockError {
            meta: generic,
            kind: crate::error::DisableDomainTransferLockErrorKind::DuplicateRequest({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::duplicate_request::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_duplicate_requestjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::DisableDomainTransferLockError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "InvalidInput" => crate::error::DisableDomainTransferLockError {
            meta: generic,
            kind: crate::error::DisableDomainTransferLockErrorKind::InvalidInput({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::invalid_input::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_invalid_inputjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::DisableDomainTransferLockError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "OperationLimitExceeded" => crate::error::DisableDomainTransferLockError {
            meta: generic,
            kind: crate::error::DisableDomainTransferLockErrorKind::OperationLimitExceeded({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::operation_limit_exceeded::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_operation_limit_exceededjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::DisableDomainTransferLockError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "TLDRulesViolation" => crate::error::DisableDomainTransferLockError {
            meta: generic,
            kind: crate::error::DisableDomainTransferLockErrorKind::TldRulesViolation({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::tld_rules_violation::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_tld_rules_violationjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::DisableDomainTransferLockError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "UnsupportedTLD" => crate::error::DisableDomainTransferLockError {
            meta: generic,
            kind: crate::error::DisableDomainTransferLockErrorKind::UnsupportedTld({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::unsupported_tld::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_unsupported_tldjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::DisableDomainTransferLockError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::DisableDomainTransferLockError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_disable_domain_transfer_lock_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DisableDomainTransferLockOutput,
    crate::error::DisableDomainTransferLockError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::disable_domain_transfer_lock_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_disable_domain_transfer_lock(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::DisableDomainTransferLockError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_enable_domain_auto_renew_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::EnableDomainAutoRenewOutput,
    crate::error::EnableDomainAutoRenewError,
> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::EnableDomainAutoRenewError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::EnableDomainAutoRenewError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "InvalidInput" => crate::error::EnableDomainAutoRenewError {
            meta: generic,
            kind: crate::error::EnableDomainAutoRenewErrorKind::InvalidInput({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::invalid_input::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_invalid_inputjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::EnableDomainAutoRenewError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "TLDRulesViolation" => crate::error::EnableDomainAutoRenewError {
            meta: generic,
            kind: crate::error::EnableDomainAutoRenewErrorKind::TldRulesViolation({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::tld_rules_violation::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_tld_rules_violationjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::EnableDomainAutoRenewError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "UnsupportedTLD" => crate::error::EnableDomainAutoRenewError {
            meta: generic,
            kind: crate::error::EnableDomainAutoRenewErrorKind::UnsupportedTld({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::unsupported_tld::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_unsupported_tldjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::EnableDomainAutoRenewError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::EnableDomainAutoRenewError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_enable_domain_auto_renew_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::EnableDomainAutoRenewOutput,
    crate::error::EnableDomainAutoRenewError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::enable_domain_auto_renew_output::Builder::default();
        let _ = response;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_enable_domain_transfer_lock_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::EnableDomainTransferLockOutput,
    crate::error::EnableDomainTransferLockError,
> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::EnableDomainTransferLockError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::EnableDomainTransferLockError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "DuplicateRequest" => crate::error::EnableDomainTransferLockError {
            meta: generic,
            kind: crate::error::EnableDomainTransferLockErrorKind::DuplicateRequest({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::duplicate_request::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_duplicate_requestjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::EnableDomainTransferLockError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "InvalidInput" => crate::error::EnableDomainTransferLockError {
            meta: generic,
            kind: crate::error::EnableDomainTransferLockErrorKind::InvalidInput({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::invalid_input::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_invalid_inputjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::EnableDomainTransferLockError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "OperationLimitExceeded" => crate::error::EnableDomainTransferLockError {
            meta: generic,
            kind: crate::error::EnableDomainTransferLockErrorKind::OperationLimitExceeded({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::operation_limit_exceeded::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_operation_limit_exceededjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::EnableDomainTransferLockError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "TLDRulesViolation" => crate::error::EnableDomainTransferLockError {
            meta: generic,
            kind: crate::error::EnableDomainTransferLockErrorKind::TldRulesViolation({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::tld_rules_violation::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_tld_rules_violationjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::EnableDomainTransferLockError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "UnsupportedTLD" => crate::error::EnableDomainTransferLockError {
            meta: generic,
            kind: crate::error::EnableDomainTransferLockErrorKind::UnsupportedTld({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::unsupported_tld::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_unsupported_tldjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::EnableDomainTransferLockError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::EnableDomainTransferLockError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_enable_domain_transfer_lock_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::EnableDomainTransferLockOutput,
    crate::error::EnableDomainTransferLockError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::enable_domain_transfer_lock_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_enable_domain_transfer_lock(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::EnableDomainTransferLockError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_get_contact_reachability_status_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::GetContactReachabilityStatusOutput,
    crate::error::GetContactReachabilityStatusError,
> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::GetContactReachabilityStatusError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::GetContactReachabilityStatusError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "InvalidInput" => crate::error::GetContactReachabilityStatusError {
            meta: generic,
            kind: crate::error::GetContactReachabilityStatusErrorKind::InvalidInput({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::invalid_input::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_invalid_inputjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::GetContactReachabilityStatusError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "OperationLimitExceeded" => crate::error::GetContactReachabilityStatusError {
            meta: generic,
            kind: crate::error::GetContactReachabilityStatusErrorKind::OperationLimitExceeded({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::operation_limit_exceeded::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_operation_limit_exceededjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::GetContactReachabilityStatusError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "UnsupportedTLD" => crate::error::GetContactReachabilityStatusError {
            meta: generic,
            kind: crate::error::GetContactReachabilityStatusErrorKind::UnsupportedTld({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::unsupported_tld::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_unsupported_tldjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::GetContactReachabilityStatusError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::GetContactReachabilityStatusError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_get_contact_reachability_status_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::GetContactReachabilityStatusOutput,
    crate::error::GetContactReachabilityStatusError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::get_contact_reachability_status_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_get_contact_reachability_status(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::GetContactReachabilityStatusError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_get_domain_detail_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::GetDomainDetailOutput, crate::error::GetDomainDetailError> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::GetDomainDetailError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::GetDomainDetailError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "InvalidInput" => crate::error::GetDomainDetailError {
            meta: generic,
            kind: crate::error::GetDomainDetailErrorKind::InvalidInput({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::invalid_input::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_invalid_inputjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::GetDomainDetailError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "UnsupportedTLD" => crate::error::GetDomainDetailError {
            meta: generic,
            kind: crate::error::GetDomainDetailErrorKind::UnsupportedTld({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::unsupported_tld::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_unsupported_tldjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::GetDomainDetailError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::GetDomainDetailError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_get_domain_detail_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::GetDomainDetailOutput, crate::error::GetDomainDetailError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::get_domain_detail_output::Builder::default();
        let _ = response;
        output =
            crate::json_deser::deser_operation_get_domain_detail(response.body().as_ref(), output)
                .map_err(crate::error::GetDomainDetailError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_get_domain_suggestions_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::GetDomainSuggestionsOutput,
    crate::error::GetDomainSuggestionsError,
> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::GetDomainSuggestionsError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::GetDomainSuggestionsError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "InvalidInput" => crate::error::GetDomainSuggestionsError {
            meta: generic,
            kind: crate::error::GetDomainSuggestionsErrorKind::InvalidInput({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::invalid_input::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_invalid_inputjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::GetDomainSuggestionsError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "UnsupportedTLD" => crate::error::GetDomainSuggestionsError {
            meta: generic,
            kind: crate::error::GetDomainSuggestionsErrorKind::UnsupportedTld({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::unsupported_tld::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_unsupported_tldjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::GetDomainSuggestionsError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::GetDomainSuggestionsError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_get_domain_suggestions_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::GetDomainSuggestionsOutput,
    crate::error::GetDomainSuggestionsError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::get_domain_suggestions_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_get_domain_suggestions(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::GetDomainSuggestionsError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_get_operation_detail_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::GetOperationDetailOutput,
    crate::error::GetOperationDetailError,
> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::GetOperationDetailError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::GetOperationDetailError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "InvalidInput" => crate::error::GetOperationDetailError {
            meta: generic,
            kind: crate::error::GetOperationDetailErrorKind::InvalidInput({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::invalid_input::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_invalid_inputjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::GetOperationDetailError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::GetOperationDetailError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_get_operation_detail_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::GetOperationDetailOutput,
    crate::error::GetOperationDetailError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::get_operation_detail_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_get_operation_detail(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::GetOperationDetailError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_domains_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::ListDomainsOutput, crate::error::ListDomainsError> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::ListDomainsError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::ListDomainsError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "InvalidInput" => crate::error::ListDomainsError {
            meta: generic,
            kind: crate::error::ListDomainsErrorKind::InvalidInput({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::invalid_input::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_invalid_inputjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::ListDomainsError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::ListDomainsError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_domains_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::ListDomainsOutput, crate::error::ListDomainsError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::list_domains_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_list_domains(response.body().as_ref(), output)
            .map_err(crate::error::ListDomainsError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_operations_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::ListOperationsOutput, crate::error::ListOperationsError> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::ListOperationsError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::ListOperationsError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "InvalidInput" => crate::error::ListOperationsError {
            meta: generic,
            kind: crate::error::ListOperationsErrorKind::InvalidInput({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::invalid_input::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_invalid_inputjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::ListOperationsError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::ListOperationsError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_operations_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::ListOperationsOutput, crate::error::ListOperationsError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::list_operations_output::Builder::default();
        let _ = response;
        output =
            crate::json_deser::deser_operation_list_operations(response.body().as_ref(), output)
                .map_err(crate::error::ListOperationsError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_tags_for_domain_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::ListTagsForDomainOutput, crate::error::ListTagsForDomainError>
{
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::ListTagsForDomainError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::ListTagsForDomainError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "InvalidInput" => crate::error::ListTagsForDomainError {
            meta: generic,
            kind: crate::error::ListTagsForDomainErrorKind::InvalidInput({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::invalid_input::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_invalid_inputjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::ListTagsForDomainError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "OperationLimitExceeded" => crate::error::ListTagsForDomainError {
            meta: generic,
            kind: crate::error::ListTagsForDomainErrorKind::OperationLimitExceeded({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::operation_limit_exceeded::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_operation_limit_exceededjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::ListTagsForDomainError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "UnsupportedTLD" => crate::error::ListTagsForDomainError {
            meta: generic,
            kind: crate::error::ListTagsForDomainErrorKind::UnsupportedTld({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::unsupported_tld::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_unsupported_tldjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::ListTagsForDomainError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::ListTagsForDomainError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_tags_for_domain_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::ListTagsForDomainOutput, crate::error::ListTagsForDomainError>
{
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::list_tags_for_domain_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_list_tags_for_domain(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::ListTagsForDomainError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_register_domain_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::RegisterDomainOutput, crate::error::RegisterDomainError> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::RegisterDomainError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::RegisterDomainError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "DomainLimitExceeded" => crate::error::RegisterDomainError {
            meta: generic,
            kind: crate::error::RegisterDomainErrorKind::DomainLimitExceeded({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::domain_limit_exceeded::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_domain_limit_exceededjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::RegisterDomainError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "DuplicateRequest" => crate::error::RegisterDomainError {
            meta: generic,
            kind: crate::error::RegisterDomainErrorKind::DuplicateRequest({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::duplicate_request::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_duplicate_requestjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::RegisterDomainError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "InvalidInput" => crate::error::RegisterDomainError {
            meta: generic,
            kind: crate::error::RegisterDomainErrorKind::InvalidInput({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::invalid_input::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_invalid_inputjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::RegisterDomainError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "OperationLimitExceeded" => crate::error::RegisterDomainError {
            meta: generic,
            kind: crate::error::RegisterDomainErrorKind::OperationLimitExceeded({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::operation_limit_exceeded::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_operation_limit_exceededjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::RegisterDomainError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "TLDRulesViolation" => crate::error::RegisterDomainError {
            meta: generic,
            kind: crate::error::RegisterDomainErrorKind::TldRulesViolation({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::tld_rules_violation::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_tld_rules_violationjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::RegisterDomainError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "UnsupportedTLD" => crate::error::RegisterDomainError {
            meta: generic,
            kind: crate::error::RegisterDomainErrorKind::UnsupportedTld({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::unsupported_tld::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_unsupported_tldjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::RegisterDomainError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::RegisterDomainError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_register_domain_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::RegisterDomainOutput, crate::error::RegisterDomainError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::register_domain_output::Builder::default();
        let _ = response;
        output =
            crate::json_deser::deser_operation_register_domain(response.body().as_ref(), output)
                .map_err(crate::error::RegisterDomainError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_reject_domain_transfer_from_another_aws_account_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::RejectDomainTransferFromAnotherAwsAccountOutput,
    crate::error::RejectDomainTransferFromAnotherAwsAccountError,
> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::RejectDomainTransferFromAnotherAwsAccountError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(
                crate::error::RejectDomainTransferFromAnotherAwsAccountError::unhandled(generic),
            )
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "InvalidInput" => crate::error::RejectDomainTransferFromAnotherAwsAccountError { meta: generic, kind: crate::error::RejectDomainTransferFromAnotherAwsAccountErrorKind::InvalidInput({
            #[allow(unused_mut)]let mut tmp =
                 {
                    #[allow(unused_mut)]let mut output = crate::error::invalid_input::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_invalid_inputjson_err(response.body().as_ref(), output).map_err(crate::error::RejectDomainTransferFromAnotherAwsAccountError::unhandled)?;
                    output.build()
                }
            ;
            if (&tmp.message).is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        })},
        "OperationLimitExceeded" => crate::error::RejectDomainTransferFromAnotherAwsAccountError { meta: generic, kind: crate::error::RejectDomainTransferFromAnotherAwsAccountErrorKind::OperationLimitExceeded({
            #[allow(unused_mut)]let mut tmp =
                 {
                    #[allow(unused_mut)]let mut output = crate::error::operation_limit_exceeded::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_operation_limit_exceededjson_err(response.body().as_ref(), output).map_err(crate::error::RejectDomainTransferFromAnotherAwsAccountError::unhandled)?;
                    output.build()
                }
            ;
            if (&tmp.message).is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        })},
        _ => crate::error::RejectDomainTransferFromAnotherAwsAccountError::generic(generic)
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_reject_domain_transfer_from_another_aws_account_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::RejectDomainTransferFromAnotherAwsAccountOutput,
    crate::error::RejectDomainTransferFromAnotherAwsAccountError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output =
            crate::output::reject_domain_transfer_from_another_aws_account_output::Builder::default(
            );
        let _ = response;
        output =
            crate::json_deser::deser_operation_reject_domain_transfer_from_another_aws_account(
                response.body().as_ref(),
                output,
            )
            .map_err(crate::error::RejectDomainTransferFromAnotherAwsAccountError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_renew_domain_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::RenewDomainOutput, crate::error::RenewDomainError> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::RenewDomainError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::RenewDomainError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "DuplicateRequest" => crate::error::RenewDomainError {
            meta: generic,
            kind: crate::error::RenewDomainErrorKind::DuplicateRequest({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::duplicate_request::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_duplicate_requestjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::RenewDomainError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "InvalidInput" => crate::error::RenewDomainError {
            meta: generic,
            kind: crate::error::RenewDomainErrorKind::InvalidInput({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::invalid_input::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_invalid_inputjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::RenewDomainError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "OperationLimitExceeded" => crate::error::RenewDomainError {
            meta: generic,
            kind: crate::error::RenewDomainErrorKind::OperationLimitExceeded({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::operation_limit_exceeded::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_operation_limit_exceededjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::RenewDomainError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "TLDRulesViolation" => crate::error::RenewDomainError {
            meta: generic,
            kind: crate::error::RenewDomainErrorKind::TldRulesViolation({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::tld_rules_violation::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_tld_rules_violationjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::RenewDomainError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "UnsupportedTLD" => crate::error::RenewDomainError {
            meta: generic,
            kind: crate::error::RenewDomainErrorKind::UnsupportedTld({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::unsupported_tld::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_unsupported_tldjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::RenewDomainError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::RenewDomainError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_renew_domain_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::RenewDomainOutput, crate::error::RenewDomainError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::renew_domain_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_renew_domain(response.body().as_ref(), output)
            .map_err(crate::error::RenewDomainError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_resend_contact_reachability_email_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::ResendContactReachabilityEmailOutput,
    crate::error::ResendContactReachabilityEmailError,
> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::ResendContactReachabilityEmailError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::ResendContactReachabilityEmailError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "InvalidInput" => crate::error::ResendContactReachabilityEmailError {
            meta: generic,
            kind: crate::error::ResendContactReachabilityEmailErrorKind::InvalidInput({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::invalid_input::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_invalid_inputjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::ResendContactReachabilityEmailError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "OperationLimitExceeded" => crate::error::ResendContactReachabilityEmailError {
            meta: generic,
            kind: crate::error::ResendContactReachabilityEmailErrorKind::OperationLimitExceeded({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::operation_limit_exceeded::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_operation_limit_exceededjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::ResendContactReachabilityEmailError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "UnsupportedTLD" => crate::error::ResendContactReachabilityEmailError {
            meta: generic,
            kind: crate::error::ResendContactReachabilityEmailErrorKind::UnsupportedTld({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::unsupported_tld::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_unsupported_tldjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::ResendContactReachabilityEmailError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::ResendContactReachabilityEmailError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_resend_contact_reachability_email_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::ResendContactReachabilityEmailOutput,
    crate::error::ResendContactReachabilityEmailError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output =
            crate::output::resend_contact_reachability_email_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_resend_contact_reachability_email(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::ResendContactReachabilityEmailError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_retrieve_domain_auth_code_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::RetrieveDomainAuthCodeOutput,
    crate::error::RetrieveDomainAuthCodeError,
> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::RetrieveDomainAuthCodeError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::RetrieveDomainAuthCodeError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "InvalidInput" => crate::error::RetrieveDomainAuthCodeError {
            meta: generic,
            kind: crate::error::RetrieveDomainAuthCodeErrorKind::InvalidInput({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::invalid_input::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_invalid_inputjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::RetrieveDomainAuthCodeError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "UnsupportedTLD" => crate::error::RetrieveDomainAuthCodeError {
            meta: generic,
            kind: crate::error::RetrieveDomainAuthCodeErrorKind::UnsupportedTld({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::unsupported_tld::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_unsupported_tldjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::RetrieveDomainAuthCodeError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::RetrieveDomainAuthCodeError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_retrieve_domain_auth_code_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::RetrieveDomainAuthCodeOutput,
    crate::error::RetrieveDomainAuthCodeError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::retrieve_domain_auth_code_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_retrieve_domain_auth_code(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::RetrieveDomainAuthCodeError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_transfer_domain_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::TransferDomainOutput, crate::error::TransferDomainError> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::TransferDomainError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::TransferDomainError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "DomainLimitExceeded" => crate::error::TransferDomainError {
            meta: generic,
            kind: crate::error::TransferDomainErrorKind::DomainLimitExceeded({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::domain_limit_exceeded::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_domain_limit_exceededjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::TransferDomainError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "DuplicateRequest" => crate::error::TransferDomainError {
            meta: generic,
            kind: crate::error::TransferDomainErrorKind::DuplicateRequest({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::duplicate_request::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_duplicate_requestjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::TransferDomainError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "InvalidInput" => crate::error::TransferDomainError {
            meta: generic,
            kind: crate::error::TransferDomainErrorKind::InvalidInput({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::invalid_input::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_invalid_inputjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::TransferDomainError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "OperationLimitExceeded" => crate::error::TransferDomainError {
            meta: generic,
            kind: crate::error::TransferDomainErrorKind::OperationLimitExceeded({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::operation_limit_exceeded::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_operation_limit_exceededjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::TransferDomainError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "TLDRulesViolation" => crate::error::TransferDomainError {
            meta: generic,
            kind: crate::error::TransferDomainErrorKind::TldRulesViolation({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::tld_rules_violation::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_tld_rules_violationjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::TransferDomainError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "UnsupportedTLD" => crate::error::TransferDomainError {
            meta: generic,
            kind: crate::error::TransferDomainErrorKind::UnsupportedTld({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::unsupported_tld::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_unsupported_tldjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::TransferDomainError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::TransferDomainError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_transfer_domain_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::TransferDomainOutput, crate::error::TransferDomainError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::transfer_domain_output::Builder::default();
        let _ = response;
        output =
            crate::json_deser::deser_operation_transfer_domain(response.body().as_ref(), output)
                .map_err(crate::error::TransferDomainError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_transfer_domain_to_another_aws_account_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::TransferDomainToAnotherAwsAccountOutput,
    crate::error::TransferDomainToAnotherAwsAccountError,
> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::TransferDomainToAnotherAwsAccountError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::TransferDomainToAnotherAwsAccountError::unhandled(generic))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "DuplicateRequest" => crate::error::TransferDomainToAnotherAwsAccountError {
            meta: generic,
            kind: crate::error::TransferDomainToAnotherAwsAccountErrorKind::DuplicateRequest({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::duplicate_request::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_duplicate_requestjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::TransferDomainToAnotherAwsAccountError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "InvalidInput" => crate::error::TransferDomainToAnotherAwsAccountError {
            meta: generic,
            kind: crate::error::TransferDomainToAnotherAwsAccountErrorKind::InvalidInput({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::invalid_input::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_invalid_inputjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::TransferDomainToAnotherAwsAccountError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "OperationLimitExceeded" => {
            crate::error::TransferDomainToAnotherAwsAccountError {
                meta: generic,
                kind:
                    crate::error::TransferDomainToAnotherAwsAccountErrorKind::OperationLimitExceeded(
                        {
                            #[allow(unused_mut)]
                            let mut tmp = {
                                #[allow(unused_mut)]
                                let mut output =
                                    crate::error::operation_limit_exceeded::Builder::default();
                                let _ = response;
                                output = crate::json_deser::deser_structure_operation_limit_exceededjson_err(response.body().as_ref(), output).map_err(crate::error::TransferDomainToAnotherAwsAccountError::unhandled)?;
                                output.build()
                            };
                            if (&tmp.message).is_none() {
                                tmp.message = _error_message;
                            }
                            tmp
                        },
                    ),
            }
        }
        _ => crate::error::TransferDomainToAnotherAwsAccountError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_transfer_domain_to_another_aws_account_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::TransferDomainToAnotherAwsAccountOutput,
    crate::error::TransferDomainToAnotherAwsAccountError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output =
            crate::output::transfer_domain_to_another_aws_account_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_transfer_domain_to_another_aws_account(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::TransferDomainToAnotherAwsAccountError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_update_domain_contact_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::UpdateDomainContactOutput,
    crate::error::UpdateDomainContactError,
> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::UpdateDomainContactError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::UpdateDomainContactError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "DuplicateRequest" => crate::error::UpdateDomainContactError {
            meta: generic,
            kind: crate::error::UpdateDomainContactErrorKind::DuplicateRequest({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::duplicate_request::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_duplicate_requestjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::UpdateDomainContactError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "InvalidInput" => crate::error::UpdateDomainContactError {
            meta: generic,
            kind: crate::error::UpdateDomainContactErrorKind::InvalidInput({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::invalid_input::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_invalid_inputjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::UpdateDomainContactError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "OperationLimitExceeded" => crate::error::UpdateDomainContactError {
            meta: generic,
            kind: crate::error::UpdateDomainContactErrorKind::OperationLimitExceeded({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::operation_limit_exceeded::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_operation_limit_exceededjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::UpdateDomainContactError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "TLDRulesViolation" => crate::error::UpdateDomainContactError {
            meta: generic,
            kind: crate::error::UpdateDomainContactErrorKind::TldRulesViolation({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::tld_rules_violation::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_tld_rules_violationjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::UpdateDomainContactError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "UnsupportedTLD" => crate::error::UpdateDomainContactError {
            meta: generic,
            kind: crate::error::UpdateDomainContactErrorKind::UnsupportedTld({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::unsupported_tld::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_unsupported_tldjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::UpdateDomainContactError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::UpdateDomainContactError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_update_domain_contact_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::UpdateDomainContactOutput,
    crate::error::UpdateDomainContactError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::update_domain_contact_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_update_domain_contact(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::UpdateDomainContactError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_update_domain_contact_privacy_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::UpdateDomainContactPrivacyOutput,
    crate::error::UpdateDomainContactPrivacyError,
> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::UpdateDomainContactPrivacyError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::UpdateDomainContactPrivacyError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "DuplicateRequest" => crate::error::UpdateDomainContactPrivacyError {
            meta: generic,
            kind: crate::error::UpdateDomainContactPrivacyErrorKind::DuplicateRequest({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::duplicate_request::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_duplicate_requestjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::UpdateDomainContactPrivacyError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "InvalidInput" => crate::error::UpdateDomainContactPrivacyError {
            meta: generic,
            kind: crate::error::UpdateDomainContactPrivacyErrorKind::InvalidInput({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::invalid_input::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_invalid_inputjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::UpdateDomainContactPrivacyError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "OperationLimitExceeded" => crate::error::UpdateDomainContactPrivacyError {
            meta: generic,
            kind: crate::error::UpdateDomainContactPrivacyErrorKind::OperationLimitExceeded({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::operation_limit_exceeded::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_operation_limit_exceededjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::UpdateDomainContactPrivacyError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "TLDRulesViolation" => crate::error::UpdateDomainContactPrivacyError {
            meta: generic,
            kind: crate::error::UpdateDomainContactPrivacyErrorKind::TldRulesViolation({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::tld_rules_violation::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_tld_rules_violationjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::UpdateDomainContactPrivacyError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "UnsupportedTLD" => crate::error::UpdateDomainContactPrivacyError {
            meta: generic,
            kind: crate::error::UpdateDomainContactPrivacyErrorKind::UnsupportedTld({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::unsupported_tld::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_unsupported_tldjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::UpdateDomainContactPrivacyError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::UpdateDomainContactPrivacyError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_update_domain_contact_privacy_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::UpdateDomainContactPrivacyOutput,
    crate::error::UpdateDomainContactPrivacyError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::update_domain_contact_privacy_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_update_domain_contact_privacy(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::UpdateDomainContactPrivacyError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_update_domain_nameservers_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::UpdateDomainNameserversOutput,
    crate::error::UpdateDomainNameserversError,
> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::UpdateDomainNameserversError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::UpdateDomainNameserversError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "DuplicateRequest" => crate::error::UpdateDomainNameserversError {
            meta: generic,
            kind: crate::error::UpdateDomainNameserversErrorKind::DuplicateRequest({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::duplicate_request::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_duplicate_requestjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::UpdateDomainNameserversError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "InvalidInput" => crate::error::UpdateDomainNameserversError {
            meta: generic,
            kind: crate::error::UpdateDomainNameserversErrorKind::InvalidInput({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::invalid_input::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_invalid_inputjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::UpdateDomainNameserversError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "OperationLimitExceeded" => crate::error::UpdateDomainNameserversError {
            meta: generic,
            kind: crate::error::UpdateDomainNameserversErrorKind::OperationLimitExceeded({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::operation_limit_exceeded::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_operation_limit_exceededjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::UpdateDomainNameserversError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "TLDRulesViolation" => crate::error::UpdateDomainNameserversError {
            meta: generic,
            kind: crate::error::UpdateDomainNameserversErrorKind::TldRulesViolation({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::tld_rules_violation::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_tld_rules_violationjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::UpdateDomainNameserversError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "UnsupportedTLD" => crate::error::UpdateDomainNameserversError {
            meta: generic,
            kind: crate::error::UpdateDomainNameserversErrorKind::UnsupportedTld({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::unsupported_tld::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_unsupported_tldjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::UpdateDomainNameserversError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::UpdateDomainNameserversError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_update_domain_nameservers_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::UpdateDomainNameserversOutput,
    crate::error::UpdateDomainNameserversError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::update_domain_nameservers_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_update_domain_nameservers(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::UpdateDomainNameserversError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_update_tags_for_domain_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::UpdateTagsForDomainOutput,
    crate::error::UpdateTagsForDomainError,
> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::UpdateTagsForDomainError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::UpdateTagsForDomainError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "InvalidInput" => crate::error::UpdateTagsForDomainError {
            meta: generic,
            kind: crate::error::UpdateTagsForDomainErrorKind::InvalidInput({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::invalid_input::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_invalid_inputjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::UpdateTagsForDomainError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "OperationLimitExceeded" => crate::error::UpdateTagsForDomainError {
            meta: generic,
            kind: crate::error::UpdateTagsForDomainErrorKind::OperationLimitExceeded({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::operation_limit_exceeded::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_operation_limit_exceededjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::UpdateTagsForDomainError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "UnsupportedTLD" => crate::error::UpdateTagsForDomainError {
            meta: generic,
            kind: crate::error::UpdateTagsForDomainErrorKind::UnsupportedTld({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::unsupported_tld::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_unsupported_tldjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::UpdateTagsForDomainError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::UpdateTagsForDomainError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_update_tags_for_domain_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::UpdateTagsForDomainOutput,
    crate::error::UpdateTagsForDomainError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::update_tags_for_domain_output::Builder::default();
        let _ = response;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_view_billing_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::ViewBillingOutput, crate::error::ViewBillingError> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::ViewBillingError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::ViewBillingError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "InvalidInput" => crate::error::ViewBillingError {
            meta: generic,
            kind: crate::error::ViewBillingErrorKind::InvalidInput({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::invalid_input::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_invalid_inputjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::ViewBillingError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::ViewBillingError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_view_billing_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::ViewBillingOutput, crate::error::ViewBillingError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::view_billing_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_view_billing(response.body().as_ref(), output)
            .map_err(crate::error::ViewBillingError::unhandled)?;
        output.build()
    })
}
