// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn parse_accept_domain_transfer_from_another_aws_account_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::AcceptDomainTransferFromAnotherAwsAccountOutput,
    crate::error::AcceptDomainTransferFromAnotherAwsAccountError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::AcceptDomainTransferFromAnotherAwsAccountError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(
                crate::error::AcceptDomainTransferFromAnotherAwsAccountError::unhandled(generic),
            )
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "DomainLimitExceeded" => {
            crate::error::AcceptDomainTransferFromAnotherAwsAccountError::DomainLimitExceeded({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::domain_limit_exceeded::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_domain_limit_exceeded_json_err(response.body().as_ref(), output).map_err(crate::error::AcceptDomainTransferFromAnotherAwsAccountError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "InvalidInput" => {
            crate::error::AcceptDomainTransferFromAnotherAwsAccountError::InvalidInput({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::invalid_input::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_invalid_input_json_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(
                        crate::error::AcceptDomainTransferFromAnotherAwsAccountError::unhandled,
                    )?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "OperationLimitExceeded" => {
            crate::error::AcceptDomainTransferFromAnotherAwsAccountError::OperationLimitExceeded({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::operation_limit_exceeded::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_operation_limit_exceeded_json_err(response.body().as_ref(), output).map_err(crate::error::AcceptDomainTransferFromAnotherAwsAccountError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "UnsupportedTLD" => {
            crate::error::AcceptDomainTransferFromAnotherAwsAccountError::UnsupportedTld({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::unsupported_tld::Builder::default();
                    let _ = response;
                    output =
                        crate::json_deser::deser_structure_crate_error_unsupported_tld_json_err(
                            response.body().as_ref(),
                            output,
                        )
                        .map_err(
                            crate::error::AcceptDomainTransferFromAnotherAwsAccountError::unhandled,
                        )?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        _ => crate::error::AcceptDomainTransferFromAnotherAwsAccountError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_accept_domain_transfer_from_another_aws_account_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::AcceptDomainTransferFromAnotherAwsAccountOutput,
    crate::error::AcceptDomainTransferFromAnotherAwsAccountError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output =
            crate::output::accept_domain_transfer_from_another_aws_account_output::Builder::default(
            );
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_accept_domain_transfer_from_another_aws_account(response.body().as_ref(), output).map_err(crate::error::AcceptDomainTransferFromAnotherAwsAccountError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_associate_delegation_signer_to_domain_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::AssociateDelegationSignerToDomainOutput,
    crate::error::AssociateDelegationSignerToDomainError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::AssociateDelegationSignerToDomainError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::AssociateDelegationSignerToDomainError::unhandled(generic))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "DnssecLimitExceeded" => {
            crate::error::AssociateDelegationSignerToDomainError::DnssecLimitExceeded({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::dnssec_limit_exceeded::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_dnssec_limit_exceeded_json_err(response.body().as_ref(), output).map_err(crate::error::AssociateDelegationSignerToDomainError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "DuplicateRequest" => {
            crate::error::AssociateDelegationSignerToDomainError::DuplicateRequest({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::duplicate_request::Builder::default();
                    let _ = response;
                    output =
                        crate::json_deser::deser_structure_crate_error_duplicate_request_json_err(
                            response.body().as_ref(),
                            output,
                        )
                        .map_err(crate::error::AssociateDelegationSignerToDomainError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "InvalidInput" => crate::error::AssociateDelegationSignerToDomainError::InvalidInput({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_input::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_invalid_input_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::AssociateDelegationSignerToDomainError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "OperationLimitExceeded" => {
            crate::error::AssociateDelegationSignerToDomainError::OperationLimitExceeded({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::operation_limit_exceeded::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_operation_limit_exceeded_json_err(response.body().as_ref(), output).map_err(crate::error::AssociateDelegationSignerToDomainError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "TLDRulesViolation" => {
            crate::error::AssociateDelegationSignerToDomainError::TldRulesViolation({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::tld_rules_violation::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_tld_rules_violation_json_err(response.body().as_ref(), output).map_err(crate::error::AssociateDelegationSignerToDomainError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "UnsupportedTLD" => crate::error::AssociateDelegationSignerToDomainError::UnsupportedTld({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::unsupported_tld::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_unsupported_tld_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::AssociateDelegationSignerToDomainError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        _ => crate::error::AssociateDelegationSignerToDomainError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_associate_delegation_signer_to_domain_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::AssociateDelegationSignerToDomainOutput,
    crate::error::AssociateDelegationSignerToDomainError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output =
            crate::output::associate_delegation_signer_to_domain_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_associate_delegation_signer_to_domain(response.body().as_ref(), output).map_err(crate::error::AssociateDelegationSignerToDomainError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_cancel_domain_transfer_to_another_aws_account_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::CancelDomainTransferToAnotherAwsAccountOutput,
    crate::error::CancelDomainTransferToAnotherAwsAccountError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::CancelDomainTransferToAnotherAwsAccountError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(
                crate::error::CancelDomainTransferToAnotherAwsAccountError::unhandled(generic),
            )
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "InvalidInput" => {
            crate::error::CancelDomainTransferToAnotherAwsAccountError::InvalidInput({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::invalid_input::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_invalid_input_json_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(
                        crate::error::CancelDomainTransferToAnotherAwsAccountError::unhandled,
                    )?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "OperationLimitExceeded" => {
            crate::error::CancelDomainTransferToAnotherAwsAccountError::OperationLimitExceeded({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::operation_limit_exceeded::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_operation_limit_exceeded_json_err(response.body().as_ref(), output).map_err(crate::error::CancelDomainTransferToAnotherAwsAccountError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "UnsupportedTLD" => {
            crate::error::CancelDomainTransferToAnotherAwsAccountError::UnsupportedTld({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::unsupported_tld::Builder::default();
                    let _ = response;
                    output =
                        crate::json_deser::deser_structure_crate_error_unsupported_tld_json_err(
                            response.body().as_ref(),
                            output,
                        )
                        .map_err(
                            crate::error::CancelDomainTransferToAnotherAwsAccountError::unhandled,
                        )?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        _ => crate::error::CancelDomainTransferToAnotherAwsAccountError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_cancel_domain_transfer_to_another_aws_account_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::CancelDomainTransferToAnotherAwsAccountOutput,
    crate::error::CancelDomainTransferToAnotherAwsAccountError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output =
            crate::output::cancel_domain_transfer_to_another_aws_account_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_cancel_domain_transfer_to_another_aws_account(response.body().as_ref(), output).map_err(crate::error::CancelDomainTransferToAnotherAwsAccountError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_check_domain_availability_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::CheckDomainAvailabilityOutput,
    crate::error::CheckDomainAvailabilityError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::CheckDomainAvailabilityError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::CheckDomainAvailabilityError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "InvalidInput" => crate::error::CheckDomainAvailabilityError::InvalidInput({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_input::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_invalid_input_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::CheckDomainAvailabilityError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "UnsupportedTLD" => crate::error::CheckDomainAvailabilityError::UnsupportedTld({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::unsupported_tld::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_unsupported_tld_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::CheckDomainAvailabilityError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        _ => crate::error::CheckDomainAvailabilityError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_check_domain_availability_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::CheckDomainAvailabilityOutput,
    crate::error::CheckDomainAvailabilityError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::check_domain_availability_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_check_domain_availability(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::CheckDomainAvailabilityError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_check_domain_transferability_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::CheckDomainTransferabilityOutput,
    crate::error::CheckDomainTransferabilityError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::CheckDomainTransferabilityError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::CheckDomainTransferabilityError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "InvalidInput" => crate::error::CheckDomainTransferabilityError::InvalidInput({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_input::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_invalid_input_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::CheckDomainTransferabilityError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "UnsupportedTLD" => crate::error::CheckDomainTransferabilityError::UnsupportedTld({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::unsupported_tld::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_unsupported_tld_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::CheckDomainTransferabilityError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        _ => crate::error::CheckDomainTransferabilityError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_check_domain_transferability_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::CheckDomainTransferabilityOutput,
    crate::error::CheckDomainTransferabilityError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::check_domain_transferability_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_check_domain_transferability(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::CheckDomainTransferabilityError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_delete_domain_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::DeleteDomainOutput, crate::error::DeleteDomainError> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::DeleteDomainError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::DeleteDomainError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "DuplicateRequest" => crate::error::DeleteDomainError::DuplicateRequest({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::duplicate_request::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_duplicate_request_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::DeleteDomainError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InvalidInput" => crate::error::DeleteDomainError::InvalidInput({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_input::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_invalid_input_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::DeleteDomainError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "TLDRulesViolation" => {
            crate::error::DeleteDomainError::TldRulesViolation({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::tld_rules_violation::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_tld_rules_violation_json_err(response.body().as_ref(), output).map_err(crate::error::DeleteDomainError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "UnsupportedTLD" => crate::error::DeleteDomainError::UnsupportedTld({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::unsupported_tld::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_unsupported_tld_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::DeleteDomainError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        _ => crate::error::DeleteDomainError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_delete_domain_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::DeleteDomainOutput, crate::error::DeleteDomainError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::delete_domain_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_delete_domain(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::DeleteDomainError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_delete_tags_for_domain_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DeleteTagsForDomainOutput,
    crate::error::DeleteTagsForDomainError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::DeleteTagsForDomainError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::DeleteTagsForDomainError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "InvalidInput" => crate::error::DeleteTagsForDomainError::InvalidInput({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_input::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_invalid_input_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::DeleteTagsForDomainError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "OperationLimitExceeded" => {
            crate::error::DeleteTagsForDomainError::OperationLimitExceeded({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::operation_limit_exceeded::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_operation_limit_exceeded_json_err(response.body().as_ref(), output).map_err(crate::error::DeleteTagsForDomainError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "UnsupportedTLD" => crate::error::DeleteTagsForDomainError::UnsupportedTld({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::unsupported_tld::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_unsupported_tld_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::DeleteTagsForDomainError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        _ => crate::error::DeleteTagsForDomainError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_delete_tags_for_domain_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DeleteTagsForDomainOutput,
    crate::error::DeleteTagsForDomainError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::delete_tags_for_domain_output::Builder::default();
        let _ = response;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_disable_domain_auto_renew_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DisableDomainAutoRenewOutput,
    crate::error::DisableDomainAutoRenewError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::DisableDomainAutoRenewError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::DisableDomainAutoRenewError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "InvalidInput" => crate::error::DisableDomainAutoRenewError::InvalidInput({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_input::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_invalid_input_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::DisableDomainAutoRenewError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "UnsupportedTLD" => crate::error::DisableDomainAutoRenewError::UnsupportedTld({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::unsupported_tld::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_unsupported_tld_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::DisableDomainAutoRenewError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        _ => crate::error::DisableDomainAutoRenewError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_disable_domain_auto_renew_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DisableDomainAutoRenewOutput,
    crate::error::DisableDomainAutoRenewError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::disable_domain_auto_renew_output::Builder::default();
        let _ = response;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_disable_domain_transfer_lock_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DisableDomainTransferLockOutput,
    crate::error::DisableDomainTransferLockError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::DisableDomainTransferLockError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::DisableDomainTransferLockError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "DuplicateRequest" => crate::error::DisableDomainTransferLockError::DuplicateRequest({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::duplicate_request::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_duplicate_request_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::DisableDomainTransferLockError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InvalidInput" => crate::error::DisableDomainTransferLockError::InvalidInput({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_input::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_invalid_input_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::DisableDomainTransferLockError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "OperationLimitExceeded" => {
            crate::error::DisableDomainTransferLockError::OperationLimitExceeded({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::operation_limit_exceeded::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_operation_limit_exceeded_json_err(response.body().as_ref(), output).map_err(crate::error::DisableDomainTransferLockError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "TLDRulesViolation" => {
            crate::error::DisableDomainTransferLockError::TldRulesViolation({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::tld_rules_violation::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_tld_rules_violation_json_err(response.body().as_ref(), output).map_err(crate::error::DisableDomainTransferLockError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "UnsupportedTLD" => crate::error::DisableDomainTransferLockError::UnsupportedTld({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::unsupported_tld::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_unsupported_tld_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::DisableDomainTransferLockError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        _ => crate::error::DisableDomainTransferLockError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_disable_domain_transfer_lock_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DisableDomainTransferLockOutput,
    crate::error::DisableDomainTransferLockError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::disable_domain_transfer_lock_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_disable_domain_transfer_lock(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::DisableDomainTransferLockError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_disassociate_delegation_signer_from_domain_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DisassociateDelegationSignerFromDomainOutput,
    crate::error::DisassociateDelegationSignerFromDomainError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::DisassociateDelegationSignerFromDomainError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(
                crate::error::DisassociateDelegationSignerFromDomainError::unhandled(generic),
            )
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "DuplicateRequest" => {
            crate::error::DisassociateDelegationSignerFromDomainError::DuplicateRequest({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::duplicate_request::Builder::default();
                    let _ = response;
                    output =
                        crate::json_deser::deser_structure_crate_error_duplicate_request_json_err(
                            response.body().as_ref(),
                            output,
                        )
                        .map_err(
                            crate::error::DisassociateDelegationSignerFromDomainError::unhandled,
                        )?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "InvalidInput" => {
            crate::error::DisassociateDelegationSignerFromDomainError::InvalidInput({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::invalid_input::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_invalid_input_json_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(
                        crate::error::DisassociateDelegationSignerFromDomainError::unhandled,
                    )?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "OperationLimitExceeded" => {
            crate::error::DisassociateDelegationSignerFromDomainError::OperationLimitExceeded({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::operation_limit_exceeded::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_operation_limit_exceeded_json_err(response.body().as_ref(), output).map_err(crate::error::DisassociateDelegationSignerFromDomainError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "TLDRulesViolation" => {
            crate::error::DisassociateDelegationSignerFromDomainError::TldRulesViolation({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::tld_rules_violation::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_tld_rules_violation_json_err(response.body().as_ref(), output).map_err(crate::error::DisassociateDelegationSignerFromDomainError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "UnsupportedTLD" => {
            crate::error::DisassociateDelegationSignerFromDomainError::UnsupportedTld({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::unsupported_tld::Builder::default();
                    let _ = response;
                    output =
                        crate::json_deser::deser_structure_crate_error_unsupported_tld_json_err(
                            response.body().as_ref(),
                            output,
                        )
                        .map_err(
                            crate::error::DisassociateDelegationSignerFromDomainError::unhandled,
                        )?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        _ => crate::error::DisassociateDelegationSignerFromDomainError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_disassociate_delegation_signer_from_domain_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DisassociateDelegationSignerFromDomainOutput,
    crate::error::DisassociateDelegationSignerFromDomainError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output =
            crate::output::disassociate_delegation_signer_from_domain_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_disassociate_delegation_signer_from_domain(response.body().as_ref(), output).map_err(crate::error::DisassociateDelegationSignerFromDomainError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_enable_domain_auto_renew_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::EnableDomainAutoRenewOutput,
    crate::error::EnableDomainAutoRenewError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::EnableDomainAutoRenewError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::EnableDomainAutoRenewError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "InvalidInput" => crate::error::EnableDomainAutoRenewError::InvalidInput({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_input::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_invalid_input_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::EnableDomainAutoRenewError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "TLDRulesViolation" => {
            crate::error::EnableDomainAutoRenewError::TldRulesViolation({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::tld_rules_violation::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_tld_rules_violation_json_err(response.body().as_ref(), output).map_err(crate::error::EnableDomainAutoRenewError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "UnsupportedTLD" => crate::error::EnableDomainAutoRenewError::UnsupportedTld({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::unsupported_tld::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_unsupported_tld_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::EnableDomainAutoRenewError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        _ => crate::error::EnableDomainAutoRenewError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_enable_domain_auto_renew_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::EnableDomainAutoRenewOutput,
    crate::error::EnableDomainAutoRenewError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::enable_domain_auto_renew_output::Builder::default();
        let _ = response;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_enable_domain_transfer_lock_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::EnableDomainTransferLockOutput,
    crate::error::EnableDomainTransferLockError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::EnableDomainTransferLockError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::EnableDomainTransferLockError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "DuplicateRequest" => crate::error::EnableDomainTransferLockError::DuplicateRequest({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::duplicate_request::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_duplicate_request_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::EnableDomainTransferLockError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InvalidInput" => crate::error::EnableDomainTransferLockError::InvalidInput({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_input::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_invalid_input_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::EnableDomainTransferLockError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "OperationLimitExceeded" => {
            crate::error::EnableDomainTransferLockError::OperationLimitExceeded({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::operation_limit_exceeded::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_operation_limit_exceeded_json_err(response.body().as_ref(), output).map_err(crate::error::EnableDomainTransferLockError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "TLDRulesViolation" => {
            crate::error::EnableDomainTransferLockError::TldRulesViolation({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::tld_rules_violation::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_tld_rules_violation_json_err(response.body().as_ref(), output).map_err(crate::error::EnableDomainTransferLockError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "UnsupportedTLD" => crate::error::EnableDomainTransferLockError::UnsupportedTld({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::unsupported_tld::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_unsupported_tld_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::EnableDomainTransferLockError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        _ => crate::error::EnableDomainTransferLockError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_enable_domain_transfer_lock_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::EnableDomainTransferLockOutput,
    crate::error::EnableDomainTransferLockError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::enable_domain_transfer_lock_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_enable_domain_transfer_lock(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::EnableDomainTransferLockError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_get_contact_reachability_status_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::GetContactReachabilityStatusOutput,
    crate::error::GetContactReachabilityStatusError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::GetContactReachabilityStatusError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::GetContactReachabilityStatusError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "InvalidInput" => crate::error::GetContactReachabilityStatusError::InvalidInput({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_input::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_invalid_input_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::GetContactReachabilityStatusError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "OperationLimitExceeded" => {
            crate::error::GetContactReachabilityStatusError::OperationLimitExceeded({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::operation_limit_exceeded::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_operation_limit_exceeded_json_err(response.body().as_ref(), output).map_err(crate::error::GetContactReachabilityStatusError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "UnsupportedTLD" => crate::error::GetContactReachabilityStatusError::UnsupportedTld({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::unsupported_tld::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_unsupported_tld_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::GetContactReachabilityStatusError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        _ => crate::error::GetContactReachabilityStatusError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_get_contact_reachability_status_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::GetContactReachabilityStatusOutput,
    crate::error::GetContactReachabilityStatusError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::get_contact_reachability_status_output::Builder::default();
        let _ = response;
        output =
            crate::json_deser::deser_operation_crate_operation_get_contact_reachability_status(
                response.body().as_ref(),
                output,
            )
            .map_err(crate::error::GetContactReachabilityStatusError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_get_domain_detail_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::GetDomainDetailOutput, crate::error::GetDomainDetailError> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::GetDomainDetailError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::GetDomainDetailError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "InvalidInput" => crate::error::GetDomainDetailError::InvalidInput({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_input::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_invalid_input_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::GetDomainDetailError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "UnsupportedTLD" => crate::error::GetDomainDetailError::UnsupportedTld({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::unsupported_tld::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_unsupported_tld_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::GetDomainDetailError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        _ => crate::error::GetDomainDetailError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_get_domain_detail_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::GetDomainDetailOutput, crate::error::GetDomainDetailError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::get_domain_detail_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_get_domain_detail(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::GetDomainDetailError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_get_domain_suggestions_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::GetDomainSuggestionsOutput,
    crate::error::GetDomainSuggestionsError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::GetDomainSuggestionsError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::GetDomainSuggestionsError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "InvalidInput" => crate::error::GetDomainSuggestionsError::InvalidInput({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_input::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_invalid_input_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::GetDomainSuggestionsError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "UnsupportedTLD" => crate::error::GetDomainSuggestionsError::UnsupportedTld({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::unsupported_tld::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_unsupported_tld_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::GetDomainSuggestionsError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        _ => crate::error::GetDomainSuggestionsError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_get_domain_suggestions_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::GetDomainSuggestionsOutput,
    crate::error::GetDomainSuggestionsError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::get_domain_suggestions_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_get_domain_suggestions(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::GetDomainSuggestionsError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_get_operation_detail_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::GetOperationDetailOutput,
    crate::error::GetOperationDetailError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::GetOperationDetailError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::GetOperationDetailError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "InvalidInput" => crate::error::GetOperationDetailError::InvalidInput({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_input::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_invalid_input_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::GetOperationDetailError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        _ => crate::error::GetOperationDetailError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_get_operation_detail_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::GetOperationDetailOutput,
    crate::error::GetOperationDetailError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::get_operation_detail_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_get_operation_detail(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::GetOperationDetailError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_domains_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::ListDomainsOutput, crate::error::ListDomainsError> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::ListDomainsError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::ListDomainsError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "InvalidInput" => crate::error::ListDomainsError::InvalidInput({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_input::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_invalid_input_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::ListDomainsError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        _ => crate::error::ListDomainsError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_domains_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::ListDomainsOutput, crate::error::ListDomainsError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::list_domains_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_list_domains(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::ListDomainsError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_operations_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::ListOperationsOutput, crate::error::ListOperationsError> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::ListOperationsError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::ListOperationsError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "InvalidInput" => crate::error::ListOperationsError::InvalidInput({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_input::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_invalid_input_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::ListOperationsError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        _ => crate::error::ListOperationsError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_operations_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::ListOperationsOutput, crate::error::ListOperationsError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::list_operations_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_list_operations(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::ListOperationsError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_prices_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::ListPricesOutput, crate::error::ListPricesError> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::ListPricesError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::ListPricesError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "InvalidInput" => crate::error::ListPricesError::InvalidInput({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_input::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_invalid_input_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::ListPricesError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "UnsupportedTLD" => crate::error::ListPricesError::UnsupportedTld({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::unsupported_tld::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_unsupported_tld_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::ListPricesError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        _ => crate::error::ListPricesError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_prices_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::ListPricesOutput, crate::error::ListPricesError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::list_prices_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_list_prices(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::ListPricesError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_tags_for_domain_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::ListTagsForDomainOutput, crate::error::ListTagsForDomainError>
{
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::ListTagsForDomainError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::ListTagsForDomainError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "InvalidInput" => crate::error::ListTagsForDomainError::InvalidInput({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_input::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_invalid_input_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::ListTagsForDomainError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "OperationLimitExceeded" => crate::error::ListTagsForDomainError::OperationLimitExceeded({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::operation_limit_exceeded::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_operation_limit_exceeded_json_err(response.body().as_ref(), output).map_err(crate::error::ListTagsForDomainError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "UnsupportedTLD" => crate::error::ListTagsForDomainError::UnsupportedTld({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::unsupported_tld::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_unsupported_tld_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::ListTagsForDomainError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        _ => crate::error::ListTagsForDomainError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_tags_for_domain_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::ListTagsForDomainOutput, crate::error::ListTagsForDomainError>
{
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::list_tags_for_domain_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_list_tags_for_domain(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::ListTagsForDomainError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_push_domain_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::PushDomainOutput, crate::error::PushDomainError> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::PushDomainError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::PushDomainError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "InvalidInput" => crate::error::PushDomainError::InvalidInput({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_input::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_invalid_input_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::PushDomainError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "OperationLimitExceeded" => crate::error::PushDomainError::OperationLimitExceeded({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::operation_limit_exceeded::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_operation_limit_exceeded_json_err(response.body().as_ref(), output).map_err(crate::error::PushDomainError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "UnsupportedTLD" => crate::error::PushDomainError::UnsupportedTld({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::unsupported_tld::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_unsupported_tld_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::PushDomainError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        _ => crate::error::PushDomainError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_push_domain_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::PushDomainOutput, crate::error::PushDomainError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::push_domain_output::Builder::default();
        let _ = response;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_register_domain_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::RegisterDomainOutput, crate::error::RegisterDomainError> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::RegisterDomainError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::RegisterDomainError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "DomainLimitExceeded" => {
            crate::error::RegisterDomainError::DomainLimitExceeded({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::domain_limit_exceeded::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_domain_limit_exceeded_json_err(response.body().as_ref(), output).map_err(crate::error::RegisterDomainError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "DuplicateRequest" => crate::error::RegisterDomainError::DuplicateRequest({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::duplicate_request::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_duplicate_request_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::RegisterDomainError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InvalidInput" => crate::error::RegisterDomainError::InvalidInput({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_input::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_invalid_input_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::RegisterDomainError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "OperationLimitExceeded" => crate::error::RegisterDomainError::OperationLimitExceeded({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::operation_limit_exceeded::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_operation_limit_exceeded_json_err(response.body().as_ref(), output).map_err(crate::error::RegisterDomainError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "TLDRulesViolation" => {
            crate::error::RegisterDomainError::TldRulesViolation({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::tld_rules_violation::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_tld_rules_violation_json_err(response.body().as_ref(), output).map_err(crate::error::RegisterDomainError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "UnsupportedTLD" => crate::error::RegisterDomainError::UnsupportedTld({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::unsupported_tld::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_unsupported_tld_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::RegisterDomainError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        _ => crate::error::RegisterDomainError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_register_domain_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::RegisterDomainOutput, crate::error::RegisterDomainError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::register_domain_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_register_domain(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::RegisterDomainError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_reject_domain_transfer_from_another_aws_account_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::RejectDomainTransferFromAnotherAwsAccountOutput,
    crate::error::RejectDomainTransferFromAnotherAwsAccountError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::RejectDomainTransferFromAnotherAwsAccountError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(
                crate::error::RejectDomainTransferFromAnotherAwsAccountError::unhandled(generic),
            )
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "InvalidInput" => {
            crate::error::RejectDomainTransferFromAnotherAwsAccountError::InvalidInput({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::invalid_input::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_invalid_input_json_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(
                        crate::error::RejectDomainTransferFromAnotherAwsAccountError::unhandled,
                    )?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "OperationLimitExceeded" => {
            crate::error::RejectDomainTransferFromAnotherAwsAccountError::OperationLimitExceeded({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::operation_limit_exceeded::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_operation_limit_exceeded_json_err(response.body().as_ref(), output).map_err(crate::error::RejectDomainTransferFromAnotherAwsAccountError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "UnsupportedTLD" => {
            crate::error::RejectDomainTransferFromAnotherAwsAccountError::UnsupportedTld({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::unsupported_tld::Builder::default();
                    let _ = response;
                    output =
                        crate::json_deser::deser_structure_crate_error_unsupported_tld_json_err(
                            response.body().as_ref(),
                            output,
                        )
                        .map_err(
                            crate::error::RejectDomainTransferFromAnotherAwsAccountError::unhandled,
                        )?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        _ => crate::error::RejectDomainTransferFromAnotherAwsAccountError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_reject_domain_transfer_from_another_aws_account_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::RejectDomainTransferFromAnotherAwsAccountOutput,
    crate::error::RejectDomainTransferFromAnotherAwsAccountError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output =
            crate::output::reject_domain_transfer_from_another_aws_account_output::Builder::default(
            );
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_reject_domain_transfer_from_another_aws_account(response.body().as_ref(), output).map_err(crate::error::RejectDomainTransferFromAnotherAwsAccountError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_renew_domain_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::RenewDomainOutput, crate::error::RenewDomainError> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::RenewDomainError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::RenewDomainError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "DuplicateRequest" => crate::error::RenewDomainError::DuplicateRequest({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::duplicate_request::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_duplicate_request_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::RenewDomainError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InvalidInput" => crate::error::RenewDomainError::InvalidInput({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_input::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_invalid_input_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::RenewDomainError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "OperationLimitExceeded" => crate::error::RenewDomainError::OperationLimitExceeded({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::operation_limit_exceeded::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_operation_limit_exceeded_json_err(response.body().as_ref(), output).map_err(crate::error::RenewDomainError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "TLDRulesViolation" => {
            crate::error::RenewDomainError::TldRulesViolation({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::tld_rules_violation::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_tld_rules_violation_json_err(response.body().as_ref(), output).map_err(crate::error::RenewDomainError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "UnsupportedTLD" => crate::error::RenewDomainError::UnsupportedTld({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::unsupported_tld::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_unsupported_tld_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::RenewDomainError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        _ => crate::error::RenewDomainError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_renew_domain_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::RenewDomainOutput, crate::error::RenewDomainError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::renew_domain_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_renew_domain(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::RenewDomainError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_resend_contact_reachability_email_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::ResendContactReachabilityEmailOutput,
    crate::error::ResendContactReachabilityEmailError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::ResendContactReachabilityEmailError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::ResendContactReachabilityEmailError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "InvalidInput" => crate::error::ResendContactReachabilityEmailError::InvalidInput({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_input::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_invalid_input_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::ResendContactReachabilityEmailError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "OperationLimitExceeded" => {
            crate::error::ResendContactReachabilityEmailError::OperationLimitExceeded({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::operation_limit_exceeded::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_operation_limit_exceeded_json_err(response.body().as_ref(), output).map_err(crate::error::ResendContactReachabilityEmailError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "UnsupportedTLD" => crate::error::ResendContactReachabilityEmailError::UnsupportedTld({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::unsupported_tld::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_unsupported_tld_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::ResendContactReachabilityEmailError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        _ => crate::error::ResendContactReachabilityEmailError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_resend_contact_reachability_email_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::ResendContactReachabilityEmailOutput,
    crate::error::ResendContactReachabilityEmailError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output =
            crate::output::resend_contact_reachability_email_output::Builder::default();
        let _ = response;
        output =
            crate::json_deser::deser_operation_crate_operation_resend_contact_reachability_email(
                response.body().as_ref(),
                output,
            )
            .map_err(crate::error::ResendContactReachabilityEmailError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_resend_operation_authorization_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::ResendOperationAuthorizationOutput,
    crate::error::ResendOperationAuthorizationError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::ResendOperationAuthorizationError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::ResendOperationAuthorizationError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "InvalidInput" => crate::error::ResendOperationAuthorizationError::InvalidInput({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_input::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_invalid_input_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::ResendOperationAuthorizationError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        _ => crate::error::ResendOperationAuthorizationError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_resend_operation_authorization_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::ResendOperationAuthorizationOutput,
    crate::error::ResendOperationAuthorizationError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::resend_operation_authorization_output::Builder::default();
        let _ = response;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_retrieve_domain_auth_code_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::RetrieveDomainAuthCodeOutput,
    crate::error::RetrieveDomainAuthCodeError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::RetrieveDomainAuthCodeError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::RetrieveDomainAuthCodeError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "InvalidInput" => crate::error::RetrieveDomainAuthCodeError::InvalidInput({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_input::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_invalid_input_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::RetrieveDomainAuthCodeError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "UnsupportedTLD" => crate::error::RetrieveDomainAuthCodeError::UnsupportedTld({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::unsupported_tld::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_unsupported_tld_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::RetrieveDomainAuthCodeError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        _ => crate::error::RetrieveDomainAuthCodeError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_retrieve_domain_auth_code_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::RetrieveDomainAuthCodeOutput,
    crate::error::RetrieveDomainAuthCodeError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::retrieve_domain_auth_code_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_retrieve_domain_auth_code(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::RetrieveDomainAuthCodeError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_transfer_domain_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::TransferDomainOutput, crate::error::TransferDomainError> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::TransferDomainError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::TransferDomainError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "DomainLimitExceeded" => {
            crate::error::TransferDomainError::DomainLimitExceeded({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::domain_limit_exceeded::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_domain_limit_exceeded_json_err(response.body().as_ref(), output).map_err(crate::error::TransferDomainError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "DuplicateRequest" => crate::error::TransferDomainError::DuplicateRequest({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::duplicate_request::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_duplicate_request_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::TransferDomainError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InvalidInput" => crate::error::TransferDomainError::InvalidInput({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_input::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_invalid_input_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::TransferDomainError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "OperationLimitExceeded" => crate::error::TransferDomainError::OperationLimitExceeded({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::operation_limit_exceeded::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_operation_limit_exceeded_json_err(response.body().as_ref(), output).map_err(crate::error::TransferDomainError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "TLDRulesViolation" => {
            crate::error::TransferDomainError::TldRulesViolation({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::tld_rules_violation::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_tld_rules_violation_json_err(response.body().as_ref(), output).map_err(crate::error::TransferDomainError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "UnsupportedTLD" => crate::error::TransferDomainError::UnsupportedTld({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::unsupported_tld::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_unsupported_tld_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::TransferDomainError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        _ => crate::error::TransferDomainError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_transfer_domain_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::TransferDomainOutput, crate::error::TransferDomainError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::transfer_domain_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_transfer_domain(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::TransferDomainError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_transfer_domain_to_another_aws_account_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::TransferDomainToAnotherAwsAccountOutput,
    crate::error::TransferDomainToAnotherAwsAccountError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::TransferDomainToAnotherAwsAccountError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::TransferDomainToAnotherAwsAccountError::unhandled(generic))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "DuplicateRequest" => {
            crate::error::TransferDomainToAnotherAwsAccountError::DuplicateRequest({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::duplicate_request::Builder::default();
                    let _ = response;
                    output =
                        crate::json_deser::deser_structure_crate_error_duplicate_request_json_err(
                            response.body().as_ref(),
                            output,
                        )
                        .map_err(crate::error::TransferDomainToAnotherAwsAccountError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "InvalidInput" => crate::error::TransferDomainToAnotherAwsAccountError::InvalidInput({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_input::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_invalid_input_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::TransferDomainToAnotherAwsAccountError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "OperationLimitExceeded" => {
            crate::error::TransferDomainToAnotherAwsAccountError::OperationLimitExceeded({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::operation_limit_exceeded::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_operation_limit_exceeded_json_err(response.body().as_ref(), output).map_err(crate::error::TransferDomainToAnotherAwsAccountError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "UnsupportedTLD" => crate::error::TransferDomainToAnotherAwsAccountError::UnsupportedTld({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::unsupported_tld::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_unsupported_tld_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::TransferDomainToAnotherAwsAccountError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        _ => crate::error::TransferDomainToAnotherAwsAccountError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_transfer_domain_to_another_aws_account_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::TransferDomainToAnotherAwsAccountOutput,
    crate::error::TransferDomainToAnotherAwsAccountError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output =
            crate::output::transfer_domain_to_another_aws_account_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_transfer_domain_to_another_aws_account(response.body().as_ref(), output).map_err(crate::error::TransferDomainToAnotherAwsAccountError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_update_domain_contact_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::UpdateDomainContactOutput,
    crate::error::UpdateDomainContactError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::UpdateDomainContactError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::UpdateDomainContactError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "DuplicateRequest" => crate::error::UpdateDomainContactError::DuplicateRequest({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::duplicate_request::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_duplicate_request_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::UpdateDomainContactError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InvalidInput" => crate::error::UpdateDomainContactError::InvalidInput({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_input::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_invalid_input_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::UpdateDomainContactError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "OperationLimitExceeded" => {
            crate::error::UpdateDomainContactError::OperationLimitExceeded({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::operation_limit_exceeded::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_operation_limit_exceeded_json_err(response.body().as_ref(), output).map_err(crate::error::UpdateDomainContactError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "TLDRulesViolation" => {
            crate::error::UpdateDomainContactError::TldRulesViolation({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::tld_rules_violation::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_tld_rules_violation_json_err(response.body().as_ref(), output).map_err(crate::error::UpdateDomainContactError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "UnsupportedTLD" => crate::error::UpdateDomainContactError::UnsupportedTld({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::unsupported_tld::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_unsupported_tld_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::UpdateDomainContactError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        _ => crate::error::UpdateDomainContactError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_update_domain_contact_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::UpdateDomainContactOutput,
    crate::error::UpdateDomainContactError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::update_domain_contact_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_update_domain_contact(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::UpdateDomainContactError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_update_domain_contact_privacy_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::UpdateDomainContactPrivacyOutput,
    crate::error::UpdateDomainContactPrivacyError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::UpdateDomainContactPrivacyError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::UpdateDomainContactPrivacyError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "DuplicateRequest" => crate::error::UpdateDomainContactPrivacyError::DuplicateRequest({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::duplicate_request::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_duplicate_request_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::UpdateDomainContactPrivacyError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InvalidInput" => crate::error::UpdateDomainContactPrivacyError::InvalidInput({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_input::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_invalid_input_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::UpdateDomainContactPrivacyError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "OperationLimitExceeded" => {
            crate::error::UpdateDomainContactPrivacyError::OperationLimitExceeded({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::operation_limit_exceeded::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_operation_limit_exceeded_json_err(response.body().as_ref(), output).map_err(crate::error::UpdateDomainContactPrivacyError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "TLDRulesViolation" => {
            crate::error::UpdateDomainContactPrivacyError::TldRulesViolation({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::tld_rules_violation::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_tld_rules_violation_json_err(response.body().as_ref(), output).map_err(crate::error::UpdateDomainContactPrivacyError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "UnsupportedTLD" => crate::error::UpdateDomainContactPrivacyError::UnsupportedTld({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::unsupported_tld::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_unsupported_tld_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::UpdateDomainContactPrivacyError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        _ => crate::error::UpdateDomainContactPrivacyError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_update_domain_contact_privacy_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::UpdateDomainContactPrivacyOutput,
    crate::error::UpdateDomainContactPrivacyError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::update_domain_contact_privacy_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_update_domain_contact_privacy(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::UpdateDomainContactPrivacyError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_update_domain_nameservers_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::UpdateDomainNameserversOutput,
    crate::error::UpdateDomainNameserversError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::UpdateDomainNameserversError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::UpdateDomainNameserversError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "DuplicateRequest" => crate::error::UpdateDomainNameserversError::DuplicateRequest({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::duplicate_request::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_duplicate_request_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::UpdateDomainNameserversError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InvalidInput" => crate::error::UpdateDomainNameserversError::InvalidInput({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_input::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_invalid_input_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::UpdateDomainNameserversError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "OperationLimitExceeded" => {
            crate::error::UpdateDomainNameserversError::OperationLimitExceeded({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::operation_limit_exceeded::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_operation_limit_exceeded_json_err(response.body().as_ref(), output).map_err(crate::error::UpdateDomainNameserversError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "TLDRulesViolation" => {
            crate::error::UpdateDomainNameserversError::TldRulesViolation({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::tld_rules_violation::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_tld_rules_violation_json_err(response.body().as_ref(), output).map_err(crate::error::UpdateDomainNameserversError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "UnsupportedTLD" => crate::error::UpdateDomainNameserversError::UnsupportedTld({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::unsupported_tld::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_unsupported_tld_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::UpdateDomainNameserversError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        _ => crate::error::UpdateDomainNameserversError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_update_domain_nameservers_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::UpdateDomainNameserversOutput,
    crate::error::UpdateDomainNameserversError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::update_domain_nameservers_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_update_domain_nameservers(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::UpdateDomainNameserversError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_update_tags_for_domain_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::UpdateTagsForDomainOutput,
    crate::error::UpdateTagsForDomainError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::UpdateTagsForDomainError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::UpdateTagsForDomainError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "InvalidInput" => crate::error::UpdateTagsForDomainError::InvalidInput({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_input::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_invalid_input_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::UpdateTagsForDomainError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "OperationLimitExceeded" => {
            crate::error::UpdateTagsForDomainError::OperationLimitExceeded({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::operation_limit_exceeded::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_operation_limit_exceeded_json_err(response.body().as_ref(), output).map_err(crate::error::UpdateTagsForDomainError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "UnsupportedTLD" => crate::error::UpdateTagsForDomainError::UnsupportedTld({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::unsupported_tld::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_unsupported_tld_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::UpdateTagsForDomainError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        _ => crate::error::UpdateTagsForDomainError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_update_tags_for_domain_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::UpdateTagsForDomainOutput,
    crate::error::UpdateTagsForDomainError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::update_tags_for_domain_output::Builder::default();
        let _ = response;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_view_billing_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::ViewBillingOutput, crate::error::ViewBillingError> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::ViewBillingError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::ViewBillingError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "InvalidInput" => crate::error::ViewBillingError::InvalidInput({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_input::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_invalid_input_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::ViewBillingError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        _ => crate::error::ViewBillingError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_view_billing_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::ViewBillingOutput, crate::error::ViewBillingError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::view_billing_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_view_billing(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::ViewBillingError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}
