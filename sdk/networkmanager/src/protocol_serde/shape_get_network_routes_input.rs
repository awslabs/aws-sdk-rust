// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_get_network_routes_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::get_network_routes::GetNetworkRoutesInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.destination_filters {
        #[allow(unused_mut)]
        let mut object_2 = object.key("DestinationFilters").start_object();
        for (key_3, value_4) in var_1 {
            {
                let mut array_5 = object_2.key(key_3.as_str()).start_array();
                for item_6 in value_4 {
                    {
                        array_5.value().string(item_6.as_str());
                    }
                }
                array_5.finish();
            }
        }
        object_2.finish();
    }
    if let Some(var_7) = &input.exact_cidr_matches {
        let mut array_8 = object.key("ExactCidrMatches").start_array();
        for item_9 in var_7 {
            {
                array_8.value().string(item_9.as_str());
            }
        }
        array_8.finish();
    }
    if let Some(var_10) = &input.longest_prefix_matches {
        let mut array_11 = object.key("LongestPrefixMatches").start_array();
        for item_12 in var_10 {
            {
                array_11.value().string(item_12.as_str());
            }
        }
        array_11.finish();
    }
    if let Some(var_13) = &input.prefix_list_ids {
        let mut array_14 = object.key("PrefixListIds").start_array();
        for item_15 in var_13 {
            {
                array_14.value().string(item_15.as_str());
            }
        }
        array_14.finish();
    }
    if let Some(var_16) = &input.route_table_identifier {
        #[allow(unused_mut)]
        let mut object_17 = object.key("RouteTableIdentifier").start_object();
        crate::protocol_serde::shape_route_table_identifier::ser_route_table_identifier(&mut object_17, var_16)?;
        object_17.finish();
    }
    if let Some(var_18) = &input.states {
        let mut array_19 = object.key("States").start_array();
        for item_20 in var_18 {
            {
                array_19.value().string(item_20.as_str());
            }
        }
        array_19.finish();
    }
    if let Some(var_21) = &input.subnet_of_matches {
        let mut array_22 = object.key("SubnetOfMatches").start_array();
        for item_23 in var_21 {
            {
                array_22.value().string(item_23.as_str());
            }
        }
        array_22.finish();
    }
    if let Some(var_24) = &input.supernet_of_matches {
        let mut array_25 = object.key("SupernetOfMatches").start_array();
        for item_26 in var_24 {
            {
                array_25.value().string(item_26.as_str());
            }
        }
        array_25.finish();
    }
    if let Some(var_27) = &input.types {
        let mut array_28 = object.key("Types").start_array();
        for item_29 in var_27 {
            {
                array_28.value().string(item_29.as_str());
            }
        }
        array_28.finish();
    }
    Ok(())
}
