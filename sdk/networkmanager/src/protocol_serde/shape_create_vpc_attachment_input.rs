// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_vpc_attachment_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_vpc_attachment::CreateVpcAttachmentInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.client_token {
        object.key("ClientToken").string(var_1.as_str());
    }
    if let Some(var_2) = &input.core_network_id {
        object.key("CoreNetworkId").string(var_2.as_str());
    }
    if let Some(var_3) = &input.options {
        #[allow(unused_mut)]
        let mut object_4 = object.key("Options").start_object();
        crate::protocol_serde::shape_vpc_options::ser_vpc_options(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.subnet_arns {
        let mut array_6 = object.key("SubnetArns").start_array();
        for item_7 in var_5 {
            {
                array_6.value().string(item_7.as_str());
            }
        }
        array_6.finish();
    }
    if let Some(var_8) = &input.tags {
        let mut array_9 = object.key("Tags").start_array();
        for item_10 in var_8 {
            {
                #[allow(unused_mut)]
                let mut object_11 = array_9.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_11, item_10)?;
                object_11.finish();
            }
        }
        array_9.finish();
    }
    if let Some(var_12) = &input.vpc_arn {
        object.key("VpcArn").string(var_12.as_str());
    }
    Ok(())
}
