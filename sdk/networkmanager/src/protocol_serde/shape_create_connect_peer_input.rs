// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_connect_peer_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_connect_peer::CreateConnectPeerInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.bgp_options {
        #[allow(unused_mut)]
        let mut object_2 = object.key("BgpOptions").start_object();
        crate::protocol_serde::shape_bgp_options::ser_bgp_options(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.client_token {
        object.key("ClientToken").string(var_3.as_str());
    }
    if let Some(var_4) = &input.connect_attachment_id {
        object.key("ConnectAttachmentId").string(var_4.as_str());
    }
    if let Some(var_5) = &input.core_network_address {
        object.key("CoreNetworkAddress").string(var_5.as_str());
    }
    if let Some(var_6) = &input.inside_cidr_blocks {
        let mut array_7 = object.key("InsideCidrBlocks").start_array();
        for item_8 in var_6 {
            {
                array_7.value().string(item_8.as_str());
            }
        }
        array_7.finish();
    }
    if let Some(var_9) = &input.peer_address {
        object.key("PeerAddress").string(var_9.as_str());
    }
    if let Some(var_10) = &input.subnet_arn {
        object.key("SubnetArn").string(var_10.as_str());
    }
    if let Some(var_11) = &input.tags {
        let mut array_12 = object.key("Tags").start_array();
        for item_13 in var_11 {
            {
                #[allow(unused_mut)]
                let mut object_14 = array_12.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_14, item_13)?;
                object_14.finish();
            }
        }
        array_12.finish();
    }
    Ok(())
}
