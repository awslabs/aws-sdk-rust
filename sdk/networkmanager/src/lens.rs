// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_describe_global_networks_output_next_token(
    input: &crate::operation::describe_global_networks::DescribeGlobalNetworksOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_get_connect_peer_associations_output_next_token(
    input: &crate::operation::get_connect_peer_associations::GetConnectPeerAssociationsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_get_connections_output_next_token(
    input: &crate::operation::get_connections::GetConnectionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_get_core_network_change_events_output_next_token(
    input: &crate::operation::get_core_network_change_events::GetCoreNetworkChangeEventsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_get_core_network_change_set_output_next_token(
    input: &crate::operation::get_core_network_change_set::GetCoreNetworkChangeSetOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_get_customer_gateway_associations_output_next_token(
    input: &crate::operation::get_customer_gateway_associations::GetCustomerGatewayAssociationsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_get_devices_output_next_token(
    input: &crate::operation::get_devices::GetDevicesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_get_link_associations_output_next_token(
    input: &crate::operation::get_link_associations::GetLinkAssociationsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_get_links_output_next_token(
    input: &crate::operation::get_links::GetLinksOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_get_network_resource_counts_output_next_token(
    input: &crate::operation::get_network_resource_counts::GetNetworkResourceCountsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_get_network_resource_relationships_output_next_token(
    input: &crate::operation::get_network_resource_relationships::GetNetworkResourceRelationshipsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_get_network_resources_output_next_token(
    input: &crate::operation::get_network_resources::GetNetworkResourcesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_get_network_telemetry_output_next_token(
    input: &crate::operation::get_network_telemetry::GetNetworkTelemetryOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_get_sites_output_next_token(
    input: &crate::operation::get_sites::GetSitesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_get_transit_gateway_connect_peer_associations_output_next_token(
    input: &crate::operation::get_transit_gateway_connect_peer_associations::GetTransitGatewayConnectPeerAssociationsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_get_transit_gateway_registrations_output_next_token(
    input: &crate::operation::get_transit_gateway_registrations::GetTransitGatewayRegistrationsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_attachments_output_next_token(
    input: &crate::operation::list_attachments::ListAttachmentsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_connect_peers_output_next_token(
    input: &crate::operation::list_connect_peers::ListConnectPeersOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_core_network_policy_versions_output_next_token(
    input: &crate::operation::list_core_network_policy_versions::ListCoreNetworkPolicyVersionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_core_networks_output_next_token(
    input: &crate::operation::list_core_networks::ListCoreNetworksOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_peerings_output_next_token(
    input: &crate::operation::list_peerings::ListPeeringsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_global_networks_output_global_networks(
    input: crate::operation::describe_global_networks::DescribeGlobalNetworksOutput,
) -> std::option::Option<std::vec::Vec<crate::types::GlobalNetwork>> {
    let input = match input.global_networks {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_get_connect_peer_associations_output_connect_peer_associations(
    input: crate::operation::get_connect_peer_associations::GetConnectPeerAssociationsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ConnectPeerAssociation>> {
    let input = match input.connect_peer_associations {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_get_connections_output_connections(
    input: crate::operation::get_connections::GetConnectionsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::Connection>> {
    let input = match input.connections {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_get_core_network_change_events_output_core_network_change_events(
    input: crate::operation::get_core_network_change_events::GetCoreNetworkChangeEventsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::CoreNetworkChangeEvent>> {
    let input = match input.core_network_change_events {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_get_core_network_change_set_output_core_network_changes(
    input: crate::operation::get_core_network_change_set::GetCoreNetworkChangeSetOutput,
) -> std::option::Option<std::vec::Vec<crate::types::CoreNetworkChange>> {
    let input = match input.core_network_changes {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_get_customer_gateway_associations_output_customer_gateway_associations(
    input: crate::operation::get_customer_gateway_associations::GetCustomerGatewayAssociationsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::CustomerGatewayAssociation>> {
    let input = match input.customer_gateway_associations {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_get_devices_output_devices(
    input: crate::operation::get_devices::GetDevicesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::Device>> {
    let input = match input.devices {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_get_link_associations_output_link_associations(
    input: crate::operation::get_link_associations::GetLinkAssociationsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::LinkAssociation>> {
    let input = match input.link_associations {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_get_links_output_links(
    input: crate::operation::get_links::GetLinksOutput,
) -> std::option::Option<std::vec::Vec<crate::types::Link>> {
    let input = match input.links {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_get_network_resource_counts_output_network_resource_counts(
    input: crate::operation::get_network_resource_counts::GetNetworkResourceCountsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::NetworkResourceCount>> {
    let input = match input.network_resource_counts {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_get_network_resource_relationships_output_relationships(
    input: crate::operation::get_network_resource_relationships::GetNetworkResourceRelationshipsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::Relationship>> {
    let input = match input.relationships {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_get_network_resources_output_network_resources(
    input: crate::operation::get_network_resources::GetNetworkResourcesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::NetworkResource>> {
    let input = match input.network_resources {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_get_network_telemetry_output_network_telemetry(
    input: crate::operation::get_network_telemetry::GetNetworkTelemetryOutput,
) -> std::option::Option<std::vec::Vec<crate::types::NetworkTelemetry>> {
    let input = match input.network_telemetry {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_get_sites_output_sites(
    input: crate::operation::get_sites::GetSitesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::Site>> {
    let input = match input.sites {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_get_transit_gateway_connect_peer_associations_output_transit_gateway_connect_peer_associations(
    input: crate::operation::get_transit_gateway_connect_peer_associations::GetTransitGatewayConnectPeerAssociationsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::TransitGatewayConnectPeerAssociation>> {
    let input = match input.transit_gateway_connect_peer_associations {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_get_transit_gateway_registrations_output_transit_gateway_registrations(
    input: crate::operation::get_transit_gateway_registrations::GetTransitGatewayRegistrationsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::TransitGatewayRegistration>> {
    let input = match input.transit_gateway_registrations {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_attachments_output_attachments(
    input: crate::operation::list_attachments::ListAttachmentsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::Attachment>> {
    let input = match input.attachments {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_connect_peers_output_connect_peers(
    input: crate::operation::list_connect_peers::ListConnectPeersOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ConnectPeerSummary>> {
    let input = match input.connect_peers {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_core_network_policy_versions_output_core_network_policy_versions(
    input: crate::operation::list_core_network_policy_versions::ListCoreNetworkPolicyVersionsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::CoreNetworkPolicyVersion>> {
    let input = match input.core_network_policy_versions {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_core_networks_output_core_networks(
    input: crate::operation::list_core_networks::ListCoreNetworksOutput,
) -> std::option::Option<std::vec::Vec<crate::types::CoreNetworkSummary>> {
    let input = match input.core_networks {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_peerings_output_peerings(
    input: crate::operation::list_peerings::ListPeeringsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::Peering>> {
    let input = match input.peerings {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
