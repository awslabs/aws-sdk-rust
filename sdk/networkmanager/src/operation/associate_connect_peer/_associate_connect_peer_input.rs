// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AssociateConnectPeerInput {
    /// <p>The ID of your global network.</p>
    pub global_network_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the Connect peer.</p>
    pub connect_peer_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the device.</p>
    pub device_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the link.</p>
    pub link_id: ::std::option::Option<::std::string::String>,
}
impl AssociateConnectPeerInput {
    /// <p>The ID of your global network.</p>
    pub fn global_network_id(&self) -> ::std::option::Option<&str> {
        self.global_network_id.as_deref()
    }
    /// <p>The ID of the Connect peer.</p>
    pub fn connect_peer_id(&self) -> ::std::option::Option<&str> {
        self.connect_peer_id.as_deref()
    }
    /// <p>The ID of the device.</p>
    pub fn device_id(&self) -> ::std::option::Option<&str> {
        self.device_id.as_deref()
    }
    /// <p>The ID of the link.</p>
    pub fn link_id(&self) -> ::std::option::Option<&str> {
        self.link_id.as_deref()
    }
}
impl AssociateConnectPeerInput {
    /// Creates a new builder-style object to manufacture [`AssociateConnectPeerInput`](crate::operation::associate_connect_peer::AssociateConnectPeerInput).
    pub fn builder() -> crate::operation::associate_connect_peer::builders::AssociateConnectPeerInputBuilder {
        crate::operation::associate_connect_peer::builders::AssociateConnectPeerInputBuilder::default()
    }
}

/// A builder for [`AssociateConnectPeerInput`](crate::operation::associate_connect_peer::AssociateConnectPeerInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AssociateConnectPeerInputBuilder {
    pub(crate) global_network_id: ::std::option::Option<::std::string::String>,
    pub(crate) connect_peer_id: ::std::option::Option<::std::string::String>,
    pub(crate) device_id: ::std::option::Option<::std::string::String>,
    pub(crate) link_id: ::std::option::Option<::std::string::String>,
}
impl AssociateConnectPeerInputBuilder {
    /// <p>The ID of your global network.</p>
    /// This field is required.
    pub fn global_network_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.global_network_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of your global network.</p>
    pub fn set_global_network_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.global_network_id = input;
        self
    }
    /// <p>The ID of your global network.</p>
    pub fn get_global_network_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.global_network_id
    }
    /// <p>The ID of the Connect peer.</p>
    /// This field is required.
    pub fn connect_peer_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.connect_peer_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Connect peer.</p>
    pub fn set_connect_peer_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.connect_peer_id = input;
        self
    }
    /// <p>The ID of the Connect peer.</p>
    pub fn get_connect_peer_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.connect_peer_id
    }
    /// <p>The ID of the device.</p>
    /// This field is required.
    pub fn device_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.device_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the device.</p>
    pub fn set_device_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.device_id = input;
        self
    }
    /// <p>The ID of the device.</p>
    pub fn get_device_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.device_id
    }
    /// <p>The ID of the link.</p>
    pub fn link_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.link_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the link.</p>
    pub fn set_link_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.link_id = input;
        self
    }
    /// <p>The ID of the link.</p>
    pub fn get_link_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.link_id
    }
    /// Consumes the builder and constructs a [`AssociateConnectPeerInput`](crate::operation::associate_connect_peer::AssociateConnectPeerInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::associate_connect_peer::AssociateConnectPeerInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::associate_connect_peer::AssociateConnectPeerInput {
            global_network_id: self.global_network_id,
            connect_peer_id: self.connect_peer_id,
            device_id: self.device_id,
            link_id: self.link_id,
        })
    }
}
