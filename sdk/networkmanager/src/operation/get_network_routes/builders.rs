// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::get_network_routes::_get_network_routes_output::GetNetworkRoutesOutputBuilder;

pub use crate::operation::get_network_routes::_get_network_routes_input::GetNetworkRoutesInputBuilder;

/// Fluent builder constructing a request to `GetNetworkRoutes`.
///
/// <p>Gets the network routes of the specified global network.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetNetworkRoutesFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::get_network_routes::builders::GetNetworkRoutesInputBuilder,
}
impl GetNetworkRoutesFluentBuilder {
    /// Creates a new `GetNetworkRoutes`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::get_network_routes::GetNetworkRoutes,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::get_network_routes::GetNetworkRoutesError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::get_network_routes::GetNetworkRoutesOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::get_network_routes::GetNetworkRoutesError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The ID of the global network.</p>
    pub fn global_network_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.global_network_id(input.into());
        self
    }
    /// <p>The ID of the global network.</p>
    pub fn set_global_network_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_global_network_id(input);
        self
    }
    /// <p>The ID of the route table.</p>
    pub fn route_table_identifier(mut self, input: crate::types::RouteTableIdentifier) -> Self {
        self.inner = self.inner.route_table_identifier(input);
        self
    }
    /// <p>The ID of the route table.</p>
    pub fn set_route_table_identifier(
        mut self,
        input: std::option::Option<crate::types::RouteTableIdentifier>,
    ) -> Self {
        self.inner = self.inner.set_route_table_identifier(input);
        self
    }
    /// Appends an item to `ExactCidrMatches`.
    ///
    /// To override the contents of this collection use [`set_exact_cidr_matches`](Self::set_exact_cidr_matches).
    ///
    /// <p>An exact CIDR block.</p>
    pub fn exact_cidr_matches(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.exact_cidr_matches(input.into());
        self
    }
    /// <p>An exact CIDR block.</p>
    pub fn set_exact_cidr_matches(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_exact_cidr_matches(input);
        self
    }
    /// Appends an item to `LongestPrefixMatches`.
    ///
    /// To override the contents of this collection use [`set_longest_prefix_matches`](Self::set_longest_prefix_matches).
    ///
    /// <p>The most specific route that matches the traffic (longest prefix match).</p>
    pub fn longest_prefix_matches(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.longest_prefix_matches(input.into());
        self
    }
    /// <p>The most specific route that matches the traffic (longest prefix match).</p>
    pub fn set_longest_prefix_matches(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_longest_prefix_matches(input);
        self
    }
    /// Appends an item to `SubnetOfMatches`.
    ///
    /// To override the contents of this collection use [`set_subnet_of_matches`](Self::set_subnet_of_matches).
    ///
    /// <p>The routes with a subnet that match the specified CIDR filter.</p>
    pub fn subnet_of_matches(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.subnet_of_matches(input.into());
        self
    }
    /// <p>The routes with a subnet that match the specified CIDR filter.</p>
    pub fn set_subnet_of_matches(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_subnet_of_matches(input);
        self
    }
    /// Appends an item to `SupernetOfMatches`.
    ///
    /// To override the contents of this collection use [`set_supernet_of_matches`](Self::set_supernet_of_matches).
    ///
    /// <p>The routes with a CIDR that encompasses the CIDR filter. Example: If you specify 10.0.1.0/30, then the result returns 10.0.1.0/29.</p>
    pub fn supernet_of_matches(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.supernet_of_matches(input.into());
        self
    }
    /// <p>The routes with a CIDR that encompasses the CIDR filter. Example: If you specify 10.0.1.0/30, then the result returns 10.0.1.0/29.</p>
    pub fn set_supernet_of_matches(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_supernet_of_matches(input);
        self
    }
    /// Appends an item to `PrefixListIds`.
    ///
    /// To override the contents of this collection use [`set_prefix_list_ids`](Self::set_prefix_list_ids).
    ///
    /// <p>The IDs of the prefix lists.</p>
    pub fn prefix_list_ids(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.prefix_list_ids(input.into());
        self
    }
    /// <p>The IDs of the prefix lists.</p>
    pub fn set_prefix_list_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_prefix_list_ids(input);
        self
    }
    /// Appends an item to `States`.
    ///
    /// To override the contents of this collection use [`set_states`](Self::set_states).
    ///
    /// <p>The route states.</p>
    pub fn states(mut self, input: crate::types::RouteState) -> Self {
        self.inner = self.inner.states(input);
        self
    }
    /// <p>The route states.</p>
    pub fn set_states(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::RouteState>>,
    ) -> Self {
        self.inner = self.inner.set_states(input);
        self
    }
    /// Appends an item to `Types`.
    ///
    /// To override the contents of this collection use [`set_types`](Self::set_types).
    ///
    /// <p>The route types.</p>
    pub fn types(mut self, input: crate::types::RouteType) -> Self {
        self.inner = self.inner.types(input);
        self
    }
    /// <p>The route types.</p>
    pub fn set_types(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::RouteType>>,
    ) -> Self {
        self.inner = self.inner.set_types(input);
        self
    }
    /// Adds a key-value pair to `DestinationFilters`.
    ///
    /// To override the contents of this collection use [`set_destination_filters`](Self::set_destination_filters).
    ///
    /// <p>Filter by route table destination. Possible Values: TRANSIT_GATEWAY_ATTACHMENT_ID, RESOURCE_ID, or RESOURCE_TYPE.</p>
    pub fn destination_filters(
        mut self,
        k: impl Into<std::string::String>,
        v: std::vec::Vec<std::string::String>,
    ) -> Self {
        self.inner = self.inner.destination_filters(k.into(), v);
        self
    }
    /// <p>Filter by route table destination. Possible Values: TRANSIT_GATEWAY_ATTACHMENT_ID, RESOURCE_ID, or RESOURCE_TYPE.</p>
    pub fn set_destination_filters(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::vec::Vec<std::string::String>>,
        >,
    ) -> Self {
        self.inner = self.inner.set_destination_filters(input);
        self
    }
}
