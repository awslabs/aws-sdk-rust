// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_connect_attachment::_create_connect_attachment_output::CreateConnectAttachmentOutputBuilder;

pub use crate::operation::create_connect_attachment::_create_connect_attachment_input::CreateConnectAttachmentInputBuilder;

/// Fluent builder constructing a request to `CreateConnectAttachment`.
///
/// <p>Creates a core network Connect attachment from a specified core network attachment. </p>
/// <p>A core network Connect attachment is a GRE-based tunnel attachment that you can use to establish a connection between a core network and an appliance. A core network Connect attachment uses an existing VPC attachment as the underlying transport mechanism.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateConnectAttachmentFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner:
        crate::operation::create_connect_attachment::builders::CreateConnectAttachmentInputBuilder,
}
impl CreateConnectAttachmentFluentBuilder {
    /// Creates a new `CreateConnectAttachment`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::create_connect_attachment::CreateConnectAttachment,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::create_connect_attachment::CreateConnectAttachmentError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::create_connect_attachment::CreateConnectAttachmentOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::create_connect_attachment::CreateConnectAttachmentError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The ID of a core network where you want to create the attachment. </p>
    pub fn core_network_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.core_network_id(input.into());
        self
    }
    /// <p>The ID of a core network where you want to create the attachment. </p>
    pub fn set_core_network_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_core_network_id(input);
        self
    }
    /// <p>The Region where the edge is located.</p>
    pub fn edge_location(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.edge_location(input.into());
        self
    }
    /// <p>The Region where the edge is located.</p>
    pub fn set_edge_location(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_edge_location(input);
        self
    }
    /// <p>The ID of the attachment between the two connections.</p>
    pub fn transport_attachment_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.transport_attachment_id(input.into());
        self
    }
    /// <p>The ID of the attachment between the two connections.</p>
    pub fn set_transport_attachment_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_transport_attachment_id(input);
        self
    }
    /// <p>Options for creating an attachment.</p>
    pub fn options(mut self, input: crate::types::ConnectAttachmentOptions) -> Self {
        self.inner = self.inner.options(input);
        self
    }
    /// <p>Options for creating an attachment.</p>
    pub fn set_options(
        mut self,
        input: std::option::Option<crate::types::ConnectAttachmentOptions>,
    ) -> Self {
        self.inner = self.inner.set_options(input);
        self
    }
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The list of key-value tags associated with the request.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>The list of key-value tags associated with the request.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>The client token associated with the request.</p>
    pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <p>The client token associated with the request.</p>
    pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
}
