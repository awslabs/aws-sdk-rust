// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetSitesInput {
    /// <p>The ID of the global network.</p>
    #[doc(hidden)]
    pub global_network_id: std::option::Option<std::string::String>,
    /// <p>One or more site IDs. The maximum is 10.</p>
    #[doc(hidden)]
    pub site_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The maximum number of results to return.</p>
    #[doc(hidden)]
    pub max_results: std::option::Option<i32>,
    /// <p>The token for the next page of results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
}
impl GetSitesInput {
    /// <p>The ID of the global network.</p>
    pub fn global_network_id(&self) -> std::option::Option<&str> {
        self.global_network_id.as_deref()
    }
    /// <p>One or more site IDs. The maximum is 10.</p>
    pub fn site_ids(&self) -> std::option::Option<&[std::string::String]> {
        self.site_ids.as_deref()
    }
    /// <p>The maximum number of results to return.</p>
    pub fn max_results(&self) -> std::option::Option<i32> {
        self.max_results
    }
    /// <p>The token for the next page of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl GetSitesInput {
    /// Creates a new builder-style object to manufacture [`GetSitesInput`](crate::operation::get_sites::GetSitesInput).
    pub fn builder() -> crate::operation::get_sites::builders::GetSitesInputBuilder {
        crate::operation::get_sites::builders::GetSitesInputBuilder::default()
    }
}

/// A builder for [`GetSitesInput`](crate::operation::get_sites::GetSitesInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetSitesInputBuilder {
    pub(crate) global_network_id: std::option::Option<std::string::String>,
    pub(crate) site_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) max_results: std::option::Option<i32>,
    pub(crate) next_token: std::option::Option<std::string::String>,
}
impl GetSitesInputBuilder {
    /// <p>The ID of the global network.</p>
    pub fn global_network_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.global_network_id = Some(input.into());
        self
    }
    /// <p>The ID of the global network.</p>
    pub fn set_global_network_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.global_network_id = input;
        self
    }
    /// Appends an item to `site_ids`.
    ///
    /// To override the contents of this collection use [`set_site_ids`](Self::set_site_ids).
    ///
    /// <p>One or more site IDs. The maximum is 10.</p>
    pub fn site_ids(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.site_ids.unwrap_or_default();
        v.push(input.into());
        self.site_ids = Some(v);
        self
    }
    /// <p>One or more site IDs. The maximum is 10.</p>
    pub fn set_site_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.site_ids = input;
        self
    }
    /// <p>The maximum number of results to return.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// <p>The maximum number of results to return.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The token for the next page of results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>The token for the next page of results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// Consumes the builder and constructs a [`GetSitesInput`](crate::operation::get_sites::GetSitesInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::get_sites::GetSitesInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::get_sites::GetSitesInput {
            global_network_id: self.global_network_id,
            site_ids: self.site_ids,
            max_results: self.max_results,
            next_token: self.next_token,
        })
    }
}
