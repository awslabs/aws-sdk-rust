// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_connect_peer::_create_connect_peer_output::CreateConnectPeerOutputBuilder;

pub use crate::operation::create_connect_peer::_create_connect_peer_input::CreateConnectPeerInputBuilder;

/// Fluent builder constructing a request to `CreateConnectPeer`.
///
/// <p>Creates a core network Connect peer for a specified core network connect attachment between a core network and an appliance. The peer address and transit gateway address must be the same IP address family (IPv4 or IPv6).</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateConnectPeerFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_connect_peer::builders::CreateConnectPeerInputBuilder,
}
impl CreateConnectPeerFluentBuilder {
    /// Creates a new `CreateConnectPeer`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::create_connect_peer::CreateConnectPeer,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::create_connect_peer::CreateConnectPeerError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::create_connect_peer::CreateConnectPeerOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::create_connect_peer::CreateConnectPeerError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The ID of the connection attachment.</p>
    pub fn connect_attachment_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.connect_attachment_id(input.into());
        self
    }
    /// <p>The ID of the connection attachment.</p>
    pub fn set_connect_attachment_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_connect_attachment_id(input);
        self
    }
    /// <p>A Connect peer core network address.</p>
    pub fn core_network_address(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.core_network_address(input.into());
        self
    }
    /// <p>A Connect peer core network address.</p>
    pub fn set_core_network_address(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_core_network_address(input);
        self
    }
    /// <p>The Connect peer address.</p>
    pub fn peer_address(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.peer_address(input.into());
        self
    }
    /// <p>The Connect peer address.</p>
    pub fn set_peer_address(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_peer_address(input);
        self
    }
    /// <p>The Connect peer BGP options.</p>
    pub fn bgp_options(mut self, input: crate::types::BgpOptions) -> Self {
        self.inner = self.inner.bgp_options(input);
        self
    }
    /// <p>The Connect peer BGP options.</p>
    pub fn set_bgp_options(mut self, input: std::option::Option<crate::types::BgpOptions>) -> Self {
        self.inner = self.inner.set_bgp_options(input);
        self
    }
    /// Appends an item to `InsideCidrBlocks`.
    ///
    /// To override the contents of this collection use [`set_inside_cidr_blocks`](Self::set_inside_cidr_blocks).
    ///
    /// <p>The inside IP addresses used for BGP peering.</p>
    pub fn inside_cidr_blocks(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.inside_cidr_blocks(input.into());
        self
    }
    /// <p>The inside IP addresses used for BGP peering.</p>
    pub fn set_inside_cidr_blocks(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_inside_cidr_blocks(input);
        self
    }
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags associated with the peer request.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>The tags associated with the peer request.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>The client token associated with the request.</p>
    pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <p>The client token associated with the request.</p>
    pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
}
