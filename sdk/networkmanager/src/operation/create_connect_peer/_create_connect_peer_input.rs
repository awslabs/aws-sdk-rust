// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateConnectPeerInput {
    /// <p>The ID of the connection attachment.</p>
    #[doc(hidden)]
    pub connect_attachment_id: std::option::Option<std::string::String>,
    /// <p>A Connect peer core network address.</p>
    #[doc(hidden)]
    pub core_network_address: std::option::Option<std::string::String>,
    /// <p>The Connect peer address.</p>
    #[doc(hidden)]
    pub peer_address: std::option::Option<std::string::String>,
    /// <p>The Connect peer BGP options.</p>
    #[doc(hidden)]
    pub bgp_options: std::option::Option<crate::types::BgpOptions>,
    /// <p>The inside IP addresses used for BGP peering.</p>
    #[doc(hidden)]
    pub inside_cidr_blocks: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The tags associated with the peer request.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    /// <p>The client token associated with the request.</p>
    #[doc(hidden)]
    pub client_token: std::option::Option<std::string::String>,
}
impl CreateConnectPeerInput {
    /// <p>The ID of the connection attachment.</p>
    pub fn connect_attachment_id(&self) -> std::option::Option<&str> {
        self.connect_attachment_id.as_deref()
    }
    /// <p>A Connect peer core network address.</p>
    pub fn core_network_address(&self) -> std::option::Option<&str> {
        self.core_network_address.as_deref()
    }
    /// <p>The Connect peer address.</p>
    pub fn peer_address(&self) -> std::option::Option<&str> {
        self.peer_address.as_deref()
    }
    /// <p>The Connect peer BGP options.</p>
    pub fn bgp_options(&self) -> std::option::Option<&crate::types::BgpOptions> {
        self.bgp_options.as_ref()
    }
    /// <p>The inside IP addresses used for BGP peering.</p>
    pub fn inside_cidr_blocks(&self) -> std::option::Option<&[std::string::String]> {
        self.inside_cidr_blocks.as_deref()
    }
    /// <p>The tags associated with the peer request.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::types::Tag]> {
        self.tags.as_deref()
    }
    /// <p>The client token associated with the request.</p>
    pub fn client_token(&self) -> std::option::Option<&str> {
        self.client_token.as_deref()
    }
}
impl CreateConnectPeerInput {
    /// Creates a new builder-style object to manufacture [`CreateConnectPeerInput`](crate::operation::create_connect_peer::CreateConnectPeerInput).
    pub fn builder(
    ) -> crate::operation::create_connect_peer::builders::CreateConnectPeerInputBuilder {
        crate::operation::create_connect_peer::builders::CreateConnectPeerInputBuilder::default()
    }
}

/// A builder for [`CreateConnectPeerInput`](crate::operation::create_connect_peer::CreateConnectPeerInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateConnectPeerInputBuilder {
    pub(crate) connect_attachment_id: std::option::Option<std::string::String>,
    pub(crate) core_network_address: std::option::Option<std::string::String>,
    pub(crate) peer_address: std::option::Option<std::string::String>,
    pub(crate) bgp_options: std::option::Option<crate::types::BgpOptions>,
    pub(crate) inside_cidr_blocks: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    pub(crate) client_token: std::option::Option<std::string::String>,
}
impl CreateConnectPeerInputBuilder {
    /// <p>The ID of the connection attachment.</p>
    pub fn connect_attachment_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.connect_attachment_id = Some(input.into());
        self
    }
    /// <p>The ID of the connection attachment.</p>
    pub fn set_connect_attachment_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.connect_attachment_id = input;
        self
    }
    /// <p>A Connect peer core network address.</p>
    pub fn core_network_address(mut self, input: impl Into<std::string::String>) -> Self {
        self.core_network_address = Some(input.into());
        self
    }
    /// <p>A Connect peer core network address.</p>
    pub fn set_core_network_address(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.core_network_address = input;
        self
    }
    /// <p>The Connect peer address.</p>
    pub fn peer_address(mut self, input: impl Into<std::string::String>) -> Self {
        self.peer_address = Some(input.into());
        self
    }
    /// <p>The Connect peer address.</p>
    pub fn set_peer_address(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.peer_address = input;
        self
    }
    /// <p>The Connect peer BGP options.</p>
    pub fn bgp_options(mut self, input: crate::types::BgpOptions) -> Self {
        self.bgp_options = Some(input);
        self
    }
    /// <p>The Connect peer BGP options.</p>
    pub fn set_bgp_options(mut self, input: std::option::Option<crate::types::BgpOptions>) -> Self {
        self.bgp_options = input;
        self
    }
    /// Appends an item to `inside_cidr_blocks`.
    ///
    /// To override the contents of this collection use [`set_inside_cidr_blocks`](Self::set_inside_cidr_blocks).
    ///
    /// <p>The inside IP addresses used for BGP peering.</p>
    pub fn inside_cidr_blocks(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.inside_cidr_blocks.unwrap_or_default();
        v.push(input.into());
        self.inside_cidr_blocks = Some(v);
        self
    }
    /// <p>The inside IP addresses used for BGP peering.</p>
    pub fn set_inside_cidr_blocks(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inside_cidr_blocks = input;
        self
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags associated with the peer request.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = Some(v);
        self
    }
    /// <p>The tags associated with the peer request.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.tags = input;
        self
    }
    /// <p>The client token associated with the request.</p>
    pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.client_token = Some(input.into());
        self
    }
    /// <p>The client token associated with the request.</p>
    pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateConnectPeerInput`](crate::operation::create_connect_peer::CreateConnectPeerInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_connect_peer::CreateConnectPeerInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::create_connect_peer::CreateConnectPeerInput {
                connect_attachment_id: self.connect_attachment_id,
                core_network_address: self.core_network_address,
                peer_address: self.peer_address,
                bgp_options: self.bgp_options,
                inside_cidr_blocks: self.inside_cidr_blocks,
                tags: self.tags,
                client_token: self.client_token,
            },
        )
    }
}
