// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PutCoreNetworkPolicyInput {
    /// <p>The ID of a core network.</p>
    pub core_network_id: ::std::option::Option<::std::string::String>,
    /// <p>The policy document.</p>
    pub policy_document: ::std::option::Option<::std::string::String>,
    /// <p>a core network policy description.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The ID of a core network policy. </p>
    pub latest_version_id: ::std::option::Option<i32>,
    /// <p>The client token associated with the request.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
}
impl PutCoreNetworkPolicyInput {
    /// <p>The ID of a core network.</p>
    pub fn core_network_id(&self) -> ::std::option::Option<&str> {
        self.core_network_id.as_deref()
    }
    /// <p>The policy document.</p>
    pub fn policy_document(&self) -> ::std::option::Option<&str> {
        self.policy_document.as_deref()
    }
    /// <p>a core network policy description.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The ID of a core network policy. </p>
    pub fn latest_version_id(&self) -> ::std::option::Option<i32> {
        self.latest_version_id
    }
    /// <p>The client token associated with the request.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
}
impl PutCoreNetworkPolicyInput {
    /// Creates a new builder-style object to manufacture [`PutCoreNetworkPolicyInput`](crate::operation::put_core_network_policy::PutCoreNetworkPolicyInput).
    pub fn builder() -> crate::operation::put_core_network_policy::builders::PutCoreNetworkPolicyInputBuilder {
        crate::operation::put_core_network_policy::builders::PutCoreNetworkPolicyInputBuilder::default()
    }
}

/// A builder for [`PutCoreNetworkPolicyInput`](crate::operation::put_core_network_policy::PutCoreNetworkPolicyInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PutCoreNetworkPolicyInputBuilder {
    pub(crate) core_network_id: ::std::option::Option<::std::string::String>,
    pub(crate) policy_document: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) latest_version_id: ::std::option::Option<i32>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
}
impl PutCoreNetworkPolicyInputBuilder {
    /// <p>The ID of a core network.</p>
    /// This field is required.
    pub fn core_network_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.core_network_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of a core network.</p>
    pub fn set_core_network_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.core_network_id = input;
        self
    }
    /// <p>The ID of a core network.</p>
    pub fn get_core_network_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.core_network_id
    }
    /// <p>The policy document.</p>
    /// This field is required.
    pub fn policy_document(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.policy_document = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The policy document.</p>
    pub fn set_policy_document(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.policy_document = input;
        self
    }
    /// <p>The policy document.</p>
    pub fn get_policy_document(&self) -> &::std::option::Option<::std::string::String> {
        &self.policy_document
    }
    /// <p>a core network policy description.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>a core network policy description.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>a core network policy description.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The ID of a core network policy. </p>
    pub fn latest_version_id(mut self, input: i32) -> Self {
        self.latest_version_id = ::std::option::Option::Some(input);
        self
    }
    /// <p>The ID of a core network policy. </p>
    pub fn set_latest_version_id(mut self, input: ::std::option::Option<i32>) -> Self {
        self.latest_version_id = input;
        self
    }
    /// <p>The ID of a core network policy. </p>
    pub fn get_latest_version_id(&self) -> &::std::option::Option<i32> {
        &self.latest_version_id
    }
    /// <p>The client token associated with the request.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The client token associated with the request.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>The client token associated with the request.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// Consumes the builder and constructs a [`PutCoreNetworkPolicyInput`](crate::operation::put_core_network_policy::PutCoreNetworkPolicyInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::put_core_network_policy::PutCoreNetworkPolicyInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::put_core_network_policy::PutCoreNetworkPolicyInput {
            core_network_id: self.core_network_id,
            policy_document: self.policy_document,
            description: self.description,
            latest_version_id: self.latest_version_id,
            client_token: self.client_token,
        })
    }
}
