// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AssociateCustomerGatewayInput {
    /// <p>The Amazon Resource Name (ARN) of the customer gateway.</p>
    pub customer_gateway_arn: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the global network.</p>
    pub global_network_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the device.</p>
    pub device_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the link.</p>
    pub link_id: ::std::option::Option<::std::string::String>,
}
impl AssociateCustomerGatewayInput {
    /// <p>The Amazon Resource Name (ARN) of the customer gateway.</p>
    pub fn customer_gateway_arn(&self) -> ::std::option::Option<&str> {
        self.customer_gateway_arn.as_deref()
    }
    /// <p>The ID of the global network.</p>
    pub fn global_network_id(&self) -> ::std::option::Option<&str> {
        self.global_network_id.as_deref()
    }
    /// <p>The ID of the device.</p>
    pub fn device_id(&self) -> ::std::option::Option<&str> {
        self.device_id.as_deref()
    }
    /// <p>The ID of the link.</p>
    pub fn link_id(&self) -> ::std::option::Option<&str> {
        self.link_id.as_deref()
    }
}
impl AssociateCustomerGatewayInput {
    /// Creates a new builder-style object to manufacture [`AssociateCustomerGatewayInput`](crate::operation::associate_customer_gateway::AssociateCustomerGatewayInput).
    pub fn builder() -> crate::operation::associate_customer_gateway::builders::AssociateCustomerGatewayInputBuilder {
        crate::operation::associate_customer_gateway::builders::AssociateCustomerGatewayInputBuilder::default()
    }
}

/// A builder for [`AssociateCustomerGatewayInput`](crate::operation::associate_customer_gateway::AssociateCustomerGatewayInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AssociateCustomerGatewayInputBuilder {
    pub(crate) customer_gateway_arn: ::std::option::Option<::std::string::String>,
    pub(crate) global_network_id: ::std::option::Option<::std::string::String>,
    pub(crate) device_id: ::std::option::Option<::std::string::String>,
    pub(crate) link_id: ::std::option::Option<::std::string::String>,
}
impl AssociateCustomerGatewayInputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the customer gateway.</p>
    /// This field is required.
    pub fn customer_gateway_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.customer_gateway_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the customer gateway.</p>
    pub fn set_customer_gateway_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.customer_gateway_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the customer gateway.</p>
    pub fn get_customer_gateway_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.customer_gateway_arn
    }
    /// <p>The ID of the global network.</p>
    /// This field is required.
    pub fn global_network_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.global_network_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the global network.</p>
    pub fn set_global_network_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.global_network_id = input;
        self
    }
    /// <p>The ID of the global network.</p>
    pub fn get_global_network_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.global_network_id
    }
    /// <p>The ID of the device.</p>
    /// This field is required.
    pub fn device_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.device_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the device.</p>
    pub fn set_device_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.device_id = input;
        self
    }
    /// <p>The ID of the device.</p>
    pub fn get_device_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.device_id
    }
    /// <p>The ID of the link.</p>
    pub fn link_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.link_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the link.</p>
    pub fn set_link_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.link_id = input;
        self
    }
    /// <p>The ID of the link.</p>
    pub fn get_link_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.link_id
    }
    /// Consumes the builder and constructs a [`AssociateCustomerGatewayInput`](crate::operation::associate_customer_gateway::AssociateCustomerGatewayInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::associate_customer_gateway::AssociateCustomerGatewayInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::associate_customer_gateway::AssociateCustomerGatewayInput {
            customer_gateway_arn: self.customer_gateway_arn,
            global_network_id: self.global_network_id,
            device_id: self.device_id,
            link_id: self.link_id,
        })
    }
}
