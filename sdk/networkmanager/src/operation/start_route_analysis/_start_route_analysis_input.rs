// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StartRouteAnalysisInput {
    /// <p>The ID of the global network.</p>
    #[doc(hidden)]
    pub global_network_id: std::option::Option<std::string::String>,
    /// <p>The source from which traffic originates.</p>
    #[doc(hidden)]
    pub source: std::option::Option<crate::types::RouteAnalysisEndpointOptionsSpecification>,
    /// <p>The destination.</p>
    #[doc(hidden)]
    pub destination: std::option::Option<crate::types::RouteAnalysisEndpointOptionsSpecification>,
    /// <p>Indicates whether to analyze the return path. The default is <code>false</code>.</p>
    #[doc(hidden)]
    pub include_return_path: bool,
    /// <p>Indicates whether to include the location of middlebox appliances in the route analysis. The default is <code>false</code>.</p>
    #[doc(hidden)]
    pub use_middleboxes: bool,
}
impl StartRouteAnalysisInput {
    /// <p>The ID of the global network.</p>
    pub fn global_network_id(&self) -> std::option::Option<&str> {
        self.global_network_id.as_deref()
    }
    /// <p>The source from which traffic originates.</p>
    pub fn source(
        &self,
    ) -> std::option::Option<&crate::types::RouteAnalysisEndpointOptionsSpecification> {
        self.source.as_ref()
    }
    /// <p>The destination.</p>
    pub fn destination(
        &self,
    ) -> std::option::Option<&crate::types::RouteAnalysisEndpointOptionsSpecification> {
        self.destination.as_ref()
    }
    /// <p>Indicates whether to analyze the return path. The default is <code>false</code>.</p>
    pub fn include_return_path(&self) -> bool {
        self.include_return_path
    }
    /// <p>Indicates whether to include the location of middlebox appliances in the route analysis. The default is <code>false</code>.</p>
    pub fn use_middleboxes(&self) -> bool {
        self.use_middleboxes
    }
}
impl StartRouteAnalysisInput {
    /// Creates a new builder-style object to manufacture [`StartRouteAnalysisInput`](crate::operation::start_route_analysis::StartRouteAnalysisInput).
    pub fn builder(
    ) -> crate::operation::start_route_analysis::builders::StartRouteAnalysisInputBuilder {
        crate::operation::start_route_analysis::builders::StartRouteAnalysisInputBuilder::default()
    }
}

/// A builder for [`StartRouteAnalysisInput`](crate::operation::start_route_analysis::StartRouteAnalysisInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct StartRouteAnalysisInputBuilder {
    pub(crate) global_network_id: std::option::Option<std::string::String>,
    pub(crate) source: std::option::Option<crate::types::RouteAnalysisEndpointOptionsSpecification>,
    pub(crate) destination:
        std::option::Option<crate::types::RouteAnalysisEndpointOptionsSpecification>,
    pub(crate) include_return_path: std::option::Option<bool>,
    pub(crate) use_middleboxes: std::option::Option<bool>,
}
impl StartRouteAnalysisInputBuilder {
    /// <p>The ID of the global network.</p>
    pub fn global_network_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.global_network_id = Some(input.into());
        self
    }
    /// <p>The ID of the global network.</p>
    pub fn set_global_network_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.global_network_id = input;
        self
    }
    /// <p>The source from which traffic originates.</p>
    pub fn source(
        mut self,
        input: crate::types::RouteAnalysisEndpointOptionsSpecification,
    ) -> Self {
        self.source = Some(input);
        self
    }
    /// <p>The source from which traffic originates.</p>
    pub fn set_source(
        mut self,
        input: std::option::Option<crate::types::RouteAnalysisEndpointOptionsSpecification>,
    ) -> Self {
        self.source = input;
        self
    }
    /// <p>The destination.</p>
    pub fn destination(
        mut self,
        input: crate::types::RouteAnalysisEndpointOptionsSpecification,
    ) -> Self {
        self.destination = Some(input);
        self
    }
    /// <p>The destination.</p>
    pub fn set_destination(
        mut self,
        input: std::option::Option<crate::types::RouteAnalysisEndpointOptionsSpecification>,
    ) -> Self {
        self.destination = input;
        self
    }
    /// <p>Indicates whether to analyze the return path. The default is <code>false</code>.</p>
    pub fn include_return_path(mut self, input: bool) -> Self {
        self.include_return_path = Some(input);
        self
    }
    /// <p>Indicates whether to analyze the return path. The default is <code>false</code>.</p>
    pub fn set_include_return_path(mut self, input: std::option::Option<bool>) -> Self {
        self.include_return_path = input;
        self
    }
    /// <p>Indicates whether to include the location of middlebox appliances in the route analysis. The default is <code>false</code>.</p>
    pub fn use_middleboxes(mut self, input: bool) -> Self {
        self.use_middleboxes = Some(input);
        self
    }
    /// <p>Indicates whether to include the location of middlebox appliances in the route analysis. The default is <code>false</code>.</p>
    pub fn set_use_middleboxes(mut self, input: std::option::Option<bool>) -> Self {
        self.use_middleboxes = input;
        self
    }
    /// Consumes the builder and constructs a [`StartRouteAnalysisInput`](crate::operation::start_route_analysis::StartRouteAnalysisInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::start_route_analysis::StartRouteAnalysisInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::start_route_analysis::StartRouteAnalysisInput {
                global_network_id: self.global_network_id,
                source: self.source,
                destination: self.destination,
                include_return_path: self.include_return_path.unwrap_or_default(),
                use_middleboxes: self.use_middleboxes.unwrap_or_default(),
            },
        )
    }
}
