// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListAttachmentsInput {
    /// <p>The ID of a core network.</p>
    #[doc(hidden)]
    pub core_network_id: std::option::Option<std::string::String>,
    /// <p>The type of attachment.</p>
    #[doc(hidden)]
    pub attachment_type: std::option::Option<crate::types::AttachmentType>,
    /// <p>The Region where the edge is located.</p>
    #[doc(hidden)]
    pub edge_location: std::option::Option<std::string::String>,
    /// <p>The state of the attachment.</p>
    #[doc(hidden)]
    pub state: std::option::Option<crate::types::AttachmentState>,
    /// <p>The maximum number of results to return.</p>
    #[doc(hidden)]
    pub max_results: std::option::Option<i32>,
    /// <p>The token for the next page of results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
}
impl ListAttachmentsInput {
    /// <p>The ID of a core network.</p>
    pub fn core_network_id(&self) -> std::option::Option<&str> {
        self.core_network_id.as_deref()
    }
    /// <p>The type of attachment.</p>
    pub fn attachment_type(&self) -> std::option::Option<&crate::types::AttachmentType> {
        self.attachment_type.as_ref()
    }
    /// <p>The Region where the edge is located.</p>
    pub fn edge_location(&self) -> std::option::Option<&str> {
        self.edge_location.as_deref()
    }
    /// <p>The state of the attachment.</p>
    pub fn state(&self) -> std::option::Option<&crate::types::AttachmentState> {
        self.state.as_ref()
    }
    /// <p>The maximum number of results to return.</p>
    pub fn max_results(&self) -> std::option::Option<i32> {
        self.max_results
    }
    /// <p>The token for the next page of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ListAttachmentsInput {
    /// Creates a new builder-style object to manufacture [`ListAttachmentsInput`](crate::operation::list_attachments::ListAttachmentsInput).
    pub fn builder() -> crate::operation::list_attachments::builders::ListAttachmentsInputBuilder {
        crate::operation::list_attachments::builders::ListAttachmentsInputBuilder::default()
    }
}

/// A builder for [`ListAttachmentsInput`](crate::operation::list_attachments::ListAttachmentsInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListAttachmentsInputBuilder {
    pub(crate) core_network_id: std::option::Option<std::string::String>,
    pub(crate) attachment_type: std::option::Option<crate::types::AttachmentType>,
    pub(crate) edge_location: std::option::Option<std::string::String>,
    pub(crate) state: std::option::Option<crate::types::AttachmentState>,
    pub(crate) max_results: std::option::Option<i32>,
    pub(crate) next_token: std::option::Option<std::string::String>,
}
impl ListAttachmentsInputBuilder {
    /// <p>The ID of a core network.</p>
    pub fn core_network_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.core_network_id = Some(input.into());
        self
    }
    /// <p>The ID of a core network.</p>
    pub fn set_core_network_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.core_network_id = input;
        self
    }
    /// <p>The type of attachment.</p>
    pub fn attachment_type(mut self, input: crate::types::AttachmentType) -> Self {
        self.attachment_type = Some(input);
        self
    }
    /// <p>The type of attachment.</p>
    pub fn set_attachment_type(
        mut self,
        input: std::option::Option<crate::types::AttachmentType>,
    ) -> Self {
        self.attachment_type = input;
        self
    }
    /// <p>The Region where the edge is located.</p>
    pub fn edge_location(mut self, input: impl Into<std::string::String>) -> Self {
        self.edge_location = Some(input.into());
        self
    }
    /// <p>The Region where the edge is located.</p>
    pub fn set_edge_location(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.edge_location = input;
        self
    }
    /// <p>The state of the attachment.</p>
    pub fn state(mut self, input: crate::types::AttachmentState) -> Self {
        self.state = Some(input);
        self
    }
    /// <p>The state of the attachment.</p>
    pub fn set_state(mut self, input: std::option::Option<crate::types::AttachmentState>) -> Self {
        self.state = input;
        self
    }
    /// <p>The maximum number of results to return.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// <p>The maximum number of results to return.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The token for the next page of results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>The token for the next page of results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// Consumes the builder and constructs a [`ListAttachmentsInput`](crate::operation::list_attachments::ListAttachmentsInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::list_attachments::ListAttachmentsInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::list_attachments::ListAttachmentsInput {
            core_network_id: self.core_network_id,
            attachment_type: self.attachment_type,
            edge_location: self.edge_location,
            state: self.state,
            max_results: self.max_results,
            next_token: self.next_token,
        })
    }
}
