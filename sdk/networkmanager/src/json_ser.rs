// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_associate_customer_gateway_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateCustomerGatewayInput,
) {
    if let Some(var_1) = &input.customer_gateway_arn {
        object.key("CustomerGatewayArn").string(var_1);
    }
    if let Some(var_2) = &input.device_id {
        object.key("DeviceId").string(var_2);
    }
    if let Some(var_3) = &input.link_id {
        object.key("LinkId").string(var_3);
    }
}

pub fn serialize_structure_associate_link_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateLinkInput,
) {
    if let Some(var_4) = &input.device_id {
        object.key("DeviceId").string(var_4);
    }
    if let Some(var_5) = &input.link_id {
        object.key("LinkId").string(var_5);
    }
}

pub fn serialize_structure_associate_transit_gateway_connect_peer_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateTransitGatewayConnectPeerInput,
) {
    if let Some(var_6) = &input.device_id {
        object.key("DeviceId").string(var_6);
    }
    if let Some(var_7) = &input.link_id {
        object.key("LinkId").string(var_7);
    }
    if let Some(var_8) = &input.transit_gateway_connect_peer_arn {
        object.key("TransitGatewayConnectPeerArn").string(var_8);
    }
}

pub fn serialize_structure_create_connection_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateConnectionInput,
) {
    if let Some(var_9) = &input.connected_device_id {
        object.key("ConnectedDeviceId").string(var_9);
    }
    if let Some(var_10) = &input.connected_link_id {
        object.key("ConnectedLinkId").string(var_10);
    }
    if let Some(var_11) = &input.description {
        object.key("Description").string(var_11);
    }
    if let Some(var_12) = &input.device_id {
        object.key("DeviceId").string(var_12);
    }
    if let Some(var_13) = &input.link_id {
        object.key("LinkId").string(var_13);
    }
    if let Some(var_14) = &input.tags {
        let mut array_15 = object.key("Tags").start_array();
        for item_16 in var_14 {
            {
                let mut object_17 = array_15.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_17, item_16);
                object_17.finish();
            }
        }
        array_15.finish();
    }
}

pub fn serialize_structure_create_device_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDeviceInput,
) {
    if let Some(var_18) = &input.aws_location {
        let mut object_19 = object.key("AWSLocation").start_object();
        crate::json_ser::serialize_structure_aws_location(&mut object_19, var_18);
        object_19.finish();
    }
    if let Some(var_20) = &input.description {
        object.key("Description").string(var_20);
    }
    if let Some(var_21) = &input.location {
        let mut object_22 = object.key("Location").start_object();
        crate::json_ser::serialize_structure_location(&mut object_22, var_21);
        object_22.finish();
    }
    if let Some(var_23) = &input.model {
        object.key("Model").string(var_23);
    }
    if let Some(var_24) = &input.serial_number {
        object.key("SerialNumber").string(var_24);
    }
    if let Some(var_25) = &input.site_id {
        object.key("SiteId").string(var_25);
    }
    if let Some(var_26) = &input.tags {
        let mut array_27 = object.key("Tags").start_array();
        for item_28 in var_26 {
            {
                let mut object_29 = array_27.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_29, item_28);
                object_29.finish();
            }
        }
        array_27.finish();
    }
    if let Some(var_30) = &input.r#type {
        object.key("Type").string(var_30);
    }
    if let Some(var_31) = &input.vendor {
        object.key("Vendor").string(var_31);
    }
}

pub fn serialize_structure_create_global_network_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateGlobalNetworkInput,
) {
    if let Some(var_32) = &input.description {
        object.key("Description").string(var_32);
    }
    if let Some(var_33) = &input.tags {
        let mut array_34 = object.key("Tags").start_array();
        for item_35 in var_33 {
            {
                let mut object_36 = array_34.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_36, item_35);
                object_36.finish();
            }
        }
        array_34.finish();
    }
}

pub fn serialize_structure_create_link_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateLinkInput,
) {
    if let Some(var_37) = &input.bandwidth {
        let mut object_38 = object.key("Bandwidth").start_object();
        crate::json_ser::serialize_structure_bandwidth(&mut object_38, var_37);
        object_38.finish();
    }
    if let Some(var_39) = &input.description {
        object.key("Description").string(var_39);
    }
    if let Some(var_40) = &input.provider {
        object.key("Provider").string(var_40);
    }
    if let Some(var_41) = &input.site_id {
        object.key("SiteId").string(var_41);
    }
    if let Some(var_42) = &input.tags {
        let mut array_43 = object.key("Tags").start_array();
        for item_44 in var_42 {
            {
                let mut object_45 = array_43.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_45, item_44);
                object_45.finish();
            }
        }
        array_43.finish();
    }
    if let Some(var_46) = &input.r#type {
        object.key("Type").string(var_46);
    }
}

pub fn serialize_structure_create_site_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateSiteInput,
) {
    if let Some(var_47) = &input.description {
        object.key("Description").string(var_47);
    }
    if let Some(var_48) = &input.location {
        let mut object_49 = object.key("Location").start_object();
        crate::json_ser::serialize_structure_location(&mut object_49, var_48);
        object_49.finish();
    }
    if let Some(var_50) = &input.tags {
        let mut array_51 = object.key("Tags").start_array();
        for item_52 in var_50 {
            {
                let mut object_53 = array_51.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_53, item_52);
                object_53.finish();
            }
        }
        array_51.finish();
    }
}

pub fn serialize_structure_register_transit_gateway_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RegisterTransitGatewayInput,
) {
    if let Some(var_54) = &input.transit_gateway_arn {
        object.key("TransitGatewayArn").string(var_54);
    }
}

pub fn serialize_structure_tag_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) {
    if let Some(var_55) = &input.tags {
        let mut array_56 = object.key("Tags").start_array();
        for item_57 in var_55 {
            {
                let mut object_58 = array_56.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_58, item_57);
                object_58.finish();
            }
        }
        array_56.finish();
    }
}

pub fn serialize_structure_update_connection_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateConnectionInput,
) {
    if let Some(var_59) = &input.connected_link_id {
        object.key("ConnectedLinkId").string(var_59);
    }
    if let Some(var_60) = &input.description {
        object.key("Description").string(var_60);
    }
    if let Some(var_61) = &input.link_id {
        object.key("LinkId").string(var_61);
    }
}

pub fn serialize_structure_update_device_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDeviceInput,
) {
    if let Some(var_62) = &input.aws_location {
        let mut object_63 = object.key("AWSLocation").start_object();
        crate::json_ser::serialize_structure_aws_location(&mut object_63, var_62);
        object_63.finish();
    }
    if let Some(var_64) = &input.description {
        object.key("Description").string(var_64);
    }
    if let Some(var_65) = &input.location {
        let mut object_66 = object.key("Location").start_object();
        crate::json_ser::serialize_structure_location(&mut object_66, var_65);
        object_66.finish();
    }
    if let Some(var_67) = &input.model {
        object.key("Model").string(var_67);
    }
    if let Some(var_68) = &input.serial_number {
        object.key("SerialNumber").string(var_68);
    }
    if let Some(var_69) = &input.site_id {
        object.key("SiteId").string(var_69);
    }
    if let Some(var_70) = &input.r#type {
        object.key("Type").string(var_70);
    }
    if let Some(var_71) = &input.vendor {
        object.key("Vendor").string(var_71);
    }
}

pub fn serialize_structure_update_global_network_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateGlobalNetworkInput,
) {
    if let Some(var_72) = &input.description {
        object.key("Description").string(var_72);
    }
}

pub fn serialize_structure_update_link_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateLinkInput,
) {
    if let Some(var_73) = &input.bandwidth {
        let mut object_74 = object.key("Bandwidth").start_object();
        crate::json_ser::serialize_structure_bandwidth(&mut object_74, var_73);
        object_74.finish();
    }
    if let Some(var_75) = &input.description {
        object.key("Description").string(var_75);
    }
    if let Some(var_76) = &input.provider {
        object.key("Provider").string(var_76);
    }
    if let Some(var_77) = &input.r#type {
        object.key("Type").string(var_77);
    }
}

pub fn serialize_structure_update_site_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateSiteInput,
) {
    if let Some(var_78) = &input.description {
        object.key("Description").string(var_78);
    }
    if let Some(var_79) = &input.location {
        let mut object_80 = object.key("Location").start_object();
        crate::json_ser::serialize_structure_location(&mut object_80, var_79);
        object_80.finish();
    }
}

pub fn serialize_structure_tag(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tag,
) {
    if let Some(var_81) = &input.key {
        object.key("Key").string(var_81);
    }
    if let Some(var_82) = &input.value {
        object.key("Value").string(var_82);
    }
}

pub fn serialize_structure_aws_location(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsLocation,
) {
    if let Some(var_83) = &input.zone {
        object.key("Zone").string(var_83);
    }
    if let Some(var_84) = &input.subnet_arn {
        object.key("SubnetArn").string(var_84);
    }
}

pub fn serialize_structure_location(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Location,
) {
    if let Some(var_85) = &input.address {
        object.key("Address").string(var_85);
    }
    if let Some(var_86) = &input.latitude {
        object.key("Latitude").string(var_86);
    }
    if let Some(var_87) = &input.longitude {
        object.key("Longitude").string(var_87);
    }
}

pub fn serialize_structure_bandwidth(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Bandwidth,
) {
    if let Some(var_88) = &input.upload_speed {
        object.key("UploadSpeed").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_88).into()),
        );
    }
    if let Some(var_89) = &input.download_speed {
        object.key("DownloadSpeed").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_89).into()),
        );
    }
}
