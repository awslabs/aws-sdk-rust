// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[doc(inline)]
pub use aws_smithy_client::Builder;
#[derive(Debug)]
pub(crate) struct Handle {
    pub(crate) client: aws_smithy_client::Client<
        aws_smithy_client::erase::DynConnector,
        aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
    >,
    pub(crate) conf: crate::Config,
}

/// Client for AWS Network Manager
///
/// Client for invoking operations on AWS Network Manager. Each operation on AWS Network Manager is a method on this
/// this struct. `.send()` MUST be invoked on the generated operations to dispatch the request to the service.
///
/// # Examples
/// **Constructing a client and invoking an operation**
/// ```rust,no_run
/// # async fn docs() {
///     // create a shared configuration. This can be used & shared between multiple service clients.
///     let shared_config = aws_config::load_from_env().await;
///     let client = aws_sdk_networkmanager::Client::new(&shared_config);
///     // invoke an operation
///     /* let rsp = client
///         .<operation_name>().
///         .<param>("some value")
///         .send().await; */
/// # }
/// ```
/// **Constructing a client with custom configuration**
/// ```rust,no_run
/// use aws_config::retry::RetryConfig;
/// # async fn docs() {
/// let shared_config = aws_config::load_from_env().await;
/// let config = aws_sdk_networkmanager::config::Builder::from(&shared_config)
///   .retry_config(RetryConfig::disabled())
///   .build();
/// let client = aws_sdk_networkmanager::Client::from_conf(config);
/// # }
#[derive(std::fmt::Debug)]
pub struct Client {
    handle: std::sync::Arc<Handle>,
}

impl std::clone::Clone for Client {
    fn clone(&self) -> Self {
        Self {
            handle: self.handle.clone(),
        }
    }
}

impl
    From<
        aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    > for Client
{
    fn from(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    ) -> Self {
        Self::with_config(client, crate::Config::builder().build())
    }
}

impl Client {
    /// Creates a client with the given service configuration.
    pub fn with_config(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
        conf: crate::Config,
    ) -> Self {
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    /// Returns the client's configuration.
    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl Client {
    /// Constructs a fluent builder for the [`AcceptAttachment`](crate::client::fluent_builders::AcceptAttachment) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`attachment_id(impl Into<String>)`](crate::client::fluent_builders::AcceptAttachment::attachment_id) / [`set_attachment_id(Option<String>)`](crate::client::fluent_builders::AcceptAttachment::set_attachment_id): <p>The ID of the attachment. </p>
    /// - On success, responds with [`AcceptAttachmentOutput`](crate::output::AcceptAttachmentOutput) with field(s):
    ///   - [`attachment(Option<Attachment>)`](crate::output::AcceptAttachmentOutput::attachment): <p>The response to the attachment request. </p>
    /// - On failure, responds with [`SdkError<AcceptAttachmentError>`](crate::error::AcceptAttachmentError)
    pub fn accept_attachment(&self) -> crate::client::fluent_builders::AcceptAttachment {
        crate::client::fluent_builders::AcceptAttachment::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`AssociateConnectPeer`](crate::client::fluent_builders::AssociateConnectPeer) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`global_network_id(impl Into<String>)`](crate::client::fluent_builders::AssociateConnectPeer::global_network_id) / [`set_global_network_id(Option<String>)`](crate::client::fluent_builders::AssociateConnectPeer::set_global_network_id): <p>The ID of your global network.</p>
    ///   - [`connect_peer_id(impl Into<String>)`](crate::client::fluent_builders::AssociateConnectPeer::connect_peer_id) / [`set_connect_peer_id(Option<String>)`](crate::client::fluent_builders::AssociateConnectPeer::set_connect_peer_id): <p>The ID of the Connect peer.</p>
    ///   - [`device_id(impl Into<String>)`](crate::client::fluent_builders::AssociateConnectPeer::device_id) / [`set_device_id(Option<String>)`](crate::client::fluent_builders::AssociateConnectPeer::set_device_id): <p>The ID of the device.</p>
    ///   - [`link_id(impl Into<String>)`](crate::client::fluent_builders::AssociateConnectPeer::link_id) / [`set_link_id(Option<String>)`](crate::client::fluent_builders::AssociateConnectPeer::set_link_id): <p>The ID of the link.</p>
    /// - On success, responds with [`AssociateConnectPeerOutput`](crate::output::AssociateConnectPeerOutput) with field(s):
    ///   - [`connect_peer_association(Option<ConnectPeerAssociation>)`](crate::output::AssociateConnectPeerOutput::connect_peer_association): <p>The response to the Connect peer request.</p>
    /// - On failure, responds with [`SdkError<AssociateConnectPeerError>`](crate::error::AssociateConnectPeerError)
    pub fn associate_connect_peer(&self) -> crate::client::fluent_builders::AssociateConnectPeer {
        crate::client::fluent_builders::AssociateConnectPeer::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`AssociateCustomerGateway`](crate::client::fluent_builders::AssociateCustomerGateway) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`customer_gateway_arn(impl Into<String>)`](crate::client::fluent_builders::AssociateCustomerGateway::customer_gateway_arn) / [`set_customer_gateway_arn(Option<String>)`](crate::client::fluent_builders::AssociateCustomerGateway::set_customer_gateway_arn): <p>The Amazon Resource Name (ARN) of the customer gateway.</p>
    ///   - [`global_network_id(impl Into<String>)`](crate::client::fluent_builders::AssociateCustomerGateway::global_network_id) / [`set_global_network_id(Option<String>)`](crate::client::fluent_builders::AssociateCustomerGateway::set_global_network_id): <p>The ID of the global network.</p>
    ///   - [`device_id(impl Into<String>)`](crate::client::fluent_builders::AssociateCustomerGateway::device_id) / [`set_device_id(Option<String>)`](crate::client::fluent_builders::AssociateCustomerGateway::set_device_id): <p>The ID of the device.</p>
    ///   - [`link_id(impl Into<String>)`](crate::client::fluent_builders::AssociateCustomerGateway::link_id) / [`set_link_id(Option<String>)`](crate::client::fluent_builders::AssociateCustomerGateway::set_link_id): <p>The ID of the link.</p>
    /// - On success, responds with [`AssociateCustomerGatewayOutput`](crate::output::AssociateCustomerGatewayOutput) with field(s):
    ///   - [`customer_gateway_association(Option<CustomerGatewayAssociation>)`](crate::output::AssociateCustomerGatewayOutput::customer_gateway_association): <p>The customer gateway association.</p>
    /// - On failure, responds with [`SdkError<AssociateCustomerGatewayError>`](crate::error::AssociateCustomerGatewayError)
    pub fn associate_customer_gateway(
        &self,
    ) -> crate::client::fluent_builders::AssociateCustomerGateway {
        crate::client::fluent_builders::AssociateCustomerGateway::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`AssociateLink`](crate::client::fluent_builders::AssociateLink) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`global_network_id(impl Into<String>)`](crate::client::fluent_builders::AssociateLink::global_network_id) / [`set_global_network_id(Option<String>)`](crate::client::fluent_builders::AssociateLink::set_global_network_id): <p>The ID of the global network.</p>
    ///   - [`device_id(impl Into<String>)`](crate::client::fluent_builders::AssociateLink::device_id) / [`set_device_id(Option<String>)`](crate::client::fluent_builders::AssociateLink::set_device_id): <p>The ID of the device.</p>
    ///   - [`link_id(impl Into<String>)`](crate::client::fluent_builders::AssociateLink::link_id) / [`set_link_id(Option<String>)`](crate::client::fluent_builders::AssociateLink::set_link_id): <p>The ID of the link.</p>
    /// - On success, responds with [`AssociateLinkOutput`](crate::output::AssociateLinkOutput) with field(s):
    ///   - [`link_association(Option<LinkAssociation>)`](crate::output::AssociateLinkOutput::link_association): <p>The link association.</p>
    /// - On failure, responds with [`SdkError<AssociateLinkError>`](crate::error::AssociateLinkError)
    pub fn associate_link(&self) -> crate::client::fluent_builders::AssociateLink {
        crate::client::fluent_builders::AssociateLink::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`AssociateTransitGatewayConnectPeer`](crate::client::fluent_builders::AssociateTransitGatewayConnectPeer) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`global_network_id(impl Into<String>)`](crate::client::fluent_builders::AssociateTransitGatewayConnectPeer::global_network_id) / [`set_global_network_id(Option<String>)`](crate::client::fluent_builders::AssociateTransitGatewayConnectPeer::set_global_network_id): <p>The ID of the global network.</p>
    ///   - [`transit_gateway_connect_peer_arn(impl Into<String>)`](crate::client::fluent_builders::AssociateTransitGatewayConnectPeer::transit_gateway_connect_peer_arn) / [`set_transit_gateway_connect_peer_arn(Option<String>)`](crate::client::fluent_builders::AssociateTransitGatewayConnectPeer::set_transit_gateway_connect_peer_arn): <p>The Amazon Resource Name (ARN) of the Connect peer.</p>
    ///   - [`device_id(impl Into<String>)`](crate::client::fluent_builders::AssociateTransitGatewayConnectPeer::device_id) / [`set_device_id(Option<String>)`](crate::client::fluent_builders::AssociateTransitGatewayConnectPeer::set_device_id): <p>The ID of the device.</p>
    ///   - [`link_id(impl Into<String>)`](crate::client::fluent_builders::AssociateTransitGatewayConnectPeer::link_id) / [`set_link_id(Option<String>)`](crate::client::fluent_builders::AssociateTransitGatewayConnectPeer::set_link_id): <p>The ID of the link.</p>
    /// - On success, responds with [`AssociateTransitGatewayConnectPeerOutput`](crate::output::AssociateTransitGatewayConnectPeerOutput) with field(s):
    ///   - [`transit_gateway_connect_peer_association(Option<TransitGatewayConnectPeerAssociation>)`](crate::output::AssociateTransitGatewayConnectPeerOutput::transit_gateway_connect_peer_association): <p>The transit gateway Connect peer association.</p>
    /// - On failure, responds with [`SdkError<AssociateTransitGatewayConnectPeerError>`](crate::error::AssociateTransitGatewayConnectPeerError)
    pub fn associate_transit_gateway_connect_peer(
        &self,
    ) -> crate::client::fluent_builders::AssociateTransitGatewayConnectPeer {
        crate::client::fluent_builders::AssociateTransitGatewayConnectPeer::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateConnectAttachment`](crate::client::fluent_builders::CreateConnectAttachment) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`core_network_id(impl Into<String>)`](crate::client::fluent_builders::CreateConnectAttachment::core_network_id) / [`set_core_network_id(Option<String>)`](crate::client::fluent_builders::CreateConnectAttachment::set_core_network_id): <p>The ID of a core network where you want to create the attachment. </p>
    ///   - [`edge_location(impl Into<String>)`](crate::client::fluent_builders::CreateConnectAttachment::edge_location) / [`set_edge_location(Option<String>)`](crate::client::fluent_builders::CreateConnectAttachment::set_edge_location): <p>The Region where the edge is located.</p>
    ///   - [`transport_attachment_id(impl Into<String>)`](crate::client::fluent_builders::CreateConnectAttachment::transport_attachment_id) / [`set_transport_attachment_id(Option<String>)`](crate::client::fluent_builders::CreateConnectAttachment::set_transport_attachment_id): <p>The ID of the attachment between the two connections.</p>
    ///   - [`options(ConnectAttachmentOptions)`](crate::client::fluent_builders::CreateConnectAttachment::options) / [`set_options(Option<ConnectAttachmentOptions>)`](crate::client::fluent_builders::CreateConnectAttachment::set_options): <p>Options for creating an attachment.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateConnectAttachment::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateConnectAttachment::set_tags): <p>The list of key-value tags associated with the request.</p>
    ///   - [`client_token(impl Into<String>)`](crate::client::fluent_builders::CreateConnectAttachment::client_token) / [`set_client_token(Option<String>)`](crate::client::fluent_builders::CreateConnectAttachment::set_client_token): <p>The client token associated with the request.</p>
    /// - On success, responds with [`CreateConnectAttachmentOutput`](crate::output::CreateConnectAttachmentOutput) with field(s):
    ///   - [`connect_attachment(Option<ConnectAttachment>)`](crate::output::CreateConnectAttachmentOutput::connect_attachment): <p>The response to a Connect attachment request.</p>
    /// - On failure, responds with [`SdkError<CreateConnectAttachmentError>`](crate::error::CreateConnectAttachmentError)
    pub fn create_connect_attachment(
        &self,
    ) -> crate::client::fluent_builders::CreateConnectAttachment {
        crate::client::fluent_builders::CreateConnectAttachment::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateConnection`](crate::client::fluent_builders::CreateConnection) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`global_network_id(impl Into<String>)`](crate::client::fluent_builders::CreateConnection::global_network_id) / [`set_global_network_id(Option<String>)`](crate::client::fluent_builders::CreateConnection::set_global_network_id): <p>The ID of the global network.</p>
    ///   - [`device_id(impl Into<String>)`](crate::client::fluent_builders::CreateConnection::device_id) / [`set_device_id(Option<String>)`](crate::client::fluent_builders::CreateConnection::set_device_id): <p>The ID of the first device in the connection.</p>
    ///   - [`connected_device_id(impl Into<String>)`](crate::client::fluent_builders::CreateConnection::connected_device_id) / [`set_connected_device_id(Option<String>)`](crate::client::fluent_builders::CreateConnection::set_connected_device_id): <p>The ID of the second device in the connection.</p>
    ///   - [`link_id(impl Into<String>)`](crate::client::fluent_builders::CreateConnection::link_id) / [`set_link_id(Option<String>)`](crate::client::fluent_builders::CreateConnection::set_link_id): <p>The ID of the link for the first device.</p>
    ///   - [`connected_link_id(impl Into<String>)`](crate::client::fluent_builders::CreateConnection::connected_link_id) / [`set_connected_link_id(Option<String>)`](crate::client::fluent_builders::CreateConnection::set_connected_link_id): <p>The ID of the link for the second device.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::CreateConnection::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::CreateConnection::set_description): <p>A description of the connection.</p>  <p>Length Constraints: Maximum length of 256 characters.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateConnection::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateConnection::set_tags): <p>The tags to apply to the resource during creation.</p>
    /// - On success, responds with [`CreateConnectionOutput`](crate::output::CreateConnectionOutput) with field(s):
    ///   - [`connection(Option<Connection>)`](crate::output::CreateConnectionOutput::connection): <p>Information about the connection.</p>
    /// - On failure, responds with [`SdkError<CreateConnectionError>`](crate::error::CreateConnectionError)
    pub fn create_connection(&self) -> crate::client::fluent_builders::CreateConnection {
        crate::client::fluent_builders::CreateConnection::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateConnectPeer`](crate::client::fluent_builders::CreateConnectPeer) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`connect_attachment_id(impl Into<String>)`](crate::client::fluent_builders::CreateConnectPeer::connect_attachment_id) / [`set_connect_attachment_id(Option<String>)`](crate::client::fluent_builders::CreateConnectPeer::set_connect_attachment_id): <p>The ID of the connection attachment.</p>
    ///   - [`core_network_address(impl Into<String>)`](crate::client::fluent_builders::CreateConnectPeer::core_network_address) / [`set_core_network_address(Option<String>)`](crate::client::fluent_builders::CreateConnectPeer::set_core_network_address): <p>A Connect peer core network address.</p>
    ///   - [`peer_address(impl Into<String>)`](crate::client::fluent_builders::CreateConnectPeer::peer_address) / [`set_peer_address(Option<String>)`](crate::client::fluent_builders::CreateConnectPeer::set_peer_address): <p>The Connect peer address.</p>
    ///   - [`bgp_options(BgpOptions)`](crate::client::fluent_builders::CreateConnectPeer::bgp_options) / [`set_bgp_options(Option<BgpOptions>)`](crate::client::fluent_builders::CreateConnectPeer::set_bgp_options): <p>The Connect peer BGP options.</p>
    ///   - [`inside_cidr_blocks(Vec<String>)`](crate::client::fluent_builders::CreateConnectPeer::inside_cidr_blocks) / [`set_inside_cidr_blocks(Option<Vec<String>>)`](crate::client::fluent_builders::CreateConnectPeer::set_inside_cidr_blocks): <p>The inside IP addresses used for BGP peering.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateConnectPeer::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateConnectPeer::set_tags): <p>The tags associated with the peer request.</p>
    ///   - [`client_token(impl Into<String>)`](crate::client::fluent_builders::CreateConnectPeer::client_token) / [`set_client_token(Option<String>)`](crate::client::fluent_builders::CreateConnectPeer::set_client_token): <p>The client token associated with the request.</p>
    /// - On success, responds with [`CreateConnectPeerOutput`](crate::output::CreateConnectPeerOutput) with field(s):
    ///   - [`connect_peer(Option<ConnectPeer>)`](crate::output::CreateConnectPeerOutput::connect_peer): <p>The response to the request.</p>
    /// - On failure, responds with [`SdkError<CreateConnectPeerError>`](crate::error::CreateConnectPeerError)
    pub fn create_connect_peer(&self) -> crate::client::fluent_builders::CreateConnectPeer {
        crate::client::fluent_builders::CreateConnectPeer::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateCoreNetwork`](crate::client::fluent_builders::CreateCoreNetwork) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`global_network_id(impl Into<String>)`](crate::client::fluent_builders::CreateCoreNetwork::global_network_id) / [`set_global_network_id(Option<String>)`](crate::client::fluent_builders::CreateCoreNetwork::set_global_network_id): <p>The ID of the global network that a core network will be a part of. </p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::CreateCoreNetwork::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::CreateCoreNetwork::set_description): <p>The description of a core network.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateCoreNetwork::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateCoreNetwork::set_tags): <p>Key-value tags associated with a core network request.</p>
    ///   - [`policy_document(impl Into<String>)`](crate::client::fluent_builders::CreateCoreNetwork::policy_document) / [`set_policy_document(Option<String>)`](crate::client::fluent_builders::CreateCoreNetwork::set_policy_document): <p>The policy document for creating a core network.</p>
    ///   - [`client_token(impl Into<String>)`](crate::client::fluent_builders::CreateCoreNetwork::client_token) / [`set_client_token(Option<String>)`](crate::client::fluent_builders::CreateCoreNetwork::set_client_token): <p>The client token associated with a core network request.</p>
    /// - On success, responds with [`CreateCoreNetworkOutput`](crate::output::CreateCoreNetworkOutput) with field(s):
    ///   - [`core_network(Option<CoreNetwork>)`](crate::output::CreateCoreNetworkOutput::core_network): <p>Returns details about a core network.</p>
    /// - On failure, responds with [`SdkError<CreateCoreNetworkError>`](crate::error::CreateCoreNetworkError)
    pub fn create_core_network(&self) -> crate::client::fluent_builders::CreateCoreNetwork {
        crate::client::fluent_builders::CreateCoreNetwork::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateDevice`](crate::client::fluent_builders::CreateDevice) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`global_network_id(impl Into<String>)`](crate::client::fluent_builders::CreateDevice::global_network_id) / [`set_global_network_id(Option<String>)`](crate::client::fluent_builders::CreateDevice::set_global_network_id): <p>The ID of the global network.</p>
    ///   - [`aws_location(AwsLocation)`](crate::client::fluent_builders::CreateDevice::aws_location) / [`set_aws_location(Option<AwsLocation>)`](crate::client::fluent_builders::CreateDevice::set_aws_location): <p>The Amazon Web Services location of the device, if applicable. For an on-premises device, you can omit this parameter.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::CreateDevice::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::CreateDevice::set_description): <p>A description of the device.</p>  <p>Constraints: Maximum length of 256 characters.</p>
    ///   - [`r#type(impl Into<String>)`](crate::client::fluent_builders::CreateDevice::type) / [`set_type(Option<String>)`](crate::client::fluent_builders::CreateDevice::set_type): <p>The type of the device.</p>
    ///   - [`vendor(impl Into<String>)`](crate::client::fluent_builders::CreateDevice::vendor) / [`set_vendor(Option<String>)`](crate::client::fluent_builders::CreateDevice::set_vendor): <p>The vendor of the device.</p>  <p>Constraints: Maximum length of 128 characters.</p>
    ///   - [`model(impl Into<String>)`](crate::client::fluent_builders::CreateDevice::model) / [`set_model(Option<String>)`](crate::client::fluent_builders::CreateDevice::set_model): <p>The model of the device.</p>  <p>Constraints: Maximum length of 128 characters.</p>
    ///   - [`serial_number(impl Into<String>)`](crate::client::fluent_builders::CreateDevice::serial_number) / [`set_serial_number(Option<String>)`](crate::client::fluent_builders::CreateDevice::set_serial_number): <p>The serial number of the device.</p>  <p>Constraints: Maximum length of 128 characters.</p>
    ///   - [`location(Location)`](crate::client::fluent_builders::CreateDevice::location) / [`set_location(Option<Location>)`](crate::client::fluent_builders::CreateDevice::set_location): <p>The location of the device.</p>
    ///   - [`site_id(impl Into<String>)`](crate::client::fluent_builders::CreateDevice::site_id) / [`set_site_id(Option<String>)`](crate::client::fluent_builders::CreateDevice::set_site_id): <p>The ID of the site.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateDevice::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateDevice::set_tags): <p>The tags to apply to the resource during creation.</p>
    /// - On success, responds with [`CreateDeviceOutput`](crate::output::CreateDeviceOutput) with field(s):
    ///   - [`device(Option<Device>)`](crate::output::CreateDeviceOutput::device): <p>Information about the device.</p>
    /// - On failure, responds with [`SdkError<CreateDeviceError>`](crate::error::CreateDeviceError)
    pub fn create_device(&self) -> crate::client::fluent_builders::CreateDevice {
        crate::client::fluent_builders::CreateDevice::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateGlobalNetwork`](crate::client::fluent_builders::CreateGlobalNetwork) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::CreateGlobalNetwork::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::CreateGlobalNetwork::set_description): <p>A description of the global network.</p>  <p>Constraints: Maximum length of 256 characters.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateGlobalNetwork::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateGlobalNetwork::set_tags): <p>The tags to apply to the resource during creation.</p>
    /// - On success, responds with [`CreateGlobalNetworkOutput`](crate::output::CreateGlobalNetworkOutput) with field(s):
    ///   - [`global_network(Option<GlobalNetwork>)`](crate::output::CreateGlobalNetworkOutput::global_network): <p>Information about the global network object.</p>
    /// - On failure, responds with [`SdkError<CreateGlobalNetworkError>`](crate::error::CreateGlobalNetworkError)
    pub fn create_global_network(&self) -> crate::client::fluent_builders::CreateGlobalNetwork {
        crate::client::fluent_builders::CreateGlobalNetwork::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateLink`](crate::client::fluent_builders::CreateLink) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`global_network_id(impl Into<String>)`](crate::client::fluent_builders::CreateLink::global_network_id) / [`set_global_network_id(Option<String>)`](crate::client::fluent_builders::CreateLink::set_global_network_id): <p>The ID of the global network.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::CreateLink::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::CreateLink::set_description): <p>A description of the link.</p>  <p>Constraints: Maximum length of 256 characters.</p>
    ///   - [`r#type(impl Into<String>)`](crate::client::fluent_builders::CreateLink::type) / [`set_type(Option<String>)`](crate::client::fluent_builders::CreateLink::set_type): <p>The type of the link.</p>  <p>Constraints: Maximum length of 128 characters. Cannot include the following characters: | \ ^</p>
    ///   - [`bandwidth(Bandwidth)`](crate::client::fluent_builders::CreateLink::bandwidth) / [`set_bandwidth(Option<Bandwidth>)`](crate::client::fluent_builders::CreateLink::set_bandwidth): <p> The upload speed and download speed in Mbps. </p>
    ///   - [`provider(impl Into<String>)`](crate::client::fluent_builders::CreateLink::provider) / [`set_provider(Option<String>)`](crate::client::fluent_builders::CreateLink::set_provider): <p>The provider of the link.</p>  <p>Constraints: Maximum length of 128 characters. Cannot include the following characters: | \ ^</p>
    ///   - [`site_id(impl Into<String>)`](crate::client::fluent_builders::CreateLink::site_id) / [`set_site_id(Option<String>)`](crate::client::fluent_builders::CreateLink::set_site_id): <p>The ID of the site.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateLink::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateLink::set_tags): <p>The tags to apply to the resource during creation.</p>
    /// - On success, responds with [`CreateLinkOutput`](crate::output::CreateLinkOutput) with field(s):
    ///   - [`link(Option<Link>)`](crate::output::CreateLinkOutput::link): <p>Information about the link.</p>
    /// - On failure, responds with [`SdkError<CreateLinkError>`](crate::error::CreateLinkError)
    pub fn create_link(&self) -> crate::client::fluent_builders::CreateLink {
        crate::client::fluent_builders::CreateLink::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateSite`](crate::client::fluent_builders::CreateSite) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`global_network_id(impl Into<String>)`](crate::client::fluent_builders::CreateSite::global_network_id) / [`set_global_network_id(Option<String>)`](crate::client::fluent_builders::CreateSite::set_global_network_id): <p>The ID of the global network.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::CreateSite::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::CreateSite::set_description): <p>A description of your site.</p>  <p>Constraints: Maximum length of 256 characters.</p>
    ///   - [`location(Location)`](crate::client::fluent_builders::CreateSite::location) / [`set_location(Option<Location>)`](crate::client::fluent_builders::CreateSite::set_location): <p>The site location. This information is used for visualization in the Network Manager console. If you specify the address, the latitude and longitude are automatically calculated.</p>  <ul>   <li> <p> <code>Address</code>: The physical address of the site.</p> </li>   <li> <p> <code>Latitude</code>: The latitude of the site. </p> </li>   <li> <p> <code>Longitude</code>: The longitude of the site.</p> </li>  </ul>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateSite::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateSite::set_tags): <p>The tags to apply to the resource during creation.</p>
    /// - On success, responds with [`CreateSiteOutput`](crate::output::CreateSiteOutput) with field(s):
    ///   - [`site(Option<Site>)`](crate::output::CreateSiteOutput::site): <p>Information about the site.</p>
    /// - On failure, responds with [`SdkError<CreateSiteError>`](crate::error::CreateSiteError)
    pub fn create_site(&self) -> crate::client::fluent_builders::CreateSite {
        crate::client::fluent_builders::CreateSite::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateSiteToSiteVpnAttachment`](crate::client::fluent_builders::CreateSiteToSiteVpnAttachment) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`core_network_id(impl Into<String>)`](crate::client::fluent_builders::CreateSiteToSiteVpnAttachment::core_network_id) / [`set_core_network_id(Option<String>)`](crate::client::fluent_builders::CreateSiteToSiteVpnAttachment::set_core_network_id): <p>The ID of a core network where you're creating a site-to-site VPN attachment.</p>
    ///   - [`vpn_connection_arn(impl Into<String>)`](crate::client::fluent_builders::CreateSiteToSiteVpnAttachment::vpn_connection_arn) / [`set_vpn_connection_arn(Option<String>)`](crate::client::fluent_builders::CreateSiteToSiteVpnAttachment::set_vpn_connection_arn): <p>The ARN identifying the VPN attachment.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateSiteToSiteVpnAttachment::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateSiteToSiteVpnAttachment::set_tags): <p>The tags associated with the request.</p>
    ///   - [`client_token(impl Into<String>)`](crate::client::fluent_builders::CreateSiteToSiteVpnAttachment::client_token) / [`set_client_token(Option<String>)`](crate::client::fluent_builders::CreateSiteToSiteVpnAttachment::set_client_token): <p>The client token associated with the request.</p>
    /// - On success, responds with [`CreateSiteToSiteVpnAttachmentOutput`](crate::output::CreateSiteToSiteVpnAttachmentOutput) with field(s):
    ///   - [`site_to_site_vpn_attachment(Option<SiteToSiteVpnAttachment>)`](crate::output::CreateSiteToSiteVpnAttachmentOutput::site_to_site_vpn_attachment): <p>Details about a site-to-site VPN attachment.</p>
    /// - On failure, responds with [`SdkError<CreateSiteToSiteVpnAttachmentError>`](crate::error::CreateSiteToSiteVpnAttachmentError)
    pub fn create_site_to_site_vpn_attachment(
        &self,
    ) -> crate::client::fluent_builders::CreateSiteToSiteVpnAttachment {
        crate::client::fluent_builders::CreateSiteToSiteVpnAttachment::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateTransitGatewayPeering`](crate::client::fluent_builders::CreateTransitGatewayPeering) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`core_network_id(impl Into<String>)`](crate::client::fluent_builders::CreateTransitGatewayPeering::core_network_id) / [`set_core_network_id(Option<String>)`](crate::client::fluent_builders::CreateTransitGatewayPeering::set_core_network_id): <p>The ID of a core network.</p>
    ///   - [`transit_gateway_arn(impl Into<String>)`](crate::client::fluent_builders::CreateTransitGatewayPeering::transit_gateway_arn) / [`set_transit_gateway_arn(Option<String>)`](crate::client::fluent_builders::CreateTransitGatewayPeering::set_transit_gateway_arn): <p>The ARN of the transit gateway for the peering request.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateTransitGatewayPeering::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateTransitGatewayPeering::set_tags): <p>The list of key-value tags associated with the request.</p>
    ///   - [`client_token(impl Into<String>)`](crate::client::fluent_builders::CreateTransitGatewayPeering::client_token) / [`set_client_token(Option<String>)`](crate::client::fluent_builders::CreateTransitGatewayPeering::set_client_token): <p>The client token associated with the request.</p>
    /// - On success, responds with [`CreateTransitGatewayPeeringOutput`](crate::output::CreateTransitGatewayPeeringOutput) with field(s):
    ///   - [`transit_gateway_peering(Option<TransitGatewayPeering>)`](crate::output::CreateTransitGatewayPeeringOutput::transit_gateway_peering): <p>Returns information about the transit gateway peering connection request.</p>
    /// - On failure, responds with [`SdkError<CreateTransitGatewayPeeringError>`](crate::error::CreateTransitGatewayPeeringError)
    pub fn create_transit_gateway_peering(
        &self,
    ) -> crate::client::fluent_builders::CreateTransitGatewayPeering {
        crate::client::fluent_builders::CreateTransitGatewayPeering::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateTransitGatewayRouteTableAttachment`](crate::client::fluent_builders::CreateTransitGatewayRouteTableAttachment) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`peering_id(impl Into<String>)`](crate::client::fluent_builders::CreateTransitGatewayRouteTableAttachment::peering_id) / [`set_peering_id(Option<String>)`](crate::client::fluent_builders::CreateTransitGatewayRouteTableAttachment::set_peering_id): <p>The ID of the peer for the </p>
    ///   - [`transit_gateway_route_table_arn(impl Into<String>)`](crate::client::fluent_builders::CreateTransitGatewayRouteTableAttachment::transit_gateway_route_table_arn) / [`set_transit_gateway_route_table_arn(Option<String>)`](crate::client::fluent_builders::CreateTransitGatewayRouteTableAttachment::set_transit_gateway_route_table_arn): <p>The ARN of the transit gateway route table for the attachment request.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateTransitGatewayRouteTableAttachment::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateTransitGatewayRouteTableAttachment::set_tags): <p>The list of key-value tags associated with the request.</p>
    ///   - [`client_token(impl Into<String>)`](crate::client::fluent_builders::CreateTransitGatewayRouteTableAttachment::client_token) / [`set_client_token(Option<String>)`](crate::client::fluent_builders::CreateTransitGatewayRouteTableAttachment::set_client_token): <p>The client token associated with the request.</p>
    /// - On success, responds with [`CreateTransitGatewayRouteTableAttachmentOutput`](crate::output::CreateTransitGatewayRouteTableAttachmentOutput) with field(s):
    ///   - [`transit_gateway_route_table_attachment(Option<TransitGatewayRouteTableAttachment>)`](crate::output::CreateTransitGatewayRouteTableAttachmentOutput::transit_gateway_route_table_attachment): <p>The route table associated with the create transit gateway route table attachment request.</p>
    /// - On failure, responds with [`SdkError<CreateTransitGatewayRouteTableAttachmentError>`](crate::error::CreateTransitGatewayRouteTableAttachmentError)
    pub fn create_transit_gateway_route_table_attachment(
        &self,
    ) -> crate::client::fluent_builders::CreateTransitGatewayRouteTableAttachment {
        crate::client::fluent_builders::CreateTransitGatewayRouteTableAttachment::new(
            self.handle.clone(),
        )
    }
    /// Constructs a fluent builder for the [`CreateVpcAttachment`](crate::client::fluent_builders::CreateVpcAttachment) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`core_network_id(impl Into<String>)`](crate::client::fluent_builders::CreateVpcAttachment::core_network_id) / [`set_core_network_id(Option<String>)`](crate::client::fluent_builders::CreateVpcAttachment::set_core_network_id): <p>The ID of a core network for the VPC attachment.</p>
    ///   - [`vpc_arn(impl Into<String>)`](crate::client::fluent_builders::CreateVpcAttachment::vpc_arn) / [`set_vpc_arn(Option<String>)`](crate::client::fluent_builders::CreateVpcAttachment::set_vpc_arn): <p>The ARN of the VPC.</p>
    ///   - [`subnet_arns(Vec<String>)`](crate::client::fluent_builders::CreateVpcAttachment::subnet_arns) / [`set_subnet_arns(Option<Vec<String>>)`](crate::client::fluent_builders::CreateVpcAttachment::set_subnet_arns): <p>The subnet ARN of the VPC attachment.</p>
    ///   - [`options(VpcOptions)`](crate::client::fluent_builders::CreateVpcAttachment::options) / [`set_options(Option<VpcOptions>)`](crate::client::fluent_builders::CreateVpcAttachment::set_options): <p>Options for the VPC attachment.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateVpcAttachment::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateVpcAttachment::set_tags): <p>The key-value tags associated with the request.</p>
    ///   - [`client_token(impl Into<String>)`](crate::client::fluent_builders::CreateVpcAttachment::client_token) / [`set_client_token(Option<String>)`](crate::client::fluent_builders::CreateVpcAttachment::set_client_token): <p>The client token associated with the request.</p>
    /// - On success, responds with [`CreateVpcAttachmentOutput`](crate::output::CreateVpcAttachmentOutput) with field(s):
    ///   - [`vpc_attachment(Option<VpcAttachment>)`](crate::output::CreateVpcAttachmentOutput::vpc_attachment): <p>Provides details about the VPC attachment.</p>
    /// - On failure, responds with [`SdkError<CreateVpcAttachmentError>`](crate::error::CreateVpcAttachmentError)
    pub fn create_vpc_attachment(&self) -> crate::client::fluent_builders::CreateVpcAttachment {
        crate::client::fluent_builders::CreateVpcAttachment::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteAttachment`](crate::client::fluent_builders::DeleteAttachment) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`attachment_id(impl Into<String>)`](crate::client::fluent_builders::DeleteAttachment::attachment_id) / [`set_attachment_id(Option<String>)`](crate::client::fluent_builders::DeleteAttachment::set_attachment_id): <p>The ID of the attachment to delete.</p>
    /// - On success, responds with [`DeleteAttachmentOutput`](crate::output::DeleteAttachmentOutput) with field(s):
    ///   - [`attachment(Option<Attachment>)`](crate::output::DeleteAttachmentOutput::attachment): <p>Information about the deleted attachment.</p>
    /// - On failure, responds with [`SdkError<DeleteAttachmentError>`](crate::error::DeleteAttachmentError)
    pub fn delete_attachment(&self) -> crate::client::fluent_builders::DeleteAttachment {
        crate::client::fluent_builders::DeleteAttachment::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteConnection`](crate::client::fluent_builders::DeleteConnection) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`global_network_id(impl Into<String>)`](crate::client::fluent_builders::DeleteConnection::global_network_id) / [`set_global_network_id(Option<String>)`](crate::client::fluent_builders::DeleteConnection::set_global_network_id): <p>The ID of the global network.</p>
    ///   - [`connection_id(impl Into<String>)`](crate::client::fluent_builders::DeleteConnection::connection_id) / [`set_connection_id(Option<String>)`](crate::client::fluent_builders::DeleteConnection::set_connection_id): <p>The ID of the connection.</p>
    /// - On success, responds with [`DeleteConnectionOutput`](crate::output::DeleteConnectionOutput) with field(s):
    ///   - [`connection(Option<Connection>)`](crate::output::DeleteConnectionOutput::connection): <p>Information about the connection.</p>
    /// - On failure, responds with [`SdkError<DeleteConnectionError>`](crate::error::DeleteConnectionError)
    pub fn delete_connection(&self) -> crate::client::fluent_builders::DeleteConnection {
        crate::client::fluent_builders::DeleteConnection::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteConnectPeer`](crate::client::fluent_builders::DeleteConnectPeer) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`connect_peer_id(impl Into<String>)`](crate::client::fluent_builders::DeleteConnectPeer::connect_peer_id) / [`set_connect_peer_id(Option<String>)`](crate::client::fluent_builders::DeleteConnectPeer::set_connect_peer_id): <p>The ID of the deleted Connect peer.</p>
    /// - On success, responds with [`DeleteConnectPeerOutput`](crate::output::DeleteConnectPeerOutput) with field(s):
    ///   - [`connect_peer(Option<ConnectPeer>)`](crate::output::DeleteConnectPeerOutput::connect_peer): <p>Information about the deleted Connect peer.</p>
    /// - On failure, responds with [`SdkError<DeleteConnectPeerError>`](crate::error::DeleteConnectPeerError)
    pub fn delete_connect_peer(&self) -> crate::client::fluent_builders::DeleteConnectPeer {
        crate::client::fluent_builders::DeleteConnectPeer::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteCoreNetwork`](crate::client::fluent_builders::DeleteCoreNetwork) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`core_network_id(impl Into<String>)`](crate::client::fluent_builders::DeleteCoreNetwork::core_network_id) / [`set_core_network_id(Option<String>)`](crate::client::fluent_builders::DeleteCoreNetwork::set_core_network_id): <p>The network ID of the deleted core network.</p>
    /// - On success, responds with [`DeleteCoreNetworkOutput`](crate::output::DeleteCoreNetworkOutput) with field(s):
    ///   - [`core_network(Option<CoreNetwork>)`](crate::output::DeleteCoreNetworkOutput::core_network): <p>Information about the deleted core network.</p>
    /// - On failure, responds with [`SdkError<DeleteCoreNetworkError>`](crate::error::DeleteCoreNetworkError)
    pub fn delete_core_network(&self) -> crate::client::fluent_builders::DeleteCoreNetwork {
        crate::client::fluent_builders::DeleteCoreNetwork::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteCoreNetworkPolicyVersion`](crate::client::fluent_builders::DeleteCoreNetworkPolicyVersion) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`core_network_id(impl Into<String>)`](crate::client::fluent_builders::DeleteCoreNetworkPolicyVersion::core_network_id) / [`set_core_network_id(Option<String>)`](crate::client::fluent_builders::DeleteCoreNetworkPolicyVersion::set_core_network_id): <p>The ID of a core network for the deleted policy.</p>
    ///   - [`policy_version_id(i32)`](crate::client::fluent_builders::DeleteCoreNetworkPolicyVersion::policy_version_id) / [`set_policy_version_id(Option<i32>)`](crate::client::fluent_builders::DeleteCoreNetworkPolicyVersion::set_policy_version_id): <p>The version ID of the deleted policy.</p>
    /// - On success, responds with [`DeleteCoreNetworkPolicyVersionOutput`](crate::output::DeleteCoreNetworkPolicyVersionOutput) with field(s):
    ///   - [`core_network_policy(Option<CoreNetworkPolicy>)`](crate::output::DeleteCoreNetworkPolicyVersionOutput::core_network_policy): <p>Returns information about the deleted policy version. </p>
    /// - On failure, responds with [`SdkError<DeleteCoreNetworkPolicyVersionError>`](crate::error::DeleteCoreNetworkPolicyVersionError)
    pub fn delete_core_network_policy_version(
        &self,
    ) -> crate::client::fluent_builders::DeleteCoreNetworkPolicyVersion {
        crate::client::fluent_builders::DeleteCoreNetworkPolicyVersion::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteDevice`](crate::client::fluent_builders::DeleteDevice) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`global_network_id(impl Into<String>)`](crate::client::fluent_builders::DeleteDevice::global_network_id) / [`set_global_network_id(Option<String>)`](crate::client::fluent_builders::DeleteDevice::set_global_network_id): <p>The ID of the global network.</p>
    ///   - [`device_id(impl Into<String>)`](crate::client::fluent_builders::DeleteDevice::device_id) / [`set_device_id(Option<String>)`](crate::client::fluent_builders::DeleteDevice::set_device_id): <p>The ID of the device.</p>
    /// - On success, responds with [`DeleteDeviceOutput`](crate::output::DeleteDeviceOutput) with field(s):
    ///   - [`device(Option<Device>)`](crate::output::DeleteDeviceOutput::device): <p>Information about the device.</p>
    /// - On failure, responds with [`SdkError<DeleteDeviceError>`](crate::error::DeleteDeviceError)
    pub fn delete_device(&self) -> crate::client::fluent_builders::DeleteDevice {
        crate::client::fluent_builders::DeleteDevice::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteGlobalNetwork`](crate::client::fluent_builders::DeleteGlobalNetwork) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`global_network_id(impl Into<String>)`](crate::client::fluent_builders::DeleteGlobalNetwork::global_network_id) / [`set_global_network_id(Option<String>)`](crate::client::fluent_builders::DeleteGlobalNetwork::set_global_network_id): <p>The ID of the global network.</p>
    /// - On success, responds with [`DeleteGlobalNetworkOutput`](crate::output::DeleteGlobalNetworkOutput) with field(s):
    ///   - [`global_network(Option<GlobalNetwork>)`](crate::output::DeleteGlobalNetworkOutput::global_network): <p>Information about the global network.</p>
    /// - On failure, responds with [`SdkError<DeleteGlobalNetworkError>`](crate::error::DeleteGlobalNetworkError)
    pub fn delete_global_network(&self) -> crate::client::fluent_builders::DeleteGlobalNetwork {
        crate::client::fluent_builders::DeleteGlobalNetwork::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteLink`](crate::client::fluent_builders::DeleteLink) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`global_network_id(impl Into<String>)`](crate::client::fluent_builders::DeleteLink::global_network_id) / [`set_global_network_id(Option<String>)`](crate::client::fluent_builders::DeleteLink::set_global_network_id): <p>The ID of the global network.</p>
    ///   - [`link_id(impl Into<String>)`](crate::client::fluent_builders::DeleteLink::link_id) / [`set_link_id(Option<String>)`](crate::client::fluent_builders::DeleteLink::set_link_id): <p>The ID of the link.</p>
    /// - On success, responds with [`DeleteLinkOutput`](crate::output::DeleteLinkOutput) with field(s):
    ///   - [`link(Option<Link>)`](crate::output::DeleteLinkOutput::link): <p>Information about the link.</p>
    /// - On failure, responds with [`SdkError<DeleteLinkError>`](crate::error::DeleteLinkError)
    pub fn delete_link(&self) -> crate::client::fluent_builders::DeleteLink {
        crate::client::fluent_builders::DeleteLink::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeletePeering`](crate::client::fluent_builders::DeletePeering) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`peering_id(impl Into<String>)`](crate::client::fluent_builders::DeletePeering::peering_id) / [`set_peering_id(Option<String>)`](crate::client::fluent_builders::DeletePeering::set_peering_id): <p>The ID of the peering connection to delete.</p>
    /// - On success, responds with [`DeletePeeringOutput`](crate::output::DeletePeeringOutput) with field(s):
    ///   - [`peering(Option<Peering>)`](crate::output::DeletePeeringOutput::peering): <p>Information about a deleted peering connection.</p>
    /// - On failure, responds with [`SdkError<DeletePeeringError>`](crate::error::DeletePeeringError)
    pub fn delete_peering(&self) -> crate::client::fluent_builders::DeletePeering {
        crate::client::fluent_builders::DeletePeering::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteResourcePolicy`](crate::client::fluent_builders::DeleteResourcePolicy) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::DeleteResourcePolicy::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::DeleteResourcePolicy::set_resource_arn): <p>The ARN of the policy to delete.</p>
    /// - On success, responds with [`DeleteResourcePolicyOutput`](crate::output::DeleteResourcePolicyOutput)

    /// - On failure, responds with [`SdkError<DeleteResourcePolicyError>`](crate::error::DeleteResourcePolicyError)
    pub fn delete_resource_policy(&self) -> crate::client::fluent_builders::DeleteResourcePolicy {
        crate::client::fluent_builders::DeleteResourcePolicy::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteSite`](crate::client::fluent_builders::DeleteSite) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`global_network_id(impl Into<String>)`](crate::client::fluent_builders::DeleteSite::global_network_id) / [`set_global_network_id(Option<String>)`](crate::client::fluent_builders::DeleteSite::set_global_network_id): <p>The ID of the global network.</p>
    ///   - [`site_id(impl Into<String>)`](crate::client::fluent_builders::DeleteSite::site_id) / [`set_site_id(Option<String>)`](crate::client::fluent_builders::DeleteSite::set_site_id): <p>The ID of the site.</p>
    /// - On success, responds with [`DeleteSiteOutput`](crate::output::DeleteSiteOutput) with field(s):
    ///   - [`site(Option<Site>)`](crate::output::DeleteSiteOutput::site): <p>Information about the site.</p>
    /// - On failure, responds with [`SdkError<DeleteSiteError>`](crate::error::DeleteSiteError)
    pub fn delete_site(&self) -> crate::client::fluent_builders::DeleteSite {
        crate::client::fluent_builders::DeleteSite::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeregisterTransitGateway`](crate::client::fluent_builders::DeregisterTransitGateway) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`global_network_id(impl Into<String>)`](crate::client::fluent_builders::DeregisterTransitGateway::global_network_id) / [`set_global_network_id(Option<String>)`](crate::client::fluent_builders::DeregisterTransitGateway::set_global_network_id): <p>The ID of the global network.</p>
    ///   - [`transit_gateway_arn(impl Into<String>)`](crate::client::fluent_builders::DeregisterTransitGateway::transit_gateway_arn) / [`set_transit_gateway_arn(Option<String>)`](crate::client::fluent_builders::DeregisterTransitGateway::set_transit_gateway_arn): <p>The Amazon Resource Name (ARN) of the transit gateway.</p>
    /// - On success, responds with [`DeregisterTransitGatewayOutput`](crate::output::DeregisterTransitGatewayOutput) with field(s):
    ///   - [`transit_gateway_registration(Option<TransitGatewayRegistration>)`](crate::output::DeregisterTransitGatewayOutput::transit_gateway_registration): <p>The transit gateway registration information.</p>
    /// - On failure, responds with [`SdkError<DeregisterTransitGatewayError>`](crate::error::DeregisterTransitGatewayError)
    pub fn deregister_transit_gateway(
        &self,
    ) -> crate::client::fluent_builders::DeregisterTransitGateway {
        crate::client::fluent_builders::DeregisterTransitGateway::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeGlobalNetworks`](crate::client::fluent_builders::DescribeGlobalNetworks) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::DescribeGlobalNetworks::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`global_network_ids(Vec<String>)`](crate::client::fluent_builders::DescribeGlobalNetworks::global_network_ids) / [`set_global_network_ids(Option<Vec<String>>)`](crate::client::fluent_builders::DescribeGlobalNetworks::set_global_network_ids): <p>The IDs of one or more global networks. The maximum is 10.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::DescribeGlobalNetworks::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::DescribeGlobalNetworks::set_max_results): <p>The maximum number of results to return.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::DescribeGlobalNetworks::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::DescribeGlobalNetworks::set_next_token): <p>The token for the next page of results.</p>
    /// - On success, responds with [`DescribeGlobalNetworksOutput`](crate::output::DescribeGlobalNetworksOutput) with field(s):
    ///   - [`global_networks(Option<Vec<GlobalNetwork>>)`](crate::output::DescribeGlobalNetworksOutput::global_networks): <p>Information about the global networks.</p>
    ///   - [`next_token(Option<String>)`](crate::output::DescribeGlobalNetworksOutput::next_token): <p>The token for the next page of results.</p>
    /// - On failure, responds with [`SdkError<DescribeGlobalNetworksError>`](crate::error::DescribeGlobalNetworksError)
    pub fn describe_global_networks(
        &self,
    ) -> crate::client::fluent_builders::DescribeGlobalNetworks {
        crate::client::fluent_builders::DescribeGlobalNetworks::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DisassociateConnectPeer`](crate::client::fluent_builders::DisassociateConnectPeer) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`global_network_id(impl Into<String>)`](crate::client::fluent_builders::DisassociateConnectPeer::global_network_id) / [`set_global_network_id(Option<String>)`](crate::client::fluent_builders::DisassociateConnectPeer::set_global_network_id): <p>The ID of the global network.</p>
    ///   - [`connect_peer_id(impl Into<String>)`](crate::client::fluent_builders::DisassociateConnectPeer::connect_peer_id) / [`set_connect_peer_id(Option<String>)`](crate::client::fluent_builders::DisassociateConnectPeer::set_connect_peer_id): <p>The ID of the Connect peer to disassociate from a device.</p>
    /// - On success, responds with [`DisassociateConnectPeerOutput`](crate::output::DisassociateConnectPeerOutput) with field(s):
    ///   - [`connect_peer_association(Option<ConnectPeerAssociation>)`](crate::output::DisassociateConnectPeerOutput::connect_peer_association): <p>Describes the Connect peer association.</p>
    /// - On failure, responds with [`SdkError<DisassociateConnectPeerError>`](crate::error::DisassociateConnectPeerError)
    pub fn disassociate_connect_peer(
        &self,
    ) -> crate::client::fluent_builders::DisassociateConnectPeer {
        crate::client::fluent_builders::DisassociateConnectPeer::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DisassociateCustomerGateway`](crate::client::fluent_builders::DisassociateCustomerGateway) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`global_network_id(impl Into<String>)`](crate::client::fluent_builders::DisassociateCustomerGateway::global_network_id) / [`set_global_network_id(Option<String>)`](crate::client::fluent_builders::DisassociateCustomerGateway::set_global_network_id): <p>The ID of the global network.</p>
    ///   - [`customer_gateway_arn(impl Into<String>)`](crate::client::fluent_builders::DisassociateCustomerGateway::customer_gateway_arn) / [`set_customer_gateway_arn(Option<String>)`](crate::client::fluent_builders::DisassociateCustomerGateway::set_customer_gateway_arn): <p>The Amazon Resource Name (ARN) of the customer gateway.</p>
    /// - On success, responds with [`DisassociateCustomerGatewayOutput`](crate::output::DisassociateCustomerGatewayOutput) with field(s):
    ///   - [`customer_gateway_association(Option<CustomerGatewayAssociation>)`](crate::output::DisassociateCustomerGatewayOutput::customer_gateway_association): <p>Information about the customer gateway association.</p>
    /// - On failure, responds with [`SdkError<DisassociateCustomerGatewayError>`](crate::error::DisassociateCustomerGatewayError)
    pub fn disassociate_customer_gateway(
        &self,
    ) -> crate::client::fluent_builders::DisassociateCustomerGateway {
        crate::client::fluent_builders::DisassociateCustomerGateway::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DisassociateLink`](crate::client::fluent_builders::DisassociateLink) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`global_network_id(impl Into<String>)`](crate::client::fluent_builders::DisassociateLink::global_network_id) / [`set_global_network_id(Option<String>)`](crate::client::fluent_builders::DisassociateLink::set_global_network_id): <p>The ID of the global network.</p>
    ///   - [`device_id(impl Into<String>)`](crate::client::fluent_builders::DisassociateLink::device_id) / [`set_device_id(Option<String>)`](crate::client::fluent_builders::DisassociateLink::set_device_id): <p>The ID of the device.</p>
    ///   - [`link_id(impl Into<String>)`](crate::client::fluent_builders::DisassociateLink::link_id) / [`set_link_id(Option<String>)`](crate::client::fluent_builders::DisassociateLink::set_link_id): <p>The ID of the link.</p>
    /// - On success, responds with [`DisassociateLinkOutput`](crate::output::DisassociateLinkOutput) with field(s):
    ///   - [`link_association(Option<LinkAssociation>)`](crate::output::DisassociateLinkOutput::link_association): <p>Information about the link association.</p>
    /// - On failure, responds with [`SdkError<DisassociateLinkError>`](crate::error::DisassociateLinkError)
    pub fn disassociate_link(&self) -> crate::client::fluent_builders::DisassociateLink {
        crate::client::fluent_builders::DisassociateLink::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DisassociateTransitGatewayConnectPeer`](crate::client::fluent_builders::DisassociateTransitGatewayConnectPeer) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`global_network_id(impl Into<String>)`](crate::client::fluent_builders::DisassociateTransitGatewayConnectPeer::global_network_id) / [`set_global_network_id(Option<String>)`](crate::client::fluent_builders::DisassociateTransitGatewayConnectPeer::set_global_network_id): <p>The ID of the global network.</p>
    ///   - [`transit_gateway_connect_peer_arn(impl Into<String>)`](crate::client::fluent_builders::DisassociateTransitGatewayConnectPeer::transit_gateway_connect_peer_arn) / [`set_transit_gateway_connect_peer_arn(Option<String>)`](crate::client::fluent_builders::DisassociateTransitGatewayConnectPeer::set_transit_gateway_connect_peer_arn): <p>The Amazon Resource Name (ARN) of the transit gateway Connect peer.</p>
    /// - On success, responds with [`DisassociateTransitGatewayConnectPeerOutput`](crate::output::DisassociateTransitGatewayConnectPeerOutput) with field(s):
    ///   - [`transit_gateway_connect_peer_association(Option<TransitGatewayConnectPeerAssociation>)`](crate::output::DisassociateTransitGatewayConnectPeerOutput::transit_gateway_connect_peer_association): <p>The transit gateway Connect peer association.</p>
    /// - On failure, responds with [`SdkError<DisassociateTransitGatewayConnectPeerError>`](crate::error::DisassociateTransitGatewayConnectPeerError)
    pub fn disassociate_transit_gateway_connect_peer(
        &self,
    ) -> crate::client::fluent_builders::DisassociateTransitGatewayConnectPeer {
        crate::client::fluent_builders::DisassociateTransitGatewayConnectPeer::new(
            self.handle.clone(),
        )
    }
    /// Constructs a fluent builder for the [`ExecuteCoreNetworkChangeSet`](crate::client::fluent_builders::ExecuteCoreNetworkChangeSet) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`core_network_id(impl Into<String>)`](crate::client::fluent_builders::ExecuteCoreNetworkChangeSet::core_network_id) / [`set_core_network_id(Option<String>)`](crate::client::fluent_builders::ExecuteCoreNetworkChangeSet::set_core_network_id): <p>The ID of a core network.</p>
    ///   - [`policy_version_id(i32)`](crate::client::fluent_builders::ExecuteCoreNetworkChangeSet::policy_version_id) / [`set_policy_version_id(Option<i32>)`](crate::client::fluent_builders::ExecuteCoreNetworkChangeSet::set_policy_version_id): <p>The ID of the policy version.</p>
    /// - On success, responds with [`ExecuteCoreNetworkChangeSetOutput`](crate::output::ExecuteCoreNetworkChangeSetOutput)

    /// - On failure, responds with [`SdkError<ExecuteCoreNetworkChangeSetError>`](crate::error::ExecuteCoreNetworkChangeSetError)
    pub fn execute_core_network_change_set(
        &self,
    ) -> crate::client::fluent_builders::ExecuteCoreNetworkChangeSet {
        crate::client::fluent_builders::ExecuteCoreNetworkChangeSet::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetConnectAttachment`](crate::client::fluent_builders::GetConnectAttachment) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`attachment_id(impl Into<String>)`](crate::client::fluent_builders::GetConnectAttachment::attachment_id) / [`set_attachment_id(Option<String>)`](crate::client::fluent_builders::GetConnectAttachment::set_attachment_id): <p>The ID of the attachment.</p>
    /// - On success, responds with [`GetConnectAttachmentOutput`](crate::output::GetConnectAttachmentOutput) with field(s):
    ///   - [`connect_attachment(Option<ConnectAttachment>)`](crate::output::GetConnectAttachmentOutput::connect_attachment): <p>Details about the Connect attachment.</p>
    /// - On failure, responds with [`SdkError<GetConnectAttachmentError>`](crate::error::GetConnectAttachmentError)
    pub fn get_connect_attachment(&self) -> crate::client::fluent_builders::GetConnectAttachment {
        crate::client::fluent_builders::GetConnectAttachment::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetConnections`](crate::client::fluent_builders::GetConnections) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::GetConnections::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`global_network_id(impl Into<String>)`](crate::client::fluent_builders::GetConnections::global_network_id) / [`set_global_network_id(Option<String>)`](crate::client::fluent_builders::GetConnections::set_global_network_id): <p>The ID of the global network.</p>
    ///   - [`connection_ids(Vec<String>)`](crate::client::fluent_builders::GetConnections::connection_ids) / [`set_connection_ids(Option<Vec<String>>)`](crate::client::fluent_builders::GetConnections::set_connection_ids): <p>One or more connection IDs.</p>
    ///   - [`device_id(impl Into<String>)`](crate::client::fluent_builders::GetConnections::device_id) / [`set_device_id(Option<String>)`](crate::client::fluent_builders::GetConnections::set_device_id): <p>The ID of the device.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::GetConnections::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::GetConnections::set_max_results): <p>The maximum number of results to return.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::GetConnections::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::GetConnections::set_next_token): <p>The token for the next page of results.</p>
    /// - On success, responds with [`GetConnectionsOutput`](crate::output::GetConnectionsOutput) with field(s):
    ///   - [`connections(Option<Vec<Connection>>)`](crate::output::GetConnectionsOutput::connections): <p>Information about the connections.</p>
    ///   - [`next_token(Option<String>)`](crate::output::GetConnectionsOutput::next_token): <p>The token to use for the next page of results.</p>
    /// - On failure, responds with [`SdkError<GetConnectionsError>`](crate::error::GetConnectionsError)
    pub fn get_connections(&self) -> crate::client::fluent_builders::GetConnections {
        crate::client::fluent_builders::GetConnections::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetConnectPeer`](crate::client::fluent_builders::GetConnectPeer) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`connect_peer_id(impl Into<String>)`](crate::client::fluent_builders::GetConnectPeer::connect_peer_id) / [`set_connect_peer_id(Option<String>)`](crate::client::fluent_builders::GetConnectPeer::set_connect_peer_id): <p>The ID of the Connect peer.</p>
    /// - On success, responds with [`GetConnectPeerOutput`](crate::output::GetConnectPeerOutput) with field(s):
    ///   - [`connect_peer(Option<ConnectPeer>)`](crate::output::GetConnectPeerOutput::connect_peer): <p>Returns information about a core network Connect peer.</p>
    /// - On failure, responds with [`SdkError<GetConnectPeerError>`](crate::error::GetConnectPeerError)
    pub fn get_connect_peer(&self) -> crate::client::fluent_builders::GetConnectPeer {
        crate::client::fluent_builders::GetConnectPeer::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetConnectPeerAssociations`](crate::client::fluent_builders::GetConnectPeerAssociations) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::GetConnectPeerAssociations::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`global_network_id(impl Into<String>)`](crate::client::fluent_builders::GetConnectPeerAssociations::global_network_id) / [`set_global_network_id(Option<String>)`](crate::client::fluent_builders::GetConnectPeerAssociations::set_global_network_id): <p>The ID of the global network.</p>
    ///   - [`connect_peer_ids(Vec<String>)`](crate::client::fluent_builders::GetConnectPeerAssociations::connect_peer_ids) / [`set_connect_peer_ids(Option<Vec<String>>)`](crate::client::fluent_builders::GetConnectPeerAssociations::set_connect_peer_ids): <p>The IDs of the Connect peers.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::GetConnectPeerAssociations::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::GetConnectPeerAssociations::set_max_results): <p>The maximum number of results to return.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::GetConnectPeerAssociations::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::GetConnectPeerAssociations::set_next_token): <p>The token for the next page of results.</p>
    /// - On success, responds with [`GetConnectPeerAssociationsOutput`](crate::output::GetConnectPeerAssociationsOutput) with field(s):
    ///   - [`connect_peer_associations(Option<Vec<ConnectPeerAssociation>>)`](crate::output::GetConnectPeerAssociationsOutput::connect_peer_associations): <p>Displays a list of Connect peer associations.</p>
    ///   - [`next_token(Option<String>)`](crate::output::GetConnectPeerAssociationsOutput::next_token): <p>The token for the next page of results.</p>
    /// - On failure, responds with [`SdkError<GetConnectPeerAssociationsError>`](crate::error::GetConnectPeerAssociationsError)
    pub fn get_connect_peer_associations(
        &self,
    ) -> crate::client::fluent_builders::GetConnectPeerAssociations {
        crate::client::fluent_builders::GetConnectPeerAssociations::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetCoreNetwork`](crate::client::fluent_builders::GetCoreNetwork) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`core_network_id(impl Into<String>)`](crate::client::fluent_builders::GetCoreNetwork::core_network_id) / [`set_core_network_id(Option<String>)`](crate::client::fluent_builders::GetCoreNetwork::set_core_network_id): <p>The ID of a core network.</p>
    /// - On success, responds with [`GetCoreNetworkOutput`](crate::output::GetCoreNetworkOutput) with field(s):
    ///   - [`core_network(Option<CoreNetwork>)`](crate::output::GetCoreNetworkOutput::core_network): <p>Details about a core network.</p>
    /// - On failure, responds with [`SdkError<GetCoreNetworkError>`](crate::error::GetCoreNetworkError)
    pub fn get_core_network(&self) -> crate::client::fluent_builders::GetCoreNetwork {
        crate::client::fluent_builders::GetCoreNetwork::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetCoreNetworkChangeEvents`](crate::client::fluent_builders::GetCoreNetworkChangeEvents) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::GetCoreNetworkChangeEvents::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`core_network_id(impl Into<String>)`](crate::client::fluent_builders::GetCoreNetworkChangeEvents::core_network_id) / [`set_core_network_id(Option<String>)`](crate::client::fluent_builders::GetCoreNetworkChangeEvents::set_core_network_id): <p>The ID of a core network.</p>
    ///   - [`policy_version_id(i32)`](crate::client::fluent_builders::GetCoreNetworkChangeEvents::policy_version_id) / [`set_policy_version_id(Option<i32>)`](crate::client::fluent_builders::GetCoreNetworkChangeEvents::set_policy_version_id): <p>The ID of the policy version.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::GetCoreNetworkChangeEvents::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::GetCoreNetworkChangeEvents::set_max_results): <p>The maximum number of results to return.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::GetCoreNetworkChangeEvents::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::GetCoreNetworkChangeEvents::set_next_token): <p>The token for the next page of results.</p>
    /// - On success, responds with [`GetCoreNetworkChangeEventsOutput`](crate::output::GetCoreNetworkChangeEventsOutput) with field(s):
    ///   - [`core_network_change_events(Option<Vec<CoreNetworkChangeEvent>>)`](crate::output::GetCoreNetworkChangeEventsOutput::core_network_change_events): <p>The response to <code>GetCoreNetworkChangeEventsRequest</code>.</p>
    ///   - [`next_token(Option<String>)`](crate::output::GetCoreNetworkChangeEventsOutput::next_token): <p>The token for the next page of results.</p>
    /// - On failure, responds with [`SdkError<GetCoreNetworkChangeEventsError>`](crate::error::GetCoreNetworkChangeEventsError)
    pub fn get_core_network_change_events(
        &self,
    ) -> crate::client::fluent_builders::GetCoreNetworkChangeEvents {
        crate::client::fluent_builders::GetCoreNetworkChangeEvents::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetCoreNetworkChangeSet`](crate::client::fluent_builders::GetCoreNetworkChangeSet) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::GetCoreNetworkChangeSet::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`core_network_id(impl Into<String>)`](crate::client::fluent_builders::GetCoreNetworkChangeSet::core_network_id) / [`set_core_network_id(Option<String>)`](crate::client::fluent_builders::GetCoreNetworkChangeSet::set_core_network_id): <p>The ID of a core network.</p>
    ///   - [`policy_version_id(i32)`](crate::client::fluent_builders::GetCoreNetworkChangeSet::policy_version_id) / [`set_policy_version_id(Option<i32>)`](crate::client::fluent_builders::GetCoreNetworkChangeSet::set_policy_version_id): <p>The ID of the policy version.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::GetCoreNetworkChangeSet::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::GetCoreNetworkChangeSet::set_max_results): <p>The maximum number of results to return.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::GetCoreNetworkChangeSet::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::GetCoreNetworkChangeSet::set_next_token): <p>The token for the next page of results.</p>
    /// - On success, responds with [`GetCoreNetworkChangeSetOutput`](crate::output::GetCoreNetworkChangeSetOutput) with field(s):
    ///   - [`core_network_changes(Option<Vec<CoreNetworkChange>>)`](crate::output::GetCoreNetworkChangeSetOutput::core_network_changes): <p>Describes a core network changes.</p>
    ///   - [`next_token(Option<String>)`](crate::output::GetCoreNetworkChangeSetOutput::next_token): <p>The token for the next page of results.</p>
    /// - On failure, responds with [`SdkError<GetCoreNetworkChangeSetError>`](crate::error::GetCoreNetworkChangeSetError)
    pub fn get_core_network_change_set(
        &self,
    ) -> crate::client::fluent_builders::GetCoreNetworkChangeSet {
        crate::client::fluent_builders::GetCoreNetworkChangeSet::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetCoreNetworkPolicy`](crate::client::fluent_builders::GetCoreNetworkPolicy) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`core_network_id(impl Into<String>)`](crate::client::fluent_builders::GetCoreNetworkPolicy::core_network_id) / [`set_core_network_id(Option<String>)`](crate::client::fluent_builders::GetCoreNetworkPolicy::set_core_network_id): <p>The ID of a core network.</p>
    ///   - [`policy_version_id(i32)`](crate::client::fluent_builders::GetCoreNetworkPolicy::policy_version_id) / [`set_policy_version_id(Option<i32>)`](crate::client::fluent_builders::GetCoreNetworkPolicy::set_policy_version_id): <p>The ID of a core network policy version.</p>
    ///   - [`alias(CoreNetworkPolicyAlias)`](crate::client::fluent_builders::GetCoreNetworkPolicy::alias) / [`set_alias(Option<CoreNetworkPolicyAlias>)`](crate::client::fluent_builders::GetCoreNetworkPolicy::set_alias): <p>The alias of a core network policy </p>
    /// - On success, responds with [`GetCoreNetworkPolicyOutput`](crate::output::GetCoreNetworkPolicyOutput) with field(s):
    ///   - [`core_network_policy(Option<CoreNetworkPolicy>)`](crate::output::GetCoreNetworkPolicyOutput::core_network_policy): <p>The details about a core network policy.</p>
    /// - On failure, responds with [`SdkError<GetCoreNetworkPolicyError>`](crate::error::GetCoreNetworkPolicyError)
    pub fn get_core_network_policy(&self) -> crate::client::fluent_builders::GetCoreNetworkPolicy {
        crate::client::fluent_builders::GetCoreNetworkPolicy::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetCustomerGatewayAssociations`](crate::client::fluent_builders::GetCustomerGatewayAssociations) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::GetCustomerGatewayAssociations::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`global_network_id(impl Into<String>)`](crate::client::fluent_builders::GetCustomerGatewayAssociations::global_network_id) / [`set_global_network_id(Option<String>)`](crate::client::fluent_builders::GetCustomerGatewayAssociations::set_global_network_id): <p>The ID of the global network.</p>
    ///   - [`customer_gateway_arns(Vec<String>)`](crate::client::fluent_builders::GetCustomerGatewayAssociations::customer_gateway_arns) / [`set_customer_gateway_arns(Option<Vec<String>>)`](crate::client::fluent_builders::GetCustomerGatewayAssociations::set_customer_gateway_arns): <p>One or more customer gateway Amazon Resource Names (ARNs). The maximum is 10.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::GetCustomerGatewayAssociations::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::GetCustomerGatewayAssociations::set_max_results): <p>The maximum number of results to return.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::GetCustomerGatewayAssociations::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::GetCustomerGatewayAssociations::set_next_token): <p>The token for the next page of results.</p>
    /// - On success, responds with [`GetCustomerGatewayAssociationsOutput`](crate::output::GetCustomerGatewayAssociationsOutput) with field(s):
    ///   - [`customer_gateway_associations(Option<Vec<CustomerGatewayAssociation>>)`](crate::output::GetCustomerGatewayAssociationsOutput::customer_gateway_associations): <p>The customer gateway associations.</p>
    ///   - [`next_token(Option<String>)`](crate::output::GetCustomerGatewayAssociationsOutput::next_token): <p>The token for the next page of results.</p>
    /// - On failure, responds with [`SdkError<GetCustomerGatewayAssociationsError>`](crate::error::GetCustomerGatewayAssociationsError)
    pub fn get_customer_gateway_associations(
        &self,
    ) -> crate::client::fluent_builders::GetCustomerGatewayAssociations {
        crate::client::fluent_builders::GetCustomerGatewayAssociations::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetDevices`](crate::client::fluent_builders::GetDevices) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::GetDevices::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`global_network_id(impl Into<String>)`](crate::client::fluent_builders::GetDevices::global_network_id) / [`set_global_network_id(Option<String>)`](crate::client::fluent_builders::GetDevices::set_global_network_id): <p>The ID of the global network.</p>
    ///   - [`device_ids(Vec<String>)`](crate::client::fluent_builders::GetDevices::device_ids) / [`set_device_ids(Option<Vec<String>>)`](crate::client::fluent_builders::GetDevices::set_device_ids): <p>One or more device IDs. The maximum is 10.</p>
    ///   - [`site_id(impl Into<String>)`](crate::client::fluent_builders::GetDevices::site_id) / [`set_site_id(Option<String>)`](crate::client::fluent_builders::GetDevices::set_site_id): <p>The ID of the site.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::GetDevices::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::GetDevices::set_max_results): <p>The maximum number of results to return.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::GetDevices::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::GetDevices::set_next_token): <p>The token for the next page of results.</p>
    /// - On success, responds with [`GetDevicesOutput`](crate::output::GetDevicesOutput) with field(s):
    ///   - [`devices(Option<Vec<Device>>)`](crate::output::GetDevicesOutput::devices): <p>The devices.</p>
    ///   - [`next_token(Option<String>)`](crate::output::GetDevicesOutput::next_token): <p>The token for the next page of results.</p>
    /// - On failure, responds with [`SdkError<GetDevicesError>`](crate::error::GetDevicesError)
    pub fn get_devices(&self) -> crate::client::fluent_builders::GetDevices {
        crate::client::fluent_builders::GetDevices::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetLinkAssociations`](crate::client::fluent_builders::GetLinkAssociations) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::GetLinkAssociations::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`global_network_id(impl Into<String>)`](crate::client::fluent_builders::GetLinkAssociations::global_network_id) / [`set_global_network_id(Option<String>)`](crate::client::fluent_builders::GetLinkAssociations::set_global_network_id): <p>The ID of the global network.</p>
    ///   - [`device_id(impl Into<String>)`](crate::client::fluent_builders::GetLinkAssociations::device_id) / [`set_device_id(Option<String>)`](crate::client::fluent_builders::GetLinkAssociations::set_device_id): <p>The ID of the device.</p>
    ///   - [`link_id(impl Into<String>)`](crate::client::fluent_builders::GetLinkAssociations::link_id) / [`set_link_id(Option<String>)`](crate::client::fluent_builders::GetLinkAssociations::set_link_id): <p>The ID of the link.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::GetLinkAssociations::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::GetLinkAssociations::set_max_results): <p>The maximum number of results to return.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::GetLinkAssociations::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::GetLinkAssociations::set_next_token): <p>The token for the next page of results.</p>
    /// - On success, responds with [`GetLinkAssociationsOutput`](crate::output::GetLinkAssociationsOutput) with field(s):
    ///   - [`link_associations(Option<Vec<LinkAssociation>>)`](crate::output::GetLinkAssociationsOutput::link_associations): <p>The link associations.</p>
    ///   - [`next_token(Option<String>)`](crate::output::GetLinkAssociationsOutput::next_token): <p>The token for the next page of results.</p>
    /// - On failure, responds with [`SdkError<GetLinkAssociationsError>`](crate::error::GetLinkAssociationsError)
    pub fn get_link_associations(&self) -> crate::client::fluent_builders::GetLinkAssociations {
        crate::client::fluent_builders::GetLinkAssociations::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetLinks`](crate::client::fluent_builders::GetLinks) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::GetLinks::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`global_network_id(impl Into<String>)`](crate::client::fluent_builders::GetLinks::global_network_id) / [`set_global_network_id(Option<String>)`](crate::client::fluent_builders::GetLinks::set_global_network_id): <p>The ID of the global network.</p>
    ///   - [`link_ids(Vec<String>)`](crate::client::fluent_builders::GetLinks::link_ids) / [`set_link_ids(Option<Vec<String>>)`](crate::client::fluent_builders::GetLinks::set_link_ids): <p>One or more link IDs. The maximum is 10.</p>
    ///   - [`site_id(impl Into<String>)`](crate::client::fluent_builders::GetLinks::site_id) / [`set_site_id(Option<String>)`](crate::client::fluent_builders::GetLinks::set_site_id): <p>The ID of the site.</p>
    ///   - [`r#type(impl Into<String>)`](crate::client::fluent_builders::GetLinks::type) / [`set_type(Option<String>)`](crate::client::fluent_builders::GetLinks::set_type): <p>The link type.</p>
    ///   - [`provider(impl Into<String>)`](crate::client::fluent_builders::GetLinks::provider) / [`set_provider(Option<String>)`](crate::client::fluent_builders::GetLinks::set_provider): <p>The link provider.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::GetLinks::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::GetLinks::set_max_results): <p>The maximum number of results to return.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::GetLinks::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::GetLinks::set_next_token): <p>The token for the next page of results.</p>
    /// - On success, responds with [`GetLinksOutput`](crate::output::GetLinksOutput) with field(s):
    ///   - [`links(Option<Vec<Link>>)`](crate::output::GetLinksOutput::links): <p>The links.</p>
    ///   - [`next_token(Option<String>)`](crate::output::GetLinksOutput::next_token): <p>The token for the next page of results.</p>
    /// - On failure, responds with [`SdkError<GetLinksError>`](crate::error::GetLinksError)
    pub fn get_links(&self) -> crate::client::fluent_builders::GetLinks {
        crate::client::fluent_builders::GetLinks::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetNetworkResourceCounts`](crate::client::fluent_builders::GetNetworkResourceCounts) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::GetNetworkResourceCounts::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`global_network_id(impl Into<String>)`](crate::client::fluent_builders::GetNetworkResourceCounts::global_network_id) / [`set_global_network_id(Option<String>)`](crate::client::fluent_builders::GetNetworkResourceCounts::set_global_network_id): <p>The ID of the global network.</p>
    ///   - [`resource_type(impl Into<String>)`](crate::client::fluent_builders::GetNetworkResourceCounts::resource_type) / [`set_resource_type(Option<String>)`](crate::client::fluent_builders::GetNetworkResourceCounts::set_resource_type): <p>The resource type.</p>  <p>The following are the supported resource types for Direct Connect:</p>  <ul>   <li> <p> <code>dxcon</code> </p> </li>   <li> <p> <code>dx-gateway</code> </p> </li>   <li> <p> <code>dx-vif</code> </p> </li>  </ul>  <p>The following are the supported resource types for Network Manager:</p>  <ul>   <li> <p> <code>connection</code> </p> </li>   <li> <p> <code>device</code> </p> </li>   <li> <p> <code>link</code> </p> </li>   <li> <p> <code>site</code> </p> </li>  </ul>  <p>The following are the supported resource types for Amazon VPC:</p>  <ul>   <li> <p> <code>customer-gateway</code> </p> </li>   <li> <p> <code>transit-gateway</code> </p> </li>   <li> <p> <code>transit-gateway-attachment</code> </p> </li>   <li> <p> <code>transit-gateway-connect-peer</code> </p> </li>   <li> <p> <code>transit-gateway-route-table</code> </p> </li>   <li> <p> <code>vpn-connection</code> </p> </li>  </ul>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::GetNetworkResourceCounts::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::GetNetworkResourceCounts::set_max_results): <p>The maximum number of results to return.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::GetNetworkResourceCounts::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::GetNetworkResourceCounts::set_next_token): <p>The token for the next page of results.</p>
    /// - On success, responds with [`GetNetworkResourceCountsOutput`](crate::output::GetNetworkResourceCountsOutput) with field(s):
    ///   - [`network_resource_counts(Option<Vec<NetworkResourceCount>>)`](crate::output::GetNetworkResourceCountsOutput::network_resource_counts): <p>The count of resources.</p>
    ///   - [`next_token(Option<String>)`](crate::output::GetNetworkResourceCountsOutput::next_token): <p>The token for the next page of results.</p>
    /// - On failure, responds with [`SdkError<GetNetworkResourceCountsError>`](crate::error::GetNetworkResourceCountsError)
    pub fn get_network_resource_counts(
        &self,
    ) -> crate::client::fluent_builders::GetNetworkResourceCounts {
        crate::client::fluent_builders::GetNetworkResourceCounts::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetNetworkResourceRelationships`](crate::client::fluent_builders::GetNetworkResourceRelationships) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::GetNetworkResourceRelationships::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`global_network_id(impl Into<String>)`](crate::client::fluent_builders::GetNetworkResourceRelationships::global_network_id) / [`set_global_network_id(Option<String>)`](crate::client::fluent_builders::GetNetworkResourceRelationships::set_global_network_id): <p>The ID of the global network.</p>
    ///   - [`core_network_id(impl Into<String>)`](crate::client::fluent_builders::GetNetworkResourceRelationships::core_network_id) / [`set_core_network_id(Option<String>)`](crate::client::fluent_builders::GetNetworkResourceRelationships::set_core_network_id): <p>The ID of a core network.</p>
    ///   - [`registered_gateway_arn(impl Into<String>)`](crate::client::fluent_builders::GetNetworkResourceRelationships::registered_gateway_arn) / [`set_registered_gateway_arn(Option<String>)`](crate::client::fluent_builders::GetNetworkResourceRelationships::set_registered_gateway_arn): <p>The ARN of the registered gateway.</p>
    ///   - [`aws_region(impl Into<String>)`](crate::client::fluent_builders::GetNetworkResourceRelationships::aws_region) / [`set_aws_region(Option<String>)`](crate::client::fluent_builders::GetNetworkResourceRelationships::set_aws_region): <p>The Amazon Web Services Region.</p>
    ///   - [`account_id(impl Into<String>)`](crate::client::fluent_builders::GetNetworkResourceRelationships::account_id) / [`set_account_id(Option<String>)`](crate::client::fluent_builders::GetNetworkResourceRelationships::set_account_id): <p>The Amazon Web Services account ID.</p>
    ///   - [`resource_type(impl Into<String>)`](crate::client::fluent_builders::GetNetworkResourceRelationships::resource_type) / [`set_resource_type(Option<String>)`](crate::client::fluent_builders::GetNetworkResourceRelationships::set_resource_type): <p>The resource type.</p>  <p>The following are the supported resource types for Direct Connect:</p>  <ul>   <li> <p> <code>dxcon</code> </p> </li>   <li> <p> <code>dx-gateway</code> </p> </li>   <li> <p> <code>dx-vif</code> </p> </li>  </ul>  <p>The following are the supported resource types for Network Manager:</p>  <ul>   <li> <p> <code>connection</code> </p> </li>   <li> <p> <code>device</code> </p> </li>   <li> <p> <code>link</code> </p> </li>   <li> <p> <code>site</code> </p> </li>  </ul>  <p>The following are the supported resource types for Amazon VPC:</p>  <ul>   <li> <p> <code>customer-gateway</code> </p> </li>   <li> <p> <code>transit-gateway</code> </p> </li>   <li> <p> <code>transit-gateway-attachment</code> </p> </li>   <li> <p> <code>transit-gateway-connect-peer</code> </p> </li>   <li> <p> <code>transit-gateway-route-table</code> </p> </li>   <li> <p> <code>vpn-connection</code> </p> </li>  </ul>
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::GetNetworkResourceRelationships::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::GetNetworkResourceRelationships::set_resource_arn): <p>The ARN of the gateway.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::GetNetworkResourceRelationships::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::GetNetworkResourceRelationships::set_max_results): <p>The maximum number of results to return.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::GetNetworkResourceRelationships::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::GetNetworkResourceRelationships::set_next_token): <p>The token for the next page of results.</p>
    /// - On success, responds with [`GetNetworkResourceRelationshipsOutput`](crate::output::GetNetworkResourceRelationshipsOutput) with field(s):
    ///   - [`relationships(Option<Vec<Relationship>>)`](crate::output::GetNetworkResourceRelationshipsOutput::relationships): <p>The resource relationships.</p>
    ///   - [`next_token(Option<String>)`](crate::output::GetNetworkResourceRelationshipsOutput::next_token): <p>The token for the next page of results.</p>
    /// - On failure, responds with [`SdkError<GetNetworkResourceRelationshipsError>`](crate::error::GetNetworkResourceRelationshipsError)
    pub fn get_network_resource_relationships(
        &self,
    ) -> crate::client::fluent_builders::GetNetworkResourceRelationships {
        crate::client::fluent_builders::GetNetworkResourceRelationships::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetNetworkResources`](crate::client::fluent_builders::GetNetworkResources) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::GetNetworkResources::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`global_network_id(impl Into<String>)`](crate::client::fluent_builders::GetNetworkResources::global_network_id) / [`set_global_network_id(Option<String>)`](crate::client::fluent_builders::GetNetworkResources::set_global_network_id): <p>The ID of the global network.</p>
    ///   - [`core_network_id(impl Into<String>)`](crate::client::fluent_builders::GetNetworkResources::core_network_id) / [`set_core_network_id(Option<String>)`](crate::client::fluent_builders::GetNetworkResources::set_core_network_id): <p>The ID of a core network.</p>
    ///   - [`registered_gateway_arn(impl Into<String>)`](crate::client::fluent_builders::GetNetworkResources::registered_gateway_arn) / [`set_registered_gateway_arn(Option<String>)`](crate::client::fluent_builders::GetNetworkResources::set_registered_gateway_arn): <p>The ARN of the gateway.</p>
    ///   - [`aws_region(impl Into<String>)`](crate::client::fluent_builders::GetNetworkResources::aws_region) / [`set_aws_region(Option<String>)`](crate::client::fluent_builders::GetNetworkResources::set_aws_region): <p>The Amazon Web Services Region.</p>
    ///   - [`account_id(impl Into<String>)`](crate::client::fluent_builders::GetNetworkResources::account_id) / [`set_account_id(Option<String>)`](crate::client::fluent_builders::GetNetworkResources::set_account_id): <p>The Amazon Web Services account ID.</p>
    ///   - [`resource_type(impl Into<String>)`](crate::client::fluent_builders::GetNetworkResources::resource_type) / [`set_resource_type(Option<String>)`](crate::client::fluent_builders::GetNetworkResources::set_resource_type): <p>The resource type.</p>  <p>The following are the supported resource types for Direct Connect:</p>  <ul>   <li> <p> <code>dxcon</code> - The definition model is <a href="https://docs.aws.amazon.com/directconnect/latest/APIReference/API_Connection.html">Connection</a>.</p> </li>   <li> <p> <code>dx-gateway</code> - The definition model is <a href="https://docs.aws.amazon.com/directconnect/latest/APIReference/API_DirectConnectGateway.html">DirectConnectGateway</a>.</p> </li>   <li> <p> <code>dx-vif</code> - The definition model is <a href="https://docs.aws.amazon.com/directconnect/latest/APIReference/API_VirtualInterface.html">VirtualInterface</a>.</p> </li>  </ul>  <p>The following are the supported resource types for Network Manager:</p>  <ul>   <li> <p> <code>connection</code> - The definition model is <a href="https://docs.aws.amazon.com/networkmanager/latest/APIReference/API_Connection.html">Connection</a>.</p> </li>   <li> <p> <code>device</code> - The definition model is <a href="https://docs.aws.amazon.com/networkmanager/latest/APIReference/API_Device.html">Device</a>.</p> </li>   <li> <p> <code>link</code> - The definition model is <a href="https://docs.aws.amazon.com/networkmanager/latest/APIReference/API_Link.html">Link</a>.</p> </li>   <li> <p> <code>site</code> - The definition model is <a href="https://docs.aws.amazon.com/networkmanager/latest/APIReference/API_Site.html">Site</a>.</p> </li>  </ul>  <p>The following are the supported resource types for Amazon VPC:</p>  <ul>   <li> <p> <code>customer-gateway</code> - The definition model is <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CustomerGateway.html">CustomerGateway</a>.</p> </li>   <li> <p> <code>transit-gateway</code> - The definition model is <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_TransitGateway.html">TransitGateway</a>.</p> </li>   <li> <p> <code>transit-gateway-attachment</code> - The definition model is <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_TransitGatewayAttachment.html">TransitGatewayAttachment</a>.</p> </li>   <li> <p> <code>transit-gateway-connect-peer</code> - The definition model is <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_TransitGatewayConnectPeer.html">TransitGatewayConnectPeer</a>.</p> </li>   <li> <p> <code>transit-gateway-route-table</code> - The definition model is <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_TransitGatewayRouteTable.html">TransitGatewayRouteTable</a>.</p> </li>   <li> <p> <code>vpn-connection</code> - The definition model is <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_VpnConnection.html">VpnConnection</a>.</p> </li>  </ul>
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::GetNetworkResources::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::GetNetworkResources::set_resource_arn): <p>The ARN of the resource.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::GetNetworkResources::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::GetNetworkResources::set_max_results): <p>The maximum number of results to return.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::GetNetworkResources::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::GetNetworkResources::set_next_token): <p>The token for the next page of results.</p>
    /// - On success, responds with [`GetNetworkResourcesOutput`](crate::output::GetNetworkResourcesOutput) with field(s):
    ///   - [`network_resources(Option<Vec<NetworkResource>>)`](crate::output::GetNetworkResourcesOutput::network_resources): <p>The network resources.</p>
    ///   - [`next_token(Option<String>)`](crate::output::GetNetworkResourcesOutput::next_token): <p>The token for the next page of results.</p>
    /// - On failure, responds with [`SdkError<GetNetworkResourcesError>`](crate::error::GetNetworkResourcesError)
    pub fn get_network_resources(&self) -> crate::client::fluent_builders::GetNetworkResources {
        crate::client::fluent_builders::GetNetworkResources::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetNetworkRoutes`](crate::client::fluent_builders::GetNetworkRoutes) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`global_network_id(impl Into<String>)`](crate::client::fluent_builders::GetNetworkRoutes::global_network_id) / [`set_global_network_id(Option<String>)`](crate::client::fluent_builders::GetNetworkRoutes::set_global_network_id): <p>The ID of the global network.</p>
    ///   - [`route_table_identifier(RouteTableIdentifier)`](crate::client::fluent_builders::GetNetworkRoutes::route_table_identifier) / [`set_route_table_identifier(Option<RouteTableIdentifier>)`](crate::client::fluent_builders::GetNetworkRoutes::set_route_table_identifier): <p>The ID of the route table.</p>
    ///   - [`exact_cidr_matches(Vec<String>)`](crate::client::fluent_builders::GetNetworkRoutes::exact_cidr_matches) / [`set_exact_cidr_matches(Option<Vec<String>>)`](crate::client::fluent_builders::GetNetworkRoutes::set_exact_cidr_matches): <p>An exact CIDR block.</p>
    ///   - [`longest_prefix_matches(Vec<String>)`](crate::client::fluent_builders::GetNetworkRoutes::longest_prefix_matches) / [`set_longest_prefix_matches(Option<Vec<String>>)`](crate::client::fluent_builders::GetNetworkRoutes::set_longest_prefix_matches): <p>The most specific route that matches the traffic (longest prefix match).</p>
    ///   - [`subnet_of_matches(Vec<String>)`](crate::client::fluent_builders::GetNetworkRoutes::subnet_of_matches) / [`set_subnet_of_matches(Option<Vec<String>>)`](crate::client::fluent_builders::GetNetworkRoutes::set_subnet_of_matches): <p>The routes with a subnet that match the specified CIDR filter.</p>
    ///   - [`supernet_of_matches(Vec<String>)`](crate::client::fluent_builders::GetNetworkRoutes::supernet_of_matches) / [`set_supernet_of_matches(Option<Vec<String>>)`](crate::client::fluent_builders::GetNetworkRoutes::set_supernet_of_matches): <p>The routes with a CIDR that encompasses the CIDR filter. Example: If you specify 10.0.1.0/30, then the result returns 10.0.1.0/29.</p>
    ///   - [`prefix_list_ids(Vec<String>)`](crate::client::fluent_builders::GetNetworkRoutes::prefix_list_ids) / [`set_prefix_list_ids(Option<Vec<String>>)`](crate::client::fluent_builders::GetNetworkRoutes::set_prefix_list_ids): <p>The IDs of the prefix lists.</p>
    ///   - [`states(Vec<RouteState>)`](crate::client::fluent_builders::GetNetworkRoutes::states) / [`set_states(Option<Vec<RouteState>>)`](crate::client::fluent_builders::GetNetworkRoutes::set_states): <p>The route states.</p>
    ///   - [`types(Vec<RouteType>)`](crate::client::fluent_builders::GetNetworkRoutes::types) / [`set_types(Option<Vec<RouteType>>)`](crate::client::fluent_builders::GetNetworkRoutes::set_types): <p>The route types.</p>
    ///   - [`destination_filters(HashMap<String, Vec<String>>)`](crate::client::fluent_builders::GetNetworkRoutes::destination_filters) / [`set_destination_filters(Option<HashMap<String, Vec<String>>>)`](crate::client::fluent_builders::GetNetworkRoutes::set_destination_filters): <p>Filter by route table destination. Possible Values: TRANSIT_GATEWAY_ATTACHMENT_ID, RESOURCE_ID, or RESOURCE_TYPE.</p>
    /// - On success, responds with [`GetNetworkRoutesOutput`](crate::output::GetNetworkRoutesOutput) with field(s):
    ///   - [`route_table_arn(Option<String>)`](crate::output::GetNetworkRoutesOutput::route_table_arn): <p>The ARN of the route table.</p>
    ///   - [`core_network_segment_edge(Option<CoreNetworkSegmentEdgeIdentifier>)`](crate::output::GetNetworkRoutesOutput::core_network_segment_edge): <p>Describes a core network segment edge.</p>
    ///   - [`route_table_type(Option<RouteTableType>)`](crate::output::GetNetworkRoutesOutput::route_table_type): <p>The route table type.</p>
    ///   - [`route_table_timestamp(Option<DateTime>)`](crate::output::GetNetworkRoutesOutput::route_table_timestamp): <p>The route table creation time.</p>
    ///   - [`network_routes(Option<Vec<NetworkRoute>>)`](crate::output::GetNetworkRoutesOutput::network_routes): <p>The network routes.</p>
    /// - On failure, responds with [`SdkError<GetNetworkRoutesError>`](crate::error::GetNetworkRoutesError)
    pub fn get_network_routes(&self) -> crate::client::fluent_builders::GetNetworkRoutes {
        crate::client::fluent_builders::GetNetworkRoutes::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetNetworkTelemetry`](crate::client::fluent_builders::GetNetworkTelemetry) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::GetNetworkTelemetry::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`global_network_id(impl Into<String>)`](crate::client::fluent_builders::GetNetworkTelemetry::global_network_id) / [`set_global_network_id(Option<String>)`](crate::client::fluent_builders::GetNetworkTelemetry::set_global_network_id): <p>The ID of the global network.</p>
    ///   - [`core_network_id(impl Into<String>)`](crate::client::fluent_builders::GetNetworkTelemetry::core_network_id) / [`set_core_network_id(Option<String>)`](crate::client::fluent_builders::GetNetworkTelemetry::set_core_network_id): <p>The ID of a core network.</p>
    ///   - [`registered_gateway_arn(impl Into<String>)`](crate::client::fluent_builders::GetNetworkTelemetry::registered_gateway_arn) / [`set_registered_gateway_arn(Option<String>)`](crate::client::fluent_builders::GetNetworkTelemetry::set_registered_gateway_arn): <p>The ARN of the gateway.</p>
    ///   - [`aws_region(impl Into<String>)`](crate::client::fluent_builders::GetNetworkTelemetry::aws_region) / [`set_aws_region(Option<String>)`](crate::client::fluent_builders::GetNetworkTelemetry::set_aws_region): <p>The Amazon Web Services Region.</p>
    ///   - [`account_id(impl Into<String>)`](crate::client::fluent_builders::GetNetworkTelemetry::account_id) / [`set_account_id(Option<String>)`](crate::client::fluent_builders::GetNetworkTelemetry::set_account_id): <p>The Amazon Web Services account ID.</p>
    ///   - [`resource_type(impl Into<String>)`](crate::client::fluent_builders::GetNetworkTelemetry::resource_type) / [`set_resource_type(Option<String>)`](crate::client::fluent_builders::GetNetworkTelemetry::set_resource_type): <p>The resource type.</p>  <p>The following are the supported resource types for Direct Connect:</p>  <ul>   <li> <p> <code>dxcon</code> </p> </li>   <li> <p> <code>dx-gateway</code> </p> </li>   <li> <p> <code>dx-vif</code> </p> </li>  </ul>  <p>The following are the supported resource types for Network Manager:</p>  <ul>   <li> <p> <code>connection</code> </p> </li>   <li> <p> <code>device</code> </p> </li>   <li> <p> <code>link</code> </p> </li>   <li> <p> <code>site</code> </p> </li>  </ul>  <p>The following are the supported resource types for Amazon VPC:</p>  <ul>   <li> <p> <code>customer-gateway</code> </p> </li>   <li> <p> <code>transit-gateway</code> </p> </li>   <li> <p> <code>transit-gateway-attachment</code> </p> </li>   <li> <p> <code>transit-gateway-connect-peer</code> </p> </li>   <li> <p> <code>transit-gateway-route-table</code> </p> </li>   <li> <p> <code>vpn-connection</code> </p> </li>  </ul>
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::GetNetworkTelemetry::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::GetNetworkTelemetry::set_resource_arn): <p>The ARN of the resource.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::GetNetworkTelemetry::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::GetNetworkTelemetry::set_max_results): <p>The maximum number of results to return.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::GetNetworkTelemetry::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::GetNetworkTelemetry::set_next_token): <p>The token for the next page of results.</p>
    /// - On success, responds with [`GetNetworkTelemetryOutput`](crate::output::GetNetworkTelemetryOutput) with field(s):
    ///   - [`network_telemetry(Option<Vec<NetworkTelemetry>>)`](crate::output::GetNetworkTelemetryOutput::network_telemetry): <p>The network telemetry.</p>
    ///   - [`next_token(Option<String>)`](crate::output::GetNetworkTelemetryOutput::next_token): <p>The token for the next page of results.</p>
    /// - On failure, responds with [`SdkError<GetNetworkTelemetryError>`](crate::error::GetNetworkTelemetryError)
    pub fn get_network_telemetry(&self) -> crate::client::fluent_builders::GetNetworkTelemetry {
        crate::client::fluent_builders::GetNetworkTelemetry::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetResourcePolicy`](crate::client::fluent_builders::GetResourcePolicy) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::GetResourcePolicy::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::GetResourcePolicy::set_resource_arn): <p>The ARN of the resource.</p>
    /// - On success, responds with [`GetResourcePolicyOutput`](crate::output::GetResourcePolicyOutput) with field(s):
    ///   - [`policy_document(Option<String>)`](crate::output::GetResourcePolicyOutput::policy_document): <p>The resource policy document.</p>
    /// - On failure, responds with [`SdkError<GetResourcePolicyError>`](crate::error::GetResourcePolicyError)
    pub fn get_resource_policy(&self) -> crate::client::fluent_builders::GetResourcePolicy {
        crate::client::fluent_builders::GetResourcePolicy::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetRouteAnalysis`](crate::client::fluent_builders::GetRouteAnalysis) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`global_network_id(impl Into<String>)`](crate::client::fluent_builders::GetRouteAnalysis::global_network_id) / [`set_global_network_id(Option<String>)`](crate::client::fluent_builders::GetRouteAnalysis::set_global_network_id): <p>The ID of the global network.</p>
    ///   - [`route_analysis_id(impl Into<String>)`](crate::client::fluent_builders::GetRouteAnalysis::route_analysis_id) / [`set_route_analysis_id(Option<String>)`](crate::client::fluent_builders::GetRouteAnalysis::set_route_analysis_id): <p>The ID of the route analysis.</p>
    /// - On success, responds with [`GetRouteAnalysisOutput`](crate::output::GetRouteAnalysisOutput) with field(s):
    ///   - [`route_analysis(Option<RouteAnalysis>)`](crate::output::GetRouteAnalysisOutput::route_analysis): <p>The route analysis.</p>
    /// - On failure, responds with [`SdkError<GetRouteAnalysisError>`](crate::error::GetRouteAnalysisError)
    pub fn get_route_analysis(&self) -> crate::client::fluent_builders::GetRouteAnalysis {
        crate::client::fluent_builders::GetRouteAnalysis::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetSites`](crate::client::fluent_builders::GetSites) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::GetSites::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`global_network_id(impl Into<String>)`](crate::client::fluent_builders::GetSites::global_network_id) / [`set_global_network_id(Option<String>)`](crate::client::fluent_builders::GetSites::set_global_network_id): <p>The ID of the global network.</p>
    ///   - [`site_ids(Vec<String>)`](crate::client::fluent_builders::GetSites::site_ids) / [`set_site_ids(Option<Vec<String>>)`](crate::client::fluent_builders::GetSites::set_site_ids): <p>One or more site IDs. The maximum is 10.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::GetSites::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::GetSites::set_max_results): <p>The maximum number of results to return.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::GetSites::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::GetSites::set_next_token): <p>The token for the next page of results.</p>
    /// - On success, responds with [`GetSitesOutput`](crate::output::GetSitesOutput) with field(s):
    ///   - [`sites(Option<Vec<Site>>)`](crate::output::GetSitesOutput::sites): <p>The sites.</p>
    ///   - [`next_token(Option<String>)`](crate::output::GetSitesOutput::next_token): <p>The token for the next page of results.</p>
    /// - On failure, responds with [`SdkError<GetSitesError>`](crate::error::GetSitesError)
    pub fn get_sites(&self) -> crate::client::fluent_builders::GetSites {
        crate::client::fluent_builders::GetSites::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetSiteToSiteVpnAttachment`](crate::client::fluent_builders::GetSiteToSiteVpnAttachment) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`attachment_id(impl Into<String>)`](crate::client::fluent_builders::GetSiteToSiteVpnAttachment::attachment_id) / [`set_attachment_id(Option<String>)`](crate::client::fluent_builders::GetSiteToSiteVpnAttachment::set_attachment_id): <p>The ID of the attachment.</p>
    /// - On success, responds with [`GetSiteToSiteVpnAttachmentOutput`](crate::output::GetSiteToSiteVpnAttachmentOutput) with field(s):
    ///   - [`site_to_site_vpn_attachment(Option<SiteToSiteVpnAttachment>)`](crate::output::GetSiteToSiteVpnAttachmentOutput::site_to_site_vpn_attachment): <p>Describes the site-to-site attachment.</p>
    /// - On failure, responds with [`SdkError<GetSiteToSiteVpnAttachmentError>`](crate::error::GetSiteToSiteVpnAttachmentError)
    pub fn get_site_to_site_vpn_attachment(
        &self,
    ) -> crate::client::fluent_builders::GetSiteToSiteVpnAttachment {
        crate::client::fluent_builders::GetSiteToSiteVpnAttachment::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetTransitGatewayConnectPeerAssociations`](crate::client::fluent_builders::GetTransitGatewayConnectPeerAssociations) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::GetTransitGatewayConnectPeerAssociations::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`global_network_id(impl Into<String>)`](crate::client::fluent_builders::GetTransitGatewayConnectPeerAssociations::global_network_id) / [`set_global_network_id(Option<String>)`](crate::client::fluent_builders::GetTransitGatewayConnectPeerAssociations::set_global_network_id): <p>The ID of the global network.</p>
    ///   - [`transit_gateway_connect_peer_arns(Vec<String>)`](crate::client::fluent_builders::GetTransitGatewayConnectPeerAssociations::transit_gateway_connect_peer_arns) / [`set_transit_gateway_connect_peer_arns(Option<Vec<String>>)`](crate::client::fluent_builders::GetTransitGatewayConnectPeerAssociations::set_transit_gateway_connect_peer_arns): <p>One or more transit gateway Connect peer Amazon Resource Names (ARNs).</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::GetTransitGatewayConnectPeerAssociations::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::GetTransitGatewayConnectPeerAssociations::set_max_results): <p>The maximum number of results to return.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::GetTransitGatewayConnectPeerAssociations::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::GetTransitGatewayConnectPeerAssociations::set_next_token): <p>The token for the next page of results.</p>
    /// - On success, responds with [`GetTransitGatewayConnectPeerAssociationsOutput`](crate::output::GetTransitGatewayConnectPeerAssociationsOutput) with field(s):
    ///   - [`transit_gateway_connect_peer_associations(Option<Vec<TransitGatewayConnectPeerAssociation>>)`](crate::output::GetTransitGatewayConnectPeerAssociationsOutput::transit_gateway_connect_peer_associations): <p>Information about the transit gateway Connect peer associations.</p>
    ///   - [`next_token(Option<String>)`](crate::output::GetTransitGatewayConnectPeerAssociationsOutput::next_token): <p>The token to use for the next page of results.</p>
    /// - On failure, responds with [`SdkError<GetTransitGatewayConnectPeerAssociationsError>`](crate::error::GetTransitGatewayConnectPeerAssociationsError)
    pub fn get_transit_gateway_connect_peer_associations(
        &self,
    ) -> crate::client::fluent_builders::GetTransitGatewayConnectPeerAssociations {
        crate::client::fluent_builders::GetTransitGatewayConnectPeerAssociations::new(
            self.handle.clone(),
        )
    }
    /// Constructs a fluent builder for the [`GetTransitGatewayPeering`](crate::client::fluent_builders::GetTransitGatewayPeering) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`peering_id(impl Into<String>)`](crate::client::fluent_builders::GetTransitGatewayPeering::peering_id) / [`set_peering_id(Option<String>)`](crate::client::fluent_builders::GetTransitGatewayPeering::set_peering_id): <p>The ID of the peering request.</p>
    /// - On success, responds with [`GetTransitGatewayPeeringOutput`](crate::output::GetTransitGatewayPeeringOutput) with field(s):
    ///   - [`transit_gateway_peering(Option<TransitGatewayPeering>)`](crate::output::GetTransitGatewayPeeringOutput::transit_gateway_peering): <p>Returns information about a transit gateway peering. </p>
    /// - On failure, responds with [`SdkError<GetTransitGatewayPeeringError>`](crate::error::GetTransitGatewayPeeringError)
    pub fn get_transit_gateway_peering(
        &self,
    ) -> crate::client::fluent_builders::GetTransitGatewayPeering {
        crate::client::fluent_builders::GetTransitGatewayPeering::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetTransitGatewayRegistrations`](crate::client::fluent_builders::GetTransitGatewayRegistrations) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::GetTransitGatewayRegistrations::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`global_network_id(impl Into<String>)`](crate::client::fluent_builders::GetTransitGatewayRegistrations::global_network_id) / [`set_global_network_id(Option<String>)`](crate::client::fluent_builders::GetTransitGatewayRegistrations::set_global_network_id): <p>The ID of the global network.</p>
    ///   - [`transit_gateway_arns(Vec<String>)`](crate::client::fluent_builders::GetTransitGatewayRegistrations::transit_gateway_arns) / [`set_transit_gateway_arns(Option<Vec<String>>)`](crate::client::fluent_builders::GetTransitGatewayRegistrations::set_transit_gateway_arns): <p>The Amazon Resource Names (ARNs) of one or more transit gateways. The maximum is 10.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::GetTransitGatewayRegistrations::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::GetTransitGatewayRegistrations::set_max_results): <p>The maximum number of results to return.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::GetTransitGatewayRegistrations::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::GetTransitGatewayRegistrations::set_next_token): <p>The token for the next page of results.</p>
    /// - On success, responds with [`GetTransitGatewayRegistrationsOutput`](crate::output::GetTransitGatewayRegistrationsOutput) with field(s):
    ///   - [`transit_gateway_registrations(Option<Vec<TransitGatewayRegistration>>)`](crate::output::GetTransitGatewayRegistrationsOutput::transit_gateway_registrations): <p>The transit gateway registrations.</p>
    ///   - [`next_token(Option<String>)`](crate::output::GetTransitGatewayRegistrationsOutput::next_token): <p>The token for the next page of results.</p>
    /// - On failure, responds with [`SdkError<GetTransitGatewayRegistrationsError>`](crate::error::GetTransitGatewayRegistrationsError)
    pub fn get_transit_gateway_registrations(
        &self,
    ) -> crate::client::fluent_builders::GetTransitGatewayRegistrations {
        crate::client::fluent_builders::GetTransitGatewayRegistrations::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetTransitGatewayRouteTableAttachment`](crate::client::fluent_builders::GetTransitGatewayRouteTableAttachment) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`attachment_id(impl Into<String>)`](crate::client::fluent_builders::GetTransitGatewayRouteTableAttachment::attachment_id) / [`set_attachment_id(Option<String>)`](crate::client::fluent_builders::GetTransitGatewayRouteTableAttachment::set_attachment_id): <p>The ID of the transit gateway route table attachment.</p>
    /// - On success, responds with [`GetTransitGatewayRouteTableAttachmentOutput`](crate::output::GetTransitGatewayRouteTableAttachmentOutput) with field(s):
    ///   - [`transit_gateway_route_table_attachment(Option<TransitGatewayRouteTableAttachment>)`](crate::output::GetTransitGatewayRouteTableAttachmentOutput::transit_gateway_route_table_attachment): <p>Returns information about the transit gateway route table attachment.</p>
    /// - On failure, responds with [`SdkError<GetTransitGatewayRouteTableAttachmentError>`](crate::error::GetTransitGatewayRouteTableAttachmentError)
    pub fn get_transit_gateway_route_table_attachment(
        &self,
    ) -> crate::client::fluent_builders::GetTransitGatewayRouteTableAttachment {
        crate::client::fluent_builders::GetTransitGatewayRouteTableAttachment::new(
            self.handle.clone(),
        )
    }
    /// Constructs a fluent builder for the [`GetVpcAttachment`](crate::client::fluent_builders::GetVpcAttachment) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`attachment_id(impl Into<String>)`](crate::client::fluent_builders::GetVpcAttachment::attachment_id) / [`set_attachment_id(Option<String>)`](crate::client::fluent_builders::GetVpcAttachment::set_attachment_id): <p>The ID of the attachment.</p>
    /// - On success, responds with [`GetVpcAttachmentOutput`](crate::output::GetVpcAttachmentOutput) with field(s):
    ///   - [`vpc_attachment(Option<VpcAttachment>)`](crate::output::GetVpcAttachmentOutput::vpc_attachment): <p>Returns details about a VPC attachment.</p>
    /// - On failure, responds with [`SdkError<GetVpcAttachmentError>`](crate::error::GetVpcAttachmentError)
    pub fn get_vpc_attachment(&self) -> crate::client::fluent_builders::GetVpcAttachment {
        crate::client::fluent_builders::GetVpcAttachment::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListAttachments`](crate::client::fluent_builders::ListAttachments) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListAttachments::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`core_network_id(impl Into<String>)`](crate::client::fluent_builders::ListAttachments::core_network_id) / [`set_core_network_id(Option<String>)`](crate::client::fluent_builders::ListAttachments::set_core_network_id): <p>The ID of a core network.</p>
    ///   - [`attachment_type(AttachmentType)`](crate::client::fluent_builders::ListAttachments::attachment_type) / [`set_attachment_type(Option<AttachmentType>)`](crate::client::fluent_builders::ListAttachments::set_attachment_type): <p>The type of attachment.</p>
    ///   - [`edge_location(impl Into<String>)`](crate::client::fluent_builders::ListAttachments::edge_location) / [`set_edge_location(Option<String>)`](crate::client::fluent_builders::ListAttachments::set_edge_location): <p>The Region where the edge is located.</p>
    ///   - [`state(AttachmentState)`](crate::client::fluent_builders::ListAttachments::state) / [`set_state(Option<AttachmentState>)`](crate::client::fluent_builders::ListAttachments::set_state): <p>The state of the attachment.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListAttachments::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListAttachments::set_max_results): <p>The maximum number of results to return.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListAttachments::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListAttachments::set_next_token): <p>The token for the next page of results.</p>
    /// - On success, responds with [`ListAttachmentsOutput`](crate::output::ListAttachmentsOutput) with field(s):
    ///   - [`attachments(Option<Vec<Attachment>>)`](crate::output::ListAttachmentsOutput::attachments): <p>Describes the list of attachments.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListAttachmentsOutput::next_token): <p>The token for the next page of results.</p>
    /// - On failure, responds with [`SdkError<ListAttachmentsError>`](crate::error::ListAttachmentsError)
    pub fn list_attachments(&self) -> crate::client::fluent_builders::ListAttachments {
        crate::client::fluent_builders::ListAttachments::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListConnectPeers`](crate::client::fluent_builders::ListConnectPeers) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListConnectPeers::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`core_network_id(impl Into<String>)`](crate::client::fluent_builders::ListConnectPeers::core_network_id) / [`set_core_network_id(Option<String>)`](crate::client::fluent_builders::ListConnectPeers::set_core_network_id): <p>The ID of a core network.</p>
    ///   - [`connect_attachment_id(impl Into<String>)`](crate::client::fluent_builders::ListConnectPeers::connect_attachment_id) / [`set_connect_attachment_id(Option<String>)`](crate::client::fluent_builders::ListConnectPeers::set_connect_attachment_id): <p>The ID of the attachment.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListConnectPeers::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListConnectPeers::set_max_results): <p>The maximum number of results to return.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListConnectPeers::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListConnectPeers::set_next_token): <p>The token for the next page of results.</p>
    /// - On success, responds with [`ListConnectPeersOutput`](crate::output::ListConnectPeersOutput) with field(s):
    ///   - [`connect_peers(Option<Vec<ConnectPeerSummary>>)`](crate::output::ListConnectPeersOutput::connect_peers): <p>Describes the Connect peers.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListConnectPeersOutput::next_token): <p>The token for the next page of results.</p>
    /// - On failure, responds with [`SdkError<ListConnectPeersError>`](crate::error::ListConnectPeersError)
    pub fn list_connect_peers(&self) -> crate::client::fluent_builders::ListConnectPeers {
        crate::client::fluent_builders::ListConnectPeers::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListCoreNetworkPolicyVersions`](crate::client::fluent_builders::ListCoreNetworkPolicyVersions) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListCoreNetworkPolicyVersions::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`core_network_id(impl Into<String>)`](crate::client::fluent_builders::ListCoreNetworkPolicyVersions::core_network_id) / [`set_core_network_id(Option<String>)`](crate::client::fluent_builders::ListCoreNetworkPolicyVersions::set_core_network_id): <p>The ID of a core network.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListCoreNetworkPolicyVersions::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListCoreNetworkPolicyVersions::set_max_results): <p>The maximum number of results to return.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListCoreNetworkPolicyVersions::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListCoreNetworkPolicyVersions::set_next_token): <p>The token for the next page of results.</p>
    /// - On success, responds with [`ListCoreNetworkPolicyVersionsOutput`](crate::output::ListCoreNetworkPolicyVersionsOutput) with field(s):
    ///   - [`core_network_policy_versions(Option<Vec<CoreNetworkPolicyVersion>>)`](crate::output::ListCoreNetworkPolicyVersionsOutput::core_network_policy_versions): <p>Describes core network policy versions.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListCoreNetworkPolicyVersionsOutput::next_token): <p>The token for the next page of results.</p>
    /// - On failure, responds with [`SdkError<ListCoreNetworkPolicyVersionsError>`](crate::error::ListCoreNetworkPolicyVersionsError)
    pub fn list_core_network_policy_versions(
        &self,
    ) -> crate::client::fluent_builders::ListCoreNetworkPolicyVersions {
        crate::client::fluent_builders::ListCoreNetworkPolicyVersions::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListCoreNetworks`](crate::client::fluent_builders::ListCoreNetworks) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListCoreNetworks::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListCoreNetworks::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListCoreNetworks::set_max_results): <p>The maximum number of results to return.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListCoreNetworks::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListCoreNetworks::set_next_token): <p>The token for the next page of results.</p>
    /// - On success, responds with [`ListCoreNetworksOutput`](crate::output::ListCoreNetworksOutput) with field(s):
    ///   - [`core_networks(Option<Vec<CoreNetworkSummary>>)`](crate::output::ListCoreNetworksOutput::core_networks): <p>Describes the list of core networks.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListCoreNetworksOutput::next_token): <p>The token for the next page of results.</p>
    /// - On failure, responds with [`SdkError<ListCoreNetworksError>`](crate::error::ListCoreNetworksError)
    pub fn list_core_networks(&self) -> crate::client::fluent_builders::ListCoreNetworks {
        crate::client::fluent_builders::ListCoreNetworks::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListOrganizationServiceAccessStatus`](crate::client::fluent_builders::ListOrganizationServiceAccessStatus) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListOrganizationServiceAccessStatus::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListOrganizationServiceAccessStatus::set_max_results): <p>The maximum number of results to return.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListOrganizationServiceAccessStatus::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListOrganizationServiceAccessStatus::set_next_token): <p>The token for the next page of results.</p>
    /// - On success, responds with [`ListOrganizationServiceAccessStatusOutput`](crate::output::ListOrganizationServiceAccessStatusOutput) with field(s):
    ///   - [`organization_status(Option<OrganizationStatus>)`](crate::output::ListOrganizationServiceAccessStatusOutput::organization_status): <p>Displays the status of an Amazon Web Services Organization.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListOrganizationServiceAccessStatusOutput::next_token): <p>The token for the next page of results.</p>
    /// - On failure, responds with [`SdkError<ListOrganizationServiceAccessStatusError>`](crate::error::ListOrganizationServiceAccessStatusError)
    pub fn list_organization_service_access_status(
        &self,
    ) -> crate::client::fluent_builders::ListOrganizationServiceAccessStatus {
        crate::client::fluent_builders::ListOrganizationServiceAccessStatus::new(
            self.handle.clone(),
        )
    }
    /// Constructs a fluent builder for the [`ListPeerings`](crate::client::fluent_builders::ListPeerings) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListPeerings::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`core_network_id(impl Into<String>)`](crate::client::fluent_builders::ListPeerings::core_network_id) / [`set_core_network_id(Option<String>)`](crate::client::fluent_builders::ListPeerings::set_core_network_id): <p>The ID of a core network.</p>
    ///   - [`peering_type(PeeringType)`](crate::client::fluent_builders::ListPeerings::peering_type) / [`set_peering_type(Option<PeeringType>)`](crate::client::fluent_builders::ListPeerings::set_peering_type): <p>Returns a list of a peering requests.</p>
    ///   - [`edge_location(impl Into<String>)`](crate::client::fluent_builders::ListPeerings::edge_location) / [`set_edge_location(Option<String>)`](crate::client::fluent_builders::ListPeerings::set_edge_location): <p>Returns a list edge locations for the </p>
    ///   - [`state(PeeringState)`](crate::client::fluent_builders::ListPeerings::state) / [`set_state(Option<PeeringState>)`](crate::client::fluent_builders::ListPeerings::set_state): <p>Returns a list of the peering request states.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListPeerings::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListPeerings::set_max_results): <p>The maximum number of results to return.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListPeerings::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListPeerings::set_next_token): <p>The token for the next page of results.</p>
    /// - On success, responds with [`ListPeeringsOutput`](crate::output::ListPeeringsOutput) with field(s):
    ///   - [`peerings(Option<Vec<Peering>>)`](crate::output::ListPeeringsOutput::peerings): <p>Lists the transit gateway peerings for the <code>ListPeerings</code> request.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListPeeringsOutput::next_token): <p>The token for the next page of results.</p>
    /// - On failure, responds with [`SdkError<ListPeeringsError>`](crate::error::ListPeeringsError)
    pub fn list_peerings(&self) -> crate::client::fluent_builders::ListPeerings {
        crate::client::fluent_builders::ListPeerings::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListTagsForResource`](crate::client::fluent_builders::ListTagsForResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::ListTagsForResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::ListTagsForResource::set_resource_arn): <p>The Amazon Resource Name (ARN) of the resource.</p>
    /// - On success, responds with [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput) with field(s):
    ///   - [`tag_list(Option<Vec<Tag>>)`](crate::output::ListTagsForResourceOutput::tag_list): <p>The list of tags.</p>
    /// - On failure, responds with [`SdkError<ListTagsForResourceError>`](crate::error::ListTagsForResourceError)
    pub fn list_tags_for_resource(&self) -> crate::client::fluent_builders::ListTagsForResource {
        crate::client::fluent_builders::ListTagsForResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`PutCoreNetworkPolicy`](crate::client::fluent_builders::PutCoreNetworkPolicy) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`core_network_id(impl Into<String>)`](crate::client::fluent_builders::PutCoreNetworkPolicy::core_network_id) / [`set_core_network_id(Option<String>)`](crate::client::fluent_builders::PutCoreNetworkPolicy::set_core_network_id): <p>The ID of a core network.</p>
    ///   - [`policy_document(impl Into<String>)`](crate::client::fluent_builders::PutCoreNetworkPolicy::policy_document) / [`set_policy_document(Option<String>)`](crate::client::fluent_builders::PutCoreNetworkPolicy::set_policy_document): <p>The policy document.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::PutCoreNetworkPolicy::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::PutCoreNetworkPolicy::set_description): <p>a core network policy description.</p>
    ///   - [`latest_version_id(i32)`](crate::client::fluent_builders::PutCoreNetworkPolicy::latest_version_id) / [`set_latest_version_id(Option<i32>)`](crate::client::fluent_builders::PutCoreNetworkPolicy::set_latest_version_id): <p>The ID of a core network policy. </p>
    ///   - [`client_token(impl Into<String>)`](crate::client::fluent_builders::PutCoreNetworkPolicy::client_token) / [`set_client_token(Option<String>)`](crate::client::fluent_builders::PutCoreNetworkPolicy::set_client_token): <p>The client token associated with the request.</p>
    /// - On success, responds with [`PutCoreNetworkPolicyOutput`](crate::output::PutCoreNetworkPolicyOutput) with field(s):
    ///   - [`core_network_policy(Option<CoreNetworkPolicy>)`](crate::output::PutCoreNetworkPolicyOutput::core_network_policy): <p>Describes the changed core network policy.</p>
    /// - On failure, responds with [`SdkError<PutCoreNetworkPolicyError>`](crate::error::PutCoreNetworkPolicyError)
    pub fn put_core_network_policy(&self) -> crate::client::fluent_builders::PutCoreNetworkPolicy {
        crate::client::fluent_builders::PutCoreNetworkPolicy::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`PutResourcePolicy`](crate::client::fluent_builders::PutResourcePolicy) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`policy_document(impl Into<String>)`](crate::client::fluent_builders::PutResourcePolicy::policy_document) / [`set_policy_document(Option<String>)`](crate::client::fluent_builders::PutResourcePolicy::set_policy_document): <p>The JSON resource policy document.</p>
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::PutResourcePolicy::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::PutResourcePolicy::set_resource_arn): <p>The ARN of the resource policy. </p>
    /// - On success, responds with [`PutResourcePolicyOutput`](crate::output::PutResourcePolicyOutput)

    /// - On failure, responds with [`SdkError<PutResourcePolicyError>`](crate::error::PutResourcePolicyError)
    pub fn put_resource_policy(&self) -> crate::client::fluent_builders::PutResourcePolicy {
        crate::client::fluent_builders::PutResourcePolicy::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`RegisterTransitGateway`](crate::client::fluent_builders::RegisterTransitGateway) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`global_network_id(impl Into<String>)`](crate::client::fluent_builders::RegisterTransitGateway::global_network_id) / [`set_global_network_id(Option<String>)`](crate::client::fluent_builders::RegisterTransitGateway::set_global_network_id): <p>The ID of the global network.</p>
    ///   - [`transit_gateway_arn(impl Into<String>)`](crate::client::fluent_builders::RegisterTransitGateway::transit_gateway_arn) / [`set_transit_gateway_arn(Option<String>)`](crate::client::fluent_builders::RegisterTransitGateway::set_transit_gateway_arn): <p>The Amazon Resource Name (ARN) of the transit gateway.</p>
    /// - On success, responds with [`RegisterTransitGatewayOutput`](crate::output::RegisterTransitGatewayOutput) with field(s):
    ///   - [`transit_gateway_registration(Option<TransitGatewayRegistration>)`](crate::output::RegisterTransitGatewayOutput::transit_gateway_registration): <p>Information about the transit gateway registration.</p>
    /// - On failure, responds with [`SdkError<RegisterTransitGatewayError>`](crate::error::RegisterTransitGatewayError)
    pub fn register_transit_gateway(
        &self,
    ) -> crate::client::fluent_builders::RegisterTransitGateway {
        crate::client::fluent_builders::RegisterTransitGateway::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`RejectAttachment`](crate::client::fluent_builders::RejectAttachment) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`attachment_id(impl Into<String>)`](crate::client::fluent_builders::RejectAttachment::attachment_id) / [`set_attachment_id(Option<String>)`](crate::client::fluent_builders::RejectAttachment::set_attachment_id): <p>The ID of the attachment.</p>
    /// - On success, responds with [`RejectAttachmentOutput`](crate::output::RejectAttachmentOutput) with field(s):
    ///   - [`attachment(Option<Attachment>)`](crate::output::RejectAttachmentOutput::attachment): <p>Describes the rejected attachment request.</p>
    /// - On failure, responds with [`SdkError<RejectAttachmentError>`](crate::error::RejectAttachmentError)
    pub fn reject_attachment(&self) -> crate::client::fluent_builders::RejectAttachment {
        crate::client::fluent_builders::RejectAttachment::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`RestoreCoreNetworkPolicyVersion`](crate::client::fluent_builders::RestoreCoreNetworkPolicyVersion) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`core_network_id(impl Into<String>)`](crate::client::fluent_builders::RestoreCoreNetworkPolicyVersion::core_network_id) / [`set_core_network_id(Option<String>)`](crate::client::fluent_builders::RestoreCoreNetworkPolicyVersion::set_core_network_id): <p>The ID of a core network.</p>
    ///   - [`policy_version_id(i32)`](crate::client::fluent_builders::RestoreCoreNetworkPolicyVersion::policy_version_id) / [`set_policy_version_id(Option<i32>)`](crate::client::fluent_builders::RestoreCoreNetworkPolicyVersion::set_policy_version_id): <p>The ID of the policy version to restore.</p>
    /// - On success, responds with [`RestoreCoreNetworkPolicyVersionOutput`](crate::output::RestoreCoreNetworkPolicyVersionOutput) with field(s):
    ///   - [`core_network_policy(Option<CoreNetworkPolicy>)`](crate::output::RestoreCoreNetworkPolicyVersionOutput::core_network_policy): <p>Describes the restored core network policy.</p>
    /// - On failure, responds with [`SdkError<RestoreCoreNetworkPolicyVersionError>`](crate::error::RestoreCoreNetworkPolicyVersionError)
    pub fn restore_core_network_policy_version(
        &self,
    ) -> crate::client::fluent_builders::RestoreCoreNetworkPolicyVersion {
        crate::client::fluent_builders::RestoreCoreNetworkPolicyVersion::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`StartOrganizationServiceAccessUpdate`](crate::client::fluent_builders::StartOrganizationServiceAccessUpdate) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`action(impl Into<String>)`](crate::client::fluent_builders::StartOrganizationServiceAccessUpdate::action) / [`set_action(Option<String>)`](crate::client::fluent_builders::StartOrganizationServiceAccessUpdate::set_action): <p>The action to take for the update request. This can be either <code>ENABLE</code> or <code>DISABLE</code>.</p>
    /// - On success, responds with [`StartOrganizationServiceAccessUpdateOutput`](crate::output::StartOrganizationServiceAccessUpdateOutput) with field(s):
    ///   - [`organization_status(Option<OrganizationStatus>)`](crate::output::StartOrganizationServiceAccessUpdateOutput::organization_status): <p>The status of the service access update request for an Amazon Web Services Organization.</p>
    /// - On failure, responds with [`SdkError<StartOrganizationServiceAccessUpdateError>`](crate::error::StartOrganizationServiceAccessUpdateError)
    pub fn start_organization_service_access_update(
        &self,
    ) -> crate::client::fluent_builders::StartOrganizationServiceAccessUpdate {
        crate::client::fluent_builders::StartOrganizationServiceAccessUpdate::new(
            self.handle.clone(),
        )
    }
    /// Constructs a fluent builder for the [`StartRouteAnalysis`](crate::client::fluent_builders::StartRouteAnalysis) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`global_network_id(impl Into<String>)`](crate::client::fluent_builders::StartRouteAnalysis::global_network_id) / [`set_global_network_id(Option<String>)`](crate::client::fluent_builders::StartRouteAnalysis::set_global_network_id): <p>The ID of the global network.</p>
    ///   - [`source(RouteAnalysisEndpointOptionsSpecification)`](crate::client::fluent_builders::StartRouteAnalysis::source) / [`set_source(Option<RouteAnalysisEndpointOptionsSpecification>)`](crate::client::fluent_builders::StartRouteAnalysis::set_source): <p>The source from which traffic originates.</p>
    ///   - [`destination(RouteAnalysisEndpointOptionsSpecification)`](crate::client::fluent_builders::StartRouteAnalysis::destination) / [`set_destination(Option<RouteAnalysisEndpointOptionsSpecification>)`](crate::client::fluent_builders::StartRouteAnalysis::set_destination): <p>The destination.</p>
    ///   - [`include_return_path(bool)`](crate::client::fluent_builders::StartRouteAnalysis::include_return_path) / [`set_include_return_path(bool)`](crate::client::fluent_builders::StartRouteAnalysis::set_include_return_path): <p>Indicates whether to analyze the return path. The default is <code>false</code>.</p>
    ///   - [`use_middleboxes(bool)`](crate::client::fluent_builders::StartRouteAnalysis::use_middleboxes) / [`set_use_middleboxes(bool)`](crate::client::fluent_builders::StartRouteAnalysis::set_use_middleboxes): <p>Indicates whether to include the location of middlebox appliances in the route analysis. The default is <code>false</code>.</p>
    /// - On success, responds with [`StartRouteAnalysisOutput`](crate::output::StartRouteAnalysisOutput) with field(s):
    ///   - [`route_analysis(Option<RouteAnalysis>)`](crate::output::StartRouteAnalysisOutput::route_analysis): <p>The route analysis.</p>
    /// - On failure, responds with [`SdkError<StartRouteAnalysisError>`](crate::error::StartRouteAnalysisError)
    pub fn start_route_analysis(&self) -> crate::client::fluent_builders::StartRouteAnalysis {
        crate::client::fluent_builders::StartRouteAnalysis::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`TagResource`](crate::client::fluent_builders::TagResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::TagResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::TagResource::set_resource_arn): <p>The Amazon Resource Name (ARN) of the resource.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::TagResource::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::TagResource::set_tags): <p>The tags to apply to the specified resource.</p>
    /// - On success, responds with [`TagResourceOutput`](crate::output::TagResourceOutput)

    /// - On failure, responds with [`SdkError<TagResourceError>`](crate::error::TagResourceError)
    pub fn tag_resource(&self) -> crate::client::fluent_builders::TagResource {
        crate::client::fluent_builders::TagResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UntagResource`](crate::client::fluent_builders::UntagResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::UntagResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::UntagResource::set_resource_arn): <p>The Amazon Resource Name (ARN) of the resource.</p>
    ///   - [`tag_keys(Vec<String>)`](crate::client::fluent_builders::UntagResource::tag_keys) / [`set_tag_keys(Option<Vec<String>>)`](crate::client::fluent_builders::UntagResource::set_tag_keys): <p>The tag keys to remove from the specified resource.</p>
    /// - On success, responds with [`UntagResourceOutput`](crate::output::UntagResourceOutput)

    /// - On failure, responds with [`SdkError<UntagResourceError>`](crate::error::UntagResourceError)
    pub fn untag_resource(&self) -> crate::client::fluent_builders::UntagResource {
        crate::client::fluent_builders::UntagResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateConnection`](crate::client::fluent_builders::UpdateConnection) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`global_network_id(impl Into<String>)`](crate::client::fluent_builders::UpdateConnection::global_network_id) / [`set_global_network_id(Option<String>)`](crate::client::fluent_builders::UpdateConnection::set_global_network_id): <p>The ID of the global network.</p>
    ///   - [`connection_id(impl Into<String>)`](crate::client::fluent_builders::UpdateConnection::connection_id) / [`set_connection_id(Option<String>)`](crate::client::fluent_builders::UpdateConnection::set_connection_id): <p>The ID of the connection.</p>
    ///   - [`link_id(impl Into<String>)`](crate::client::fluent_builders::UpdateConnection::link_id) / [`set_link_id(Option<String>)`](crate::client::fluent_builders::UpdateConnection::set_link_id): <p>The ID of the link for the first device in the connection.</p>
    ///   - [`connected_link_id(impl Into<String>)`](crate::client::fluent_builders::UpdateConnection::connected_link_id) / [`set_connected_link_id(Option<String>)`](crate::client::fluent_builders::UpdateConnection::set_connected_link_id): <p>The ID of the link for the second device in the connection.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::UpdateConnection::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::UpdateConnection::set_description): <p>A description of the connection.</p>  <p>Length Constraints: Maximum length of 256 characters.</p>
    /// - On success, responds with [`UpdateConnectionOutput`](crate::output::UpdateConnectionOutput) with field(s):
    ///   - [`connection(Option<Connection>)`](crate::output::UpdateConnectionOutput::connection): <p>Information about the connection.</p>
    /// - On failure, responds with [`SdkError<UpdateConnectionError>`](crate::error::UpdateConnectionError)
    pub fn update_connection(&self) -> crate::client::fluent_builders::UpdateConnection {
        crate::client::fluent_builders::UpdateConnection::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateCoreNetwork`](crate::client::fluent_builders::UpdateCoreNetwork) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`core_network_id(impl Into<String>)`](crate::client::fluent_builders::UpdateCoreNetwork::core_network_id) / [`set_core_network_id(Option<String>)`](crate::client::fluent_builders::UpdateCoreNetwork::set_core_network_id): <p>The ID of a core network.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::UpdateCoreNetwork::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::UpdateCoreNetwork::set_description): <p>The description of the update.</p>
    /// - On success, responds with [`UpdateCoreNetworkOutput`](crate::output::UpdateCoreNetworkOutput) with field(s):
    ///   - [`core_network(Option<CoreNetwork>)`](crate::output::UpdateCoreNetworkOutput::core_network): <p>Returns information about a core network update.</p>
    /// - On failure, responds with [`SdkError<UpdateCoreNetworkError>`](crate::error::UpdateCoreNetworkError)
    pub fn update_core_network(&self) -> crate::client::fluent_builders::UpdateCoreNetwork {
        crate::client::fluent_builders::UpdateCoreNetwork::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateDevice`](crate::client::fluent_builders::UpdateDevice) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`global_network_id(impl Into<String>)`](crate::client::fluent_builders::UpdateDevice::global_network_id) / [`set_global_network_id(Option<String>)`](crate::client::fluent_builders::UpdateDevice::set_global_network_id): <p>The ID of the global network.</p>
    ///   - [`device_id(impl Into<String>)`](crate::client::fluent_builders::UpdateDevice::device_id) / [`set_device_id(Option<String>)`](crate::client::fluent_builders::UpdateDevice::set_device_id): <p>The ID of the device.</p>
    ///   - [`aws_location(AwsLocation)`](crate::client::fluent_builders::UpdateDevice::aws_location) / [`set_aws_location(Option<AwsLocation>)`](crate::client::fluent_builders::UpdateDevice::set_aws_location): <p>The Amazon Web Services location of the device, if applicable. For an on-premises device, you can omit this parameter.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::UpdateDevice::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::UpdateDevice::set_description): <p>A description of the device.</p>  <p>Constraints: Maximum length of 256 characters.</p>
    ///   - [`r#type(impl Into<String>)`](crate::client::fluent_builders::UpdateDevice::type) / [`set_type(Option<String>)`](crate::client::fluent_builders::UpdateDevice::set_type): <p>The type of the device.</p>
    ///   - [`vendor(impl Into<String>)`](crate::client::fluent_builders::UpdateDevice::vendor) / [`set_vendor(Option<String>)`](crate::client::fluent_builders::UpdateDevice::set_vendor): <p>The vendor of the device.</p>  <p>Constraints: Maximum length of 128 characters.</p>
    ///   - [`model(impl Into<String>)`](crate::client::fluent_builders::UpdateDevice::model) / [`set_model(Option<String>)`](crate::client::fluent_builders::UpdateDevice::set_model): <p>The model of the device.</p>  <p>Constraints: Maximum length of 128 characters.</p>
    ///   - [`serial_number(impl Into<String>)`](crate::client::fluent_builders::UpdateDevice::serial_number) / [`set_serial_number(Option<String>)`](crate::client::fluent_builders::UpdateDevice::set_serial_number): <p>The serial number of the device.</p>  <p>Constraints: Maximum length of 128 characters.</p>
    ///   - [`location(Location)`](crate::client::fluent_builders::UpdateDevice::location) / [`set_location(Option<Location>)`](crate::client::fluent_builders::UpdateDevice::set_location): <p>Describes a location.</p>
    ///   - [`site_id(impl Into<String>)`](crate::client::fluent_builders::UpdateDevice::site_id) / [`set_site_id(Option<String>)`](crate::client::fluent_builders::UpdateDevice::set_site_id): <p>The ID of the site.</p>
    /// - On success, responds with [`UpdateDeviceOutput`](crate::output::UpdateDeviceOutput) with field(s):
    ///   - [`device(Option<Device>)`](crate::output::UpdateDeviceOutput::device): <p>Information about the device.</p>
    /// - On failure, responds with [`SdkError<UpdateDeviceError>`](crate::error::UpdateDeviceError)
    pub fn update_device(&self) -> crate::client::fluent_builders::UpdateDevice {
        crate::client::fluent_builders::UpdateDevice::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateGlobalNetwork`](crate::client::fluent_builders::UpdateGlobalNetwork) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`global_network_id(impl Into<String>)`](crate::client::fluent_builders::UpdateGlobalNetwork::global_network_id) / [`set_global_network_id(Option<String>)`](crate::client::fluent_builders::UpdateGlobalNetwork::set_global_network_id): <p>The ID of your global network.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::UpdateGlobalNetwork::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::UpdateGlobalNetwork::set_description): <p>A description of the global network.</p>  <p>Constraints: Maximum length of 256 characters.</p>
    /// - On success, responds with [`UpdateGlobalNetworkOutput`](crate::output::UpdateGlobalNetworkOutput) with field(s):
    ///   - [`global_network(Option<GlobalNetwork>)`](crate::output::UpdateGlobalNetworkOutput::global_network): <p>Information about the global network object.</p>
    /// - On failure, responds with [`SdkError<UpdateGlobalNetworkError>`](crate::error::UpdateGlobalNetworkError)
    pub fn update_global_network(&self) -> crate::client::fluent_builders::UpdateGlobalNetwork {
        crate::client::fluent_builders::UpdateGlobalNetwork::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateLink`](crate::client::fluent_builders::UpdateLink) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`global_network_id(impl Into<String>)`](crate::client::fluent_builders::UpdateLink::global_network_id) / [`set_global_network_id(Option<String>)`](crate::client::fluent_builders::UpdateLink::set_global_network_id): <p>The ID of the global network.</p>
    ///   - [`link_id(impl Into<String>)`](crate::client::fluent_builders::UpdateLink::link_id) / [`set_link_id(Option<String>)`](crate::client::fluent_builders::UpdateLink::set_link_id): <p>The ID of the link.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::UpdateLink::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::UpdateLink::set_description): <p>A description of the link.</p>  <p>Constraints: Maximum length of 256 characters.</p>
    ///   - [`r#type(impl Into<String>)`](crate::client::fluent_builders::UpdateLink::type) / [`set_type(Option<String>)`](crate::client::fluent_builders::UpdateLink::set_type): <p>The type of the link.</p>  <p>Constraints: Maximum length of 128 characters.</p>
    ///   - [`bandwidth(Bandwidth)`](crate::client::fluent_builders::UpdateLink::bandwidth) / [`set_bandwidth(Option<Bandwidth>)`](crate::client::fluent_builders::UpdateLink::set_bandwidth): <p>The upload and download speed in Mbps. </p>
    ///   - [`provider(impl Into<String>)`](crate::client::fluent_builders::UpdateLink::provider) / [`set_provider(Option<String>)`](crate::client::fluent_builders::UpdateLink::set_provider): <p>The provider of the link.</p>  <p>Constraints: Maximum length of 128 characters.</p>
    /// - On success, responds with [`UpdateLinkOutput`](crate::output::UpdateLinkOutput) with field(s):
    ///   - [`link(Option<Link>)`](crate::output::UpdateLinkOutput::link): <p>Information about the link.</p>
    /// - On failure, responds with [`SdkError<UpdateLinkError>`](crate::error::UpdateLinkError)
    pub fn update_link(&self) -> crate::client::fluent_builders::UpdateLink {
        crate::client::fluent_builders::UpdateLink::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateNetworkResourceMetadata`](crate::client::fluent_builders::UpdateNetworkResourceMetadata) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`global_network_id(impl Into<String>)`](crate::client::fluent_builders::UpdateNetworkResourceMetadata::global_network_id) / [`set_global_network_id(Option<String>)`](crate::client::fluent_builders::UpdateNetworkResourceMetadata::set_global_network_id): <p>The ID of the global network.</p>
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::UpdateNetworkResourceMetadata::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::UpdateNetworkResourceMetadata::set_resource_arn): <p>The ARN of the resource.</p>
    ///   - [`metadata(HashMap<String, String>)`](crate::client::fluent_builders::UpdateNetworkResourceMetadata::metadata) / [`set_metadata(Option<HashMap<String, String>>)`](crate::client::fluent_builders::UpdateNetworkResourceMetadata::set_metadata): <p>The resource metadata.</p>
    /// - On success, responds with [`UpdateNetworkResourceMetadataOutput`](crate::output::UpdateNetworkResourceMetadataOutput) with field(s):
    ///   - [`resource_arn(Option<String>)`](crate::output::UpdateNetworkResourceMetadataOutput::resource_arn): <p>The ARN of the resource.</p>
    ///   - [`metadata(Option<HashMap<String, String>>)`](crate::output::UpdateNetworkResourceMetadataOutput::metadata): <p>The updated resource metadata.</p>
    /// - On failure, responds with [`SdkError<UpdateNetworkResourceMetadataError>`](crate::error::UpdateNetworkResourceMetadataError)
    pub fn update_network_resource_metadata(
        &self,
    ) -> crate::client::fluent_builders::UpdateNetworkResourceMetadata {
        crate::client::fluent_builders::UpdateNetworkResourceMetadata::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateSite`](crate::client::fluent_builders::UpdateSite) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`global_network_id(impl Into<String>)`](crate::client::fluent_builders::UpdateSite::global_network_id) / [`set_global_network_id(Option<String>)`](crate::client::fluent_builders::UpdateSite::set_global_network_id): <p>The ID of the global network.</p>
    ///   - [`site_id(impl Into<String>)`](crate::client::fluent_builders::UpdateSite::site_id) / [`set_site_id(Option<String>)`](crate::client::fluent_builders::UpdateSite::set_site_id): <p>The ID of your site.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::UpdateSite::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::UpdateSite::set_description): <p>A description of your site.</p>  <p>Constraints: Maximum length of 256 characters.</p>
    ///   - [`location(Location)`](crate::client::fluent_builders::UpdateSite::location) / [`set_location(Option<Location>)`](crate::client::fluent_builders::UpdateSite::set_location): <p>The site location:</p>  <ul>   <li> <p> <code>Address</code>: The physical address of the site.</p> </li>   <li> <p> <code>Latitude</code>: The latitude of the site. </p> </li>   <li> <p> <code>Longitude</code>: The longitude of the site.</p> </li>  </ul>
    /// - On success, responds with [`UpdateSiteOutput`](crate::output::UpdateSiteOutput) with field(s):
    ///   - [`site(Option<Site>)`](crate::output::UpdateSiteOutput::site): <p>Information about the site.</p>
    /// - On failure, responds with [`SdkError<UpdateSiteError>`](crate::error::UpdateSiteError)
    pub fn update_site(&self) -> crate::client::fluent_builders::UpdateSite {
        crate::client::fluent_builders::UpdateSite::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateVpcAttachment`](crate::client::fluent_builders::UpdateVpcAttachment) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`attachment_id(impl Into<String>)`](crate::client::fluent_builders::UpdateVpcAttachment::attachment_id) / [`set_attachment_id(Option<String>)`](crate::client::fluent_builders::UpdateVpcAttachment::set_attachment_id): <p>The ID of the attachment.</p>
    ///   - [`add_subnet_arns(Vec<String>)`](crate::client::fluent_builders::UpdateVpcAttachment::add_subnet_arns) / [`set_add_subnet_arns(Option<Vec<String>>)`](crate::client::fluent_builders::UpdateVpcAttachment::set_add_subnet_arns): <p>Adds a subnet ARN to the VPC attachment.</p>
    ///   - [`remove_subnet_arns(Vec<String>)`](crate::client::fluent_builders::UpdateVpcAttachment::remove_subnet_arns) / [`set_remove_subnet_arns(Option<Vec<String>>)`](crate::client::fluent_builders::UpdateVpcAttachment::set_remove_subnet_arns): <p>Removes a subnet ARN from the attachment.</p>
    ///   - [`options(VpcOptions)`](crate::client::fluent_builders::UpdateVpcAttachment::options) / [`set_options(Option<VpcOptions>)`](crate::client::fluent_builders::UpdateVpcAttachment::set_options): <p>Additional options for updating the VPC attachment. </p>
    /// - On success, responds with [`UpdateVpcAttachmentOutput`](crate::output::UpdateVpcAttachmentOutput) with field(s):
    ///   - [`vpc_attachment(Option<VpcAttachment>)`](crate::output::UpdateVpcAttachmentOutput::vpc_attachment): <p>Describes the updated VPC attachment.</p>
    /// - On failure, responds with [`SdkError<UpdateVpcAttachmentError>`](crate::error::UpdateVpcAttachmentError)
    pub fn update_vpc_attachment(&self) -> crate::client::fluent_builders::UpdateVpcAttachment {
        crate::client::fluent_builders::UpdateVpcAttachment::new(self.handle.clone())
    }
}

impl Client {
    /// Creates a new client from an [SDK Config](aws_types::sdk_config::SdkConfig).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `sdk_config` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `sdk_config` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn new(sdk_config: &aws_types::sdk_config::SdkConfig) -> Self {
        Self::from_conf(sdk_config.into())
    }

    /// Creates a new client from the service [`Config`](crate::Config).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `conf` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `conf` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn from_conf(conf: crate::Config) -> Self {
        let retry_config = conf
            .retry_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::retry::RetryConfig::disabled);
        let timeout_config = conf
            .timeout_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
        let sleep_impl = conf.sleep_impl();
        if (retry_config.has_retry() || timeout_config.has_timeouts()) && sleep_impl.is_none() {
            panic!("An async sleep implementation is required for retries or timeouts to work. \
                                    Set the `sleep_impl` on the Config passed into this function to fix this panic.");
        }

        let connector = conf.http_connector().and_then(|c| {
            let timeout_config = conf
                .timeout_config()
                .cloned()
                .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
            let connector_settings =
                aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                    &timeout_config,
                );
            c.connector(&connector_settings, conf.sleep_impl())
        });

        let builder = aws_smithy_client::Builder::new();

        let builder = match connector {
            // Use provided connector
            Some(c) => builder.connector(c),
            None => {
                #[cfg(any(feature = "rustls", feature = "native-tls"))]
                {
                    // Use default connector based on enabled features
                    builder.dyn_https_connector(
                        aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                            &timeout_config,
                        ),
                    )
                }
                #[cfg(not(any(feature = "rustls", feature = "native-tls")))]
                {
                    panic!("No HTTP connector was available. Enable the `rustls` or `native-tls` crate feature or set a connector to fix this.");
                }
            }
        };
        let mut builder = builder
            .middleware(aws_smithy_client::erase::DynMiddleware::new(
                crate::middleware::DefaultMiddleware::new(),
            ))
            .retry_config(retry_config.into())
            .operation_timeout_config(timeout_config.into());
        builder.set_sleep_impl(sleep_impl);
        let client = builder.build();

        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}

/// Utilities to ergonomically construct a request to the service.
///
/// Fluent builders are created through the [`Client`](crate::client::Client) by calling
/// one if its operation methods. After parameters are set using the builder methods,
/// the `send` method can be called to initiate the request.
pub mod fluent_builders;
