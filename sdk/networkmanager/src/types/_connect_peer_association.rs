// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a core network Connect peer association.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ConnectPeerAssociation {
    /// <p>The ID of the Connect peer.</p>
    #[doc(hidden)]
    pub connect_peer_id: std::option::Option<std::string::String>,
    /// <p>The ID of the global network.</p>
    #[doc(hidden)]
    pub global_network_id: std::option::Option<std::string::String>,
    /// <p>The ID of the device to connect to.</p>
    #[doc(hidden)]
    pub device_id: std::option::Option<std::string::String>,
    /// <p>The ID of the link.</p>
    #[doc(hidden)]
    pub link_id: std::option::Option<std::string::String>,
    /// <p>The state of the Connect peer association.</p>
    #[doc(hidden)]
    pub state: std::option::Option<crate::types::ConnectPeerAssociationState>,
}
impl ConnectPeerAssociation {
    /// <p>The ID of the Connect peer.</p>
    pub fn connect_peer_id(&self) -> std::option::Option<&str> {
        self.connect_peer_id.as_deref()
    }
    /// <p>The ID of the global network.</p>
    pub fn global_network_id(&self) -> std::option::Option<&str> {
        self.global_network_id.as_deref()
    }
    /// <p>The ID of the device to connect to.</p>
    pub fn device_id(&self) -> std::option::Option<&str> {
        self.device_id.as_deref()
    }
    /// <p>The ID of the link.</p>
    pub fn link_id(&self) -> std::option::Option<&str> {
        self.link_id.as_deref()
    }
    /// <p>The state of the Connect peer association.</p>
    pub fn state(&self) -> std::option::Option<&crate::types::ConnectPeerAssociationState> {
        self.state.as_ref()
    }
}
impl ConnectPeerAssociation {
    /// Creates a new builder-style object to manufacture [`ConnectPeerAssociation`](crate::types::ConnectPeerAssociation).
    pub fn builder() -> crate::types::builders::ConnectPeerAssociationBuilder {
        crate::types::builders::ConnectPeerAssociationBuilder::default()
    }
}

/// A builder for [`ConnectPeerAssociation`](crate::types::ConnectPeerAssociation).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ConnectPeerAssociationBuilder {
    pub(crate) connect_peer_id: std::option::Option<std::string::String>,
    pub(crate) global_network_id: std::option::Option<std::string::String>,
    pub(crate) device_id: std::option::Option<std::string::String>,
    pub(crate) link_id: std::option::Option<std::string::String>,
    pub(crate) state: std::option::Option<crate::types::ConnectPeerAssociationState>,
}
impl ConnectPeerAssociationBuilder {
    /// <p>The ID of the Connect peer.</p>
    pub fn connect_peer_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.connect_peer_id = Some(input.into());
        self
    }
    /// <p>The ID of the Connect peer.</p>
    pub fn set_connect_peer_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.connect_peer_id = input;
        self
    }
    /// <p>The ID of the global network.</p>
    pub fn global_network_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.global_network_id = Some(input.into());
        self
    }
    /// <p>The ID of the global network.</p>
    pub fn set_global_network_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.global_network_id = input;
        self
    }
    /// <p>The ID of the device to connect to.</p>
    pub fn device_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.device_id = Some(input.into());
        self
    }
    /// <p>The ID of the device to connect to.</p>
    pub fn set_device_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.device_id = input;
        self
    }
    /// <p>The ID of the link.</p>
    pub fn link_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.link_id = Some(input.into());
        self
    }
    /// <p>The ID of the link.</p>
    pub fn set_link_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.link_id = input;
        self
    }
    /// <p>The state of the Connect peer association.</p>
    pub fn state(mut self, input: crate::types::ConnectPeerAssociationState) -> Self {
        self.state = Some(input);
        self
    }
    /// <p>The state of the Connect peer association.</p>
    pub fn set_state(
        mut self,
        input: std::option::Option<crate::types::ConnectPeerAssociationState>,
    ) -> Self {
        self.state = input;
        self
    }
    /// Consumes the builder and constructs a [`ConnectPeerAssociation`](crate::types::ConnectPeerAssociation).
    pub fn build(self) -> crate::types::ConnectPeerAssociation {
        crate::types::ConnectPeerAssociation {
            connect_peer_id: self.connect_peer_id,
            global_network_id: self.global_network_id,
            device_id: self.device_id,
            link_id: self.link_id,
            state: self.state,
        }
    }
}
