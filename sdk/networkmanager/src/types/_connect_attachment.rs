// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a core network Connect attachment.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ConnectAttachment {
    /// <p>The attachment details.</p>
    #[doc(hidden)]
    pub attachment: std::option::Option<crate::types::Attachment>,
    /// <p>The ID of the transport attachment.</p>
    #[doc(hidden)]
    pub transport_attachment_id: std::option::Option<std::string::String>,
    /// <p>Options for connecting an attachment.</p>
    #[doc(hidden)]
    pub options: std::option::Option<crate::types::ConnectAttachmentOptions>,
}
impl ConnectAttachment {
    /// <p>The attachment details.</p>
    pub fn attachment(&self) -> std::option::Option<&crate::types::Attachment> {
        self.attachment.as_ref()
    }
    /// <p>The ID of the transport attachment.</p>
    pub fn transport_attachment_id(&self) -> std::option::Option<&str> {
        self.transport_attachment_id.as_deref()
    }
    /// <p>Options for connecting an attachment.</p>
    pub fn options(&self) -> std::option::Option<&crate::types::ConnectAttachmentOptions> {
        self.options.as_ref()
    }
}
impl ConnectAttachment {
    /// Creates a new builder-style object to manufacture [`ConnectAttachment`](crate::types::ConnectAttachment).
    pub fn builder() -> crate::types::builders::ConnectAttachmentBuilder {
        crate::types::builders::ConnectAttachmentBuilder::default()
    }
}

/// A builder for [`ConnectAttachment`](crate::types::ConnectAttachment).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ConnectAttachmentBuilder {
    pub(crate) attachment: std::option::Option<crate::types::Attachment>,
    pub(crate) transport_attachment_id: std::option::Option<std::string::String>,
    pub(crate) options: std::option::Option<crate::types::ConnectAttachmentOptions>,
}
impl ConnectAttachmentBuilder {
    /// <p>The attachment details.</p>
    pub fn attachment(mut self, input: crate::types::Attachment) -> Self {
        self.attachment = Some(input);
        self
    }
    /// <p>The attachment details.</p>
    pub fn set_attachment(mut self, input: std::option::Option<crate::types::Attachment>) -> Self {
        self.attachment = input;
        self
    }
    /// <p>The ID of the transport attachment.</p>
    pub fn transport_attachment_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.transport_attachment_id = Some(input.into());
        self
    }
    /// <p>The ID of the transport attachment.</p>
    pub fn set_transport_attachment_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.transport_attachment_id = input;
        self
    }
    /// <p>Options for connecting an attachment.</p>
    pub fn options(mut self, input: crate::types::ConnectAttachmentOptions) -> Self {
        self.options = Some(input);
        self
    }
    /// <p>Options for connecting an attachment.</p>
    pub fn set_options(
        mut self,
        input: std::option::Option<crate::types::ConnectAttachmentOptions>,
    ) -> Self {
        self.options = input;
        self
    }
    /// Consumes the builder and constructs a [`ConnectAttachment`](crate::types::ConnectAttachment).
    pub fn build(self) -> crate::types::ConnectAttachment {
        crate::types::ConnectAttachment {
            attachment: self.attachment,
            transport_attachment_id: self.transport_attachment_id,
            options: self.options,
        }
    }
}
