// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a network route.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct NetworkRoute {
    /// <p>A unique identifier for the route, such as a CIDR block.</p>
    pub destination_cidr_block: ::std::option::Option<::std::string::String>,
    /// <p>The destinations.</p>
    pub destinations: ::std::option::Option<::std::vec::Vec<crate::types::NetworkRouteDestination>>,
    /// <p>The ID of the prefix list.</p>
    pub prefix_list_id: ::std::option::Option<::std::string::String>,
    /// <p>The route state. The possible values are <code>active</code> and <code>blackhole</code>.</p>
    pub state: ::std::option::Option<crate::types::RouteState>,
    /// <p>The route type. The possible values are <code>propagated</code> and <code>static</code>.</p>
    pub r#type: ::std::option::Option<crate::types::RouteType>,
}
impl NetworkRoute {
    /// <p>A unique identifier for the route, such as a CIDR block.</p>
    pub fn destination_cidr_block(&self) -> ::std::option::Option<&str> {
        self.destination_cidr_block.as_deref()
    }
    /// <p>The destinations.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.destinations.is_none()`.
    pub fn destinations(&self) -> &[crate::types::NetworkRouteDestination] {
        self.destinations.as_deref().unwrap_or_default()
    }
    /// <p>The ID of the prefix list.</p>
    pub fn prefix_list_id(&self) -> ::std::option::Option<&str> {
        self.prefix_list_id.as_deref()
    }
    /// <p>The route state. The possible values are <code>active</code> and <code>blackhole</code>.</p>
    pub fn state(&self) -> ::std::option::Option<&crate::types::RouteState> {
        self.state.as_ref()
    }
    /// <p>The route type. The possible values are <code>propagated</code> and <code>static</code>.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::RouteType> {
        self.r#type.as_ref()
    }
}
impl NetworkRoute {
    /// Creates a new builder-style object to manufacture [`NetworkRoute`](crate::types::NetworkRoute).
    pub fn builder() -> crate::types::builders::NetworkRouteBuilder {
        crate::types::builders::NetworkRouteBuilder::default()
    }
}

/// A builder for [`NetworkRoute`](crate::types::NetworkRoute).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct NetworkRouteBuilder {
    pub(crate) destination_cidr_block: ::std::option::Option<::std::string::String>,
    pub(crate) destinations: ::std::option::Option<::std::vec::Vec<crate::types::NetworkRouteDestination>>,
    pub(crate) prefix_list_id: ::std::option::Option<::std::string::String>,
    pub(crate) state: ::std::option::Option<crate::types::RouteState>,
    pub(crate) r#type: ::std::option::Option<crate::types::RouteType>,
}
impl NetworkRouteBuilder {
    /// <p>A unique identifier for the route, such as a CIDR block.</p>
    pub fn destination_cidr_block(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.destination_cidr_block = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier for the route, such as a CIDR block.</p>
    pub fn set_destination_cidr_block(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.destination_cidr_block = input;
        self
    }
    /// <p>A unique identifier for the route, such as a CIDR block.</p>
    pub fn get_destination_cidr_block(&self) -> &::std::option::Option<::std::string::String> {
        &self.destination_cidr_block
    }
    /// Appends an item to `destinations`.
    ///
    /// To override the contents of this collection use [`set_destinations`](Self::set_destinations).
    ///
    /// <p>The destinations.</p>
    pub fn destinations(mut self, input: crate::types::NetworkRouteDestination) -> Self {
        let mut v = self.destinations.unwrap_or_default();
        v.push(input);
        self.destinations = ::std::option::Option::Some(v);
        self
    }
    /// <p>The destinations.</p>
    pub fn set_destinations(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::NetworkRouteDestination>>) -> Self {
        self.destinations = input;
        self
    }
    /// <p>The destinations.</p>
    pub fn get_destinations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::NetworkRouteDestination>> {
        &self.destinations
    }
    /// <p>The ID of the prefix list.</p>
    pub fn prefix_list_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.prefix_list_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the prefix list.</p>
    pub fn set_prefix_list_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.prefix_list_id = input;
        self
    }
    /// <p>The ID of the prefix list.</p>
    pub fn get_prefix_list_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.prefix_list_id
    }
    /// <p>The route state. The possible values are <code>active</code> and <code>blackhole</code>.</p>
    pub fn state(mut self, input: crate::types::RouteState) -> Self {
        self.state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The route state. The possible values are <code>active</code> and <code>blackhole</code>.</p>
    pub fn set_state(mut self, input: ::std::option::Option<crate::types::RouteState>) -> Self {
        self.state = input;
        self
    }
    /// <p>The route state. The possible values are <code>active</code> and <code>blackhole</code>.</p>
    pub fn get_state(&self) -> &::std::option::Option<crate::types::RouteState> {
        &self.state
    }
    /// <p>The route type. The possible values are <code>propagated</code> and <code>static</code>.</p>
    pub fn r#type(mut self, input: crate::types::RouteType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The route type. The possible values are <code>propagated</code> and <code>static</code>.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::RouteType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The route type. The possible values are <code>propagated</code> and <code>static</code>.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::RouteType> {
        &self.r#type
    }
    /// Consumes the builder and constructs a [`NetworkRoute`](crate::types::NetworkRoute).
    pub fn build(self) -> crate::types::NetworkRoute {
        crate::types::NetworkRoute {
            destination_cidr_block: self.destination_cidr_block,
            destinations: self.destinations,
            prefix_list_id: self.prefix_list_id,
            state: self.state,
            r#type: self.r#type,
        }
    }
}
