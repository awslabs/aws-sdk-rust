// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a peering connection.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Peering {
    /// <p>The ID of the core network for the peering request.</p>
    #[doc(hidden)]
    pub core_network_id: std::option::Option<std::string::String>,
    /// <p>The ARN of a core network.</p>
    #[doc(hidden)]
    pub core_network_arn: std::option::Option<std::string::String>,
    /// <p>The ID of the peering attachment. </p>
    #[doc(hidden)]
    pub peering_id: std::option::Option<std::string::String>,
    /// <p>The ID of the account owner.</p>
    #[doc(hidden)]
    pub owner_account_id: std::option::Option<std::string::String>,
    /// <p>The type of peering. This will be <code>TRANSIT_GATEWAY</code>.</p>
    #[doc(hidden)]
    pub peering_type: std::option::Option<crate::types::PeeringType>,
    /// <p>The current state of the peering connection. </p>
    #[doc(hidden)]
    pub state: std::option::Option<crate::types::PeeringState>,
    /// <p>The edge location for the peer.</p>
    #[doc(hidden)]
    pub edge_location: std::option::Option<std::string::String>,
    /// <p>The resource ARN of the peer.</p>
    #[doc(hidden)]
    pub resource_arn: std::option::Option<std::string::String>,
    /// <p>The list of key-value tags associated with the peering.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    /// <p>The timestamp when the attachment peer was created.</p>
    #[doc(hidden)]
    pub created_at: std::option::Option<aws_smithy_types::DateTime>,
}
impl Peering {
    /// <p>The ID of the core network for the peering request.</p>
    pub fn core_network_id(&self) -> std::option::Option<&str> {
        self.core_network_id.as_deref()
    }
    /// <p>The ARN of a core network.</p>
    pub fn core_network_arn(&self) -> std::option::Option<&str> {
        self.core_network_arn.as_deref()
    }
    /// <p>The ID of the peering attachment. </p>
    pub fn peering_id(&self) -> std::option::Option<&str> {
        self.peering_id.as_deref()
    }
    /// <p>The ID of the account owner.</p>
    pub fn owner_account_id(&self) -> std::option::Option<&str> {
        self.owner_account_id.as_deref()
    }
    /// <p>The type of peering. This will be <code>TRANSIT_GATEWAY</code>.</p>
    pub fn peering_type(&self) -> std::option::Option<&crate::types::PeeringType> {
        self.peering_type.as_ref()
    }
    /// <p>The current state of the peering connection. </p>
    pub fn state(&self) -> std::option::Option<&crate::types::PeeringState> {
        self.state.as_ref()
    }
    /// <p>The edge location for the peer.</p>
    pub fn edge_location(&self) -> std::option::Option<&str> {
        self.edge_location.as_deref()
    }
    /// <p>The resource ARN of the peer.</p>
    pub fn resource_arn(&self) -> std::option::Option<&str> {
        self.resource_arn.as_deref()
    }
    /// <p>The list of key-value tags associated with the peering.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::types::Tag]> {
        self.tags.as_deref()
    }
    /// <p>The timestamp when the attachment peer was created.</p>
    pub fn created_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
}
impl Peering {
    /// Creates a new builder-style object to manufacture [`Peering`](crate::types::Peering).
    pub fn builder() -> crate::types::builders::PeeringBuilder {
        crate::types::builders::PeeringBuilder::default()
    }
}

/// A builder for [`Peering`](crate::types::Peering).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PeeringBuilder {
    pub(crate) core_network_id: std::option::Option<std::string::String>,
    pub(crate) core_network_arn: std::option::Option<std::string::String>,
    pub(crate) peering_id: std::option::Option<std::string::String>,
    pub(crate) owner_account_id: std::option::Option<std::string::String>,
    pub(crate) peering_type: std::option::Option<crate::types::PeeringType>,
    pub(crate) state: std::option::Option<crate::types::PeeringState>,
    pub(crate) edge_location: std::option::Option<std::string::String>,
    pub(crate) resource_arn: std::option::Option<std::string::String>,
    pub(crate) tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    pub(crate) created_at: std::option::Option<aws_smithy_types::DateTime>,
}
impl PeeringBuilder {
    /// <p>The ID of the core network for the peering request.</p>
    pub fn core_network_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.core_network_id = Some(input.into());
        self
    }
    /// <p>The ID of the core network for the peering request.</p>
    pub fn set_core_network_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.core_network_id = input;
        self
    }
    /// <p>The ARN of a core network.</p>
    pub fn core_network_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.core_network_arn = Some(input.into());
        self
    }
    /// <p>The ARN of a core network.</p>
    pub fn set_core_network_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.core_network_arn = input;
        self
    }
    /// <p>The ID of the peering attachment. </p>
    pub fn peering_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.peering_id = Some(input.into());
        self
    }
    /// <p>The ID of the peering attachment. </p>
    pub fn set_peering_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.peering_id = input;
        self
    }
    /// <p>The ID of the account owner.</p>
    pub fn owner_account_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.owner_account_id = Some(input.into());
        self
    }
    /// <p>The ID of the account owner.</p>
    pub fn set_owner_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.owner_account_id = input;
        self
    }
    /// <p>The type of peering. This will be <code>TRANSIT_GATEWAY</code>.</p>
    pub fn peering_type(mut self, input: crate::types::PeeringType) -> Self {
        self.peering_type = Some(input);
        self
    }
    /// <p>The type of peering. This will be <code>TRANSIT_GATEWAY</code>.</p>
    pub fn set_peering_type(
        mut self,
        input: std::option::Option<crate::types::PeeringType>,
    ) -> Self {
        self.peering_type = input;
        self
    }
    /// <p>The current state of the peering connection. </p>
    pub fn state(mut self, input: crate::types::PeeringState) -> Self {
        self.state = Some(input);
        self
    }
    /// <p>The current state of the peering connection. </p>
    pub fn set_state(mut self, input: std::option::Option<crate::types::PeeringState>) -> Self {
        self.state = input;
        self
    }
    /// <p>The edge location for the peer.</p>
    pub fn edge_location(mut self, input: impl Into<std::string::String>) -> Self {
        self.edge_location = Some(input.into());
        self
    }
    /// <p>The edge location for the peer.</p>
    pub fn set_edge_location(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.edge_location = input;
        self
    }
    /// <p>The resource ARN of the peer.</p>
    pub fn resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.resource_arn = Some(input.into());
        self
    }
    /// <p>The resource ARN of the peer.</p>
    pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.resource_arn = input;
        self
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The list of key-value tags associated with the peering.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = Some(v);
        self
    }
    /// <p>The list of key-value tags associated with the peering.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.tags = input;
        self
    }
    /// <p>The timestamp when the attachment peer was created.</p>
    pub fn created_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_at = Some(input);
        self
    }
    /// <p>The timestamp when the attachment peer was created.</p>
    pub fn set_created_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_at = input;
        self
    }
    /// Consumes the builder and constructs a [`Peering`](crate::types::Peering).
    pub fn build(self) -> crate::types::Peering {
        crate::types::Peering {
            core_network_id: self.core_network_id,
            core_network_arn: self.core_network_arn,
            peering_id: self.peering_id,
            owner_account_id: self.owner_account_id,
            peering_type: self.peering_type,
            state: self.state,
            edge_location: self.edge_location,
            resource_arn: self.resource_arn,
            tags: self.tags,
            created_at: self.created_at,
        }
    }
}
