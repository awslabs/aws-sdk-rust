// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a route analysis.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RouteAnalysis {
    /// <p>The ID of the global network.</p>
    #[doc(hidden)]
    pub global_network_id: std::option::Option<std::string::String>,
    /// <p>The ID of the AWS account that created the route analysis.</p>
    #[doc(hidden)]
    pub owner_account_id: std::option::Option<std::string::String>,
    /// <p>The ID of the route analysis.</p>
    #[doc(hidden)]
    pub route_analysis_id: std::option::Option<std::string::String>,
    /// <p>The time that the analysis started.</p>
    #[doc(hidden)]
    pub start_timestamp: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The status of the route analysis.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::RouteAnalysisStatus>,
    /// <p>The source.</p>
    #[doc(hidden)]
    pub source: std::option::Option<crate::types::RouteAnalysisEndpointOptions>,
    /// <p>The destination.</p>
    #[doc(hidden)]
    pub destination: std::option::Option<crate::types::RouteAnalysisEndpointOptions>,
    /// <p>Indicates whether to analyze the return path. The return path is not analyzed if the forward path analysis does not succeed.</p>
    #[doc(hidden)]
    pub include_return_path: bool,
    /// <p>Indicates whether to include the location of middlebox appliances in the route analysis.</p>
    #[doc(hidden)]
    pub use_middleboxes: bool,
    /// <p>The forward path.</p>
    #[doc(hidden)]
    pub forward_path: std::option::Option<crate::types::RouteAnalysisPath>,
    /// <p>The return path.</p>
    #[doc(hidden)]
    pub return_path: std::option::Option<crate::types::RouteAnalysisPath>,
}
impl RouteAnalysis {
    /// <p>The ID of the global network.</p>
    pub fn global_network_id(&self) -> std::option::Option<&str> {
        self.global_network_id.as_deref()
    }
    /// <p>The ID of the AWS account that created the route analysis.</p>
    pub fn owner_account_id(&self) -> std::option::Option<&str> {
        self.owner_account_id.as_deref()
    }
    /// <p>The ID of the route analysis.</p>
    pub fn route_analysis_id(&self) -> std::option::Option<&str> {
        self.route_analysis_id.as_deref()
    }
    /// <p>The time that the analysis started.</p>
    pub fn start_timestamp(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.start_timestamp.as_ref()
    }
    /// <p>The status of the route analysis.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::RouteAnalysisStatus> {
        self.status.as_ref()
    }
    /// <p>The source.</p>
    pub fn source(&self) -> std::option::Option<&crate::types::RouteAnalysisEndpointOptions> {
        self.source.as_ref()
    }
    /// <p>The destination.</p>
    pub fn destination(&self) -> std::option::Option<&crate::types::RouteAnalysisEndpointOptions> {
        self.destination.as_ref()
    }
    /// <p>Indicates whether to analyze the return path. The return path is not analyzed if the forward path analysis does not succeed.</p>
    pub fn include_return_path(&self) -> bool {
        self.include_return_path
    }
    /// <p>Indicates whether to include the location of middlebox appliances in the route analysis.</p>
    pub fn use_middleboxes(&self) -> bool {
        self.use_middleboxes
    }
    /// <p>The forward path.</p>
    pub fn forward_path(&self) -> std::option::Option<&crate::types::RouteAnalysisPath> {
        self.forward_path.as_ref()
    }
    /// <p>The return path.</p>
    pub fn return_path(&self) -> std::option::Option<&crate::types::RouteAnalysisPath> {
        self.return_path.as_ref()
    }
}
impl RouteAnalysis {
    /// Creates a new builder-style object to manufacture [`RouteAnalysis`](crate::types::RouteAnalysis).
    pub fn builder() -> crate::types::builders::RouteAnalysisBuilder {
        crate::types::builders::RouteAnalysisBuilder::default()
    }
}

/// A builder for [`RouteAnalysis`](crate::types::RouteAnalysis).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RouteAnalysisBuilder {
    pub(crate) global_network_id: std::option::Option<std::string::String>,
    pub(crate) owner_account_id: std::option::Option<std::string::String>,
    pub(crate) route_analysis_id: std::option::Option<std::string::String>,
    pub(crate) start_timestamp: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) status: std::option::Option<crate::types::RouteAnalysisStatus>,
    pub(crate) source: std::option::Option<crate::types::RouteAnalysisEndpointOptions>,
    pub(crate) destination: std::option::Option<crate::types::RouteAnalysisEndpointOptions>,
    pub(crate) include_return_path: std::option::Option<bool>,
    pub(crate) use_middleboxes: std::option::Option<bool>,
    pub(crate) forward_path: std::option::Option<crate::types::RouteAnalysisPath>,
    pub(crate) return_path: std::option::Option<crate::types::RouteAnalysisPath>,
}
impl RouteAnalysisBuilder {
    /// <p>The ID of the global network.</p>
    pub fn global_network_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.global_network_id = Some(input.into());
        self
    }
    /// <p>The ID of the global network.</p>
    pub fn set_global_network_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.global_network_id = input;
        self
    }
    /// <p>The ID of the AWS account that created the route analysis.</p>
    pub fn owner_account_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.owner_account_id = Some(input.into());
        self
    }
    /// <p>The ID of the AWS account that created the route analysis.</p>
    pub fn set_owner_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.owner_account_id = input;
        self
    }
    /// <p>The ID of the route analysis.</p>
    pub fn route_analysis_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.route_analysis_id = Some(input.into());
        self
    }
    /// <p>The ID of the route analysis.</p>
    pub fn set_route_analysis_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.route_analysis_id = input;
        self
    }
    /// <p>The time that the analysis started.</p>
    pub fn start_timestamp(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.start_timestamp = Some(input);
        self
    }
    /// <p>The time that the analysis started.</p>
    pub fn set_start_timestamp(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.start_timestamp = input;
        self
    }
    /// <p>The status of the route analysis.</p>
    pub fn status(mut self, input: crate::types::RouteAnalysisStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The status of the route analysis.</p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::RouteAnalysisStatus>,
    ) -> Self {
        self.status = input;
        self
    }
    /// <p>The source.</p>
    pub fn source(mut self, input: crate::types::RouteAnalysisEndpointOptions) -> Self {
        self.source = Some(input);
        self
    }
    /// <p>The source.</p>
    pub fn set_source(
        mut self,
        input: std::option::Option<crate::types::RouteAnalysisEndpointOptions>,
    ) -> Self {
        self.source = input;
        self
    }
    /// <p>The destination.</p>
    pub fn destination(mut self, input: crate::types::RouteAnalysisEndpointOptions) -> Self {
        self.destination = Some(input);
        self
    }
    /// <p>The destination.</p>
    pub fn set_destination(
        mut self,
        input: std::option::Option<crate::types::RouteAnalysisEndpointOptions>,
    ) -> Self {
        self.destination = input;
        self
    }
    /// <p>Indicates whether to analyze the return path. The return path is not analyzed if the forward path analysis does not succeed.</p>
    pub fn include_return_path(mut self, input: bool) -> Self {
        self.include_return_path = Some(input);
        self
    }
    /// <p>Indicates whether to analyze the return path. The return path is not analyzed if the forward path analysis does not succeed.</p>
    pub fn set_include_return_path(mut self, input: std::option::Option<bool>) -> Self {
        self.include_return_path = input;
        self
    }
    /// <p>Indicates whether to include the location of middlebox appliances in the route analysis.</p>
    pub fn use_middleboxes(mut self, input: bool) -> Self {
        self.use_middleboxes = Some(input);
        self
    }
    /// <p>Indicates whether to include the location of middlebox appliances in the route analysis.</p>
    pub fn set_use_middleboxes(mut self, input: std::option::Option<bool>) -> Self {
        self.use_middleboxes = input;
        self
    }
    /// <p>The forward path.</p>
    pub fn forward_path(mut self, input: crate::types::RouteAnalysisPath) -> Self {
        self.forward_path = Some(input);
        self
    }
    /// <p>The forward path.</p>
    pub fn set_forward_path(
        mut self,
        input: std::option::Option<crate::types::RouteAnalysisPath>,
    ) -> Self {
        self.forward_path = input;
        self
    }
    /// <p>The return path.</p>
    pub fn return_path(mut self, input: crate::types::RouteAnalysisPath) -> Self {
        self.return_path = Some(input);
        self
    }
    /// <p>The return path.</p>
    pub fn set_return_path(
        mut self,
        input: std::option::Option<crate::types::RouteAnalysisPath>,
    ) -> Self {
        self.return_path = input;
        self
    }
    /// Consumes the builder and constructs a [`RouteAnalysis`](crate::types::RouteAnalysis).
    pub fn build(self) -> crate::types::RouteAnalysis {
        crate::types::RouteAnalysis {
            global_network_id: self.global_network_id,
            owner_account_id: self.owner_account_id,
            route_analysis_id: self.route_analysis_id,
            start_timestamp: self.start_timestamp,
            status: self.status,
            source: self.source,
            destination: self.destination,
            include_return_path: self.include_return_path.unwrap_or_default(),
            use_middleboxes: self.use_middleboxes.unwrap_or_default(),
            forward_path: self.forward_path,
            return_path: self.return_path,
        }
    }
}
