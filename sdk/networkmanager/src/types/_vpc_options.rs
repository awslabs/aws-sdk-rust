// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the VPC options.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct VpcOptions {
    /// <p>Indicates whether IPv6 is supported.</p>
    #[doc(hidden)]
    pub ipv6_support: bool,
    /// <p>Indicates whether appliance mode is supported. If enabled, traffic flow between a source and destination use the same Availability Zone for the VPC attachment for the lifetime of that flow. The default value is <code>false</code>.</p>
    #[doc(hidden)]
    pub appliance_mode_support: bool,
}
impl VpcOptions {
    /// <p>Indicates whether IPv6 is supported.</p>
    pub fn ipv6_support(&self) -> bool {
        self.ipv6_support
    }
    /// <p>Indicates whether appliance mode is supported. If enabled, traffic flow between a source and destination use the same Availability Zone for the VPC attachment for the lifetime of that flow. The default value is <code>false</code>.</p>
    pub fn appliance_mode_support(&self) -> bool {
        self.appliance_mode_support
    }
}
impl VpcOptions {
    /// Creates a new builder-style object to manufacture [`VpcOptions`](crate::types::VpcOptions).
    pub fn builder() -> crate::types::builders::VpcOptionsBuilder {
        crate::types::builders::VpcOptionsBuilder::default()
    }
}

/// A builder for [`VpcOptions`](crate::types::VpcOptions).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct VpcOptionsBuilder {
    pub(crate) ipv6_support: std::option::Option<bool>,
    pub(crate) appliance_mode_support: std::option::Option<bool>,
}
impl VpcOptionsBuilder {
    /// <p>Indicates whether IPv6 is supported.</p>
    pub fn ipv6_support(mut self, input: bool) -> Self {
        self.ipv6_support = Some(input);
        self
    }
    /// <p>Indicates whether IPv6 is supported.</p>
    pub fn set_ipv6_support(mut self, input: std::option::Option<bool>) -> Self {
        self.ipv6_support = input;
        self
    }
    /// <p>Indicates whether appliance mode is supported. If enabled, traffic flow between a source and destination use the same Availability Zone for the VPC attachment for the lifetime of that flow. The default value is <code>false</code>.</p>
    pub fn appliance_mode_support(mut self, input: bool) -> Self {
        self.appliance_mode_support = Some(input);
        self
    }
    /// <p>Indicates whether appliance mode is supported. If enabled, traffic flow between a source and destination use the same Availability Zone for the VPC attachment for the lifetime of that flow. The default value is <code>false</code>.</p>
    pub fn set_appliance_mode_support(mut self, input: std::option::Option<bool>) -> Self {
        self.appliance_mode_support = input;
        self
    }
    /// Consumes the builder and constructs a [`VpcOptions`](crate::types::VpcOptions).
    pub fn build(self) -> crate::types::VpcOptions {
        crate::types::VpcOptions {
            ipv6_support: self.ipv6_support.unwrap_or_default(),
            appliance_mode_support: self.appliance_mode_support.unwrap_or_default(),
        }
    }
}
