// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The status of an Amazon Web Services Organization and the accounts within that organization.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct OrganizationStatus {
    /// <p>The ID of an Amazon Web Services Organization.</p>
    #[doc(hidden)]
    pub organization_id: std::option::Option<std::string::String>,
    /// <p>The status of the organization's AWS service access. This will be <code>ENABLED</code> or <code>DISABLED</code>.</p>
    #[doc(hidden)]
    pub organization_aws_service_access_status: std::option::Option<std::string::String>,
    /// <p>The status of the SLR deployment for the account. This will be either <code>SUCCEEDED</code> or <code>IN_PROGRESS</code>.</p>
    #[doc(hidden)]
    pub slr_deployment_status: std::option::Option<std::string::String>,
    /// <p>The current service-linked role (SLR) deployment status for an Amazon Web Services Organization's accounts. This will be either <code>SUCCEEDED</code> or <code>IN_PROGRESS</code>.</p>
    #[doc(hidden)]
    pub account_status_list: std::option::Option<std::vec::Vec<crate::types::AccountStatus>>,
}
impl OrganizationStatus {
    /// <p>The ID of an Amazon Web Services Organization.</p>
    pub fn organization_id(&self) -> std::option::Option<&str> {
        self.organization_id.as_deref()
    }
    /// <p>The status of the organization's AWS service access. This will be <code>ENABLED</code> or <code>DISABLED</code>.</p>
    pub fn organization_aws_service_access_status(&self) -> std::option::Option<&str> {
        self.organization_aws_service_access_status.as_deref()
    }
    /// <p>The status of the SLR deployment for the account. This will be either <code>SUCCEEDED</code> or <code>IN_PROGRESS</code>.</p>
    pub fn slr_deployment_status(&self) -> std::option::Option<&str> {
        self.slr_deployment_status.as_deref()
    }
    /// <p>The current service-linked role (SLR) deployment status for an Amazon Web Services Organization's accounts. This will be either <code>SUCCEEDED</code> or <code>IN_PROGRESS</code>.</p>
    pub fn account_status_list(&self) -> std::option::Option<&[crate::types::AccountStatus]> {
        self.account_status_list.as_deref()
    }
}
impl OrganizationStatus {
    /// Creates a new builder-style object to manufacture [`OrganizationStatus`](crate::types::OrganizationStatus).
    pub fn builder() -> crate::types::builders::OrganizationStatusBuilder {
        crate::types::builders::OrganizationStatusBuilder::default()
    }
}

/// A builder for [`OrganizationStatus`](crate::types::OrganizationStatus).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct OrganizationStatusBuilder {
    pub(crate) organization_id: std::option::Option<std::string::String>,
    pub(crate) organization_aws_service_access_status: std::option::Option<std::string::String>,
    pub(crate) slr_deployment_status: std::option::Option<std::string::String>,
    pub(crate) account_status_list: std::option::Option<std::vec::Vec<crate::types::AccountStatus>>,
}
impl OrganizationStatusBuilder {
    /// <p>The ID of an Amazon Web Services Organization.</p>
    pub fn organization_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.organization_id = Some(input.into());
        self
    }
    /// <p>The ID of an Amazon Web Services Organization.</p>
    pub fn set_organization_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.organization_id = input;
        self
    }
    /// <p>The status of the organization's AWS service access. This will be <code>ENABLED</code> or <code>DISABLED</code>.</p>
    pub fn organization_aws_service_access_status(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.organization_aws_service_access_status = Some(input.into());
        self
    }
    /// <p>The status of the organization's AWS service access. This will be <code>ENABLED</code> or <code>DISABLED</code>.</p>
    pub fn set_organization_aws_service_access_status(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.organization_aws_service_access_status = input;
        self
    }
    /// <p>The status of the SLR deployment for the account. This will be either <code>SUCCEEDED</code> or <code>IN_PROGRESS</code>.</p>
    pub fn slr_deployment_status(mut self, input: impl Into<std::string::String>) -> Self {
        self.slr_deployment_status = Some(input.into());
        self
    }
    /// <p>The status of the SLR deployment for the account. This will be either <code>SUCCEEDED</code> or <code>IN_PROGRESS</code>.</p>
    pub fn set_slr_deployment_status(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.slr_deployment_status = input;
        self
    }
    /// Appends an item to `account_status_list`.
    ///
    /// To override the contents of this collection use [`set_account_status_list`](Self::set_account_status_list).
    ///
    /// <p>The current service-linked role (SLR) deployment status for an Amazon Web Services Organization's accounts. This will be either <code>SUCCEEDED</code> or <code>IN_PROGRESS</code>.</p>
    pub fn account_status_list(mut self, input: crate::types::AccountStatus) -> Self {
        let mut v = self.account_status_list.unwrap_or_default();
        v.push(input);
        self.account_status_list = Some(v);
        self
    }
    /// <p>The current service-linked role (SLR) deployment status for an Amazon Web Services Organization's accounts. This will be either <code>SUCCEEDED</code> or <code>IN_PROGRESS</code>.</p>
    pub fn set_account_status_list(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::AccountStatus>>,
    ) -> Self {
        self.account_status_list = input;
        self
    }
    /// Consumes the builder and constructs a [`OrganizationStatus`](crate::types::OrganizationStatus).
    pub fn build(self) -> crate::types::OrganizationStatus {
        crate::types::OrganizationStatus {
            organization_id: self.organization_id,
            organization_aws_service_access_status: self.organization_aws_service_access_status,
            slr_deployment_status: self.slr_deployment_status,
            account_status_list: self.account_status_list,
        }
    }
}
