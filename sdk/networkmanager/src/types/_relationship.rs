// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a resource relationship.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Relationship {
    /// <p>The ARN of the resource.</p>
    #[doc(hidden)]
    pub from: std::option::Option<std::string::String>,
    /// <p>The ARN of the resource.</p>
    #[doc(hidden)]
    pub to: std::option::Option<std::string::String>,
}
impl Relationship {
    /// <p>The ARN of the resource.</p>
    pub fn from(&self) -> std::option::Option<&str> {
        self.from.as_deref()
    }
    /// <p>The ARN of the resource.</p>
    pub fn to(&self) -> std::option::Option<&str> {
        self.to.as_deref()
    }
}
impl Relationship {
    /// Creates a new builder-style object to manufacture [`Relationship`](crate::types::Relationship).
    pub fn builder() -> crate::types::builders::RelationshipBuilder {
        crate::types::builders::RelationshipBuilder::default()
    }
}

/// A builder for [`Relationship`](crate::types::Relationship).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RelationshipBuilder {
    pub(crate) from: std::option::Option<std::string::String>,
    pub(crate) to: std::option::Option<std::string::String>,
}
impl RelationshipBuilder {
    /// <p>The ARN of the resource.</p>
    pub fn from(mut self, input: impl Into<std::string::String>) -> Self {
        self.from = Some(input.into());
        self
    }
    /// <p>The ARN of the resource.</p>
    pub fn set_from(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.from = input;
        self
    }
    /// <p>The ARN of the resource.</p>
    pub fn to(mut self, input: impl Into<std::string::String>) -> Self {
        self.to = Some(input.into());
        self
    }
    /// <p>The ARN of the resource.</p>
    pub fn set_to(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.to = input;
        self
    }
    /// Consumes the builder and constructs a [`Relationship`](crate::types::Relationship).
    pub fn build(self) -> crate::types::Relationship {
        crate::types::Relationship {
            from: self.from,
            to: self.to,
        }
    }
}
