// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the destination of a network route.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct NetworkRouteDestination {
    /// <p>The ID of a core network attachment.</p>
    #[doc(hidden)]
    pub core_network_attachment_id: std::option::Option<std::string::String>,
    /// <p>The ID of the transit gateway attachment.</p>
    #[doc(hidden)]
    pub transit_gateway_attachment_id: std::option::Option<std::string::String>,
    /// <p>The name of the segment.</p>
    #[doc(hidden)]
    pub segment_name: std::option::Option<std::string::String>,
    /// <p>The edge location for the network destination.</p>
    #[doc(hidden)]
    pub edge_location: std::option::Option<std::string::String>,
    /// <p>The resource type.</p>
    #[doc(hidden)]
    pub resource_type: std::option::Option<std::string::String>,
    /// <p>The ID of the resource.</p>
    #[doc(hidden)]
    pub resource_id: std::option::Option<std::string::String>,
}
impl NetworkRouteDestination {
    /// <p>The ID of a core network attachment.</p>
    pub fn core_network_attachment_id(&self) -> std::option::Option<&str> {
        self.core_network_attachment_id.as_deref()
    }
    /// <p>The ID of the transit gateway attachment.</p>
    pub fn transit_gateway_attachment_id(&self) -> std::option::Option<&str> {
        self.transit_gateway_attachment_id.as_deref()
    }
    /// <p>The name of the segment.</p>
    pub fn segment_name(&self) -> std::option::Option<&str> {
        self.segment_name.as_deref()
    }
    /// <p>The edge location for the network destination.</p>
    pub fn edge_location(&self) -> std::option::Option<&str> {
        self.edge_location.as_deref()
    }
    /// <p>The resource type.</p>
    pub fn resource_type(&self) -> std::option::Option<&str> {
        self.resource_type.as_deref()
    }
    /// <p>The ID of the resource.</p>
    pub fn resource_id(&self) -> std::option::Option<&str> {
        self.resource_id.as_deref()
    }
}
impl NetworkRouteDestination {
    /// Creates a new builder-style object to manufacture [`NetworkRouteDestination`](crate::types::NetworkRouteDestination).
    pub fn builder() -> crate::types::builders::NetworkRouteDestinationBuilder {
        crate::types::builders::NetworkRouteDestinationBuilder::default()
    }
}

/// A builder for [`NetworkRouteDestination`](crate::types::NetworkRouteDestination).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct NetworkRouteDestinationBuilder {
    pub(crate) core_network_attachment_id: std::option::Option<std::string::String>,
    pub(crate) transit_gateway_attachment_id: std::option::Option<std::string::String>,
    pub(crate) segment_name: std::option::Option<std::string::String>,
    pub(crate) edge_location: std::option::Option<std::string::String>,
    pub(crate) resource_type: std::option::Option<std::string::String>,
    pub(crate) resource_id: std::option::Option<std::string::String>,
}
impl NetworkRouteDestinationBuilder {
    /// <p>The ID of a core network attachment.</p>
    pub fn core_network_attachment_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.core_network_attachment_id = Some(input.into());
        self
    }
    /// <p>The ID of a core network attachment.</p>
    pub fn set_core_network_attachment_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.core_network_attachment_id = input;
        self
    }
    /// <p>The ID of the transit gateway attachment.</p>
    pub fn transit_gateway_attachment_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.transit_gateway_attachment_id = Some(input.into());
        self
    }
    /// <p>The ID of the transit gateway attachment.</p>
    pub fn set_transit_gateway_attachment_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.transit_gateway_attachment_id = input;
        self
    }
    /// <p>The name of the segment.</p>
    pub fn segment_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.segment_name = Some(input.into());
        self
    }
    /// <p>The name of the segment.</p>
    pub fn set_segment_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.segment_name = input;
        self
    }
    /// <p>The edge location for the network destination.</p>
    pub fn edge_location(mut self, input: impl Into<std::string::String>) -> Self {
        self.edge_location = Some(input.into());
        self
    }
    /// <p>The edge location for the network destination.</p>
    pub fn set_edge_location(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.edge_location = input;
        self
    }
    /// <p>The resource type.</p>
    pub fn resource_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.resource_type = Some(input.into());
        self
    }
    /// <p>The resource type.</p>
    pub fn set_resource_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.resource_type = input;
        self
    }
    /// <p>The ID of the resource.</p>
    pub fn resource_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.resource_id = Some(input.into());
        self
    }
    /// <p>The ID of the resource.</p>
    pub fn set_resource_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.resource_id = input;
        self
    }
    /// Consumes the builder and constructs a [`NetworkRouteDestination`](crate::types::NetworkRouteDestination).
    pub fn build(self) -> crate::types::NetworkRouteDestination {
        crate::types::NetworkRouteDestination {
            core_network_attachment_id: self.core_network_attachment_id,
            transit_gateway_attachment_id: self.transit_gateway_attachment_id,
            segment_name: self.segment_name,
            edge_location: self.edge_location,
            resource_type: self.resource_type,
            resource_id: self.resource_id,
        }
    }
}
