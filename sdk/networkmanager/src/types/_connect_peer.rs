// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a core network Connect peer.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ConnectPeer {
    /// <p>The ID of a core network.</p>
    pub core_network_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the attachment to connect.</p>
    pub connect_attachment_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the Connect peer.</p>
    pub connect_peer_id: ::std::option::Option<::std::string::String>,
    /// <p>The Connect peer Regions where edges are located.</p>
    pub edge_location: ::std::option::Option<::std::string::String>,
    /// <p>The state of the Connect peer.</p>
    pub state: ::std::option::Option<crate::types::ConnectPeerState>,
    /// <p>The timestamp when the Connect peer was created.</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The configuration of the Connect peer.</p>
    pub configuration: ::std::option::Option<crate::types::ConnectPeerConfiguration>,
    /// <p>The list of key-value tags associated with the Connect peer.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    /// <p>The subnet ARN for the Connect peer.</p>
    pub subnet_arn: ::std::option::Option<::std::string::String>,
}
impl ConnectPeer {
    /// <p>The ID of a core network.</p>
    pub fn core_network_id(&self) -> ::std::option::Option<&str> {
        self.core_network_id.as_deref()
    }
    /// <p>The ID of the attachment to connect.</p>
    pub fn connect_attachment_id(&self) -> ::std::option::Option<&str> {
        self.connect_attachment_id.as_deref()
    }
    /// <p>The ID of the Connect peer.</p>
    pub fn connect_peer_id(&self) -> ::std::option::Option<&str> {
        self.connect_peer_id.as_deref()
    }
    /// <p>The Connect peer Regions where edges are located.</p>
    pub fn edge_location(&self) -> ::std::option::Option<&str> {
        self.edge_location.as_deref()
    }
    /// <p>The state of the Connect peer.</p>
    pub fn state(&self) -> ::std::option::Option<&crate::types::ConnectPeerState> {
        self.state.as_ref()
    }
    /// <p>The timestamp when the Connect peer was created.</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The configuration of the Connect peer.</p>
    pub fn configuration(&self) -> ::std::option::Option<&crate::types::ConnectPeerConfiguration> {
        self.configuration.as_ref()
    }
    /// <p>The list of key-value tags associated with the Connect peer.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
    /// <p>The subnet ARN for the Connect peer.</p>
    pub fn subnet_arn(&self) -> ::std::option::Option<&str> {
        self.subnet_arn.as_deref()
    }
}
impl ConnectPeer {
    /// Creates a new builder-style object to manufacture [`ConnectPeer`](crate::types::ConnectPeer).
    pub fn builder() -> crate::types::builders::ConnectPeerBuilder {
        crate::types::builders::ConnectPeerBuilder::default()
    }
}

/// A builder for [`ConnectPeer`](crate::types::ConnectPeer).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ConnectPeerBuilder {
    pub(crate) core_network_id: ::std::option::Option<::std::string::String>,
    pub(crate) connect_attachment_id: ::std::option::Option<::std::string::String>,
    pub(crate) connect_peer_id: ::std::option::Option<::std::string::String>,
    pub(crate) edge_location: ::std::option::Option<::std::string::String>,
    pub(crate) state: ::std::option::Option<crate::types::ConnectPeerState>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) configuration: ::std::option::Option<crate::types::ConnectPeerConfiguration>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    pub(crate) subnet_arn: ::std::option::Option<::std::string::String>,
}
impl ConnectPeerBuilder {
    /// <p>The ID of a core network.</p>
    pub fn core_network_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.core_network_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of a core network.</p>
    pub fn set_core_network_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.core_network_id = input;
        self
    }
    /// <p>The ID of a core network.</p>
    pub fn get_core_network_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.core_network_id
    }
    /// <p>The ID of the attachment to connect.</p>
    pub fn connect_attachment_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.connect_attachment_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the attachment to connect.</p>
    pub fn set_connect_attachment_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.connect_attachment_id = input;
        self
    }
    /// <p>The ID of the attachment to connect.</p>
    pub fn get_connect_attachment_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.connect_attachment_id
    }
    /// <p>The ID of the Connect peer.</p>
    pub fn connect_peer_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.connect_peer_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Connect peer.</p>
    pub fn set_connect_peer_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.connect_peer_id = input;
        self
    }
    /// <p>The ID of the Connect peer.</p>
    pub fn get_connect_peer_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.connect_peer_id
    }
    /// <p>The Connect peer Regions where edges are located.</p>
    pub fn edge_location(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.edge_location = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Connect peer Regions where edges are located.</p>
    pub fn set_edge_location(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.edge_location = input;
        self
    }
    /// <p>The Connect peer Regions where edges are located.</p>
    pub fn get_edge_location(&self) -> &::std::option::Option<::std::string::String> {
        &self.edge_location
    }
    /// <p>The state of the Connect peer.</p>
    pub fn state(mut self, input: crate::types::ConnectPeerState) -> Self {
        self.state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The state of the Connect peer.</p>
    pub fn set_state(mut self, input: ::std::option::Option<crate::types::ConnectPeerState>) -> Self {
        self.state = input;
        self
    }
    /// <p>The state of the Connect peer.</p>
    pub fn get_state(&self) -> &::std::option::Option<crate::types::ConnectPeerState> {
        &self.state
    }
    /// <p>The timestamp when the Connect peer was created.</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the Connect peer was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The timestamp when the Connect peer was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The configuration of the Connect peer.</p>
    pub fn configuration(mut self, input: crate::types::ConnectPeerConfiguration) -> Self {
        self.configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration of the Connect peer.</p>
    pub fn set_configuration(mut self, input: ::std::option::Option<crate::types::ConnectPeerConfiguration>) -> Self {
        self.configuration = input;
        self
    }
    /// <p>The configuration of the Connect peer.</p>
    pub fn get_configuration(&self) -> &::std::option::Option<crate::types::ConnectPeerConfiguration> {
        &self.configuration
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The list of key-value tags associated with the Connect peer.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of key-value tags associated with the Connect peer.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The list of key-value tags associated with the Connect peer.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// <p>The subnet ARN for the Connect peer.</p>
    pub fn subnet_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.subnet_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The subnet ARN for the Connect peer.</p>
    pub fn set_subnet_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.subnet_arn = input;
        self
    }
    /// <p>The subnet ARN for the Connect peer.</p>
    pub fn get_subnet_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.subnet_arn
    }
    /// Consumes the builder and constructs a [`ConnectPeer`](crate::types::ConnectPeer).
    pub fn build(self) -> crate::types::ConnectPeer {
        crate::types::ConnectPeer {
            core_network_id: self.core_network_id,
            connect_attachment_id: self.connect_attachment_id,
            connect_peer_id: self.connect_peer_id,
            edge_location: self.edge_location,
            state: self.state,
            created_at: self.created_at,
            configuration: self.configuration,
            tags: self.tags,
            subnet_arn: self.subnet_arn,
        }
    }
}
