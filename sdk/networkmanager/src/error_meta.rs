// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>You do not have sufficient access to perform this action.</p>
    AccessDeniedException(crate::error::AccessDeniedException),
    /// <p>There was a conflict processing the request. Updating or deleting the resource can cause an inconsistent state.</p>
    ConflictException(crate::error::ConflictException),
    /// <p>Describes a core network policy exception.</p>
    CoreNetworkPolicyException(crate::error::CoreNetworkPolicyException),
    /// <p>The request has failed due to an internal error.</p>
    InternalServerException(crate::error::InternalServerException),
    /// <p>The specified resource could not be found.</p>
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// <p>A service limit was exceeded.</p>
    ServiceQuotaExceededException(crate::error::ServiceQuotaExceededException),
    /// <p>The request was denied due to request throttling.</p>
    ThrottlingException(crate::error::ThrottlingException),
    /// <p>The input fails to satisfy the constraints.</p>
    ValidationException(crate::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::CoreNetworkPolicyException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ServiceQuotaExceededException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AcceptAttachmentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::AcceptAttachmentError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AcceptAttachmentError> for Error {
    fn from(err: crate::error::AcceptAttachmentError) -> Self {
        match err {
            crate::error::AcceptAttachmentError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::AcceptAttachmentError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::AcceptAttachmentError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::AcceptAttachmentError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::AcceptAttachmentError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::AcceptAttachmentError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::AcceptAttachmentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AssociateConnectPeerError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::AssociateConnectPeerError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AssociateConnectPeerError> for Error {
    fn from(err: crate::error::AssociateConnectPeerError) -> Self {
        match err {
            crate::error::AssociateConnectPeerError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::AssociateConnectPeerError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::AssociateConnectPeerError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::AssociateConnectPeerError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::AssociateConnectPeerError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::AssociateConnectPeerError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::AssociateConnectPeerError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::AssociateConnectPeerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AssociateCustomerGatewayError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::AssociateCustomerGatewayError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AssociateCustomerGatewayError> for Error {
    fn from(err: crate::error::AssociateCustomerGatewayError) -> Self {
        match err {
            crate::error::AssociateCustomerGatewayError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::AssociateCustomerGatewayError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::AssociateCustomerGatewayError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::AssociateCustomerGatewayError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::AssociateCustomerGatewayError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::AssociateCustomerGatewayError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::AssociateCustomerGatewayError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::AssociateCustomerGatewayError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AssociateLinkError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::AssociateLinkError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AssociateLinkError> for Error {
    fn from(err: crate::error::AssociateLinkError) -> Self {
        match err {
            crate::error::AssociateLinkError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::AssociateLinkError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::AssociateLinkError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::AssociateLinkError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::AssociateLinkError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::AssociateLinkError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::AssociateLinkError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::AssociateLinkError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<crate::error::AssociateTransitGatewayConnectPeerError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::AssociateTransitGatewayConnectPeerError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AssociateTransitGatewayConnectPeerError> for Error {
    fn from(err: crate::error::AssociateTransitGatewayConnectPeerError) -> Self {
        match err {
            crate::error::AssociateTransitGatewayConnectPeerError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::AssociateTransitGatewayConnectPeerError::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::AssociateTransitGatewayConnectPeerError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::AssociateTransitGatewayConnectPeerError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::AssociateTransitGatewayConnectPeerError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::error::AssociateTransitGatewayConnectPeerError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::AssociateTransitGatewayConnectPeerError::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::AssociateTransitGatewayConnectPeerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateConnectAttachmentError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateConnectAttachmentError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateConnectAttachmentError> for Error {
    fn from(err: crate::error::CreateConnectAttachmentError) -> Self {
        match err {
            crate::error::CreateConnectAttachmentError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateConnectAttachmentError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateConnectAttachmentError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateConnectAttachmentError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateConnectAttachmentError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateConnectAttachmentError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateConnectAttachmentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateConnectionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateConnectionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateConnectionError> for Error {
    fn from(err: crate::error::CreateConnectionError) -> Self {
        match err {
            crate::error::CreateConnectionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateConnectionError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateConnectionError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateConnectionError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::CreateConnectionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateConnectionError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateConnectionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateConnectPeerError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateConnectPeerError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateConnectPeerError> for Error {
    fn from(err: crate::error::CreateConnectPeerError) -> Self {
        match err {
            crate::error::CreateConnectPeerError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateConnectPeerError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateConnectPeerError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateConnectPeerError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateConnectPeerError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateConnectPeerError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateConnectPeerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateCoreNetworkError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateCoreNetworkError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateCoreNetworkError> for Error {
    fn from(err: crate::error::CreateCoreNetworkError) -> Self {
        match err {
            crate::error::CreateCoreNetworkError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateCoreNetworkError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateCoreNetworkError::CoreNetworkPolicyException(inner) => {
                Error::CoreNetworkPolicyException(inner)
            }
            crate::error::CreateCoreNetworkError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateCoreNetworkError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::CreateCoreNetworkError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateCoreNetworkError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateCoreNetworkError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateDeviceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateDeviceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateDeviceError> for Error {
    fn from(err: crate::error::CreateDeviceError) -> Self {
        match err {
            crate::error::CreateDeviceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateDeviceError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateDeviceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateDeviceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateDeviceError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::CreateDeviceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateDeviceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateDeviceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateGlobalNetworkError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateGlobalNetworkError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateGlobalNetworkError> for Error {
    fn from(err: crate::error::CreateGlobalNetworkError) -> Self {
        match err {
            crate::error::CreateGlobalNetworkError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateGlobalNetworkError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateGlobalNetworkError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateGlobalNetworkError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::CreateGlobalNetworkError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateGlobalNetworkError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateGlobalNetworkError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateLinkError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateLinkError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateLinkError> for Error {
    fn from(err: crate::error::CreateLinkError) -> Self {
        match err {
            crate::error::CreateLinkError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateLinkError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateLinkError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateLinkError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateLinkError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::CreateLinkError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateLinkError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateLinkError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateSiteError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateSiteError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateSiteError> for Error {
    fn from(err: crate::error::CreateSiteError) -> Self {
        match err {
            crate::error::CreateSiteError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateSiteError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateSiteError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateSiteError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateSiteError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::CreateSiteError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateSiteError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateSiteError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateSiteToSiteVpnAttachmentError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateSiteToSiteVpnAttachmentError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateSiteToSiteVpnAttachmentError> for Error {
    fn from(err: crate::error::CreateSiteToSiteVpnAttachmentError) -> Self {
        match err {
            crate::error::CreateSiteToSiteVpnAttachmentError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateSiteToSiteVpnAttachmentError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateSiteToSiteVpnAttachmentError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateSiteToSiteVpnAttachmentError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateSiteToSiteVpnAttachmentError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateSiteToSiteVpnAttachmentError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateSiteToSiteVpnAttachmentError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateTransitGatewayPeeringError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateTransitGatewayPeeringError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateTransitGatewayPeeringError> for Error {
    fn from(err: crate::error::CreateTransitGatewayPeeringError) -> Self {
        match err {
            crate::error::CreateTransitGatewayPeeringError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateTransitGatewayPeeringError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateTransitGatewayPeeringError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateTransitGatewayPeeringError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateTransitGatewayPeeringError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateTransitGatewayPeeringError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateTransitGatewayPeeringError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::CreateTransitGatewayRouteTableAttachmentError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::CreateTransitGatewayRouteTableAttachmentError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateTransitGatewayRouteTableAttachmentError> for Error {
    fn from(err: crate::error::CreateTransitGatewayRouteTableAttachmentError) -> Self {
        match err {
            crate::error::CreateTransitGatewayRouteTableAttachmentError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::CreateTransitGatewayRouteTableAttachmentError::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::CreateTransitGatewayRouteTableAttachmentError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::CreateTransitGatewayRouteTableAttachmentError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::CreateTransitGatewayRouteTableAttachmentError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::CreateTransitGatewayRouteTableAttachmentError::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::CreateTransitGatewayRouteTableAttachmentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateVpcAttachmentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateVpcAttachmentError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateVpcAttachmentError> for Error {
    fn from(err: crate::error::CreateVpcAttachmentError) -> Self {
        match err {
            crate::error::CreateVpcAttachmentError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateVpcAttachmentError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateVpcAttachmentError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateVpcAttachmentError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateVpcAttachmentError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateVpcAttachmentError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateVpcAttachmentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteAttachmentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteAttachmentError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteAttachmentError> for Error {
    fn from(err: crate::error::DeleteAttachmentError) -> Self {
        match err {
            crate::error::DeleteAttachmentError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteAttachmentError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteAttachmentError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteAttachmentError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteAttachmentError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteAttachmentError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteAttachmentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteConnectionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteConnectionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteConnectionError> for Error {
    fn from(err: crate::error::DeleteConnectionError) -> Self {
        match err {
            crate::error::DeleteConnectionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteConnectionError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteConnectionError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteConnectionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteConnectionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteConnectionError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteConnectionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteConnectPeerError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteConnectPeerError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteConnectPeerError> for Error {
    fn from(err: crate::error::DeleteConnectPeerError) -> Self {
        match err {
            crate::error::DeleteConnectPeerError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteConnectPeerError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteConnectPeerError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteConnectPeerError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteConnectPeerError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteConnectPeerError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteConnectPeerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteCoreNetworkError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteCoreNetworkError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteCoreNetworkError> for Error {
    fn from(err: crate::error::DeleteCoreNetworkError) -> Self {
        match err {
            crate::error::DeleteCoreNetworkError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteCoreNetworkError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteCoreNetworkError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteCoreNetworkError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteCoreNetworkError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteCoreNetworkError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteCoreNetworkError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DeleteCoreNetworkPolicyVersionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DeleteCoreNetworkPolicyVersionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteCoreNetworkPolicyVersionError> for Error {
    fn from(err: crate::error::DeleteCoreNetworkPolicyVersionError) -> Self {
        match err {
            crate::error::DeleteCoreNetworkPolicyVersionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteCoreNetworkPolicyVersionError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteCoreNetworkPolicyVersionError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteCoreNetworkPolicyVersionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteCoreNetworkPolicyVersionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteCoreNetworkPolicyVersionError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteCoreNetworkPolicyVersionError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteDeviceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteDeviceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteDeviceError> for Error {
    fn from(err: crate::error::DeleteDeviceError) -> Self {
        match err {
            crate::error::DeleteDeviceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteDeviceError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteDeviceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteDeviceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteDeviceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteDeviceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteDeviceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteGlobalNetworkError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteGlobalNetworkError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteGlobalNetworkError> for Error {
    fn from(err: crate::error::DeleteGlobalNetworkError) -> Self {
        match err {
            crate::error::DeleteGlobalNetworkError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteGlobalNetworkError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteGlobalNetworkError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteGlobalNetworkError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteGlobalNetworkError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteGlobalNetworkError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteGlobalNetworkError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteLinkError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteLinkError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteLinkError> for Error {
    fn from(err: crate::error::DeleteLinkError) -> Self {
        match err {
            crate::error::DeleteLinkError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteLinkError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteLinkError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteLinkError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteLinkError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteLinkError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteLinkError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeletePeeringError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeletePeeringError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeletePeeringError> for Error {
    fn from(err: crate::error::DeletePeeringError) -> Self {
        match err {
            crate::error::DeletePeeringError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeletePeeringError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeletePeeringError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeletePeeringError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeletePeeringError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeletePeeringError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeletePeeringError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteResourcePolicyError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteResourcePolicyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteResourcePolicyError> for Error {
    fn from(err: crate::error::DeleteResourcePolicyError) -> Self {
        match err {
            crate::error::DeleteResourcePolicyError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteResourcePolicyError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteResourcePolicyError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteResourcePolicyError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteResourcePolicyError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteResourcePolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteSiteError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteSiteError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteSiteError> for Error {
    fn from(err: crate::error::DeleteSiteError) -> Self {
        match err {
            crate::error::DeleteSiteError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteSiteError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteSiteError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteSiteError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteSiteError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteSiteError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteSiteError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeregisterTransitGatewayError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeregisterTransitGatewayError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeregisterTransitGatewayError> for Error {
    fn from(err: crate::error::DeregisterTransitGatewayError) -> Self {
        match err {
            crate::error::DeregisterTransitGatewayError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeregisterTransitGatewayError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeregisterTransitGatewayError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeregisterTransitGatewayError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeregisterTransitGatewayError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeregisterTransitGatewayError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeregisterTransitGatewayError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeGlobalNetworksError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeGlobalNetworksError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeGlobalNetworksError> for Error {
    fn from(err: crate::error::DescribeGlobalNetworksError) -> Self {
        match err {
            crate::error::DescribeGlobalNetworksError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DescribeGlobalNetworksError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DescribeGlobalNetworksError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeGlobalNetworksError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeGlobalNetworksError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DescribeGlobalNetworksError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DisassociateConnectPeerError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DisassociateConnectPeerError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DisassociateConnectPeerError> for Error {
    fn from(err: crate::error::DisassociateConnectPeerError) -> Self {
        match err {
            crate::error::DisassociateConnectPeerError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DisassociateConnectPeerError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DisassociateConnectPeerError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DisassociateConnectPeerError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DisassociateConnectPeerError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DisassociateConnectPeerError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DisassociateConnectPeerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DisassociateCustomerGatewayError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DisassociateCustomerGatewayError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DisassociateCustomerGatewayError> for Error {
    fn from(err: crate::error::DisassociateCustomerGatewayError) -> Self {
        match err {
            crate::error::DisassociateCustomerGatewayError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DisassociateCustomerGatewayError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DisassociateCustomerGatewayError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DisassociateCustomerGatewayError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DisassociateCustomerGatewayError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DisassociateCustomerGatewayError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DisassociateCustomerGatewayError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DisassociateLinkError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DisassociateLinkError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DisassociateLinkError> for Error {
    fn from(err: crate::error::DisassociateLinkError) -> Self {
        match err {
            crate::error::DisassociateLinkError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DisassociateLinkError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DisassociateLinkError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DisassociateLinkError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DisassociateLinkError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DisassociateLinkError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DisassociateLinkError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::DisassociateTransitGatewayConnectPeerError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DisassociateTransitGatewayConnectPeerError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DisassociateTransitGatewayConnectPeerError> for Error {
    fn from(err: crate::error::DisassociateTransitGatewayConnectPeerError) -> Self {
        match err {
            crate::error::DisassociateTransitGatewayConnectPeerError::AccessDeniedException(
                inner,
            ) => Error::AccessDeniedException(inner),
            crate::error::DisassociateTransitGatewayConnectPeerError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DisassociateTransitGatewayConnectPeerError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::error::DisassociateTransitGatewayConnectPeerError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::error::DisassociateTransitGatewayConnectPeerError::ThrottlingException(
                inner,
            ) => Error::ThrottlingException(inner),
            crate::error::DisassociateTransitGatewayConnectPeerError::ValidationException(
                inner,
            ) => Error::ValidationException(inner),
            crate::error::DisassociateTransitGatewayConnectPeerError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ExecuteCoreNetworkChangeSetError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ExecuteCoreNetworkChangeSetError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ExecuteCoreNetworkChangeSetError> for Error {
    fn from(err: crate::error::ExecuteCoreNetworkChangeSetError) -> Self {
        match err {
            crate::error::ExecuteCoreNetworkChangeSetError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ExecuteCoreNetworkChangeSetError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::ExecuteCoreNetworkChangeSetError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ExecuteCoreNetworkChangeSetError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ExecuteCoreNetworkChangeSetError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ExecuteCoreNetworkChangeSetError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ExecuteCoreNetworkChangeSetError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetConnectAttachmentError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetConnectAttachmentError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetConnectAttachmentError> for Error {
    fn from(err: crate::error::GetConnectAttachmentError) -> Self {
        match err {
            crate::error::GetConnectAttachmentError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetConnectAttachmentError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetConnectAttachmentError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetConnectAttachmentError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetConnectAttachmentError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetConnectAttachmentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetConnectionsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetConnectionsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetConnectionsError> for Error {
    fn from(err: crate::error::GetConnectionsError) -> Self {
        match err {
            crate::error::GetConnectionsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetConnectionsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetConnectionsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetConnectionsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetConnectionsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetConnectionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetConnectPeerError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetConnectPeerError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetConnectPeerError> for Error {
    fn from(err: crate::error::GetConnectPeerError) -> Self {
        match err {
            crate::error::GetConnectPeerError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetConnectPeerError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetConnectPeerError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetConnectPeerError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetConnectPeerError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetConnectPeerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetConnectPeerAssociationsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetConnectPeerAssociationsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetConnectPeerAssociationsError> for Error {
    fn from(err: crate::error::GetConnectPeerAssociationsError) -> Self {
        match err {
            crate::error::GetConnectPeerAssociationsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetConnectPeerAssociationsError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::GetConnectPeerAssociationsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetConnectPeerAssociationsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetConnectPeerAssociationsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetConnectPeerAssociationsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetConnectPeerAssociationsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetCoreNetworkError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetCoreNetworkError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetCoreNetworkError> for Error {
    fn from(err: crate::error::GetCoreNetworkError) -> Self {
        match err {
            crate::error::GetCoreNetworkError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetCoreNetworkError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetCoreNetworkError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetCoreNetworkError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetCoreNetworkError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetCoreNetworkError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetCoreNetworkChangeEventsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetCoreNetworkChangeEventsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetCoreNetworkChangeEventsError> for Error {
    fn from(err: crate::error::GetCoreNetworkChangeEventsError) -> Self {
        match err {
            crate::error::GetCoreNetworkChangeEventsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetCoreNetworkChangeEventsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetCoreNetworkChangeEventsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetCoreNetworkChangeEventsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetCoreNetworkChangeEventsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetCoreNetworkChangeEventsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetCoreNetworkChangeSetError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetCoreNetworkChangeSetError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetCoreNetworkChangeSetError> for Error {
    fn from(err: crate::error::GetCoreNetworkChangeSetError) -> Self {
        match err {
            crate::error::GetCoreNetworkChangeSetError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetCoreNetworkChangeSetError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetCoreNetworkChangeSetError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetCoreNetworkChangeSetError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetCoreNetworkChangeSetError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetCoreNetworkChangeSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetCoreNetworkPolicyError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetCoreNetworkPolicyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetCoreNetworkPolicyError> for Error {
    fn from(err: crate::error::GetCoreNetworkPolicyError) -> Self {
        match err {
            crate::error::GetCoreNetworkPolicyError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetCoreNetworkPolicyError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetCoreNetworkPolicyError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetCoreNetworkPolicyError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetCoreNetworkPolicyError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetCoreNetworkPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::GetCustomerGatewayAssociationsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::GetCustomerGatewayAssociationsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetCustomerGatewayAssociationsError> for Error {
    fn from(err: crate::error::GetCustomerGatewayAssociationsError) -> Self {
        match err {
            crate::error::GetCustomerGatewayAssociationsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetCustomerGatewayAssociationsError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::GetCustomerGatewayAssociationsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetCustomerGatewayAssociationsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetCustomerGatewayAssociationsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetCustomerGatewayAssociationsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetCustomerGatewayAssociationsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetDevicesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetDevicesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetDevicesError> for Error {
    fn from(err: crate::error::GetDevicesError) -> Self {
        match err {
            crate::error::GetDevicesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetDevicesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetDevicesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetDevicesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetDevicesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetDevicesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetLinkAssociationsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetLinkAssociationsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetLinkAssociationsError> for Error {
    fn from(err: crate::error::GetLinkAssociationsError) -> Self {
        match err {
            crate::error::GetLinkAssociationsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetLinkAssociationsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetLinkAssociationsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetLinkAssociationsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetLinkAssociationsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetLinkAssociationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetLinksError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetLinksError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetLinksError> for Error {
    fn from(err: crate::error::GetLinksError) -> Self {
        match err {
            crate::error::GetLinksError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetLinksError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetLinksError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetLinksError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetLinksError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetLinksError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetNetworkResourceCountsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetNetworkResourceCountsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetNetworkResourceCountsError> for Error {
    fn from(err: crate::error::GetNetworkResourceCountsError) -> Self {
        match err {
            crate::error::GetNetworkResourceCountsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetNetworkResourceCountsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetNetworkResourceCountsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetNetworkResourceCountsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetNetworkResourceCountsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::GetNetworkResourceRelationshipsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::GetNetworkResourceRelationshipsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetNetworkResourceRelationshipsError> for Error {
    fn from(err: crate::error::GetNetworkResourceRelationshipsError) -> Self {
        match err {
            crate::error::GetNetworkResourceRelationshipsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetNetworkResourceRelationshipsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetNetworkResourceRelationshipsError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::error::GetNetworkResourceRelationshipsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetNetworkResourceRelationshipsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetNetworkResourceRelationshipsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetNetworkResourcesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetNetworkResourcesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetNetworkResourcesError> for Error {
    fn from(err: crate::error::GetNetworkResourcesError) -> Self {
        match err {
            crate::error::GetNetworkResourcesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetNetworkResourcesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetNetworkResourcesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetNetworkResourcesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetNetworkResourcesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetNetworkResourcesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetNetworkRoutesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetNetworkRoutesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetNetworkRoutesError> for Error {
    fn from(err: crate::error::GetNetworkRoutesError) -> Self {
        match err {
            crate::error::GetNetworkRoutesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetNetworkRoutesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetNetworkRoutesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetNetworkRoutesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetNetworkRoutesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetNetworkRoutesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetNetworkTelemetryError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetNetworkTelemetryError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetNetworkTelemetryError> for Error {
    fn from(err: crate::error::GetNetworkTelemetryError) -> Self {
        match err {
            crate::error::GetNetworkTelemetryError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetNetworkTelemetryError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetNetworkTelemetryError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetNetworkTelemetryError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetNetworkTelemetryError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetNetworkTelemetryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetResourcePolicyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetResourcePolicyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetResourcePolicyError> for Error {
    fn from(err: crate::error::GetResourcePolicyError) -> Self {
        match err {
            crate::error::GetResourcePolicyError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetResourcePolicyError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetResourcePolicyError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetResourcePolicyError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetResourcePolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetRouteAnalysisError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetRouteAnalysisError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetRouteAnalysisError> for Error {
    fn from(err: crate::error::GetRouteAnalysisError) -> Self {
        match err {
            crate::error::GetRouteAnalysisError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetRouteAnalysisError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetRouteAnalysisError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetRouteAnalysisError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetRouteAnalysisError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetRouteAnalysisError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetSitesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetSitesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetSitesError> for Error {
    fn from(err: crate::error::GetSitesError) -> Self {
        match err {
            crate::error::GetSitesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetSitesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetSitesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetSitesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetSitesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetSitesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetSiteToSiteVpnAttachmentError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetSiteToSiteVpnAttachmentError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetSiteToSiteVpnAttachmentError> for Error {
    fn from(err: crate::error::GetSiteToSiteVpnAttachmentError) -> Self {
        match err {
            crate::error::GetSiteToSiteVpnAttachmentError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetSiteToSiteVpnAttachmentError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetSiteToSiteVpnAttachmentError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetSiteToSiteVpnAttachmentError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetSiteToSiteVpnAttachmentError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetSiteToSiteVpnAttachmentError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::GetTransitGatewayConnectPeerAssociationsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::GetTransitGatewayConnectPeerAssociationsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetTransitGatewayConnectPeerAssociationsError> for Error {
    fn from(err: crate::error::GetTransitGatewayConnectPeerAssociationsError) -> Self {
        match err {
            crate::error::GetTransitGatewayConnectPeerAssociationsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::GetTransitGatewayConnectPeerAssociationsError::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::GetTransitGatewayConnectPeerAssociationsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::GetTransitGatewayConnectPeerAssociationsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::GetTransitGatewayConnectPeerAssociationsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::GetTransitGatewayConnectPeerAssociationsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::GetTransitGatewayConnectPeerAssociationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetTransitGatewayPeeringError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetTransitGatewayPeeringError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetTransitGatewayPeeringError> for Error {
    fn from(err: crate::error::GetTransitGatewayPeeringError) -> Self {
        match err {
            crate::error::GetTransitGatewayPeeringError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetTransitGatewayPeeringError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetTransitGatewayPeeringError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetTransitGatewayPeeringError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetTransitGatewayPeeringError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetTransitGatewayPeeringError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::GetTransitGatewayRegistrationsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::GetTransitGatewayRegistrationsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetTransitGatewayRegistrationsError> for Error {
    fn from(err: crate::error::GetTransitGatewayRegistrationsError) -> Self {
        match err {
            crate::error::GetTransitGatewayRegistrationsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetTransitGatewayRegistrationsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetTransitGatewayRegistrationsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetTransitGatewayRegistrationsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetTransitGatewayRegistrationsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetTransitGatewayRegistrationsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::GetTransitGatewayRouteTableAttachmentError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::GetTransitGatewayRouteTableAttachmentError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetTransitGatewayRouteTableAttachmentError> for Error {
    fn from(err: crate::error::GetTransitGatewayRouteTableAttachmentError) -> Self {
        match err {
            crate::error::GetTransitGatewayRouteTableAttachmentError::AccessDeniedException(
                inner,
            ) => Error::AccessDeniedException(inner),
            crate::error::GetTransitGatewayRouteTableAttachmentError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::error::GetTransitGatewayRouteTableAttachmentError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::error::GetTransitGatewayRouteTableAttachmentError::ThrottlingException(
                inner,
            ) => Error::ThrottlingException(inner),
            crate::error::GetTransitGatewayRouteTableAttachmentError::ValidationException(
                inner,
            ) => Error::ValidationException(inner),
            crate::error::GetTransitGatewayRouteTableAttachmentError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetVpcAttachmentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetVpcAttachmentError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetVpcAttachmentError> for Error {
    fn from(err: crate::error::GetVpcAttachmentError) -> Self {
        match err {
            crate::error::GetVpcAttachmentError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetVpcAttachmentError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetVpcAttachmentError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetVpcAttachmentError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetVpcAttachmentError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetVpcAttachmentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListAttachmentsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListAttachmentsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListAttachmentsError> for Error {
    fn from(err: crate::error::ListAttachmentsError) -> Self {
        match err {
            crate::error::ListAttachmentsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListAttachmentsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListAttachmentsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListAttachmentsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListAttachmentsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListConnectPeersError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListConnectPeersError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListConnectPeersError> for Error {
    fn from(err: crate::error::ListConnectPeersError) -> Self {
        match err {
            crate::error::ListConnectPeersError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListConnectPeersError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListConnectPeersError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListConnectPeersError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListConnectPeersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListCoreNetworkPolicyVersionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListCoreNetworkPolicyVersionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListCoreNetworkPolicyVersionsError> for Error {
    fn from(err: crate::error::ListCoreNetworkPolicyVersionsError) -> Self {
        match err {
            crate::error::ListCoreNetworkPolicyVersionsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListCoreNetworkPolicyVersionsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListCoreNetworkPolicyVersionsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListCoreNetworkPolicyVersionsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListCoreNetworkPolicyVersionsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListCoreNetworkPolicyVersionsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListCoreNetworksError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListCoreNetworksError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListCoreNetworksError> for Error {
    fn from(err: crate::error::ListCoreNetworksError) -> Self {
        match err {
            crate::error::ListCoreNetworksError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListCoreNetworksError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListCoreNetworksError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListCoreNetworksError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListCoreNetworksError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::ListOrganizationServiceAccessStatusError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::ListOrganizationServiceAccessStatusError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListOrganizationServiceAccessStatusError> for Error {
    fn from(err: crate::error::ListOrganizationServiceAccessStatusError) -> Self {
        match err {
            crate::error::ListOrganizationServiceAccessStatusError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListPeeringsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListPeeringsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListPeeringsError> for Error {
    fn from(err: crate::error::ListPeeringsError) -> Self {
        match err {
            crate::error::ListPeeringsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListPeeringsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListPeeringsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListPeeringsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListPeeringsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListTagsForResourceError> for Error {
    fn from(err: crate::error::ListTagsForResourceError) -> Self {
        match err {
            crate::error::ListTagsForResourceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListTagsForResourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListTagsForResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListTagsForResourceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListTagsForResourceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutCoreNetworkPolicyError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::PutCoreNetworkPolicyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutCoreNetworkPolicyError> for Error {
    fn from(err: crate::error::PutCoreNetworkPolicyError) -> Self {
        match err {
            crate::error::PutCoreNetworkPolicyError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::PutCoreNetworkPolicyError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::PutCoreNetworkPolicyError::CoreNetworkPolicyException(inner) => {
                Error::CoreNetworkPolicyException(inner)
            }
            crate::error::PutCoreNetworkPolicyError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::PutCoreNetworkPolicyError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::PutCoreNetworkPolicyError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::PutCoreNetworkPolicyError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::PutCoreNetworkPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutResourcePolicyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::PutResourcePolicyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutResourcePolicyError> for Error {
    fn from(err: crate::error::PutResourcePolicyError) -> Self {
        match err {
            crate::error::PutResourcePolicyError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::PutResourcePolicyError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::PutResourcePolicyError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::PutResourcePolicyError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::PutResourcePolicyError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::PutResourcePolicyError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::PutResourcePolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RegisterTransitGatewayError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::RegisterTransitGatewayError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RegisterTransitGatewayError> for Error {
    fn from(err: crate::error::RegisterTransitGatewayError) -> Self {
        match err {
            crate::error::RegisterTransitGatewayError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::RegisterTransitGatewayError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::RegisterTransitGatewayError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::RegisterTransitGatewayError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::RegisterTransitGatewayError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::RegisterTransitGatewayError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::RegisterTransitGatewayError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RejectAttachmentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::RejectAttachmentError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RejectAttachmentError> for Error {
    fn from(err: crate::error::RejectAttachmentError) -> Self {
        match err {
            crate::error::RejectAttachmentError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::RejectAttachmentError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::RejectAttachmentError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::RejectAttachmentError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::RejectAttachmentError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::RejectAttachmentError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::RejectAttachmentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::RestoreCoreNetworkPolicyVersionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::RestoreCoreNetworkPolicyVersionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RestoreCoreNetworkPolicyVersionError> for Error {
    fn from(err: crate::error::RestoreCoreNetworkPolicyVersionError) -> Self {
        match err {
            crate::error::RestoreCoreNetworkPolicyVersionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::RestoreCoreNetworkPolicyVersionError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::RestoreCoreNetworkPolicyVersionError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::RestoreCoreNetworkPolicyVersionError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::error::RestoreCoreNetworkPolicyVersionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::RestoreCoreNetworkPolicyVersionError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::RestoreCoreNetworkPolicyVersionError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::StartOrganizationServiceAccessUpdateError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::StartOrganizationServiceAccessUpdateError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StartOrganizationServiceAccessUpdateError> for Error {
    fn from(err: crate::error::StartOrganizationServiceAccessUpdateError) -> Self {
        match err {
            crate::error::StartOrganizationServiceAccessUpdateError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::StartOrganizationServiceAccessUpdateError::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::StartOrganizationServiceAccessUpdateError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::StartOrganizationServiceAccessUpdateError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::error::StartOrganizationServiceAccessUpdateError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::StartOrganizationServiceAccessUpdateError::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::StartOrganizationServiceAccessUpdateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartRouteAnalysisError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::StartRouteAnalysisError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StartRouteAnalysisError> for Error {
    fn from(err: crate::error::StartRouteAnalysisError) -> Self {
        match err {
            crate::error::StartRouteAnalysisError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::StartRouteAnalysisError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::StartRouteAnalysisError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::StartRouteAnalysisError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::StartRouteAnalysisError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::StartRouteAnalysisError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::StartRouteAnalysisError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::TagResourceError> for Error {
    fn from(err: crate::error::TagResourceError) -> Self {
        match err {
            crate::error::TagResourceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::TagResourceError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::TagResourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::TagResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::TagResourceError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::TagResourceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::TagResourceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UntagResourceError> for Error {
    fn from(err: crate::error::UntagResourceError) -> Self {
        match err {
            crate::error::UntagResourceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UntagResourceError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UntagResourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UntagResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UntagResourceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UntagResourceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateConnectionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateConnectionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateConnectionError> for Error {
    fn from(err: crate::error::UpdateConnectionError) -> Self {
        match err {
            crate::error::UpdateConnectionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateConnectionError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateConnectionError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdateConnectionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateConnectionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateConnectionError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateConnectionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateCoreNetworkError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateCoreNetworkError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateCoreNetworkError> for Error {
    fn from(err: crate::error::UpdateCoreNetworkError) -> Self {
        match err {
            crate::error::UpdateCoreNetworkError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateCoreNetworkError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateCoreNetworkError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdateCoreNetworkError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateCoreNetworkError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateCoreNetworkError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateCoreNetworkError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateDeviceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateDeviceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateDeviceError> for Error {
    fn from(err: crate::error::UpdateDeviceError) -> Self {
        match err {
            crate::error::UpdateDeviceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateDeviceError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateDeviceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdateDeviceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateDeviceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateDeviceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateDeviceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateGlobalNetworkError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateGlobalNetworkError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateGlobalNetworkError> for Error {
    fn from(err: crate::error::UpdateGlobalNetworkError) -> Self {
        match err {
            crate::error::UpdateGlobalNetworkError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateGlobalNetworkError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateGlobalNetworkError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdateGlobalNetworkError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateGlobalNetworkError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateGlobalNetworkError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateGlobalNetworkError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateLinkError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateLinkError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateLinkError> for Error {
    fn from(err: crate::error::UpdateLinkError) -> Self {
        match err {
            crate::error::UpdateLinkError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateLinkError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateLinkError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdateLinkError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateLinkError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::UpdateLinkError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateLinkError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateLinkError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateNetworkResourceMetadataError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateNetworkResourceMetadataError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateNetworkResourceMetadataError> for Error {
    fn from(err: crate::error::UpdateNetworkResourceMetadataError) -> Self {
        match err {
            crate::error::UpdateNetworkResourceMetadataError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateNetworkResourceMetadataError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateNetworkResourceMetadataError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdateNetworkResourceMetadataError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateNetworkResourceMetadataError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateNetworkResourceMetadataError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateNetworkResourceMetadataError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateSiteError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateSiteError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateSiteError> for Error {
    fn from(err: crate::error::UpdateSiteError) -> Self {
        match err {
            crate::error::UpdateSiteError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateSiteError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateSiteError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdateSiteError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateSiteError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateSiteError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateSiteError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateVpcAttachmentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateVpcAttachmentError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateVpcAttachmentError> for Error {
    fn from(err: crate::error::UpdateVpcAttachmentError) -> Self {
        match err {
            crate::error::UpdateVpcAttachmentError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateVpcAttachmentError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateVpcAttachmentError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdateVpcAttachmentError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateVpcAttachmentError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateVpcAttachmentError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateVpcAttachmentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::CoreNetworkPolicyException(e) => e.request_id(),
            Self::InternalServerException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ServiceQuotaExceededException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
