// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>You do not have sufficient access to perform this action.</p>
    AccessDeniedException(crate::types::error::AccessDeniedException),
    /// <p>There was a conflict processing the request. Updating or deleting the resource can cause an inconsistent state.</p>
    ConflictException(crate::types::error::ConflictException),
    /// <p>Describes a core network policy exception.</p>
    CoreNetworkPolicyException(crate::types::error::CoreNetworkPolicyException),
    /// <p>The request has failed due to an internal error.</p>
    InternalServerException(crate::types::error::InternalServerException),
    /// <p>The specified resource could not be found.</p>
    ResourceNotFoundException(crate::types::error::ResourceNotFoundException),
    /// <p>A service limit was exceeded.</p>
    ServiceQuotaExceededException(crate::types::error::ServiceQuotaExceededException),
    /// <p>The request was denied due to request throttling.</p>
    ThrottlingException(crate::types::error::ThrottlingException),
    /// <p>The input fails to satisfy the constraints.</p>
    ValidationException(crate::types::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::CoreNetworkPolicyException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ServiceQuotaExceededException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::accept_attachment::AcceptAttachmentError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::accept_attachment::AcceptAttachmentError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::accept_attachment::AcceptAttachmentError> for Error {
    fn from(err: crate::operation::accept_attachment::AcceptAttachmentError) -> Self {
        match err {
            crate::operation::accept_attachment::AcceptAttachmentError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::accept_attachment::AcceptAttachmentError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::accept_attachment::AcceptAttachmentError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::accept_attachment::AcceptAttachmentError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::accept_attachment::AcceptAttachmentError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::accept_attachment::AcceptAttachmentError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::accept_attachment::AcceptAttachmentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::associate_connect_peer::AssociateConnectPeerError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::associate_connect_peer::AssociateConnectPeerError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::associate_connect_peer::AssociateConnectPeerError> for Error {
    fn from(err: crate::operation::associate_connect_peer::AssociateConnectPeerError) -> Self {
        match err {
            crate::operation::associate_connect_peer::AssociateConnectPeerError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::associate_connect_peer::AssociateConnectPeerError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::associate_connect_peer::AssociateConnectPeerError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::associate_connect_peer::AssociateConnectPeerError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::associate_connect_peer::AssociateConnectPeerError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::associate_connect_peer::AssociateConnectPeerError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::associate_connect_peer::AssociateConnectPeerError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::associate_connect_peer::AssociateConnectPeerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::associate_customer_gateway::AssociateCustomerGatewayError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::associate_customer_gateway::AssociateCustomerGatewayError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::associate_customer_gateway::AssociateCustomerGatewayError> for Error {
    fn from(
        err: crate::operation::associate_customer_gateway::AssociateCustomerGatewayError,
    ) -> Self {
        match err {
            crate::operation::associate_customer_gateway::AssociateCustomerGatewayError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::associate_customer_gateway::AssociateCustomerGatewayError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::associate_customer_gateway::AssociateCustomerGatewayError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::associate_customer_gateway::AssociateCustomerGatewayError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::associate_customer_gateway::AssociateCustomerGatewayError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::associate_customer_gateway::AssociateCustomerGatewayError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::associate_customer_gateway::AssociateCustomerGatewayError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::associate_customer_gateway::AssociateCustomerGatewayError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::associate_link::AssociateLinkError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::associate_link::AssociateLinkError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::associate_link::AssociateLinkError> for Error {
    fn from(err: crate::operation::associate_link::AssociateLinkError) -> Self {
        match err {
            crate::operation::associate_link::AssociateLinkError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::associate_link::AssociateLinkError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::associate_link::AssociateLinkError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::associate_link::AssociateLinkError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::associate_link::AssociateLinkError::ServiceQuotaExceededException(
                inner,
            ) => Error::ServiceQuotaExceededException(inner),
            crate::operation::associate_link::AssociateLinkError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::associate_link::AssociateLinkError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::associate_link::AssociateLinkError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::associate_transit_gateway_connect_peer::AssociateTransitGatewayConnectPeerError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::associate_transit_gateway_connect_peer::AssociateTransitGatewayConnectPeerError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::associate_transit_gateway_connect_peer::AssociateTransitGatewayConnectPeerError> for Error {
    fn from(err: crate::operation::associate_transit_gateway_connect_peer::AssociateTransitGatewayConnectPeerError) -> Self {
        match err {
            crate::operation::associate_transit_gateway_connect_peer::AssociateTransitGatewayConnectPeerError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::associate_transit_gateway_connect_peer::AssociateTransitGatewayConnectPeerError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::associate_transit_gateway_connect_peer::AssociateTransitGatewayConnectPeerError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::associate_transit_gateway_connect_peer::AssociateTransitGatewayConnectPeerError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::associate_transit_gateway_connect_peer::AssociateTransitGatewayConnectPeerError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::associate_transit_gateway_connect_peer::AssociateTransitGatewayConnectPeerError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::associate_transit_gateway_connect_peer::AssociateTransitGatewayConnectPeerError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::associate_transit_gateway_connect_peer::AssociateTransitGatewayConnectPeerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_connect_attachment::CreateConnectAttachmentError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_connect_attachment::CreateConnectAttachmentError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_connect_attachment::CreateConnectAttachmentError> for Error {
    fn from(
        err: crate::operation::create_connect_attachment::CreateConnectAttachmentError,
    ) -> Self {
        match err {
            crate::operation::create_connect_attachment::CreateConnectAttachmentError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_connect_attachment::CreateConnectAttachmentError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_connect_attachment::CreateConnectAttachmentError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_connect_attachment::CreateConnectAttachmentError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_connect_attachment::CreateConnectAttachmentError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_connect_attachment::CreateConnectAttachmentError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_connect_attachment::CreateConnectAttachmentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_connection::CreateConnectionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_connection::CreateConnectionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_connection::CreateConnectionError> for Error {
    fn from(err: crate::operation::create_connection::CreateConnectionError) -> Self {
        match err {
            crate::operation::create_connection::CreateConnectionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_connection::CreateConnectionError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_connection::CreateConnectionError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_connection::CreateConnectionError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_connection::CreateConnectionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_connection::CreateConnectionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_connection::CreateConnectionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_connect_peer::CreateConnectPeerError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_connect_peer::CreateConnectPeerError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_connect_peer::CreateConnectPeerError> for Error {
    fn from(err: crate::operation::create_connect_peer::CreateConnectPeerError) -> Self {
        match err {
            crate::operation::create_connect_peer::CreateConnectPeerError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_connect_peer::CreateConnectPeerError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_connect_peer::CreateConnectPeerError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_connect_peer::CreateConnectPeerError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_connect_peer::CreateConnectPeerError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_connect_peer::CreateConnectPeerError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_connect_peer::CreateConnectPeerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_core_network::CreateCoreNetworkError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_core_network::CreateCoreNetworkError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_core_network::CreateCoreNetworkError> for Error {
    fn from(err: crate::operation::create_core_network::CreateCoreNetworkError) -> Self {
        match err {
            crate::operation::create_core_network::CreateCoreNetworkError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_core_network::CreateCoreNetworkError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_core_network::CreateCoreNetworkError::CoreNetworkPolicyException(inner) => Error::CoreNetworkPolicyException(inner),
            crate::operation::create_core_network::CreateCoreNetworkError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_core_network::CreateCoreNetworkError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_core_network::CreateCoreNetworkError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_core_network::CreateCoreNetworkError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_core_network::CreateCoreNetworkError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::create_device::CreateDeviceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_device::CreateDeviceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_device::CreateDeviceError> for Error {
    fn from(err: crate::operation::create_device::CreateDeviceError) -> Self {
        match err {
            crate::operation::create_device::CreateDeviceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_device::CreateDeviceError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::create_device::CreateDeviceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_device::CreateDeviceError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::create_device::CreateDeviceError::ServiceQuotaExceededException(
                inner,
            ) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_device::CreateDeviceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::create_device::CreateDeviceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::create_device::CreateDeviceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_global_network::CreateGlobalNetworkError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_global_network::CreateGlobalNetworkError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_global_network::CreateGlobalNetworkError> for Error {
    fn from(err: crate::operation::create_global_network::CreateGlobalNetworkError) -> Self {
        match err {
            crate::operation::create_global_network::CreateGlobalNetworkError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_global_network::CreateGlobalNetworkError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_global_network::CreateGlobalNetworkError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_global_network::CreateGlobalNetworkError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_global_network::CreateGlobalNetworkError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_global_network::CreateGlobalNetworkError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_global_network::CreateGlobalNetworkError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::create_link::CreateLinkError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::create_link::CreateLinkError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_link::CreateLinkError> for Error {
    fn from(err: crate::operation::create_link::CreateLinkError) -> Self {
        match err {
            crate::operation::create_link::CreateLinkError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_link::CreateLinkError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::create_link::CreateLinkError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_link::CreateLinkError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_link::CreateLinkError::ServiceQuotaExceededException(
                inner,
            ) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_link::CreateLinkError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::create_link::CreateLinkError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::create_link::CreateLinkError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::create_site::CreateSiteError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::create_site::CreateSiteError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_site::CreateSiteError> for Error {
    fn from(err: crate::operation::create_site::CreateSiteError) -> Self {
        match err {
            crate::operation::create_site::CreateSiteError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_site::CreateSiteError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::create_site::CreateSiteError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_site::CreateSiteError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_site::CreateSiteError::ServiceQuotaExceededException(
                inner,
            ) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_site::CreateSiteError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::create_site::CreateSiteError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::create_site::CreateSiteError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::create_site_to_site_vpn_attachment::CreateSiteToSiteVpnAttachmentError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::create_site_to_site_vpn_attachment::CreateSiteToSiteVpnAttachmentError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::create_site_to_site_vpn_attachment::CreateSiteToSiteVpnAttachmentError>
    for Error
{
    fn from(
        err: crate::operation::create_site_to_site_vpn_attachment::CreateSiteToSiteVpnAttachmentError,
    ) -> Self {
        match err {
            crate::operation::create_site_to_site_vpn_attachment::CreateSiteToSiteVpnAttachmentError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_site_to_site_vpn_attachment::CreateSiteToSiteVpnAttachmentError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_site_to_site_vpn_attachment::CreateSiteToSiteVpnAttachmentError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_site_to_site_vpn_attachment::CreateSiteToSiteVpnAttachmentError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_site_to_site_vpn_attachment::CreateSiteToSiteVpnAttachmentError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_site_to_site_vpn_attachment::CreateSiteToSiteVpnAttachmentError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_site_to_site_vpn_attachment::CreateSiteToSiteVpnAttachmentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_transit_gateway_peering::CreateTransitGatewayPeeringError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_transit_gateway_peering::CreateTransitGatewayPeeringError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_transit_gateway_peering::CreateTransitGatewayPeeringError>
    for Error
{
    fn from(
        err: crate::operation::create_transit_gateway_peering::CreateTransitGatewayPeeringError,
    ) -> Self {
        match err {
            crate::operation::create_transit_gateway_peering::CreateTransitGatewayPeeringError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_transit_gateway_peering::CreateTransitGatewayPeeringError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_transit_gateway_peering::CreateTransitGatewayPeeringError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_transit_gateway_peering::CreateTransitGatewayPeeringError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_transit_gateway_peering::CreateTransitGatewayPeeringError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_transit_gateway_peering::CreateTransitGatewayPeeringError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_transit_gateway_peering::CreateTransitGatewayPeeringError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::create_transit_gateway_route_table_attachment::CreateTransitGatewayRouteTableAttachmentError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::create_transit_gateway_route_table_attachment::CreateTransitGatewayRouteTableAttachmentError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::create_transit_gateway_route_table_attachment::CreateTransitGatewayRouteTableAttachmentError> for Error {
    fn from(err: crate::operation::create_transit_gateway_route_table_attachment::CreateTransitGatewayRouteTableAttachmentError) -> Self {
        match err {
            crate::operation::create_transit_gateway_route_table_attachment::CreateTransitGatewayRouteTableAttachmentError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_transit_gateway_route_table_attachment::CreateTransitGatewayRouteTableAttachmentError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_transit_gateway_route_table_attachment::CreateTransitGatewayRouteTableAttachmentError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_transit_gateway_route_table_attachment::CreateTransitGatewayRouteTableAttachmentError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_transit_gateway_route_table_attachment::CreateTransitGatewayRouteTableAttachmentError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_transit_gateway_route_table_attachment::CreateTransitGatewayRouteTableAttachmentError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_transit_gateway_route_table_attachment::CreateTransitGatewayRouteTableAttachmentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_vpc_attachment::CreateVpcAttachmentError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_vpc_attachment::CreateVpcAttachmentError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_vpc_attachment::CreateVpcAttachmentError> for Error {
    fn from(err: crate::operation::create_vpc_attachment::CreateVpcAttachmentError) -> Self {
        match err {
            crate::operation::create_vpc_attachment::CreateVpcAttachmentError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_vpc_attachment::CreateVpcAttachmentError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_vpc_attachment::CreateVpcAttachmentError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_vpc_attachment::CreateVpcAttachmentError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_vpc_attachment::CreateVpcAttachmentError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_vpc_attachment::CreateVpcAttachmentError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_vpc_attachment::CreateVpcAttachmentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_attachment::DeleteAttachmentError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_attachment::DeleteAttachmentError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_attachment::DeleteAttachmentError> for Error {
    fn from(err: crate::operation::delete_attachment::DeleteAttachmentError) -> Self {
        match err {
            crate::operation::delete_attachment::DeleteAttachmentError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_attachment::DeleteAttachmentError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_attachment::DeleteAttachmentError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_attachment::DeleteAttachmentError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_attachment::DeleteAttachmentError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_attachment::DeleteAttachmentError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_attachment::DeleteAttachmentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_connection::DeleteConnectionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_connection::DeleteConnectionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_connection::DeleteConnectionError> for Error {
    fn from(err: crate::operation::delete_connection::DeleteConnectionError) -> Self {
        match err {
            crate::operation::delete_connection::DeleteConnectionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_connection::DeleteConnectionError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_connection::DeleteConnectionError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_connection::DeleteConnectionError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_connection::DeleteConnectionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_connection::DeleteConnectionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_connection::DeleteConnectionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_connect_peer::DeleteConnectPeerError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_connect_peer::DeleteConnectPeerError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_connect_peer::DeleteConnectPeerError> for Error {
    fn from(err: crate::operation::delete_connect_peer::DeleteConnectPeerError) -> Self {
        match err {
            crate::operation::delete_connect_peer::DeleteConnectPeerError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_connect_peer::DeleteConnectPeerError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_connect_peer::DeleteConnectPeerError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_connect_peer::DeleteConnectPeerError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_connect_peer::DeleteConnectPeerError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_connect_peer::DeleteConnectPeerError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_connect_peer::DeleteConnectPeerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_core_network::DeleteCoreNetworkError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_core_network::DeleteCoreNetworkError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_core_network::DeleteCoreNetworkError> for Error {
    fn from(err: crate::operation::delete_core_network::DeleteCoreNetworkError) -> Self {
        match err {
            crate::operation::delete_core_network::DeleteCoreNetworkError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_core_network::DeleteCoreNetworkError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_core_network::DeleteCoreNetworkError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_core_network::DeleteCoreNetworkError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_core_network::DeleteCoreNetworkError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_core_network::DeleteCoreNetworkError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_core_network::DeleteCoreNetworkError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::delete_core_network_policy_version::DeleteCoreNetworkPolicyVersionError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::delete_core_network_policy_version::DeleteCoreNetworkPolicyVersionError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::delete_core_network_policy_version::DeleteCoreNetworkPolicyVersionError>
    for Error
{
    fn from(
        err: crate::operation::delete_core_network_policy_version::DeleteCoreNetworkPolicyVersionError,
    ) -> Self {
        match err {
            crate::operation::delete_core_network_policy_version::DeleteCoreNetworkPolicyVersionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_core_network_policy_version::DeleteCoreNetworkPolicyVersionError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_core_network_policy_version::DeleteCoreNetworkPolicyVersionError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_core_network_policy_version::DeleteCoreNetworkPolicyVersionError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_core_network_policy_version::DeleteCoreNetworkPolicyVersionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_core_network_policy_version::DeleteCoreNetworkPolicyVersionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_core_network_policy_version::DeleteCoreNetworkPolicyVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::delete_device::DeleteDeviceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_device::DeleteDeviceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_device::DeleteDeviceError> for Error {
    fn from(err: crate::operation::delete_device::DeleteDeviceError) -> Self {
        match err {
            crate::operation::delete_device::DeleteDeviceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_device::DeleteDeviceError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::delete_device::DeleteDeviceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_device::DeleteDeviceError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_device::DeleteDeviceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::delete_device::DeleteDeviceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_device::DeleteDeviceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_global_network::DeleteGlobalNetworkError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_global_network::DeleteGlobalNetworkError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_global_network::DeleteGlobalNetworkError> for Error {
    fn from(err: crate::operation::delete_global_network::DeleteGlobalNetworkError) -> Self {
        match err {
            crate::operation::delete_global_network::DeleteGlobalNetworkError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_global_network::DeleteGlobalNetworkError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_global_network::DeleteGlobalNetworkError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_global_network::DeleteGlobalNetworkError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_global_network::DeleteGlobalNetworkError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_global_network::DeleteGlobalNetworkError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_global_network::DeleteGlobalNetworkError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::delete_link::DeleteLinkError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::delete_link::DeleteLinkError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_link::DeleteLinkError> for Error {
    fn from(err: crate::operation::delete_link::DeleteLinkError) -> Self {
        match err {
            crate::operation::delete_link::DeleteLinkError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_link::DeleteLinkError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::delete_link::DeleteLinkError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_link::DeleteLinkError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_link::DeleteLinkError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::delete_link::DeleteLinkError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_link::DeleteLinkError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::delete_peering::DeletePeeringError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_peering::DeletePeeringError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_peering::DeletePeeringError> for Error {
    fn from(err: crate::operation::delete_peering::DeletePeeringError) -> Self {
        match err {
            crate::operation::delete_peering::DeletePeeringError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_peering::DeletePeeringError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::delete_peering::DeletePeeringError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::delete_peering::DeletePeeringError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_peering::DeletePeeringError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::delete_peering::DeletePeeringError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_peering::DeletePeeringError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_resource_policy::DeleteResourcePolicyError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_resource_policy::DeleteResourcePolicyError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_resource_policy::DeleteResourcePolicyError> for Error {
    fn from(err: crate::operation::delete_resource_policy::DeleteResourcePolicyError) -> Self {
        match err {
            crate::operation::delete_resource_policy::DeleteResourcePolicyError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_resource_policy::DeleteResourcePolicyError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_resource_policy::DeleteResourcePolicyError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_resource_policy::DeleteResourcePolicyError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_resource_policy::DeleteResourcePolicyError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_resource_policy::DeleteResourcePolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::delete_site::DeleteSiteError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::delete_site::DeleteSiteError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_site::DeleteSiteError> for Error {
    fn from(err: crate::operation::delete_site::DeleteSiteError) -> Self {
        match err {
            crate::operation::delete_site::DeleteSiteError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_site::DeleteSiteError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::delete_site::DeleteSiteError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_site::DeleteSiteError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_site::DeleteSiteError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::delete_site::DeleteSiteError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_site::DeleteSiteError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::deregister_transit_gateway::DeregisterTransitGatewayError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::deregister_transit_gateway::DeregisterTransitGatewayError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::deregister_transit_gateway::DeregisterTransitGatewayError> for Error {
    fn from(
        err: crate::operation::deregister_transit_gateway::DeregisterTransitGatewayError,
    ) -> Self {
        match err {
            crate::operation::deregister_transit_gateway::DeregisterTransitGatewayError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::deregister_transit_gateway::DeregisterTransitGatewayError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::deregister_transit_gateway::DeregisterTransitGatewayError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::deregister_transit_gateway::DeregisterTransitGatewayError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::deregister_transit_gateway::DeregisterTransitGatewayError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::deregister_transit_gateway::DeregisterTransitGatewayError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::deregister_transit_gateway::DeregisterTransitGatewayError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_global_networks::DescribeGlobalNetworksError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_global_networks::DescribeGlobalNetworksError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_global_networks::DescribeGlobalNetworksError> for Error {
    fn from(err: crate::operation::describe_global_networks::DescribeGlobalNetworksError) -> Self {
        match err {
            crate::operation::describe_global_networks::DescribeGlobalNetworksError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::describe_global_networks::DescribeGlobalNetworksError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::describe_global_networks::DescribeGlobalNetworksError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::describe_global_networks::DescribeGlobalNetworksError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::describe_global_networks::DescribeGlobalNetworksError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::describe_global_networks::DescribeGlobalNetworksError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::disassociate_connect_peer::DisassociateConnectPeerError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::disassociate_connect_peer::DisassociateConnectPeerError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::disassociate_connect_peer::DisassociateConnectPeerError> for Error {
    fn from(
        err: crate::operation::disassociate_connect_peer::DisassociateConnectPeerError,
    ) -> Self {
        match err {
            crate::operation::disassociate_connect_peer::DisassociateConnectPeerError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::disassociate_connect_peer::DisassociateConnectPeerError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::disassociate_connect_peer::DisassociateConnectPeerError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::disassociate_connect_peer::DisassociateConnectPeerError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::disassociate_connect_peer::DisassociateConnectPeerError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::disassociate_connect_peer::DisassociateConnectPeerError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::disassociate_connect_peer::DisassociateConnectPeerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::disassociate_customer_gateway::DisassociateCustomerGatewayError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::disassociate_customer_gateway::DisassociateCustomerGatewayError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::disassociate_customer_gateway::DisassociateCustomerGatewayError>
    for Error
{
    fn from(
        err: crate::operation::disassociate_customer_gateway::DisassociateCustomerGatewayError,
    ) -> Self {
        match err {
            crate::operation::disassociate_customer_gateway::DisassociateCustomerGatewayError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::disassociate_customer_gateway::DisassociateCustomerGatewayError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::disassociate_customer_gateway::DisassociateCustomerGatewayError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::disassociate_customer_gateway::DisassociateCustomerGatewayError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::disassociate_customer_gateway::DisassociateCustomerGatewayError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::disassociate_customer_gateway::DisassociateCustomerGatewayError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::disassociate_customer_gateway::DisassociateCustomerGatewayError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::disassociate_link::DisassociateLinkError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::disassociate_link::DisassociateLinkError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::disassociate_link::DisassociateLinkError> for Error {
    fn from(err: crate::operation::disassociate_link::DisassociateLinkError) -> Self {
        match err {
            crate::operation::disassociate_link::DisassociateLinkError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::disassociate_link::DisassociateLinkError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::disassociate_link::DisassociateLinkError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::disassociate_link::DisassociateLinkError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::disassociate_link::DisassociateLinkError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::disassociate_link::DisassociateLinkError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::disassociate_link::DisassociateLinkError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::disassociate_transit_gateway_connect_peer::DisassociateTransitGatewayConnectPeerError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::disassociate_transit_gateway_connect_peer::DisassociateTransitGatewayConnectPeerError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::disassociate_transit_gateway_connect_peer::DisassociateTransitGatewayConnectPeerError> for Error {
    fn from(err: crate::operation::disassociate_transit_gateway_connect_peer::DisassociateTransitGatewayConnectPeerError) -> Self {
        match err {
            crate::operation::disassociate_transit_gateway_connect_peer::DisassociateTransitGatewayConnectPeerError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::disassociate_transit_gateway_connect_peer::DisassociateTransitGatewayConnectPeerError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::disassociate_transit_gateway_connect_peer::DisassociateTransitGatewayConnectPeerError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::disassociate_transit_gateway_connect_peer::DisassociateTransitGatewayConnectPeerError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::disassociate_transit_gateway_connect_peer::DisassociateTransitGatewayConnectPeerError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::disassociate_transit_gateway_connect_peer::DisassociateTransitGatewayConnectPeerError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::disassociate_transit_gateway_connect_peer::DisassociateTransitGatewayConnectPeerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::execute_core_network_change_set::ExecuteCoreNetworkChangeSetError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::execute_core_network_change_set::ExecuteCoreNetworkChangeSetError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::execute_core_network_change_set::ExecuteCoreNetworkChangeSetError>
    for Error
{
    fn from(
        err: crate::operation::execute_core_network_change_set::ExecuteCoreNetworkChangeSetError,
    ) -> Self {
        match err {
            crate::operation::execute_core_network_change_set::ExecuteCoreNetworkChangeSetError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::execute_core_network_change_set::ExecuteCoreNetworkChangeSetError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::execute_core_network_change_set::ExecuteCoreNetworkChangeSetError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::execute_core_network_change_set::ExecuteCoreNetworkChangeSetError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::execute_core_network_change_set::ExecuteCoreNetworkChangeSetError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::execute_core_network_change_set::ExecuteCoreNetworkChangeSetError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::execute_core_network_change_set::ExecuteCoreNetworkChangeSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_connect_attachment::GetConnectAttachmentError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_connect_attachment::GetConnectAttachmentError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_connect_attachment::GetConnectAttachmentError> for Error {
    fn from(err: crate::operation::get_connect_attachment::GetConnectAttachmentError) -> Self {
        match err {
            crate::operation::get_connect_attachment::GetConnectAttachmentError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_connect_attachment::GetConnectAttachmentError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_connect_attachment::GetConnectAttachmentError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_connect_attachment::GetConnectAttachmentError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_connect_attachment::GetConnectAttachmentError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_connect_attachment::GetConnectAttachmentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_connections::GetConnectionsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_connections::GetConnectionsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_connections::GetConnectionsError> for Error {
    fn from(err: crate::operation::get_connections::GetConnectionsError) -> Self {
        match err {
            crate::operation::get_connections::GetConnectionsError::AccessDeniedException(
                inner,
            ) => Error::AccessDeniedException(inner),
            crate::operation::get_connections::GetConnectionsError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::get_connections::GetConnectionsError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::get_connections::GetConnectionsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_connections::GetConnectionsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_connections::GetConnectionsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_connect_peer::GetConnectPeerError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_connect_peer::GetConnectPeerError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_connect_peer::GetConnectPeerError> for Error {
    fn from(err: crate::operation::get_connect_peer::GetConnectPeerError) -> Self {
        match err {
            crate::operation::get_connect_peer::GetConnectPeerError::AccessDeniedException(
                inner,
            ) => Error::AccessDeniedException(inner),
            crate::operation::get_connect_peer::GetConnectPeerError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::get_connect_peer::GetConnectPeerError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::get_connect_peer::GetConnectPeerError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_connect_peer::GetConnectPeerError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_connect_peer::GetConnectPeerError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_connect_peer_associations::GetConnectPeerAssociationsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_connect_peer_associations::GetConnectPeerAssociationsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_connect_peer_associations::GetConnectPeerAssociationsError>
    for Error
{
    fn from(
        err: crate::operation::get_connect_peer_associations::GetConnectPeerAssociationsError,
    ) -> Self {
        match err {
            crate::operation::get_connect_peer_associations::GetConnectPeerAssociationsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_connect_peer_associations::GetConnectPeerAssociationsError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::get_connect_peer_associations::GetConnectPeerAssociationsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_connect_peer_associations::GetConnectPeerAssociationsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_connect_peer_associations::GetConnectPeerAssociationsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_connect_peer_associations::GetConnectPeerAssociationsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_connect_peer_associations::GetConnectPeerAssociationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_core_network::GetCoreNetworkError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_core_network::GetCoreNetworkError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_core_network::GetCoreNetworkError> for Error {
    fn from(err: crate::operation::get_core_network::GetCoreNetworkError) -> Self {
        match err {
            crate::operation::get_core_network::GetCoreNetworkError::AccessDeniedException(
                inner,
            ) => Error::AccessDeniedException(inner),
            crate::operation::get_core_network::GetCoreNetworkError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::get_core_network::GetCoreNetworkError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::get_core_network::GetCoreNetworkError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_core_network::GetCoreNetworkError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_core_network::GetCoreNetworkError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_core_network_change_events::GetCoreNetworkChangeEventsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_core_network_change_events::GetCoreNetworkChangeEventsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_core_network_change_events::GetCoreNetworkChangeEventsError>
    for Error
{
    fn from(
        err: crate::operation::get_core_network_change_events::GetCoreNetworkChangeEventsError,
    ) -> Self {
        match err {
            crate::operation::get_core_network_change_events::GetCoreNetworkChangeEventsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_core_network_change_events::GetCoreNetworkChangeEventsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_core_network_change_events::GetCoreNetworkChangeEventsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_core_network_change_events::GetCoreNetworkChangeEventsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_core_network_change_events::GetCoreNetworkChangeEventsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_core_network_change_events::GetCoreNetworkChangeEventsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_core_network_change_set::GetCoreNetworkChangeSetError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_core_network_change_set::GetCoreNetworkChangeSetError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_core_network_change_set::GetCoreNetworkChangeSetError> for Error {
    fn from(
        err: crate::operation::get_core_network_change_set::GetCoreNetworkChangeSetError,
    ) -> Self {
        match err {
            crate::operation::get_core_network_change_set::GetCoreNetworkChangeSetError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_core_network_change_set::GetCoreNetworkChangeSetError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_core_network_change_set::GetCoreNetworkChangeSetError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_core_network_change_set::GetCoreNetworkChangeSetError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_core_network_change_set::GetCoreNetworkChangeSetError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_core_network_change_set::GetCoreNetworkChangeSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_core_network_policy::GetCoreNetworkPolicyError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_core_network_policy::GetCoreNetworkPolicyError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_core_network_policy::GetCoreNetworkPolicyError> for Error {
    fn from(err: crate::operation::get_core_network_policy::GetCoreNetworkPolicyError) -> Self {
        match err {
            crate::operation::get_core_network_policy::GetCoreNetworkPolicyError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_core_network_policy::GetCoreNetworkPolicyError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_core_network_policy::GetCoreNetworkPolicyError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_core_network_policy::GetCoreNetworkPolicyError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_core_network_policy::GetCoreNetworkPolicyError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_core_network_policy::GetCoreNetworkPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::get_customer_gateway_associations::GetCustomerGatewayAssociationsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::get_customer_gateway_associations::GetCustomerGatewayAssociationsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::get_customer_gateway_associations::GetCustomerGatewayAssociationsError>
    for Error
{
    fn from(
        err: crate::operation::get_customer_gateway_associations::GetCustomerGatewayAssociationsError,
    ) -> Self {
        match err {
            crate::operation::get_customer_gateway_associations::GetCustomerGatewayAssociationsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_customer_gateway_associations::GetCustomerGatewayAssociationsError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::get_customer_gateway_associations::GetCustomerGatewayAssociationsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_customer_gateway_associations::GetCustomerGatewayAssociationsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_customer_gateway_associations::GetCustomerGatewayAssociationsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_customer_gateway_associations::GetCustomerGatewayAssociationsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_customer_gateway_associations::GetCustomerGatewayAssociationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::get_devices::GetDevicesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::get_devices::GetDevicesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_devices::GetDevicesError> for Error {
    fn from(err: crate::operation::get_devices::GetDevicesError) -> Self {
        match err {
            crate::operation::get_devices::GetDevicesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_devices::GetDevicesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_devices::GetDevicesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_devices::GetDevicesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_devices::GetDevicesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_devices::GetDevicesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_link_associations::GetLinkAssociationsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_link_associations::GetLinkAssociationsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_link_associations::GetLinkAssociationsError> for Error {
    fn from(err: crate::operation::get_link_associations::GetLinkAssociationsError) -> Self {
        match err {
            crate::operation::get_link_associations::GetLinkAssociationsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_link_associations::GetLinkAssociationsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_link_associations::GetLinkAssociationsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_link_associations::GetLinkAssociationsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_link_associations::GetLinkAssociationsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_link_associations::GetLinkAssociationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::get_links::GetLinksError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::get_links::GetLinksError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_links::GetLinksError> for Error {
    fn from(err: crate::operation::get_links::GetLinksError) -> Self {
        match err {
            crate::operation::get_links::GetLinksError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_links::GetLinksError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_links::GetLinksError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_links::GetLinksError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_links::GetLinksError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_links::GetLinksError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_network_resource_counts::GetNetworkResourceCountsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_network_resource_counts::GetNetworkResourceCountsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_network_resource_counts::GetNetworkResourceCountsError> for Error {
    fn from(
        err: crate::operation::get_network_resource_counts::GetNetworkResourceCountsError,
    ) -> Self {
        match err {
            crate::operation::get_network_resource_counts::GetNetworkResourceCountsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_network_resource_counts::GetNetworkResourceCountsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_network_resource_counts::GetNetworkResourceCountsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_network_resource_counts::GetNetworkResourceCountsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_network_resource_counts::GetNetworkResourceCountsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::get_network_resource_relationships::GetNetworkResourceRelationshipsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::get_network_resource_relationships::GetNetworkResourceRelationshipsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl
    From<crate::operation::get_network_resource_relationships::GetNetworkResourceRelationshipsError>
    for Error
{
    fn from(
        err: crate::operation::get_network_resource_relationships::GetNetworkResourceRelationshipsError,
    ) -> Self {
        match err {
            crate::operation::get_network_resource_relationships::GetNetworkResourceRelationshipsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_network_resource_relationships::GetNetworkResourceRelationshipsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_network_resource_relationships::GetNetworkResourceRelationshipsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_network_resource_relationships::GetNetworkResourceRelationshipsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_network_resource_relationships::GetNetworkResourceRelationshipsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_network_resource_relationships::GetNetworkResourceRelationshipsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_network_resources::GetNetworkResourcesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_network_resources::GetNetworkResourcesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_network_resources::GetNetworkResourcesError> for Error {
    fn from(err: crate::operation::get_network_resources::GetNetworkResourcesError) -> Self {
        match err {
            crate::operation::get_network_resources::GetNetworkResourcesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_network_resources::GetNetworkResourcesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_network_resources::GetNetworkResourcesError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_network_resources::GetNetworkResourcesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_network_resources::GetNetworkResourcesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_network_resources::GetNetworkResourcesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_network_routes::GetNetworkRoutesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_network_routes::GetNetworkRoutesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_network_routes::GetNetworkRoutesError> for Error {
    fn from(err: crate::operation::get_network_routes::GetNetworkRoutesError) -> Self {
        match err {
            crate::operation::get_network_routes::GetNetworkRoutesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_network_routes::GetNetworkRoutesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_network_routes::GetNetworkRoutesError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_network_routes::GetNetworkRoutesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_network_routes::GetNetworkRoutesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_network_routes::GetNetworkRoutesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_network_telemetry::GetNetworkTelemetryError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_network_telemetry::GetNetworkTelemetryError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_network_telemetry::GetNetworkTelemetryError> for Error {
    fn from(err: crate::operation::get_network_telemetry::GetNetworkTelemetryError) -> Self {
        match err {
            crate::operation::get_network_telemetry::GetNetworkTelemetryError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_network_telemetry::GetNetworkTelemetryError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_network_telemetry::GetNetworkTelemetryError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_network_telemetry::GetNetworkTelemetryError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_network_telemetry::GetNetworkTelemetryError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_network_telemetry::GetNetworkTelemetryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_resource_policy::GetResourcePolicyError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_resource_policy::GetResourcePolicyError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_resource_policy::GetResourcePolicyError> for Error {
    fn from(err: crate::operation::get_resource_policy::GetResourcePolicyError) -> Self {
        match err {
            crate::operation::get_resource_policy::GetResourcePolicyError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_resource_policy::GetResourcePolicyError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_resource_policy::GetResourcePolicyError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_resource_policy::GetResourcePolicyError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_resource_policy::GetResourcePolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_route_analysis::GetRouteAnalysisError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_route_analysis::GetRouteAnalysisError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_route_analysis::GetRouteAnalysisError> for Error {
    fn from(err: crate::operation::get_route_analysis::GetRouteAnalysisError) -> Self {
        match err {
            crate::operation::get_route_analysis::GetRouteAnalysisError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_route_analysis::GetRouteAnalysisError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_route_analysis::GetRouteAnalysisError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_route_analysis::GetRouteAnalysisError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_route_analysis::GetRouteAnalysisError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_route_analysis::GetRouteAnalysisError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::get_sites::GetSitesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::get_sites::GetSitesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_sites::GetSitesError> for Error {
    fn from(err: crate::operation::get_sites::GetSitesError) -> Self {
        match err {
            crate::operation::get_sites::GetSitesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_sites::GetSitesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_sites::GetSitesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_sites::GetSitesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_sites::GetSitesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_sites::GetSitesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_site_to_site_vpn_attachment::GetSiteToSiteVpnAttachmentError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_site_to_site_vpn_attachment::GetSiteToSiteVpnAttachmentError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_site_to_site_vpn_attachment::GetSiteToSiteVpnAttachmentError>
    for Error
{
    fn from(
        err: crate::operation::get_site_to_site_vpn_attachment::GetSiteToSiteVpnAttachmentError,
    ) -> Self {
        match err {
            crate::operation::get_site_to_site_vpn_attachment::GetSiteToSiteVpnAttachmentError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_site_to_site_vpn_attachment::GetSiteToSiteVpnAttachmentError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_site_to_site_vpn_attachment::GetSiteToSiteVpnAttachmentError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_site_to_site_vpn_attachment::GetSiteToSiteVpnAttachmentError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_site_to_site_vpn_attachment::GetSiteToSiteVpnAttachmentError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_site_to_site_vpn_attachment::GetSiteToSiteVpnAttachmentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::get_transit_gateway_connect_peer_associations::GetTransitGatewayConnectPeerAssociationsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::get_transit_gateway_connect_peer_associations::GetTransitGatewayConnectPeerAssociationsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::get_transit_gateway_connect_peer_associations::GetTransitGatewayConnectPeerAssociationsError> for Error {
    fn from(err: crate::operation::get_transit_gateway_connect_peer_associations::GetTransitGatewayConnectPeerAssociationsError) -> Self {
        match err {
            crate::operation::get_transit_gateway_connect_peer_associations::GetTransitGatewayConnectPeerAssociationsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_transit_gateway_connect_peer_associations::GetTransitGatewayConnectPeerAssociationsError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::get_transit_gateway_connect_peer_associations::GetTransitGatewayConnectPeerAssociationsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_transit_gateway_connect_peer_associations::GetTransitGatewayConnectPeerAssociationsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_transit_gateway_connect_peer_associations::GetTransitGatewayConnectPeerAssociationsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_transit_gateway_connect_peer_associations::GetTransitGatewayConnectPeerAssociationsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_transit_gateway_connect_peer_associations::GetTransitGatewayConnectPeerAssociationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_transit_gateway_peering::GetTransitGatewayPeeringError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_transit_gateway_peering::GetTransitGatewayPeeringError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_transit_gateway_peering::GetTransitGatewayPeeringError> for Error {
    fn from(
        err: crate::operation::get_transit_gateway_peering::GetTransitGatewayPeeringError,
    ) -> Self {
        match err {
            crate::operation::get_transit_gateway_peering::GetTransitGatewayPeeringError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_transit_gateway_peering::GetTransitGatewayPeeringError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_transit_gateway_peering::GetTransitGatewayPeeringError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_transit_gateway_peering::GetTransitGatewayPeeringError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_transit_gateway_peering::GetTransitGatewayPeeringError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_transit_gateway_peering::GetTransitGatewayPeeringError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::get_transit_gateway_registrations::GetTransitGatewayRegistrationsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::get_transit_gateway_registrations::GetTransitGatewayRegistrationsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::get_transit_gateway_registrations::GetTransitGatewayRegistrationsError>
    for Error
{
    fn from(
        err: crate::operation::get_transit_gateway_registrations::GetTransitGatewayRegistrationsError,
    ) -> Self {
        match err {
            crate::operation::get_transit_gateway_registrations::GetTransitGatewayRegistrationsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_transit_gateway_registrations::GetTransitGatewayRegistrationsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_transit_gateway_registrations::GetTransitGatewayRegistrationsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_transit_gateway_registrations::GetTransitGatewayRegistrationsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_transit_gateway_registrations::GetTransitGatewayRegistrationsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_transit_gateway_registrations::GetTransitGatewayRegistrationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::get_transit_gateway_route_table_attachment::GetTransitGatewayRouteTableAttachmentError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::get_transit_gateway_route_table_attachment::GetTransitGatewayRouteTableAttachmentError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::get_transit_gateway_route_table_attachment::GetTransitGatewayRouteTableAttachmentError> for Error {
    fn from(err: crate::operation::get_transit_gateway_route_table_attachment::GetTransitGatewayRouteTableAttachmentError) -> Self {
        match err {
            crate::operation::get_transit_gateway_route_table_attachment::GetTransitGatewayRouteTableAttachmentError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_transit_gateway_route_table_attachment::GetTransitGatewayRouteTableAttachmentError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_transit_gateway_route_table_attachment::GetTransitGatewayRouteTableAttachmentError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_transit_gateway_route_table_attachment::GetTransitGatewayRouteTableAttachmentError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_transit_gateway_route_table_attachment::GetTransitGatewayRouteTableAttachmentError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_transit_gateway_route_table_attachment::GetTransitGatewayRouteTableAttachmentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_vpc_attachment::GetVpcAttachmentError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_vpc_attachment::GetVpcAttachmentError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_vpc_attachment::GetVpcAttachmentError> for Error {
    fn from(err: crate::operation::get_vpc_attachment::GetVpcAttachmentError) -> Self {
        match err {
            crate::operation::get_vpc_attachment::GetVpcAttachmentError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_vpc_attachment::GetVpcAttachmentError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_vpc_attachment::GetVpcAttachmentError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_vpc_attachment::GetVpcAttachmentError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_vpc_attachment::GetVpcAttachmentError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_vpc_attachment::GetVpcAttachmentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_attachments::ListAttachmentsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_attachments::ListAttachmentsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_attachments::ListAttachmentsError> for Error {
    fn from(err: crate::operation::list_attachments::ListAttachmentsError) -> Self {
        match err {
            crate::operation::list_attachments::ListAttachmentsError::AccessDeniedException(
                inner,
            ) => Error::AccessDeniedException(inner),
            crate::operation::list_attachments::ListAttachmentsError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::list_attachments::ListAttachmentsError::ThrottlingException(
                inner,
            ) => Error::ThrottlingException(inner),
            crate::operation::list_attachments::ListAttachmentsError::ValidationException(
                inner,
            ) => Error::ValidationException(inner),
            crate::operation::list_attachments::ListAttachmentsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_connect_peers::ListConnectPeersError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_connect_peers::ListConnectPeersError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_connect_peers::ListConnectPeersError> for Error {
    fn from(err: crate::operation::list_connect_peers::ListConnectPeersError) -> Self {
        match err {
            crate::operation::list_connect_peers::ListConnectPeersError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_connect_peers::ListConnectPeersError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_connect_peers::ListConnectPeersError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_connect_peers::ListConnectPeersError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_connect_peers::ListConnectPeersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_core_network_policy_versions::ListCoreNetworkPolicyVersionsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_core_network_policy_versions::ListCoreNetworkPolicyVersionsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_core_network_policy_versions::ListCoreNetworkPolicyVersionsError>
    for Error
{
    fn from(
        err: crate::operation::list_core_network_policy_versions::ListCoreNetworkPolicyVersionsError,
    ) -> Self {
        match err {
            crate::operation::list_core_network_policy_versions::ListCoreNetworkPolicyVersionsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_core_network_policy_versions::ListCoreNetworkPolicyVersionsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_core_network_policy_versions::ListCoreNetworkPolicyVersionsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_core_network_policy_versions::ListCoreNetworkPolicyVersionsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_core_network_policy_versions::ListCoreNetworkPolicyVersionsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_core_network_policy_versions::ListCoreNetworkPolicyVersionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_core_networks::ListCoreNetworksError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_core_networks::ListCoreNetworksError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_core_networks::ListCoreNetworksError> for Error {
    fn from(err: crate::operation::list_core_networks::ListCoreNetworksError) -> Self {
        match err {
            crate::operation::list_core_networks::ListCoreNetworksError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_core_networks::ListCoreNetworksError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_core_networks::ListCoreNetworksError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_core_networks::ListCoreNetworksError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_core_networks::ListCoreNetworksError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::list_organization_service_access_status::ListOrganizationServiceAccessStatusError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::list_organization_service_access_status::ListOrganizationServiceAccessStatusError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::list_organization_service_access_status::ListOrganizationServiceAccessStatusError> for Error {
    fn from(err: crate::operation::list_organization_service_access_status::ListOrganizationServiceAccessStatusError) -> Self {
        match err {
            crate::operation::list_organization_service_access_status::ListOrganizationServiceAccessStatusError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::list_peerings::ListPeeringsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_peerings::ListPeeringsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_peerings::ListPeeringsError> for Error {
    fn from(err: crate::operation::list_peerings::ListPeeringsError) -> Self {
        match err {
            crate::operation::list_peerings::ListPeeringsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_peerings::ListPeeringsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_peerings::ListPeeringsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_peerings::ListPeeringsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_peerings::ListPeeringsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_tags_for_resource::ListTagsForResourceError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_tags_for_resource::ListTagsForResourceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_tags_for_resource::ListTagsForResourceError> for Error {
    fn from(err: crate::operation::list_tags_for_resource::ListTagsForResourceError) -> Self {
        match err {
            crate::operation::list_tags_for_resource::ListTagsForResourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::put_core_network_policy::PutCoreNetworkPolicyError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::put_core_network_policy::PutCoreNetworkPolicyError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::put_core_network_policy::PutCoreNetworkPolicyError> for Error {
    fn from(err: crate::operation::put_core_network_policy::PutCoreNetworkPolicyError) -> Self {
        match err {
            crate::operation::put_core_network_policy::PutCoreNetworkPolicyError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::put_core_network_policy::PutCoreNetworkPolicyError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::put_core_network_policy::PutCoreNetworkPolicyError::CoreNetworkPolicyException(inner) => Error::CoreNetworkPolicyException(inner),
            crate::operation::put_core_network_policy::PutCoreNetworkPolicyError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::put_core_network_policy::PutCoreNetworkPolicyError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::put_core_network_policy::PutCoreNetworkPolicyError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::put_core_network_policy::PutCoreNetworkPolicyError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::put_core_network_policy::PutCoreNetworkPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::put_resource_policy::PutResourcePolicyError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::put_resource_policy::PutResourcePolicyError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::put_resource_policy::PutResourcePolicyError> for Error {
    fn from(err: crate::operation::put_resource_policy::PutResourcePolicyError) -> Self {
        match err {
            crate::operation::put_resource_policy::PutResourcePolicyError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::put_resource_policy::PutResourcePolicyError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::put_resource_policy::PutResourcePolicyError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::put_resource_policy::PutResourcePolicyError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::put_resource_policy::PutResourcePolicyError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::put_resource_policy::PutResourcePolicyError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::put_resource_policy::PutResourcePolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::register_transit_gateway::RegisterTransitGatewayError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::register_transit_gateway::RegisterTransitGatewayError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::register_transit_gateway::RegisterTransitGatewayError> for Error {
    fn from(err: crate::operation::register_transit_gateway::RegisterTransitGatewayError) -> Self {
        match err {
            crate::operation::register_transit_gateway::RegisterTransitGatewayError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::register_transit_gateway::RegisterTransitGatewayError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::register_transit_gateway::RegisterTransitGatewayError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::register_transit_gateway::RegisterTransitGatewayError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::register_transit_gateway::RegisterTransitGatewayError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::register_transit_gateway::RegisterTransitGatewayError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::register_transit_gateway::RegisterTransitGatewayError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::reject_attachment::RejectAttachmentError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::reject_attachment::RejectAttachmentError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::reject_attachment::RejectAttachmentError> for Error {
    fn from(err: crate::operation::reject_attachment::RejectAttachmentError) -> Self {
        match err {
            crate::operation::reject_attachment::RejectAttachmentError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::reject_attachment::RejectAttachmentError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::reject_attachment::RejectAttachmentError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::reject_attachment::RejectAttachmentError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::reject_attachment::RejectAttachmentError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::reject_attachment::RejectAttachmentError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::reject_attachment::RejectAttachmentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::restore_core_network_policy_version::RestoreCoreNetworkPolicyVersionError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::restore_core_network_policy_version::RestoreCoreNetworkPolicyVersionError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl
    From<
        crate::operation::restore_core_network_policy_version::RestoreCoreNetworkPolicyVersionError,
    > for Error
{
    fn from(
        err: crate::operation::restore_core_network_policy_version::RestoreCoreNetworkPolicyVersionError,
    ) -> Self {
        match err {
            crate::operation::restore_core_network_policy_version::RestoreCoreNetworkPolicyVersionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::restore_core_network_policy_version::RestoreCoreNetworkPolicyVersionError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::restore_core_network_policy_version::RestoreCoreNetworkPolicyVersionError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::restore_core_network_policy_version::RestoreCoreNetworkPolicyVersionError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::restore_core_network_policy_version::RestoreCoreNetworkPolicyVersionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::restore_core_network_policy_version::RestoreCoreNetworkPolicyVersionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::restore_core_network_policy_version::RestoreCoreNetworkPolicyVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::start_organization_service_access_update::StartOrganizationServiceAccessUpdateError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::start_organization_service_access_update::StartOrganizationServiceAccessUpdateError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::start_organization_service_access_update::StartOrganizationServiceAccessUpdateError> for Error {
    fn from(err: crate::operation::start_organization_service_access_update::StartOrganizationServiceAccessUpdateError) -> Self {
        match err {
            crate::operation::start_organization_service_access_update::StartOrganizationServiceAccessUpdateError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::start_organization_service_access_update::StartOrganizationServiceAccessUpdateError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::start_organization_service_access_update::StartOrganizationServiceAccessUpdateError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::start_organization_service_access_update::StartOrganizationServiceAccessUpdateError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::start_organization_service_access_update::StartOrganizationServiceAccessUpdateError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::start_organization_service_access_update::StartOrganizationServiceAccessUpdateError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::start_organization_service_access_update::StartOrganizationServiceAccessUpdateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::start_route_analysis::StartRouteAnalysisError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::start_route_analysis::StartRouteAnalysisError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::start_route_analysis::StartRouteAnalysisError> for Error {
    fn from(err: crate::operation::start_route_analysis::StartRouteAnalysisError) -> Self {
        match err {
            crate::operation::start_route_analysis::StartRouteAnalysisError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::start_route_analysis::StartRouteAnalysisError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::start_route_analysis::StartRouteAnalysisError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::start_route_analysis::StartRouteAnalysisError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::start_route_analysis::StartRouteAnalysisError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::start_route_analysis::StartRouteAnalysisError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::start_route_analysis::StartRouteAnalysisError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::tag_resource::TagResourceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::tag_resource::TagResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::tag_resource::TagResourceError> for Error {
    fn from(err: crate::operation::tag_resource::TagResourceError) -> Self {
        match err {
            crate::operation::tag_resource::TagResourceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::tag_resource::TagResourceError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::tag_resource::TagResourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::tag_resource::TagResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::tag_resource::TagResourceError::ServiceQuotaExceededException(
                inner,
            ) => Error::ServiceQuotaExceededException(inner),
            crate::operation::tag_resource::TagResourceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::tag_resource::TagResourceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::tag_resource::TagResourceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::untag_resource::UntagResourceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::untag_resource::UntagResourceError> for Error {
    fn from(err: crate::operation::untag_resource::UntagResourceError) -> Self {
        match err {
            crate::operation::untag_resource::UntagResourceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::untag_resource::UntagResourceError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::untag_resource::UntagResourceError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::untag_resource::UntagResourceError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::untag_resource::UntagResourceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::untag_resource::UntagResourceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::untag_resource::UntagResourceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_connection::UpdateConnectionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_connection::UpdateConnectionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_connection::UpdateConnectionError> for Error {
    fn from(err: crate::operation::update_connection::UpdateConnectionError) -> Self {
        match err {
            crate::operation::update_connection::UpdateConnectionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_connection::UpdateConnectionError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_connection::UpdateConnectionError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_connection::UpdateConnectionError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_connection::UpdateConnectionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_connection::UpdateConnectionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_connection::UpdateConnectionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_core_network::UpdateCoreNetworkError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_core_network::UpdateCoreNetworkError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_core_network::UpdateCoreNetworkError> for Error {
    fn from(err: crate::operation::update_core_network::UpdateCoreNetworkError) -> Self {
        match err {
            crate::operation::update_core_network::UpdateCoreNetworkError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_core_network::UpdateCoreNetworkError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_core_network::UpdateCoreNetworkError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_core_network::UpdateCoreNetworkError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_core_network::UpdateCoreNetworkError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_core_network::UpdateCoreNetworkError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_core_network::UpdateCoreNetworkError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::update_device::UpdateDeviceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_device::UpdateDeviceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_device::UpdateDeviceError> for Error {
    fn from(err: crate::operation::update_device::UpdateDeviceError) -> Self {
        match err {
            crate::operation::update_device::UpdateDeviceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_device::UpdateDeviceError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::update_device::UpdateDeviceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_device::UpdateDeviceError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::update_device::UpdateDeviceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::update_device::UpdateDeviceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::update_device::UpdateDeviceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_global_network::UpdateGlobalNetworkError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_global_network::UpdateGlobalNetworkError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_global_network::UpdateGlobalNetworkError> for Error {
    fn from(err: crate::operation::update_global_network::UpdateGlobalNetworkError) -> Self {
        match err {
            crate::operation::update_global_network::UpdateGlobalNetworkError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_global_network::UpdateGlobalNetworkError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_global_network::UpdateGlobalNetworkError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_global_network::UpdateGlobalNetworkError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_global_network::UpdateGlobalNetworkError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_global_network::UpdateGlobalNetworkError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_global_network::UpdateGlobalNetworkError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::update_link::UpdateLinkError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::update_link::UpdateLinkError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_link::UpdateLinkError> for Error {
    fn from(err: crate::operation::update_link::UpdateLinkError) -> Self {
        match err {
            crate::operation::update_link::UpdateLinkError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_link::UpdateLinkError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::update_link::UpdateLinkError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_link::UpdateLinkError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_link::UpdateLinkError::ServiceQuotaExceededException(
                inner,
            ) => Error::ServiceQuotaExceededException(inner),
            crate::operation::update_link::UpdateLinkError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::update_link::UpdateLinkError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::update_link::UpdateLinkError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_network_resource_metadata::UpdateNetworkResourceMetadataError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_network_resource_metadata::UpdateNetworkResourceMetadataError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_network_resource_metadata::UpdateNetworkResourceMetadataError>
    for Error
{
    fn from(
        err: crate::operation::update_network_resource_metadata::UpdateNetworkResourceMetadataError,
    ) -> Self {
        match err {
            crate::operation::update_network_resource_metadata::UpdateNetworkResourceMetadataError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_network_resource_metadata::UpdateNetworkResourceMetadataError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_network_resource_metadata::UpdateNetworkResourceMetadataError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_network_resource_metadata::UpdateNetworkResourceMetadataError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_network_resource_metadata::UpdateNetworkResourceMetadataError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_network_resource_metadata::UpdateNetworkResourceMetadataError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_network_resource_metadata::UpdateNetworkResourceMetadataError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::update_site::UpdateSiteError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::update_site::UpdateSiteError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_site::UpdateSiteError> for Error {
    fn from(err: crate::operation::update_site::UpdateSiteError) -> Self {
        match err {
            crate::operation::update_site::UpdateSiteError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_site::UpdateSiteError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::update_site::UpdateSiteError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_site::UpdateSiteError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_site::UpdateSiteError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::update_site::UpdateSiteError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::update_site::UpdateSiteError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_vpc_attachment::UpdateVpcAttachmentError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_vpc_attachment::UpdateVpcAttachmentError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_vpc_attachment::UpdateVpcAttachmentError> for Error {
    fn from(err: crate::operation::update_vpc_attachment::UpdateVpcAttachmentError) -> Self {
        match err {
            crate::operation::update_vpc_attachment::UpdateVpcAttachmentError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_vpc_attachment::UpdateVpcAttachmentError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_vpc_attachment::UpdateVpcAttachmentError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_vpc_attachment::UpdateVpcAttachmentError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_vpc_attachment::UpdateVpcAttachmentError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_vpc_attachment::UpdateVpcAttachmentError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_vpc_attachment::UpdateVpcAttachmentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::CoreNetworkPolicyException(e) => e.request_id(),
            Self::InternalServerException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ServiceQuotaExceededException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
