// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListPartnerEventSourceAccountsInput {
    /// <p>The name of the partner event source to display account information about.</p>
    pub event_source_name: ::std::option::Option<::std::string::String>,
    /// <p>The token returned by a previous call to this operation. Specifying this retrieves the next set of results.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>Specifying this limits the number of results returned by this operation. The operation also returns a NextToken which you can use in a subsequent operation to retrieve the next set of results.</p>
    pub limit: ::std::option::Option<i32>,
}
impl ListPartnerEventSourceAccountsInput {
    /// <p>The name of the partner event source to display account information about.</p>
    pub fn event_source_name(&self) -> ::std::option::Option<&str> {
        self.event_source_name.as_deref()
    }
    /// <p>The token returned by a previous call to this operation. Specifying this retrieves the next set of results.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>Specifying this limits the number of results returned by this operation. The operation also returns a NextToken which you can use in a subsequent operation to retrieve the next set of results.</p>
    pub fn limit(&self) -> ::std::option::Option<i32> {
        self.limit
    }
}
impl ListPartnerEventSourceAccountsInput {
    /// Creates a new builder-style object to manufacture [`ListPartnerEventSourceAccountsInput`](crate::operation::list_partner_event_source_accounts::ListPartnerEventSourceAccountsInput).
    pub fn builder() -> crate::operation::list_partner_event_source_accounts::builders::ListPartnerEventSourceAccountsInputBuilder {
        crate::operation::list_partner_event_source_accounts::builders::ListPartnerEventSourceAccountsInputBuilder::default()
    }
}

/// A builder for [`ListPartnerEventSourceAccountsInput`](crate::operation::list_partner_event_source_accounts::ListPartnerEventSourceAccountsInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListPartnerEventSourceAccountsInputBuilder {
    pub(crate) event_source_name: ::std::option::Option<::std::string::String>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) limit: ::std::option::Option<i32>,
}
impl ListPartnerEventSourceAccountsInputBuilder {
    /// <p>The name of the partner event source to display account information about.</p>
    /// This field is required.
    pub fn event_source_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.event_source_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the partner event source to display account information about.</p>
    pub fn set_event_source_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.event_source_name = input;
        self
    }
    /// <p>The name of the partner event source to display account information about.</p>
    pub fn get_event_source_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.event_source_name
    }
    /// <p>The token returned by a previous call to this operation. Specifying this retrieves the next set of results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The token returned by a previous call to this operation. Specifying this retrieves the next set of results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The token returned by a previous call to this operation. Specifying this retrieves the next set of results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>Specifying this limits the number of results returned by this operation. The operation also returns a NextToken which you can use in a subsequent operation to retrieve the next set of results.</p>
    pub fn limit(mut self, input: i32) -> Self {
        self.limit = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifying this limits the number of results returned by this operation. The operation also returns a NextToken which you can use in a subsequent operation to retrieve the next set of results.</p>
    pub fn set_limit(mut self, input: ::std::option::Option<i32>) -> Self {
        self.limit = input;
        self
    }
    /// <p>Specifying this limits the number of results returned by this operation. The operation also returns a NextToken which you can use in a subsequent operation to retrieve the next set of results.</p>
    pub fn get_limit(&self) -> &::std::option::Option<i32> {
        &self.limit
    }
    /// Consumes the builder and constructs a [`ListPartnerEventSourceAccountsInput`](crate::operation::list_partner_event_source_accounts::ListPartnerEventSourceAccountsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_partner_event_source_accounts::ListPartnerEventSourceAccountsInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::list_partner_event_source_accounts::ListPartnerEventSourceAccountsInput {
                event_source_name: self.event_source_name,
                next_token: self.next_token,
                limit: self.limit,
            },
        )
    }
}
