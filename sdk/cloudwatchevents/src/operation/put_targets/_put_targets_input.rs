// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PutTargetsInput {
    /// <p>The name of the rule.</p>
    #[doc(hidden)]
    pub rule: std::option::Option<std::string::String>,
    /// <p>The name or ARN of the event bus associated with the rule. If you omit this, the default event bus is used.</p>
    #[doc(hidden)]
    pub event_bus_name: std::option::Option<std::string::String>,
    /// <p>The targets to update or add to the rule.</p>
    #[doc(hidden)]
    pub targets: std::option::Option<std::vec::Vec<crate::types::Target>>,
}
impl PutTargetsInput {
    /// <p>The name of the rule.</p>
    pub fn rule(&self) -> std::option::Option<&str> {
        self.rule.as_deref()
    }
    /// <p>The name or ARN of the event bus associated with the rule. If you omit this, the default event bus is used.</p>
    pub fn event_bus_name(&self) -> std::option::Option<&str> {
        self.event_bus_name.as_deref()
    }
    /// <p>The targets to update or add to the rule.</p>
    pub fn targets(&self) -> std::option::Option<&[crate::types::Target]> {
        self.targets.as_deref()
    }
}
impl PutTargetsInput {
    /// Creates a new builder-style object to manufacture [`PutTargetsInput`](crate::operation::put_targets::PutTargetsInput).
    pub fn builder() -> crate::operation::put_targets::builders::PutTargetsInputBuilder {
        crate::operation::put_targets::builders::PutTargetsInputBuilder::default()
    }
}

/// A builder for [`PutTargetsInput`](crate::operation::put_targets::PutTargetsInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PutTargetsInputBuilder {
    pub(crate) rule: std::option::Option<std::string::String>,
    pub(crate) event_bus_name: std::option::Option<std::string::String>,
    pub(crate) targets: std::option::Option<std::vec::Vec<crate::types::Target>>,
}
impl PutTargetsInputBuilder {
    /// <p>The name of the rule.</p>
    pub fn rule(mut self, input: impl Into<std::string::String>) -> Self {
        self.rule = Some(input.into());
        self
    }
    /// <p>The name of the rule.</p>
    pub fn set_rule(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.rule = input;
        self
    }
    /// <p>The name or ARN of the event bus associated with the rule. If you omit this, the default event bus is used.</p>
    pub fn event_bus_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.event_bus_name = Some(input.into());
        self
    }
    /// <p>The name or ARN of the event bus associated with the rule. If you omit this, the default event bus is used.</p>
    pub fn set_event_bus_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.event_bus_name = input;
        self
    }
    /// Appends an item to `targets`.
    ///
    /// To override the contents of this collection use [`set_targets`](Self::set_targets).
    ///
    /// <p>The targets to update or add to the rule.</p>
    pub fn targets(mut self, input: crate::types::Target) -> Self {
        let mut v = self.targets.unwrap_or_default();
        v.push(input);
        self.targets = Some(v);
        self
    }
    /// <p>The targets to update or add to the rule.</p>
    pub fn set_targets(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Target>>,
    ) -> Self {
        self.targets = input;
        self
    }
    /// Consumes the builder and constructs a [`PutTargetsInput`](crate::operation::put_targets::PutTargetsInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::put_targets::PutTargetsInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::put_targets::PutTargetsInput {
            rule: self.rule,
            event_bus_name: self.event_bus_name,
            targets: self.targets,
        })
    }
}
