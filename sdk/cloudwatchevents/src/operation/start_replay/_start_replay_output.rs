// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StartReplayOutput {
    /// <p>The ARN of the replay.</p>
    #[doc(hidden)]
    pub replay_arn: std::option::Option<std::string::String>,
    /// <p>The state of the replay.</p>
    #[doc(hidden)]
    pub state: std::option::Option<crate::types::ReplayState>,
    /// <p>The reason that the replay is in the state.</p>
    #[doc(hidden)]
    pub state_reason: std::option::Option<std::string::String>,
    /// <p>The time at which the replay started.</p>
    #[doc(hidden)]
    pub replay_start_time: std::option::Option<aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl StartReplayOutput {
    /// <p>The ARN of the replay.</p>
    pub fn replay_arn(&self) -> std::option::Option<&str> {
        self.replay_arn.as_deref()
    }
    /// <p>The state of the replay.</p>
    pub fn state(&self) -> std::option::Option<&crate::types::ReplayState> {
        self.state.as_ref()
    }
    /// <p>The reason that the replay is in the state.</p>
    pub fn state_reason(&self) -> std::option::Option<&str> {
        self.state_reason.as_deref()
    }
    /// <p>The time at which the replay started.</p>
    pub fn replay_start_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.replay_start_time.as_ref()
    }
}
impl aws_http::request_id::RequestId for StartReplayOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl StartReplayOutput {
    /// Creates a new builder-style object to manufacture [`StartReplayOutput`](crate::operation::start_replay::StartReplayOutput).
    pub fn builder() -> crate::operation::start_replay::builders::StartReplayOutputBuilder {
        crate::operation::start_replay::builders::StartReplayOutputBuilder::default()
    }
}

/// A builder for [`StartReplayOutput`](crate::operation::start_replay::StartReplayOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct StartReplayOutputBuilder {
    pub(crate) replay_arn: std::option::Option<std::string::String>,
    pub(crate) state: std::option::Option<crate::types::ReplayState>,
    pub(crate) state_reason: std::option::Option<std::string::String>,
    pub(crate) replay_start_time: std::option::Option<aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl StartReplayOutputBuilder {
    /// <p>The ARN of the replay.</p>
    pub fn replay_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.replay_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the replay.</p>
    pub fn set_replay_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.replay_arn = input;
        self
    }
    /// <p>The state of the replay.</p>
    pub fn state(mut self, input: crate::types::ReplayState) -> Self {
        self.state = Some(input);
        self
    }
    /// <p>The state of the replay.</p>
    pub fn set_state(mut self, input: std::option::Option<crate::types::ReplayState>) -> Self {
        self.state = input;
        self
    }
    /// <p>The reason that the replay is in the state.</p>
    pub fn state_reason(mut self, input: impl Into<std::string::String>) -> Self {
        self.state_reason = Some(input.into());
        self
    }
    /// <p>The reason that the replay is in the state.</p>
    pub fn set_state_reason(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.state_reason = input;
        self
    }
    /// <p>The time at which the replay started.</p>
    pub fn replay_start_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.replay_start_time = Some(input);
        self
    }
    /// <p>The time at which the replay started.</p>
    pub fn set_replay_start_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.replay_start_time = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`StartReplayOutput`](crate::operation::start_replay::StartReplayOutput).
    pub fn build(self) -> crate::operation::start_replay::StartReplayOutput {
        crate::operation::start_replay::StartReplayOutput {
            replay_arn: self.replay_arn,
            state: self.state,
            state_reason: self.state_reason,
            replay_start_time: self.replay_start_time,
            _request_id: self._request_id,
        }
    }
}
