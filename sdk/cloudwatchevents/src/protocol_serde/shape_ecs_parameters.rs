// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_ecs_parameters(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::EcsParameters,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    {
        object.key("TaskDefinitionArn").string(input.task_definition_arn.as_str());
    }
    if let Some(var_1) = &input.task_count {
        object.key("TaskCount").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_1).into()),
        );
    }
    if let Some(var_2) = &input.launch_type {
        object.key("LaunchType").string(var_2.as_str());
    }
    if let Some(var_3) = &input.network_configuration {
        #[allow(unused_mut)]
        let mut object_4 = object.key("NetworkConfiguration").start_object();
        crate::protocol_serde::shape_network_configuration::ser_network_configuration(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.platform_version {
        object.key("PlatformVersion").string(var_5.as_str());
    }
    if let Some(var_6) = &input.group {
        object.key("Group").string(var_6.as_str());
    }
    if let Some(var_7) = &input.capacity_provider_strategy {
        let mut array_8 = object.key("CapacityProviderStrategy").start_array();
        for item_9 in var_7 {
            {
                #[allow(unused_mut)]
                let mut object_10 = array_8.value().start_object();
                crate::protocol_serde::shape_capacity_provider_strategy_item::ser_capacity_provider_strategy_item(&mut object_10, item_9)?;
                object_10.finish();
            }
        }
        array_8.finish();
    }
    if input.enable_ecs_managed_tags {
        object.key("EnableECSManagedTags").boolean(input.enable_ecs_managed_tags);
    }
    if input.enable_execute_command {
        object.key("EnableExecuteCommand").boolean(input.enable_execute_command);
    }
    if let Some(var_11) = &input.placement_constraints {
        let mut array_12 = object.key("PlacementConstraints").start_array();
        for item_13 in var_11 {
            {
                #[allow(unused_mut)]
                let mut object_14 = array_12.value().start_object();
                crate::protocol_serde::shape_placement_constraint::ser_placement_constraint(&mut object_14, item_13)?;
                object_14.finish();
            }
        }
        array_12.finish();
    }
    if let Some(var_15) = &input.placement_strategy {
        let mut array_16 = object.key("PlacementStrategy").start_array();
        for item_17 in var_15 {
            {
                #[allow(unused_mut)]
                let mut object_18 = array_16.value().start_object();
                crate::protocol_serde::shape_placement_strategy::ser_placement_strategy(&mut object_18, item_17)?;
                object_18.finish();
            }
        }
        array_16.finish();
    }
    if let Some(var_19) = &input.propagate_tags {
        object.key("PropagateTags").string(var_19.as_str());
    }
    if let Some(var_20) = &input.reference_id {
        object.key("ReferenceId").string(var_20.as_str());
    }
    if let Some(var_21) = &input.tags {
        let mut array_22 = object.key("Tags").start_array();
        for item_23 in var_21 {
            {
                #[allow(unused_mut)]
                let mut object_24 = array_22.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_24, item_23)?;
                object_24.finish();
            }
        }
        array_22.finish();
    }
    Ok(())
}

pub(crate) fn de_ecs_parameters<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::EcsParameters>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::EcsParametersBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "TaskDefinitionArn" => {
                            builder = builder.set_task_definition_arn(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "TaskCount" => {
                            builder = builder.set_task_count(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "LaunchType" => {
                            builder = builder.set_launch_type(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::LaunchType::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "NetworkConfiguration" => {
                            builder = builder
                                .set_network_configuration(crate::protocol_serde::shape_network_configuration::de_network_configuration(tokens)?);
                        }
                        "PlatformVersion" => {
                            builder = builder.set_platform_version(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "Group" => {
                            builder = builder.set_group(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "CapacityProviderStrategy" => {
                            builder = builder.set_capacity_provider_strategy(
                                crate::protocol_serde::shape_capacity_provider_strategy::de_capacity_provider_strategy(tokens)?,
                            );
                        }
                        "EnableECSManagedTags" => {
                            builder = builder.set_enable_ecs_managed_tags(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "EnableExecuteCommand" => {
                            builder = builder.set_enable_execute_command(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "PlacementConstraints" => {
                            builder = builder
                                .set_placement_constraints(crate::protocol_serde::shape_placement_constraints::de_placement_constraints(tokens)?);
                        }
                        "PlacementStrategy" => {
                            builder =
                                builder.set_placement_strategy(crate::protocol_serde::shape_placement_strategies::de_placement_strategies(tokens)?);
                        }
                        "PropagateTags" => {
                            builder = builder.set_propagate_tags(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::PropagateTags::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "ReferenceId" => {
                            builder = builder.set_reference_id(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "Tags" => {
                            builder = builder.set_tags(crate::protocol_serde::shape_tag_list::de_tag_list(tokens)?);
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(crate::serde_util::ecs_parameters_correct_errors(builder).build().map_err(
                |err| ::aws_smithy_json::deserialize::error::DeserializeError::custom_source("Response was invalid", err),
            )?))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
