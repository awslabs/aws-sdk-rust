// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`StartReplay`](crate::operation::start_replay::builders::StartReplayFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`replay_name(impl Into<String>)`](crate::operation::start_replay::builders::StartReplayFluentBuilder::replay_name) / [`set_replay_name(Option<String>)`](crate::operation::start_replay::builders::StartReplayFluentBuilder::set_replay_name):<br>required: **true**<br><p>The name of the replay to start.</p><br>
    ///   - [`description(impl Into<String>)`](crate::operation::start_replay::builders::StartReplayFluentBuilder::description) / [`set_description(Option<String>)`](crate::operation::start_replay::builders::StartReplayFluentBuilder::set_description):<br>required: **false**<br><p>A description for the replay to start.</p><br>
    ///   - [`event_source_arn(impl Into<String>)`](crate::operation::start_replay::builders::StartReplayFluentBuilder::event_source_arn) / [`set_event_source_arn(Option<String>)`](crate::operation::start_replay::builders::StartReplayFluentBuilder::set_event_source_arn):<br>required: **true**<br><p>The ARN of the archive to replay events from.</p><br>
    ///   - [`event_start_time(DateTime)`](crate::operation::start_replay::builders::StartReplayFluentBuilder::event_start_time) / [`set_event_start_time(Option<DateTime>)`](crate::operation::start_replay::builders::StartReplayFluentBuilder::set_event_start_time):<br>required: **true**<br><p>A time stamp for the time to start replaying events. Only events that occurred between the <code>EventStartTime</code> and <code>EventEndTime</code> are replayed.</p><br>
    ///   - [`event_end_time(DateTime)`](crate::operation::start_replay::builders::StartReplayFluentBuilder::event_end_time) / [`set_event_end_time(Option<DateTime>)`](crate::operation::start_replay::builders::StartReplayFluentBuilder::set_event_end_time):<br>required: **true**<br><p>A time stamp for the time to stop replaying events. Only events that occurred between the <code>EventStartTime</code> and <code>EventEndTime</code> are replayed.</p><br>
    ///   - [`destination(ReplayDestination)`](crate::operation::start_replay::builders::StartReplayFluentBuilder::destination) / [`set_destination(Option<ReplayDestination>)`](crate::operation::start_replay::builders::StartReplayFluentBuilder::set_destination):<br>required: **true**<br><p>A <code>ReplayDestination</code> object that includes details about the destination for the replay.</p><br>
    /// - On success, responds with [`StartReplayOutput`](crate::operation::start_replay::StartReplayOutput) with field(s):
    ///   - [`replay_arn(Option<String>)`](crate::operation::start_replay::StartReplayOutput::replay_arn): <p>The ARN of the replay.</p>
    ///   - [`state(Option<ReplayState>)`](crate::operation::start_replay::StartReplayOutput::state): <p>The state of the replay.</p>
    ///   - [`state_reason(Option<String>)`](crate::operation::start_replay::StartReplayOutput::state_reason): <p>The reason that the replay is in the state.</p>
    ///   - [`replay_start_time(Option<DateTime>)`](crate::operation::start_replay::StartReplayOutput::replay_start_time): <p>The time at which the replay started.</p>
    /// - On failure, responds with [`SdkError<StartReplayError>`](crate::operation::start_replay::StartReplayError)
    pub fn start_replay(&self) -> crate::operation::start_replay::builders::StartReplayFluentBuilder {
        crate::operation::start_replay::builders::StartReplayFluentBuilder::new(self.handle.clone())
    }
}
