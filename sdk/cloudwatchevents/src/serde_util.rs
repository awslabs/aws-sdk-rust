// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn replay_destination_correct_errors(
    mut builder: crate::types::builders::ReplayDestinationBuilder,
) -> crate::types::builders::ReplayDestinationBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    builder
}

pub(crate) fn tag_correct_errors(mut builder: crate::types::builders::TagBuilder) -> crate::types::builders::TagBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn target_correct_errors(mut builder: crate::types::builders::TargetBuilder) -> crate::types::builders::TargetBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    builder
}

pub(crate) fn batch_parameters_correct_errors(
    mut builder: crate::types::builders::BatchParametersBuilder,
) -> crate::types::builders::BatchParametersBuilder {
    if builder.job_definition.is_none() {
        builder.job_definition = Some(Default::default())
    }
    if builder.job_name.is_none() {
        builder.job_name = Some(Default::default())
    }
    builder
}

pub(crate) fn ecs_parameters_correct_errors(
    mut builder: crate::types::builders::EcsParametersBuilder,
) -> crate::types::builders::EcsParametersBuilder {
    if builder.task_definition_arn.is_none() {
        builder.task_definition_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn input_transformer_correct_errors(
    mut builder: crate::types::builders::InputTransformerBuilder,
) -> crate::types::builders::InputTransformerBuilder {
    if builder.input_template.is_none() {
        builder.input_template = Some(Default::default())
    }
    builder
}

pub(crate) fn kinesis_parameters_correct_errors(
    mut builder: crate::types::builders::KinesisParametersBuilder,
) -> crate::types::builders::KinesisParametersBuilder {
    if builder.partition_key_path.is_none() {
        builder.partition_key_path = Some(Default::default())
    }
    builder
}

pub(crate) fn redshift_data_parameters_correct_errors(
    mut builder: crate::types::builders::RedshiftDataParametersBuilder,
) -> crate::types::builders::RedshiftDataParametersBuilder {
    if builder.database.is_none() {
        builder.database = Some(Default::default())
    }
    if builder.sql.is_none() {
        builder.sql = Some(Default::default())
    }
    builder
}

pub(crate) fn run_command_parameters_correct_errors(
    mut builder: crate::types::builders::RunCommandParametersBuilder,
) -> crate::types::builders::RunCommandParametersBuilder {
    if builder.run_command_targets.is_none() {
        builder.run_command_targets = Some(Default::default())
    }
    builder
}

pub(crate) fn aws_vpc_configuration_correct_errors(
    mut builder: crate::types::builders::AwsVpcConfigurationBuilder,
) -> crate::types::builders::AwsVpcConfigurationBuilder {
    if builder.subnets.is_none() {
        builder.subnets = Some(Default::default())
    }
    builder
}

pub(crate) fn capacity_provider_strategy_item_correct_errors(
    mut builder: crate::types::builders::CapacityProviderStrategyItemBuilder,
) -> crate::types::builders::CapacityProviderStrategyItemBuilder {
    if builder.capacity_provider.is_none() {
        builder.capacity_provider = Some(Default::default())
    }
    builder
}

pub(crate) fn run_command_target_correct_errors(
    mut builder: crate::types::builders::RunCommandTargetBuilder,
) -> crate::types::builders::RunCommandTargetBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    if builder.values.is_none() {
        builder.values = Some(Default::default())
    }
    builder
}

pub(crate) fn sage_maker_pipeline_parameter_correct_errors(
    mut builder: crate::types::builders::SageMakerPipelineParameterBuilder,
) -> crate::types::builders::SageMakerPipelineParameterBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}
