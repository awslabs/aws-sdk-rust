// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Additional query string parameter for the connection. You can include up to 100 additional query string parameters per request. Each additional parameter counts towards the event payload size, which cannot exceed 64 KB.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ConnectionQueryStringParameter {
    /// <p>The key for a query string parameter.</p>
    #[doc(hidden)]
    pub key: std::option::Option<std::string::String>,
    /// <p>The value associated with the key for the query string parameter.</p>
    #[doc(hidden)]
    pub value: std::option::Option<std::string::String>,
    /// <p>Specifies whether the value is secret.</p>
    #[doc(hidden)]
    pub is_value_secret: bool,
}
impl ConnectionQueryStringParameter {
    /// <p>The key for a query string parameter.</p>
    pub fn key(&self) -> std::option::Option<&str> {
        self.key.as_deref()
    }
    /// <p>The value associated with the key for the query string parameter.</p>
    pub fn value(&self) -> std::option::Option<&str> {
        self.value.as_deref()
    }
    /// <p>Specifies whether the value is secret.</p>
    pub fn is_value_secret(&self) -> bool {
        self.is_value_secret
    }
}
impl ConnectionQueryStringParameter {
    /// Creates a new builder-style object to manufacture [`ConnectionQueryStringParameter`](crate::types::ConnectionQueryStringParameter).
    pub fn builder() -> crate::types::builders::ConnectionQueryStringParameterBuilder {
        crate::types::builders::ConnectionQueryStringParameterBuilder::default()
    }
}

/// A builder for [`ConnectionQueryStringParameter`](crate::types::ConnectionQueryStringParameter).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ConnectionQueryStringParameterBuilder {
    pub(crate) key: std::option::Option<std::string::String>,
    pub(crate) value: std::option::Option<std::string::String>,
    pub(crate) is_value_secret: std::option::Option<bool>,
}
impl ConnectionQueryStringParameterBuilder {
    /// <p>The key for a query string parameter.</p>
    pub fn key(mut self, input: impl Into<std::string::String>) -> Self {
        self.key = Some(input.into());
        self
    }
    /// <p>The key for a query string parameter.</p>
    pub fn set_key(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.key = input;
        self
    }
    /// <p>The value associated with the key for the query string parameter.</p>
    pub fn value(mut self, input: impl Into<std::string::String>) -> Self {
        self.value = Some(input.into());
        self
    }
    /// <p>The value associated with the key for the query string parameter.</p>
    pub fn set_value(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.value = input;
        self
    }
    /// <p>Specifies whether the value is secret.</p>
    pub fn is_value_secret(mut self, input: bool) -> Self {
        self.is_value_secret = Some(input);
        self
    }
    /// <p>Specifies whether the value is secret.</p>
    pub fn set_is_value_secret(mut self, input: std::option::Option<bool>) -> Self {
        self.is_value_secret = input;
        self
    }
    /// Consumes the builder and constructs a [`ConnectionQueryStringParameter`](crate::types::ConnectionQueryStringParameter).
    pub fn build(self) -> crate::types::ConnectionQueryStringParameter {
        crate::types::ConnectionQueryStringParameter {
            key: self.key,
            value: self.value,
            is_value_secret: self.is_value_secret.unwrap_or_default(),
        }
    }
}
