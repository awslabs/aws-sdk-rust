// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>These are custom parameters to be used when the target is a Amazon Redshift cluster to invoke the Amazon Redshift Data API ExecuteStatement based on EventBridge events.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RedshiftDataParameters {
    /// <p>The name or ARN of the secret that enables access to the database. Required when authenticating using Amazon Web Services Secrets Manager.</p>
    #[doc(hidden)]
    pub secret_manager_arn: std::option::Option<std::string::String>,
    /// <p>The name of the database. Required when authenticating using temporary credentials.</p>
    #[doc(hidden)]
    pub database: std::option::Option<std::string::String>,
    /// <p>The database user name. Required when authenticating using temporary credentials.</p>
    #[doc(hidden)]
    pub db_user: std::option::Option<std::string::String>,
    /// <p>The SQL statement text to run.</p>
    #[doc(hidden)]
    pub sql: std::option::Option<std::string::String>,
    /// <p>The name of the SQL statement. You can name the SQL statement when you create it to identify the query.</p>
    #[doc(hidden)]
    pub statement_name: std::option::Option<std::string::String>,
    /// <p>Indicates whether to send an event back to EventBridge after the SQL statement runs.</p>
    #[doc(hidden)]
    pub with_event: bool,
}
impl RedshiftDataParameters {
    /// <p>The name or ARN of the secret that enables access to the database. Required when authenticating using Amazon Web Services Secrets Manager.</p>
    pub fn secret_manager_arn(&self) -> std::option::Option<&str> {
        self.secret_manager_arn.as_deref()
    }
    /// <p>The name of the database. Required when authenticating using temporary credentials.</p>
    pub fn database(&self) -> std::option::Option<&str> {
        self.database.as_deref()
    }
    /// <p>The database user name. Required when authenticating using temporary credentials.</p>
    pub fn db_user(&self) -> std::option::Option<&str> {
        self.db_user.as_deref()
    }
    /// <p>The SQL statement text to run.</p>
    pub fn sql(&self) -> std::option::Option<&str> {
        self.sql.as_deref()
    }
    /// <p>The name of the SQL statement. You can name the SQL statement when you create it to identify the query.</p>
    pub fn statement_name(&self) -> std::option::Option<&str> {
        self.statement_name.as_deref()
    }
    /// <p>Indicates whether to send an event back to EventBridge after the SQL statement runs.</p>
    pub fn with_event(&self) -> bool {
        self.with_event
    }
}
impl RedshiftDataParameters {
    /// Creates a new builder-style object to manufacture [`RedshiftDataParameters`](crate::types::RedshiftDataParameters).
    pub fn builder() -> crate::types::builders::RedshiftDataParametersBuilder {
        crate::types::builders::RedshiftDataParametersBuilder::default()
    }
}

/// A builder for [`RedshiftDataParameters`](crate::types::RedshiftDataParameters).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RedshiftDataParametersBuilder {
    pub(crate) secret_manager_arn: std::option::Option<std::string::String>,
    pub(crate) database: std::option::Option<std::string::String>,
    pub(crate) db_user: std::option::Option<std::string::String>,
    pub(crate) sql: std::option::Option<std::string::String>,
    pub(crate) statement_name: std::option::Option<std::string::String>,
    pub(crate) with_event: std::option::Option<bool>,
}
impl RedshiftDataParametersBuilder {
    /// <p>The name or ARN of the secret that enables access to the database. Required when authenticating using Amazon Web Services Secrets Manager.</p>
    pub fn secret_manager_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.secret_manager_arn = Some(input.into());
        self
    }
    /// <p>The name or ARN of the secret that enables access to the database. Required when authenticating using Amazon Web Services Secrets Manager.</p>
    pub fn set_secret_manager_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.secret_manager_arn = input;
        self
    }
    /// <p>The name of the database. Required when authenticating using temporary credentials.</p>
    pub fn database(mut self, input: impl Into<std::string::String>) -> Self {
        self.database = Some(input.into());
        self
    }
    /// <p>The name of the database. Required when authenticating using temporary credentials.</p>
    pub fn set_database(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.database = input;
        self
    }
    /// <p>The database user name. Required when authenticating using temporary credentials.</p>
    pub fn db_user(mut self, input: impl Into<std::string::String>) -> Self {
        self.db_user = Some(input.into());
        self
    }
    /// <p>The database user name. Required when authenticating using temporary credentials.</p>
    pub fn set_db_user(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.db_user = input;
        self
    }
    /// <p>The SQL statement text to run.</p>
    pub fn sql(mut self, input: impl Into<std::string::String>) -> Self {
        self.sql = Some(input.into());
        self
    }
    /// <p>The SQL statement text to run.</p>
    pub fn set_sql(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.sql = input;
        self
    }
    /// <p>The name of the SQL statement. You can name the SQL statement when you create it to identify the query.</p>
    pub fn statement_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.statement_name = Some(input.into());
        self
    }
    /// <p>The name of the SQL statement. You can name the SQL statement when you create it to identify the query.</p>
    pub fn set_statement_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.statement_name = input;
        self
    }
    /// <p>Indicates whether to send an event back to EventBridge after the SQL statement runs.</p>
    pub fn with_event(mut self, input: bool) -> Self {
        self.with_event = Some(input);
        self
    }
    /// <p>Indicates whether to send an event back to EventBridge after the SQL statement runs.</p>
    pub fn set_with_event(mut self, input: std::option::Option<bool>) -> Self {
        self.with_event = input;
        self
    }
    /// Consumes the builder and constructs a [`RedshiftDataParameters`](crate::types::RedshiftDataParameters).
    pub fn build(self) -> crate::types::RedshiftDataParameters {
        crate::types::RedshiftDataParameters {
            secret_manager_arn: self.secret_manager_arn,
            database: self.database,
            db_user: self.db_user,
            sql: self.sql,
            statement_name: self.statement_name,
            with_event: self.with_event.unwrap_or_default(),
        }
    }
}
