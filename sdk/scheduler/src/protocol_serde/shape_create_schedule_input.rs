// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_schedule_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_schedule::CreateScheduleInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.client_token {
        object.key("ClientToken").string(var_1.as_str());
    }
    if let Some(var_2) = &input.description {
        object.key("Description").string(var_2.as_str());
    }
    if let Some(var_3) = &input.end_date {
        object
            .key("EndDate")
            .date_time(var_3, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_4) = &input.flexible_time_window {
        #[allow(unused_mut)]
        let mut object_5 = object.key("FlexibleTimeWindow").start_object();
        crate::protocol_serde::shape_flexible_time_window::ser_flexible_time_window(
            &mut object_5,
            var_4,
        )?;
        object_5.finish();
    }
    if let Some(var_6) = &input.group_name {
        object.key("GroupName").string(var_6.as_str());
    }
    if let Some(var_7) = &input.kms_key_arn {
        object.key("KmsKeyArn").string(var_7.as_str());
    }
    if let Some(var_8) = &input.schedule_expression {
        object.key("ScheduleExpression").string(var_8.as_str());
    }
    if let Some(var_9) = &input.schedule_expression_timezone {
        object
            .key("ScheduleExpressionTimezone")
            .string(var_9.as_str());
    }
    if let Some(var_10) = &input.start_date {
        object
            .key("StartDate")
            .date_time(var_10, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_11) = &input.state {
        object.key("State").string(var_11.as_str());
    }
    if let Some(var_12) = &input.target {
        #[allow(unused_mut)]
        let mut object_13 = object.key("Target").start_object();
        crate::protocol_serde::shape_target::ser_target(&mut object_13, var_12)?;
        object_13.finish();
    }
    Ok(())
}
