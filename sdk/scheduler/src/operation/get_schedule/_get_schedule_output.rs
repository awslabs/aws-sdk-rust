// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetScheduleOutput {
    /// <p>The Amazon Resource Name (ARN) of the schedule.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The name of the schedule group associated with this schedule.</p>
    #[doc(hidden)]
    pub group_name: std::option::Option<std::string::String>,
    /// <p>The name of the schedule.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p> The expression that defines when the schedule runs. The following formats are supported. </p>
    /// <ul>
    /// <li> <p> <code>at</code> expression - <code>at(yyyy-mm-ddThh:mm:ss)</code> </p> </li>
    /// <li> <p> <code>rate</code> expression - <code>rate(unit value)</code> </p> </li>
    /// <li> <p> <code>cron</code> expression - <code>cron(fields)</code> </p> </li>
    /// </ul>
    /// <p> You can use <code>at</code> expressions to create one-time schedules that invoke a target once, at the time and in the time zone, that you specify. You can use <code>rate</code> and <code>cron</code> expressions to create recurring schedules. Rate-based schedules are useful when you want to invoke a target at regular intervals, such as every 15 minutes or every five days. Cron-based schedules are useful when you want to invoke a target periodically at a specific time, such as at 8:00 am (UTC+0) every 1st day of the month. </p>
    /// <p> A <code>cron</code> expression consists of six fields separated by white spaces: <code>(minutes hours day_of_month month day_of_week year)</code>. </p>
    /// <p> A <code>rate</code> expression consists of a <i>value</i> as a positive integer, and a <i>unit</i> with the following options: <code>minute</code> | <code>minutes</code> | <code>hour</code> | <code>hours</code> | <code>day</code> | <code>days</code> </p>
    /// <p> For more information and examples, see <a href="https://docs.aws.amazon.com/scheduler/latest/UserGuide/schedule-types.html">Schedule types on EventBridge Scheduler</a> in the <i>EventBridge Scheduler User Guide</i>. </p>
    #[doc(hidden)]
    pub schedule_expression: std::option::Option<std::string::String>,
    /// <p>The date, in UTC, after which the schedule can begin invoking its target. Depending on the schedule's recurrence expression, invocations might occur on, or after, the <code>StartDate</code> you specify. EventBridge Scheduler ignores <code>StartDate</code> for one-time schedules.</p>
    #[doc(hidden)]
    pub start_date: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The date, in UTC, before which the schedule can invoke its target. Depending on the schedule's recurrence expression, invocations might stop on, or before, the <code>EndDate</code> you specify. EventBridge Scheduler ignores <code>EndDate</code> for one-time schedules.</p>
    #[doc(hidden)]
    pub end_date: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The description of the schedule.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The timezone in which the scheduling expression is evaluated.</p>
    #[doc(hidden)]
    pub schedule_expression_timezone: std::option::Option<std::string::String>,
    /// <p>Specifies whether the schedule is enabled or disabled.</p>
    #[doc(hidden)]
    pub state: std::option::Option<crate::types::ScheduleState>,
    /// <p>The time at which the schedule was created.</p>
    #[doc(hidden)]
    pub creation_date: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The time at which the schedule was last modified.</p>
    #[doc(hidden)]
    pub last_modification_date: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The ARN for a customer managed KMS Key that is be used to encrypt and decrypt your data.</p>
    #[doc(hidden)]
    pub kms_key_arn: std::option::Option<std::string::String>,
    /// <p>The schedule target.</p>
    #[doc(hidden)]
    pub target: std::option::Option<crate::types::Target>,
    /// <p>Allows you to configure a time window during which EventBridge Scheduler invokes the schedule.</p>
    #[doc(hidden)]
    pub flexible_time_window: std::option::Option<crate::types::FlexibleTimeWindow>,
    _request_id: Option<String>,
}
impl GetScheduleOutput {
    /// <p>The Amazon Resource Name (ARN) of the schedule.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The name of the schedule group associated with this schedule.</p>
    pub fn group_name(&self) -> std::option::Option<&str> {
        self.group_name.as_deref()
    }
    /// <p>The name of the schedule.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p> The expression that defines when the schedule runs. The following formats are supported. </p>
    /// <ul>
    /// <li> <p> <code>at</code> expression - <code>at(yyyy-mm-ddThh:mm:ss)</code> </p> </li>
    /// <li> <p> <code>rate</code> expression - <code>rate(unit value)</code> </p> </li>
    /// <li> <p> <code>cron</code> expression - <code>cron(fields)</code> </p> </li>
    /// </ul>
    /// <p> You can use <code>at</code> expressions to create one-time schedules that invoke a target once, at the time and in the time zone, that you specify. You can use <code>rate</code> and <code>cron</code> expressions to create recurring schedules. Rate-based schedules are useful when you want to invoke a target at regular intervals, such as every 15 minutes or every five days. Cron-based schedules are useful when you want to invoke a target periodically at a specific time, such as at 8:00 am (UTC+0) every 1st day of the month. </p>
    /// <p> A <code>cron</code> expression consists of six fields separated by white spaces: <code>(minutes hours day_of_month month day_of_week year)</code>. </p>
    /// <p> A <code>rate</code> expression consists of a <i>value</i> as a positive integer, and a <i>unit</i> with the following options: <code>minute</code> | <code>minutes</code> | <code>hour</code> | <code>hours</code> | <code>day</code> | <code>days</code> </p>
    /// <p> For more information and examples, see <a href="https://docs.aws.amazon.com/scheduler/latest/UserGuide/schedule-types.html">Schedule types on EventBridge Scheduler</a> in the <i>EventBridge Scheduler User Guide</i>. </p>
    pub fn schedule_expression(&self) -> std::option::Option<&str> {
        self.schedule_expression.as_deref()
    }
    /// <p>The date, in UTC, after which the schedule can begin invoking its target. Depending on the schedule's recurrence expression, invocations might occur on, or after, the <code>StartDate</code> you specify. EventBridge Scheduler ignores <code>StartDate</code> for one-time schedules.</p>
    pub fn start_date(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.start_date.as_ref()
    }
    /// <p>The date, in UTC, before which the schedule can invoke its target. Depending on the schedule's recurrence expression, invocations might stop on, or before, the <code>EndDate</code> you specify. EventBridge Scheduler ignores <code>EndDate</code> for one-time schedules.</p>
    pub fn end_date(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.end_date.as_ref()
    }
    /// <p>The description of the schedule.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The timezone in which the scheduling expression is evaluated.</p>
    pub fn schedule_expression_timezone(&self) -> std::option::Option<&str> {
        self.schedule_expression_timezone.as_deref()
    }
    /// <p>Specifies whether the schedule is enabled or disabled.</p>
    pub fn state(&self) -> std::option::Option<&crate::types::ScheduleState> {
        self.state.as_ref()
    }
    /// <p>The time at which the schedule was created.</p>
    pub fn creation_date(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_date.as_ref()
    }
    /// <p>The time at which the schedule was last modified.</p>
    pub fn last_modification_date(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_modification_date.as_ref()
    }
    /// <p>The ARN for a customer managed KMS Key that is be used to encrypt and decrypt your data.</p>
    pub fn kms_key_arn(&self) -> std::option::Option<&str> {
        self.kms_key_arn.as_deref()
    }
    /// <p>The schedule target.</p>
    pub fn target(&self) -> std::option::Option<&crate::types::Target> {
        self.target.as_ref()
    }
    /// <p>Allows you to configure a time window during which EventBridge Scheduler invokes the schedule.</p>
    pub fn flexible_time_window(&self) -> std::option::Option<&crate::types::FlexibleTimeWindow> {
        self.flexible_time_window.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetScheduleOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetScheduleOutput {
    /// Creates a new builder-style object to manufacture [`GetScheduleOutput`](crate::operation::get_schedule::GetScheduleOutput).
    pub fn builder() -> crate::operation::get_schedule::builders::GetScheduleOutputBuilder {
        crate::operation::get_schedule::builders::GetScheduleOutputBuilder::default()
    }
}

/// A builder for [`GetScheduleOutput`](crate::operation::get_schedule::GetScheduleOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetScheduleOutputBuilder {
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) group_name: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) schedule_expression: std::option::Option<std::string::String>,
    pub(crate) start_date: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) end_date: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) schedule_expression_timezone: std::option::Option<std::string::String>,
    pub(crate) state: std::option::Option<crate::types::ScheduleState>,
    pub(crate) creation_date: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) last_modification_date: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) kms_key_arn: std::option::Option<std::string::String>,
    pub(crate) target: std::option::Option<crate::types::Target>,
    pub(crate) flexible_time_window: std::option::Option<crate::types::FlexibleTimeWindow>,
    _request_id: Option<String>,
}
impl GetScheduleOutputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the schedule.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the schedule.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The name of the schedule group associated with this schedule.</p>
    pub fn group_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.group_name = Some(input.into());
        self
    }
    /// <p>The name of the schedule group associated with this schedule.</p>
    pub fn set_group_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.group_name = input;
        self
    }
    /// <p>The name of the schedule.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the schedule.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p> The expression that defines when the schedule runs. The following formats are supported. </p>
    /// <ul>
    /// <li> <p> <code>at</code> expression - <code>at(yyyy-mm-ddThh:mm:ss)</code> </p> </li>
    /// <li> <p> <code>rate</code> expression - <code>rate(unit value)</code> </p> </li>
    /// <li> <p> <code>cron</code> expression - <code>cron(fields)</code> </p> </li>
    /// </ul>
    /// <p> You can use <code>at</code> expressions to create one-time schedules that invoke a target once, at the time and in the time zone, that you specify. You can use <code>rate</code> and <code>cron</code> expressions to create recurring schedules. Rate-based schedules are useful when you want to invoke a target at regular intervals, such as every 15 minutes or every five days. Cron-based schedules are useful when you want to invoke a target periodically at a specific time, such as at 8:00 am (UTC+0) every 1st day of the month. </p>
    /// <p> A <code>cron</code> expression consists of six fields separated by white spaces: <code>(minutes hours day_of_month month day_of_week year)</code>. </p>
    /// <p> A <code>rate</code> expression consists of a <i>value</i> as a positive integer, and a <i>unit</i> with the following options: <code>minute</code> | <code>minutes</code> | <code>hour</code> | <code>hours</code> | <code>day</code> | <code>days</code> </p>
    /// <p> For more information and examples, see <a href="https://docs.aws.amazon.com/scheduler/latest/UserGuide/schedule-types.html">Schedule types on EventBridge Scheduler</a> in the <i>EventBridge Scheduler User Guide</i>. </p>
    pub fn schedule_expression(mut self, input: impl Into<std::string::String>) -> Self {
        self.schedule_expression = Some(input.into());
        self
    }
    /// <p> The expression that defines when the schedule runs. The following formats are supported. </p>
    /// <ul>
    /// <li> <p> <code>at</code> expression - <code>at(yyyy-mm-ddThh:mm:ss)</code> </p> </li>
    /// <li> <p> <code>rate</code> expression - <code>rate(unit value)</code> </p> </li>
    /// <li> <p> <code>cron</code> expression - <code>cron(fields)</code> </p> </li>
    /// </ul>
    /// <p> You can use <code>at</code> expressions to create one-time schedules that invoke a target once, at the time and in the time zone, that you specify. You can use <code>rate</code> and <code>cron</code> expressions to create recurring schedules. Rate-based schedules are useful when you want to invoke a target at regular intervals, such as every 15 minutes or every five days. Cron-based schedules are useful when you want to invoke a target periodically at a specific time, such as at 8:00 am (UTC+0) every 1st day of the month. </p>
    /// <p> A <code>cron</code> expression consists of six fields separated by white spaces: <code>(minutes hours day_of_month month day_of_week year)</code>. </p>
    /// <p> A <code>rate</code> expression consists of a <i>value</i> as a positive integer, and a <i>unit</i> with the following options: <code>minute</code> | <code>minutes</code> | <code>hour</code> | <code>hours</code> | <code>day</code> | <code>days</code> </p>
    /// <p> For more information and examples, see <a href="https://docs.aws.amazon.com/scheduler/latest/UserGuide/schedule-types.html">Schedule types on EventBridge Scheduler</a> in the <i>EventBridge Scheduler User Guide</i>. </p>
    pub fn set_schedule_expression(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.schedule_expression = input;
        self
    }
    /// <p>The date, in UTC, after which the schedule can begin invoking its target. Depending on the schedule's recurrence expression, invocations might occur on, or after, the <code>StartDate</code> you specify. EventBridge Scheduler ignores <code>StartDate</code> for one-time schedules.</p>
    pub fn start_date(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.start_date = Some(input);
        self
    }
    /// <p>The date, in UTC, after which the schedule can begin invoking its target. Depending on the schedule's recurrence expression, invocations might occur on, or after, the <code>StartDate</code> you specify. EventBridge Scheduler ignores <code>StartDate</code> for one-time schedules.</p>
    pub fn set_start_date(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.start_date = input;
        self
    }
    /// <p>The date, in UTC, before which the schedule can invoke its target. Depending on the schedule's recurrence expression, invocations might stop on, or before, the <code>EndDate</code> you specify. EventBridge Scheduler ignores <code>EndDate</code> for one-time schedules.</p>
    pub fn end_date(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.end_date = Some(input);
        self
    }
    /// <p>The date, in UTC, before which the schedule can invoke its target. Depending on the schedule's recurrence expression, invocations might stop on, or before, the <code>EndDate</code> you specify. EventBridge Scheduler ignores <code>EndDate</code> for one-time schedules.</p>
    pub fn set_end_date(mut self, input: std::option::Option<aws_smithy_types::DateTime>) -> Self {
        self.end_date = input;
        self
    }
    /// <p>The description of the schedule.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The description of the schedule.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The timezone in which the scheduling expression is evaluated.</p>
    pub fn schedule_expression_timezone(mut self, input: impl Into<std::string::String>) -> Self {
        self.schedule_expression_timezone = Some(input.into());
        self
    }
    /// <p>The timezone in which the scheduling expression is evaluated.</p>
    pub fn set_schedule_expression_timezone(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.schedule_expression_timezone = input;
        self
    }
    /// <p>Specifies whether the schedule is enabled or disabled.</p>
    pub fn state(mut self, input: crate::types::ScheduleState) -> Self {
        self.state = Some(input);
        self
    }
    /// <p>Specifies whether the schedule is enabled or disabled.</p>
    pub fn set_state(mut self, input: std::option::Option<crate::types::ScheduleState>) -> Self {
        self.state = input;
        self
    }
    /// <p>The time at which the schedule was created.</p>
    pub fn creation_date(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.creation_date = Some(input);
        self
    }
    /// <p>The time at which the schedule was created.</p>
    pub fn set_creation_date(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.creation_date = input;
        self
    }
    /// <p>The time at which the schedule was last modified.</p>
    pub fn last_modification_date(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_modification_date = Some(input);
        self
    }
    /// <p>The time at which the schedule was last modified.</p>
    pub fn set_last_modification_date(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_modification_date = input;
        self
    }
    /// <p>The ARN for a customer managed KMS Key that is be used to encrypt and decrypt your data.</p>
    pub fn kms_key_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.kms_key_arn = Some(input.into());
        self
    }
    /// <p>The ARN for a customer managed KMS Key that is be used to encrypt and decrypt your data.</p>
    pub fn set_kms_key_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.kms_key_arn = input;
        self
    }
    /// <p>The schedule target.</p>
    pub fn target(mut self, input: crate::types::Target) -> Self {
        self.target = Some(input);
        self
    }
    /// <p>The schedule target.</p>
    pub fn set_target(mut self, input: std::option::Option<crate::types::Target>) -> Self {
        self.target = input;
        self
    }
    /// <p>Allows you to configure a time window during which EventBridge Scheduler invokes the schedule.</p>
    pub fn flexible_time_window(mut self, input: crate::types::FlexibleTimeWindow) -> Self {
        self.flexible_time_window = Some(input);
        self
    }
    /// <p>Allows you to configure a time window during which EventBridge Scheduler invokes the schedule.</p>
    pub fn set_flexible_time_window(
        mut self,
        input: std::option::Option<crate::types::FlexibleTimeWindow>,
    ) -> Self {
        self.flexible_time_window = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetScheduleOutput`](crate::operation::get_schedule::GetScheduleOutput).
    pub fn build(self) -> crate::operation::get_schedule::GetScheduleOutput {
        crate::operation::get_schedule::GetScheduleOutput {
            arn: self.arn,
            group_name: self.group_name,
            name: self.name,
            schedule_expression: self.schedule_expression,
            start_date: self.start_date,
            end_date: self.end_date,
            description: self.description,
            schedule_expression_timezone: self.schedule_expression_timezone,
            state: self.state,
            creation_date: self.creation_date,
            last_modification_date: self.last_modification_date,
            kms_key_arn: self.kms_key_arn,
            target: self.target,
            flexible_time_window: self.flexible_time_window,
            _request_id: self._request_id,
        }
    }
}
