// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListSchedulesInput {
    /// <p>If specified, only lists the schedules whose associated schedule group matches the given filter.</p>
    #[doc(hidden)]
    pub group_name: std::option::Option<std::string::String>,
    /// <p>Schedule name prefix to return the filtered list of resources.</p>
    #[doc(hidden)]
    pub name_prefix: std::option::Option<std::string::String>,
    /// <p>If specified, only lists the schedules whose current state matches the given filter.</p>
    #[doc(hidden)]
    pub state: std::option::Option<crate::types::ScheduleState>,
    /// <p>The token returned by a previous call to retrieve the next set of results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>If specified, limits the number of results returned by this operation. The operation also returns a <code>NextToken</code> which you can use in a subsequent operation to retrieve the next set of results.</p>
    #[doc(hidden)]
    pub max_results: std::option::Option<i32>,
}
impl ListSchedulesInput {
    /// <p>If specified, only lists the schedules whose associated schedule group matches the given filter.</p>
    pub fn group_name(&self) -> std::option::Option<&str> {
        self.group_name.as_deref()
    }
    /// <p>Schedule name prefix to return the filtered list of resources.</p>
    pub fn name_prefix(&self) -> std::option::Option<&str> {
        self.name_prefix.as_deref()
    }
    /// <p>If specified, only lists the schedules whose current state matches the given filter.</p>
    pub fn state(&self) -> std::option::Option<&crate::types::ScheduleState> {
        self.state.as_ref()
    }
    /// <p>The token returned by a previous call to retrieve the next set of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>If specified, limits the number of results returned by this operation. The operation also returns a <code>NextToken</code> which you can use in a subsequent operation to retrieve the next set of results.</p>
    pub fn max_results(&self) -> std::option::Option<i32> {
        self.max_results
    }
}
impl ListSchedulesInput {
    /// Creates a new builder-style object to manufacture [`ListSchedulesInput`](crate::operation::list_schedules::ListSchedulesInput).
    pub fn builder() -> crate::operation::list_schedules::builders::ListSchedulesInputBuilder {
        crate::operation::list_schedules::builders::ListSchedulesInputBuilder::default()
    }
}

/// A builder for [`ListSchedulesInput`](crate::operation::list_schedules::ListSchedulesInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListSchedulesInputBuilder {
    pub(crate) group_name: std::option::Option<std::string::String>,
    pub(crate) name_prefix: std::option::Option<std::string::String>,
    pub(crate) state: std::option::Option<crate::types::ScheduleState>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) max_results: std::option::Option<i32>,
}
impl ListSchedulesInputBuilder {
    /// <p>If specified, only lists the schedules whose associated schedule group matches the given filter.</p>
    pub fn group_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.group_name = Some(input.into());
        self
    }
    /// <p>If specified, only lists the schedules whose associated schedule group matches the given filter.</p>
    pub fn set_group_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.group_name = input;
        self
    }
    /// <p>Schedule name prefix to return the filtered list of resources.</p>
    pub fn name_prefix(mut self, input: impl Into<std::string::String>) -> Self {
        self.name_prefix = Some(input.into());
        self
    }
    /// <p>Schedule name prefix to return the filtered list of resources.</p>
    pub fn set_name_prefix(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name_prefix = input;
        self
    }
    /// <p>If specified, only lists the schedules whose current state matches the given filter.</p>
    pub fn state(mut self, input: crate::types::ScheduleState) -> Self {
        self.state = Some(input);
        self
    }
    /// <p>If specified, only lists the schedules whose current state matches the given filter.</p>
    pub fn set_state(mut self, input: std::option::Option<crate::types::ScheduleState>) -> Self {
        self.state = input;
        self
    }
    /// <p>The token returned by a previous call to retrieve the next set of results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>The token returned by a previous call to retrieve the next set of results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>If specified, limits the number of results returned by this operation. The operation also returns a <code>NextToken</code> which you can use in a subsequent operation to retrieve the next set of results.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// <p>If specified, limits the number of results returned by this operation. The operation also returns a <code>NextToken</code> which you can use in a subsequent operation to retrieve the next set of results.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// Consumes the builder and constructs a [`ListSchedulesInput`](crate::operation::list_schedules::ListSchedulesInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::list_schedules::ListSchedulesInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::list_schedules::ListSchedulesInput {
            group_name: self.group_name,
            name_prefix: self.name_prefix,
            state: self.state,
            next_token: self.next_token,
            max_results: self.max_results,
        })
    }
}
