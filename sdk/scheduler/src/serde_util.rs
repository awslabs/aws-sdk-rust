// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn conflict_exception_correct_errors(
    mut builder: crate::types::error::builders::ConflictExceptionBuilder,
) -> crate::types::error::builders::ConflictExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn internal_server_exception_correct_errors(
    mut builder: crate::types::error::builders::InternalServerExceptionBuilder,
) -> crate::types::error::builders::InternalServerExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_not_found_exception_correct_errors(
    mut builder: crate::types::error::builders::ResourceNotFoundExceptionBuilder,
) -> crate::types::error::builders::ResourceNotFoundExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn service_quota_exceeded_exception_correct_errors(
    mut builder: crate::types::error::builders::ServiceQuotaExceededExceptionBuilder,
) -> crate::types::error::builders::ServiceQuotaExceededExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn throttling_exception_correct_errors(
    mut builder: crate::types::error::builders::ThrottlingExceptionBuilder,
) -> crate::types::error::builders::ThrottlingExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_exception_correct_errors(
    mut builder: crate::types::error::builders::ValidationExceptionBuilder,
) -> crate::types::error::builders::ValidationExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn create_schedule_output_correct_errors(
    mut builder: crate::operation::create_schedule::builders::CreateScheduleOutputBuilder,
) -> crate::operation::create_schedule::builders::CreateScheduleOutputBuilder {
    if builder.schedule_arn.is_none() {
        builder.schedule_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn create_schedule_group_output_correct_errors(
    mut builder: crate::operation::create_schedule_group::builders::CreateScheduleGroupOutputBuilder,
) -> crate::operation::create_schedule_group::builders::CreateScheduleGroupOutputBuilder {
    if builder.schedule_group_arn.is_none() {
        builder.schedule_group_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn list_schedule_groups_output_correct_errors(
    mut builder: crate::operation::list_schedule_groups::builders::ListScheduleGroupsOutputBuilder,
) -> crate::operation::list_schedule_groups::builders::ListScheduleGroupsOutputBuilder {
    if builder.schedule_groups.is_none() {
        builder.schedule_groups = Some(Default::default())
    }
    builder
}

pub(crate) fn list_schedules_output_correct_errors(
    mut builder: crate::operation::list_schedules::builders::ListSchedulesOutputBuilder,
) -> crate::operation::list_schedules::builders::ListSchedulesOutputBuilder {
    if builder.schedules.is_none() {
        builder.schedules = Some(Default::default())
    }
    builder
}

pub(crate) fn update_schedule_output_correct_errors(
    mut builder: crate::operation::update_schedule::builders::UpdateScheduleOutputBuilder,
) -> crate::operation::update_schedule::builders::UpdateScheduleOutputBuilder {
    if builder.schedule_arn.is_none() {
        builder.schedule_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn flexible_time_window_correct_errors(
    mut builder: crate::types::builders::FlexibleTimeWindowBuilder,
) -> crate::types::builders::FlexibleTimeWindowBuilder {
    if builder.mode.is_none() {
        builder.mode = "no value was set".parse::<crate::types::FlexibleTimeWindowMode>().ok()
    }
    builder
}

pub(crate) fn target_correct_errors(mut builder: crate::types::builders::TargetBuilder) -> crate::types::builders::TargetBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn ecs_parameters_correct_errors(
    mut builder: crate::types::builders::EcsParametersBuilder,
) -> crate::types::builders::EcsParametersBuilder {
    if builder.task_definition_arn.is_none() {
        builder.task_definition_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn event_bridge_parameters_correct_errors(
    mut builder: crate::types::builders::EventBridgeParametersBuilder,
) -> crate::types::builders::EventBridgeParametersBuilder {
    if builder.detail_type.is_none() {
        builder.detail_type = Some(Default::default())
    }
    if builder.source.is_none() {
        builder.source = Some(Default::default())
    }
    builder
}

pub(crate) fn kinesis_parameters_correct_errors(
    mut builder: crate::types::builders::KinesisParametersBuilder,
) -> crate::types::builders::KinesisParametersBuilder {
    if builder.partition_key.is_none() {
        builder.partition_key = Some(Default::default())
    }
    builder
}

pub(crate) fn tag_correct_errors(mut builder: crate::types::builders::TagBuilder) -> crate::types::builders::TagBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn target_summary_correct_errors(
    mut builder: crate::types::builders::TargetSummaryBuilder,
) -> crate::types::builders::TargetSummaryBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    builder
}

pub(crate) fn aws_vpc_configuration_correct_errors(
    mut builder: crate::types::builders::AwsVpcConfigurationBuilder,
) -> crate::types::builders::AwsVpcConfigurationBuilder {
    if builder.subnets.is_none() {
        builder.subnets = Some(Default::default())
    }
    builder
}

pub(crate) fn capacity_provider_strategy_item_correct_errors(
    mut builder: crate::types::builders::CapacityProviderStrategyItemBuilder,
) -> crate::types::builders::CapacityProviderStrategyItemBuilder {
    if builder.capacity_provider.is_none() {
        builder.capacity_provider = Some(Default::default())
    }
    builder
}

pub(crate) fn sage_maker_pipeline_parameter_correct_errors(
    mut builder: crate::types::builders::SageMakerPipelineParameterBuilder,
) -> crate::types::builders::SageMakerPipelineParameterBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}
