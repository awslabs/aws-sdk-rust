// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListScheduleGroupsOutput {
    /// <p>Indicates whether there are additional results to retrieve. If the value is null, there are no more results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The schedule groups that match the specified criteria.</p>
    #[doc(hidden)]
    pub schedule_groups: std::option::Option<std::vec::Vec<crate::model::ScheduleGroupSummary>>,
    _request_id: Option<String>,
}
impl ListScheduleGroupsOutput {
    /// <p>Indicates whether there are additional results to retrieve. If the value is null, there are no more results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The schedule groups that match the specified criteria.</p>
    pub fn schedule_groups(&self) -> std::option::Option<&[crate::model::ScheduleGroupSummary]> {
        self.schedule_groups.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListScheduleGroupsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListScheduleGroupsOutput {
    /// Creates a new builder-style object to manufacture [`ListScheduleGroupsOutput`](crate::output::ListScheduleGroupsOutput).
    pub fn builder() -> crate::output::list_schedule_groups_output::Builder {
        crate::output::list_schedule_groups_output::Builder::default()
    }
}

/// See [`ListScheduleGroupsOutput`](crate::output::ListScheduleGroupsOutput).
pub mod list_schedule_groups_output {

    /// A builder for [`ListScheduleGroupsOutput`](crate::output::ListScheduleGroupsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) schedule_groups:
            std::option::Option<std::vec::Vec<crate::model::ScheduleGroupSummary>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Indicates whether there are additional results to retrieve. If the value is null, there are no more results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>Indicates whether there are additional results to retrieve. If the value is null, there are no more results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Appends an item to `schedule_groups`.
        ///
        /// To override the contents of this collection use [`set_schedule_groups`](Self::set_schedule_groups).
        ///
        /// <p>The schedule groups that match the specified criteria.</p>
        pub fn schedule_groups(mut self, input: crate::model::ScheduleGroupSummary) -> Self {
            let mut v = self.schedule_groups.unwrap_or_default();
            v.push(input);
            self.schedule_groups = Some(v);
            self
        }
        /// <p>The schedule groups that match the specified criteria.</p>
        pub fn set_schedule_groups(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ScheduleGroupSummary>>,
        ) -> Self {
            self.schedule_groups = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListScheduleGroupsOutput`](crate::output::ListScheduleGroupsOutput).
        pub fn build(self) -> crate::output::ListScheduleGroupsOutput {
            crate::output::ListScheduleGroupsOutput {
                next_token: self.next_token,
                schedule_groups: self.schedule_groups,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateScheduleGroupOutput {
    /// <p>The Amazon Resource Name (ARN) of the schedule group.</p>
    #[doc(hidden)]
    pub schedule_group_arn: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl CreateScheduleGroupOutput {
    /// <p>The Amazon Resource Name (ARN) of the schedule group.</p>
    pub fn schedule_group_arn(&self) -> std::option::Option<&str> {
        self.schedule_group_arn.as_deref()
    }
}
impl aws_http::request_id::RequestId for CreateScheduleGroupOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateScheduleGroupOutput {
    /// Creates a new builder-style object to manufacture [`CreateScheduleGroupOutput`](crate::output::CreateScheduleGroupOutput).
    pub fn builder() -> crate::output::create_schedule_group_output::Builder {
        crate::output::create_schedule_group_output::Builder::default()
    }
}

/// See [`CreateScheduleGroupOutput`](crate::output::CreateScheduleGroupOutput).
pub mod create_schedule_group_output {

    /// A builder for [`CreateScheduleGroupOutput`](crate::output::CreateScheduleGroupOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) schedule_group_arn: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name (ARN) of the schedule group.</p>
        pub fn schedule_group_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.schedule_group_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the schedule group.</p>
        pub fn set_schedule_group_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.schedule_group_arn = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateScheduleGroupOutput`](crate::output::CreateScheduleGroupOutput).
        pub fn build(self) -> crate::output::CreateScheduleGroupOutput {
            crate::output::CreateScheduleGroupOutput {
                schedule_group_arn: self.schedule_group_arn,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteScheduleGroupOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteScheduleGroupOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteScheduleGroupOutput {
    /// Creates a new builder-style object to manufacture [`DeleteScheduleGroupOutput`](crate::output::DeleteScheduleGroupOutput).
    pub fn builder() -> crate::output::delete_schedule_group_output::Builder {
        crate::output::delete_schedule_group_output::Builder::default()
    }
}

/// See [`DeleteScheduleGroupOutput`](crate::output::DeleteScheduleGroupOutput).
pub mod delete_schedule_group_output {

    /// A builder for [`DeleteScheduleGroupOutput`](crate::output::DeleteScheduleGroupOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteScheduleGroupOutput`](crate::output::DeleteScheduleGroupOutput).
        pub fn build(self) -> crate::output::DeleteScheduleGroupOutput {
            crate::output::DeleteScheduleGroupOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetScheduleGroupOutput {
    /// <p>The Amazon Resource Name (ARN) of the schedule group.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The name of the schedule group.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>Specifies the state of the schedule group.</p>
    #[doc(hidden)]
    pub state: std::option::Option<crate::model::ScheduleGroupState>,
    /// <p>The time at which the schedule group was created.</p>
    #[doc(hidden)]
    pub creation_date: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The time at which the schedule group was last modified.</p>
    #[doc(hidden)]
    pub last_modification_date: std::option::Option<aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl GetScheduleGroupOutput {
    /// <p>The Amazon Resource Name (ARN) of the schedule group.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The name of the schedule group.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>Specifies the state of the schedule group.</p>
    pub fn state(&self) -> std::option::Option<&crate::model::ScheduleGroupState> {
        self.state.as_ref()
    }
    /// <p>The time at which the schedule group was created.</p>
    pub fn creation_date(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_date.as_ref()
    }
    /// <p>The time at which the schedule group was last modified.</p>
    pub fn last_modification_date(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_modification_date.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetScheduleGroupOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetScheduleGroupOutput {
    /// Creates a new builder-style object to manufacture [`GetScheduleGroupOutput`](crate::output::GetScheduleGroupOutput).
    pub fn builder() -> crate::output::get_schedule_group_output::Builder {
        crate::output::get_schedule_group_output::Builder::default()
    }
}

/// See [`GetScheduleGroupOutput`](crate::output::GetScheduleGroupOutput).
pub mod get_schedule_group_output {

    /// A builder for [`GetScheduleGroupOutput`](crate::output::GetScheduleGroupOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) state: std::option::Option<crate::model::ScheduleGroupState>,
        pub(crate) creation_date: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) last_modification_date: std::option::Option<aws_smithy_types::DateTime>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name (ARN) of the schedule group.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the schedule group.</p>
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// <p>The name of the schedule group.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        /// <p>The name of the schedule group.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// <p>Specifies the state of the schedule group.</p>
        pub fn state(mut self, input: crate::model::ScheduleGroupState) -> Self {
            self.state = Some(input);
            self
        }
        /// <p>Specifies the state of the schedule group.</p>
        pub fn set_state(
            mut self,
            input: std::option::Option<crate::model::ScheduleGroupState>,
        ) -> Self {
            self.state = input;
            self
        }
        /// <p>The time at which the schedule group was created.</p>
        pub fn creation_date(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.creation_date = Some(input);
            self
        }
        /// <p>The time at which the schedule group was created.</p>
        pub fn set_creation_date(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.creation_date = input;
            self
        }
        /// <p>The time at which the schedule group was last modified.</p>
        pub fn last_modification_date(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.last_modification_date = Some(input);
            self
        }
        /// <p>The time at which the schedule group was last modified.</p>
        pub fn set_last_modification_date(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.last_modification_date = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetScheduleGroupOutput`](crate::output::GetScheduleGroupOutput).
        pub fn build(self) -> crate::output::GetScheduleGroupOutput {
            crate::output::GetScheduleGroupOutput {
                arn: self.arn,
                name: self.name,
                state: self.state,
                creation_date: self.creation_date,
                last_modification_date: self.last_modification_date,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListSchedulesOutput {
    /// <p>Indicates whether there are additional results to retrieve. If the value is null, there are no more results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The schedules that match the specified criteria.</p>
    #[doc(hidden)]
    pub schedules: std::option::Option<std::vec::Vec<crate::model::ScheduleSummary>>,
    _request_id: Option<String>,
}
impl ListSchedulesOutput {
    /// <p>Indicates whether there are additional results to retrieve. If the value is null, there are no more results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The schedules that match the specified criteria.</p>
    pub fn schedules(&self) -> std::option::Option<&[crate::model::ScheduleSummary]> {
        self.schedules.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListSchedulesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListSchedulesOutput {
    /// Creates a new builder-style object to manufacture [`ListSchedulesOutput`](crate::output::ListSchedulesOutput).
    pub fn builder() -> crate::output::list_schedules_output::Builder {
        crate::output::list_schedules_output::Builder::default()
    }
}

/// See [`ListSchedulesOutput`](crate::output::ListSchedulesOutput).
pub mod list_schedules_output {

    /// A builder for [`ListSchedulesOutput`](crate::output::ListSchedulesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) schedules: std::option::Option<std::vec::Vec<crate::model::ScheduleSummary>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Indicates whether there are additional results to retrieve. If the value is null, there are no more results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>Indicates whether there are additional results to retrieve. If the value is null, there are no more results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Appends an item to `schedules`.
        ///
        /// To override the contents of this collection use [`set_schedules`](Self::set_schedules).
        ///
        /// <p>The schedules that match the specified criteria.</p>
        pub fn schedules(mut self, input: crate::model::ScheduleSummary) -> Self {
            let mut v = self.schedules.unwrap_or_default();
            v.push(input);
            self.schedules = Some(v);
            self
        }
        /// <p>The schedules that match the specified criteria.</p>
        pub fn set_schedules(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ScheduleSummary>>,
        ) -> Self {
            self.schedules = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListSchedulesOutput`](crate::output::ListSchedulesOutput).
        pub fn build(self) -> crate::output::ListSchedulesOutput {
            crate::output::ListSchedulesOutput {
                next_token: self.next_token,
                schedules: self.schedules,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateScheduleOutput {
    /// <p>The Amazon Resource Name (ARN) of the schedule.</p>
    #[doc(hidden)]
    pub schedule_arn: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl CreateScheduleOutput {
    /// <p>The Amazon Resource Name (ARN) of the schedule.</p>
    pub fn schedule_arn(&self) -> std::option::Option<&str> {
        self.schedule_arn.as_deref()
    }
}
impl aws_http::request_id::RequestId for CreateScheduleOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateScheduleOutput {
    /// Creates a new builder-style object to manufacture [`CreateScheduleOutput`](crate::output::CreateScheduleOutput).
    pub fn builder() -> crate::output::create_schedule_output::Builder {
        crate::output::create_schedule_output::Builder::default()
    }
}

/// See [`CreateScheduleOutput`](crate::output::CreateScheduleOutput).
pub mod create_schedule_output {

    /// A builder for [`CreateScheduleOutput`](crate::output::CreateScheduleOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) schedule_arn: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name (ARN) of the schedule.</p>
        pub fn schedule_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.schedule_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the schedule.</p>
        pub fn set_schedule_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.schedule_arn = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateScheduleOutput`](crate::output::CreateScheduleOutput).
        pub fn build(self) -> crate::output::CreateScheduleOutput {
            crate::output::CreateScheduleOutput {
                schedule_arn: self.schedule_arn,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteScheduleOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteScheduleOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteScheduleOutput {
    /// Creates a new builder-style object to manufacture [`DeleteScheduleOutput`](crate::output::DeleteScheduleOutput).
    pub fn builder() -> crate::output::delete_schedule_output::Builder {
        crate::output::delete_schedule_output::Builder::default()
    }
}

/// See [`DeleteScheduleOutput`](crate::output::DeleteScheduleOutput).
pub mod delete_schedule_output {

    /// A builder for [`DeleteScheduleOutput`](crate::output::DeleteScheduleOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteScheduleOutput`](crate::output::DeleteScheduleOutput).
        pub fn build(self) -> crate::output::DeleteScheduleOutput {
            crate::output::DeleteScheduleOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateScheduleOutput {
    /// <p>The Amazon Resource Name (ARN) of the schedule that you updated.</p>
    #[doc(hidden)]
    pub schedule_arn: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl UpdateScheduleOutput {
    /// <p>The Amazon Resource Name (ARN) of the schedule that you updated.</p>
    pub fn schedule_arn(&self) -> std::option::Option<&str> {
        self.schedule_arn.as_deref()
    }
}
impl aws_http::request_id::RequestId for UpdateScheduleOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateScheduleOutput {
    /// Creates a new builder-style object to manufacture [`UpdateScheduleOutput`](crate::output::UpdateScheduleOutput).
    pub fn builder() -> crate::output::update_schedule_output::Builder {
        crate::output::update_schedule_output::Builder::default()
    }
}

/// See [`UpdateScheduleOutput`](crate::output::UpdateScheduleOutput).
pub mod update_schedule_output {

    /// A builder for [`UpdateScheduleOutput`](crate::output::UpdateScheduleOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) schedule_arn: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name (ARN) of the schedule that you updated.</p>
        pub fn schedule_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.schedule_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the schedule that you updated.</p>
        pub fn set_schedule_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.schedule_arn = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateScheduleOutput`](crate::output::UpdateScheduleOutput).
        pub fn build(self) -> crate::output::UpdateScheduleOutput {
            crate::output::UpdateScheduleOutput {
                schedule_arn: self.schedule_arn,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetScheduleOutput {
    /// <p>The Amazon Resource Name (ARN) of the schedule.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The name of the schedule group associated with this schedule.</p>
    #[doc(hidden)]
    pub group_name: std::option::Option<std::string::String>,
    /// <p>The name of the schedule.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p> The expression that defines when the schedule runs. The following formats are supported. </p>
    /// <ul>
    /// <li> <p> <code>at</code> expression - <code>at(yyyy-mm-ddThh:mm:ss)</code> </p> </li>
    /// <li> <p> <code>rate</code> expression - <code>rate(unit value)</code> </p> </li>
    /// <li> <p> <code>cron</code> expression - <code>cron(fields)</code> </p> </li>
    /// </ul>
    /// <p> You can use <code>at</code> expressions to create one-time schedules that invoke a target once, at the time and in the time zone, that you specify. You can use <code>rate</code> and <code>cron</code> expressions to create recurring schedules. Rate-based schedules are useful when you want to invoke a target at regular intervals, such as every 15 minutes or every five days. Cron-based schedules are useful when you want to invoke a target periodically at a specific time, such as at 8:00 am (UTC+0) every 1st day of the month. </p>
    /// <p> A <code>cron</code> expression consists of six fields separated by white spaces: <code>(minutes hours day_of_month month day_of_week year)</code>. </p>
    /// <p> A <code>rate</code> expression consists of a <i>value</i> as a positive integer, and a <i>unit</i> with the following options: <code>minute</code> | <code>minutes</code> | <code>hour</code> | <code>hours</code> | <code>day</code> | <code>days</code> </p>
    /// <p> For more information and examples, see <a href="https://docs.aws.amazon.com/scheduler/latest/UserGuide/schedule-types.html">Schedule types on EventBridge Scheduler</a> in the <i>EventBridge Scheduler User Guide</i>. </p>
    #[doc(hidden)]
    pub schedule_expression: std::option::Option<std::string::String>,
    /// <p>The date, in UTC, after which the schedule can begin invoking its target. Depending on the schedule's recurrence expression, invocations might occur on, or after, the <code>StartDate</code> you specify. EventBridge Scheduler ignores <code>StartDate</code> for one-time schedules.</p>
    #[doc(hidden)]
    pub start_date: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The date, in UTC, before which the schedule can invoke its target. Depending on the schedule's recurrence expression, invocations might stop on, or before, the <code>EndDate</code> you specify. EventBridge Scheduler ignores <code>EndDate</code> for one-time schedules.</p>
    #[doc(hidden)]
    pub end_date: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The description of the schedule.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The timezone in which the scheduling expression is evaluated.</p>
    #[doc(hidden)]
    pub schedule_expression_timezone: std::option::Option<std::string::String>,
    /// <p>Specifies whether the schedule is enabled or disabled.</p>
    #[doc(hidden)]
    pub state: std::option::Option<crate::model::ScheduleState>,
    /// <p>The time at which the schedule was created.</p>
    #[doc(hidden)]
    pub creation_date: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The time at which the schedule was last modified.</p>
    #[doc(hidden)]
    pub last_modification_date: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The ARN for a customer managed KMS Key that is be used to encrypt and decrypt your data.</p>
    #[doc(hidden)]
    pub kms_key_arn: std::option::Option<std::string::String>,
    /// <p>The schedule target.</p>
    #[doc(hidden)]
    pub target: std::option::Option<crate::model::Target>,
    /// <p>Allows you to configure a time window during which EventBridge Scheduler invokes the schedule.</p>
    #[doc(hidden)]
    pub flexible_time_window: std::option::Option<crate::model::FlexibleTimeWindow>,
    _request_id: Option<String>,
}
impl GetScheduleOutput {
    /// <p>The Amazon Resource Name (ARN) of the schedule.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The name of the schedule group associated with this schedule.</p>
    pub fn group_name(&self) -> std::option::Option<&str> {
        self.group_name.as_deref()
    }
    /// <p>The name of the schedule.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p> The expression that defines when the schedule runs. The following formats are supported. </p>
    /// <ul>
    /// <li> <p> <code>at</code> expression - <code>at(yyyy-mm-ddThh:mm:ss)</code> </p> </li>
    /// <li> <p> <code>rate</code> expression - <code>rate(unit value)</code> </p> </li>
    /// <li> <p> <code>cron</code> expression - <code>cron(fields)</code> </p> </li>
    /// </ul>
    /// <p> You can use <code>at</code> expressions to create one-time schedules that invoke a target once, at the time and in the time zone, that you specify. You can use <code>rate</code> and <code>cron</code> expressions to create recurring schedules. Rate-based schedules are useful when you want to invoke a target at regular intervals, such as every 15 minutes or every five days. Cron-based schedules are useful when you want to invoke a target periodically at a specific time, such as at 8:00 am (UTC+0) every 1st day of the month. </p>
    /// <p> A <code>cron</code> expression consists of six fields separated by white spaces: <code>(minutes hours day_of_month month day_of_week year)</code>. </p>
    /// <p> A <code>rate</code> expression consists of a <i>value</i> as a positive integer, and a <i>unit</i> with the following options: <code>minute</code> | <code>minutes</code> | <code>hour</code> | <code>hours</code> | <code>day</code> | <code>days</code> </p>
    /// <p> For more information and examples, see <a href="https://docs.aws.amazon.com/scheduler/latest/UserGuide/schedule-types.html">Schedule types on EventBridge Scheduler</a> in the <i>EventBridge Scheduler User Guide</i>. </p>
    pub fn schedule_expression(&self) -> std::option::Option<&str> {
        self.schedule_expression.as_deref()
    }
    /// <p>The date, in UTC, after which the schedule can begin invoking its target. Depending on the schedule's recurrence expression, invocations might occur on, or after, the <code>StartDate</code> you specify. EventBridge Scheduler ignores <code>StartDate</code> for one-time schedules.</p>
    pub fn start_date(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.start_date.as_ref()
    }
    /// <p>The date, in UTC, before which the schedule can invoke its target. Depending on the schedule's recurrence expression, invocations might stop on, or before, the <code>EndDate</code> you specify. EventBridge Scheduler ignores <code>EndDate</code> for one-time schedules.</p>
    pub fn end_date(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.end_date.as_ref()
    }
    /// <p>The description of the schedule.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The timezone in which the scheduling expression is evaluated.</p>
    pub fn schedule_expression_timezone(&self) -> std::option::Option<&str> {
        self.schedule_expression_timezone.as_deref()
    }
    /// <p>Specifies whether the schedule is enabled or disabled.</p>
    pub fn state(&self) -> std::option::Option<&crate::model::ScheduleState> {
        self.state.as_ref()
    }
    /// <p>The time at which the schedule was created.</p>
    pub fn creation_date(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_date.as_ref()
    }
    /// <p>The time at which the schedule was last modified.</p>
    pub fn last_modification_date(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_modification_date.as_ref()
    }
    /// <p>The ARN for a customer managed KMS Key that is be used to encrypt and decrypt your data.</p>
    pub fn kms_key_arn(&self) -> std::option::Option<&str> {
        self.kms_key_arn.as_deref()
    }
    /// <p>The schedule target.</p>
    pub fn target(&self) -> std::option::Option<&crate::model::Target> {
        self.target.as_ref()
    }
    /// <p>Allows you to configure a time window during which EventBridge Scheduler invokes the schedule.</p>
    pub fn flexible_time_window(&self) -> std::option::Option<&crate::model::FlexibleTimeWindow> {
        self.flexible_time_window.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetScheduleOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetScheduleOutput {
    /// Creates a new builder-style object to manufacture [`GetScheduleOutput`](crate::output::GetScheduleOutput).
    pub fn builder() -> crate::output::get_schedule_output::Builder {
        crate::output::get_schedule_output::Builder::default()
    }
}

/// See [`GetScheduleOutput`](crate::output::GetScheduleOutput).
pub mod get_schedule_output {

    /// A builder for [`GetScheduleOutput`](crate::output::GetScheduleOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) group_name: std::option::Option<std::string::String>,
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) schedule_expression: std::option::Option<std::string::String>,
        pub(crate) start_date: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) end_date: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) description: std::option::Option<std::string::String>,
        pub(crate) schedule_expression_timezone: std::option::Option<std::string::String>,
        pub(crate) state: std::option::Option<crate::model::ScheduleState>,
        pub(crate) creation_date: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) last_modification_date: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) kms_key_arn: std::option::Option<std::string::String>,
        pub(crate) target: std::option::Option<crate::model::Target>,
        pub(crate) flexible_time_window: std::option::Option<crate::model::FlexibleTimeWindow>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name (ARN) of the schedule.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the schedule.</p>
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// <p>The name of the schedule group associated with this schedule.</p>
        pub fn group_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.group_name = Some(input.into());
            self
        }
        /// <p>The name of the schedule group associated with this schedule.</p>
        pub fn set_group_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.group_name = input;
            self
        }
        /// <p>The name of the schedule.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        /// <p>The name of the schedule.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// <p> The expression that defines when the schedule runs. The following formats are supported. </p>
        /// <ul>
        /// <li> <p> <code>at</code> expression - <code>at(yyyy-mm-ddThh:mm:ss)</code> </p> </li>
        /// <li> <p> <code>rate</code> expression - <code>rate(unit value)</code> </p> </li>
        /// <li> <p> <code>cron</code> expression - <code>cron(fields)</code> </p> </li>
        /// </ul>
        /// <p> You can use <code>at</code> expressions to create one-time schedules that invoke a target once, at the time and in the time zone, that you specify. You can use <code>rate</code> and <code>cron</code> expressions to create recurring schedules. Rate-based schedules are useful when you want to invoke a target at regular intervals, such as every 15 minutes or every five days. Cron-based schedules are useful when you want to invoke a target periodically at a specific time, such as at 8:00 am (UTC+0) every 1st day of the month. </p>
        /// <p> A <code>cron</code> expression consists of six fields separated by white spaces: <code>(minutes hours day_of_month month day_of_week year)</code>. </p>
        /// <p> A <code>rate</code> expression consists of a <i>value</i> as a positive integer, and a <i>unit</i> with the following options: <code>minute</code> | <code>minutes</code> | <code>hour</code> | <code>hours</code> | <code>day</code> | <code>days</code> </p>
        /// <p> For more information and examples, see <a href="https://docs.aws.amazon.com/scheduler/latest/UserGuide/schedule-types.html">Schedule types on EventBridge Scheduler</a> in the <i>EventBridge Scheduler User Guide</i>. </p>
        pub fn schedule_expression(mut self, input: impl Into<std::string::String>) -> Self {
            self.schedule_expression = Some(input.into());
            self
        }
        /// <p> The expression that defines when the schedule runs. The following formats are supported. </p>
        /// <ul>
        /// <li> <p> <code>at</code> expression - <code>at(yyyy-mm-ddThh:mm:ss)</code> </p> </li>
        /// <li> <p> <code>rate</code> expression - <code>rate(unit value)</code> </p> </li>
        /// <li> <p> <code>cron</code> expression - <code>cron(fields)</code> </p> </li>
        /// </ul>
        /// <p> You can use <code>at</code> expressions to create one-time schedules that invoke a target once, at the time and in the time zone, that you specify. You can use <code>rate</code> and <code>cron</code> expressions to create recurring schedules. Rate-based schedules are useful when you want to invoke a target at regular intervals, such as every 15 minutes or every five days. Cron-based schedules are useful when you want to invoke a target periodically at a specific time, such as at 8:00 am (UTC+0) every 1st day of the month. </p>
        /// <p> A <code>cron</code> expression consists of six fields separated by white spaces: <code>(minutes hours day_of_month month day_of_week year)</code>. </p>
        /// <p> A <code>rate</code> expression consists of a <i>value</i> as a positive integer, and a <i>unit</i> with the following options: <code>minute</code> | <code>minutes</code> | <code>hour</code> | <code>hours</code> | <code>day</code> | <code>days</code> </p>
        /// <p> For more information and examples, see <a href="https://docs.aws.amazon.com/scheduler/latest/UserGuide/schedule-types.html">Schedule types on EventBridge Scheduler</a> in the <i>EventBridge Scheduler User Guide</i>. </p>
        pub fn set_schedule_expression(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.schedule_expression = input;
            self
        }
        /// <p>The date, in UTC, after which the schedule can begin invoking its target. Depending on the schedule's recurrence expression, invocations might occur on, or after, the <code>StartDate</code> you specify. EventBridge Scheduler ignores <code>StartDate</code> for one-time schedules.</p>
        pub fn start_date(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.start_date = Some(input);
            self
        }
        /// <p>The date, in UTC, after which the schedule can begin invoking its target. Depending on the schedule's recurrence expression, invocations might occur on, or after, the <code>StartDate</code> you specify. EventBridge Scheduler ignores <code>StartDate</code> for one-time schedules.</p>
        pub fn set_start_date(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.start_date = input;
            self
        }
        /// <p>The date, in UTC, before which the schedule can invoke its target. Depending on the schedule's recurrence expression, invocations might stop on, or before, the <code>EndDate</code> you specify. EventBridge Scheduler ignores <code>EndDate</code> for one-time schedules.</p>
        pub fn end_date(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.end_date = Some(input);
            self
        }
        /// <p>The date, in UTC, before which the schedule can invoke its target. Depending on the schedule's recurrence expression, invocations might stop on, or before, the <code>EndDate</code> you specify. EventBridge Scheduler ignores <code>EndDate</code> for one-time schedules.</p>
        pub fn set_end_date(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.end_date = input;
            self
        }
        /// <p>The description of the schedule.</p>
        pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
            self.description = Some(input.into());
            self
        }
        /// <p>The description of the schedule.</p>
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.description = input;
            self
        }
        /// <p>The timezone in which the scheduling expression is evaluated.</p>
        pub fn schedule_expression_timezone(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.schedule_expression_timezone = Some(input.into());
            self
        }
        /// <p>The timezone in which the scheduling expression is evaluated.</p>
        pub fn set_schedule_expression_timezone(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.schedule_expression_timezone = input;
            self
        }
        /// <p>Specifies whether the schedule is enabled or disabled.</p>
        pub fn state(mut self, input: crate::model::ScheduleState) -> Self {
            self.state = Some(input);
            self
        }
        /// <p>Specifies whether the schedule is enabled or disabled.</p>
        pub fn set_state(
            mut self,
            input: std::option::Option<crate::model::ScheduleState>,
        ) -> Self {
            self.state = input;
            self
        }
        /// <p>The time at which the schedule was created.</p>
        pub fn creation_date(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.creation_date = Some(input);
            self
        }
        /// <p>The time at which the schedule was created.</p>
        pub fn set_creation_date(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.creation_date = input;
            self
        }
        /// <p>The time at which the schedule was last modified.</p>
        pub fn last_modification_date(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.last_modification_date = Some(input);
            self
        }
        /// <p>The time at which the schedule was last modified.</p>
        pub fn set_last_modification_date(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.last_modification_date = input;
            self
        }
        /// <p>The ARN for a customer managed KMS Key that is be used to encrypt and decrypt your data.</p>
        pub fn kms_key_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.kms_key_arn = Some(input.into());
            self
        }
        /// <p>The ARN for a customer managed KMS Key that is be used to encrypt and decrypt your data.</p>
        pub fn set_kms_key_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.kms_key_arn = input;
            self
        }
        /// <p>The schedule target.</p>
        pub fn target(mut self, input: crate::model::Target) -> Self {
            self.target = Some(input);
            self
        }
        /// <p>The schedule target.</p>
        pub fn set_target(mut self, input: std::option::Option<crate::model::Target>) -> Self {
            self.target = input;
            self
        }
        /// <p>Allows you to configure a time window during which EventBridge Scheduler invokes the schedule.</p>
        pub fn flexible_time_window(mut self, input: crate::model::FlexibleTimeWindow) -> Self {
            self.flexible_time_window = Some(input);
            self
        }
        /// <p>Allows you to configure a time window during which EventBridge Scheduler invokes the schedule.</p>
        pub fn set_flexible_time_window(
            mut self,
            input: std::option::Option<crate::model::FlexibleTimeWindow>,
        ) -> Self {
            self.flexible_time_window = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetScheduleOutput`](crate::output::GetScheduleOutput).
        pub fn build(self) -> crate::output::GetScheduleOutput {
            crate::output::GetScheduleOutput {
                arn: self.arn,
                group_name: self.group_name,
                name: self.name,
                schedule_expression: self.schedule_expression,
                start_date: self.start_date,
                end_date: self.end_date,
                description: self.description,
                schedule_expression_timezone: self.schedule_expression_timezone,
                state: self.state,
                creation_date: self.creation_date,
                last_modification_date: self.last_modification_date,
                kms_key_arn: self.kms_key_arn,
                target: self.target,
                flexible_time_window: self.flexible_time_window,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UntagResourceOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for UntagResourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UntagResourceOutput {
    /// Creates a new builder-style object to manufacture [`UntagResourceOutput`](crate::output::UntagResourceOutput).
    pub fn builder() -> crate::output::untag_resource_output::Builder {
        crate::output::untag_resource_output::Builder::default()
    }
}

/// See [`UntagResourceOutput`](crate::output::UntagResourceOutput).
pub mod untag_resource_output {

    /// A builder for [`UntagResourceOutput`](crate::output::UntagResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UntagResourceOutput`](crate::output::UntagResourceOutput).
        pub fn build(self) -> crate::output::UntagResourceOutput {
            crate::output::UntagResourceOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TagResourceOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for TagResourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl TagResourceOutput {
    /// Creates a new builder-style object to manufacture [`TagResourceOutput`](crate::output::TagResourceOutput).
    pub fn builder() -> crate::output::tag_resource_output::Builder {
        crate::output::tag_resource_output::Builder::default()
    }
}

/// See [`TagResourceOutput`](crate::output::TagResourceOutput).
pub mod tag_resource_output {

    /// A builder for [`TagResourceOutput`](crate::output::TagResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`TagResourceOutput`](crate::output::TagResourceOutput).
        pub fn build(self) -> crate::output::TagResourceOutput {
            crate::output::TagResourceOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListTagsForResourceOutput {
    /// <p>The list of tags associated with the specified resource.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    _request_id: Option<String>,
}
impl ListTagsForResourceOutput {
    /// <p>The list of tags associated with the specified resource.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::model::Tag]> {
        self.tags.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListTagsForResourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListTagsForResourceOutput {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
    pub fn builder() -> crate::output::list_tags_for_resource_output::Builder {
        crate::output::list_tags_for_resource_output::Builder::default()
    }
}

/// See [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
pub mod list_tags_for_resource_output {

    /// A builder for [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>The list of tags associated with the specified resource.</p>
        pub fn tags(mut self, input: crate::model::Tag) -> Self {
            let mut v = self.tags.unwrap_or_default();
            v.push(input);
            self.tags = Some(v);
            self
        }
        /// <p>The list of tags associated with the specified resource.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.tags = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
        pub fn build(self) -> crate::output::ListTagsForResourceOutput {
            crate::output::ListTagsForResourceOutput {
                tags: self.tags,
                _request_id: self._request_id,
            }
        }
    }
}
