// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Allows you to configure a time window during which EventBridge Scheduler invokes the schedule.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FlexibleTimeWindow {
    /// <p>Determines whether the schedule is invoked within a flexible time window.</p>
    pub mode: crate::types::FlexibleTimeWindowMode,
    /// <p>The maximum time window during which a schedule can be invoked.</p>
    pub maximum_window_in_minutes: ::std::option::Option<i32>,
}
impl FlexibleTimeWindow {
    /// <p>Determines whether the schedule is invoked within a flexible time window.</p>
    pub fn mode(&self) -> &crate::types::FlexibleTimeWindowMode {
        &self.mode
    }
    /// <p>The maximum time window during which a schedule can be invoked.</p>
    pub fn maximum_window_in_minutes(&self) -> ::std::option::Option<i32> {
        self.maximum_window_in_minutes
    }
}
impl FlexibleTimeWindow {
    /// Creates a new builder-style object to manufacture [`FlexibleTimeWindow`](crate::types::FlexibleTimeWindow).
    pub fn builder() -> crate::types::builders::FlexibleTimeWindowBuilder {
        crate::types::builders::FlexibleTimeWindowBuilder::default()
    }
}

/// A builder for [`FlexibleTimeWindow`](crate::types::FlexibleTimeWindow).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct FlexibleTimeWindowBuilder {
    pub(crate) mode: ::std::option::Option<crate::types::FlexibleTimeWindowMode>,
    pub(crate) maximum_window_in_minutes: ::std::option::Option<i32>,
}
impl FlexibleTimeWindowBuilder {
    /// <p>Determines whether the schedule is invoked within a flexible time window.</p>
    /// This field is required.
    pub fn mode(mut self, input: crate::types::FlexibleTimeWindowMode) -> Self {
        self.mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>Determines whether the schedule is invoked within a flexible time window.</p>
    pub fn set_mode(mut self, input: ::std::option::Option<crate::types::FlexibleTimeWindowMode>) -> Self {
        self.mode = input;
        self
    }
    /// <p>Determines whether the schedule is invoked within a flexible time window.</p>
    pub fn get_mode(&self) -> &::std::option::Option<crate::types::FlexibleTimeWindowMode> {
        &self.mode
    }
    /// <p>The maximum time window during which a schedule can be invoked.</p>
    pub fn maximum_window_in_minutes(mut self, input: i32) -> Self {
        self.maximum_window_in_minutes = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum time window during which a schedule can be invoked.</p>
    pub fn set_maximum_window_in_minutes(mut self, input: ::std::option::Option<i32>) -> Self {
        self.maximum_window_in_minutes = input;
        self
    }
    /// <p>The maximum time window during which a schedule can be invoked.</p>
    pub fn get_maximum_window_in_minutes(&self) -> &::std::option::Option<i32> {
        &self.maximum_window_in_minutes
    }
    /// Consumes the builder and constructs a [`FlexibleTimeWindow`](crate::types::FlexibleTimeWindow).
    /// This method will fail if any of the following fields are not set:
    /// - [`mode`](crate::types::builders::FlexibleTimeWindowBuilder::mode)
    pub fn build(self) -> ::std::result::Result<crate::types::FlexibleTimeWindow, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::FlexibleTimeWindow {
            mode: self.mode.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "mode",
                    "mode was not specified but it is required when building FlexibleTimeWindow",
                )
            })?,
            maximum_window_in_minutes: self.maximum_window_in_minutes,
        })
    }
}
