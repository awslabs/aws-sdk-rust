// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn de_activated_rule<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<
    Option<crate::types::ActivatedRule>,
    aws_smithy_json::deserialize::error::DeserializeError,
>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::ActivatedRuleBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "Priority" => {
                                builder = builder.set_priority(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "RuleId" => {
                                builder = builder.set_rule_id(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "Action" => {
                                builder = builder.set_action(
                                    crate::protocol_serde::shape_waf_action::de_waf_action(tokens)?,
                                );
                            }
                            "OverrideAction" => {
                                builder = builder.set_override_action(
                                    crate::protocol_serde::shape_waf_override_action::de_waf_override_action(tokens)?
                                );
                            }
                            "Type" => {
                                builder = builder.set_type(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped()
                                            .map(|u| crate::types::WafRuleType::from(u.as_ref()))
                                    })
                                    .transpose()?,
                                );
                            }
                            "ExcludedRules" => {
                                builder = builder.set_excluded_rules(
                                    crate::protocol_serde::shape_excluded_rules::de_excluded_rules(
                                        tokens,
                                    )?,
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}

pub fn ser_activated_rule(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::ActivatedRule,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.priority {
        object.key("Priority").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1).into()),
        );
    }
    if let Some(var_2) = &input.rule_id {
        object.key("RuleId").string(var_2.as_str());
    }
    if let Some(var_3) = &input.action {
        #[allow(unused_mut)]
        let mut object_4 = object.key("Action").start_object();
        crate::protocol_serde::shape_waf_action::ser_waf_action(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.override_action {
        #[allow(unused_mut)]
        let mut object_6 = object.key("OverrideAction").start_object();
        crate::protocol_serde::shape_waf_override_action::ser_waf_override_action(
            &mut object_6,
            var_5,
        )?;
        object_6.finish();
    }
    if let Some(var_7) = &input.r#type {
        object.key("Type").string(var_7.as_str());
    }
    if let Some(var_8) = &input.excluded_rules {
        let mut array_9 = object.key("ExcludedRules").start_array();
        for item_10 in var_8 {
            {
                #[allow(unused_mut)]
                let mut object_11 = array_9.value().start_object();
                crate::protocol_serde::shape_excluded_rule::ser_excluded_rule(
                    &mut object_11,
                    item_10,
                )?;
                object_11.finish();
            }
        }
        array_9.finish();
    }
    Ok(())
}
