// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::delete_geo_match_set::_delete_geo_match_set_output::DeleteGeoMatchSetOutputBuilder;

pub use crate::operation::delete_geo_match_set::_delete_geo_match_set_input::DeleteGeoMatchSetInputBuilder;

/// Fluent builder constructing a request to `DeleteGeoMatchSet`.
///
/// <note>
/// <p>This is <b>AWS WAF Classic</b> documentation. For more information, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html">AWS WAF Classic</a> in the developer guide.</p>
/// <p> <b>For the latest version of AWS WAF</b>, use the AWS WAFV2 API and see the <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html">AWS WAF Developer Guide</a>. With the latest version, AWS WAF has a single set of endpoints for regional and global use. </p>
/// </note>
/// <p>Permanently deletes a <code>GeoMatchSet</code>. You can't delete a <code>GeoMatchSet</code> if it's still used in any <code>Rules</code> or if it still includes any countries.</p>
/// <p>If you just want to remove a <code>GeoMatchSet</code> from a <code>Rule</code>, use <code>UpdateRule</code>.</p>
/// <p>To permanently delete a <code>GeoMatchSet</code> from AWS WAF, perform the following steps:</p>
/// <ol>
/// <li> <p>Update the <code>GeoMatchSet</code> to remove any countries. For more information, see <code>UpdateGeoMatchSet</code>.</p> </li>
/// <li> <p>Use <code>GetChangeToken</code> to get the change token that you provide in the <code>ChangeToken</code> parameter of a <code>DeleteGeoMatchSet</code> request.</p> </li>
/// <li> <p>Submit a <code>DeleteGeoMatchSet</code> request.</p> </li>
/// </ol>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteGeoMatchSetFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::delete_geo_match_set::builders::DeleteGeoMatchSetInputBuilder,
}
impl DeleteGeoMatchSetFluentBuilder {
    /// Creates a new `DeleteGeoMatchSet`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::delete_geo_match_set::DeleteGeoMatchSet,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::delete_geo_match_set::DeleteGeoMatchSetError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::delete_geo_match_set::DeleteGeoMatchSetOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::delete_geo_match_set::DeleteGeoMatchSetError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The <code>GeoMatchSetID</code> of the <code>GeoMatchSet</code> that you want to delete. <code>GeoMatchSetId</code> is returned by <code>CreateGeoMatchSet</code> and by <code>ListGeoMatchSets</code>.</p>
    pub fn geo_match_set_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.geo_match_set_id(input.into());
        self
    }
    /// <p>The <code>GeoMatchSetID</code> of the <code>GeoMatchSet</code> that you want to delete. <code>GeoMatchSetId</code> is returned by <code>CreateGeoMatchSet</code> and by <code>ListGeoMatchSets</code>.</p>
    pub fn set_geo_match_set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_geo_match_set_id(input);
        self
    }
    /// <p>The value returned by the most recent call to <code>GetChangeToken</code>.</p>
    pub fn change_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.change_token(input.into());
        self
    }
    /// <p>The value returned by the most recent call to <code>GetChangeToken</code>.</p>
    pub fn set_change_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_change_token(input);
        self
    }
}
