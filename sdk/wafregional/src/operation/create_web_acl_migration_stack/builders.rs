// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_web_acl_migration_stack::_create_web_acl_migration_stack_output::CreateWebAclMigrationStackOutputBuilder;

pub use crate::operation::create_web_acl_migration_stack::_create_web_acl_migration_stack_input::CreateWebAclMigrationStackInputBuilder;

impl crate::operation::create_web_acl_migration_stack::builders::CreateWebAclMigrationStackInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::create_web_acl_migration_stack::CreateWebAclMigrationStackOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_web_acl_migration_stack::CreateWebACLMigrationStackError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.create_web_acl_migration_stack();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CreateWebACLMigrationStack`.
///
/// <p>Creates an AWS CloudFormation WAFV2 template for the specified web ACL in the specified Amazon S3 bucket. Then, in CloudFormation, you create a stack from the template, to create the web ACL and its resources in AWS WAFV2. Use this to migrate your AWS WAF Classic web ACL to the latest version of AWS WAF.</p>
/// <p>This is part of a larger migration procedure for web ACLs from AWS WAF Classic to the latest version of AWS WAF. For the full procedure, including caveats and manual steps to complete the migration and switch over to the new web ACL, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-migrating-from-classic.html">Migrating your AWS WAF Classic resources to AWS WAF</a> in the <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html">AWS WAF Developer Guide</a>.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateWebACLMigrationStackFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_web_acl_migration_stack::builders::CreateWebAclMigrationStackInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::create_web_acl_migration_stack::CreateWebAclMigrationStackOutput,
        crate::operation::create_web_acl_migration_stack::CreateWebACLMigrationStackError,
    > for CreateWebACLMigrationStackFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::create_web_acl_migration_stack::CreateWebAclMigrationStackOutput,
            crate::operation::create_web_acl_migration_stack::CreateWebACLMigrationStackError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl CreateWebACLMigrationStackFluentBuilder {
    /// Creates a new `CreateWebACLMigrationStack`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CreateWebACLMigrationStack as a reference.
    pub fn as_input(&self) -> &crate::operation::create_web_acl_migration_stack::builders::CreateWebAclMigrationStackInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_web_acl_migration_stack::CreateWebAclMigrationStackOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_web_acl_migration_stack::CreateWebACLMigrationStackError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::create_web_acl_migration_stack::CreateWebACLMigrationStack::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::create_web_acl_migration_stack::CreateWebACLMigrationStack::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::create_web_acl_migration_stack::CreateWebAclMigrationStackOutput,
        crate::operation::create_web_acl_migration_stack::CreateWebACLMigrationStackError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The UUID of the WAF Classic web ACL that you want to migrate to WAF v2.</p>
    pub fn web_acl_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.web_acl_id(input.into());
        self
    }
    /// <p>The UUID of the WAF Classic web ACL that you want to migrate to WAF v2.</p>
    pub fn set_web_acl_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_web_acl_id(input);
        self
    }
    /// <p>The UUID of the WAF Classic web ACL that you want to migrate to WAF v2.</p>
    pub fn get_web_acl_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_web_acl_id()
    }
    /// <p>The name of the Amazon S3 bucket to store the CloudFormation template in. The S3 bucket must be configured as follows for the migration:</p>
    /// <ul>
    /// <li>
    /// <p>The bucket name must start with <code>aws-waf-migration-</code>. For example, <code>aws-waf-migration-my-web-acl</code>.</p></li>
    /// <li>
    /// <p>The bucket must be in the Region where you are deploying the template. For example, for a web ACL in us-west-2, you must use an Amazon S3 bucket in us-west-2 and you must deploy the template stack to us-west-2.</p></li>
    /// <li>
    /// <p>The bucket policies must permit the migration process to write data. For listings of the bucket policies, see the Examples section.</p></li>
    /// </ul>
    pub fn s3_bucket_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.s3_bucket_name(input.into());
        self
    }
    /// <p>The name of the Amazon S3 bucket to store the CloudFormation template in. The S3 bucket must be configured as follows for the migration:</p>
    /// <ul>
    /// <li>
    /// <p>The bucket name must start with <code>aws-waf-migration-</code>. For example, <code>aws-waf-migration-my-web-acl</code>.</p></li>
    /// <li>
    /// <p>The bucket must be in the Region where you are deploying the template. For example, for a web ACL in us-west-2, you must use an Amazon S3 bucket in us-west-2 and you must deploy the template stack to us-west-2.</p></li>
    /// <li>
    /// <p>The bucket policies must permit the migration process to write data. For listings of the bucket policies, see the Examples section.</p></li>
    /// </ul>
    pub fn set_s3_bucket_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_s3_bucket_name(input);
        self
    }
    /// <p>The name of the Amazon S3 bucket to store the CloudFormation template in. The S3 bucket must be configured as follows for the migration:</p>
    /// <ul>
    /// <li>
    /// <p>The bucket name must start with <code>aws-waf-migration-</code>. For example, <code>aws-waf-migration-my-web-acl</code>.</p></li>
    /// <li>
    /// <p>The bucket must be in the Region where you are deploying the template. For example, for a web ACL in us-west-2, you must use an Amazon S3 bucket in us-west-2 and you must deploy the template stack to us-west-2.</p></li>
    /// <li>
    /// <p>The bucket policies must permit the migration process to write data. For listings of the bucket policies, see the Examples section.</p></li>
    /// </ul>
    pub fn get_s3_bucket_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_s3_bucket_name()
    }
    /// <p>Indicates whether to exclude entities that can't be migrated or to stop the migration. Set this to true to ignore unsupported entities in the web ACL during the migration. Otherwise, if AWS WAF encounters unsupported entities, it stops the process and throws an exception.</p>
    pub fn ignore_unsupported_type(mut self, input: bool) -> Self {
        self.inner = self.inner.ignore_unsupported_type(input);
        self
    }
    /// <p>Indicates whether to exclude entities that can't be migrated or to stop the migration. Set this to true to ignore unsupported entities in the web ACL during the migration. Otherwise, if AWS WAF encounters unsupported entities, it stops the process and throws an exception.</p>
    pub fn set_ignore_unsupported_type(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_ignore_unsupported_type(input);
        self
    }
    /// <p>Indicates whether to exclude entities that can't be migrated or to stop the migration. Set this to true to ignore unsupported entities in the web ACL during the migration. Otherwise, if AWS WAF encounters unsupported entities, it stops the process and throws an exception.</p>
    pub fn get_ignore_unsupported_type(&self) -> &::std::option::Option<bool> {
        self.inner.get_ignore_unsupported_type()
    }
}
