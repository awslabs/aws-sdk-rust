// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`GetWebACLForResource`](crate::operation::get_web_acl_for_resource::builders::GetWebACLForResourceFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::operation::get_web_acl_for_resource::builders::GetWebACLForResourceFluentBuilder::resource_arn) / [`set_resource_arn(Option<String>)`](crate::operation::get_web_acl_for_resource::builders::GetWebACLForResourceFluentBuilder::set_resource_arn): <p>The ARN (Amazon Resource Name) of the resource for which to get the web ACL, either an application load balancer or Amazon API Gateway stage.</p>  <p>The ARN should be in one of the following formats:</p>  <ul>   <li> <p>For an Application Load Balancer: <code>arn:aws:elasticloadbalancing:<i>region</i>:<i>account-id</i>:loadbalancer/app/<i>load-balancer-name</i>/<i>load-balancer-id</i> </code> </p> </li>   <li> <p>For an Amazon API Gateway stage: <code>arn:aws:apigateway:<i>region</i>::/restapis/<i>api-id</i>/stages/<i>stage-name</i> </code> </p> </li>  </ul>
    /// - On success, responds with [`GetWebAclForResourceOutput`](crate::operation::get_web_acl_for_resource::GetWebAclForResourceOutput) with field(s):
    ///   - [`web_acl_summary(Option<WebAclSummary>)`](crate::operation::get_web_acl_for_resource::GetWebAclForResourceOutput::web_acl_summary): <p>Information about the web ACL that you specified in the <code>GetWebACLForResource</code> request. If there is no associated resource, a null WebACLSummary is returned.</p>
    /// - On failure, responds with [`SdkError<GetWebACLForResourceError>`](crate::operation::get_web_acl_for_resource::GetWebACLForResourceError)
    pub fn get_web_acl_for_resource(
        &self,
    ) -> crate::operation::get_web_acl_for_resource::builders::GetWebACLForResourceFluentBuilder
    {
        crate::operation::get_web_acl_for_resource::builders::GetWebACLForResourceFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
