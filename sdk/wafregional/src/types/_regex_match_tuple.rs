// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <note>
/// <p>This is <b>AWS WAF Classic</b> documentation. For more information, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html">AWS WAF Classic</a> in the developer guide.</p>
/// <p> <b>For the latest version of AWS WAF</b>, use the AWS WAFV2 API and see the <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html">AWS WAF Developer Guide</a>. With the latest version, AWS WAF has a single set of endpoints for regional and global use. </p>
/// </note>
/// <p>The regular expression pattern that you want AWS WAF to search for in web requests, the location in requests that you want AWS WAF to search, and other settings. Each <code>RegexMatchTuple</code> object contains: </p>
/// <ul>
/// <li> <p>The part of a web request that you want AWS WAF to inspect, such as a query string or the value of the <code>User-Agent</code> header. </p> </li>
/// <li> <p>The identifier of the pattern (a regular expression) that you want AWS WAF to look for. For more information, see <code>RegexPatternSet</code>. </p> </li>
/// <li> <p>Whether to perform any conversions on the request, such as converting it to lowercase, before inspecting it for the specified string.</p> </li>
/// </ul>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RegexMatchTuple {
    /// <p>Specifies where in a web request to look for the <code>RegexPatternSet</code>.</p>
    pub field_to_match: ::std::option::Option<crate::types::FieldToMatch>,
    /// <p>Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass AWS WAF. If you specify a transformation, AWS WAF performs the transformation on <code>RegexPatternSet</code> before inspecting a request for a match.</p>
    /// <p>You can only specify a single type of TextTransformation.</p>
    /// <p> <b>CMD_LINE</b> </p>
    /// <p>When you're concerned that attackers are injecting an operating system commandline command and using unusual formatting to disguise some or all of the command, use this option to perform the following transformations:</p>
    /// <ul>
    /// <li> <p>Delete the following characters: \ " ' ^</p> </li>
    /// <li> <p>Delete spaces before the following characters: / (</p> </li>
    /// <li> <p>Replace the following characters with a space: , ;</p> </li>
    /// <li> <p>Replace multiple spaces with one space</p> </li>
    /// <li> <p>Convert uppercase letters (A-Z) to lowercase (a-z)</p> </li>
    /// </ul>
    /// <p> <b>COMPRESS_WHITE_SPACE</b> </p>
    /// <p>Use this option to replace the following characters with a space character (decimal 32):</p>
    /// <ul>
    /// <li> <p>\f, formfeed, decimal 12</p> </li>
    /// <li> <p>\t, tab, decimal 9</p> </li>
    /// <li> <p>\n, newline, decimal 10</p> </li>
    /// <li> <p>\r, carriage return, decimal 13</p> </li>
    /// <li> <p>\v, vertical tab, decimal 11</p> </li>
    /// <li> <p>non-breaking space, decimal 160</p> </li>
    /// </ul>
    /// <p> <code>COMPRESS_WHITE_SPACE</code> also replaces multiple spaces with one space.</p>
    /// <p> <b>HTML_ENTITY_DECODE</b> </p>
    /// <p>Use this option to replace HTML-encoded characters with unencoded characters. <code>HTML_ENTITY_DECODE</code> performs the following operations:</p>
    /// <ul>
    /// <li> <p>Replaces <code>(ampersand)quot;</code> with <code>"</code> </p> </li>
    /// <li> <p>Replaces <code>(ampersand)nbsp;</code> with a non-breaking space, decimal 160</p> </li>
    /// <li> <p>Replaces <code>(ampersand)lt;</code> with a "less than" symbol</p> </li>
    /// <li> <p>Replaces <code>(ampersand)gt;</code> with <code>&gt;</code> </p> </li>
    /// <li> <p>Replaces characters that are represented in hexadecimal format, <code>(ampersand)#xhhhh;</code>, with the corresponding characters</p> </li>
    /// <li> <p>Replaces characters that are represented in decimal format, <code>(ampersand)#nnnn;</code>, with the corresponding characters</p> </li>
    /// </ul>
    /// <p> <b>LOWERCASE</b> </p>
    /// <p>Use this option to convert uppercase letters (A-Z) to lowercase (a-z).</p>
    /// <p> <b>URL_DECODE</b> </p>
    /// <p>Use this option to decode a URL-encoded value.</p>
    /// <p> <b>NONE</b> </p>
    /// <p>Specify <code>NONE</code> if you don't want to perform any text transformations.</p>
    pub text_transformation: crate::types::TextTransformation,
    /// <p>The <code>RegexPatternSetId</code> for a <code>RegexPatternSet</code>. You use <code>RegexPatternSetId</code> to get information about a <code>RegexPatternSet</code> (see <code>GetRegexPatternSet</code>), update a <code>RegexPatternSet</code> (see <code>UpdateRegexPatternSet</code>), insert a <code>RegexPatternSet</code> into a <code>RegexMatchSet</code> or delete one from a <code>RegexMatchSet</code> (see <code>UpdateRegexMatchSet</code>), and delete an <code>RegexPatternSet</code> from AWS WAF (see <code>DeleteRegexPatternSet</code>).</p>
    /// <p> <code>RegexPatternSetId</code> is returned by <code>CreateRegexPatternSet</code> and by <code>ListRegexPatternSets</code>.</p>
    pub regex_pattern_set_id: ::std::string::String,
}
impl RegexMatchTuple {
    /// <p>Specifies where in a web request to look for the <code>RegexPatternSet</code>.</p>
    pub fn field_to_match(&self) -> ::std::option::Option<&crate::types::FieldToMatch> {
        self.field_to_match.as_ref()
    }
    /// <p>Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass AWS WAF. If you specify a transformation, AWS WAF performs the transformation on <code>RegexPatternSet</code> before inspecting a request for a match.</p>
    /// <p>You can only specify a single type of TextTransformation.</p>
    /// <p> <b>CMD_LINE</b> </p>
    /// <p>When you're concerned that attackers are injecting an operating system commandline command and using unusual formatting to disguise some or all of the command, use this option to perform the following transformations:</p>
    /// <ul>
    /// <li> <p>Delete the following characters: \ " ' ^</p> </li>
    /// <li> <p>Delete spaces before the following characters: / (</p> </li>
    /// <li> <p>Replace the following characters with a space: , ;</p> </li>
    /// <li> <p>Replace multiple spaces with one space</p> </li>
    /// <li> <p>Convert uppercase letters (A-Z) to lowercase (a-z)</p> </li>
    /// </ul>
    /// <p> <b>COMPRESS_WHITE_SPACE</b> </p>
    /// <p>Use this option to replace the following characters with a space character (decimal 32):</p>
    /// <ul>
    /// <li> <p>\f, formfeed, decimal 12</p> </li>
    /// <li> <p>\t, tab, decimal 9</p> </li>
    /// <li> <p>\n, newline, decimal 10</p> </li>
    /// <li> <p>\r, carriage return, decimal 13</p> </li>
    /// <li> <p>\v, vertical tab, decimal 11</p> </li>
    /// <li> <p>non-breaking space, decimal 160</p> </li>
    /// </ul>
    /// <p> <code>COMPRESS_WHITE_SPACE</code> also replaces multiple spaces with one space.</p>
    /// <p> <b>HTML_ENTITY_DECODE</b> </p>
    /// <p>Use this option to replace HTML-encoded characters with unencoded characters. <code>HTML_ENTITY_DECODE</code> performs the following operations:</p>
    /// <ul>
    /// <li> <p>Replaces <code>(ampersand)quot;</code> with <code>"</code> </p> </li>
    /// <li> <p>Replaces <code>(ampersand)nbsp;</code> with a non-breaking space, decimal 160</p> </li>
    /// <li> <p>Replaces <code>(ampersand)lt;</code> with a "less than" symbol</p> </li>
    /// <li> <p>Replaces <code>(ampersand)gt;</code> with <code>&gt;</code> </p> </li>
    /// <li> <p>Replaces characters that are represented in hexadecimal format, <code>(ampersand)#xhhhh;</code>, with the corresponding characters</p> </li>
    /// <li> <p>Replaces characters that are represented in decimal format, <code>(ampersand)#nnnn;</code>, with the corresponding characters</p> </li>
    /// </ul>
    /// <p> <b>LOWERCASE</b> </p>
    /// <p>Use this option to convert uppercase letters (A-Z) to lowercase (a-z).</p>
    /// <p> <b>URL_DECODE</b> </p>
    /// <p>Use this option to decode a URL-encoded value.</p>
    /// <p> <b>NONE</b> </p>
    /// <p>Specify <code>NONE</code> if you don't want to perform any text transformations.</p>
    pub fn text_transformation(&self) -> &crate::types::TextTransformation {
        &self.text_transformation
    }
    /// <p>The <code>RegexPatternSetId</code> for a <code>RegexPatternSet</code>. You use <code>RegexPatternSetId</code> to get information about a <code>RegexPatternSet</code> (see <code>GetRegexPatternSet</code>), update a <code>RegexPatternSet</code> (see <code>UpdateRegexPatternSet</code>), insert a <code>RegexPatternSet</code> into a <code>RegexMatchSet</code> or delete one from a <code>RegexMatchSet</code> (see <code>UpdateRegexMatchSet</code>), and delete an <code>RegexPatternSet</code> from AWS WAF (see <code>DeleteRegexPatternSet</code>).</p>
    /// <p> <code>RegexPatternSetId</code> is returned by <code>CreateRegexPatternSet</code> and by <code>ListRegexPatternSets</code>.</p>
    pub fn regex_pattern_set_id(&self) -> &str {
        use std::ops::Deref;
        self.regex_pattern_set_id.deref()
    }
}
impl RegexMatchTuple {
    /// Creates a new builder-style object to manufacture [`RegexMatchTuple`](crate::types::RegexMatchTuple).
    pub fn builder() -> crate::types::builders::RegexMatchTupleBuilder {
        crate::types::builders::RegexMatchTupleBuilder::default()
    }
}

/// A builder for [`RegexMatchTuple`](crate::types::RegexMatchTuple).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RegexMatchTupleBuilder {
    pub(crate) field_to_match: ::std::option::Option<crate::types::FieldToMatch>,
    pub(crate) text_transformation: ::std::option::Option<crate::types::TextTransformation>,
    pub(crate) regex_pattern_set_id: ::std::option::Option<::std::string::String>,
}
impl RegexMatchTupleBuilder {
    /// <p>Specifies where in a web request to look for the <code>RegexPatternSet</code>.</p>
    /// This field is required.
    pub fn field_to_match(mut self, input: crate::types::FieldToMatch) -> Self {
        self.field_to_match = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies where in a web request to look for the <code>RegexPatternSet</code>.</p>
    pub fn set_field_to_match(mut self, input: ::std::option::Option<crate::types::FieldToMatch>) -> Self {
        self.field_to_match = input;
        self
    }
    /// <p>Specifies where in a web request to look for the <code>RegexPatternSet</code>.</p>
    pub fn get_field_to_match(&self) -> &::std::option::Option<crate::types::FieldToMatch> {
        &self.field_to_match
    }
    /// <p>Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass AWS WAF. If you specify a transformation, AWS WAF performs the transformation on <code>RegexPatternSet</code> before inspecting a request for a match.</p>
    /// <p>You can only specify a single type of TextTransformation.</p>
    /// <p> <b>CMD_LINE</b> </p>
    /// <p>When you're concerned that attackers are injecting an operating system commandline command and using unusual formatting to disguise some or all of the command, use this option to perform the following transformations:</p>
    /// <ul>
    /// <li> <p>Delete the following characters: \ " ' ^</p> </li>
    /// <li> <p>Delete spaces before the following characters: / (</p> </li>
    /// <li> <p>Replace the following characters with a space: , ;</p> </li>
    /// <li> <p>Replace multiple spaces with one space</p> </li>
    /// <li> <p>Convert uppercase letters (A-Z) to lowercase (a-z)</p> </li>
    /// </ul>
    /// <p> <b>COMPRESS_WHITE_SPACE</b> </p>
    /// <p>Use this option to replace the following characters with a space character (decimal 32):</p>
    /// <ul>
    /// <li> <p>\f, formfeed, decimal 12</p> </li>
    /// <li> <p>\t, tab, decimal 9</p> </li>
    /// <li> <p>\n, newline, decimal 10</p> </li>
    /// <li> <p>\r, carriage return, decimal 13</p> </li>
    /// <li> <p>\v, vertical tab, decimal 11</p> </li>
    /// <li> <p>non-breaking space, decimal 160</p> </li>
    /// </ul>
    /// <p> <code>COMPRESS_WHITE_SPACE</code> also replaces multiple spaces with one space.</p>
    /// <p> <b>HTML_ENTITY_DECODE</b> </p>
    /// <p>Use this option to replace HTML-encoded characters with unencoded characters. <code>HTML_ENTITY_DECODE</code> performs the following operations:</p>
    /// <ul>
    /// <li> <p>Replaces <code>(ampersand)quot;</code> with <code>"</code> </p> </li>
    /// <li> <p>Replaces <code>(ampersand)nbsp;</code> with a non-breaking space, decimal 160</p> </li>
    /// <li> <p>Replaces <code>(ampersand)lt;</code> with a "less than" symbol</p> </li>
    /// <li> <p>Replaces <code>(ampersand)gt;</code> with <code>&gt;</code> </p> </li>
    /// <li> <p>Replaces characters that are represented in hexadecimal format, <code>(ampersand)#xhhhh;</code>, with the corresponding characters</p> </li>
    /// <li> <p>Replaces characters that are represented in decimal format, <code>(ampersand)#nnnn;</code>, with the corresponding characters</p> </li>
    /// </ul>
    /// <p> <b>LOWERCASE</b> </p>
    /// <p>Use this option to convert uppercase letters (A-Z) to lowercase (a-z).</p>
    /// <p> <b>URL_DECODE</b> </p>
    /// <p>Use this option to decode a URL-encoded value.</p>
    /// <p> <b>NONE</b> </p>
    /// <p>Specify <code>NONE</code> if you don't want to perform any text transformations.</p>
    /// This field is required.
    pub fn text_transformation(mut self, input: crate::types::TextTransformation) -> Self {
        self.text_transformation = ::std::option::Option::Some(input);
        self
    }
    /// <p>Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass AWS WAF. If you specify a transformation, AWS WAF performs the transformation on <code>RegexPatternSet</code> before inspecting a request for a match.</p>
    /// <p>You can only specify a single type of TextTransformation.</p>
    /// <p> <b>CMD_LINE</b> </p>
    /// <p>When you're concerned that attackers are injecting an operating system commandline command and using unusual formatting to disguise some or all of the command, use this option to perform the following transformations:</p>
    /// <ul>
    /// <li> <p>Delete the following characters: \ " ' ^</p> </li>
    /// <li> <p>Delete spaces before the following characters: / (</p> </li>
    /// <li> <p>Replace the following characters with a space: , ;</p> </li>
    /// <li> <p>Replace multiple spaces with one space</p> </li>
    /// <li> <p>Convert uppercase letters (A-Z) to lowercase (a-z)</p> </li>
    /// </ul>
    /// <p> <b>COMPRESS_WHITE_SPACE</b> </p>
    /// <p>Use this option to replace the following characters with a space character (decimal 32):</p>
    /// <ul>
    /// <li> <p>\f, formfeed, decimal 12</p> </li>
    /// <li> <p>\t, tab, decimal 9</p> </li>
    /// <li> <p>\n, newline, decimal 10</p> </li>
    /// <li> <p>\r, carriage return, decimal 13</p> </li>
    /// <li> <p>\v, vertical tab, decimal 11</p> </li>
    /// <li> <p>non-breaking space, decimal 160</p> </li>
    /// </ul>
    /// <p> <code>COMPRESS_WHITE_SPACE</code> also replaces multiple spaces with one space.</p>
    /// <p> <b>HTML_ENTITY_DECODE</b> </p>
    /// <p>Use this option to replace HTML-encoded characters with unencoded characters. <code>HTML_ENTITY_DECODE</code> performs the following operations:</p>
    /// <ul>
    /// <li> <p>Replaces <code>(ampersand)quot;</code> with <code>"</code> </p> </li>
    /// <li> <p>Replaces <code>(ampersand)nbsp;</code> with a non-breaking space, decimal 160</p> </li>
    /// <li> <p>Replaces <code>(ampersand)lt;</code> with a "less than" symbol</p> </li>
    /// <li> <p>Replaces <code>(ampersand)gt;</code> with <code>&gt;</code> </p> </li>
    /// <li> <p>Replaces characters that are represented in hexadecimal format, <code>(ampersand)#xhhhh;</code>, with the corresponding characters</p> </li>
    /// <li> <p>Replaces characters that are represented in decimal format, <code>(ampersand)#nnnn;</code>, with the corresponding characters</p> </li>
    /// </ul>
    /// <p> <b>LOWERCASE</b> </p>
    /// <p>Use this option to convert uppercase letters (A-Z) to lowercase (a-z).</p>
    /// <p> <b>URL_DECODE</b> </p>
    /// <p>Use this option to decode a URL-encoded value.</p>
    /// <p> <b>NONE</b> </p>
    /// <p>Specify <code>NONE</code> if you don't want to perform any text transformations.</p>
    pub fn set_text_transformation(mut self, input: ::std::option::Option<crate::types::TextTransformation>) -> Self {
        self.text_transformation = input;
        self
    }
    /// <p>Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass AWS WAF. If you specify a transformation, AWS WAF performs the transformation on <code>RegexPatternSet</code> before inspecting a request for a match.</p>
    /// <p>You can only specify a single type of TextTransformation.</p>
    /// <p> <b>CMD_LINE</b> </p>
    /// <p>When you're concerned that attackers are injecting an operating system commandline command and using unusual formatting to disguise some or all of the command, use this option to perform the following transformations:</p>
    /// <ul>
    /// <li> <p>Delete the following characters: \ " ' ^</p> </li>
    /// <li> <p>Delete spaces before the following characters: / (</p> </li>
    /// <li> <p>Replace the following characters with a space: , ;</p> </li>
    /// <li> <p>Replace multiple spaces with one space</p> </li>
    /// <li> <p>Convert uppercase letters (A-Z) to lowercase (a-z)</p> </li>
    /// </ul>
    /// <p> <b>COMPRESS_WHITE_SPACE</b> </p>
    /// <p>Use this option to replace the following characters with a space character (decimal 32):</p>
    /// <ul>
    /// <li> <p>\f, formfeed, decimal 12</p> </li>
    /// <li> <p>\t, tab, decimal 9</p> </li>
    /// <li> <p>\n, newline, decimal 10</p> </li>
    /// <li> <p>\r, carriage return, decimal 13</p> </li>
    /// <li> <p>\v, vertical tab, decimal 11</p> </li>
    /// <li> <p>non-breaking space, decimal 160</p> </li>
    /// </ul>
    /// <p> <code>COMPRESS_WHITE_SPACE</code> also replaces multiple spaces with one space.</p>
    /// <p> <b>HTML_ENTITY_DECODE</b> </p>
    /// <p>Use this option to replace HTML-encoded characters with unencoded characters. <code>HTML_ENTITY_DECODE</code> performs the following operations:</p>
    /// <ul>
    /// <li> <p>Replaces <code>(ampersand)quot;</code> with <code>"</code> </p> </li>
    /// <li> <p>Replaces <code>(ampersand)nbsp;</code> with a non-breaking space, decimal 160</p> </li>
    /// <li> <p>Replaces <code>(ampersand)lt;</code> with a "less than" symbol</p> </li>
    /// <li> <p>Replaces <code>(ampersand)gt;</code> with <code>&gt;</code> </p> </li>
    /// <li> <p>Replaces characters that are represented in hexadecimal format, <code>(ampersand)#xhhhh;</code>, with the corresponding characters</p> </li>
    /// <li> <p>Replaces characters that are represented in decimal format, <code>(ampersand)#nnnn;</code>, with the corresponding characters</p> </li>
    /// </ul>
    /// <p> <b>LOWERCASE</b> </p>
    /// <p>Use this option to convert uppercase letters (A-Z) to lowercase (a-z).</p>
    /// <p> <b>URL_DECODE</b> </p>
    /// <p>Use this option to decode a URL-encoded value.</p>
    /// <p> <b>NONE</b> </p>
    /// <p>Specify <code>NONE</code> if you don't want to perform any text transformations.</p>
    pub fn get_text_transformation(&self) -> &::std::option::Option<crate::types::TextTransformation> {
        &self.text_transformation
    }
    /// <p>The <code>RegexPatternSetId</code> for a <code>RegexPatternSet</code>. You use <code>RegexPatternSetId</code> to get information about a <code>RegexPatternSet</code> (see <code>GetRegexPatternSet</code>), update a <code>RegexPatternSet</code> (see <code>UpdateRegexPatternSet</code>), insert a <code>RegexPatternSet</code> into a <code>RegexMatchSet</code> or delete one from a <code>RegexMatchSet</code> (see <code>UpdateRegexMatchSet</code>), and delete an <code>RegexPatternSet</code> from AWS WAF (see <code>DeleteRegexPatternSet</code>).</p>
    /// <p> <code>RegexPatternSetId</code> is returned by <code>CreateRegexPatternSet</code> and by <code>ListRegexPatternSets</code>.</p>
    /// This field is required.
    pub fn regex_pattern_set_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.regex_pattern_set_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The <code>RegexPatternSetId</code> for a <code>RegexPatternSet</code>. You use <code>RegexPatternSetId</code> to get information about a <code>RegexPatternSet</code> (see <code>GetRegexPatternSet</code>), update a <code>RegexPatternSet</code> (see <code>UpdateRegexPatternSet</code>), insert a <code>RegexPatternSet</code> into a <code>RegexMatchSet</code> or delete one from a <code>RegexMatchSet</code> (see <code>UpdateRegexMatchSet</code>), and delete an <code>RegexPatternSet</code> from AWS WAF (see <code>DeleteRegexPatternSet</code>).</p>
    /// <p> <code>RegexPatternSetId</code> is returned by <code>CreateRegexPatternSet</code> and by <code>ListRegexPatternSets</code>.</p>
    pub fn set_regex_pattern_set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.regex_pattern_set_id = input;
        self
    }
    /// <p>The <code>RegexPatternSetId</code> for a <code>RegexPatternSet</code>. You use <code>RegexPatternSetId</code> to get information about a <code>RegexPatternSet</code> (see <code>GetRegexPatternSet</code>), update a <code>RegexPatternSet</code> (see <code>UpdateRegexPatternSet</code>), insert a <code>RegexPatternSet</code> into a <code>RegexMatchSet</code> or delete one from a <code>RegexMatchSet</code> (see <code>UpdateRegexMatchSet</code>), and delete an <code>RegexPatternSet</code> from AWS WAF (see <code>DeleteRegexPatternSet</code>).</p>
    /// <p> <code>RegexPatternSetId</code> is returned by <code>CreateRegexPatternSet</code> and by <code>ListRegexPatternSets</code>.</p>
    pub fn get_regex_pattern_set_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.regex_pattern_set_id
    }
    /// Consumes the builder and constructs a [`RegexMatchTuple`](crate::types::RegexMatchTuple).
    /// This method will fail if any of the following fields are not set:
    /// - [`text_transformation`](crate::types::builders::RegexMatchTupleBuilder::text_transformation)
    /// - [`regex_pattern_set_id`](crate::types::builders::RegexMatchTupleBuilder::regex_pattern_set_id)
    pub fn build(self) -> ::std::result::Result<crate::types::RegexMatchTuple, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::RegexMatchTuple {
            field_to_match: self.field_to_match,
            text_transformation: self.text_transformation.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "text_transformation",
                    "text_transformation was not specified but it is required when building RegexMatchTuple",
                )
            })?,
            regex_pattern_set_id: self.regex_pattern_set_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "regex_pattern_set_id",
                    "regex_pattern_set_id was not specified but it is required when building RegexMatchTuple",
                )
            })?,
        })
    }
}
