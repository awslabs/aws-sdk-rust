// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <note>
/// <p>This is <b>AWS WAF Classic</b> documentation. For more information, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html">AWS WAF Classic</a> in the developer guide.</p>
/// <p> <b>For the latest version of AWS WAF</b>, use the AWS WAFV2 API and see the <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html">AWS WAF Developer Guide</a>. With the latest version, AWS WAF has a single set of endpoints for regional and global use. </p>
/// </note>
/// <p>Contains one or more countries that AWS WAF will search for.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GeoMatchSet {
    /// <p>The <code>GeoMatchSetId</code> for an <code>GeoMatchSet</code>. You use <code>GeoMatchSetId</code> to get information about a <code>GeoMatchSet</code> (see <code>GeoMatchSet</code>), update a <code>GeoMatchSet</code> (see <code>UpdateGeoMatchSet</code>), insert a <code>GeoMatchSet</code> into a <code>Rule</code> or delete one from a <code>Rule</code> (see <code>UpdateRule</code>), and delete a <code>GeoMatchSet</code> from AWS WAF (see <code>DeleteGeoMatchSet</code>).</p>
    /// <p> <code>GeoMatchSetId</code> is returned by <code>CreateGeoMatchSet</code> and by <code>ListGeoMatchSets</code>.</p>
    pub geo_match_set_id: ::std::string::String,
    /// <p>A friendly name or description of the <code>GeoMatchSet</code>. You can't change the name of an <code>GeoMatchSet</code> after you create it.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>An array of <code>GeoMatchConstraint</code> objects, which contain the country that you want AWS WAF to search for.</p>
    pub geo_match_constraints: ::std::vec::Vec<crate::types::GeoMatchConstraint>,
}
impl GeoMatchSet {
    /// <p>The <code>GeoMatchSetId</code> for an <code>GeoMatchSet</code>. You use <code>GeoMatchSetId</code> to get information about a <code>GeoMatchSet</code> (see <code>GeoMatchSet</code>), update a <code>GeoMatchSet</code> (see <code>UpdateGeoMatchSet</code>), insert a <code>GeoMatchSet</code> into a <code>Rule</code> or delete one from a <code>Rule</code> (see <code>UpdateRule</code>), and delete a <code>GeoMatchSet</code> from AWS WAF (see <code>DeleteGeoMatchSet</code>).</p>
    /// <p> <code>GeoMatchSetId</code> is returned by <code>CreateGeoMatchSet</code> and by <code>ListGeoMatchSets</code>.</p>
    pub fn geo_match_set_id(&self) -> &str {
        use std::ops::Deref;
        self.geo_match_set_id.deref()
    }
    /// <p>A friendly name or description of the <code>GeoMatchSet</code>. You can't change the name of an <code>GeoMatchSet</code> after you create it.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>An array of <code>GeoMatchConstraint</code> objects, which contain the country that you want AWS WAF to search for.</p>
    pub fn geo_match_constraints(&self) -> &[crate::types::GeoMatchConstraint] {
        use std::ops::Deref;
        self.geo_match_constraints.deref()
    }
}
impl GeoMatchSet {
    /// Creates a new builder-style object to manufacture [`GeoMatchSet`](crate::types::GeoMatchSet).
    pub fn builder() -> crate::types::builders::GeoMatchSetBuilder {
        crate::types::builders::GeoMatchSetBuilder::default()
    }
}

/// A builder for [`GeoMatchSet`](crate::types::GeoMatchSet).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GeoMatchSetBuilder {
    pub(crate) geo_match_set_id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) geo_match_constraints: ::std::option::Option<::std::vec::Vec<crate::types::GeoMatchConstraint>>,
}
impl GeoMatchSetBuilder {
    /// <p>The <code>GeoMatchSetId</code> for an <code>GeoMatchSet</code>. You use <code>GeoMatchSetId</code> to get information about a <code>GeoMatchSet</code> (see <code>GeoMatchSet</code>), update a <code>GeoMatchSet</code> (see <code>UpdateGeoMatchSet</code>), insert a <code>GeoMatchSet</code> into a <code>Rule</code> or delete one from a <code>Rule</code> (see <code>UpdateRule</code>), and delete a <code>GeoMatchSet</code> from AWS WAF (see <code>DeleteGeoMatchSet</code>).</p>
    /// <p> <code>GeoMatchSetId</code> is returned by <code>CreateGeoMatchSet</code> and by <code>ListGeoMatchSets</code>.</p>
    /// This field is required.
    pub fn geo_match_set_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.geo_match_set_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The <code>GeoMatchSetId</code> for an <code>GeoMatchSet</code>. You use <code>GeoMatchSetId</code> to get information about a <code>GeoMatchSet</code> (see <code>GeoMatchSet</code>), update a <code>GeoMatchSet</code> (see <code>UpdateGeoMatchSet</code>), insert a <code>GeoMatchSet</code> into a <code>Rule</code> or delete one from a <code>Rule</code> (see <code>UpdateRule</code>), and delete a <code>GeoMatchSet</code> from AWS WAF (see <code>DeleteGeoMatchSet</code>).</p>
    /// <p> <code>GeoMatchSetId</code> is returned by <code>CreateGeoMatchSet</code> and by <code>ListGeoMatchSets</code>.</p>
    pub fn set_geo_match_set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.geo_match_set_id = input;
        self
    }
    /// <p>The <code>GeoMatchSetId</code> for an <code>GeoMatchSet</code>. You use <code>GeoMatchSetId</code> to get information about a <code>GeoMatchSet</code> (see <code>GeoMatchSet</code>), update a <code>GeoMatchSet</code> (see <code>UpdateGeoMatchSet</code>), insert a <code>GeoMatchSet</code> into a <code>Rule</code> or delete one from a <code>Rule</code> (see <code>UpdateRule</code>), and delete a <code>GeoMatchSet</code> from AWS WAF (see <code>DeleteGeoMatchSet</code>).</p>
    /// <p> <code>GeoMatchSetId</code> is returned by <code>CreateGeoMatchSet</code> and by <code>ListGeoMatchSets</code>.</p>
    pub fn get_geo_match_set_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.geo_match_set_id
    }
    /// <p>A friendly name or description of the <code>GeoMatchSet</code>. You can't change the name of an <code>GeoMatchSet</code> after you create it.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A friendly name or description of the <code>GeoMatchSet</code>. You can't change the name of an <code>GeoMatchSet</code> after you create it.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>A friendly name or description of the <code>GeoMatchSet</code>. You can't change the name of an <code>GeoMatchSet</code> after you create it.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// Appends an item to `geo_match_constraints`.
    ///
    /// To override the contents of this collection use [`set_geo_match_constraints`](Self::set_geo_match_constraints).
    ///
    /// <p>An array of <code>GeoMatchConstraint</code> objects, which contain the country that you want AWS WAF to search for.</p>
    pub fn geo_match_constraints(mut self, input: crate::types::GeoMatchConstraint) -> Self {
        let mut v = self.geo_match_constraints.unwrap_or_default();
        v.push(input);
        self.geo_match_constraints = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of <code>GeoMatchConstraint</code> objects, which contain the country that you want AWS WAF to search for.</p>
    pub fn set_geo_match_constraints(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::GeoMatchConstraint>>) -> Self {
        self.geo_match_constraints = input;
        self
    }
    /// <p>An array of <code>GeoMatchConstraint</code> objects, which contain the country that you want AWS WAF to search for.</p>
    pub fn get_geo_match_constraints(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::GeoMatchConstraint>> {
        &self.geo_match_constraints
    }
    /// Consumes the builder and constructs a [`GeoMatchSet`](crate::types::GeoMatchSet).
    /// This method will fail if any of the following fields are not set:
    /// - [`geo_match_set_id`](crate::types::builders::GeoMatchSetBuilder::geo_match_set_id)
    /// - [`geo_match_constraints`](crate::types::builders::GeoMatchSetBuilder::geo_match_constraints)
    pub fn build(self) -> ::std::result::Result<crate::types::GeoMatchSet, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::GeoMatchSet {
            geo_match_set_id: self.geo_match_set_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "geo_match_set_id",
                    "geo_match_set_id was not specified but it is required when building GeoMatchSet",
                )
            })?,
            name: self.name,
            geo_match_constraints: self.geo_match_constraints.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "geo_match_constraints",
                    "geo_match_constraints was not specified but it is required when building GeoMatchSet",
                )
            })?,
        })
    }
}
