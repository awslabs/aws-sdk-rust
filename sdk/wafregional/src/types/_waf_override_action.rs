// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <note>
/// <p>This is <b>AWS WAF Classic</b> documentation. For more information, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html">AWS WAF Classic</a> in the developer guide.</p>
/// <p> <b>For the latest version of AWS WAF</b>, use the AWS WAFV2 API and see the <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html">AWS WAF Developer Guide</a>. With the latest version, AWS WAF has a single set of endpoints for regional and global use. </p>
/// </note>
/// <p>The action to take if any rule within the <code>RuleGroup</code> matches a request. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct WafOverrideAction {
    /// <p> <code>COUNT</code> overrides the action specified by the individual rule within a <code>RuleGroup</code> . If set to <code>NONE</code>, the rule's action will take place.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::WafOverrideActionType>,
}
impl WafOverrideAction {
    /// <p> <code>COUNT</code> overrides the action specified by the individual rule within a <code>RuleGroup</code> . If set to <code>NONE</code>, the rule's action will take place.</p>
    pub fn r#type(&self) -> std::option::Option<&crate::types::WafOverrideActionType> {
        self.r#type.as_ref()
    }
}
impl WafOverrideAction {
    /// Creates a new builder-style object to manufacture [`WafOverrideAction`](crate::types::WafOverrideAction).
    pub fn builder() -> crate::types::builders::WafOverrideActionBuilder {
        crate::types::builders::WafOverrideActionBuilder::default()
    }
}

/// A builder for [`WafOverrideAction`](crate::types::WafOverrideAction).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct WafOverrideActionBuilder {
    pub(crate) r#type: std::option::Option<crate::types::WafOverrideActionType>,
}
impl WafOverrideActionBuilder {
    /// <p> <code>COUNT</code> overrides the action specified by the individual rule within a <code>RuleGroup</code> . If set to <code>NONE</code>, the rule's action will take place.</p>
    pub fn r#type(mut self, input: crate::types::WafOverrideActionType) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p> <code>COUNT</code> overrides the action specified by the individual rule within a <code>RuleGroup</code> . If set to <code>NONE</code>, the rule's action will take place.</p>
    pub fn set_type(
        mut self,
        input: std::option::Option<crate::types::WafOverrideActionType>,
    ) -> Self {
        self.r#type = input;
        self
    }
    /// Consumes the builder and constructs a [`WafOverrideAction`](crate::types::WafOverrideAction).
    pub fn build(self) -> crate::types::WafOverrideAction {
        crate::types::WafOverrideAction {
            r#type: self.r#type,
        }
    }
}
