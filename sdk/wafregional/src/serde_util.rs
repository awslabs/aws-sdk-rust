// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn create_web_acl_migration_stack_output_correct_errors(
    mut builder: crate::operation::create_web_acl_migration_stack::builders::CreateWebAclMigrationStackOutputBuilder,
) -> crate::operation::create_web_acl_migration_stack::builders::CreateWebAclMigrationStackOutputBuilder {
    if builder.s3_object_url.is_none() {
        builder.s3_object_url = Some(Default::default())
    }
    builder
}

pub(crate) fn byte_match_set_correct_errors(mut builder: crate::types::builders::ByteMatchSetBuilder) -> crate::types::builders::ByteMatchSetBuilder {
    if builder.byte_match_set_id.is_none() {
        builder.byte_match_set_id = Some(Default::default())
    }
    if builder.byte_match_tuples.is_none() {
        builder.byte_match_tuples = Some(Default::default())
    }
    builder
}

pub(crate) fn geo_match_set_correct_errors(mut builder: crate::types::builders::GeoMatchSetBuilder) -> crate::types::builders::GeoMatchSetBuilder {
    if builder.geo_match_set_id.is_none() {
        builder.geo_match_set_id = Some(Default::default())
    }
    if builder.geo_match_constraints.is_none() {
        builder.geo_match_constraints = Some(Default::default())
    }
    builder
}

pub(crate) fn ip_set_correct_errors(mut builder: crate::types::builders::IpSetBuilder) -> crate::types::builders::IpSetBuilder {
    if builder.ip_set_id.is_none() {
        builder.ip_set_id = Some(Default::default())
    }
    if builder.ip_set_descriptors.is_none() {
        builder.ip_set_descriptors = Some(Default::default())
    }
    builder
}

pub(crate) fn logging_configuration_correct_errors(
    mut builder: crate::types::builders::LoggingConfigurationBuilder,
) -> crate::types::builders::LoggingConfigurationBuilder {
    if builder.resource_arn.is_none() {
        builder.resource_arn = Some(Default::default())
    }
    if builder.log_destination_configs.is_none() {
        builder.log_destination_configs = Some(Default::default())
    }
    builder
}

pub(crate) fn rate_based_rule_correct_errors(
    mut builder: crate::types::builders::RateBasedRuleBuilder,
) -> crate::types::builders::RateBasedRuleBuilder {
    if builder.rule_id.is_none() {
        builder.rule_id = Some(Default::default())
    }
    if builder.match_predicates.is_none() {
        builder.match_predicates = Some(Default::default())
    }
    if builder.rate_key.is_none() {
        builder.rate_key = "no value was set".parse::<crate::types::RateKey>().ok()
    }
    if builder.rate_limit.is_none() {
        builder.rate_limit = Some(Default::default())
    }
    builder
}

pub(crate) fn regex_pattern_set_correct_errors(
    mut builder: crate::types::builders::RegexPatternSetBuilder,
) -> crate::types::builders::RegexPatternSetBuilder {
    if builder.regex_pattern_set_id.is_none() {
        builder.regex_pattern_set_id = Some(Default::default())
    }
    if builder.regex_pattern_strings.is_none() {
        builder.regex_pattern_strings = Some(Default::default())
    }
    builder
}

pub(crate) fn rule_correct_errors(mut builder: crate::types::builders::RuleBuilder) -> crate::types::builders::RuleBuilder {
    if builder.rule_id.is_none() {
        builder.rule_id = Some(Default::default())
    }
    if builder.predicates.is_none() {
        builder.predicates = Some(Default::default())
    }
    builder
}

pub(crate) fn rule_group_correct_errors(mut builder: crate::types::builders::RuleGroupBuilder) -> crate::types::builders::RuleGroupBuilder {
    if builder.rule_group_id.is_none() {
        builder.rule_group_id = Some(Default::default())
    }
    builder
}

pub(crate) fn size_constraint_set_correct_errors(
    mut builder: crate::types::builders::SizeConstraintSetBuilder,
) -> crate::types::builders::SizeConstraintSetBuilder {
    if builder.size_constraint_set_id.is_none() {
        builder.size_constraint_set_id = Some(Default::default())
    }
    if builder.size_constraints.is_none() {
        builder.size_constraints = Some(Default::default())
    }
    builder
}

pub(crate) fn sql_injection_match_set_correct_errors(
    mut builder: crate::types::builders::SqlInjectionMatchSetBuilder,
) -> crate::types::builders::SqlInjectionMatchSetBuilder {
    if builder.sql_injection_match_set_id.is_none() {
        builder.sql_injection_match_set_id = Some(Default::default())
    }
    if builder.sql_injection_match_tuples.is_none() {
        builder.sql_injection_match_tuples = Some(Default::default())
    }
    builder
}

pub(crate) fn time_window_correct_errors(mut builder: crate::types::builders::TimeWindowBuilder) -> crate::types::builders::TimeWindowBuilder {
    if builder.start_time.is_none() {
        builder.start_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.end_time.is_none() {
        builder.end_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn web_acl_correct_errors(mut builder: crate::types::builders::WebAclBuilder) -> crate::types::builders::WebAclBuilder {
    if builder.web_acl_id.is_none() {
        builder.web_acl_id = Some(Default::default())
    }
    if builder.default_action.is_none() {
        builder.default_action = {
            let builder = crate::types::builders::WafActionBuilder::default();
            crate::serde_util::waf_action_correct_errors(builder).build().ok()
        }
    }
    if builder.rules.is_none() {
        builder.rules = Some(Default::default())
    }
    builder
}

pub(crate) fn web_acl_summary_correct_errors(
    mut builder: crate::types::builders::WebAclSummaryBuilder,
) -> crate::types::builders::WebAclSummaryBuilder {
    if builder.web_acl_id.is_none() {
        builder.web_acl_id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn xss_match_set_correct_errors(mut builder: crate::types::builders::XssMatchSetBuilder) -> crate::types::builders::XssMatchSetBuilder {
    if builder.xss_match_set_id.is_none() {
        builder.xss_match_set_id = Some(Default::default())
    }
    if builder.xss_match_tuples.is_none() {
        builder.xss_match_tuples = Some(Default::default())
    }
    builder
}

pub(crate) fn activated_rule_correct_errors(
    mut builder: crate::types::builders::ActivatedRuleBuilder,
) -> crate::types::builders::ActivatedRuleBuilder {
    if builder.priority.is_none() {
        builder.priority = Some(Default::default())
    }
    if builder.rule_id.is_none() {
        builder.rule_id = Some(Default::default())
    }
    builder
}

pub(crate) fn byte_match_set_summary_correct_errors(
    mut builder: crate::types::builders::ByteMatchSetSummaryBuilder,
) -> crate::types::builders::ByteMatchSetSummaryBuilder {
    if builder.byte_match_set_id.is_none() {
        builder.byte_match_set_id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn geo_match_set_summary_correct_errors(
    mut builder: crate::types::builders::GeoMatchSetSummaryBuilder,
) -> crate::types::builders::GeoMatchSetSummaryBuilder {
    if builder.geo_match_set_id.is_none() {
        builder.geo_match_set_id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn ip_set_summary_correct_errors(mut builder: crate::types::builders::IpSetSummaryBuilder) -> crate::types::builders::IpSetSummaryBuilder {
    if builder.ip_set_id.is_none() {
        builder.ip_set_id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn regex_match_set_summary_correct_errors(
    mut builder: crate::types::builders::RegexMatchSetSummaryBuilder,
) -> crate::types::builders::RegexMatchSetSummaryBuilder {
    if builder.regex_match_set_id.is_none() {
        builder.regex_match_set_id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn regex_pattern_set_summary_correct_errors(
    mut builder: crate::types::builders::RegexPatternSetSummaryBuilder,
) -> crate::types::builders::RegexPatternSetSummaryBuilder {
    if builder.regex_pattern_set_id.is_none() {
        builder.regex_pattern_set_id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn rule_group_summary_correct_errors(
    mut builder: crate::types::builders::RuleGroupSummaryBuilder,
) -> crate::types::builders::RuleGroupSummaryBuilder {
    if builder.rule_group_id.is_none() {
        builder.rule_group_id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn rule_summary_correct_errors(mut builder: crate::types::builders::RuleSummaryBuilder) -> crate::types::builders::RuleSummaryBuilder {
    if builder.rule_id.is_none() {
        builder.rule_id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn sampled_http_request_correct_errors(
    mut builder: crate::types::builders::SampledHttpRequestBuilder,
) -> crate::types::builders::SampledHttpRequestBuilder {
    if builder.request.is_none() {
        builder.request = {
            let builder = crate::types::builders::HttpRequestBuilder::default();
            Some(builder.build())
        }
    }
    if builder.weight.is_none() {
        builder.weight = Some(Default::default())
    }
    builder
}

pub(crate) fn size_constraint_set_summary_correct_errors(
    mut builder: crate::types::builders::SizeConstraintSetSummaryBuilder,
) -> crate::types::builders::SizeConstraintSetSummaryBuilder {
    if builder.size_constraint_set_id.is_none() {
        builder.size_constraint_set_id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn sql_injection_match_set_summary_correct_errors(
    mut builder: crate::types::builders::SqlInjectionMatchSetSummaryBuilder,
) -> crate::types::builders::SqlInjectionMatchSetSummaryBuilder {
    if builder.sql_injection_match_set_id.is_none() {
        builder.sql_injection_match_set_id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn subscribed_rule_group_summary_correct_errors(
    mut builder: crate::types::builders::SubscribedRuleGroupSummaryBuilder,
) -> crate::types::builders::SubscribedRuleGroupSummaryBuilder {
    if builder.rule_group_id.is_none() {
        builder.rule_group_id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.metric_name.is_none() {
        builder.metric_name = Some(Default::default())
    }
    builder
}

pub(crate) fn waf_action_correct_errors(mut builder: crate::types::builders::WafActionBuilder) -> crate::types::builders::WafActionBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::WafActionType>().ok()
    }
    builder
}

pub(crate) fn xss_match_set_summary_correct_errors(
    mut builder: crate::types::builders::XssMatchSetSummaryBuilder,
) -> crate::types::builders::XssMatchSetSummaryBuilder {
    if builder.xss_match_set_id.is_none() {
        builder.xss_match_set_id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn byte_match_tuple_correct_errors(
    mut builder: crate::types::builders::ByteMatchTupleBuilder,
) -> crate::types::builders::ByteMatchTupleBuilder {
    if builder.field_to_match.is_none() {
        builder.field_to_match = {
            let builder = crate::types::builders::FieldToMatchBuilder::default();
            crate::serde_util::field_to_match_correct_errors(builder).build().ok()
        }
    }
    if builder.target_string.is_none() {
        builder.target_string = Some(::aws_smithy_types::Blob::new(""))
    }
    if builder.text_transformation.is_none() {
        builder.text_transformation = "no value was set".parse::<crate::types::TextTransformation>().ok()
    }
    if builder.positional_constraint.is_none() {
        builder.positional_constraint = "no value was set".parse::<crate::types::PositionalConstraint>().ok()
    }
    builder
}

pub(crate) fn field_to_match_correct_errors(mut builder: crate::types::builders::FieldToMatchBuilder) -> crate::types::builders::FieldToMatchBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::MatchFieldType>().ok()
    }
    builder
}

pub(crate) fn geo_match_constraint_correct_errors(
    mut builder: crate::types::builders::GeoMatchConstraintBuilder,
) -> crate::types::builders::GeoMatchConstraintBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::GeoMatchConstraintType>().ok()
    }
    if builder.value.is_none() {
        builder.value = "no value was set".parse::<crate::types::GeoMatchConstraintValue>().ok()
    }
    builder
}

pub(crate) fn ip_set_descriptor_correct_errors(
    mut builder: crate::types::builders::IpSetDescriptorBuilder,
) -> crate::types::builders::IpSetDescriptorBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::IpSetDescriptorType>().ok()
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn predicate_correct_errors(mut builder: crate::types::builders::PredicateBuilder) -> crate::types::builders::PredicateBuilder {
    if builder.negated.is_none() {
        builder.negated = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::PredicateType>().ok()
    }
    if builder.data_id.is_none() {
        builder.data_id = Some(Default::default())
    }
    builder
}

pub(crate) fn regex_match_tuple_correct_errors(
    mut builder: crate::types::builders::RegexMatchTupleBuilder,
) -> crate::types::builders::RegexMatchTupleBuilder {
    if builder.field_to_match.is_none() {
        builder.field_to_match = {
            let builder = crate::types::builders::FieldToMatchBuilder::default();
            crate::serde_util::field_to_match_correct_errors(builder).build().ok()
        }
    }
    if builder.text_transformation.is_none() {
        builder.text_transformation = "no value was set".parse::<crate::types::TextTransformation>().ok()
    }
    if builder.regex_pattern_set_id.is_none() {
        builder.regex_pattern_set_id = Some(Default::default())
    }
    builder
}

pub(crate) fn size_constraint_correct_errors(
    mut builder: crate::types::builders::SizeConstraintBuilder,
) -> crate::types::builders::SizeConstraintBuilder {
    if builder.field_to_match.is_none() {
        builder.field_to_match = {
            let builder = crate::types::builders::FieldToMatchBuilder::default();
            crate::serde_util::field_to_match_correct_errors(builder).build().ok()
        }
    }
    if builder.text_transformation.is_none() {
        builder.text_transformation = "no value was set".parse::<crate::types::TextTransformation>().ok()
    }
    if builder.comparison_operator.is_none() {
        builder.comparison_operator = "no value was set".parse::<crate::types::ComparisonOperator>().ok()
    }
    if builder.size.is_none() {
        builder.size = Some(Default::default())
    }
    builder
}

pub(crate) fn sql_injection_match_tuple_correct_errors(
    mut builder: crate::types::builders::SqlInjectionMatchTupleBuilder,
) -> crate::types::builders::SqlInjectionMatchTupleBuilder {
    if builder.field_to_match.is_none() {
        builder.field_to_match = {
            let builder = crate::types::builders::FieldToMatchBuilder::default();
            crate::serde_util::field_to_match_correct_errors(builder).build().ok()
        }
    }
    if builder.text_transformation.is_none() {
        builder.text_transformation = "no value was set".parse::<crate::types::TextTransformation>().ok()
    }
    builder
}

pub(crate) fn tag_correct_errors(mut builder: crate::types::builders::TagBuilder) -> crate::types::builders::TagBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn waf_override_action_correct_errors(
    mut builder: crate::types::builders::WafOverrideActionBuilder,
) -> crate::types::builders::WafOverrideActionBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::WafOverrideActionType>().ok()
    }
    builder
}

pub(crate) fn xss_match_tuple_correct_errors(
    mut builder: crate::types::builders::XssMatchTupleBuilder,
) -> crate::types::builders::XssMatchTupleBuilder {
    if builder.field_to_match.is_none() {
        builder.field_to_match = {
            let builder = crate::types::builders::FieldToMatchBuilder::default();
            crate::serde_util::field_to_match_correct_errors(builder).build().ok()
        }
    }
    if builder.text_transformation.is_none() {
        builder.text_transformation = "no value was set".parse::<crate::types::TextTransformation>().ok()
    }
    builder
}

pub(crate) fn excluded_rule_correct_errors(mut builder: crate::types::builders::ExcludedRuleBuilder) -> crate::types::builders::ExcludedRuleBuilder {
    if builder.rule_id.is_none() {
        builder.rule_id = Some(Default::default())
    }
    builder
}
