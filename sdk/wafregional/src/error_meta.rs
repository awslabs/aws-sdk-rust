// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p></p>
    WafBadRequestException(crate::error::WafBadRequestException),
    /// <p>The name specified is invalid.</p>
    WafDisallowedNameException(crate::error::WafDisallowedNameException),
    /// <p>The operation failed due to a problem with the migration. The failure cause is provided in the exception, in the <code>MigrationErrorType</code>: </p>
    /// <ul>
    /// <li> <p> <code>ENTITY_NOT_SUPPORTED</code> - The web ACL has an unsupported entity but the <code>IgnoreUnsupportedType</code> is not set to true.</p> </li>
    /// <li> <p> <code>ENTITY_NOT_FOUND</code> - The web ACL doesn't exist. </p> </li>
    /// <li> <p> <code>S3_BUCKET_NO_PERMISSION</code> - You don't have permission to perform the <code>PutObject</code> action to the specified Amazon S3 bucket.</p> </li>
    /// <li> <p> <code>S3_BUCKET_NOT_ACCESSIBLE</code> - The bucket policy doesn't allow AWS WAF to perform the <code>PutObject</code> action in the bucket.</p> </li>
    /// <li> <p> <code>S3_BUCKET_NOT_FOUND</code> - The S3 bucket doesn't exist. </p> </li>
    /// <li> <p> <code>S3_BUCKET_INVALID_REGION</code> - The S3 bucket is not in the same Region as the web ACL.</p> </li>
    /// <li> <p> <code>S3_INTERNAL_ERROR</code> - AWS WAF failed to create the template in the S3 bucket for another reason.</p> </li>
    /// </ul>
    WafEntityMigrationException(crate::error::WafEntityMigrationException),
    /// <p>The operation failed because of a system problem, even though the request was valid. Retry your request.</p>
    WafInternalErrorException(crate::error::WafInternalErrorException),
    /// <p>The operation failed because you tried to create, update, or delete an object by using an invalid account identifier.</p>
    WafInvalidAccountException(crate::error::WafInvalidAccountException),
    /// <p>The operation failed because there was nothing to do. For example:</p>
    /// <ul>
    /// <li> <p>You tried to remove a <code>Rule</code> from a <code>WebACL</code>, but the <code>Rule</code> isn't in the specified <code>WebACL</code>.</p> </li>
    /// <li> <p>You tried to remove an IP address from an <code>IPSet</code>, but the IP address isn't in the specified <code>IPSet</code>.</p> </li>
    /// <li> <p>You tried to remove a <code>ByteMatchTuple</code> from a <code>ByteMatchSet</code>, but the <code>ByteMatchTuple</code> isn't in the specified <code>WebACL</code>.</p> </li>
    /// <li> <p>You tried to add a <code>Rule</code> to a <code>WebACL</code>, but the <code>Rule</code> already exists in the specified <code>WebACL</code>.</p> </li>
    /// <li> <p>You tried to add a <code>ByteMatchTuple</code> to a <code>ByteMatchSet</code>, but the <code>ByteMatchTuple</code> already exists in the specified <code>WebACL</code>.</p> </li>
    /// </ul>
    WafInvalidOperationException(crate::error::WafInvalidOperationException),
    /// <p>The operation failed because AWS WAF didn't recognize a parameter in the request. For example:</p>
    /// <ul>
    /// <li> <p>You specified an invalid parameter name.</p> </li>
    /// <li> <p>You specified an invalid value.</p> </li>
    /// <li> <p>You tried to update an object (<code>ByteMatchSet</code>, <code>IPSet</code>, <code>Rule</code>, or <code>WebACL</code>) using an action other than <code>INSERT</code> or <code>DELETE</code>.</p> </li>
    /// <li> <p>You tried to create a <code>WebACL</code> with a <code>DefaultAction</code> <code>Type</code> other than <code>ALLOW</code>, <code>BLOCK</code>, or <code>COUNT</code>.</p> </li>
    /// <li> <p>You tried to create a <code>RateBasedRule</code> with a <code>RateKey</code> value other than <code>IP</code>.</p> </li>
    /// <li> <p>You tried to update a <code>WebACL</code> with a <code>WafAction</code> <code>Type</code> other than <code>ALLOW</code>, <code>BLOCK</code>, or <code>COUNT</code>.</p> </li>
    /// <li> <p>You tried to update a <code>ByteMatchSet</code> with a <code>FieldToMatch</code> <code>Type</code> other than HEADER, METHOD, QUERY_STRING, URI, or BODY.</p> </li>
    /// <li> <p>You tried to update a <code>ByteMatchSet</code> with a <code>Field</code> of <code>HEADER</code> but no value for <code>Data</code>.</p> </li>
    /// <li> <p>Your request references an ARN that is malformed, or corresponds to a resource with which a web ACL cannot be associated.</p> </li>
    /// </ul>
    WafInvalidParameterException(crate::error::WafInvalidParameterException),
    /// <p>The operation failed because the specified policy is not in the proper format. </p>
    /// <p>The policy is subject to the following restrictions:</p>
    /// <ul>
    /// <li> <p>You can attach only one policy with each <code>PutPermissionPolicy</code> request.</p> </li>
    /// <li> <p>The policy must include an <code>Effect</code>, <code>Action</code> and <code>Principal</code>. </p> </li>
    /// <li> <p> <code>Effect</code> must specify <code>Allow</code>.</p> </li>
    /// <li> <p>The <code>Action</code> in the policy must be <code>waf:UpdateWebACL</code>, <code>waf-regional:UpdateWebACL</code>, <code>waf:GetRuleGroup</code> and <code>waf-regional:GetRuleGroup</code> . Any extra or wildcard actions in the policy will be rejected.</p> </li>
    /// <li> <p>The policy cannot include a <code>Resource</code> parameter.</p> </li>
    /// <li> <p>The ARN in the request must be a valid WAF RuleGroup ARN and the RuleGroup must exist in the same region.</p> </li>
    /// <li> <p>The user making the request must be the owner of the RuleGroup.</p> </li>
    /// <li> <p>Your policy must be composed using IAM Policy version 2012-10-17.</p> </li>
    /// </ul>
    WafInvalidPermissionPolicyException(crate::error::WafInvalidPermissionPolicyException),
    /// <p>The regular expression (regex) you specified in <code>RegexPatternString</code> is invalid.</p>
    WafInvalidRegexPatternException(crate::error::WafInvalidRegexPatternException),
    /// <p>The operation exceeds a resource limit, for example, the maximum number of <code>WebACL</code> objects that you can create for an AWS account. For more information, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/limits.html">Limits</a> in the <i>AWS WAF Developer Guide</i>.</p>
    WafLimitsExceededException(crate::error::WafLimitsExceededException),
    /// <p>The operation failed because you tried to delete an object that isn't empty. For example:</p>
    /// <ul>
    /// <li> <p>You tried to delete a <code>WebACL</code> that still contains one or more <code>Rule</code> objects.</p> </li>
    /// <li> <p>You tried to delete a <code>Rule</code> that still contains one or more <code>ByteMatchSet</code> objects or other predicates.</p> </li>
    /// <li> <p>You tried to delete a <code>ByteMatchSet</code> that contains one or more <code>ByteMatchTuple</code> objects.</p> </li>
    /// <li> <p>You tried to delete an <code>IPSet</code> that references one or more IP addresses.</p> </li>
    /// </ul>
    WafNonEmptyEntityException(crate::error::WafNonEmptyEntityException),
    /// <p>The operation failed because you tried to add an object to or delete an object from another object that doesn't exist. For example:</p>
    /// <ul>
    /// <li> <p>You tried to add a <code>Rule</code> to or delete a <code>Rule</code> from a <code>WebACL</code> that doesn't exist.</p> </li>
    /// <li> <p>You tried to add a <code>ByteMatchSet</code> to or delete a <code>ByteMatchSet</code> from a <code>Rule</code> that doesn't exist.</p> </li>
    /// <li> <p>You tried to add an IP address to or delete an IP address from an <code>IPSet</code> that doesn't exist.</p> </li>
    /// <li> <p>You tried to add a <code>ByteMatchTuple</code> to or delete a <code>ByteMatchTuple</code> from a <code>ByteMatchSet</code> that doesn't exist.</p> </li>
    /// </ul>
    WafNonexistentContainerException(crate::error::WafNonexistentContainerException),
    /// <p>The operation failed because the referenced object doesn't exist.</p>
    WafNonexistentItemException(crate::error::WafNonexistentItemException),
    /// <p>The operation failed because you tried to delete an object that is still in use. For example:</p>
    /// <ul>
    /// <li> <p>You tried to delete a <code>ByteMatchSet</code> that is still referenced by a <code>Rule</code>.</p> </li>
    /// <li> <p>You tried to delete a <code>Rule</code> that is still referenced by a <code>WebACL</code>.</p> </li>
    /// </ul>
    WafReferencedItemException(crate::error::WafReferencedItemException),
    /// <p>AWS WAF is not able to access the service linked role. This can be caused by a previous <code>PutLoggingConfiguration</code> request, which can lock the service linked role for about 20 seconds. Please try your request again. The service linked role can also be locked by a previous <code>DeleteServiceLinkedRole</code> request, which can lock the role for 15 minutes or more. If you recently made a <code>DeleteServiceLinkedRole</code>, wait at least 15 minutes and try the request again. If you receive this same exception again, you will have to wait additional time until the role is unlocked.</p>
    WafServiceLinkedRoleErrorException(crate::error::WafServiceLinkedRoleErrorException),
    /// <p>The operation failed because you tried to create, update, or delete an object by using a change token that has already been used.</p>
    WafStaleDataException(crate::error::WafStaleDataException),
    /// <p>The specified subscription does not exist.</p>
    WafSubscriptionNotFoundException(crate::error::WafSubscriptionNotFoundException),
    /// <p></p>
    WafTagOperationException(crate::error::WafTagOperationException),
    /// <p></p>
    WafTagOperationInternalErrorException(crate::error::WafTagOperationInternalErrorException),
    /// <p>The operation failed because the entity referenced is temporarily unavailable. Retry your request.</p>
    WafUnavailableEntityException(crate::error::WafUnavailableEntityException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::WafBadRequestException(inner) => inner.fmt(f),
            Error::WafDisallowedNameException(inner) => inner.fmt(f),
            Error::WafEntityMigrationException(inner) => inner.fmt(f),
            Error::WafInternalErrorException(inner) => inner.fmt(f),
            Error::WafInvalidAccountException(inner) => inner.fmt(f),
            Error::WafInvalidOperationException(inner) => inner.fmt(f),
            Error::WafInvalidParameterException(inner) => inner.fmt(f),
            Error::WafInvalidPermissionPolicyException(inner) => inner.fmt(f),
            Error::WafInvalidRegexPatternException(inner) => inner.fmt(f),
            Error::WafLimitsExceededException(inner) => inner.fmt(f),
            Error::WafNonEmptyEntityException(inner) => inner.fmt(f),
            Error::WafNonexistentContainerException(inner) => inner.fmt(f),
            Error::WafNonexistentItemException(inner) => inner.fmt(f),
            Error::WafReferencedItemException(inner) => inner.fmt(f),
            Error::WafServiceLinkedRoleErrorException(inner) => inner.fmt(f),
            Error::WafStaleDataException(inner) => inner.fmt(f),
            Error::WafSubscriptionNotFoundException(inner) => inner.fmt(f),
            Error::WafTagOperationException(inner) => inner.fmt(f),
            Error::WafTagOperationInternalErrorException(inner) => inner.fmt(f),
            Error::WafUnavailableEntityException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AssociateWebACLError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::AssociateWebACLError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AssociateWebACLError> for Error {
    fn from(err: crate::error::AssociateWebACLError) -> Self {
        match err {
            crate::error::AssociateWebACLError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::AssociateWebACLError::WafInvalidAccountException(inner) => {
                Error::WafInvalidAccountException(inner)
            }
            crate::error::AssociateWebACLError::WafInvalidParameterException(inner) => {
                Error::WafInvalidParameterException(inner)
            }
            crate::error::AssociateWebACLError::WafNonexistentItemException(inner) => {
                Error::WafNonexistentItemException(inner)
            }
            crate::error::AssociateWebACLError::WafUnavailableEntityException(inner) => {
                Error::WafUnavailableEntityException(inner)
            }
            crate::error::AssociateWebACLError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateByteMatchSetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateByteMatchSetError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateByteMatchSetError> for Error {
    fn from(err: crate::error::CreateByteMatchSetError) -> Self {
        match err {
            crate::error::CreateByteMatchSetError::WafDisallowedNameException(inner) => {
                Error::WafDisallowedNameException(inner)
            }
            crate::error::CreateByteMatchSetError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::CreateByteMatchSetError::WafInvalidAccountException(inner) => {
                Error::WafInvalidAccountException(inner)
            }
            crate::error::CreateByteMatchSetError::WafInvalidParameterException(inner) => {
                Error::WafInvalidParameterException(inner)
            }
            crate::error::CreateByteMatchSetError::WafLimitsExceededException(inner) => {
                Error::WafLimitsExceededException(inner)
            }
            crate::error::CreateByteMatchSetError::WafStaleDataException(inner) => {
                Error::WafStaleDataException(inner)
            }
            crate::error::CreateByteMatchSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateGeoMatchSetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateGeoMatchSetError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateGeoMatchSetError> for Error {
    fn from(err: crate::error::CreateGeoMatchSetError) -> Self {
        match err {
            crate::error::CreateGeoMatchSetError::WafDisallowedNameException(inner) => {
                Error::WafDisallowedNameException(inner)
            }
            crate::error::CreateGeoMatchSetError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::CreateGeoMatchSetError::WafInvalidAccountException(inner) => {
                Error::WafInvalidAccountException(inner)
            }
            crate::error::CreateGeoMatchSetError::WafInvalidParameterException(inner) => {
                Error::WafInvalidParameterException(inner)
            }
            crate::error::CreateGeoMatchSetError::WafLimitsExceededException(inner) => {
                Error::WafLimitsExceededException(inner)
            }
            crate::error::CreateGeoMatchSetError::WafStaleDataException(inner) => {
                Error::WafStaleDataException(inner)
            }
            crate::error::CreateGeoMatchSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateIPSetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateIPSetError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateIPSetError> for Error {
    fn from(err: crate::error::CreateIPSetError) -> Self {
        match err {
            crate::error::CreateIPSetError::WafDisallowedNameException(inner) => {
                Error::WafDisallowedNameException(inner)
            }
            crate::error::CreateIPSetError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::CreateIPSetError::WafInvalidAccountException(inner) => {
                Error::WafInvalidAccountException(inner)
            }
            crate::error::CreateIPSetError::WafInvalidParameterException(inner) => {
                Error::WafInvalidParameterException(inner)
            }
            crate::error::CreateIPSetError::WafLimitsExceededException(inner) => {
                Error::WafLimitsExceededException(inner)
            }
            crate::error::CreateIPSetError::WafStaleDataException(inner) => {
                Error::WafStaleDataException(inner)
            }
            crate::error::CreateIPSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateRateBasedRuleError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateRateBasedRuleError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateRateBasedRuleError> for Error {
    fn from(err: crate::error::CreateRateBasedRuleError) -> Self {
        match err {
            crate::error::CreateRateBasedRuleError::WafBadRequestException(inner) => {
                Error::WafBadRequestException(inner)
            }
            crate::error::CreateRateBasedRuleError::WafDisallowedNameException(inner) => {
                Error::WafDisallowedNameException(inner)
            }
            crate::error::CreateRateBasedRuleError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::CreateRateBasedRuleError::WafInvalidParameterException(inner) => {
                Error::WafInvalidParameterException(inner)
            }
            crate::error::CreateRateBasedRuleError::WafLimitsExceededException(inner) => {
                Error::WafLimitsExceededException(inner)
            }
            crate::error::CreateRateBasedRuleError::WafStaleDataException(inner) => {
                Error::WafStaleDataException(inner)
            }
            crate::error::CreateRateBasedRuleError::WafTagOperationException(inner) => {
                Error::WafTagOperationException(inner)
            }
            crate::error::CreateRateBasedRuleError::WafTagOperationInternalErrorException(
                inner,
            ) => Error::WafTagOperationInternalErrorException(inner),
            crate::error::CreateRateBasedRuleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateRegexMatchSetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateRegexMatchSetError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateRegexMatchSetError> for Error {
    fn from(err: crate::error::CreateRegexMatchSetError) -> Self {
        match err {
            crate::error::CreateRegexMatchSetError::WafDisallowedNameException(inner) => {
                Error::WafDisallowedNameException(inner)
            }
            crate::error::CreateRegexMatchSetError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::CreateRegexMatchSetError::WafLimitsExceededException(inner) => {
                Error::WafLimitsExceededException(inner)
            }
            crate::error::CreateRegexMatchSetError::WafStaleDataException(inner) => {
                Error::WafStaleDataException(inner)
            }
            crate::error::CreateRegexMatchSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateRegexPatternSetError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateRegexPatternSetError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateRegexPatternSetError> for Error {
    fn from(err: crate::error::CreateRegexPatternSetError) -> Self {
        match err {
            crate::error::CreateRegexPatternSetError::WafDisallowedNameException(inner) => {
                Error::WafDisallowedNameException(inner)
            }
            crate::error::CreateRegexPatternSetError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::CreateRegexPatternSetError::WafLimitsExceededException(inner) => {
                Error::WafLimitsExceededException(inner)
            }
            crate::error::CreateRegexPatternSetError::WafStaleDataException(inner) => {
                Error::WafStaleDataException(inner)
            }
            crate::error::CreateRegexPatternSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateRuleError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateRuleError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateRuleError> for Error {
    fn from(err: crate::error::CreateRuleError) -> Self {
        match err {
            crate::error::CreateRuleError::WafBadRequestException(inner) => {
                Error::WafBadRequestException(inner)
            }
            crate::error::CreateRuleError::WafDisallowedNameException(inner) => {
                Error::WafDisallowedNameException(inner)
            }
            crate::error::CreateRuleError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::CreateRuleError::WafInvalidParameterException(inner) => {
                Error::WafInvalidParameterException(inner)
            }
            crate::error::CreateRuleError::WafLimitsExceededException(inner) => {
                Error::WafLimitsExceededException(inner)
            }
            crate::error::CreateRuleError::WafStaleDataException(inner) => {
                Error::WafStaleDataException(inner)
            }
            crate::error::CreateRuleError::WafTagOperationException(inner) => {
                Error::WafTagOperationException(inner)
            }
            crate::error::CreateRuleError::WafTagOperationInternalErrorException(inner) => {
                Error::WafTagOperationInternalErrorException(inner)
            }
            crate::error::CreateRuleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateRuleGroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateRuleGroupError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateRuleGroupError> for Error {
    fn from(err: crate::error::CreateRuleGroupError) -> Self {
        match err {
            crate::error::CreateRuleGroupError::WafBadRequestException(inner) => {
                Error::WafBadRequestException(inner)
            }
            crate::error::CreateRuleGroupError::WafDisallowedNameException(inner) => {
                Error::WafDisallowedNameException(inner)
            }
            crate::error::CreateRuleGroupError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::CreateRuleGroupError::WafLimitsExceededException(inner) => {
                Error::WafLimitsExceededException(inner)
            }
            crate::error::CreateRuleGroupError::WafStaleDataException(inner) => {
                Error::WafStaleDataException(inner)
            }
            crate::error::CreateRuleGroupError::WafTagOperationException(inner) => {
                Error::WafTagOperationException(inner)
            }
            crate::error::CreateRuleGroupError::WafTagOperationInternalErrorException(inner) => {
                Error::WafTagOperationInternalErrorException(inner)
            }
            crate::error::CreateRuleGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateSizeConstraintSetError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateSizeConstraintSetError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateSizeConstraintSetError> for Error {
    fn from(err: crate::error::CreateSizeConstraintSetError) -> Self {
        match err {
            crate::error::CreateSizeConstraintSetError::WafDisallowedNameException(inner) => {
                Error::WafDisallowedNameException(inner)
            }
            crate::error::CreateSizeConstraintSetError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::CreateSizeConstraintSetError::WafInvalidAccountException(inner) => {
                Error::WafInvalidAccountException(inner)
            }
            crate::error::CreateSizeConstraintSetError::WafInvalidParameterException(inner) => {
                Error::WafInvalidParameterException(inner)
            }
            crate::error::CreateSizeConstraintSetError::WafLimitsExceededException(inner) => {
                Error::WafLimitsExceededException(inner)
            }
            crate::error::CreateSizeConstraintSetError::WafStaleDataException(inner) => {
                Error::WafStaleDataException(inner)
            }
            crate::error::CreateSizeConstraintSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateSqlInjectionMatchSetError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateSqlInjectionMatchSetError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateSqlInjectionMatchSetError> for Error {
    fn from(err: crate::error::CreateSqlInjectionMatchSetError) -> Self {
        match err {
            crate::error::CreateSqlInjectionMatchSetError::WafDisallowedNameException(inner) => {
                Error::WafDisallowedNameException(inner)
            }
            crate::error::CreateSqlInjectionMatchSetError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::CreateSqlInjectionMatchSetError::WafInvalidAccountException(inner) => {
                Error::WafInvalidAccountException(inner)
            }
            crate::error::CreateSqlInjectionMatchSetError::WafInvalidParameterException(inner) => {
                Error::WafInvalidParameterException(inner)
            }
            crate::error::CreateSqlInjectionMatchSetError::WafLimitsExceededException(inner) => {
                Error::WafLimitsExceededException(inner)
            }
            crate::error::CreateSqlInjectionMatchSetError::WafStaleDataException(inner) => {
                Error::WafStaleDataException(inner)
            }
            crate::error::CreateSqlInjectionMatchSetError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateWebACLError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateWebACLError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateWebACLError> for Error {
    fn from(err: crate::error::CreateWebACLError) -> Self {
        match err {
            crate::error::CreateWebACLError::WafBadRequestException(inner) => {
                Error::WafBadRequestException(inner)
            }
            crate::error::CreateWebACLError::WafDisallowedNameException(inner) => {
                Error::WafDisallowedNameException(inner)
            }
            crate::error::CreateWebACLError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::CreateWebACLError::WafInvalidAccountException(inner) => {
                Error::WafInvalidAccountException(inner)
            }
            crate::error::CreateWebACLError::WafInvalidParameterException(inner) => {
                Error::WafInvalidParameterException(inner)
            }
            crate::error::CreateWebACLError::WafLimitsExceededException(inner) => {
                Error::WafLimitsExceededException(inner)
            }
            crate::error::CreateWebACLError::WafStaleDataException(inner) => {
                Error::WafStaleDataException(inner)
            }
            crate::error::CreateWebACLError::WafTagOperationException(inner) => {
                Error::WafTagOperationException(inner)
            }
            crate::error::CreateWebACLError::WafTagOperationInternalErrorException(inner) => {
                Error::WafTagOperationInternalErrorException(inner)
            }
            crate::error::CreateWebACLError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateWebACLMigrationStackError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateWebACLMigrationStackError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateWebACLMigrationStackError> for Error {
    fn from(err: crate::error::CreateWebACLMigrationStackError) -> Self {
        match err {
            crate::error::CreateWebACLMigrationStackError::WafEntityMigrationException(inner) => {
                Error::WafEntityMigrationException(inner)
            }
            crate::error::CreateWebACLMigrationStackError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::CreateWebACLMigrationStackError::WafInvalidOperationException(inner) => {
                Error::WafInvalidOperationException(inner)
            }
            crate::error::CreateWebACLMigrationStackError::WafInvalidParameterException(inner) => {
                Error::WafInvalidParameterException(inner)
            }
            crate::error::CreateWebACLMigrationStackError::WafNonexistentItemException(inner) => {
                Error::WafNonexistentItemException(inner)
            }
            crate::error::CreateWebACLMigrationStackError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateXssMatchSetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateXssMatchSetError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateXssMatchSetError> for Error {
    fn from(err: crate::error::CreateXssMatchSetError) -> Self {
        match err {
            crate::error::CreateXssMatchSetError::WafDisallowedNameException(inner) => {
                Error::WafDisallowedNameException(inner)
            }
            crate::error::CreateXssMatchSetError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::CreateXssMatchSetError::WafInvalidAccountException(inner) => {
                Error::WafInvalidAccountException(inner)
            }
            crate::error::CreateXssMatchSetError::WafInvalidParameterException(inner) => {
                Error::WafInvalidParameterException(inner)
            }
            crate::error::CreateXssMatchSetError::WafLimitsExceededException(inner) => {
                Error::WafLimitsExceededException(inner)
            }
            crate::error::CreateXssMatchSetError::WafStaleDataException(inner) => {
                Error::WafStaleDataException(inner)
            }
            crate::error::CreateXssMatchSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteByteMatchSetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteByteMatchSetError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteByteMatchSetError> for Error {
    fn from(err: crate::error::DeleteByteMatchSetError) -> Self {
        match err {
            crate::error::DeleteByteMatchSetError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::DeleteByteMatchSetError::WafInvalidAccountException(inner) => {
                Error::WafInvalidAccountException(inner)
            }
            crate::error::DeleteByteMatchSetError::WafNonEmptyEntityException(inner) => {
                Error::WafNonEmptyEntityException(inner)
            }
            crate::error::DeleteByteMatchSetError::WafNonexistentItemException(inner) => {
                Error::WafNonexistentItemException(inner)
            }
            crate::error::DeleteByteMatchSetError::WafReferencedItemException(inner) => {
                Error::WafReferencedItemException(inner)
            }
            crate::error::DeleteByteMatchSetError::WafStaleDataException(inner) => {
                Error::WafStaleDataException(inner)
            }
            crate::error::DeleteByteMatchSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteGeoMatchSetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteGeoMatchSetError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteGeoMatchSetError> for Error {
    fn from(err: crate::error::DeleteGeoMatchSetError) -> Self {
        match err {
            crate::error::DeleteGeoMatchSetError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::DeleteGeoMatchSetError::WafInvalidAccountException(inner) => {
                Error::WafInvalidAccountException(inner)
            }
            crate::error::DeleteGeoMatchSetError::WafNonEmptyEntityException(inner) => {
                Error::WafNonEmptyEntityException(inner)
            }
            crate::error::DeleteGeoMatchSetError::WafNonexistentItemException(inner) => {
                Error::WafNonexistentItemException(inner)
            }
            crate::error::DeleteGeoMatchSetError::WafReferencedItemException(inner) => {
                Error::WafReferencedItemException(inner)
            }
            crate::error::DeleteGeoMatchSetError::WafStaleDataException(inner) => {
                Error::WafStaleDataException(inner)
            }
            crate::error::DeleteGeoMatchSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteIPSetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteIPSetError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteIPSetError> for Error {
    fn from(err: crate::error::DeleteIPSetError) -> Self {
        match err {
            crate::error::DeleteIPSetError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::DeleteIPSetError::WafInvalidAccountException(inner) => {
                Error::WafInvalidAccountException(inner)
            }
            crate::error::DeleteIPSetError::WafNonEmptyEntityException(inner) => {
                Error::WafNonEmptyEntityException(inner)
            }
            crate::error::DeleteIPSetError::WafNonexistentItemException(inner) => {
                Error::WafNonexistentItemException(inner)
            }
            crate::error::DeleteIPSetError::WafReferencedItemException(inner) => {
                Error::WafReferencedItemException(inner)
            }
            crate::error::DeleteIPSetError::WafStaleDataException(inner) => {
                Error::WafStaleDataException(inner)
            }
            crate::error::DeleteIPSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteLoggingConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteLoggingConfigurationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteLoggingConfigurationError> for Error {
    fn from(err: crate::error::DeleteLoggingConfigurationError) -> Self {
        match err {
            crate::error::DeleteLoggingConfigurationError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::DeleteLoggingConfigurationError::WafNonexistentItemException(inner) => {
                Error::WafNonexistentItemException(inner)
            }
            crate::error::DeleteLoggingConfigurationError::WafStaleDataException(inner) => {
                Error::WafStaleDataException(inner)
            }
            crate::error::DeleteLoggingConfigurationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeletePermissionPolicyError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeletePermissionPolicyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeletePermissionPolicyError> for Error {
    fn from(err: crate::error::DeletePermissionPolicyError) -> Self {
        match err {
            crate::error::DeletePermissionPolicyError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::DeletePermissionPolicyError::WafNonexistentItemException(inner) => {
                Error::WafNonexistentItemException(inner)
            }
            crate::error::DeletePermissionPolicyError::WafStaleDataException(inner) => {
                Error::WafStaleDataException(inner)
            }
            crate::error::DeletePermissionPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteRateBasedRuleError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteRateBasedRuleError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteRateBasedRuleError> for Error {
    fn from(err: crate::error::DeleteRateBasedRuleError) -> Self {
        match err {
            crate::error::DeleteRateBasedRuleError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::DeleteRateBasedRuleError::WafInvalidAccountException(inner) => {
                Error::WafInvalidAccountException(inner)
            }
            crate::error::DeleteRateBasedRuleError::WafNonEmptyEntityException(inner) => {
                Error::WafNonEmptyEntityException(inner)
            }
            crate::error::DeleteRateBasedRuleError::WafNonexistentItemException(inner) => {
                Error::WafNonexistentItemException(inner)
            }
            crate::error::DeleteRateBasedRuleError::WafReferencedItemException(inner) => {
                Error::WafReferencedItemException(inner)
            }
            crate::error::DeleteRateBasedRuleError::WafStaleDataException(inner) => {
                Error::WafStaleDataException(inner)
            }
            crate::error::DeleteRateBasedRuleError::WafTagOperationException(inner) => {
                Error::WafTagOperationException(inner)
            }
            crate::error::DeleteRateBasedRuleError::WafTagOperationInternalErrorException(
                inner,
            ) => Error::WafTagOperationInternalErrorException(inner),
            crate::error::DeleteRateBasedRuleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteRegexMatchSetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteRegexMatchSetError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteRegexMatchSetError> for Error {
    fn from(err: crate::error::DeleteRegexMatchSetError) -> Self {
        match err {
            crate::error::DeleteRegexMatchSetError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::DeleteRegexMatchSetError::WafInvalidAccountException(inner) => {
                Error::WafInvalidAccountException(inner)
            }
            crate::error::DeleteRegexMatchSetError::WafNonEmptyEntityException(inner) => {
                Error::WafNonEmptyEntityException(inner)
            }
            crate::error::DeleteRegexMatchSetError::WafNonexistentItemException(inner) => {
                Error::WafNonexistentItemException(inner)
            }
            crate::error::DeleteRegexMatchSetError::WafReferencedItemException(inner) => {
                Error::WafReferencedItemException(inner)
            }
            crate::error::DeleteRegexMatchSetError::WafStaleDataException(inner) => {
                Error::WafStaleDataException(inner)
            }
            crate::error::DeleteRegexMatchSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteRegexPatternSetError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteRegexPatternSetError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteRegexPatternSetError> for Error {
    fn from(err: crate::error::DeleteRegexPatternSetError) -> Self {
        match err {
            crate::error::DeleteRegexPatternSetError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::DeleteRegexPatternSetError::WafInvalidAccountException(inner) => {
                Error::WafInvalidAccountException(inner)
            }
            crate::error::DeleteRegexPatternSetError::WafNonEmptyEntityException(inner) => {
                Error::WafNonEmptyEntityException(inner)
            }
            crate::error::DeleteRegexPatternSetError::WafNonexistentItemException(inner) => {
                Error::WafNonexistentItemException(inner)
            }
            crate::error::DeleteRegexPatternSetError::WafReferencedItemException(inner) => {
                Error::WafReferencedItemException(inner)
            }
            crate::error::DeleteRegexPatternSetError::WafStaleDataException(inner) => {
                Error::WafStaleDataException(inner)
            }
            crate::error::DeleteRegexPatternSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteRuleError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteRuleError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteRuleError> for Error {
    fn from(err: crate::error::DeleteRuleError) -> Self {
        match err {
            crate::error::DeleteRuleError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::DeleteRuleError::WafInvalidAccountException(inner) => {
                Error::WafInvalidAccountException(inner)
            }
            crate::error::DeleteRuleError::WafNonEmptyEntityException(inner) => {
                Error::WafNonEmptyEntityException(inner)
            }
            crate::error::DeleteRuleError::WafNonexistentItemException(inner) => {
                Error::WafNonexistentItemException(inner)
            }
            crate::error::DeleteRuleError::WafReferencedItemException(inner) => {
                Error::WafReferencedItemException(inner)
            }
            crate::error::DeleteRuleError::WafStaleDataException(inner) => {
                Error::WafStaleDataException(inner)
            }
            crate::error::DeleteRuleError::WafTagOperationException(inner) => {
                Error::WafTagOperationException(inner)
            }
            crate::error::DeleteRuleError::WafTagOperationInternalErrorException(inner) => {
                Error::WafTagOperationInternalErrorException(inner)
            }
            crate::error::DeleteRuleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteRuleGroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteRuleGroupError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteRuleGroupError> for Error {
    fn from(err: crate::error::DeleteRuleGroupError) -> Self {
        match err {
            crate::error::DeleteRuleGroupError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::DeleteRuleGroupError::WafInvalidOperationException(inner) => {
                Error::WafInvalidOperationException(inner)
            }
            crate::error::DeleteRuleGroupError::WafNonEmptyEntityException(inner) => {
                Error::WafNonEmptyEntityException(inner)
            }
            crate::error::DeleteRuleGroupError::WafNonexistentItemException(inner) => {
                Error::WafNonexistentItemException(inner)
            }
            crate::error::DeleteRuleGroupError::WafReferencedItemException(inner) => {
                Error::WafReferencedItemException(inner)
            }
            crate::error::DeleteRuleGroupError::WafStaleDataException(inner) => {
                Error::WafStaleDataException(inner)
            }
            crate::error::DeleteRuleGroupError::WafTagOperationException(inner) => {
                Error::WafTagOperationException(inner)
            }
            crate::error::DeleteRuleGroupError::WafTagOperationInternalErrorException(inner) => {
                Error::WafTagOperationInternalErrorException(inner)
            }
            crate::error::DeleteRuleGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteSizeConstraintSetError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteSizeConstraintSetError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteSizeConstraintSetError> for Error {
    fn from(err: crate::error::DeleteSizeConstraintSetError) -> Self {
        match err {
            crate::error::DeleteSizeConstraintSetError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::DeleteSizeConstraintSetError::WafInvalidAccountException(inner) => {
                Error::WafInvalidAccountException(inner)
            }
            crate::error::DeleteSizeConstraintSetError::WafNonEmptyEntityException(inner) => {
                Error::WafNonEmptyEntityException(inner)
            }
            crate::error::DeleteSizeConstraintSetError::WafNonexistentItemException(inner) => {
                Error::WafNonexistentItemException(inner)
            }
            crate::error::DeleteSizeConstraintSetError::WafReferencedItemException(inner) => {
                Error::WafReferencedItemException(inner)
            }
            crate::error::DeleteSizeConstraintSetError::WafStaleDataException(inner) => {
                Error::WafStaleDataException(inner)
            }
            crate::error::DeleteSizeConstraintSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteSqlInjectionMatchSetError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteSqlInjectionMatchSetError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteSqlInjectionMatchSetError> for Error {
    fn from(err: crate::error::DeleteSqlInjectionMatchSetError) -> Self {
        match err {
            crate::error::DeleteSqlInjectionMatchSetError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::DeleteSqlInjectionMatchSetError::WafInvalidAccountException(inner) => {
                Error::WafInvalidAccountException(inner)
            }
            crate::error::DeleteSqlInjectionMatchSetError::WafNonEmptyEntityException(inner) => {
                Error::WafNonEmptyEntityException(inner)
            }
            crate::error::DeleteSqlInjectionMatchSetError::WafNonexistentItemException(inner) => {
                Error::WafNonexistentItemException(inner)
            }
            crate::error::DeleteSqlInjectionMatchSetError::WafReferencedItemException(inner) => {
                Error::WafReferencedItemException(inner)
            }
            crate::error::DeleteSqlInjectionMatchSetError::WafStaleDataException(inner) => {
                Error::WafStaleDataException(inner)
            }
            crate::error::DeleteSqlInjectionMatchSetError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteWebACLError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteWebACLError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteWebACLError> for Error {
    fn from(err: crate::error::DeleteWebACLError) -> Self {
        match err {
            crate::error::DeleteWebACLError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::DeleteWebACLError::WafInvalidAccountException(inner) => {
                Error::WafInvalidAccountException(inner)
            }
            crate::error::DeleteWebACLError::WafNonEmptyEntityException(inner) => {
                Error::WafNonEmptyEntityException(inner)
            }
            crate::error::DeleteWebACLError::WafNonexistentItemException(inner) => {
                Error::WafNonexistentItemException(inner)
            }
            crate::error::DeleteWebACLError::WafReferencedItemException(inner) => {
                Error::WafReferencedItemException(inner)
            }
            crate::error::DeleteWebACLError::WafStaleDataException(inner) => {
                Error::WafStaleDataException(inner)
            }
            crate::error::DeleteWebACLError::WafTagOperationException(inner) => {
                Error::WafTagOperationException(inner)
            }
            crate::error::DeleteWebACLError::WafTagOperationInternalErrorException(inner) => {
                Error::WafTagOperationInternalErrorException(inner)
            }
            crate::error::DeleteWebACLError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteXssMatchSetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteXssMatchSetError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteXssMatchSetError> for Error {
    fn from(err: crate::error::DeleteXssMatchSetError) -> Self {
        match err {
            crate::error::DeleteXssMatchSetError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::DeleteXssMatchSetError::WafInvalidAccountException(inner) => {
                Error::WafInvalidAccountException(inner)
            }
            crate::error::DeleteXssMatchSetError::WafNonEmptyEntityException(inner) => {
                Error::WafNonEmptyEntityException(inner)
            }
            crate::error::DeleteXssMatchSetError::WafNonexistentItemException(inner) => {
                Error::WafNonexistentItemException(inner)
            }
            crate::error::DeleteXssMatchSetError::WafReferencedItemException(inner) => {
                Error::WafReferencedItemException(inner)
            }
            crate::error::DeleteXssMatchSetError::WafStaleDataException(inner) => {
                Error::WafStaleDataException(inner)
            }
            crate::error::DeleteXssMatchSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DisassociateWebACLError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DisassociateWebACLError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DisassociateWebACLError> for Error {
    fn from(err: crate::error::DisassociateWebACLError) -> Self {
        match err {
            crate::error::DisassociateWebACLError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::DisassociateWebACLError::WafInvalidAccountException(inner) => {
                Error::WafInvalidAccountException(inner)
            }
            crate::error::DisassociateWebACLError::WafInvalidParameterException(inner) => {
                Error::WafInvalidParameterException(inner)
            }
            crate::error::DisassociateWebACLError::WafNonexistentItemException(inner) => {
                Error::WafNonexistentItemException(inner)
            }
            crate::error::DisassociateWebACLError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetByteMatchSetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetByteMatchSetError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetByteMatchSetError> for Error {
    fn from(err: crate::error::GetByteMatchSetError) -> Self {
        match err {
            crate::error::GetByteMatchSetError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::GetByteMatchSetError::WafInvalidAccountException(inner) => {
                Error::WafInvalidAccountException(inner)
            }
            crate::error::GetByteMatchSetError::WafNonexistentItemException(inner) => {
                Error::WafNonexistentItemException(inner)
            }
            crate::error::GetByteMatchSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetChangeTokenError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetChangeTokenError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetChangeTokenError> for Error {
    fn from(err: crate::error::GetChangeTokenError) -> Self {
        match err {
            crate::error::GetChangeTokenError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::GetChangeTokenError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetChangeTokenStatusError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetChangeTokenStatusError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetChangeTokenStatusError> for Error {
    fn from(err: crate::error::GetChangeTokenStatusError) -> Self {
        match err {
            crate::error::GetChangeTokenStatusError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::GetChangeTokenStatusError::WafNonexistentItemException(inner) => {
                Error::WafNonexistentItemException(inner)
            }
            crate::error::GetChangeTokenStatusError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetGeoMatchSetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetGeoMatchSetError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetGeoMatchSetError> for Error {
    fn from(err: crate::error::GetGeoMatchSetError) -> Self {
        match err {
            crate::error::GetGeoMatchSetError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::GetGeoMatchSetError::WafInvalidAccountException(inner) => {
                Error::WafInvalidAccountException(inner)
            }
            crate::error::GetGeoMatchSetError::WafNonexistentItemException(inner) => {
                Error::WafNonexistentItemException(inner)
            }
            crate::error::GetGeoMatchSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetIPSetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetIPSetError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetIPSetError> for Error {
    fn from(err: crate::error::GetIPSetError) -> Self {
        match err {
            crate::error::GetIPSetError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::GetIPSetError::WafInvalidAccountException(inner) => {
                Error::WafInvalidAccountException(inner)
            }
            crate::error::GetIPSetError::WafNonexistentItemException(inner) => {
                Error::WafNonexistentItemException(inner)
            }
            crate::error::GetIPSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetLoggingConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetLoggingConfigurationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetLoggingConfigurationError> for Error {
    fn from(err: crate::error::GetLoggingConfigurationError) -> Self {
        match err {
            crate::error::GetLoggingConfigurationError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::GetLoggingConfigurationError::WafNonexistentItemException(inner) => {
                Error::WafNonexistentItemException(inner)
            }
            crate::error::GetLoggingConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetPermissionPolicyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetPermissionPolicyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetPermissionPolicyError> for Error {
    fn from(err: crate::error::GetPermissionPolicyError) -> Self {
        match err {
            crate::error::GetPermissionPolicyError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::GetPermissionPolicyError::WafNonexistentItemException(inner) => {
                Error::WafNonexistentItemException(inner)
            }
            crate::error::GetPermissionPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetRateBasedRuleError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetRateBasedRuleError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetRateBasedRuleError> for Error {
    fn from(err: crate::error::GetRateBasedRuleError) -> Self {
        match err {
            crate::error::GetRateBasedRuleError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::GetRateBasedRuleError::WafInvalidAccountException(inner) => {
                Error::WafInvalidAccountException(inner)
            }
            crate::error::GetRateBasedRuleError::WafNonexistentItemException(inner) => {
                Error::WafNonexistentItemException(inner)
            }
            crate::error::GetRateBasedRuleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetRateBasedRuleManagedKeysError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetRateBasedRuleManagedKeysError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetRateBasedRuleManagedKeysError> for Error {
    fn from(err: crate::error::GetRateBasedRuleManagedKeysError) -> Self {
        match err {
            crate::error::GetRateBasedRuleManagedKeysError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::GetRateBasedRuleManagedKeysError::WafInvalidAccountException(inner) => {
                Error::WafInvalidAccountException(inner)
            }
            crate::error::GetRateBasedRuleManagedKeysError::WafInvalidParameterException(inner) => {
                Error::WafInvalidParameterException(inner)
            }
            crate::error::GetRateBasedRuleManagedKeysError::WafNonexistentItemException(inner) => {
                Error::WafNonexistentItemException(inner)
            }
            crate::error::GetRateBasedRuleManagedKeysError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetRegexMatchSetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetRegexMatchSetError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetRegexMatchSetError> for Error {
    fn from(err: crate::error::GetRegexMatchSetError) -> Self {
        match err {
            crate::error::GetRegexMatchSetError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::GetRegexMatchSetError::WafInvalidAccountException(inner) => {
                Error::WafInvalidAccountException(inner)
            }
            crate::error::GetRegexMatchSetError::WafNonexistentItemException(inner) => {
                Error::WafNonexistentItemException(inner)
            }
            crate::error::GetRegexMatchSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetRegexPatternSetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetRegexPatternSetError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetRegexPatternSetError> for Error {
    fn from(err: crate::error::GetRegexPatternSetError) -> Self {
        match err {
            crate::error::GetRegexPatternSetError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::GetRegexPatternSetError::WafInvalidAccountException(inner) => {
                Error::WafInvalidAccountException(inner)
            }
            crate::error::GetRegexPatternSetError::WafNonexistentItemException(inner) => {
                Error::WafNonexistentItemException(inner)
            }
            crate::error::GetRegexPatternSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetRuleError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetRuleError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetRuleError> for Error {
    fn from(err: crate::error::GetRuleError) -> Self {
        match err {
            crate::error::GetRuleError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::GetRuleError::WafInvalidAccountException(inner) => {
                Error::WafInvalidAccountException(inner)
            }
            crate::error::GetRuleError::WafNonexistentItemException(inner) => {
                Error::WafNonexistentItemException(inner)
            }
            crate::error::GetRuleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetRuleGroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetRuleGroupError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetRuleGroupError> for Error {
    fn from(err: crate::error::GetRuleGroupError) -> Self {
        match err {
            crate::error::GetRuleGroupError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::GetRuleGroupError::WafNonexistentItemException(inner) => {
                Error::WafNonexistentItemException(inner)
            }
            crate::error::GetRuleGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetSampledRequestsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetSampledRequestsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetSampledRequestsError> for Error {
    fn from(err: crate::error::GetSampledRequestsError) -> Self {
        match err {
            crate::error::GetSampledRequestsError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::GetSampledRequestsError::WafNonexistentItemException(inner) => {
                Error::WafNonexistentItemException(inner)
            }
            crate::error::GetSampledRequestsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetSizeConstraintSetError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetSizeConstraintSetError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetSizeConstraintSetError> for Error {
    fn from(err: crate::error::GetSizeConstraintSetError) -> Self {
        match err {
            crate::error::GetSizeConstraintSetError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::GetSizeConstraintSetError::WafInvalidAccountException(inner) => {
                Error::WafInvalidAccountException(inner)
            }
            crate::error::GetSizeConstraintSetError::WafNonexistentItemException(inner) => {
                Error::WafNonexistentItemException(inner)
            }
            crate::error::GetSizeConstraintSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetSqlInjectionMatchSetError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetSqlInjectionMatchSetError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetSqlInjectionMatchSetError> for Error {
    fn from(err: crate::error::GetSqlInjectionMatchSetError) -> Self {
        match err {
            crate::error::GetSqlInjectionMatchSetError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::GetSqlInjectionMatchSetError::WafInvalidAccountException(inner) => {
                Error::WafInvalidAccountException(inner)
            }
            crate::error::GetSqlInjectionMatchSetError::WafNonexistentItemException(inner) => {
                Error::WafNonexistentItemException(inner)
            }
            crate::error::GetSqlInjectionMatchSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetWebACLError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetWebACLError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetWebACLError> for Error {
    fn from(err: crate::error::GetWebACLError) -> Self {
        match err {
            crate::error::GetWebACLError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::GetWebACLError::WafInvalidAccountException(inner) => {
                Error::WafInvalidAccountException(inner)
            }
            crate::error::GetWebACLError::WafNonexistentItemException(inner) => {
                Error::WafNonexistentItemException(inner)
            }
            crate::error::GetWebACLError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetWebACLForResourceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetWebACLForResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetWebACLForResourceError> for Error {
    fn from(err: crate::error::GetWebACLForResourceError) -> Self {
        match err {
            crate::error::GetWebACLForResourceError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::GetWebACLForResourceError::WafInvalidAccountException(inner) => {
                Error::WafInvalidAccountException(inner)
            }
            crate::error::GetWebACLForResourceError::WafInvalidParameterException(inner) => {
                Error::WafInvalidParameterException(inner)
            }
            crate::error::GetWebACLForResourceError::WafNonexistentItemException(inner) => {
                Error::WafNonexistentItemException(inner)
            }
            crate::error::GetWebACLForResourceError::WafUnavailableEntityException(inner) => {
                Error::WafUnavailableEntityException(inner)
            }
            crate::error::GetWebACLForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetXssMatchSetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetXssMatchSetError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetXssMatchSetError> for Error {
    fn from(err: crate::error::GetXssMatchSetError) -> Self {
        match err {
            crate::error::GetXssMatchSetError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::GetXssMatchSetError::WafInvalidAccountException(inner) => {
                Error::WafInvalidAccountException(inner)
            }
            crate::error::GetXssMatchSetError::WafNonexistentItemException(inner) => {
                Error::WafNonexistentItemException(inner)
            }
            crate::error::GetXssMatchSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListActivatedRulesInRuleGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListActivatedRulesInRuleGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListActivatedRulesInRuleGroupError> for Error {
    fn from(err: crate::error::ListActivatedRulesInRuleGroupError) -> Self {
        match err {
            crate::error::ListActivatedRulesInRuleGroupError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::ListActivatedRulesInRuleGroupError::WafInvalidParameterException(
                inner,
            ) => Error::WafInvalidParameterException(inner),
            crate::error::ListActivatedRulesInRuleGroupError::WafNonexistentItemException(
                inner,
            ) => Error::WafNonexistentItemException(inner),
            crate::error::ListActivatedRulesInRuleGroupError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListByteMatchSetsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListByteMatchSetsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListByteMatchSetsError> for Error {
    fn from(err: crate::error::ListByteMatchSetsError) -> Self {
        match err {
            crate::error::ListByteMatchSetsError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::ListByteMatchSetsError::WafInvalidAccountException(inner) => {
                Error::WafInvalidAccountException(inner)
            }
            crate::error::ListByteMatchSetsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListGeoMatchSetsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListGeoMatchSetsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListGeoMatchSetsError> for Error {
    fn from(err: crate::error::ListGeoMatchSetsError) -> Self {
        match err {
            crate::error::ListGeoMatchSetsError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::ListGeoMatchSetsError::WafInvalidAccountException(inner) => {
                Error::WafInvalidAccountException(inner)
            }
            crate::error::ListGeoMatchSetsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListIPSetsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListIPSetsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListIPSetsError> for Error {
    fn from(err: crate::error::ListIPSetsError) -> Self {
        match err {
            crate::error::ListIPSetsError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::ListIPSetsError::WafInvalidAccountException(inner) => {
                Error::WafInvalidAccountException(inner)
            }
            crate::error::ListIPSetsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListLoggingConfigurationsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListLoggingConfigurationsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListLoggingConfigurationsError> for Error {
    fn from(err: crate::error::ListLoggingConfigurationsError) -> Self {
        match err {
            crate::error::ListLoggingConfigurationsError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::ListLoggingConfigurationsError::WafInvalidParameterException(inner) => {
                Error::WafInvalidParameterException(inner)
            }
            crate::error::ListLoggingConfigurationsError::WafNonexistentItemException(inner) => {
                Error::WafNonexistentItemException(inner)
            }
            crate::error::ListLoggingConfigurationsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListRateBasedRulesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListRateBasedRulesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListRateBasedRulesError> for Error {
    fn from(err: crate::error::ListRateBasedRulesError) -> Self {
        match err {
            crate::error::ListRateBasedRulesError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::ListRateBasedRulesError::WafInvalidAccountException(inner) => {
                Error::WafInvalidAccountException(inner)
            }
            crate::error::ListRateBasedRulesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListRegexMatchSetsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListRegexMatchSetsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListRegexMatchSetsError> for Error {
    fn from(err: crate::error::ListRegexMatchSetsError) -> Self {
        match err {
            crate::error::ListRegexMatchSetsError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::ListRegexMatchSetsError::WafInvalidAccountException(inner) => {
                Error::WafInvalidAccountException(inner)
            }
            crate::error::ListRegexMatchSetsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListRegexPatternSetsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListRegexPatternSetsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListRegexPatternSetsError> for Error {
    fn from(err: crate::error::ListRegexPatternSetsError) -> Self {
        match err {
            crate::error::ListRegexPatternSetsError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::ListRegexPatternSetsError::WafInvalidAccountException(inner) => {
                Error::WafInvalidAccountException(inner)
            }
            crate::error::ListRegexPatternSetsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListResourcesForWebACLError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListResourcesForWebACLError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListResourcesForWebACLError> for Error {
    fn from(err: crate::error::ListResourcesForWebACLError) -> Self {
        match err {
            crate::error::ListResourcesForWebACLError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::ListResourcesForWebACLError::WafInvalidAccountException(inner) => {
                Error::WafInvalidAccountException(inner)
            }
            crate::error::ListResourcesForWebACLError::WafInvalidParameterException(inner) => {
                Error::WafInvalidParameterException(inner)
            }
            crate::error::ListResourcesForWebACLError::WafNonexistentItemException(inner) => {
                Error::WafNonexistentItemException(inner)
            }
            crate::error::ListResourcesForWebACLError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListRuleGroupsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListRuleGroupsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListRuleGroupsError> for Error {
    fn from(err: crate::error::ListRuleGroupsError) -> Self {
        match err {
            crate::error::ListRuleGroupsError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::ListRuleGroupsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListRulesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListRulesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListRulesError> for Error {
    fn from(err: crate::error::ListRulesError) -> Self {
        match err {
            crate::error::ListRulesError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::ListRulesError::WafInvalidAccountException(inner) => {
                Error::WafInvalidAccountException(inner)
            }
            crate::error::ListRulesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListSizeConstraintSetsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListSizeConstraintSetsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListSizeConstraintSetsError> for Error {
    fn from(err: crate::error::ListSizeConstraintSetsError) -> Self {
        match err {
            crate::error::ListSizeConstraintSetsError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::ListSizeConstraintSetsError::WafInvalidAccountException(inner) => {
                Error::WafInvalidAccountException(inner)
            }
            crate::error::ListSizeConstraintSetsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListSqlInjectionMatchSetsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListSqlInjectionMatchSetsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListSqlInjectionMatchSetsError> for Error {
    fn from(err: crate::error::ListSqlInjectionMatchSetsError) -> Self {
        match err {
            crate::error::ListSqlInjectionMatchSetsError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::ListSqlInjectionMatchSetsError::WafInvalidAccountException(inner) => {
                Error::WafInvalidAccountException(inner)
            }
            crate::error::ListSqlInjectionMatchSetsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListSubscribedRuleGroupsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListSubscribedRuleGroupsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListSubscribedRuleGroupsError> for Error {
    fn from(err: crate::error::ListSubscribedRuleGroupsError) -> Self {
        match err {
            crate::error::ListSubscribedRuleGroupsError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::ListSubscribedRuleGroupsError::WafNonexistentItemException(inner) => {
                Error::WafNonexistentItemException(inner)
            }
            crate::error::ListSubscribedRuleGroupsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListTagsForResourceError> for Error {
    fn from(err: crate::error::ListTagsForResourceError) -> Self {
        match err {
            crate::error::ListTagsForResourceError::WafBadRequestException(inner) => {
                Error::WafBadRequestException(inner)
            }
            crate::error::ListTagsForResourceError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::ListTagsForResourceError::WafInvalidParameterException(inner) => {
                Error::WafInvalidParameterException(inner)
            }
            crate::error::ListTagsForResourceError::WafNonexistentItemException(inner) => {
                Error::WafNonexistentItemException(inner)
            }
            crate::error::ListTagsForResourceError::WafTagOperationException(inner) => {
                Error::WafTagOperationException(inner)
            }
            crate::error::ListTagsForResourceError::WafTagOperationInternalErrorException(
                inner,
            ) => Error::WafTagOperationInternalErrorException(inner),
            crate::error::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListWebACLsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListWebACLsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListWebACLsError> for Error {
    fn from(err: crate::error::ListWebACLsError) -> Self {
        match err {
            crate::error::ListWebACLsError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::ListWebACLsError::WafInvalidAccountException(inner) => {
                Error::WafInvalidAccountException(inner)
            }
            crate::error::ListWebACLsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListXssMatchSetsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListXssMatchSetsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListXssMatchSetsError> for Error {
    fn from(err: crate::error::ListXssMatchSetsError) -> Self {
        match err {
            crate::error::ListXssMatchSetsError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::ListXssMatchSetsError::WafInvalidAccountException(inner) => {
                Error::WafInvalidAccountException(inner)
            }
            crate::error::ListXssMatchSetsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutLoggingConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::PutLoggingConfigurationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutLoggingConfigurationError> for Error {
    fn from(err: crate::error::PutLoggingConfigurationError) -> Self {
        match err {
            crate::error::PutLoggingConfigurationError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::PutLoggingConfigurationError::WafNonexistentItemException(inner) => {
                Error::WafNonexistentItemException(inner)
            }
            crate::error::PutLoggingConfigurationError::WafServiceLinkedRoleErrorException(
                inner,
            ) => Error::WafServiceLinkedRoleErrorException(inner),
            crate::error::PutLoggingConfigurationError::WafStaleDataException(inner) => {
                Error::WafStaleDataException(inner)
            }
            crate::error::PutLoggingConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutPermissionPolicyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::PutPermissionPolicyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutPermissionPolicyError> for Error {
    fn from(err: crate::error::PutPermissionPolicyError) -> Self {
        match err {
            crate::error::PutPermissionPolicyError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::PutPermissionPolicyError::WafInvalidPermissionPolicyException(inner) => {
                Error::WafInvalidPermissionPolicyException(inner)
            }
            crate::error::PutPermissionPolicyError::WafNonexistentItemException(inner) => {
                Error::WafNonexistentItemException(inner)
            }
            crate::error::PutPermissionPolicyError::WafStaleDataException(inner) => {
                Error::WafStaleDataException(inner)
            }
            crate::error::PutPermissionPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::TagResourceError> for Error {
    fn from(err: crate::error::TagResourceError) -> Self {
        match err {
            crate::error::TagResourceError::WafBadRequestException(inner) => {
                Error::WafBadRequestException(inner)
            }
            crate::error::TagResourceError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::TagResourceError::WafInvalidParameterException(inner) => {
                Error::WafInvalidParameterException(inner)
            }
            crate::error::TagResourceError::WafLimitsExceededException(inner) => {
                Error::WafLimitsExceededException(inner)
            }
            crate::error::TagResourceError::WafNonexistentItemException(inner) => {
                Error::WafNonexistentItemException(inner)
            }
            crate::error::TagResourceError::WafTagOperationException(inner) => {
                Error::WafTagOperationException(inner)
            }
            crate::error::TagResourceError::WafTagOperationInternalErrorException(inner) => {
                Error::WafTagOperationInternalErrorException(inner)
            }
            crate::error::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UntagResourceError> for Error {
    fn from(err: crate::error::UntagResourceError) -> Self {
        match err {
            crate::error::UntagResourceError::WafBadRequestException(inner) => {
                Error::WafBadRequestException(inner)
            }
            crate::error::UntagResourceError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::UntagResourceError::WafInvalidParameterException(inner) => {
                Error::WafInvalidParameterException(inner)
            }
            crate::error::UntagResourceError::WafNonexistentItemException(inner) => {
                Error::WafNonexistentItemException(inner)
            }
            crate::error::UntagResourceError::WafTagOperationException(inner) => {
                Error::WafTagOperationException(inner)
            }
            crate::error::UntagResourceError::WafTagOperationInternalErrorException(inner) => {
                Error::WafTagOperationInternalErrorException(inner)
            }
            crate::error::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateByteMatchSetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateByteMatchSetError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateByteMatchSetError> for Error {
    fn from(err: crate::error::UpdateByteMatchSetError) -> Self {
        match err {
            crate::error::UpdateByteMatchSetError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::UpdateByteMatchSetError::WafInvalidAccountException(inner) => {
                Error::WafInvalidAccountException(inner)
            }
            crate::error::UpdateByteMatchSetError::WafInvalidOperationException(inner) => {
                Error::WafInvalidOperationException(inner)
            }
            crate::error::UpdateByteMatchSetError::WafInvalidParameterException(inner) => {
                Error::WafInvalidParameterException(inner)
            }
            crate::error::UpdateByteMatchSetError::WafLimitsExceededException(inner) => {
                Error::WafLimitsExceededException(inner)
            }
            crate::error::UpdateByteMatchSetError::WafNonexistentContainerException(inner) => {
                Error::WafNonexistentContainerException(inner)
            }
            crate::error::UpdateByteMatchSetError::WafNonexistentItemException(inner) => {
                Error::WafNonexistentItemException(inner)
            }
            crate::error::UpdateByteMatchSetError::WafStaleDataException(inner) => {
                Error::WafStaleDataException(inner)
            }
            crate::error::UpdateByteMatchSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateGeoMatchSetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateGeoMatchSetError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateGeoMatchSetError> for Error {
    fn from(err: crate::error::UpdateGeoMatchSetError) -> Self {
        match err {
            crate::error::UpdateGeoMatchSetError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::UpdateGeoMatchSetError::WafInvalidAccountException(inner) => {
                Error::WafInvalidAccountException(inner)
            }
            crate::error::UpdateGeoMatchSetError::WafInvalidOperationException(inner) => {
                Error::WafInvalidOperationException(inner)
            }
            crate::error::UpdateGeoMatchSetError::WafInvalidParameterException(inner) => {
                Error::WafInvalidParameterException(inner)
            }
            crate::error::UpdateGeoMatchSetError::WafLimitsExceededException(inner) => {
                Error::WafLimitsExceededException(inner)
            }
            crate::error::UpdateGeoMatchSetError::WafNonexistentContainerException(inner) => {
                Error::WafNonexistentContainerException(inner)
            }
            crate::error::UpdateGeoMatchSetError::WafNonexistentItemException(inner) => {
                Error::WafNonexistentItemException(inner)
            }
            crate::error::UpdateGeoMatchSetError::WafReferencedItemException(inner) => {
                Error::WafReferencedItemException(inner)
            }
            crate::error::UpdateGeoMatchSetError::WafStaleDataException(inner) => {
                Error::WafStaleDataException(inner)
            }
            crate::error::UpdateGeoMatchSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateIPSetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateIPSetError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateIPSetError> for Error {
    fn from(err: crate::error::UpdateIPSetError) -> Self {
        match err {
            crate::error::UpdateIPSetError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::UpdateIPSetError::WafInvalidAccountException(inner) => {
                Error::WafInvalidAccountException(inner)
            }
            crate::error::UpdateIPSetError::WafInvalidOperationException(inner) => {
                Error::WafInvalidOperationException(inner)
            }
            crate::error::UpdateIPSetError::WafInvalidParameterException(inner) => {
                Error::WafInvalidParameterException(inner)
            }
            crate::error::UpdateIPSetError::WafLimitsExceededException(inner) => {
                Error::WafLimitsExceededException(inner)
            }
            crate::error::UpdateIPSetError::WafNonexistentContainerException(inner) => {
                Error::WafNonexistentContainerException(inner)
            }
            crate::error::UpdateIPSetError::WafNonexistentItemException(inner) => {
                Error::WafNonexistentItemException(inner)
            }
            crate::error::UpdateIPSetError::WafReferencedItemException(inner) => {
                Error::WafReferencedItemException(inner)
            }
            crate::error::UpdateIPSetError::WafStaleDataException(inner) => {
                Error::WafStaleDataException(inner)
            }
            crate::error::UpdateIPSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateRateBasedRuleError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateRateBasedRuleError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateRateBasedRuleError> for Error {
    fn from(err: crate::error::UpdateRateBasedRuleError) -> Self {
        match err {
            crate::error::UpdateRateBasedRuleError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::UpdateRateBasedRuleError::WafInvalidAccountException(inner) => {
                Error::WafInvalidAccountException(inner)
            }
            crate::error::UpdateRateBasedRuleError::WafInvalidOperationException(inner) => {
                Error::WafInvalidOperationException(inner)
            }
            crate::error::UpdateRateBasedRuleError::WafInvalidParameterException(inner) => {
                Error::WafInvalidParameterException(inner)
            }
            crate::error::UpdateRateBasedRuleError::WafLimitsExceededException(inner) => {
                Error::WafLimitsExceededException(inner)
            }
            crate::error::UpdateRateBasedRuleError::WafNonexistentContainerException(inner) => {
                Error::WafNonexistentContainerException(inner)
            }
            crate::error::UpdateRateBasedRuleError::WafNonexistentItemException(inner) => {
                Error::WafNonexistentItemException(inner)
            }
            crate::error::UpdateRateBasedRuleError::WafReferencedItemException(inner) => {
                Error::WafReferencedItemException(inner)
            }
            crate::error::UpdateRateBasedRuleError::WafStaleDataException(inner) => {
                Error::WafStaleDataException(inner)
            }
            crate::error::UpdateRateBasedRuleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateRegexMatchSetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateRegexMatchSetError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateRegexMatchSetError> for Error {
    fn from(err: crate::error::UpdateRegexMatchSetError) -> Self {
        match err {
            crate::error::UpdateRegexMatchSetError::WafDisallowedNameException(inner) => {
                Error::WafDisallowedNameException(inner)
            }
            crate::error::UpdateRegexMatchSetError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::UpdateRegexMatchSetError::WafInvalidAccountException(inner) => {
                Error::WafInvalidAccountException(inner)
            }
            crate::error::UpdateRegexMatchSetError::WafInvalidOperationException(inner) => {
                Error::WafInvalidOperationException(inner)
            }
            crate::error::UpdateRegexMatchSetError::WafLimitsExceededException(inner) => {
                Error::WafLimitsExceededException(inner)
            }
            crate::error::UpdateRegexMatchSetError::WafNonexistentContainerException(inner) => {
                Error::WafNonexistentContainerException(inner)
            }
            crate::error::UpdateRegexMatchSetError::WafNonexistentItemException(inner) => {
                Error::WafNonexistentItemException(inner)
            }
            crate::error::UpdateRegexMatchSetError::WafStaleDataException(inner) => {
                Error::WafStaleDataException(inner)
            }
            crate::error::UpdateRegexMatchSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateRegexPatternSetError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateRegexPatternSetError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateRegexPatternSetError> for Error {
    fn from(err: crate::error::UpdateRegexPatternSetError) -> Self {
        match err {
            crate::error::UpdateRegexPatternSetError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::UpdateRegexPatternSetError::WafInvalidAccountException(inner) => {
                Error::WafInvalidAccountException(inner)
            }
            crate::error::UpdateRegexPatternSetError::WafInvalidOperationException(inner) => {
                Error::WafInvalidOperationException(inner)
            }
            crate::error::UpdateRegexPatternSetError::WafInvalidRegexPatternException(inner) => {
                Error::WafInvalidRegexPatternException(inner)
            }
            crate::error::UpdateRegexPatternSetError::WafLimitsExceededException(inner) => {
                Error::WafLimitsExceededException(inner)
            }
            crate::error::UpdateRegexPatternSetError::WafNonexistentContainerException(inner) => {
                Error::WafNonexistentContainerException(inner)
            }
            crate::error::UpdateRegexPatternSetError::WafNonexistentItemException(inner) => {
                Error::WafNonexistentItemException(inner)
            }
            crate::error::UpdateRegexPatternSetError::WafStaleDataException(inner) => {
                Error::WafStaleDataException(inner)
            }
            crate::error::UpdateRegexPatternSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateRuleError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateRuleError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateRuleError> for Error {
    fn from(err: crate::error::UpdateRuleError) -> Self {
        match err {
            crate::error::UpdateRuleError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::UpdateRuleError::WafInvalidAccountException(inner) => {
                Error::WafInvalidAccountException(inner)
            }
            crate::error::UpdateRuleError::WafInvalidOperationException(inner) => {
                Error::WafInvalidOperationException(inner)
            }
            crate::error::UpdateRuleError::WafInvalidParameterException(inner) => {
                Error::WafInvalidParameterException(inner)
            }
            crate::error::UpdateRuleError::WafLimitsExceededException(inner) => {
                Error::WafLimitsExceededException(inner)
            }
            crate::error::UpdateRuleError::WafNonexistentContainerException(inner) => {
                Error::WafNonexistentContainerException(inner)
            }
            crate::error::UpdateRuleError::WafNonexistentItemException(inner) => {
                Error::WafNonexistentItemException(inner)
            }
            crate::error::UpdateRuleError::WafReferencedItemException(inner) => {
                Error::WafReferencedItemException(inner)
            }
            crate::error::UpdateRuleError::WafStaleDataException(inner) => {
                Error::WafStaleDataException(inner)
            }
            crate::error::UpdateRuleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateRuleGroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateRuleGroupError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateRuleGroupError> for Error {
    fn from(err: crate::error::UpdateRuleGroupError) -> Self {
        match err {
            crate::error::UpdateRuleGroupError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::UpdateRuleGroupError::WafInvalidOperationException(inner) => {
                Error::WafInvalidOperationException(inner)
            }
            crate::error::UpdateRuleGroupError::WafInvalidParameterException(inner) => {
                Error::WafInvalidParameterException(inner)
            }
            crate::error::UpdateRuleGroupError::WafLimitsExceededException(inner) => {
                Error::WafLimitsExceededException(inner)
            }
            crate::error::UpdateRuleGroupError::WafNonexistentContainerException(inner) => {
                Error::WafNonexistentContainerException(inner)
            }
            crate::error::UpdateRuleGroupError::WafNonexistentItemException(inner) => {
                Error::WafNonexistentItemException(inner)
            }
            crate::error::UpdateRuleGroupError::WafStaleDataException(inner) => {
                Error::WafStaleDataException(inner)
            }
            crate::error::UpdateRuleGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateSizeConstraintSetError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateSizeConstraintSetError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateSizeConstraintSetError> for Error {
    fn from(err: crate::error::UpdateSizeConstraintSetError) -> Self {
        match err {
            crate::error::UpdateSizeConstraintSetError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::UpdateSizeConstraintSetError::WafInvalidAccountException(inner) => {
                Error::WafInvalidAccountException(inner)
            }
            crate::error::UpdateSizeConstraintSetError::WafInvalidOperationException(inner) => {
                Error::WafInvalidOperationException(inner)
            }
            crate::error::UpdateSizeConstraintSetError::WafInvalidParameterException(inner) => {
                Error::WafInvalidParameterException(inner)
            }
            crate::error::UpdateSizeConstraintSetError::WafLimitsExceededException(inner) => {
                Error::WafLimitsExceededException(inner)
            }
            crate::error::UpdateSizeConstraintSetError::WafNonexistentContainerException(inner) => {
                Error::WafNonexistentContainerException(inner)
            }
            crate::error::UpdateSizeConstraintSetError::WafNonexistentItemException(inner) => {
                Error::WafNonexistentItemException(inner)
            }
            crate::error::UpdateSizeConstraintSetError::WafReferencedItemException(inner) => {
                Error::WafReferencedItemException(inner)
            }
            crate::error::UpdateSizeConstraintSetError::WafStaleDataException(inner) => {
                Error::WafStaleDataException(inner)
            }
            crate::error::UpdateSizeConstraintSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateSqlInjectionMatchSetError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateSqlInjectionMatchSetError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateSqlInjectionMatchSetError> for Error {
    fn from(err: crate::error::UpdateSqlInjectionMatchSetError) -> Self {
        match err {
            crate::error::UpdateSqlInjectionMatchSetError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::UpdateSqlInjectionMatchSetError::WafInvalidAccountException(inner) => {
                Error::WafInvalidAccountException(inner)
            }
            crate::error::UpdateSqlInjectionMatchSetError::WafInvalidOperationException(inner) => {
                Error::WafInvalidOperationException(inner)
            }
            crate::error::UpdateSqlInjectionMatchSetError::WafInvalidParameterException(inner) => {
                Error::WafInvalidParameterException(inner)
            }
            crate::error::UpdateSqlInjectionMatchSetError::WafLimitsExceededException(inner) => {
                Error::WafLimitsExceededException(inner)
            }
            crate::error::UpdateSqlInjectionMatchSetError::WafNonexistentContainerException(
                inner,
            ) => Error::WafNonexistentContainerException(inner),
            crate::error::UpdateSqlInjectionMatchSetError::WafNonexistentItemException(inner) => {
                Error::WafNonexistentItemException(inner)
            }
            crate::error::UpdateSqlInjectionMatchSetError::WafStaleDataException(inner) => {
                Error::WafStaleDataException(inner)
            }
            crate::error::UpdateSqlInjectionMatchSetError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateWebACLError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateWebACLError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateWebACLError> for Error {
    fn from(err: crate::error::UpdateWebACLError) -> Self {
        match err {
            crate::error::UpdateWebACLError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::UpdateWebACLError::WafInvalidAccountException(inner) => {
                Error::WafInvalidAccountException(inner)
            }
            crate::error::UpdateWebACLError::WafInvalidOperationException(inner) => {
                Error::WafInvalidOperationException(inner)
            }
            crate::error::UpdateWebACLError::WafInvalidParameterException(inner) => {
                Error::WafInvalidParameterException(inner)
            }
            crate::error::UpdateWebACLError::WafLimitsExceededException(inner) => {
                Error::WafLimitsExceededException(inner)
            }
            crate::error::UpdateWebACLError::WafNonexistentContainerException(inner) => {
                Error::WafNonexistentContainerException(inner)
            }
            crate::error::UpdateWebACLError::WafNonexistentItemException(inner) => {
                Error::WafNonexistentItemException(inner)
            }
            crate::error::UpdateWebACLError::WafReferencedItemException(inner) => {
                Error::WafReferencedItemException(inner)
            }
            crate::error::UpdateWebACLError::WafStaleDataException(inner) => {
                Error::WafStaleDataException(inner)
            }
            crate::error::UpdateWebACLError::WafSubscriptionNotFoundException(inner) => {
                Error::WafSubscriptionNotFoundException(inner)
            }
            crate::error::UpdateWebACLError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateXssMatchSetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateXssMatchSetError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateXssMatchSetError> for Error {
    fn from(err: crate::error::UpdateXssMatchSetError) -> Self {
        match err {
            crate::error::UpdateXssMatchSetError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::UpdateXssMatchSetError::WafInvalidAccountException(inner) => {
                Error::WafInvalidAccountException(inner)
            }
            crate::error::UpdateXssMatchSetError::WafInvalidOperationException(inner) => {
                Error::WafInvalidOperationException(inner)
            }
            crate::error::UpdateXssMatchSetError::WafInvalidParameterException(inner) => {
                Error::WafInvalidParameterException(inner)
            }
            crate::error::UpdateXssMatchSetError::WafLimitsExceededException(inner) => {
                Error::WafLimitsExceededException(inner)
            }
            crate::error::UpdateXssMatchSetError::WafNonexistentContainerException(inner) => {
                Error::WafNonexistentContainerException(inner)
            }
            crate::error::UpdateXssMatchSetError::WafNonexistentItemException(inner) => {
                Error::WafNonexistentItemException(inner)
            }
            crate::error::UpdateXssMatchSetError::WafStaleDataException(inner) => {
                Error::WafStaleDataException(inner)
            }
            crate::error::UpdateXssMatchSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::WafBadRequestException(e) => e.request_id(),
            Self::WafDisallowedNameException(e) => e.request_id(),
            Self::WafEntityMigrationException(e) => e.request_id(),
            Self::WafInternalErrorException(e) => e.request_id(),
            Self::WafInvalidAccountException(e) => e.request_id(),
            Self::WafInvalidOperationException(e) => e.request_id(),
            Self::WafInvalidParameterException(e) => e.request_id(),
            Self::WafInvalidPermissionPolicyException(e) => e.request_id(),
            Self::WafInvalidRegexPatternException(e) => e.request_id(),
            Self::WafLimitsExceededException(e) => e.request_id(),
            Self::WafNonEmptyEntityException(e) => e.request_id(),
            Self::WafNonexistentContainerException(e) => e.request_id(),
            Self::WafNonexistentItemException(e) => e.request_id(),
            Self::WafReferencedItemException(e) => e.request_id(),
            Self::WafServiceLinkedRoleErrorException(e) => e.request_id(),
            Self::WafStaleDataException(e) => e.request_id(),
            Self::WafSubscriptionNotFoundException(e) => e.request_id(),
            Self::WafTagOperationException(e) => e.request_id(),
            Self::WafTagOperationInternalErrorException(e) => e.request_id(),
            Self::WafUnavailableEntityException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
