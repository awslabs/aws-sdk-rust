// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains one or more certificates or a certificate signing request (CSR).</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Certificates {
    /// <p>The cluster's certificate signing request (CSR). The CSR exists only when the cluster's state is <code>UNINITIALIZED</code>.</p>
    #[doc(hidden)]
    pub cluster_csr: std::option::Option<std::string::String>,
    /// <p>The HSM certificate issued (signed) by the HSM hardware.</p>
    #[doc(hidden)]
    pub hsm_certificate: std::option::Option<std::string::String>,
    /// <p>The HSM hardware certificate issued (signed) by AWS CloudHSM.</p>
    #[doc(hidden)]
    pub aws_hardware_certificate: std::option::Option<std::string::String>,
    /// <p>The HSM hardware certificate issued (signed) by the hardware manufacturer.</p>
    #[doc(hidden)]
    pub manufacturer_hardware_certificate: std::option::Option<std::string::String>,
    /// <p>The cluster certificate issued (signed) by the issuing certificate authority (CA) of the cluster's owner.</p>
    #[doc(hidden)]
    pub cluster_certificate: std::option::Option<std::string::String>,
}
impl Certificates {
    /// <p>The cluster's certificate signing request (CSR). The CSR exists only when the cluster's state is <code>UNINITIALIZED</code>.</p>
    pub fn cluster_csr(&self) -> std::option::Option<&str> {
        self.cluster_csr.as_deref()
    }
    /// <p>The HSM certificate issued (signed) by the HSM hardware.</p>
    pub fn hsm_certificate(&self) -> std::option::Option<&str> {
        self.hsm_certificate.as_deref()
    }
    /// <p>The HSM hardware certificate issued (signed) by AWS CloudHSM.</p>
    pub fn aws_hardware_certificate(&self) -> std::option::Option<&str> {
        self.aws_hardware_certificate.as_deref()
    }
    /// <p>The HSM hardware certificate issued (signed) by the hardware manufacturer.</p>
    pub fn manufacturer_hardware_certificate(&self) -> std::option::Option<&str> {
        self.manufacturer_hardware_certificate.as_deref()
    }
    /// <p>The cluster certificate issued (signed) by the issuing certificate authority (CA) of the cluster's owner.</p>
    pub fn cluster_certificate(&self) -> std::option::Option<&str> {
        self.cluster_certificate.as_deref()
    }
}
impl Certificates {
    /// Creates a new builder-style object to manufacture [`Certificates`](crate::types::Certificates).
    pub fn builder() -> crate::types::builders::CertificatesBuilder {
        crate::types::builders::CertificatesBuilder::default()
    }
}

/// A builder for [`Certificates`](crate::types::Certificates).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CertificatesBuilder {
    pub(crate) cluster_csr: std::option::Option<std::string::String>,
    pub(crate) hsm_certificate: std::option::Option<std::string::String>,
    pub(crate) aws_hardware_certificate: std::option::Option<std::string::String>,
    pub(crate) manufacturer_hardware_certificate: std::option::Option<std::string::String>,
    pub(crate) cluster_certificate: std::option::Option<std::string::String>,
}
impl CertificatesBuilder {
    /// <p>The cluster's certificate signing request (CSR). The CSR exists only when the cluster's state is <code>UNINITIALIZED</code>.</p>
    pub fn cluster_csr(mut self, input: impl Into<std::string::String>) -> Self {
        self.cluster_csr = Some(input.into());
        self
    }
    /// <p>The cluster's certificate signing request (CSR). The CSR exists only when the cluster's state is <code>UNINITIALIZED</code>.</p>
    pub fn set_cluster_csr(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.cluster_csr = input;
        self
    }
    /// <p>The HSM certificate issued (signed) by the HSM hardware.</p>
    pub fn hsm_certificate(mut self, input: impl Into<std::string::String>) -> Self {
        self.hsm_certificate = Some(input.into());
        self
    }
    /// <p>The HSM certificate issued (signed) by the HSM hardware.</p>
    pub fn set_hsm_certificate(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.hsm_certificate = input;
        self
    }
    /// <p>The HSM hardware certificate issued (signed) by AWS CloudHSM.</p>
    pub fn aws_hardware_certificate(mut self, input: impl Into<std::string::String>) -> Self {
        self.aws_hardware_certificate = Some(input.into());
        self
    }
    /// <p>The HSM hardware certificate issued (signed) by AWS CloudHSM.</p>
    pub fn set_aws_hardware_certificate(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.aws_hardware_certificate = input;
        self
    }
    /// <p>The HSM hardware certificate issued (signed) by the hardware manufacturer.</p>
    pub fn manufacturer_hardware_certificate(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.manufacturer_hardware_certificate = Some(input.into());
        self
    }
    /// <p>The HSM hardware certificate issued (signed) by the hardware manufacturer.</p>
    pub fn set_manufacturer_hardware_certificate(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.manufacturer_hardware_certificate = input;
        self
    }
    /// <p>The cluster certificate issued (signed) by the issuing certificate authority (CA) of the cluster's owner.</p>
    pub fn cluster_certificate(mut self, input: impl Into<std::string::String>) -> Self {
        self.cluster_certificate = Some(input.into());
        self
    }
    /// <p>The cluster certificate issued (signed) by the issuing certificate authority (CA) of the cluster's owner.</p>
    pub fn set_cluster_certificate(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.cluster_certificate = input;
        self
    }
    /// Consumes the builder and constructs a [`Certificates`](crate::types::Certificates).
    pub fn build(self) -> crate::types::Certificates {
        crate::types::Certificates {
            cluster_csr: self.cluster_csr,
            hsm_certificate: self.hsm_certificate,
            aws_hardware_certificate: self.aws_hardware_certificate,
            manufacturer_hardware_certificate: self.manufacturer_hardware_certificate,
            cluster_certificate: self.cluster_certificate,
        }
    }
}
