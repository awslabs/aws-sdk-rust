// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about the backup that will be copied and created by the <code>CopyBackupToRegion</code> operation.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DestinationBackup {
    /// <p>The date and time when both the source backup was created.</p>
    #[doc(hidden)]
    pub create_timestamp: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The AWS region that contains the source backup from which the new backup was copied.</p>
    #[doc(hidden)]
    pub source_region: std::option::Option<std::string::String>,
    /// <p>The identifier (ID) of the source backup from which the new backup was copied.</p>
    #[doc(hidden)]
    pub source_backup: std::option::Option<std::string::String>,
    /// <p>The identifier (ID) of the cluster containing the source backup from which the new backup was copied.</p>
    #[doc(hidden)]
    pub source_cluster: std::option::Option<std::string::String>,
}
impl DestinationBackup {
    /// <p>The date and time when both the source backup was created.</p>
    pub fn create_timestamp(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.create_timestamp.as_ref()
    }
    /// <p>The AWS region that contains the source backup from which the new backup was copied.</p>
    pub fn source_region(&self) -> std::option::Option<&str> {
        self.source_region.as_deref()
    }
    /// <p>The identifier (ID) of the source backup from which the new backup was copied.</p>
    pub fn source_backup(&self) -> std::option::Option<&str> {
        self.source_backup.as_deref()
    }
    /// <p>The identifier (ID) of the cluster containing the source backup from which the new backup was copied.</p>
    pub fn source_cluster(&self) -> std::option::Option<&str> {
        self.source_cluster.as_deref()
    }
}
impl DestinationBackup {
    /// Creates a new builder-style object to manufacture [`DestinationBackup`](crate::types::DestinationBackup).
    pub fn builder() -> crate::types::builders::DestinationBackupBuilder {
        crate::types::builders::DestinationBackupBuilder::default()
    }
}

/// A builder for [`DestinationBackup`](crate::types::DestinationBackup).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DestinationBackupBuilder {
    pub(crate) create_timestamp: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) source_region: std::option::Option<std::string::String>,
    pub(crate) source_backup: std::option::Option<std::string::String>,
    pub(crate) source_cluster: std::option::Option<std::string::String>,
}
impl DestinationBackupBuilder {
    /// <p>The date and time when both the source backup was created.</p>
    pub fn create_timestamp(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.create_timestamp = Some(input);
        self
    }
    /// <p>The date and time when both the source backup was created.</p>
    pub fn set_create_timestamp(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.create_timestamp = input;
        self
    }
    /// <p>The AWS region that contains the source backup from which the new backup was copied.</p>
    pub fn source_region(mut self, input: impl Into<std::string::String>) -> Self {
        self.source_region = Some(input.into());
        self
    }
    /// <p>The AWS region that contains the source backup from which the new backup was copied.</p>
    pub fn set_source_region(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.source_region = input;
        self
    }
    /// <p>The identifier (ID) of the source backup from which the new backup was copied.</p>
    pub fn source_backup(mut self, input: impl Into<std::string::String>) -> Self {
        self.source_backup = Some(input.into());
        self
    }
    /// <p>The identifier (ID) of the source backup from which the new backup was copied.</p>
    pub fn set_source_backup(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.source_backup = input;
        self
    }
    /// <p>The identifier (ID) of the cluster containing the source backup from which the new backup was copied.</p>
    pub fn source_cluster(mut self, input: impl Into<std::string::String>) -> Self {
        self.source_cluster = Some(input.into());
        self
    }
    /// <p>The identifier (ID) of the cluster containing the source backup from which the new backup was copied.</p>
    pub fn set_source_cluster(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.source_cluster = input;
        self
    }
    /// Consumes the builder and constructs a [`DestinationBackup`](crate::types::DestinationBackup).
    pub fn build(self) -> crate::types::DestinationBackup {
        crate::types::DestinationBackup {
            create_timestamp: self.create_timestamp,
            source_region: self.source_region,
            source_backup: self.source_backup,
            source_cluster: self.source_cluster,
        }
    }
}
