// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`InitializeCluster`](crate::operation::initialize_cluster::builders::InitializeClusterFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`cluster_id(impl Into<String>)`](crate::operation::initialize_cluster::builders::InitializeClusterFluentBuilder::cluster_id) / [`set_cluster_id(Option<String>)`](crate::operation::initialize_cluster::builders::InitializeClusterFluentBuilder::set_cluster_id):<br>required: **true**<br><p>The identifier (ID) of the cluster that you are claiming. To find the cluster ID, use <code>DescribeClusters</code>.</p><br>
    ///   - [`signed_cert(impl Into<String>)`](crate::operation::initialize_cluster::builders::InitializeClusterFluentBuilder::signed_cert) / [`set_signed_cert(Option<String>)`](crate::operation::initialize_cluster::builders::InitializeClusterFluentBuilder::set_signed_cert):<br>required: **true**<br><p>The cluster certificate issued (signed) by your issuing certificate authority (CA). The certificate must be in PEM format and can contain a maximum of 5000 characters.</p><br>
    ///   - [`trust_anchor(impl Into<String>)`](crate::operation::initialize_cluster::builders::InitializeClusterFluentBuilder::trust_anchor) / [`set_trust_anchor(Option<String>)`](crate::operation::initialize_cluster::builders::InitializeClusterFluentBuilder::set_trust_anchor):<br>required: **true**<br><p>The issuing certificate of the issuing certificate authority (CA) that issued (signed) the cluster certificate. You must use a self-signed certificate. The certificate used to sign the HSM CSR must be directly available, and thus must be the root certificate. The certificate must be in PEM format and can contain a maximum of 5000 characters.</p><br>
    /// - On success, responds with [`InitializeClusterOutput`](crate::operation::initialize_cluster::InitializeClusterOutput) with field(s):
    ///   - [`state(Option<ClusterState>)`](crate::operation::initialize_cluster::InitializeClusterOutput::state): <p>The cluster's state.</p>
    ///   - [`state_message(Option<String>)`](crate::operation::initialize_cluster::InitializeClusterOutput::state_message): <p>A description of the cluster's state.</p>
    /// - On failure, responds with [`SdkError<InitializeClusterError>`](crate::operation::initialize_cluster::InitializeClusterError)
    pub fn initialize_cluster(&self) -> crate::operation::initialize_cluster::builders::InitializeClusterFluentBuilder {
        crate::operation::initialize_cluster::builders::InitializeClusterFluentBuilder::new(self.handle.clone())
    }
}
