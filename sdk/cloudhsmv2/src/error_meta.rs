// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>The request was rejected because the requester does not have permission to perform the requested operation.</p>
    CloudHsmAccessDeniedException(crate::error::CloudHsmAccessDeniedException),
    /// <p>The request was rejected because of an AWS CloudHSM internal failure. The request can be retried.</p>
    CloudHsmInternalFailureException(crate::error::CloudHsmInternalFailureException),
    /// <p>The request was rejected because it is not a valid request.</p>
    CloudHsmInvalidRequestException(crate::error::CloudHsmInvalidRequestException),
    /// <p>The request was rejected because it refers to a resource that cannot be found.</p>
    CloudHsmResourceNotFoundException(crate::error::CloudHsmResourceNotFoundException),
    /// <p>The request was rejected because an error occurred.</p>
    CloudHsmServiceException(crate::error::CloudHsmServiceException),
    /// <p>The request was rejected because of a tagging failure. Verify the tag conditions in all applicable policies, and then retry the request.</p>
    CloudHsmTagException(crate::error::CloudHsmTagException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::CloudHsmAccessDeniedException(inner) => inner.fmt(f),
            Error::CloudHsmInternalFailureException(inner) => inner.fmt(f),
            Error::CloudHsmInvalidRequestException(inner) => inner.fmt(f),
            Error::CloudHsmResourceNotFoundException(inner) => inner.fmt(f),
            Error::CloudHsmServiceException(inner) => inner.fmt(f),
            Error::CloudHsmTagException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CopyBackupToRegionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CopyBackupToRegionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CopyBackupToRegionError> for Error {
    fn from(err: crate::error::CopyBackupToRegionError) -> Self {
        match err {
            crate::error::CopyBackupToRegionError::CloudHsmAccessDeniedException(inner) => {
                Error::CloudHsmAccessDeniedException(inner)
            }
            crate::error::CopyBackupToRegionError::CloudHsmInternalFailureException(inner) => {
                Error::CloudHsmInternalFailureException(inner)
            }
            crate::error::CopyBackupToRegionError::CloudHsmInvalidRequestException(inner) => {
                Error::CloudHsmInvalidRequestException(inner)
            }
            crate::error::CopyBackupToRegionError::CloudHsmResourceNotFoundException(inner) => {
                Error::CloudHsmResourceNotFoundException(inner)
            }
            crate::error::CopyBackupToRegionError::CloudHsmServiceException(inner) => {
                Error::CloudHsmServiceException(inner)
            }
            crate::error::CopyBackupToRegionError::CloudHsmTagException(inner) => {
                Error::CloudHsmTagException(inner)
            }
            crate::error::CopyBackupToRegionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateClusterError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateClusterError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateClusterError> for Error {
    fn from(err: crate::error::CreateClusterError) -> Self {
        match err {
            crate::error::CreateClusterError::CloudHsmAccessDeniedException(inner) => {
                Error::CloudHsmAccessDeniedException(inner)
            }
            crate::error::CreateClusterError::CloudHsmInternalFailureException(inner) => {
                Error::CloudHsmInternalFailureException(inner)
            }
            crate::error::CreateClusterError::CloudHsmInvalidRequestException(inner) => {
                Error::CloudHsmInvalidRequestException(inner)
            }
            crate::error::CreateClusterError::CloudHsmResourceNotFoundException(inner) => {
                Error::CloudHsmResourceNotFoundException(inner)
            }
            crate::error::CreateClusterError::CloudHsmServiceException(inner) => {
                Error::CloudHsmServiceException(inner)
            }
            crate::error::CreateClusterError::CloudHsmTagException(inner) => {
                Error::CloudHsmTagException(inner)
            }
            crate::error::CreateClusterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateHsmError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateHsmError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateHsmError> for Error {
    fn from(err: crate::error::CreateHsmError) -> Self {
        match err {
            crate::error::CreateHsmError::CloudHsmAccessDeniedException(inner) => {
                Error::CloudHsmAccessDeniedException(inner)
            }
            crate::error::CreateHsmError::CloudHsmInternalFailureException(inner) => {
                Error::CloudHsmInternalFailureException(inner)
            }
            crate::error::CreateHsmError::CloudHsmInvalidRequestException(inner) => {
                Error::CloudHsmInvalidRequestException(inner)
            }
            crate::error::CreateHsmError::CloudHsmResourceNotFoundException(inner) => {
                Error::CloudHsmResourceNotFoundException(inner)
            }
            crate::error::CreateHsmError::CloudHsmServiceException(inner) => {
                Error::CloudHsmServiceException(inner)
            }
            crate::error::CreateHsmError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteBackupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteBackupError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteBackupError> for Error {
    fn from(err: crate::error::DeleteBackupError) -> Self {
        match err {
            crate::error::DeleteBackupError::CloudHsmAccessDeniedException(inner) => {
                Error::CloudHsmAccessDeniedException(inner)
            }
            crate::error::DeleteBackupError::CloudHsmInternalFailureException(inner) => {
                Error::CloudHsmInternalFailureException(inner)
            }
            crate::error::DeleteBackupError::CloudHsmInvalidRequestException(inner) => {
                Error::CloudHsmInvalidRequestException(inner)
            }
            crate::error::DeleteBackupError::CloudHsmResourceNotFoundException(inner) => {
                Error::CloudHsmResourceNotFoundException(inner)
            }
            crate::error::DeleteBackupError::CloudHsmServiceException(inner) => {
                Error::CloudHsmServiceException(inner)
            }
            crate::error::DeleteBackupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteClusterError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteClusterError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteClusterError> for Error {
    fn from(err: crate::error::DeleteClusterError) -> Self {
        match err {
            crate::error::DeleteClusterError::CloudHsmAccessDeniedException(inner) => {
                Error::CloudHsmAccessDeniedException(inner)
            }
            crate::error::DeleteClusterError::CloudHsmInternalFailureException(inner) => {
                Error::CloudHsmInternalFailureException(inner)
            }
            crate::error::DeleteClusterError::CloudHsmInvalidRequestException(inner) => {
                Error::CloudHsmInvalidRequestException(inner)
            }
            crate::error::DeleteClusterError::CloudHsmResourceNotFoundException(inner) => {
                Error::CloudHsmResourceNotFoundException(inner)
            }
            crate::error::DeleteClusterError::CloudHsmServiceException(inner) => {
                Error::CloudHsmServiceException(inner)
            }
            crate::error::DeleteClusterError::CloudHsmTagException(inner) => {
                Error::CloudHsmTagException(inner)
            }
            crate::error::DeleteClusterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteHsmError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteHsmError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteHsmError> for Error {
    fn from(err: crate::error::DeleteHsmError) -> Self {
        match err {
            crate::error::DeleteHsmError::CloudHsmAccessDeniedException(inner) => {
                Error::CloudHsmAccessDeniedException(inner)
            }
            crate::error::DeleteHsmError::CloudHsmInternalFailureException(inner) => {
                Error::CloudHsmInternalFailureException(inner)
            }
            crate::error::DeleteHsmError::CloudHsmInvalidRequestException(inner) => {
                Error::CloudHsmInvalidRequestException(inner)
            }
            crate::error::DeleteHsmError::CloudHsmResourceNotFoundException(inner) => {
                Error::CloudHsmResourceNotFoundException(inner)
            }
            crate::error::DeleteHsmError::CloudHsmServiceException(inner) => {
                Error::CloudHsmServiceException(inner)
            }
            crate::error::DeleteHsmError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeBackupsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeBackupsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeBackupsError> for Error {
    fn from(err: crate::error::DescribeBackupsError) -> Self {
        match err {
            crate::error::DescribeBackupsError::CloudHsmAccessDeniedException(inner) => {
                Error::CloudHsmAccessDeniedException(inner)
            }
            crate::error::DescribeBackupsError::CloudHsmInternalFailureException(inner) => {
                Error::CloudHsmInternalFailureException(inner)
            }
            crate::error::DescribeBackupsError::CloudHsmInvalidRequestException(inner) => {
                Error::CloudHsmInvalidRequestException(inner)
            }
            crate::error::DescribeBackupsError::CloudHsmResourceNotFoundException(inner) => {
                Error::CloudHsmResourceNotFoundException(inner)
            }
            crate::error::DescribeBackupsError::CloudHsmServiceException(inner) => {
                Error::CloudHsmServiceException(inner)
            }
            crate::error::DescribeBackupsError::CloudHsmTagException(inner) => {
                Error::CloudHsmTagException(inner)
            }
            crate::error::DescribeBackupsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeClustersError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeClustersError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeClustersError> for Error {
    fn from(err: crate::error::DescribeClustersError) -> Self {
        match err {
            crate::error::DescribeClustersError::CloudHsmAccessDeniedException(inner) => {
                Error::CloudHsmAccessDeniedException(inner)
            }
            crate::error::DescribeClustersError::CloudHsmInternalFailureException(inner) => {
                Error::CloudHsmInternalFailureException(inner)
            }
            crate::error::DescribeClustersError::CloudHsmInvalidRequestException(inner) => {
                Error::CloudHsmInvalidRequestException(inner)
            }
            crate::error::DescribeClustersError::CloudHsmServiceException(inner) => {
                Error::CloudHsmServiceException(inner)
            }
            crate::error::DescribeClustersError::CloudHsmTagException(inner) => {
                Error::CloudHsmTagException(inner)
            }
            crate::error::DescribeClustersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::InitializeClusterError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::InitializeClusterError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::InitializeClusterError> for Error {
    fn from(err: crate::error::InitializeClusterError) -> Self {
        match err {
            crate::error::InitializeClusterError::CloudHsmAccessDeniedException(inner) => {
                Error::CloudHsmAccessDeniedException(inner)
            }
            crate::error::InitializeClusterError::CloudHsmInternalFailureException(inner) => {
                Error::CloudHsmInternalFailureException(inner)
            }
            crate::error::InitializeClusterError::CloudHsmInvalidRequestException(inner) => {
                Error::CloudHsmInvalidRequestException(inner)
            }
            crate::error::InitializeClusterError::CloudHsmResourceNotFoundException(inner) => {
                Error::CloudHsmResourceNotFoundException(inner)
            }
            crate::error::InitializeClusterError::CloudHsmServiceException(inner) => {
                Error::CloudHsmServiceException(inner)
            }
            crate::error::InitializeClusterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTagsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListTagsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListTagsError> for Error {
    fn from(err: crate::error::ListTagsError) -> Self {
        match err {
            crate::error::ListTagsError::CloudHsmAccessDeniedException(inner) => {
                Error::CloudHsmAccessDeniedException(inner)
            }
            crate::error::ListTagsError::CloudHsmInternalFailureException(inner) => {
                Error::CloudHsmInternalFailureException(inner)
            }
            crate::error::ListTagsError::CloudHsmInvalidRequestException(inner) => {
                Error::CloudHsmInvalidRequestException(inner)
            }
            crate::error::ListTagsError::CloudHsmResourceNotFoundException(inner) => {
                Error::CloudHsmResourceNotFoundException(inner)
            }
            crate::error::ListTagsError::CloudHsmServiceException(inner) => {
                Error::CloudHsmServiceException(inner)
            }
            crate::error::ListTagsError::CloudHsmTagException(inner) => {
                Error::CloudHsmTagException(inner)
            }
            crate::error::ListTagsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ModifyBackupAttributesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ModifyBackupAttributesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ModifyBackupAttributesError> for Error {
    fn from(err: crate::error::ModifyBackupAttributesError) -> Self {
        match err {
            crate::error::ModifyBackupAttributesError::CloudHsmAccessDeniedException(inner) => {
                Error::CloudHsmAccessDeniedException(inner)
            }
            crate::error::ModifyBackupAttributesError::CloudHsmInternalFailureException(inner) => {
                Error::CloudHsmInternalFailureException(inner)
            }
            crate::error::ModifyBackupAttributesError::CloudHsmInvalidRequestException(inner) => {
                Error::CloudHsmInvalidRequestException(inner)
            }
            crate::error::ModifyBackupAttributesError::CloudHsmResourceNotFoundException(inner) => {
                Error::CloudHsmResourceNotFoundException(inner)
            }
            crate::error::ModifyBackupAttributesError::CloudHsmServiceException(inner) => {
                Error::CloudHsmServiceException(inner)
            }
            crate::error::ModifyBackupAttributesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ModifyClusterError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ModifyClusterError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ModifyClusterError> for Error {
    fn from(err: crate::error::ModifyClusterError) -> Self {
        match err {
            crate::error::ModifyClusterError::CloudHsmAccessDeniedException(inner) => {
                Error::CloudHsmAccessDeniedException(inner)
            }
            crate::error::ModifyClusterError::CloudHsmInternalFailureException(inner) => {
                Error::CloudHsmInternalFailureException(inner)
            }
            crate::error::ModifyClusterError::CloudHsmInvalidRequestException(inner) => {
                Error::CloudHsmInvalidRequestException(inner)
            }
            crate::error::ModifyClusterError::CloudHsmResourceNotFoundException(inner) => {
                Error::CloudHsmResourceNotFoundException(inner)
            }
            crate::error::ModifyClusterError::CloudHsmServiceException(inner) => {
                Error::CloudHsmServiceException(inner)
            }
            crate::error::ModifyClusterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RestoreBackupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::RestoreBackupError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RestoreBackupError> for Error {
    fn from(err: crate::error::RestoreBackupError) -> Self {
        match err {
            crate::error::RestoreBackupError::CloudHsmAccessDeniedException(inner) => {
                Error::CloudHsmAccessDeniedException(inner)
            }
            crate::error::RestoreBackupError::CloudHsmInternalFailureException(inner) => {
                Error::CloudHsmInternalFailureException(inner)
            }
            crate::error::RestoreBackupError::CloudHsmInvalidRequestException(inner) => {
                Error::CloudHsmInvalidRequestException(inner)
            }
            crate::error::RestoreBackupError::CloudHsmResourceNotFoundException(inner) => {
                Error::CloudHsmResourceNotFoundException(inner)
            }
            crate::error::RestoreBackupError::CloudHsmServiceException(inner) => {
                Error::CloudHsmServiceException(inner)
            }
            crate::error::RestoreBackupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::TagResourceError> for Error {
    fn from(err: crate::error::TagResourceError) -> Self {
        match err {
            crate::error::TagResourceError::CloudHsmAccessDeniedException(inner) => {
                Error::CloudHsmAccessDeniedException(inner)
            }
            crate::error::TagResourceError::CloudHsmInternalFailureException(inner) => {
                Error::CloudHsmInternalFailureException(inner)
            }
            crate::error::TagResourceError::CloudHsmInvalidRequestException(inner) => {
                Error::CloudHsmInvalidRequestException(inner)
            }
            crate::error::TagResourceError::CloudHsmResourceNotFoundException(inner) => {
                Error::CloudHsmResourceNotFoundException(inner)
            }
            crate::error::TagResourceError::CloudHsmServiceException(inner) => {
                Error::CloudHsmServiceException(inner)
            }
            crate::error::TagResourceError::CloudHsmTagException(inner) => {
                Error::CloudHsmTagException(inner)
            }
            crate::error::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UntagResourceError> for Error {
    fn from(err: crate::error::UntagResourceError) -> Self {
        match err {
            crate::error::UntagResourceError::CloudHsmAccessDeniedException(inner) => {
                Error::CloudHsmAccessDeniedException(inner)
            }
            crate::error::UntagResourceError::CloudHsmInternalFailureException(inner) => {
                Error::CloudHsmInternalFailureException(inner)
            }
            crate::error::UntagResourceError::CloudHsmInvalidRequestException(inner) => {
                Error::CloudHsmInvalidRequestException(inner)
            }
            crate::error::UntagResourceError::CloudHsmResourceNotFoundException(inner) => {
                Error::CloudHsmResourceNotFoundException(inner)
            }
            crate::error::UntagResourceError::CloudHsmServiceException(inner) => {
                Error::CloudHsmServiceException(inner)
            }
            crate::error::UntagResourceError::CloudHsmTagException(inner) => {
                Error::CloudHsmTagException(inner)
            }
            crate::error::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::CloudHsmAccessDeniedException(e) => e.request_id(),
            Self::CloudHsmInternalFailureException(e) => e.request_id(),
            Self::CloudHsmInvalidRequestException(e) => e.request_id(),
            Self::CloudHsmResourceNotFoundException(e) => e.request_id(),
            Self::CloudHsmServiceException(e) => e.request_id(),
            Self::CloudHsmTagException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
