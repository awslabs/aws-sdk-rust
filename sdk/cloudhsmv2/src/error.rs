// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// Do not use this.
///
/// Operation `*Error/*ErrorKind` types were combined into a single `*Error` enum. The `.kind` field on `*Error` no longer exists and isn't needed anymore (you can just match on the error directly since it's an enum now).
#[deprecated(
    note = "Operation `*Error/*ErrorKind` types were combined into a single `*Error` enum. The `.kind` field on `*Error` no longer exists and isn't needed anymore (you can just match on the error directly since it's an enum now)."
)]
pub type UntagResourceErrorKind = UntagResourceError;
/// Error type for the `UntagResourceError` operation.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum UntagResourceError {
    /// <p>The request was rejected because the requester does not have permission to perform the requested operation.</p>
    CloudHsmAccessDeniedException(crate::error::CloudHsmAccessDeniedException),
    /// <p>The request was rejected because of an AWS CloudHSM internal failure. The request can be retried.</p>
    CloudHsmInternalFailureException(crate::error::CloudHsmInternalFailureException),
    /// <p>The request was rejected because it is not a valid request.</p>
    CloudHsmInvalidRequestException(crate::error::CloudHsmInvalidRequestException),
    /// <p>The request was rejected because it refers to a resource that cannot be found.</p>
    CloudHsmResourceNotFoundException(crate::error::CloudHsmResourceNotFoundException),
    /// <p>The request was rejected because an error occurred.</p>
    CloudHsmServiceException(crate::error::CloudHsmServiceException),
    /// <p>The request was rejected because of a tagging failure. Verify the tag conditions in all applicable policies, and then retry the request.</p>
    CloudHsmTagException(crate::error::CloudHsmTagException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl aws_smithy_http::result::CreateUnhandledError for UntagResourceError {
    fn create_unhandled_error(
        source: Box<dyn std::error::Error + Send + Sync + 'static>,
        meta: Option<aws_smithy_types::error::ErrorMetadata>,
    ) -> Self {
        Self::Unhandled({
            let mut builder = aws_smithy_types::error::Unhandled::builder().source(source);
            builder.set_meta(meta);
            builder.build()
        })
    }
}
impl std::fmt::Display for UntagResourceError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::CloudHsmAccessDeniedException(_inner) => _inner.fmt(f),
            Self::CloudHsmInternalFailureException(_inner) => _inner.fmt(f),
            Self::CloudHsmInvalidRequestException(_inner) => _inner.fmt(f),
            Self::CloudHsmResourceNotFoundException(_inner) => _inner.fmt(f),
            Self::CloudHsmServiceException(_inner) => _inner.fmt(f),
            Self::CloudHsmTagException(_inner) => _inner.fmt(f),
            Self::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl aws_smithy_types::error::metadata::ProvideErrorMetadata for UntagResourceError {
    fn meta(&self) -> &aws_smithy_types::error::ErrorMetadata {
        match self {
            Self::CloudHsmAccessDeniedException(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::CloudHsmInternalFailureException(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::CloudHsmInvalidRequestException(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::CloudHsmResourceNotFoundException(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::CloudHsmServiceException(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::CloudHsmTagException(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::Unhandled(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
        }
    }
}
impl aws_http::request_id::RequestId for crate::error::UntagResourceError {
    fn request_id(&self) -> Option<&str> {
        self.meta().request_id()
    }
}
impl aws_smithy_types::retry::ProvideErrorKind for UntagResourceError {
    fn code(&self) -> Option<&str> {
        aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self)
    }
    fn retryable_error_kind(&self) -> Option<aws_smithy_types::retry::ErrorKind> {
        None
    }
}
impl UntagResourceError {
    /// Creates the `UntagResourceError::Unhandled` variant from any error type.
    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self::Unhandled(
            aws_smithy_types::error::Unhandled::builder()
                .source(err)
                .build(),
        )
    }

    /// Creates the `UntagResourceError::Unhandled` variant from a `aws_smithy_types::error::ErrorMetadata`.
    pub fn generic(err: aws_smithy_types::error::ErrorMetadata) -> Self {
        Self::Unhandled(
            aws_smithy_types::error::Unhandled::builder()
                .source(err.clone())
                .meta(err)
                .build(),
        )
    }
    ///
    /// Returns error metadata, which includes the error code, message,
    /// request ID, and potentially additional information.
    ///
    pub fn meta(&self) -> &aws_smithy_types::error::ErrorMetadata {
        use aws_smithy_types::error::metadata::ProvideErrorMetadata;
        match self {
            Self::CloudHsmAccessDeniedException(e) => e.meta(),
            Self::CloudHsmInternalFailureException(e) => e.meta(),
            Self::CloudHsmInvalidRequestException(e) => e.meta(),
            Self::CloudHsmResourceNotFoundException(e) => e.meta(),
            Self::CloudHsmServiceException(e) => e.meta(),
            Self::CloudHsmTagException(e) => e.meta(),
            Self::Unhandled(e) => e.meta(),
        }
    }
    /// Returns `true` if the error kind is `UntagResourceError::CloudHsmAccessDeniedException`.
    pub fn is_cloud_hsm_access_denied_exception(&self) -> bool {
        matches!(self, Self::CloudHsmAccessDeniedException(_))
    }
    /// Returns `true` if the error kind is `UntagResourceError::CloudHsmInternalFailureException`.
    pub fn is_cloud_hsm_internal_failure_exception(&self) -> bool {
        matches!(self, Self::CloudHsmInternalFailureException(_))
    }
    /// Returns `true` if the error kind is `UntagResourceError::CloudHsmInvalidRequestException`.
    pub fn is_cloud_hsm_invalid_request_exception(&self) -> bool {
        matches!(self, Self::CloudHsmInvalidRequestException(_))
    }
    /// Returns `true` if the error kind is `UntagResourceError::CloudHsmResourceNotFoundException`.
    pub fn is_cloud_hsm_resource_not_found_exception(&self) -> bool {
        matches!(self, Self::CloudHsmResourceNotFoundException(_))
    }
    /// Returns `true` if the error kind is `UntagResourceError::CloudHsmServiceException`.
    pub fn is_cloud_hsm_service_exception(&self) -> bool {
        matches!(self, Self::CloudHsmServiceException(_))
    }
    /// Returns `true` if the error kind is `UntagResourceError::CloudHsmTagException`.
    pub fn is_cloud_hsm_tag_exception(&self) -> bool {
        matches!(self, Self::CloudHsmTagException(_))
    }
}
impl std::error::Error for UntagResourceError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match self {
            Self::CloudHsmAccessDeniedException(_inner) => Some(_inner),
            Self::CloudHsmInternalFailureException(_inner) => Some(_inner),
            Self::CloudHsmInvalidRequestException(_inner) => Some(_inner),
            Self::CloudHsmResourceNotFoundException(_inner) => Some(_inner),
            Self::CloudHsmServiceException(_inner) => Some(_inner),
            Self::CloudHsmTagException(_inner) => Some(_inner),
            Self::Unhandled(_inner) => Some(_inner),
        }
    }
}

/// <p>The request was rejected because of a tagging failure. Verify the tag conditions in all applicable policies, and then retry the request.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CloudHsmTagException {
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub message: std::option::Option<std::string::String>,
    pub(crate) meta: aws_smithy_types::error::ErrorMetadata,
}
impl CloudHsmTagException {
    /// Creates a new builder-style object to manufacture [`CloudHsmTagException`](crate::error::CloudHsmTagException).
    pub fn builder() -> crate::error::cloud_hsm_tag_exception::Builder {
        crate::error::cloud_hsm_tag_exception::Builder::default()
    }
}
/// See [`CloudHsmTagException`](crate::error::CloudHsmTagException).
pub mod cloud_hsm_tag_exception {

    /// A builder for [`CloudHsmTagException`](crate::error::CloudHsmTagException).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
        meta: Option<aws_smithy_types::error::ErrorMetadata>,
    }
    impl Builder {
        #[allow(missing_docs)] // documentation missing in model
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// Sets error metadata
        pub fn meta(mut self, meta: aws_smithy_types::error::ErrorMetadata) -> Self {
            self.meta = Some(meta);
            self
        }

        /// Sets error metadata
        pub fn set_meta(
            &mut self,
            meta: Option<aws_smithy_types::error::ErrorMetadata>,
        ) -> &mut Self {
            self.meta = meta;
            self
        }
        /// Consumes the builder and constructs a [`CloudHsmTagException`](crate::error::CloudHsmTagException).
        pub fn build(self) -> crate::error::CloudHsmTagException {
            crate::error::CloudHsmTagException {
                message: self.message,
                meta: self.meta.unwrap_or_default(),
            }
        }
    }
}
impl CloudHsmTagException {
    /// Returns the error message.
    pub fn message(&self) -> std::option::Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for CloudHsmTagException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "CloudHsmTagException")?;
        if let Some(inner_1) = &self.message {
            {
                write!(f, ": {}", inner_1)?;
            }
        }
        Ok(())
    }
}
impl std::error::Error for CloudHsmTagException {}
impl aws_http::request_id::RequestId for crate::error::CloudHsmTagException {
    fn request_id(&self) -> Option<&str> {
        use aws_smithy_types::error::metadata::ProvideErrorMetadata;
        self.meta().request_id()
    }
}
impl aws_smithy_types::error::metadata::ProvideErrorMetadata for CloudHsmTagException {
    fn meta(&self) -> &aws_smithy_types::error::ErrorMetadata {
        &self.meta
    }
}

/// <p>The request was rejected because an error occurred.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CloudHsmServiceException {
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub message: std::option::Option<std::string::String>,
    pub(crate) meta: aws_smithy_types::error::ErrorMetadata,
}
impl CloudHsmServiceException {
    /// Creates a new builder-style object to manufacture [`CloudHsmServiceException`](crate::error::CloudHsmServiceException).
    pub fn builder() -> crate::error::cloud_hsm_service_exception::Builder {
        crate::error::cloud_hsm_service_exception::Builder::default()
    }
}
/// See [`CloudHsmServiceException`](crate::error::CloudHsmServiceException).
pub mod cloud_hsm_service_exception {

    /// A builder for [`CloudHsmServiceException`](crate::error::CloudHsmServiceException).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
        meta: Option<aws_smithy_types::error::ErrorMetadata>,
    }
    impl Builder {
        #[allow(missing_docs)] // documentation missing in model
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// Sets error metadata
        pub fn meta(mut self, meta: aws_smithy_types::error::ErrorMetadata) -> Self {
            self.meta = Some(meta);
            self
        }

        /// Sets error metadata
        pub fn set_meta(
            &mut self,
            meta: Option<aws_smithy_types::error::ErrorMetadata>,
        ) -> &mut Self {
            self.meta = meta;
            self
        }
        /// Consumes the builder and constructs a [`CloudHsmServiceException`](crate::error::CloudHsmServiceException).
        pub fn build(self) -> crate::error::CloudHsmServiceException {
            crate::error::CloudHsmServiceException {
                message: self.message,
                meta: self.meta.unwrap_or_default(),
            }
        }
    }
}
impl CloudHsmServiceException {
    /// Returns the error message.
    pub fn message(&self) -> std::option::Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for CloudHsmServiceException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "CloudHsmServiceException")?;
        if let Some(inner_2) = &self.message {
            {
                write!(f, ": {}", inner_2)?;
            }
        }
        Ok(())
    }
}
impl std::error::Error for CloudHsmServiceException {}
impl aws_http::request_id::RequestId for crate::error::CloudHsmServiceException {
    fn request_id(&self) -> Option<&str> {
        use aws_smithy_types::error::metadata::ProvideErrorMetadata;
        self.meta().request_id()
    }
}
impl aws_smithy_types::error::metadata::ProvideErrorMetadata for CloudHsmServiceException {
    fn meta(&self) -> &aws_smithy_types::error::ErrorMetadata {
        &self.meta
    }
}

/// <p>The request was rejected because it refers to a resource that cannot be found.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CloudHsmResourceNotFoundException {
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub message: std::option::Option<std::string::String>,
    pub(crate) meta: aws_smithy_types::error::ErrorMetadata,
}
impl CloudHsmResourceNotFoundException {
    /// Creates a new builder-style object to manufacture [`CloudHsmResourceNotFoundException`](crate::error::CloudHsmResourceNotFoundException).
    pub fn builder() -> crate::error::cloud_hsm_resource_not_found_exception::Builder {
        crate::error::cloud_hsm_resource_not_found_exception::Builder::default()
    }
}
/// See [`CloudHsmResourceNotFoundException`](crate::error::CloudHsmResourceNotFoundException).
pub mod cloud_hsm_resource_not_found_exception {

    /// A builder for [`CloudHsmResourceNotFoundException`](crate::error::CloudHsmResourceNotFoundException).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
        meta: Option<aws_smithy_types::error::ErrorMetadata>,
    }
    impl Builder {
        #[allow(missing_docs)] // documentation missing in model
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// Sets error metadata
        pub fn meta(mut self, meta: aws_smithy_types::error::ErrorMetadata) -> Self {
            self.meta = Some(meta);
            self
        }

        /// Sets error metadata
        pub fn set_meta(
            &mut self,
            meta: Option<aws_smithy_types::error::ErrorMetadata>,
        ) -> &mut Self {
            self.meta = meta;
            self
        }
        /// Consumes the builder and constructs a [`CloudHsmResourceNotFoundException`](crate::error::CloudHsmResourceNotFoundException).
        pub fn build(self) -> crate::error::CloudHsmResourceNotFoundException {
            crate::error::CloudHsmResourceNotFoundException {
                message: self.message,
                meta: self.meta.unwrap_or_default(),
            }
        }
    }
}
impl CloudHsmResourceNotFoundException {
    /// Returns the error message.
    pub fn message(&self) -> std::option::Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for CloudHsmResourceNotFoundException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "CloudHsmResourceNotFoundException")?;
        if let Some(inner_3) = &self.message {
            {
                write!(f, ": {}", inner_3)?;
            }
        }
        Ok(())
    }
}
impl std::error::Error for CloudHsmResourceNotFoundException {}
impl aws_http::request_id::RequestId for crate::error::CloudHsmResourceNotFoundException {
    fn request_id(&self) -> Option<&str> {
        use aws_smithy_types::error::metadata::ProvideErrorMetadata;
        self.meta().request_id()
    }
}
impl aws_smithy_types::error::metadata::ProvideErrorMetadata for CloudHsmResourceNotFoundException {
    fn meta(&self) -> &aws_smithy_types::error::ErrorMetadata {
        &self.meta
    }
}

/// <p>The request was rejected because it is not a valid request.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CloudHsmInvalidRequestException {
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub message: std::option::Option<std::string::String>,
    pub(crate) meta: aws_smithy_types::error::ErrorMetadata,
}
impl CloudHsmInvalidRequestException {
    /// Creates a new builder-style object to manufacture [`CloudHsmInvalidRequestException`](crate::error::CloudHsmInvalidRequestException).
    pub fn builder() -> crate::error::cloud_hsm_invalid_request_exception::Builder {
        crate::error::cloud_hsm_invalid_request_exception::Builder::default()
    }
}
/// See [`CloudHsmInvalidRequestException`](crate::error::CloudHsmInvalidRequestException).
pub mod cloud_hsm_invalid_request_exception {

    /// A builder for [`CloudHsmInvalidRequestException`](crate::error::CloudHsmInvalidRequestException).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
        meta: Option<aws_smithy_types::error::ErrorMetadata>,
    }
    impl Builder {
        #[allow(missing_docs)] // documentation missing in model
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// Sets error metadata
        pub fn meta(mut self, meta: aws_smithy_types::error::ErrorMetadata) -> Self {
            self.meta = Some(meta);
            self
        }

        /// Sets error metadata
        pub fn set_meta(
            &mut self,
            meta: Option<aws_smithy_types::error::ErrorMetadata>,
        ) -> &mut Self {
            self.meta = meta;
            self
        }
        /// Consumes the builder and constructs a [`CloudHsmInvalidRequestException`](crate::error::CloudHsmInvalidRequestException).
        pub fn build(self) -> crate::error::CloudHsmInvalidRequestException {
            crate::error::CloudHsmInvalidRequestException {
                message: self.message,
                meta: self.meta.unwrap_or_default(),
            }
        }
    }
}
impl CloudHsmInvalidRequestException {
    /// Returns the error message.
    pub fn message(&self) -> std::option::Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for CloudHsmInvalidRequestException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "CloudHsmInvalidRequestException")?;
        if let Some(inner_4) = &self.message {
            {
                write!(f, ": {}", inner_4)?;
            }
        }
        Ok(())
    }
}
impl std::error::Error for CloudHsmInvalidRequestException {}
impl aws_http::request_id::RequestId for crate::error::CloudHsmInvalidRequestException {
    fn request_id(&self) -> Option<&str> {
        use aws_smithy_types::error::metadata::ProvideErrorMetadata;
        self.meta().request_id()
    }
}
impl aws_smithy_types::error::metadata::ProvideErrorMetadata for CloudHsmInvalidRequestException {
    fn meta(&self) -> &aws_smithy_types::error::ErrorMetadata {
        &self.meta
    }
}

/// <p>The request was rejected because of an AWS CloudHSM internal failure. The request can be retried.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CloudHsmInternalFailureException {
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub message: std::option::Option<std::string::String>,
    pub(crate) meta: aws_smithy_types::error::ErrorMetadata,
}
impl CloudHsmInternalFailureException {
    /// Creates a new builder-style object to manufacture [`CloudHsmInternalFailureException`](crate::error::CloudHsmInternalFailureException).
    pub fn builder() -> crate::error::cloud_hsm_internal_failure_exception::Builder {
        crate::error::cloud_hsm_internal_failure_exception::Builder::default()
    }
}
/// See [`CloudHsmInternalFailureException`](crate::error::CloudHsmInternalFailureException).
pub mod cloud_hsm_internal_failure_exception {

    /// A builder for [`CloudHsmInternalFailureException`](crate::error::CloudHsmInternalFailureException).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
        meta: Option<aws_smithy_types::error::ErrorMetadata>,
    }
    impl Builder {
        #[allow(missing_docs)] // documentation missing in model
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// Sets error metadata
        pub fn meta(mut self, meta: aws_smithy_types::error::ErrorMetadata) -> Self {
            self.meta = Some(meta);
            self
        }

        /// Sets error metadata
        pub fn set_meta(
            &mut self,
            meta: Option<aws_smithy_types::error::ErrorMetadata>,
        ) -> &mut Self {
            self.meta = meta;
            self
        }
        /// Consumes the builder and constructs a [`CloudHsmInternalFailureException`](crate::error::CloudHsmInternalFailureException).
        pub fn build(self) -> crate::error::CloudHsmInternalFailureException {
            crate::error::CloudHsmInternalFailureException {
                message: self.message,
                meta: self.meta.unwrap_or_default(),
            }
        }
    }
}
impl CloudHsmInternalFailureException {
    /// Returns the error message.
    pub fn message(&self) -> std::option::Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for CloudHsmInternalFailureException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "CloudHsmInternalFailureException")?;
        if let Some(inner_5) = &self.message {
            {
                write!(f, ": {}", inner_5)?;
            }
        }
        Ok(())
    }
}
impl std::error::Error for CloudHsmInternalFailureException {}
impl aws_http::request_id::RequestId for crate::error::CloudHsmInternalFailureException {
    fn request_id(&self) -> Option<&str> {
        use aws_smithy_types::error::metadata::ProvideErrorMetadata;
        self.meta().request_id()
    }
}
impl aws_smithy_types::error::metadata::ProvideErrorMetadata for CloudHsmInternalFailureException {
    fn meta(&self) -> &aws_smithy_types::error::ErrorMetadata {
        &self.meta
    }
}

/// <p>The request was rejected because the requester does not have permission to perform the requested operation.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CloudHsmAccessDeniedException {
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub message: std::option::Option<std::string::String>,
    pub(crate) meta: aws_smithy_types::error::ErrorMetadata,
}
impl CloudHsmAccessDeniedException {
    /// Creates a new builder-style object to manufacture [`CloudHsmAccessDeniedException`](crate::error::CloudHsmAccessDeniedException).
    pub fn builder() -> crate::error::cloud_hsm_access_denied_exception::Builder {
        crate::error::cloud_hsm_access_denied_exception::Builder::default()
    }
}
/// See [`CloudHsmAccessDeniedException`](crate::error::CloudHsmAccessDeniedException).
pub mod cloud_hsm_access_denied_exception {

    /// A builder for [`CloudHsmAccessDeniedException`](crate::error::CloudHsmAccessDeniedException).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
        meta: Option<aws_smithy_types::error::ErrorMetadata>,
    }
    impl Builder {
        #[allow(missing_docs)] // documentation missing in model
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// Sets error metadata
        pub fn meta(mut self, meta: aws_smithy_types::error::ErrorMetadata) -> Self {
            self.meta = Some(meta);
            self
        }

        /// Sets error metadata
        pub fn set_meta(
            &mut self,
            meta: Option<aws_smithy_types::error::ErrorMetadata>,
        ) -> &mut Self {
            self.meta = meta;
            self
        }
        /// Consumes the builder and constructs a [`CloudHsmAccessDeniedException`](crate::error::CloudHsmAccessDeniedException).
        pub fn build(self) -> crate::error::CloudHsmAccessDeniedException {
            crate::error::CloudHsmAccessDeniedException {
                message: self.message,
                meta: self.meta.unwrap_or_default(),
            }
        }
    }
}
impl CloudHsmAccessDeniedException {
    /// Returns the error message.
    pub fn message(&self) -> std::option::Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for CloudHsmAccessDeniedException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "CloudHsmAccessDeniedException")?;
        if let Some(inner_6) = &self.message {
            {
                write!(f, ": {}", inner_6)?;
            }
        }
        Ok(())
    }
}
impl std::error::Error for CloudHsmAccessDeniedException {}
impl aws_http::request_id::RequestId for crate::error::CloudHsmAccessDeniedException {
    fn request_id(&self) -> Option<&str> {
        use aws_smithy_types::error::metadata::ProvideErrorMetadata;
        self.meta().request_id()
    }
}
impl aws_smithy_types::error::metadata::ProvideErrorMetadata for CloudHsmAccessDeniedException {
    fn meta(&self) -> &aws_smithy_types::error::ErrorMetadata {
        &self.meta
    }
}

/// Do not use this.
///
/// Operation `*Error/*ErrorKind` types were combined into a single `*Error` enum. The `.kind` field on `*Error` no longer exists and isn't needed anymore (you can just match on the error directly since it's an enum now).
#[deprecated(
    note = "Operation `*Error/*ErrorKind` types were combined into a single `*Error` enum. The `.kind` field on `*Error` no longer exists and isn't needed anymore (you can just match on the error directly since it's an enum now)."
)]
pub type TagResourceErrorKind = TagResourceError;
/// Error type for the `TagResourceError` operation.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum TagResourceError {
    /// <p>The request was rejected because the requester does not have permission to perform the requested operation.</p>
    CloudHsmAccessDeniedException(crate::error::CloudHsmAccessDeniedException),
    /// <p>The request was rejected because of an AWS CloudHSM internal failure. The request can be retried.</p>
    CloudHsmInternalFailureException(crate::error::CloudHsmInternalFailureException),
    /// <p>The request was rejected because it is not a valid request.</p>
    CloudHsmInvalidRequestException(crate::error::CloudHsmInvalidRequestException),
    /// <p>The request was rejected because it refers to a resource that cannot be found.</p>
    CloudHsmResourceNotFoundException(crate::error::CloudHsmResourceNotFoundException),
    /// <p>The request was rejected because an error occurred.</p>
    CloudHsmServiceException(crate::error::CloudHsmServiceException),
    /// <p>The request was rejected because of a tagging failure. Verify the tag conditions in all applicable policies, and then retry the request.</p>
    CloudHsmTagException(crate::error::CloudHsmTagException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl aws_smithy_http::result::CreateUnhandledError for TagResourceError {
    fn create_unhandled_error(
        source: Box<dyn std::error::Error + Send + Sync + 'static>,
        meta: Option<aws_smithy_types::error::ErrorMetadata>,
    ) -> Self {
        Self::Unhandled({
            let mut builder = aws_smithy_types::error::Unhandled::builder().source(source);
            builder.set_meta(meta);
            builder.build()
        })
    }
}
impl std::fmt::Display for TagResourceError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::CloudHsmAccessDeniedException(_inner) => _inner.fmt(f),
            Self::CloudHsmInternalFailureException(_inner) => _inner.fmt(f),
            Self::CloudHsmInvalidRequestException(_inner) => _inner.fmt(f),
            Self::CloudHsmResourceNotFoundException(_inner) => _inner.fmt(f),
            Self::CloudHsmServiceException(_inner) => _inner.fmt(f),
            Self::CloudHsmTagException(_inner) => _inner.fmt(f),
            Self::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl aws_smithy_types::error::metadata::ProvideErrorMetadata for TagResourceError {
    fn meta(&self) -> &aws_smithy_types::error::ErrorMetadata {
        match self {
            Self::CloudHsmAccessDeniedException(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::CloudHsmInternalFailureException(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::CloudHsmInvalidRequestException(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::CloudHsmResourceNotFoundException(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::CloudHsmServiceException(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::CloudHsmTagException(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::Unhandled(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
        }
    }
}
impl aws_http::request_id::RequestId for crate::error::TagResourceError {
    fn request_id(&self) -> Option<&str> {
        self.meta().request_id()
    }
}
impl aws_smithy_types::retry::ProvideErrorKind for TagResourceError {
    fn code(&self) -> Option<&str> {
        aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self)
    }
    fn retryable_error_kind(&self) -> Option<aws_smithy_types::retry::ErrorKind> {
        None
    }
}
impl TagResourceError {
    /// Creates the `TagResourceError::Unhandled` variant from any error type.
    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self::Unhandled(
            aws_smithy_types::error::Unhandled::builder()
                .source(err)
                .build(),
        )
    }

    /// Creates the `TagResourceError::Unhandled` variant from a `aws_smithy_types::error::ErrorMetadata`.
    pub fn generic(err: aws_smithy_types::error::ErrorMetadata) -> Self {
        Self::Unhandled(
            aws_smithy_types::error::Unhandled::builder()
                .source(err.clone())
                .meta(err)
                .build(),
        )
    }
    ///
    /// Returns error metadata, which includes the error code, message,
    /// request ID, and potentially additional information.
    ///
    pub fn meta(&self) -> &aws_smithy_types::error::ErrorMetadata {
        use aws_smithy_types::error::metadata::ProvideErrorMetadata;
        match self {
            Self::CloudHsmAccessDeniedException(e) => e.meta(),
            Self::CloudHsmInternalFailureException(e) => e.meta(),
            Self::CloudHsmInvalidRequestException(e) => e.meta(),
            Self::CloudHsmResourceNotFoundException(e) => e.meta(),
            Self::CloudHsmServiceException(e) => e.meta(),
            Self::CloudHsmTagException(e) => e.meta(),
            Self::Unhandled(e) => e.meta(),
        }
    }
    /// Returns `true` if the error kind is `TagResourceError::CloudHsmAccessDeniedException`.
    pub fn is_cloud_hsm_access_denied_exception(&self) -> bool {
        matches!(self, Self::CloudHsmAccessDeniedException(_))
    }
    /// Returns `true` if the error kind is `TagResourceError::CloudHsmInternalFailureException`.
    pub fn is_cloud_hsm_internal_failure_exception(&self) -> bool {
        matches!(self, Self::CloudHsmInternalFailureException(_))
    }
    /// Returns `true` if the error kind is `TagResourceError::CloudHsmInvalidRequestException`.
    pub fn is_cloud_hsm_invalid_request_exception(&self) -> bool {
        matches!(self, Self::CloudHsmInvalidRequestException(_))
    }
    /// Returns `true` if the error kind is `TagResourceError::CloudHsmResourceNotFoundException`.
    pub fn is_cloud_hsm_resource_not_found_exception(&self) -> bool {
        matches!(self, Self::CloudHsmResourceNotFoundException(_))
    }
    /// Returns `true` if the error kind is `TagResourceError::CloudHsmServiceException`.
    pub fn is_cloud_hsm_service_exception(&self) -> bool {
        matches!(self, Self::CloudHsmServiceException(_))
    }
    /// Returns `true` if the error kind is `TagResourceError::CloudHsmTagException`.
    pub fn is_cloud_hsm_tag_exception(&self) -> bool {
        matches!(self, Self::CloudHsmTagException(_))
    }
}
impl std::error::Error for TagResourceError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match self {
            Self::CloudHsmAccessDeniedException(_inner) => Some(_inner),
            Self::CloudHsmInternalFailureException(_inner) => Some(_inner),
            Self::CloudHsmInvalidRequestException(_inner) => Some(_inner),
            Self::CloudHsmResourceNotFoundException(_inner) => Some(_inner),
            Self::CloudHsmServiceException(_inner) => Some(_inner),
            Self::CloudHsmTagException(_inner) => Some(_inner),
            Self::Unhandled(_inner) => Some(_inner),
        }
    }
}

/// Do not use this.
///
/// Operation `*Error/*ErrorKind` types were combined into a single `*Error` enum. The `.kind` field on `*Error` no longer exists and isn't needed anymore (you can just match on the error directly since it's an enum now).
#[deprecated(
    note = "Operation `*Error/*ErrorKind` types were combined into a single `*Error` enum. The `.kind` field on `*Error` no longer exists and isn't needed anymore (you can just match on the error directly since it's an enum now)."
)]
pub type RestoreBackupErrorKind = RestoreBackupError;
/// Error type for the `RestoreBackupError` operation.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum RestoreBackupError {
    /// <p>The request was rejected because the requester does not have permission to perform the requested operation.</p>
    CloudHsmAccessDeniedException(crate::error::CloudHsmAccessDeniedException),
    /// <p>The request was rejected because of an AWS CloudHSM internal failure. The request can be retried.</p>
    CloudHsmInternalFailureException(crate::error::CloudHsmInternalFailureException),
    /// <p>The request was rejected because it is not a valid request.</p>
    CloudHsmInvalidRequestException(crate::error::CloudHsmInvalidRequestException),
    /// <p>The request was rejected because it refers to a resource that cannot be found.</p>
    CloudHsmResourceNotFoundException(crate::error::CloudHsmResourceNotFoundException),
    /// <p>The request was rejected because an error occurred.</p>
    CloudHsmServiceException(crate::error::CloudHsmServiceException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl aws_smithy_http::result::CreateUnhandledError for RestoreBackupError {
    fn create_unhandled_error(
        source: Box<dyn std::error::Error + Send + Sync + 'static>,
        meta: Option<aws_smithy_types::error::ErrorMetadata>,
    ) -> Self {
        Self::Unhandled({
            let mut builder = aws_smithy_types::error::Unhandled::builder().source(source);
            builder.set_meta(meta);
            builder.build()
        })
    }
}
impl std::fmt::Display for RestoreBackupError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::CloudHsmAccessDeniedException(_inner) => _inner.fmt(f),
            Self::CloudHsmInternalFailureException(_inner) => _inner.fmt(f),
            Self::CloudHsmInvalidRequestException(_inner) => _inner.fmt(f),
            Self::CloudHsmResourceNotFoundException(_inner) => _inner.fmt(f),
            Self::CloudHsmServiceException(_inner) => _inner.fmt(f),
            Self::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl aws_smithy_types::error::metadata::ProvideErrorMetadata for RestoreBackupError {
    fn meta(&self) -> &aws_smithy_types::error::ErrorMetadata {
        match self {
            Self::CloudHsmAccessDeniedException(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::CloudHsmInternalFailureException(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::CloudHsmInvalidRequestException(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::CloudHsmResourceNotFoundException(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::CloudHsmServiceException(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::Unhandled(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
        }
    }
}
impl aws_http::request_id::RequestId for crate::error::RestoreBackupError {
    fn request_id(&self) -> Option<&str> {
        self.meta().request_id()
    }
}
impl aws_smithy_types::retry::ProvideErrorKind for RestoreBackupError {
    fn code(&self) -> Option<&str> {
        aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self)
    }
    fn retryable_error_kind(&self) -> Option<aws_smithy_types::retry::ErrorKind> {
        None
    }
}
impl RestoreBackupError {
    /// Creates the `RestoreBackupError::Unhandled` variant from any error type.
    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self::Unhandled(
            aws_smithy_types::error::Unhandled::builder()
                .source(err)
                .build(),
        )
    }

    /// Creates the `RestoreBackupError::Unhandled` variant from a `aws_smithy_types::error::ErrorMetadata`.
    pub fn generic(err: aws_smithy_types::error::ErrorMetadata) -> Self {
        Self::Unhandled(
            aws_smithy_types::error::Unhandled::builder()
                .source(err.clone())
                .meta(err)
                .build(),
        )
    }
    ///
    /// Returns error metadata, which includes the error code, message,
    /// request ID, and potentially additional information.
    ///
    pub fn meta(&self) -> &aws_smithy_types::error::ErrorMetadata {
        use aws_smithy_types::error::metadata::ProvideErrorMetadata;
        match self {
            Self::CloudHsmAccessDeniedException(e) => e.meta(),
            Self::CloudHsmInternalFailureException(e) => e.meta(),
            Self::CloudHsmInvalidRequestException(e) => e.meta(),
            Self::CloudHsmResourceNotFoundException(e) => e.meta(),
            Self::CloudHsmServiceException(e) => e.meta(),
            Self::Unhandled(e) => e.meta(),
        }
    }
    /// Returns `true` if the error kind is `RestoreBackupError::CloudHsmAccessDeniedException`.
    pub fn is_cloud_hsm_access_denied_exception(&self) -> bool {
        matches!(self, Self::CloudHsmAccessDeniedException(_))
    }
    /// Returns `true` if the error kind is `RestoreBackupError::CloudHsmInternalFailureException`.
    pub fn is_cloud_hsm_internal_failure_exception(&self) -> bool {
        matches!(self, Self::CloudHsmInternalFailureException(_))
    }
    /// Returns `true` if the error kind is `RestoreBackupError::CloudHsmInvalidRequestException`.
    pub fn is_cloud_hsm_invalid_request_exception(&self) -> bool {
        matches!(self, Self::CloudHsmInvalidRequestException(_))
    }
    /// Returns `true` if the error kind is `RestoreBackupError::CloudHsmResourceNotFoundException`.
    pub fn is_cloud_hsm_resource_not_found_exception(&self) -> bool {
        matches!(self, Self::CloudHsmResourceNotFoundException(_))
    }
    /// Returns `true` if the error kind is `RestoreBackupError::CloudHsmServiceException`.
    pub fn is_cloud_hsm_service_exception(&self) -> bool {
        matches!(self, Self::CloudHsmServiceException(_))
    }
}
impl std::error::Error for RestoreBackupError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match self {
            Self::CloudHsmAccessDeniedException(_inner) => Some(_inner),
            Self::CloudHsmInternalFailureException(_inner) => Some(_inner),
            Self::CloudHsmInvalidRequestException(_inner) => Some(_inner),
            Self::CloudHsmResourceNotFoundException(_inner) => Some(_inner),
            Self::CloudHsmServiceException(_inner) => Some(_inner),
            Self::Unhandled(_inner) => Some(_inner),
        }
    }
}

/// Do not use this.
///
/// Operation `*Error/*ErrorKind` types were combined into a single `*Error` enum. The `.kind` field on `*Error` no longer exists and isn't needed anymore (you can just match on the error directly since it's an enum now).
#[deprecated(
    note = "Operation `*Error/*ErrorKind` types were combined into a single `*Error` enum. The `.kind` field on `*Error` no longer exists and isn't needed anymore (you can just match on the error directly since it's an enum now)."
)]
pub type ModifyClusterErrorKind = ModifyClusterError;
/// Error type for the `ModifyClusterError` operation.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum ModifyClusterError {
    /// <p>The request was rejected because the requester does not have permission to perform the requested operation.</p>
    CloudHsmAccessDeniedException(crate::error::CloudHsmAccessDeniedException),
    /// <p>The request was rejected because of an AWS CloudHSM internal failure. The request can be retried.</p>
    CloudHsmInternalFailureException(crate::error::CloudHsmInternalFailureException),
    /// <p>The request was rejected because it is not a valid request.</p>
    CloudHsmInvalidRequestException(crate::error::CloudHsmInvalidRequestException),
    /// <p>The request was rejected because it refers to a resource that cannot be found.</p>
    CloudHsmResourceNotFoundException(crate::error::CloudHsmResourceNotFoundException),
    /// <p>The request was rejected because an error occurred.</p>
    CloudHsmServiceException(crate::error::CloudHsmServiceException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl aws_smithy_http::result::CreateUnhandledError for ModifyClusterError {
    fn create_unhandled_error(
        source: Box<dyn std::error::Error + Send + Sync + 'static>,
        meta: Option<aws_smithy_types::error::ErrorMetadata>,
    ) -> Self {
        Self::Unhandled({
            let mut builder = aws_smithy_types::error::Unhandled::builder().source(source);
            builder.set_meta(meta);
            builder.build()
        })
    }
}
impl std::fmt::Display for ModifyClusterError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::CloudHsmAccessDeniedException(_inner) => _inner.fmt(f),
            Self::CloudHsmInternalFailureException(_inner) => _inner.fmt(f),
            Self::CloudHsmInvalidRequestException(_inner) => _inner.fmt(f),
            Self::CloudHsmResourceNotFoundException(_inner) => _inner.fmt(f),
            Self::CloudHsmServiceException(_inner) => _inner.fmt(f),
            Self::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl aws_smithy_types::error::metadata::ProvideErrorMetadata for ModifyClusterError {
    fn meta(&self) -> &aws_smithy_types::error::ErrorMetadata {
        match self {
            Self::CloudHsmAccessDeniedException(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::CloudHsmInternalFailureException(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::CloudHsmInvalidRequestException(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::CloudHsmResourceNotFoundException(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::CloudHsmServiceException(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::Unhandled(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
        }
    }
}
impl aws_http::request_id::RequestId for crate::error::ModifyClusterError {
    fn request_id(&self) -> Option<&str> {
        self.meta().request_id()
    }
}
impl aws_smithy_types::retry::ProvideErrorKind for ModifyClusterError {
    fn code(&self) -> Option<&str> {
        aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self)
    }
    fn retryable_error_kind(&self) -> Option<aws_smithy_types::retry::ErrorKind> {
        None
    }
}
impl ModifyClusterError {
    /// Creates the `ModifyClusterError::Unhandled` variant from any error type.
    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self::Unhandled(
            aws_smithy_types::error::Unhandled::builder()
                .source(err)
                .build(),
        )
    }

    /// Creates the `ModifyClusterError::Unhandled` variant from a `aws_smithy_types::error::ErrorMetadata`.
    pub fn generic(err: aws_smithy_types::error::ErrorMetadata) -> Self {
        Self::Unhandled(
            aws_smithy_types::error::Unhandled::builder()
                .source(err.clone())
                .meta(err)
                .build(),
        )
    }
    ///
    /// Returns error metadata, which includes the error code, message,
    /// request ID, and potentially additional information.
    ///
    pub fn meta(&self) -> &aws_smithy_types::error::ErrorMetadata {
        use aws_smithy_types::error::metadata::ProvideErrorMetadata;
        match self {
            Self::CloudHsmAccessDeniedException(e) => e.meta(),
            Self::CloudHsmInternalFailureException(e) => e.meta(),
            Self::CloudHsmInvalidRequestException(e) => e.meta(),
            Self::CloudHsmResourceNotFoundException(e) => e.meta(),
            Self::CloudHsmServiceException(e) => e.meta(),
            Self::Unhandled(e) => e.meta(),
        }
    }
    /// Returns `true` if the error kind is `ModifyClusterError::CloudHsmAccessDeniedException`.
    pub fn is_cloud_hsm_access_denied_exception(&self) -> bool {
        matches!(self, Self::CloudHsmAccessDeniedException(_))
    }
    /// Returns `true` if the error kind is `ModifyClusterError::CloudHsmInternalFailureException`.
    pub fn is_cloud_hsm_internal_failure_exception(&self) -> bool {
        matches!(self, Self::CloudHsmInternalFailureException(_))
    }
    /// Returns `true` if the error kind is `ModifyClusterError::CloudHsmInvalidRequestException`.
    pub fn is_cloud_hsm_invalid_request_exception(&self) -> bool {
        matches!(self, Self::CloudHsmInvalidRequestException(_))
    }
    /// Returns `true` if the error kind is `ModifyClusterError::CloudHsmResourceNotFoundException`.
    pub fn is_cloud_hsm_resource_not_found_exception(&self) -> bool {
        matches!(self, Self::CloudHsmResourceNotFoundException(_))
    }
    /// Returns `true` if the error kind is `ModifyClusterError::CloudHsmServiceException`.
    pub fn is_cloud_hsm_service_exception(&self) -> bool {
        matches!(self, Self::CloudHsmServiceException(_))
    }
}
impl std::error::Error for ModifyClusterError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match self {
            Self::CloudHsmAccessDeniedException(_inner) => Some(_inner),
            Self::CloudHsmInternalFailureException(_inner) => Some(_inner),
            Self::CloudHsmInvalidRequestException(_inner) => Some(_inner),
            Self::CloudHsmResourceNotFoundException(_inner) => Some(_inner),
            Self::CloudHsmServiceException(_inner) => Some(_inner),
            Self::Unhandled(_inner) => Some(_inner),
        }
    }
}

/// Do not use this.
///
/// Operation `*Error/*ErrorKind` types were combined into a single `*Error` enum. The `.kind` field on `*Error` no longer exists and isn't needed anymore (you can just match on the error directly since it's an enum now).
#[deprecated(
    note = "Operation `*Error/*ErrorKind` types were combined into a single `*Error` enum. The `.kind` field on `*Error` no longer exists and isn't needed anymore (you can just match on the error directly since it's an enum now)."
)]
pub type ModifyBackupAttributesErrorKind = ModifyBackupAttributesError;
/// Error type for the `ModifyBackupAttributesError` operation.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum ModifyBackupAttributesError {
    /// <p>The request was rejected because the requester does not have permission to perform the requested operation.</p>
    CloudHsmAccessDeniedException(crate::error::CloudHsmAccessDeniedException),
    /// <p>The request was rejected because of an AWS CloudHSM internal failure. The request can be retried.</p>
    CloudHsmInternalFailureException(crate::error::CloudHsmInternalFailureException),
    /// <p>The request was rejected because it is not a valid request.</p>
    CloudHsmInvalidRequestException(crate::error::CloudHsmInvalidRequestException),
    /// <p>The request was rejected because it refers to a resource that cannot be found.</p>
    CloudHsmResourceNotFoundException(crate::error::CloudHsmResourceNotFoundException),
    /// <p>The request was rejected because an error occurred.</p>
    CloudHsmServiceException(crate::error::CloudHsmServiceException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl aws_smithy_http::result::CreateUnhandledError for ModifyBackupAttributesError {
    fn create_unhandled_error(
        source: Box<dyn std::error::Error + Send + Sync + 'static>,
        meta: Option<aws_smithy_types::error::ErrorMetadata>,
    ) -> Self {
        Self::Unhandled({
            let mut builder = aws_smithy_types::error::Unhandled::builder().source(source);
            builder.set_meta(meta);
            builder.build()
        })
    }
}
impl std::fmt::Display for ModifyBackupAttributesError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::CloudHsmAccessDeniedException(_inner) => _inner.fmt(f),
            Self::CloudHsmInternalFailureException(_inner) => _inner.fmt(f),
            Self::CloudHsmInvalidRequestException(_inner) => _inner.fmt(f),
            Self::CloudHsmResourceNotFoundException(_inner) => _inner.fmt(f),
            Self::CloudHsmServiceException(_inner) => _inner.fmt(f),
            Self::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl aws_smithy_types::error::metadata::ProvideErrorMetadata for ModifyBackupAttributesError {
    fn meta(&self) -> &aws_smithy_types::error::ErrorMetadata {
        match self {
            Self::CloudHsmAccessDeniedException(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::CloudHsmInternalFailureException(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::CloudHsmInvalidRequestException(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::CloudHsmResourceNotFoundException(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::CloudHsmServiceException(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::Unhandled(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
        }
    }
}
impl aws_http::request_id::RequestId for crate::error::ModifyBackupAttributesError {
    fn request_id(&self) -> Option<&str> {
        self.meta().request_id()
    }
}
impl aws_smithy_types::retry::ProvideErrorKind for ModifyBackupAttributesError {
    fn code(&self) -> Option<&str> {
        aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self)
    }
    fn retryable_error_kind(&self) -> Option<aws_smithy_types::retry::ErrorKind> {
        None
    }
}
impl ModifyBackupAttributesError {
    /// Creates the `ModifyBackupAttributesError::Unhandled` variant from any error type.
    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self::Unhandled(
            aws_smithy_types::error::Unhandled::builder()
                .source(err)
                .build(),
        )
    }

    /// Creates the `ModifyBackupAttributesError::Unhandled` variant from a `aws_smithy_types::error::ErrorMetadata`.
    pub fn generic(err: aws_smithy_types::error::ErrorMetadata) -> Self {
        Self::Unhandled(
            aws_smithy_types::error::Unhandled::builder()
                .source(err.clone())
                .meta(err)
                .build(),
        )
    }
    ///
    /// Returns error metadata, which includes the error code, message,
    /// request ID, and potentially additional information.
    ///
    pub fn meta(&self) -> &aws_smithy_types::error::ErrorMetadata {
        use aws_smithy_types::error::metadata::ProvideErrorMetadata;
        match self {
            Self::CloudHsmAccessDeniedException(e) => e.meta(),
            Self::CloudHsmInternalFailureException(e) => e.meta(),
            Self::CloudHsmInvalidRequestException(e) => e.meta(),
            Self::CloudHsmResourceNotFoundException(e) => e.meta(),
            Self::CloudHsmServiceException(e) => e.meta(),
            Self::Unhandled(e) => e.meta(),
        }
    }
    /// Returns `true` if the error kind is `ModifyBackupAttributesError::CloudHsmAccessDeniedException`.
    pub fn is_cloud_hsm_access_denied_exception(&self) -> bool {
        matches!(self, Self::CloudHsmAccessDeniedException(_))
    }
    /// Returns `true` if the error kind is `ModifyBackupAttributesError::CloudHsmInternalFailureException`.
    pub fn is_cloud_hsm_internal_failure_exception(&self) -> bool {
        matches!(self, Self::CloudHsmInternalFailureException(_))
    }
    /// Returns `true` if the error kind is `ModifyBackupAttributesError::CloudHsmInvalidRequestException`.
    pub fn is_cloud_hsm_invalid_request_exception(&self) -> bool {
        matches!(self, Self::CloudHsmInvalidRequestException(_))
    }
    /// Returns `true` if the error kind is `ModifyBackupAttributesError::CloudHsmResourceNotFoundException`.
    pub fn is_cloud_hsm_resource_not_found_exception(&self) -> bool {
        matches!(self, Self::CloudHsmResourceNotFoundException(_))
    }
    /// Returns `true` if the error kind is `ModifyBackupAttributesError::CloudHsmServiceException`.
    pub fn is_cloud_hsm_service_exception(&self) -> bool {
        matches!(self, Self::CloudHsmServiceException(_))
    }
}
impl std::error::Error for ModifyBackupAttributesError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match self {
            Self::CloudHsmAccessDeniedException(_inner) => Some(_inner),
            Self::CloudHsmInternalFailureException(_inner) => Some(_inner),
            Self::CloudHsmInvalidRequestException(_inner) => Some(_inner),
            Self::CloudHsmResourceNotFoundException(_inner) => Some(_inner),
            Self::CloudHsmServiceException(_inner) => Some(_inner),
            Self::Unhandled(_inner) => Some(_inner),
        }
    }
}

/// Do not use this.
///
/// Operation `*Error/*ErrorKind` types were combined into a single `*Error` enum. The `.kind` field on `*Error` no longer exists and isn't needed anymore (you can just match on the error directly since it's an enum now).
#[deprecated(
    note = "Operation `*Error/*ErrorKind` types were combined into a single `*Error` enum. The `.kind` field on `*Error` no longer exists and isn't needed anymore (you can just match on the error directly since it's an enum now)."
)]
pub type ListTagsErrorKind = ListTagsError;
/// Error type for the `ListTagsError` operation.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum ListTagsError {
    /// <p>The request was rejected because the requester does not have permission to perform the requested operation.</p>
    CloudHsmAccessDeniedException(crate::error::CloudHsmAccessDeniedException),
    /// <p>The request was rejected because of an AWS CloudHSM internal failure. The request can be retried.</p>
    CloudHsmInternalFailureException(crate::error::CloudHsmInternalFailureException),
    /// <p>The request was rejected because it is not a valid request.</p>
    CloudHsmInvalidRequestException(crate::error::CloudHsmInvalidRequestException),
    /// <p>The request was rejected because it refers to a resource that cannot be found.</p>
    CloudHsmResourceNotFoundException(crate::error::CloudHsmResourceNotFoundException),
    /// <p>The request was rejected because an error occurred.</p>
    CloudHsmServiceException(crate::error::CloudHsmServiceException),
    /// <p>The request was rejected because of a tagging failure. Verify the tag conditions in all applicable policies, and then retry the request.</p>
    CloudHsmTagException(crate::error::CloudHsmTagException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl aws_smithy_http::result::CreateUnhandledError for ListTagsError {
    fn create_unhandled_error(
        source: Box<dyn std::error::Error + Send + Sync + 'static>,
        meta: Option<aws_smithy_types::error::ErrorMetadata>,
    ) -> Self {
        Self::Unhandled({
            let mut builder = aws_smithy_types::error::Unhandled::builder().source(source);
            builder.set_meta(meta);
            builder.build()
        })
    }
}
impl std::fmt::Display for ListTagsError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::CloudHsmAccessDeniedException(_inner) => _inner.fmt(f),
            Self::CloudHsmInternalFailureException(_inner) => _inner.fmt(f),
            Self::CloudHsmInvalidRequestException(_inner) => _inner.fmt(f),
            Self::CloudHsmResourceNotFoundException(_inner) => _inner.fmt(f),
            Self::CloudHsmServiceException(_inner) => _inner.fmt(f),
            Self::CloudHsmTagException(_inner) => _inner.fmt(f),
            Self::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl aws_smithy_types::error::metadata::ProvideErrorMetadata for ListTagsError {
    fn meta(&self) -> &aws_smithy_types::error::ErrorMetadata {
        match self {
            Self::CloudHsmAccessDeniedException(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::CloudHsmInternalFailureException(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::CloudHsmInvalidRequestException(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::CloudHsmResourceNotFoundException(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::CloudHsmServiceException(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::CloudHsmTagException(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::Unhandled(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
        }
    }
}
impl aws_http::request_id::RequestId for crate::error::ListTagsError {
    fn request_id(&self) -> Option<&str> {
        self.meta().request_id()
    }
}
impl aws_smithy_types::retry::ProvideErrorKind for ListTagsError {
    fn code(&self) -> Option<&str> {
        aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self)
    }
    fn retryable_error_kind(&self) -> Option<aws_smithy_types::retry::ErrorKind> {
        None
    }
}
impl ListTagsError {
    /// Creates the `ListTagsError::Unhandled` variant from any error type.
    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self::Unhandled(
            aws_smithy_types::error::Unhandled::builder()
                .source(err)
                .build(),
        )
    }

    /// Creates the `ListTagsError::Unhandled` variant from a `aws_smithy_types::error::ErrorMetadata`.
    pub fn generic(err: aws_smithy_types::error::ErrorMetadata) -> Self {
        Self::Unhandled(
            aws_smithy_types::error::Unhandled::builder()
                .source(err.clone())
                .meta(err)
                .build(),
        )
    }
    ///
    /// Returns error metadata, which includes the error code, message,
    /// request ID, and potentially additional information.
    ///
    pub fn meta(&self) -> &aws_smithy_types::error::ErrorMetadata {
        use aws_smithy_types::error::metadata::ProvideErrorMetadata;
        match self {
            Self::CloudHsmAccessDeniedException(e) => e.meta(),
            Self::CloudHsmInternalFailureException(e) => e.meta(),
            Self::CloudHsmInvalidRequestException(e) => e.meta(),
            Self::CloudHsmResourceNotFoundException(e) => e.meta(),
            Self::CloudHsmServiceException(e) => e.meta(),
            Self::CloudHsmTagException(e) => e.meta(),
            Self::Unhandled(e) => e.meta(),
        }
    }
    /// Returns `true` if the error kind is `ListTagsError::CloudHsmAccessDeniedException`.
    pub fn is_cloud_hsm_access_denied_exception(&self) -> bool {
        matches!(self, Self::CloudHsmAccessDeniedException(_))
    }
    /// Returns `true` if the error kind is `ListTagsError::CloudHsmInternalFailureException`.
    pub fn is_cloud_hsm_internal_failure_exception(&self) -> bool {
        matches!(self, Self::CloudHsmInternalFailureException(_))
    }
    /// Returns `true` if the error kind is `ListTagsError::CloudHsmInvalidRequestException`.
    pub fn is_cloud_hsm_invalid_request_exception(&self) -> bool {
        matches!(self, Self::CloudHsmInvalidRequestException(_))
    }
    /// Returns `true` if the error kind is `ListTagsError::CloudHsmResourceNotFoundException`.
    pub fn is_cloud_hsm_resource_not_found_exception(&self) -> bool {
        matches!(self, Self::CloudHsmResourceNotFoundException(_))
    }
    /// Returns `true` if the error kind is `ListTagsError::CloudHsmServiceException`.
    pub fn is_cloud_hsm_service_exception(&self) -> bool {
        matches!(self, Self::CloudHsmServiceException(_))
    }
    /// Returns `true` if the error kind is `ListTagsError::CloudHsmTagException`.
    pub fn is_cloud_hsm_tag_exception(&self) -> bool {
        matches!(self, Self::CloudHsmTagException(_))
    }
}
impl std::error::Error for ListTagsError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match self {
            Self::CloudHsmAccessDeniedException(_inner) => Some(_inner),
            Self::CloudHsmInternalFailureException(_inner) => Some(_inner),
            Self::CloudHsmInvalidRequestException(_inner) => Some(_inner),
            Self::CloudHsmResourceNotFoundException(_inner) => Some(_inner),
            Self::CloudHsmServiceException(_inner) => Some(_inner),
            Self::CloudHsmTagException(_inner) => Some(_inner),
            Self::Unhandled(_inner) => Some(_inner),
        }
    }
}

/// Do not use this.
///
/// Operation `*Error/*ErrorKind` types were combined into a single `*Error` enum. The `.kind` field on `*Error` no longer exists and isn't needed anymore (you can just match on the error directly since it's an enum now).
#[deprecated(
    note = "Operation `*Error/*ErrorKind` types were combined into a single `*Error` enum. The `.kind` field on `*Error` no longer exists and isn't needed anymore (you can just match on the error directly since it's an enum now)."
)]
pub type InitializeClusterErrorKind = InitializeClusterError;
/// Error type for the `InitializeClusterError` operation.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum InitializeClusterError {
    /// <p>The request was rejected because the requester does not have permission to perform the requested operation.</p>
    CloudHsmAccessDeniedException(crate::error::CloudHsmAccessDeniedException),
    /// <p>The request was rejected because of an AWS CloudHSM internal failure. The request can be retried.</p>
    CloudHsmInternalFailureException(crate::error::CloudHsmInternalFailureException),
    /// <p>The request was rejected because it is not a valid request.</p>
    CloudHsmInvalidRequestException(crate::error::CloudHsmInvalidRequestException),
    /// <p>The request was rejected because it refers to a resource that cannot be found.</p>
    CloudHsmResourceNotFoundException(crate::error::CloudHsmResourceNotFoundException),
    /// <p>The request was rejected because an error occurred.</p>
    CloudHsmServiceException(crate::error::CloudHsmServiceException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl aws_smithy_http::result::CreateUnhandledError for InitializeClusterError {
    fn create_unhandled_error(
        source: Box<dyn std::error::Error + Send + Sync + 'static>,
        meta: Option<aws_smithy_types::error::ErrorMetadata>,
    ) -> Self {
        Self::Unhandled({
            let mut builder = aws_smithy_types::error::Unhandled::builder().source(source);
            builder.set_meta(meta);
            builder.build()
        })
    }
}
impl std::fmt::Display for InitializeClusterError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::CloudHsmAccessDeniedException(_inner) => _inner.fmt(f),
            Self::CloudHsmInternalFailureException(_inner) => _inner.fmt(f),
            Self::CloudHsmInvalidRequestException(_inner) => _inner.fmt(f),
            Self::CloudHsmResourceNotFoundException(_inner) => _inner.fmt(f),
            Self::CloudHsmServiceException(_inner) => _inner.fmt(f),
            Self::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl aws_smithy_types::error::metadata::ProvideErrorMetadata for InitializeClusterError {
    fn meta(&self) -> &aws_smithy_types::error::ErrorMetadata {
        match self {
            Self::CloudHsmAccessDeniedException(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::CloudHsmInternalFailureException(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::CloudHsmInvalidRequestException(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::CloudHsmResourceNotFoundException(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::CloudHsmServiceException(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::Unhandled(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
        }
    }
}
impl aws_http::request_id::RequestId for crate::error::InitializeClusterError {
    fn request_id(&self) -> Option<&str> {
        self.meta().request_id()
    }
}
impl aws_smithy_types::retry::ProvideErrorKind for InitializeClusterError {
    fn code(&self) -> Option<&str> {
        aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self)
    }
    fn retryable_error_kind(&self) -> Option<aws_smithy_types::retry::ErrorKind> {
        None
    }
}
impl InitializeClusterError {
    /// Creates the `InitializeClusterError::Unhandled` variant from any error type.
    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self::Unhandled(
            aws_smithy_types::error::Unhandled::builder()
                .source(err)
                .build(),
        )
    }

    /// Creates the `InitializeClusterError::Unhandled` variant from a `aws_smithy_types::error::ErrorMetadata`.
    pub fn generic(err: aws_smithy_types::error::ErrorMetadata) -> Self {
        Self::Unhandled(
            aws_smithy_types::error::Unhandled::builder()
                .source(err.clone())
                .meta(err)
                .build(),
        )
    }
    ///
    /// Returns error metadata, which includes the error code, message,
    /// request ID, and potentially additional information.
    ///
    pub fn meta(&self) -> &aws_smithy_types::error::ErrorMetadata {
        use aws_smithy_types::error::metadata::ProvideErrorMetadata;
        match self {
            Self::CloudHsmAccessDeniedException(e) => e.meta(),
            Self::CloudHsmInternalFailureException(e) => e.meta(),
            Self::CloudHsmInvalidRequestException(e) => e.meta(),
            Self::CloudHsmResourceNotFoundException(e) => e.meta(),
            Self::CloudHsmServiceException(e) => e.meta(),
            Self::Unhandled(e) => e.meta(),
        }
    }
    /// Returns `true` if the error kind is `InitializeClusterError::CloudHsmAccessDeniedException`.
    pub fn is_cloud_hsm_access_denied_exception(&self) -> bool {
        matches!(self, Self::CloudHsmAccessDeniedException(_))
    }
    /// Returns `true` if the error kind is `InitializeClusterError::CloudHsmInternalFailureException`.
    pub fn is_cloud_hsm_internal_failure_exception(&self) -> bool {
        matches!(self, Self::CloudHsmInternalFailureException(_))
    }
    /// Returns `true` if the error kind is `InitializeClusterError::CloudHsmInvalidRequestException`.
    pub fn is_cloud_hsm_invalid_request_exception(&self) -> bool {
        matches!(self, Self::CloudHsmInvalidRequestException(_))
    }
    /// Returns `true` if the error kind is `InitializeClusterError::CloudHsmResourceNotFoundException`.
    pub fn is_cloud_hsm_resource_not_found_exception(&self) -> bool {
        matches!(self, Self::CloudHsmResourceNotFoundException(_))
    }
    /// Returns `true` if the error kind is `InitializeClusterError::CloudHsmServiceException`.
    pub fn is_cloud_hsm_service_exception(&self) -> bool {
        matches!(self, Self::CloudHsmServiceException(_))
    }
}
impl std::error::Error for InitializeClusterError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match self {
            Self::CloudHsmAccessDeniedException(_inner) => Some(_inner),
            Self::CloudHsmInternalFailureException(_inner) => Some(_inner),
            Self::CloudHsmInvalidRequestException(_inner) => Some(_inner),
            Self::CloudHsmResourceNotFoundException(_inner) => Some(_inner),
            Self::CloudHsmServiceException(_inner) => Some(_inner),
            Self::Unhandled(_inner) => Some(_inner),
        }
    }
}

/// Do not use this.
///
/// Operation `*Error/*ErrorKind` types were combined into a single `*Error` enum. The `.kind` field on `*Error` no longer exists and isn't needed anymore (you can just match on the error directly since it's an enum now).
#[deprecated(
    note = "Operation `*Error/*ErrorKind` types were combined into a single `*Error` enum. The `.kind` field on `*Error` no longer exists and isn't needed anymore (you can just match on the error directly since it's an enum now)."
)]
pub type DescribeClustersErrorKind = DescribeClustersError;
/// Error type for the `DescribeClustersError` operation.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum DescribeClustersError {
    /// <p>The request was rejected because the requester does not have permission to perform the requested operation.</p>
    CloudHsmAccessDeniedException(crate::error::CloudHsmAccessDeniedException),
    /// <p>The request was rejected because of an AWS CloudHSM internal failure. The request can be retried.</p>
    CloudHsmInternalFailureException(crate::error::CloudHsmInternalFailureException),
    /// <p>The request was rejected because it is not a valid request.</p>
    CloudHsmInvalidRequestException(crate::error::CloudHsmInvalidRequestException),
    /// <p>The request was rejected because an error occurred.</p>
    CloudHsmServiceException(crate::error::CloudHsmServiceException),
    /// <p>The request was rejected because of a tagging failure. Verify the tag conditions in all applicable policies, and then retry the request.</p>
    CloudHsmTagException(crate::error::CloudHsmTagException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl aws_smithy_http::result::CreateUnhandledError for DescribeClustersError {
    fn create_unhandled_error(
        source: Box<dyn std::error::Error + Send + Sync + 'static>,
        meta: Option<aws_smithy_types::error::ErrorMetadata>,
    ) -> Self {
        Self::Unhandled({
            let mut builder = aws_smithy_types::error::Unhandled::builder().source(source);
            builder.set_meta(meta);
            builder.build()
        })
    }
}
impl std::fmt::Display for DescribeClustersError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::CloudHsmAccessDeniedException(_inner) => _inner.fmt(f),
            Self::CloudHsmInternalFailureException(_inner) => _inner.fmt(f),
            Self::CloudHsmInvalidRequestException(_inner) => _inner.fmt(f),
            Self::CloudHsmServiceException(_inner) => _inner.fmt(f),
            Self::CloudHsmTagException(_inner) => _inner.fmt(f),
            Self::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl aws_smithy_types::error::metadata::ProvideErrorMetadata for DescribeClustersError {
    fn meta(&self) -> &aws_smithy_types::error::ErrorMetadata {
        match self {
            Self::CloudHsmAccessDeniedException(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::CloudHsmInternalFailureException(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::CloudHsmInvalidRequestException(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::CloudHsmServiceException(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::CloudHsmTagException(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::Unhandled(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
        }
    }
}
impl aws_http::request_id::RequestId for crate::error::DescribeClustersError {
    fn request_id(&self) -> Option<&str> {
        self.meta().request_id()
    }
}
impl aws_smithy_types::retry::ProvideErrorKind for DescribeClustersError {
    fn code(&self) -> Option<&str> {
        aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self)
    }
    fn retryable_error_kind(&self) -> Option<aws_smithy_types::retry::ErrorKind> {
        None
    }
}
impl DescribeClustersError {
    /// Creates the `DescribeClustersError::Unhandled` variant from any error type.
    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self::Unhandled(
            aws_smithy_types::error::Unhandled::builder()
                .source(err)
                .build(),
        )
    }

    /// Creates the `DescribeClustersError::Unhandled` variant from a `aws_smithy_types::error::ErrorMetadata`.
    pub fn generic(err: aws_smithy_types::error::ErrorMetadata) -> Self {
        Self::Unhandled(
            aws_smithy_types::error::Unhandled::builder()
                .source(err.clone())
                .meta(err)
                .build(),
        )
    }
    ///
    /// Returns error metadata, which includes the error code, message,
    /// request ID, and potentially additional information.
    ///
    pub fn meta(&self) -> &aws_smithy_types::error::ErrorMetadata {
        use aws_smithy_types::error::metadata::ProvideErrorMetadata;
        match self {
            Self::CloudHsmAccessDeniedException(e) => e.meta(),
            Self::CloudHsmInternalFailureException(e) => e.meta(),
            Self::CloudHsmInvalidRequestException(e) => e.meta(),
            Self::CloudHsmServiceException(e) => e.meta(),
            Self::CloudHsmTagException(e) => e.meta(),
            Self::Unhandled(e) => e.meta(),
        }
    }
    /// Returns `true` if the error kind is `DescribeClustersError::CloudHsmAccessDeniedException`.
    pub fn is_cloud_hsm_access_denied_exception(&self) -> bool {
        matches!(self, Self::CloudHsmAccessDeniedException(_))
    }
    /// Returns `true` if the error kind is `DescribeClustersError::CloudHsmInternalFailureException`.
    pub fn is_cloud_hsm_internal_failure_exception(&self) -> bool {
        matches!(self, Self::CloudHsmInternalFailureException(_))
    }
    /// Returns `true` if the error kind is `DescribeClustersError::CloudHsmInvalidRequestException`.
    pub fn is_cloud_hsm_invalid_request_exception(&self) -> bool {
        matches!(self, Self::CloudHsmInvalidRequestException(_))
    }
    /// Returns `true` if the error kind is `DescribeClustersError::CloudHsmServiceException`.
    pub fn is_cloud_hsm_service_exception(&self) -> bool {
        matches!(self, Self::CloudHsmServiceException(_))
    }
    /// Returns `true` if the error kind is `DescribeClustersError::CloudHsmTagException`.
    pub fn is_cloud_hsm_tag_exception(&self) -> bool {
        matches!(self, Self::CloudHsmTagException(_))
    }
}
impl std::error::Error for DescribeClustersError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match self {
            Self::CloudHsmAccessDeniedException(_inner) => Some(_inner),
            Self::CloudHsmInternalFailureException(_inner) => Some(_inner),
            Self::CloudHsmInvalidRequestException(_inner) => Some(_inner),
            Self::CloudHsmServiceException(_inner) => Some(_inner),
            Self::CloudHsmTagException(_inner) => Some(_inner),
            Self::Unhandled(_inner) => Some(_inner),
        }
    }
}

/// Do not use this.
///
/// Operation `*Error/*ErrorKind` types were combined into a single `*Error` enum. The `.kind` field on `*Error` no longer exists and isn't needed anymore (you can just match on the error directly since it's an enum now).
#[deprecated(
    note = "Operation `*Error/*ErrorKind` types were combined into a single `*Error` enum. The `.kind` field on `*Error` no longer exists and isn't needed anymore (you can just match on the error directly since it's an enum now)."
)]
pub type DescribeBackupsErrorKind = DescribeBackupsError;
/// Error type for the `DescribeBackupsError` operation.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum DescribeBackupsError {
    /// <p>The request was rejected because the requester does not have permission to perform the requested operation.</p>
    CloudHsmAccessDeniedException(crate::error::CloudHsmAccessDeniedException),
    /// <p>The request was rejected because of an AWS CloudHSM internal failure. The request can be retried.</p>
    CloudHsmInternalFailureException(crate::error::CloudHsmInternalFailureException),
    /// <p>The request was rejected because it is not a valid request.</p>
    CloudHsmInvalidRequestException(crate::error::CloudHsmInvalidRequestException),
    /// <p>The request was rejected because it refers to a resource that cannot be found.</p>
    CloudHsmResourceNotFoundException(crate::error::CloudHsmResourceNotFoundException),
    /// <p>The request was rejected because an error occurred.</p>
    CloudHsmServiceException(crate::error::CloudHsmServiceException),
    /// <p>The request was rejected because of a tagging failure. Verify the tag conditions in all applicable policies, and then retry the request.</p>
    CloudHsmTagException(crate::error::CloudHsmTagException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl aws_smithy_http::result::CreateUnhandledError for DescribeBackupsError {
    fn create_unhandled_error(
        source: Box<dyn std::error::Error + Send + Sync + 'static>,
        meta: Option<aws_smithy_types::error::ErrorMetadata>,
    ) -> Self {
        Self::Unhandled({
            let mut builder = aws_smithy_types::error::Unhandled::builder().source(source);
            builder.set_meta(meta);
            builder.build()
        })
    }
}
impl std::fmt::Display for DescribeBackupsError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::CloudHsmAccessDeniedException(_inner) => _inner.fmt(f),
            Self::CloudHsmInternalFailureException(_inner) => _inner.fmt(f),
            Self::CloudHsmInvalidRequestException(_inner) => _inner.fmt(f),
            Self::CloudHsmResourceNotFoundException(_inner) => _inner.fmt(f),
            Self::CloudHsmServiceException(_inner) => _inner.fmt(f),
            Self::CloudHsmTagException(_inner) => _inner.fmt(f),
            Self::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl aws_smithy_types::error::metadata::ProvideErrorMetadata for DescribeBackupsError {
    fn meta(&self) -> &aws_smithy_types::error::ErrorMetadata {
        match self {
            Self::CloudHsmAccessDeniedException(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::CloudHsmInternalFailureException(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::CloudHsmInvalidRequestException(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::CloudHsmResourceNotFoundException(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::CloudHsmServiceException(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::CloudHsmTagException(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::Unhandled(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
        }
    }
}
impl aws_http::request_id::RequestId for crate::error::DescribeBackupsError {
    fn request_id(&self) -> Option<&str> {
        self.meta().request_id()
    }
}
impl aws_smithy_types::retry::ProvideErrorKind for DescribeBackupsError {
    fn code(&self) -> Option<&str> {
        aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self)
    }
    fn retryable_error_kind(&self) -> Option<aws_smithy_types::retry::ErrorKind> {
        None
    }
}
impl DescribeBackupsError {
    /// Creates the `DescribeBackupsError::Unhandled` variant from any error type.
    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self::Unhandled(
            aws_smithy_types::error::Unhandled::builder()
                .source(err)
                .build(),
        )
    }

    /// Creates the `DescribeBackupsError::Unhandled` variant from a `aws_smithy_types::error::ErrorMetadata`.
    pub fn generic(err: aws_smithy_types::error::ErrorMetadata) -> Self {
        Self::Unhandled(
            aws_smithy_types::error::Unhandled::builder()
                .source(err.clone())
                .meta(err)
                .build(),
        )
    }
    ///
    /// Returns error metadata, which includes the error code, message,
    /// request ID, and potentially additional information.
    ///
    pub fn meta(&self) -> &aws_smithy_types::error::ErrorMetadata {
        use aws_smithy_types::error::metadata::ProvideErrorMetadata;
        match self {
            Self::CloudHsmAccessDeniedException(e) => e.meta(),
            Self::CloudHsmInternalFailureException(e) => e.meta(),
            Self::CloudHsmInvalidRequestException(e) => e.meta(),
            Self::CloudHsmResourceNotFoundException(e) => e.meta(),
            Self::CloudHsmServiceException(e) => e.meta(),
            Self::CloudHsmTagException(e) => e.meta(),
            Self::Unhandled(e) => e.meta(),
        }
    }
    /// Returns `true` if the error kind is `DescribeBackupsError::CloudHsmAccessDeniedException`.
    pub fn is_cloud_hsm_access_denied_exception(&self) -> bool {
        matches!(self, Self::CloudHsmAccessDeniedException(_))
    }
    /// Returns `true` if the error kind is `DescribeBackupsError::CloudHsmInternalFailureException`.
    pub fn is_cloud_hsm_internal_failure_exception(&self) -> bool {
        matches!(self, Self::CloudHsmInternalFailureException(_))
    }
    /// Returns `true` if the error kind is `DescribeBackupsError::CloudHsmInvalidRequestException`.
    pub fn is_cloud_hsm_invalid_request_exception(&self) -> bool {
        matches!(self, Self::CloudHsmInvalidRequestException(_))
    }
    /// Returns `true` if the error kind is `DescribeBackupsError::CloudHsmResourceNotFoundException`.
    pub fn is_cloud_hsm_resource_not_found_exception(&self) -> bool {
        matches!(self, Self::CloudHsmResourceNotFoundException(_))
    }
    /// Returns `true` if the error kind is `DescribeBackupsError::CloudHsmServiceException`.
    pub fn is_cloud_hsm_service_exception(&self) -> bool {
        matches!(self, Self::CloudHsmServiceException(_))
    }
    /// Returns `true` if the error kind is `DescribeBackupsError::CloudHsmTagException`.
    pub fn is_cloud_hsm_tag_exception(&self) -> bool {
        matches!(self, Self::CloudHsmTagException(_))
    }
}
impl std::error::Error for DescribeBackupsError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match self {
            Self::CloudHsmAccessDeniedException(_inner) => Some(_inner),
            Self::CloudHsmInternalFailureException(_inner) => Some(_inner),
            Self::CloudHsmInvalidRequestException(_inner) => Some(_inner),
            Self::CloudHsmResourceNotFoundException(_inner) => Some(_inner),
            Self::CloudHsmServiceException(_inner) => Some(_inner),
            Self::CloudHsmTagException(_inner) => Some(_inner),
            Self::Unhandled(_inner) => Some(_inner),
        }
    }
}

/// Do not use this.
///
/// Operation `*Error/*ErrorKind` types were combined into a single `*Error` enum. The `.kind` field on `*Error` no longer exists and isn't needed anymore (you can just match on the error directly since it's an enum now).
#[deprecated(
    note = "Operation `*Error/*ErrorKind` types were combined into a single `*Error` enum. The `.kind` field on `*Error` no longer exists and isn't needed anymore (you can just match on the error directly since it's an enum now)."
)]
pub type DeleteHsmErrorKind = DeleteHsmError;
/// Error type for the `DeleteHsmError` operation.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum DeleteHsmError {
    /// <p>The request was rejected because the requester does not have permission to perform the requested operation.</p>
    CloudHsmAccessDeniedException(crate::error::CloudHsmAccessDeniedException),
    /// <p>The request was rejected because of an AWS CloudHSM internal failure. The request can be retried.</p>
    CloudHsmInternalFailureException(crate::error::CloudHsmInternalFailureException),
    /// <p>The request was rejected because it is not a valid request.</p>
    CloudHsmInvalidRequestException(crate::error::CloudHsmInvalidRequestException),
    /// <p>The request was rejected because it refers to a resource that cannot be found.</p>
    CloudHsmResourceNotFoundException(crate::error::CloudHsmResourceNotFoundException),
    /// <p>The request was rejected because an error occurred.</p>
    CloudHsmServiceException(crate::error::CloudHsmServiceException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl aws_smithy_http::result::CreateUnhandledError for DeleteHsmError {
    fn create_unhandled_error(
        source: Box<dyn std::error::Error + Send + Sync + 'static>,
        meta: Option<aws_smithy_types::error::ErrorMetadata>,
    ) -> Self {
        Self::Unhandled({
            let mut builder = aws_smithy_types::error::Unhandled::builder().source(source);
            builder.set_meta(meta);
            builder.build()
        })
    }
}
impl std::fmt::Display for DeleteHsmError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::CloudHsmAccessDeniedException(_inner) => _inner.fmt(f),
            Self::CloudHsmInternalFailureException(_inner) => _inner.fmt(f),
            Self::CloudHsmInvalidRequestException(_inner) => _inner.fmt(f),
            Self::CloudHsmResourceNotFoundException(_inner) => _inner.fmt(f),
            Self::CloudHsmServiceException(_inner) => _inner.fmt(f),
            Self::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl aws_smithy_types::error::metadata::ProvideErrorMetadata for DeleteHsmError {
    fn meta(&self) -> &aws_smithy_types::error::ErrorMetadata {
        match self {
            Self::CloudHsmAccessDeniedException(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::CloudHsmInternalFailureException(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::CloudHsmInvalidRequestException(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::CloudHsmResourceNotFoundException(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::CloudHsmServiceException(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::Unhandled(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
        }
    }
}
impl aws_http::request_id::RequestId for crate::error::DeleteHsmError {
    fn request_id(&self) -> Option<&str> {
        self.meta().request_id()
    }
}
impl aws_smithy_types::retry::ProvideErrorKind for DeleteHsmError {
    fn code(&self) -> Option<&str> {
        aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self)
    }
    fn retryable_error_kind(&self) -> Option<aws_smithy_types::retry::ErrorKind> {
        None
    }
}
impl DeleteHsmError {
    /// Creates the `DeleteHsmError::Unhandled` variant from any error type.
    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self::Unhandled(
            aws_smithy_types::error::Unhandled::builder()
                .source(err)
                .build(),
        )
    }

    /// Creates the `DeleteHsmError::Unhandled` variant from a `aws_smithy_types::error::ErrorMetadata`.
    pub fn generic(err: aws_smithy_types::error::ErrorMetadata) -> Self {
        Self::Unhandled(
            aws_smithy_types::error::Unhandled::builder()
                .source(err.clone())
                .meta(err)
                .build(),
        )
    }
    ///
    /// Returns error metadata, which includes the error code, message,
    /// request ID, and potentially additional information.
    ///
    pub fn meta(&self) -> &aws_smithy_types::error::ErrorMetadata {
        use aws_smithy_types::error::metadata::ProvideErrorMetadata;
        match self {
            Self::CloudHsmAccessDeniedException(e) => e.meta(),
            Self::CloudHsmInternalFailureException(e) => e.meta(),
            Self::CloudHsmInvalidRequestException(e) => e.meta(),
            Self::CloudHsmResourceNotFoundException(e) => e.meta(),
            Self::CloudHsmServiceException(e) => e.meta(),
            Self::Unhandled(e) => e.meta(),
        }
    }
    /// Returns `true` if the error kind is `DeleteHsmError::CloudHsmAccessDeniedException`.
    pub fn is_cloud_hsm_access_denied_exception(&self) -> bool {
        matches!(self, Self::CloudHsmAccessDeniedException(_))
    }
    /// Returns `true` if the error kind is `DeleteHsmError::CloudHsmInternalFailureException`.
    pub fn is_cloud_hsm_internal_failure_exception(&self) -> bool {
        matches!(self, Self::CloudHsmInternalFailureException(_))
    }
    /// Returns `true` if the error kind is `DeleteHsmError::CloudHsmInvalidRequestException`.
    pub fn is_cloud_hsm_invalid_request_exception(&self) -> bool {
        matches!(self, Self::CloudHsmInvalidRequestException(_))
    }
    /// Returns `true` if the error kind is `DeleteHsmError::CloudHsmResourceNotFoundException`.
    pub fn is_cloud_hsm_resource_not_found_exception(&self) -> bool {
        matches!(self, Self::CloudHsmResourceNotFoundException(_))
    }
    /// Returns `true` if the error kind is `DeleteHsmError::CloudHsmServiceException`.
    pub fn is_cloud_hsm_service_exception(&self) -> bool {
        matches!(self, Self::CloudHsmServiceException(_))
    }
}
impl std::error::Error for DeleteHsmError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match self {
            Self::CloudHsmAccessDeniedException(_inner) => Some(_inner),
            Self::CloudHsmInternalFailureException(_inner) => Some(_inner),
            Self::CloudHsmInvalidRequestException(_inner) => Some(_inner),
            Self::CloudHsmResourceNotFoundException(_inner) => Some(_inner),
            Self::CloudHsmServiceException(_inner) => Some(_inner),
            Self::Unhandled(_inner) => Some(_inner),
        }
    }
}

/// Do not use this.
///
/// Operation `*Error/*ErrorKind` types were combined into a single `*Error` enum. The `.kind` field on `*Error` no longer exists and isn't needed anymore (you can just match on the error directly since it's an enum now).
#[deprecated(
    note = "Operation `*Error/*ErrorKind` types were combined into a single `*Error` enum. The `.kind` field on `*Error` no longer exists and isn't needed anymore (you can just match on the error directly since it's an enum now)."
)]
pub type DeleteClusterErrorKind = DeleteClusterError;
/// Error type for the `DeleteClusterError` operation.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum DeleteClusterError {
    /// <p>The request was rejected because the requester does not have permission to perform the requested operation.</p>
    CloudHsmAccessDeniedException(crate::error::CloudHsmAccessDeniedException),
    /// <p>The request was rejected because of an AWS CloudHSM internal failure. The request can be retried.</p>
    CloudHsmInternalFailureException(crate::error::CloudHsmInternalFailureException),
    /// <p>The request was rejected because it is not a valid request.</p>
    CloudHsmInvalidRequestException(crate::error::CloudHsmInvalidRequestException),
    /// <p>The request was rejected because it refers to a resource that cannot be found.</p>
    CloudHsmResourceNotFoundException(crate::error::CloudHsmResourceNotFoundException),
    /// <p>The request was rejected because an error occurred.</p>
    CloudHsmServiceException(crate::error::CloudHsmServiceException),
    /// <p>The request was rejected because of a tagging failure. Verify the tag conditions in all applicable policies, and then retry the request.</p>
    CloudHsmTagException(crate::error::CloudHsmTagException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl aws_smithy_http::result::CreateUnhandledError for DeleteClusterError {
    fn create_unhandled_error(
        source: Box<dyn std::error::Error + Send + Sync + 'static>,
        meta: Option<aws_smithy_types::error::ErrorMetadata>,
    ) -> Self {
        Self::Unhandled({
            let mut builder = aws_smithy_types::error::Unhandled::builder().source(source);
            builder.set_meta(meta);
            builder.build()
        })
    }
}
impl std::fmt::Display for DeleteClusterError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::CloudHsmAccessDeniedException(_inner) => _inner.fmt(f),
            Self::CloudHsmInternalFailureException(_inner) => _inner.fmt(f),
            Self::CloudHsmInvalidRequestException(_inner) => _inner.fmt(f),
            Self::CloudHsmResourceNotFoundException(_inner) => _inner.fmt(f),
            Self::CloudHsmServiceException(_inner) => _inner.fmt(f),
            Self::CloudHsmTagException(_inner) => _inner.fmt(f),
            Self::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl aws_smithy_types::error::metadata::ProvideErrorMetadata for DeleteClusterError {
    fn meta(&self) -> &aws_smithy_types::error::ErrorMetadata {
        match self {
            Self::CloudHsmAccessDeniedException(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::CloudHsmInternalFailureException(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::CloudHsmInvalidRequestException(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::CloudHsmResourceNotFoundException(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::CloudHsmServiceException(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::CloudHsmTagException(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::Unhandled(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
        }
    }
}
impl aws_http::request_id::RequestId for crate::error::DeleteClusterError {
    fn request_id(&self) -> Option<&str> {
        self.meta().request_id()
    }
}
impl aws_smithy_types::retry::ProvideErrorKind for DeleteClusterError {
    fn code(&self) -> Option<&str> {
        aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self)
    }
    fn retryable_error_kind(&self) -> Option<aws_smithy_types::retry::ErrorKind> {
        None
    }
}
impl DeleteClusterError {
    /// Creates the `DeleteClusterError::Unhandled` variant from any error type.
    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self::Unhandled(
            aws_smithy_types::error::Unhandled::builder()
                .source(err)
                .build(),
        )
    }

    /// Creates the `DeleteClusterError::Unhandled` variant from a `aws_smithy_types::error::ErrorMetadata`.
    pub fn generic(err: aws_smithy_types::error::ErrorMetadata) -> Self {
        Self::Unhandled(
            aws_smithy_types::error::Unhandled::builder()
                .source(err.clone())
                .meta(err)
                .build(),
        )
    }
    ///
    /// Returns error metadata, which includes the error code, message,
    /// request ID, and potentially additional information.
    ///
    pub fn meta(&self) -> &aws_smithy_types::error::ErrorMetadata {
        use aws_smithy_types::error::metadata::ProvideErrorMetadata;
        match self {
            Self::CloudHsmAccessDeniedException(e) => e.meta(),
            Self::CloudHsmInternalFailureException(e) => e.meta(),
            Self::CloudHsmInvalidRequestException(e) => e.meta(),
            Self::CloudHsmResourceNotFoundException(e) => e.meta(),
            Self::CloudHsmServiceException(e) => e.meta(),
            Self::CloudHsmTagException(e) => e.meta(),
            Self::Unhandled(e) => e.meta(),
        }
    }
    /// Returns `true` if the error kind is `DeleteClusterError::CloudHsmAccessDeniedException`.
    pub fn is_cloud_hsm_access_denied_exception(&self) -> bool {
        matches!(self, Self::CloudHsmAccessDeniedException(_))
    }
    /// Returns `true` if the error kind is `DeleteClusterError::CloudHsmInternalFailureException`.
    pub fn is_cloud_hsm_internal_failure_exception(&self) -> bool {
        matches!(self, Self::CloudHsmInternalFailureException(_))
    }
    /// Returns `true` if the error kind is `DeleteClusterError::CloudHsmInvalidRequestException`.
    pub fn is_cloud_hsm_invalid_request_exception(&self) -> bool {
        matches!(self, Self::CloudHsmInvalidRequestException(_))
    }
    /// Returns `true` if the error kind is `DeleteClusterError::CloudHsmResourceNotFoundException`.
    pub fn is_cloud_hsm_resource_not_found_exception(&self) -> bool {
        matches!(self, Self::CloudHsmResourceNotFoundException(_))
    }
    /// Returns `true` if the error kind is `DeleteClusterError::CloudHsmServiceException`.
    pub fn is_cloud_hsm_service_exception(&self) -> bool {
        matches!(self, Self::CloudHsmServiceException(_))
    }
    /// Returns `true` if the error kind is `DeleteClusterError::CloudHsmTagException`.
    pub fn is_cloud_hsm_tag_exception(&self) -> bool {
        matches!(self, Self::CloudHsmTagException(_))
    }
}
impl std::error::Error for DeleteClusterError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match self {
            Self::CloudHsmAccessDeniedException(_inner) => Some(_inner),
            Self::CloudHsmInternalFailureException(_inner) => Some(_inner),
            Self::CloudHsmInvalidRequestException(_inner) => Some(_inner),
            Self::CloudHsmResourceNotFoundException(_inner) => Some(_inner),
            Self::CloudHsmServiceException(_inner) => Some(_inner),
            Self::CloudHsmTagException(_inner) => Some(_inner),
            Self::Unhandled(_inner) => Some(_inner),
        }
    }
}

/// Do not use this.
///
/// Operation `*Error/*ErrorKind` types were combined into a single `*Error` enum. The `.kind` field on `*Error` no longer exists and isn't needed anymore (you can just match on the error directly since it's an enum now).
#[deprecated(
    note = "Operation `*Error/*ErrorKind` types were combined into a single `*Error` enum. The `.kind` field on `*Error` no longer exists and isn't needed anymore (you can just match on the error directly since it's an enum now)."
)]
pub type DeleteBackupErrorKind = DeleteBackupError;
/// Error type for the `DeleteBackupError` operation.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum DeleteBackupError {
    /// <p>The request was rejected because the requester does not have permission to perform the requested operation.</p>
    CloudHsmAccessDeniedException(crate::error::CloudHsmAccessDeniedException),
    /// <p>The request was rejected because of an AWS CloudHSM internal failure. The request can be retried.</p>
    CloudHsmInternalFailureException(crate::error::CloudHsmInternalFailureException),
    /// <p>The request was rejected because it is not a valid request.</p>
    CloudHsmInvalidRequestException(crate::error::CloudHsmInvalidRequestException),
    /// <p>The request was rejected because it refers to a resource that cannot be found.</p>
    CloudHsmResourceNotFoundException(crate::error::CloudHsmResourceNotFoundException),
    /// <p>The request was rejected because an error occurred.</p>
    CloudHsmServiceException(crate::error::CloudHsmServiceException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl aws_smithy_http::result::CreateUnhandledError for DeleteBackupError {
    fn create_unhandled_error(
        source: Box<dyn std::error::Error + Send + Sync + 'static>,
        meta: Option<aws_smithy_types::error::ErrorMetadata>,
    ) -> Self {
        Self::Unhandled({
            let mut builder = aws_smithy_types::error::Unhandled::builder().source(source);
            builder.set_meta(meta);
            builder.build()
        })
    }
}
impl std::fmt::Display for DeleteBackupError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::CloudHsmAccessDeniedException(_inner) => _inner.fmt(f),
            Self::CloudHsmInternalFailureException(_inner) => _inner.fmt(f),
            Self::CloudHsmInvalidRequestException(_inner) => _inner.fmt(f),
            Self::CloudHsmResourceNotFoundException(_inner) => _inner.fmt(f),
            Self::CloudHsmServiceException(_inner) => _inner.fmt(f),
            Self::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl aws_smithy_types::error::metadata::ProvideErrorMetadata for DeleteBackupError {
    fn meta(&self) -> &aws_smithy_types::error::ErrorMetadata {
        match self {
            Self::CloudHsmAccessDeniedException(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::CloudHsmInternalFailureException(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::CloudHsmInvalidRequestException(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::CloudHsmResourceNotFoundException(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::CloudHsmServiceException(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::Unhandled(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
        }
    }
}
impl aws_http::request_id::RequestId for crate::error::DeleteBackupError {
    fn request_id(&self) -> Option<&str> {
        self.meta().request_id()
    }
}
impl aws_smithy_types::retry::ProvideErrorKind for DeleteBackupError {
    fn code(&self) -> Option<&str> {
        aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self)
    }
    fn retryable_error_kind(&self) -> Option<aws_smithy_types::retry::ErrorKind> {
        None
    }
}
impl DeleteBackupError {
    /// Creates the `DeleteBackupError::Unhandled` variant from any error type.
    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self::Unhandled(
            aws_smithy_types::error::Unhandled::builder()
                .source(err)
                .build(),
        )
    }

    /// Creates the `DeleteBackupError::Unhandled` variant from a `aws_smithy_types::error::ErrorMetadata`.
    pub fn generic(err: aws_smithy_types::error::ErrorMetadata) -> Self {
        Self::Unhandled(
            aws_smithy_types::error::Unhandled::builder()
                .source(err.clone())
                .meta(err)
                .build(),
        )
    }
    ///
    /// Returns error metadata, which includes the error code, message,
    /// request ID, and potentially additional information.
    ///
    pub fn meta(&self) -> &aws_smithy_types::error::ErrorMetadata {
        use aws_smithy_types::error::metadata::ProvideErrorMetadata;
        match self {
            Self::CloudHsmAccessDeniedException(e) => e.meta(),
            Self::CloudHsmInternalFailureException(e) => e.meta(),
            Self::CloudHsmInvalidRequestException(e) => e.meta(),
            Self::CloudHsmResourceNotFoundException(e) => e.meta(),
            Self::CloudHsmServiceException(e) => e.meta(),
            Self::Unhandled(e) => e.meta(),
        }
    }
    /// Returns `true` if the error kind is `DeleteBackupError::CloudHsmAccessDeniedException`.
    pub fn is_cloud_hsm_access_denied_exception(&self) -> bool {
        matches!(self, Self::CloudHsmAccessDeniedException(_))
    }
    /// Returns `true` if the error kind is `DeleteBackupError::CloudHsmInternalFailureException`.
    pub fn is_cloud_hsm_internal_failure_exception(&self) -> bool {
        matches!(self, Self::CloudHsmInternalFailureException(_))
    }
    /// Returns `true` if the error kind is `DeleteBackupError::CloudHsmInvalidRequestException`.
    pub fn is_cloud_hsm_invalid_request_exception(&self) -> bool {
        matches!(self, Self::CloudHsmInvalidRequestException(_))
    }
    /// Returns `true` if the error kind is `DeleteBackupError::CloudHsmResourceNotFoundException`.
    pub fn is_cloud_hsm_resource_not_found_exception(&self) -> bool {
        matches!(self, Self::CloudHsmResourceNotFoundException(_))
    }
    /// Returns `true` if the error kind is `DeleteBackupError::CloudHsmServiceException`.
    pub fn is_cloud_hsm_service_exception(&self) -> bool {
        matches!(self, Self::CloudHsmServiceException(_))
    }
}
impl std::error::Error for DeleteBackupError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match self {
            Self::CloudHsmAccessDeniedException(_inner) => Some(_inner),
            Self::CloudHsmInternalFailureException(_inner) => Some(_inner),
            Self::CloudHsmInvalidRequestException(_inner) => Some(_inner),
            Self::CloudHsmResourceNotFoundException(_inner) => Some(_inner),
            Self::CloudHsmServiceException(_inner) => Some(_inner),
            Self::Unhandled(_inner) => Some(_inner),
        }
    }
}

/// Do not use this.
///
/// Operation `*Error/*ErrorKind` types were combined into a single `*Error` enum. The `.kind` field on `*Error` no longer exists and isn't needed anymore (you can just match on the error directly since it's an enum now).
#[deprecated(
    note = "Operation `*Error/*ErrorKind` types were combined into a single `*Error` enum. The `.kind` field on `*Error` no longer exists and isn't needed anymore (you can just match on the error directly since it's an enum now)."
)]
pub type CreateHsmErrorKind = CreateHsmError;
/// Error type for the `CreateHsmError` operation.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum CreateHsmError {
    /// <p>The request was rejected because the requester does not have permission to perform the requested operation.</p>
    CloudHsmAccessDeniedException(crate::error::CloudHsmAccessDeniedException),
    /// <p>The request was rejected because of an AWS CloudHSM internal failure. The request can be retried.</p>
    CloudHsmInternalFailureException(crate::error::CloudHsmInternalFailureException),
    /// <p>The request was rejected because it is not a valid request.</p>
    CloudHsmInvalidRequestException(crate::error::CloudHsmInvalidRequestException),
    /// <p>The request was rejected because it refers to a resource that cannot be found.</p>
    CloudHsmResourceNotFoundException(crate::error::CloudHsmResourceNotFoundException),
    /// <p>The request was rejected because an error occurred.</p>
    CloudHsmServiceException(crate::error::CloudHsmServiceException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl aws_smithy_http::result::CreateUnhandledError for CreateHsmError {
    fn create_unhandled_error(
        source: Box<dyn std::error::Error + Send + Sync + 'static>,
        meta: Option<aws_smithy_types::error::ErrorMetadata>,
    ) -> Self {
        Self::Unhandled({
            let mut builder = aws_smithy_types::error::Unhandled::builder().source(source);
            builder.set_meta(meta);
            builder.build()
        })
    }
}
impl std::fmt::Display for CreateHsmError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::CloudHsmAccessDeniedException(_inner) => _inner.fmt(f),
            Self::CloudHsmInternalFailureException(_inner) => _inner.fmt(f),
            Self::CloudHsmInvalidRequestException(_inner) => _inner.fmt(f),
            Self::CloudHsmResourceNotFoundException(_inner) => _inner.fmt(f),
            Self::CloudHsmServiceException(_inner) => _inner.fmt(f),
            Self::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl aws_smithy_types::error::metadata::ProvideErrorMetadata for CreateHsmError {
    fn meta(&self) -> &aws_smithy_types::error::ErrorMetadata {
        match self {
            Self::CloudHsmAccessDeniedException(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::CloudHsmInternalFailureException(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::CloudHsmInvalidRequestException(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::CloudHsmResourceNotFoundException(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::CloudHsmServiceException(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::Unhandled(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
        }
    }
}
impl aws_http::request_id::RequestId for crate::error::CreateHsmError {
    fn request_id(&self) -> Option<&str> {
        self.meta().request_id()
    }
}
impl aws_smithy_types::retry::ProvideErrorKind for CreateHsmError {
    fn code(&self) -> Option<&str> {
        aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self)
    }
    fn retryable_error_kind(&self) -> Option<aws_smithy_types::retry::ErrorKind> {
        None
    }
}
impl CreateHsmError {
    /// Creates the `CreateHsmError::Unhandled` variant from any error type.
    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self::Unhandled(
            aws_smithy_types::error::Unhandled::builder()
                .source(err)
                .build(),
        )
    }

    /// Creates the `CreateHsmError::Unhandled` variant from a `aws_smithy_types::error::ErrorMetadata`.
    pub fn generic(err: aws_smithy_types::error::ErrorMetadata) -> Self {
        Self::Unhandled(
            aws_smithy_types::error::Unhandled::builder()
                .source(err.clone())
                .meta(err)
                .build(),
        )
    }
    ///
    /// Returns error metadata, which includes the error code, message,
    /// request ID, and potentially additional information.
    ///
    pub fn meta(&self) -> &aws_smithy_types::error::ErrorMetadata {
        use aws_smithy_types::error::metadata::ProvideErrorMetadata;
        match self {
            Self::CloudHsmAccessDeniedException(e) => e.meta(),
            Self::CloudHsmInternalFailureException(e) => e.meta(),
            Self::CloudHsmInvalidRequestException(e) => e.meta(),
            Self::CloudHsmResourceNotFoundException(e) => e.meta(),
            Self::CloudHsmServiceException(e) => e.meta(),
            Self::Unhandled(e) => e.meta(),
        }
    }
    /// Returns `true` if the error kind is `CreateHsmError::CloudHsmAccessDeniedException`.
    pub fn is_cloud_hsm_access_denied_exception(&self) -> bool {
        matches!(self, Self::CloudHsmAccessDeniedException(_))
    }
    /// Returns `true` if the error kind is `CreateHsmError::CloudHsmInternalFailureException`.
    pub fn is_cloud_hsm_internal_failure_exception(&self) -> bool {
        matches!(self, Self::CloudHsmInternalFailureException(_))
    }
    /// Returns `true` if the error kind is `CreateHsmError::CloudHsmInvalidRequestException`.
    pub fn is_cloud_hsm_invalid_request_exception(&self) -> bool {
        matches!(self, Self::CloudHsmInvalidRequestException(_))
    }
    /// Returns `true` if the error kind is `CreateHsmError::CloudHsmResourceNotFoundException`.
    pub fn is_cloud_hsm_resource_not_found_exception(&self) -> bool {
        matches!(self, Self::CloudHsmResourceNotFoundException(_))
    }
    /// Returns `true` if the error kind is `CreateHsmError::CloudHsmServiceException`.
    pub fn is_cloud_hsm_service_exception(&self) -> bool {
        matches!(self, Self::CloudHsmServiceException(_))
    }
}
impl std::error::Error for CreateHsmError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match self {
            Self::CloudHsmAccessDeniedException(_inner) => Some(_inner),
            Self::CloudHsmInternalFailureException(_inner) => Some(_inner),
            Self::CloudHsmInvalidRequestException(_inner) => Some(_inner),
            Self::CloudHsmResourceNotFoundException(_inner) => Some(_inner),
            Self::CloudHsmServiceException(_inner) => Some(_inner),
            Self::Unhandled(_inner) => Some(_inner),
        }
    }
}

/// Do not use this.
///
/// Operation `*Error/*ErrorKind` types were combined into a single `*Error` enum. The `.kind` field on `*Error` no longer exists and isn't needed anymore (you can just match on the error directly since it's an enum now).
#[deprecated(
    note = "Operation `*Error/*ErrorKind` types were combined into a single `*Error` enum. The `.kind` field on `*Error` no longer exists and isn't needed anymore (you can just match on the error directly since it's an enum now)."
)]
pub type CreateClusterErrorKind = CreateClusterError;
/// Error type for the `CreateClusterError` operation.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum CreateClusterError {
    /// <p>The request was rejected because the requester does not have permission to perform the requested operation.</p>
    CloudHsmAccessDeniedException(crate::error::CloudHsmAccessDeniedException),
    /// <p>The request was rejected because of an AWS CloudHSM internal failure. The request can be retried.</p>
    CloudHsmInternalFailureException(crate::error::CloudHsmInternalFailureException),
    /// <p>The request was rejected because it is not a valid request.</p>
    CloudHsmInvalidRequestException(crate::error::CloudHsmInvalidRequestException),
    /// <p>The request was rejected because it refers to a resource that cannot be found.</p>
    CloudHsmResourceNotFoundException(crate::error::CloudHsmResourceNotFoundException),
    /// <p>The request was rejected because an error occurred.</p>
    CloudHsmServiceException(crate::error::CloudHsmServiceException),
    /// <p>The request was rejected because of a tagging failure. Verify the tag conditions in all applicable policies, and then retry the request.</p>
    CloudHsmTagException(crate::error::CloudHsmTagException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl aws_smithy_http::result::CreateUnhandledError for CreateClusterError {
    fn create_unhandled_error(
        source: Box<dyn std::error::Error + Send + Sync + 'static>,
        meta: Option<aws_smithy_types::error::ErrorMetadata>,
    ) -> Self {
        Self::Unhandled({
            let mut builder = aws_smithy_types::error::Unhandled::builder().source(source);
            builder.set_meta(meta);
            builder.build()
        })
    }
}
impl std::fmt::Display for CreateClusterError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::CloudHsmAccessDeniedException(_inner) => _inner.fmt(f),
            Self::CloudHsmInternalFailureException(_inner) => _inner.fmt(f),
            Self::CloudHsmInvalidRequestException(_inner) => _inner.fmt(f),
            Self::CloudHsmResourceNotFoundException(_inner) => _inner.fmt(f),
            Self::CloudHsmServiceException(_inner) => _inner.fmt(f),
            Self::CloudHsmTagException(_inner) => _inner.fmt(f),
            Self::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl aws_smithy_types::error::metadata::ProvideErrorMetadata for CreateClusterError {
    fn meta(&self) -> &aws_smithy_types::error::ErrorMetadata {
        match self {
            Self::CloudHsmAccessDeniedException(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::CloudHsmInternalFailureException(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::CloudHsmInvalidRequestException(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::CloudHsmResourceNotFoundException(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::CloudHsmServiceException(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::CloudHsmTagException(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::Unhandled(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
        }
    }
}
impl aws_http::request_id::RequestId for crate::error::CreateClusterError {
    fn request_id(&self) -> Option<&str> {
        self.meta().request_id()
    }
}
impl aws_smithy_types::retry::ProvideErrorKind for CreateClusterError {
    fn code(&self) -> Option<&str> {
        aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self)
    }
    fn retryable_error_kind(&self) -> Option<aws_smithy_types::retry::ErrorKind> {
        None
    }
}
impl CreateClusterError {
    /// Creates the `CreateClusterError::Unhandled` variant from any error type.
    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self::Unhandled(
            aws_smithy_types::error::Unhandled::builder()
                .source(err)
                .build(),
        )
    }

    /// Creates the `CreateClusterError::Unhandled` variant from a `aws_smithy_types::error::ErrorMetadata`.
    pub fn generic(err: aws_smithy_types::error::ErrorMetadata) -> Self {
        Self::Unhandled(
            aws_smithy_types::error::Unhandled::builder()
                .source(err.clone())
                .meta(err)
                .build(),
        )
    }
    ///
    /// Returns error metadata, which includes the error code, message,
    /// request ID, and potentially additional information.
    ///
    pub fn meta(&self) -> &aws_smithy_types::error::ErrorMetadata {
        use aws_smithy_types::error::metadata::ProvideErrorMetadata;
        match self {
            Self::CloudHsmAccessDeniedException(e) => e.meta(),
            Self::CloudHsmInternalFailureException(e) => e.meta(),
            Self::CloudHsmInvalidRequestException(e) => e.meta(),
            Self::CloudHsmResourceNotFoundException(e) => e.meta(),
            Self::CloudHsmServiceException(e) => e.meta(),
            Self::CloudHsmTagException(e) => e.meta(),
            Self::Unhandled(e) => e.meta(),
        }
    }
    /// Returns `true` if the error kind is `CreateClusterError::CloudHsmAccessDeniedException`.
    pub fn is_cloud_hsm_access_denied_exception(&self) -> bool {
        matches!(self, Self::CloudHsmAccessDeniedException(_))
    }
    /// Returns `true` if the error kind is `CreateClusterError::CloudHsmInternalFailureException`.
    pub fn is_cloud_hsm_internal_failure_exception(&self) -> bool {
        matches!(self, Self::CloudHsmInternalFailureException(_))
    }
    /// Returns `true` if the error kind is `CreateClusterError::CloudHsmInvalidRequestException`.
    pub fn is_cloud_hsm_invalid_request_exception(&self) -> bool {
        matches!(self, Self::CloudHsmInvalidRequestException(_))
    }
    /// Returns `true` if the error kind is `CreateClusterError::CloudHsmResourceNotFoundException`.
    pub fn is_cloud_hsm_resource_not_found_exception(&self) -> bool {
        matches!(self, Self::CloudHsmResourceNotFoundException(_))
    }
    /// Returns `true` if the error kind is `CreateClusterError::CloudHsmServiceException`.
    pub fn is_cloud_hsm_service_exception(&self) -> bool {
        matches!(self, Self::CloudHsmServiceException(_))
    }
    /// Returns `true` if the error kind is `CreateClusterError::CloudHsmTagException`.
    pub fn is_cloud_hsm_tag_exception(&self) -> bool {
        matches!(self, Self::CloudHsmTagException(_))
    }
}
impl std::error::Error for CreateClusterError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match self {
            Self::CloudHsmAccessDeniedException(_inner) => Some(_inner),
            Self::CloudHsmInternalFailureException(_inner) => Some(_inner),
            Self::CloudHsmInvalidRequestException(_inner) => Some(_inner),
            Self::CloudHsmResourceNotFoundException(_inner) => Some(_inner),
            Self::CloudHsmServiceException(_inner) => Some(_inner),
            Self::CloudHsmTagException(_inner) => Some(_inner),
            Self::Unhandled(_inner) => Some(_inner),
        }
    }
}

/// Do not use this.
///
/// Operation `*Error/*ErrorKind` types were combined into a single `*Error` enum. The `.kind` field on `*Error` no longer exists and isn't needed anymore (you can just match on the error directly since it's an enum now).
#[deprecated(
    note = "Operation `*Error/*ErrorKind` types were combined into a single `*Error` enum. The `.kind` field on `*Error` no longer exists and isn't needed anymore (you can just match on the error directly since it's an enum now)."
)]
pub type CopyBackupToRegionErrorKind = CopyBackupToRegionError;
/// Error type for the `CopyBackupToRegionError` operation.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum CopyBackupToRegionError {
    /// <p>The request was rejected because the requester does not have permission to perform the requested operation.</p>
    CloudHsmAccessDeniedException(crate::error::CloudHsmAccessDeniedException),
    /// <p>The request was rejected because of an AWS CloudHSM internal failure. The request can be retried.</p>
    CloudHsmInternalFailureException(crate::error::CloudHsmInternalFailureException),
    /// <p>The request was rejected because it is not a valid request.</p>
    CloudHsmInvalidRequestException(crate::error::CloudHsmInvalidRequestException),
    /// <p>The request was rejected because it refers to a resource that cannot be found.</p>
    CloudHsmResourceNotFoundException(crate::error::CloudHsmResourceNotFoundException),
    /// <p>The request was rejected because an error occurred.</p>
    CloudHsmServiceException(crate::error::CloudHsmServiceException),
    /// <p>The request was rejected because of a tagging failure. Verify the tag conditions in all applicable policies, and then retry the request.</p>
    CloudHsmTagException(crate::error::CloudHsmTagException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl aws_smithy_http::result::CreateUnhandledError for CopyBackupToRegionError {
    fn create_unhandled_error(
        source: Box<dyn std::error::Error + Send + Sync + 'static>,
        meta: Option<aws_smithy_types::error::ErrorMetadata>,
    ) -> Self {
        Self::Unhandled({
            let mut builder = aws_smithy_types::error::Unhandled::builder().source(source);
            builder.set_meta(meta);
            builder.build()
        })
    }
}
impl std::fmt::Display for CopyBackupToRegionError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::CloudHsmAccessDeniedException(_inner) => _inner.fmt(f),
            Self::CloudHsmInternalFailureException(_inner) => _inner.fmt(f),
            Self::CloudHsmInvalidRequestException(_inner) => _inner.fmt(f),
            Self::CloudHsmResourceNotFoundException(_inner) => _inner.fmt(f),
            Self::CloudHsmServiceException(_inner) => _inner.fmt(f),
            Self::CloudHsmTagException(_inner) => _inner.fmt(f),
            Self::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl aws_smithy_types::error::metadata::ProvideErrorMetadata for CopyBackupToRegionError {
    fn meta(&self) -> &aws_smithy_types::error::ErrorMetadata {
        match self {
            Self::CloudHsmAccessDeniedException(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::CloudHsmInternalFailureException(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::CloudHsmInvalidRequestException(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::CloudHsmResourceNotFoundException(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::CloudHsmServiceException(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::CloudHsmTagException(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::Unhandled(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
        }
    }
}
impl aws_http::request_id::RequestId for crate::error::CopyBackupToRegionError {
    fn request_id(&self) -> Option<&str> {
        self.meta().request_id()
    }
}
impl aws_smithy_types::retry::ProvideErrorKind for CopyBackupToRegionError {
    fn code(&self) -> Option<&str> {
        aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self)
    }
    fn retryable_error_kind(&self) -> Option<aws_smithy_types::retry::ErrorKind> {
        None
    }
}
impl CopyBackupToRegionError {
    /// Creates the `CopyBackupToRegionError::Unhandled` variant from any error type.
    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self::Unhandled(
            aws_smithy_types::error::Unhandled::builder()
                .source(err)
                .build(),
        )
    }

    /// Creates the `CopyBackupToRegionError::Unhandled` variant from a `aws_smithy_types::error::ErrorMetadata`.
    pub fn generic(err: aws_smithy_types::error::ErrorMetadata) -> Self {
        Self::Unhandled(
            aws_smithy_types::error::Unhandled::builder()
                .source(err.clone())
                .meta(err)
                .build(),
        )
    }
    ///
    /// Returns error metadata, which includes the error code, message,
    /// request ID, and potentially additional information.
    ///
    pub fn meta(&self) -> &aws_smithy_types::error::ErrorMetadata {
        use aws_smithy_types::error::metadata::ProvideErrorMetadata;
        match self {
            Self::CloudHsmAccessDeniedException(e) => e.meta(),
            Self::CloudHsmInternalFailureException(e) => e.meta(),
            Self::CloudHsmInvalidRequestException(e) => e.meta(),
            Self::CloudHsmResourceNotFoundException(e) => e.meta(),
            Self::CloudHsmServiceException(e) => e.meta(),
            Self::CloudHsmTagException(e) => e.meta(),
            Self::Unhandled(e) => e.meta(),
        }
    }
    /// Returns `true` if the error kind is `CopyBackupToRegionError::CloudHsmAccessDeniedException`.
    pub fn is_cloud_hsm_access_denied_exception(&self) -> bool {
        matches!(self, Self::CloudHsmAccessDeniedException(_))
    }
    /// Returns `true` if the error kind is `CopyBackupToRegionError::CloudHsmInternalFailureException`.
    pub fn is_cloud_hsm_internal_failure_exception(&self) -> bool {
        matches!(self, Self::CloudHsmInternalFailureException(_))
    }
    /// Returns `true` if the error kind is `CopyBackupToRegionError::CloudHsmInvalidRequestException`.
    pub fn is_cloud_hsm_invalid_request_exception(&self) -> bool {
        matches!(self, Self::CloudHsmInvalidRequestException(_))
    }
    /// Returns `true` if the error kind is `CopyBackupToRegionError::CloudHsmResourceNotFoundException`.
    pub fn is_cloud_hsm_resource_not_found_exception(&self) -> bool {
        matches!(self, Self::CloudHsmResourceNotFoundException(_))
    }
    /// Returns `true` if the error kind is `CopyBackupToRegionError::CloudHsmServiceException`.
    pub fn is_cloud_hsm_service_exception(&self) -> bool {
        matches!(self, Self::CloudHsmServiceException(_))
    }
    /// Returns `true` if the error kind is `CopyBackupToRegionError::CloudHsmTagException`.
    pub fn is_cloud_hsm_tag_exception(&self) -> bool {
        matches!(self, Self::CloudHsmTagException(_))
    }
}
impl std::error::Error for CopyBackupToRegionError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match self {
            Self::CloudHsmAccessDeniedException(_inner) => Some(_inner),
            Self::CloudHsmInternalFailureException(_inner) => Some(_inner),
            Self::CloudHsmInvalidRequestException(_inner) => Some(_inner),
            Self::CloudHsmResourceNotFoundException(_inner) => Some(_inner),
            Self::CloudHsmServiceException(_inner) => Some(_inner),
            Self::CloudHsmTagException(_inner) => Some(_inner),
            Self::Unhandled(_inner) => Some(_inner),
        }
    }
}
