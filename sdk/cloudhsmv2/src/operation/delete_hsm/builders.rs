// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::delete_hsm::_delete_hsm_output::DeleteHsmOutputBuilder;

pub use crate::operation::delete_hsm::_delete_hsm_input::DeleteHsmInputBuilder;

impl crate::operation::delete_hsm::builders::DeleteHsmInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::delete_hsm::DeleteHsmOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_hsm::DeleteHsmError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.delete_hsm();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `DeleteHsm`.
///
/// <p>Deletes the specified HSM. To specify an HSM, you can use its identifier (ID), the IP address of the HSM's elastic network interface (ENI), or the ID of the HSM's ENI. You need to specify only one of these values. To find these values, use <code>DescribeClusters</code>.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct DeleteHsmFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::delete_hsm::builders::DeleteHsmInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl crate::client::customize::internal::CustomizableSend<crate::operation::delete_hsm::DeleteHsmOutput, crate::operation::delete_hsm::DeleteHsmError>
    for DeleteHsmFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<crate::operation::delete_hsm::DeleteHsmOutput, crate::operation::delete_hsm::DeleteHsmError>,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl DeleteHsmFluentBuilder {
    /// Creates a new `DeleteHsm`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the DeleteHsm as a reference.
    pub fn as_input(&self) -> &crate::operation::delete_hsm::builders::DeleteHsmInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::delete_hsm::DeleteHsmOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_hsm::DeleteHsmError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::delete_hsm::DeleteHsm::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::delete_hsm::DeleteHsm::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::delete_hsm::DeleteHsmOutput,
        crate::operation::delete_hsm::DeleteHsmError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The identifier (ID) of the cluster that contains the HSM that you are deleting.</p>
    pub fn cluster_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.cluster_id(input.into());
        self
    }
    /// <p>The identifier (ID) of the cluster that contains the HSM that you are deleting.</p>
    pub fn set_cluster_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_cluster_id(input);
        self
    }
    /// <p>The identifier (ID) of the cluster that contains the HSM that you are deleting.</p>
    pub fn get_cluster_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_cluster_id()
    }
    /// <p>The identifier (ID) of the HSM that you are deleting.</p>
    pub fn hsm_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.hsm_id(input.into());
        self
    }
    /// <p>The identifier (ID) of the HSM that you are deleting.</p>
    pub fn set_hsm_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_hsm_id(input);
        self
    }
    /// <p>The identifier (ID) of the HSM that you are deleting.</p>
    pub fn get_hsm_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_hsm_id()
    }
    /// <p>The identifier (ID) of the elastic network interface (ENI) of the HSM that you are deleting.</p>
    pub fn eni_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.eni_id(input.into());
        self
    }
    /// <p>The identifier (ID) of the elastic network interface (ENI) of the HSM that you are deleting.</p>
    pub fn set_eni_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_eni_id(input);
        self
    }
    /// <p>The identifier (ID) of the elastic network interface (ENI) of the HSM that you are deleting.</p>
    pub fn get_eni_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_eni_id()
    }
    /// <p>The IP address of the elastic network interface (ENI) of the HSM that you are deleting.</p>
    pub fn eni_ip(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.eni_ip(input.into());
        self
    }
    /// <p>The IP address of the elastic network interface (ENI) of the HSM that you are deleting.</p>
    pub fn set_eni_ip(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_eni_ip(input);
        self
    }
    /// <p>The IP address of the elastic network interface (ENI) of the HSM that you are deleting.</p>
    pub fn get_eni_ip(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_eni_ip()
    }
}
