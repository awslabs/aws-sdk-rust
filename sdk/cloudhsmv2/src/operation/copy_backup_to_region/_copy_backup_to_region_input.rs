// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CopyBackupToRegionInput {
    /// <p>The AWS region that will contain your copied CloudHSM cluster backup.</p>
    pub destination_region: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the backup that will be copied to the destination region. </p>
    pub backup_id: ::std::option::Option<::std::string::String>,
    /// <p>Tags to apply to the destination backup during creation. If you specify tags, only these tags will be applied to the destination backup. If you do not specify tags, the service copies tags from the source backup to the destination backup.</p>
    pub tag_list: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl CopyBackupToRegionInput {
    /// <p>The AWS region that will contain your copied CloudHSM cluster backup.</p>
    pub fn destination_region(&self) -> ::std::option::Option<&str> {
        self.destination_region.as_deref()
    }
    /// <p>The ID of the backup that will be copied to the destination region. </p>
    pub fn backup_id(&self) -> ::std::option::Option<&str> {
        self.backup_id.as_deref()
    }
    /// <p>Tags to apply to the destination backup during creation. If you specify tags, only these tags will be applied to the destination backup. If you do not specify tags, the service copies tags from the source backup to the destination backup.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tag_list.is_none()`.
    pub fn tag_list(&self) -> &[crate::types::Tag] {
        self.tag_list.as_deref().unwrap_or_default()
    }
}
impl CopyBackupToRegionInput {
    /// Creates a new builder-style object to manufacture [`CopyBackupToRegionInput`](crate::operation::copy_backup_to_region::CopyBackupToRegionInput).
    pub fn builder() -> crate::operation::copy_backup_to_region::builders::CopyBackupToRegionInputBuilder {
        crate::operation::copy_backup_to_region::builders::CopyBackupToRegionInputBuilder::default()
    }
}

/// A builder for [`CopyBackupToRegionInput`](crate::operation::copy_backup_to_region::CopyBackupToRegionInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CopyBackupToRegionInputBuilder {
    pub(crate) destination_region: ::std::option::Option<::std::string::String>,
    pub(crate) backup_id: ::std::option::Option<::std::string::String>,
    pub(crate) tag_list: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl CopyBackupToRegionInputBuilder {
    /// <p>The AWS region that will contain your copied CloudHSM cluster backup.</p>
    /// This field is required.
    pub fn destination_region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.destination_region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The AWS region that will contain your copied CloudHSM cluster backup.</p>
    pub fn set_destination_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.destination_region = input;
        self
    }
    /// <p>The AWS region that will contain your copied CloudHSM cluster backup.</p>
    pub fn get_destination_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.destination_region
    }
    /// <p>The ID of the backup that will be copied to the destination region. </p>
    /// This field is required.
    pub fn backup_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.backup_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the backup that will be copied to the destination region. </p>
    pub fn set_backup_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.backup_id = input;
        self
    }
    /// <p>The ID of the backup that will be copied to the destination region. </p>
    pub fn get_backup_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.backup_id
    }
    /// Appends an item to `tag_list`.
    ///
    /// To override the contents of this collection use [`set_tag_list`](Self::set_tag_list).
    ///
    /// <p>Tags to apply to the destination backup during creation. If you specify tags, only these tags will be applied to the destination backup. If you do not specify tags, the service copies tags from the source backup to the destination backup.</p>
    pub fn tag_list(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tag_list.unwrap_or_default();
        v.push(input);
        self.tag_list = ::std::option::Option::Some(v);
        self
    }
    /// <p>Tags to apply to the destination backup during creation. If you specify tags, only these tags will be applied to the destination backup. If you do not specify tags, the service copies tags from the source backup to the destination backup.</p>
    pub fn set_tag_list(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tag_list = input;
        self
    }
    /// <p>Tags to apply to the destination backup during creation. If you specify tags, only these tags will be applied to the destination backup. If you do not specify tags, the service copies tags from the source backup to the destination backup.</p>
    pub fn get_tag_list(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tag_list
    }
    /// Consumes the builder and constructs a [`CopyBackupToRegionInput`](crate::operation::copy_backup_to_region::CopyBackupToRegionInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::copy_backup_to_region::CopyBackupToRegionInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::copy_backup_to_region::CopyBackupToRegionInput {
            destination_region: self.destination_region,
            backup_id: self.backup_id,
            tag_list: self.tag_list,
        })
    }
}
