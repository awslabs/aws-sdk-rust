// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::copy_backup_to_region::_copy_backup_to_region_output::CopyBackupToRegionOutputBuilder;

pub use crate::operation::copy_backup_to_region::_copy_backup_to_region_input::CopyBackupToRegionInputBuilder;

/// Fluent builder constructing a request to `CopyBackupToRegion`.
///
/// <p>Copy an AWS CloudHSM cluster backup to a different region.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CopyBackupToRegionFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::copy_backup_to_region::builders::CopyBackupToRegionInputBuilder,
}
impl CopyBackupToRegionFluentBuilder {
    /// Creates a new `CopyBackupToRegion`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::copy_backup_to_region::CopyBackupToRegion,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::copy_backup_to_region::CopyBackupToRegionError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::copy_backup_to_region::CopyBackupToRegionOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::copy_backup_to_region::CopyBackupToRegionError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The AWS region that will contain your copied CloudHSM cluster backup.</p>
    pub fn destination_region(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.destination_region(input.into());
        self
    }
    /// <p>The AWS region that will contain your copied CloudHSM cluster backup.</p>
    pub fn set_destination_region(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_destination_region(input);
        self
    }
    /// <p>The ID of the backup that will be copied to the destination region. </p>
    pub fn backup_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.backup_id(input.into());
        self
    }
    /// <p>The ID of the backup that will be copied to the destination region. </p>
    pub fn set_backup_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_backup_id(input);
        self
    }
    /// Appends an item to `TagList`.
    ///
    /// To override the contents of this collection use [`set_tag_list`](Self::set_tag_list).
    ///
    /// <p>Tags to apply to the destination backup during creation. If you specify tags, only these tags will be applied to the destination backup. If you do not specify tags, the service copies tags from the source backup to the destination backup.</p>
    pub fn tag_list(mut self, input: crate::types::Tag) -> Self {
        self.inner = self.inner.tag_list(input);
        self
    }
    /// <p>Tags to apply to the destination backup during creation. If you specify tags, only these tags will be applied to the destination backup. If you do not specify tags, the service copies tags from the source backup to the destination backup.</p>
    pub fn set_tag_list(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tag_list(input);
        self
    }
}
