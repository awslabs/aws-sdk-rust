// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateClusterInput {
    /// <p>A policy that defines how the service retains backups.</p>
    #[doc(hidden)]
    pub backup_retention_policy: std::option::Option<crate::types::BackupRetentionPolicy>,
    /// <p>The type of HSM to use in the cluster. Currently the only allowed value is <code>hsm1.medium</code>.</p>
    #[doc(hidden)]
    pub hsm_type: std::option::Option<std::string::String>,
    /// <p>The identifier (ID) of the cluster backup to restore. Use this value to restore the cluster from a backup instead of creating a new cluster. To find the backup ID, use <code>DescribeBackups</code>.</p>
    #[doc(hidden)]
    pub source_backup_id: std::option::Option<std::string::String>,
    /// <p>The identifiers (IDs) of the subnets where you are creating the cluster. You must specify at least one subnet. If you specify multiple subnets, they must meet the following criteria:</p>
    /// <ul>
    /// <li> <p>All subnets must be in the same virtual private cloud (VPC).</p> </li>
    /// <li> <p>You can specify only one subnet per Availability Zone.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub subnet_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Tags to apply to the CloudHSM cluster during creation.</p>
    #[doc(hidden)]
    pub tag_list: std::option::Option<std::vec::Vec<crate::types::Tag>>,
}
impl CreateClusterInput {
    /// <p>A policy that defines how the service retains backups.</p>
    pub fn backup_retention_policy(
        &self,
    ) -> std::option::Option<&crate::types::BackupRetentionPolicy> {
        self.backup_retention_policy.as_ref()
    }
    /// <p>The type of HSM to use in the cluster. Currently the only allowed value is <code>hsm1.medium</code>.</p>
    pub fn hsm_type(&self) -> std::option::Option<&str> {
        self.hsm_type.as_deref()
    }
    /// <p>The identifier (ID) of the cluster backup to restore. Use this value to restore the cluster from a backup instead of creating a new cluster. To find the backup ID, use <code>DescribeBackups</code>.</p>
    pub fn source_backup_id(&self) -> std::option::Option<&str> {
        self.source_backup_id.as_deref()
    }
    /// <p>The identifiers (IDs) of the subnets where you are creating the cluster. You must specify at least one subnet. If you specify multiple subnets, they must meet the following criteria:</p>
    /// <ul>
    /// <li> <p>All subnets must be in the same virtual private cloud (VPC).</p> </li>
    /// <li> <p>You can specify only one subnet per Availability Zone.</p> </li>
    /// </ul>
    pub fn subnet_ids(&self) -> std::option::Option<&[std::string::String]> {
        self.subnet_ids.as_deref()
    }
    /// <p>Tags to apply to the CloudHSM cluster during creation.</p>
    pub fn tag_list(&self) -> std::option::Option<&[crate::types::Tag]> {
        self.tag_list.as_deref()
    }
}
impl CreateClusterInput {
    /// Creates a new builder-style object to manufacture [`CreateClusterInput`](crate::operation::create_cluster::CreateClusterInput).
    pub fn builder() -> crate::operation::create_cluster::builders::CreateClusterInputBuilder {
        crate::operation::create_cluster::builders::CreateClusterInputBuilder::default()
    }
}

/// A builder for [`CreateClusterInput`](crate::operation::create_cluster::CreateClusterInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateClusterInputBuilder {
    pub(crate) backup_retention_policy: std::option::Option<crate::types::BackupRetentionPolicy>,
    pub(crate) hsm_type: std::option::Option<std::string::String>,
    pub(crate) source_backup_id: std::option::Option<std::string::String>,
    pub(crate) subnet_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) tag_list: std::option::Option<std::vec::Vec<crate::types::Tag>>,
}
impl CreateClusterInputBuilder {
    /// <p>A policy that defines how the service retains backups.</p>
    pub fn backup_retention_policy(mut self, input: crate::types::BackupRetentionPolicy) -> Self {
        self.backup_retention_policy = Some(input);
        self
    }
    /// <p>A policy that defines how the service retains backups.</p>
    pub fn set_backup_retention_policy(
        mut self,
        input: std::option::Option<crate::types::BackupRetentionPolicy>,
    ) -> Self {
        self.backup_retention_policy = input;
        self
    }
    /// <p>The type of HSM to use in the cluster. Currently the only allowed value is <code>hsm1.medium</code>.</p>
    pub fn hsm_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.hsm_type = Some(input.into());
        self
    }
    /// <p>The type of HSM to use in the cluster. Currently the only allowed value is <code>hsm1.medium</code>.</p>
    pub fn set_hsm_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.hsm_type = input;
        self
    }
    /// <p>The identifier (ID) of the cluster backup to restore. Use this value to restore the cluster from a backup instead of creating a new cluster. To find the backup ID, use <code>DescribeBackups</code>.</p>
    pub fn source_backup_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.source_backup_id = Some(input.into());
        self
    }
    /// <p>The identifier (ID) of the cluster backup to restore. Use this value to restore the cluster from a backup instead of creating a new cluster. To find the backup ID, use <code>DescribeBackups</code>.</p>
    pub fn set_source_backup_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.source_backup_id = input;
        self
    }
    /// Appends an item to `subnet_ids`.
    ///
    /// To override the contents of this collection use [`set_subnet_ids`](Self::set_subnet_ids).
    ///
    /// <p>The identifiers (IDs) of the subnets where you are creating the cluster. You must specify at least one subnet. If you specify multiple subnets, they must meet the following criteria:</p>
    /// <ul>
    /// <li> <p>All subnets must be in the same virtual private cloud (VPC).</p> </li>
    /// <li> <p>You can specify only one subnet per Availability Zone.</p> </li>
    /// </ul>
    pub fn subnet_ids(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.subnet_ids.unwrap_or_default();
        v.push(input.into());
        self.subnet_ids = Some(v);
        self
    }
    /// <p>The identifiers (IDs) of the subnets where you are creating the cluster. You must specify at least one subnet. If you specify multiple subnets, they must meet the following criteria:</p>
    /// <ul>
    /// <li> <p>All subnets must be in the same virtual private cloud (VPC).</p> </li>
    /// <li> <p>You can specify only one subnet per Availability Zone.</p> </li>
    /// </ul>
    pub fn set_subnet_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.subnet_ids = input;
        self
    }
    /// Appends an item to `tag_list`.
    ///
    /// To override the contents of this collection use [`set_tag_list`](Self::set_tag_list).
    ///
    /// <p>Tags to apply to the CloudHSM cluster during creation.</p>
    pub fn tag_list(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tag_list.unwrap_or_default();
        v.push(input);
        self.tag_list = Some(v);
        self
    }
    /// <p>Tags to apply to the CloudHSM cluster during creation.</p>
    pub fn set_tag_list(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.tag_list = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateClusterInput`](crate::operation::create_cluster::CreateClusterInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_cluster::CreateClusterInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::create_cluster::CreateClusterInput {
            backup_retention_policy: self.backup_retention_policy,
            hsm_type: self.hsm_type,
            source_backup_id: self.source_backup_id,
            subnet_ids: self.subnet_ids,
            tag_list: self.tag_list,
        })
    }
}
