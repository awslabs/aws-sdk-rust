// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn parse_generic_error(
    response: &http::Response<bytes::Bytes>,
) -> Result<smithy_types::Error, smithy_xml::decode::XmlError> {
    crate::rest_xml_wrapped_errors::parse_generic_error(response.body().as_ref())
}

#[allow(unused_mut)]
pub fn deser_structure_token_already_exists_error_xml_err(
    inp: &[u8],
    mut builder: crate::error::token_already_exists_error::Builder,
) -> Result<crate::error::token_already_exists_error::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Message") /* Message com.amazonaws.cloudformation#TokenAlreadyExistsException$Message */ =>  {
                let var_1 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_1);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_already_exists_error_xml_err(
    inp: &[u8],
    mut builder: crate::error::already_exists_error::Builder,
) -> Result<crate::error::already_exists_error::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Message") /* Message com.amazonaws.cloudformation#AlreadyExistsException$Message */ =>  {
                let var_2 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_2);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_insufficient_capabilities_error_xml_err(
    inp: &[u8],
    mut builder: crate::error::insufficient_capabilities_error::Builder,
) -> Result<crate::error::insufficient_capabilities_error::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Message") /* Message com.amazonaws.cloudformation#InsufficientCapabilitiesException$Message */ =>  {
                let var_3 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_3);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_limit_exceeded_error_xml_err(
    inp: &[u8],
    mut builder: crate::error::limit_exceeded_error::Builder,
) -> Result<crate::error::limit_exceeded_error::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Message") /* Message com.amazonaws.cloudformation#LimitExceededException$Message */ =>  {
                let var_4 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_4);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_create_change_set(
    inp: &[u8],
    mut builder: crate::output::create_change_set_output::Builder,
) -> Result<crate::output::create_change_set_output::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CreateChangeSetResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CreateChangeSetResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("CreateChangeSetResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected CreateChangeSetResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("Id") /* Id com.amazonaws.cloudformation#CreateChangeSetOutput$Id */ =>  {
                let var_5 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_id(var_5);
            }
            ,
            s if s.matches("StackId") /* StackId com.amazonaws.cloudformation#CreateChangeSetOutput$StackId */ =>  {
                let var_6 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_stack_id(var_6);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected CreateChangeSetResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_create_stack(
    inp: &[u8],
    mut builder: crate::output::create_stack_output::Builder,
) -> Result<crate::output::create_stack_output::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CreateStackResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CreateStackResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("CreateStackResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected CreateStackResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("StackId") /* StackId com.amazonaws.cloudformation#CreateStackOutput$StackId */ =>  {
                let var_7 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_stack_id(var_7);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected CreateStackResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_invalid_operation_error_xml_err(
    inp: &[u8],
    mut builder: crate::error::invalid_operation_error::Builder,
) -> Result<crate::error::invalid_operation_error::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Message") /* Message com.amazonaws.cloudformation#InvalidOperationException$Message */ =>  {
                let var_8 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_8);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_operation_id_already_exists_error_xml_err(
    inp: &[u8],
    mut builder: crate::error::operation_id_already_exists_error::Builder,
) -> Result<crate::error::operation_id_already_exists_error::Builder, smithy_xml::decode::XmlError>
{
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Message") /* Message com.amazonaws.cloudformation#OperationIdAlreadyExistsException$Message */ =>  {
                let var_9 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_9);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_operation_in_progress_error_xml_err(
    inp: &[u8],
    mut builder: crate::error::operation_in_progress_error::Builder,
) -> Result<crate::error::operation_in_progress_error::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Message") /* Message com.amazonaws.cloudformation#OperationInProgressException$Message */ =>  {
                let var_10 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_10);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_stack_set_not_found_error_xml_err(
    inp: &[u8],
    mut builder: crate::error::stack_set_not_found_error::Builder,
) -> Result<crate::error::stack_set_not_found_error::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Message") /* Message com.amazonaws.cloudformation#StackSetNotFoundException$Message */ =>  {
                let var_11 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_11);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_stale_request_error_xml_err(
    inp: &[u8],
    mut builder: crate::error::stale_request_error::Builder,
) -> Result<crate::error::stale_request_error::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Message") /* Message com.amazonaws.cloudformation#StaleRequestException$Message */ =>  {
                let var_12 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_12);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_create_stack_instances(
    inp: &[u8],
    mut builder: crate::output::create_stack_instances_output::Builder,
) -> Result<crate::output::create_stack_instances_output::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CreateStackInstancesResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CreateStackInstancesResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("CreateStackInstancesResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected CreateStackInstancesResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("OperationId") /* OperationId com.amazonaws.cloudformation#CreateStackInstancesOutput$OperationId */ =>  {
                let var_13 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_operation_id(var_13);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected CreateStackInstancesResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_created_but_modified_error_xml_err(
    inp: &[u8],
    mut builder: crate::error::created_but_modified_error::Builder,
) -> Result<crate::error::created_but_modified_error::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Message") /* Message com.amazonaws.cloudformation#CreatedButModifiedException$Message */ =>  {
                let var_14 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_14);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_name_already_exists_error_xml_err(
    inp: &[u8],
    mut builder: crate::error::name_already_exists_error::Builder,
) -> Result<crate::error::name_already_exists_error::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Message") /* Message com.amazonaws.cloudformation#NameAlreadyExistsException$Message */ =>  {
                let var_15 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_15);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_create_stack_set(
    inp: &[u8],
    mut builder: crate::output::create_stack_set_output::Builder,
) -> Result<crate::output::create_stack_set_output::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CreateStackSetResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CreateStackSetResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("CreateStackSetResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected CreateStackSetResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("StackSetId") /* StackSetId com.amazonaws.cloudformation#CreateStackSetOutput$StackSetId */ =>  {
                let var_16 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_stack_set_id(var_16);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected CreateStackSetResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_invalid_change_set_status_error_xml_err(
    inp: &[u8],
    mut builder: crate::error::invalid_change_set_status_error::Builder,
) -> Result<crate::error::invalid_change_set_status_error::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Message") /* Message com.amazonaws.cloudformation#InvalidChangeSetStatusException$Message */ =>  {
                let var_17 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_17);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_delete_stack_instances(
    inp: &[u8],
    mut builder: crate::output::delete_stack_instances_output::Builder,
) -> Result<crate::output::delete_stack_instances_output::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DeleteStackInstancesResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DeleteStackInstancesResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("DeleteStackInstancesResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected DeleteStackInstancesResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("OperationId") /* OperationId com.amazonaws.cloudformation#DeleteStackInstancesOutput$OperationId */ =>  {
                let var_18 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_operation_id(var_18);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected DeleteStackInstancesResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_stack_set_not_empty_error_xml_err(
    inp: &[u8],
    mut builder: crate::error::stack_set_not_empty_error::Builder,
) -> Result<crate::error::stack_set_not_empty_error::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Message") /* Message com.amazonaws.cloudformation#StackSetNotEmptyException$Message */ =>  {
                let var_19 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_19);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_cfn_registry_error_xml_err(
    inp: &[u8],
    mut builder: crate::error::cfn_registry_error::Builder,
) -> Result<crate::error::cfn_registry_error::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Message") /* Message com.amazonaws.cloudformation#CFNRegistryException$Message */ =>  {
                let var_20 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_20);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_type_not_found_error_xml_err(
    inp: &[u8],
    mut builder: crate::error::type_not_found_error::Builder,
) -> Result<crate::error::type_not_found_error::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Message") /* Message com.amazonaws.cloudformation#TypeNotFoundException$Message */ =>  {
                let var_21 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_21);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_describe_account_limits(
    inp: &[u8],
    mut builder: crate::output::describe_account_limits_output::Builder,
) -> Result<crate::output::describe_account_limits_output::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeAccountLimitsResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeAccountLimitsResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("DescribeAccountLimitsResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected DescribeAccountLimitsResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("AccountLimits") /* AccountLimits com.amazonaws.cloudformation#DescribeAccountLimitsOutput$AccountLimits */ =>  {
                let var_22 =
                    Some(
                        crate::xml_deser::deser_list_account_limit_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_account_limits(var_22);
            }
            ,
            s if s.matches("NextToken") /* NextToken com.amazonaws.cloudformation#DescribeAccountLimitsOutput$NextToken */ =>  {
                let var_23 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_23);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected DescribeAccountLimitsResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_change_set_not_found_error_xml_err(
    inp: &[u8],
    mut builder: crate::error::change_set_not_found_error::Builder,
) -> Result<crate::error::change_set_not_found_error::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Message") /* Message com.amazonaws.cloudformation#ChangeSetNotFoundException$Message */ =>  {
                let var_24 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_24);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_describe_change_set(
    inp: &[u8],
    mut builder: crate::output::describe_change_set_output::Builder,
) -> Result<crate::output::describe_change_set_output::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeChangeSetResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeChangeSetResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("DescribeChangeSetResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected DescribeChangeSetResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("ChangeSetName") /* ChangeSetName com.amazonaws.cloudformation#DescribeChangeSetOutput$ChangeSetName */ =>  {
                let var_25 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_change_set_name(var_25);
            }
            ,
            s if s.matches("ChangeSetId") /* ChangeSetId com.amazonaws.cloudformation#DescribeChangeSetOutput$ChangeSetId */ =>  {
                let var_26 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_change_set_id(var_26);
            }
            ,
            s if s.matches("StackId") /* StackId com.amazonaws.cloudformation#DescribeChangeSetOutput$StackId */ =>  {
                let var_27 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_stack_id(var_27);
            }
            ,
            s if s.matches("StackName") /* StackName com.amazonaws.cloudformation#DescribeChangeSetOutput$StackName */ =>  {
                let var_28 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_stack_name(var_28);
            }
            ,
            s if s.matches("Description") /* Description com.amazonaws.cloudformation#DescribeChangeSetOutput$Description */ =>  {
                let var_29 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_description(var_29);
            }
            ,
            s if s.matches("Parameters") /* Parameters com.amazonaws.cloudformation#DescribeChangeSetOutput$Parameters */ =>  {
                let var_30 =
                    Some(
                        crate::xml_deser::deser_list_parameters(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_parameters(var_30);
            }
            ,
            s if s.matches("CreationTime") /* CreationTime com.amazonaws.cloudformation#DescribeChangeSetOutput$CreationTime */ =>  {
                let var_31 =
                    Some(
                        smithy_types::Instant::from_str(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , smithy_types::instant::Format::DateTime
                        )
                        .map_err(|_|smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.cloudformation#CreationTime`)"))
                        ?
                    )
                ;
                builder = builder.set_creation_time(var_31);
            }
            ,
            s if s.matches("ExecutionStatus") /* ExecutionStatus com.amazonaws.cloudformation#DescribeChangeSetOutput$ExecutionStatus */ =>  {
                let var_32 =
                    Some(
                        Result::<crate::model::ExecutionStatus, smithy_xml::decode::XmlError>::Ok(
                            crate::model::ExecutionStatus::from(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_execution_status(var_32);
            }
            ,
            s if s.matches("Status") /* Status com.amazonaws.cloudformation#DescribeChangeSetOutput$Status */ =>  {
                let var_33 =
                    Some(
                        Result::<crate::model::ChangeSetStatus, smithy_xml::decode::XmlError>::Ok(
                            crate::model::ChangeSetStatus::from(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_status(var_33);
            }
            ,
            s if s.matches("StatusReason") /* StatusReason com.amazonaws.cloudformation#DescribeChangeSetOutput$StatusReason */ =>  {
                let var_34 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_status_reason(var_34);
            }
            ,
            s if s.matches("NotificationARNs") /* NotificationARNs com.amazonaws.cloudformation#DescribeChangeSetOutput$NotificationARNs */ =>  {
                let var_35 =
                    Some(
                        crate::xml_deser::deser_list_notification_ar_ns(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_notification_ar_ns(var_35);
            }
            ,
            s if s.matches("RollbackConfiguration") /* RollbackConfiguration com.amazonaws.cloudformation#DescribeChangeSetOutput$RollbackConfiguration */ =>  {
                let var_36 =
                    Some(
                        crate::xml_deser::deser_structure_rollback_configuration(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_rollback_configuration(var_36);
            }
            ,
            s if s.matches("Capabilities") /* Capabilities com.amazonaws.cloudformation#DescribeChangeSetOutput$Capabilities */ =>  {
                let var_37 =
                    Some(
                        crate::xml_deser::deser_list_capabilities(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_capabilities(var_37);
            }
            ,
            s if s.matches("Tags") /* Tags com.amazonaws.cloudformation#DescribeChangeSetOutput$Tags */ =>  {
                let var_38 =
                    Some(
                        crate::xml_deser::deser_list_tags(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_38);
            }
            ,
            s if s.matches("Changes") /* Changes com.amazonaws.cloudformation#DescribeChangeSetOutput$Changes */ =>  {
                let var_39 =
                    Some(
                        crate::xml_deser::deser_list_changes(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_changes(var_39);
            }
            ,
            s if s.matches("NextToken") /* NextToken com.amazonaws.cloudformation#DescribeChangeSetOutput$NextToken */ =>  {
                let var_40 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_40);
            }
            ,
            s if s.matches("IncludeNestedStacks") /* IncludeNestedStacks com.amazonaws.cloudformation#DescribeChangeSetOutput$IncludeNestedStacks */ =>  {
                let var_41 =
                    Some(
                         {
                            use std::str::FromStr;
                            bool::from_str(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.cloudformation#IncludeNestedStacks`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_include_nested_stacks(var_41);
            }
            ,
            s if s.matches("ParentChangeSetId") /* ParentChangeSetId com.amazonaws.cloudformation#DescribeChangeSetOutput$ParentChangeSetId */ =>  {
                let var_42 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_parent_change_set_id(var_42);
            }
            ,
            s if s.matches("RootChangeSetId") /* RootChangeSetId com.amazonaws.cloudformation#DescribeChangeSetOutput$RootChangeSetId */ =>  {
                let var_43 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_root_change_set_id(var_43);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected DescribeChangeSetResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_describe_stack_drift_detection_status(
    inp: &[u8],
    mut builder: crate::output::describe_stack_drift_detection_status_output::Builder,
) -> Result<
    crate::output::describe_stack_drift_detection_status_output::Builder,
    smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeStackDriftDetectionStatusResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeStackDriftDetectionStatusResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("DescribeStackDriftDetectionStatusResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected DescribeStackDriftDetectionStatusResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("StackId") /* StackId com.amazonaws.cloudformation#DescribeStackDriftDetectionStatusOutput$StackId */ =>  {
                let var_44 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_stack_id(var_44);
            }
            ,
            s if s.matches("StackDriftDetectionId") /* StackDriftDetectionId com.amazonaws.cloudformation#DescribeStackDriftDetectionStatusOutput$StackDriftDetectionId */ =>  {
                let var_45 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_stack_drift_detection_id(var_45);
            }
            ,
            s if s.matches("StackDriftStatus") /* StackDriftStatus com.amazonaws.cloudformation#DescribeStackDriftDetectionStatusOutput$StackDriftStatus */ =>  {
                let var_46 =
                    Some(
                        Result::<crate::model::StackDriftStatus, smithy_xml::decode::XmlError>::Ok(
                            crate::model::StackDriftStatus::from(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_stack_drift_status(var_46);
            }
            ,
            s if s.matches("DetectionStatus") /* DetectionStatus com.amazonaws.cloudformation#DescribeStackDriftDetectionStatusOutput$DetectionStatus */ =>  {
                let var_47 =
                    Some(
                        Result::<crate::model::StackDriftDetectionStatus, smithy_xml::decode::XmlError>::Ok(
                            crate::model::StackDriftDetectionStatus::from(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_detection_status(var_47);
            }
            ,
            s if s.matches("DetectionStatusReason") /* DetectionStatusReason com.amazonaws.cloudformation#DescribeStackDriftDetectionStatusOutput$DetectionStatusReason */ =>  {
                let var_48 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_detection_status_reason(var_48);
            }
            ,
            s if s.matches("DriftedStackResourceCount") /* DriftedStackResourceCount com.amazonaws.cloudformation#DescribeStackDriftDetectionStatusOutput$DriftedStackResourceCount */ =>  {
                let var_49 =
                    Some(
                         {
                            use std::str::FromStr;
                            i32::from_str(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.cloudformation#BoxedInteger`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_drifted_stack_resource_count(var_49);
            }
            ,
            s if s.matches("Timestamp") /* Timestamp com.amazonaws.cloudformation#DescribeStackDriftDetectionStatusOutput$Timestamp */ =>  {
                let var_50 =
                    Some(
                        smithy_types::Instant::from_str(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , smithy_types::instant::Format::DateTime
                        )
                        .map_err(|_|smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.cloudformation#Timestamp`)"))
                        ?
                    )
                ;
                builder = builder.set_timestamp(var_50);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected DescribeStackDriftDetectionStatusResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_describe_stack_events(
    inp: &[u8],
    mut builder: crate::output::describe_stack_events_output::Builder,
) -> Result<crate::output::describe_stack_events_output::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeStackEventsResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeStackEventsResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("DescribeStackEventsResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected DescribeStackEventsResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("StackEvents") /* StackEvents com.amazonaws.cloudformation#DescribeStackEventsOutput$StackEvents */ =>  {
                let var_51 =
                    Some(
                        crate::xml_deser::deser_list_stack_events(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_stack_events(var_51);
            }
            ,
            s if s.matches("NextToken") /* NextToken com.amazonaws.cloudformation#DescribeStackEventsOutput$NextToken */ =>  {
                let var_52 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_52);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected DescribeStackEventsResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_stack_instance_not_found_error_xml_err(
    inp: &[u8],
    mut builder: crate::error::stack_instance_not_found_error::Builder,
) -> Result<crate::error::stack_instance_not_found_error::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Message") /* Message com.amazonaws.cloudformation#StackInstanceNotFoundException$Message */ =>  {
                let var_53 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_53);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_describe_stack_instance(
    inp: &[u8],
    mut builder: crate::output::describe_stack_instance_output::Builder,
) -> Result<crate::output::describe_stack_instance_output::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeStackInstanceResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeStackInstanceResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("DescribeStackInstanceResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected DescribeStackInstanceResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("StackInstance") /* StackInstance com.amazonaws.cloudformation#DescribeStackInstanceOutput$StackInstance */ =>  {
                let var_54 =
                    Some(
                        crate::xml_deser::deser_structure_stack_instance(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_stack_instance(var_54);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected DescribeStackInstanceResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_describe_stack_resource(
    inp: &[u8],
    mut builder: crate::output::describe_stack_resource_output::Builder,
) -> Result<crate::output::describe_stack_resource_output::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeStackResourceResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeStackResourceResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("DescribeStackResourceResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected DescribeStackResourceResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("StackResourceDetail") /* StackResourceDetail com.amazonaws.cloudformation#DescribeStackResourceOutput$StackResourceDetail */ =>  {
                let var_55 =
                    Some(
                        crate::xml_deser::deser_structure_stack_resource_detail(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_stack_resource_detail(var_55);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected DescribeStackResourceResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_describe_stack_resource_drifts(
    inp: &[u8],
    mut builder: crate::output::describe_stack_resource_drifts_output::Builder,
) -> Result<
    crate::output::describe_stack_resource_drifts_output::Builder,
    smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeStackResourceDriftsResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeStackResourceDriftsResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("DescribeStackResourceDriftsResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected DescribeStackResourceDriftsResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("StackResourceDrifts") /* StackResourceDrifts com.amazonaws.cloudformation#DescribeStackResourceDriftsOutput$StackResourceDrifts */ =>  {
                let var_56 =
                    Some(
                        crate::xml_deser::deser_list_stack_resource_drifts(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_stack_resource_drifts(var_56);
            }
            ,
            s if s.matches("NextToken") /* NextToken com.amazonaws.cloudformation#DescribeStackResourceDriftsOutput$NextToken */ =>  {
                let var_57 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_57);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected DescribeStackResourceDriftsResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_describe_stack_resources(
    inp: &[u8],
    mut builder: crate::output::describe_stack_resources_output::Builder,
) -> Result<crate::output::describe_stack_resources_output::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeStackResourcesResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeStackResourcesResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("DescribeStackResourcesResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected DescribeStackResourcesResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("StackResources") /* StackResources com.amazonaws.cloudformation#DescribeStackResourcesOutput$StackResources */ =>  {
                let var_58 =
                    Some(
                        crate::xml_deser::deser_list_stack_resources(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_stack_resources(var_58);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected DescribeStackResourcesResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_describe_stacks(
    inp: &[u8],
    mut builder: crate::output::describe_stacks_output::Builder,
) -> Result<crate::output::describe_stacks_output::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeStacksResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeStacksResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("DescribeStacksResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected DescribeStacksResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("Stacks") /* Stacks com.amazonaws.cloudformation#DescribeStacksOutput$Stacks */ =>  {
                let var_59 =
                    Some(
                        crate::xml_deser::deser_list_stacks(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_stacks(var_59);
            }
            ,
            s if s.matches("NextToken") /* NextToken com.amazonaws.cloudformation#DescribeStacksOutput$NextToken */ =>  {
                let var_60 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_60);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected DescribeStacksResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_describe_stack_set(
    inp: &[u8],
    mut builder: crate::output::describe_stack_set_output::Builder,
) -> Result<crate::output::describe_stack_set_output::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeStackSetResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeStackSetResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("DescribeStackSetResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected DescribeStackSetResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("StackSet") /* StackSet com.amazonaws.cloudformation#DescribeStackSetOutput$StackSet */ =>  {
                let var_61 =
                    Some(
                        crate::xml_deser::deser_structure_stack_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_stack_set(var_61);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected DescribeStackSetResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_operation_not_found_error_xml_err(
    inp: &[u8],
    mut builder: crate::error::operation_not_found_error::Builder,
) -> Result<crate::error::operation_not_found_error::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Message") /* Message com.amazonaws.cloudformation#OperationNotFoundException$Message */ =>  {
                let var_62 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_62);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_describe_stack_set_operation(
    inp: &[u8],
    mut builder: crate::output::describe_stack_set_operation_output::Builder,
) -> Result<crate::output::describe_stack_set_operation_output::Builder, smithy_xml::decode::XmlError>
{
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeStackSetOperationResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeStackSetOperationResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("DescribeStackSetOperationResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected DescribeStackSetOperationResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("StackSetOperation") /* StackSetOperation com.amazonaws.cloudformation#DescribeStackSetOperationOutput$StackSetOperation */ =>  {
                let var_63 =
                    Some(
                        crate::xml_deser::deser_structure_stack_set_operation(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_stack_set_operation(var_63);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected DescribeStackSetOperationResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_describe_type(
    inp: &[u8],
    mut builder: crate::output::describe_type_output::Builder,
) -> Result<crate::output::describe_type_output::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeTypeResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeTypeResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("DescribeTypeResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected DescribeTypeResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("Arn") /* Arn com.amazonaws.cloudformation#DescribeTypeOutput$Arn */ =>  {
                let var_64 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_arn(var_64);
            }
            ,
            s if s.matches("Type") /* Type com.amazonaws.cloudformation#DescribeTypeOutput$Type */ =>  {
                let var_65 =
                    Some(
                        Result::<crate::model::RegistryType, smithy_xml::decode::XmlError>::Ok(
                            crate::model::RegistryType::from(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_type(var_65);
            }
            ,
            s if s.matches("TypeName") /* TypeName com.amazonaws.cloudformation#DescribeTypeOutput$TypeName */ =>  {
                let var_66 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_type_name(var_66);
            }
            ,
            s if s.matches("DefaultVersionId") /* DefaultVersionId com.amazonaws.cloudformation#DescribeTypeOutput$DefaultVersionId */ =>  {
                let var_67 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_default_version_id(var_67);
            }
            ,
            s if s.matches("IsDefaultVersion") /* IsDefaultVersion com.amazonaws.cloudformation#DescribeTypeOutput$IsDefaultVersion */ =>  {
                let var_68 =
                    Some(
                         {
                            use std::str::FromStr;
                            bool::from_str(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.cloudformation#IsDefaultVersion`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_is_default_version(var_68);
            }
            ,
            s if s.matches("Description") /* Description com.amazonaws.cloudformation#DescribeTypeOutput$Description */ =>  {
                let var_69 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_description(var_69);
            }
            ,
            s if s.matches("Schema") /* Schema com.amazonaws.cloudformation#DescribeTypeOutput$Schema */ =>  {
                let var_70 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_schema(var_70);
            }
            ,
            s if s.matches("ProvisioningType") /* ProvisioningType com.amazonaws.cloudformation#DescribeTypeOutput$ProvisioningType */ =>  {
                let var_71 =
                    Some(
                        Result::<crate::model::ProvisioningType, smithy_xml::decode::XmlError>::Ok(
                            crate::model::ProvisioningType::from(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_provisioning_type(var_71);
            }
            ,
            s if s.matches("DeprecatedStatus") /* DeprecatedStatus com.amazonaws.cloudformation#DescribeTypeOutput$DeprecatedStatus */ =>  {
                let var_72 =
                    Some(
                        Result::<crate::model::DeprecatedStatus, smithy_xml::decode::XmlError>::Ok(
                            crate::model::DeprecatedStatus::from(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_deprecated_status(var_72);
            }
            ,
            s if s.matches("LoggingConfig") /* LoggingConfig com.amazonaws.cloudformation#DescribeTypeOutput$LoggingConfig */ =>  {
                let var_73 =
                    Some(
                        crate::xml_deser::deser_structure_logging_config(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_logging_config(var_73);
            }
            ,
            s if s.matches("ExecutionRoleArn") /* ExecutionRoleArn com.amazonaws.cloudformation#DescribeTypeOutput$ExecutionRoleArn */ =>  {
                let var_74 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_execution_role_arn(var_74);
            }
            ,
            s if s.matches("Visibility") /* Visibility com.amazonaws.cloudformation#DescribeTypeOutput$Visibility */ =>  {
                let var_75 =
                    Some(
                        Result::<crate::model::Visibility, smithy_xml::decode::XmlError>::Ok(
                            crate::model::Visibility::from(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_visibility(var_75);
            }
            ,
            s if s.matches("SourceUrl") /* SourceUrl com.amazonaws.cloudformation#DescribeTypeOutput$SourceUrl */ =>  {
                let var_76 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_source_url(var_76);
            }
            ,
            s if s.matches("DocumentationUrl") /* DocumentationUrl com.amazonaws.cloudformation#DescribeTypeOutput$DocumentationUrl */ =>  {
                let var_77 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_documentation_url(var_77);
            }
            ,
            s if s.matches("LastUpdated") /* LastUpdated com.amazonaws.cloudformation#DescribeTypeOutput$LastUpdated */ =>  {
                let var_78 =
                    Some(
                        smithy_types::Instant::from_str(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , smithy_types::instant::Format::DateTime
                        )
                        .map_err(|_|smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.cloudformation#Timestamp`)"))
                        ?
                    )
                ;
                builder = builder.set_last_updated(var_78);
            }
            ,
            s if s.matches("TimeCreated") /* TimeCreated com.amazonaws.cloudformation#DescribeTypeOutput$TimeCreated */ =>  {
                let var_79 =
                    Some(
                        smithy_types::Instant::from_str(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , smithy_types::instant::Format::DateTime
                        )
                        .map_err(|_|smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.cloudformation#Timestamp`)"))
                        ?
                    )
                ;
                builder = builder.set_time_created(var_79);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected DescribeTypeResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_describe_type_registration(
    inp: &[u8],
    mut builder: crate::output::describe_type_registration_output::Builder,
) -> Result<crate::output::describe_type_registration_output::Builder, smithy_xml::decode::XmlError>
{
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeTypeRegistrationResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeTypeRegistrationResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("DescribeTypeRegistrationResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected DescribeTypeRegistrationResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("ProgressStatus") /* ProgressStatus com.amazonaws.cloudformation#DescribeTypeRegistrationOutput$ProgressStatus */ =>  {
                let var_80 =
                    Some(
                        Result::<crate::model::RegistrationStatus, smithy_xml::decode::XmlError>::Ok(
                            crate::model::RegistrationStatus::from(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_progress_status(var_80);
            }
            ,
            s if s.matches("Description") /* Description com.amazonaws.cloudformation#DescribeTypeRegistrationOutput$Description */ =>  {
                let var_81 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_description(var_81);
            }
            ,
            s if s.matches("TypeArn") /* TypeArn com.amazonaws.cloudformation#DescribeTypeRegistrationOutput$TypeArn */ =>  {
                let var_82 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_type_arn(var_82);
            }
            ,
            s if s.matches("TypeVersionArn") /* TypeVersionArn com.amazonaws.cloudformation#DescribeTypeRegistrationOutput$TypeVersionArn */ =>  {
                let var_83 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_type_version_arn(var_83);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected DescribeTypeRegistrationResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_detect_stack_drift(
    inp: &[u8],
    mut builder: crate::output::detect_stack_drift_output::Builder,
) -> Result<crate::output::detect_stack_drift_output::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DetectStackDriftResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DetectStackDriftResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("DetectStackDriftResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected DetectStackDriftResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("StackDriftDetectionId") /* StackDriftDetectionId com.amazonaws.cloudformation#DetectStackDriftOutput$StackDriftDetectionId */ =>  {
                let var_84 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_stack_drift_detection_id(var_84);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected DetectStackDriftResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_detect_stack_resource_drift(
    inp: &[u8],
    mut builder: crate::output::detect_stack_resource_drift_output::Builder,
) -> Result<crate::output::detect_stack_resource_drift_output::Builder, smithy_xml::decode::XmlError>
{
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DetectStackResourceDriftResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DetectStackResourceDriftResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("DetectStackResourceDriftResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected DetectStackResourceDriftResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("StackResourceDrift") /* StackResourceDrift com.amazonaws.cloudformation#DetectStackResourceDriftOutput$StackResourceDrift */ =>  {
                let var_85 =
                    Some(
                        crate::xml_deser::deser_structure_stack_resource_drift(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_stack_resource_drift(var_85);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected DetectStackResourceDriftResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_detect_stack_set_drift(
    inp: &[u8],
    mut builder: crate::output::detect_stack_set_drift_output::Builder,
) -> Result<crate::output::detect_stack_set_drift_output::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DetectStackSetDriftResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DetectStackSetDriftResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("DetectStackSetDriftResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected DetectStackSetDriftResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("OperationId") /* OperationId com.amazonaws.cloudformation#DetectStackSetDriftOutput$OperationId */ =>  {
                let var_86 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_operation_id(var_86);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected DetectStackSetDriftResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_estimate_template_cost(
    inp: &[u8],
    mut builder: crate::output::estimate_template_cost_output::Builder,
) -> Result<crate::output::estimate_template_cost_output::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("EstimateTemplateCostResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected EstimateTemplateCostResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("EstimateTemplateCostResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected EstimateTemplateCostResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("Url") /* Url com.amazonaws.cloudformation#EstimateTemplateCostOutput$Url */ =>  {
                let var_87 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_url(var_87);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected EstimateTemplateCostResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_get_stack_policy(
    inp: &[u8],
    mut builder: crate::output::get_stack_policy_output::Builder,
) -> Result<crate::output::get_stack_policy_output::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("GetStackPolicyResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected GetStackPolicyResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("GetStackPolicyResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected GetStackPolicyResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("StackPolicyBody") /* StackPolicyBody com.amazonaws.cloudformation#GetStackPolicyOutput$StackPolicyBody */ =>  {
                let var_88 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_stack_policy_body(var_88);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected GetStackPolicyResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_get_template(
    inp: &[u8],
    mut builder: crate::output::get_template_output::Builder,
) -> Result<crate::output::get_template_output::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("GetTemplateResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected GetTemplateResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("GetTemplateResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected GetTemplateResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("TemplateBody") /* TemplateBody com.amazonaws.cloudformation#GetTemplateOutput$TemplateBody */ =>  {
                let var_89 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_template_body(var_89);
            }
            ,
            s if s.matches("StagesAvailable") /* StagesAvailable com.amazonaws.cloudformation#GetTemplateOutput$StagesAvailable */ =>  {
                let var_90 =
                    Some(
                        crate::xml_deser::deser_list_stage_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_stages_available(var_90);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected GetTemplateResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_get_template_summary(
    inp: &[u8],
    mut builder: crate::output::get_template_summary_output::Builder,
) -> Result<crate::output::get_template_summary_output::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("GetTemplateSummaryResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected GetTemplateSummaryResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("GetTemplateSummaryResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected GetTemplateSummaryResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("Parameters") /* Parameters com.amazonaws.cloudformation#GetTemplateSummaryOutput$Parameters */ =>  {
                let var_91 =
                    Some(
                        crate::xml_deser::deser_list_parameter_declarations(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_parameters(var_91);
            }
            ,
            s if s.matches("Description") /* Description com.amazonaws.cloudformation#GetTemplateSummaryOutput$Description */ =>  {
                let var_92 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_description(var_92);
            }
            ,
            s if s.matches("Capabilities") /* Capabilities com.amazonaws.cloudformation#GetTemplateSummaryOutput$Capabilities */ =>  {
                let var_93 =
                    Some(
                        crate::xml_deser::deser_list_capabilities(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_capabilities(var_93);
            }
            ,
            s if s.matches("CapabilitiesReason") /* CapabilitiesReason com.amazonaws.cloudformation#GetTemplateSummaryOutput$CapabilitiesReason */ =>  {
                let var_94 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_capabilities_reason(var_94);
            }
            ,
            s if s.matches("ResourceTypes") /* ResourceTypes com.amazonaws.cloudformation#GetTemplateSummaryOutput$ResourceTypes */ =>  {
                let var_95 =
                    Some(
                        crate::xml_deser::deser_list_resource_types(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_resource_types(var_95);
            }
            ,
            s if s.matches("Version") /* Version com.amazonaws.cloudformation#GetTemplateSummaryOutput$Version */ =>  {
                let var_96 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_version(var_96);
            }
            ,
            s if s.matches("Metadata") /* Metadata com.amazonaws.cloudformation#GetTemplateSummaryOutput$Metadata */ =>  {
                let var_97 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_metadata(var_97);
            }
            ,
            s if s.matches("DeclaredTransforms") /* DeclaredTransforms com.amazonaws.cloudformation#GetTemplateSummaryOutput$DeclaredTransforms */ =>  {
                let var_98 =
                    Some(
                        crate::xml_deser::deser_list_transforms_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_declared_transforms(var_98);
            }
            ,
            s if s.matches("ResourceIdentifierSummaries") /* ResourceIdentifierSummaries com.amazonaws.cloudformation#GetTemplateSummaryOutput$ResourceIdentifierSummaries */ =>  {
                let var_99 =
                    Some(
                        crate::xml_deser::deser_list_resource_identifier_summaries(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_resource_identifier_summaries(var_99);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected GetTemplateSummaryResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_list_change_sets(
    inp: &[u8],
    mut builder: crate::output::list_change_sets_output::Builder,
) -> Result<crate::output::list_change_sets_output::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ListChangeSetsResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ListChangeSetsResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("ListChangeSetsResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected ListChangeSetsResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("Summaries") /* Summaries com.amazonaws.cloudformation#ListChangeSetsOutput$Summaries */ =>  {
                let var_100 =
                    Some(
                        crate::xml_deser::deser_list_change_set_summaries(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_summaries(var_100);
            }
            ,
            s if s.matches("NextToken") /* NextToken com.amazonaws.cloudformation#ListChangeSetsOutput$NextToken */ =>  {
                let var_101 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_101);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected ListChangeSetsResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_list_exports(
    inp: &[u8],
    mut builder: crate::output::list_exports_output::Builder,
) -> Result<crate::output::list_exports_output::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ListExportsResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ListExportsResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("ListExportsResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected ListExportsResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("Exports") /* Exports com.amazonaws.cloudformation#ListExportsOutput$Exports */ =>  {
                let var_102 =
                    Some(
                        crate::xml_deser::deser_list_exports(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_exports(var_102);
            }
            ,
            s if s.matches("NextToken") /* NextToken com.amazonaws.cloudformation#ListExportsOutput$NextToken */ =>  {
                let var_103 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_103);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected ListExportsResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_list_imports(
    inp: &[u8],
    mut builder: crate::output::list_imports_output::Builder,
) -> Result<crate::output::list_imports_output::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ListImportsResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ListImportsResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("ListImportsResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected ListImportsResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("Imports") /* Imports com.amazonaws.cloudformation#ListImportsOutput$Imports */ =>  {
                let var_104 =
                    Some(
                        crate::xml_deser::deser_list_imports(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_imports(var_104);
            }
            ,
            s if s.matches("NextToken") /* NextToken com.amazonaws.cloudformation#ListImportsOutput$NextToken */ =>  {
                let var_105 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_105);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected ListImportsResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_list_stack_instances(
    inp: &[u8],
    mut builder: crate::output::list_stack_instances_output::Builder,
) -> Result<crate::output::list_stack_instances_output::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ListStackInstancesResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ListStackInstancesResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("ListStackInstancesResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected ListStackInstancesResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("Summaries") /* Summaries com.amazonaws.cloudformation#ListStackInstancesOutput$Summaries */ =>  {
                let var_106 =
                    Some(
                        crate::xml_deser::deser_list_stack_instance_summaries(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_summaries(var_106);
            }
            ,
            s if s.matches("NextToken") /* NextToken com.amazonaws.cloudformation#ListStackInstancesOutput$NextToken */ =>  {
                let var_107 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_107);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected ListStackInstancesResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_list_stack_resources(
    inp: &[u8],
    mut builder: crate::output::list_stack_resources_output::Builder,
) -> Result<crate::output::list_stack_resources_output::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ListStackResourcesResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ListStackResourcesResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("ListStackResourcesResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected ListStackResourcesResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("StackResourceSummaries") /* StackResourceSummaries com.amazonaws.cloudformation#ListStackResourcesOutput$StackResourceSummaries */ =>  {
                let var_108 =
                    Some(
                        crate::xml_deser::deser_list_stack_resource_summaries(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_stack_resource_summaries(var_108);
            }
            ,
            s if s.matches("NextToken") /* NextToken com.amazonaws.cloudformation#ListStackResourcesOutput$NextToken */ =>  {
                let var_109 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_109);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected ListStackResourcesResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_list_stacks(
    inp: &[u8],
    mut builder: crate::output::list_stacks_output::Builder,
) -> Result<crate::output::list_stacks_output::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ListStacksResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ListStacksResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("ListStacksResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected ListStacksResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("StackSummaries") /* StackSummaries com.amazonaws.cloudformation#ListStacksOutput$StackSummaries */ =>  {
                let var_110 =
                    Some(
                        crate::xml_deser::deser_list_stack_summaries(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_stack_summaries(var_110);
            }
            ,
            s if s.matches("NextToken") /* NextToken com.amazonaws.cloudformation#ListStacksOutput$NextToken */ =>  {
                let var_111 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_111);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected ListStacksResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_list_stack_set_operation_results(
    inp: &[u8],
    mut builder: crate::output::list_stack_set_operation_results_output::Builder,
) -> Result<
    crate::output::list_stack_set_operation_results_output::Builder,
    smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ListStackSetOperationResultsResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ListStackSetOperationResultsResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("ListStackSetOperationResultsResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected ListStackSetOperationResultsResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("Summaries") /* Summaries com.amazonaws.cloudformation#ListStackSetOperationResultsOutput$Summaries */ =>  {
                let var_112 =
                    Some(
                        crate::xml_deser::deser_list_stack_set_operation_result_summaries(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_summaries(var_112);
            }
            ,
            s if s.matches("NextToken") /* NextToken com.amazonaws.cloudformation#ListStackSetOperationResultsOutput$NextToken */ =>  {
                let var_113 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_113);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected ListStackSetOperationResultsResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_list_stack_set_operations(
    inp: &[u8],
    mut builder: crate::output::list_stack_set_operations_output::Builder,
) -> Result<crate::output::list_stack_set_operations_output::Builder, smithy_xml::decode::XmlError>
{
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ListStackSetOperationsResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ListStackSetOperationsResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("ListStackSetOperationsResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected ListStackSetOperationsResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("Summaries") /* Summaries com.amazonaws.cloudformation#ListStackSetOperationsOutput$Summaries */ =>  {
                let var_114 =
                    Some(
                        crate::xml_deser::deser_list_stack_set_operation_summaries(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_summaries(var_114);
            }
            ,
            s if s.matches("NextToken") /* NextToken com.amazonaws.cloudformation#ListStackSetOperationsOutput$NextToken */ =>  {
                let var_115 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_115);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected ListStackSetOperationsResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_list_stack_sets(
    inp: &[u8],
    mut builder: crate::output::list_stack_sets_output::Builder,
) -> Result<crate::output::list_stack_sets_output::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ListStackSetsResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ListStackSetsResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("ListStackSetsResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected ListStackSetsResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("Summaries") /* Summaries com.amazonaws.cloudformation#ListStackSetsOutput$Summaries */ =>  {
                let var_116 =
                    Some(
                        crate::xml_deser::deser_list_stack_set_summaries(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_summaries(var_116);
            }
            ,
            s if s.matches("NextToken") /* NextToken com.amazonaws.cloudformation#ListStackSetsOutput$NextToken */ =>  {
                let var_117 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_117);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected ListStackSetsResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_list_type_registrations(
    inp: &[u8],
    mut builder: crate::output::list_type_registrations_output::Builder,
) -> Result<crate::output::list_type_registrations_output::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ListTypeRegistrationsResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ListTypeRegistrationsResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("ListTypeRegistrationsResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected ListTypeRegistrationsResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("RegistrationTokenList") /* RegistrationTokenList com.amazonaws.cloudformation#ListTypeRegistrationsOutput$RegistrationTokenList */ =>  {
                let var_118 =
                    Some(
                        crate::xml_deser::deser_list_registration_token_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_registration_token_list(var_118);
            }
            ,
            s if s.matches("NextToken") /* NextToken com.amazonaws.cloudformation#ListTypeRegistrationsOutput$NextToken */ =>  {
                let var_119 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_119);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected ListTypeRegistrationsResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_list_types(
    inp: &[u8],
    mut builder: crate::output::list_types_output::Builder,
) -> Result<crate::output::list_types_output::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ListTypesResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ListTypesResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("ListTypesResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected ListTypesResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("TypeSummaries") /* TypeSummaries com.amazonaws.cloudformation#ListTypesOutput$TypeSummaries */ =>  {
                let var_120 =
                    Some(
                        crate::xml_deser::deser_list_type_summaries(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_type_summaries(var_120);
            }
            ,
            s if s.matches("NextToken") /* NextToken com.amazonaws.cloudformation#ListTypesOutput$NextToken */ =>  {
                let var_121 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_121);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected ListTypesResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_list_type_versions(
    inp: &[u8],
    mut builder: crate::output::list_type_versions_output::Builder,
) -> Result<crate::output::list_type_versions_output::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ListTypeVersionsResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ListTypeVersionsResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("ListTypeVersionsResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected ListTypeVersionsResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("TypeVersionSummaries") /* TypeVersionSummaries com.amazonaws.cloudformation#ListTypeVersionsOutput$TypeVersionSummaries */ =>  {
                let var_122 =
                    Some(
                        crate::xml_deser::deser_list_type_version_summaries(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_type_version_summaries(var_122);
            }
            ,
            s if s.matches("NextToken") /* NextToken com.amazonaws.cloudformation#ListTypeVersionsOutput$NextToken */ =>  {
                let var_123 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_123);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected ListTypeVersionsResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_invalid_state_transition_error_xml_err(
    inp: &[u8],
    mut builder: crate::error::invalid_state_transition_error::Builder,
) -> Result<crate::error::invalid_state_transition_error::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Message") /* Message com.amazonaws.cloudformation#InvalidStateTransitionException$Message */ =>  {
                let var_124 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_124);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_operation_status_check_failed_error_xml_err(
    inp: &[u8],
    mut builder: crate::error::operation_status_check_failed_error::Builder,
) -> Result<crate::error::operation_status_check_failed_error::Builder, smithy_xml::decode::XmlError>
{
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Message") /* Message com.amazonaws.cloudformation#OperationStatusCheckFailedException$Message */ =>  {
                let var_125 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_125);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_register_type(
    inp: &[u8],
    mut builder: crate::output::register_type_output::Builder,
) -> Result<crate::output::register_type_output::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("RegisterTypeResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected RegisterTypeResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("RegisterTypeResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected RegisterTypeResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("RegistrationToken") /* RegistrationToken com.amazonaws.cloudformation#RegisterTypeOutput$RegistrationToken */ =>  {
                let var_126 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_registration_token(var_126);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected RegisterTypeResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_update_stack(
    inp: &[u8],
    mut builder: crate::output::update_stack_output::Builder,
) -> Result<crate::output::update_stack_output::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("UpdateStackResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected UpdateStackResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("UpdateStackResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected UpdateStackResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("StackId") /* StackId com.amazonaws.cloudformation#UpdateStackOutput$StackId */ =>  {
                let var_127 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_stack_id(var_127);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected UpdateStackResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_update_stack_instances(
    inp: &[u8],
    mut builder: crate::output::update_stack_instances_output::Builder,
) -> Result<crate::output::update_stack_instances_output::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("UpdateStackInstancesResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected UpdateStackInstancesResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("UpdateStackInstancesResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected UpdateStackInstancesResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("OperationId") /* OperationId com.amazonaws.cloudformation#UpdateStackInstancesOutput$OperationId */ =>  {
                let var_128 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_operation_id(var_128);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected UpdateStackInstancesResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_update_stack_set(
    inp: &[u8],
    mut builder: crate::output::update_stack_set_output::Builder,
) -> Result<crate::output::update_stack_set_output::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("UpdateStackSetResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected UpdateStackSetResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("UpdateStackSetResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected UpdateStackSetResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("OperationId") /* OperationId com.amazonaws.cloudformation#UpdateStackSetOutput$OperationId */ =>  {
                let var_129 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_operation_id(var_129);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected UpdateStackSetResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_update_termination_protection(
    inp: &[u8],
    mut builder: crate::output::update_termination_protection_output::Builder,
) -> Result<
    crate::output::update_termination_protection_output::Builder,
    smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("UpdateTerminationProtectionResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected UpdateTerminationProtectionResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("UpdateTerminationProtectionResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected UpdateTerminationProtectionResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("StackId") /* StackId com.amazonaws.cloudformation#UpdateTerminationProtectionOutput$StackId */ =>  {
                let var_130 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_stack_id(var_130);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected UpdateTerminationProtectionResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_validate_template(
    inp: &[u8],
    mut builder: crate::output::validate_template_output::Builder,
) -> Result<crate::output::validate_template_output::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ValidateTemplateResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ValidateTemplateResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("ValidateTemplateResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected ValidateTemplateResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("Parameters") /* Parameters com.amazonaws.cloudformation#ValidateTemplateOutput$Parameters */ =>  {
                let var_131 =
                    Some(
                        crate::xml_deser::deser_list_template_parameters(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_parameters(var_131);
            }
            ,
            s if s.matches("Description") /* Description com.amazonaws.cloudformation#ValidateTemplateOutput$Description */ =>  {
                let var_132 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_description(var_132);
            }
            ,
            s if s.matches("Capabilities") /* Capabilities com.amazonaws.cloudformation#ValidateTemplateOutput$Capabilities */ =>  {
                let var_133 =
                    Some(
                        crate::xml_deser::deser_list_capabilities(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_capabilities(var_133);
            }
            ,
            s if s.matches("CapabilitiesReason") /* CapabilitiesReason com.amazonaws.cloudformation#ValidateTemplateOutput$CapabilitiesReason */ =>  {
                let var_134 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_capabilities_reason(var_134);
            }
            ,
            s if s.matches("DeclaredTransforms") /* DeclaredTransforms com.amazonaws.cloudformation#ValidateTemplateOutput$DeclaredTransforms */ =>  {
                let var_135 =
                    Some(
                        crate::xml_deser::deser_list_transforms_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_declared_transforms(var_135);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected ValidateTemplateResult tag",
        ));
    };
    Ok(builder)
}

pub fn deser_list_account_limit_list(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::AccountLimit>, smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("member") /* member com.amazonaws.cloudformation#AccountLimitList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_account_limit(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_parameters(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::Parameter>, smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("member") /* member com.amazonaws.cloudformation#Parameters$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_parameter(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_notification_ar_ns(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<std::string::String>, smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("member") /* member com.amazonaws.cloudformation#NotificationARNs$member */ =>  {
                out.push(
                    Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                        smithy_xml::decode::try_data(&mut tag)?.as_ref()
                        .into()
                    )
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_rollback_configuration(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::RollbackConfiguration, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::RollbackConfiguration::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("RollbackTriggers") /* RollbackTriggers com.amazonaws.cloudformation#RollbackConfiguration$RollbackTriggers */ =>  {
                let var_136 =
                    Some(
                        crate::xml_deser::deser_list_rollback_triggers(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_rollback_triggers(var_136);
            }
            ,
            s if s.matches("MonitoringTimeInMinutes") /* MonitoringTimeInMinutes com.amazonaws.cloudformation#RollbackConfiguration$MonitoringTimeInMinutes */ =>  {
                let var_137 =
                    Some(
                         {
                            use std::str::FromStr;
                            i32::from_str(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.cloudformation#MonitoringTimeInMinutes`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_monitoring_time_in_minutes(var_137);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_capabilities(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::Capability>, smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("member") /* member com.amazonaws.cloudformation#Capabilities$member */ =>  {
                out.push(
                    Result::<crate::model::Capability, smithy_xml::decode::XmlError>::Ok(
                        crate::model::Capability::from(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                        )
                    )
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_tags(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::Tag>, smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("member") /* member com.amazonaws.cloudformation#Tags$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_tag(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_changes(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::Change>, smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("member") /* member com.amazonaws.cloudformation#Changes$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_change(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_stack_events(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::StackEvent>, smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("member") /* member com.amazonaws.cloudformation#StackEvents$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_stack_event(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_stack_instance(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::StackInstance, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::StackInstance::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("StackSetId") /* StackSetId com.amazonaws.cloudformation#StackInstance$StackSetId */ =>  {
                let var_138 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_stack_set_id(var_138);
            }
            ,
            s if s.matches("Region") /* Region com.amazonaws.cloudformation#StackInstance$Region */ =>  {
                let var_139 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_region(var_139);
            }
            ,
            s if s.matches("Account") /* Account com.amazonaws.cloudformation#StackInstance$Account */ =>  {
                let var_140 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_account(var_140);
            }
            ,
            s if s.matches("StackId") /* StackId com.amazonaws.cloudformation#StackInstance$StackId */ =>  {
                let var_141 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_stack_id(var_141);
            }
            ,
            s if s.matches("ParameterOverrides") /* ParameterOverrides com.amazonaws.cloudformation#StackInstance$ParameterOverrides */ =>  {
                let var_142 =
                    Some(
                        crate::xml_deser::deser_list_parameters(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_parameter_overrides(var_142);
            }
            ,
            s if s.matches("Status") /* Status com.amazonaws.cloudformation#StackInstance$Status */ =>  {
                let var_143 =
                    Some(
                        Result::<crate::model::StackInstanceStatus, smithy_xml::decode::XmlError>::Ok(
                            crate::model::StackInstanceStatus::from(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_status(var_143);
            }
            ,
            s if s.matches("StackInstanceStatus") /* StackInstanceStatus com.amazonaws.cloudformation#StackInstance$StackInstanceStatus */ =>  {
                let var_144 =
                    Some(
                        crate::xml_deser::deser_structure_stack_instance_comprehensive_status(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_stack_instance_status(var_144);
            }
            ,
            s if s.matches("StatusReason") /* StatusReason com.amazonaws.cloudformation#StackInstance$StatusReason */ =>  {
                let var_145 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_status_reason(var_145);
            }
            ,
            s if s.matches("OrganizationalUnitId") /* OrganizationalUnitId com.amazonaws.cloudformation#StackInstance$OrganizationalUnitId */ =>  {
                let var_146 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_organizational_unit_id(var_146);
            }
            ,
            s if s.matches("DriftStatus") /* DriftStatus com.amazonaws.cloudformation#StackInstance$DriftStatus */ =>  {
                let var_147 =
                    Some(
                        Result::<crate::model::StackDriftStatus, smithy_xml::decode::XmlError>::Ok(
                            crate::model::StackDriftStatus::from(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_drift_status(var_147);
            }
            ,
            s if s.matches("LastDriftCheckTimestamp") /* LastDriftCheckTimestamp com.amazonaws.cloudformation#StackInstance$LastDriftCheckTimestamp */ =>  {
                let var_148 =
                    Some(
                        smithy_types::Instant::from_str(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , smithy_types::instant::Format::DateTime
                        )
                        .map_err(|_|smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.cloudformation#Timestamp`)"))
                        ?
                    )
                ;
                builder = builder.set_last_drift_check_timestamp(var_148);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_stack_resource_detail(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::StackResourceDetail, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::StackResourceDetail::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("StackName") /* StackName com.amazonaws.cloudformation#StackResourceDetail$StackName */ =>  {
                let var_149 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_stack_name(var_149);
            }
            ,
            s if s.matches("StackId") /* StackId com.amazonaws.cloudformation#StackResourceDetail$StackId */ =>  {
                let var_150 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_stack_id(var_150);
            }
            ,
            s if s.matches("LogicalResourceId") /* LogicalResourceId com.amazonaws.cloudformation#StackResourceDetail$LogicalResourceId */ =>  {
                let var_151 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_logical_resource_id(var_151);
            }
            ,
            s if s.matches("PhysicalResourceId") /* PhysicalResourceId com.amazonaws.cloudformation#StackResourceDetail$PhysicalResourceId */ =>  {
                let var_152 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_physical_resource_id(var_152);
            }
            ,
            s if s.matches("ResourceType") /* ResourceType com.amazonaws.cloudformation#StackResourceDetail$ResourceType */ =>  {
                let var_153 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_type(var_153);
            }
            ,
            s if s.matches("LastUpdatedTimestamp") /* LastUpdatedTimestamp com.amazonaws.cloudformation#StackResourceDetail$LastUpdatedTimestamp */ =>  {
                let var_154 =
                    Some(
                        smithy_types::Instant::from_str(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , smithy_types::instant::Format::DateTime
                        )
                        .map_err(|_|smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.cloudformation#Timestamp`)"))
                        ?
                    )
                ;
                builder = builder.set_last_updated_timestamp(var_154);
            }
            ,
            s if s.matches("ResourceStatus") /* ResourceStatus com.amazonaws.cloudformation#StackResourceDetail$ResourceStatus */ =>  {
                let var_155 =
                    Some(
                        Result::<crate::model::ResourceStatus, smithy_xml::decode::XmlError>::Ok(
                            crate::model::ResourceStatus::from(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_status(var_155);
            }
            ,
            s if s.matches("ResourceStatusReason") /* ResourceStatusReason com.amazonaws.cloudformation#StackResourceDetail$ResourceStatusReason */ =>  {
                let var_156 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_status_reason(var_156);
            }
            ,
            s if s.matches("Description") /* Description com.amazonaws.cloudformation#StackResourceDetail$Description */ =>  {
                let var_157 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_description(var_157);
            }
            ,
            s if s.matches("Metadata") /* Metadata com.amazonaws.cloudformation#StackResourceDetail$Metadata */ =>  {
                let var_158 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_metadata(var_158);
            }
            ,
            s if s.matches("DriftInformation") /* DriftInformation com.amazonaws.cloudformation#StackResourceDetail$DriftInformation */ =>  {
                let var_159 =
                    Some(
                        crate::xml_deser::deser_structure_stack_resource_drift_information(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_drift_information(var_159);
            }
            ,
            s if s.matches("ModuleInfo") /* ModuleInfo com.amazonaws.cloudformation#StackResourceDetail$ModuleInfo */ =>  {
                let var_160 =
                    Some(
                        crate::xml_deser::deser_structure_module_info(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_module_info(var_160);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_stack_resource_drifts(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::StackResourceDrift>, smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("member") /* member com.amazonaws.cloudformation#StackResourceDrifts$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_stack_resource_drift(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_stack_resources(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::StackResource>, smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("member") /* member com.amazonaws.cloudformation#StackResources$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_stack_resource(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_stacks(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::Stack>, smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("member") /* member com.amazonaws.cloudformation#Stacks$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_stack(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_stack_set(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::StackSet, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::StackSet::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("StackSetName") /* StackSetName com.amazonaws.cloudformation#StackSet$StackSetName */ =>  {
                let var_161 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_stack_set_name(var_161);
            }
            ,
            s if s.matches("StackSetId") /* StackSetId com.amazonaws.cloudformation#StackSet$StackSetId */ =>  {
                let var_162 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_stack_set_id(var_162);
            }
            ,
            s if s.matches("Description") /* Description com.amazonaws.cloudformation#StackSet$Description */ =>  {
                let var_163 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_description(var_163);
            }
            ,
            s if s.matches("Status") /* Status com.amazonaws.cloudformation#StackSet$Status */ =>  {
                let var_164 =
                    Some(
                        Result::<crate::model::StackSetStatus, smithy_xml::decode::XmlError>::Ok(
                            crate::model::StackSetStatus::from(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_status(var_164);
            }
            ,
            s if s.matches("TemplateBody") /* TemplateBody com.amazonaws.cloudformation#StackSet$TemplateBody */ =>  {
                let var_165 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_template_body(var_165);
            }
            ,
            s if s.matches("Parameters") /* Parameters com.amazonaws.cloudformation#StackSet$Parameters */ =>  {
                let var_166 =
                    Some(
                        crate::xml_deser::deser_list_parameters(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_parameters(var_166);
            }
            ,
            s if s.matches("Capabilities") /* Capabilities com.amazonaws.cloudformation#StackSet$Capabilities */ =>  {
                let var_167 =
                    Some(
                        crate::xml_deser::deser_list_capabilities(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_capabilities(var_167);
            }
            ,
            s if s.matches("Tags") /* Tags com.amazonaws.cloudformation#StackSet$Tags */ =>  {
                let var_168 =
                    Some(
                        crate::xml_deser::deser_list_tags(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_168);
            }
            ,
            s if s.matches("StackSetARN") /* StackSetARN com.amazonaws.cloudformation#StackSet$StackSetARN */ =>  {
                let var_169 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_stack_set_arn(var_169);
            }
            ,
            s if s.matches("AdministrationRoleARN") /* AdministrationRoleARN com.amazonaws.cloudformation#StackSet$AdministrationRoleARN */ =>  {
                let var_170 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_administration_role_arn(var_170);
            }
            ,
            s if s.matches("ExecutionRoleName") /* ExecutionRoleName com.amazonaws.cloudformation#StackSet$ExecutionRoleName */ =>  {
                let var_171 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_execution_role_name(var_171);
            }
            ,
            s if s.matches("StackSetDriftDetectionDetails") /* StackSetDriftDetectionDetails com.amazonaws.cloudformation#StackSet$StackSetDriftDetectionDetails */ =>  {
                let var_172 =
                    Some(
                        crate::xml_deser::deser_structure_stack_set_drift_detection_details(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_stack_set_drift_detection_details(var_172);
            }
            ,
            s if s.matches("AutoDeployment") /* AutoDeployment com.amazonaws.cloudformation#StackSet$AutoDeployment */ =>  {
                let var_173 =
                    Some(
                        crate::xml_deser::deser_structure_auto_deployment(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_auto_deployment(var_173);
            }
            ,
            s if s.matches("PermissionModel") /* PermissionModel com.amazonaws.cloudformation#StackSet$PermissionModel */ =>  {
                let var_174 =
                    Some(
                        Result::<crate::model::PermissionModels, smithy_xml::decode::XmlError>::Ok(
                            crate::model::PermissionModels::from(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_permission_model(var_174);
            }
            ,
            s if s.matches("OrganizationalUnitIds") /* OrganizationalUnitIds com.amazonaws.cloudformation#StackSet$OrganizationalUnitIds */ =>  {
                let var_175 =
                    Some(
                        crate::xml_deser::deser_list_organizational_unit_id_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_organizational_unit_ids(var_175);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_stack_set_operation(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::StackSetOperation, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::StackSetOperation::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("OperationId") /* OperationId com.amazonaws.cloudformation#StackSetOperation$OperationId */ =>  {
                let var_176 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_operation_id(var_176);
            }
            ,
            s if s.matches("StackSetId") /* StackSetId com.amazonaws.cloudformation#StackSetOperation$StackSetId */ =>  {
                let var_177 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_stack_set_id(var_177);
            }
            ,
            s if s.matches("Action") /* Action com.amazonaws.cloudformation#StackSetOperation$Action */ =>  {
                let var_178 =
                    Some(
                        Result::<crate::model::StackSetOperationAction, smithy_xml::decode::XmlError>::Ok(
                            crate::model::StackSetOperationAction::from(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_action(var_178);
            }
            ,
            s if s.matches("Status") /* Status com.amazonaws.cloudformation#StackSetOperation$Status */ =>  {
                let var_179 =
                    Some(
                        Result::<crate::model::StackSetOperationStatus, smithy_xml::decode::XmlError>::Ok(
                            crate::model::StackSetOperationStatus::from(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_status(var_179);
            }
            ,
            s if s.matches("OperationPreferences") /* OperationPreferences com.amazonaws.cloudformation#StackSetOperation$OperationPreferences */ =>  {
                let var_180 =
                    Some(
                        crate::xml_deser::deser_structure_stack_set_operation_preferences(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_operation_preferences(var_180);
            }
            ,
            s if s.matches("RetainStacks") /* RetainStacks com.amazonaws.cloudformation#StackSetOperation$RetainStacks */ =>  {
                let var_181 =
                    Some(
                         {
                            use std::str::FromStr;
                            bool::from_str(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.cloudformation#RetainStacksNullable`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_retain_stacks(var_181);
            }
            ,
            s if s.matches("AdministrationRoleARN") /* AdministrationRoleARN com.amazonaws.cloudformation#StackSetOperation$AdministrationRoleARN */ =>  {
                let var_182 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_administration_role_arn(var_182);
            }
            ,
            s if s.matches("ExecutionRoleName") /* ExecutionRoleName com.amazonaws.cloudformation#StackSetOperation$ExecutionRoleName */ =>  {
                let var_183 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_execution_role_name(var_183);
            }
            ,
            s if s.matches("CreationTimestamp") /* CreationTimestamp com.amazonaws.cloudformation#StackSetOperation$CreationTimestamp */ =>  {
                let var_184 =
                    Some(
                        smithy_types::Instant::from_str(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , smithy_types::instant::Format::DateTime
                        )
                        .map_err(|_|smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.cloudformation#Timestamp`)"))
                        ?
                    )
                ;
                builder = builder.set_creation_timestamp(var_184);
            }
            ,
            s if s.matches("EndTimestamp") /* EndTimestamp com.amazonaws.cloudformation#StackSetOperation$EndTimestamp */ =>  {
                let var_185 =
                    Some(
                        smithy_types::Instant::from_str(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , smithy_types::instant::Format::DateTime
                        )
                        .map_err(|_|smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.cloudformation#Timestamp`)"))
                        ?
                    )
                ;
                builder = builder.set_end_timestamp(var_185);
            }
            ,
            s if s.matches("DeploymentTargets") /* DeploymentTargets com.amazonaws.cloudformation#StackSetOperation$DeploymentTargets */ =>  {
                let var_186 =
                    Some(
                        crate::xml_deser::deser_structure_deployment_targets(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_deployment_targets(var_186);
            }
            ,
            s if s.matches("StackSetDriftDetectionDetails") /* StackSetDriftDetectionDetails com.amazonaws.cloudformation#StackSetOperation$StackSetDriftDetectionDetails */ =>  {
                let var_187 =
                    Some(
                        crate::xml_deser::deser_structure_stack_set_drift_detection_details(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_stack_set_drift_detection_details(var_187);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_logging_config(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::LoggingConfig, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::LoggingConfig::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("LogRoleArn") /* LogRoleArn com.amazonaws.cloudformation#LoggingConfig$LogRoleArn */ =>  {
                let var_188 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_log_role_arn(var_188);
            }
            ,
            s if s.matches("LogGroupName") /* LogGroupName com.amazonaws.cloudformation#LoggingConfig$LogGroupName */ =>  {
                let var_189 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_log_group_name(var_189);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_stack_resource_drift(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::StackResourceDrift, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::StackResourceDrift::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("StackId") /* StackId com.amazonaws.cloudformation#StackResourceDrift$StackId */ =>  {
                let var_190 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_stack_id(var_190);
            }
            ,
            s if s.matches("LogicalResourceId") /* LogicalResourceId com.amazonaws.cloudformation#StackResourceDrift$LogicalResourceId */ =>  {
                let var_191 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_logical_resource_id(var_191);
            }
            ,
            s if s.matches("PhysicalResourceId") /* PhysicalResourceId com.amazonaws.cloudformation#StackResourceDrift$PhysicalResourceId */ =>  {
                let var_192 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_physical_resource_id(var_192);
            }
            ,
            s if s.matches("PhysicalResourceIdContext") /* PhysicalResourceIdContext com.amazonaws.cloudformation#StackResourceDrift$PhysicalResourceIdContext */ =>  {
                let var_193 =
                    Some(
                        crate::xml_deser::deser_list_physical_resource_id_context(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_physical_resource_id_context(var_193);
            }
            ,
            s if s.matches("ResourceType") /* ResourceType com.amazonaws.cloudformation#StackResourceDrift$ResourceType */ =>  {
                let var_194 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_type(var_194);
            }
            ,
            s if s.matches("ExpectedProperties") /* ExpectedProperties com.amazonaws.cloudformation#StackResourceDrift$ExpectedProperties */ =>  {
                let var_195 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_expected_properties(var_195);
            }
            ,
            s if s.matches("ActualProperties") /* ActualProperties com.amazonaws.cloudformation#StackResourceDrift$ActualProperties */ =>  {
                let var_196 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_actual_properties(var_196);
            }
            ,
            s if s.matches("PropertyDifferences") /* PropertyDifferences com.amazonaws.cloudformation#StackResourceDrift$PropertyDifferences */ =>  {
                let var_197 =
                    Some(
                        crate::xml_deser::deser_list_property_differences(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_property_differences(var_197);
            }
            ,
            s if s.matches("StackResourceDriftStatus") /* StackResourceDriftStatus com.amazonaws.cloudformation#StackResourceDrift$StackResourceDriftStatus */ =>  {
                let var_198 =
                    Some(
                        Result::<crate::model::StackResourceDriftStatus, smithy_xml::decode::XmlError>::Ok(
                            crate::model::StackResourceDriftStatus::from(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_stack_resource_drift_status(var_198);
            }
            ,
            s if s.matches("Timestamp") /* Timestamp com.amazonaws.cloudformation#StackResourceDrift$Timestamp */ =>  {
                let var_199 =
                    Some(
                        smithy_types::Instant::from_str(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , smithy_types::instant::Format::DateTime
                        )
                        .map_err(|_|smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.cloudformation#Timestamp`)"))
                        ?
                    )
                ;
                builder = builder.set_timestamp(var_199);
            }
            ,
            s if s.matches("ModuleInfo") /* ModuleInfo com.amazonaws.cloudformation#StackResourceDrift$ModuleInfo */ =>  {
                let var_200 =
                    Some(
                        crate::xml_deser::deser_structure_module_info(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_module_info(var_200);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_stage_list(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::TemplateStage>, smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("member") /* member com.amazonaws.cloudformation#StageList$member */ =>  {
                out.push(
                    Result::<crate::model::TemplateStage, smithy_xml::decode::XmlError>::Ok(
                        crate::model::TemplateStage::from(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                        )
                    )
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_parameter_declarations(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::ParameterDeclaration>, smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("member") /* member com.amazonaws.cloudformation#ParameterDeclarations$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_parameter_declaration(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_resource_types(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<std::string::String>, smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("member") /* member com.amazonaws.cloudformation#ResourceTypes$member */ =>  {
                out.push(
                    Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                        smithy_xml::decode::try_data(&mut tag)?.as_ref()
                        .into()
                    )
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_transforms_list(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<std::string::String>, smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("member") /* member com.amazonaws.cloudformation#TransformsList$member */ =>  {
                out.push(
                    Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                        smithy_xml::decode::try_data(&mut tag)?.as_ref()
                        .into()
                    )
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_resource_identifier_summaries(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::ResourceIdentifierSummary>, smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("member") /* member com.amazonaws.cloudformation#ResourceIdentifierSummaries$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_resource_identifier_summary(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_change_set_summaries(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::ChangeSetSummary>, smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("member") /* member com.amazonaws.cloudformation#ChangeSetSummaries$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_change_set_summary(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_exports(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::Export>, smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("member") /* member com.amazonaws.cloudformation#Exports$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_export(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_imports(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<std::string::String>, smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("member") /* member com.amazonaws.cloudformation#Imports$member */ =>  {
                out.push(
                    Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                        smithy_xml::decode::try_data(&mut tag)?.as_ref()
                        .into()
                    )
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_stack_instance_summaries(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::StackInstanceSummary>, smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("member") /* member com.amazonaws.cloudformation#StackInstanceSummaries$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_stack_instance_summary(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_stack_resource_summaries(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::StackResourceSummary>, smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("member") /* member com.amazonaws.cloudformation#StackResourceSummaries$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_stack_resource_summary(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_stack_summaries(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::StackSummary>, smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("member") /* member com.amazonaws.cloudformation#StackSummaries$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_stack_summary(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_stack_set_operation_result_summaries(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::StackSetOperationResultSummary>, smithy_xml::decode::XmlError>
{
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("member") /* member com.amazonaws.cloudformation#StackSetOperationResultSummaries$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_stack_set_operation_result_summary(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_stack_set_operation_summaries(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::StackSetOperationSummary>, smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("member") /* member com.amazonaws.cloudformation#StackSetOperationSummaries$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_stack_set_operation_summary(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_stack_set_summaries(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::StackSetSummary>, smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("member") /* member com.amazonaws.cloudformation#StackSetSummaries$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_stack_set_summary(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_registration_token_list(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<std::string::String>, smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("member") /* member com.amazonaws.cloudformation#RegistrationTokenList$member */ =>  {
                out.push(
                    Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                        smithy_xml::decode::try_data(&mut tag)?.as_ref()
                        .into()
                    )
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_type_summaries(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::TypeSummary>, smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("member") /* member com.amazonaws.cloudformation#TypeSummaries$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_type_summary(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_type_version_summaries(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::TypeVersionSummary>, smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("member") /* member com.amazonaws.cloudformation#TypeVersionSummaries$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_type_version_summary(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_template_parameters(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::TemplateParameter>, smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("member") /* member com.amazonaws.cloudformation#TemplateParameters$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_template_parameter(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_account_limit(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::AccountLimit, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::AccountLimit::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Name") /* Name com.amazonaws.cloudformation#AccountLimit$Name */ =>  {
                let var_201 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_name(var_201);
            }
            ,
            s if s.matches("Value") /* Value com.amazonaws.cloudformation#AccountLimit$Value */ =>  {
                let var_202 =
                    Some(
                         {
                            use std::str::FromStr;
                            i32::from_str(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.cloudformation#LimitValue`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_value(var_202);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_parameter(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::Parameter, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::Parameter::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ParameterKey") /* ParameterKey com.amazonaws.cloudformation#Parameter$ParameterKey */ =>  {
                let var_203 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_parameter_key(var_203);
            }
            ,
            s if s.matches("ParameterValue") /* ParameterValue com.amazonaws.cloudformation#Parameter$ParameterValue */ =>  {
                let var_204 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_parameter_value(var_204);
            }
            ,
            s if s.matches("UsePreviousValue") /* UsePreviousValue com.amazonaws.cloudformation#Parameter$UsePreviousValue */ =>  {
                let var_205 =
                    Some(
                         {
                            use std::str::FromStr;
                            bool::from_str(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.cloudformation#UsePreviousValue`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_use_previous_value(var_205);
            }
            ,
            s if s.matches("ResolvedValue") /* ResolvedValue com.amazonaws.cloudformation#Parameter$ResolvedValue */ =>  {
                let var_206 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_resolved_value(var_206);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_rollback_triggers(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::RollbackTrigger>, smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("member") /* member com.amazonaws.cloudformation#RollbackTriggers$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_rollback_trigger(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_tag(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::Tag, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::Tag::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Key") /* Key com.amazonaws.cloudformation#Tag$Key */ =>  {
                let var_207 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_key(var_207);
            }
            ,
            s if s.matches("Value") /* Value com.amazonaws.cloudformation#Tag$Value */ =>  {
                let var_208 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_value(var_208);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_change(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::Change, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::Change::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Type") /* Type com.amazonaws.cloudformation#Change$Type */ =>  {
                let var_209 =
                    Some(
                        Result::<crate::model::ChangeType, smithy_xml::decode::XmlError>::Ok(
                            crate::model::ChangeType::from(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_type(var_209);
            }
            ,
            s if s.matches("ResourceChange") /* ResourceChange com.amazonaws.cloudformation#Change$ResourceChange */ =>  {
                let var_210 =
                    Some(
                        crate::xml_deser::deser_structure_resource_change(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_resource_change(var_210);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_stack_event(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::StackEvent, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::StackEvent::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("StackId") /* StackId com.amazonaws.cloudformation#StackEvent$StackId */ =>  {
                let var_211 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_stack_id(var_211);
            }
            ,
            s if s.matches("EventId") /* EventId com.amazonaws.cloudformation#StackEvent$EventId */ =>  {
                let var_212 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_event_id(var_212);
            }
            ,
            s if s.matches("StackName") /* StackName com.amazonaws.cloudformation#StackEvent$StackName */ =>  {
                let var_213 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_stack_name(var_213);
            }
            ,
            s if s.matches("LogicalResourceId") /* LogicalResourceId com.amazonaws.cloudformation#StackEvent$LogicalResourceId */ =>  {
                let var_214 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_logical_resource_id(var_214);
            }
            ,
            s if s.matches("PhysicalResourceId") /* PhysicalResourceId com.amazonaws.cloudformation#StackEvent$PhysicalResourceId */ =>  {
                let var_215 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_physical_resource_id(var_215);
            }
            ,
            s if s.matches("ResourceType") /* ResourceType com.amazonaws.cloudformation#StackEvent$ResourceType */ =>  {
                let var_216 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_type(var_216);
            }
            ,
            s if s.matches("Timestamp") /* Timestamp com.amazonaws.cloudformation#StackEvent$Timestamp */ =>  {
                let var_217 =
                    Some(
                        smithy_types::Instant::from_str(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , smithy_types::instant::Format::DateTime
                        )
                        .map_err(|_|smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.cloudformation#Timestamp`)"))
                        ?
                    )
                ;
                builder = builder.set_timestamp(var_217);
            }
            ,
            s if s.matches("ResourceStatus") /* ResourceStatus com.amazonaws.cloudformation#StackEvent$ResourceStatus */ =>  {
                let var_218 =
                    Some(
                        Result::<crate::model::ResourceStatus, smithy_xml::decode::XmlError>::Ok(
                            crate::model::ResourceStatus::from(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_status(var_218);
            }
            ,
            s if s.matches("ResourceStatusReason") /* ResourceStatusReason com.amazonaws.cloudformation#StackEvent$ResourceStatusReason */ =>  {
                let var_219 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_status_reason(var_219);
            }
            ,
            s if s.matches("ResourceProperties") /* ResourceProperties com.amazonaws.cloudformation#StackEvent$ResourceProperties */ =>  {
                let var_220 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_properties(var_220);
            }
            ,
            s if s.matches("ClientRequestToken") /* ClientRequestToken com.amazonaws.cloudformation#StackEvent$ClientRequestToken */ =>  {
                let var_221 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_client_request_token(var_221);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_stack_instance_comprehensive_status(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::StackInstanceComprehensiveStatus, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::StackInstanceComprehensiveStatus::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("DetailedStatus") /* DetailedStatus com.amazonaws.cloudformation#StackInstanceComprehensiveStatus$DetailedStatus */ =>  {
                let var_222 =
                    Some(
                        Result::<crate::model::StackInstanceDetailedStatus, smithy_xml::decode::XmlError>::Ok(
                            crate::model::StackInstanceDetailedStatus::from(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_detailed_status(var_222);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_stack_resource_drift_information(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::StackResourceDriftInformation, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::StackResourceDriftInformation::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("StackResourceDriftStatus") /* StackResourceDriftStatus com.amazonaws.cloudformation#StackResourceDriftInformation$StackResourceDriftStatus */ =>  {
                let var_223 =
                    Some(
                        Result::<crate::model::StackResourceDriftStatus, smithy_xml::decode::XmlError>::Ok(
                            crate::model::StackResourceDriftStatus::from(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_stack_resource_drift_status(var_223);
            }
            ,
            s if s.matches("LastCheckTimestamp") /* LastCheckTimestamp com.amazonaws.cloudformation#StackResourceDriftInformation$LastCheckTimestamp */ =>  {
                let var_224 =
                    Some(
                        smithy_types::Instant::from_str(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , smithy_types::instant::Format::DateTime
                        )
                        .map_err(|_|smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.cloudformation#Timestamp`)"))
                        ?
                    )
                ;
                builder = builder.set_last_check_timestamp(var_224);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_module_info(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::ModuleInfo, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::ModuleInfo::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("TypeHierarchy") /* TypeHierarchy com.amazonaws.cloudformation#ModuleInfo$TypeHierarchy */ =>  {
                let var_225 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_type_hierarchy(var_225);
            }
            ,
            s if s.matches("LogicalIdHierarchy") /* LogicalIdHierarchy com.amazonaws.cloudformation#ModuleInfo$LogicalIdHierarchy */ =>  {
                let var_226 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_logical_id_hierarchy(var_226);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_stack_resource(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::StackResource, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::StackResource::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("StackName") /* StackName com.amazonaws.cloudformation#StackResource$StackName */ =>  {
                let var_227 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_stack_name(var_227);
            }
            ,
            s if s.matches("StackId") /* StackId com.amazonaws.cloudformation#StackResource$StackId */ =>  {
                let var_228 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_stack_id(var_228);
            }
            ,
            s if s.matches("LogicalResourceId") /* LogicalResourceId com.amazonaws.cloudformation#StackResource$LogicalResourceId */ =>  {
                let var_229 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_logical_resource_id(var_229);
            }
            ,
            s if s.matches("PhysicalResourceId") /* PhysicalResourceId com.amazonaws.cloudformation#StackResource$PhysicalResourceId */ =>  {
                let var_230 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_physical_resource_id(var_230);
            }
            ,
            s if s.matches("ResourceType") /* ResourceType com.amazonaws.cloudformation#StackResource$ResourceType */ =>  {
                let var_231 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_type(var_231);
            }
            ,
            s if s.matches("Timestamp") /* Timestamp com.amazonaws.cloudformation#StackResource$Timestamp */ =>  {
                let var_232 =
                    Some(
                        smithy_types::Instant::from_str(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , smithy_types::instant::Format::DateTime
                        )
                        .map_err(|_|smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.cloudformation#Timestamp`)"))
                        ?
                    )
                ;
                builder = builder.set_timestamp(var_232);
            }
            ,
            s if s.matches("ResourceStatus") /* ResourceStatus com.amazonaws.cloudformation#StackResource$ResourceStatus */ =>  {
                let var_233 =
                    Some(
                        Result::<crate::model::ResourceStatus, smithy_xml::decode::XmlError>::Ok(
                            crate::model::ResourceStatus::from(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_status(var_233);
            }
            ,
            s if s.matches("ResourceStatusReason") /* ResourceStatusReason com.amazonaws.cloudformation#StackResource$ResourceStatusReason */ =>  {
                let var_234 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_status_reason(var_234);
            }
            ,
            s if s.matches("Description") /* Description com.amazonaws.cloudformation#StackResource$Description */ =>  {
                let var_235 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_description(var_235);
            }
            ,
            s if s.matches("DriftInformation") /* DriftInformation com.amazonaws.cloudformation#StackResource$DriftInformation */ =>  {
                let var_236 =
                    Some(
                        crate::xml_deser::deser_structure_stack_resource_drift_information(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_drift_information(var_236);
            }
            ,
            s if s.matches("ModuleInfo") /* ModuleInfo com.amazonaws.cloudformation#StackResource$ModuleInfo */ =>  {
                let var_237 =
                    Some(
                        crate::xml_deser::deser_structure_module_info(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_module_info(var_237);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_stack(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::Stack, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::Stack::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("StackId") /* StackId com.amazonaws.cloudformation#Stack$StackId */ =>  {
                let var_238 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_stack_id(var_238);
            }
            ,
            s if s.matches("StackName") /* StackName com.amazonaws.cloudformation#Stack$StackName */ =>  {
                let var_239 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_stack_name(var_239);
            }
            ,
            s if s.matches("ChangeSetId") /* ChangeSetId com.amazonaws.cloudformation#Stack$ChangeSetId */ =>  {
                let var_240 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_change_set_id(var_240);
            }
            ,
            s if s.matches("Description") /* Description com.amazonaws.cloudformation#Stack$Description */ =>  {
                let var_241 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_description(var_241);
            }
            ,
            s if s.matches("Parameters") /* Parameters com.amazonaws.cloudformation#Stack$Parameters */ =>  {
                let var_242 =
                    Some(
                        crate::xml_deser::deser_list_parameters(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_parameters(var_242);
            }
            ,
            s if s.matches("CreationTime") /* CreationTime com.amazonaws.cloudformation#Stack$CreationTime */ =>  {
                let var_243 =
                    Some(
                        smithy_types::Instant::from_str(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , smithy_types::instant::Format::DateTime
                        )
                        .map_err(|_|smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.cloudformation#CreationTime`)"))
                        ?
                    )
                ;
                builder = builder.set_creation_time(var_243);
            }
            ,
            s if s.matches("DeletionTime") /* DeletionTime com.amazonaws.cloudformation#Stack$DeletionTime */ =>  {
                let var_244 =
                    Some(
                        smithy_types::Instant::from_str(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , smithy_types::instant::Format::DateTime
                        )
                        .map_err(|_|smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.cloudformation#DeletionTime`)"))
                        ?
                    )
                ;
                builder = builder.set_deletion_time(var_244);
            }
            ,
            s if s.matches("LastUpdatedTime") /* LastUpdatedTime com.amazonaws.cloudformation#Stack$LastUpdatedTime */ =>  {
                let var_245 =
                    Some(
                        smithy_types::Instant::from_str(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , smithy_types::instant::Format::DateTime
                        )
                        .map_err(|_|smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.cloudformation#LastUpdatedTime`)"))
                        ?
                    )
                ;
                builder = builder.set_last_updated_time(var_245);
            }
            ,
            s if s.matches("RollbackConfiguration") /* RollbackConfiguration com.amazonaws.cloudformation#Stack$RollbackConfiguration */ =>  {
                let var_246 =
                    Some(
                        crate::xml_deser::deser_structure_rollback_configuration(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_rollback_configuration(var_246);
            }
            ,
            s if s.matches("StackStatus") /* StackStatus com.amazonaws.cloudformation#Stack$StackStatus */ =>  {
                let var_247 =
                    Some(
                        Result::<crate::model::StackStatus, smithy_xml::decode::XmlError>::Ok(
                            crate::model::StackStatus::from(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_stack_status(var_247);
            }
            ,
            s if s.matches("StackStatusReason") /* StackStatusReason com.amazonaws.cloudformation#Stack$StackStatusReason */ =>  {
                let var_248 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_stack_status_reason(var_248);
            }
            ,
            s if s.matches("DisableRollback") /* DisableRollback com.amazonaws.cloudformation#Stack$DisableRollback */ =>  {
                let var_249 =
                    Some(
                         {
                            use std::str::FromStr;
                            bool::from_str(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.cloudformation#DisableRollback`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_disable_rollback(var_249);
            }
            ,
            s if s.matches("NotificationARNs") /* NotificationARNs com.amazonaws.cloudformation#Stack$NotificationARNs */ =>  {
                let var_250 =
                    Some(
                        crate::xml_deser::deser_list_notification_ar_ns(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_notification_ar_ns(var_250);
            }
            ,
            s if s.matches("TimeoutInMinutes") /* TimeoutInMinutes com.amazonaws.cloudformation#Stack$TimeoutInMinutes */ =>  {
                let var_251 =
                    Some(
                         {
                            use std::str::FromStr;
                            i32::from_str(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.cloudformation#TimeoutMinutes`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_timeout_in_minutes(var_251);
            }
            ,
            s if s.matches("Capabilities") /* Capabilities com.amazonaws.cloudformation#Stack$Capabilities */ =>  {
                let var_252 =
                    Some(
                        crate::xml_deser::deser_list_capabilities(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_capabilities(var_252);
            }
            ,
            s if s.matches("Outputs") /* Outputs com.amazonaws.cloudformation#Stack$Outputs */ =>  {
                let var_253 =
                    Some(
                        crate::xml_deser::deser_list_outputs(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_outputs(var_253);
            }
            ,
            s if s.matches("RoleARN") /* RoleARN com.amazonaws.cloudformation#Stack$RoleARN */ =>  {
                let var_254 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_role_arn(var_254);
            }
            ,
            s if s.matches("Tags") /* Tags com.amazonaws.cloudformation#Stack$Tags */ =>  {
                let var_255 =
                    Some(
                        crate::xml_deser::deser_list_tags(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_255);
            }
            ,
            s if s.matches("EnableTerminationProtection") /* EnableTerminationProtection com.amazonaws.cloudformation#Stack$EnableTerminationProtection */ =>  {
                let var_256 =
                    Some(
                         {
                            use std::str::FromStr;
                            bool::from_str(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.cloudformation#EnableTerminationProtection`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_enable_termination_protection(var_256);
            }
            ,
            s if s.matches("ParentId") /* ParentId com.amazonaws.cloudformation#Stack$ParentId */ =>  {
                let var_257 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_parent_id(var_257);
            }
            ,
            s if s.matches("RootId") /* RootId com.amazonaws.cloudformation#Stack$RootId */ =>  {
                let var_258 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_root_id(var_258);
            }
            ,
            s if s.matches("DriftInformation") /* DriftInformation com.amazonaws.cloudformation#Stack$DriftInformation */ =>  {
                let var_259 =
                    Some(
                        crate::xml_deser::deser_structure_stack_drift_information(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_drift_information(var_259);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_stack_set_drift_detection_details(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::StackSetDriftDetectionDetails, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::StackSetDriftDetectionDetails::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("DriftStatus") /* DriftStatus com.amazonaws.cloudformation#StackSetDriftDetectionDetails$DriftStatus */ =>  {
                let var_260 =
                    Some(
                        Result::<crate::model::StackSetDriftStatus, smithy_xml::decode::XmlError>::Ok(
                            crate::model::StackSetDriftStatus::from(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_drift_status(var_260);
            }
            ,
            s if s.matches("DriftDetectionStatus") /* DriftDetectionStatus com.amazonaws.cloudformation#StackSetDriftDetectionDetails$DriftDetectionStatus */ =>  {
                let var_261 =
                    Some(
                        Result::<crate::model::StackSetDriftDetectionStatus, smithy_xml::decode::XmlError>::Ok(
                            crate::model::StackSetDriftDetectionStatus::from(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_drift_detection_status(var_261);
            }
            ,
            s if s.matches("LastDriftCheckTimestamp") /* LastDriftCheckTimestamp com.amazonaws.cloudformation#StackSetDriftDetectionDetails$LastDriftCheckTimestamp */ =>  {
                let var_262 =
                    Some(
                        smithy_types::Instant::from_str(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , smithy_types::instant::Format::DateTime
                        )
                        .map_err(|_|smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.cloudformation#Timestamp`)"))
                        ?
                    )
                ;
                builder = builder.set_last_drift_check_timestamp(var_262);
            }
            ,
            s if s.matches("TotalStackInstancesCount") /* TotalStackInstancesCount com.amazonaws.cloudformation#StackSetDriftDetectionDetails$TotalStackInstancesCount */ =>  {
                let var_263 =
                    Some(
                         {
                            use std::str::FromStr;
                            i32::from_str(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.cloudformation#TotalStackInstancesCount`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_total_stack_instances_count(var_263);
            }
            ,
            s if s.matches("DriftedStackInstancesCount") /* DriftedStackInstancesCount com.amazonaws.cloudformation#StackSetDriftDetectionDetails$DriftedStackInstancesCount */ =>  {
                let var_264 =
                    Some(
                         {
                            use std::str::FromStr;
                            i32::from_str(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.cloudformation#DriftedStackInstancesCount`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_drifted_stack_instances_count(var_264);
            }
            ,
            s if s.matches("InSyncStackInstancesCount") /* InSyncStackInstancesCount com.amazonaws.cloudformation#StackSetDriftDetectionDetails$InSyncStackInstancesCount */ =>  {
                let var_265 =
                    Some(
                         {
                            use std::str::FromStr;
                            i32::from_str(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.cloudformation#InSyncStackInstancesCount`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_in_sync_stack_instances_count(var_265);
            }
            ,
            s if s.matches("InProgressStackInstancesCount") /* InProgressStackInstancesCount com.amazonaws.cloudformation#StackSetDriftDetectionDetails$InProgressStackInstancesCount */ =>  {
                let var_266 =
                    Some(
                         {
                            use std::str::FromStr;
                            i32::from_str(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.cloudformation#InProgressStackInstancesCount`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_in_progress_stack_instances_count(var_266);
            }
            ,
            s if s.matches("FailedStackInstancesCount") /* FailedStackInstancesCount com.amazonaws.cloudformation#StackSetDriftDetectionDetails$FailedStackInstancesCount */ =>  {
                let var_267 =
                    Some(
                         {
                            use std::str::FromStr;
                            i32::from_str(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.cloudformation#FailedStackInstancesCount`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_failed_stack_instances_count(var_267);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_auto_deployment(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::AutoDeployment, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::AutoDeployment::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Enabled") /* Enabled com.amazonaws.cloudformation#AutoDeployment$Enabled */ =>  {
                let var_268 =
                    Some(
                         {
                            use std::str::FromStr;
                            bool::from_str(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.cloudformation#AutoDeploymentNullable`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_enabled(var_268);
            }
            ,
            s if s.matches("RetainStacksOnAccountRemoval") /* RetainStacksOnAccountRemoval com.amazonaws.cloudformation#AutoDeployment$RetainStacksOnAccountRemoval */ =>  {
                let var_269 =
                    Some(
                         {
                            use std::str::FromStr;
                            bool::from_str(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.cloudformation#RetainStacksOnAccountRemovalNullable`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_retain_stacks_on_account_removal(var_269);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_organizational_unit_id_list(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<std::string::String>, smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("member") /* member com.amazonaws.cloudformation#OrganizationalUnitIdList$member */ =>  {
                out.push(
                    Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                        smithy_xml::decode::try_data(&mut tag)?.as_ref()
                        .into()
                    )
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_stack_set_operation_preferences(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::StackSetOperationPreferences, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::StackSetOperationPreferences::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("RegionConcurrencyType") /* RegionConcurrencyType com.amazonaws.cloudformation#StackSetOperationPreferences$RegionConcurrencyType */ =>  {
                let var_270 =
                    Some(
                        Result::<crate::model::RegionConcurrencyType, smithy_xml::decode::XmlError>::Ok(
                            crate::model::RegionConcurrencyType::from(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_region_concurrency_type(var_270);
            }
            ,
            s if s.matches("RegionOrder") /* RegionOrder com.amazonaws.cloudformation#StackSetOperationPreferences$RegionOrder */ =>  {
                let var_271 =
                    Some(
                        crate::xml_deser::deser_list_region_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_region_order(var_271);
            }
            ,
            s if s.matches("FailureToleranceCount") /* FailureToleranceCount com.amazonaws.cloudformation#StackSetOperationPreferences$FailureToleranceCount */ =>  {
                let var_272 =
                    Some(
                         {
                            use std::str::FromStr;
                            i32::from_str(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.cloudformation#FailureToleranceCount`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_failure_tolerance_count(var_272);
            }
            ,
            s if s.matches("FailureTolerancePercentage") /* FailureTolerancePercentage com.amazonaws.cloudformation#StackSetOperationPreferences$FailureTolerancePercentage */ =>  {
                let var_273 =
                    Some(
                         {
                            use std::str::FromStr;
                            i32::from_str(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.cloudformation#FailureTolerancePercentage`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_failure_tolerance_percentage(var_273);
            }
            ,
            s if s.matches("MaxConcurrentCount") /* MaxConcurrentCount com.amazonaws.cloudformation#StackSetOperationPreferences$MaxConcurrentCount */ =>  {
                let var_274 =
                    Some(
                         {
                            use std::str::FromStr;
                            i32::from_str(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.cloudformation#MaxConcurrentCount`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_max_concurrent_count(var_274);
            }
            ,
            s if s.matches("MaxConcurrentPercentage") /* MaxConcurrentPercentage com.amazonaws.cloudformation#StackSetOperationPreferences$MaxConcurrentPercentage */ =>  {
                let var_275 =
                    Some(
                         {
                            use std::str::FromStr;
                            i32::from_str(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.cloudformation#MaxConcurrentPercentage`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_max_concurrent_percentage(var_275);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_deployment_targets(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::DeploymentTargets, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::DeploymentTargets::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Accounts") /* Accounts com.amazonaws.cloudformation#DeploymentTargets$Accounts */ =>  {
                let var_276 =
                    Some(
                        crate::xml_deser::deser_list_account_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_accounts(var_276);
            }
            ,
            s if s.matches("AccountsUrl") /* AccountsUrl com.amazonaws.cloudformation#DeploymentTargets$AccountsUrl */ =>  {
                let var_277 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_accounts_url(var_277);
            }
            ,
            s if s.matches("OrganizationalUnitIds") /* OrganizationalUnitIds com.amazonaws.cloudformation#DeploymentTargets$OrganizationalUnitIds */ =>  {
                let var_278 =
                    Some(
                        crate::xml_deser::deser_list_organizational_unit_id_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_organizational_unit_ids(var_278);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_physical_resource_id_context(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<
    std::vec::Vec<crate::model::PhysicalResourceIdContextKeyValuePair>,
    smithy_xml::decode::XmlError,
> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("member") /* member com.amazonaws.cloudformation#PhysicalResourceIdContext$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_physical_resource_id_context_key_value_pair(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_property_differences(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::PropertyDifference>, smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("member") /* member com.amazonaws.cloudformation#PropertyDifferences$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_property_difference(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_parameter_declaration(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::ParameterDeclaration, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::ParameterDeclaration::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ParameterKey") /* ParameterKey com.amazonaws.cloudformation#ParameterDeclaration$ParameterKey */ =>  {
                let var_279 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_parameter_key(var_279);
            }
            ,
            s if s.matches("DefaultValue") /* DefaultValue com.amazonaws.cloudformation#ParameterDeclaration$DefaultValue */ =>  {
                let var_280 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_default_value(var_280);
            }
            ,
            s if s.matches("ParameterType") /* ParameterType com.amazonaws.cloudformation#ParameterDeclaration$ParameterType */ =>  {
                let var_281 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_parameter_type(var_281);
            }
            ,
            s if s.matches("NoEcho") /* NoEcho com.amazonaws.cloudformation#ParameterDeclaration$NoEcho */ =>  {
                let var_282 =
                    Some(
                         {
                            use std::str::FromStr;
                            bool::from_str(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.cloudformation#NoEcho`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_no_echo(var_282);
            }
            ,
            s if s.matches("Description") /* Description com.amazonaws.cloudformation#ParameterDeclaration$Description */ =>  {
                let var_283 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_description(var_283);
            }
            ,
            s if s.matches("ParameterConstraints") /* ParameterConstraints com.amazonaws.cloudformation#ParameterDeclaration$ParameterConstraints */ =>  {
                let var_284 =
                    Some(
                        crate::xml_deser::deser_structure_parameter_constraints(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_parameter_constraints(var_284);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_resource_identifier_summary(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::ResourceIdentifierSummary, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::ResourceIdentifierSummary::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ResourceType") /* ResourceType com.amazonaws.cloudformation#ResourceIdentifierSummary$ResourceType */ =>  {
                let var_285 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_type(var_285);
            }
            ,
            s if s.matches("LogicalResourceIds") /* LogicalResourceIds com.amazonaws.cloudformation#ResourceIdentifierSummary$LogicalResourceIds */ =>  {
                let var_286 =
                    Some(
                        crate::xml_deser::deser_list_logical_resource_ids(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_logical_resource_ids(var_286);
            }
            ,
            s if s.matches("ResourceIdentifiers") /* ResourceIdentifiers com.amazonaws.cloudformation#ResourceIdentifierSummary$ResourceIdentifiers */ =>  {
                let var_287 =
                    Some(
                        crate::xml_deser::deser_list_resource_identifiers(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_resource_identifiers(var_287);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_change_set_summary(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::ChangeSetSummary, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::ChangeSetSummary::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("StackId") /* StackId com.amazonaws.cloudformation#ChangeSetSummary$StackId */ =>  {
                let var_288 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_stack_id(var_288);
            }
            ,
            s if s.matches("StackName") /* StackName com.amazonaws.cloudformation#ChangeSetSummary$StackName */ =>  {
                let var_289 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_stack_name(var_289);
            }
            ,
            s if s.matches("ChangeSetId") /* ChangeSetId com.amazonaws.cloudformation#ChangeSetSummary$ChangeSetId */ =>  {
                let var_290 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_change_set_id(var_290);
            }
            ,
            s if s.matches("ChangeSetName") /* ChangeSetName com.amazonaws.cloudformation#ChangeSetSummary$ChangeSetName */ =>  {
                let var_291 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_change_set_name(var_291);
            }
            ,
            s if s.matches("ExecutionStatus") /* ExecutionStatus com.amazonaws.cloudformation#ChangeSetSummary$ExecutionStatus */ =>  {
                let var_292 =
                    Some(
                        Result::<crate::model::ExecutionStatus, smithy_xml::decode::XmlError>::Ok(
                            crate::model::ExecutionStatus::from(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_execution_status(var_292);
            }
            ,
            s if s.matches("Status") /* Status com.amazonaws.cloudformation#ChangeSetSummary$Status */ =>  {
                let var_293 =
                    Some(
                        Result::<crate::model::ChangeSetStatus, smithy_xml::decode::XmlError>::Ok(
                            crate::model::ChangeSetStatus::from(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_status(var_293);
            }
            ,
            s if s.matches("StatusReason") /* StatusReason com.amazonaws.cloudformation#ChangeSetSummary$StatusReason */ =>  {
                let var_294 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_status_reason(var_294);
            }
            ,
            s if s.matches("CreationTime") /* CreationTime com.amazonaws.cloudformation#ChangeSetSummary$CreationTime */ =>  {
                let var_295 =
                    Some(
                        smithy_types::Instant::from_str(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , smithy_types::instant::Format::DateTime
                        )
                        .map_err(|_|smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.cloudformation#CreationTime`)"))
                        ?
                    )
                ;
                builder = builder.set_creation_time(var_295);
            }
            ,
            s if s.matches("Description") /* Description com.amazonaws.cloudformation#ChangeSetSummary$Description */ =>  {
                let var_296 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_description(var_296);
            }
            ,
            s if s.matches("IncludeNestedStacks") /* IncludeNestedStacks com.amazonaws.cloudformation#ChangeSetSummary$IncludeNestedStacks */ =>  {
                let var_297 =
                    Some(
                         {
                            use std::str::FromStr;
                            bool::from_str(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.cloudformation#IncludeNestedStacks`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_include_nested_stacks(var_297);
            }
            ,
            s if s.matches("ParentChangeSetId") /* ParentChangeSetId com.amazonaws.cloudformation#ChangeSetSummary$ParentChangeSetId */ =>  {
                let var_298 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_parent_change_set_id(var_298);
            }
            ,
            s if s.matches("RootChangeSetId") /* RootChangeSetId com.amazonaws.cloudformation#ChangeSetSummary$RootChangeSetId */ =>  {
                let var_299 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_root_change_set_id(var_299);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_export(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::Export, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::Export::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ExportingStackId") /* ExportingStackId com.amazonaws.cloudformation#Export$ExportingStackId */ =>  {
                let var_300 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_exporting_stack_id(var_300);
            }
            ,
            s if s.matches("Name") /* Name com.amazonaws.cloudformation#Export$Name */ =>  {
                let var_301 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_name(var_301);
            }
            ,
            s if s.matches("Value") /* Value com.amazonaws.cloudformation#Export$Value */ =>  {
                let var_302 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_value(var_302);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_stack_instance_summary(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::StackInstanceSummary, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::StackInstanceSummary::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("StackSetId") /* StackSetId com.amazonaws.cloudformation#StackInstanceSummary$StackSetId */ =>  {
                let var_303 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_stack_set_id(var_303);
            }
            ,
            s if s.matches("Region") /* Region com.amazonaws.cloudformation#StackInstanceSummary$Region */ =>  {
                let var_304 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_region(var_304);
            }
            ,
            s if s.matches("Account") /* Account com.amazonaws.cloudformation#StackInstanceSummary$Account */ =>  {
                let var_305 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_account(var_305);
            }
            ,
            s if s.matches("StackId") /* StackId com.amazonaws.cloudformation#StackInstanceSummary$StackId */ =>  {
                let var_306 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_stack_id(var_306);
            }
            ,
            s if s.matches("Status") /* Status com.amazonaws.cloudformation#StackInstanceSummary$Status */ =>  {
                let var_307 =
                    Some(
                        Result::<crate::model::StackInstanceStatus, smithy_xml::decode::XmlError>::Ok(
                            crate::model::StackInstanceStatus::from(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_status(var_307);
            }
            ,
            s if s.matches("StatusReason") /* StatusReason com.amazonaws.cloudformation#StackInstanceSummary$StatusReason */ =>  {
                let var_308 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_status_reason(var_308);
            }
            ,
            s if s.matches("StackInstanceStatus") /* StackInstanceStatus com.amazonaws.cloudformation#StackInstanceSummary$StackInstanceStatus */ =>  {
                let var_309 =
                    Some(
                        crate::xml_deser::deser_structure_stack_instance_comprehensive_status(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_stack_instance_status(var_309);
            }
            ,
            s if s.matches("OrganizationalUnitId") /* OrganizationalUnitId com.amazonaws.cloudformation#StackInstanceSummary$OrganizationalUnitId */ =>  {
                let var_310 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_organizational_unit_id(var_310);
            }
            ,
            s if s.matches("DriftStatus") /* DriftStatus com.amazonaws.cloudformation#StackInstanceSummary$DriftStatus */ =>  {
                let var_311 =
                    Some(
                        Result::<crate::model::StackDriftStatus, smithy_xml::decode::XmlError>::Ok(
                            crate::model::StackDriftStatus::from(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_drift_status(var_311);
            }
            ,
            s if s.matches("LastDriftCheckTimestamp") /* LastDriftCheckTimestamp com.amazonaws.cloudformation#StackInstanceSummary$LastDriftCheckTimestamp */ =>  {
                let var_312 =
                    Some(
                        smithy_types::Instant::from_str(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , smithy_types::instant::Format::DateTime
                        )
                        .map_err(|_|smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.cloudformation#Timestamp`)"))
                        ?
                    )
                ;
                builder = builder.set_last_drift_check_timestamp(var_312);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_stack_resource_summary(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::StackResourceSummary, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::StackResourceSummary::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("LogicalResourceId") /* LogicalResourceId com.amazonaws.cloudformation#StackResourceSummary$LogicalResourceId */ =>  {
                let var_313 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_logical_resource_id(var_313);
            }
            ,
            s if s.matches("PhysicalResourceId") /* PhysicalResourceId com.amazonaws.cloudformation#StackResourceSummary$PhysicalResourceId */ =>  {
                let var_314 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_physical_resource_id(var_314);
            }
            ,
            s if s.matches("ResourceType") /* ResourceType com.amazonaws.cloudformation#StackResourceSummary$ResourceType */ =>  {
                let var_315 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_type(var_315);
            }
            ,
            s if s.matches("LastUpdatedTimestamp") /* LastUpdatedTimestamp com.amazonaws.cloudformation#StackResourceSummary$LastUpdatedTimestamp */ =>  {
                let var_316 =
                    Some(
                        smithy_types::Instant::from_str(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , smithy_types::instant::Format::DateTime
                        )
                        .map_err(|_|smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.cloudformation#Timestamp`)"))
                        ?
                    )
                ;
                builder = builder.set_last_updated_timestamp(var_316);
            }
            ,
            s if s.matches("ResourceStatus") /* ResourceStatus com.amazonaws.cloudformation#StackResourceSummary$ResourceStatus */ =>  {
                let var_317 =
                    Some(
                        Result::<crate::model::ResourceStatus, smithy_xml::decode::XmlError>::Ok(
                            crate::model::ResourceStatus::from(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_status(var_317);
            }
            ,
            s if s.matches("ResourceStatusReason") /* ResourceStatusReason com.amazonaws.cloudformation#StackResourceSummary$ResourceStatusReason */ =>  {
                let var_318 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_status_reason(var_318);
            }
            ,
            s if s.matches("DriftInformation") /* DriftInformation com.amazonaws.cloudformation#StackResourceSummary$DriftInformation */ =>  {
                let var_319 =
                    Some(
                        crate::xml_deser::deser_structure_stack_resource_drift_information_summary(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_drift_information(var_319);
            }
            ,
            s if s.matches("ModuleInfo") /* ModuleInfo com.amazonaws.cloudformation#StackResourceSummary$ModuleInfo */ =>  {
                let var_320 =
                    Some(
                        crate::xml_deser::deser_structure_module_info(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_module_info(var_320);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_stack_summary(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::StackSummary, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::StackSummary::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("StackId") /* StackId com.amazonaws.cloudformation#StackSummary$StackId */ =>  {
                let var_321 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_stack_id(var_321);
            }
            ,
            s if s.matches("StackName") /* StackName com.amazonaws.cloudformation#StackSummary$StackName */ =>  {
                let var_322 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_stack_name(var_322);
            }
            ,
            s if s.matches("TemplateDescription") /* TemplateDescription com.amazonaws.cloudformation#StackSummary$TemplateDescription */ =>  {
                let var_323 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_template_description(var_323);
            }
            ,
            s if s.matches("CreationTime") /* CreationTime com.amazonaws.cloudformation#StackSummary$CreationTime */ =>  {
                let var_324 =
                    Some(
                        smithy_types::Instant::from_str(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , smithy_types::instant::Format::DateTime
                        )
                        .map_err(|_|smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.cloudformation#CreationTime`)"))
                        ?
                    )
                ;
                builder = builder.set_creation_time(var_324);
            }
            ,
            s if s.matches("LastUpdatedTime") /* LastUpdatedTime com.amazonaws.cloudformation#StackSummary$LastUpdatedTime */ =>  {
                let var_325 =
                    Some(
                        smithy_types::Instant::from_str(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , smithy_types::instant::Format::DateTime
                        )
                        .map_err(|_|smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.cloudformation#LastUpdatedTime`)"))
                        ?
                    )
                ;
                builder = builder.set_last_updated_time(var_325);
            }
            ,
            s if s.matches("DeletionTime") /* DeletionTime com.amazonaws.cloudformation#StackSummary$DeletionTime */ =>  {
                let var_326 =
                    Some(
                        smithy_types::Instant::from_str(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , smithy_types::instant::Format::DateTime
                        )
                        .map_err(|_|smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.cloudformation#DeletionTime`)"))
                        ?
                    )
                ;
                builder = builder.set_deletion_time(var_326);
            }
            ,
            s if s.matches("StackStatus") /* StackStatus com.amazonaws.cloudformation#StackSummary$StackStatus */ =>  {
                let var_327 =
                    Some(
                        Result::<crate::model::StackStatus, smithy_xml::decode::XmlError>::Ok(
                            crate::model::StackStatus::from(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_stack_status(var_327);
            }
            ,
            s if s.matches("StackStatusReason") /* StackStatusReason com.amazonaws.cloudformation#StackSummary$StackStatusReason */ =>  {
                let var_328 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_stack_status_reason(var_328);
            }
            ,
            s if s.matches("ParentId") /* ParentId com.amazonaws.cloudformation#StackSummary$ParentId */ =>  {
                let var_329 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_parent_id(var_329);
            }
            ,
            s if s.matches("RootId") /* RootId com.amazonaws.cloudformation#StackSummary$RootId */ =>  {
                let var_330 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_root_id(var_330);
            }
            ,
            s if s.matches("DriftInformation") /* DriftInformation com.amazonaws.cloudformation#StackSummary$DriftInformation */ =>  {
                let var_331 =
                    Some(
                        crate::xml_deser::deser_structure_stack_drift_information_summary(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_drift_information(var_331);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_stack_set_operation_result_summary(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::StackSetOperationResultSummary, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::StackSetOperationResultSummary::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Account") /* Account com.amazonaws.cloudformation#StackSetOperationResultSummary$Account */ =>  {
                let var_332 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_account(var_332);
            }
            ,
            s if s.matches("Region") /* Region com.amazonaws.cloudformation#StackSetOperationResultSummary$Region */ =>  {
                let var_333 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_region(var_333);
            }
            ,
            s if s.matches("Status") /* Status com.amazonaws.cloudformation#StackSetOperationResultSummary$Status */ =>  {
                let var_334 =
                    Some(
                        Result::<crate::model::StackSetOperationResultStatus, smithy_xml::decode::XmlError>::Ok(
                            crate::model::StackSetOperationResultStatus::from(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_status(var_334);
            }
            ,
            s if s.matches("StatusReason") /* StatusReason com.amazonaws.cloudformation#StackSetOperationResultSummary$StatusReason */ =>  {
                let var_335 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_status_reason(var_335);
            }
            ,
            s if s.matches("AccountGateResult") /* AccountGateResult com.amazonaws.cloudformation#StackSetOperationResultSummary$AccountGateResult */ =>  {
                let var_336 =
                    Some(
                        crate::xml_deser::deser_structure_account_gate_result(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_account_gate_result(var_336);
            }
            ,
            s if s.matches("OrganizationalUnitId") /* OrganizationalUnitId com.amazonaws.cloudformation#StackSetOperationResultSummary$OrganizationalUnitId */ =>  {
                let var_337 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_organizational_unit_id(var_337);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_stack_set_operation_summary(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::StackSetOperationSummary, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::StackSetOperationSummary::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("OperationId") /* OperationId com.amazonaws.cloudformation#StackSetOperationSummary$OperationId */ =>  {
                let var_338 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_operation_id(var_338);
            }
            ,
            s if s.matches("Action") /* Action com.amazonaws.cloudformation#StackSetOperationSummary$Action */ =>  {
                let var_339 =
                    Some(
                        Result::<crate::model::StackSetOperationAction, smithy_xml::decode::XmlError>::Ok(
                            crate::model::StackSetOperationAction::from(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_action(var_339);
            }
            ,
            s if s.matches("Status") /* Status com.amazonaws.cloudformation#StackSetOperationSummary$Status */ =>  {
                let var_340 =
                    Some(
                        Result::<crate::model::StackSetOperationStatus, smithy_xml::decode::XmlError>::Ok(
                            crate::model::StackSetOperationStatus::from(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_status(var_340);
            }
            ,
            s if s.matches("CreationTimestamp") /* CreationTimestamp com.amazonaws.cloudformation#StackSetOperationSummary$CreationTimestamp */ =>  {
                let var_341 =
                    Some(
                        smithy_types::Instant::from_str(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , smithy_types::instant::Format::DateTime
                        )
                        .map_err(|_|smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.cloudformation#Timestamp`)"))
                        ?
                    )
                ;
                builder = builder.set_creation_timestamp(var_341);
            }
            ,
            s if s.matches("EndTimestamp") /* EndTimestamp com.amazonaws.cloudformation#StackSetOperationSummary$EndTimestamp */ =>  {
                let var_342 =
                    Some(
                        smithy_types::Instant::from_str(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , smithy_types::instant::Format::DateTime
                        )
                        .map_err(|_|smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.cloudformation#Timestamp`)"))
                        ?
                    )
                ;
                builder = builder.set_end_timestamp(var_342);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_stack_set_summary(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::StackSetSummary, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::StackSetSummary::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("StackSetName") /* StackSetName com.amazonaws.cloudformation#StackSetSummary$StackSetName */ =>  {
                let var_343 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_stack_set_name(var_343);
            }
            ,
            s if s.matches("StackSetId") /* StackSetId com.amazonaws.cloudformation#StackSetSummary$StackSetId */ =>  {
                let var_344 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_stack_set_id(var_344);
            }
            ,
            s if s.matches("Description") /* Description com.amazonaws.cloudformation#StackSetSummary$Description */ =>  {
                let var_345 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_description(var_345);
            }
            ,
            s if s.matches("Status") /* Status com.amazonaws.cloudformation#StackSetSummary$Status */ =>  {
                let var_346 =
                    Some(
                        Result::<crate::model::StackSetStatus, smithy_xml::decode::XmlError>::Ok(
                            crate::model::StackSetStatus::from(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_status(var_346);
            }
            ,
            s if s.matches("AutoDeployment") /* AutoDeployment com.amazonaws.cloudformation#StackSetSummary$AutoDeployment */ =>  {
                let var_347 =
                    Some(
                        crate::xml_deser::deser_structure_auto_deployment(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_auto_deployment(var_347);
            }
            ,
            s if s.matches("PermissionModel") /* PermissionModel com.amazonaws.cloudformation#StackSetSummary$PermissionModel */ =>  {
                let var_348 =
                    Some(
                        Result::<crate::model::PermissionModels, smithy_xml::decode::XmlError>::Ok(
                            crate::model::PermissionModels::from(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_permission_model(var_348);
            }
            ,
            s if s.matches("DriftStatus") /* DriftStatus com.amazonaws.cloudformation#StackSetSummary$DriftStatus */ =>  {
                let var_349 =
                    Some(
                        Result::<crate::model::StackDriftStatus, smithy_xml::decode::XmlError>::Ok(
                            crate::model::StackDriftStatus::from(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_drift_status(var_349);
            }
            ,
            s if s.matches("LastDriftCheckTimestamp") /* LastDriftCheckTimestamp com.amazonaws.cloudformation#StackSetSummary$LastDriftCheckTimestamp */ =>  {
                let var_350 =
                    Some(
                        smithy_types::Instant::from_str(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , smithy_types::instant::Format::DateTime
                        )
                        .map_err(|_|smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.cloudformation#Timestamp`)"))
                        ?
                    )
                ;
                builder = builder.set_last_drift_check_timestamp(var_350);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_type_summary(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::TypeSummary, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::TypeSummary::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Type") /* Type com.amazonaws.cloudformation#TypeSummary$Type */ =>  {
                let var_351 =
                    Some(
                        Result::<crate::model::RegistryType, smithy_xml::decode::XmlError>::Ok(
                            crate::model::RegistryType::from(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_type(var_351);
            }
            ,
            s if s.matches("TypeName") /* TypeName com.amazonaws.cloudformation#TypeSummary$TypeName */ =>  {
                let var_352 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_type_name(var_352);
            }
            ,
            s if s.matches("DefaultVersionId") /* DefaultVersionId com.amazonaws.cloudformation#TypeSummary$DefaultVersionId */ =>  {
                let var_353 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_default_version_id(var_353);
            }
            ,
            s if s.matches("TypeArn") /* TypeArn com.amazonaws.cloudformation#TypeSummary$TypeArn */ =>  {
                let var_354 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_type_arn(var_354);
            }
            ,
            s if s.matches("LastUpdated") /* LastUpdated com.amazonaws.cloudformation#TypeSummary$LastUpdated */ =>  {
                let var_355 =
                    Some(
                        smithy_types::Instant::from_str(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , smithy_types::instant::Format::DateTime
                        )
                        .map_err(|_|smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.cloudformation#Timestamp`)"))
                        ?
                    )
                ;
                builder = builder.set_last_updated(var_355);
            }
            ,
            s if s.matches("Description") /* Description com.amazonaws.cloudformation#TypeSummary$Description */ =>  {
                let var_356 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_description(var_356);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_type_version_summary(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::TypeVersionSummary, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::TypeVersionSummary::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Type") /* Type com.amazonaws.cloudformation#TypeVersionSummary$Type */ =>  {
                let var_357 =
                    Some(
                        Result::<crate::model::RegistryType, smithy_xml::decode::XmlError>::Ok(
                            crate::model::RegistryType::from(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_type(var_357);
            }
            ,
            s if s.matches("TypeName") /* TypeName com.amazonaws.cloudformation#TypeVersionSummary$TypeName */ =>  {
                let var_358 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_type_name(var_358);
            }
            ,
            s if s.matches("VersionId") /* VersionId com.amazonaws.cloudformation#TypeVersionSummary$VersionId */ =>  {
                let var_359 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_version_id(var_359);
            }
            ,
            s if s.matches("IsDefaultVersion") /* IsDefaultVersion com.amazonaws.cloudformation#TypeVersionSummary$IsDefaultVersion */ =>  {
                let var_360 =
                    Some(
                         {
                            use std::str::FromStr;
                            bool::from_str(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.cloudformation#IsDefaultVersion`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_is_default_version(var_360);
            }
            ,
            s if s.matches("Arn") /* Arn com.amazonaws.cloudformation#TypeVersionSummary$Arn */ =>  {
                let var_361 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_arn(var_361);
            }
            ,
            s if s.matches("TimeCreated") /* TimeCreated com.amazonaws.cloudformation#TypeVersionSummary$TimeCreated */ =>  {
                let var_362 =
                    Some(
                        smithy_types::Instant::from_str(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , smithy_types::instant::Format::DateTime
                        )
                        .map_err(|_|smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.cloudformation#Timestamp`)"))
                        ?
                    )
                ;
                builder = builder.set_time_created(var_362);
            }
            ,
            s if s.matches("Description") /* Description com.amazonaws.cloudformation#TypeVersionSummary$Description */ =>  {
                let var_363 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_description(var_363);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_template_parameter(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::TemplateParameter, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::TemplateParameter::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ParameterKey") /* ParameterKey com.amazonaws.cloudformation#TemplateParameter$ParameterKey */ =>  {
                let var_364 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_parameter_key(var_364);
            }
            ,
            s if s.matches("DefaultValue") /* DefaultValue com.amazonaws.cloudformation#TemplateParameter$DefaultValue */ =>  {
                let var_365 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_default_value(var_365);
            }
            ,
            s if s.matches("NoEcho") /* NoEcho com.amazonaws.cloudformation#TemplateParameter$NoEcho */ =>  {
                let var_366 =
                    Some(
                         {
                            use std::str::FromStr;
                            bool::from_str(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.cloudformation#NoEcho`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_no_echo(var_366);
            }
            ,
            s if s.matches("Description") /* Description com.amazonaws.cloudformation#TemplateParameter$Description */ =>  {
                let var_367 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_description(var_367);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_rollback_trigger(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::RollbackTrigger, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::RollbackTrigger::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Arn") /* Arn com.amazonaws.cloudformation#RollbackTrigger$Arn */ =>  {
                let var_368 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_arn(var_368);
            }
            ,
            s if s.matches("Type") /* Type com.amazonaws.cloudformation#RollbackTrigger$Type */ =>  {
                let var_369 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_type(var_369);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_resource_change(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::ResourceChange, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::ResourceChange::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Action") /* Action com.amazonaws.cloudformation#ResourceChange$Action */ =>  {
                let var_370 =
                    Some(
                        Result::<crate::model::ChangeAction, smithy_xml::decode::XmlError>::Ok(
                            crate::model::ChangeAction::from(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_action(var_370);
            }
            ,
            s if s.matches("LogicalResourceId") /* LogicalResourceId com.amazonaws.cloudformation#ResourceChange$LogicalResourceId */ =>  {
                let var_371 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_logical_resource_id(var_371);
            }
            ,
            s if s.matches("PhysicalResourceId") /* PhysicalResourceId com.amazonaws.cloudformation#ResourceChange$PhysicalResourceId */ =>  {
                let var_372 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_physical_resource_id(var_372);
            }
            ,
            s if s.matches("ResourceType") /* ResourceType com.amazonaws.cloudformation#ResourceChange$ResourceType */ =>  {
                let var_373 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_type(var_373);
            }
            ,
            s if s.matches("Replacement") /* Replacement com.amazonaws.cloudformation#ResourceChange$Replacement */ =>  {
                let var_374 =
                    Some(
                        Result::<crate::model::Replacement, smithy_xml::decode::XmlError>::Ok(
                            crate::model::Replacement::from(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_replacement(var_374);
            }
            ,
            s if s.matches("Scope") /* Scope com.amazonaws.cloudformation#ResourceChange$Scope */ =>  {
                let var_375 =
                    Some(
                        crate::xml_deser::deser_list_scope(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_scope(var_375);
            }
            ,
            s if s.matches("Details") /* Details com.amazonaws.cloudformation#ResourceChange$Details */ =>  {
                let var_376 =
                    Some(
                        crate::xml_deser::deser_list_resource_change_details(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_details(var_376);
            }
            ,
            s if s.matches("ChangeSetId") /* ChangeSetId com.amazonaws.cloudformation#ResourceChange$ChangeSetId */ =>  {
                let var_377 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_change_set_id(var_377);
            }
            ,
            s if s.matches("ModuleInfo") /* ModuleInfo com.amazonaws.cloudformation#ResourceChange$ModuleInfo */ =>  {
                let var_378 =
                    Some(
                        crate::xml_deser::deser_structure_module_info(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_module_info(var_378);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_outputs(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::Output>, smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("member") /* member com.amazonaws.cloudformation#Outputs$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_output(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_stack_drift_information(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::StackDriftInformation, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::StackDriftInformation::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("StackDriftStatus") /* StackDriftStatus com.amazonaws.cloudformation#StackDriftInformation$StackDriftStatus */ =>  {
                let var_379 =
                    Some(
                        Result::<crate::model::StackDriftStatus, smithy_xml::decode::XmlError>::Ok(
                            crate::model::StackDriftStatus::from(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_stack_drift_status(var_379);
            }
            ,
            s if s.matches("LastCheckTimestamp") /* LastCheckTimestamp com.amazonaws.cloudformation#StackDriftInformation$LastCheckTimestamp */ =>  {
                let var_380 =
                    Some(
                        smithy_types::Instant::from_str(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , smithy_types::instant::Format::DateTime
                        )
                        .map_err(|_|smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.cloudformation#Timestamp`)"))
                        ?
                    )
                ;
                builder = builder.set_last_check_timestamp(var_380);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_region_list(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<std::string::String>, smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("member") /* member com.amazonaws.cloudformation#RegionList$member */ =>  {
                out.push(
                    Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                        smithy_xml::decode::try_data(&mut tag)?.as_ref()
                        .into()
                    )
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_account_list(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<std::string::String>, smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("member") /* member com.amazonaws.cloudformation#AccountList$member */ =>  {
                out.push(
                    Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                        smithy_xml::decode::try_data(&mut tag)?.as_ref()
                        .into()
                    )
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_physical_resource_id_context_key_value_pair(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::PhysicalResourceIdContextKeyValuePair, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::PhysicalResourceIdContextKeyValuePair::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Key") /* Key com.amazonaws.cloudformation#PhysicalResourceIdContextKeyValuePair$Key */ =>  {
                let var_381 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_key(var_381);
            }
            ,
            s if s.matches("Value") /* Value com.amazonaws.cloudformation#PhysicalResourceIdContextKeyValuePair$Value */ =>  {
                let var_382 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_value(var_382);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_property_difference(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::PropertyDifference, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::PropertyDifference::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("PropertyPath") /* PropertyPath com.amazonaws.cloudformation#PropertyDifference$PropertyPath */ =>  {
                let var_383 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_property_path(var_383);
            }
            ,
            s if s.matches("ExpectedValue") /* ExpectedValue com.amazonaws.cloudformation#PropertyDifference$ExpectedValue */ =>  {
                let var_384 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_expected_value(var_384);
            }
            ,
            s if s.matches("ActualValue") /* ActualValue com.amazonaws.cloudformation#PropertyDifference$ActualValue */ =>  {
                let var_385 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_actual_value(var_385);
            }
            ,
            s if s.matches("DifferenceType") /* DifferenceType com.amazonaws.cloudformation#PropertyDifference$DifferenceType */ =>  {
                let var_386 =
                    Some(
                        Result::<crate::model::DifferenceType, smithy_xml::decode::XmlError>::Ok(
                            crate::model::DifferenceType::from(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_difference_type(var_386);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_parameter_constraints(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::ParameterConstraints, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::ParameterConstraints::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("AllowedValues") /* AllowedValues com.amazonaws.cloudformation#ParameterConstraints$AllowedValues */ =>  {
                let var_387 =
                    Some(
                        crate::xml_deser::deser_list_allowed_values(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_allowed_values(var_387);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_logical_resource_ids(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<std::string::String>, smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("member") /* member com.amazonaws.cloudformation#LogicalResourceIds$member */ =>  {
                out.push(
                    Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                        smithy_xml::decode::try_data(&mut tag)?.as_ref()
                        .into()
                    )
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_resource_identifiers(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<std::string::String>, smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("member") /* member com.amazonaws.cloudformation#ResourceIdentifiers$member */ =>  {
                out.push(
                    Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                        smithy_xml::decode::try_data(&mut tag)?.as_ref()
                        .into()
                    )
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_stack_resource_drift_information_summary(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::StackResourceDriftInformationSummary, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::StackResourceDriftInformationSummary::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("StackResourceDriftStatus") /* StackResourceDriftStatus com.amazonaws.cloudformation#StackResourceDriftInformationSummary$StackResourceDriftStatus */ =>  {
                let var_388 =
                    Some(
                        Result::<crate::model::StackResourceDriftStatus, smithy_xml::decode::XmlError>::Ok(
                            crate::model::StackResourceDriftStatus::from(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_stack_resource_drift_status(var_388);
            }
            ,
            s if s.matches("LastCheckTimestamp") /* LastCheckTimestamp com.amazonaws.cloudformation#StackResourceDriftInformationSummary$LastCheckTimestamp */ =>  {
                let var_389 =
                    Some(
                        smithy_types::Instant::from_str(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , smithy_types::instant::Format::DateTime
                        )
                        .map_err(|_|smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.cloudformation#Timestamp`)"))
                        ?
                    )
                ;
                builder = builder.set_last_check_timestamp(var_389);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_stack_drift_information_summary(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::StackDriftInformationSummary, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::StackDriftInformationSummary::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("StackDriftStatus") /* StackDriftStatus com.amazonaws.cloudformation#StackDriftInformationSummary$StackDriftStatus */ =>  {
                let var_390 =
                    Some(
                        Result::<crate::model::StackDriftStatus, smithy_xml::decode::XmlError>::Ok(
                            crate::model::StackDriftStatus::from(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_stack_drift_status(var_390);
            }
            ,
            s if s.matches("LastCheckTimestamp") /* LastCheckTimestamp com.amazonaws.cloudformation#StackDriftInformationSummary$LastCheckTimestamp */ =>  {
                let var_391 =
                    Some(
                        smithy_types::Instant::from_str(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , smithy_types::instant::Format::DateTime
                        )
                        .map_err(|_|smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.cloudformation#Timestamp`)"))
                        ?
                    )
                ;
                builder = builder.set_last_check_timestamp(var_391);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_account_gate_result(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::AccountGateResult, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::AccountGateResult::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Status") /* Status com.amazonaws.cloudformation#AccountGateResult$Status */ =>  {
                let var_392 =
                    Some(
                        Result::<crate::model::AccountGateStatus, smithy_xml::decode::XmlError>::Ok(
                            crate::model::AccountGateStatus::from(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_status(var_392);
            }
            ,
            s if s.matches("StatusReason") /* StatusReason com.amazonaws.cloudformation#AccountGateResult$StatusReason */ =>  {
                let var_393 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_status_reason(var_393);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_scope(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::ResourceAttribute>, smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("member") /* member com.amazonaws.cloudformation#Scope$member */ =>  {
                out.push(
                    Result::<crate::model::ResourceAttribute, smithy_xml::decode::XmlError>::Ok(
                        crate::model::ResourceAttribute::from(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                        )
                    )
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_resource_change_details(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::ResourceChangeDetail>, smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("member") /* member com.amazonaws.cloudformation#ResourceChangeDetails$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_resource_change_detail(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_output(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::Output, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::Output::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("OutputKey") /* OutputKey com.amazonaws.cloudformation#Output$OutputKey */ =>  {
                let var_394 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_output_key(var_394);
            }
            ,
            s if s.matches("OutputValue") /* OutputValue com.amazonaws.cloudformation#Output$OutputValue */ =>  {
                let var_395 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_output_value(var_395);
            }
            ,
            s if s.matches("Description") /* Description com.amazonaws.cloudformation#Output$Description */ =>  {
                let var_396 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_description(var_396);
            }
            ,
            s if s.matches("ExportName") /* ExportName com.amazonaws.cloudformation#Output$ExportName */ =>  {
                let var_397 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_export_name(var_397);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_allowed_values(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<std::string::String>, smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("member") /* member com.amazonaws.cloudformation#AllowedValues$member */ =>  {
                out.push(
                    Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                        smithy_xml::decode::try_data(&mut tag)?.as_ref()
                        .into()
                    )
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_resource_change_detail(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::ResourceChangeDetail, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::ResourceChangeDetail::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Target") /* Target com.amazonaws.cloudformation#ResourceChangeDetail$Target */ =>  {
                let var_398 =
                    Some(
                        crate::xml_deser::deser_structure_resource_target_definition(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_target(var_398);
            }
            ,
            s if s.matches("Evaluation") /* Evaluation com.amazonaws.cloudformation#ResourceChangeDetail$Evaluation */ =>  {
                let var_399 =
                    Some(
                        Result::<crate::model::EvaluationType, smithy_xml::decode::XmlError>::Ok(
                            crate::model::EvaluationType::from(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_evaluation(var_399);
            }
            ,
            s if s.matches("ChangeSource") /* ChangeSource com.amazonaws.cloudformation#ResourceChangeDetail$ChangeSource */ =>  {
                let var_400 =
                    Some(
                        Result::<crate::model::ChangeSource, smithy_xml::decode::XmlError>::Ok(
                            crate::model::ChangeSource::from(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_change_source(var_400);
            }
            ,
            s if s.matches("CausingEntity") /* CausingEntity com.amazonaws.cloudformation#ResourceChangeDetail$CausingEntity */ =>  {
                let var_401 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_causing_entity(var_401);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_resource_target_definition(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::ResourceTargetDefinition, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::ResourceTargetDefinition::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Attribute") /* Attribute com.amazonaws.cloudformation#ResourceTargetDefinition$Attribute */ =>  {
                let var_402 =
                    Some(
                        Result::<crate::model::ResourceAttribute, smithy_xml::decode::XmlError>::Ok(
                            crate::model::ResourceAttribute::from(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_attribute(var_402);
            }
            ,
            s if s.matches("Name") /* Name com.amazonaws.cloudformation#ResourceTargetDefinition$Name */ =>  {
                let var_403 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_name(var_403);
            }
            ,
            s if s.matches("RequiresRecreation") /* RequiresRecreation com.amazonaws.cloudformation#ResourceTargetDefinition$RequiresRecreation */ =>  {
                let var_404 =
                    Some(
                        Result::<crate::model::RequiresRecreation, smithy_xml::decode::XmlError>::Ok(
                            crate::model::RequiresRecreation::from(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_requires_recreation(var_404);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
