// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the resource, the hook, and the hook version to be invoked.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ChangeSetHook {
    /// <p>Specifies the points in provisioning logic where a hook is invoked.</p>
    #[doc(hidden)]
    pub invocation_point: std::option::Option<crate::types::HookInvocationPoint>,
    /// <p>Specify the hook failure mode for non-compliant resources in the followings ways.</p>
    /// <ul>
    /// <li> <p> <code>FAIL</code> Stops provisioning resources.</p> </li>
    /// <li> <p> <code>WARN</code> Allows provisioning to continue with a warning message.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub failure_mode: std::option::Option<crate::types::HookFailureMode>,
    /// <p>The unique name for your hook. Specifies a three-part namespace for your hook, with a recommended pattern of <code>Organization::Service::Hook</code>.</p> <note>
    /// <p>The following organization namespaces are reserved and can't be used in your hook type names:</p>
    /// <ul>
    /// <li> <p> <code>Alexa</code> </p> </li>
    /// <li> <p> <code>AMZN</code> </p> </li>
    /// <li> <p> <code>Amazon</code> </p> </li>
    /// <li> <p> <code>ASK</code> </p> </li>
    /// <li> <p> <code>AWS</code> </p> </li>
    /// <li> <p> <code>Custom</code> </p> </li>
    /// <li> <p> <code>Dev</code> </p> </li>
    /// </ul>
    /// </note>
    #[doc(hidden)]
    pub type_name: std::option::Option<std::string::String>,
    /// <p>The version ID of the type specified.</p>
    #[doc(hidden)]
    pub type_version_id: std::option::Option<std::string::String>,
    /// <p>The version ID of the type configuration.</p>
    #[doc(hidden)]
    pub type_configuration_version_id: std::option::Option<std::string::String>,
    /// <p>Specifies details about the target that the hook will run against.</p>
    #[doc(hidden)]
    pub target_details: std::option::Option<crate::types::ChangeSetHookTargetDetails>,
}
impl ChangeSetHook {
    /// <p>Specifies the points in provisioning logic where a hook is invoked.</p>
    pub fn invocation_point(&self) -> std::option::Option<&crate::types::HookInvocationPoint> {
        self.invocation_point.as_ref()
    }
    /// <p>Specify the hook failure mode for non-compliant resources in the followings ways.</p>
    /// <ul>
    /// <li> <p> <code>FAIL</code> Stops provisioning resources.</p> </li>
    /// <li> <p> <code>WARN</code> Allows provisioning to continue with a warning message.</p> </li>
    /// </ul>
    pub fn failure_mode(&self) -> std::option::Option<&crate::types::HookFailureMode> {
        self.failure_mode.as_ref()
    }
    /// <p>The unique name for your hook. Specifies a three-part namespace for your hook, with a recommended pattern of <code>Organization::Service::Hook</code>.</p> <note>
    /// <p>The following organization namespaces are reserved and can't be used in your hook type names:</p>
    /// <ul>
    /// <li> <p> <code>Alexa</code> </p> </li>
    /// <li> <p> <code>AMZN</code> </p> </li>
    /// <li> <p> <code>Amazon</code> </p> </li>
    /// <li> <p> <code>ASK</code> </p> </li>
    /// <li> <p> <code>AWS</code> </p> </li>
    /// <li> <p> <code>Custom</code> </p> </li>
    /// <li> <p> <code>Dev</code> </p> </li>
    /// </ul>
    /// </note>
    pub fn type_name(&self) -> std::option::Option<&str> {
        self.type_name.as_deref()
    }
    /// <p>The version ID of the type specified.</p>
    pub fn type_version_id(&self) -> std::option::Option<&str> {
        self.type_version_id.as_deref()
    }
    /// <p>The version ID of the type configuration.</p>
    pub fn type_configuration_version_id(&self) -> std::option::Option<&str> {
        self.type_configuration_version_id.as_deref()
    }
    /// <p>Specifies details about the target that the hook will run against.</p>
    pub fn target_details(&self) -> std::option::Option<&crate::types::ChangeSetHookTargetDetails> {
        self.target_details.as_ref()
    }
}
impl ChangeSetHook {
    /// Creates a new builder-style object to manufacture [`ChangeSetHook`](crate::types::ChangeSetHook).
    pub fn builder() -> crate::types::builders::ChangeSetHookBuilder {
        crate::types::builders::ChangeSetHookBuilder::default()
    }
}

/// A builder for [`ChangeSetHook`](crate::types::ChangeSetHook).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ChangeSetHookBuilder {
    pub(crate) invocation_point: std::option::Option<crate::types::HookInvocationPoint>,
    pub(crate) failure_mode: std::option::Option<crate::types::HookFailureMode>,
    pub(crate) type_name: std::option::Option<std::string::String>,
    pub(crate) type_version_id: std::option::Option<std::string::String>,
    pub(crate) type_configuration_version_id: std::option::Option<std::string::String>,
    pub(crate) target_details: std::option::Option<crate::types::ChangeSetHookTargetDetails>,
}
impl ChangeSetHookBuilder {
    /// <p>Specifies the points in provisioning logic where a hook is invoked.</p>
    pub fn invocation_point(mut self, input: crate::types::HookInvocationPoint) -> Self {
        self.invocation_point = Some(input);
        self
    }
    /// <p>Specifies the points in provisioning logic where a hook is invoked.</p>
    pub fn set_invocation_point(
        mut self,
        input: std::option::Option<crate::types::HookInvocationPoint>,
    ) -> Self {
        self.invocation_point = input;
        self
    }
    /// <p>Specify the hook failure mode for non-compliant resources in the followings ways.</p>
    /// <ul>
    /// <li> <p> <code>FAIL</code> Stops provisioning resources.</p> </li>
    /// <li> <p> <code>WARN</code> Allows provisioning to continue with a warning message.</p> </li>
    /// </ul>
    pub fn failure_mode(mut self, input: crate::types::HookFailureMode) -> Self {
        self.failure_mode = Some(input);
        self
    }
    /// <p>Specify the hook failure mode for non-compliant resources in the followings ways.</p>
    /// <ul>
    /// <li> <p> <code>FAIL</code> Stops provisioning resources.</p> </li>
    /// <li> <p> <code>WARN</code> Allows provisioning to continue with a warning message.</p> </li>
    /// </ul>
    pub fn set_failure_mode(
        mut self,
        input: std::option::Option<crate::types::HookFailureMode>,
    ) -> Self {
        self.failure_mode = input;
        self
    }
    /// <p>The unique name for your hook. Specifies a three-part namespace for your hook, with a recommended pattern of <code>Organization::Service::Hook</code>.</p> <note>
    /// <p>The following organization namespaces are reserved and can't be used in your hook type names:</p>
    /// <ul>
    /// <li> <p> <code>Alexa</code> </p> </li>
    /// <li> <p> <code>AMZN</code> </p> </li>
    /// <li> <p> <code>Amazon</code> </p> </li>
    /// <li> <p> <code>ASK</code> </p> </li>
    /// <li> <p> <code>AWS</code> </p> </li>
    /// <li> <p> <code>Custom</code> </p> </li>
    /// <li> <p> <code>Dev</code> </p> </li>
    /// </ul>
    /// </note>
    pub fn type_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.type_name = Some(input.into());
        self
    }
    /// <p>The unique name for your hook. Specifies a three-part namespace for your hook, with a recommended pattern of <code>Organization::Service::Hook</code>.</p> <note>
    /// <p>The following organization namespaces are reserved and can't be used in your hook type names:</p>
    /// <ul>
    /// <li> <p> <code>Alexa</code> </p> </li>
    /// <li> <p> <code>AMZN</code> </p> </li>
    /// <li> <p> <code>Amazon</code> </p> </li>
    /// <li> <p> <code>ASK</code> </p> </li>
    /// <li> <p> <code>AWS</code> </p> </li>
    /// <li> <p> <code>Custom</code> </p> </li>
    /// <li> <p> <code>Dev</code> </p> </li>
    /// </ul>
    /// </note>
    pub fn set_type_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.type_name = input;
        self
    }
    /// <p>The version ID of the type specified.</p>
    pub fn type_version_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.type_version_id = Some(input.into());
        self
    }
    /// <p>The version ID of the type specified.</p>
    pub fn set_type_version_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.type_version_id = input;
        self
    }
    /// <p>The version ID of the type configuration.</p>
    pub fn type_configuration_version_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.type_configuration_version_id = Some(input.into());
        self
    }
    /// <p>The version ID of the type configuration.</p>
    pub fn set_type_configuration_version_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.type_configuration_version_id = input;
        self
    }
    /// <p>Specifies details about the target that the hook will run against.</p>
    pub fn target_details(mut self, input: crate::types::ChangeSetHookTargetDetails) -> Self {
        self.target_details = Some(input);
        self
    }
    /// <p>Specifies details about the target that the hook will run against.</p>
    pub fn set_target_details(
        mut self,
        input: std::option::Option<crate::types::ChangeSetHookTargetDetails>,
    ) -> Self {
        self.target_details = input;
        self
    }
    /// Consumes the builder and constructs a [`ChangeSetHook`](crate::types::ChangeSetHook).
    pub fn build(self) -> crate::types::ChangeSetHook {
        crate::types::ChangeSetHook {
            invocation_point: self.invocation_point,
            failure_mode: self.failure_mode,
            type_name: self.type_name,
            type_version_id: self.type_version_id,
            type_configuration_version_id: self.type_configuration_version_id,
            target_details: self.target_details,
        }
    }
}
