// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains logging configuration information for an extension.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LoggingConfig {
    /// <p>The Amazon Resource Name (ARN) of the role that CloudFormation should assume when sending log entries to CloudWatch Logs.</p>
    pub log_role_arn: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon CloudWatch Logs group to which CloudFormation sends error logging information when invoking the extension's handlers.</p>
    pub log_group_name: ::std::option::Option<::std::string::String>,
}
impl LoggingConfig {
    /// <p>The Amazon Resource Name (ARN) of the role that CloudFormation should assume when sending log entries to CloudWatch Logs.</p>
    pub fn log_role_arn(&self) -> ::std::option::Option<&str> {
        self.log_role_arn.as_deref()
    }
    /// <p>The Amazon CloudWatch Logs group to which CloudFormation sends error logging information when invoking the extension's handlers.</p>
    pub fn log_group_name(&self) -> ::std::option::Option<&str> {
        self.log_group_name.as_deref()
    }
}
impl LoggingConfig {
    /// Creates a new builder-style object to manufacture [`LoggingConfig`](crate::types::LoggingConfig).
    pub fn builder() -> crate::types::builders::LoggingConfigBuilder {
        crate::types::builders::LoggingConfigBuilder::default()
    }
}

/// A builder for [`LoggingConfig`](crate::types::LoggingConfig).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct LoggingConfigBuilder {
    pub(crate) log_role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) log_group_name: ::std::option::Option<::std::string::String>,
}
impl LoggingConfigBuilder {
    /// <p>The Amazon Resource Name (ARN) of the role that CloudFormation should assume when sending log entries to CloudWatch Logs.</p>
    /// This field is required.
    pub fn log_role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.log_role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the role that CloudFormation should assume when sending log entries to CloudWatch Logs.</p>
    pub fn set_log_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.log_role_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the role that CloudFormation should assume when sending log entries to CloudWatch Logs.</p>
    pub fn get_log_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.log_role_arn
    }
    /// <p>The Amazon CloudWatch Logs group to which CloudFormation sends error logging information when invoking the extension's handlers.</p>
    /// This field is required.
    pub fn log_group_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.log_group_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon CloudWatch Logs group to which CloudFormation sends error logging information when invoking the extension's handlers.</p>
    pub fn set_log_group_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.log_group_name = input;
        self
    }
    /// <p>The Amazon CloudWatch Logs group to which CloudFormation sends error logging information when invoking the extension's handlers.</p>
    pub fn get_log_group_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.log_group_name
    }
    /// Consumes the builder and constructs a [`LoggingConfig`](crate::types::LoggingConfig).
    pub fn build(self) -> crate::types::LoggingConfig {
        crate::types::LoggingConfig {
            log_role_arn: self.log_role_arn,
            log_group_name: self.log_group_name,
        }
    }
}
