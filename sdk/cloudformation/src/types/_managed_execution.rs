// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes whether StackSets performs non-conflicting operations concurrently and queues conflicting operations.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ManagedExecution {
    /// <p>When <code>true</code>, StackSets performs non-conflicting operations concurrently and queues conflicting operations. After conflicting operations finish, StackSets starts queued operations in request order.</p> <note>
    /// <p>If there are already running or queued operations, StackSets queues all incoming operations even if they are non-conflicting.</p>
    /// <p>You can't modify your stack set's execution configuration while there are running or queued operations for that stack set.</p>
    /// </note>
    /// <p>When <code>false</code> (default), StackSets performs one operation at a time in request order.</p>
    #[doc(hidden)]
    pub active: std::option::Option<bool>,
}
impl ManagedExecution {
    /// <p>When <code>true</code>, StackSets performs non-conflicting operations concurrently and queues conflicting operations. After conflicting operations finish, StackSets starts queued operations in request order.</p> <note>
    /// <p>If there are already running or queued operations, StackSets queues all incoming operations even if they are non-conflicting.</p>
    /// <p>You can't modify your stack set's execution configuration while there are running or queued operations for that stack set.</p>
    /// </note>
    /// <p>When <code>false</code> (default), StackSets performs one operation at a time in request order.</p>
    pub fn active(&self) -> std::option::Option<bool> {
        self.active
    }
}
impl ManagedExecution {
    /// Creates a new builder-style object to manufacture [`ManagedExecution`](crate::types::ManagedExecution).
    pub fn builder() -> crate::types::builders::ManagedExecutionBuilder {
        crate::types::builders::ManagedExecutionBuilder::default()
    }
}

/// A builder for [`ManagedExecution`](crate::types::ManagedExecution).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ManagedExecutionBuilder {
    pub(crate) active: std::option::Option<bool>,
}
impl ManagedExecutionBuilder {
    /// <p>When <code>true</code>, StackSets performs non-conflicting operations concurrently and queues conflicting operations. After conflicting operations finish, StackSets starts queued operations in request order.</p> <note>
    /// <p>If there are already running or queued operations, StackSets queues all incoming operations even if they are non-conflicting.</p>
    /// <p>You can't modify your stack set's execution configuration while there are running or queued operations for that stack set.</p>
    /// </note>
    /// <p>When <code>false</code> (default), StackSets performs one operation at a time in request order.</p>
    pub fn active(mut self, input: bool) -> Self {
        self.active = Some(input);
        self
    }
    /// <p>When <code>true</code>, StackSets performs non-conflicting operations concurrently and queues conflicting operations. After conflicting operations finish, StackSets starts queued operations in request order.</p> <note>
    /// <p>If there are already running or queued operations, StackSets queues all incoming operations even if they are non-conflicting.</p>
    /// <p>You can't modify your stack set's execution configuration while there are running or queued operations for that stack set.</p>
    /// </note>
    /// <p>When <code>false</code> (default), StackSets performs one operation at a time in request order.</p>
    pub fn set_active(mut self, input: std::option::Option<bool>) -> Self {
        self.active = input;
        self
    }
    /// Consumes the builder and constructs a [`ManagedExecution`](crate::types::ManagedExecution).
    pub fn build(self) -> crate::types::ManagedExecution {
        crate::types::ManagedExecution {
            active: self.active,
        }
    }
}
