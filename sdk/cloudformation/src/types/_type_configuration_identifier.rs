// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Identifying information for the configuration of a CloudFormation extension.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TypeConfigurationIdentifier {
    /// <p>The Amazon Resource Name (ARN) for the extension, in this account and region.</p>
    /// <p>For public extensions, this will be the ARN assigned when you <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_ActivateType.html">activate the type</a> in this account and region. For private extensions, this will be the ARN assigned when you <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_RegisterType.html">register the type</a> in this account and region.</p>
    #[doc(hidden)]
    pub type_arn: std::option::Option<std::string::String>,
    /// <p>The alias specified for this configuration, if one was specified when the configuration was set.</p>
    #[doc(hidden)]
    pub type_configuration_alias: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) for the configuration, in this account and region.</p>
    #[doc(hidden)]
    pub type_configuration_arn: std::option::Option<std::string::String>,
    /// <p>The type of extension.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::ThirdPartyType>,
    /// <p>The name of the extension type to which this configuration applies.</p>
    #[doc(hidden)]
    pub type_name: std::option::Option<std::string::String>,
}
impl TypeConfigurationIdentifier {
    /// <p>The Amazon Resource Name (ARN) for the extension, in this account and region.</p>
    /// <p>For public extensions, this will be the ARN assigned when you <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_ActivateType.html">activate the type</a> in this account and region. For private extensions, this will be the ARN assigned when you <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_RegisterType.html">register the type</a> in this account and region.</p>
    pub fn type_arn(&self) -> std::option::Option<&str> {
        self.type_arn.as_deref()
    }
    /// <p>The alias specified for this configuration, if one was specified when the configuration was set.</p>
    pub fn type_configuration_alias(&self) -> std::option::Option<&str> {
        self.type_configuration_alias.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) for the configuration, in this account and region.</p>
    pub fn type_configuration_arn(&self) -> std::option::Option<&str> {
        self.type_configuration_arn.as_deref()
    }
    /// <p>The type of extension.</p>
    pub fn r#type(&self) -> std::option::Option<&crate::types::ThirdPartyType> {
        self.r#type.as_ref()
    }
    /// <p>The name of the extension type to which this configuration applies.</p>
    pub fn type_name(&self) -> std::option::Option<&str> {
        self.type_name.as_deref()
    }
}
impl TypeConfigurationIdentifier {
    /// Creates a new builder-style object to manufacture [`TypeConfigurationIdentifier`](crate::types::TypeConfigurationIdentifier).
    pub fn builder() -> crate::types::builders::TypeConfigurationIdentifierBuilder {
        crate::types::builders::TypeConfigurationIdentifierBuilder::default()
    }
}

/// A builder for [`TypeConfigurationIdentifier`](crate::types::TypeConfigurationIdentifier).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TypeConfigurationIdentifierBuilder {
    pub(crate) type_arn: std::option::Option<std::string::String>,
    pub(crate) type_configuration_alias: std::option::Option<std::string::String>,
    pub(crate) type_configuration_arn: std::option::Option<std::string::String>,
    pub(crate) r#type: std::option::Option<crate::types::ThirdPartyType>,
    pub(crate) type_name: std::option::Option<std::string::String>,
}
impl TypeConfigurationIdentifierBuilder {
    /// <p>The Amazon Resource Name (ARN) for the extension, in this account and region.</p>
    /// <p>For public extensions, this will be the ARN assigned when you <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_ActivateType.html">activate the type</a> in this account and region. For private extensions, this will be the ARN assigned when you <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_RegisterType.html">register the type</a> in this account and region.</p>
    pub fn type_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.type_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the extension, in this account and region.</p>
    /// <p>For public extensions, this will be the ARN assigned when you <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_ActivateType.html">activate the type</a> in this account and region. For private extensions, this will be the ARN assigned when you <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_RegisterType.html">register the type</a> in this account and region.</p>
    pub fn set_type_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.type_arn = input;
        self
    }
    /// <p>The alias specified for this configuration, if one was specified when the configuration was set.</p>
    pub fn type_configuration_alias(mut self, input: impl Into<std::string::String>) -> Self {
        self.type_configuration_alias = Some(input.into());
        self
    }
    /// <p>The alias specified for this configuration, if one was specified when the configuration was set.</p>
    pub fn set_type_configuration_alias(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.type_configuration_alias = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the configuration, in this account and region.</p>
    pub fn type_configuration_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.type_configuration_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the configuration, in this account and region.</p>
    pub fn set_type_configuration_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.type_configuration_arn = input;
        self
    }
    /// <p>The type of extension.</p>
    pub fn r#type(mut self, input: crate::types::ThirdPartyType) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p>The type of extension.</p>
    pub fn set_type(mut self, input: std::option::Option<crate::types::ThirdPartyType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The name of the extension type to which this configuration applies.</p>
    pub fn type_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.type_name = Some(input.into());
        self
    }
    /// <p>The name of the extension type to which this configuration applies.</p>
    pub fn set_type_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.type_name = input;
        self
    }
    /// Consumes the builder and constructs a [`TypeConfigurationIdentifier`](crate::types::TypeConfigurationIdentifier).
    pub fn build(self) -> crate::types::TypeConfigurationIdentifier {
        crate::types::TypeConfigurationIdentifier {
            type_arn: self.type_arn,
            type_configuration_alias: self.type_configuration_alias,
            type_configuration_arn: self.type_configuration_arn,
            r#type: self.r#type,
            type_name: self.type_name,
        }
    }
}
