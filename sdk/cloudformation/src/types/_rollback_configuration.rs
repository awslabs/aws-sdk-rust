// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Structure containing the rollback triggers for CloudFormation to monitor during stack creation and updating operations, and for the specified monitoring period afterwards.</p>
/// <p>Rollback triggers enable you to have CloudFormation monitor the state of your application during stack creation and updating, and to roll back that operation if the application breaches the threshold of any of the alarms you've specified. For more information, see <a href="http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-rollback-triggers.html">Monitor and Roll Back Stack Operations</a>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RollbackConfiguration {
    /// <p>The triggers to monitor during stack creation or update actions.</p>
    /// <p>By default, CloudFormation saves the rollback triggers specified for a stack and applies them to any subsequent update operations for the stack, unless you specify otherwise. If you do specify rollback triggers for this parameter, those triggers replace any list of triggers previously specified for the stack. This means:</p>
    /// <ul>
    /// <li> <p>To use the rollback triggers previously specified for this stack, if any, don't specify this parameter.</p> </li>
    /// <li> <p>To specify new or updated rollback triggers, you must specify <i>all</i> the triggers that you want used for this stack, even triggers you've specified before (for example, when creating the stack or during a previous stack update). Any triggers that you don't include in the updated list of triggers are no longer applied to the stack.</p> </li>
    /// <li> <p>To remove all currently specified triggers, specify an empty list for this parameter.</p> </li>
    /// </ul>
    /// <p>If a specified trigger is missing, the entire stack operation fails and is rolled back.</p>
    #[doc(hidden)]
    pub rollback_triggers: std::option::Option<std::vec::Vec<crate::types::RollbackTrigger>>,
    /// <p>The amount of time, in minutes, during which CloudFormation should monitor all the rollback triggers after the stack creation or update operation deploys all necessary resources.</p>
    /// <p>The default is 0 minutes.</p>
    /// <p>If you specify a monitoring period but don't specify any rollback triggers, CloudFormation still waits the specified period of time before cleaning up old resources after update operations. You can use this monitoring period to perform any manual stack validation desired, and manually cancel the stack creation or update (using <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_CancelUpdateStack.html">CancelUpdateStack</a>, for example) as necessary.</p>
    /// <p>If you specify 0 for this parameter, CloudFormation still monitors the specified rollback triggers during stack creation and update operations. Then, for update operations, it begins disposing of old resources immediately once the operation completes.</p>
    #[doc(hidden)]
    pub monitoring_time_in_minutes: std::option::Option<i32>,
}
impl RollbackConfiguration {
    /// <p>The triggers to monitor during stack creation or update actions.</p>
    /// <p>By default, CloudFormation saves the rollback triggers specified for a stack and applies them to any subsequent update operations for the stack, unless you specify otherwise. If you do specify rollback triggers for this parameter, those triggers replace any list of triggers previously specified for the stack. This means:</p>
    /// <ul>
    /// <li> <p>To use the rollback triggers previously specified for this stack, if any, don't specify this parameter.</p> </li>
    /// <li> <p>To specify new or updated rollback triggers, you must specify <i>all</i> the triggers that you want used for this stack, even triggers you've specified before (for example, when creating the stack or during a previous stack update). Any triggers that you don't include in the updated list of triggers are no longer applied to the stack.</p> </li>
    /// <li> <p>To remove all currently specified triggers, specify an empty list for this parameter.</p> </li>
    /// </ul>
    /// <p>If a specified trigger is missing, the entire stack operation fails and is rolled back.</p>
    pub fn rollback_triggers(&self) -> std::option::Option<&[crate::types::RollbackTrigger]> {
        self.rollback_triggers.as_deref()
    }
    /// <p>The amount of time, in minutes, during which CloudFormation should monitor all the rollback triggers after the stack creation or update operation deploys all necessary resources.</p>
    /// <p>The default is 0 minutes.</p>
    /// <p>If you specify a monitoring period but don't specify any rollback triggers, CloudFormation still waits the specified period of time before cleaning up old resources after update operations. You can use this monitoring period to perform any manual stack validation desired, and manually cancel the stack creation or update (using <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_CancelUpdateStack.html">CancelUpdateStack</a>, for example) as necessary.</p>
    /// <p>If you specify 0 for this parameter, CloudFormation still monitors the specified rollback triggers during stack creation and update operations. Then, for update operations, it begins disposing of old resources immediately once the operation completes.</p>
    pub fn monitoring_time_in_minutes(&self) -> std::option::Option<i32> {
        self.monitoring_time_in_minutes
    }
}
impl RollbackConfiguration {
    /// Creates a new builder-style object to manufacture [`RollbackConfiguration`](crate::types::RollbackConfiguration).
    pub fn builder() -> crate::types::builders::RollbackConfigurationBuilder {
        crate::types::builders::RollbackConfigurationBuilder::default()
    }
}

/// A builder for [`RollbackConfiguration`](crate::types::RollbackConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RollbackConfigurationBuilder {
    pub(crate) rollback_triggers: std::option::Option<std::vec::Vec<crate::types::RollbackTrigger>>,
    pub(crate) monitoring_time_in_minutes: std::option::Option<i32>,
}
impl RollbackConfigurationBuilder {
    /// Appends an item to `rollback_triggers`.
    ///
    /// To override the contents of this collection use [`set_rollback_triggers`](Self::set_rollback_triggers).
    ///
    /// <p>The triggers to monitor during stack creation or update actions.</p>
    /// <p>By default, CloudFormation saves the rollback triggers specified for a stack and applies them to any subsequent update operations for the stack, unless you specify otherwise. If you do specify rollback triggers for this parameter, those triggers replace any list of triggers previously specified for the stack. This means:</p>
    /// <ul>
    /// <li> <p>To use the rollback triggers previously specified for this stack, if any, don't specify this parameter.</p> </li>
    /// <li> <p>To specify new or updated rollback triggers, you must specify <i>all</i> the triggers that you want used for this stack, even triggers you've specified before (for example, when creating the stack or during a previous stack update). Any triggers that you don't include in the updated list of triggers are no longer applied to the stack.</p> </li>
    /// <li> <p>To remove all currently specified triggers, specify an empty list for this parameter.</p> </li>
    /// </ul>
    /// <p>If a specified trigger is missing, the entire stack operation fails and is rolled back.</p>
    pub fn rollback_triggers(mut self, input: crate::types::RollbackTrigger) -> Self {
        let mut v = self.rollback_triggers.unwrap_or_default();
        v.push(input);
        self.rollback_triggers = Some(v);
        self
    }
    /// <p>The triggers to monitor during stack creation or update actions.</p>
    /// <p>By default, CloudFormation saves the rollback triggers specified for a stack and applies them to any subsequent update operations for the stack, unless you specify otherwise. If you do specify rollback triggers for this parameter, those triggers replace any list of triggers previously specified for the stack. This means:</p>
    /// <ul>
    /// <li> <p>To use the rollback triggers previously specified for this stack, if any, don't specify this parameter.</p> </li>
    /// <li> <p>To specify new or updated rollback triggers, you must specify <i>all</i> the triggers that you want used for this stack, even triggers you've specified before (for example, when creating the stack or during a previous stack update). Any triggers that you don't include in the updated list of triggers are no longer applied to the stack.</p> </li>
    /// <li> <p>To remove all currently specified triggers, specify an empty list for this parameter.</p> </li>
    /// </ul>
    /// <p>If a specified trigger is missing, the entire stack operation fails and is rolled back.</p>
    pub fn set_rollback_triggers(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::RollbackTrigger>>,
    ) -> Self {
        self.rollback_triggers = input;
        self
    }
    /// <p>The amount of time, in minutes, during which CloudFormation should monitor all the rollback triggers after the stack creation or update operation deploys all necessary resources.</p>
    /// <p>The default is 0 minutes.</p>
    /// <p>If you specify a monitoring period but don't specify any rollback triggers, CloudFormation still waits the specified period of time before cleaning up old resources after update operations. You can use this monitoring period to perform any manual stack validation desired, and manually cancel the stack creation or update (using <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_CancelUpdateStack.html">CancelUpdateStack</a>, for example) as necessary.</p>
    /// <p>If you specify 0 for this parameter, CloudFormation still monitors the specified rollback triggers during stack creation and update operations. Then, for update operations, it begins disposing of old resources immediately once the operation completes.</p>
    pub fn monitoring_time_in_minutes(mut self, input: i32) -> Self {
        self.monitoring_time_in_minutes = Some(input);
        self
    }
    /// <p>The amount of time, in minutes, during which CloudFormation should monitor all the rollback triggers after the stack creation or update operation deploys all necessary resources.</p>
    /// <p>The default is 0 minutes.</p>
    /// <p>If you specify a monitoring period but don't specify any rollback triggers, CloudFormation still waits the specified period of time before cleaning up old resources after update operations. You can use this monitoring period to perform any manual stack validation desired, and manually cancel the stack creation or update (using <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_CancelUpdateStack.html">CancelUpdateStack</a>, for example) as necessary.</p>
    /// <p>If you specify 0 for this parameter, CloudFormation still monitors the specified rollback triggers during stack creation and update operations. Then, for update operations, it begins disposing of old resources immediately once the operation completes.</p>
    pub fn set_monitoring_time_in_minutes(mut self, input: std::option::Option<i32>) -> Self {
        self.monitoring_time_in_minutes = input;
        self
    }
    /// Consumes the builder and constructs a [`RollbackConfiguration`](crate::types::RollbackConfiguration).
    pub fn build(self) -> crate::types::RollbackConfiguration {
        crate::types::RollbackConfiguration {
            rollback_triggers: self.rollback_triggers,
            monitoring_time_in_minutes: self.monitoring_time_in_minutes,
        }
    }
}
