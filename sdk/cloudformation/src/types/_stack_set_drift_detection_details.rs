// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Detailed information about the drift status of the stack set.</p>
/// <p>For stack sets, contains information about the last <i>completed</i> drift operation performed on the stack set. Information about drift operations in-progress isn't included.</p>
/// <p>For stack set operations, includes information about drift operations currently being performed on the stack set.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-drift.html">Detecting unmanaged changes in stack sets</a> in the <i>CloudFormation User Guide</i>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StackSetDriftDetectionDetails {
    /// <p>Status of the stack set's actual configuration compared to its expected template and parameter configuration. A stack set is considered to have drifted if one or more of its stack instances have drifted from their expected template and parameter configuration.</p>
    /// <ul>
    /// <li> <p> <code>DRIFTED</code>: One or more of the stack instances belonging to the stack set stack differs from the expected template and parameter configuration. A stack instance is considered to have drifted if one or more of the resources in the associated stack have drifted.</p> </li>
    /// <li> <p> <code>NOT_CHECKED</code>: CloudFormation hasn't checked the stack set for drift.</p> </li>
    /// <li> <p> <code>IN_SYNC</code>: All of the stack instances belonging to the stack set stack match from the expected template and parameter configuration.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub drift_status: std::option::Option<crate::types::StackSetDriftStatus>,
    /// <p>The status of the stack set drift detection operation.</p>
    /// <ul>
    /// <li> <p> <code>COMPLETED</code>: The drift detection operation completed without failing on any stack instances.</p> </li>
    /// <li> <p> <code>FAILED</code>: The drift detection operation exceeded the specified failure tolerance.</p> </li>
    /// <li> <p> <code>PARTIAL_SUCCESS</code>: The drift detection operation completed without exceeding the failure tolerance for the operation.</p> </li>
    /// <li> <p> <code>IN_PROGRESS</code>: The drift detection operation is currently being performed.</p> </li>
    /// <li> <p> <code>STOPPED</code>: The user has canceled the drift detection operation.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub drift_detection_status: std::option::Option<crate::types::StackSetDriftDetectionStatus>,
    /// <p>Most recent time when CloudFormation performed a drift detection operation on the stack set. This value will be <code>NULL</code> for any stack set on which drift detection hasn't yet been performed.</p>
    #[doc(hidden)]
    pub last_drift_check_timestamp: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The total number of stack instances belonging to this stack set.</p>
    /// <p>The total number of stack instances is equal to the total of:</p>
    /// <ul>
    /// <li> <p>Stack instances that match the stack set configuration.</p> </li>
    /// <li> <p>Stack instances that have drifted from the stack set configuration.</p> </li>
    /// <li> <p>Stack instances where the drift detection operation has failed.</p> </li>
    /// <li> <p>Stack instances currently being checked for drift.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub total_stack_instances_count: i32,
    /// <p>The number of stack instances that have drifted from the expected template and parameter configuration of the stack set. A stack instance is considered to have drifted if one or more of the resources in the associated stack don't match their expected configuration.</p>
    #[doc(hidden)]
    pub drifted_stack_instances_count: i32,
    /// <p>The number of stack instances which match the expected template and parameter configuration of the stack set.</p>
    #[doc(hidden)]
    pub in_sync_stack_instances_count: i32,
    /// <p>The number of stack instances that are currently being checked for drift.</p>
    #[doc(hidden)]
    pub in_progress_stack_instances_count: i32,
    /// <p>The number of stack instances for which the drift detection operation failed.</p>
    #[doc(hidden)]
    pub failed_stack_instances_count: i32,
}
impl StackSetDriftDetectionDetails {
    /// <p>Status of the stack set's actual configuration compared to its expected template and parameter configuration. A stack set is considered to have drifted if one or more of its stack instances have drifted from their expected template and parameter configuration.</p>
    /// <ul>
    /// <li> <p> <code>DRIFTED</code>: One or more of the stack instances belonging to the stack set stack differs from the expected template and parameter configuration. A stack instance is considered to have drifted if one or more of the resources in the associated stack have drifted.</p> </li>
    /// <li> <p> <code>NOT_CHECKED</code>: CloudFormation hasn't checked the stack set for drift.</p> </li>
    /// <li> <p> <code>IN_SYNC</code>: All of the stack instances belonging to the stack set stack match from the expected template and parameter configuration.</p> </li>
    /// </ul>
    pub fn drift_status(&self) -> std::option::Option<&crate::types::StackSetDriftStatus> {
        self.drift_status.as_ref()
    }
    /// <p>The status of the stack set drift detection operation.</p>
    /// <ul>
    /// <li> <p> <code>COMPLETED</code>: The drift detection operation completed without failing on any stack instances.</p> </li>
    /// <li> <p> <code>FAILED</code>: The drift detection operation exceeded the specified failure tolerance.</p> </li>
    /// <li> <p> <code>PARTIAL_SUCCESS</code>: The drift detection operation completed without exceeding the failure tolerance for the operation.</p> </li>
    /// <li> <p> <code>IN_PROGRESS</code>: The drift detection operation is currently being performed.</p> </li>
    /// <li> <p> <code>STOPPED</code>: The user has canceled the drift detection operation.</p> </li>
    /// </ul>
    pub fn drift_detection_status(
        &self,
    ) -> std::option::Option<&crate::types::StackSetDriftDetectionStatus> {
        self.drift_detection_status.as_ref()
    }
    /// <p>Most recent time when CloudFormation performed a drift detection operation on the stack set. This value will be <code>NULL</code> for any stack set on which drift detection hasn't yet been performed.</p>
    pub fn last_drift_check_timestamp(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_drift_check_timestamp.as_ref()
    }
    /// <p>The total number of stack instances belonging to this stack set.</p>
    /// <p>The total number of stack instances is equal to the total of:</p>
    /// <ul>
    /// <li> <p>Stack instances that match the stack set configuration.</p> </li>
    /// <li> <p>Stack instances that have drifted from the stack set configuration.</p> </li>
    /// <li> <p>Stack instances where the drift detection operation has failed.</p> </li>
    /// <li> <p>Stack instances currently being checked for drift.</p> </li>
    /// </ul>
    pub fn total_stack_instances_count(&self) -> i32 {
        self.total_stack_instances_count
    }
    /// <p>The number of stack instances that have drifted from the expected template and parameter configuration of the stack set. A stack instance is considered to have drifted if one or more of the resources in the associated stack don't match their expected configuration.</p>
    pub fn drifted_stack_instances_count(&self) -> i32 {
        self.drifted_stack_instances_count
    }
    /// <p>The number of stack instances which match the expected template and parameter configuration of the stack set.</p>
    pub fn in_sync_stack_instances_count(&self) -> i32 {
        self.in_sync_stack_instances_count
    }
    /// <p>The number of stack instances that are currently being checked for drift.</p>
    pub fn in_progress_stack_instances_count(&self) -> i32 {
        self.in_progress_stack_instances_count
    }
    /// <p>The number of stack instances for which the drift detection operation failed.</p>
    pub fn failed_stack_instances_count(&self) -> i32 {
        self.failed_stack_instances_count
    }
}
impl StackSetDriftDetectionDetails {
    /// Creates a new builder-style object to manufacture [`StackSetDriftDetectionDetails`](crate::types::StackSetDriftDetectionDetails).
    pub fn builder() -> crate::types::builders::StackSetDriftDetectionDetailsBuilder {
        crate::types::builders::StackSetDriftDetectionDetailsBuilder::default()
    }
}

/// A builder for [`StackSetDriftDetectionDetails`](crate::types::StackSetDriftDetectionDetails).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct StackSetDriftDetectionDetailsBuilder {
    pub(crate) drift_status: std::option::Option<crate::types::StackSetDriftStatus>,
    pub(crate) drift_detection_status:
        std::option::Option<crate::types::StackSetDriftDetectionStatus>,
    pub(crate) last_drift_check_timestamp: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) total_stack_instances_count: std::option::Option<i32>,
    pub(crate) drifted_stack_instances_count: std::option::Option<i32>,
    pub(crate) in_sync_stack_instances_count: std::option::Option<i32>,
    pub(crate) in_progress_stack_instances_count: std::option::Option<i32>,
    pub(crate) failed_stack_instances_count: std::option::Option<i32>,
}
impl StackSetDriftDetectionDetailsBuilder {
    /// <p>Status of the stack set's actual configuration compared to its expected template and parameter configuration. A stack set is considered to have drifted if one or more of its stack instances have drifted from their expected template and parameter configuration.</p>
    /// <ul>
    /// <li> <p> <code>DRIFTED</code>: One or more of the stack instances belonging to the stack set stack differs from the expected template and parameter configuration. A stack instance is considered to have drifted if one or more of the resources in the associated stack have drifted.</p> </li>
    /// <li> <p> <code>NOT_CHECKED</code>: CloudFormation hasn't checked the stack set for drift.</p> </li>
    /// <li> <p> <code>IN_SYNC</code>: All of the stack instances belonging to the stack set stack match from the expected template and parameter configuration.</p> </li>
    /// </ul>
    pub fn drift_status(mut self, input: crate::types::StackSetDriftStatus) -> Self {
        self.drift_status = Some(input);
        self
    }
    /// <p>Status of the stack set's actual configuration compared to its expected template and parameter configuration. A stack set is considered to have drifted if one or more of its stack instances have drifted from their expected template and parameter configuration.</p>
    /// <ul>
    /// <li> <p> <code>DRIFTED</code>: One or more of the stack instances belonging to the stack set stack differs from the expected template and parameter configuration. A stack instance is considered to have drifted if one or more of the resources in the associated stack have drifted.</p> </li>
    /// <li> <p> <code>NOT_CHECKED</code>: CloudFormation hasn't checked the stack set for drift.</p> </li>
    /// <li> <p> <code>IN_SYNC</code>: All of the stack instances belonging to the stack set stack match from the expected template and parameter configuration.</p> </li>
    /// </ul>
    pub fn set_drift_status(
        mut self,
        input: std::option::Option<crate::types::StackSetDriftStatus>,
    ) -> Self {
        self.drift_status = input;
        self
    }
    /// <p>The status of the stack set drift detection operation.</p>
    /// <ul>
    /// <li> <p> <code>COMPLETED</code>: The drift detection operation completed without failing on any stack instances.</p> </li>
    /// <li> <p> <code>FAILED</code>: The drift detection operation exceeded the specified failure tolerance.</p> </li>
    /// <li> <p> <code>PARTIAL_SUCCESS</code>: The drift detection operation completed without exceeding the failure tolerance for the operation.</p> </li>
    /// <li> <p> <code>IN_PROGRESS</code>: The drift detection operation is currently being performed.</p> </li>
    /// <li> <p> <code>STOPPED</code>: The user has canceled the drift detection operation.</p> </li>
    /// </ul>
    pub fn drift_detection_status(
        mut self,
        input: crate::types::StackSetDriftDetectionStatus,
    ) -> Self {
        self.drift_detection_status = Some(input);
        self
    }
    /// <p>The status of the stack set drift detection operation.</p>
    /// <ul>
    /// <li> <p> <code>COMPLETED</code>: The drift detection operation completed without failing on any stack instances.</p> </li>
    /// <li> <p> <code>FAILED</code>: The drift detection operation exceeded the specified failure tolerance.</p> </li>
    /// <li> <p> <code>PARTIAL_SUCCESS</code>: The drift detection operation completed without exceeding the failure tolerance for the operation.</p> </li>
    /// <li> <p> <code>IN_PROGRESS</code>: The drift detection operation is currently being performed.</p> </li>
    /// <li> <p> <code>STOPPED</code>: The user has canceled the drift detection operation.</p> </li>
    /// </ul>
    pub fn set_drift_detection_status(
        mut self,
        input: std::option::Option<crate::types::StackSetDriftDetectionStatus>,
    ) -> Self {
        self.drift_detection_status = input;
        self
    }
    /// <p>Most recent time when CloudFormation performed a drift detection operation on the stack set. This value will be <code>NULL</code> for any stack set on which drift detection hasn't yet been performed.</p>
    pub fn last_drift_check_timestamp(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_drift_check_timestamp = Some(input);
        self
    }
    /// <p>Most recent time when CloudFormation performed a drift detection operation on the stack set. This value will be <code>NULL</code> for any stack set on which drift detection hasn't yet been performed.</p>
    pub fn set_last_drift_check_timestamp(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_drift_check_timestamp = input;
        self
    }
    /// <p>The total number of stack instances belonging to this stack set.</p>
    /// <p>The total number of stack instances is equal to the total of:</p>
    /// <ul>
    /// <li> <p>Stack instances that match the stack set configuration.</p> </li>
    /// <li> <p>Stack instances that have drifted from the stack set configuration.</p> </li>
    /// <li> <p>Stack instances where the drift detection operation has failed.</p> </li>
    /// <li> <p>Stack instances currently being checked for drift.</p> </li>
    /// </ul>
    pub fn total_stack_instances_count(mut self, input: i32) -> Self {
        self.total_stack_instances_count = Some(input);
        self
    }
    /// <p>The total number of stack instances belonging to this stack set.</p>
    /// <p>The total number of stack instances is equal to the total of:</p>
    /// <ul>
    /// <li> <p>Stack instances that match the stack set configuration.</p> </li>
    /// <li> <p>Stack instances that have drifted from the stack set configuration.</p> </li>
    /// <li> <p>Stack instances where the drift detection operation has failed.</p> </li>
    /// <li> <p>Stack instances currently being checked for drift.</p> </li>
    /// </ul>
    pub fn set_total_stack_instances_count(mut self, input: std::option::Option<i32>) -> Self {
        self.total_stack_instances_count = input;
        self
    }
    /// <p>The number of stack instances that have drifted from the expected template and parameter configuration of the stack set. A stack instance is considered to have drifted if one or more of the resources in the associated stack don't match their expected configuration.</p>
    pub fn drifted_stack_instances_count(mut self, input: i32) -> Self {
        self.drifted_stack_instances_count = Some(input);
        self
    }
    /// <p>The number of stack instances that have drifted from the expected template and parameter configuration of the stack set. A stack instance is considered to have drifted if one or more of the resources in the associated stack don't match their expected configuration.</p>
    pub fn set_drifted_stack_instances_count(mut self, input: std::option::Option<i32>) -> Self {
        self.drifted_stack_instances_count = input;
        self
    }
    /// <p>The number of stack instances which match the expected template and parameter configuration of the stack set.</p>
    pub fn in_sync_stack_instances_count(mut self, input: i32) -> Self {
        self.in_sync_stack_instances_count = Some(input);
        self
    }
    /// <p>The number of stack instances which match the expected template and parameter configuration of the stack set.</p>
    pub fn set_in_sync_stack_instances_count(mut self, input: std::option::Option<i32>) -> Self {
        self.in_sync_stack_instances_count = input;
        self
    }
    /// <p>The number of stack instances that are currently being checked for drift.</p>
    pub fn in_progress_stack_instances_count(mut self, input: i32) -> Self {
        self.in_progress_stack_instances_count = Some(input);
        self
    }
    /// <p>The number of stack instances that are currently being checked for drift.</p>
    pub fn set_in_progress_stack_instances_count(
        mut self,
        input: std::option::Option<i32>,
    ) -> Self {
        self.in_progress_stack_instances_count = input;
        self
    }
    /// <p>The number of stack instances for which the drift detection operation failed.</p>
    pub fn failed_stack_instances_count(mut self, input: i32) -> Self {
        self.failed_stack_instances_count = Some(input);
        self
    }
    /// <p>The number of stack instances for which the drift detection operation failed.</p>
    pub fn set_failed_stack_instances_count(mut self, input: std::option::Option<i32>) -> Self {
        self.failed_stack_instances_count = input;
        self
    }
    /// Consumes the builder and constructs a [`StackSetDriftDetectionDetails`](crate::types::StackSetDriftDetectionDetails).
    pub fn build(self) -> crate::types::StackSetDriftDetectionDetails {
        crate::types::StackSetDriftDetectionDetails {
            drift_status: self.drift_status,
            drift_detection_status: self.drift_detection_status,
            last_drift_check_timestamp: self.last_drift_check_timestamp,
            total_stack_instances_count: self.total_stack_instances_count.unwrap_or_default(),
            drifted_stack_instances_count: self.drifted_stack_instances_count.unwrap_or_default(),
            in_sync_stack_instances_count: self.in_sync_stack_instances_count.unwrap_or_default(),
            in_progress_stack_instances_count: self
                .in_progress_stack_instances_count
                .unwrap_or_default(),
            failed_stack_instances_count: self.failed_stack_instances_count.unwrap_or_default(),
        }
    }
}
