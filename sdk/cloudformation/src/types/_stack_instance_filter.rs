// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The filter to apply to stack instances</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StackInstanceFilter {
    /// <p>The type of filter to apply.</p>
    #[doc(hidden)]
    pub name: std::option::Option<crate::types::StackInstanceFilterName>,
    /// <p>The status to filter by.</p>
    #[doc(hidden)]
    pub values: std::option::Option<std::string::String>,
}
impl StackInstanceFilter {
    /// <p>The type of filter to apply.</p>
    pub fn name(&self) -> std::option::Option<&crate::types::StackInstanceFilterName> {
        self.name.as_ref()
    }
    /// <p>The status to filter by.</p>
    pub fn values(&self) -> std::option::Option<&str> {
        self.values.as_deref()
    }
}
impl StackInstanceFilter {
    /// Creates a new builder-style object to manufacture [`StackInstanceFilter`](crate::types::StackInstanceFilter).
    pub fn builder() -> crate::types::builders::StackInstanceFilterBuilder {
        crate::types::builders::StackInstanceFilterBuilder::default()
    }
}

/// A builder for [`StackInstanceFilter`](crate::types::StackInstanceFilter).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct StackInstanceFilterBuilder {
    pub(crate) name: std::option::Option<crate::types::StackInstanceFilterName>,
    pub(crate) values: std::option::Option<std::string::String>,
}
impl StackInstanceFilterBuilder {
    /// <p>The type of filter to apply.</p>
    pub fn name(mut self, input: crate::types::StackInstanceFilterName) -> Self {
        self.name = Some(input);
        self
    }
    /// <p>The type of filter to apply.</p>
    pub fn set_name(
        mut self,
        input: std::option::Option<crate::types::StackInstanceFilterName>,
    ) -> Self {
        self.name = input;
        self
    }
    /// <p>The status to filter by.</p>
    pub fn values(mut self, input: impl Into<std::string::String>) -> Self {
        self.values = Some(input.into());
        self
    }
    /// <p>The status to filter by.</p>
    pub fn set_values(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.values = input;
        self
    }
    /// Consumes the builder and constructs a [`StackInstanceFilter`](crate::types::StackInstanceFilter).
    pub fn build(self) -> crate::types::StackInstanceFilter {
        crate::types::StackInstanceFilter {
            name: self.name,
            values: self.values,
        }
    }
}
