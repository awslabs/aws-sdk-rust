// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The structures that contain summary information about the specified operation.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StackSetOperationSummary {
    /// <p>The unique ID of the stack set operation.</p>
    #[doc(hidden)]
    pub operation_id: std::option::Option<std::string::String>,
    /// <p>The type of operation: <code>CREATE</code>, <code>UPDATE</code>, or <code>DELETE</code>. Create and delete operations affect only the specified stack instances that are associated with the specified stack set. Update operations affect both the stack set itself and <i>all</i> associated stack set instances.</p>
    #[doc(hidden)]
    pub action: std::option::Option<crate::types::StackSetOperationAction>,
    /// <p>The overall status of the operation.</p>
    /// <ul>
    /// <li> <p> <code>FAILED</code>: The operation exceeded the specified failure tolerance. The failure tolerance value that you've set for an operation is applied for each Region during stack create and update operations. If the number of failed stacks within a Region exceeds the failure tolerance, the status of the operation in the Region is set to <code>FAILED</code>. This in turn sets the status of the operation as a whole to <code>FAILED</code>, and CloudFormation cancels the operation in any remaining Regions.</p> </li>
    /// <li> <p> <code>QUEUED</code>: [Service-managed permissions] For automatic deployments that require a sequence of operations, the operation is queued to be performed. For more information, see the <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-concepts.html#stackset-status-codes">stack set operation status codes</a> in the CloudFormation User Guide.</p> </li>
    /// <li> <p> <code>RUNNING</code>: The operation is currently being performed.</p> </li>
    /// <li> <p> <code>STOPPED</code>: The user has canceled the operation.</p> </li>
    /// <li> <p> <code>STOPPING</code>: The operation is in the process of stopping, at user request.</p> </li>
    /// <li> <p> <code>SUCCEEDED</code>: The operation completed creating or updating all the specified stacks without exceeding the failure tolerance for the operation.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::StackSetOperationStatus>,
    /// <p>The time at which the operation was initiated. Note that the creation times for the stack set operation might differ from the creation time of the individual stacks themselves. This is because CloudFormation needs to perform preparatory work for the operation, such as dispatching the work to the requested Regions, before actually creating the first stacks.</p>
    #[doc(hidden)]
    pub creation_timestamp: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The time at which the stack set operation ended, across all accounts and Regions specified. Note that this doesn't necessarily mean that the stack set operation was successful, or even attempted, in each account or Region.</p>
    #[doc(hidden)]
    pub end_timestamp: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The status of the operation in details.</p>
    #[doc(hidden)]
    pub status_reason: std::option::Option<std::string::String>,
    /// <p>Detailed information about the stack set operation.</p>
    #[doc(hidden)]
    pub status_details: std::option::Option<crate::types::StackSetOperationStatusDetails>,
    /// <p>The user-specified preferences for how CloudFormation performs a stack set operation.</p>
    /// <p>For more information about maximum concurrent accounts and failure tolerance, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-concepts.html#stackset-ops-options">Stack set operation options</a>.</p>
    #[doc(hidden)]
    pub operation_preferences: std::option::Option<crate::types::StackSetOperationPreferences>,
}
impl StackSetOperationSummary {
    /// <p>The unique ID of the stack set operation.</p>
    pub fn operation_id(&self) -> std::option::Option<&str> {
        self.operation_id.as_deref()
    }
    /// <p>The type of operation: <code>CREATE</code>, <code>UPDATE</code>, or <code>DELETE</code>. Create and delete operations affect only the specified stack instances that are associated with the specified stack set. Update operations affect both the stack set itself and <i>all</i> associated stack set instances.</p>
    pub fn action(&self) -> std::option::Option<&crate::types::StackSetOperationAction> {
        self.action.as_ref()
    }
    /// <p>The overall status of the operation.</p>
    /// <ul>
    /// <li> <p> <code>FAILED</code>: The operation exceeded the specified failure tolerance. The failure tolerance value that you've set for an operation is applied for each Region during stack create and update operations. If the number of failed stacks within a Region exceeds the failure tolerance, the status of the operation in the Region is set to <code>FAILED</code>. This in turn sets the status of the operation as a whole to <code>FAILED</code>, and CloudFormation cancels the operation in any remaining Regions.</p> </li>
    /// <li> <p> <code>QUEUED</code>: [Service-managed permissions] For automatic deployments that require a sequence of operations, the operation is queued to be performed. For more information, see the <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-concepts.html#stackset-status-codes">stack set operation status codes</a> in the CloudFormation User Guide.</p> </li>
    /// <li> <p> <code>RUNNING</code>: The operation is currently being performed.</p> </li>
    /// <li> <p> <code>STOPPED</code>: The user has canceled the operation.</p> </li>
    /// <li> <p> <code>STOPPING</code>: The operation is in the process of stopping, at user request.</p> </li>
    /// <li> <p> <code>SUCCEEDED</code>: The operation completed creating or updating all the specified stacks without exceeding the failure tolerance for the operation.</p> </li>
    /// </ul>
    pub fn status(&self) -> std::option::Option<&crate::types::StackSetOperationStatus> {
        self.status.as_ref()
    }
    /// <p>The time at which the operation was initiated. Note that the creation times for the stack set operation might differ from the creation time of the individual stacks themselves. This is because CloudFormation needs to perform preparatory work for the operation, such as dispatching the work to the requested Regions, before actually creating the first stacks.</p>
    pub fn creation_timestamp(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_timestamp.as_ref()
    }
    /// <p>The time at which the stack set operation ended, across all accounts and Regions specified. Note that this doesn't necessarily mean that the stack set operation was successful, or even attempted, in each account or Region.</p>
    pub fn end_timestamp(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.end_timestamp.as_ref()
    }
    /// <p>The status of the operation in details.</p>
    pub fn status_reason(&self) -> std::option::Option<&str> {
        self.status_reason.as_deref()
    }
    /// <p>Detailed information about the stack set operation.</p>
    pub fn status_details(
        &self,
    ) -> std::option::Option<&crate::types::StackSetOperationStatusDetails> {
        self.status_details.as_ref()
    }
    /// <p>The user-specified preferences for how CloudFormation performs a stack set operation.</p>
    /// <p>For more information about maximum concurrent accounts and failure tolerance, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-concepts.html#stackset-ops-options">Stack set operation options</a>.</p>
    pub fn operation_preferences(
        &self,
    ) -> std::option::Option<&crate::types::StackSetOperationPreferences> {
        self.operation_preferences.as_ref()
    }
}
impl StackSetOperationSummary {
    /// Creates a new builder-style object to manufacture [`StackSetOperationSummary`](crate::types::StackSetOperationSummary).
    pub fn builder() -> crate::types::builders::StackSetOperationSummaryBuilder {
        crate::types::builders::StackSetOperationSummaryBuilder::default()
    }
}

/// A builder for [`StackSetOperationSummary`](crate::types::StackSetOperationSummary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct StackSetOperationSummaryBuilder {
    pub(crate) operation_id: std::option::Option<std::string::String>,
    pub(crate) action: std::option::Option<crate::types::StackSetOperationAction>,
    pub(crate) status: std::option::Option<crate::types::StackSetOperationStatus>,
    pub(crate) creation_timestamp: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) end_timestamp: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) status_reason: std::option::Option<std::string::String>,
    pub(crate) status_details: std::option::Option<crate::types::StackSetOperationStatusDetails>,
    pub(crate) operation_preferences:
        std::option::Option<crate::types::StackSetOperationPreferences>,
}
impl StackSetOperationSummaryBuilder {
    /// <p>The unique ID of the stack set operation.</p>
    pub fn operation_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.operation_id = Some(input.into());
        self
    }
    /// <p>The unique ID of the stack set operation.</p>
    pub fn set_operation_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.operation_id = input;
        self
    }
    /// <p>The type of operation: <code>CREATE</code>, <code>UPDATE</code>, or <code>DELETE</code>. Create and delete operations affect only the specified stack instances that are associated with the specified stack set. Update operations affect both the stack set itself and <i>all</i> associated stack set instances.</p>
    pub fn action(mut self, input: crate::types::StackSetOperationAction) -> Self {
        self.action = Some(input);
        self
    }
    /// <p>The type of operation: <code>CREATE</code>, <code>UPDATE</code>, or <code>DELETE</code>. Create and delete operations affect only the specified stack instances that are associated with the specified stack set. Update operations affect both the stack set itself and <i>all</i> associated stack set instances.</p>
    pub fn set_action(
        mut self,
        input: std::option::Option<crate::types::StackSetOperationAction>,
    ) -> Self {
        self.action = input;
        self
    }
    /// <p>The overall status of the operation.</p>
    /// <ul>
    /// <li> <p> <code>FAILED</code>: The operation exceeded the specified failure tolerance. The failure tolerance value that you've set for an operation is applied for each Region during stack create and update operations. If the number of failed stacks within a Region exceeds the failure tolerance, the status of the operation in the Region is set to <code>FAILED</code>. This in turn sets the status of the operation as a whole to <code>FAILED</code>, and CloudFormation cancels the operation in any remaining Regions.</p> </li>
    /// <li> <p> <code>QUEUED</code>: [Service-managed permissions] For automatic deployments that require a sequence of operations, the operation is queued to be performed. For more information, see the <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-concepts.html#stackset-status-codes">stack set operation status codes</a> in the CloudFormation User Guide.</p> </li>
    /// <li> <p> <code>RUNNING</code>: The operation is currently being performed.</p> </li>
    /// <li> <p> <code>STOPPED</code>: The user has canceled the operation.</p> </li>
    /// <li> <p> <code>STOPPING</code>: The operation is in the process of stopping, at user request.</p> </li>
    /// <li> <p> <code>SUCCEEDED</code>: The operation completed creating or updating all the specified stacks without exceeding the failure tolerance for the operation.</p> </li>
    /// </ul>
    pub fn status(mut self, input: crate::types::StackSetOperationStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The overall status of the operation.</p>
    /// <ul>
    /// <li> <p> <code>FAILED</code>: The operation exceeded the specified failure tolerance. The failure tolerance value that you've set for an operation is applied for each Region during stack create and update operations. If the number of failed stacks within a Region exceeds the failure tolerance, the status of the operation in the Region is set to <code>FAILED</code>. This in turn sets the status of the operation as a whole to <code>FAILED</code>, and CloudFormation cancels the operation in any remaining Regions.</p> </li>
    /// <li> <p> <code>QUEUED</code>: [Service-managed permissions] For automatic deployments that require a sequence of operations, the operation is queued to be performed. For more information, see the <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-concepts.html#stackset-status-codes">stack set operation status codes</a> in the CloudFormation User Guide.</p> </li>
    /// <li> <p> <code>RUNNING</code>: The operation is currently being performed.</p> </li>
    /// <li> <p> <code>STOPPED</code>: The user has canceled the operation.</p> </li>
    /// <li> <p> <code>STOPPING</code>: The operation is in the process of stopping, at user request.</p> </li>
    /// <li> <p> <code>SUCCEEDED</code>: The operation completed creating or updating all the specified stacks without exceeding the failure tolerance for the operation.</p> </li>
    /// </ul>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::StackSetOperationStatus>,
    ) -> Self {
        self.status = input;
        self
    }
    /// <p>The time at which the operation was initiated. Note that the creation times for the stack set operation might differ from the creation time of the individual stacks themselves. This is because CloudFormation needs to perform preparatory work for the operation, such as dispatching the work to the requested Regions, before actually creating the first stacks.</p>
    pub fn creation_timestamp(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.creation_timestamp = Some(input);
        self
    }
    /// <p>The time at which the operation was initiated. Note that the creation times for the stack set operation might differ from the creation time of the individual stacks themselves. This is because CloudFormation needs to perform preparatory work for the operation, such as dispatching the work to the requested Regions, before actually creating the first stacks.</p>
    pub fn set_creation_timestamp(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.creation_timestamp = input;
        self
    }
    /// <p>The time at which the stack set operation ended, across all accounts and Regions specified. Note that this doesn't necessarily mean that the stack set operation was successful, or even attempted, in each account or Region.</p>
    pub fn end_timestamp(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.end_timestamp = Some(input);
        self
    }
    /// <p>The time at which the stack set operation ended, across all accounts and Regions specified. Note that this doesn't necessarily mean that the stack set operation was successful, or even attempted, in each account or Region.</p>
    pub fn set_end_timestamp(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.end_timestamp = input;
        self
    }
    /// <p>The status of the operation in details.</p>
    pub fn status_reason(mut self, input: impl Into<std::string::String>) -> Self {
        self.status_reason = Some(input.into());
        self
    }
    /// <p>The status of the operation in details.</p>
    pub fn set_status_reason(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.status_reason = input;
        self
    }
    /// <p>Detailed information about the stack set operation.</p>
    pub fn status_details(mut self, input: crate::types::StackSetOperationStatusDetails) -> Self {
        self.status_details = Some(input);
        self
    }
    /// <p>Detailed information about the stack set operation.</p>
    pub fn set_status_details(
        mut self,
        input: std::option::Option<crate::types::StackSetOperationStatusDetails>,
    ) -> Self {
        self.status_details = input;
        self
    }
    /// <p>The user-specified preferences for how CloudFormation performs a stack set operation.</p>
    /// <p>For more information about maximum concurrent accounts and failure tolerance, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-concepts.html#stackset-ops-options">Stack set operation options</a>.</p>
    pub fn operation_preferences(
        mut self,
        input: crate::types::StackSetOperationPreferences,
    ) -> Self {
        self.operation_preferences = Some(input);
        self
    }
    /// <p>The user-specified preferences for how CloudFormation performs a stack set operation.</p>
    /// <p>For more information about maximum concurrent accounts and failure tolerance, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-concepts.html#stackset-ops-options">Stack set operation options</a>.</p>
    pub fn set_operation_preferences(
        mut self,
        input: std::option::Option<crate::types::StackSetOperationPreferences>,
    ) -> Self {
        self.operation_preferences = input;
        self
    }
    /// Consumes the builder and constructs a [`StackSetOperationSummary`](crate::types::StackSetOperationSummary).
    pub fn build(self) -> crate::types::StackSetOperationSummary {
        crate::types::StackSetOperationSummary {
            operation_id: self.operation_id,
            action: self.action,
            status: self.status,
            creation_timestamp: self.creation_timestamp,
            end_timestamp: self.end_timestamp,
            status_reason: self.status_reason,
            status_details: self.status_details,
            operation_preferences: self.operation_preferences,
        }
    }
}
