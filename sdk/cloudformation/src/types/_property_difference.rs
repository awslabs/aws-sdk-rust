// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a resource property whose actual value differs from its expected value, as defined in the stack template and any values specified as template parameters. These will be present only for resources whose <code>StackResourceDriftStatus</code> is <code>MODIFIED</code>. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift.html">Detecting Unregulated Configuration Changes to Stacks and Resources</a>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PropertyDifference {
    /// <p>The fully-qualified path to the resource property.</p>
    pub property_path: ::std::option::Option<::std::string::String>,
    /// <p>The expected property value of the resource property, as defined in the stack template and any values specified as template parameters.</p>
    pub expected_value: ::std::option::Option<::std::string::String>,
    /// <p>The actual property value of the resource property.</p>
    pub actual_value: ::std::option::Option<::std::string::String>,
    /// <p>The type of property difference.</p>
    /// <ul>
    /// <li> <p> <code>ADD</code>: A value has been added to a resource property that's an array or list data type.</p> </li>
    /// <li> <p> <code>REMOVE</code>: The property has been removed from the current resource configuration.</p> </li>
    /// <li> <p> <code>NOT_EQUAL</code>: The current property value differs from its expected value (as defined in the stack template and any values specified as template parameters).</p> </li>
    /// </ul>
    pub difference_type: ::std::option::Option<crate::types::DifferenceType>,
}
impl PropertyDifference {
    /// <p>The fully-qualified path to the resource property.</p>
    pub fn property_path(&self) -> ::std::option::Option<&str> {
        self.property_path.as_deref()
    }
    /// <p>The expected property value of the resource property, as defined in the stack template and any values specified as template parameters.</p>
    pub fn expected_value(&self) -> ::std::option::Option<&str> {
        self.expected_value.as_deref()
    }
    /// <p>The actual property value of the resource property.</p>
    pub fn actual_value(&self) -> ::std::option::Option<&str> {
        self.actual_value.as_deref()
    }
    /// <p>The type of property difference.</p>
    /// <ul>
    /// <li> <p> <code>ADD</code>: A value has been added to a resource property that's an array or list data type.</p> </li>
    /// <li> <p> <code>REMOVE</code>: The property has been removed from the current resource configuration.</p> </li>
    /// <li> <p> <code>NOT_EQUAL</code>: The current property value differs from its expected value (as defined in the stack template and any values specified as template parameters).</p> </li>
    /// </ul>
    pub fn difference_type(&self) -> ::std::option::Option<&crate::types::DifferenceType> {
        self.difference_type.as_ref()
    }
}
impl PropertyDifference {
    /// Creates a new builder-style object to manufacture [`PropertyDifference`](crate::types::PropertyDifference).
    pub fn builder() -> crate::types::builders::PropertyDifferenceBuilder {
        crate::types::builders::PropertyDifferenceBuilder::default()
    }
}

/// A builder for [`PropertyDifference`](crate::types::PropertyDifference).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PropertyDifferenceBuilder {
    pub(crate) property_path: ::std::option::Option<::std::string::String>,
    pub(crate) expected_value: ::std::option::Option<::std::string::String>,
    pub(crate) actual_value: ::std::option::Option<::std::string::String>,
    pub(crate) difference_type: ::std::option::Option<crate::types::DifferenceType>,
}
impl PropertyDifferenceBuilder {
    /// <p>The fully-qualified path to the resource property.</p>
    /// This field is required.
    pub fn property_path(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.property_path = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The fully-qualified path to the resource property.</p>
    pub fn set_property_path(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.property_path = input;
        self
    }
    /// <p>The fully-qualified path to the resource property.</p>
    pub fn get_property_path(&self) -> &::std::option::Option<::std::string::String> {
        &self.property_path
    }
    /// <p>The expected property value of the resource property, as defined in the stack template and any values specified as template parameters.</p>
    /// This field is required.
    pub fn expected_value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.expected_value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The expected property value of the resource property, as defined in the stack template and any values specified as template parameters.</p>
    pub fn set_expected_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.expected_value = input;
        self
    }
    /// <p>The expected property value of the resource property, as defined in the stack template and any values specified as template parameters.</p>
    pub fn get_expected_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.expected_value
    }
    /// <p>The actual property value of the resource property.</p>
    /// This field is required.
    pub fn actual_value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.actual_value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The actual property value of the resource property.</p>
    pub fn set_actual_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.actual_value = input;
        self
    }
    /// <p>The actual property value of the resource property.</p>
    pub fn get_actual_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.actual_value
    }
    /// <p>The type of property difference.</p>
    /// <ul>
    /// <li> <p> <code>ADD</code>: A value has been added to a resource property that's an array or list data type.</p> </li>
    /// <li> <p> <code>REMOVE</code>: The property has been removed from the current resource configuration.</p> </li>
    /// <li> <p> <code>NOT_EQUAL</code>: The current property value differs from its expected value (as defined in the stack template and any values specified as template parameters).</p> </li>
    /// </ul>
    /// This field is required.
    pub fn difference_type(mut self, input: crate::types::DifferenceType) -> Self {
        self.difference_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of property difference.</p>
    /// <ul>
    /// <li> <p> <code>ADD</code>: A value has been added to a resource property that's an array or list data type.</p> </li>
    /// <li> <p> <code>REMOVE</code>: The property has been removed from the current resource configuration.</p> </li>
    /// <li> <p> <code>NOT_EQUAL</code>: The current property value differs from its expected value (as defined in the stack template and any values specified as template parameters).</p> </li>
    /// </ul>
    pub fn set_difference_type(mut self, input: ::std::option::Option<crate::types::DifferenceType>) -> Self {
        self.difference_type = input;
        self
    }
    /// <p>The type of property difference.</p>
    /// <ul>
    /// <li> <p> <code>ADD</code>: A value has been added to a resource property that's an array or list data type.</p> </li>
    /// <li> <p> <code>REMOVE</code>: The property has been removed from the current resource configuration.</p> </li>
    /// <li> <p> <code>NOT_EQUAL</code>: The current property value differs from its expected value (as defined in the stack template and any values specified as template parameters).</p> </li>
    /// </ul>
    pub fn get_difference_type(&self) -> &::std::option::Option<crate::types::DifferenceType> {
        &self.difference_type
    }
    /// Consumes the builder and constructs a [`PropertyDifference`](crate::types::PropertyDifference).
    pub fn build(self) -> crate::types::PropertyDifference {
        crate::types::PropertyDifference {
            property_path: self.property_path,
            expected_value: self.expected_value,
            actual_value: self.actual_value,
            difference_type: self.difference_type,
        }
    }
}
