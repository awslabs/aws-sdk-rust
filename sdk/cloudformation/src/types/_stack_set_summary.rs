// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The structures that contain summary information about the specified stack set.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StackSetSummary {
    /// <p>The name of the stack set.</p>
    #[doc(hidden)]
    pub stack_set_name: std::option::Option<std::string::String>,
    /// <p>The ID of the stack set.</p>
    #[doc(hidden)]
    pub stack_set_id: std::option::Option<std::string::String>,
    /// <p>A description of the stack set that you specify when the stack set is created or updated.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The status of the stack set.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::StackSetStatus>,
    /// <p>[Service-managed permissions] Describes whether StackSets automatically deploys to Organizations accounts that are added to a target organizational unit (OU).</p>
    #[doc(hidden)]
    pub auto_deployment: std::option::Option<crate::types::AutoDeployment>,
    /// <p>Describes how the IAM roles required for stack set operations are created.</p>
    /// <ul>
    /// <li> <p>With <code>self-managed</code> permissions, you must create the administrator and execution roles required to deploy to target accounts. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-prereqs-self-managed.html">Grant Self-Managed Stack Set Permissions</a>.</p> </li>
    /// <li> <p>With <code>service-managed</code> permissions, StackSets automatically creates the IAM roles required to deploy to accounts managed by Organizations. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-prereqs-service-managed.html">Grant Service-Managed Stack Set Permissions</a>.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub permission_model: std::option::Option<crate::types::PermissionModels>,
    /// <p>Status of the stack set's actual configuration compared to its expected template and parameter configuration. A stack set is considered to have drifted if one or more of its stack instances have drifted from their expected template and parameter configuration.</p>
    /// <ul>
    /// <li> <p> <code>DRIFTED</code>: One or more of the stack instances belonging to the stack set stack differs from the expected template and parameter configuration. A stack instance is considered to have drifted if one or more of the resources in the associated stack have drifted.</p> </li>
    /// <li> <p> <code>NOT_CHECKED</code>: CloudFormation hasn't checked the stack set for drift.</p> </li>
    /// <li> <p> <code>IN_SYNC</code>: All the stack instances belonging to the stack set stack match from the expected template and parameter configuration.</p> </li>
    /// <li> <p> <code>UNKNOWN</code>: This value is reserved for future use.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub drift_status: std::option::Option<crate::types::StackDriftStatus>,
    /// <p>Most recent time when CloudFormation performed a drift detection operation on the stack set. This value will be <code>NULL</code> for any stack set on which drift detection hasn't yet been performed.</p>
    #[doc(hidden)]
    pub last_drift_check_timestamp: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>Describes whether StackSets performs non-conflicting operations concurrently and queues conflicting operations.</p>
    #[doc(hidden)]
    pub managed_execution: std::option::Option<crate::types::ManagedExecution>,
}
impl StackSetSummary {
    /// <p>The name of the stack set.</p>
    pub fn stack_set_name(&self) -> std::option::Option<&str> {
        self.stack_set_name.as_deref()
    }
    /// <p>The ID of the stack set.</p>
    pub fn stack_set_id(&self) -> std::option::Option<&str> {
        self.stack_set_id.as_deref()
    }
    /// <p>A description of the stack set that you specify when the stack set is created or updated.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The status of the stack set.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::StackSetStatus> {
        self.status.as_ref()
    }
    /// <p>[Service-managed permissions] Describes whether StackSets automatically deploys to Organizations accounts that are added to a target organizational unit (OU).</p>
    pub fn auto_deployment(&self) -> std::option::Option<&crate::types::AutoDeployment> {
        self.auto_deployment.as_ref()
    }
    /// <p>Describes how the IAM roles required for stack set operations are created.</p>
    /// <ul>
    /// <li> <p>With <code>self-managed</code> permissions, you must create the administrator and execution roles required to deploy to target accounts. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-prereqs-self-managed.html">Grant Self-Managed Stack Set Permissions</a>.</p> </li>
    /// <li> <p>With <code>service-managed</code> permissions, StackSets automatically creates the IAM roles required to deploy to accounts managed by Organizations. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-prereqs-service-managed.html">Grant Service-Managed Stack Set Permissions</a>.</p> </li>
    /// </ul>
    pub fn permission_model(&self) -> std::option::Option<&crate::types::PermissionModels> {
        self.permission_model.as_ref()
    }
    /// <p>Status of the stack set's actual configuration compared to its expected template and parameter configuration. A stack set is considered to have drifted if one or more of its stack instances have drifted from their expected template and parameter configuration.</p>
    /// <ul>
    /// <li> <p> <code>DRIFTED</code>: One or more of the stack instances belonging to the stack set stack differs from the expected template and parameter configuration. A stack instance is considered to have drifted if one or more of the resources in the associated stack have drifted.</p> </li>
    /// <li> <p> <code>NOT_CHECKED</code>: CloudFormation hasn't checked the stack set for drift.</p> </li>
    /// <li> <p> <code>IN_SYNC</code>: All the stack instances belonging to the stack set stack match from the expected template and parameter configuration.</p> </li>
    /// <li> <p> <code>UNKNOWN</code>: This value is reserved for future use.</p> </li>
    /// </ul>
    pub fn drift_status(&self) -> std::option::Option<&crate::types::StackDriftStatus> {
        self.drift_status.as_ref()
    }
    /// <p>Most recent time when CloudFormation performed a drift detection operation on the stack set. This value will be <code>NULL</code> for any stack set on which drift detection hasn't yet been performed.</p>
    pub fn last_drift_check_timestamp(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_drift_check_timestamp.as_ref()
    }
    /// <p>Describes whether StackSets performs non-conflicting operations concurrently and queues conflicting operations.</p>
    pub fn managed_execution(&self) -> std::option::Option<&crate::types::ManagedExecution> {
        self.managed_execution.as_ref()
    }
}
impl StackSetSummary {
    /// Creates a new builder-style object to manufacture [`StackSetSummary`](crate::types::StackSetSummary).
    pub fn builder() -> crate::types::builders::StackSetSummaryBuilder {
        crate::types::builders::StackSetSummaryBuilder::default()
    }
}

/// A builder for [`StackSetSummary`](crate::types::StackSetSummary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct StackSetSummaryBuilder {
    pub(crate) stack_set_name: std::option::Option<std::string::String>,
    pub(crate) stack_set_id: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<crate::types::StackSetStatus>,
    pub(crate) auto_deployment: std::option::Option<crate::types::AutoDeployment>,
    pub(crate) permission_model: std::option::Option<crate::types::PermissionModels>,
    pub(crate) drift_status: std::option::Option<crate::types::StackDriftStatus>,
    pub(crate) last_drift_check_timestamp: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) managed_execution: std::option::Option<crate::types::ManagedExecution>,
}
impl StackSetSummaryBuilder {
    /// <p>The name of the stack set.</p>
    pub fn stack_set_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.stack_set_name = Some(input.into());
        self
    }
    /// <p>The name of the stack set.</p>
    pub fn set_stack_set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.stack_set_name = input;
        self
    }
    /// <p>The ID of the stack set.</p>
    pub fn stack_set_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.stack_set_id = Some(input.into());
        self
    }
    /// <p>The ID of the stack set.</p>
    pub fn set_stack_set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.stack_set_id = input;
        self
    }
    /// <p>A description of the stack set that you specify when the stack set is created or updated.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>A description of the stack set that you specify when the stack set is created or updated.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The status of the stack set.</p>
    pub fn status(mut self, input: crate::types::StackSetStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The status of the stack set.</p>
    pub fn set_status(mut self, input: std::option::Option<crate::types::StackSetStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>[Service-managed permissions] Describes whether StackSets automatically deploys to Organizations accounts that are added to a target organizational unit (OU).</p>
    pub fn auto_deployment(mut self, input: crate::types::AutoDeployment) -> Self {
        self.auto_deployment = Some(input);
        self
    }
    /// <p>[Service-managed permissions] Describes whether StackSets automatically deploys to Organizations accounts that are added to a target organizational unit (OU).</p>
    pub fn set_auto_deployment(
        mut self,
        input: std::option::Option<crate::types::AutoDeployment>,
    ) -> Self {
        self.auto_deployment = input;
        self
    }
    /// <p>Describes how the IAM roles required for stack set operations are created.</p>
    /// <ul>
    /// <li> <p>With <code>self-managed</code> permissions, you must create the administrator and execution roles required to deploy to target accounts. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-prereqs-self-managed.html">Grant Self-Managed Stack Set Permissions</a>.</p> </li>
    /// <li> <p>With <code>service-managed</code> permissions, StackSets automatically creates the IAM roles required to deploy to accounts managed by Organizations. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-prereqs-service-managed.html">Grant Service-Managed Stack Set Permissions</a>.</p> </li>
    /// </ul>
    pub fn permission_model(mut self, input: crate::types::PermissionModels) -> Self {
        self.permission_model = Some(input);
        self
    }
    /// <p>Describes how the IAM roles required for stack set operations are created.</p>
    /// <ul>
    /// <li> <p>With <code>self-managed</code> permissions, you must create the administrator and execution roles required to deploy to target accounts. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-prereqs-self-managed.html">Grant Self-Managed Stack Set Permissions</a>.</p> </li>
    /// <li> <p>With <code>service-managed</code> permissions, StackSets automatically creates the IAM roles required to deploy to accounts managed by Organizations. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-prereqs-service-managed.html">Grant Service-Managed Stack Set Permissions</a>.</p> </li>
    /// </ul>
    pub fn set_permission_model(
        mut self,
        input: std::option::Option<crate::types::PermissionModels>,
    ) -> Self {
        self.permission_model = input;
        self
    }
    /// <p>Status of the stack set's actual configuration compared to its expected template and parameter configuration. A stack set is considered to have drifted if one or more of its stack instances have drifted from their expected template and parameter configuration.</p>
    /// <ul>
    /// <li> <p> <code>DRIFTED</code>: One or more of the stack instances belonging to the stack set stack differs from the expected template and parameter configuration. A stack instance is considered to have drifted if one or more of the resources in the associated stack have drifted.</p> </li>
    /// <li> <p> <code>NOT_CHECKED</code>: CloudFormation hasn't checked the stack set for drift.</p> </li>
    /// <li> <p> <code>IN_SYNC</code>: All the stack instances belonging to the stack set stack match from the expected template and parameter configuration.</p> </li>
    /// <li> <p> <code>UNKNOWN</code>: This value is reserved for future use.</p> </li>
    /// </ul>
    pub fn drift_status(mut self, input: crate::types::StackDriftStatus) -> Self {
        self.drift_status = Some(input);
        self
    }
    /// <p>Status of the stack set's actual configuration compared to its expected template and parameter configuration. A stack set is considered to have drifted if one or more of its stack instances have drifted from their expected template and parameter configuration.</p>
    /// <ul>
    /// <li> <p> <code>DRIFTED</code>: One or more of the stack instances belonging to the stack set stack differs from the expected template and parameter configuration. A stack instance is considered to have drifted if one or more of the resources in the associated stack have drifted.</p> </li>
    /// <li> <p> <code>NOT_CHECKED</code>: CloudFormation hasn't checked the stack set for drift.</p> </li>
    /// <li> <p> <code>IN_SYNC</code>: All the stack instances belonging to the stack set stack match from the expected template and parameter configuration.</p> </li>
    /// <li> <p> <code>UNKNOWN</code>: This value is reserved for future use.</p> </li>
    /// </ul>
    pub fn set_drift_status(
        mut self,
        input: std::option::Option<crate::types::StackDriftStatus>,
    ) -> Self {
        self.drift_status = input;
        self
    }
    /// <p>Most recent time when CloudFormation performed a drift detection operation on the stack set. This value will be <code>NULL</code> for any stack set on which drift detection hasn't yet been performed.</p>
    pub fn last_drift_check_timestamp(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_drift_check_timestamp = Some(input);
        self
    }
    /// <p>Most recent time when CloudFormation performed a drift detection operation on the stack set. This value will be <code>NULL</code> for any stack set on which drift detection hasn't yet been performed.</p>
    pub fn set_last_drift_check_timestamp(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_drift_check_timestamp = input;
        self
    }
    /// <p>Describes whether StackSets performs non-conflicting operations concurrently and queues conflicting operations.</p>
    pub fn managed_execution(mut self, input: crate::types::ManagedExecution) -> Self {
        self.managed_execution = Some(input);
        self
    }
    /// <p>Describes whether StackSets performs non-conflicting operations concurrently and queues conflicting operations.</p>
    pub fn set_managed_execution(
        mut self,
        input: std::option::Option<crate::types::ManagedExecution>,
    ) -> Self {
        self.managed_execution = input;
        self
    }
    /// Consumes the builder and constructs a [`StackSetSummary`](crate::types::StackSetSummary).
    pub fn build(self) -> crate::types::StackSetSummary {
        crate::types::StackSetSummary {
            stack_set_name: self.stack_set_name,
            stack_set_id: self.stack_set_id,
            description: self.description,
            status: self.status,
            auto_deployment: self.auto_deployment,
            permission_model: self.permission_model,
            drift_status: self.drift_status,
            last_drift_check_timestamp: self.last_drift_check_timestamp,
            managed_execution: self.managed_execution,
        }
    }
}
