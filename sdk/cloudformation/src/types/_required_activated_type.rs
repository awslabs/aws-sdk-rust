// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>For extensions that are modules, a public third-party extension that must be activated in your account in order for the module itself to be activated.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/modules.html#module-enabling">Activating public modules for use in your account</a> in the <i>CloudFormation User Guide</i>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RequiredActivatedType {
    /// <p>An alias assigned to the public extension, in this account and region. If you specify an alias for the extension, CloudFormation treats the alias as the extension type name within this account and region. You must use the alias to refer to the extension in your templates, API calls, and CloudFormation console.</p>
    #[doc(hidden)]
    pub type_name_alias: std::option::Option<std::string::String>,
    /// <p>The type name of the public extension.</p>
    /// <p>If you specified a <code>TypeNameAlias</code> when enabling the extension in this account and region, CloudFormation treats that alias as the extension's type name within the account and region, not the type name of the public extension. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/registry-public.html#registry-public-enable-alias">Specifying aliases to refer to extensions</a> in the <i>CloudFormation User Guide</i>.</p>
    #[doc(hidden)]
    pub original_type_name: std::option::Option<std::string::String>,
    /// <p>The publisher ID of the extension publisher.</p>
    #[doc(hidden)]
    pub publisher_id: std::option::Option<std::string::String>,
    /// <p>A list of the major versions of the extension type that the macro supports.</p>
    #[doc(hidden)]
    pub supported_major_versions: std::option::Option<std::vec::Vec<i32>>,
}
impl RequiredActivatedType {
    /// <p>An alias assigned to the public extension, in this account and region. If you specify an alias for the extension, CloudFormation treats the alias as the extension type name within this account and region. You must use the alias to refer to the extension in your templates, API calls, and CloudFormation console.</p>
    pub fn type_name_alias(&self) -> std::option::Option<&str> {
        self.type_name_alias.as_deref()
    }
    /// <p>The type name of the public extension.</p>
    /// <p>If you specified a <code>TypeNameAlias</code> when enabling the extension in this account and region, CloudFormation treats that alias as the extension's type name within the account and region, not the type name of the public extension. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/registry-public.html#registry-public-enable-alias">Specifying aliases to refer to extensions</a> in the <i>CloudFormation User Guide</i>.</p>
    pub fn original_type_name(&self) -> std::option::Option<&str> {
        self.original_type_name.as_deref()
    }
    /// <p>The publisher ID of the extension publisher.</p>
    pub fn publisher_id(&self) -> std::option::Option<&str> {
        self.publisher_id.as_deref()
    }
    /// <p>A list of the major versions of the extension type that the macro supports.</p>
    pub fn supported_major_versions(&self) -> std::option::Option<&[i32]> {
        self.supported_major_versions.as_deref()
    }
}
impl RequiredActivatedType {
    /// Creates a new builder-style object to manufacture [`RequiredActivatedType`](crate::types::RequiredActivatedType).
    pub fn builder() -> crate::types::builders::RequiredActivatedTypeBuilder {
        crate::types::builders::RequiredActivatedTypeBuilder::default()
    }
}

/// A builder for [`RequiredActivatedType`](crate::types::RequiredActivatedType).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RequiredActivatedTypeBuilder {
    pub(crate) type_name_alias: std::option::Option<std::string::String>,
    pub(crate) original_type_name: std::option::Option<std::string::String>,
    pub(crate) publisher_id: std::option::Option<std::string::String>,
    pub(crate) supported_major_versions: std::option::Option<std::vec::Vec<i32>>,
}
impl RequiredActivatedTypeBuilder {
    /// <p>An alias assigned to the public extension, in this account and region. If you specify an alias for the extension, CloudFormation treats the alias as the extension type name within this account and region. You must use the alias to refer to the extension in your templates, API calls, and CloudFormation console.</p>
    pub fn type_name_alias(mut self, input: impl Into<std::string::String>) -> Self {
        self.type_name_alias = Some(input.into());
        self
    }
    /// <p>An alias assigned to the public extension, in this account and region. If you specify an alias for the extension, CloudFormation treats the alias as the extension type name within this account and region. You must use the alias to refer to the extension in your templates, API calls, and CloudFormation console.</p>
    pub fn set_type_name_alias(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.type_name_alias = input;
        self
    }
    /// <p>The type name of the public extension.</p>
    /// <p>If you specified a <code>TypeNameAlias</code> when enabling the extension in this account and region, CloudFormation treats that alias as the extension's type name within the account and region, not the type name of the public extension. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/registry-public.html#registry-public-enable-alias">Specifying aliases to refer to extensions</a> in the <i>CloudFormation User Guide</i>.</p>
    pub fn original_type_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.original_type_name = Some(input.into());
        self
    }
    /// <p>The type name of the public extension.</p>
    /// <p>If you specified a <code>TypeNameAlias</code> when enabling the extension in this account and region, CloudFormation treats that alias as the extension's type name within the account and region, not the type name of the public extension. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/registry-public.html#registry-public-enable-alias">Specifying aliases to refer to extensions</a> in the <i>CloudFormation User Guide</i>.</p>
    pub fn set_original_type_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.original_type_name = input;
        self
    }
    /// <p>The publisher ID of the extension publisher.</p>
    pub fn publisher_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.publisher_id = Some(input.into());
        self
    }
    /// <p>The publisher ID of the extension publisher.</p>
    pub fn set_publisher_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.publisher_id = input;
        self
    }
    /// Appends an item to `supported_major_versions`.
    ///
    /// To override the contents of this collection use [`set_supported_major_versions`](Self::set_supported_major_versions).
    ///
    /// <p>A list of the major versions of the extension type that the macro supports.</p>
    pub fn supported_major_versions(mut self, input: i32) -> Self {
        let mut v = self.supported_major_versions.unwrap_or_default();
        v.push(input);
        self.supported_major_versions = Some(v);
        self
    }
    /// <p>A list of the major versions of the extension type that the macro supports.</p>
    pub fn set_supported_major_versions(
        mut self,
        input: std::option::Option<std::vec::Vec<i32>>,
    ) -> Self {
        self.supported_major_versions = input;
        self
    }
    /// Consumes the builder and constructs a [`RequiredActivatedType`](crate::types::RequiredActivatedType).
    pub fn build(self) -> crate::types::RequiredActivatedType {
        crate::types::RequiredActivatedType {
            type_name_alias: self.type_name_alias,
            original_type_name: self.original_type_name,
            publisher_id: self.publisher_id,
            supported_major_versions: self.supported_major_versions,
        }
    }
}
