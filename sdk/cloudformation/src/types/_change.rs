// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The <code>Change</code> structure describes the changes CloudFormation will perform if you execute the change set.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Change {
    /// <p>The type of entity that CloudFormation changes. Currently, the only entity type is <code>Resource</code>.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::ChangeType>,
    /// <p>Is either <code>null</code>, if no hooks invoke for the resource, or contains the number of hooks that will invoke for the resource.</p>
    #[doc(hidden)]
    pub hook_invocation_count: std::option::Option<i32>,
    /// <p>A <code>ResourceChange</code> structure that describes the resource and action that CloudFormation will perform.</p>
    #[doc(hidden)]
    pub resource_change: std::option::Option<crate::types::ResourceChange>,
}
impl Change {
    /// <p>The type of entity that CloudFormation changes. Currently, the only entity type is <code>Resource</code>.</p>
    pub fn r#type(&self) -> std::option::Option<&crate::types::ChangeType> {
        self.r#type.as_ref()
    }
    /// <p>Is either <code>null</code>, if no hooks invoke for the resource, or contains the number of hooks that will invoke for the resource.</p>
    pub fn hook_invocation_count(&self) -> std::option::Option<i32> {
        self.hook_invocation_count
    }
    /// <p>A <code>ResourceChange</code> structure that describes the resource and action that CloudFormation will perform.</p>
    pub fn resource_change(&self) -> std::option::Option<&crate::types::ResourceChange> {
        self.resource_change.as_ref()
    }
}
impl Change {
    /// Creates a new builder-style object to manufacture [`Change`](crate::types::Change).
    pub fn builder() -> crate::types::builders::ChangeBuilder {
        crate::types::builders::ChangeBuilder::default()
    }
}

/// A builder for [`Change`](crate::types::Change).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ChangeBuilder {
    pub(crate) r#type: std::option::Option<crate::types::ChangeType>,
    pub(crate) hook_invocation_count: std::option::Option<i32>,
    pub(crate) resource_change: std::option::Option<crate::types::ResourceChange>,
}
impl ChangeBuilder {
    /// <p>The type of entity that CloudFormation changes. Currently, the only entity type is <code>Resource</code>.</p>
    pub fn r#type(mut self, input: crate::types::ChangeType) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p>The type of entity that CloudFormation changes. Currently, the only entity type is <code>Resource</code>.</p>
    pub fn set_type(mut self, input: std::option::Option<crate::types::ChangeType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>Is either <code>null</code>, if no hooks invoke for the resource, or contains the number of hooks that will invoke for the resource.</p>
    pub fn hook_invocation_count(mut self, input: i32) -> Self {
        self.hook_invocation_count = Some(input);
        self
    }
    /// <p>Is either <code>null</code>, if no hooks invoke for the resource, or contains the number of hooks that will invoke for the resource.</p>
    pub fn set_hook_invocation_count(mut self, input: std::option::Option<i32>) -> Self {
        self.hook_invocation_count = input;
        self
    }
    /// <p>A <code>ResourceChange</code> structure that describes the resource and action that CloudFormation will perform.</p>
    pub fn resource_change(mut self, input: crate::types::ResourceChange) -> Self {
        self.resource_change = Some(input);
        self
    }
    /// <p>A <code>ResourceChange</code> structure that describes the resource and action that CloudFormation will perform.</p>
    pub fn set_resource_change(
        mut self,
        input: std::option::Option<crate::types::ResourceChange>,
    ) -> Self {
        self.resource_change = input;
        self
    }
    /// Consumes the builder and constructs a [`Change`](crate::types::Change).
    pub fn build(self) -> crate::types::Change {
        crate::types::Change {
            r#type: self.r#type,
            hook_invocation_count: self.hook_invocation_count,
            resource_change: self.resource_change,
        }
    }
}
