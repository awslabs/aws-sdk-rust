// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The StackEvent data type.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StackEvent {
    /// <p>The unique ID name of the instance of the stack.</p>
    pub stack_id: ::std::option::Option<::std::string::String>,
    /// <p>The unique ID of this event.</p>
    pub event_id: ::std::option::Option<::std::string::String>,
    /// <p>The name associated with a stack.</p>
    pub stack_name: ::std::option::Option<::std::string::String>,
    /// <p>The logical name of the resource specified in the template.</p>
    pub logical_resource_id: ::std::option::Option<::std::string::String>,
    /// <p>The name or unique identifier associated with the physical instance of the resource.</p>
    pub physical_resource_id: ::std::option::Option<::std::string::String>,
    /// <p>Type of resource. (For more information, go to <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html">Amazon Web Services Resource Types Reference</a> in the CloudFormation User Guide.)</p>
    pub resource_type: ::std::option::Option<::std::string::String>,
    /// <p>Time the status was updated.</p>
    pub timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Current status of the resource.</p>
    pub resource_status: ::std::option::Option<crate::types::ResourceStatus>,
    /// <p>Success/failure message associated with the resource.</p>
    pub resource_status_reason: ::std::option::Option<::std::string::String>,
    /// <p>BLOB of the properties used to create the resource.</p>
    pub resource_properties: ::std::option::Option<::std::string::String>,
    /// <p>The token passed to the operation that generated this event.</p>
    /// <p>All events triggered by a given stack operation are assigned the same client request token, which you can use to track operations. For example, if you execute a <code>CreateStack</code> operation with the token <code>token1</code>, then all the <code>StackEvents</code> generated by that operation will have <code>ClientRequestToken</code> set as <code>token1</code>.</p>
    /// <p>In the console, stack operations display the client request token on the Events tab. Stack operations that are initiated from the console use the token format <i>Console-StackOperation-ID</i>, which helps you easily identify the stack operation . For example, if you create a stack using the console, each stack event would be assigned the same token in the following format: <code>Console-CreateStack-7f59c3cf-00d2-40c7-b2ff-e75db0987002</code>.</p>
    pub client_request_token: ::std::option::Option<::std::string::String>,
    /// <p>The name of the hook.</p>
    pub hook_type: ::std::option::Option<::std::string::String>,
    /// <p>Provides the status of the change set hook.</p>
    pub hook_status: ::std::option::Option<crate::types::HookStatus>,
    /// <p>Provides the reason for the hook status.</p>
    pub hook_status_reason: ::std::option::Option<::std::string::String>,
    /// <p>Invocation points are points in provisioning logic where hooks are initiated.</p>
    pub hook_invocation_point: ::std::option::Option<crate::types::HookInvocationPoint>,
    /// <p>Specify the hook failure mode for non-compliant resources in the followings ways.</p>
    /// <ul>
    /// <li> <p> <code>FAIL</code> Stops provisioning resources.</p> </li>
    /// <li> <p> <code>WARN</code> Allows provisioning to continue with a warning message.</p> </li>
    /// </ul>
    pub hook_failure_mode: ::std::option::Option<crate::types::HookFailureMode>,
}
impl StackEvent {
    /// <p>The unique ID name of the instance of the stack.</p>
    pub fn stack_id(&self) -> ::std::option::Option<&str> {
        self.stack_id.as_deref()
    }
    /// <p>The unique ID of this event.</p>
    pub fn event_id(&self) -> ::std::option::Option<&str> {
        self.event_id.as_deref()
    }
    /// <p>The name associated with a stack.</p>
    pub fn stack_name(&self) -> ::std::option::Option<&str> {
        self.stack_name.as_deref()
    }
    /// <p>The logical name of the resource specified in the template.</p>
    pub fn logical_resource_id(&self) -> ::std::option::Option<&str> {
        self.logical_resource_id.as_deref()
    }
    /// <p>The name or unique identifier associated with the physical instance of the resource.</p>
    pub fn physical_resource_id(&self) -> ::std::option::Option<&str> {
        self.physical_resource_id.as_deref()
    }
    /// <p>Type of resource. (For more information, go to <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html">Amazon Web Services Resource Types Reference</a> in the CloudFormation User Guide.)</p>
    pub fn resource_type(&self) -> ::std::option::Option<&str> {
        self.resource_type.as_deref()
    }
    /// <p>Time the status was updated.</p>
    pub fn timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.timestamp.as_ref()
    }
    /// <p>Current status of the resource.</p>
    pub fn resource_status(&self) -> ::std::option::Option<&crate::types::ResourceStatus> {
        self.resource_status.as_ref()
    }
    /// <p>Success/failure message associated with the resource.</p>
    pub fn resource_status_reason(&self) -> ::std::option::Option<&str> {
        self.resource_status_reason.as_deref()
    }
    /// <p>BLOB of the properties used to create the resource.</p>
    pub fn resource_properties(&self) -> ::std::option::Option<&str> {
        self.resource_properties.as_deref()
    }
    /// <p>The token passed to the operation that generated this event.</p>
    /// <p>All events triggered by a given stack operation are assigned the same client request token, which you can use to track operations. For example, if you execute a <code>CreateStack</code> operation with the token <code>token1</code>, then all the <code>StackEvents</code> generated by that operation will have <code>ClientRequestToken</code> set as <code>token1</code>.</p>
    /// <p>In the console, stack operations display the client request token on the Events tab. Stack operations that are initiated from the console use the token format <i>Console-StackOperation-ID</i>, which helps you easily identify the stack operation . For example, if you create a stack using the console, each stack event would be assigned the same token in the following format: <code>Console-CreateStack-7f59c3cf-00d2-40c7-b2ff-e75db0987002</code>.</p>
    pub fn client_request_token(&self) -> ::std::option::Option<&str> {
        self.client_request_token.as_deref()
    }
    /// <p>The name of the hook.</p>
    pub fn hook_type(&self) -> ::std::option::Option<&str> {
        self.hook_type.as_deref()
    }
    /// <p>Provides the status of the change set hook.</p>
    pub fn hook_status(&self) -> ::std::option::Option<&crate::types::HookStatus> {
        self.hook_status.as_ref()
    }
    /// <p>Provides the reason for the hook status.</p>
    pub fn hook_status_reason(&self) -> ::std::option::Option<&str> {
        self.hook_status_reason.as_deref()
    }
    /// <p>Invocation points are points in provisioning logic where hooks are initiated.</p>
    pub fn hook_invocation_point(&self) -> ::std::option::Option<&crate::types::HookInvocationPoint> {
        self.hook_invocation_point.as_ref()
    }
    /// <p>Specify the hook failure mode for non-compliant resources in the followings ways.</p>
    /// <ul>
    /// <li> <p> <code>FAIL</code> Stops provisioning resources.</p> </li>
    /// <li> <p> <code>WARN</code> Allows provisioning to continue with a warning message.</p> </li>
    /// </ul>
    pub fn hook_failure_mode(&self) -> ::std::option::Option<&crate::types::HookFailureMode> {
        self.hook_failure_mode.as_ref()
    }
}
impl StackEvent {
    /// Creates a new builder-style object to manufacture [`StackEvent`](crate::types::StackEvent).
    pub fn builder() -> crate::types::builders::StackEventBuilder {
        crate::types::builders::StackEventBuilder::default()
    }
}

/// A builder for [`StackEvent`](crate::types::StackEvent).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct StackEventBuilder {
    pub(crate) stack_id: ::std::option::Option<::std::string::String>,
    pub(crate) event_id: ::std::option::Option<::std::string::String>,
    pub(crate) stack_name: ::std::option::Option<::std::string::String>,
    pub(crate) logical_resource_id: ::std::option::Option<::std::string::String>,
    pub(crate) physical_resource_id: ::std::option::Option<::std::string::String>,
    pub(crate) resource_type: ::std::option::Option<::std::string::String>,
    pub(crate) timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) resource_status: ::std::option::Option<crate::types::ResourceStatus>,
    pub(crate) resource_status_reason: ::std::option::Option<::std::string::String>,
    pub(crate) resource_properties: ::std::option::Option<::std::string::String>,
    pub(crate) client_request_token: ::std::option::Option<::std::string::String>,
    pub(crate) hook_type: ::std::option::Option<::std::string::String>,
    pub(crate) hook_status: ::std::option::Option<crate::types::HookStatus>,
    pub(crate) hook_status_reason: ::std::option::Option<::std::string::String>,
    pub(crate) hook_invocation_point: ::std::option::Option<crate::types::HookInvocationPoint>,
    pub(crate) hook_failure_mode: ::std::option::Option<crate::types::HookFailureMode>,
}
impl StackEventBuilder {
    /// <p>The unique ID name of the instance of the stack.</p>
    /// This field is required.
    pub fn stack_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.stack_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique ID name of the instance of the stack.</p>
    pub fn set_stack_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.stack_id = input;
        self
    }
    /// <p>The unique ID name of the instance of the stack.</p>
    pub fn get_stack_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.stack_id
    }
    /// <p>The unique ID of this event.</p>
    /// This field is required.
    pub fn event_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.event_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique ID of this event.</p>
    pub fn set_event_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.event_id = input;
        self
    }
    /// <p>The unique ID of this event.</p>
    pub fn get_event_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.event_id
    }
    /// <p>The name associated with a stack.</p>
    /// This field is required.
    pub fn stack_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.stack_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name associated with a stack.</p>
    pub fn set_stack_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.stack_name = input;
        self
    }
    /// <p>The name associated with a stack.</p>
    pub fn get_stack_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.stack_name
    }
    /// <p>The logical name of the resource specified in the template.</p>
    pub fn logical_resource_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.logical_resource_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The logical name of the resource specified in the template.</p>
    pub fn set_logical_resource_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.logical_resource_id = input;
        self
    }
    /// <p>The logical name of the resource specified in the template.</p>
    pub fn get_logical_resource_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.logical_resource_id
    }
    /// <p>The name or unique identifier associated with the physical instance of the resource.</p>
    pub fn physical_resource_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.physical_resource_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name or unique identifier associated with the physical instance of the resource.</p>
    pub fn set_physical_resource_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.physical_resource_id = input;
        self
    }
    /// <p>The name or unique identifier associated with the physical instance of the resource.</p>
    pub fn get_physical_resource_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.physical_resource_id
    }
    /// <p>Type of resource. (For more information, go to <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html">Amazon Web Services Resource Types Reference</a> in the CloudFormation User Guide.)</p>
    pub fn resource_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Type of resource. (For more information, go to <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html">Amazon Web Services Resource Types Reference</a> in the CloudFormation User Guide.)</p>
    pub fn set_resource_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_type = input;
        self
    }
    /// <p>Type of resource. (For more information, go to <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html">Amazon Web Services Resource Types Reference</a> in the CloudFormation User Guide.)</p>
    pub fn get_resource_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_type
    }
    /// <p>Time the status was updated.</p>
    /// This field is required.
    pub fn timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>Time the status was updated.</p>
    pub fn set_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.timestamp = input;
        self
    }
    /// <p>Time the status was updated.</p>
    pub fn get_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.timestamp
    }
    /// <p>Current status of the resource.</p>
    pub fn resource_status(mut self, input: crate::types::ResourceStatus) -> Self {
        self.resource_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Current status of the resource.</p>
    pub fn set_resource_status(mut self, input: ::std::option::Option<crate::types::ResourceStatus>) -> Self {
        self.resource_status = input;
        self
    }
    /// <p>Current status of the resource.</p>
    pub fn get_resource_status(&self) -> &::std::option::Option<crate::types::ResourceStatus> {
        &self.resource_status
    }
    /// <p>Success/failure message associated with the resource.</p>
    pub fn resource_status_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_status_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Success/failure message associated with the resource.</p>
    pub fn set_resource_status_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_status_reason = input;
        self
    }
    /// <p>Success/failure message associated with the resource.</p>
    pub fn get_resource_status_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_status_reason
    }
    /// <p>BLOB of the properties used to create the resource.</p>
    pub fn resource_properties(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_properties = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>BLOB of the properties used to create the resource.</p>
    pub fn set_resource_properties(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_properties = input;
        self
    }
    /// <p>BLOB of the properties used to create the resource.</p>
    pub fn get_resource_properties(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_properties
    }
    /// <p>The token passed to the operation that generated this event.</p>
    /// <p>All events triggered by a given stack operation are assigned the same client request token, which you can use to track operations. For example, if you execute a <code>CreateStack</code> operation with the token <code>token1</code>, then all the <code>StackEvents</code> generated by that operation will have <code>ClientRequestToken</code> set as <code>token1</code>.</p>
    /// <p>In the console, stack operations display the client request token on the Events tab. Stack operations that are initiated from the console use the token format <i>Console-StackOperation-ID</i>, which helps you easily identify the stack operation . For example, if you create a stack using the console, each stack event would be assigned the same token in the following format: <code>Console-CreateStack-7f59c3cf-00d2-40c7-b2ff-e75db0987002</code>.</p>
    pub fn client_request_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_request_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The token passed to the operation that generated this event.</p>
    /// <p>All events triggered by a given stack operation are assigned the same client request token, which you can use to track operations. For example, if you execute a <code>CreateStack</code> operation with the token <code>token1</code>, then all the <code>StackEvents</code> generated by that operation will have <code>ClientRequestToken</code> set as <code>token1</code>.</p>
    /// <p>In the console, stack operations display the client request token on the Events tab. Stack operations that are initiated from the console use the token format <i>Console-StackOperation-ID</i>, which helps you easily identify the stack operation . For example, if you create a stack using the console, each stack event would be assigned the same token in the following format: <code>Console-CreateStack-7f59c3cf-00d2-40c7-b2ff-e75db0987002</code>.</p>
    pub fn set_client_request_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_request_token = input;
        self
    }
    /// <p>The token passed to the operation that generated this event.</p>
    /// <p>All events triggered by a given stack operation are assigned the same client request token, which you can use to track operations. For example, if you execute a <code>CreateStack</code> operation with the token <code>token1</code>, then all the <code>StackEvents</code> generated by that operation will have <code>ClientRequestToken</code> set as <code>token1</code>.</p>
    /// <p>In the console, stack operations display the client request token on the Events tab. Stack operations that are initiated from the console use the token format <i>Console-StackOperation-ID</i>, which helps you easily identify the stack operation . For example, if you create a stack using the console, each stack event would be assigned the same token in the following format: <code>Console-CreateStack-7f59c3cf-00d2-40c7-b2ff-e75db0987002</code>.</p>
    pub fn get_client_request_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_request_token
    }
    /// <p>The name of the hook.</p>
    pub fn hook_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.hook_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the hook.</p>
    pub fn set_hook_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.hook_type = input;
        self
    }
    /// <p>The name of the hook.</p>
    pub fn get_hook_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.hook_type
    }
    /// <p>Provides the status of the change set hook.</p>
    pub fn hook_status(mut self, input: crate::types::HookStatus) -> Self {
        self.hook_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Provides the status of the change set hook.</p>
    pub fn set_hook_status(mut self, input: ::std::option::Option<crate::types::HookStatus>) -> Self {
        self.hook_status = input;
        self
    }
    /// <p>Provides the status of the change set hook.</p>
    pub fn get_hook_status(&self) -> &::std::option::Option<crate::types::HookStatus> {
        &self.hook_status
    }
    /// <p>Provides the reason for the hook status.</p>
    pub fn hook_status_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.hook_status_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Provides the reason for the hook status.</p>
    pub fn set_hook_status_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.hook_status_reason = input;
        self
    }
    /// <p>Provides the reason for the hook status.</p>
    pub fn get_hook_status_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.hook_status_reason
    }
    /// <p>Invocation points are points in provisioning logic where hooks are initiated.</p>
    pub fn hook_invocation_point(mut self, input: crate::types::HookInvocationPoint) -> Self {
        self.hook_invocation_point = ::std::option::Option::Some(input);
        self
    }
    /// <p>Invocation points are points in provisioning logic where hooks are initiated.</p>
    pub fn set_hook_invocation_point(mut self, input: ::std::option::Option<crate::types::HookInvocationPoint>) -> Self {
        self.hook_invocation_point = input;
        self
    }
    /// <p>Invocation points are points in provisioning logic where hooks are initiated.</p>
    pub fn get_hook_invocation_point(&self) -> &::std::option::Option<crate::types::HookInvocationPoint> {
        &self.hook_invocation_point
    }
    /// <p>Specify the hook failure mode for non-compliant resources in the followings ways.</p>
    /// <ul>
    /// <li> <p> <code>FAIL</code> Stops provisioning resources.</p> </li>
    /// <li> <p> <code>WARN</code> Allows provisioning to continue with a warning message.</p> </li>
    /// </ul>
    pub fn hook_failure_mode(mut self, input: crate::types::HookFailureMode) -> Self {
        self.hook_failure_mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specify the hook failure mode for non-compliant resources in the followings ways.</p>
    /// <ul>
    /// <li> <p> <code>FAIL</code> Stops provisioning resources.</p> </li>
    /// <li> <p> <code>WARN</code> Allows provisioning to continue with a warning message.</p> </li>
    /// </ul>
    pub fn set_hook_failure_mode(mut self, input: ::std::option::Option<crate::types::HookFailureMode>) -> Self {
        self.hook_failure_mode = input;
        self
    }
    /// <p>Specify the hook failure mode for non-compliant resources in the followings ways.</p>
    /// <ul>
    /// <li> <p> <code>FAIL</code> Stops provisioning resources.</p> </li>
    /// <li> <p> <code>WARN</code> Allows provisioning to continue with a warning message.</p> </li>
    /// </ul>
    pub fn get_hook_failure_mode(&self) -> &::std::option::Option<crate::types::HookFailureMode> {
        &self.hook_failure_mode
    }
    /// Consumes the builder and constructs a [`StackEvent`](crate::types::StackEvent).
    pub fn build(self) -> crate::types::StackEvent {
        crate::types::StackEvent {
            stack_id: self.stack_id,
            event_id: self.event_id,
            stack_name: self.stack_name,
            logical_resource_id: self.logical_resource_id,
            physical_resource_id: self.physical_resource_id,
            resource_type: self.resource_type,
            timestamp: self.timestamp,
            resource_status: self.resource_status,
            resource_status_reason: self.resource_status_reason,
            resource_properties: self.resource_properties,
            client_request_token: self.client_request_token,
            hook_type: self.hook_type,
            hook_status: self.hook_status,
            hook_status_reason: self.hook_status_reason,
            hook_invocation_point: self.hook_invocation_point,
            hook_failure_mode: self.hook_failure_mode,
        }
    }
}
