// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_operation_activate_type(
    input: &crate::input::ActivateTypeInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ActivateType", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("Type");
    if let Some(var_2) = &input.r#type {
        scope_1.string(var_2.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("PublicTypeArn");
    if let Some(var_4) = &input.public_type_arn {
        scope_3.string(var_4);
    }
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("PublisherId");
    if let Some(var_6) = &input.publisher_id {
        scope_5.string(var_6);
    }
    #[allow(unused_mut)]
    let mut scope_7 = writer.prefix("TypeName");
    if let Some(var_8) = &input.type_name {
        scope_7.string(var_8);
    }
    #[allow(unused_mut)]
    let mut scope_9 = writer.prefix("TypeNameAlias");
    if let Some(var_10) = &input.type_name_alias {
        scope_9.string(var_10);
    }
    #[allow(unused_mut)]
    let mut scope_11 = writer.prefix("AutoUpdate");
    if let Some(var_12) = &input.auto_update {
        scope_11.boolean(*var_12);
    }
    #[allow(unused_mut)]
    let mut scope_13 = writer.prefix("LoggingConfig");
    if let Some(var_14) = &input.logging_config {
        crate::query_ser::serialize_structure_logging_config(scope_13, var_14);
    }
    #[allow(unused_mut)]
    let mut scope_15 = writer.prefix("ExecutionRoleArn");
    if let Some(var_16) = &input.execution_role_arn {
        scope_15.string(var_16);
    }
    #[allow(unused_mut)]
    let mut scope_17 = writer.prefix("VersionBump");
    if let Some(var_18) = &input.version_bump {
        scope_17.string(var_18.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_19 = writer.prefix("MajorVersion");
    if let Some(var_20) = &input.major_version {
        scope_19.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_20).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_batch_describe_type_configurations(
    input: &crate::input::BatchDescribeTypeConfigurationsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "BatchDescribeTypeConfigurations", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_21 = writer.prefix("TypeConfigurationIdentifiers");
    if let Some(var_22) = &input.type_configuration_identifiers {
        let mut list_24 = scope_21.start_list(false, None);
        for item_23 in var_22 {
            #[allow(unused_mut)]
            let mut entry_25 = list_24.entry();
            crate::query_ser::serialize_structure_type_configuration_identifier(entry_25, item_23);
        }
        list_24.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_cancel_update_stack(
    input: &crate::input::CancelUpdateStackInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CancelUpdateStack", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_26 = writer.prefix("StackName");
    if let Some(var_27) = &input.stack_name {
        scope_26.string(var_27);
    }
    #[allow(unused_mut)]
    let mut scope_28 = writer.prefix("ClientRequestToken");
    if let Some(var_29) = &input.client_request_token {
        scope_28.string(var_29);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_continue_update_rollback(
    input: &crate::input::ContinueUpdateRollbackInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ContinueUpdateRollback", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_30 = writer.prefix("StackName");
    if let Some(var_31) = &input.stack_name {
        scope_30.string(var_31);
    }
    #[allow(unused_mut)]
    let mut scope_32 = writer.prefix("RoleARN");
    if let Some(var_33) = &input.role_arn {
        scope_32.string(var_33);
    }
    #[allow(unused_mut)]
    let mut scope_34 = writer.prefix("ResourcesToSkip");
    if let Some(var_35) = &input.resources_to_skip {
        let mut list_37 = scope_34.start_list(false, None);
        for item_36 in var_35 {
            #[allow(unused_mut)]
            let mut entry_38 = list_37.entry();
            entry_38.string(item_36);
        }
        list_37.finish();
    }
    #[allow(unused_mut)]
    let mut scope_39 = writer.prefix("ClientRequestToken");
    if let Some(var_40) = &input.client_request_token {
        scope_39.string(var_40);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_change_set(
    input: &crate::input::CreateChangeSetInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateChangeSet", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_41 = writer.prefix("StackName");
    if let Some(var_42) = &input.stack_name {
        scope_41.string(var_42);
    }
    #[allow(unused_mut)]
    let mut scope_43 = writer.prefix("TemplateBody");
    if let Some(var_44) = &input.template_body {
        scope_43.string(var_44);
    }
    #[allow(unused_mut)]
    let mut scope_45 = writer.prefix("TemplateURL");
    if let Some(var_46) = &input.template_url {
        scope_45.string(var_46);
    }
    #[allow(unused_mut)]
    let mut scope_47 = writer.prefix("UsePreviousTemplate");
    if let Some(var_48) = &input.use_previous_template {
        scope_47.boolean(*var_48);
    }
    #[allow(unused_mut)]
    let mut scope_49 = writer.prefix("Parameters");
    if let Some(var_50) = &input.parameters {
        let mut list_52 = scope_49.start_list(false, None);
        for item_51 in var_50 {
            #[allow(unused_mut)]
            let mut entry_53 = list_52.entry();
            crate::query_ser::serialize_structure_parameter(entry_53, item_51);
        }
        list_52.finish();
    }
    #[allow(unused_mut)]
    let mut scope_54 = writer.prefix("Capabilities");
    if let Some(var_55) = &input.capabilities {
        let mut list_57 = scope_54.start_list(false, None);
        for item_56 in var_55 {
            #[allow(unused_mut)]
            let mut entry_58 = list_57.entry();
            entry_58.string(item_56.as_str());
        }
        list_57.finish();
    }
    #[allow(unused_mut)]
    let mut scope_59 = writer.prefix("ResourceTypes");
    if let Some(var_60) = &input.resource_types {
        let mut list_62 = scope_59.start_list(false, None);
        for item_61 in var_60 {
            #[allow(unused_mut)]
            let mut entry_63 = list_62.entry();
            entry_63.string(item_61);
        }
        list_62.finish();
    }
    #[allow(unused_mut)]
    let mut scope_64 = writer.prefix("RoleARN");
    if let Some(var_65) = &input.role_arn {
        scope_64.string(var_65);
    }
    #[allow(unused_mut)]
    let mut scope_66 = writer.prefix("RollbackConfiguration");
    if let Some(var_67) = &input.rollback_configuration {
        crate::query_ser::serialize_structure_rollback_configuration(scope_66, var_67);
    }
    #[allow(unused_mut)]
    let mut scope_68 = writer.prefix("NotificationARNs");
    if let Some(var_69) = &input.notification_ar_ns {
        let mut list_71 = scope_68.start_list(false, None);
        for item_70 in var_69 {
            #[allow(unused_mut)]
            let mut entry_72 = list_71.entry();
            entry_72.string(item_70);
        }
        list_71.finish();
    }
    #[allow(unused_mut)]
    let mut scope_73 = writer.prefix("Tags");
    if let Some(var_74) = &input.tags {
        let mut list_76 = scope_73.start_list(false, None);
        for item_75 in var_74 {
            #[allow(unused_mut)]
            let mut entry_77 = list_76.entry();
            crate::query_ser::serialize_structure_tag(entry_77, item_75);
        }
        list_76.finish();
    }
    #[allow(unused_mut)]
    let mut scope_78 = writer.prefix("ChangeSetName");
    if let Some(var_79) = &input.change_set_name {
        scope_78.string(var_79);
    }
    #[allow(unused_mut)]
    let mut scope_80 = writer.prefix("ClientToken");
    if let Some(var_81) = &input.client_token {
        scope_80.string(var_81);
    }
    #[allow(unused_mut)]
    let mut scope_82 = writer.prefix("Description");
    if let Some(var_83) = &input.description {
        scope_82.string(var_83);
    }
    #[allow(unused_mut)]
    let mut scope_84 = writer.prefix("ChangeSetType");
    if let Some(var_85) = &input.change_set_type {
        scope_84.string(var_85.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_86 = writer.prefix("ResourcesToImport");
    if let Some(var_87) = &input.resources_to_import {
        let mut list_89 = scope_86.start_list(false, None);
        for item_88 in var_87 {
            #[allow(unused_mut)]
            let mut entry_90 = list_89.entry();
            crate::query_ser::serialize_structure_resource_to_import(entry_90, item_88);
        }
        list_89.finish();
    }
    #[allow(unused_mut)]
    let mut scope_91 = writer.prefix("IncludeNestedStacks");
    if let Some(var_92) = &input.include_nested_stacks {
        scope_91.boolean(*var_92);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_stack(
    input: &crate::input::CreateStackInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateStack", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_93 = writer.prefix("StackName");
    if let Some(var_94) = &input.stack_name {
        scope_93.string(var_94);
    }
    #[allow(unused_mut)]
    let mut scope_95 = writer.prefix("TemplateBody");
    if let Some(var_96) = &input.template_body {
        scope_95.string(var_96);
    }
    #[allow(unused_mut)]
    let mut scope_97 = writer.prefix("TemplateURL");
    if let Some(var_98) = &input.template_url {
        scope_97.string(var_98);
    }
    #[allow(unused_mut)]
    let mut scope_99 = writer.prefix("Parameters");
    if let Some(var_100) = &input.parameters {
        let mut list_102 = scope_99.start_list(false, None);
        for item_101 in var_100 {
            #[allow(unused_mut)]
            let mut entry_103 = list_102.entry();
            crate::query_ser::serialize_structure_parameter(entry_103, item_101);
        }
        list_102.finish();
    }
    #[allow(unused_mut)]
    let mut scope_104 = writer.prefix("DisableRollback");
    if let Some(var_105) = &input.disable_rollback {
        scope_104.boolean(*var_105);
    }
    #[allow(unused_mut)]
    let mut scope_106 = writer.prefix("RollbackConfiguration");
    if let Some(var_107) = &input.rollback_configuration {
        crate::query_ser::serialize_structure_rollback_configuration(scope_106, var_107);
    }
    #[allow(unused_mut)]
    let mut scope_108 = writer.prefix("TimeoutInMinutes");
    if let Some(var_109) = &input.timeout_in_minutes {
        scope_108.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_109).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_110 = writer.prefix("NotificationARNs");
    if let Some(var_111) = &input.notification_ar_ns {
        let mut list_113 = scope_110.start_list(false, None);
        for item_112 in var_111 {
            #[allow(unused_mut)]
            let mut entry_114 = list_113.entry();
            entry_114.string(item_112);
        }
        list_113.finish();
    }
    #[allow(unused_mut)]
    let mut scope_115 = writer.prefix("Capabilities");
    if let Some(var_116) = &input.capabilities {
        let mut list_118 = scope_115.start_list(false, None);
        for item_117 in var_116 {
            #[allow(unused_mut)]
            let mut entry_119 = list_118.entry();
            entry_119.string(item_117.as_str());
        }
        list_118.finish();
    }
    #[allow(unused_mut)]
    let mut scope_120 = writer.prefix("ResourceTypes");
    if let Some(var_121) = &input.resource_types {
        let mut list_123 = scope_120.start_list(false, None);
        for item_122 in var_121 {
            #[allow(unused_mut)]
            let mut entry_124 = list_123.entry();
            entry_124.string(item_122);
        }
        list_123.finish();
    }
    #[allow(unused_mut)]
    let mut scope_125 = writer.prefix("RoleARN");
    if let Some(var_126) = &input.role_arn {
        scope_125.string(var_126);
    }
    #[allow(unused_mut)]
    let mut scope_127 = writer.prefix("OnFailure");
    if let Some(var_128) = &input.on_failure {
        scope_127.string(var_128.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_129 = writer.prefix("StackPolicyBody");
    if let Some(var_130) = &input.stack_policy_body {
        scope_129.string(var_130);
    }
    #[allow(unused_mut)]
    let mut scope_131 = writer.prefix("StackPolicyURL");
    if let Some(var_132) = &input.stack_policy_url {
        scope_131.string(var_132);
    }
    #[allow(unused_mut)]
    let mut scope_133 = writer.prefix("Tags");
    if let Some(var_134) = &input.tags {
        let mut list_136 = scope_133.start_list(false, None);
        for item_135 in var_134 {
            #[allow(unused_mut)]
            let mut entry_137 = list_136.entry();
            crate::query_ser::serialize_structure_tag(entry_137, item_135);
        }
        list_136.finish();
    }
    #[allow(unused_mut)]
    let mut scope_138 = writer.prefix("ClientRequestToken");
    if let Some(var_139) = &input.client_request_token {
        scope_138.string(var_139);
    }
    #[allow(unused_mut)]
    let mut scope_140 = writer.prefix("EnableTerminationProtection");
    if let Some(var_141) = &input.enable_termination_protection {
        scope_140.boolean(*var_141);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_stack_instances(
    input: &crate::input::CreateStackInstancesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateStackInstances", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_142 = writer.prefix("StackSetName");
    if let Some(var_143) = &input.stack_set_name {
        scope_142.string(var_143);
    }
    #[allow(unused_mut)]
    let mut scope_144 = writer.prefix("Accounts");
    if let Some(var_145) = &input.accounts {
        let mut list_147 = scope_144.start_list(false, None);
        for item_146 in var_145 {
            #[allow(unused_mut)]
            let mut entry_148 = list_147.entry();
            entry_148.string(item_146);
        }
        list_147.finish();
    }
    #[allow(unused_mut)]
    let mut scope_149 = writer.prefix("DeploymentTargets");
    if let Some(var_150) = &input.deployment_targets {
        crate::query_ser::serialize_structure_deployment_targets(scope_149, var_150);
    }
    #[allow(unused_mut)]
    let mut scope_151 = writer.prefix("Regions");
    if let Some(var_152) = &input.regions {
        let mut list_154 = scope_151.start_list(false, None);
        for item_153 in var_152 {
            #[allow(unused_mut)]
            let mut entry_155 = list_154.entry();
            entry_155.string(item_153);
        }
        list_154.finish();
    }
    #[allow(unused_mut)]
    let mut scope_156 = writer.prefix("ParameterOverrides");
    if let Some(var_157) = &input.parameter_overrides {
        let mut list_159 = scope_156.start_list(false, None);
        for item_158 in var_157 {
            #[allow(unused_mut)]
            let mut entry_160 = list_159.entry();
            crate::query_ser::serialize_structure_parameter(entry_160, item_158);
        }
        list_159.finish();
    }
    #[allow(unused_mut)]
    let mut scope_161 = writer.prefix("OperationPreferences");
    if let Some(var_162) = &input.operation_preferences {
        crate::query_ser::serialize_structure_stack_set_operation_preferences(scope_161, var_162);
    }
    #[allow(unused_mut)]
    let mut scope_163 = writer.prefix("OperationId");
    if let Some(var_164) = &input.operation_id {
        scope_163.string(var_164);
    }
    #[allow(unused_mut)]
    let mut scope_165 = writer.prefix("CallAs");
    if let Some(var_166) = &input.call_as {
        scope_165.string(var_166.as_str());
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_stack_set(
    input: &crate::input::CreateStackSetInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateStackSet", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_167 = writer.prefix("StackSetName");
    if let Some(var_168) = &input.stack_set_name {
        scope_167.string(var_168);
    }
    #[allow(unused_mut)]
    let mut scope_169 = writer.prefix("Description");
    if let Some(var_170) = &input.description {
        scope_169.string(var_170);
    }
    #[allow(unused_mut)]
    let mut scope_171 = writer.prefix("TemplateBody");
    if let Some(var_172) = &input.template_body {
        scope_171.string(var_172);
    }
    #[allow(unused_mut)]
    let mut scope_173 = writer.prefix("TemplateURL");
    if let Some(var_174) = &input.template_url {
        scope_173.string(var_174);
    }
    #[allow(unused_mut)]
    let mut scope_175 = writer.prefix("Parameters");
    if let Some(var_176) = &input.parameters {
        let mut list_178 = scope_175.start_list(false, None);
        for item_177 in var_176 {
            #[allow(unused_mut)]
            let mut entry_179 = list_178.entry();
            crate::query_ser::serialize_structure_parameter(entry_179, item_177);
        }
        list_178.finish();
    }
    #[allow(unused_mut)]
    let mut scope_180 = writer.prefix("Capabilities");
    if let Some(var_181) = &input.capabilities {
        let mut list_183 = scope_180.start_list(false, None);
        for item_182 in var_181 {
            #[allow(unused_mut)]
            let mut entry_184 = list_183.entry();
            entry_184.string(item_182.as_str());
        }
        list_183.finish();
    }
    #[allow(unused_mut)]
    let mut scope_185 = writer.prefix("Tags");
    if let Some(var_186) = &input.tags {
        let mut list_188 = scope_185.start_list(false, None);
        for item_187 in var_186 {
            #[allow(unused_mut)]
            let mut entry_189 = list_188.entry();
            crate::query_ser::serialize_structure_tag(entry_189, item_187);
        }
        list_188.finish();
    }
    #[allow(unused_mut)]
    let mut scope_190 = writer.prefix("AdministrationRoleARN");
    if let Some(var_191) = &input.administration_role_arn {
        scope_190.string(var_191);
    }
    #[allow(unused_mut)]
    let mut scope_192 = writer.prefix("ExecutionRoleName");
    if let Some(var_193) = &input.execution_role_name {
        scope_192.string(var_193);
    }
    #[allow(unused_mut)]
    let mut scope_194 = writer.prefix("PermissionModel");
    if let Some(var_195) = &input.permission_model {
        scope_194.string(var_195.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_196 = writer.prefix("AutoDeployment");
    if let Some(var_197) = &input.auto_deployment {
        crate::query_ser::serialize_structure_auto_deployment(scope_196, var_197);
    }
    #[allow(unused_mut)]
    let mut scope_198 = writer.prefix("CallAs");
    if let Some(var_199) = &input.call_as {
        scope_198.string(var_199.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_200 = writer.prefix("ClientRequestToken");
    if let Some(var_201) = &input.client_request_token {
        scope_200.string(var_201);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_deactivate_type(
    input: &crate::input::DeactivateTypeInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeactivateType", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_202 = writer.prefix("TypeName");
    if let Some(var_203) = &input.type_name {
        scope_202.string(var_203);
    }
    #[allow(unused_mut)]
    let mut scope_204 = writer.prefix("Type");
    if let Some(var_205) = &input.r#type {
        scope_204.string(var_205.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_206 = writer.prefix("Arn");
    if let Some(var_207) = &input.arn {
        scope_206.string(var_207);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_change_set(
    input: &crate::input::DeleteChangeSetInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteChangeSet", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_208 = writer.prefix("ChangeSetName");
    if let Some(var_209) = &input.change_set_name {
        scope_208.string(var_209);
    }
    #[allow(unused_mut)]
    let mut scope_210 = writer.prefix("StackName");
    if let Some(var_211) = &input.stack_name {
        scope_210.string(var_211);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_stack(
    input: &crate::input::DeleteStackInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteStack", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_212 = writer.prefix("StackName");
    if let Some(var_213) = &input.stack_name {
        scope_212.string(var_213);
    }
    #[allow(unused_mut)]
    let mut scope_214 = writer.prefix("RetainResources");
    if let Some(var_215) = &input.retain_resources {
        let mut list_217 = scope_214.start_list(false, None);
        for item_216 in var_215 {
            #[allow(unused_mut)]
            let mut entry_218 = list_217.entry();
            entry_218.string(item_216);
        }
        list_217.finish();
    }
    #[allow(unused_mut)]
    let mut scope_219 = writer.prefix("RoleARN");
    if let Some(var_220) = &input.role_arn {
        scope_219.string(var_220);
    }
    #[allow(unused_mut)]
    let mut scope_221 = writer.prefix("ClientRequestToken");
    if let Some(var_222) = &input.client_request_token {
        scope_221.string(var_222);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_stack_instances(
    input: &crate::input::DeleteStackInstancesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteStackInstances", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_223 = writer.prefix("StackSetName");
    if let Some(var_224) = &input.stack_set_name {
        scope_223.string(var_224);
    }
    #[allow(unused_mut)]
    let mut scope_225 = writer.prefix("Accounts");
    if let Some(var_226) = &input.accounts {
        let mut list_228 = scope_225.start_list(false, None);
        for item_227 in var_226 {
            #[allow(unused_mut)]
            let mut entry_229 = list_228.entry();
            entry_229.string(item_227);
        }
        list_228.finish();
    }
    #[allow(unused_mut)]
    let mut scope_230 = writer.prefix("DeploymentTargets");
    if let Some(var_231) = &input.deployment_targets {
        crate::query_ser::serialize_structure_deployment_targets(scope_230, var_231);
    }
    #[allow(unused_mut)]
    let mut scope_232 = writer.prefix("Regions");
    if let Some(var_233) = &input.regions {
        let mut list_235 = scope_232.start_list(false, None);
        for item_234 in var_233 {
            #[allow(unused_mut)]
            let mut entry_236 = list_235.entry();
            entry_236.string(item_234);
        }
        list_235.finish();
    }
    #[allow(unused_mut)]
    let mut scope_237 = writer.prefix("OperationPreferences");
    if let Some(var_238) = &input.operation_preferences {
        crate::query_ser::serialize_structure_stack_set_operation_preferences(scope_237, var_238);
    }
    #[allow(unused_mut)]
    let mut scope_239 = writer.prefix("RetainStacks");
    {
        scope_239.boolean(input.retain_stacks);
    }
    #[allow(unused_mut)]
    let mut scope_240 = writer.prefix("OperationId");
    if let Some(var_241) = &input.operation_id {
        scope_240.string(var_241);
    }
    #[allow(unused_mut)]
    let mut scope_242 = writer.prefix("CallAs");
    if let Some(var_243) = &input.call_as {
        scope_242.string(var_243.as_str());
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_stack_set(
    input: &crate::input::DeleteStackSetInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteStackSet", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_244 = writer.prefix("StackSetName");
    if let Some(var_245) = &input.stack_set_name {
        scope_244.string(var_245);
    }
    #[allow(unused_mut)]
    let mut scope_246 = writer.prefix("CallAs");
    if let Some(var_247) = &input.call_as {
        scope_246.string(var_247.as_str());
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_deregister_type(
    input: &crate::input::DeregisterTypeInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeregisterType", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_248 = writer.prefix("Arn");
    if let Some(var_249) = &input.arn {
        scope_248.string(var_249);
    }
    #[allow(unused_mut)]
    let mut scope_250 = writer.prefix("Type");
    if let Some(var_251) = &input.r#type {
        scope_250.string(var_251.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_252 = writer.prefix("TypeName");
    if let Some(var_253) = &input.type_name {
        scope_252.string(var_253);
    }
    #[allow(unused_mut)]
    let mut scope_254 = writer.prefix("VersionId");
    if let Some(var_255) = &input.version_id {
        scope_254.string(var_255);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_account_limits(
    input: &crate::input::DescribeAccountLimitsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeAccountLimits", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_256 = writer.prefix("NextToken");
    if let Some(var_257) = &input.next_token {
        scope_256.string(var_257);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_change_set(
    input: &crate::input::DescribeChangeSetInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeChangeSet", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_258 = writer.prefix("ChangeSetName");
    if let Some(var_259) = &input.change_set_name {
        scope_258.string(var_259);
    }
    #[allow(unused_mut)]
    let mut scope_260 = writer.prefix("StackName");
    if let Some(var_261) = &input.stack_name {
        scope_260.string(var_261);
    }
    #[allow(unused_mut)]
    let mut scope_262 = writer.prefix("NextToken");
    if let Some(var_263) = &input.next_token {
        scope_262.string(var_263);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_publisher(
    input: &crate::input::DescribePublisherInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribePublisher", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_264 = writer.prefix("PublisherId");
    if let Some(var_265) = &input.publisher_id {
        scope_264.string(var_265);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_stack_drift_detection_status(
    input: &crate::input::DescribeStackDriftDetectionStatusInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeStackDriftDetectionStatus", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_266 = writer.prefix("StackDriftDetectionId");
    if let Some(var_267) = &input.stack_drift_detection_id {
        scope_266.string(var_267);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_stack_events(
    input: &crate::input::DescribeStackEventsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeStackEvents", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_268 = writer.prefix("StackName");
    if let Some(var_269) = &input.stack_name {
        scope_268.string(var_269);
    }
    #[allow(unused_mut)]
    let mut scope_270 = writer.prefix("NextToken");
    if let Some(var_271) = &input.next_token {
        scope_270.string(var_271);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_stack_instance(
    input: &crate::input::DescribeStackInstanceInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeStackInstance", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_272 = writer.prefix("StackSetName");
    if let Some(var_273) = &input.stack_set_name {
        scope_272.string(var_273);
    }
    #[allow(unused_mut)]
    let mut scope_274 = writer.prefix("StackInstanceAccount");
    if let Some(var_275) = &input.stack_instance_account {
        scope_274.string(var_275);
    }
    #[allow(unused_mut)]
    let mut scope_276 = writer.prefix("StackInstanceRegion");
    if let Some(var_277) = &input.stack_instance_region {
        scope_276.string(var_277);
    }
    #[allow(unused_mut)]
    let mut scope_278 = writer.prefix("CallAs");
    if let Some(var_279) = &input.call_as {
        scope_278.string(var_279.as_str());
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_stack_resource(
    input: &crate::input::DescribeStackResourceInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeStackResource", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_280 = writer.prefix("StackName");
    if let Some(var_281) = &input.stack_name {
        scope_280.string(var_281);
    }
    #[allow(unused_mut)]
    let mut scope_282 = writer.prefix("LogicalResourceId");
    if let Some(var_283) = &input.logical_resource_id {
        scope_282.string(var_283);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_stack_resource_drifts(
    input: &crate::input::DescribeStackResourceDriftsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeStackResourceDrifts", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_284 = writer.prefix("StackName");
    if let Some(var_285) = &input.stack_name {
        scope_284.string(var_285);
    }
    #[allow(unused_mut)]
    let mut scope_286 = writer.prefix("StackResourceDriftStatusFilters");
    if let Some(var_287) = &input.stack_resource_drift_status_filters {
        let mut list_289 = scope_286.start_list(false, None);
        for item_288 in var_287 {
            #[allow(unused_mut)]
            let mut entry_290 = list_289.entry();
            entry_290.string(item_288.as_str());
        }
        list_289.finish();
    }
    #[allow(unused_mut)]
    let mut scope_291 = writer.prefix("NextToken");
    if let Some(var_292) = &input.next_token {
        scope_291.string(var_292);
    }
    #[allow(unused_mut)]
    let mut scope_293 = writer.prefix("MaxResults");
    if let Some(var_294) = &input.max_results {
        scope_293.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_294).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_stack_resources(
    input: &crate::input::DescribeStackResourcesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeStackResources", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_295 = writer.prefix("StackName");
    if let Some(var_296) = &input.stack_name {
        scope_295.string(var_296);
    }
    #[allow(unused_mut)]
    let mut scope_297 = writer.prefix("LogicalResourceId");
    if let Some(var_298) = &input.logical_resource_id {
        scope_297.string(var_298);
    }
    #[allow(unused_mut)]
    let mut scope_299 = writer.prefix("PhysicalResourceId");
    if let Some(var_300) = &input.physical_resource_id {
        scope_299.string(var_300);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_stacks(
    input: &crate::input::DescribeStacksInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeStacks", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_301 = writer.prefix("StackName");
    if let Some(var_302) = &input.stack_name {
        scope_301.string(var_302);
    }
    #[allow(unused_mut)]
    let mut scope_303 = writer.prefix("NextToken");
    if let Some(var_304) = &input.next_token {
        scope_303.string(var_304);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_stack_set(
    input: &crate::input::DescribeStackSetInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeStackSet", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_305 = writer.prefix("StackSetName");
    if let Some(var_306) = &input.stack_set_name {
        scope_305.string(var_306);
    }
    #[allow(unused_mut)]
    let mut scope_307 = writer.prefix("CallAs");
    if let Some(var_308) = &input.call_as {
        scope_307.string(var_308.as_str());
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_stack_set_operation(
    input: &crate::input::DescribeStackSetOperationInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeStackSetOperation", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_309 = writer.prefix("StackSetName");
    if let Some(var_310) = &input.stack_set_name {
        scope_309.string(var_310);
    }
    #[allow(unused_mut)]
    let mut scope_311 = writer.prefix("OperationId");
    if let Some(var_312) = &input.operation_id {
        scope_311.string(var_312);
    }
    #[allow(unused_mut)]
    let mut scope_313 = writer.prefix("CallAs");
    if let Some(var_314) = &input.call_as {
        scope_313.string(var_314.as_str());
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_type(
    input: &crate::input::DescribeTypeInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeType", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_315 = writer.prefix("Type");
    if let Some(var_316) = &input.r#type {
        scope_315.string(var_316.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_317 = writer.prefix("TypeName");
    if let Some(var_318) = &input.type_name {
        scope_317.string(var_318);
    }
    #[allow(unused_mut)]
    let mut scope_319 = writer.prefix("Arn");
    if let Some(var_320) = &input.arn {
        scope_319.string(var_320);
    }
    #[allow(unused_mut)]
    let mut scope_321 = writer.prefix("VersionId");
    if let Some(var_322) = &input.version_id {
        scope_321.string(var_322);
    }
    #[allow(unused_mut)]
    let mut scope_323 = writer.prefix("PublisherId");
    if let Some(var_324) = &input.publisher_id {
        scope_323.string(var_324);
    }
    #[allow(unused_mut)]
    let mut scope_325 = writer.prefix("PublicVersionNumber");
    if let Some(var_326) = &input.public_version_number {
        scope_325.string(var_326);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_type_registration(
    input: &crate::input::DescribeTypeRegistrationInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeTypeRegistration", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_327 = writer.prefix("RegistrationToken");
    if let Some(var_328) = &input.registration_token {
        scope_327.string(var_328);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_detect_stack_drift(
    input: &crate::input::DetectStackDriftInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DetectStackDrift", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_329 = writer.prefix("StackName");
    if let Some(var_330) = &input.stack_name {
        scope_329.string(var_330);
    }
    #[allow(unused_mut)]
    let mut scope_331 = writer.prefix("LogicalResourceIds");
    if let Some(var_332) = &input.logical_resource_ids {
        let mut list_334 = scope_331.start_list(false, None);
        for item_333 in var_332 {
            #[allow(unused_mut)]
            let mut entry_335 = list_334.entry();
            entry_335.string(item_333);
        }
        list_334.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_detect_stack_resource_drift(
    input: &crate::input::DetectStackResourceDriftInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DetectStackResourceDrift", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_336 = writer.prefix("StackName");
    if let Some(var_337) = &input.stack_name {
        scope_336.string(var_337);
    }
    #[allow(unused_mut)]
    let mut scope_338 = writer.prefix("LogicalResourceId");
    if let Some(var_339) = &input.logical_resource_id {
        scope_338.string(var_339);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_detect_stack_set_drift(
    input: &crate::input::DetectStackSetDriftInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DetectStackSetDrift", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_340 = writer.prefix("StackSetName");
    if let Some(var_341) = &input.stack_set_name {
        scope_340.string(var_341);
    }
    #[allow(unused_mut)]
    let mut scope_342 = writer.prefix("OperationPreferences");
    if let Some(var_343) = &input.operation_preferences {
        crate::query_ser::serialize_structure_stack_set_operation_preferences(scope_342, var_343);
    }
    #[allow(unused_mut)]
    let mut scope_344 = writer.prefix("OperationId");
    if let Some(var_345) = &input.operation_id {
        scope_344.string(var_345);
    }
    #[allow(unused_mut)]
    let mut scope_346 = writer.prefix("CallAs");
    if let Some(var_347) = &input.call_as {
        scope_346.string(var_347.as_str());
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_estimate_template_cost(
    input: &crate::input::EstimateTemplateCostInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "EstimateTemplateCost", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_348 = writer.prefix("TemplateBody");
    if let Some(var_349) = &input.template_body {
        scope_348.string(var_349);
    }
    #[allow(unused_mut)]
    let mut scope_350 = writer.prefix("TemplateURL");
    if let Some(var_351) = &input.template_url {
        scope_350.string(var_351);
    }
    #[allow(unused_mut)]
    let mut scope_352 = writer.prefix("Parameters");
    if let Some(var_353) = &input.parameters {
        let mut list_355 = scope_352.start_list(false, None);
        for item_354 in var_353 {
            #[allow(unused_mut)]
            let mut entry_356 = list_355.entry();
            crate::query_ser::serialize_structure_parameter(entry_356, item_354);
        }
        list_355.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_execute_change_set(
    input: &crate::input::ExecuteChangeSetInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ExecuteChangeSet", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_357 = writer.prefix("ChangeSetName");
    if let Some(var_358) = &input.change_set_name {
        scope_357.string(var_358);
    }
    #[allow(unused_mut)]
    let mut scope_359 = writer.prefix("StackName");
    if let Some(var_360) = &input.stack_name {
        scope_359.string(var_360);
    }
    #[allow(unused_mut)]
    let mut scope_361 = writer.prefix("ClientRequestToken");
    if let Some(var_362) = &input.client_request_token {
        scope_361.string(var_362);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_get_stack_policy(
    input: &crate::input::GetStackPolicyInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "GetStackPolicy", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_363 = writer.prefix("StackName");
    if let Some(var_364) = &input.stack_name {
        scope_363.string(var_364);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_get_template(
    input: &crate::input::GetTemplateInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "GetTemplate", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_365 = writer.prefix("StackName");
    if let Some(var_366) = &input.stack_name {
        scope_365.string(var_366);
    }
    #[allow(unused_mut)]
    let mut scope_367 = writer.prefix("ChangeSetName");
    if let Some(var_368) = &input.change_set_name {
        scope_367.string(var_368);
    }
    #[allow(unused_mut)]
    let mut scope_369 = writer.prefix("TemplateStage");
    if let Some(var_370) = &input.template_stage {
        scope_369.string(var_370.as_str());
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_get_template_summary(
    input: &crate::input::GetTemplateSummaryInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "GetTemplateSummary", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_371 = writer.prefix("TemplateBody");
    if let Some(var_372) = &input.template_body {
        scope_371.string(var_372);
    }
    #[allow(unused_mut)]
    let mut scope_373 = writer.prefix("TemplateURL");
    if let Some(var_374) = &input.template_url {
        scope_373.string(var_374);
    }
    #[allow(unused_mut)]
    let mut scope_375 = writer.prefix("StackName");
    if let Some(var_376) = &input.stack_name {
        scope_375.string(var_376);
    }
    #[allow(unused_mut)]
    let mut scope_377 = writer.prefix("StackSetName");
    if let Some(var_378) = &input.stack_set_name {
        scope_377.string(var_378);
    }
    #[allow(unused_mut)]
    let mut scope_379 = writer.prefix("CallAs");
    if let Some(var_380) = &input.call_as {
        scope_379.string(var_380.as_str());
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_list_change_sets(
    input: &crate::input::ListChangeSetsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ListChangeSets", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_381 = writer.prefix("StackName");
    if let Some(var_382) = &input.stack_name {
        scope_381.string(var_382);
    }
    #[allow(unused_mut)]
    let mut scope_383 = writer.prefix("NextToken");
    if let Some(var_384) = &input.next_token {
        scope_383.string(var_384);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_list_exports(
    input: &crate::input::ListExportsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ListExports", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_385 = writer.prefix("NextToken");
    if let Some(var_386) = &input.next_token {
        scope_385.string(var_386);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_list_imports(
    input: &crate::input::ListImportsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ListImports", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_387 = writer.prefix("ExportName");
    if let Some(var_388) = &input.export_name {
        scope_387.string(var_388);
    }
    #[allow(unused_mut)]
    let mut scope_389 = writer.prefix("NextToken");
    if let Some(var_390) = &input.next_token {
        scope_389.string(var_390);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_list_stack_instances(
    input: &crate::input::ListStackInstancesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ListStackInstances", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_391 = writer.prefix("StackSetName");
    if let Some(var_392) = &input.stack_set_name {
        scope_391.string(var_392);
    }
    #[allow(unused_mut)]
    let mut scope_393 = writer.prefix("NextToken");
    if let Some(var_394) = &input.next_token {
        scope_393.string(var_394);
    }
    #[allow(unused_mut)]
    let mut scope_395 = writer.prefix("MaxResults");
    if let Some(var_396) = &input.max_results {
        scope_395.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_396).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_397 = writer.prefix("Filters");
    if let Some(var_398) = &input.filters {
        let mut list_400 = scope_397.start_list(false, None);
        for item_399 in var_398 {
            #[allow(unused_mut)]
            let mut entry_401 = list_400.entry();
            crate::query_ser::serialize_structure_stack_instance_filter(entry_401, item_399);
        }
        list_400.finish();
    }
    #[allow(unused_mut)]
    let mut scope_402 = writer.prefix("StackInstanceAccount");
    if let Some(var_403) = &input.stack_instance_account {
        scope_402.string(var_403);
    }
    #[allow(unused_mut)]
    let mut scope_404 = writer.prefix("StackInstanceRegion");
    if let Some(var_405) = &input.stack_instance_region {
        scope_404.string(var_405);
    }
    #[allow(unused_mut)]
    let mut scope_406 = writer.prefix("CallAs");
    if let Some(var_407) = &input.call_as {
        scope_406.string(var_407.as_str());
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_list_stack_resources(
    input: &crate::input::ListStackResourcesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ListStackResources", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_408 = writer.prefix("StackName");
    if let Some(var_409) = &input.stack_name {
        scope_408.string(var_409);
    }
    #[allow(unused_mut)]
    let mut scope_410 = writer.prefix("NextToken");
    if let Some(var_411) = &input.next_token {
        scope_410.string(var_411);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_list_stacks(
    input: &crate::input::ListStacksInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ListStacks", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_412 = writer.prefix("NextToken");
    if let Some(var_413) = &input.next_token {
        scope_412.string(var_413);
    }
    #[allow(unused_mut)]
    let mut scope_414 = writer.prefix("StackStatusFilter");
    if let Some(var_415) = &input.stack_status_filter {
        let mut list_417 = scope_414.start_list(false, None);
        for item_416 in var_415 {
            #[allow(unused_mut)]
            let mut entry_418 = list_417.entry();
            entry_418.string(item_416.as_str());
        }
        list_417.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_list_stack_set_operation_results(
    input: &crate::input::ListStackSetOperationResultsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ListStackSetOperationResults", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_419 = writer.prefix("StackSetName");
    if let Some(var_420) = &input.stack_set_name {
        scope_419.string(var_420);
    }
    #[allow(unused_mut)]
    let mut scope_421 = writer.prefix("OperationId");
    if let Some(var_422) = &input.operation_id {
        scope_421.string(var_422);
    }
    #[allow(unused_mut)]
    let mut scope_423 = writer.prefix("NextToken");
    if let Some(var_424) = &input.next_token {
        scope_423.string(var_424);
    }
    #[allow(unused_mut)]
    let mut scope_425 = writer.prefix("MaxResults");
    if let Some(var_426) = &input.max_results {
        scope_425.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_426).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_427 = writer.prefix("CallAs");
    if let Some(var_428) = &input.call_as {
        scope_427.string(var_428.as_str());
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_list_stack_set_operations(
    input: &crate::input::ListStackSetOperationsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ListStackSetOperations", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_429 = writer.prefix("StackSetName");
    if let Some(var_430) = &input.stack_set_name {
        scope_429.string(var_430);
    }
    #[allow(unused_mut)]
    let mut scope_431 = writer.prefix("NextToken");
    if let Some(var_432) = &input.next_token {
        scope_431.string(var_432);
    }
    #[allow(unused_mut)]
    let mut scope_433 = writer.prefix("MaxResults");
    if let Some(var_434) = &input.max_results {
        scope_433.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_434).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_435 = writer.prefix("CallAs");
    if let Some(var_436) = &input.call_as {
        scope_435.string(var_436.as_str());
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_list_stack_sets(
    input: &crate::input::ListStackSetsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ListStackSets", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_437 = writer.prefix("NextToken");
    if let Some(var_438) = &input.next_token {
        scope_437.string(var_438);
    }
    #[allow(unused_mut)]
    let mut scope_439 = writer.prefix("MaxResults");
    if let Some(var_440) = &input.max_results {
        scope_439.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_440).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_441 = writer.prefix("Status");
    if let Some(var_442) = &input.status {
        scope_441.string(var_442.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_443 = writer.prefix("CallAs");
    if let Some(var_444) = &input.call_as {
        scope_443.string(var_444.as_str());
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_list_type_registrations(
    input: &crate::input::ListTypeRegistrationsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ListTypeRegistrations", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_445 = writer.prefix("Type");
    if let Some(var_446) = &input.r#type {
        scope_445.string(var_446.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_447 = writer.prefix("TypeName");
    if let Some(var_448) = &input.type_name {
        scope_447.string(var_448);
    }
    #[allow(unused_mut)]
    let mut scope_449 = writer.prefix("TypeArn");
    if let Some(var_450) = &input.type_arn {
        scope_449.string(var_450);
    }
    #[allow(unused_mut)]
    let mut scope_451 = writer.prefix("RegistrationStatusFilter");
    if let Some(var_452) = &input.registration_status_filter {
        scope_451.string(var_452.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_453 = writer.prefix("MaxResults");
    if let Some(var_454) = &input.max_results {
        scope_453.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_454).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_455 = writer.prefix("NextToken");
    if let Some(var_456) = &input.next_token {
        scope_455.string(var_456);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_list_types(
    input: &crate::input::ListTypesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ListTypes", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_457 = writer.prefix("Visibility");
    if let Some(var_458) = &input.visibility {
        scope_457.string(var_458.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_459 = writer.prefix("ProvisioningType");
    if let Some(var_460) = &input.provisioning_type {
        scope_459.string(var_460.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_461 = writer.prefix("DeprecatedStatus");
    if let Some(var_462) = &input.deprecated_status {
        scope_461.string(var_462.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_463 = writer.prefix("Type");
    if let Some(var_464) = &input.r#type {
        scope_463.string(var_464.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_465 = writer.prefix("Filters");
    if let Some(var_466) = &input.filters {
        crate::query_ser::serialize_structure_type_filters(scope_465, var_466);
    }
    #[allow(unused_mut)]
    let mut scope_467 = writer.prefix("MaxResults");
    if let Some(var_468) = &input.max_results {
        scope_467.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_468).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_469 = writer.prefix("NextToken");
    if let Some(var_470) = &input.next_token {
        scope_469.string(var_470);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_list_type_versions(
    input: &crate::input::ListTypeVersionsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ListTypeVersions", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_471 = writer.prefix("Type");
    if let Some(var_472) = &input.r#type {
        scope_471.string(var_472.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_473 = writer.prefix("TypeName");
    if let Some(var_474) = &input.type_name {
        scope_473.string(var_474);
    }
    #[allow(unused_mut)]
    let mut scope_475 = writer.prefix("Arn");
    if let Some(var_476) = &input.arn {
        scope_475.string(var_476);
    }
    #[allow(unused_mut)]
    let mut scope_477 = writer.prefix("MaxResults");
    if let Some(var_478) = &input.max_results {
        scope_477.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_478).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_479 = writer.prefix("NextToken");
    if let Some(var_480) = &input.next_token {
        scope_479.string(var_480);
    }
    #[allow(unused_mut)]
    let mut scope_481 = writer.prefix("DeprecatedStatus");
    if let Some(var_482) = &input.deprecated_status {
        scope_481.string(var_482.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_483 = writer.prefix("PublisherId");
    if let Some(var_484) = &input.publisher_id {
        scope_483.string(var_484);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_publish_type(
    input: &crate::input::PublishTypeInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "PublishType", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_485 = writer.prefix("Type");
    if let Some(var_486) = &input.r#type {
        scope_485.string(var_486.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_487 = writer.prefix("Arn");
    if let Some(var_488) = &input.arn {
        scope_487.string(var_488);
    }
    #[allow(unused_mut)]
    let mut scope_489 = writer.prefix("TypeName");
    if let Some(var_490) = &input.type_name {
        scope_489.string(var_490);
    }
    #[allow(unused_mut)]
    let mut scope_491 = writer.prefix("PublicVersionNumber");
    if let Some(var_492) = &input.public_version_number {
        scope_491.string(var_492);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_record_handler_progress(
    input: &crate::input::RecordHandlerProgressInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "RecordHandlerProgress", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_493 = writer.prefix("BearerToken");
    if let Some(var_494) = &input.bearer_token {
        scope_493.string(var_494);
    }
    #[allow(unused_mut)]
    let mut scope_495 = writer.prefix("OperationStatus");
    if let Some(var_496) = &input.operation_status {
        scope_495.string(var_496.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_497 = writer.prefix("CurrentOperationStatus");
    if let Some(var_498) = &input.current_operation_status {
        scope_497.string(var_498.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_499 = writer.prefix("StatusMessage");
    if let Some(var_500) = &input.status_message {
        scope_499.string(var_500);
    }
    #[allow(unused_mut)]
    let mut scope_501 = writer.prefix("ErrorCode");
    if let Some(var_502) = &input.error_code {
        scope_501.string(var_502.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_503 = writer.prefix("ResourceModel");
    if let Some(var_504) = &input.resource_model {
        scope_503.string(var_504);
    }
    #[allow(unused_mut)]
    let mut scope_505 = writer.prefix("ClientRequestToken");
    if let Some(var_506) = &input.client_request_token {
        scope_505.string(var_506);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_register_publisher(
    input: &crate::input::RegisterPublisherInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "RegisterPublisher", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_507 = writer.prefix("AcceptTermsAndConditions");
    if let Some(var_508) = &input.accept_terms_and_conditions {
        scope_507.boolean(*var_508);
    }
    #[allow(unused_mut)]
    let mut scope_509 = writer.prefix("ConnectionArn");
    if let Some(var_510) = &input.connection_arn {
        scope_509.string(var_510);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_register_type(
    input: &crate::input::RegisterTypeInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "RegisterType", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_511 = writer.prefix("Type");
    if let Some(var_512) = &input.r#type {
        scope_511.string(var_512.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_513 = writer.prefix("TypeName");
    if let Some(var_514) = &input.type_name {
        scope_513.string(var_514);
    }
    #[allow(unused_mut)]
    let mut scope_515 = writer.prefix("SchemaHandlerPackage");
    if let Some(var_516) = &input.schema_handler_package {
        scope_515.string(var_516);
    }
    #[allow(unused_mut)]
    let mut scope_517 = writer.prefix("LoggingConfig");
    if let Some(var_518) = &input.logging_config {
        crate::query_ser::serialize_structure_logging_config(scope_517, var_518);
    }
    #[allow(unused_mut)]
    let mut scope_519 = writer.prefix("ExecutionRoleArn");
    if let Some(var_520) = &input.execution_role_arn {
        scope_519.string(var_520);
    }
    #[allow(unused_mut)]
    let mut scope_521 = writer.prefix("ClientRequestToken");
    if let Some(var_522) = &input.client_request_token {
        scope_521.string(var_522);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_set_stack_policy(
    input: &crate::input::SetStackPolicyInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "SetStackPolicy", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_523 = writer.prefix("StackName");
    if let Some(var_524) = &input.stack_name {
        scope_523.string(var_524);
    }
    #[allow(unused_mut)]
    let mut scope_525 = writer.prefix("StackPolicyBody");
    if let Some(var_526) = &input.stack_policy_body {
        scope_525.string(var_526);
    }
    #[allow(unused_mut)]
    let mut scope_527 = writer.prefix("StackPolicyURL");
    if let Some(var_528) = &input.stack_policy_url {
        scope_527.string(var_528);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_set_type_configuration(
    input: &crate::input::SetTypeConfigurationInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "SetTypeConfiguration", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_529 = writer.prefix("TypeArn");
    if let Some(var_530) = &input.type_arn {
        scope_529.string(var_530);
    }
    #[allow(unused_mut)]
    let mut scope_531 = writer.prefix("Configuration");
    if let Some(var_532) = &input.configuration {
        scope_531.string(var_532);
    }
    #[allow(unused_mut)]
    let mut scope_533 = writer.prefix("ConfigurationAlias");
    if let Some(var_534) = &input.configuration_alias {
        scope_533.string(var_534);
    }
    #[allow(unused_mut)]
    let mut scope_535 = writer.prefix("TypeName");
    if let Some(var_536) = &input.type_name {
        scope_535.string(var_536);
    }
    #[allow(unused_mut)]
    let mut scope_537 = writer.prefix("Type");
    if let Some(var_538) = &input.r#type {
        scope_537.string(var_538.as_str());
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_set_type_default_version(
    input: &crate::input::SetTypeDefaultVersionInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "SetTypeDefaultVersion", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_539 = writer.prefix("Arn");
    if let Some(var_540) = &input.arn {
        scope_539.string(var_540);
    }
    #[allow(unused_mut)]
    let mut scope_541 = writer.prefix("Type");
    if let Some(var_542) = &input.r#type {
        scope_541.string(var_542.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_543 = writer.prefix("TypeName");
    if let Some(var_544) = &input.type_name {
        scope_543.string(var_544);
    }
    #[allow(unused_mut)]
    let mut scope_545 = writer.prefix("VersionId");
    if let Some(var_546) = &input.version_id {
        scope_545.string(var_546);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_signal_resource(
    input: &crate::input::SignalResourceInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "SignalResource", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_547 = writer.prefix("StackName");
    if let Some(var_548) = &input.stack_name {
        scope_547.string(var_548);
    }
    #[allow(unused_mut)]
    let mut scope_549 = writer.prefix("LogicalResourceId");
    if let Some(var_550) = &input.logical_resource_id {
        scope_549.string(var_550);
    }
    #[allow(unused_mut)]
    let mut scope_551 = writer.prefix("UniqueId");
    if let Some(var_552) = &input.unique_id {
        scope_551.string(var_552);
    }
    #[allow(unused_mut)]
    let mut scope_553 = writer.prefix("Status");
    if let Some(var_554) = &input.status {
        scope_553.string(var_554.as_str());
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_stop_stack_set_operation(
    input: &crate::input::StopStackSetOperationInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "StopStackSetOperation", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_555 = writer.prefix("StackSetName");
    if let Some(var_556) = &input.stack_set_name {
        scope_555.string(var_556);
    }
    #[allow(unused_mut)]
    let mut scope_557 = writer.prefix("OperationId");
    if let Some(var_558) = &input.operation_id {
        scope_557.string(var_558);
    }
    #[allow(unused_mut)]
    let mut scope_559 = writer.prefix("CallAs");
    if let Some(var_560) = &input.call_as {
        scope_559.string(var_560.as_str());
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_test_type(
    input: &crate::input::TestTypeInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "TestType", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_561 = writer.prefix("Arn");
    if let Some(var_562) = &input.arn {
        scope_561.string(var_562);
    }
    #[allow(unused_mut)]
    let mut scope_563 = writer.prefix("Type");
    if let Some(var_564) = &input.r#type {
        scope_563.string(var_564.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_565 = writer.prefix("TypeName");
    if let Some(var_566) = &input.type_name {
        scope_565.string(var_566);
    }
    #[allow(unused_mut)]
    let mut scope_567 = writer.prefix("VersionId");
    if let Some(var_568) = &input.version_id {
        scope_567.string(var_568);
    }
    #[allow(unused_mut)]
    let mut scope_569 = writer.prefix("LogDeliveryBucket");
    if let Some(var_570) = &input.log_delivery_bucket {
        scope_569.string(var_570);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_update_stack(
    input: &crate::input::UpdateStackInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "UpdateStack", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_571 = writer.prefix("StackName");
    if let Some(var_572) = &input.stack_name {
        scope_571.string(var_572);
    }
    #[allow(unused_mut)]
    let mut scope_573 = writer.prefix("TemplateBody");
    if let Some(var_574) = &input.template_body {
        scope_573.string(var_574);
    }
    #[allow(unused_mut)]
    let mut scope_575 = writer.prefix("TemplateURL");
    if let Some(var_576) = &input.template_url {
        scope_575.string(var_576);
    }
    #[allow(unused_mut)]
    let mut scope_577 = writer.prefix("UsePreviousTemplate");
    if let Some(var_578) = &input.use_previous_template {
        scope_577.boolean(*var_578);
    }
    #[allow(unused_mut)]
    let mut scope_579 = writer.prefix("StackPolicyDuringUpdateBody");
    if let Some(var_580) = &input.stack_policy_during_update_body {
        scope_579.string(var_580);
    }
    #[allow(unused_mut)]
    let mut scope_581 = writer.prefix("StackPolicyDuringUpdateURL");
    if let Some(var_582) = &input.stack_policy_during_update_url {
        scope_581.string(var_582);
    }
    #[allow(unused_mut)]
    let mut scope_583 = writer.prefix("Parameters");
    if let Some(var_584) = &input.parameters {
        let mut list_586 = scope_583.start_list(false, None);
        for item_585 in var_584 {
            #[allow(unused_mut)]
            let mut entry_587 = list_586.entry();
            crate::query_ser::serialize_structure_parameter(entry_587, item_585);
        }
        list_586.finish();
    }
    #[allow(unused_mut)]
    let mut scope_588 = writer.prefix("Capabilities");
    if let Some(var_589) = &input.capabilities {
        let mut list_591 = scope_588.start_list(false, None);
        for item_590 in var_589 {
            #[allow(unused_mut)]
            let mut entry_592 = list_591.entry();
            entry_592.string(item_590.as_str());
        }
        list_591.finish();
    }
    #[allow(unused_mut)]
    let mut scope_593 = writer.prefix("ResourceTypes");
    if let Some(var_594) = &input.resource_types {
        let mut list_596 = scope_593.start_list(false, None);
        for item_595 in var_594 {
            #[allow(unused_mut)]
            let mut entry_597 = list_596.entry();
            entry_597.string(item_595);
        }
        list_596.finish();
    }
    #[allow(unused_mut)]
    let mut scope_598 = writer.prefix("RoleARN");
    if let Some(var_599) = &input.role_arn {
        scope_598.string(var_599);
    }
    #[allow(unused_mut)]
    let mut scope_600 = writer.prefix("RollbackConfiguration");
    if let Some(var_601) = &input.rollback_configuration {
        crate::query_ser::serialize_structure_rollback_configuration(scope_600, var_601);
    }
    #[allow(unused_mut)]
    let mut scope_602 = writer.prefix("StackPolicyBody");
    if let Some(var_603) = &input.stack_policy_body {
        scope_602.string(var_603);
    }
    #[allow(unused_mut)]
    let mut scope_604 = writer.prefix("StackPolicyURL");
    if let Some(var_605) = &input.stack_policy_url {
        scope_604.string(var_605);
    }
    #[allow(unused_mut)]
    let mut scope_606 = writer.prefix("NotificationARNs");
    if let Some(var_607) = &input.notification_ar_ns {
        let mut list_609 = scope_606.start_list(false, None);
        for item_608 in var_607 {
            #[allow(unused_mut)]
            let mut entry_610 = list_609.entry();
            entry_610.string(item_608);
        }
        list_609.finish();
    }
    #[allow(unused_mut)]
    let mut scope_611 = writer.prefix("Tags");
    if let Some(var_612) = &input.tags {
        let mut list_614 = scope_611.start_list(false, None);
        for item_613 in var_612 {
            #[allow(unused_mut)]
            let mut entry_615 = list_614.entry();
            crate::query_ser::serialize_structure_tag(entry_615, item_613);
        }
        list_614.finish();
    }
    #[allow(unused_mut)]
    let mut scope_616 = writer.prefix("ClientRequestToken");
    if let Some(var_617) = &input.client_request_token {
        scope_616.string(var_617);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_update_stack_instances(
    input: &crate::input::UpdateStackInstancesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "UpdateStackInstances", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_618 = writer.prefix("StackSetName");
    if let Some(var_619) = &input.stack_set_name {
        scope_618.string(var_619);
    }
    #[allow(unused_mut)]
    let mut scope_620 = writer.prefix("Accounts");
    if let Some(var_621) = &input.accounts {
        let mut list_623 = scope_620.start_list(false, None);
        for item_622 in var_621 {
            #[allow(unused_mut)]
            let mut entry_624 = list_623.entry();
            entry_624.string(item_622);
        }
        list_623.finish();
    }
    #[allow(unused_mut)]
    let mut scope_625 = writer.prefix("DeploymentTargets");
    if let Some(var_626) = &input.deployment_targets {
        crate::query_ser::serialize_structure_deployment_targets(scope_625, var_626);
    }
    #[allow(unused_mut)]
    let mut scope_627 = writer.prefix("Regions");
    if let Some(var_628) = &input.regions {
        let mut list_630 = scope_627.start_list(false, None);
        for item_629 in var_628 {
            #[allow(unused_mut)]
            let mut entry_631 = list_630.entry();
            entry_631.string(item_629);
        }
        list_630.finish();
    }
    #[allow(unused_mut)]
    let mut scope_632 = writer.prefix("ParameterOverrides");
    if let Some(var_633) = &input.parameter_overrides {
        let mut list_635 = scope_632.start_list(false, None);
        for item_634 in var_633 {
            #[allow(unused_mut)]
            let mut entry_636 = list_635.entry();
            crate::query_ser::serialize_structure_parameter(entry_636, item_634);
        }
        list_635.finish();
    }
    #[allow(unused_mut)]
    let mut scope_637 = writer.prefix("OperationPreferences");
    if let Some(var_638) = &input.operation_preferences {
        crate::query_ser::serialize_structure_stack_set_operation_preferences(scope_637, var_638);
    }
    #[allow(unused_mut)]
    let mut scope_639 = writer.prefix("OperationId");
    if let Some(var_640) = &input.operation_id {
        scope_639.string(var_640);
    }
    #[allow(unused_mut)]
    let mut scope_641 = writer.prefix("CallAs");
    if let Some(var_642) = &input.call_as {
        scope_641.string(var_642.as_str());
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_update_stack_set(
    input: &crate::input::UpdateStackSetInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "UpdateStackSet", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_643 = writer.prefix("StackSetName");
    if let Some(var_644) = &input.stack_set_name {
        scope_643.string(var_644);
    }
    #[allow(unused_mut)]
    let mut scope_645 = writer.prefix("Description");
    if let Some(var_646) = &input.description {
        scope_645.string(var_646);
    }
    #[allow(unused_mut)]
    let mut scope_647 = writer.prefix("TemplateBody");
    if let Some(var_648) = &input.template_body {
        scope_647.string(var_648);
    }
    #[allow(unused_mut)]
    let mut scope_649 = writer.prefix("TemplateURL");
    if let Some(var_650) = &input.template_url {
        scope_649.string(var_650);
    }
    #[allow(unused_mut)]
    let mut scope_651 = writer.prefix("UsePreviousTemplate");
    if let Some(var_652) = &input.use_previous_template {
        scope_651.boolean(*var_652);
    }
    #[allow(unused_mut)]
    let mut scope_653 = writer.prefix("Parameters");
    if let Some(var_654) = &input.parameters {
        let mut list_656 = scope_653.start_list(false, None);
        for item_655 in var_654 {
            #[allow(unused_mut)]
            let mut entry_657 = list_656.entry();
            crate::query_ser::serialize_structure_parameter(entry_657, item_655);
        }
        list_656.finish();
    }
    #[allow(unused_mut)]
    let mut scope_658 = writer.prefix("Capabilities");
    if let Some(var_659) = &input.capabilities {
        let mut list_661 = scope_658.start_list(false, None);
        for item_660 in var_659 {
            #[allow(unused_mut)]
            let mut entry_662 = list_661.entry();
            entry_662.string(item_660.as_str());
        }
        list_661.finish();
    }
    #[allow(unused_mut)]
    let mut scope_663 = writer.prefix("Tags");
    if let Some(var_664) = &input.tags {
        let mut list_666 = scope_663.start_list(false, None);
        for item_665 in var_664 {
            #[allow(unused_mut)]
            let mut entry_667 = list_666.entry();
            crate::query_ser::serialize_structure_tag(entry_667, item_665);
        }
        list_666.finish();
    }
    #[allow(unused_mut)]
    let mut scope_668 = writer.prefix("OperationPreferences");
    if let Some(var_669) = &input.operation_preferences {
        crate::query_ser::serialize_structure_stack_set_operation_preferences(scope_668, var_669);
    }
    #[allow(unused_mut)]
    let mut scope_670 = writer.prefix("AdministrationRoleARN");
    if let Some(var_671) = &input.administration_role_arn {
        scope_670.string(var_671);
    }
    #[allow(unused_mut)]
    let mut scope_672 = writer.prefix("ExecutionRoleName");
    if let Some(var_673) = &input.execution_role_name {
        scope_672.string(var_673);
    }
    #[allow(unused_mut)]
    let mut scope_674 = writer.prefix("DeploymentTargets");
    if let Some(var_675) = &input.deployment_targets {
        crate::query_ser::serialize_structure_deployment_targets(scope_674, var_675);
    }
    #[allow(unused_mut)]
    let mut scope_676 = writer.prefix("PermissionModel");
    if let Some(var_677) = &input.permission_model {
        scope_676.string(var_677.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_678 = writer.prefix("AutoDeployment");
    if let Some(var_679) = &input.auto_deployment {
        crate::query_ser::serialize_structure_auto_deployment(scope_678, var_679);
    }
    #[allow(unused_mut)]
    let mut scope_680 = writer.prefix("OperationId");
    if let Some(var_681) = &input.operation_id {
        scope_680.string(var_681);
    }
    #[allow(unused_mut)]
    let mut scope_682 = writer.prefix("Accounts");
    if let Some(var_683) = &input.accounts {
        let mut list_685 = scope_682.start_list(false, None);
        for item_684 in var_683 {
            #[allow(unused_mut)]
            let mut entry_686 = list_685.entry();
            entry_686.string(item_684);
        }
        list_685.finish();
    }
    #[allow(unused_mut)]
    let mut scope_687 = writer.prefix("Regions");
    if let Some(var_688) = &input.regions {
        let mut list_690 = scope_687.start_list(false, None);
        for item_689 in var_688 {
            #[allow(unused_mut)]
            let mut entry_691 = list_690.entry();
            entry_691.string(item_689);
        }
        list_690.finish();
    }
    #[allow(unused_mut)]
    let mut scope_692 = writer.prefix("CallAs");
    if let Some(var_693) = &input.call_as {
        scope_692.string(var_693.as_str());
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_update_termination_protection(
    input: &crate::input::UpdateTerminationProtectionInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "UpdateTerminationProtection", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_694 = writer.prefix("EnableTerminationProtection");
    if let Some(var_695) = &input.enable_termination_protection {
        scope_694.boolean(*var_695);
    }
    #[allow(unused_mut)]
    let mut scope_696 = writer.prefix("StackName");
    if let Some(var_697) = &input.stack_name {
        scope_696.string(var_697);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_validate_template(
    input: &crate::input::ValidateTemplateInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ValidateTemplate", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_698 = writer.prefix("TemplateBody");
    if let Some(var_699) = &input.template_body {
        scope_698.string(var_699);
    }
    #[allow(unused_mut)]
    let mut scope_700 = writer.prefix("TemplateURL");
    if let Some(var_701) = &input.template_url {
        scope_700.string(var_701);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}
