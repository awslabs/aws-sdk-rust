// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_operation_crate_operation_activate_type(
    input: &crate::input::ActivateTypeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ActivateType", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("Type");
    if let Some(var_2) = &input.r#type {
        scope_1.string(var_2.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("PublicTypeArn");
    if let Some(var_4) = &input.public_type_arn {
        scope_3.string(var_4);
    }
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("PublisherId");
    if let Some(var_6) = &input.publisher_id {
        scope_5.string(var_6);
    }
    #[allow(unused_mut)]
    let mut scope_7 = writer.prefix("TypeName");
    if let Some(var_8) = &input.type_name {
        scope_7.string(var_8);
    }
    #[allow(unused_mut)]
    let mut scope_9 = writer.prefix("TypeNameAlias");
    if let Some(var_10) = &input.type_name_alias {
        scope_9.string(var_10);
    }
    #[allow(unused_mut)]
    let mut scope_11 = writer.prefix("AutoUpdate");
    if let Some(var_12) = &input.auto_update {
        scope_11.boolean(*var_12);
    }
    #[allow(unused_mut)]
    let mut scope_13 = writer.prefix("LoggingConfig");
    if let Some(var_14) = &input.logging_config {
        crate::query_ser::serialize_structure_crate_model_logging_config(scope_13, var_14)?;
    }
    #[allow(unused_mut)]
    let mut scope_15 = writer.prefix("ExecutionRoleArn");
    if let Some(var_16) = &input.execution_role_arn {
        scope_15.string(var_16);
    }
    #[allow(unused_mut)]
    let mut scope_17 = writer.prefix("VersionBump");
    if let Some(var_18) = &input.version_bump {
        scope_17.string(var_18.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_19 = writer.prefix("MajorVersion");
    if let Some(var_20) = &input.major_version {
        scope_19.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_20).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_batch_describe_type_configurations(
    input: &crate::input::BatchDescribeTypeConfigurationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "BatchDescribeTypeConfigurations",
        "2010-05-15",
    );
    #[allow(unused_mut)]
    let mut scope_21 = writer.prefix("TypeConfigurationIdentifiers");
    if let Some(var_22) = &input.type_configuration_identifiers {
        let mut list_24 = scope_21.start_list(false, None);
        for item_23 in var_22 {
            #[allow(unused_mut)]
            let mut entry_25 = list_24.entry();
            crate::query_ser::serialize_structure_crate_model_type_configuration_identifier(
                entry_25, item_23,
            )?;
        }
        list_24.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_update_stack(
    input: &crate::input::CancelUpdateStackInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CancelUpdateStack", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_26 = writer.prefix("StackName");
    if let Some(var_27) = &input.stack_name {
        scope_26.string(var_27);
    }
    #[allow(unused_mut)]
    let mut scope_28 = writer.prefix("ClientRequestToken");
    if let Some(var_29) = &input.client_request_token {
        scope_28.string(var_29);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_continue_update_rollback(
    input: &crate::input::ContinueUpdateRollbackInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ContinueUpdateRollback", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_30 = writer.prefix("StackName");
    if let Some(var_31) = &input.stack_name {
        scope_30.string(var_31);
    }
    #[allow(unused_mut)]
    let mut scope_32 = writer.prefix("RoleARN");
    if let Some(var_33) = &input.role_arn {
        scope_32.string(var_33);
    }
    #[allow(unused_mut)]
    let mut scope_34 = writer.prefix("ResourcesToSkip");
    if let Some(var_35) = &input.resources_to_skip {
        let mut list_37 = scope_34.start_list(false, None);
        for item_36 in var_35 {
            #[allow(unused_mut)]
            let mut entry_38 = list_37.entry();
            entry_38.string(item_36);
        }
        list_37.finish();
    }
    #[allow(unused_mut)]
    let mut scope_39 = writer.prefix("ClientRequestToken");
    if let Some(var_40) = &input.client_request_token {
        scope_39.string(var_40);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_change_set(
    input: &crate::input::CreateChangeSetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateChangeSet", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_41 = writer.prefix("StackName");
    if let Some(var_42) = &input.stack_name {
        scope_41.string(var_42);
    }
    #[allow(unused_mut)]
    let mut scope_43 = writer.prefix("TemplateBody");
    if let Some(var_44) = &input.template_body {
        scope_43.string(var_44);
    }
    #[allow(unused_mut)]
    let mut scope_45 = writer.prefix("TemplateURL");
    if let Some(var_46) = &input.template_url {
        scope_45.string(var_46);
    }
    #[allow(unused_mut)]
    let mut scope_47 = writer.prefix("UsePreviousTemplate");
    if let Some(var_48) = &input.use_previous_template {
        scope_47.boolean(*var_48);
    }
    #[allow(unused_mut)]
    let mut scope_49 = writer.prefix("Parameters");
    if let Some(var_50) = &input.parameters {
        let mut list_52 = scope_49.start_list(false, None);
        for item_51 in var_50 {
            #[allow(unused_mut)]
            let mut entry_53 = list_52.entry();
            crate::query_ser::serialize_structure_crate_model_parameter(entry_53, item_51)?;
        }
        list_52.finish();
    }
    #[allow(unused_mut)]
    let mut scope_54 = writer.prefix("Capabilities");
    if let Some(var_55) = &input.capabilities {
        let mut list_57 = scope_54.start_list(false, None);
        for item_56 in var_55 {
            #[allow(unused_mut)]
            let mut entry_58 = list_57.entry();
            entry_58.string(item_56.as_str());
        }
        list_57.finish();
    }
    #[allow(unused_mut)]
    let mut scope_59 = writer.prefix("ResourceTypes");
    if let Some(var_60) = &input.resource_types {
        let mut list_62 = scope_59.start_list(false, None);
        for item_61 in var_60 {
            #[allow(unused_mut)]
            let mut entry_63 = list_62.entry();
            entry_63.string(item_61);
        }
        list_62.finish();
    }
    #[allow(unused_mut)]
    let mut scope_64 = writer.prefix("RoleARN");
    if let Some(var_65) = &input.role_arn {
        scope_64.string(var_65);
    }
    #[allow(unused_mut)]
    let mut scope_66 = writer.prefix("RollbackConfiguration");
    if let Some(var_67) = &input.rollback_configuration {
        crate::query_ser::serialize_structure_crate_model_rollback_configuration(scope_66, var_67)?;
    }
    #[allow(unused_mut)]
    let mut scope_68 = writer.prefix("NotificationARNs");
    if let Some(var_69) = &input.notification_ar_ns {
        let mut list_71 = scope_68.start_list(false, None);
        for item_70 in var_69 {
            #[allow(unused_mut)]
            let mut entry_72 = list_71.entry();
            entry_72.string(item_70);
        }
        list_71.finish();
    }
    #[allow(unused_mut)]
    let mut scope_73 = writer.prefix("Tags");
    if let Some(var_74) = &input.tags {
        let mut list_76 = scope_73.start_list(false, None);
        for item_75 in var_74 {
            #[allow(unused_mut)]
            let mut entry_77 = list_76.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_77, item_75)?;
        }
        list_76.finish();
    }
    #[allow(unused_mut)]
    let mut scope_78 = writer.prefix("ChangeSetName");
    if let Some(var_79) = &input.change_set_name {
        scope_78.string(var_79);
    }
    #[allow(unused_mut)]
    let mut scope_80 = writer.prefix("ClientToken");
    if let Some(var_81) = &input.client_token {
        scope_80.string(var_81);
    }
    #[allow(unused_mut)]
    let mut scope_82 = writer.prefix("Description");
    if let Some(var_83) = &input.description {
        scope_82.string(var_83);
    }
    #[allow(unused_mut)]
    let mut scope_84 = writer.prefix("ChangeSetType");
    if let Some(var_85) = &input.change_set_type {
        scope_84.string(var_85.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_86 = writer.prefix("ResourcesToImport");
    if let Some(var_87) = &input.resources_to_import {
        let mut list_89 = scope_86.start_list(false, None);
        for item_88 in var_87 {
            #[allow(unused_mut)]
            let mut entry_90 = list_89.entry();
            crate::query_ser::serialize_structure_crate_model_resource_to_import(
                entry_90, item_88,
            )?;
        }
        list_89.finish();
    }
    #[allow(unused_mut)]
    let mut scope_91 = writer.prefix("IncludeNestedStacks");
    if let Some(var_92) = &input.include_nested_stacks {
        scope_91.boolean(*var_92);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_stack(
    input: &crate::input::CreateStackInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateStack", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_93 = writer.prefix("StackName");
    if let Some(var_94) = &input.stack_name {
        scope_93.string(var_94);
    }
    #[allow(unused_mut)]
    let mut scope_95 = writer.prefix("TemplateBody");
    if let Some(var_96) = &input.template_body {
        scope_95.string(var_96);
    }
    #[allow(unused_mut)]
    let mut scope_97 = writer.prefix("TemplateURL");
    if let Some(var_98) = &input.template_url {
        scope_97.string(var_98);
    }
    #[allow(unused_mut)]
    let mut scope_99 = writer.prefix("Parameters");
    if let Some(var_100) = &input.parameters {
        let mut list_102 = scope_99.start_list(false, None);
        for item_101 in var_100 {
            #[allow(unused_mut)]
            let mut entry_103 = list_102.entry();
            crate::query_ser::serialize_structure_crate_model_parameter(entry_103, item_101)?;
        }
        list_102.finish();
    }
    #[allow(unused_mut)]
    let mut scope_104 = writer.prefix("DisableRollback");
    if let Some(var_105) = &input.disable_rollback {
        scope_104.boolean(*var_105);
    }
    #[allow(unused_mut)]
    let mut scope_106 = writer.prefix("RollbackConfiguration");
    if let Some(var_107) = &input.rollback_configuration {
        crate::query_ser::serialize_structure_crate_model_rollback_configuration(
            scope_106, var_107,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_108 = writer.prefix("TimeoutInMinutes");
    if let Some(var_109) = &input.timeout_in_minutes {
        scope_108.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_109).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_110 = writer.prefix("NotificationARNs");
    if let Some(var_111) = &input.notification_ar_ns {
        let mut list_113 = scope_110.start_list(false, None);
        for item_112 in var_111 {
            #[allow(unused_mut)]
            let mut entry_114 = list_113.entry();
            entry_114.string(item_112);
        }
        list_113.finish();
    }
    #[allow(unused_mut)]
    let mut scope_115 = writer.prefix("Capabilities");
    if let Some(var_116) = &input.capabilities {
        let mut list_118 = scope_115.start_list(false, None);
        for item_117 in var_116 {
            #[allow(unused_mut)]
            let mut entry_119 = list_118.entry();
            entry_119.string(item_117.as_str());
        }
        list_118.finish();
    }
    #[allow(unused_mut)]
    let mut scope_120 = writer.prefix("ResourceTypes");
    if let Some(var_121) = &input.resource_types {
        let mut list_123 = scope_120.start_list(false, None);
        for item_122 in var_121 {
            #[allow(unused_mut)]
            let mut entry_124 = list_123.entry();
            entry_124.string(item_122);
        }
        list_123.finish();
    }
    #[allow(unused_mut)]
    let mut scope_125 = writer.prefix("RoleARN");
    if let Some(var_126) = &input.role_arn {
        scope_125.string(var_126);
    }
    #[allow(unused_mut)]
    let mut scope_127 = writer.prefix("OnFailure");
    if let Some(var_128) = &input.on_failure {
        scope_127.string(var_128.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_129 = writer.prefix("StackPolicyBody");
    if let Some(var_130) = &input.stack_policy_body {
        scope_129.string(var_130);
    }
    #[allow(unused_mut)]
    let mut scope_131 = writer.prefix("StackPolicyURL");
    if let Some(var_132) = &input.stack_policy_url {
        scope_131.string(var_132);
    }
    #[allow(unused_mut)]
    let mut scope_133 = writer.prefix("Tags");
    if let Some(var_134) = &input.tags {
        let mut list_136 = scope_133.start_list(false, None);
        for item_135 in var_134 {
            #[allow(unused_mut)]
            let mut entry_137 = list_136.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_137, item_135)?;
        }
        list_136.finish();
    }
    #[allow(unused_mut)]
    let mut scope_138 = writer.prefix("ClientRequestToken");
    if let Some(var_139) = &input.client_request_token {
        scope_138.string(var_139);
    }
    #[allow(unused_mut)]
    let mut scope_140 = writer.prefix("EnableTerminationProtection");
    if let Some(var_141) = &input.enable_termination_protection {
        scope_140.boolean(*var_141);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_stack_instances(
    input: &crate::input::CreateStackInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateStackInstances", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_142 = writer.prefix("StackSetName");
    if let Some(var_143) = &input.stack_set_name {
        scope_142.string(var_143);
    }
    #[allow(unused_mut)]
    let mut scope_144 = writer.prefix("Accounts");
    if let Some(var_145) = &input.accounts {
        let mut list_147 = scope_144.start_list(false, None);
        for item_146 in var_145 {
            #[allow(unused_mut)]
            let mut entry_148 = list_147.entry();
            entry_148.string(item_146);
        }
        list_147.finish();
    }
    #[allow(unused_mut)]
    let mut scope_149 = writer.prefix("DeploymentTargets");
    if let Some(var_150) = &input.deployment_targets {
        crate::query_ser::serialize_structure_crate_model_deployment_targets(scope_149, var_150)?;
    }
    #[allow(unused_mut)]
    let mut scope_151 = writer.prefix("Regions");
    if let Some(var_152) = &input.regions {
        let mut list_154 = scope_151.start_list(false, None);
        for item_153 in var_152 {
            #[allow(unused_mut)]
            let mut entry_155 = list_154.entry();
            entry_155.string(item_153);
        }
        list_154.finish();
    }
    #[allow(unused_mut)]
    let mut scope_156 = writer.prefix("ParameterOverrides");
    if let Some(var_157) = &input.parameter_overrides {
        let mut list_159 = scope_156.start_list(false, None);
        for item_158 in var_157 {
            #[allow(unused_mut)]
            let mut entry_160 = list_159.entry();
            crate::query_ser::serialize_structure_crate_model_parameter(entry_160, item_158)?;
        }
        list_159.finish();
    }
    #[allow(unused_mut)]
    let mut scope_161 = writer.prefix("OperationPreferences");
    if let Some(var_162) = &input.operation_preferences {
        crate::query_ser::serialize_structure_crate_model_stack_set_operation_preferences(
            scope_161, var_162,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_163 = writer.prefix("OperationId");
    if let Some(var_164) = &input.operation_id {
        scope_163.string(var_164);
    }
    #[allow(unused_mut)]
    let mut scope_165 = writer.prefix("CallAs");
    if let Some(var_166) = &input.call_as {
        scope_165.string(var_166.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_stack_set(
    input: &crate::input::CreateStackSetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateStackSet", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_167 = writer.prefix("StackSetName");
    if let Some(var_168) = &input.stack_set_name {
        scope_167.string(var_168);
    }
    #[allow(unused_mut)]
    let mut scope_169 = writer.prefix("Description");
    if let Some(var_170) = &input.description {
        scope_169.string(var_170);
    }
    #[allow(unused_mut)]
    let mut scope_171 = writer.prefix("TemplateBody");
    if let Some(var_172) = &input.template_body {
        scope_171.string(var_172);
    }
    #[allow(unused_mut)]
    let mut scope_173 = writer.prefix("TemplateURL");
    if let Some(var_174) = &input.template_url {
        scope_173.string(var_174);
    }
    #[allow(unused_mut)]
    let mut scope_175 = writer.prefix("StackId");
    if let Some(var_176) = &input.stack_id {
        scope_175.string(var_176);
    }
    #[allow(unused_mut)]
    let mut scope_177 = writer.prefix("Parameters");
    if let Some(var_178) = &input.parameters {
        let mut list_180 = scope_177.start_list(false, None);
        for item_179 in var_178 {
            #[allow(unused_mut)]
            let mut entry_181 = list_180.entry();
            crate::query_ser::serialize_structure_crate_model_parameter(entry_181, item_179)?;
        }
        list_180.finish();
    }
    #[allow(unused_mut)]
    let mut scope_182 = writer.prefix("Capabilities");
    if let Some(var_183) = &input.capabilities {
        let mut list_185 = scope_182.start_list(false, None);
        for item_184 in var_183 {
            #[allow(unused_mut)]
            let mut entry_186 = list_185.entry();
            entry_186.string(item_184.as_str());
        }
        list_185.finish();
    }
    #[allow(unused_mut)]
    let mut scope_187 = writer.prefix("Tags");
    if let Some(var_188) = &input.tags {
        let mut list_190 = scope_187.start_list(false, None);
        for item_189 in var_188 {
            #[allow(unused_mut)]
            let mut entry_191 = list_190.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_191, item_189)?;
        }
        list_190.finish();
    }
    #[allow(unused_mut)]
    let mut scope_192 = writer.prefix("AdministrationRoleARN");
    if let Some(var_193) = &input.administration_role_arn {
        scope_192.string(var_193);
    }
    #[allow(unused_mut)]
    let mut scope_194 = writer.prefix("ExecutionRoleName");
    if let Some(var_195) = &input.execution_role_name {
        scope_194.string(var_195);
    }
    #[allow(unused_mut)]
    let mut scope_196 = writer.prefix("PermissionModel");
    if let Some(var_197) = &input.permission_model {
        scope_196.string(var_197.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_198 = writer.prefix("AutoDeployment");
    if let Some(var_199) = &input.auto_deployment {
        crate::query_ser::serialize_structure_crate_model_auto_deployment(scope_198, var_199)?;
    }
    #[allow(unused_mut)]
    let mut scope_200 = writer.prefix("CallAs");
    if let Some(var_201) = &input.call_as {
        scope_200.string(var_201.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_202 = writer.prefix("ClientRequestToken");
    if let Some(var_203) = &input.client_request_token {
        scope_202.string(var_203);
    }
    #[allow(unused_mut)]
    let mut scope_204 = writer.prefix("ManagedExecution");
    if let Some(var_205) = &input.managed_execution {
        crate::query_ser::serialize_structure_crate_model_managed_execution(scope_204, var_205)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deactivate_type(
    input: &crate::input::DeactivateTypeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeactivateType", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_206 = writer.prefix("TypeName");
    if let Some(var_207) = &input.type_name {
        scope_206.string(var_207);
    }
    #[allow(unused_mut)]
    let mut scope_208 = writer.prefix("Type");
    if let Some(var_209) = &input.r#type {
        scope_208.string(var_209.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_210 = writer.prefix("Arn");
    if let Some(var_211) = &input.arn {
        scope_210.string(var_211);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_change_set(
    input: &crate::input::DeleteChangeSetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteChangeSet", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_212 = writer.prefix("ChangeSetName");
    if let Some(var_213) = &input.change_set_name {
        scope_212.string(var_213);
    }
    #[allow(unused_mut)]
    let mut scope_214 = writer.prefix("StackName");
    if let Some(var_215) = &input.stack_name {
        scope_214.string(var_215);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_stack(
    input: &crate::input::DeleteStackInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteStack", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_216 = writer.prefix("StackName");
    if let Some(var_217) = &input.stack_name {
        scope_216.string(var_217);
    }
    #[allow(unused_mut)]
    let mut scope_218 = writer.prefix("RetainResources");
    if let Some(var_219) = &input.retain_resources {
        let mut list_221 = scope_218.start_list(false, None);
        for item_220 in var_219 {
            #[allow(unused_mut)]
            let mut entry_222 = list_221.entry();
            entry_222.string(item_220);
        }
        list_221.finish();
    }
    #[allow(unused_mut)]
    let mut scope_223 = writer.prefix("RoleARN");
    if let Some(var_224) = &input.role_arn {
        scope_223.string(var_224);
    }
    #[allow(unused_mut)]
    let mut scope_225 = writer.prefix("ClientRequestToken");
    if let Some(var_226) = &input.client_request_token {
        scope_225.string(var_226);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_stack_instances(
    input: &crate::input::DeleteStackInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteStackInstances", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_227 = writer.prefix("StackSetName");
    if let Some(var_228) = &input.stack_set_name {
        scope_227.string(var_228);
    }
    #[allow(unused_mut)]
    let mut scope_229 = writer.prefix("Accounts");
    if let Some(var_230) = &input.accounts {
        let mut list_232 = scope_229.start_list(false, None);
        for item_231 in var_230 {
            #[allow(unused_mut)]
            let mut entry_233 = list_232.entry();
            entry_233.string(item_231);
        }
        list_232.finish();
    }
    #[allow(unused_mut)]
    let mut scope_234 = writer.prefix("DeploymentTargets");
    if let Some(var_235) = &input.deployment_targets {
        crate::query_ser::serialize_structure_crate_model_deployment_targets(scope_234, var_235)?;
    }
    #[allow(unused_mut)]
    let mut scope_236 = writer.prefix("Regions");
    if let Some(var_237) = &input.regions {
        let mut list_239 = scope_236.start_list(false, None);
        for item_238 in var_237 {
            #[allow(unused_mut)]
            let mut entry_240 = list_239.entry();
            entry_240.string(item_238);
        }
        list_239.finish();
    }
    #[allow(unused_mut)]
    let mut scope_241 = writer.prefix("OperationPreferences");
    if let Some(var_242) = &input.operation_preferences {
        crate::query_ser::serialize_structure_crate_model_stack_set_operation_preferences(
            scope_241, var_242,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_243 = writer.prefix("RetainStacks");
    {
        scope_243.boolean(input.retain_stacks);
    }
    #[allow(unused_mut)]
    let mut scope_244 = writer.prefix("OperationId");
    if let Some(var_245) = &input.operation_id {
        scope_244.string(var_245);
    }
    #[allow(unused_mut)]
    let mut scope_246 = writer.prefix("CallAs");
    if let Some(var_247) = &input.call_as {
        scope_246.string(var_247.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_stack_set(
    input: &crate::input::DeleteStackSetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteStackSet", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_248 = writer.prefix("StackSetName");
    if let Some(var_249) = &input.stack_set_name {
        scope_248.string(var_249);
    }
    #[allow(unused_mut)]
    let mut scope_250 = writer.prefix("CallAs");
    if let Some(var_251) = &input.call_as {
        scope_250.string(var_251.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deregister_type(
    input: &crate::input::DeregisterTypeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeregisterType", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_252 = writer.prefix("Arn");
    if let Some(var_253) = &input.arn {
        scope_252.string(var_253);
    }
    #[allow(unused_mut)]
    let mut scope_254 = writer.prefix("Type");
    if let Some(var_255) = &input.r#type {
        scope_254.string(var_255.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_256 = writer.prefix("TypeName");
    if let Some(var_257) = &input.type_name {
        scope_256.string(var_257);
    }
    #[allow(unused_mut)]
    let mut scope_258 = writer.prefix("VersionId");
    if let Some(var_259) = &input.version_id {
        scope_258.string(var_259);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_account_limits(
    input: &crate::input::DescribeAccountLimitsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeAccountLimits", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_260 = writer.prefix("NextToken");
    if let Some(var_261) = &input.next_token {
        scope_260.string(var_261);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_change_set(
    input: &crate::input::DescribeChangeSetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeChangeSet", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_262 = writer.prefix("ChangeSetName");
    if let Some(var_263) = &input.change_set_name {
        scope_262.string(var_263);
    }
    #[allow(unused_mut)]
    let mut scope_264 = writer.prefix("StackName");
    if let Some(var_265) = &input.stack_name {
        scope_264.string(var_265);
    }
    #[allow(unused_mut)]
    let mut scope_266 = writer.prefix("NextToken");
    if let Some(var_267) = &input.next_token {
        scope_266.string(var_267);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_publisher(
    input: &crate::input::DescribePublisherInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribePublisher", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_268 = writer.prefix("PublisherId");
    if let Some(var_269) = &input.publisher_id {
        scope_268.string(var_269);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_stack_drift_detection_status(
    input: &crate::input::DescribeStackDriftDetectionStatusInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeStackDriftDetectionStatus",
        "2010-05-15",
    );
    #[allow(unused_mut)]
    let mut scope_270 = writer.prefix("StackDriftDetectionId");
    if let Some(var_271) = &input.stack_drift_detection_id {
        scope_270.string(var_271);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_stack_events(
    input: &crate::input::DescribeStackEventsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeStackEvents", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_272 = writer.prefix("StackName");
    if let Some(var_273) = &input.stack_name {
        scope_272.string(var_273);
    }
    #[allow(unused_mut)]
    let mut scope_274 = writer.prefix("NextToken");
    if let Some(var_275) = &input.next_token {
        scope_274.string(var_275);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_stack_instance(
    input: &crate::input::DescribeStackInstanceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeStackInstance", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_276 = writer.prefix("StackSetName");
    if let Some(var_277) = &input.stack_set_name {
        scope_276.string(var_277);
    }
    #[allow(unused_mut)]
    let mut scope_278 = writer.prefix("StackInstanceAccount");
    if let Some(var_279) = &input.stack_instance_account {
        scope_278.string(var_279);
    }
    #[allow(unused_mut)]
    let mut scope_280 = writer.prefix("StackInstanceRegion");
    if let Some(var_281) = &input.stack_instance_region {
        scope_280.string(var_281);
    }
    #[allow(unused_mut)]
    let mut scope_282 = writer.prefix("CallAs");
    if let Some(var_283) = &input.call_as {
        scope_282.string(var_283.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_stack_resource(
    input: &crate::input::DescribeStackResourceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeStackResource", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_284 = writer.prefix("StackName");
    if let Some(var_285) = &input.stack_name {
        scope_284.string(var_285);
    }
    #[allow(unused_mut)]
    let mut scope_286 = writer.prefix("LogicalResourceId");
    if let Some(var_287) = &input.logical_resource_id {
        scope_286.string(var_287);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_stack_resource_drifts(
    input: &crate::input::DescribeStackResourceDriftsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeStackResourceDrifts", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_288 = writer.prefix("StackName");
    if let Some(var_289) = &input.stack_name {
        scope_288.string(var_289);
    }
    #[allow(unused_mut)]
    let mut scope_290 = writer.prefix("StackResourceDriftStatusFilters");
    if let Some(var_291) = &input.stack_resource_drift_status_filters {
        let mut list_293 = scope_290.start_list(false, None);
        for item_292 in var_291 {
            #[allow(unused_mut)]
            let mut entry_294 = list_293.entry();
            entry_294.string(item_292.as_str());
        }
        list_293.finish();
    }
    #[allow(unused_mut)]
    let mut scope_295 = writer.prefix("NextToken");
    if let Some(var_296) = &input.next_token {
        scope_295.string(var_296);
    }
    #[allow(unused_mut)]
    let mut scope_297 = writer.prefix("MaxResults");
    if let Some(var_298) = &input.max_results {
        scope_297.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_298).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_stack_resources(
    input: &crate::input::DescribeStackResourcesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeStackResources", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_299 = writer.prefix("StackName");
    if let Some(var_300) = &input.stack_name {
        scope_299.string(var_300);
    }
    #[allow(unused_mut)]
    let mut scope_301 = writer.prefix("LogicalResourceId");
    if let Some(var_302) = &input.logical_resource_id {
        scope_301.string(var_302);
    }
    #[allow(unused_mut)]
    let mut scope_303 = writer.prefix("PhysicalResourceId");
    if let Some(var_304) = &input.physical_resource_id {
        scope_303.string(var_304);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_stacks(
    input: &crate::input::DescribeStacksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeStacks", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_305 = writer.prefix("StackName");
    if let Some(var_306) = &input.stack_name {
        scope_305.string(var_306);
    }
    #[allow(unused_mut)]
    let mut scope_307 = writer.prefix("NextToken");
    if let Some(var_308) = &input.next_token {
        scope_307.string(var_308);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_stack_set(
    input: &crate::input::DescribeStackSetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeStackSet", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_309 = writer.prefix("StackSetName");
    if let Some(var_310) = &input.stack_set_name {
        scope_309.string(var_310);
    }
    #[allow(unused_mut)]
    let mut scope_311 = writer.prefix("CallAs");
    if let Some(var_312) = &input.call_as {
        scope_311.string(var_312.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_stack_set_operation(
    input: &crate::input::DescribeStackSetOperationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeStackSetOperation", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_313 = writer.prefix("StackSetName");
    if let Some(var_314) = &input.stack_set_name {
        scope_313.string(var_314);
    }
    #[allow(unused_mut)]
    let mut scope_315 = writer.prefix("OperationId");
    if let Some(var_316) = &input.operation_id {
        scope_315.string(var_316);
    }
    #[allow(unused_mut)]
    let mut scope_317 = writer.prefix("CallAs");
    if let Some(var_318) = &input.call_as {
        scope_317.string(var_318.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_type(
    input: &crate::input::DescribeTypeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeType", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_319 = writer.prefix("Type");
    if let Some(var_320) = &input.r#type {
        scope_319.string(var_320.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_321 = writer.prefix("TypeName");
    if let Some(var_322) = &input.type_name {
        scope_321.string(var_322);
    }
    #[allow(unused_mut)]
    let mut scope_323 = writer.prefix("Arn");
    if let Some(var_324) = &input.arn {
        scope_323.string(var_324);
    }
    #[allow(unused_mut)]
    let mut scope_325 = writer.prefix("VersionId");
    if let Some(var_326) = &input.version_id {
        scope_325.string(var_326);
    }
    #[allow(unused_mut)]
    let mut scope_327 = writer.prefix("PublisherId");
    if let Some(var_328) = &input.publisher_id {
        scope_327.string(var_328);
    }
    #[allow(unused_mut)]
    let mut scope_329 = writer.prefix("PublicVersionNumber");
    if let Some(var_330) = &input.public_version_number {
        scope_329.string(var_330);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_type_registration(
    input: &crate::input::DescribeTypeRegistrationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeTypeRegistration", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_331 = writer.prefix("RegistrationToken");
    if let Some(var_332) = &input.registration_token {
        scope_331.string(var_332);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_detect_stack_drift(
    input: &crate::input::DetectStackDriftInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DetectStackDrift", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_333 = writer.prefix("StackName");
    if let Some(var_334) = &input.stack_name {
        scope_333.string(var_334);
    }
    #[allow(unused_mut)]
    let mut scope_335 = writer.prefix("LogicalResourceIds");
    if let Some(var_336) = &input.logical_resource_ids {
        let mut list_338 = scope_335.start_list(false, None);
        for item_337 in var_336 {
            #[allow(unused_mut)]
            let mut entry_339 = list_338.entry();
            entry_339.string(item_337);
        }
        list_338.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_detect_stack_resource_drift(
    input: &crate::input::DetectStackResourceDriftInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DetectStackResourceDrift", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_340 = writer.prefix("StackName");
    if let Some(var_341) = &input.stack_name {
        scope_340.string(var_341);
    }
    #[allow(unused_mut)]
    let mut scope_342 = writer.prefix("LogicalResourceId");
    if let Some(var_343) = &input.logical_resource_id {
        scope_342.string(var_343);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_detect_stack_set_drift(
    input: &crate::input::DetectStackSetDriftInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DetectStackSetDrift", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_344 = writer.prefix("StackSetName");
    if let Some(var_345) = &input.stack_set_name {
        scope_344.string(var_345);
    }
    #[allow(unused_mut)]
    let mut scope_346 = writer.prefix("OperationPreferences");
    if let Some(var_347) = &input.operation_preferences {
        crate::query_ser::serialize_structure_crate_model_stack_set_operation_preferences(
            scope_346, var_347,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_348 = writer.prefix("OperationId");
    if let Some(var_349) = &input.operation_id {
        scope_348.string(var_349);
    }
    #[allow(unused_mut)]
    let mut scope_350 = writer.prefix("CallAs");
    if let Some(var_351) = &input.call_as {
        scope_350.string(var_351.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_estimate_template_cost(
    input: &crate::input::EstimateTemplateCostInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "EstimateTemplateCost", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_352 = writer.prefix("TemplateBody");
    if let Some(var_353) = &input.template_body {
        scope_352.string(var_353);
    }
    #[allow(unused_mut)]
    let mut scope_354 = writer.prefix("TemplateURL");
    if let Some(var_355) = &input.template_url {
        scope_354.string(var_355);
    }
    #[allow(unused_mut)]
    let mut scope_356 = writer.prefix("Parameters");
    if let Some(var_357) = &input.parameters {
        let mut list_359 = scope_356.start_list(false, None);
        for item_358 in var_357 {
            #[allow(unused_mut)]
            let mut entry_360 = list_359.entry();
            crate::query_ser::serialize_structure_crate_model_parameter(entry_360, item_358)?;
        }
        list_359.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_execute_change_set(
    input: &crate::input::ExecuteChangeSetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ExecuteChangeSet", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_361 = writer.prefix("ChangeSetName");
    if let Some(var_362) = &input.change_set_name {
        scope_361.string(var_362);
    }
    #[allow(unused_mut)]
    let mut scope_363 = writer.prefix("StackName");
    if let Some(var_364) = &input.stack_name {
        scope_363.string(var_364);
    }
    #[allow(unused_mut)]
    let mut scope_365 = writer.prefix("ClientRequestToken");
    if let Some(var_366) = &input.client_request_token {
        scope_365.string(var_366);
    }
    #[allow(unused_mut)]
    let mut scope_367 = writer.prefix("DisableRollback");
    if let Some(var_368) = &input.disable_rollback {
        scope_367.boolean(*var_368);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_stack_policy(
    input: &crate::input::GetStackPolicyInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetStackPolicy", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_369 = writer.prefix("StackName");
    if let Some(var_370) = &input.stack_name {
        scope_369.string(var_370);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_template(
    input: &crate::input::GetTemplateInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetTemplate", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_371 = writer.prefix("StackName");
    if let Some(var_372) = &input.stack_name {
        scope_371.string(var_372);
    }
    #[allow(unused_mut)]
    let mut scope_373 = writer.prefix("ChangeSetName");
    if let Some(var_374) = &input.change_set_name {
        scope_373.string(var_374);
    }
    #[allow(unused_mut)]
    let mut scope_375 = writer.prefix("TemplateStage");
    if let Some(var_376) = &input.template_stage {
        scope_375.string(var_376.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_template_summary(
    input: &crate::input::GetTemplateSummaryInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetTemplateSummary", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_377 = writer.prefix("TemplateBody");
    if let Some(var_378) = &input.template_body {
        scope_377.string(var_378);
    }
    #[allow(unused_mut)]
    let mut scope_379 = writer.prefix("TemplateURL");
    if let Some(var_380) = &input.template_url {
        scope_379.string(var_380);
    }
    #[allow(unused_mut)]
    let mut scope_381 = writer.prefix("StackName");
    if let Some(var_382) = &input.stack_name {
        scope_381.string(var_382);
    }
    #[allow(unused_mut)]
    let mut scope_383 = writer.prefix("StackSetName");
    if let Some(var_384) = &input.stack_set_name {
        scope_383.string(var_384);
    }
    #[allow(unused_mut)]
    let mut scope_385 = writer.prefix("CallAs");
    if let Some(var_386) = &input.call_as {
        scope_385.string(var_386.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_import_stacks_to_stack_set(
    input: &crate::input::ImportStacksToStackSetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ImportStacksToStackSet", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_387 = writer.prefix("StackSetName");
    if let Some(var_388) = &input.stack_set_name {
        scope_387.string(var_388);
    }
    #[allow(unused_mut)]
    let mut scope_389 = writer.prefix("StackIds");
    if let Some(var_390) = &input.stack_ids {
        let mut list_392 = scope_389.start_list(false, None);
        for item_391 in var_390 {
            #[allow(unused_mut)]
            let mut entry_393 = list_392.entry();
            entry_393.string(item_391);
        }
        list_392.finish();
    }
    #[allow(unused_mut)]
    let mut scope_394 = writer.prefix("StackIdsUrl");
    if let Some(var_395) = &input.stack_ids_url {
        scope_394.string(var_395);
    }
    #[allow(unused_mut)]
    let mut scope_396 = writer.prefix("OrganizationalUnitIds");
    if let Some(var_397) = &input.organizational_unit_ids {
        let mut list_399 = scope_396.start_list(false, None);
        for item_398 in var_397 {
            #[allow(unused_mut)]
            let mut entry_400 = list_399.entry();
            entry_400.string(item_398);
        }
        list_399.finish();
    }
    #[allow(unused_mut)]
    let mut scope_401 = writer.prefix("OperationPreferences");
    if let Some(var_402) = &input.operation_preferences {
        crate::query_ser::serialize_structure_crate_model_stack_set_operation_preferences(
            scope_401, var_402,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_403 = writer.prefix("OperationId");
    if let Some(var_404) = &input.operation_id {
        scope_403.string(var_404);
    }
    #[allow(unused_mut)]
    let mut scope_405 = writer.prefix("CallAs");
    if let Some(var_406) = &input.call_as {
        scope_405.string(var_406.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_list_change_sets(
    input: &crate::input::ListChangeSetsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ListChangeSets", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_407 = writer.prefix("StackName");
    if let Some(var_408) = &input.stack_name {
        scope_407.string(var_408);
    }
    #[allow(unused_mut)]
    let mut scope_409 = writer.prefix("NextToken");
    if let Some(var_410) = &input.next_token {
        scope_409.string(var_410);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_list_exports(
    input: &crate::input::ListExportsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ListExports", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_411 = writer.prefix("NextToken");
    if let Some(var_412) = &input.next_token {
        scope_411.string(var_412);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_list_imports(
    input: &crate::input::ListImportsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ListImports", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_413 = writer.prefix("ExportName");
    if let Some(var_414) = &input.export_name {
        scope_413.string(var_414);
    }
    #[allow(unused_mut)]
    let mut scope_415 = writer.prefix("NextToken");
    if let Some(var_416) = &input.next_token {
        scope_415.string(var_416);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_list_stack_instances(
    input: &crate::input::ListStackInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ListStackInstances", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_417 = writer.prefix("StackSetName");
    if let Some(var_418) = &input.stack_set_name {
        scope_417.string(var_418);
    }
    #[allow(unused_mut)]
    let mut scope_419 = writer.prefix("NextToken");
    if let Some(var_420) = &input.next_token {
        scope_419.string(var_420);
    }
    #[allow(unused_mut)]
    let mut scope_421 = writer.prefix("MaxResults");
    if let Some(var_422) = &input.max_results {
        scope_421.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_422).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_423 = writer.prefix("Filters");
    if let Some(var_424) = &input.filters {
        let mut list_426 = scope_423.start_list(false, None);
        for item_425 in var_424 {
            #[allow(unused_mut)]
            let mut entry_427 = list_426.entry();
            crate::query_ser::serialize_structure_crate_model_stack_instance_filter(
                entry_427, item_425,
            )?;
        }
        list_426.finish();
    }
    #[allow(unused_mut)]
    let mut scope_428 = writer.prefix("StackInstanceAccount");
    if let Some(var_429) = &input.stack_instance_account {
        scope_428.string(var_429);
    }
    #[allow(unused_mut)]
    let mut scope_430 = writer.prefix("StackInstanceRegion");
    if let Some(var_431) = &input.stack_instance_region {
        scope_430.string(var_431);
    }
    #[allow(unused_mut)]
    let mut scope_432 = writer.prefix("CallAs");
    if let Some(var_433) = &input.call_as {
        scope_432.string(var_433.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_list_stack_resources(
    input: &crate::input::ListStackResourcesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ListStackResources", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_434 = writer.prefix("StackName");
    if let Some(var_435) = &input.stack_name {
        scope_434.string(var_435);
    }
    #[allow(unused_mut)]
    let mut scope_436 = writer.prefix("NextToken");
    if let Some(var_437) = &input.next_token {
        scope_436.string(var_437);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_list_stacks(
    input: &crate::input::ListStacksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ListStacks", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_438 = writer.prefix("NextToken");
    if let Some(var_439) = &input.next_token {
        scope_438.string(var_439);
    }
    #[allow(unused_mut)]
    let mut scope_440 = writer.prefix("StackStatusFilter");
    if let Some(var_441) = &input.stack_status_filter {
        let mut list_443 = scope_440.start_list(false, None);
        for item_442 in var_441 {
            #[allow(unused_mut)]
            let mut entry_444 = list_443.entry();
            entry_444.string(item_442.as_str());
        }
        list_443.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_list_stack_set_operation_results(
    input: &crate::input::ListStackSetOperationResultsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ListStackSetOperationResults", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_445 = writer.prefix("StackSetName");
    if let Some(var_446) = &input.stack_set_name {
        scope_445.string(var_446);
    }
    #[allow(unused_mut)]
    let mut scope_447 = writer.prefix("OperationId");
    if let Some(var_448) = &input.operation_id {
        scope_447.string(var_448);
    }
    #[allow(unused_mut)]
    let mut scope_449 = writer.prefix("NextToken");
    if let Some(var_450) = &input.next_token {
        scope_449.string(var_450);
    }
    #[allow(unused_mut)]
    let mut scope_451 = writer.prefix("MaxResults");
    if let Some(var_452) = &input.max_results {
        scope_451.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_452).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_453 = writer.prefix("CallAs");
    if let Some(var_454) = &input.call_as {
        scope_453.string(var_454.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_list_stack_set_operations(
    input: &crate::input::ListStackSetOperationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ListStackSetOperations", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_455 = writer.prefix("StackSetName");
    if let Some(var_456) = &input.stack_set_name {
        scope_455.string(var_456);
    }
    #[allow(unused_mut)]
    let mut scope_457 = writer.prefix("NextToken");
    if let Some(var_458) = &input.next_token {
        scope_457.string(var_458);
    }
    #[allow(unused_mut)]
    let mut scope_459 = writer.prefix("MaxResults");
    if let Some(var_460) = &input.max_results {
        scope_459.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_460).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_461 = writer.prefix("CallAs");
    if let Some(var_462) = &input.call_as {
        scope_461.string(var_462.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_list_stack_sets(
    input: &crate::input::ListStackSetsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ListStackSets", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_463 = writer.prefix("NextToken");
    if let Some(var_464) = &input.next_token {
        scope_463.string(var_464);
    }
    #[allow(unused_mut)]
    let mut scope_465 = writer.prefix("MaxResults");
    if let Some(var_466) = &input.max_results {
        scope_465.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_466).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_467 = writer.prefix("Status");
    if let Some(var_468) = &input.status {
        scope_467.string(var_468.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_469 = writer.prefix("CallAs");
    if let Some(var_470) = &input.call_as {
        scope_469.string(var_470.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_list_type_registrations(
    input: &crate::input::ListTypeRegistrationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ListTypeRegistrations", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_471 = writer.prefix("Type");
    if let Some(var_472) = &input.r#type {
        scope_471.string(var_472.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_473 = writer.prefix("TypeName");
    if let Some(var_474) = &input.type_name {
        scope_473.string(var_474);
    }
    #[allow(unused_mut)]
    let mut scope_475 = writer.prefix("TypeArn");
    if let Some(var_476) = &input.type_arn {
        scope_475.string(var_476);
    }
    #[allow(unused_mut)]
    let mut scope_477 = writer.prefix("RegistrationStatusFilter");
    if let Some(var_478) = &input.registration_status_filter {
        scope_477.string(var_478.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_479 = writer.prefix("MaxResults");
    if let Some(var_480) = &input.max_results {
        scope_479.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_480).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_481 = writer.prefix("NextToken");
    if let Some(var_482) = &input.next_token {
        scope_481.string(var_482);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_list_types(
    input: &crate::input::ListTypesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ListTypes", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_483 = writer.prefix("Visibility");
    if let Some(var_484) = &input.visibility {
        scope_483.string(var_484.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_485 = writer.prefix("ProvisioningType");
    if let Some(var_486) = &input.provisioning_type {
        scope_485.string(var_486.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_487 = writer.prefix("DeprecatedStatus");
    if let Some(var_488) = &input.deprecated_status {
        scope_487.string(var_488.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_489 = writer.prefix("Type");
    if let Some(var_490) = &input.r#type {
        scope_489.string(var_490.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_491 = writer.prefix("Filters");
    if let Some(var_492) = &input.filters {
        crate::query_ser::serialize_structure_crate_model_type_filters(scope_491, var_492)?;
    }
    #[allow(unused_mut)]
    let mut scope_493 = writer.prefix("MaxResults");
    if let Some(var_494) = &input.max_results {
        scope_493.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_494).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_495 = writer.prefix("NextToken");
    if let Some(var_496) = &input.next_token {
        scope_495.string(var_496);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_list_type_versions(
    input: &crate::input::ListTypeVersionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ListTypeVersions", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_497 = writer.prefix("Type");
    if let Some(var_498) = &input.r#type {
        scope_497.string(var_498.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_499 = writer.prefix("TypeName");
    if let Some(var_500) = &input.type_name {
        scope_499.string(var_500);
    }
    #[allow(unused_mut)]
    let mut scope_501 = writer.prefix("Arn");
    if let Some(var_502) = &input.arn {
        scope_501.string(var_502);
    }
    #[allow(unused_mut)]
    let mut scope_503 = writer.prefix("MaxResults");
    if let Some(var_504) = &input.max_results {
        scope_503.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_504).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_505 = writer.prefix("NextToken");
    if let Some(var_506) = &input.next_token {
        scope_505.string(var_506);
    }
    #[allow(unused_mut)]
    let mut scope_507 = writer.prefix("DeprecatedStatus");
    if let Some(var_508) = &input.deprecated_status {
        scope_507.string(var_508.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_509 = writer.prefix("PublisherId");
    if let Some(var_510) = &input.publisher_id {
        scope_509.string(var_510);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_publish_type(
    input: &crate::input::PublishTypeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "PublishType", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_511 = writer.prefix("Type");
    if let Some(var_512) = &input.r#type {
        scope_511.string(var_512.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_513 = writer.prefix("Arn");
    if let Some(var_514) = &input.arn {
        scope_513.string(var_514);
    }
    #[allow(unused_mut)]
    let mut scope_515 = writer.prefix("TypeName");
    if let Some(var_516) = &input.type_name {
        scope_515.string(var_516);
    }
    #[allow(unused_mut)]
    let mut scope_517 = writer.prefix("PublicVersionNumber");
    if let Some(var_518) = &input.public_version_number {
        scope_517.string(var_518);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_record_handler_progress(
    input: &crate::input::RecordHandlerProgressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RecordHandlerProgress", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_519 = writer.prefix("BearerToken");
    if let Some(var_520) = &input.bearer_token {
        scope_519.string(var_520);
    }
    #[allow(unused_mut)]
    let mut scope_521 = writer.prefix("OperationStatus");
    if let Some(var_522) = &input.operation_status {
        scope_521.string(var_522.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_523 = writer.prefix("CurrentOperationStatus");
    if let Some(var_524) = &input.current_operation_status {
        scope_523.string(var_524.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_525 = writer.prefix("StatusMessage");
    if let Some(var_526) = &input.status_message {
        scope_525.string(var_526);
    }
    #[allow(unused_mut)]
    let mut scope_527 = writer.prefix("ErrorCode");
    if let Some(var_528) = &input.error_code {
        scope_527.string(var_528.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_529 = writer.prefix("ResourceModel");
    if let Some(var_530) = &input.resource_model {
        scope_529.string(var_530);
    }
    #[allow(unused_mut)]
    let mut scope_531 = writer.prefix("ClientRequestToken");
    if let Some(var_532) = &input.client_request_token {
        scope_531.string(var_532);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_register_publisher(
    input: &crate::input::RegisterPublisherInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RegisterPublisher", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_533 = writer.prefix("AcceptTermsAndConditions");
    if let Some(var_534) = &input.accept_terms_and_conditions {
        scope_533.boolean(*var_534);
    }
    #[allow(unused_mut)]
    let mut scope_535 = writer.prefix("ConnectionArn");
    if let Some(var_536) = &input.connection_arn {
        scope_535.string(var_536);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_register_type(
    input: &crate::input::RegisterTypeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RegisterType", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_537 = writer.prefix("Type");
    if let Some(var_538) = &input.r#type {
        scope_537.string(var_538.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_539 = writer.prefix("TypeName");
    if let Some(var_540) = &input.type_name {
        scope_539.string(var_540);
    }
    #[allow(unused_mut)]
    let mut scope_541 = writer.prefix("SchemaHandlerPackage");
    if let Some(var_542) = &input.schema_handler_package {
        scope_541.string(var_542);
    }
    #[allow(unused_mut)]
    let mut scope_543 = writer.prefix("LoggingConfig");
    if let Some(var_544) = &input.logging_config {
        crate::query_ser::serialize_structure_crate_model_logging_config(scope_543, var_544)?;
    }
    #[allow(unused_mut)]
    let mut scope_545 = writer.prefix("ExecutionRoleArn");
    if let Some(var_546) = &input.execution_role_arn {
        scope_545.string(var_546);
    }
    #[allow(unused_mut)]
    let mut scope_547 = writer.prefix("ClientRequestToken");
    if let Some(var_548) = &input.client_request_token {
        scope_547.string(var_548);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_rollback_stack(
    input: &crate::input::RollbackStackInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RollbackStack", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_549 = writer.prefix("StackName");
    if let Some(var_550) = &input.stack_name {
        scope_549.string(var_550);
    }
    #[allow(unused_mut)]
    let mut scope_551 = writer.prefix("RoleARN");
    if let Some(var_552) = &input.role_arn {
        scope_551.string(var_552);
    }
    #[allow(unused_mut)]
    let mut scope_553 = writer.prefix("ClientRequestToken");
    if let Some(var_554) = &input.client_request_token {
        scope_553.string(var_554);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_set_stack_policy(
    input: &crate::input::SetStackPolicyInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "SetStackPolicy", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_555 = writer.prefix("StackName");
    if let Some(var_556) = &input.stack_name {
        scope_555.string(var_556);
    }
    #[allow(unused_mut)]
    let mut scope_557 = writer.prefix("StackPolicyBody");
    if let Some(var_558) = &input.stack_policy_body {
        scope_557.string(var_558);
    }
    #[allow(unused_mut)]
    let mut scope_559 = writer.prefix("StackPolicyURL");
    if let Some(var_560) = &input.stack_policy_url {
        scope_559.string(var_560);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_set_type_configuration(
    input: &crate::input::SetTypeConfigurationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "SetTypeConfiguration", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_561 = writer.prefix("TypeArn");
    if let Some(var_562) = &input.type_arn {
        scope_561.string(var_562);
    }
    #[allow(unused_mut)]
    let mut scope_563 = writer.prefix("Configuration");
    if let Some(var_564) = &input.configuration {
        scope_563.string(var_564);
    }
    #[allow(unused_mut)]
    let mut scope_565 = writer.prefix("ConfigurationAlias");
    if let Some(var_566) = &input.configuration_alias {
        scope_565.string(var_566);
    }
    #[allow(unused_mut)]
    let mut scope_567 = writer.prefix("TypeName");
    if let Some(var_568) = &input.type_name {
        scope_567.string(var_568);
    }
    #[allow(unused_mut)]
    let mut scope_569 = writer.prefix("Type");
    if let Some(var_570) = &input.r#type {
        scope_569.string(var_570.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_set_type_default_version(
    input: &crate::input::SetTypeDefaultVersionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "SetTypeDefaultVersion", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_571 = writer.prefix("Arn");
    if let Some(var_572) = &input.arn {
        scope_571.string(var_572);
    }
    #[allow(unused_mut)]
    let mut scope_573 = writer.prefix("Type");
    if let Some(var_574) = &input.r#type {
        scope_573.string(var_574.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_575 = writer.prefix("TypeName");
    if let Some(var_576) = &input.type_name {
        scope_575.string(var_576);
    }
    #[allow(unused_mut)]
    let mut scope_577 = writer.prefix("VersionId");
    if let Some(var_578) = &input.version_id {
        scope_577.string(var_578);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_signal_resource(
    input: &crate::input::SignalResourceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "SignalResource", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_579 = writer.prefix("StackName");
    if let Some(var_580) = &input.stack_name {
        scope_579.string(var_580);
    }
    #[allow(unused_mut)]
    let mut scope_581 = writer.prefix("LogicalResourceId");
    if let Some(var_582) = &input.logical_resource_id {
        scope_581.string(var_582);
    }
    #[allow(unused_mut)]
    let mut scope_583 = writer.prefix("UniqueId");
    if let Some(var_584) = &input.unique_id {
        scope_583.string(var_584);
    }
    #[allow(unused_mut)]
    let mut scope_585 = writer.prefix("Status");
    if let Some(var_586) = &input.status {
        scope_585.string(var_586.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_stop_stack_set_operation(
    input: &crate::input::StopStackSetOperationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "StopStackSetOperation", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_587 = writer.prefix("StackSetName");
    if let Some(var_588) = &input.stack_set_name {
        scope_587.string(var_588);
    }
    #[allow(unused_mut)]
    let mut scope_589 = writer.prefix("OperationId");
    if let Some(var_590) = &input.operation_id {
        scope_589.string(var_590);
    }
    #[allow(unused_mut)]
    let mut scope_591 = writer.prefix("CallAs");
    if let Some(var_592) = &input.call_as {
        scope_591.string(var_592.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_test_type(
    input: &crate::input::TestTypeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "TestType", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_593 = writer.prefix("Arn");
    if let Some(var_594) = &input.arn {
        scope_593.string(var_594);
    }
    #[allow(unused_mut)]
    let mut scope_595 = writer.prefix("Type");
    if let Some(var_596) = &input.r#type {
        scope_595.string(var_596.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_597 = writer.prefix("TypeName");
    if let Some(var_598) = &input.type_name {
        scope_597.string(var_598);
    }
    #[allow(unused_mut)]
    let mut scope_599 = writer.prefix("VersionId");
    if let Some(var_600) = &input.version_id {
        scope_599.string(var_600);
    }
    #[allow(unused_mut)]
    let mut scope_601 = writer.prefix("LogDeliveryBucket");
    if let Some(var_602) = &input.log_delivery_bucket {
        scope_601.string(var_602);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_update_stack(
    input: &crate::input::UpdateStackInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "UpdateStack", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_603 = writer.prefix("StackName");
    if let Some(var_604) = &input.stack_name {
        scope_603.string(var_604);
    }
    #[allow(unused_mut)]
    let mut scope_605 = writer.prefix("TemplateBody");
    if let Some(var_606) = &input.template_body {
        scope_605.string(var_606);
    }
    #[allow(unused_mut)]
    let mut scope_607 = writer.prefix("TemplateURL");
    if let Some(var_608) = &input.template_url {
        scope_607.string(var_608);
    }
    #[allow(unused_mut)]
    let mut scope_609 = writer.prefix("UsePreviousTemplate");
    if let Some(var_610) = &input.use_previous_template {
        scope_609.boolean(*var_610);
    }
    #[allow(unused_mut)]
    let mut scope_611 = writer.prefix("StackPolicyDuringUpdateBody");
    if let Some(var_612) = &input.stack_policy_during_update_body {
        scope_611.string(var_612);
    }
    #[allow(unused_mut)]
    let mut scope_613 = writer.prefix("StackPolicyDuringUpdateURL");
    if let Some(var_614) = &input.stack_policy_during_update_url {
        scope_613.string(var_614);
    }
    #[allow(unused_mut)]
    let mut scope_615 = writer.prefix("Parameters");
    if let Some(var_616) = &input.parameters {
        let mut list_618 = scope_615.start_list(false, None);
        for item_617 in var_616 {
            #[allow(unused_mut)]
            let mut entry_619 = list_618.entry();
            crate::query_ser::serialize_structure_crate_model_parameter(entry_619, item_617)?;
        }
        list_618.finish();
    }
    #[allow(unused_mut)]
    let mut scope_620 = writer.prefix("Capabilities");
    if let Some(var_621) = &input.capabilities {
        let mut list_623 = scope_620.start_list(false, None);
        for item_622 in var_621 {
            #[allow(unused_mut)]
            let mut entry_624 = list_623.entry();
            entry_624.string(item_622.as_str());
        }
        list_623.finish();
    }
    #[allow(unused_mut)]
    let mut scope_625 = writer.prefix("ResourceTypes");
    if let Some(var_626) = &input.resource_types {
        let mut list_628 = scope_625.start_list(false, None);
        for item_627 in var_626 {
            #[allow(unused_mut)]
            let mut entry_629 = list_628.entry();
            entry_629.string(item_627);
        }
        list_628.finish();
    }
    #[allow(unused_mut)]
    let mut scope_630 = writer.prefix("RoleARN");
    if let Some(var_631) = &input.role_arn {
        scope_630.string(var_631);
    }
    #[allow(unused_mut)]
    let mut scope_632 = writer.prefix("RollbackConfiguration");
    if let Some(var_633) = &input.rollback_configuration {
        crate::query_ser::serialize_structure_crate_model_rollback_configuration(
            scope_632, var_633,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_634 = writer.prefix("StackPolicyBody");
    if let Some(var_635) = &input.stack_policy_body {
        scope_634.string(var_635);
    }
    #[allow(unused_mut)]
    let mut scope_636 = writer.prefix("StackPolicyURL");
    if let Some(var_637) = &input.stack_policy_url {
        scope_636.string(var_637);
    }
    #[allow(unused_mut)]
    let mut scope_638 = writer.prefix("NotificationARNs");
    if let Some(var_639) = &input.notification_ar_ns {
        let mut list_641 = scope_638.start_list(false, None);
        for item_640 in var_639 {
            #[allow(unused_mut)]
            let mut entry_642 = list_641.entry();
            entry_642.string(item_640);
        }
        list_641.finish();
    }
    #[allow(unused_mut)]
    let mut scope_643 = writer.prefix("Tags");
    if let Some(var_644) = &input.tags {
        let mut list_646 = scope_643.start_list(false, None);
        for item_645 in var_644 {
            #[allow(unused_mut)]
            let mut entry_647 = list_646.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_647, item_645)?;
        }
        list_646.finish();
    }
    #[allow(unused_mut)]
    let mut scope_648 = writer.prefix("DisableRollback");
    if let Some(var_649) = &input.disable_rollback {
        scope_648.boolean(*var_649);
    }
    #[allow(unused_mut)]
    let mut scope_650 = writer.prefix("ClientRequestToken");
    if let Some(var_651) = &input.client_request_token {
        scope_650.string(var_651);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_update_stack_instances(
    input: &crate::input::UpdateStackInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "UpdateStackInstances", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_652 = writer.prefix("StackSetName");
    if let Some(var_653) = &input.stack_set_name {
        scope_652.string(var_653);
    }
    #[allow(unused_mut)]
    let mut scope_654 = writer.prefix("Accounts");
    if let Some(var_655) = &input.accounts {
        let mut list_657 = scope_654.start_list(false, None);
        for item_656 in var_655 {
            #[allow(unused_mut)]
            let mut entry_658 = list_657.entry();
            entry_658.string(item_656);
        }
        list_657.finish();
    }
    #[allow(unused_mut)]
    let mut scope_659 = writer.prefix("DeploymentTargets");
    if let Some(var_660) = &input.deployment_targets {
        crate::query_ser::serialize_structure_crate_model_deployment_targets(scope_659, var_660)?;
    }
    #[allow(unused_mut)]
    let mut scope_661 = writer.prefix("Regions");
    if let Some(var_662) = &input.regions {
        let mut list_664 = scope_661.start_list(false, None);
        for item_663 in var_662 {
            #[allow(unused_mut)]
            let mut entry_665 = list_664.entry();
            entry_665.string(item_663);
        }
        list_664.finish();
    }
    #[allow(unused_mut)]
    let mut scope_666 = writer.prefix("ParameterOverrides");
    if let Some(var_667) = &input.parameter_overrides {
        let mut list_669 = scope_666.start_list(false, None);
        for item_668 in var_667 {
            #[allow(unused_mut)]
            let mut entry_670 = list_669.entry();
            crate::query_ser::serialize_structure_crate_model_parameter(entry_670, item_668)?;
        }
        list_669.finish();
    }
    #[allow(unused_mut)]
    let mut scope_671 = writer.prefix("OperationPreferences");
    if let Some(var_672) = &input.operation_preferences {
        crate::query_ser::serialize_structure_crate_model_stack_set_operation_preferences(
            scope_671, var_672,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_673 = writer.prefix("OperationId");
    if let Some(var_674) = &input.operation_id {
        scope_673.string(var_674);
    }
    #[allow(unused_mut)]
    let mut scope_675 = writer.prefix("CallAs");
    if let Some(var_676) = &input.call_as {
        scope_675.string(var_676.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_update_stack_set(
    input: &crate::input::UpdateStackSetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "UpdateStackSet", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_677 = writer.prefix("StackSetName");
    if let Some(var_678) = &input.stack_set_name {
        scope_677.string(var_678);
    }
    #[allow(unused_mut)]
    let mut scope_679 = writer.prefix("Description");
    if let Some(var_680) = &input.description {
        scope_679.string(var_680);
    }
    #[allow(unused_mut)]
    let mut scope_681 = writer.prefix("TemplateBody");
    if let Some(var_682) = &input.template_body {
        scope_681.string(var_682);
    }
    #[allow(unused_mut)]
    let mut scope_683 = writer.prefix("TemplateURL");
    if let Some(var_684) = &input.template_url {
        scope_683.string(var_684);
    }
    #[allow(unused_mut)]
    let mut scope_685 = writer.prefix("UsePreviousTemplate");
    if let Some(var_686) = &input.use_previous_template {
        scope_685.boolean(*var_686);
    }
    #[allow(unused_mut)]
    let mut scope_687 = writer.prefix("Parameters");
    if let Some(var_688) = &input.parameters {
        let mut list_690 = scope_687.start_list(false, None);
        for item_689 in var_688 {
            #[allow(unused_mut)]
            let mut entry_691 = list_690.entry();
            crate::query_ser::serialize_structure_crate_model_parameter(entry_691, item_689)?;
        }
        list_690.finish();
    }
    #[allow(unused_mut)]
    let mut scope_692 = writer.prefix("Capabilities");
    if let Some(var_693) = &input.capabilities {
        let mut list_695 = scope_692.start_list(false, None);
        for item_694 in var_693 {
            #[allow(unused_mut)]
            let mut entry_696 = list_695.entry();
            entry_696.string(item_694.as_str());
        }
        list_695.finish();
    }
    #[allow(unused_mut)]
    let mut scope_697 = writer.prefix("Tags");
    if let Some(var_698) = &input.tags {
        let mut list_700 = scope_697.start_list(false, None);
        for item_699 in var_698 {
            #[allow(unused_mut)]
            let mut entry_701 = list_700.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_701, item_699)?;
        }
        list_700.finish();
    }
    #[allow(unused_mut)]
    let mut scope_702 = writer.prefix("OperationPreferences");
    if let Some(var_703) = &input.operation_preferences {
        crate::query_ser::serialize_structure_crate_model_stack_set_operation_preferences(
            scope_702, var_703,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_704 = writer.prefix("AdministrationRoleARN");
    if let Some(var_705) = &input.administration_role_arn {
        scope_704.string(var_705);
    }
    #[allow(unused_mut)]
    let mut scope_706 = writer.prefix("ExecutionRoleName");
    if let Some(var_707) = &input.execution_role_name {
        scope_706.string(var_707);
    }
    #[allow(unused_mut)]
    let mut scope_708 = writer.prefix("DeploymentTargets");
    if let Some(var_709) = &input.deployment_targets {
        crate::query_ser::serialize_structure_crate_model_deployment_targets(scope_708, var_709)?;
    }
    #[allow(unused_mut)]
    let mut scope_710 = writer.prefix("PermissionModel");
    if let Some(var_711) = &input.permission_model {
        scope_710.string(var_711.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_712 = writer.prefix("AutoDeployment");
    if let Some(var_713) = &input.auto_deployment {
        crate::query_ser::serialize_structure_crate_model_auto_deployment(scope_712, var_713)?;
    }
    #[allow(unused_mut)]
    let mut scope_714 = writer.prefix("OperationId");
    if let Some(var_715) = &input.operation_id {
        scope_714.string(var_715);
    }
    #[allow(unused_mut)]
    let mut scope_716 = writer.prefix("Accounts");
    if let Some(var_717) = &input.accounts {
        let mut list_719 = scope_716.start_list(false, None);
        for item_718 in var_717 {
            #[allow(unused_mut)]
            let mut entry_720 = list_719.entry();
            entry_720.string(item_718);
        }
        list_719.finish();
    }
    #[allow(unused_mut)]
    let mut scope_721 = writer.prefix("Regions");
    if let Some(var_722) = &input.regions {
        let mut list_724 = scope_721.start_list(false, None);
        for item_723 in var_722 {
            #[allow(unused_mut)]
            let mut entry_725 = list_724.entry();
            entry_725.string(item_723);
        }
        list_724.finish();
    }
    #[allow(unused_mut)]
    let mut scope_726 = writer.prefix("CallAs");
    if let Some(var_727) = &input.call_as {
        scope_726.string(var_727.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_728 = writer.prefix("ManagedExecution");
    if let Some(var_729) = &input.managed_execution {
        crate::query_ser::serialize_structure_crate_model_managed_execution(scope_728, var_729)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_update_termination_protection(
    input: &crate::input::UpdateTerminationProtectionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "UpdateTerminationProtection", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_730 = writer.prefix("EnableTerminationProtection");
    if let Some(var_731) = &input.enable_termination_protection {
        scope_730.boolean(*var_731);
    }
    #[allow(unused_mut)]
    let mut scope_732 = writer.prefix("StackName");
    if let Some(var_733) = &input.stack_name {
        scope_732.string(var_733);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_validate_template(
    input: &crate::input::ValidateTemplateInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ValidateTemplate", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_734 = writer.prefix("TemplateBody");
    if let Some(var_735) = &input.template_body {
        scope_734.string(var_735);
    }
    #[allow(unused_mut)]
    let mut scope_736 = writer.prefix("TemplateURL");
    if let Some(var_737) = &input.template_url {
        scope_736.string(var_737);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}
