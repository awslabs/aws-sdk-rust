// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_operation_cancel_update_stack(
    input: &crate::input::CancelUpdateStackInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CancelUpdateStack", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("StackName");
    if let Some(var_2) = &input.stack_name {
        scope_1.string(var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("ClientRequestToken");
    if let Some(var_4) = &input.client_request_token {
        scope_3.string(var_4);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_continue_update_rollback(
    input: &crate::input::ContinueUpdateRollbackInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ContinueUpdateRollback", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("StackName");
    if let Some(var_6) = &input.stack_name {
        scope_5.string(var_6);
    }
    #[allow(unused_mut)]
    let mut scope_7 = writer.prefix("RoleARN");
    if let Some(var_8) = &input.role_arn {
        scope_7.string(var_8);
    }
    #[allow(unused_mut)]
    let mut scope_9 = writer.prefix("ResourcesToSkip");
    if let Some(var_10) = &input.resources_to_skip {
        let mut list_12 = scope_9.start_list(false, None);
        for item_11 in var_10 {
            #[allow(unused_mut)]
            let mut entry_13 = list_12.entry();
            entry_13.string(item_11);
        }
        list_12.finish();
    }
    #[allow(unused_mut)]
    let mut scope_14 = writer.prefix("ClientRequestToken");
    if let Some(var_15) = &input.client_request_token {
        scope_14.string(var_15);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_change_set(
    input: &crate::input::CreateChangeSetInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateChangeSet", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_16 = writer.prefix("StackName");
    if let Some(var_17) = &input.stack_name {
        scope_16.string(var_17);
    }
    #[allow(unused_mut)]
    let mut scope_18 = writer.prefix("TemplateBody");
    if let Some(var_19) = &input.template_body {
        scope_18.string(var_19);
    }
    #[allow(unused_mut)]
    let mut scope_20 = writer.prefix("TemplateURL");
    if let Some(var_21) = &input.template_url {
        scope_20.string(var_21);
    }
    #[allow(unused_mut)]
    let mut scope_22 = writer.prefix("UsePreviousTemplate");
    if let Some(var_23) = &input.use_previous_template {
        scope_22.boolean(*var_23);
    }
    #[allow(unused_mut)]
    let mut scope_24 = writer.prefix("Parameters");
    if let Some(var_25) = &input.parameters {
        let mut list_27 = scope_24.start_list(false, None);
        for item_26 in var_25 {
            #[allow(unused_mut)]
            let mut entry_28 = list_27.entry();
            crate::query_ser::serialize_structure_parameter(entry_28, item_26);
        }
        list_27.finish();
    }
    #[allow(unused_mut)]
    let mut scope_29 = writer.prefix("Capabilities");
    if let Some(var_30) = &input.capabilities {
        let mut list_32 = scope_29.start_list(false, None);
        for item_31 in var_30 {
            #[allow(unused_mut)]
            let mut entry_33 = list_32.entry();
            entry_33.string(item_31.as_str());
        }
        list_32.finish();
    }
    #[allow(unused_mut)]
    let mut scope_34 = writer.prefix("ResourceTypes");
    if let Some(var_35) = &input.resource_types {
        let mut list_37 = scope_34.start_list(false, None);
        for item_36 in var_35 {
            #[allow(unused_mut)]
            let mut entry_38 = list_37.entry();
            entry_38.string(item_36);
        }
        list_37.finish();
    }
    #[allow(unused_mut)]
    let mut scope_39 = writer.prefix("RoleARN");
    if let Some(var_40) = &input.role_arn {
        scope_39.string(var_40);
    }
    #[allow(unused_mut)]
    let mut scope_41 = writer.prefix("RollbackConfiguration");
    if let Some(var_42) = &input.rollback_configuration {
        crate::query_ser::serialize_structure_rollback_configuration(scope_41, var_42);
    }
    #[allow(unused_mut)]
    let mut scope_43 = writer.prefix("NotificationARNs");
    if let Some(var_44) = &input.notification_ar_ns {
        let mut list_46 = scope_43.start_list(false, None);
        for item_45 in var_44 {
            #[allow(unused_mut)]
            let mut entry_47 = list_46.entry();
            entry_47.string(item_45);
        }
        list_46.finish();
    }
    #[allow(unused_mut)]
    let mut scope_48 = writer.prefix("Tags");
    if let Some(var_49) = &input.tags {
        let mut list_51 = scope_48.start_list(false, None);
        for item_50 in var_49 {
            #[allow(unused_mut)]
            let mut entry_52 = list_51.entry();
            crate::query_ser::serialize_structure_tag(entry_52, item_50);
        }
        list_51.finish();
    }
    #[allow(unused_mut)]
    let mut scope_53 = writer.prefix("ChangeSetName");
    if let Some(var_54) = &input.change_set_name {
        scope_53.string(var_54);
    }
    #[allow(unused_mut)]
    let mut scope_55 = writer.prefix("ClientToken");
    if let Some(var_56) = &input.client_token {
        scope_55.string(var_56);
    }
    #[allow(unused_mut)]
    let mut scope_57 = writer.prefix("Description");
    if let Some(var_58) = &input.description {
        scope_57.string(var_58);
    }
    #[allow(unused_mut)]
    let mut scope_59 = writer.prefix("ChangeSetType");
    if let Some(var_60) = &input.change_set_type {
        scope_59.string(var_60.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_61 = writer.prefix("ResourcesToImport");
    if let Some(var_62) = &input.resources_to_import {
        let mut list_64 = scope_61.start_list(false, None);
        for item_63 in var_62 {
            #[allow(unused_mut)]
            let mut entry_65 = list_64.entry();
            crate::query_ser::serialize_structure_resource_to_import(entry_65, item_63);
        }
        list_64.finish();
    }
    #[allow(unused_mut)]
    let mut scope_66 = writer.prefix("IncludeNestedStacks");
    if let Some(var_67) = &input.include_nested_stacks {
        scope_66.boolean(*var_67);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_stack(
    input: &crate::input::CreateStackInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateStack", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_68 = writer.prefix("StackName");
    if let Some(var_69) = &input.stack_name {
        scope_68.string(var_69);
    }
    #[allow(unused_mut)]
    let mut scope_70 = writer.prefix("TemplateBody");
    if let Some(var_71) = &input.template_body {
        scope_70.string(var_71);
    }
    #[allow(unused_mut)]
    let mut scope_72 = writer.prefix("TemplateURL");
    if let Some(var_73) = &input.template_url {
        scope_72.string(var_73);
    }
    #[allow(unused_mut)]
    let mut scope_74 = writer.prefix("Parameters");
    if let Some(var_75) = &input.parameters {
        let mut list_77 = scope_74.start_list(false, None);
        for item_76 in var_75 {
            #[allow(unused_mut)]
            let mut entry_78 = list_77.entry();
            crate::query_ser::serialize_structure_parameter(entry_78, item_76);
        }
        list_77.finish();
    }
    #[allow(unused_mut)]
    let mut scope_79 = writer.prefix("DisableRollback");
    if let Some(var_80) = &input.disable_rollback {
        scope_79.boolean(*var_80);
    }
    #[allow(unused_mut)]
    let mut scope_81 = writer.prefix("RollbackConfiguration");
    if let Some(var_82) = &input.rollback_configuration {
        crate::query_ser::serialize_structure_rollback_configuration(scope_81, var_82);
    }
    #[allow(unused_mut)]
    let mut scope_83 = writer.prefix("TimeoutInMinutes");
    if let Some(var_84) = &input.timeout_in_minutes {
        scope_83.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_84).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_85 = writer.prefix("NotificationARNs");
    if let Some(var_86) = &input.notification_ar_ns {
        let mut list_88 = scope_85.start_list(false, None);
        for item_87 in var_86 {
            #[allow(unused_mut)]
            let mut entry_89 = list_88.entry();
            entry_89.string(item_87);
        }
        list_88.finish();
    }
    #[allow(unused_mut)]
    let mut scope_90 = writer.prefix("Capabilities");
    if let Some(var_91) = &input.capabilities {
        let mut list_93 = scope_90.start_list(false, None);
        for item_92 in var_91 {
            #[allow(unused_mut)]
            let mut entry_94 = list_93.entry();
            entry_94.string(item_92.as_str());
        }
        list_93.finish();
    }
    #[allow(unused_mut)]
    let mut scope_95 = writer.prefix("ResourceTypes");
    if let Some(var_96) = &input.resource_types {
        let mut list_98 = scope_95.start_list(false, None);
        for item_97 in var_96 {
            #[allow(unused_mut)]
            let mut entry_99 = list_98.entry();
            entry_99.string(item_97);
        }
        list_98.finish();
    }
    #[allow(unused_mut)]
    let mut scope_100 = writer.prefix("RoleARN");
    if let Some(var_101) = &input.role_arn {
        scope_100.string(var_101);
    }
    #[allow(unused_mut)]
    let mut scope_102 = writer.prefix("OnFailure");
    if let Some(var_103) = &input.on_failure {
        scope_102.string(var_103.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_104 = writer.prefix("StackPolicyBody");
    if let Some(var_105) = &input.stack_policy_body {
        scope_104.string(var_105);
    }
    #[allow(unused_mut)]
    let mut scope_106 = writer.prefix("StackPolicyURL");
    if let Some(var_107) = &input.stack_policy_url {
        scope_106.string(var_107);
    }
    #[allow(unused_mut)]
    let mut scope_108 = writer.prefix("Tags");
    if let Some(var_109) = &input.tags {
        let mut list_111 = scope_108.start_list(false, None);
        for item_110 in var_109 {
            #[allow(unused_mut)]
            let mut entry_112 = list_111.entry();
            crate::query_ser::serialize_structure_tag(entry_112, item_110);
        }
        list_111.finish();
    }
    #[allow(unused_mut)]
    let mut scope_113 = writer.prefix("ClientRequestToken");
    if let Some(var_114) = &input.client_request_token {
        scope_113.string(var_114);
    }
    #[allow(unused_mut)]
    let mut scope_115 = writer.prefix("EnableTerminationProtection");
    if let Some(var_116) = &input.enable_termination_protection {
        scope_115.boolean(*var_116);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_stack_instances(
    input: &crate::input::CreateStackInstancesInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateStackInstances", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_117 = writer.prefix("StackSetName");
    if let Some(var_118) = &input.stack_set_name {
        scope_117.string(var_118);
    }
    #[allow(unused_mut)]
    let mut scope_119 = writer.prefix("Accounts");
    if let Some(var_120) = &input.accounts {
        let mut list_122 = scope_119.start_list(false, None);
        for item_121 in var_120 {
            #[allow(unused_mut)]
            let mut entry_123 = list_122.entry();
            entry_123.string(item_121);
        }
        list_122.finish();
    }
    #[allow(unused_mut)]
    let mut scope_124 = writer.prefix("DeploymentTargets");
    if let Some(var_125) = &input.deployment_targets {
        crate::query_ser::serialize_structure_deployment_targets(scope_124, var_125);
    }
    #[allow(unused_mut)]
    let mut scope_126 = writer.prefix("Regions");
    if let Some(var_127) = &input.regions {
        let mut list_129 = scope_126.start_list(false, None);
        for item_128 in var_127 {
            #[allow(unused_mut)]
            let mut entry_130 = list_129.entry();
            entry_130.string(item_128);
        }
        list_129.finish();
    }
    #[allow(unused_mut)]
    let mut scope_131 = writer.prefix("ParameterOverrides");
    if let Some(var_132) = &input.parameter_overrides {
        let mut list_134 = scope_131.start_list(false, None);
        for item_133 in var_132 {
            #[allow(unused_mut)]
            let mut entry_135 = list_134.entry();
            crate::query_ser::serialize_structure_parameter(entry_135, item_133);
        }
        list_134.finish();
    }
    #[allow(unused_mut)]
    let mut scope_136 = writer.prefix("OperationPreferences");
    if let Some(var_137) = &input.operation_preferences {
        crate::query_ser::serialize_structure_stack_set_operation_preferences(scope_136, var_137);
    }
    #[allow(unused_mut)]
    let mut scope_138 = writer.prefix("OperationId");
    if let Some(var_139) = &input.operation_id {
        scope_138.string(var_139);
    }
    #[allow(unused_mut)]
    let mut scope_140 = writer.prefix("CallAs");
    if let Some(var_141) = &input.call_as {
        scope_140.string(var_141.as_str());
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_stack_set(
    input: &crate::input::CreateStackSetInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateStackSet", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_142 = writer.prefix("StackSetName");
    if let Some(var_143) = &input.stack_set_name {
        scope_142.string(var_143);
    }
    #[allow(unused_mut)]
    let mut scope_144 = writer.prefix("Description");
    if let Some(var_145) = &input.description {
        scope_144.string(var_145);
    }
    #[allow(unused_mut)]
    let mut scope_146 = writer.prefix("TemplateBody");
    if let Some(var_147) = &input.template_body {
        scope_146.string(var_147);
    }
    #[allow(unused_mut)]
    let mut scope_148 = writer.prefix("TemplateURL");
    if let Some(var_149) = &input.template_url {
        scope_148.string(var_149);
    }
    #[allow(unused_mut)]
    let mut scope_150 = writer.prefix("Parameters");
    if let Some(var_151) = &input.parameters {
        let mut list_153 = scope_150.start_list(false, None);
        for item_152 in var_151 {
            #[allow(unused_mut)]
            let mut entry_154 = list_153.entry();
            crate::query_ser::serialize_structure_parameter(entry_154, item_152);
        }
        list_153.finish();
    }
    #[allow(unused_mut)]
    let mut scope_155 = writer.prefix("Capabilities");
    if let Some(var_156) = &input.capabilities {
        let mut list_158 = scope_155.start_list(false, None);
        for item_157 in var_156 {
            #[allow(unused_mut)]
            let mut entry_159 = list_158.entry();
            entry_159.string(item_157.as_str());
        }
        list_158.finish();
    }
    #[allow(unused_mut)]
    let mut scope_160 = writer.prefix("Tags");
    if let Some(var_161) = &input.tags {
        let mut list_163 = scope_160.start_list(false, None);
        for item_162 in var_161 {
            #[allow(unused_mut)]
            let mut entry_164 = list_163.entry();
            crate::query_ser::serialize_structure_tag(entry_164, item_162);
        }
        list_163.finish();
    }
    #[allow(unused_mut)]
    let mut scope_165 = writer.prefix("AdministrationRoleARN");
    if let Some(var_166) = &input.administration_role_arn {
        scope_165.string(var_166);
    }
    #[allow(unused_mut)]
    let mut scope_167 = writer.prefix("ExecutionRoleName");
    if let Some(var_168) = &input.execution_role_name {
        scope_167.string(var_168);
    }
    #[allow(unused_mut)]
    let mut scope_169 = writer.prefix("PermissionModel");
    if let Some(var_170) = &input.permission_model {
        scope_169.string(var_170.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_171 = writer.prefix("AutoDeployment");
    if let Some(var_172) = &input.auto_deployment {
        crate::query_ser::serialize_structure_auto_deployment(scope_171, var_172);
    }
    #[allow(unused_mut)]
    let mut scope_173 = writer.prefix("CallAs");
    if let Some(var_174) = &input.call_as {
        scope_173.string(var_174.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_175 = writer.prefix("ClientRequestToken");
    if let Some(var_176) = &input.client_request_token {
        scope_175.string(var_176);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_change_set(
    input: &crate::input::DeleteChangeSetInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteChangeSet", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_177 = writer.prefix("ChangeSetName");
    if let Some(var_178) = &input.change_set_name {
        scope_177.string(var_178);
    }
    #[allow(unused_mut)]
    let mut scope_179 = writer.prefix("StackName");
    if let Some(var_180) = &input.stack_name {
        scope_179.string(var_180);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_stack(
    input: &crate::input::DeleteStackInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteStack", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_181 = writer.prefix("StackName");
    if let Some(var_182) = &input.stack_name {
        scope_181.string(var_182);
    }
    #[allow(unused_mut)]
    let mut scope_183 = writer.prefix("RetainResources");
    if let Some(var_184) = &input.retain_resources {
        let mut list_186 = scope_183.start_list(false, None);
        for item_185 in var_184 {
            #[allow(unused_mut)]
            let mut entry_187 = list_186.entry();
            entry_187.string(item_185);
        }
        list_186.finish();
    }
    #[allow(unused_mut)]
    let mut scope_188 = writer.prefix("RoleARN");
    if let Some(var_189) = &input.role_arn {
        scope_188.string(var_189);
    }
    #[allow(unused_mut)]
    let mut scope_190 = writer.prefix("ClientRequestToken");
    if let Some(var_191) = &input.client_request_token {
        scope_190.string(var_191);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_stack_instances(
    input: &crate::input::DeleteStackInstancesInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteStackInstances", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_192 = writer.prefix("StackSetName");
    if let Some(var_193) = &input.stack_set_name {
        scope_192.string(var_193);
    }
    #[allow(unused_mut)]
    let mut scope_194 = writer.prefix("Accounts");
    if let Some(var_195) = &input.accounts {
        let mut list_197 = scope_194.start_list(false, None);
        for item_196 in var_195 {
            #[allow(unused_mut)]
            let mut entry_198 = list_197.entry();
            entry_198.string(item_196);
        }
        list_197.finish();
    }
    #[allow(unused_mut)]
    let mut scope_199 = writer.prefix("DeploymentTargets");
    if let Some(var_200) = &input.deployment_targets {
        crate::query_ser::serialize_structure_deployment_targets(scope_199, var_200);
    }
    #[allow(unused_mut)]
    let mut scope_201 = writer.prefix("Regions");
    if let Some(var_202) = &input.regions {
        let mut list_204 = scope_201.start_list(false, None);
        for item_203 in var_202 {
            #[allow(unused_mut)]
            let mut entry_205 = list_204.entry();
            entry_205.string(item_203);
        }
        list_204.finish();
    }
    #[allow(unused_mut)]
    let mut scope_206 = writer.prefix("OperationPreferences");
    if let Some(var_207) = &input.operation_preferences {
        crate::query_ser::serialize_structure_stack_set_operation_preferences(scope_206, var_207);
    }
    #[allow(unused_mut)]
    let mut scope_208 = writer.prefix("RetainStacks");
    {
        scope_208.boolean(input.retain_stacks);
    }
    #[allow(unused_mut)]
    let mut scope_209 = writer.prefix("OperationId");
    if let Some(var_210) = &input.operation_id {
        scope_209.string(var_210);
    }
    #[allow(unused_mut)]
    let mut scope_211 = writer.prefix("CallAs");
    if let Some(var_212) = &input.call_as {
        scope_211.string(var_212.as_str());
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_stack_set(
    input: &crate::input::DeleteStackSetInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteStackSet", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_213 = writer.prefix("StackSetName");
    if let Some(var_214) = &input.stack_set_name {
        scope_213.string(var_214);
    }
    #[allow(unused_mut)]
    let mut scope_215 = writer.prefix("CallAs");
    if let Some(var_216) = &input.call_as {
        scope_215.string(var_216.as_str());
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_deregister_type(
    input: &crate::input::DeregisterTypeInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeregisterType", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_217 = writer.prefix("Arn");
    if let Some(var_218) = &input.arn {
        scope_217.string(var_218);
    }
    #[allow(unused_mut)]
    let mut scope_219 = writer.prefix("Type");
    if let Some(var_220) = &input.r#type {
        scope_219.string(var_220.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_221 = writer.prefix("TypeName");
    if let Some(var_222) = &input.type_name {
        scope_221.string(var_222);
    }
    #[allow(unused_mut)]
    let mut scope_223 = writer.prefix("VersionId");
    if let Some(var_224) = &input.version_id {
        scope_223.string(var_224);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_account_limits(
    input: &crate::input::DescribeAccountLimitsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeAccountLimits", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_225 = writer.prefix("NextToken");
    if let Some(var_226) = &input.next_token {
        scope_225.string(var_226);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_change_set(
    input: &crate::input::DescribeChangeSetInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeChangeSet", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_227 = writer.prefix("ChangeSetName");
    if let Some(var_228) = &input.change_set_name {
        scope_227.string(var_228);
    }
    #[allow(unused_mut)]
    let mut scope_229 = writer.prefix("StackName");
    if let Some(var_230) = &input.stack_name {
        scope_229.string(var_230);
    }
    #[allow(unused_mut)]
    let mut scope_231 = writer.prefix("NextToken");
    if let Some(var_232) = &input.next_token {
        scope_231.string(var_232);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_stack_drift_detection_status(
    input: &crate::input::DescribeStackDriftDetectionStatusInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeStackDriftDetectionStatus", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_233 = writer.prefix("StackDriftDetectionId");
    if let Some(var_234) = &input.stack_drift_detection_id {
        scope_233.string(var_234);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_stack_events(
    input: &crate::input::DescribeStackEventsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeStackEvents", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_235 = writer.prefix("StackName");
    if let Some(var_236) = &input.stack_name {
        scope_235.string(var_236);
    }
    #[allow(unused_mut)]
    let mut scope_237 = writer.prefix("NextToken");
    if let Some(var_238) = &input.next_token {
        scope_237.string(var_238);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_stack_instance(
    input: &crate::input::DescribeStackInstanceInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeStackInstance", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_239 = writer.prefix("StackSetName");
    if let Some(var_240) = &input.stack_set_name {
        scope_239.string(var_240);
    }
    #[allow(unused_mut)]
    let mut scope_241 = writer.prefix("StackInstanceAccount");
    if let Some(var_242) = &input.stack_instance_account {
        scope_241.string(var_242);
    }
    #[allow(unused_mut)]
    let mut scope_243 = writer.prefix("StackInstanceRegion");
    if let Some(var_244) = &input.stack_instance_region {
        scope_243.string(var_244);
    }
    #[allow(unused_mut)]
    let mut scope_245 = writer.prefix("CallAs");
    if let Some(var_246) = &input.call_as {
        scope_245.string(var_246.as_str());
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_stack_resource(
    input: &crate::input::DescribeStackResourceInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeStackResource", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_247 = writer.prefix("StackName");
    if let Some(var_248) = &input.stack_name {
        scope_247.string(var_248);
    }
    #[allow(unused_mut)]
    let mut scope_249 = writer.prefix("LogicalResourceId");
    if let Some(var_250) = &input.logical_resource_id {
        scope_249.string(var_250);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_stack_resource_drifts(
    input: &crate::input::DescribeStackResourceDriftsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeStackResourceDrifts", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_251 = writer.prefix("StackName");
    if let Some(var_252) = &input.stack_name {
        scope_251.string(var_252);
    }
    #[allow(unused_mut)]
    let mut scope_253 = writer.prefix("StackResourceDriftStatusFilters");
    if let Some(var_254) = &input.stack_resource_drift_status_filters {
        let mut list_256 = scope_253.start_list(false, None);
        for item_255 in var_254 {
            #[allow(unused_mut)]
            let mut entry_257 = list_256.entry();
            entry_257.string(item_255.as_str());
        }
        list_256.finish();
    }
    #[allow(unused_mut)]
    let mut scope_258 = writer.prefix("NextToken");
    if let Some(var_259) = &input.next_token {
        scope_258.string(var_259);
    }
    #[allow(unused_mut)]
    let mut scope_260 = writer.prefix("MaxResults");
    if let Some(var_261) = &input.max_results {
        scope_260.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_261).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_stack_resources(
    input: &crate::input::DescribeStackResourcesInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeStackResources", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_262 = writer.prefix("StackName");
    if let Some(var_263) = &input.stack_name {
        scope_262.string(var_263);
    }
    #[allow(unused_mut)]
    let mut scope_264 = writer.prefix("LogicalResourceId");
    if let Some(var_265) = &input.logical_resource_id {
        scope_264.string(var_265);
    }
    #[allow(unused_mut)]
    let mut scope_266 = writer.prefix("PhysicalResourceId");
    if let Some(var_267) = &input.physical_resource_id {
        scope_266.string(var_267);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_stacks(
    input: &crate::input::DescribeStacksInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeStacks", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_268 = writer.prefix("StackName");
    if let Some(var_269) = &input.stack_name {
        scope_268.string(var_269);
    }
    #[allow(unused_mut)]
    let mut scope_270 = writer.prefix("NextToken");
    if let Some(var_271) = &input.next_token {
        scope_270.string(var_271);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_stack_set(
    input: &crate::input::DescribeStackSetInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeStackSet", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_272 = writer.prefix("StackSetName");
    if let Some(var_273) = &input.stack_set_name {
        scope_272.string(var_273);
    }
    #[allow(unused_mut)]
    let mut scope_274 = writer.prefix("CallAs");
    if let Some(var_275) = &input.call_as {
        scope_274.string(var_275.as_str());
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_stack_set_operation(
    input: &crate::input::DescribeStackSetOperationInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeStackSetOperation", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_276 = writer.prefix("StackSetName");
    if let Some(var_277) = &input.stack_set_name {
        scope_276.string(var_277);
    }
    #[allow(unused_mut)]
    let mut scope_278 = writer.prefix("OperationId");
    if let Some(var_279) = &input.operation_id {
        scope_278.string(var_279);
    }
    #[allow(unused_mut)]
    let mut scope_280 = writer.prefix("CallAs");
    if let Some(var_281) = &input.call_as {
        scope_280.string(var_281.as_str());
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_type(
    input: &crate::input::DescribeTypeInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeType", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_282 = writer.prefix("Type");
    if let Some(var_283) = &input.r#type {
        scope_282.string(var_283.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_284 = writer.prefix("TypeName");
    if let Some(var_285) = &input.type_name {
        scope_284.string(var_285);
    }
    #[allow(unused_mut)]
    let mut scope_286 = writer.prefix("Arn");
    if let Some(var_287) = &input.arn {
        scope_286.string(var_287);
    }
    #[allow(unused_mut)]
    let mut scope_288 = writer.prefix("VersionId");
    if let Some(var_289) = &input.version_id {
        scope_288.string(var_289);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_type_registration(
    input: &crate::input::DescribeTypeRegistrationInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeTypeRegistration", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_290 = writer.prefix("RegistrationToken");
    if let Some(var_291) = &input.registration_token {
        scope_290.string(var_291);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_detect_stack_drift(
    input: &crate::input::DetectStackDriftInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DetectStackDrift", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_292 = writer.prefix("StackName");
    if let Some(var_293) = &input.stack_name {
        scope_292.string(var_293);
    }
    #[allow(unused_mut)]
    let mut scope_294 = writer.prefix("LogicalResourceIds");
    if let Some(var_295) = &input.logical_resource_ids {
        let mut list_297 = scope_294.start_list(false, None);
        for item_296 in var_295 {
            #[allow(unused_mut)]
            let mut entry_298 = list_297.entry();
            entry_298.string(item_296);
        }
        list_297.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_detect_stack_resource_drift(
    input: &crate::input::DetectStackResourceDriftInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DetectStackResourceDrift", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_299 = writer.prefix("StackName");
    if let Some(var_300) = &input.stack_name {
        scope_299.string(var_300);
    }
    #[allow(unused_mut)]
    let mut scope_301 = writer.prefix("LogicalResourceId");
    if let Some(var_302) = &input.logical_resource_id {
        scope_301.string(var_302);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_detect_stack_set_drift(
    input: &crate::input::DetectStackSetDriftInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DetectStackSetDrift", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_303 = writer.prefix("StackSetName");
    if let Some(var_304) = &input.stack_set_name {
        scope_303.string(var_304);
    }
    #[allow(unused_mut)]
    let mut scope_305 = writer.prefix("OperationPreferences");
    if let Some(var_306) = &input.operation_preferences {
        crate::query_ser::serialize_structure_stack_set_operation_preferences(scope_305, var_306);
    }
    #[allow(unused_mut)]
    let mut scope_307 = writer.prefix("OperationId");
    if let Some(var_308) = &input.operation_id {
        scope_307.string(var_308);
    }
    #[allow(unused_mut)]
    let mut scope_309 = writer.prefix("CallAs");
    if let Some(var_310) = &input.call_as {
        scope_309.string(var_310.as_str());
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_estimate_template_cost(
    input: &crate::input::EstimateTemplateCostInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "EstimateTemplateCost", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_311 = writer.prefix("TemplateBody");
    if let Some(var_312) = &input.template_body {
        scope_311.string(var_312);
    }
    #[allow(unused_mut)]
    let mut scope_313 = writer.prefix("TemplateURL");
    if let Some(var_314) = &input.template_url {
        scope_313.string(var_314);
    }
    #[allow(unused_mut)]
    let mut scope_315 = writer.prefix("Parameters");
    if let Some(var_316) = &input.parameters {
        let mut list_318 = scope_315.start_list(false, None);
        for item_317 in var_316 {
            #[allow(unused_mut)]
            let mut entry_319 = list_318.entry();
            crate::query_ser::serialize_structure_parameter(entry_319, item_317);
        }
        list_318.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_execute_change_set(
    input: &crate::input::ExecuteChangeSetInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ExecuteChangeSet", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_320 = writer.prefix("ChangeSetName");
    if let Some(var_321) = &input.change_set_name {
        scope_320.string(var_321);
    }
    #[allow(unused_mut)]
    let mut scope_322 = writer.prefix("StackName");
    if let Some(var_323) = &input.stack_name {
        scope_322.string(var_323);
    }
    #[allow(unused_mut)]
    let mut scope_324 = writer.prefix("ClientRequestToken");
    if let Some(var_325) = &input.client_request_token {
        scope_324.string(var_325);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_get_stack_policy(
    input: &crate::input::GetStackPolicyInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "GetStackPolicy", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_326 = writer.prefix("StackName");
    if let Some(var_327) = &input.stack_name {
        scope_326.string(var_327);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_get_template(
    input: &crate::input::GetTemplateInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "GetTemplate", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_328 = writer.prefix("StackName");
    if let Some(var_329) = &input.stack_name {
        scope_328.string(var_329);
    }
    #[allow(unused_mut)]
    let mut scope_330 = writer.prefix("ChangeSetName");
    if let Some(var_331) = &input.change_set_name {
        scope_330.string(var_331);
    }
    #[allow(unused_mut)]
    let mut scope_332 = writer.prefix("TemplateStage");
    if let Some(var_333) = &input.template_stage {
        scope_332.string(var_333.as_str());
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_get_template_summary(
    input: &crate::input::GetTemplateSummaryInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "GetTemplateSummary", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_334 = writer.prefix("TemplateBody");
    if let Some(var_335) = &input.template_body {
        scope_334.string(var_335);
    }
    #[allow(unused_mut)]
    let mut scope_336 = writer.prefix("TemplateURL");
    if let Some(var_337) = &input.template_url {
        scope_336.string(var_337);
    }
    #[allow(unused_mut)]
    let mut scope_338 = writer.prefix("StackName");
    if let Some(var_339) = &input.stack_name {
        scope_338.string(var_339);
    }
    #[allow(unused_mut)]
    let mut scope_340 = writer.prefix("StackSetName");
    if let Some(var_341) = &input.stack_set_name {
        scope_340.string(var_341);
    }
    #[allow(unused_mut)]
    let mut scope_342 = writer.prefix("CallAs");
    if let Some(var_343) = &input.call_as {
        scope_342.string(var_343.as_str());
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_list_change_sets(
    input: &crate::input::ListChangeSetsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ListChangeSets", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_344 = writer.prefix("StackName");
    if let Some(var_345) = &input.stack_name {
        scope_344.string(var_345);
    }
    #[allow(unused_mut)]
    let mut scope_346 = writer.prefix("NextToken");
    if let Some(var_347) = &input.next_token {
        scope_346.string(var_347);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_list_exports(
    input: &crate::input::ListExportsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ListExports", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_348 = writer.prefix("NextToken");
    if let Some(var_349) = &input.next_token {
        scope_348.string(var_349);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_list_imports(
    input: &crate::input::ListImportsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ListImports", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_350 = writer.prefix("ExportName");
    if let Some(var_351) = &input.export_name {
        scope_350.string(var_351);
    }
    #[allow(unused_mut)]
    let mut scope_352 = writer.prefix("NextToken");
    if let Some(var_353) = &input.next_token {
        scope_352.string(var_353);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_list_stack_instances(
    input: &crate::input::ListStackInstancesInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ListStackInstances", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_354 = writer.prefix("StackSetName");
    if let Some(var_355) = &input.stack_set_name {
        scope_354.string(var_355);
    }
    #[allow(unused_mut)]
    let mut scope_356 = writer.prefix("NextToken");
    if let Some(var_357) = &input.next_token {
        scope_356.string(var_357);
    }
    #[allow(unused_mut)]
    let mut scope_358 = writer.prefix("MaxResults");
    if let Some(var_359) = &input.max_results {
        scope_358.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_359).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_360 = writer.prefix("Filters");
    if let Some(var_361) = &input.filters {
        let mut list_363 = scope_360.start_list(false, None);
        for item_362 in var_361 {
            #[allow(unused_mut)]
            let mut entry_364 = list_363.entry();
            crate::query_ser::serialize_structure_stack_instance_filter(entry_364, item_362);
        }
        list_363.finish();
    }
    #[allow(unused_mut)]
    let mut scope_365 = writer.prefix("StackInstanceAccount");
    if let Some(var_366) = &input.stack_instance_account {
        scope_365.string(var_366);
    }
    #[allow(unused_mut)]
    let mut scope_367 = writer.prefix("StackInstanceRegion");
    if let Some(var_368) = &input.stack_instance_region {
        scope_367.string(var_368);
    }
    #[allow(unused_mut)]
    let mut scope_369 = writer.prefix("CallAs");
    if let Some(var_370) = &input.call_as {
        scope_369.string(var_370.as_str());
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_list_stack_resources(
    input: &crate::input::ListStackResourcesInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ListStackResources", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_371 = writer.prefix("StackName");
    if let Some(var_372) = &input.stack_name {
        scope_371.string(var_372);
    }
    #[allow(unused_mut)]
    let mut scope_373 = writer.prefix("NextToken");
    if let Some(var_374) = &input.next_token {
        scope_373.string(var_374);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_list_stacks(
    input: &crate::input::ListStacksInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ListStacks", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_375 = writer.prefix("NextToken");
    if let Some(var_376) = &input.next_token {
        scope_375.string(var_376);
    }
    #[allow(unused_mut)]
    let mut scope_377 = writer.prefix("StackStatusFilter");
    if let Some(var_378) = &input.stack_status_filter {
        let mut list_380 = scope_377.start_list(false, None);
        for item_379 in var_378 {
            #[allow(unused_mut)]
            let mut entry_381 = list_380.entry();
            entry_381.string(item_379.as_str());
        }
        list_380.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_list_stack_set_operation_results(
    input: &crate::input::ListStackSetOperationResultsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ListStackSetOperationResults", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_382 = writer.prefix("StackSetName");
    if let Some(var_383) = &input.stack_set_name {
        scope_382.string(var_383);
    }
    #[allow(unused_mut)]
    let mut scope_384 = writer.prefix("OperationId");
    if let Some(var_385) = &input.operation_id {
        scope_384.string(var_385);
    }
    #[allow(unused_mut)]
    let mut scope_386 = writer.prefix("NextToken");
    if let Some(var_387) = &input.next_token {
        scope_386.string(var_387);
    }
    #[allow(unused_mut)]
    let mut scope_388 = writer.prefix("MaxResults");
    if let Some(var_389) = &input.max_results {
        scope_388.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_389).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_390 = writer.prefix("CallAs");
    if let Some(var_391) = &input.call_as {
        scope_390.string(var_391.as_str());
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_list_stack_set_operations(
    input: &crate::input::ListStackSetOperationsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ListStackSetOperations", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_392 = writer.prefix("StackSetName");
    if let Some(var_393) = &input.stack_set_name {
        scope_392.string(var_393);
    }
    #[allow(unused_mut)]
    let mut scope_394 = writer.prefix("NextToken");
    if let Some(var_395) = &input.next_token {
        scope_394.string(var_395);
    }
    #[allow(unused_mut)]
    let mut scope_396 = writer.prefix("MaxResults");
    if let Some(var_397) = &input.max_results {
        scope_396.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_397).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_398 = writer.prefix("CallAs");
    if let Some(var_399) = &input.call_as {
        scope_398.string(var_399.as_str());
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_list_stack_sets(
    input: &crate::input::ListStackSetsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ListStackSets", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_400 = writer.prefix("NextToken");
    if let Some(var_401) = &input.next_token {
        scope_400.string(var_401);
    }
    #[allow(unused_mut)]
    let mut scope_402 = writer.prefix("MaxResults");
    if let Some(var_403) = &input.max_results {
        scope_402.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_403).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_404 = writer.prefix("Status");
    if let Some(var_405) = &input.status {
        scope_404.string(var_405.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_406 = writer.prefix("CallAs");
    if let Some(var_407) = &input.call_as {
        scope_406.string(var_407.as_str());
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_list_type_registrations(
    input: &crate::input::ListTypeRegistrationsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ListTypeRegistrations", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_408 = writer.prefix("Type");
    if let Some(var_409) = &input.r#type {
        scope_408.string(var_409.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_410 = writer.prefix("TypeName");
    if let Some(var_411) = &input.type_name {
        scope_410.string(var_411);
    }
    #[allow(unused_mut)]
    let mut scope_412 = writer.prefix("TypeArn");
    if let Some(var_413) = &input.type_arn {
        scope_412.string(var_413);
    }
    #[allow(unused_mut)]
    let mut scope_414 = writer.prefix("RegistrationStatusFilter");
    if let Some(var_415) = &input.registration_status_filter {
        scope_414.string(var_415.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_416 = writer.prefix("MaxResults");
    if let Some(var_417) = &input.max_results {
        scope_416.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_417).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_418 = writer.prefix("NextToken");
    if let Some(var_419) = &input.next_token {
        scope_418.string(var_419);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_list_types(
    input: &crate::input::ListTypesInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ListTypes", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_420 = writer.prefix("Visibility");
    if let Some(var_421) = &input.visibility {
        scope_420.string(var_421.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_422 = writer.prefix("ProvisioningType");
    if let Some(var_423) = &input.provisioning_type {
        scope_422.string(var_423.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_424 = writer.prefix("DeprecatedStatus");
    if let Some(var_425) = &input.deprecated_status {
        scope_424.string(var_425.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_426 = writer.prefix("Type");
    if let Some(var_427) = &input.r#type {
        scope_426.string(var_427.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_428 = writer.prefix("MaxResults");
    if let Some(var_429) = &input.max_results {
        scope_428.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_429).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_430 = writer.prefix("NextToken");
    if let Some(var_431) = &input.next_token {
        scope_430.string(var_431);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_list_type_versions(
    input: &crate::input::ListTypeVersionsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ListTypeVersions", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_432 = writer.prefix("Type");
    if let Some(var_433) = &input.r#type {
        scope_432.string(var_433.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_434 = writer.prefix("TypeName");
    if let Some(var_435) = &input.type_name {
        scope_434.string(var_435);
    }
    #[allow(unused_mut)]
    let mut scope_436 = writer.prefix("Arn");
    if let Some(var_437) = &input.arn {
        scope_436.string(var_437);
    }
    #[allow(unused_mut)]
    let mut scope_438 = writer.prefix("MaxResults");
    if let Some(var_439) = &input.max_results {
        scope_438.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_439).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_440 = writer.prefix("NextToken");
    if let Some(var_441) = &input.next_token {
        scope_440.string(var_441);
    }
    #[allow(unused_mut)]
    let mut scope_442 = writer.prefix("DeprecatedStatus");
    if let Some(var_443) = &input.deprecated_status {
        scope_442.string(var_443.as_str());
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_record_handler_progress(
    input: &crate::input::RecordHandlerProgressInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "RecordHandlerProgress", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_444 = writer.prefix("BearerToken");
    if let Some(var_445) = &input.bearer_token {
        scope_444.string(var_445);
    }
    #[allow(unused_mut)]
    let mut scope_446 = writer.prefix("OperationStatus");
    if let Some(var_447) = &input.operation_status {
        scope_446.string(var_447.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_448 = writer.prefix("CurrentOperationStatus");
    if let Some(var_449) = &input.current_operation_status {
        scope_448.string(var_449.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_450 = writer.prefix("StatusMessage");
    if let Some(var_451) = &input.status_message {
        scope_450.string(var_451);
    }
    #[allow(unused_mut)]
    let mut scope_452 = writer.prefix("ErrorCode");
    if let Some(var_453) = &input.error_code {
        scope_452.string(var_453.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_454 = writer.prefix("ResourceModel");
    if let Some(var_455) = &input.resource_model {
        scope_454.string(var_455);
    }
    #[allow(unused_mut)]
    let mut scope_456 = writer.prefix("ClientRequestToken");
    if let Some(var_457) = &input.client_request_token {
        scope_456.string(var_457);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_register_type(
    input: &crate::input::RegisterTypeInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "RegisterType", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_458 = writer.prefix("Type");
    if let Some(var_459) = &input.r#type {
        scope_458.string(var_459.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_460 = writer.prefix("TypeName");
    if let Some(var_461) = &input.type_name {
        scope_460.string(var_461);
    }
    #[allow(unused_mut)]
    let mut scope_462 = writer.prefix("SchemaHandlerPackage");
    if let Some(var_463) = &input.schema_handler_package {
        scope_462.string(var_463);
    }
    #[allow(unused_mut)]
    let mut scope_464 = writer.prefix("LoggingConfig");
    if let Some(var_465) = &input.logging_config {
        crate::query_ser::serialize_structure_logging_config(scope_464, var_465);
    }
    #[allow(unused_mut)]
    let mut scope_466 = writer.prefix("ExecutionRoleArn");
    if let Some(var_467) = &input.execution_role_arn {
        scope_466.string(var_467);
    }
    #[allow(unused_mut)]
    let mut scope_468 = writer.prefix("ClientRequestToken");
    if let Some(var_469) = &input.client_request_token {
        scope_468.string(var_469);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_set_stack_policy(
    input: &crate::input::SetStackPolicyInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "SetStackPolicy", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_470 = writer.prefix("StackName");
    if let Some(var_471) = &input.stack_name {
        scope_470.string(var_471);
    }
    #[allow(unused_mut)]
    let mut scope_472 = writer.prefix("StackPolicyBody");
    if let Some(var_473) = &input.stack_policy_body {
        scope_472.string(var_473);
    }
    #[allow(unused_mut)]
    let mut scope_474 = writer.prefix("StackPolicyURL");
    if let Some(var_475) = &input.stack_policy_url {
        scope_474.string(var_475);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_set_type_default_version(
    input: &crate::input::SetTypeDefaultVersionInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "SetTypeDefaultVersion", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_476 = writer.prefix("Arn");
    if let Some(var_477) = &input.arn {
        scope_476.string(var_477);
    }
    #[allow(unused_mut)]
    let mut scope_478 = writer.prefix("Type");
    if let Some(var_479) = &input.r#type {
        scope_478.string(var_479.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_480 = writer.prefix("TypeName");
    if let Some(var_481) = &input.type_name {
        scope_480.string(var_481);
    }
    #[allow(unused_mut)]
    let mut scope_482 = writer.prefix("VersionId");
    if let Some(var_483) = &input.version_id {
        scope_482.string(var_483);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_signal_resource(
    input: &crate::input::SignalResourceInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "SignalResource", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_484 = writer.prefix("StackName");
    if let Some(var_485) = &input.stack_name {
        scope_484.string(var_485);
    }
    #[allow(unused_mut)]
    let mut scope_486 = writer.prefix("LogicalResourceId");
    if let Some(var_487) = &input.logical_resource_id {
        scope_486.string(var_487);
    }
    #[allow(unused_mut)]
    let mut scope_488 = writer.prefix("UniqueId");
    if let Some(var_489) = &input.unique_id {
        scope_488.string(var_489);
    }
    #[allow(unused_mut)]
    let mut scope_490 = writer.prefix("Status");
    if let Some(var_491) = &input.status {
        scope_490.string(var_491.as_str());
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_stop_stack_set_operation(
    input: &crate::input::StopStackSetOperationInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "StopStackSetOperation", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_492 = writer.prefix("StackSetName");
    if let Some(var_493) = &input.stack_set_name {
        scope_492.string(var_493);
    }
    #[allow(unused_mut)]
    let mut scope_494 = writer.prefix("OperationId");
    if let Some(var_495) = &input.operation_id {
        scope_494.string(var_495);
    }
    #[allow(unused_mut)]
    let mut scope_496 = writer.prefix("CallAs");
    if let Some(var_497) = &input.call_as {
        scope_496.string(var_497.as_str());
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_update_stack(
    input: &crate::input::UpdateStackInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "UpdateStack", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_498 = writer.prefix("StackName");
    if let Some(var_499) = &input.stack_name {
        scope_498.string(var_499);
    }
    #[allow(unused_mut)]
    let mut scope_500 = writer.prefix("TemplateBody");
    if let Some(var_501) = &input.template_body {
        scope_500.string(var_501);
    }
    #[allow(unused_mut)]
    let mut scope_502 = writer.prefix("TemplateURL");
    if let Some(var_503) = &input.template_url {
        scope_502.string(var_503);
    }
    #[allow(unused_mut)]
    let mut scope_504 = writer.prefix("UsePreviousTemplate");
    if let Some(var_505) = &input.use_previous_template {
        scope_504.boolean(*var_505);
    }
    #[allow(unused_mut)]
    let mut scope_506 = writer.prefix("StackPolicyDuringUpdateBody");
    if let Some(var_507) = &input.stack_policy_during_update_body {
        scope_506.string(var_507);
    }
    #[allow(unused_mut)]
    let mut scope_508 = writer.prefix("StackPolicyDuringUpdateURL");
    if let Some(var_509) = &input.stack_policy_during_update_url {
        scope_508.string(var_509);
    }
    #[allow(unused_mut)]
    let mut scope_510 = writer.prefix("Parameters");
    if let Some(var_511) = &input.parameters {
        let mut list_513 = scope_510.start_list(false, None);
        for item_512 in var_511 {
            #[allow(unused_mut)]
            let mut entry_514 = list_513.entry();
            crate::query_ser::serialize_structure_parameter(entry_514, item_512);
        }
        list_513.finish();
    }
    #[allow(unused_mut)]
    let mut scope_515 = writer.prefix("Capabilities");
    if let Some(var_516) = &input.capabilities {
        let mut list_518 = scope_515.start_list(false, None);
        for item_517 in var_516 {
            #[allow(unused_mut)]
            let mut entry_519 = list_518.entry();
            entry_519.string(item_517.as_str());
        }
        list_518.finish();
    }
    #[allow(unused_mut)]
    let mut scope_520 = writer.prefix("ResourceTypes");
    if let Some(var_521) = &input.resource_types {
        let mut list_523 = scope_520.start_list(false, None);
        for item_522 in var_521 {
            #[allow(unused_mut)]
            let mut entry_524 = list_523.entry();
            entry_524.string(item_522);
        }
        list_523.finish();
    }
    #[allow(unused_mut)]
    let mut scope_525 = writer.prefix("RoleARN");
    if let Some(var_526) = &input.role_arn {
        scope_525.string(var_526);
    }
    #[allow(unused_mut)]
    let mut scope_527 = writer.prefix("RollbackConfiguration");
    if let Some(var_528) = &input.rollback_configuration {
        crate::query_ser::serialize_structure_rollback_configuration(scope_527, var_528);
    }
    #[allow(unused_mut)]
    let mut scope_529 = writer.prefix("StackPolicyBody");
    if let Some(var_530) = &input.stack_policy_body {
        scope_529.string(var_530);
    }
    #[allow(unused_mut)]
    let mut scope_531 = writer.prefix("StackPolicyURL");
    if let Some(var_532) = &input.stack_policy_url {
        scope_531.string(var_532);
    }
    #[allow(unused_mut)]
    let mut scope_533 = writer.prefix("NotificationARNs");
    if let Some(var_534) = &input.notification_ar_ns {
        let mut list_536 = scope_533.start_list(false, None);
        for item_535 in var_534 {
            #[allow(unused_mut)]
            let mut entry_537 = list_536.entry();
            entry_537.string(item_535);
        }
        list_536.finish();
    }
    #[allow(unused_mut)]
    let mut scope_538 = writer.prefix("Tags");
    if let Some(var_539) = &input.tags {
        let mut list_541 = scope_538.start_list(false, None);
        for item_540 in var_539 {
            #[allow(unused_mut)]
            let mut entry_542 = list_541.entry();
            crate::query_ser::serialize_structure_tag(entry_542, item_540);
        }
        list_541.finish();
    }
    #[allow(unused_mut)]
    let mut scope_543 = writer.prefix("ClientRequestToken");
    if let Some(var_544) = &input.client_request_token {
        scope_543.string(var_544);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_update_stack_instances(
    input: &crate::input::UpdateStackInstancesInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "UpdateStackInstances", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_545 = writer.prefix("StackSetName");
    if let Some(var_546) = &input.stack_set_name {
        scope_545.string(var_546);
    }
    #[allow(unused_mut)]
    let mut scope_547 = writer.prefix("Accounts");
    if let Some(var_548) = &input.accounts {
        let mut list_550 = scope_547.start_list(false, None);
        for item_549 in var_548 {
            #[allow(unused_mut)]
            let mut entry_551 = list_550.entry();
            entry_551.string(item_549);
        }
        list_550.finish();
    }
    #[allow(unused_mut)]
    let mut scope_552 = writer.prefix("DeploymentTargets");
    if let Some(var_553) = &input.deployment_targets {
        crate::query_ser::serialize_structure_deployment_targets(scope_552, var_553);
    }
    #[allow(unused_mut)]
    let mut scope_554 = writer.prefix("Regions");
    if let Some(var_555) = &input.regions {
        let mut list_557 = scope_554.start_list(false, None);
        for item_556 in var_555 {
            #[allow(unused_mut)]
            let mut entry_558 = list_557.entry();
            entry_558.string(item_556);
        }
        list_557.finish();
    }
    #[allow(unused_mut)]
    let mut scope_559 = writer.prefix("ParameterOverrides");
    if let Some(var_560) = &input.parameter_overrides {
        let mut list_562 = scope_559.start_list(false, None);
        for item_561 in var_560 {
            #[allow(unused_mut)]
            let mut entry_563 = list_562.entry();
            crate::query_ser::serialize_structure_parameter(entry_563, item_561);
        }
        list_562.finish();
    }
    #[allow(unused_mut)]
    let mut scope_564 = writer.prefix("OperationPreferences");
    if let Some(var_565) = &input.operation_preferences {
        crate::query_ser::serialize_structure_stack_set_operation_preferences(scope_564, var_565);
    }
    #[allow(unused_mut)]
    let mut scope_566 = writer.prefix("OperationId");
    if let Some(var_567) = &input.operation_id {
        scope_566.string(var_567);
    }
    #[allow(unused_mut)]
    let mut scope_568 = writer.prefix("CallAs");
    if let Some(var_569) = &input.call_as {
        scope_568.string(var_569.as_str());
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_update_stack_set(
    input: &crate::input::UpdateStackSetInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "UpdateStackSet", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_570 = writer.prefix("StackSetName");
    if let Some(var_571) = &input.stack_set_name {
        scope_570.string(var_571);
    }
    #[allow(unused_mut)]
    let mut scope_572 = writer.prefix("Description");
    if let Some(var_573) = &input.description {
        scope_572.string(var_573);
    }
    #[allow(unused_mut)]
    let mut scope_574 = writer.prefix("TemplateBody");
    if let Some(var_575) = &input.template_body {
        scope_574.string(var_575);
    }
    #[allow(unused_mut)]
    let mut scope_576 = writer.prefix("TemplateURL");
    if let Some(var_577) = &input.template_url {
        scope_576.string(var_577);
    }
    #[allow(unused_mut)]
    let mut scope_578 = writer.prefix("UsePreviousTemplate");
    if let Some(var_579) = &input.use_previous_template {
        scope_578.boolean(*var_579);
    }
    #[allow(unused_mut)]
    let mut scope_580 = writer.prefix("Parameters");
    if let Some(var_581) = &input.parameters {
        let mut list_583 = scope_580.start_list(false, None);
        for item_582 in var_581 {
            #[allow(unused_mut)]
            let mut entry_584 = list_583.entry();
            crate::query_ser::serialize_structure_parameter(entry_584, item_582);
        }
        list_583.finish();
    }
    #[allow(unused_mut)]
    let mut scope_585 = writer.prefix("Capabilities");
    if let Some(var_586) = &input.capabilities {
        let mut list_588 = scope_585.start_list(false, None);
        for item_587 in var_586 {
            #[allow(unused_mut)]
            let mut entry_589 = list_588.entry();
            entry_589.string(item_587.as_str());
        }
        list_588.finish();
    }
    #[allow(unused_mut)]
    let mut scope_590 = writer.prefix("Tags");
    if let Some(var_591) = &input.tags {
        let mut list_593 = scope_590.start_list(false, None);
        for item_592 in var_591 {
            #[allow(unused_mut)]
            let mut entry_594 = list_593.entry();
            crate::query_ser::serialize_structure_tag(entry_594, item_592);
        }
        list_593.finish();
    }
    #[allow(unused_mut)]
    let mut scope_595 = writer.prefix("OperationPreferences");
    if let Some(var_596) = &input.operation_preferences {
        crate::query_ser::serialize_structure_stack_set_operation_preferences(scope_595, var_596);
    }
    #[allow(unused_mut)]
    let mut scope_597 = writer.prefix("AdministrationRoleARN");
    if let Some(var_598) = &input.administration_role_arn {
        scope_597.string(var_598);
    }
    #[allow(unused_mut)]
    let mut scope_599 = writer.prefix("ExecutionRoleName");
    if let Some(var_600) = &input.execution_role_name {
        scope_599.string(var_600);
    }
    #[allow(unused_mut)]
    let mut scope_601 = writer.prefix("DeploymentTargets");
    if let Some(var_602) = &input.deployment_targets {
        crate::query_ser::serialize_structure_deployment_targets(scope_601, var_602);
    }
    #[allow(unused_mut)]
    let mut scope_603 = writer.prefix("PermissionModel");
    if let Some(var_604) = &input.permission_model {
        scope_603.string(var_604.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_605 = writer.prefix("AutoDeployment");
    if let Some(var_606) = &input.auto_deployment {
        crate::query_ser::serialize_structure_auto_deployment(scope_605, var_606);
    }
    #[allow(unused_mut)]
    let mut scope_607 = writer.prefix("OperationId");
    if let Some(var_608) = &input.operation_id {
        scope_607.string(var_608);
    }
    #[allow(unused_mut)]
    let mut scope_609 = writer.prefix("Accounts");
    if let Some(var_610) = &input.accounts {
        let mut list_612 = scope_609.start_list(false, None);
        for item_611 in var_610 {
            #[allow(unused_mut)]
            let mut entry_613 = list_612.entry();
            entry_613.string(item_611);
        }
        list_612.finish();
    }
    #[allow(unused_mut)]
    let mut scope_614 = writer.prefix("Regions");
    if let Some(var_615) = &input.regions {
        let mut list_617 = scope_614.start_list(false, None);
        for item_616 in var_615 {
            #[allow(unused_mut)]
            let mut entry_618 = list_617.entry();
            entry_618.string(item_616);
        }
        list_617.finish();
    }
    #[allow(unused_mut)]
    let mut scope_619 = writer.prefix("CallAs");
    if let Some(var_620) = &input.call_as {
        scope_619.string(var_620.as_str());
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_update_termination_protection(
    input: &crate::input::UpdateTerminationProtectionInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "UpdateTerminationProtection", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_621 = writer.prefix("EnableTerminationProtection");
    if let Some(var_622) = &input.enable_termination_protection {
        scope_621.boolean(*var_622);
    }
    #[allow(unused_mut)]
    let mut scope_623 = writer.prefix("StackName");
    if let Some(var_624) = &input.stack_name {
        scope_623.string(var_624);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_validate_template(
    input: &crate::input::ValidateTemplateInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ValidateTemplate", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_625 = writer.prefix("TemplateBody");
    if let Some(var_626) = &input.template_body {
        scope_625.string(var_626);
    }
    #[allow(unused_mut)]
    let mut scope_627 = writer.prefix("TemplateURL");
    if let Some(var_628) = &input.template_url {
        scope_627.string(var_628);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}
