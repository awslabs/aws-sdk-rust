// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>The resource with the name requested already exists.</p>
    AlreadyExistsException(crate::types::error::AlreadyExistsException),
    /// <p>An error occurred during a CloudFormation registry operation.</p>
    CfnRegistryException(crate::types::error::CfnRegistryException),
    /// <p>The specified change set name or ID doesn't exit. To view valid change sets for a stack, use the <code>ListChangeSets</code> operation.</p>
    ChangeSetNotFoundException(crate::types::error::ChangeSetNotFoundException),
    /// <p>The specified resource exists, but has been changed.</p>
    CreatedButModifiedException(crate::types::error::CreatedButModifiedException),
    /// <p>The template contains resources with capabilities that weren't specified in the Capabilities parameter.</p>
    InsufficientCapabilitiesException(crate::types::error::InsufficientCapabilitiesException),
    /// <p>The specified change set can't be used to update the stack. For example, the change set status might be <code>CREATE_IN_PROGRESS</code>, or the stack status might be <code>UPDATE_IN_PROGRESS</code>.</p>
    InvalidChangeSetStatusException(crate::types::error::InvalidChangeSetStatusException),
    /// <p>The specified operation isn't valid.</p>
    InvalidOperationException(crate::types::error::InvalidOperationException),
    /// <p>Error reserved for use by the <a href="https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/what-is-cloudformation-cli.html">CloudFormation CLI</a>. CloudFormation doesn't return this error to users.</p>
    InvalidStateTransitionException(crate::types::error::InvalidStateTransitionException),
    /// <p>The quota for the resource has already been reached.</p>
    /// <p>For information about resource and stack limitations, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cloudformation-limits.html">CloudFormation quotas</a> in the <i>CloudFormation User Guide</i>.</p>
    LimitExceededException(crate::types::error::LimitExceededException),
    /// <p>The specified name is already in use.</p>
    NameAlreadyExistsException(crate::types::error::NameAlreadyExistsException),
    /// <p>The specified operation ID already exists.</p>
    OperationIdAlreadyExistsException(crate::types::error::OperationIdAlreadyExistsException),
    /// <p>Another operation is currently in progress for this stack set. Only one operation can be performed for a stack set at a given time.</p>
    OperationInProgressException(crate::types::error::OperationInProgressException),
    /// <p>The specified ID refers to an operation that doesn't exist.</p>
    OperationNotFoundException(crate::types::error::OperationNotFoundException),
    /// <p>Error reserved for use by the <a href="https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/what-is-cloudformation-cli.html">CloudFormation CLI</a>. CloudFormation doesn't return this error to users.</p>
    OperationStatusCheckFailedException(crate::types::error::OperationStatusCheckFailedException),
    /// <p>The specified stack instance doesn't exist.</p>
    StackInstanceNotFoundException(crate::types::error::StackInstanceNotFoundException),
    /// <p>The specified stack ARN doesn't exist or stack doesn't exist corresponding to the ARN in input.</p>
    StackNotFoundException(crate::types::error::StackNotFoundException),
    /// <p>You can't yet delete this stack set, because it still contains one or more stack instances. Delete all stack instances from the stack set before deleting the stack set.</p>
    StackSetNotEmptyException(crate::types::error::StackSetNotEmptyException),
    /// <p>The specified stack set doesn't exist.</p>
    StackSetNotFoundException(crate::types::error::StackSetNotFoundException),
    /// <p>Another operation has been performed on this stack set since the specified operation was performed.</p>
    StaleRequestException(crate::types::error::StaleRequestException),
    /// <p>A client request token already exists.</p>
    TokenAlreadyExistsException(crate::types::error::TokenAlreadyExistsException),
    /// <p>The specified extension configuration can't be found.</p>
    TypeConfigurationNotFoundException(crate::types::error::TypeConfigurationNotFoundException),
    /// <p>The specified extension doesn't exist in the CloudFormation registry.</p>
    TypeNotFoundException(crate::types::error::TypeNotFoundException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AlreadyExistsException(inner) => inner.fmt(f),
            Error::CfnRegistryException(inner) => inner.fmt(f),
            Error::ChangeSetNotFoundException(inner) => inner.fmt(f),
            Error::CreatedButModifiedException(inner) => inner.fmt(f),
            Error::InsufficientCapabilitiesException(inner) => inner.fmt(f),
            Error::InvalidChangeSetStatusException(inner) => inner.fmt(f),
            Error::InvalidOperationException(inner) => inner.fmt(f),
            Error::InvalidStateTransitionException(inner) => inner.fmt(f),
            Error::LimitExceededException(inner) => inner.fmt(f),
            Error::NameAlreadyExistsException(inner) => inner.fmt(f),
            Error::OperationIdAlreadyExistsException(inner) => inner.fmt(f),
            Error::OperationInProgressException(inner) => inner.fmt(f),
            Error::OperationNotFoundException(inner) => inner.fmt(f),
            Error::OperationStatusCheckFailedException(inner) => inner.fmt(f),
            Error::StackInstanceNotFoundException(inner) => inner.fmt(f),
            Error::StackNotFoundException(inner) => inner.fmt(f),
            Error::StackSetNotEmptyException(inner) => inner.fmt(f),
            Error::StackSetNotFoundException(inner) => inner.fmt(f),
            Error::StaleRequestException(inner) => inner.fmt(f),
            Error::TokenAlreadyExistsException(inner) => inner.fmt(f),
            Error::TypeConfigurationNotFoundException(inner) => inner.fmt(f),
            Error::TypeNotFoundException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::activate_type::ActivateTypeError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::activate_type::ActivateTypeError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::activate_type::ActivateTypeError> for Error {
    fn from(err: crate::operation::activate_type::ActivateTypeError) -> Self {
        match err {
            crate::operation::activate_type::ActivateTypeError::CfnRegistryException(inner) => {
                Error::CfnRegistryException(inner)
            }
            crate::operation::activate_type::ActivateTypeError::TypeNotFoundException(inner) => {
                Error::TypeNotFoundException(inner)
            }
            crate::operation::activate_type::ActivateTypeError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::batch_describe_type_configurations::BatchDescribeTypeConfigurationsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::batch_describe_type_configurations::BatchDescribeTypeConfigurationsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl
    From<crate::operation::batch_describe_type_configurations::BatchDescribeTypeConfigurationsError>
    for Error
{
    fn from(
        err: crate::operation::batch_describe_type_configurations::BatchDescribeTypeConfigurationsError,
    ) -> Self {
        match err {
            crate::operation::batch_describe_type_configurations::BatchDescribeTypeConfigurationsError::CfnRegistryException(inner) => Error::CfnRegistryException(inner),
            crate::operation::batch_describe_type_configurations::BatchDescribeTypeConfigurationsError::TypeConfigurationNotFoundException(inner) => Error::TypeConfigurationNotFoundException(inner),
            crate::operation::batch_describe_type_configurations::BatchDescribeTypeConfigurationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::cancel_update_stack::CancelUpdateStackError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::cancel_update_stack::CancelUpdateStackError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::cancel_update_stack::CancelUpdateStackError> for Error {
    fn from(err: crate::operation::cancel_update_stack::CancelUpdateStackError) -> Self {
        match err {
            crate::operation::cancel_update_stack::CancelUpdateStackError::TokenAlreadyExistsException(inner) => Error::TokenAlreadyExistsException(inner),
            crate::operation::cancel_update_stack::CancelUpdateStackError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::continue_update_rollback::ContinueUpdateRollbackError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::continue_update_rollback::ContinueUpdateRollbackError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::continue_update_rollback::ContinueUpdateRollbackError> for Error {
    fn from(err: crate::operation::continue_update_rollback::ContinueUpdateRollbackError) -> Self {
        match err {
            crate::operation::continue_update_rollback::ContinueUpdateRollbackError::TokenAlreadyExistsException(inner) => Error::TokenAlreadyExistsException(inner),
            crate::operation::continue_update_rollback::ContinueUpdateRollbackError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_change_set::CreateChangeSetError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_change_set::CreateChangeSetError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_change_set::CreateChangeSetError> for Error {
    fn from(err: crate::operation::create_change_set::CreateChangeSetError) -> Self {
        match err {
            crate::operation::create_change_set::CreateChangeSetError::AlreadyExistsException(inner) => Error::AlreadyExistsException(inner),
            crate::operation::create_change_set::CreateChangeSetError::InsufficientCapabilitiesException(inner) => Error::InsufficientCapabilitiesException(inner),
            crate::operation::create_change_set::CreateChangeSetError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::create_change_set::CreateChangeSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::create_stack::CreateStackError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::create_stack::CreateStackError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_stack::CreateStackError> for Error {
    fn from(err: crate::operation::create_stack::CreateStackError) -> Self {
        match err {
            crate::operation::create_stack::CreateStackError::AlreadyExistsException(inner) => {
                Error::AlreadyExistsException(inner)
            }
            crate::operation::create_stack::CreateStackError::InsufficientCapabilitiesException(
                inner,
            ) => Error::InsufficientCapabilitiesException(inner),
            crate::operation::create_stack::CreateStackError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::operation::create_stack::CreateStackError::TokenAlreadyExistsException(
                inner,
            ) => Error::TokenAlreadyExistsException(inner),
            crate::operation::create_stack::CreateStackError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_stack_instances::CreateStackInstancesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_stack_instances::CreateStackInstancesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_stack_instances::CreateStackInstancesError> for Error {
    fn from(err: crate::operation::create_stack_instances::CreateStackInstancesError) -> Self {
        match err {
            crate::operation::create_stack_instances::CreateStackInstancesError::InvalidOperationException(inner) => Error::InvalidOperationException(inner),
            crate::operation::create_stack_instances::CreateStackInstancesError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::create_stack_instances::CreateStackInstancesError::OperationIdAlreadyExistsException(inner) => Error::OperationIdAlreadyExistsException(inner),
            crate::operation::create_stack_instances::CreateStackInstancesError::OperationInProgressException(inner) => Error::OperationInProgressException(inner),
            crate::operation::create_stack_instances::CreateStackInstancesError::StackSetNotFoundException(inner) => Error::StackSetNotFoundException(inner),
            crate::operation::create_stack_instances::CreateStackInstancesError::StaleRequestException(inner) => Error::StaleRequestException(inner),
            crate::operation::create_stack_instances::CreateStackInstancesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_stack_set::CreateStackSetError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_stack_set::CreateStackSetError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_stack_set::CreateStackSetError> for Error {
    fn from(err: crate::operation::create_stack_set::CreateStackSetError) -> Self {
        match err {
            crate::operation::create_stack_set::CreateStackSetError::CreatedButModifiedException(inner) => Error::CreatedButModifiedException(inner),
            crate::operation::create_stack_set::CreateStackSetError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::create_stack_set::CreateStackSetError::NameAlreadyExistsException(inner) => Error::NameAlreadyExistsException(inner),
            crate::operation::create_stack_set::CreateStackSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::deactivate_type::DeactivateTypeError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::deactivate_type::DeactivateTypeError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::deactivate_type::DeactivateTypeError> for Error {
    fn from(err: crate::operation::deactivate_type::DeactivateTypeError) -> Self {
        match err {
            crate::operation::deactivate_type::DeactivateTypeError::CfnRegistryException(inner) => {
                Error::CfnRegistryException(inner)
            }
            crate::operation::deactivate_type::DeactivateTypeError::TypeNotFoundException(
                inner,
            ) => Error::TypeNotFoundException(inner),
            crate::operation::deactivate_type::DeactivateTypeError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_change_set::DeleteChangeSetError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_change_set::DeleteChangeSetError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_change_set::DeleteChangeSetError> for Error {
    fn from(err: crate::operation::delete_change_set::DeleteChangeSetError) -> Self {
        match err {
            crate::operation::delete_change_set::DeleteChangeSetError::InvalidChangeSetStatusException(inner) => Error::InvalidChangeSetStatusException(inner),
            crate::operation::delete_change_set::DeleteChangeSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::delete_stack::DeleteStackError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::delete_stack::DeleteStackError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_stack::DeleteStackError> for Error {
    fn from(err: crate::operation::delete_stack::DeleteStackError) -> Self {
        match err {
            crate::operation::delete_stack::DeleteStackError::TokenAlreadyExistsException(
                inner,
            ) => Error::TokenAlreadyExistsException(inner),
            crate::operation::delete_stack::DeleteStackError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_stack_instances::DeleteStackInstancesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_stack_instances::DeleteStackInstancesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_stack_instances::DeleteStackInstancesError> for Error {
    fn from(err: crate::operation::delete_stack_instances::DeleteStackInstancesError) -> Self {
        match err {
            crate::operation::delete_stack_instances::DeleteStackInstancesError::InvalidOperationException(inner) => Error::InvalidOperationException(inner),
            crate::operation::delete_stack_instances::DeleteStackInstancesError::OperationIdAlreadyExistsException(inner) => Error::OperationIdAlreadyExistsException(inner),
            crate::operation::delete_stack_instances::DeleteStackInstancesError::OperationInProgressException(inner) => Error::OperationInProgressException(inner),
            crate::operation::delete_stack_instances::DeleteStackInstancesError::StackSetNotFoundException(inner) => Error::StackSetNotFoundException(inner),
            crate::operation::delete_stack_instances::DeleteStackInstancesError::StaleRequestException(inner) => Error::StaleRequestException(inner),
            crate::operation::delete_stack_instances::DeleteStackInstancesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_stack_set::DeleteStackSetError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_stack_set::DeleteStackSetError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_stack_set::DeleteStackSetError> for Error {
    fn from(err: crate::operation::delete_stack_set::DeleteStackSetError) -> Self {
        match err {
            crate::operation::delete_stack_set::DeleteStackSetError::OperationInProgressException(inner) => Error::OperationInProgressException(inner),
            crate::operation::delete_stack_set::DeleteStackSetError::StackSetNotEmptyException(inner) => Error::StackSetNotEmptyException(inner),
            crate::operation::delete_stack_set::DeleteStackSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::deregister_type::DeregisterTypeError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::deregister_type::DeregisterTypeError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::deregister_type::DeregisterTypeError> for Error {
    fn from(err: crate::operation::deregister_type::DeregisterTypeError) -> Self {
        match err {
            crate::operation::deregister_type::DeregisterTypeError::CfnRegistryException(inner) => {
                Error::CfnRegistryException(inner)
            }
            crate::operation::deregister_type::DeregisterTypeError::TypeNotFoundException(
                inner,
            ) => Error::TypeNotFoundException(inner),
            crate::operation::deregister_type::DeregisterTypeError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_account_limits::DescribeAccountLimitsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_account_limits::DescribeAccountLimitsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_account_limits::DescribeAccountLimitsError> for Error {
    fn from(err: crate::operation::describe_account_limits::DescribeAccountLimitsError) -> Self {
        match err {
            crate::operation::describe_account_limits::DescribeAccountLimitsError::Unhandled(
                inner,
            ) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_change_set::DescribeChangeSetError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_change_set::DescribeChangeSetError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_change_set::DescribeChangeSetError> for Error {
    fn from(err: crate::operation::describe_change_set::DescribeChangeSetError) -> Self {
        match err {
            crate::operation::describe_change_set::DescribeChangeSetError::ChangeSetNotFoundException(inner) => Error::ChangeSetNotFoundException(inner),
            crate::operation::describe_change_set::DescribeChangeSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_change_set_hooks::DescribeChangeSetHooksError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_change_set_hooks::DescribeChangeSetHooksError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_change_set_hooks::DescribeChangeSetHooksError> for Error {
    fn from(err: crate::operation::describe_change_set_hooks::DescribeChangeSetHooksError) -> Self {
        match err {
            crate::operation::describe_change_set_hooks::DescribeChangeSetHooksError::ChangeSetNotFoundException(inner) => Error::ChangeSetNotFoundException(inner),
            crate::operation::describe_change_set_hooks::DescribeChangeSetHooksError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_publisher::DescribePublisherError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_publisher::DescribePublisherError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_publisher::DescribePublisherError> for Error {
    fn from(err: crate::operation::describe_publisher::DescribePublisherError) -> Self {
        match err {
            crate::operation::describe_publisher::DescribePublisherError::CfnRegistryException(
                inner,
            ) => Error::CfnRegistryException(inner),
            crate::operation::describe_publisher::DescribePublisherError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::describe_stack_drift_detection_status::DescribeStackDriftDetectionStatusError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::describe_stack_drift_detection_status::DescribeStackDriftDetectionStatusError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::describe_stack_drift_detection_status::DescribeStackDriftDetectionStatusError> for Error {
    fn from(err: crate::operation::describe_stack_drift_detection_status::DescribeStackDriftDetectionStatusError) -> Self {
        match err {
            crate::operation::describe_stack_drift_detection_status::DescribeStackDriftDetectionStatusError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_stack_events::DescribeStackEventsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_stack_events::DescribeStackEventsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_stack_events::DescribeStackEventsError> for Error {
    fn from(err: crate::operation::describe_stack_events::DescribeStackEventsError) -> Self {
        match err {
            crate::operation::describe_stack_events::DescribeStackEventsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_stack_instance::DescribeStackInstanceError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_stack_instance::DescribeStackInstanceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_stack_instance::DescribeStackInstanceError> for Error {
    fn from(err: crate::operation::describe_stack_instance::DescribeStackInstanceError) -> Self {
        match err {
            crate::operation::describe_stack_instance::DescribeStackInstanceError::StackInstanceNotFoundException(inner) => Error::StackInstanceNotFoundException(inner),
            crate::operation::describe_stack_instance::DescribeStackInstanceError::StackSetNotFoundException(inner) => Error::StackSetNotFoundException(inner),
            crate::operation::describe_stack_instance::DescribeStackInstanceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_stack_resource::DescribeStackResourceError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_stack_resource::DescribeStackResourceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_stack_resource::DescribeStackResourceError> for Error {
    fn from(err: crate::operation::describe_stack_resource::DescribeStackResourceError) -> Self {
        match err {
            crate::operation::describe_stack_resource::DescribeStackResourceError::Unhandled(
                inner,
            ) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_stack_resource_drifts::DescribeStackResourceDriftsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_stack_resource_drifts::DescribeStackResourceDriftsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_stack_resource_drifts::DescribeStackResourceDriftsError>
    for Error
{
    fn from(
        err: crate::operation::describe_stack_resource_drifts::DescribeStackResourceDriftsError,
    ) -> Self {
        match err {
            crate::operation::describe_stack_resource_drifts::DescribeStackResourceDriftsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_stack_resources::DescribeStackResourcesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_stack_resources::DescribeStackResourcesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_stack_resources::DescribeStackResourcesError> for Error {
    fn from(err: crate::operation::describe_stack_resources::DescribeStackResourcesError) -> Self {
        match err {
            crate::operation::describe_stack_resources::DescribeStackResourcesError::Unhandled(
                inner,
            ) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_stacks::DescribeStacksError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_stacks::DescribeStacksError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_stacks::DescribeStacksError> for Error {
    fn from(err: crate::operation::describe_stacks::DescribeStacksError) -> Self {
        match err {
            crate::operation::describe_stacks::DescribeStacksError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_stack_set::DescribeStackSetError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_stack_set::DescribeStackSetError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_stack_set::DescribeStackSetError> for Error {
    fn from(err: crate::operation::describe_stack_set::DescribeStackSetError) -> Self {
        match err {
            crate::operation::describe_stack_set::DescribeStackSetError::StackSetNotFoundException(inner) => Error::StackSetNotFoundException(inner),
            crate::operation::describe_stack_set::DescribeStackSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_stack_set_operation::DescribeStackSetOperationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_stack_set_operation::DescribeStackSetOperationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_stack_set_operation::DescribeStackSetOperationError>
    for Error
{
    fn from(
        err: crate::operation::describe_stack_set_operation::DescribeStackSetOperationError,
    ) -> Self {
        match err {
            crate::operation::describe_stack_set_operation::DescribeStackSetOperationError::OperationNotFoundException(inner) => Error::OperationNotFoundException(inner),
            crate::operation::describe_stack_set_operation::DescribeStackSetOperationError::StackSetNotFoundException(inner) => Error::StackSetNotFoundException(inner),
            crate::operation::describe_stack_set_operation::DescribeStackSetOperationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::describe_type::DescribeTypeError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_type::DescribeTypeError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_type::DescribeTypeError> for Error {
    fn from(err: crate::operation::describe_type::DescribeTypeError) -> Self {
        match err {
            crate::operation::describe_type::DescribeTypeError::CfnRegistryException(inner) => {
                Error::CfnRegistryException(inner)
            }
            crate::operation::describe_type::DescribeTypeError::TypeNotFoundException(inner) => {
                Error::TypeNotFoundException(inner)
            }
            crate::operation::describe_type::DescribeTypeError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_type_registration::DescribeTypeRegistrationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_type_registration::DescribeTypeRegistrationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_type_registration::DescribeTypeRegistrationError> for Error {
    fn from(
        err: crate::operation::describe_type_registration::DescribeTypeRegistrationError,
    ) -> Self {
        match err {
            crate::operation::describe_type_registration::DescribeTypeRegistrationError::CfnRegistryException(inner) => Error::CfnRegistryException(inner),
            crate::operation::describe_type_registration::DescribeTypeRegistrationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::detect_stack_drift::DetectStackDriftError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::detect_stack_drift::DetectStackDriftError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::detect_stack_drift::DetectStackDriftError> for Error {
    fn from(err: crate::operation::detect_stack_drift::DetectStackDriftError) -> Self {
        match err {
            crate::operation::detect_stack_drift::DetectStackDriftError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::detect_stack_resource_drift::DetectStackResourceDriftError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::detect_stack_resource_drift::DetectStackResourceDriftError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::detect_stack_resource_drift::DetectStackResourceDriftError> for Error {
    fn from(
        err: crate::operation::detect_stack_resource_drift::DetectStackResourceDriftError,
    ) -> Self {
        match err {
            crate::operation::detect_stack_resource_drift::DetectStackResourceDriftError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::detect_stack_set_drift::DetectStackSetDriftError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::detect_stack_set_drift::DetectStackSetDriftError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::detect_stack_set_drift::DetectStackSetDriftError> for Error {
    fn from(err: crate::operation::detect_stack_set_drift::DetectStackSetDriftError) -> Self {
        match err {
            crate::operation::detect_stack_set_drift::DetectStackSetDriftError::InvalidOperationException(inner) => Error::InvalidOperationException(inner),
            crate::operation::detect_stack_set_drift::DetectStackSetDriftError::OperationInProgressException(inner) => Error::OperationInProgressException(inner),
            crate::operation::detect_stack_set_drift::DetectStackSetDriftError::StackSetNotFoundException(inner) => Error::StackSetNotFoundException(inner),
            crate::operation::detect_stack_set_drift::DetectStackSetDriftError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::estimate_template_cost::EstimateTemplateCostError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::estimate_template_cost::EstimateTemplateCostError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::estimate_template_cost::EstimateTemplateCostError> for Error {
    fn from(err: crate::operation::estimate_template_cost::EstimateTemplateCostError) -> Self {
        match err {
            crate::operation::estimate_template_cost::EstimateTemplateCostError::Unhandled(
                inner,
            ) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::execute_change_set::ExecuteChangeSetError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::execute_change_set::ExecuteChangeSetError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::execute_change_set::ExecuteChangeSetError> for Error {
    fn from(err: crate::operation::execute_change_set::ExecuteChangeSetError) -> Self {
        match err {
            crate::operation::execute_change_set::ExecuteChangeSetError::ChangeSetNotFoundException(inner) => Error::ChangeSetNotFoundException(inner),
            crate::operation::execute_change_set::ExecuteChangeSetError::InsufficientCapabilitiesException(inner) => Error::InsufficientCapabilitiesException(inner),
            crate::operation::execute_change_set::ExecuteChangeSetError::InvalidChangeSetStatusException(inner) => Error::InvalidChangeSetStatusException(inner),
            crate::operation::execute_change_set::ExecuteChangeSetError::TokenAlreadyExistsException(inner) => Error::TokenAlreadyExistsException(inner),
            crate::operation::execute_change_set::ExecuteChangeSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_stack_policy::GetStackPolicyError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_stack_policy::GetStackPolicyError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_stack_policy::GetStackPolicyError> for Error {
    fn from(err: crate::operation::get_stack_policy::GetStackPolicyError) -> Self {
        match err {
            crate::operation::get_stack_policy::GetStackPolicyError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::get_template::GetTemplateError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::get_template::GetTemplateError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_template::GetTemplateError> for Error {
    fn from(err: crate::operation::get_template::GetTemplateError) -> Self {
        match err {
            crate::operation::get_template::GetTemplateError::ChangeSetNotFoundException(inner) => {
                Error::ChangeSetNotFoundException(inner)
            }
            crate::operation::get_template::GetTemplateError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_template_summary::GetTemplateSummaryError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_template_summary::GetTemplateSummaryError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_template_summary::GetTemplateSummaryError> for Error {
    fn from(err: crate::operation::get_template_summary::GetTemplateSummaryError) -> Self {
        match err {
            crate::operation::get_template_summary::GetTemplateSummaryError::StackSetNotFoundException(inner) => Error::StackSetNotFoundException(inner),
            crate::operation::get_template_summary::GetTemplateSummaryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::import_stacks_to_stack_set::ImportStacksToStackSetError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::import_stacks_to_stack_set::ImportStacksToStackSetError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::import_stacks_to_stack_set::ImportStacksToStackSetError> for Error {
    fn from(
        err: crate::operation::import_stacks_to_stack_set::ImportStacksToStackSetError,
    ) -> Self {
        match err {
            crate::operation::import_stacks_to_stack_set::ImportStacksToStackSetError::InvalidOperationException(inner) => Error::InvalidOperationException(inner),
            crate::operation::import_stacks_to_stack_set::ImportStacksToStackSetError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::import_stacks_to_stack_set::ImportStacksToStackSetError::OperationIdAlreadyExistsException(inner) => Error::OperationIdAlreadyExistsException(inner),
            crate::operation::import_stacks_to_stack_set::ImportStacksToStackSetError::OperationInProgressException(inner) => Error::OperationInProgressException(inner),
            crate::operation::import_stacks_to_stack_set::ImportStacksToStackSetError::StackNotFoundException(inner) => Error::StackNotFoundException(inner),
            crate::operation::import_stacks_to_stack_set::ImportStacksToStackSetError::StackSetNotFoundException(inner) => Error::StackSetNotFoundException(inner),
            crate::operation::import_stacks_to_stack_set::ImportStacksToStackSetError::StaleRequestException(inner) => Error::StaleRequestException(inner),
            crate::operation::import_stacks_to_stack_set::ImportStacksToStackSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_change_sets::ListChangeSetsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_change_sets::ListChangeSetsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_change_sets::ListChangeSetsError> for Error {
    fn from(err: crate::operation::list_change_sets::ListChangeSetsError) -> Self {
        match err {
            crate::operation::list_change_sets::ListChangeSetsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::list_exports::ListExportsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::list_exports::ListExportsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_exports::ListExportsError> for Error {
    fn from(err: crate::operation::list_exports::ListExportsError) -> Self {
        match err {
            crate::operation::list_exports::ListExportsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::list_imports::ListImportsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::list_imports::ListImportsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_imports::ListImportsError> for Error {
    fn from(err: crate::operation::list_imports::ListImportsError) -> Self {
        match err {
            crate::operation::list_imports::ListImportsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_stack_instances::ListStackInstancesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_stack_instances::ListStackInstancesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_stack_instances::ListStackInstancesError> for Error {
    fn from(err: crate::operation::list_stack_instances::ListStackInstancesError) -> Self {
        match err {
            crate::operation::list_stack_instances::ListStackInstancesError::StackSetNotFoundException(inner) => Error::StackSetNotFoundException(inner),
            crate::operation::list_stack_instances::ListStackInstancesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_stack_resources::ListStackResourcesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_stack_resources::ListStackResourcesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_stack_resources::ListStackResourcesError> for Error {
    fn from(err: crate::operation::list_stack_resources::ListStackResourcesError) -> Self {
        match err {
            crate::operation::list_stack_resources::ListStackResourcesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::list_stacks::ListStacksError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::list_stacks::ListStacksError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_stacks::ListStacksError> for Error {
    fn from(err: crate::operation::list_stacks::ListStacksError) -> Self {
        match err {
            crate::operation::list_stacks::ListStacksError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_stack_set_operation_results::ListStackSetOperationResultsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_stack_set_operation_results::ListStackSetOperationResultsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_stack_set_operation_results::ListStackSetOperationResultsError>
    for Error
{
    fn from(
        err: crate::operation::list_stack_set_operation_results::ListStackSetOperationResultsError,
    ) -> Self {
        match err {
            crate::operation::list_stack_set_operation_results::ListStackSetOperationResultsError::OperationNotFoundException(inner) => Error::OperationNotFoundException(inner),
            crate::operation::list_stack_set_operation_results::ListStackSetOperationResultsError::StackSetNotFoundException(inner) => Error::StackSetNotFoundException(inner),
            crate::operation::list_stack_set_operation_results::ListStackSetOperationResultsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_stack_set_operations::ListStackSetOperationsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_stack_set_operations::ListStackSetOperationsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_stack_set_operations::ListStackSetOperationsError> for Error {
    fn from(err: crate::operation::list_stack_set_operations::ListStackSetOperationsError) -> Self {
        match err {
            crate::operation::list_stack_set_operations::ListStackSetOperationsError::StackSetNotFoundException(inner) => Error::StackSetNotFoundException(inner),
            crate::operation::list_stack_set_operations::ListStackSetOperationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<crate::operation::list_stack_sets::ListStackSetsError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_stack_sets::ListStackSetsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_stack_sets::ListStackSetsError> for Error {
    fn from(err: crate::operation::list_stack_sets::ListStackSetsError) -> Self {
        match err {
            crate::operation::list_stack_sets::ListStackSetsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_type_registrations::ListTypeRegistrationsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_type_registrations::ListTypeRegistrationsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_type_registrations::ListTypeRegistrationsError> for Error {
    fn from(err: crate::operation::list_type_registrations::ListTypeRegistrationsError) -> Self {
        match err {
            crate::operation::list_type_registrations::ListTypeRegistrationsError::CfnRegistryException(inner) => Error::CfnRegistryException(inner),
            crate::operation::list_type_registrations::ListTypeRegistrationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::list_types::ListTypesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::list_types::ListTypesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_types::ListTypesError> for Error {
    fn from(err: crate::operation::list_types::ListTypesError) -> Self {
        match err {
            crate::operation::list_types::ListTypesError::CfnRegistryException(inner) => {
                Error::CfnRegistryException(inner)
            }
            crate::operation::list_types::ListTypesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_type_versions::ListTypeVersionsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_type_versions::ListTypeVersionsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_type_versions::ListTypeVersionsError> for Error {
    fn from(err: crate::operation::list_type_versions::ListTypeVersionsError) -> Self {
        match err {
            crate::operation::list_type_versions::ListTypeVersionsError::CfnRegistryException(
                inner,
            ) => Error::CfnRegistryException(inner),
            crate::operation::list_type_versions::ListTypeVersionsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::publish_type::PublishTypeError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::publish_type::PublishTypeError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::publish_type::PublishTypeError> for Error {
    fn from(err: crate::operation::publish_type::PublishTypeError) -> Self {
        match err {
            crate::operation::publish_type::PublishTypeError::CfnRegistryException(inner) => {
                Error::CfnRegistryException(inner)
            }
            crate::operation::publish_type::PublishTypeError::TypeNotFoundException(inner) => {
                Error::TypeNotFoundException(inner)
            }
            crate::operation::publish_type::PublishTypeError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::record_handler_progress::RecordHandlerProgressError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::record_handler_progress::RecordHandlerProgressError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::record_handler_progress::RecordHandlerProgressError> for Error {
    fn from(err: crate::operation::record_handler_progress::RecordHandlerProgressError) -> Self {
        match err {
            crate::operation::record_handler_progress::RecordHandlerProgressError::InvalidStateTransitionException(inner) => Error::InvalidStateTransitionException(inner),
            crate::operation::record_handler_progress::RecordHandlerProgressError::OperationStatusCheckFailedException(inner) => Error::OperationStatusCheckFailedException(inner),
            crate::operation::record_handler_progress::RecordHandlerProgressError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::register_publisher::RegisterPublisherError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::register_publisher::RegisterPublisherError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::register_publisher::RegisterPublisherError> for Error {
    fn from(err: crate::operation::register_publisher::RegisterPublisherError) -> Self {
        match err {
            crate::operation::register_publisher::RegisterPublisherError::CfnRegistryException(
                inner,
            ) => Error::CfnRegistryException(inner),
            crate::operation::register_publisher::RegisterPublisherError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::register_type::RegisterTypeError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::register_type::RegisterTypeError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::register_type::RegisterTypeError> for Error {
    fn from(err: crate::operation::register_type::RegisterTypeError) -> Self {
        match err {
            crate::operation::register_type::RegisterTypeError::CfnRegistryException(inner) => {
                Error::CfnRegistryException(inner)
            }
            crate::operation::register_type::RegisterTypeError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::rollback_stack::RollbackStackError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::rollback_stack::RollbackStackError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::rollback_stack::RollbackStackError> for Error {
    fn from(err: crate::operation::rollback_stack::RollbackStackError) -> Self {
        match err {
            crate::operation::rollback_stack::RollbackStackError::TokenAlreadyExistsException(
                inner,
            ) => Error::TokenAlreadyExistsException(inner),
            crate::operation::rollback_stack::RollbackStackError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::set_stack_policy::SetStackPolicyError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::set_stack_policy::SetStackPolicyError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::set_stack_policy::SetStackPolicyError> for Error {
    fn from(err: crate::operation::set_stack_policy::SetStackPolicyError) -> Self {
        match err {
            crate::operation::set_stack_policy::SetStackPolicyError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::set_type_configuration::SetTypeConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::set_type_configuration::SetTypeConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::set_type_configuration::SetTypeConfigurationError> for Error {
    fn from(err: crate::operation::set_type_configuration::SetTypeConfigurationError) -> Self {
        match err {
            crate::operation::set_type_configuration::SetTypeConfigurationError::CfnRegistryException(inner) => Error::CfnRegistryException(inner),
            crate::operation::set_type_configuration::SetTypeConfigurationError::TypeNotFoundException(inner) => Error::TypeNotFoundException(inner),
            crate::operation::set_type_configuration::SetTypeConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::set_type_default_version::SetTypeDefaultVersionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::set_type_default_version::SetTypeDefaultVersionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::set_type_default_version::SetTypeDefaultVersionError> for Error {
    fn from(err: crate::operation::set_type_default_version::SetTypeDefaultVersionError) -> Self {
        match err {
            crate::operation::set_type_default_version::SetTypeDefaultVersionError::CfnRegistryException(inner) => Error::CfnRegistryException(inner),
            crate::operation::set_type_default_version::SetTypeDefaultVersionError::TypeNotFoundException(inner) => Error::TypeNotFoundException(inner),
            crate::operation::set_type_default_version::SetTypeDefaultVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::signal_resource::SignalResourceError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::signal_resource::SignalResourceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::signal_resource::SignalResourceError> for Error {
    fn from(err: crate::operation::signal_resource::SignalResourceError) -> Self {
        match err {
            crate::operation::signal_resource::SignalResourceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::stop_stack_set_operation::StopStackSetOperationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::stop_stack_set_operation::StopStackSetOperationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::stop_stack_set_operation::StopStackSetOperationError> for Error {
    fn from(err: crate::operation::stop_stack_set_operation::StopStackSetOperationError) -> Self {
        match err {
            crate::operation::stop_stack_set_operation::StopStackSetOperationError::InvalidOperationException(inner) => Error::InvalidOperationException(inner),
            crate::operation::stop_stack_set_operation::StopStackSetOperationError::OperationNotFoundException(inner) => Error::OperationNotFoundException(inner),
            crate::operation::stop_stack_set_operation::StopStackSetOperationError::StackSetNotFoundException(inner) => Error::StackSetNotFoundException(inner),
            crate::operation::stop_stack_set_operation::StopStackSetOperationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::test_type::TestTypeError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::test_type::TestTypeError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::test_type::TestTypeError> for Error {
    fn from(err: crate::operation::test_type::TestTypeError) -> Self {
        match err {
            crate::operation::test_type::TestTypeError::CfnRegistryException(inner) => {
                Error::CfnRegistryException(inner)
            }
            crate::operation::test_type::TestTypeError::TypeNotFoundException(inner) => {
                Error::TypeNotFoundException(inner)
            }
            crate::operation::test_type::TestTypeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::update_stack::UpdateStackError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::update_stack::UpdateStackError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_stack::UpdateStackError> for Error {
    fn from(err: crate::operation::update_stack::UpdateStackError) -> Self {
        match err {
            crate::operation::update_stack::UpdateStackError::InsufficientCapabilitiesException(
                inner,
            ) => Error::InsufficientCapabilitiesException(inner),
            crate::operation::update_stack::UpdateStackError::TokenAlreadyExistsException(
                inner,
            ) => Error::TokenAlreadyExistsException(inner),
            crate::operation::update_stack::UpdateStackError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_stack_instances::UpdateStackInstancesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_stack_instances::UpdateStackInstancesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_stack_instances::UpdateStackInstancesError> for Error {
    fn from(err: crate::operation::update_stack_instances::UpdateStackInstancesError) -> Self {
        match err {
            crate::operation::update_stack_instances::UpdateStackInstancesError::InvalidOperationException(inner) => Error::InvalidOperationException(inner),
            crate::operation::update_stack_instances::UpdateStackInstancesError::OperationIdAlreadyExistsException(inner) => Error::OperationIdAlreadyExistsException(inner),
            crate::operation::update_stack_instances::UpdateStackInstancesError::OperationInProgressException(inner) => Error::OperationInProgressException(inner),
            crate::operation::update_stack_instances::UpdateStackInstancesError::StackInstanceNotFoundException(inner) => Error::StackInstanceNotFoundException(inner),
            crate::operation::update_stack_instances::UpdateStackInstancesError::StackSetNotFoundException(inner) => Error::StackSetNotFoundException(inner),
            crate::operation::update_stack_instances::UpdateStackInstancesError::StaleRequestException(inner) => Error::StaleRequestException(inner),
            crate::operation::update_stack_instances::UpdateStackInstancesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_stack_set::UpdateStackSetError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_stack_set::UpdateStackSetError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_stack_set::UpdateStackSetError> for Error {
    fn from(err: crate::operation::update_stack_set::UpdateStackSetError) -> Self {
        match err {
            crate::operation::update_stack_set::UpdateStackSetError::InvalidOperationException(inner) => Error::InvalidOperationException(inner),
            crate::operation::update_stack_set::UpdateStackSetError::OperationIdAlreadyExistsException(inner) => Error::OperationIdAlreadyExistsException(inner),
            crate::operation::update_stack_set::UpdateStackSetError::OperationInProgressException(inner) => Error::OperationInProgressException(inner),
            crate::operation::update_stack_set::UpdateStackSetError::StackInstanceNotFoundException(inner) => Error::StackInstanceNotFoundException(inner),
            crate::operation::update_stack_set::UpdateStackSetError::StackSetNotFoundException(inner) => Error::StackSetNotFoundException(inner),
            crate::operation::update_stack_set::UpdateStackSetError::StaleRequestException(inner) => Error::StaleRequestException(inner),
            crate::operation::update_stack_set::UpdateStackSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_termination_protection::UpdateTerminationProtectionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_termination_protection::UpdateTerminationProtectionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_termination_protection::UpdateTerminationProtectionError>
    for Error
{
    fn from(
        err: crate::operation::update_termination_protection::UpdateTerminationProtectionError,
    ) -> Self {
        match err {
            crate::operation::update_termination_protection::UpdateTerminationProtectionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::validate_template::ValidateTemplateError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::validate_template::ValidateTemplateError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::validate_template::ValidateTemplateError> for Error {
    fn from(err: crate::operation::validate_template::ValidateTemplateError) -> Self {
        match err {
            crate::operation::validate_template::ValidateTemplateError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AlreadyExistsException(e) => e.request_id(),
            Self::CfnRegistryException(e) => e.request_id(),
            Self::ChangeSetNotFoundException(e) => e.request_id(),
            Self::CreatedButModifiedException(e) => e.request_id(),
            Self::InsufficientCapabilitiesException(e) => e.request_id(),
            Self::InvalidChangeSetStatusException(e) => e.request_id(),
            Self::InvalidOperationException(e) => e.request_id(),
            Self::InvalidStateTransitionException(e) => e.request_id(),
            Self::LimitExceededException(e) => e.request_id(),
            Self::NameAlreadyExistsException(e) => e.request_id(),
            Self::OperationIdAlreadyExistsException(e) => e.request_id(),
            Self::OperationInProgressException(e) => e.request_id(),
            Self::OperationNotFoundException(e) => e.request_id(),
            Self::OperationStatusCheckFailedException(e) => e.request_id(),
            Self::StackInstanceNotFoundException(e) => e.request_id(),
            Self::StackNotFoundException(e) => e.request_id(),
            Self::StackSetNotEmptyException(e) => e.request_id(),
            Self::StackSetNotFoundException(e) => e.request_id(),
            Self::StaleRequestException(e) => e.request_id(),
            Self::TokenAlreadyExistsException(e) => e.request_id(),
            Self::TypeConfigurationNotFoundException(e) => e.request_id(),
            Self::TypeNotFoundException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
