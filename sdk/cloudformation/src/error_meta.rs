// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    AlreadyExistsException(crate::error::AlreadyExistsException),
    CfnRegistryException(crate::error::CfnRegistryException),
    ChangeSetNotFoundException(crate::error::ChangeSetNotFoundException),
    CreatedButModifiedException(crate::error::CreatedButModifiedException),
    InsufficientCapabilitiesException(crate::error::InsufficientCapabilitiesException),
    InvalidChangeSetStatusException(crate::error::InvalidChangeSetStatusException),
    InvalidOperationException(crate::error::InvalidOperationException),
    InvalidStateTransitionException(crate::error::InvalidStateTransitionException),
    LimitExceededException(crate::error::LimitExceededException),
    NameAlreadyExistsException(crate::error::NameAlreadyExistsException),
    OperationIdAlreadyExistsException(crate::error::OperationIdAlreadyExistsException),
    OperationInProgressException(crate::error::OperationInProgressException),
    OperationNotFoundException(crate::error::OperationNotFoundException),
    OperationStatusCheckFailedException(crate::error::OperationStatusCheckFailedException),
    StackInstanceNotFoundException(crate::error::StackInstanceNotFoundException),
    StackSetNotEmptyException(crate::error::StackSetNotEmptyException),
    StackSetNotFoundException(crate::error::StackSetNotFoundException),
    StaleRequestException(crate::error::StaleRequestException),
    TokenAlreadyExistsException(crate::error::TokenAlreadyExistsException),
    TypeConfigurationNotFoundException(crate::error::TypeConfigurationNotFoundException),
    TypeNotFoundException(crate::error::TypeNotFoundException),
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AlreadyExistsException(inner) => inner.fmt(f),
            Error::CfnRegistryException(inner) => inner.fmt(f),
            Error::ChangeSetNotFoundException(inner) => inner.fmt(f),
            Error::CreatedButModifiedException(inner) => inner.fmt(f),
            Error::InsufficientCapabilitiesException(inner) => inner.fmt(f),
            Error::InvalidChangeSetStatusException(inner) => inner.fmt(f),
            Error::InvalidOperationException(inner) => inner.fmt(f),
            Error::InvalidStateTransitionException(inner) => inner.fmt(f),
            Error::LimitExceededException(inner) => inner.fmt(f),
            Error::NameAlreadyExistsException(inner) => inner.fmt(f),
            Error::OperationIdAlreadyExistsException(inner) => inner.fmt(f),
            Error::OperationInProgressException(inner) => inner.fmt(f),
            Error::OperationNotFoundException(inner) => inner.fmt(f),
            Error::OperationStatusCheckFailedException(inner) => inner.fmt(f),
            Error::StackInstanceNotFoundException(inner) => inner.fmt(f),
            Error::StackSetNotEmptyException(inner) => inner.fmt(f),
            Error::StackSetNotFoundException(inner) => inner.fmt(f),
            Error::StaleRequestException(inner) => inner.fmt(f),
            Error::TokenAlreadyExistsException(inner) => inner.fmt(f),
            Error::TypeConfigurationNotFoundException(inner) => inner.fmt(f),
            Error::TypeNotFoundException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ActivateTypeError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ActivateTypeError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ActivateTypeErrorKind::CfnRegistryException(inner) => {
                    Error::CfnRegistryException(inner)
                }
                crate::error::ActivateTypeErrorKind::TypeNotFoundException(inner) => {
                    Error::TypeNotFoundException(inner)
                }
                crate::error::ActivateTypeErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::BatchDescribeTypeConfigurationsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::BatchDescribeTypeConfigurationsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::BatchDescribeTypeConfigurationsErrorKind::CfnRegistryException(inner) => Error::CfnRegistryException(inner),
                crate::error::BatchDescribeTypeConfigurationsErrorKind::TypeConfigurationNotFoundException(inner) => Error::TypeConfigurationNotFoundException(inner),
                crate::error::BatchDescribeTypeConfigurationsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CancelUpdateStackError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CancelUpdateStackError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CancelUpdateStackErrorKind::TokenAlreadyExistsException(inner) => {
                    Error::TokenAlreadyExistsException(inner)
                }
                crate::error::CancelUpdateStackErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ContinueUpdateRollbackError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ContinueUpdateRollbackError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ContinueUpdateRollbackErrorKind::TokenAlreadyExistsException(
                    inner,
                ) => Error::TokenAlreadyExistsException(inner),
                crate::error::ContinueUpdateRollbackErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateChangeSetError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateChangeSetError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateChangeSetErrorKind::AlreadyExistsException(inner) => {
                    Error::AlreadyExistsException(inner)
                }
                crate::error::CreateChangeSetErrorKind::InsufficientCapabilitiesException(
                    inner,
                ) => Error::InsufficientCapabilitiesException(inner),
                crate::error::CreateChangeSetErrorKind::LimitExceededException(inner) => {
                    Error::LimitExceededException(inner)
                }
                crate::error::CreateChangeSetErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateStackError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateStackError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateStackErrorKind::AlreadyExistsException(inner) => {
                    Error::AlreadyExistsException(inner)
                }
                crate::error::CreateStackErrorKind::InsufficientCapabilitiesException(inner) => {
                    Error::InsufficientCapabilitiesException(inner)
                }
                crate::error::CreateStackErrorKind::LimitExceededException(inner) => {
                    Error::LimitExceededException(inner)
                }
                crate::error::CreateStackErrorKind::TokenAlreadyExistsException(inner) => {
                    Error::TokenAlreadyExistsException(inner)
                }
                crate::error::CreateStackErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateStackInstancesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateStackInstancesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateStackInstancesErrorKind::InvalidOperationException(inner) => {
                    Error::InvalidOperationException(inner)
                }
                crate::error::CreateStackInstancesErrorKind::LimitExceededException(inner) => {
                    Error::LimitExceededException(inner)
                }
                crate::error::CreateStackInstancesErrorKind::OperationIdAlreadyExistsException(
                    inner,
                ) => Error::OperationIdAlreadyExistsException(inner),
                crate::error::CreateStackInstancesErrorKind::OperationInProgressException(
                    inner,
                ) => Error::OperationInProgressException(inner),
                crate::error::CreateStackInstancesErrorKind::StackSetNotFoundException(inner) => {
                    Error::StackSetNotFoundException(inner)
                }
                crate::error::CreateStackInstancesErrorKind::StaleRequestException(inner) => {
                    Error::StaleRequestException(inner)
                }
                crate::error::CreateStackInstancesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateStackSetError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateStackSetError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateStackSetErrorKind::CreatedButModifiedException(inner) => {
                    Error::CreatedButModifiedException(inner)
                }
                crate::error::CreateStackSetErrorKind::LimitExceededException(inner) => {
                    Error::LimitExceededException(inner)
                }
                crate::error::CreateStackSetErrorKind::NameAlreadyExistsException(inner) => {
                    Error::NameAlreadyExistsException(inner)
                }
                crate::error::CreateStackSetErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeactivateTypeError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeactivateTypeError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeactivateTypeErrorKind::CfnRegistryException(inner) => {
                    Error::CfnRegistryException(inner)
                }
                crate::error::DeactivateTypeErrorKind::TypeNotFoundException(inner) => {
                    Error::TypeNotFoundException(inner)
                }
                crate::error::DeactivateTypeErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteChangeSetError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteChangeSetError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteChangeSetErrorKind::InvalidChangeSetStatusException(inner) => {
                    Error::InvalidChangeSetStatusException(inner)
                }
                crate::error::DeleteChangeSetErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteStackError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteStackError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteStackErrorKind::TokenAlreadyExistsException(inner) => {
                    Error::TokenAlreadyExistsException(inner)
                }
                crate::error::DeleteStackErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteStackInstancesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteStackInstancesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteStackInstancesErrorKind::InvalidOperationException(inner) => {
                    Error::InvalidOperationException(inner)
                }
                crate::error::DeleteStackInstancesErrorKind::OperationIdAlreadyExistsException(
                    inner,
                ) => Error::OperationIdAlreadyExistsException(inner),
                crate::error::DeleteStackInstancesErrorKind::OperationInProgressException(
                    inner,
                ) => Error::OperationInProgressException(inner),
                crate::error::DeleteStackInstancesErrorKind::StackSetNotFoundException(inner) => {
                    Error::StackSetNotFoundException(inner)
                }
                crate::error::DeleteStackInstancesErrorKind::StaleRequestException(inner) => {
                    Error::StaleRequestException(inner)
                }
                crate::error::DeleteStackInstancesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteStackSetError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteStackSetError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteStackSetErrorKind::OperationInProgressException(inner) => {
                    Error::OperationInProgressException(inner)
                }
                crate::error::DeleteStackSetErrorKind::StackSetNotEmptyException(inner) => {
                    Error::StackSetNotEmptyException(inner)
                }
                crate::error::DeleteStackSetErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeregisterTypeError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeregisterTypeError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeregisterTypeErrorKind::CfnRegistryException(inner) => {
                    Error::CfnRegistryException(inner)
                }
                crate::error::DeregisterTypeErrorKind::TypeNotFoundException(inner) => {
                    Error::TypeNotFoundException(inner)
                }
                crate::error::DeregisterTypeErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeAccountLimitsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeAccountLimitsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeAccountLimitsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeChangeSetError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeChangeSetError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeChangeSetErrorKind::ChangeSetNotFoundException(inner) => {
                    Error::ChangeSetNotFoundException(inner)
                }
                crate::error::DescribeChangeSetErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribePublisherError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribePublisherError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribePublisherErrorKind::CfnRegistryException(inner) => {
                    Error::CfnRegistryException(inner)
                }
                crate::error::DescribePublisherErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeStackDriftDetectionStatusError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeStackDriftDetectionStatusError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeStackDriftDetectionStatusErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeStackEventsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeStackEventsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeStackEventsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeStackInstanceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeStackInstanceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeStackInstanceErrorKind::StackInstanceNotFoundException(
                    inner,
                ) => Error::StackInstanceNotFoundException(inner),
                crate::error::DescribeStackInstanceErrorKind::StackSetNotFoundException(inner) => {
                    Error::StackSetNotFoundException(inner)
                }
                crate::error::DescribeStackInstanceErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeStackResourceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeStackResourceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeStackResourceErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeStackResourceDriftsError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeStackResourceDriftsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeStackResourceDriftsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeStackResourcesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeStackResourcesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeStackResourcesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeStacksError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeStacksError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeStacksErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeStackSetError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeStackSetError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeStackSetErrorKind::StackSetNotFoundException(inner) => {
                    Error::StackSetNotFoundException(inner)
                }
                crate::error::DescribeStackSetErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeStackSetOperationError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeStackSetOperationError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeStackSetOperationErrorKind::OperationNotFoundException(
                    inner,
                ) => Error::OperationNotFoundException(inner),
                crate::error::DescribeStackSetOperationErrorKind::StackSetNotFoundException(
                    inner,
                ) => Error::StackSetNotFoundException(inner),
                crate::error::DescribeStackSetOperationErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeTypeError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeTypeError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeTypeErrorKind::CfnRegistryException(inner) => {
                    Error::CfnRegistryException(inner)
                }
                crate::error::DescribeTypeErrorKind::TypeNotFoundException(inner) => {
                    Error::TypeNotFoundException(inner)
                }
                crate::error::DescribeTypeErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeTypeRegistrationError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeTypeRegistrationError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeTypeRegistrationErrorKind::CfnRegistryException(inner) => {
                    Error::CfnRegistryException(inner)
                }
                crate::error::DescribeTypeRegistrationErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DetectStackDriftError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DetectStackDriftError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DetectStackDriftErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DetectStackResourceDriftError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DetectStackResourceDriftError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DetectStackResourceDriftErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DetectStackSetDriftError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DetectStackSetDriftError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DetectStackSetDriftErrorKind::InvalidOperationException(inner) => {
                    Error::InvalidOperationException(inner)
                }
                crate::error::DetectStackSetDriftErrorKind::OperationInProgressException(inner) => {
                    Error::OperationInProgressException(inner)
                }
                crate::error::DetectStackSetDriftErrorKind::StackSetNotFoundException(inner) => {
                    Error::StackSetNotFoundException(inner)
                }
                crate::error::DetectStackSetDriftErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::EstimateTemplateCostError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::EstimateTemplateCostError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::EstimateTemplateCostErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ExecuteChangeSetError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ExecuteChangeSetError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ExecuteChangeSetErrorKind::ChangeSetNotFoundException(inner) => {
                    Error::ChangeSetNotFoundException(inner)
                }
                crate::error::ExecuteChangeSetErrorKind::InsufficientCapabilitiesException(
                    inner,
                ) => Error::InsufficientCapabilitiesException(inner),
                crate::error::ExecuteChangeSetErrorKind::InvalidChangeSetStatusException(inner) => {
                    Error::InvalidChangeSetStatusException(inner)
                }
                crate::error::ExecuteChangeSetErrorKind::TokenAlreadyExistsException(inner) => {
                    Error::TokenAlreadyExistsException(inner)
                }
                crate::error::ExecuteChangeSetErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetStackPolicyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetStackPolicyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetStackPolicyErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetTemplateError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetTemplateError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetTemplateErrorKind::ChangeSetNotFoundException(inner) => {
                    Error::ChangeSetNotFoundException(inner)
                }
                crate::error::GetTemplateErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetTemplateSummaryError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetTemplateSummaryError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetTemplateSummaryErrorKind::StackSetNotFoundException(inner) => {
                    Error::StackSetNotFoundException(inner)
                }
                crate::error::GetTemplateSummaryErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListChangeSetsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListChangeSetsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListChangeSetsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListExportsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListExportsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListExportsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListImportsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListImportsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListImportsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListStackInstancesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListStackInstancesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListStackInstancesErrorKind::StackSetNotFoundException(inner) => {
                    Error::StackSetNotFoundException(inner)
                }
                crate::error::ListStackInstancesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListStackResourcesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListStackResourcesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListStackResourcesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListStacksError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListStacksError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListStacksErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListStackSetOperationResultsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::ListStackSetOperationResultsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListStackSetOperationResultsErrorKind::OperationNotFoundException(
                    inner,
                ) => Error::OperationNotFoundException(inner),
                crate::error::ListStackSetOperationResultsErrorKind::StackSetNotFoundException(
                    inner,
                ) => Error::StackSetNotFoundException(inner),
                crate::error::ListStackSetOperationResultsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListStackSetOperationsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListStackSetOperationsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListStackSetOperationsErrorKind::StackSetNotFoundException(inner) => {
                    Error::StackSetNotFoundException(inner)
                }
                crate::error::ListStackSetOperationsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListStackSetsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListStackSetsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListStackSetsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListTypeRegistrationsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListTypeRegistrationsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListTypeRegistrationsErrorKind::CfnRegistryException(inner) => {
                    Error::CfnRegistryException(inner)
                }
                crate::error::ListTypeRegistrationsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListTypesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListTypesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListTypesErrorKind::CfnRegistryException(inner) => {
                    Error::CfnRegistryException(inner)
                }
                crate::error::ListTypesErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListTypeVersionsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListTypeVersionsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListTypeVersionsErrorKind::CfnRegistryException(inner) => {
                    Error::CfnRegistryException(inner)
                }
                crate::error::ListTypeVersionsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PublishTypeError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::PublishTypeError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::PublishTypeErrorKind::CfnRegistryException(inner) => {
                    Error::CfnRegistryException(inner)
                }
                crate::error::PublishTypeErrorKind::TypeNotFoundException(inner) => {
                    Error::TypeNotFoundException(inner)
                }
                crate::error::PublishTypeErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::RecordHandlerProgressError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::RecordHandlerProgressError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::RecordHandlerProgressErrorKind::InvalidStateTransitionException(inner) => Error::InvalidStateTransitionException(inner),
                crate::error::RecordHandlerProgressErrorKind::OperationStatusCheckFailedException(inner) => Error::OperationStatusCheckFailedException(inner),
                crate::error::RecordHandlerProgressErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::RegisterPublisherError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::RegisterPublisherError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::RegisterPublisherErrorKind::CfnRegistryException(inner) => {
                    Error::CfnRegistryException(inner)
                }
                crate::error::RegisterPublisherErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::RegisterTypeError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::RegisterTypeError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::RegisterTypeErrorKind::CfnRegistryException(inner) => {
                    Error::CfnRegistryException(inner)
                }
                crate::error::RegisterTypeErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::SetStackPolicyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::SetStackPolicyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::SetStackPolicyErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::SetTypeConfigurationError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::SetTypeConfigurationError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::SetTypeConfigurationErrorKind::CfnRegistryException(inner) => {
                    Error::CfnRegistryException(inner)
                }
                crate::error::SetTypeConfigurationErrorKind::TypeNotFoundException(inner) => {
                    Error::TypeNotFoundException(inner)
                }
                crate::error::SetTypeConfigurationErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::SetTypeDefaultVersionError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::SetTypeDefaultVersionError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::SetTypeDefaultVersionErrorKind::CfnRegistryException(inner) => {
                    Error::CfnRegistryException(inner)
                }
                crate::error::SetTypeDefaultVersionErrorKind::TypeNotFoundException(inner) => {
                    Error::TypeNotFoundException(inner)
                }
                crate::error::SetTypeDefaultVersionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::SignalResourceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::SignalResourceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::SignalResourceErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::StopStackSetOperationError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::StopStackSetOperationError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::StopStackSetOperationErrorKind::InvalidOperationException(inner) => {
                    Error::InvalidOperationException(inner)
                }
                crate::error::StopStackSetOperationErrorKind::OperationNotFoundException(inner) => {
                    Error::OperationNotFoundException(inner)
                }
                crate::error::StopStackSetOperationErrorKind::StackSetNotFoundException(inner) => {
                    Error::StackSetNotFoundException(inner)
                }
                crate::error::StopStackSetOperationErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::TestTypeError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::TestTypeError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::TestTypeErrorKind::CfnRegistryException(inner) => {
                    Error::CfnRegistryException(inner)
                }
                crate::error::TestTypeErrorKind::TypeNotFoundException(inner) => {
                    Error::TypeNotFoundException(inner)
                }
                crate::error::TestTypeErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateStackError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateStackError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateStackErrorKind::InsufficientCapabilitiesException(inner) => {
                    Error::InsufficientCapabilitiesException(inner)
                }
                crate::error::UpdateStackErrorKind::TokenAlreadyExistsException(inner) => {
                    Error::TokenAlreadyExistsException(inner)
                }
                crate::error::UpdateStackErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateStackInstancesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateStackInstancesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateStackInstancesErrorKind::InvalidOperationException(inner) => {
                    Error::InvalidOperationException(inner)
                }
                crate::error::UpdateStackInstancesErrorKind::OperationIdAlreadyExistsException(
                    inner,
                ) => Error::OperationIdAlreadyExistsException(inner),
                crate::error::UpdateStackInstancesErrorKind::OperationInProgressException(
                    inner,
                ) => Error::OperationInProgressException(inner),
                crate::error::UpdateStackInstancesErrorKind::StackInstanceNotFoundException(
                    inner,
                ) => Error::StackInstanceNotFoundException(inner),
                crate::error::UpdateStackInstancesErrorKind::StackSetNotFoundException(inner) => {
                    Error::StackSetNotFoundException(inner)
                }
                crate::error::UpdateStackInstancesErrorKind::StaleRequestException(inner) => {
                    Error::StaleRequestException(inner)
                }
                crate::error::UpdateStackInstancesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateStackSetError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateStackSetError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateStackSetErrorKind::InvalidOperationException(inner) => {
                    Error::InvalidOperationException(inner)
                }
                crate::error::UpdateStackSetErrorKind::OperationIdAlreadyExistsException(inner) => {
                    Error::OperationIdAlreadyExistsException(inner)
                }
                crate::error::UpdateStackSetErrorKind::OperationInProgressException(inner) => {
                    Error::OperationInProgressException(inner)
                }
                crate::error::UpdateStackSetErrorKind::StackInstanceNotFoundException(inner) => {
                    Error::StackInstanceNotFoundException(inner)
                }
                crate::error::UpdateStackSetErrorKind::StackSetNotFoundException(inner) => {
                    Error::StackSetNotFoundException(inner)
                }
                crate::error::UpdateStackSetErrorKind::StaleRequestException(inner) => {
                    Error::StaleRequestException(inner)
                }
                crate::error::UpdateStackSetErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateTerminationProtectionError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::UpdateTerminationProtectionError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateTerminationProtectionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ValidateTemplateError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ValidateTemplateError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ValidateTemplateErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl std::error::Error for Error {}
