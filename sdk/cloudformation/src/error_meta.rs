// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    AlreadyExistsError(crate::error::AlreadyExistsError),
    CFNRegistryError(crate::error::CFNRegistryError),
    ChangeSetNotFoundError(crate::error::ChangeSetNotFoundError),
    CreatedButModifiedError(crate::error::CreatedButModifiedError),
    InsufficientCapabilitiesError(crate::error::InsufficientCapabilitiesError),
    InvalidChangeSetStatusError(crate::error::InvalidChangeSetStatusError),
    InvalidOperationError(crate::error::InvalidOperationError),
    InvalidStateTransitionError(crate::error::InvalidStateTransitionError),
    LimitExceededError(crate::error::LimitExceededError),
    NameAlreadyExistsError(crate::error::NameAlreadyExistsError),
    OperationIdAlreadyExistsError(crate::error::OperationIdAlreadyExistsError),
    OperationInProgressError(crate::error::OperationInProgressError),
    OperationNotFoundError(crate::error::OperationNotFoundError),
    OperationStatusCheckFailedError(crate::error::OperationStatusCheckFailedError),
    StackInstanceNotFoundError(crate::error::StackInstanceNotFoundError),
    StackSetNotEmptyError(crate::error::StackSetNotEmptyError),
    StackSetNotFoundError(crate::error::StackSetNotFoundError),
    StaleRequestError(crate::error::StaleRequestError),
    TokenAlreadyExistsError(crate::error::TokenAlreadyExistsError),
    TypeNotFoundError(crate::error::TypeNotFoundError),
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AlreadyExistsError(inner) => inner.fmt(f),
            Error::CFNRegistryError(inner) => inner.fmt(f),
            Error::ChangeSetNotFoundError(inner) => inner.fmt(f),
            Error::CreatedButModifiedError(inner) => inner.fmt(f),
            Error::InsufficientCapabilitiesError(inner) => inner.fmt(f),
            Error::InvalidChangeSetStatusError(inner) => inner.fmt(f),
            Error::InvalidOperationError(inner) => inner.fmt(f),
            Error::InvalidStateTransitionError(inner) => inner.fmt(f),
            Error::LimitExceededError(inner) => inner.fmt(f),
            Error::NameAlreadyExistsError(inner) => inner.fmt(f),
            Error::OperationIdAlreadyExistsError(inner) => inner.fmt(f),
            Error::OperationInProgressError(inner) => inner.fmt(f),
            Error::OperationNotFoundError(inner) => inner.fmt(f),
            Error::OperationStatusCheckFailedError(inner) => inner.fmt(f),
            Error::StackInstanceNotFoundError(inner) => inner.fmt(f),
            Error::StackSetNotEmptyError(inner) => inner.fmt(f),
            Error::StackSetNotFoundError(inner) => inner.fmt(f),
            Error::StaleRequestError(inner) => inner.fmt(f),
            Error::TokenAlreadyExistsError(inner) => inner.fmt(f),
            Error::TypeNotFoundError(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CancelUpdateStackError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CancelUpdateStackError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CancelUpdateStackErrorKind::TokenAlreadyExistsError(inner) => {
                    Error::TokenAlreadyExistsError(inner)
                }
                crate::error::CancelUpdateStackErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ContinueUpdateRollbackError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ContinueUpdateRollbackError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ContinueUpdateRollbackErrorKind::TokenAlreadyExistsError(inner) => {
                    Error::TokenAlreadyExistsError(inner)
                }
                crate::error::ContinueUpdateRollbackErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateChangeSetError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateChangeSetError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateChangeSetErrorKind::AlreadyExistsError(inner) => {
                    Error::AlreadyExistsError(inner)
                }
                crate::error::CreateChangeSetErrorKind::InsufficientCapabilitiesError(inner) => {
                    Error::InsufficientCapabilitiesError(inner)
                }
                crate::error::CreateChangeSetErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::CreateChangeSetErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateStackError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateStackError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateStackErrorKind::AlreadyExistsError(inner) => {
                    Error::AlreadyExistsError(inner)
                }
                crate::error::CreateStackErrorKind::InsufficientCapabilitiesError(inner) => {
                    Error::InsufficientCapabilitiesError(inner)
                }
                crate::error::CreateStackErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::CreateStackErrorKind::TokenAlreadyExistsError(inner) => {
                    Error::TokenAlreadyExistsError(inner)
                }
                crate::error::CreateStackErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateStackInstancesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateStackInstancesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateStackInstancesErrorKind::InvalidOperationError(inner) => {
                    Error::InvalidOperationError(inner)
                }
                crate::error::CreateStackInstancesErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::CreateStackInstancesErrorKind::OperationIdAlreadyExistsError(
                    inner,
                ) => Error::OperationIdAlreadyExistsError(inner),
                crate::error::CreateStackInstancesErrorKind::OperationInProgressError(inner) => {
                    Error::OperationInProgressError(inner)
                }
                crate::error::CreateStackInstancesErrorKind::StackSetNotFoundError(inner) => {
                    Error::StackSetNotFoundError(inner)
                }
                crate::error::CreateStackInstancesErrorKind::StaleRequestError(inner) => {
                    Error::StaleRequestError(inner)
                }
                crate::error::CreateStackInstancesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateStackSetError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateStackSetError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateStackSetErrorKind::CreatedButModifiedError(inner) => {
                    Error::CreatedButModifiedError(inner)
                }
                crate::error::CreateStackSetErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::CreateStackSetErrorKind::NameAlreadyExistsError(inner) => {
                    Error::NameAlreadyExistsError(inner)
                }
                crate::error::CreateStackSetErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteChangeSetError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteChangeSetError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteChangeSetErrorKind::InvalidChangeSetStatusError(inner) => {
                    Error::InvalidChangeSetStatusError(inner)
                }
                crate::error::DeleteChangeSetErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteStackError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteStackError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteStackErrorKind::TokenAlreadyExistsError(inner) => {
                    Error::TokenAlreadyExistsError(inner)
                }
                crate::error::DeleteStackErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteStackInstancesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteStackInstancesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteStackInstancesErrorKind::InvalidOperationError(inner) => {
                    Error::InvalidOperationError(inner)
                }
                crate::error::DeleteStackInstancesErrorKind::OperationIdAlreadyExistsError(
                    inner,
                ) => Error::OperationIdAlreadyExistsError(inner),
                crate::error::DeleteStackInstancesErrorKind::OperationInProgressError(inner) => {
                    Error::OperationInProgressError(inner)
                }
                crate::error::DeleteStackInstancesErrorKind::StackSetNotFoundError(inner) => {
                    Error::StackSetNotFoundError(inner)
                }
                crate::error::DeleteStackInstancesErrorKind::StaleRequestError(inner) => {
                    Error::StaleRequestError(inner)
                }
                crate::error::DeleteStackInstancesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteStackSetError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteStackSetError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteStackSetErrorKind::OperationInProgressError(inner) => {
                    Error::OperationInProgressError(inner)
                }
                crate::error::DeleteStackSetErrorKind::StackSetNotEmptyError(inner) => {
                    Error::StackSetNotEmptyError(inner)
                }
                crate::error::DeleteStackSetErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeregisterTypeError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeregisterTypeError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeregisterTypeErrorKind::CFNRegistryError(inner) => {
                    Error::CFNRegistryError(inner)
                }
                crate::error::DeregisterTypeErrorKind::TypeNotFoundError(inner) => {
                    Error::TypeNotFoundError(inner)
                }
                crate::error::DeregisterTypeErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeAccountLimitsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeAccountLimitsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeAccountLimitsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeChangeSetError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeChangeSetError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeChangeSetErrorKind::ChangeSetNotFoundError(inner) => {
                    Error::ChangeSetNotFoundError(inner)
                }
                crate::error::DescribeChangeSetErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeStackDriftDetectionStatusError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeStackDriftDetectionStatusError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeStackDriftDetectionStatusErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeStackEventsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeStackEventsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeStackEventsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeStackInstanceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeStackInstanceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeStackInstanceErrorKind::StackInstanceNotFoundError(inner) => {
                    Error::StackInstanceNotFoundError(inner)
                }
                crate::error::DescribeStackInstanceErrorKind::StackSetNotFoundError(inner) => {
                    Error::StackSetNotFoundError(inner)
                }
                crate::error::DescribeStackInstanceErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeStackResourceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeStackResourceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeStackResourceErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeStackResourceDriftsError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeStackResourceDriftsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeStackResourceDriftsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeStackResourcesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeStackResourcesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeStackResourcesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeStacksError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeStacksError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeStacksErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeStackSetError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeStackSetError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeStackSetErrorKind::StackSetNotFoundError(inner) => {
                    Error::StackSetNotFoundError(inner)
                }
                crate::error::DescribeStackSetErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeStackSetOperationError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeStackSetOperationError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeStackSetOperationErrorKind::OperationNotFoundError(inner) => {
                    Error::OperationNotFoundError(inner)
                }
                crate::error::DescribeStackSetOperationErrorKind::StackSetNotFoundError(inner) => {
                    Error::StackSetNotFoundError(inner)
                }
                crate::error::DescribeStackSetOperationErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeTypeError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeTypeError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeTypeErrorKind::CFNRegistryError(inner) => {
                    Error::CFNRegistryError(inner)
                }
                crate::error::DescribeTypeErrorKind::TypeNotFoundError(inner) => {
                    Error::TypeNotFoundError(inner)
                }
                crate::error::DescribeTypeErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeTypeRegistrationError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeTypeRegistrationError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeTypeRegistrationErrorKind::CFNRegistryError(inner) => {
                    Error::CFNRegistryError(inner)
                }
                crate::error::DescribeTypeRegistrationErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DetectStackDriftError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DetectStackDriftError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DetectStackDriftErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DetectStackResourceDriftError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DetectStackResourceDriftError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DetectStackResourceDriftErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DetectStackSetDriftError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DetectStackSetDriftError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DetectStackSetDriftErrorKind::InvalidOperationError(inner) => {
                    Error::InvalidOperationError(inner)
                }
                crate::error::DetectStackSetDriftErrorKind::OperationInProgressError(inner) => {
                    Error::OperationInProgressError(inner)
                }
                crate::error::DetectStackSetDriftErrorKind::StackSetNotFoundError(inner) => {
                    Error::StackSetNotFoundError(inner)
                }
                crate::error::DetectStackSetDriftErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::EstimateTemplateCostError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::EstimateTemplateCostError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::EstimateTemplateCostErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ExecuteChangeSetError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ExecuteChangeSetError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ExecuteChangeSetErrorKind::ChangeSetNotFoundError(inner) => {
                    Error::ChangeSetNotFoundError(inner)
                }
                crate::error::ExecuteChangeSetErrorKind::InsufficientCapabilitiesError(inner) => {
                    Error::InsufficientCapabilitiesError(inner)
                }
                crate::error::ExecuteChangeSetErrorKind::InvalidChangeSetStatusError(inner) => {
                    Error::InvalidChangeSetStatusError(inner)
                }
                crate::error::ExecuteChangeSetErrorKind::TokenAlreadyExistsError(inner) => {
                    Error::TokenAlreadyExistsError(inner)
                }
                crate::error::ExecuteChangeSetErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetStackPolicyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetStackPolicyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetStackPolicyErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetTemplateError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetTemplateError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetTemplateErrorKind::ChangeSetNotFoundError(inner) => {
                    Error::ChangeSetNotFoundError(inner)
                }
                crate::error::GetTemplateErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetTemplateSummaryError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetTemplateSummaryError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetTemplateSummaryErrorKind::StackSetNotFoundError(inner) => {
                    Error::StackSetNotFoundError(inner)
                }
                crate::error::GetTemplateSummaryErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListChangeSetsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListChangeSetsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListChangeSetsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListExportsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListExportsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListExportsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListImportsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListImportsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListImportsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListStackInstancesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListStackInstancesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListStackInstancesErrorKind::StackSetNotFoundError(inner) => {
                    Error::StackSetNotFoundError(inner)
                }
                crate::error::ListStackInstancesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListStackResourcesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListStackResourcesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListStackResourcesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListStacksError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListStacksError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListStacksErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListStackSetOperationResultsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::ListStackSetOperationResultsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListStackSetOperationResultsErrorKind::OperationNotFoundError(
                    inner,
                ) => Error::OperationNotFoundError(inner),
                crate::error::ListStackSetOperationResultsErrorKind::StackSetNotFoundError(
                    inner,
                ) => Error::StackSetNotFoundError(inner),
                crate::error::ListStackSetOperationResultsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListStackSetOperationsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListStackSetOperationsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListStackSetOperationsErrorKind::StackSetNotFoundError(inner) => {
                    Error::StackSetNotFoundError(inner)
                }
                crate::error::ListStackSetOperationsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListStackSetsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListStackSetsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListStackSetsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListTypeRegistrationsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListTypeRegistrationsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListTypeRegistrationsErrorKind::CFNRegistryError(inner) => {
                    Error::CFNRegistryError(inner)
                }
                crate::error::ListTypeRegistrationsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListTypesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListTypesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListTypesErrorKind::CFNRegistryError(inner) => {
                    Error::CFNRegistryError(inner)
                }
                crate::error::ListTypesErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListTypeVersionsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListTypeVersionsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListTypeVersionsErrorKind::CFNRegistryError(inner) => {
                    Error::CFNRegistryError(inner)
                }
                crate::error::ListTypeVersionsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::RecordHandlerProgressError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::RecordHandlerProgressError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::RecordHandlerProgressErrorKind::InvalidStateTransitionError(
                    inner,
                ) => Error::InvalidStateTransitionError(inner),
                crate::error::RecordHandlerProgressErrorKind::OperationStatusCheckFailedError(
                    inner,
                ) => Error::OperationStatusCheckFailedError(inner),
                crate::error::RecordHandlerProgressErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::RegisterTypeError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::RegisterTypeError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::RegisterTypeErrorKind::CFNRegistryError(inner) => {
                    Error::CFNRegistryError(inner)
                }
                crate::error::RegisterTypeErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::SetStackPolicyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::SetStackPolicyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::SetStackPolicyErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::SetTypeDefaultVersionError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::SetTypeDefaultVersionError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::SetTypeDefaultVersionErrorKind::CFNRegistryError(inner) => {
                    Error::CFNRegistryError(inner)
                }
                crate::error::SetTypeDefaultVersionErrorKind::TypeNotFoundError(inner) => {
                    Error::TypeNotFoundError(inner)
                }
                crate::error::SetTypeDefaultVersionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::SignalResourceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::SignalResourceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::SignalResourceErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::StopStackSetOperationError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::StopStackSetOperationError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::StopStackSetOperationErrorKind::InvalidOperationError(inner) => {
                    Error::InvalidOperationError(inner)
                }
                crate::error::StopStackSetOperationErrorKind::OperationNotFoundError(inner) => {
                    Error::OperationNotFoundError(inner)
                }
                crate::error::StopStackSetOperationErrorKind::StackSetNotFoundError(inner) => {
                    Error::StackSetNotFoundError(inner)
                }
                crate::error::StopStackSetOperationErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateStackError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateStackError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateStackErrorKind::InsufficientCapabilitiesError(inner) => {
                    Error::InsufficientCapabilitiesError(inner)
                }
                crate::error::UpdateStackErrorKind::TokenAlreadyExistsError(inner) => {
                    Error::TokenAlreadyExistsError(inner)
                }
                crate::error::UpdateStackErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateStackInstancesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateStackInstancesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateStackInstancesErrorKind::InvalidOperationError(inner) => {
                    Error::InvalidOperationError(inner)
                }
                crate::error::UpdateStackInstancesErrorKind::OperationIdAlreadyExistsError(
                    inner,
                ) => Error::OperationIdAlreadyExistsError(inner),
                crate::error::UpdateStackInstancesErrorKind::OperationInProgressError(inner) => {
                    Error::OperationInProgressError(inner)
                }
                crate::error::UpdateStackInstancesErrorKind::StackInstanceNotFoundError(inner) => {
                    Error::StackInstanceNotFoundError(inner)
                }
                crate::error::UpdateStackInstancesErrorKind::StackSetNotFoundError(inner) => {
                    Error::StackSetNotFoundError(inner)
                }
                crate::error::UpdateStackInstancesErrorKind::StaleRequestError(inner) => {
                    Error::StaleRequestError(inner)
                }
                crate::error::UpdateStackInstancesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateStackSetError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateStackSetError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateStackSetErrorKind::InvalidOperationError(inner) => {
                    Error::InvalidOperationError(inner)
                }
                crate::error::UpdateStackSetErrorKind::OperationIdAlreadyExistsError(inner) => {
                    Error::OperationIdAlreadyExistsError(inner)
                }
                crate::error::UpdateStackSetErrorKind::OperationInProgressError(inner) => {
                    Error::OperationInProgressError(inner)
                }
                crate::error::UpdateStackSetErrorKind::StackInstanceNotFoundError(inner) => {
                    Error::StackInstanceNotFoundError(inner)
                }
                crate::error::UpdateStackSetErrorKind::StackSetNotFoundError(inner) => {
                    Error::StackSetNotFoundError(inner)
                }
                crate::error::UpdateStackSetErrorKind::StaleRequestError(inner) => {
                    Error::StaleRequestError(inner)
                }
                crate::error::UpdateStackSetErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateTerminationProtectionError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::UpdateTerminationProtectionError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateTerminationProtectionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ValidateTemplateError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ValidateTemplateError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ValidateTemplateErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl std::error::Error for Error {}
