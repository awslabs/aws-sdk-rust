// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::import_stacks_to_stack_set::_import_stacks_to_stack_set_output::ImportStacksToStackSetOutputBuilder;

pub use crate::operation::import_stacks_to_stack_set::_import_stacks_to_stack_set_input::ImportStacksToStackSetInputBuilder;

/// Fluent builder constructing a request to `ImportStacksToStackSet`.
///
/// <p>Import existing stacks into a new stack sets. Use the stack import operation to import up to 10 stacks into a new stack set in the same account as the source stack or in a different administrator account and Region, by specifying the stack ID of the stack you intend to import.</p> <note>
/// <p> <code>ImportStacksToStackSet</code> is only supported by self-managed permissions.</p>
/// </note>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ImportStacksToStackSetFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner:
        crate::operation::import_stacks_to_stack_set::builders::ImportStacksToStackSetInputBuilder,
}
impl ImportStacksToStackSetFluentBuilder {
    /// Creates a new `ImportStacksToStackSet`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::import_stacks_to_stack_set::ImportStacksToStackSet,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::import_stacks_to_stack_set::ImportStacksToStackSetError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::import_stacks_to_stack_set::ImportStacksToStackSetOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::import_stacks_to_stack_set::ImportStacksToStackSetError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the stack set. The name must be unique in the Region where you create your stack set.</p>
    pub fn stack_set_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.stack_set_name(input.into());
        self
    }
    /// <p>The name of the stack set. The name must be unique in the Region where you create your stack set.</p>
    pub fn set_stack_set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_stack_set_name(input);
        self
    }
    /// Appends an item to `StackIds`.
    ///
    /// To override the contents of this collection use [`set_stack_ids`](Self::set_stack_ids).
    ///
    /// <p>The IDs of the stacks you are importing into a stack set. You import up to 10 stacks per stack set at a time.</p>
    /// <p>Specify either <code>StackIds</code> or <code>StackIdsUrl</code>.</p>
    pub fn stack_ids(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.stack_ids(input.into());
        self
    }
    /// <p>The IDs of the stacks you are importing into a stack set. You import up to 10 stacks per stack set at a time.</p>
    /// <p>Specify either <code>StackIds</code> or <code>StackIdsUrl</code>.</p>
    pub fn set_stack_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_stack_ids(input);
        self
    }
    /// <p>The Amazon S3 URL which contains list of stack ids to be inputted.</p>
    /// <p>Specify either <code>StackIds</code> or <code>StackIdsUrl</code>.</p>
    pub fn stack_ids_url(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.stack_ids_url(input.into());
        self
    }
    /// <p>The Amazon S3 URL which contains list of stack ids to be inputted.</p>
    /// <p>Specify either <code>StackIds</code> or <code>StackIdsUrl</code>.</p>
    pub fn set_stack_ids_url(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_stack_ids_url(input);
        self
    }
    /// Appends an item to `OrganizationalUnitIds`.
    ///
    /// To override the contents of this collection use [`set_organizational_unit_ids`](Self::set_organizational_unit_ids).
    ///
    /// <p>The list of OU ID's to which the stacks being imported has to be mapped as deployment target.</p>
    pub fn organizational_unit_ids(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.organizational_unit_ids(input.into());
        self
    }
    /// <p>The list of OU ID's to which the stacks being imported has to be mapped as deployment target.</p>
    pub fn set_organizational_unit_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_organizational_unit_ids(input);
        self
    }
    /// <p>The user-specified preferences for how CloudFormation performs a stack set operation.</p>
    /// <p>For more information about maximum concurrent accounts and failure tolerance, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-concepts.html#stackset-ops-options">Stack set operation options</a>.</p>
    pub fn operation_preferences(
        mut self,
        input: crate::types::StackSetOperationPreferences,
    ) -> Self {
        self.inner = self.inner.operation_preferences(input);
        self
    }
    /// <p>The user-specified preferences for how CloudFormation performs a stack set operation.</p>
    /// <p>For more information about maximum concurrent accounts and failure tolerance, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-concepts.html#stackset-ops-options">Stack set operation options</a>.</p>
    pub fn set_operation_preferences(
        mut self,
        input: std::option::Option<crate::types::StackSetOperationPreferences>,
    ) -> Self {
        self.inner = self.inner.set_operation_preferences(input);
        self
    }
    /// <p>A unique, user defined, identifier for the stack set operation.</p>
    pub fn operation_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.operation_id(input.into());
        self
    }
    /// <p>A unique, user defined, identifier for the stack set operation.</p>
    pub fn set_operation_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_operation_id(input);
        self
    }
    /// <p>By default, <code>SELF</code> is specified. Use <code>SELF</code> for stack sets with self-managed permissions.</p>
    /// <ul>
    /// <li> <p>If you are signed in to the management account, specify <code>SELF</code>.</p> </li>
    /// <li> <p>For service managed stack sets, specify <code>DELEGATED_ADMIN</code>.</p> </li>
    /// </ul>
    pub fn call_as(mut self, input: crate::types::CallAs) -> Self {
        self.inner = self.inner.call_as(input);
        self
    }
    /// <p>By default, <code>SELF</code> is specified. Use <code>SELF</code> for stack sets with self-managed permissions.</p>
    /// <ul>
    /// <li> <p>If you are signed in to the management account, specify <code>SELF</code>.</p> </li>
    /// <li> <p>For service managed stack sets, specify <code>DELEGATED_ADMIN</code>.</p> </li>
    /// </ul>
    pub fn set_call_as(mut self, input: std::option::Option<crate::types::CallAs>) -> Self {
        self.inner = self.inner.set_call_as(input);
        self
    }
}
