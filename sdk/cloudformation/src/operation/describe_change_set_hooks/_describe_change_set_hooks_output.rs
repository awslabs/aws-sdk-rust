// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeChangeSetHooksOutput {
    /// <p>The change set identifier (stack ID).</p>
    #[doc(hidden)]
    pub change_set_id: std::option::Option<std::string::String>,
    /// <p>The change set name.</p>
    #[doc(hidden)]
    pub change_set_name: std::option::Option<std::string::String>,
    /// <p>List of hook objects.</p>
    #[doc(hidden)]
    pub hooks: std::option::Option<std::vec::Vec<crate::types::ChangeSetHook>>,
    /// <p>Provides the status of the change set hook.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::ChangeSetHooksStatus>,
    /// <p>Pagination token, <code>null</code> or empty if no more results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The stack identifier (stack ID).</p>
    #[doc(hidden)]
    pub stack_id: std::option::Option<std::string::String>,
    /// <p>The stack name.</p>
    #[doc(hidden)]
    pub stack_name: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeChangeSetHooksOutput {
    /// <p>The change set identifier (stack ID).</p>
    pub fn change_set_id(&self) -> std::option::Option<&str> {
        self.change_set_id.as_deref()
    }
    /// <p>The change set name.</p>
    pub fn change_set_name(&self) -> std::option::Option<&str> {
        self.change_set_name.as_deref()
    }
    /// <p>List of hook objects.</p>
    pub fn hooks(&self) -> std::option::Option<&[crate::types::ChangeSetHook]> {
        self.hooks.as_deref()
    }
    /// <p>Provides the status of the change set hook.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::ChangeSetHooksStatus> {
        self.status.as_ref()
    }
    /// <p>Pagination token, <code>null</code> or empty if no more results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The stack identifier (stack ID).</p>
    pub fn stack_id(&self) -> std::option::Option<&str> {
        self.stack_id.as_deref()
    }
    /// <p>The stack name.</p>
    pub fn stack_name(&self) -> std::option::Option<&str> {
        self.stack_name.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeChangeSetHooksOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeChangeSetHooksOutput {
    /// Creates a new builder-style object to manufacture [`DescribeChangeSetHooksOutput`](crate::operation::describe_change_set_hooks::DescribeChangeSetHooksOutput).
    pub fn builder(
    ) -> crate::operation::describe_change_set_hooks::builders::DescribeChangeSetHooksOutputBuilder
    {
        crate::operation::describe_change_set_hooks::builders::DescribeChangeSetHooksOutputBuilder::default()
    }
}

/// A builder for [`DescribeChangeSetHooksOutput`](crate::operation::describe_change_set_hooks::DescribeChangeSetHooksOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeChangeSetHooksOutputBuilder {
    pub(crate) change_set_id: std::option::Option<std::string::String>,
    pub(crate) change_set_name: std::option::Option<std::string::String>,
    pub(crate) hooks: std::option::Option<std::vec::Vec<crate::types::ChangeSetHook>>,
    pub(crate) status: std::option::Option<crate::types::ChangeSetHooksStatus>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) stack_id: std::option::Option<std::string::String>,
    pub(crate) stack_name: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeChangeSetHooksOutputBuilder {
    /// <p>The change set identifier (stack ID).</p>
    pub fn change_set_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.change_set_id = Some(input.into());
        self
    }
    /// <p>The change set identifier (stack ID).</p>
    pub fn set_change_set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.change_set_id = input;
        self
    }
    /// <p>The change set name.</p>
    pub fn change_set_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.change_set_name = Some(input.into());
        self
    }
    /// <p>The change set name.</p>
    pub fn set_change_set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.change_set_name = input;
        self
    }
    /// Appends an item to `hooks`.
    ///
    /// To override the contents of this collection use [`set_hooks`](Self::set_hooks).
    ///
    /// <p>List of hook objects.</p>
    pub fn hooks(mut self, input: crate::types::ChangeSetHook) -> Self {
        let mut v = self.hooks.unwrap_or_default();
        v.push(input);
        self.hooks = Some(v);
        self
    }
    /// <p>List of hook objects.</p>
    pub fn set_hooks(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ChangeSetHook>>,
    ) -> Self {
        self.hooks = input;
        self
    }
    /// <p>Provides the status of the change set hook.</p>
    pub fn status(mut self, input: crate::types::ChangeSetHooksStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>Provides the status of the change set hook.</p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::ChangeSetHooksStatus>,
    ) -> Self {
        self.status = input;
        self
    }
    /// <p>Pagination token, <code>null</code> or empty if no more results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>Pagination token, <code>null</code> or empty if no more results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The stack identifier (stack ID).</p>
    pub fn stack_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.stack_id = Some(input.into());
        self
    }
    /// <p>The stack identifier (stack ID).</p>
    pub fn set_stack_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.stack_id = input;
        self
    }
    /// <p>The stack name.</p>
    pub fn stack_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.stack_name = Some(input.into());
        self
    }
    /// <p>The stack name.</p>
    pub fn set_stack_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.stack_name = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeChangeSetHooksOutput`](crate::operation::describe_change_set_hooks::DescribeChangeSetHooksOutput).
    pub fn build(
        self,
    ) -> crate::operation::describe_change_set_hooks::DescribeChangeSetHooksOutput {
        crate::operation::describe_change_set_hooks::DescribeChangeSetHooksOutput {
            change_set_id: self.change_set_id,
            change_set_name: self.change_set_name,
            hooks: self.hooks,
            status: self.status,
            next_token: self.next_token,
            stack_id: self.stack_id,
            stack_name: self.stack_name,
            _request_id: self._request_id,
        }
    }
}
