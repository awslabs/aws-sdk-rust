// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeChangeSetHooksInput {
    /// <p>The name or Amazon Resource Name (ARN) of the change set that you want to describe.</p>
    pub change_set_name: ::std::option::Option<::std::string::String>,
    /// <p>If you specified the name of a change set, specify the stack name or stack ID (ARN) of the change set you want to describe.</p>
    pub stack_name: ::std::option::Option<::std::string::String>,
    /// <p>A string, provided by the <code>DescribeChangeSetHooks</code> response output, that identifies the next page of information that you want to retrieve.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>If specified, lists only the hooks related to the specified <code>LogicalResourceId</code>.</p>
    pub logical_resource_id: ::std::option::Option<::std::string::String>,
}
impl DescribeChangeSetHooksInput {
    /// <p>The name or Amazon Resource Name (ARN) of the change set that you want to describe.</p>
    pub fn change_set_name(&self) -> ::std::option::Option<&str> {
        self.change_set_name.as_deref()
    }
    /// <p>If you specified the name of a change set, specify the stack name or stack ID (ARN) of the change set you want to describe.</p>
    pub fn stack_name(&self) -> ::std::option::Option<&str> {
        self.stack_name.as_deref()
    }
    /// <p>A string, provided by the <code>DescribeChangeSetHooks</code> response output, that identifies the next page of information that you want to retrieve.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>If specified, lists only the hooks related to the specified <code>LogicalResourceId</code>.</p>
    pub fn logical_resource_id(&self) -> ::std::option::Option<&str> {
        self.logical_resource_id.as_deref()
    }
}
impl DescribeChangeSetHooksInput {
    /// Creates a new builder-style object to manufacture [`DescribeChangeSetHooksInput`](crate::operation::describe_change_set_hooks::DescribeChangeSetHooksInput).
    pub fn builder() -> crate::operation::describe_change_set_hooks::builders::DescribeChangeSetHooksInputBuilder {
        crate::operation::describe_change_set_hooks::builders::DescribeChangeSetHooksInputBuilder::default()
    }
}

/// A builder for [`DescribeChangeSetHooksInput`](crate::operation::describe_change_set_hooks::DescribeChangeSetHooksInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeChangeSetHooksInputBuilder {
    pub(crate) change_set_name: ::std::option::Option<::std::string::String>,
    pub(crate) stack_name: ::std::option::Option<::std::string::String>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) logical_resource_id: ::std::option::Option<::std::string::String>,
}
impl DescribeChangeSetHooksInputBuilder {
    /// <p>The name or Amazon Resource Name (ARN) of the change set that you want to describe.</p>
    /// This field is required.
    pub fn change_set_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.change_set_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name or Amazon Resource Name (ARN) of the change set that you want to describe.</p>
    pub fn set_change_set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.change_set_name = input;
        self
    }
    /// <p>The name or Amazon Resource Name (ARN) of the change set that you want to describe.</p>
    pub fn get_change_set_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.change_set_name
    }
    /// <p>If you specified the name of a change set, specify the stack name or stack ID (ARN) of the change set you want to describe.</p>
    pub fn stack_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.stack_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If you specified the name of a change set, specify the stack name or stack ID (ARN) of the change set you want to describe.</p>
    pub fn set_stack_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.stack_name = input;
        self
    }
    /// <p>If you specified the name of a change set, specify the stack name or stack ID (ARN) of the change set you want to describe.</p>
    pub fn get_stack_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.stack_name
    }
    /// <p>A string, provided by the <code>DescribeChangeSetHooks</code> response output, that identifies the next page of information that you want to retrieve.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A string, provided by the <code>DescribeChangeSetHooks</code> response output, that identifies the next page of information that you want to retrieve.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>A string, provided by the <code>DescribeChangeSetHooks</code> response output, that identifies the next page of information that you want to retrieve.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>If specified, lists only the hooks related to the specified <code>LogicalResourceId</code>.</p>
    pub fn logical_resource_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.logical_resource_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If specified, lists only the hooks related to the specified <code>LogicalResourceId</code>.</p>
    pub fn set_logical_resource_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.logical_resource_id = input;
        self
    }
    /// <p>If specified, lists only the hooks related to the specified <code>LogicalResourceId</code>.</p>
    pub fn get_logical_resource_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.logical_resource_id
    }
    /// Consumes the builder and constructs a [`DescribeChangeSetHooksInput`](crate::operation::describe_change_set_hooks::DescribeChangeSetHooksInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::describe_change_set_hooks::DescribeChangeSetHooksInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::describe_change_set_hooks::DescribeChangeSetHooksInput {
            change_set_name: self.change_set_name,
            stack_name: self.stack_name,
            next_token: self.next_token,
            logical_resource_id: self.logical_resource_id,
        })
    }
}
