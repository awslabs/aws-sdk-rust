// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PublishTypeInput {
    /// <p>The type of the extension.</p>
    /// <p>Conditional: You must specify <code>Arn</code>, or <code>TypeName</code> and <code>Type</code>.</p>
    pub r#type: ::std::option::Option<crate::types::ThirdPartyType>,
    /// <p>The Amazon Resource Name (ARN) of the extension.</p>
    /// <p>Conditional: You must specify <code>Arn</code>, or <code>TypeName</code> and <code>Type</code>.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The name of the extension.</p>
    /// <p>Conditional: You must specify <code>Arn</code>, or <code>TypeName</code> and <code>Type</code>.</p>
    pub type_name: ::std::option::Option<::std::string::String>,
    /// <p>The version number to assign to this version of the extension.</p>
    /// <p>Use the following format, and adhere to semantic versioning when assigning a version number to your extension:</p>
    /// <p> <code>MAJOR.MINOR.PATCH</code> </p>
    /// <p>For more information, see <a href="https://semver.org/">Semantic Versioning 2.0.0</a>.</p>
    /// <p>If you don't specify a version number, CloudFormation increments the version number by one minor version release.</p>
    /// <p>You cannot specify a version number the first time you publish a type. CloudFormation automatically sets the first version number to be <code>1.0.0</code>.</p>
    pub public_version_number: ::std::option::Option<::std::string::String>,
}
impl PublishTypeInput {
    /// <p>The type of the extension.</p>
    /// <p>Conditional: You must specify <code>Arn</code>, or <code>TypeName</code> and <code>Type</code>.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::ThirdPartyType> {
        self.r#type.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of the extension.</p>
    /// <p>Conditional: You must specify <code>Arn</code>, or <code>TypeName</code> and <code>Type</code>.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The name of the extension.</p>
    /// <p>Conditional: You must specify <code>Arn</code>, or <code>TypeName</code> and <code>Type</code>.</p>
    pub fn type_name(&self) -> ::std::option::Option<&str> {
        self.type_name.as_deref()
    }
    /// <p>The version number to assign to this version of the extension.</p>
    /// <p>Use the following format, and adhere to semantic versioning when assigning a version number to your extension:</p>
    /// <p> <code>MAJOR.MINOR.PATCH</code> </p>
    /// <p>For more information, see <a href="https://semver.org/">Semantic Versioning 2.0.0</a>.</p>
    /// <p>If you don't specify a version number, CloudFormation increments the version number by one minor version release.</p>
    /// <p>You cannot specify a version number the first time you publish a type. CloudFormation automatically sets the first version number to be <code>1.0.0</code>.</p>
    pub fn public_version_number(&self) -> ::std::option::Option<&str> {
        self.public_version_number.as_deref()
    }
}
impl PublishTypeInput {
    /// Creates a new builder-style object to manufacture [`PublishTypeInput`](crate::operation::publish_type::PublishTypeInput).
    pub fn builder() -> crate::operation::publish_type::builders::PublishTypeInputBuilder {
        crate::operation::publish_type::builders::PublishTypeInputBuilder::default()
    }
}

/// A builder for [`PublishTypeInput`](crate::operation::publish_type::PublishTypeInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PublishTypeInputBuilder {
    pub(crate) r#type: ::std::option::Option<crate::types::ThirdPartyType>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) type_name: ::std::option::Option<::std::string::String>,
    pub(crate) public_version_number: ::std::option::Option<::std::string::String>,
}
impl PublishTypeInputBuilder {
    /// <p>The type of the extension.</p>
    /// <p>Conditional: You must specify <code>Arn</code>, or <code>TypeName</code> and <code>Type</code>.</p>
    pub fn r#type(mut self, input: crate::types::ThirdPartyType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the extension.</p>
    /// <p>Conditional: You must specify <code>Arn</code>, or <code>TypeName</code> and <code>Type</code>.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::ThirdPartyType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of the extension.</p>
    /// <p>Conditional: You must specify <code>Arn</code>, or <code>TypeName</code> and <code>Type</code>.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::ThirdPartyType> {
        &self.r#type
    }
    /// <p>The Amazon Resource Name (ARN) of the extension.</p>
    /// <p>Conditional: You must specify <code>Arn</code>, or <code>TypeName</code> and <code>Type</code>.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the extension.</p>
    /// <p>Conditional: You must specify <code>Arn</code>, or <code>TypeName</code> and <code>Type</code>.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the extension.</p>
    /// <p>Conditional: You must specify <code>Arn</code>, or <code>TypeName</code> and <code>Type</code>.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The name of the extension.</p>
    /// <p>Conditional: You must specify <code>Arn</code>, or <code>TypeName</code> and <code>Type</code>.</p>
    pub fn type_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.type_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the extension.</p>
    /// <p>Conditional: You must specify <code>Arn</code>, or <code>TypeName</code> and <code>Type</code>.</p>
    pub fn set_type_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.type_name = input;
        self
    }
    /// <p>The name of the extension.</p>
    /// <p>Conditional: You must specify <code>Arn</code>, or <code>TypeName</code> and <code>Type</code>.</p>
    pub fn get_type_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.type_name
    }
    /// <p>The version number to assign to this version of the extension.</p>
    /// <p>Use the following format, and adhere to semantic versioning when assigning a version number to your extension:</p>
    /// <p> <code>MAJOR.MINOR.PATCH</code> </p>
    /// <p>For more information, see <a href="https://semver.org/">Semantic Versioning 2.0.0</a>.</p>
    /// <p>If you don't specify a version number, CloudFormation increments the version number by one minor version release.</p>
    /// <p>You cannot specify a version number the first time you publish a type. CloudFormation automatically sets the first version number to be <code>1.0.0</code>.</p>
    pub fn public_version_number(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.public_version_number = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version number to assign to this version of the extension.</p>
    /// <p>Use the following format, and adhere to semantic versioning when assigning a version number to your extension:</p>
    /// <p> <code>MAJOR.MINOR.PATCH</code> </p>
    /// <p>For more information, see <a href="https://semver.org/">Semantic Versioning 2.0.0</a>.</p>
    /// <p>If you don't specify a version number, CloudFormation increments the version number by one minor version release.</p>
    /// <p>You cannot specify a version number the first time you publish a type. CloudFormation automatically sets the first version number to be <code>1.0.0</code>.</p>
    pub fn set_public_version_number(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.public_version_number = input;
        self
    }
    /// <p>The version number to assign to this version of the extension.</p>
    /// <p>Use the following format, and adhere to semantic versioning when assigning a version number to your extension:</p>
    /// <p> <code>MAJOR.MINOR.PATCH</code> </p>
    /// <p>For more information, see <a href="https://semver.org/">Semantic Versioning 2.0.0</a>.</p>
    /// <p>If you don't specify a version number, CloudFormation increments the version number by one minor version release.</p>
    /// <p>You cannot specify a version number the first time you publish a type. CloudFormation automatically sets the first version number to be <code>1.0.0</code>.</p>
    pub fn get_public_version_number(&self) -> &::std::option::Option<::std::string::String> {
        &self.public_version_number
    }
    /// Consumes the builder and constructs a [`PublishTypeInput`](crate::operation::publish_type::PublishTypeInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::publish_type::PublishTypeInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::publish_type::PublishTypeInput {
            r#type: self.r#type,
            arn: self.arn,
            type_name: self.type_name,
            public_version_number: self.public_version_number,
        })
    }
}
