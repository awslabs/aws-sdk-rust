// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The input for a <code>GetTemplate</code> action.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetTemplateInput {
    /// <p>The name or the unique stack ID that's associated with the stack, which aren't always interchangeable:</p>
    /// <ul>
    /// <li> <p>Running stacks: You can specify either the stack's name or its unique stack ID.</p> </li>
    /// <li> <p>Deleted stacks: You must specify the unique stack ID.</p> </li>
    /// </ul>
    /// <p>Default: There is no default value.</p>
    #[doc(hidden)]
    pub stack_name: std::option::Option<std::string::String>,
    /// <p>The name or Amazon Resource Name (ARN) of a change set for which CloudFormation returns the associated template. If you specify a name, you must also specify the <code>StackName</code>.</p>
    #[doc(hidden)]
    pub change_set_name: std::option::Option<std::string::String>,
    /// <p>For templates that include transforms, the stage of the template that CloudFormation returns. To get the user-submitted template, specify <code>Original</code>. To get the template after CloudFormation has processed all transforms, specify <code>Processed</code>.</p>
    /// <p>If the template doesn't include transforms, <code>Original</code> and <code>Processed</code> return the same template. By default, CloudFormation specifies <code>Processed</code>.</p>
    #[doc(hidden)]
    pub template_stage: std::option::Option<crate::types::TemplateStage>,
}
impl GetTemplateInput {
    /// <p>The name or the unique stack ID that's associated with the stack, which aren't always interchangeable:</p>
    /// <ul>
    /// <li> <p>Running stacks: You can specify either the stack's name or its unique stack ID.</p> </li>
    /// <li> <p>Deleted stacks: You must specify the unique stack ID.</p> </li>
    /// </ul>
    /// <p>Default: There is no default value.</p>
    pub fn stack_name(&self) -> std::option::Option<&str> {
        self.stack_name.as_deref()
    }
    /// <p>The name or Amazon Resource Name (ARN) of a change set for which CloudFormation returns the associated template. If you specify a name, you must also specify the <code>StackName</code>.</p>
    pub fn change_set_name(&self) -> std::option::Option<&str> {
        self.change_set_name.as_deref()
    }
    /// <p>For templates that include transforms, the stage of the template that CloudFormation returns. To get the user-submitted template, specify <code>Original</code>. To get the template after CloudFormation has processed all transforms, specify <code>Processed</code>.</p>
    /// <p>If the template doesn't include transforms, <code>Original</code> and <code>Processed</code> return the same template. By default, CloudFormation specifies <code>Processed</code>.</p>
    pub fn template_stage(&self) -> std::option::Option<&crate::types::TemplateStage> {
        self.template_stage.as_ref()
    }
}
impl GetTemplateInput {
    /// Creates a new builder-style object to manufacture [`GetTemplateInput`](crate::operation::get_template::GetTemplateInput).
    pub fn builder() -> crate::operation::get_template::builders::GetTemplateInputBuilder {
        crate::operation::get_template::builders::GetTemplateInputBuilder::default()
    }
}

/// A builder for [`GetTemplateInput`](crate::operation::get_template::GetTemplateInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetTemplateInputBuilder {
    pub(crate) stack_name: std::option::Option<std::string::String>,
    pub(crate) change_set_name: std::option::Option<std::string::String>,
    pub(crate) template_stage: std::option::Option<crate::types::TemplateStage>,
}
impl GetTemplateInputBuilder {
    /// <p>The name or the unique stack ID that's associated with the stack, which aren't always interchangeable:</p>
    /// <ul>
    /// <li> <p>Running stacks: You can specify either the stack's name or its unique stack ID.</p> </li>
    /// <li> <p>Deleted stacks: You must specify the unique stack ID.</p> </li>
    /// </ul>
    /// <p>Default: There is no default value.</p>
    pub fn stack_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.stack_name = Some(input.into());
        self
    }
    /// <p>The name or the unique stack ID that's associated with the stack, which aren't always interchangeable:</p>
    /// <ul>
    /// <li> <p>Running stacks: You can specify either the stack's name or its unique stack ID.</p> </li>
    /// <li> <p>Deleted stacks: You must specify the unique stack ID.</p> </li>
    /// </ul>
    /// <p>Default: There is no default value.</p>
    pub fn set_stack_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.stack_name = input;
        self
    }
    /// <p>The name or Amazon Resource Name (ARN) of a change set for which CloudFormation returns the associated template. If you specify a name, you must also specify the <code>StackName</code>.</p>
    pub fn change_set_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.change_set_name = Some(input.into());
        self
    }
    /// <p>The name or Amazon Resource Name (ARN) of a change set for which CloudFormation returns the associated template. If you specify a name, you must also specify the <code>StackName</code>.</p>
    pub fn set_change_set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.change_set_name = input;
        self
    }
    /// <p>For templates that include transforms, the stage of the template that CloudFormation returns. To get the user-submitted template, specify <code>Original</code>. To get the template after CloudFormation has processed all transforms, specify <code>Processed</code>.</p>
    /// <p>If the template doesn't include transforms, <code>Original</code> and <code>Processed</code> return the same template. By default, CloudFormation specifies <code>Processed</code>.</p>
    pub fn template_stage(mut self, input: crate::types::TemplateStage) -> Self {
        self.template_stage = Some(input);
        self
    }
    /// <p>For templates that include transforms, the stage of the template that CloudFormation returns. To get the user-submitted template, specify <code>Original</code>. To get the template after CloudFormation has processed all transforms, specify <code>Processed</code>.</p>
    /// <p>If the template doesn't include transforms, <code>Original</code> and <code>Processed</code> return the same template. By default, CloudFormation specifies <code>Processed</code>.</p>
    pub fn set_template_stage(
        mut self,
        input: std::option::Option<crate::types::TemplateStage>,
    ) -> Self {
        self.template_stage = input;
        self
    }
    /// Consumes the builder and constructs a [`GetTemplateInput`](crate::operation::get_template::GetTemplateInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::get_template::GetTemplateInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::get_template::GetTemplateInput {
            stack_name: self.stack_name,
            change_set_name: self.change_set_name,
            template_stage: self.template_stage,
        })
    }
}
