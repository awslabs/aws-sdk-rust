// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DetectStackResourceDriftInput {
    /// <p>The name of the stack to which the resource belongs.</p>
    #[doc(hidden)]
    pub stack_name: std::option::Option<std::string::String>,
    /// <p>The logical name of the resource for which to return drift information.</p>
    #[doc(hidden)]
    pub logical_resource_id: std::option::Option<std::string::String>,
}
impl DetectStackResourceDriftInput {
    /// <p>The name of the stack to which the resource belongs.</p>
    pub fn stack_name(&self) -> std::option::Option<&str> {
        self.stack_name.as_deref()
    }
    /// <p>The logical name of the resource for which to return drift information.</p>
    pub fn logical_resource_id(&self) -> std::option::Option<&str> {
        self.logical_resource_id.as_deref()
    }
}
impl DetectStackResourceDriftInput {
    /// Creates a new builder-style object to manufacture [`DetectStackResourceDriftInput`](crate::operation::detect_stack_resource_drift::DetectStackResourceDriftInput).
    pub fn builder(
    ) -> crate::operation::detect_stack_resource_drift::builders::DetectStackResourceDriftInputBuilder
    {
        crate::operation::detect_stack_resource_drift::builders::DetectStackResourceDriftInputBuilder::default()
    }
}

/// A builder for [`DetectStackResourceDriftInput`](crate::operation::detect_stack_resource_drift::DetectStackResourceDriftInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DetectStackResourceDriftInputBuilder {
    pub(crate) stack_name: std::option::Option<std::string::String>,
    pub(crate) logical_resource_id: std::option::Option<std::string::String>,
}
impl DetectStackResourceDriftInputBuilder {
    /// <p>The name of the stack to which the resource belongs.</p>
    pub fn stack_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.stack_name = Some(input.into());
        self
    }
    /// <p>The name of the stack to which the resource belongs.</p>
    pub fn set_stack_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.stack_name = input;
        self
    }
    /// <p>The logical name of the resource for which to return drift information.</p>
    pub fn logical_resource_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.logical_resource_id = Some(input.into());
        self
    }
    /// <p>The logical name of the resource for which to return drift information.</p>
    pub fn set_logical_resource_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.logical_resource_id = input;
        self
    }
    /// Consumes the builder and constructs a [`DetectStackResourceDriftInput`](crate::operation::detect_stack_resource_drift::DetectStackResourceDriftInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::detect_stack_resource_drift::DetectStackResourceDriftInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::detect_stack_resource_drift::DetectStackResourceDriftInput {
                stack_name: self.stack_name,
                logical_resource_id: self.logical_resource_id,
            },
        )
    }
}
