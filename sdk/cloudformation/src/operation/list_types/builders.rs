// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::list_types::_list_types_output::ListTypesOutputBuilder;

pub use crate::operation::list_types::_list_types_input::ListTypesInputBuilder;

/// Fluent builder constructing a request to `ListTypes`.
///
/// <p>Returns summary information about extension that have been registered with CloudFormation.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListTypesFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::list_types::builders::ListTypesInputBuilder,
}
impl ListTypesFluentBuilder {
    /// Creates a new `ListTypes`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::list_types::ListTypes,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::operation::list_types::ListTypesError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::list_types::ListTypesOutput,
        aws_smithy_http::result::SdkError<crate::operation::list_types::ListTypesError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::list_types::paginator::ListTypesPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::operation::list_types::paginator::ListTypesPaginator {
        crate::operation::list_types::paginator::ListTypesPaginator::new(self.handle, self.inner)
    }
    /// <p>The scope at which the extensions are visible and usable in CloudFormation operations.</p>
    /// <p>Valid values include:</p>
    /// <ul>
    /// <li> <p> <code>PRIVATE</code>: Extensions that are visible and usable within this account and region. This includes:</p>
    /// <ul>
    /// <li> <p>Private extensions you have registered in this account and region.</p> </li>
    /// <li> <p>Public extensions that you have activated in this account and region.</p> </li>
    /// </ul> </li>
    /// <li> <p> <code>PUBLIC</code>: Extensions that are publicly visible and available to be activated within any Amazon Web Services account. This includes extensions from Amazon Web Services, in addition to third-party publishers.</p> </li>
    /// </ul>
    /// <p>The default is <code>PRIVATE</code>.</p>
    pub fn visibility(mut self, input: crate::types::Visibility) -> Self {
        self.inner = self.inner.visibility(input);
        self
    }
    /// <p>The scope at which the extensions are visible and usable in CloudFormation operations.</p>
    /// <p>Valid values include:</p>
    /// <ul>
    /// <li> <p> <code>PRIVATE</code>: Extensions that are visible and usable within this account and region. This includes:</p>
    /// <ul>
    /// <li> <p>Private extensions you have registered in this account and region.</p> </li>
    /// <li> <p>Public extensions that you have activated in this account and region.</p> </li>
    /// </ul> </li>
    /// <li> <p> <code>PUBLIC</code>: Extensions that are publicly visible and available to be activated within any Amazon Web Services account. This includes extensions from Amazon Web Services, in addition to third-party publishers.</p> </li>
    /// </ul>
    /// <p>The default is <code>PRIVATE</code>.</p>
    pub fn set_visibility(mut self, input: std::option::Option<crate::types::Visibility>) -> Self {
        self.inner = self.inner.set_visibility(input);
        self
    }
    /// <p>For resource types, the provisioning behavior of the resource type. CloudFormation determines the provisioning type during registration, based on the types of handlers in the schema handler package submitted.</p>
    /// <p>Valid values include:</p>
    /// <ul>
    /// <li> <p> <code>FULLY_MUTABLE</code>: The resource type includes an update handler to process updates to the type during stack update operations.</p> </li>
    /// <li> <p> <code>IMMUTABLE</code>: The resource type doesn't include an update handler, so the type can't be updated and must instead be replaced during stack update operations.</p> </li>
    /// <li> <p> <code>NON_PROVISIONABLE</code>: The resource type doesn't include create, read, and delete handlers, and therefore can't actually be provisioned.</p> </li>
    /// </ul>
    /// <p>The default is <code>FULLY_MUTABLE</code>.</p>
    pub fn provisioning_type(mut self, input: crate::types::ProvisioningType) -> Self {
        self.inner = self.inner.provisioning_type(input);
        self
    }
    /// <p>For resource types, the provisioning behavior of the resource type. CloudFormation determines the provisioning type during registration, based on the types of handlers in the schema handler package submitted.</p>
    /// <p>Valid values include:</p>
    /// <ul>
    /// <li> <p> <code>FULLY_MUTABLE</code>: The resource type includes an update handler to process updates to the type during stack update operations.</p> </li>
    /// <li> <p> <code>IMMUTABLE</code>: The resource type doesn't include an update handler, so the type can't be updated and must instead be replaced during stack update operations.</p> </li>
    /// <li> <p> <code>NON_PROVISIONABLE</code>: The resource type doesn't include create, read, and delete handlers, and therefore can't actually be provisioned.</p> </li>
    /// </ul>
    /// <p>The default is <code>FULLY_MUTABLE</code>.</p>
    pub fn set_provisioning_type(
        mut self,
        input: std::option::Option<crate::types::ProvisioningType>,
    ) -> Self {
        self.inner = self.inner.set_provisioning_type(input);
        self
    }
    /// <p>The deprecation status of the extension that you want to get summary information about.</p>
    /// <p>Valid values include:</p>
    /// <ul>
    /// <li> <p> <code>LIVE</code>: The extension is registered for use in CloudFormation operations.</p> </li>
    /// <li> <p> <code>DEPRECATED</code>: The extension has been deregistered and can no longer be used in CloudFormation operations.</p> </li>
    /// </ul>
    pub fn deprecated_status(mut self, input: crate::types::DeprecatedStatus) -> Self {
        self.inner = self.inner.deprecated_status(input);
        self
    }
    /// <p>The deprecation status of the extension that you want to get summary information about.</p>
    /// <p>Valid values include:</p>
    /// <ul>
    /// <li> <p> <code>LIVE</code>: The extension is registered for use in CloudFormation operations.</p> </li>
    /// <li> <p> <code>DEPRECATED</code>: The extension has been deregistered and can no longer be used in CloudFormation operations.</p> </li>
    /// </ul>
    pub fn set_deprecated_status(
        mut self,
        input: std::option::Option<crate::types::DeprecatedStatus>,
    ) -> Self {
        self.inner = self.inner.set_deprecated_status(input);
        self
    }
    /// <p>The type of extension.</p>
    pub fn r#type(mut self, input: crate::types::RegistryType) -> Self {
        self.inner = self.inner.r#type(input);
        self
    }
    /// <p>The type of extension.</p>
    pub fn set_type(mut self, input: std::option::Option<crate::types::RegistryType>) -> Self {
        self.inner = self.inner.set_type(input);
        self
    }
    /// <p>Filter criteria to use in determining which extensions to return.</p>
    /// <p>Filters must be compatible with <code>Visibility</code> to return valid results. For example, specifying <code>AWS_TYPES</code> for <code>Category</code> and <code>PRIVATE</code> for <code>Visibility</code> returns an empty list of types, but specifying <code>PUBLIC</code> for <code>Visibility</code> returns the desired list.</p>
    pub fn filters(mut self, input: crate::types::TypeFilters) -> Self {
        self.inner = self.inner.filters(input);
        self
    }
    /// <p>Filter criteria to use in determining which extensions to return.</p>
    /// <p>Filters must be compatible with <code>Visibility</code> to return valid results. For example, specifying <code>AWS_TYPES</code> for <code>Category</code> and <code>PRIVATE</code> for <code>Visibility</code> returns an empty list of types, but specifying <code>PUBLIC</code> for <code>Visibility</code> returns the desired list.</p>
    pub fn set_filters(mut self, input: std::option::Option<crate::types::TypeFilters>) -> Self {
        self.inner = self.inner.set_filters(input);
        self
    }
    /// <p>The maximum number of results to be returned with a single call. If the number of available results exceeds this maximum, the response includes a <code>NextToken</code> value that you can assign to the <code>NextToken</code> request parameter to get the next set of results.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of results to be returned with a single call. If the number of available results exceeds this maximum, the response includes a <code>NextToken</code> value that you can assign to the <code>NextToken</code> request parameter to get the next set of results.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>If the previous paginated request didn't return all the remaining results, the response object's <code>NextToken</code> parameter value is set to a token. To retrieve the next set of results, call this action again and assign that token to the request object's <code>NextToken</code> parameter. If there are no remaining results, the previous response object's <code>NextToken</code> parameter is set to <code>null</code>.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>If the previous paginated request didn't return all the remaining results, the response object's <code>NextToken</code> parameter value is set to a token. To retrieve the next set of results, call this action again and assign that token to the request object's <code>NextToken</code> parameter. If there are no remaining results, the previous response object's <code>NextToken</code> parameter is set to <code>null</code>.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
}
