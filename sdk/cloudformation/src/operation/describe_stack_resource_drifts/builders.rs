// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::describe_stack_resource_drifts::_describe_stack_resource_drifts_output::DescribeStackResourceDriftsOutputBuilder;

pub use crate::operation::describe_stack_resource_drifts::_describe_stack_resource_drifts_input::DescribeStackResourceDriftsInputBuilder;

impl crate::operation::describe_stack_resource_drifts::builders::DescribeStackResourceDriftsInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::describe_stack_resource_drifts::DescribeStackResourceDriftsOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_stack_resource_drifts::DescribeStackResourceDriftsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.describe_stack_resource_drifts();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `DescribeStackResourceDrifts`.
///
/// <p>Returns drift information for the resources that have been checked for drift in the specified stack. This includes actual and expected configuration values for resources where CloudFormation detects configuration drift.</p>
/// <p>For a given stack, there will be one <code>StackResourceDrift</code> for each stack resource that has been checked for drift. Resources that haven't yet been checked for drift aren't included. Resources that don't currently support drift detection aren't checked, and so not included. For a list of resources that support drift detection, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift-resource-list.html">Resources that Support Drift Detection</a>.</p>
/// <p>Use <code>DetectStackResourceDrift</code> to detect drift on individual resources, or <code>DetectStackDrift</code> to detect drift on all supported resources for a given stack.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct DescribeStackResourceDriftsFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::describe_stack_resource_drifts::builders::DescribeStackResourceDriftsInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::describe_stack_resource_drifts::DescribeStackResourceDriftsOutput,
        crate::operation::describe_stack_resource_drifts::DescribeStackResourceDriftsError,
    > for DescribeStackResourceDriftsFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::describe_stack_resource_drifts::DescribeStackResourceDriftsOutput,
            crate::operation::describe_stack_resource_drifts::DescribeStackResourceDriftsError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl DescribeStackResourceDriftsFluentBuilder {
    /// Creates a new `DescribeStackResourceDrifts`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the DescribeStackResourceDrifts as a reference.
    pub fn as_input(&self) -> &crate::operation::describe_stack_resource_drifts::builders::DescribeStackResourceDriftsInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::describe_stack_resource_drifts::DescribeStackResourceDriftsOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_stack_resource_drifts::DescribeStackResourceDriftsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::describe_stack_resource_drifts::DescribeStackResourceDrifts::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::describe_stack_resource_drifts::DescribeStackResourceDrifts::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::describe_stack_resource_drifts::DescribeStackResourceDriftsOutput,
        crate::operation::describe_stack_resource_drifts::DescribeStackResourceDriftsError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::describe_stack_resource_drifts::paginator::DescribeStackResourceDriftsPaginator::send) which returns a [`PaginationStream`](aws_smithy_async::future::pagination_stream::PaginationStream).
    pub fn into_paginator(self) -> crate::operation::describe_stack_resource_drifts::paginator::DescribeStackResourceDriftsPaginator {
        crate::operation::describe_stack_resource_drifts::paginator::DescribeStackResourceDriftsPaginator::new(self.handle, self.inner)
    }
    /// <p>The name of the stack for which you want drift information.</p>
    pub fn stack_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.stack_name(input.into());
        self
    }
    /// <p>The name of the stack for which you want drift information.</p>
    pub fn set_stack_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_stack_name(input);
        self
    }
    /// <p>The name of the stack for which you want drift information.</p>
    pub fn get_stack_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_stack_name()
    }
    ///
    /// Appends an item to `StackResourceDriftStatusFilters`.
    ///
    /// To override the contents of this collection use [`set_stack_resource_drift_status_filters`](Self::set_stack_resource_drift_status_filters).
    ///
    /// <p>The resource drift status values to use as filters for the resource drift results returned.</p>
    /// <ul>
    /// <li>
    /// <p><code>DELETED</code>: The resource differs from its expected template configuration in that the resource has been deleted.</p></li>
    /// <li>
    /// <p><code>MODIFIED</code>: One or more resource properties differ from their expected template values.</p></li>
    /// <li>
    /// <p><code>IN_SYNC</code>: The resource's actual configuration matches its expected template configuration.</p></li>
    /// <li>
    /// <p><code>NOT_CHECKED</code>: CloudFormation doesn't currently return this value.</p></li>
    /// </ul>
    pub fn stack_resource_drift_status_filters(mut self, input: crate::types::StackResourceDriftStatus) -> Self {
        self.inner = self.inner.stack_resource_drift_status_filters(input);
        self
    }
    /// <p>The resource drift status values to use as filters for the resource drift results returned.</p>
    /// <ul>
    /// <li>
    /// <p><code>DELETED</code>: The resource differs from its expected template configuration in that the resource has been deleted.</p></li>
    /// <li>
    /// <p><code>MODIFIED</code>: One or more resource properties differ from their expected template values.</p></li>
    /// <li>
    /// <p><code>IN_SYNC</code>: The resource's actual configuration matches its expected template configuration.</p></li>
    /// <li>
    /// <p><code>NOT_CHECKED</code>: CloudFormation doesn't currently return this value.</p></li>
    /// </ul>
    pub fn set_stack_resource_drift_status_filters(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::StackResourceDriftStatus>>,
    ) -> Self {
        self.inner = self.inner.set_stack_resource_drift_status_filters(input);
        self
    }
    /// <p>The resource drift status values to use as filters for the resource drift results returned.</p>
    /// <ul>
    /// <li>
    /// <p><code>DELETED</code>: The resource differs from its expected template configuration in that the resource has been deleted.</p></li>
    /// <li>
    /// <p><code>MODIFIED</code>: One or more resource properties differ from their expected template values.</p></li>
    /// <li>
    /// <p><code>IN_SYNC</code>: The resource's actual configuration matches its expected template configuration.</p></li>
    /// <li>
    /// <p><code>NOT_CHECKED</code>: CloudFormation doesn't currently return this value.</p></li>
    /// </ul>
    pub fn get_stack_resource_drift_status_filters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StackResourceDriftStatus>> {
        self.inner.get_stack_resource_drift_status_filters()
    }
    /// <p>A string that identifies the next page of stack resource drift results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>A string that identifies the next page of stack resource drift results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>A string that identifies the next page of stack resource drift results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_next_token()
    }
    /// <p>The maximum number of results to be returned with a single call. If the number of available results exceeds this maximum, the response includes a <code>NextToken</code> value that you can assign to the <code>NextToken</code> request parameter to get the next set of results.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of results to be returned with a single call. If the number of available results exceeds this maximum, the response includes a <code>NextToken</code> value that you can assign to the <code>NextToken</code> request parameter to get the next set of results.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>The maximum number of results to be returned with a single call. If the number of available results exceeds this maximum, the response includes a <code>NextToken</code> value that you can assign to the <code>NextToken</code> request parameter to get the next set of results.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        self.inner.get_max_results()
    }
}
