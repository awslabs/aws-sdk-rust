// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::execute_change_set::_execute_change_set_output::ExecuteChangeSetOutputBuilder;

pub use crate::operation::execute_change_set::_execute_change_set_input::ExecuteChangeSetInputBuilder;

/// Fluent builder constructing a request to `ExecuteChangeSet`.
///
/// <p>Updates a stack using the input information that was provided when the specified change set was created. After the call successfully completes, CloudFormation starts updating the stack. Use the <code>DescribeStacks</code> action to view the status of the update.</p>
/// <p>When you execute a change set, CloudFormation deletes all other change sets associated with the stack because they aren't valid for the updated stack.</p>
/// <p>If a stack policy is associated with the stack, CloudFormation enforces the policy during the update. You can't specify a temporary stack policy that overrides the current policy.</p>
/// <p>To create a change set for the entire stack hierarchy, <code>IncludeNestedStacks</code> must have been set to <code>True</code>.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ExecuteChangeSetFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::execute_change_set::builders::ExecuteChangeSetInputBuilder,
}
impl ExecuteChangeSetFluentBuilder {
    /// Creates a new `ExecuteChangeSet`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::execute_change_set::ExecuteChangeSet,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::execute_change_set::ExecuteChangeSetError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::execute_change_set::ExecuteChangeSetOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::execute_change_set::ExecuteChangeSetError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name or Amazon Resource Name (ARN) of the change set that you want use to update the specified stack.</p>
    pub fn change_set_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.change_set_name(input.into());
        self
    }
    /// <p>The name or Amazon Resource Name (ARN) of the change set that you want use to update the specified stack.</p>
    pub fn set_change_set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_change_set_name(input);
        self
    }
    /// <p>If you specified the name of a change set, specify the stack name or Amazon Resource Name (ARN) that's associated with the change set you want to execute.</p>
    pub fn stack_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.stack_name(input.into());
        self
    }
    /// <p>If you specified the name of a change set, specify the stack name or Amazon Resource Name (ARN) that's associated with the change set you want to execute.</p>
    pub fn set_stack_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_stack_name(input);
        self
    }
    /// <p>A unique identifier for this <code>ExecuteChangeSet</code> request. Specify this token if you plan to retry requests so that CloudFormation knows that you're not attempting to execute a change set to update a stack with the same name. You might retry <code>ExecuteChangeSet</code> requests to ensure that CloudFormation successfully received them.</p>
    pub fn client_request_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.client_request_token(input.into());
        self
    }
    /// <p>A unique identifier for this <code>ExecuteChangeSet</code> request. Specify this token if you plan to retry requests so that CloudFormation knows that you're not attempting to execute a change set to update a stack with the same name. You might retry <code>ExecuteChangeSet</code> requests to ensure that CloudFormation successfully received them.</p>
    pub fn set_client_request_token(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_client_request_token(input);
        self
    }
    /// <p>Preserves the state of previously provisioned resources when an operation fails.</p>
    /// <p>Default: <code>True</code> </p>
    pub fn disable_rollback(mut self, input: bool) -> Self {
        self.inner = self.inner.disable_rollback(input);
        self
    }
    /// <p>Preserves the state of previously provisioned resources when an operation fails.</p>
    /// <p>Default: <code>True</code> </p>
    pub fn set_disable_rollback(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_disable_rollback(input);
        self
    }
}
