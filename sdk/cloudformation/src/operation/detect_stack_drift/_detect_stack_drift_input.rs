// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DetectStackDriftInput {
    /// <p>The name of the stack for which you want to detect drift.</p>
    pub stack_name: ::std::option::Option<::std::string::String>,
    /// <p>The logical names of any resources you want to use as filters.</p>
    pub logical_resource_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl DetectStackDriftInput {
    /// <p>The name of the stack for which you want to detect drift.</p>
    pub fn stack_name(&self) -> ::std::option::Option<&str> {
        self.stack_name.as_deref()
    }
    /// <p>The logical names of any resources you want to use as filters.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.logical_resource_ids.is_none()`.
    pub fn logical_resource_ids(&self) -> &[::std::string::String] {
        self.logical_resource_ids.as_deref().unwrap_or_default()
    }
}
impl DetectStackDriftInput {
    /// Creates a new builder-style object to manufacture [`DetectStackDriftInput`](crate::operation::detect_stack_drift::DetectStackDriftInput).
    pub fn builder() -> crate::operation::detect_stack_drift::builders::DetectStackDriftInputBuilder {
        crate::operation::detect_stack_drift::builders::DetectStackDriftInputBuilder::default()
    }
}

/// A builder for [`DetectStackDriftInput`](crate::operation::detect_stack_drift::DetectStackDriftInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DetectStackDriftInputBuilder {
    pub(crate) stack_name: ::std::option::Option<::std::string::String>,
    pub(crate) logical_resource_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl DetectStackDriftInputBuilder {
    /// <p>The name of the stack for which you want to detect drift.</p>
    /// This field is required.
    pub fn stack_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.stack_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the stack for which you want to detect drift.</p>
    pub fn set_stack_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.stack_name = input;
        self
    }
    /// <p>The name of the stack for which you want to detect drift.</p>
    pub fn get_stack_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.stack_name
    }
    /// Appends an item to `logical_resource_ids`.
    ///
    /// To override the contents of this collection use [`set_logical_resource_ids`](Self::set_logical_resource_ids).
    ///
    /// <p>The logical names of any resources you want to use as filters.</p>
    pub fn logical_resource_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.logical_resource_ids.unwrap_or_default();
        v.push(input.into());
        self.logical_resource_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>The logical names of any resources you want to use as filters.</p>
    pub fn set_logical_resource_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.logical_resource_ids = input;
        self
    }
    /// <p>The logical names of any resources you want to use as filters.</p>
    pub fn get_logical_resource_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.logical_resource_ids
    }
    /// Consumes the builder and constructs a [`DetectStackDriftInput`](crate::operation::detect_stack_drift::DetectStackDriftInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::detect_stack_drift::DetectStackDriftInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::detect_stack_drift::DetectStackDriftInput {
            stack_name: self.stack_name,
            logical_resource_ids: self.logical_resource_ids,
        })
    }
}
