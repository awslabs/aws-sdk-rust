// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DetectStackDriftOutput {
    /// <p>The ID of the drift detection results of this operation.</p>
    /// <p>CloudFormation generates new results, with a new drift detection ID, each time this operation is run. However, the number of drift results CloudFormation retains for any given stack, and for how long, may vary.</p>
    pub stack_drift_detection_id: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl DetectStackDriftOutput {
    /// <p>The ID of the drift detection results of this operation.</p>
    /// <p>CloudFormation generates new results, with a new drift detection ID, each time this operation is run. However, the number of drift results CloudFormation retains for any given stack, and for how long, may vary.</p>
    pub fn stack_drift_detection_id(&self) -> ::std::option::Option<&str> {
        self.stack_drift_detection_id.as_deref()
    }
}
impl ::aws_http::request_id::RequestId for DetectStackDriftOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DetectStackDriftOutput {
    /// Creates a new builder-style object to manufacture [`DetectStackDriftOutput`](crate::operation::detect_stack_drift::DetectStackDriftOutput).
    pub fn builder() -> crate::operation::detect_stack_drift::builders::DetectStackDriftOutputBuilder {
        crate::operation::detect_stack_drift::builders::DetectStackDriftOutputBuilder::default()
    }
}

/// A builder for [`DetectStackDriftOutput`](crate::operation::detect_stack_drift::DetectStackDriftOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DetectStackDriftOutputBuilder {
    pub(crate) stack_drift_detection_id: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl DetectStackDriftOutputBuilder {
    /// <p>The ID of the drift detection results of this operation.</p>
    /// <p>CloudFormation generates new results, with a new drift detection ID, each time this operation is run. However, the number of drift results CloudFormation retains for any given stack, and for how long, may vary.</p>
    /// This field is required.
    pub fn stack_drift_detection_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.stack_drift_detection_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the drift detection results of this operation.</p>
    /// <p>CloudFormation generates new results, with a new drift detection ID, each time this operation is run. However, the number of drift results CloudFormation retains for any given stack, and for how long, may vary.</p>
    pub fn set_stack_drift_detection_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.stack_drift_detection_id = input;
        self
    }
    /// <p>The ID of the drift detection results of this operation.</p>
    /// <p>CloudFormation generates new results, with a new drift detection ID, each time this operation is run. However, the number of drift results CloudFormation retains for any given stack, and for how long, may vary.</p>
    pub fn get_stack_drift_detection_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.stack_drift_detection_id
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DetectStackDriftOutput`](crate::operation::detect_stack_drift::DetectStackDriftOutput).
    pub fn build(self) -> crate::operation::detect_stack_drift::DetectStackDriftOutput {
        crate::operation::detect_stack_drift::DetectStackDriftOutput {
            stack_drift_detection_id: self.stack_drift_detection_id,
            _request_id: self._request_id,
        }
    }
}
