// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The output for the <code>DescribeChangeSet</code> action.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeChangeSetOutput {
    /// <p>The name of the change set.</p>
    pub change_set_name: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the change set.</p>
    pub change_set_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the stack that's associated with the change set.</p>
    pub stack_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the stack that's associated with the change set.</p>
    pub stack_name: ::std::option::Option<::std::string::String>,
    /// <p>Information about the change set.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>A list of <code>Parameter</code> structures that describes the input parameters and their values used to create the change set. For more information, see the <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_Parameter.html">Parameter</a> data type.</p>
    pub parameters: ::std::option::Option<::std::vec::Vec<crate::types::Parameter>>,
    /// <p>The start time when the change set was created, in UTC.</p>
    pub creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>If the change set execution status is <code>AVAILABLE</code>, you can execute the change set. If you can't execute the change set, the status indicates why. For example, a change set might be in an <code>UNAVAILABLE</code> state because CloudFormation is still creating it or in an <code>OBSOLETE</code> state because the stack was already updated.</p>
    pub execution_status: ::std::option::Option<crate::types::ExecutionStatus>,
    /// <p>The current status of the change set, such as <code>CREATE_IN_PROGRESS</code>, <code>CREATE_COMPLETE</code>, or <code>FAILED</code>.</p>
    pub status: ::std::option::Option<crate::types::ChangeSetStatus>,
    /// <p>A description of the change set's status. For example, if your attempt to create a change set failed, CloudFormation shows the error message.</p>
    pub status_reason: ::std::option::Option<::std::string::String>,
    /// <p>The ARNs of the Amazon Simple Notification Service (Amazon SNS) topics that will be associated with the stack if you execute the change set.</p>
    pub notification_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The rollback triggers for CloudFormation to monitor during stack creation and updating operations, and for the specified monitoring period afterwards.</p>
    pub rollback_configuration: ::std::option::Option<crate::types::RollbackConfiguration>,
    /// <p>If you execute the change set, the list of capabilities that were explicitly acknowledged when the change set was created.</p>
    pub capabilities: ::std::option::Option<::std::vec::Vec<crate::types::Capability>>,
    /// <p>If you execute the change set, the tags that will be associated with the stack.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    /// <p>A list of <code>Change</code> structures that describes the resources CloudFormation changes if you execute the change set.</p>
    pub changes: ::std::option::Option<::std::vec::Vec<crate::types::Change>>,
    /// <p>If the output exceeds 1 MB, a string that identifies the next page of changes. If there is no additional page, this value is null.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>Verifies if <code>IncludeNestedStacks</code> is set to <code>True</code>.</p>
    pub include_nested_stacks: ::std::option::Option<bool>,
    /// <p>Specifies the change set ID of the parent change set in the current nested change set hierarchy.</p>
    pub parent_change_set_id: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the change set ID of the root change set in the current nested change set hierarchy.</p>
    pub root_change_set_id: ::std::option::Option<::std::string::String>,
    /// <p>Determines what action will be taken if stack creation fails. When this parameter is specified, the <code>DisableRollback</code> parameter to the <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_ExecuteChangeSet.html">ExecuteChangeSet</a> API operation must not be specified. This must be one of these values:</p>
    /// <ul>
    /// <li> <p> <code>DELETE</code> - Deletes the change set if the stack creation fails. This is only valid when the <code>ChangeSetType</code> parameter is set to <code>CREATE</code>. If the deletion of the stack fails, the status of the stack is <code>DELETE_FAILED</code>.</p> </li>
    /// <li> <p> <code>DO_NOTHING</code> - if the stack creation fails, do nothing. This is equivalent to specifying <code>true</code> for the <code>DisableRollback</code> parameter to the <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_ExecuteChangeSet.html">ExecuteChangeSet</a> API operation.</p> </li>
    /// <li> <p> <code>ROLLBACK</code> - if the stack creation fails, roll back the stack. This is equivalent to specifying <code>false</code> for the <code>DisableRollback</code> parameter to the <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_ExecuteChangeSet.html">ExecuteChangeSet</a> API operation.</p> </li>
    /// </ul>
    pub on_stack_failure: ::std::option::Option<crate::types::OnStackFailure>,
    _request_id: Option<String>,
}
impl DescribeChangeSetOutput {
    /// <p>The name of the change set.</p>
    pub fn change_set_name(&self) -> ::std::option::Option<&str> {
        self.change_set_name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the change set.</p>
    pub fn change_set_id(&self) -> ::std::option::Option<&str> {
        self.change_set_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the stack that's associated with the change set.</p>
    pub fn stack_id(&self) -> ::std::option::Option<&str> {
        self.stack_id.as_deref()
    }
    /// <p>The name of the stack that's associated with the change set.</p>
    pub fn stack_name(&self) -> ::std::option::Option<&str> {
        self.stack_name.as_deref()
    }
    /// <p>Information about the change set.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>A list of <code>Parameter</code> structures that describes the input parameters and their values used to create the change set. For more information, see the <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_Parameter.html">Parameter</a> data type.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.parameters.is_none()`.
    pub fn parameters(&self) -> &[crate::types::Parameter] {
        self.parameters.as_deref().unwrap_or_default()
    }
    /// <p>The start time when the change set was created, in UTC.</p>
    pub fn creation_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>If the change set execution status is <code>AVAILABLE</code>, you can execute the change set. If you can't execute the change set, the status indicates why. For example, a change set might be in an <code>UNAVAILABLE</code> state because CloudFormation is still creating it or in an <code>OBSOLETE</code> state because the stack was already updated.</p>
    pub fn execution_status(&self) -> ::std::option::Option<&crate::types::ExecutionStatus> {
        self.execution_status.as_ref()
    }
    /// <p>The current status of the change set, such as <code>CREATE_IN_PROGRESS</code>, <code>CREATE_COMPLETE</code>, or <code>FAILED</code>.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::ChangeSetStatus> {
        self.status.as_ref()
    }
    /// <p>A description of the change set's status. For example, if your attempt to create a change set failed, CloudFormation shows the error message.</p>
    pub fn status_reason(&self) -> ::std::option::Option<&str> {
        self.status_reason.as_deref()
    }
    /// <p>The ARNs of the Amazon Simple Notification Service (Amazon SNS) topics that will be associated with the stack if you execute the change set.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.notification_arns.is_none()`.
    pub fn notification_arns(&self) -> &[::std::string::String] {
        self.notification_arns.as_deref().unwrap_or_default()
    }
    /// <p>The rollback triggers for CloudFormation to monitor during stack creation and updating operations, and for the specified monitoring period afterwards.</p>
    pub fn rollback_configuration(&self) -> ::std::option::Option<&crate::types::RollbackConfiguration> {
        self.rollback_configuration.as_ref()
    }
    /// <p>If you execute the change set, the list of capabilities that were explicitly acknowledged when the change set was created.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.capabilities.is_none()`.
    pub fn capabilities(&self) -> &[crate::types::Capability] {
        self.capabilities.as_deref().unwrap_or_default()
    }
    /// <p>If you execute the change set, the tags that will be associated with the stack.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
    /// <p>A list of <code>Change</code> structures that describes the resources CloudFormation changes if you execute the change set.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.changes.is_none()`.
    pub fn changes(&self) -> &[crate::types::Change] {
        self.changes.as_deref().unwrap_or_default()
    }
    /// <p>If the output exceeds 1 MB, a string that identifies the next page of changes. If there is no additional page, this value is null.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>Verifies if <code>IncludeNestedStacks</code> is set to <code>True</code>.</p>
    pub fn include_nested_stacks(&self) -> ::std::option::Option<bool> {
        self.include_nested_stacks
    }
    /// <p>Specifies the change set ID of the parent change set in the current nested change set hierarchy.</p>
    pub fn parent_change_set_id(&self) -> ::std::option::Option<&str> {
        self.parent_change_set_id.as_deref()
    }
    /// <p>Specifies the change set ID of the root change set in the current nested change set hierarchy.</p>
    pub fn root_change_set_id(&self) -> ::std::option::Option<&str> {
        self.root_change_set_id.as_deref()
    }
    /// <p>Determines what action will be taken if stack creation fails. When this parameter is specified, the <code>DisableRollback</code> parameter to the <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_ExecuteChangeSet.html">ExecuteChangeSet</a> API operation must not be specified. This must be one of these values:</p>
    /// <ul>
    /// <li> <p> <code>DELETE</code> - Deletes the change set if the stack creation fails. This is only valid when the <code>ChangeSetType</code> parameter is set to <code>CREATE</code>. If the deletion of the stack fails, the status of the stack is <code>DELETE_FAILED</code>.</p> </li>
    /// <li> <p> <code>DO_NOTHING</code> - if the stack creation fails, do nothing. This is equivalent to specifying <code>true</code> for the <code>DisableRollback</code> parameter to the <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_ExecuteChangeSet.html">ExecuteChangeSet</a> API operation.</p> </li>
    /// <li> <p> <code>ROLLBACK</code> - if the stack creation fails, roll back the stack. This is equivalent to specifying <code>false</code> for the <code>DisableRollback</code> parameter to the <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_ExecuteChangeSet.html">ExecuteChangeSet</a> API operation.</p> </li>
    /// </ul>
    pub fn on_stack_failure(&self) -> ::std::option::Option<&crate::types::OnStackFailure> {
        self.on_stack_failure.as_ref()
    }
}
impl ::aws_http::request_id::RequestId for DescribeChangeSetOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeChangeSetOutput {
    /// Creates a new builder-style object to manufacture [`DescribeChangeSetOutput`](crate::operation::describe_change_set::DescribeChangeSetOutput).
    pub fn builder() -> crate::operation::describe_change_set::builders::DescribeChangeSetOutputBuilder {
        crate::operation::describe_change_set::builders::DescribeChangeSetOutputBuilder::default()
    }
}

/// A builder for [`DescribeChangeSetOutput`](crate::operation::describe_change_set::DescribeChangeSetOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeChangeSetOutputBuilder {
    pub(crate) change_set_name: ::std::option::Option<::std::string::String>,
    pub(crate) change_set_id: ::std::option::Option<::std::string::String>,
    pub(crate) stack_id: ::std::option::Option<::std::string::String>,
    pub(crate) stack_name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) parameters: ::std::option::Option<::std::vec::Vec<crate::types::Parameter>>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) execution_status: ::std::option::Option<crate::types::ExecutionStatus>,
    pub(crate) status: ::std::option::Option<crate::types::ChangeSetStatus>,
    pub(crate) status_reason: ::std::option::Option<::std::string::String>,
    pub(crate) notification_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) rollback_configuration: ::std::option::Option<crate::types::RollbackConfiguration>,
    pub(crate) capabilities: ::std::option::Option<::std::vec::Vec<crate::types::Capability>>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    pub(crate) changes: ::std::option::Option<::std::vec::Vec<crate::types::Change>>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) include_nested_stacks: ::std::option::Option<bool>,
    pub(crate) parent_change_set_id: ::std::option::Option<::std::string::String>,
    pub(crate) root_change_set_id: ::std::option::Option<::std::string::String>,
    pub(crate) on_stack_failure: ::std::option::Option<crate::types::OnStackFailure>,
    _request_id: Option<String>,
}
impl DescribeChangeSetOutputBuilder {
    /// <p>The name of the change set.</p>
    pub fn change_set_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.change_set_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the change set.</p>
    pub fn set_change_set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.change_set_name = input;
        self
    }
    /// <p>The name of the change set.</p>
    pub fn get_change_set_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.change_set_name
    }
    /// <p>The Amazon Resource Name (ARN) of the change set.</p>
    pub fn change_set_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.change_set_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the change set.</p>
    pub fn set_change_set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.change_set_id = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the change set.</p>
    pub fn get_change_set_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.change_set_id
    }
    /// <p>The Amazon Resource Name (ARN) of the stack that's associated with the change set.</p>
    pub fn stack_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.stack_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the stack that's associated with the change set.</p>
    pub fn set_stack_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.stack_id = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the stack that's associated with the change set.</p>
    pub fn get_stack_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.stack_id
    }
    /// <p>The name of the stack that's associated with the change set.</p>
    pub fn stack_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.stack_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the stack that's associated with the change set.</p>
    pub fn set_stack_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.stack_name = input;
        self
    }
    /// <p>The name of the stack that's associated with the change set.</p>
    pub fn get_stack_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.stack_name
    }
    /// <p>Information about the change set.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Information about the change set.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>Information about the change set.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Appends an item to `parameters`.
    ///
    /// To override the contents of this collection use [`set_parameters`](Self::set_parameters).
    ///
    /// <p>A list of <code>Parameter</code> structures that describes the input parameters and their values used to create the change set. For more information, see the <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_Parameter.html">Parameter</a> data type.</p>
    pub fn parameters(mut self, input: crate::types::Parameter) -> Self {
        let mut v = self.parameters.unwrap_or_default();
        v.push(input);
        self.parameters = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of <code>Parameter</code> structures that describes the input parameters and their values used to create the change set. For more information, see the <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_Parameter.html">Parameter</a> data type.</p>
    pub fn set_parameters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Parameter>>) -> Self {
        self.parameters = input;
        self
    }
    /// <p>A list of <code>Parameter</code> structures that describes the input parameters and their values used to create the change set. For more information, see the <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_Parameter.html">Parameter</a> data type.</p>
    pub fn get_parameters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Parameter>> {
        &self.parameters
    }
    /// <p>The start time when the change set was created, in UTC.</p>
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The start time when the change set was created, in UTC.</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The start time when the change set was created, in UTC.</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// <p>If the change set execution status is <code>AVAILABLE</code>, you can execute the change set. If you can't execute the change set, the status indicates why. For example, a change set might be in an <code>UNAVAILABLE</code> state because CloudFormation is still creating it or in an <code>OBSOLETE</code> state because the stack was already updated.</p>
    pub fn execution_status(mut self, input: crate::types::ExecutionStatus) -> Self {
        self.execution_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>If the change set execution status is <code>AVAILABLE</code>, you can execute the change set. If you can't execute the change set, the status indicates why. For example, a change set might be in an <code>UNAVAILABLE</code> state because CloudFormation is still creating it or in an <code>OBSOLETE</code> state because the stack was already updated.</p>
    pub fn set_execution_status(mut self, input: ::std::option::Option<crate::types::ExecutionStatus>) -> Self {
        self.execution_status = input;
        self
    }
    /// <p>If the change set execution status is <code>AVAILABLE</code>, you can execute the change set. If you can't execute the change set, the status indicates why. For example, a change set might be in an <code>UNAVAILABLE</code> state because CloudFormation is still creating it or in an <code>OBSOLETE</code> state because the stack was already updated.</p>
    pub fn get_execution_status(&self) -> &::std::option::Option<crate::types::ExecutionStatus> {
        &self.execution_status
    }
    /// <p>The current status of the change set, such as <code>CREATE_IN_PROGRESS</code>, <code>CREATE_COMPLETE</code>, or <code>FAILED</code>.</p>
    pub fn status(mut self, input: crate::types::ChangeSetStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the change set, such as <code>CREATE_IN_PROGRESS</code>, <code>CREATE_COMPLETE</code>, or <code>FAILED</code>.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ChangeSetStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current status of the change set, such as <code>CREATE_IN_PROGRESS</code>, <code>CREATE_COMPLETE</code>, or <code>FAILED</code>.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ChangeSetStatus> {
        &self.status
    }
    /// <p>A description of the change set's status. For example, if your attempt to create a change set failed, CloudFormation shows the error message.</p>
    pub fn status_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description of the change set's status. For example, if your attempt to create a change set failed, CloudFormation shows the error message.</p>
    pub fn set_status_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status_reason = input;
        self
    }
    /// <p>A description of the change set's status. For example, if your attempt to create a change set failed, CloudFormation shows the error message.</p>
    pub fn get_status_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.status_reason
    }
    /// Appends an item to `notification_arns`.
    ///
    /// To override the contents of this collection use [`set_notification_arns`](Self::set_notification_arns).
    ///
    /// <p>The ARNs of the Amazon Simple Notification Service (Amazon SNS) topics that will be associated with the stack if you execute the change set.</p>
    pub fn notification_arns(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.notification_arns.unwrap_or_default();
        v.push(input.into());
        self.notification_arns = ::std::option::Option::Some(v);
        self
    }
    /// <p>The ARNs of the Amazon Simple Notification Service (Amazon SNS) topics that will be associated with the stack if you execute the change set.</p>
    pub fn set_notification_arns(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.notification_arns = input;
        self
    }
    /// <p>The ARNs of the Amazon Simple Notification Service (Amazon SNS) topics that will be associated with the stack if you execute the change set.</p>
    pub fn get_notification_arns(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.notification_arns
    }
    /// <p>The rollback triggers for CloudFormation to monitor during stack creation and updating operations, and for the specified monitoring period afterwards.</p>
    pub fn rollback_configuration(mut self, input: crate::types::RollbackConfiguration) -> Self {
        self.rollback_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The rollback triggers for CloudFormation to monitor during stack creation and updating operations, and for the specified monitoring period afterwards.</p>
    pub fn set_rollback_configuration(mut self, input: ::std::option::Option<crate::types::RollbackConfiguration>) -> Self {
        self.rollback_configuration = input;
        self
    }
    /// <p>The rollback triggers for CloudFormation to monitor during stack creation and updating operations, and for the specified monitoring period afterwards.</p>
    pub fn get_rollback_configuration(&self) -> &::std::option::Option<crate::types::RollbackConfiguration> {
        &self.rollback_configuration
    }
    /// Appends an item to `capabilities`.
    ///
    /// To override the contents of this collection use [`set_capabilities`](Self::set_capabilities).
    ///
    /// <p>If you execute the change set, the list of capabilities that were explicitly acknowledged when the change set was created.</p>
    pub fn capabilities(mut self, input: crate::types::Capability) -> Self {
        let mut v = self.capabilities.unwrap_or_default();
        v.push(input);
        self.capabilities = ::std::option::Option::Some(v);
        self
    }
    /// <p>If you execute the change set, the list of capabilities that were explicitly acknowledged when the change set was created.</p>
    pub fn set_capabilities(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Capability>>) -> Self {
        self.capabilities = input;
        self
    }
    /// <p>If you execute the change set, the list of capabilities that were explicitly acknowledged when the change set was created.</p>
    pub fn get_capabilities(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Capability>> {
        &self.capabilities
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>If you execute the change set, the tags that will be associated with the stack.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>If you execute the change set, the tags that will be associated with the stack.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>If you execute the change set, the tags that will be associated with the stack.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// Appends an item to `changes`.
    ///
    /// To override the contents of this collection use [`set_changes`](Self::set_changes).
    ///
    /// <p>A list of <code>Change</code> structures that describes the resources CloudFormation changes if you execute the change set.</p>
    pub fn changes(mut self, input: crate::types::Change) -> Self {
        let mut v = self.changes.unwrap_or_default();
        v.push(input);
        self.changes = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of <code>Change</code> structures that describes the resources CloudFormation changes if you execute the change set.</p>
    pub fn set_changes(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Change>>) -> Self {
        self.changes = input;
        self
    }
    /// <p>A list of <code>Change</code> structures that describes the resources CloudFormation changes if you execute the change set.</p>
    pub fn get_changes(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Change>> {
        &self.changes
    }
    /// <p>If the output exceeds 1 MB, a string that identifies the next page of changes. If there is no additional page, this value is null.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If the output exceeds 1 MB, a string that identifies the next page of changes. If there is no additional page, this value is null.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>If the output exceeds 1 MB, a string that identifies the next page of changes. If there is no additional page, this value is null.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>Verifies if <code>IncludeNestedStacks</code> is set to <code>True</code>.</p>
    pub fn include_nested_stacks(mut self, input: bool) -> Self {
        self.include_nested_stacks = ::std::option::Option::Some(input);
        self
    }
    /// <p>Verifies if <code>IncludeNestedStacks</code> is set to <code>True</code>.</p>
    pub fn set_include_nested_stacks(mut self, input: ::std::option::Option<bool>) -> Self {
        self.include_nested_stacks = input;
        self
    }
    /// <p>Verifies if <code>IncludeNestedStacks</code> is set to <code>True</code>.</p>
    pub fn get_include_nested_stacks(&self) -> &::std::option::Option<bool> {
        &self.include_nested_stacks
    }
    /// <p>Specifies the change set ID of the parent change set in the current nested change set hierarchy.</p>
    pub fn parent_change_set_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.parent_change_set_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the change set ID of the parent change set in the current nested change set hierarchy.</p>
    pub fn set_parent_change_set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.parent_change_set_id = input;
        self
    }
    /// <p>Specifies the change set ID of the parent change set in the current nested change set hierarchy.</p>
    pub fn get_parent_change_set_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.parent_change_set_id
    }
    /// <p>Specifies the change set ID of the root change set in the current nested change set hierarchy.</p>
    pub fn root_change_set_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.root_change_set_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the change set ID of the root change set in the current nested change set hierarchy.</p>
    pub fn set_root_change_set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.root_change_set_id = input;
        self
    }
    /// <p>Specifies the change set ID of the root change set in the current nested change set hierarchy.</p>
    pub fn get_root_change_set_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.root_change_set_id
    }
    /// <p>Determines what action will be taken if stack creation fails. When this parameter is specified, the <code>DisableRollback</code> parameter to the <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_ExecuteChangeSet.html">ExecuteChangeSet</a> API operation must not be specified. This must be one of these values:</p>
    /// <ul>
    /// <li> <p> <code>DELETE</code> - Deletes the change set if the stack creation fails. This is only valid when the <code>ChangeSetType</code> parameter is set to <code>CREATE</code>. If the deletion of the stack fails, the status of the stack is <code>DELETE_FAILED</code>.</p> </li>
    /// <li> <p> <code>DO_NOTHING</code> - if the stack creation fails, do nothing. This is equivalent to specifying <code>true</code> for the <code>DisableRollback</code> parameter to the <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_ExecuteChangeSet.html">ExecuteChangeSet</a> API operation.</p> </li>
    /// <li> <p> <code>ROLLBACK</code> - if the stack creation fails, roll back the stack. This is equivalent to specifying <code>false</code> for the <code>DisableRollback</code> parameter to the <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_ExecuteChangeSet.html">ExecuteChangeSet</a> API operation.</p> </li>
    /// </ul>
    pub fn on_stack_failure(mut self, input: crate::types::OnStackFailure) -> Self {
        self.on_stack_failure = ::std::option::Option::Some(input);
        self
    }
    /// <p>Determines what action will be taken if stack creation fails. When this parameter is specified, the <code>DisableRollback</code> parameter to the <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_ExecuteChangeSet.html">ExecuteChangeSet</a> API operation must not be specified. This must be one of these values:</p>
    /// <ul>
    /// <li> <p> <code>DELETE</code> - Deletes the change set if the stack creation fails. This is only valid when the <code>ChangeSetType</code> parameter is set to <code>CREATE</code>. If the deletion of the stack fails, the status of the stack is <code>DELETE_FAILED</code>.</p> </li>
    /// <li> <p> <code>DO_NOTHING</code> - if the stack creation fails, do nothing. This is equivalent to specifying <code>true</code> for the <code>DisableRollback</code> parameter to the <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_ExecuteChangeSet.html">ExecuteChangeSet</a> API operation.</p> </li>
    /// <li> <p> <code>ROLLBACK</code> - if the stack creation fails, roll back the stack. This is equivalent to specifying <code>false</code> for the <code>DisableRollback</code> parameter to the <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_ExecuteChangeSet.html">ExecuteChangeSet</a> API operation.</p> </li>
    /// </ul>
    pub fn set_on_stack_failure(mut self, input: ::std::option::Option<crate::types::OnStackFailure>) -> Self {
        self.on_stack_failure = input;
        self
    }
    /// <p>Determines what action will be taken if stack creation fails. When this parameter is specified, the <code>DisableRollback</code> parameter to the <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_ExecuteChangeSet.html">ExecuteChangeSet</a> API operation must not be specified. This must be one of these values:</p>
    /// <ul>
    /// <li> <p> <code>DELETE</code> - Deletes the change set if the stack creation fails. This is only valid when the <code>ChangeSetType</code> parameter is set to <code>CREATE</code>. If the deletion of the stack fails, the status of the stack is <code>DELETE_FAILED</code>.</p> </li>
    /// <li> <p> <code>DO_NOTHING</code> - if the stack creation fails, do nothing. This is equivalent to specifying <code>true</code> for the <code>DisableRollback</code> parameter to the <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_ExecuteChangeSet.html">ExecuteChangeSet</a> API operation.</p> </li>
    /// <li> <p> <code>ROLLBACK</code> - if the stack creation fails, roll back the stack. This is equivalent to specifying <code>false</code> for the <code>DisableRollback</code> parameter to the <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_ExecuteChangeSet.html">ExecuteChangeSet</a> API operation.</p> </li>
    /// </ul>
    pub fn get_on_stack_failure(&self) -> &::std::option::Option<crate::types::OnStackFailure> {
        &self.on_stack_failure
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeChangeSetOutput`](crate::operation::describe_change_set::DescribeChangeSetOutput).
    pub fn build(self) -> crate::operation::describe_change_set::DescribeChangeSetOutput {
        crate::operation::describe_change_set::DescribeChangeSetOutput {
            change_set_name: self.change_set_name,
            change_set_id: self.change_set_id,
            stack_id: self.stack_id,
            stack_name: self.stack_name,
            description: self.description,
            parameters: self.parameters,
            creation_time: self.creation_time,
            execution_status: self.execution_status,
            status: self.status,
            status_reason: self.status_reason,
            notification_arns: self.notification_arns,
            rollback_configuration: self.rollback_configuration,
            capabilities: self.capabilities,
            tags: self.tags,
            changes: self.changes,
            next_token: self.next_token,
            include_nested_stacks: self.include_nested_stacks,
            parent_change_set_id: self.parent_change_set_id,
            root_change_set_id: self.root_change_set_id,
            on_stack_failure: self.on_stack_failure,
            _request_id: self._request_id,
        }
    }
}
