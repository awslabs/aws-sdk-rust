// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListStackInstancesOutput {
    /// <p>A list of <code>StackInstanceSummary</code> structures that contain information about the specified stack instances.</p>
    pub summaries: ::std::option::Option<::std::vec::Vec<crate::types::StackInstanceSummary>>,
    /// <p>If the request doesn't return all the remaining results, <code>NextToken</code> is set to a token. To retrieve the next set of results, call <code>ListStackInstances</code> again and assign that token to the request object's <code>NextToken</code> parameter. If the request returns all results, <code>NextToken</code> is set to <code>null</code>.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListStackInstancesOutput {
    /// <p>A list of <code>StackInstanceSummary</code> structures that contain information about the specified stack instances.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.summaries.is_none()`.
    pub fn summaries(&self) -> &[crate::types::StackInstanceSummary] {
        self.summaries.as_deref().unwrap_or_default()
    }
    /// <p>If the request doesn't return all the remaining results, <code>NextToken</code> is set to a token. To retrieve the next set of results, call <code>ListStackInstances</code> again and assign that token to the request object's <code>NextToken</code> parameter. If the request returns all results, <code>NextToken</code> is set to <code>null</code>.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ::aws_http::request_id::RequestId for ListStackInstancesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListStackInstancesOutput {
    /// Creates a new builder-style object to manufacture [`ListStackInstancesOutput`](crate::operation::list_stack_instances::ListStackInstancesOutput).
    pub fn builder() -> crate::operation::list_stack_instances::builders::ListStackInstancesOutputBuilder {
        crate::operation::list_stack_instances::builders::ListStackInstancesOutputBuilder::default()
    }
}

/// A builder for [`ListStackInstancesOutput`](crate::operation::list_stack_instances::ListStackInstancesOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListStackInstancesOutputBuilder {
    pub(crate) summaries: ::std::option::Option<::std::vec::Vec<crate::types::StackInstanceSummary>>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListStackInstancesOutputBuilder {
    /// Appends an item to `summaries`.
    ///
    /// To override the contents of this collection use [`set_summaries`](Self::set_summaries).
    ///
    /// <p>A list of <code>StackInstanceSummary</code> structures that contain information about the specified stack instances.</p>
    pub fn summaries(mut self, input: crate::types::StackInstanceSummary) -> Self {
        let mut v = self.summaries.unwrap_or_default();
        v.push(input);
        self.summaries = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of <code>StackInstanceSummary</code> structures that contain information about the specified stack instances.</p>
    pub fn set_summaries(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::StackInstanceSummary>>) -> Self {
        self.summaries = input;
        self
    }
    /// <p>A list of <code>StackInstanceSummary</code> structures that contain information about the specified stack instances.</p>
    pub fn get_summaries(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StackInstanceSummary>> {
        &self.summaries
    }
    /// <p>If the request doesn't return all the remaining results, <code>NextToken</code> is set to a token. To retrieve the next set of results, call <code>ListStackInstances</code> again and assign that token to the request object's <code>NextToken</code> parameter. If the request returns all results, <code>NextToken</code> is set to <code>null</code>.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If the request doesn't return all the remaining results, <code>NextToken</code> is set to a token. To retrieve the next set of results, call <code>ListStackInstances</code> again and assign that token to the request object's <code>NextToken</code> parameter. If the request returns all results, <code>NextToken</code> is set to <code>null</code>.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>If the request doesn't return all the remaining results, <code>NextToken</code> is set to a token. To retrieve the next set of results, call <code>ListStackInstances</code> again and assign that token to the request object's <code>NextToken</code> parameter. If the request returns all results, <code>NextToken</code> is set to <code>null</code>.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListStackInstancesOutput`](crate::operation::list_stack_instances::ListStackInstancesOutput).
    pub fn build(self) -> crate::operation::list_stack_instances::ListStackInstancesOutput {
        crate::operation::list_stack_instances::ListStackInstancesOutput {
            summaries: self.summaries,
            next_token: self.next_token,
            _request_id: self._request_id,
        }
    }
}
