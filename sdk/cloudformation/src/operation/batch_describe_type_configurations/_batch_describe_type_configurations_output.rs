// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BatchDescribeTypeConfigurationsOutput {
    /// <p>A list of information concerning any errors generated during the setting of the specified configurations.</p>
    pub errors: ::std::option::Option<::std::vec::Vec<crate::types::BatchDescribeTypeConfigurationsError>>,
    /// <p>A list of any of the specified extension configurations that CloudFormation could not process for any reason.</p>
    pub unprocessed_type_configurations: ::std::option::Option<::std::vec::Vec<crate::types::TypeConfigurationIdentifier>>,
    /// <p>A list of any of the specified extension configurations from the CloudFormation registry.</p>
    pub type_configurations: ::std::option::Option<::std::vec::Vec<crate::types::TypeConfigurationDetails>>,
    _request_id: Option<String>,
}
impl BatchDescribeTypeConfigurationsOutput {
    /// <p>A list of information concerning any errors generated during the setting of the specified configurations.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.errors.is_none()`.
    pub fn errors(&self) -> &[crate::types::BatchDescribeTypeConfigurationsError] {
        self.errors.as_deref().unwrap_or_default()
    }
    /// <p>A list of any of the specified extension configurations that CloudFormation could not process for any reason.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.unprocessed_type_configurations.is_none()`.
    pub fn unprocessed_type_configurations(&self) -> &[crate::types::TypeConfigurationIdentifier] {
        self.unprocessed_type_configurations.as_deref().unwrap_or_default()
    }
    /// <p>A list of any of the specified extension configurations from the CloudFormation registry.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.type_configurations.is_none()`.
    pub fn type_configurations(&self) -> &[crate::types::TypeConfigurationDetails] {
        self.type_configurations.as_deref().unwrap_or_default()
    }
}
impl ::aws_http::request_id::RequestId for BatchDescribeTypeConfigurationsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl BatchDescribeTypeConfigurationsOutput {
    /// Creates a new builder-style object to manufacture [`BatchDescribeTypeConfigurationsOutput`](crate::operation::batch_describe_type_configurations::BatchDescribeTypeConfigurationsOutput).
    pub fn builder() -> crate::operation::batch_describe_type_configurations::builders::BatchDescribeTypeConfigurationsOutputBuilder {
        crate::operation::batch_describe_type_configurations::builders::BatchDescribeTypeConfigurationsOutputBuilder::default()
    }
}

/// A builder for [`BatchDescribeTypeConfigurationsOutput`](crate::operation::batch_describe_type_configurations::BatchDescribeTypeConfigurationsOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct BatchDescribeTypeConfigurationsOutputBuilder {
    pub(crate) errors: ::std::option::Option<::std::vec::Vec<crate::types::BatchDescribeTypeConfigurationsError>>,
    pub(crate) unprocessed_type_configurations: ::std::option::Option<::std::vec::Vec<crate::types::TypeConfigurationIdentifier>>,
    pub(crate) type_configurations: ::std::option::Option<::std::vec::Vec<crate::types::TypeConfigurationDetails>>,
    _request_id: Option<String>,
}
impl BatchDescribeTypeConfigurationsOutputBuilder {
    /// Appends an item to `errors`.
    ///
    /// To override the contents of this collection use [`set_errors`](Self::set_errors).
    ///
    /// <p>A list of information concerning any errors generated during the setting of the specified configurations.</p>
    pub fn errors(mut self, input: crate::types::BatchDescribeTypeConfigurationsError) -> Self {
        let mut v = self.errors.unwrap_or_default();
        v.push(input);
        self.errors = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of information concerning any errors generated during the setting of the specified configurations.</p>
    pub fn set_errors(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::BatchDescribeTypeConfigurationsError>>) -> Self {
        self.errors = input;
        self
    }
    /// <p>A list of information concerning any errors generated during the setting of the specified configurations.</p>
    pub fn get_errors(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::BatchDescribeTypeConfigurationsError>> {
        &self.errors
    }
    /// Appends an item to `unprocessed_type_configurations`.
    ///
    /// To override the contents of this collection use [`set_unprocessed_type_configurations`](Self::set_unprocessed_type_configurations).
    ///
    /// <p>A list of any of the specified extension configurations that CloudFormation could not process for any reason.</p>
    pub fn unprocessed_type_configurations(mut self, input: crate::types::TypeConfigurationIdentifier) -> Self {
        let mut v = self.unprocessed_type_configurations.unwrap_or_default();
        v.push(input);
        self.unprocessed_type_configurations = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of any of the specified extension configurations that CloudFormation could not process for any reason.</p>
    pub fn set_unprocessed_type_configurations(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::TypeConfigurationIdentifier>>,
    ) -> Self {
        self.unprocessed_type_configurations = input;
        self
    }
    /// <p>A list of any of the specified extension configurations that CloudFormation could not process for any reason.</p>
    pub fn get_unprocessed_type_configurations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::TypeConfigurationIdentifier>> {
        &self.unprocessed_type_configurations
    }
    /// Appends an item to `type_configurations`.
    ///
    /// To override the contents of this collection use [`set_type_configurations`](Self::set_type_configurations).
    ///
    /// <p>A list of any of the specified extension configurations from the CloudFormation registry.</p>
    pub fn type_configurations(mut self, input: crate::types::TypeConfigurationDetails) -> Self {
        let mut v = self.type_configurations.unwrap_or_default();
        v.push(input);
        self.type_configurations = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of any of the specified extension configurations from the CloudFormation registry.</p>
    pub fn set_type_configurations(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::TypeConfigurationDetails>>) -> Self {
        self.type_configurations = input;
        self
    }
    /// <p>A list of any of the specified extension configurations from the CloudFormation registry.</p>
    pub fn get_type_configurations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::TypeConfigurationDetails>> {
        &self.type_configurations
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`BatchDescribeTypeConfigurationsOutput`](crate::operation::batch_describe_type_configurations::BatchDescribeTypeConfigurationsOutput).
    pub fn build(self) -> crate::operation::batch_describe_type_configurations::BatchDescribeTypeConfigurationsOutput {
        crate::operation::batch_describe_type_configurations::BatchDescribeTypeConfigurationsOutput {
            errors: self.errors,
            unprocessed_type_configurations: self.unprocessed_type_configurations,
            type_configurations: self.type_configurations,
            _request_id: self._request_id,
        }
    }
}
