// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::batch_describe_type_configurations::_batch_describe_type_configurations_output::BatchDescribeTypeConfigurationsOutputBuilder;

pub use crate::operation::batch_describe_type_configurations::_batch_describe_type_configurations_input::BatchDescribeTypeConfigurationsInputBuilder;

/// Fluent builder constructing a request to `BatchDescribeTypeConfigurations`.
///
/// <p>Returns configuration data for the specified CloudFormation extensions, from the CloudFormation registry for the account and region.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/registry-register.html#registry-set-configuration">Configuring extensions at the account level</a> in the <i>CloudFormation User Guide</i>.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct BatchDescribeTypeConfigurationsFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::batch_describe_type_configurations::builders::BatchDescribeTypeConfigurationsInputBuilder
            }
impl BatchDescribeTypeConfigurationsFluentBuilder {
    /// Creates a new `BatchDescribeTypeConfigurations`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
                    pub async fn customize(self) -> std::result::Result<
                        crate::client::customize::CustomizableOperation<crate::operation::batch_describe_type_configurations::BatchDescribeTypeConfigurations, aws_http::retry::AwsResponseRetryClassifier,>,
                        aws_smithy_http::result::SdkError<crate::operation::batch_describe_type_configurations::BatchDescribeTypeConfigurationsError>
    >{
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
                    pub async fn send(self) -> std::result::Result<crate::operation::batch_describe_type_configurations::BatchDescribeTypeConfigurationsOutput, aws_smithy_http::result::SdkError<crate::operation::batch_describe_type_configurations::BatchDescribeTypeConfigurationsError>>
                     {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Appends an item to `TypeConfigurationIdentifiers`.
    ///
    /// To override the contents of this collection use [`set_type_configuration_identifiers`](Self::set_type_configuration_identifiers).
    ///
    /// <p>The list of identifiers for the desired extension configurations.</p>
    pub fn type_configuration_identifiers(
        mut self,
        input: crate::types::TypeConfigurationIdentifier,
    ) -> Self {
        self.inner = self.inner.type_configuration_identifiers(input);
        self
    }
    /// <p>The list of identifiers for the desired extension configurations.</p>
    pub fn set_type_configuration_identifiers(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::TypeConfigurationIdentifier>>,
    ) -> Self {
        self.inner = self.inner.set_type_configuration_identifiers(input);
        self
    }
}
