// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::list_resource_scan_resources::_list_resource_scan_resources_output::ListResourceScanResourcesOutputBuilder;

pub use crate::operation::list_resource_scan_resources::_list_resource_scan_resources_input::ListResourceScanResourcesInputBuilder;

impl crate::operation::list_resource_scan_resources::builders::ListResourceScanResourcesInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::list_resource_scan_resources::ListResourceScanResourcesOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_resource_scan_resources::ListResourceScanResourcesError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.list_resource_scan_resources();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `ListResourceScanResources`.
///
/// <p>Lists the resources from a resource scan. The results can be filtered by resource identifier, resource type prefix, tag key, and tag value. Only resources that match all specified filters are returned. The response indicates whether each returned resource is already managed by CloudFormation.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct ListResourceScanResourcesFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::list_resource_scan_resources::builders::ListResourceScanResourcesInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::list_resource_scan_resources::ListResourceScanResourcesOutput,
        crate::operation::list_resource_scan_resources::ListResourceScanResourcesError,
    > for ListResourceScanResourcesFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::list_resource_scan_resources::ListResourceScanResourcesOutput,
            crate::operation::list_resource_scan_resources::ListResourceScanResourcesError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl ListResourceScanResourcesFluentBuilder {
    /// Creates a new `ListResourceScanResources`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the ListResourceScanResources as a reference.
    pub fn as_input(&self) -> &crate::operation::list_resource_scan_resources::builders::ListResourceScanResourcesInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_resource_scan_resources::ListResourceScanResourcesOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_resource_scan_resources::ListResourceScanResourcesError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::list_resource_scan_resources::ListResourceScanResources::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::list_resource_scan_resources::ListResourceScanResources::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::list_resource_scan_resources::ListResourceScanResourcesOutput,
        crate::operation::list_resource_scan_resources::ListResourceScanResourcesError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::list_resource_scan_resources::paginator::ListResourceScanResourcesPaginator::send) which returns a [`PaginationStream`](aws_smithy_async::future::pagination_stream::PaginationStream).
    pub fn into_paginator(self) -> crate::operation::list_resource_scan_resources::paginator::ListResourceScanResourcesPaginator {
        crate::operation::list_resource_scan_resources::paginator::ListResourceScanResourcesPaginator::new(self.handle, self.inner)
    }
    /// <p>The Amazon Resource Name (ARN) of the resource scan.</p>
    pub fn resource_scan_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.resource_scan_id(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the resource scan.</p>
    pub fn set_resource_scan_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_resource_scan_id(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the resource scan.</p>
    pub fn get_resource_scan_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_resource_scan_id()
    }
    /// <p>If specified, the returned resources will have the specified resource identifier (or one of them in the case where the resource has multiple identifiers).</p>
    pub fn resource_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.resource_identifier(input.into());
        self
    }
    /// <p>If specified, the returned resources will have the specified resource identifier (or one of them in the case where the resource has multiple identifiers).</p>
    pub fn set_resource_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_resource_identifier(input);
        self
    }
    /// <p>If specified, the returned resources will have the specified resource identifier (or one of them in the case where the resource has multiple identifiers).</p>
    pub fn get_resource_identifier(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_resource_identifier()
    }
    /// <p>If specified, the returned resources will be of any of the resource types with the specified prefix.</p>
    pub fn resource_type_prefix(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.resource_type_prefix(input.into());
        self
    }
    /// <p>If specified, the returned resources will be of any of the resource types with the specified prefix.</p>
    pub fn set_resource_type_prefix(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_resource_type_prefix(input);
        self
    }
    /// <p>If specified, the returned resources will be of any of the resource types with the specified prefix.</p>
    pub fn get_resource_type_prefix(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_resource_type_prefix()
    }
    /// <p>If specified, the returned resources will have a matching tag key.</p>
    pub fn tag_key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.tag_key(input.into());
        self
    }
    /// <p>If specified, the returned resources will have a matching tag key.</p>
    pub fn set_tag_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_tag_key(input);
        self
    }
    /// <p>If specified, the returned resources will have a matching tag key.</p>
    pub fn get_tag_key(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_tag_key()
    }
    /// <p>If specified, the returned resources will have a matching tag value.</p>
    pub fn tag_value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.tag_value(input.into());
        self
    }
    /// <p>If specified, the returned resources will have a matching tag value.</p>
    pub fn set_tag_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_tag_value(input);
        self
    }
    /// <p>If specified, the returned resources will have a matching tag value.</p>
    pub fn get_tag_value(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_tag_value()
    }
    /// <p>A string that identifies the next page of resource scan results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>A string that identifies the next page of resource scan results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>A string that identifies the next page of resource scan results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_next_token()
    }
    /// <p>If the number of available results exceeds this maximum, the response includes a <code>NextToken</code> value that you can use for the <code>NextToken</code> parameter to get the next set of results. By default the <code>ListResourceScanResources</code> API action will return at most 100 results in each response. The maximum value is 100.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>If the number of available results exceeds this maximum, the response includes a <code>NextToken</code> value that you can use for the <code>NextToken</code> parameter to get the next set of results. By default the <code>ListResourceScanResources</code> API action will return at most 100 results in each response. The maximum value is 100.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>If the number of available results exceeds this maximum, the response includes a <code>NextToken</code> value that you can use for the <code>NextToken</code> parameter to get the next set of results. By default the <code>ListResourceScanResources</code> API action will return at most 100 results in each response. The maximum value is 100.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        self.inner.get_max_results()
    }
}
