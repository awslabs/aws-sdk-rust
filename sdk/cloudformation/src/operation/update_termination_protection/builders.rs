// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_termination_protection::_update_termination_protection_output::UpdateTerminationProtectionOutputBuilder;

pub use crate::operation::update_termination_protection::_update_termination_protection_input::UpdateTerminationProtectionInputBuilder;

/// Fluent builder constructing a request to `UpdateTerminationProtection`.
///
/// <p>Updates termination protection for the specified stack. If a user attempts to delete a stack with termination protection enabled, the operation fails and the stack remains unchanged. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-protect-stacks.html">Protecting a Stack From Being Deleted</a> in the <i>CloudFormation User Guide</i>.</p>
/// <p>For <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-nested-stacks.html">nested stacks</a>, termination protection is set on the root stack and can't be changed directly on the nested stack.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateTerminationProtectionFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::update_termination_protection::builders::UpdateTerminationProtectionInputBuilder
            }
impl UpdateTerminationProtectionFluentBuilder {
    /// Creates a new `UpdateTerminationProtection`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::update_termination_protection::UpdateTerminationProtection,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::update_termination_protection::UpdateTerminationProtectionError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::update_termination_protection::UpdateTerminationProtectionOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::update_termination_protection::UpdateTerminationProtectionError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>Whether to enable termination protection on the specified stack.</p>
    pub fn enable_termination_protection(mut self, input: bool) -> Self {
        self.inner = self.inner.enable_termination_protection(input);
        self
    }
    /// <p>Whether to enable termination protection on the specified stack.</p>
    pub fn set_enable_termination_protection(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_enable_termination_protection(input);
        self
    }
    /// <p>The name or unique ID of the stack for which you want to set termination protection.</p>
    pub fn stack_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.stack_name(input.into());
        self
    }
    /// <p>The name or unique ID of the stack for which you want to set termination protection.</p>
    pub fn set_stack_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_stack_name(input);
        self
    }
}
