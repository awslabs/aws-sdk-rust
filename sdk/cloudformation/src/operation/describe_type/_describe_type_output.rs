// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeTypeOutput {
    /// <p>The Amazon Resource Name (ARN) of the extension.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The kind of extension.</p>
    pub r#type: ::std::option::Option<crate::types::RegistryType>,
    /// <p>The name of the extension.</p>
    /// <p>If the extension is a public third-party type you have activated with a type name alias, CloudFormation returns the type name alias. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_ActivateType.html">ActivateType</a>.</p>
    pub type_name: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the default version of the extension. The default version is used when the extension version isn't specified.</p>
    /// <p>This applies only to private extensions you have registered in your account. For public extensions, both those provided by Amazon Web Services and published by third parties, CloudFormation returns <code>null</code>. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_RegisterType.html">RegisterType</a>.</p>
    /// <p>To set the default version of an extension, use <code>SetTypeDefaultVersion</code>.</p>
    pub default_version_id: ::std::option::Option<::std::string::String>,
    /// <p>Whether the specified extension version is set as the default version.</p>
    /// <p>This applies only to private extensions you have registered in your account, and extensions published by Amazon Web Services. For public third-party extensions, whether they are activated in your account, CloudFormation returns <code>null</code>.</p>
    pub is_default_version: ::std::option::Option<bool>,
    /// <p>The contract test status of the registered extension version. To return the extension test status of a specific extension version, you must specify <code>VersionId</code>.</p>
    /// <p>This applies only to registered private extension versions. CloudFormation doesn't return this information for public extensions, whether they are activated in your account.</p>
    /// <ul>
    /// <li> <p> <code>PASSED</code>: The extension has passed all its contract tests.</p> <p>An extension must have a test status of <code>PASSED</code> before it can be published. For more information, see <a href="https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/resource-type-publish.html">Publishing extensions to make them available for public use</a> in the <i>CloudFormation Command Line Interface User Guide</i>.</p> </li>
    /// <li> <p> <code>FAILED</code>: The extension has failed one or more contract tests.</p> </li>
    /// <li> <p> <code>IN_PROGRESS</code>: Contract tests are currently being performed on the extension.</p> </li>
    /// <li> <p> <code>NOT_TESTED</code>: Contract tests haven't been performed on the extension.</p> </li>
    /// </ul>
    pub type_tests_status: ::std::option::Option<crate::types::TypeTestsStatus>,
    /// <p>The description of the test status. To return the extension test status of a specific extension version, you must specify <code>VersionId</code>.</p>
    /// <p>This applies only to registered private extension versions. CloudFormation doesn't return this information for public extensions, whether they are activated in your account.</p>
    pub type_tests_status_description: ::std::option::Option<::std::string::String>,
    /// <p>The description of the extension.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The schema that defines the extension.</p>
    /// <p>For more information about extension schemas, see <a href="https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/resource-type-schema.html">Resource Provider Schema</a> in the <i>CloudFormation CLI User Guide</i>.</p>
    pub schema: ::std::option::Option<::std::string::String>,
    /// <p>For resource type extensions, the provisioning behavior of the resource type. CloudFormation determines the provisioning type during registration, based on the types of handlers in the schema handler package submitted.</p>
    /// <p>Valid values include:</p>
    /// <ul>
    /// <li> <p> <code>FULLY_MUTABLE</code>: The resource type includes an update handler to process updates to the type during stack update operations.</p> </li>
    /// <li> <p> <code>IMMUTABLE</code>: The resource type doesn't include an update handler, so the type can't be updated and must instead be replaced during stack update operations.</p> </li>
    /// <li> <p> <code>NON_PROVISIONABLE</code>: The resource type doesn't include all the following handlers, and therefore can't actually be provisioned.</p>
    /// <ul>
    /// <li> <p>create</p> </li>
    /// <li> <p>read</p> </li>
    /// <li> <p>delete</p> </li>
    /// </ul> </li>
    /// </ul>
    pub provisioning_type: ::std::option::Option<crate::types::ProvisioningType>,
    /// <p>The deprecation status of the extension version.</p>
    /// <p>Valid values include:</p>
    /// <ul>
    /// <li> <p> <code>LIVE</code>: The extension is activated or registered and can be used in CloudFormation operations, dependent on its provisioning behavior and visibility scope.</p> </li>
    /// <li> <p> <code>DEPRECATED</code>: The extension has been deactivated or deregistered and can no longer be used in CloudFormation operations.</p> </li>
    /// </ul>
    /// <p>For public third-party extensions, CloudFormation returns <code>null</code>.</p>
    pub deprecated_status: ::std::option::Option<crate::types::DeprecatedStatus>,
    /// <p>Contains logging configuration information for private extensions. This applies only to private extensions you have registered in your account. For public extensions, both those provided by Amazon Web Services and published by third parties, CloudFormation returns <code>null</code>. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_RegisterType.html">RegisterType</a>.</p>
    pub logging_config: ::std::option::Option<crate::types::LoggingConfig>,
    /// <p>For extensions that are modules, the public third-party extensions that must be activated in your account in order for the module itself to be activated.</p>
    pub required_activated_types: ::std::option::Option<::std::vec::Vec<crate::types::RequiredActivatedType>>,
    /// <p>The Amazon Resource Name (ARN) of the IAM execution role used to register the extension. This applies only to private extensions you have registered in your account. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_RegisterType.html">RegisterType</a>.</p>
    /// <p>If the registered extension calls any Amazon Web Services APIs, you must create an <i> <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html">IAM execution role</a> </i> that includes the necessary permissions to call those Amazon Web Services APIs, and provision that execution role in your account. CloudFormation then assumes that execution role to provide your extension with the appropriate credentials.</p>
    pub execution_role_arn: ::std::option::Option<::std::string::String>,
    /// <p>The scope at which the extension is visible and usable in CloudFormation operations.</p>
    /// <p>Valid values include:</p>
    /// <ul>
    /// <li> <p> <code>PRIVATE</code>: The extension is only visible and usable within the account in which it is registered. CloudFormation marks any extensions you register as <code>PRIVATE</code>.</p> </li>
    /// <li> <p> <code>PUBLIC</code>: The extension is publicly visible and usable within any Amazon Web Services account.</p> </li>
    /// </ul>
    pub visibility: ::std::option::Option<crate::types::Visibility>,
    /// <p>The URL of the source code for the extension.</p>
    pub source_url: ::std::option::Option<::std::string::String>,
    /// <p>The URL of a page providing detailed documentation for this extension.</p>
    pub documentation_url: ::std::option::Option<::std::string::String>,
    /// <p>When the specified extension version was registered. This applies only to:</p>
    /// <ul>
    /// <li> <p>Private extensions you have registered in your account. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_RegisterType.html">RegisterType</a>.</p> </li>
    /// <li> <p>Public extensions you have activated in your account with auto-update specified. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_ActivateType.html">ActivateType</a>.</p> </li>
    /// </ul>
    pub last_updated: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>When the specified private extension version was registered or activated in your account.</p>
    pub time_created: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>A JSON string that represent the current configuration data for the extension in this account and Region.</p>
    /// <p>To set the configuration data for an extension, use <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_SetTypeConfiguration.html">SetTypeConfiguration</a>. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/registry-register.html#registry-set-configuration">Configuring extensions at the account level</a> in the <i>CloudFormation User Guide</i>.</p>
    pub configuration_schema: ::std::option::Option<::std::string::String>,
    /// <p>The publisher ID of the extension publisher.</p>
    /// <p>This applies only to public third-party extensions. For private registered extensions, and extensions provided by Amazon Web Services, CloudFormation returns <code>null</code>.</p>
    pub publisher_id: ::std::option::Option<::std::string::String>,
    /// <p>For public extensions that have been activated for this account and Region, the type name of the public extension.</p>
    /// <p>If you specified a <code>TypeNameAlias</code> when enabling the extension in this account and Region, CloudFormation treats that alias as the extension's type name within the account and Region, not the type name of the public extension. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/registry-public.html#registry-public-enable-alias">Specifying aliases to refer to extensions</a> in the <i>CloudFormation User Guide</i>.</p>
    pub original_type_name: ::std::option::Option<::std::string::String>,
    /// <p>For public extensions that have been activated for this account and Region, the Amazon Resource Name (ARN) of the public extension.</p>
    pub original_type_arn: ::std::option::Option<::std::string::String>,
    /// <p>The version number of a public third-party extension.</p>
    /// <p>This applies only if you specify a public extension you have activated in your account, or specify a public extension without specifying a version. For all other extensions, CloudFormation returns <code>null</code>.</p>
    pub public_version_number: ::std::option::Option<::std::string::String>,
    /// <p>The latest version of a public extension <i>that is available</i> for use.</p>
    /// <p>This only applies if you specify a public extension, and you don't specify a version. For all other requests, CloudFormation returns <code>null</code>.</p>
    pub latest_public_version: ::std::option::Option<::std::string::String>,
    /// <p>Whether the extension is activated in the account and Region.</p>
    /// <p>This only applies to public third-party extensions. For all other extensions, CloudFormation returns <code>null</code>.</p>
    pub is_activated: ::std::option::Option<bool>,
    /// <p>Whether CloudFormation automatically updates the extension in this account and Region when a new <i>minor</i> version is published by the extension publisher. Major versions released by the publisher must be manually updated. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/registry-public.html#registry-public-enable">Activating public extensions for use in your account</a> in the <i>CloudFormation User Guide</i>.</p>
    pub auto_update: ::std::option::Option<bool>,
    _request_id: Option<String>,
}
impl DescribeTypeOutput {
    /// <p>The Amazon Resource Name (ARN) of the extension.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The kind of extension.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::RegistryType> {
        self.r#type.as_ref()
    }
    /// <p>The name of the extension.</p>
    /// <p>If the extension is a public third-party type you have activated with a type name alias, CloudFormation returns the type name alias. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_ActivateType.html">ActivateType</a>.</p>
    pub fn type_name(&self) -> ::std::option::Option<&str> {
        self.type_name.as_deref()
    }
    /// <p>The ID of the default version of the extension. The default version is used when the extension version isn't specified.</p>
    /// <p>This applies only to private extensions you have registered in your account. For public extensions, both those provided by Amazon Web Services and published by third parties, CloudFormation returns <code>null</code>. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_RegisterType.html">RegisterType</a>.</p>
    /// <p>To set the default version of an extension, use <code>SetTypeDefaultVersion</code>.</p>
    pub fn default_version_id(&self) -> ::std::option::Option<&str> {
        self.default_version_id.as_deref()
    }
    /// <p>Whether the specified extension version is set as the default version.</p>
    /// <p>This applies only to private extensions you have registered in your account, and extensions published by Amazon Web Services. For public third-party extensions, whether they are activated in your account, CloudFormation returns <code>null</code>.</p>
    pub fn is_default_version(&self) -> ::std::option::Option<bool> {
        self.is_default_version
    }
    /// <p>The contract test status of the registered extension version. To return the extension test status of a specific extension version, you must specify <code>VersionId</code>.</p>
    /// <p>This applies only to registered private extension versions. CloudFormation doesn't return this information for public extensions, whether they are activated in your account.</p>
    /// <ul>
    /// <li> <p> <code>PASSED</code>: The extension has passed all its contract tests.</p> <p>An extension must have a test status of <code>PASSED</code> before it can be published. For more information, see <a href="https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/resource-type-publish.html">Publishing extensions to make them available for public use</a> in the <i>CloudFormation Command Line Interface User Guide</i>.</p> </li>
    /// <li> <p> <code>FAILED</code>: The extension has failed one or more contract tests.</p> </li>
    /// <li> <p> <code>IN_PROGRESS</code>: Contract tests are currently being performed on the extension.</p> </li>
    /// <li> <p> <code>NOT_TESTED</code>: Contract tests haven't been performed on the extension.</p> </li>
    /// </ul>
    pub fn type_tests_status(&self) -> ::std::option::Option<&crate::types::TypeTestsStatus> {
        self.type_tests_status.as_ref()
    }
    /// <p>The description of the test status. To return the extension test status of a specific extension version, you must specify <code>VersionId</code>.</p>
    /// <p>This applies only to registered private extension versions. CloudFormation doesn't return this information for public extensions, whether they are activated in your account.</p>
    pub fn type_tests_status_description(&self) -> ::std::option::Option<&str> {
        self.type_tests_status_description.as_deref()
    }
    /// <p>The description of the extension.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The schema that defines the extension.</p>
    /// <p>For more information about extension schemas, see <a href="https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/resource-type-schema.html">Resource Provider Schema</a> in the <i>CloudFormation CLI User Guide</i>.</p>
    pub fn schema(&self) -> ::std::option::Option<&str> {
        self.schema.as_deref()
    }
    /// <p>For resource type extensions, the provisioning behavior of the resource type. CloudFormation determines the provisioning type during registration, based on the types of handlers in the schema handler package submitted.</p>
    /// <p>Valid values include:</p>
    /// <ul>
    /// <li> <p> <code>FULLY_MUTABLE</code>: The resource type includes an update handler to process updates to the type during stack update operations.</p> </li>
    /// <li> <p> <code>IMMUTABLE</code>: The resource type doesn't include an update handler, so the type can't be updated and must instead be replaced during stack update operations.</p> </li>
    /// <li> <p> <code>NON_PROVISIONABLE</code>: The resource type doesn't include all the following handlers, and therefore can't actually be provisioned.</p>
    /// <ul>
    /// <li> <p>create</p> </li>
    /// <li> <p>read</p> </li>
    /// <li> <p>delete</p> </li>
    /// </ul> </li>
    /// </ul>
    pub fn provisioning_type(&self) -> ::std::option::Option<&crate::types::ProvisioningType> {
        self.provisioning_type.as_ref()
    }
    /// <p>The deprecation status of the extension version.</p>
    /// <p>Valid values include:</p>
    /// <ul>
    /// <li> <p> <code>LIVE</code>: The extension is activated or registered and can be used in CloudFormation operations, dependent on its provisioning behavior and visibility scope.</p> </li>
    /// <li> <p> <code>DEPRECATED</code>: The extension has been deactivated or deregistered and can no longer be used in CloudFormation operations.</p> </li>
    /// </ul>
    /// <p>For public third-party extensions, CloudFormation returns <code>null</code>.</p>
    pub fn deprecated_status(&self) -> ::std::option::Option<&crate::types::DeprecatedStatus> {
        self.deprecated_status.as_ref()
    }
    /// <p>Contains logging configuration information for private extensions. This applies only to private extensions you have registered in your account. For public extensions, both those provided by Amazon Web Services and published by third parties, CloudFormation returns <code>null</code>. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_RegisterType.html">RegisterType</a>.</p>
    pub fn logging_config(&self) -> ::std::option::Option<&crate::types::LoggingConfig> {
        self.logging_config.as_ref()
    }
    /// <p>For extensions that are modules, the public third-party extensions that must be activated in your account in order for the module itself to be activated.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.required_activated_types.is_none()`.
    pub fn required_activated_types(&self) -> &[crate::types::RequiredActivatedType] {
        self.required_activated_types.as_deref().unwrap_or_default()
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM execution role used to register the extension. This applies only to private extensions you have registered in your account. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_RegisterType.html">RegisterType</a>.</p>
    /// <p>If the registered extension calls any Amazon Web Services APIs, you must create an <i> <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html">IAM execution role</a> </i> that includes the necessary permissions to call those Amazon Web Services APIs, and provision that execution role in your account. CloudFormation then assumes that execution role to provide your extension with the appropriate credentials.</p>
    pub fn execution_role_arn(&self) -> ::std::option::Option<&str> {
        self.execution_role_arn.as_deref()
    }
    /// <p>The scope at which the extension is visible and usable in CloudFormation operations.</p>
    /// <p>Valid values include:</p>
    /// <ul>
    /// <li> <p> <code>PRIVATE</code>: The extension is only visible and usable within the account in which it is registered. CloudFormation marks any extensions you register as <code>PRIVATE</code>.</p> </li>
    /// <li> <p> <code>PUBLIC</code>: The extension is publicly visible and usable within any Amazon Web Services account.</p> </li>
    /// </ul>
    pub fn visibility(&self) -> ::std::option::Option<&crate::types::Visibility> {
        self.visibility.as_ref()
    }
    /// <p>The URL of the source code for the extension.</p>
    pub fn source_url(&self) -> ::std::option::Option<&str> {
        self.source_url.as_deref()
    }
    /// <p>The URL of a page providing detailed documentation for this extension.</p>
    pub fn documentation_url(&self) -> ::std::option::Option<&str> {
        self.documentation_url.as_deref()
    }
    /// <p>When the specified extension version was registered. This applies only to:</p>
    /// <ul>
    /// <li> <p>Private extensions you have registered in your account. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_RegisterType.html">RegisterType</a>.</p> </li>
    /// <li> <p>Public extensions you have activated in your account with auto-update specified. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_ActivateType.html">ActivateType</a>.</p> </li>
    /// </ul>
    pub fn last_updated(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_updated.as_ref()
    }
    /// <p>When the specified private extension version was registered or activated in your account.</p>
    pub fn time_created(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.time_created.as_ref()
    }
    /// <p>A JSON string that represent the current configuration data for the extension in this account and Region.</p>
    /// <p>To set the configuration data for an extension, use <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_SetTypeConfiguration.html">SetTypeConfiguration</a>. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/registry-register.html#registry-set-configuration">Configuring extensions at the account level</a> in the <i>CloudFormation User Guide</i>.</p>
    pub fn configuration_schema(&self) -> ::std::option::Option<&str> {
        self.configuration_schema.as_deref()
    }
    /// <p>The publisher ID of the extension publisher.</p>
    /// <p>This applies only to public third-party extensions. For private registered extensions, and extensions provided by Amazon Web Services, CloudFormation returns <code>null</code>.</p>
    pub fn publisher_id(&self) -> ::std::option::Option<&str> {
        self.publisher_id.as_deref()
    }
    /// <p>For public extensions that have been activated for this account and Region, the type name of the public extension.</p>
    /// <p>If you specified a <code>TypeNameAlias</code> when enabling the extension in this account and Region, CloudFormation treats that alias as the extension's type name within the account and Region, not the type name of the public extension. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/registry-public.html#registry-public-enable-alias">Specifying aliases to refer to extensions</a> in the <i>CloudFormation User Guide</i>.</p>
    pub fn original_type_name(&self) -> ::std::option::Option<&str> {
        self.original_type_name.as_deref()
    }
    /// <p>For public extensions that have been activated for this account and Region, the Amazon Resource Name (ARN) of the public extension.</p>
    pub fn original_type_arn(&self) -> ::std::option::Option<&str> {
        self.original_type_arn.as_deref()
    }
    /// <p>The version number of a public third-party extension.</p>
    /// <p>This applies only if you specify a public extension you have activated in your account, or specify a public extension without specifying a version. For all other extensions, CloudFormation returns <code>null</code>.</p>
    pub fn public_version_number(&self) -> ::std::option::Option<&str> {
        self.public_version_number.as_deref()
    }
    /// <p>The latest version of a public extension <i>that is available</i> for use.</p>
    /// <p>This only applies if you specify a public extension, and you don't specify a version. For all other requests, CloudFormation returns <code>null</code>.</p>
    pub fn latest_public_version(&self) -> ::std::option::Option<&str> {
        self.latest_public_version.as_deref()
    }
    /// <p>Whether the extension is activated in the account and Region.</p>
    /// <p>This only applies to public third-party extensions. For all other extensions, CloudFormation returns <code>null</code>.</p>
    pub fn is_activated(&self) -> ::std::option::Option<bool> {
        self.is_activated
    }
    /// <p>Whether CloudFormation automatically updates the extension in this account and Region when a new <i>minor</i> version is published by the extension publisher. Major versions released by the publisher must be manually updated. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/registry-public.html#registry-public-enable">Activating public extensions for use in your account</a> in the <i>CloudFormation User Guide</i>.</p>
    pub fn auto_update(&self) -> ::std::option::Option<bool> {
        self.auto_update
    }
}
impl ::aws_http::request_id::RequestId for DescribeTypeOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeTypeOutput {
    /// Creates a new builder-style object to manufacture [`DescribeTypeOutput`](crate::operation::describe_type::DescribeTypeOutput).
    pub fn builder() -> crate::operation::describe_type::builders::DescribeTypeOutputBuilder {
        crate::operation::describe_type::builders::DescribeTypeOutputBuilder::default()
    }
}

/// A builder for [`DescribeTypeOutput`](crate::operation::describe_type::DescribeTypeOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeTypeOutputBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<crate::types::RegistryType>,
    pub(crate) type_name: ::std::option::Option<::std::string::String>,
    pub(crate) default_version_id: ::std::option::Option<::std::string::String>,
    pub(crate) is_default_version: ::std::option::Option<bool>,
    pub(crate) type_tests_status: ::std::option::Option<crate::types::TypeTestsStatus>,
    pub(crate) type_tests_status_description: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) schema: ::std::option::Option<::std::string::String>,
    pub(crate) provisioning_type: ::std::option::Option<crate::types::ProvisioningType>,
    pub(crate) deprecated_status: ::std::option::Option<crate::types::DeprecatedStatus>,
    pub(crate) logging_config: ::std::option::Option<crate::types::LoggingConfig>,
    pub(crate) required_activated_types: ::std::option::Option<::std::vec::Vec<crate::types::RequiredActivatedType>>,
    pub(crate) execution_role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) visibility: ::std::option::Option<crate::types::Visibility>,
    pub(crate) source_url: ::std::option::Option<::std::string::String>,
    pub(crate) documentation_url: ::std::option::Option<::std::string::String>,
    pub(crate) last_updated: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) time_created: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) configuration_schema: ::std::option::Option<::std::string::String>,
    pub(crate) publisher_id: ::std::option::Option<::std::string::String>,
    pub(crate) original_type_name: ::std::option::Option<::std::string::String>,
    pub(crate) original_type_arn: ::std::option::Option<::std::string::String>,
    pub(crate) public_version_number: ::std::option::Option<::std::string::String>,
    pub(crate) latest_public_version: ::std::option::Option<::std::string::String>,
    pub(crate) is_activated: ::std::option::Option<bool>,
    pub(crate) auto_update: ::std::option::Option<bool>,
    _request_id: Option<String>,
}
impl DescribeTypeOutputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the extension.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the extension.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the extension.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The kind of extension.</p>
    pub fn r#type(mut self, input: crate::types::RegistryType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The kind of extension.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::RegistryType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The kind of extension.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::RegistryType> {
        &self.r#type
    }
    /// <p>The name of the extension.</p>
    /// <p>If the extension is a public third-party type you have activated with a type name alias, CloudFormation returns the type name alias. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_ActivateType.html">ActivateType</a>.</p>
    pub fn type_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.type_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the extension.</p>
    /// <p>If the extension is a public third-party type you have activated with a type name alias, CloudFormation returns the type name alias. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_ActivateType.html">ActivateType</a>.</p>
    pub fn set_type_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.type_name = input;
        self
    }
    /// <p>The name of the extension.</p>
    /// <p>If the extension is a public third-party type you have activated with a type name alias, CloudFormation returns the type name alias. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_ActivateType.html">ActivateType</a>.</p>
    pub fn get_type_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.type_name
    }
    /// <p>The ID of the default version of the extension. The default version is used when the extension version isn't specified.</p>
    /// <p>This applies only to private extensions you have registered in your account. For public extensions, both those provided by Amazon Web Services and published by third parties, CloudFormation returns <code>null</code>. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_RegisterType.html">RegisterType</a>.</p>
    /// <p>To set the default version of an extension, use <code>SetTypeDefaultVersion</code>.</p>
    pub fn default_version_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.default_version_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the default version of the extension. The default version is used when the extension version isn't specified.</p>
    /// <p>This applies only to private extensions you have registered in your account. For public extensions, both those provided by Amazon Web Services and published by third parties, CloudFormation returns <code>null</code>. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_RegisterType.html">RegisterType</a>.</p>
    /// <p>To set the default version of an extension, use <code>SetTypeDefaultVersion</code>.</p>
    pub fn set_default_version_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.default_version_id = input;
        self
    }
    /// <p>The ID of the default version of the extension. The default version is used when the extension version isn't specified.</p>
    /// <p>This applies only to private extensions you have registered in your account. For public extensions, both those provided by Amazon Web Services and published by third parties, CloudFormation returns <code>null</code>. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_RegisterType.html">RegisterType</a>.</p>
    /// <p>To set the default version of an extension, use <code>SetTypeDefaultVersion</code>.</p>
    pub fn get_default_version_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.default_version_id
    }
    /// <p>Whether the specified extension version is set as the default version.</p>
    /// <p>This applies only to private extensions you have registered in your account, and extensions published by Amazon Web Services. For public third-party extensions, whether they are activated in your account, CloudFormation returns <code>null</code>.</p>
    pub fn is_default_version(mut self, input: bool) -> Self {
        self.is_default_version = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether the specified extension version is set as the default version.</p>
    /// <p>This applies only to private extensions you have registered in your account, and extensions published by Amazon Web Services. For public third-party extensions, whether they are activated in your account, CloudFormation returns <code>null</code>.</p>
    pub fn set_is_default_version(mut self, input: ::std::option::Option<bool>) -> Self {
        self.is_default_version = input;
        self
    }
    /// <p>Whether the specified extension version is set as the default version.</p>
    /// <p>This applies only to private extensions you have registered in your account, and extensions published by Amazon Web Services. For public third-party extensions, whether they are activated in your account, CloudFormation returns <code>null</code>.</p>
    pub fn get_is_default_version(&self) -> &::std::option::Option<bool> {
        &self.is_default_version
    }
    /// <p>The contract test status of the registered extension version. To return the extension test status of a specific extension version, you must specify <code>VersionId</code>.</p>
    /// <p>This applies only to registered private extension versions. CloudFormation doesn't return this information for public extensions, whether they are activated in your account.</p>
    /// <ul>
    /// <li> <p> <code>PASSED</code>: The extension has passed all its contract tests.</p> <p>An extension must have a test status of <code>PASSED</code> before it can be published. For more information, see <a href="https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/resource-type-publish.html">Publishing extensions to make them available for public use</a> in the <i>CloudFormation Command Line Interface User Guide</i>.</p> </li>
    /// <li> <p> <code>FAILED</code>: The extension has failed one or more contract tests.</p> </li>
    /// <li> <p> <code>IN_PROGRESS</code>: Contract tests are currently being performed on the extension.</p> </li>
    /// <li> <p> <code>NOT_TESTED</code>: Contract tests haven't been performed on the extension.</p> </li>
    /// </ul>
    pub fn type_tests_status(mut self, input: crate::types::TypeTestsStatus) -> Self {
        self.type_tests_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The contract test status of the registered extension version. To return the extension test status of a specific extension version, you must specify <code>VersionId</code>.</p>
    /// <p>This applies only to registered private extension versions. CloudFormation doesn't return this information for public extensions, whether they are activated in your account.</p>
    /// <ul>
    /// <li> <p> <code>PASSED</code>: The extension has passed all its contract tests.</p> <p>An extension must have a test status of <code>PASSED</code> before it can be published. For more information, see <a href="https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/resource-type-publish.html">Publishing extensions to make them available for public use</a> in the <i>CloudFormation Command Line Interface User Guide</i>.</p> </li>
    /// <li> <p> <code>FAILED</code>: The extension has failed one or more contract tests.</p> </li>
    /// <li> <p> <code>IN_PROGRESS</code>: Contract tests are currently being performed on the extension.</p> </li>
    /// <li> <p> <code>NOT_TESTED</code>: Contract tests haven't been performed on the extension.</p> </li>
    /// </ul>
    pub fn set_type_tests_status(mut self, input: ::std::option::Option<crate::types::TypeTestsStatus>) -> Self {
        self.type_tests_status = input;
        self
    }
    /// <p>The contract test status of the registered extension version. To return the extension test status of a specific extension version, you must specify <code>VersionId</code>.</p>
    /// <p>This applies only to registered private extension versions. CloudFormation doesn't return this information for public extensions, whether they are activated in your account.</p>
    /// <ul>
    /// <li> <p> <code>PASSED</code>: The extension has passed all its contract tests.</p> <p>An extension must have a test status of <code>PASSED</code> before it can be published. For more information, see <a href="https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/resource-type-publish.html">Publishing extensions to make them available for public use</a> in the <i>CloudFormation Command Line Interface User Guide</i>.</p> </li>
    /// <li> <p> <code>FAILED</code>: The extension has failed one or more contract tests.</p> </li>
    /// <li> <p> <code>IN_PROGRESS</code>: Contract tests are currently being performed on the extension.</p> </li>
    /// <li> <p> <code>NOT_TESTED</code>: Contract tests haven't been performed on the extension.</p> </li>
    /// </ul>
    pub fn get_type_tests_status(&self) -> &::std::option::Option<crate::types::TypeTestsStatus> {
        &self.type_tests_status
    }
    /// <p>The description of the test status. To return the extension test status of a specific extension version, you must specify <code>VersionId</code>.</p>
    /// <p>This applies only to registered private extension versions. CloudFormation doesn't return this information for public extensions, whether they are activated in your account.</p>
    pub fn type_tests_status_description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.type_tests_status_description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the test status. To return the extension test status of a specific extension version, you must specify <code>VersionId</code>.</p>
    /// <p>This applies only to registered private extension versions. CloudFormation doesn't return this information for public extensions, whether they are activated in your account.</p>
    pub fn set_type_tests_status_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.type_tests_status_description = input;
        self
    }
    /// <p>The description of the test status. To return the extension test status of a specific extension version, you must specify <code>VersionId</code>.</p>
    /// <p>This applies only to registered private extension versions. CloudFormation doesn't return this information for public extensions, whether they are activated in your account.</p>
    pub fn get_type_tests_status_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.type_tests_status_description
    }
    /// <p>The description of the extension.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the extension.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the extension.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The schema that defines the extension.</p>
    /// <p>For more information about extension schemas, see <a href="https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/resource-type-schema.html">Resource Provider Schema</a> in the <i>CloudFormation CLI User Guide</i>.</p>
    pub fn schema(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.schema = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The schema that defines the extension.</p>
    /// <p>For more information about extension schemas, see <a href="https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/resource-type-schema.html">Resource Provider Schema</a> in the <i>CloudFormation CLI User Guide</i>.</p>
    pub fn set_schema(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.schema = input;
        self
    }
    /// <p>The schema that defines the extension.</p>
    /// <p>For more information about extension schemas, see <a href="https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/resource-type-schema.html">Resource Provider Schema</a> in the <i>CloudFormation CLI User Guide</i>.</p>
    pub fn get_schema(&self) -> &::std::option::Option<::std::string::String> {
        &self.schema
    }
    /// <p>For resource type extensions, the provisioning behavior of the resource type. CloudFormation determines the provisioning type during registration, based on the types of handlers in the schema handler package submitted.</p>
    /// <p>Valid values include:</p>
    /// <ul>
    /// <li> <p> <code>FULLY_MUTABLE</code>: The resource type includes an update handler to process updates to the type during stack update operations.</p> </li>
    /// <li> <p> <code>IMMUTABLE</code>: The resource type doesn't include an update handler, so the type can't be updated and must instead be replaced during stack update operations.</p> </li>
    /// <li> <p> <code>NON_PROVISIONABLE</code>: The resource type doesn't include all the following handlers, and therefore can't actually be provisioned.</p>
    /// <ul>
    /// <li> <p>create</p> </li>
    /// <li> <p>read</p> </li>
    /// <li> <p>delete</p> </li>
    /// </ul> </li>
    /// </ul>
    pub fn provisioning_type(mut self, input: crate::types::ProvisioningType) -> Self {
        self.provisioning_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>For resource type extensions, the provisioning behavior of the resource type. CloudFormation determines the provisioning type during registration, based on the types of handlers in the schema handler package submitted.</p>
    /// <p>Valid values include:</p>
    /// <ul>
    /// <li> <p> <code>FULLY_MUTABLE</code>: The resource type includes an update handler to process updates to the type during stack update operations.</p> </li>
    /// <li> <p> <code>IMMUTABLE</code>: The resource type doesn't include an update handler, so the type can't be updated and must instead be replaced during stack update operations.</p> </li>
    /// <li> <p> <code>NON_PROVISIONABLE</code>: The resource type doesn't include all the following handlers, and therefore can't actually be provisioned.</p>
    /// <ul>
    /// <li> <p>create</p> </li>
    /// <li> <p>read</p> </li>
    /// <li> <p>delete</p> </li>
    /// </ul> </li>
    /// </ul>
    pub fn set_provisioning_type(mut self, input: ::std::option::Option<crate::types::ProvisioningType>) -> Self {
        self.provisioning_type = input;
        self
    }
    /// <p>For resource type extensions, the provisioning behavior of the resource type. CloudFormation determines the provisioning type during registration, based on the types of handlers in the schema handler package submitted.</p>
    /// <p>Valid values include:</p>
    /// <ul>
    /// <li> <p> <code>FULLY_MUTABLE</code>: The resource type includes an update handler to process updates to the type during stack update operations.</p> </li>
    /// <li> <p> <code>IMMUTABLE</code>: The resource type doesn't include an update handler, so the type can't be updated and must instead be replaced during stack update operations.</p> </li>
    /// <li> <p> <code>NON_PROVISIONABLE</code>: The resource type doesn't include all the following handlers, and therefore can't actually be provisioned.</p>
    /// <ul>
    /// <li> <p>create</p> </li>
    /// <li> <p>read</p> </li>
    /// <li> <p>delete</p> </li>
    /// </ul> </li>
    /// </ul>
    pub fn get_provisioning_type(&self) -> &::std::option::Option<crate::types::ProvisioningType> {
        &self.provisioning_type
    }
    /// <p>The deprecation status of the extension version.</p>
    /// <p>Valid values include:</p>
    /// <ul>
    /// <li> <p> <code>LIVE</code>: The extension is activated or registered and can be used in CloudFormation operations, dependent on its provisioning behavior and visibility scope.</p> </li>
    /// <li> <p> <code>DEPRECATED</code>: The extension has been deactivated or deregistered and can no longer be used in CloudFormation operations.</p> </li>
    /// </ul>
    /// <p>For public third-party extensions, CloudFormation returns <code>null</code>.</p>
    pub fn deprecated_status(mut self, input: crate::types::DeprecatedStatus) -> Self {
        self.deprecated_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The deprecation status of the extension version.</p>
    /// <p>Valid values include:</p>
    /// <ul>
    /// <li> <p> <code>LIVE</code>: The extension is activated or registered and can be used in CloudFormation operations, dependent on its provisioning behavior and visibility scope.</p> </li>
    /// <li> <p> <code>DEPRECATED</code>: The extension has been deactivated or deregistered and can no longer be used in CloudFormation operations.</p> </li>
    /// </ul>
    /// <p>For public third-party extensions, CloudFormation returns <code>null</code>.</p>
    pub fn set_deprecated_status(mut self, input: ::std::option::Option<crate::types::DeprecatedStatus>) -> Self {
        self.deprecated_status = input;
        self
    }
    /// <p>The deprecation status of the extension version.</p>
    /// <p>Valid values include:</p>
    /// <ul>
    /// <li> <p> <code>LIVE</code>: The extension is activated or registered and can be used in CloudFormation operations, dependent on its provisioning behavior and visibility scope.</p> </li>
    /// <li> <p> <code>DEPRECATED</code>: The extension has been deactivated or deregistered and can no longer be used in CloudFormation operations.</p> </li>
    /// </ul>
    /// <p>For public third-party extensions, CloudFormation returns <code>null</code>.</p>
    pub fn get_deprecated_status(&self) -> &::std::option::Option<crate::types::DeprecatedStatus> {
        &self.deprecated_status
    }
    /// <p>Contains logging configuration information for private extensions. This applies only to private extensions you have registered in your account. For public extensions, both those provided by Amazon Web Services and published by third parties, CloudFormation returns <code>null</code>. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_RegisterType.html">RegisterType</a>.</p>
    pub fn logging_config(mut self, input: crate::types::LoggingConfig) -> Self {
        self.logging_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains logging configuration information for private extensions. This applies only to private extensions you have registered in your account. For public extensions, both those provided by Amazon Web Services and published by third parties, CloudFormation returns <code>null</code>. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_RegisterType.html">RegisterType</a>.</p>
    pub fn set_logging_config(mut self, input: ::std::option::Option<crate::types::LoggingConfig>) -> Self {
        self.logging_config = input;
        self
    }
    /// <p>Contains logging configuration information for private extensions. This applies only to private extensions you have registered in your account. For public extensions, both those provided by Amazon Web Services and published by third parties, CloudFormation returns <code>null</code>. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_RegisterType.html">RegisterType</a>.</p>
    pub fn get_logging_config(&self) -> &::std::option::Option<crate::types::LoggingConfig> {
        &self.logging_config
    }
    /// Appends an item to `required_activated_types`.
    ///
    /// To override the contents of this collection use [`set_required_activated_types`](Self::set_required_activated_types).
    ///
    /// <p>For extensions that are modules, the public third-party extensions that must be activated in your account in order for the module itself to be activated.</p>
    pub fn required_activated_types(mut self, input: crate::types::RequiredActivatedType) -> Self {
        let mut v = self.required_activated_types.unwrap_or_default();
        v.push(input);
        self.required_activated_types = ::std::option::Option::Some(v);
        self
    }
    /// <p>For extensions that are modules, the public third-party extensions that must be activated in your account in order for the module itself to be activated.</p>
    pub fn set_required_activated_types(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RequiredActivatedType>>) -> Self {
        self.required_activated_types = input;
        self
    }
    /// <p>For extensions that are modules, the public third-party extensions that must be activated in your account in order for the module itself to be activated.</p>
    pub fn get_required_activated_types(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RequiredActivatedType>> {
        &self.required_activated_types
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM execution role used to register the extension. This applies only to private extensions you have registered in your account. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_RegisterType.html">RegisterType</a>.</p>
    /// <p>If the registered extension calls any Amazon Web Services APIs, you must create an <i> <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html">IAM execution role</a> </i> that includes the necessary permissions to call those Amazon Web Services APIs, and provision that execution role in your account. CloudFormation then assumes that execution role to provide your extension with the appropriate credentials.</p>
    pub fn execution_role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.execution_role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM execution role used to register the extension. This applies only to private extensions you have registered in your account. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_RegisterType.html">RegisterType</a>.</p>
    /// <p>If the registered extension calls any Amazon Web Services APIs, you must create an <i> <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html">IAM execution role</a> </i> that includes the necessary permissions to call those Amazon Web Services APIs, and provision that execution role in your account. CloudFormation then assumes that execution role to provide your extension with the appropriate credentials.</p>
    pub fn set_execution_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.execution_role_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM execution role used to register the extension. This applies only to private extensions you have registered in your account. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_RegisterType.html">RegisterType</a>.</p>
    /// <p>If the registered extension calls any Amazon Web Services APIs, you must create an <i> <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html">IAM execution role</a> </i> that includes the necessary permissions to call those Amazon Web Services APIs, and provision that execution role in your account. CloudFormation then assumes that execution role to provide your extension with the appropriate credentials.</p>
    pub fn get_execution_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.execution_role_arn
    }
    /// <p>The scope at which the extension is visible and usable in CloudFormation operations.</p>
    /// <p>Valid values include:</p>
    /// <ul>
    /// <li> <p> <code>PRIVATE</code>: The extension is only visible and usable within the account in which it is registered. CloudFormation marks any extensions you register as <code>PRIVATE</code>.</p> </li>
    /// <li> <p> <code>PUBLIC</code>: The extension is publicly visible and usable within any Amazon Web Services account.</p> </li>
    /// </ul>
    pub fn visibility(mut self, input: crate::types::Visibility) -> Self {
        self.visibility = ::std::option::Option::Some(input);
        self
    }
    /// <p>The scope at which the extension is visible and usable in CloudFormation operations.</p>
    /// <p>Valid values include:</p>
    /// <ul>
    /// <li> <p> <code>PRIVATE</code>: The extension is only visible and usable within the account in which it is registered. CloudFormation marks any extensions you register as <code>PRIVATE</code>.</p> </li>
    /// <li> <p> <code>PUBLIC</code>: The extension is publicly visible and usable within any Amazon Web Services account.</p> </li>
    /// </ul>
    pub fn set_visibility(mut self, input: ::std::option::Option<crate::types::Visibility>) -> Self {
        self.visibility = input;
        self
    }
    /// <p>The scope at which the extension is visible and usable in CloudFormation operations.</p>
    /// <p>Valid values include:</p>
    /// <ul>
    /// <li> <p> <code>PRIVATE</code>: The extension is only visible and usable within the account in which it is registered. CloudFormation marks any extensions you register as <code>PRIVATE</code>.</p> </li>
    /// <li> <p> <code>PUBLIC</code>: The extension is publicly visible and usable within any Amazon Web Services account.</p> </li>
    /// </ul>
    pub fn get_visibility(&self) -> &::std::option::Option<crate::types::Visibility> {
        &self.visibility
    }
    /// <p>The URL of the source code for the extension.</p>
    pub fn source_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The URL of the source code for the extension.</p>
    pub fn set_source_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_url = input;
        self
    }
    /// <p>The URL of the source code for the extension.</p>
    pub fn get_source_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_url
    }
    /// <p>The URL of a page providing detailed documentation for this extension.</p>
    pub fn documentation_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.documentation_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The URL of a page providing detailed documentation for this extension.</p>
    pub fn set_documentation_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.documentation_url = input;
        self
    }
    /// <p>The URL of a page providing detailed documentation for this extension.</p>
    pub fn get_documentation_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.documentation_url
    }
    /// <p>When the specified extension version was registered. This applies only to:</p>
    /// <ul>
    /// <li> <p>Private extensions you have registered in your account. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_RegisterType.html">RegisterType</a>.</p> </li>
    /// <li> <p>Public extensions you have activated in your account with auto-update specified. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_ActivateType.html">ActivateType</a>.</p> </li>
    /// </ul>
    pub fn last_updated(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_updated = ::std::option::Option::Some(input);
        self
    }
    /// <p>When the specified extension version was registered. This applies only to:</p>
    /// <ul>
    /// <li> <p>Private extensions you have registered in your account. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_RegisterType.html">RegisterType</a>.</p> </li>
    /// <li> <p>Public extensions you have activated in your account with auto-update specified. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_ActivateType.html">ActivateType</a>.</p> </li>
    /// </ul>
    pub fn set_last_updated(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_updated = input;
        self
    }
    /// <p>When the specified extension version was registered. This applies only to:</p>
    /// <ul>
    /// <li> <p>Private extensions you have registered in your account. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_RegisterType.html">RegisterType</a>.</p> </li>
    /// <li> <p>Public extensions you have activated in your account with auto-update specified. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_ActivateType.html">ActivateType</a>.</p> </li>
    /// </ul>
    pub fn get_last_updated(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_updated
    }
    /// <p>When the specified private extension version was registered or activated in your account.</p>
    pub fn time_created(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.time_created = ::std::option::Option::Some(input);
        self
    }
    /// <p>When the specified private extension version was registered or activated in your account.</p>
    pub fn set_time_created(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.time_created = input;
        self
    }
    /// <p>When the specified private extension version was registered or activated in your account.</p>
    pub fn get_time_created(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.time_created
    }
    /// <p>A JSON string that represent the current configuration data for the extension in this account and Region.</p>
    /// <p>To set the configuration data for an extension, use <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_SetTypeConfiguration.html">SetTypeConfiguration</a>. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/registry-register.html#registry-set-configuration">Configuring extensions at the account level</a> in the <i>CloudFormation User Guide</i>.</p>
    pub fn configuration_schema(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.configuration_schema = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A JSON string that represent the current configuration data for the extension in this account and Region.</p>
    /// <p>To set the configuration data for an extension, use <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_SetTypeConfiguration.html">SetTypeConfiguration</a>. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/registry-register.html#registry-set-configuration">Configuring extensions at the account level</a> in the <i>CloudFormation User Guide</i>.</p>
    pub fn set_configuration_schema(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.configuration_schema = input;
        self
    }
    /// <p>A JSON string that represent the current configuration data for the extension in this account and Region.</p>
    /// <p>To set the configuration data for an extension, use <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_SetTypeConfiguration.html">SetTypeConfiguration</a>. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/registry-register.html#registry-set-configuration">Configuring extensions at the account level</a> in the <i>CloudFormation User Guide</i>.</p>
    pub fn get_configuration_schema(&self) -> &::std::option::Option<::std::string::String> {
        &self.configuration_schema
    }
    /// <p>The publisher ID of the extension publisher.</p>
    /// <p>This applies only to public third-party extensions. For private registered extensions, and extensions provided by Amazon Web Services, CloudFormation returns <code>null</code>.</p>
    pub fn publisher_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.publisher_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The publisher ID of the extension publisher.</p>
    /// <p>This applies only to public third-party extensions. For private registered extensions, and extensions provided by Amazon Web Services, CloudFormation returns <code>null</code>.</p>
    pub fn set_publisher_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.publisher_id = input;
        self
    }
    /// <p>The publisher ID of the extension publisher.</p>
    /// <p>This applies only to public third-party extensions. For private registered extensions, and extensions provided by Amazon Web Services, CloudFormation returns <code>null</code>.</p>
    pub fn get_publisher_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.publisher_id
    }
    /// <p>For public extensions that have been activated for this account and Region, the type name of the public extension.</p>
    /// <p>If you specified a <code>TypeNameAlias</code> when enabling the extension in this account and Region, CloudFormation treats that alias as the extension's type name within the account and Region, not the type name of the public extension. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/registry-public.html#registry-public-enable-alias">Specifying aliases to refer to extensions</a> in the <i>CloudFormation User Guide</i>.</p>
    pub fn original_type_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.original_type_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>For public extensions that have been activated for this account and Region, the type name of the public extension.</p>
    /// <p>If you specified a <code>TypeNameAlias</code> when enabling the extension in this account and Region, CloudFormation treats that alias as the extension's type name within the account and Region, not the type name of the public extension. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/registry-public.html#registry-public-enable-alias">Specifying aliases to refer to extensions</a> in the <i>CloudFormation User Guide</i>.</p>
    pub fn set_original_type_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.original_type_name = input;
        self
    }
    /// <p>For public extensions that have been activated for this account and Region, the type name of the public extension.</p>
    /// <p>If you specified a <code>TypeNameAlias</code> when enabling the extension in this account and Region, CloudFormation treats that alias as the extension's type name within the account and Region, not the type name of the public extension. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/registry-public.html#registry-public-enable-alias">Specifying aliases to refer to extensions</a> in the <i>CloudFormation User Guide</i>.</p>
    pub fn get_original_type_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.original_type_name
    }
    /// <p>For public extensions that have been activated for this account and Region, the Amazon Resource Name (ARN) of the public extension.</p>
    pub fn original_type_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.original_type_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>For public extensions that have been activated for this account and Region, the Amazon Resource Name (ARN) of the public extension.</p>
    pub fn set_original_type_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.original_type_arn = input;
        self
    }
    /// <p>For public extensions that have been activated for this account and Region, the Amazon Resource Name (ARN) of the public extension.</p>
    pub fn get_original_type_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.original_type_arn
    }
    /// <p>The version number of a public third-party extension.</p>
    /// <p>This applies only if you specify a public extension you have activated in your account, or specify a public extension without specifying a version. For all other extensions, CloudFormation returns <code>null</code>.</p>
    pub fn public_version_number(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.public_version_number = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version number of a public third-party extension.</p>
    /// <p>This applies only if you specify a public extension you have activated in your account, or specify a public extension without specifying a version. For all other extensions, CloudFormation returns <code>null</code>.</p>
    pub fn set_public_version_number(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.public_version_number = input;
        self
    }
    /// <p>The version number of a public third-party extension.</p>
    /// <p>This applies only if you specify a public extension you have activated in your account, or specify a public extension without specifying a version. For all other extensions, CloudFormation returns <code>null</code>.</p>
    pub fn get_public_version_number(&self) -> &::std::option::Option<::std::string::String> {
        &self.public_version_number
    }
    /// <p>The latest version of a public extension <i>that is available</i> for use.</p>
    /// <p>This only applies if you specify a public extension, and you don't specify a version. For all other requests, CloudFormation returns <code>null</code>.</p>
    pub fn latest_public_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.latest_public_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The latest version of a public extension <i>that is available</i> for use.</p>
    /// <p>This only applies if you specify a public extension, and you don't specify a version. For all other requests, CloudFormation returns <code>null</code>.</p>
    pub fn set_latest_public_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.latest_public_version = input;
        self
    }
    /// <p>The latest version of a public extension <i>that is available</i> for use.</p>
    /// <p>This only applies if you specify a public extension, and you don't specify a version. For all other requests, CloudFormation returns <code>null</code>.</p>
    pub fn get_latest_public_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.latest_public_version
    }
    /// <p>Whether the extension is activated in the account and Region.</p>
    /// <p>This only applies to public third-party extensions. For all other extensions, CloudFormation returns <code>null</code>.</p>
    pub fn is_activated(mut self, input: bool) -> Self {
        self.is_activated = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether the extension is activated in the account and Region.</p>
    /// <p>This only applies to public third-party extensions. For all other extensions, CloudFormation returns <code>null</code>.</p>
    pub fn set_is_activated(mut self, input: ::std::option::Option<bool>) -> Self {
        self.is_activated = input;
        self
    }
    /// <p>Whether the extension is activated in the account and Region.</p>
    /// <p>This only applies to public third-party extensions. For all other extensions, CloudFormation returns <code>null</code>.</p>
    pub fn get_is_activated(&self) -> &::std::option::Option<bool> {
        &self.is_activated
    }
    /// <p>Whether CloudFormation automatically updates the extension in this account and Region when a new <i>minor</i> version is published by the extension publisher. Major versions released by the publisher must be manually updated. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/registry-public.html#registry-public-enable">Activating public extensions for use in your account</a> in the <i>CloudFormation User Guide</i>.</p>
    pub fn auto_update(mut self, input: bool) -> Self {
        self.auto_update = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether CloudFormation automatically updates the extension in this account and Region when a new <i>minor</i> version is published by the extension publisher. Major versions released by the publisher must be manually updated. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/registry-public.html#registry-public-enable">Activating public extensions for use in your account</a> in the <i>CloudFormation User Guide</i>.</p>
    pub fn set_auto_update(mut self, input: ::std::option::Option<bool>) -> Self {
        self.auto_update = input;
        self
    }
    /// <p>Whether CloudFormation automatically updates the extension in this account and Region when a new <i>minor</i> version is published by the extension publisher. Major versions released by the publisher must be manually updated. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/registry-public.html#registry-public-enable">Activating public extensions for use in your account</a> in the <i>CloudFormation User Guide</i>.</p>
    pub fn get_auto_update(&self) -> &::std::option::Option<bool> {
        &self.auto_update
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeTypeOutput`](crate::operation::describe_type::DescribeTypeOutput).
    pub fn build(self) -> crate::operation::describe_type::DescribeTypeOutput {
        crate::operation::describe_type::DescribeTypeOutput {
            arn: self.arn,
            r#type: self.r#type,
            type_name: self.type_name,
            default_version_id: self.default_version_id,
            is_default_version: self.is_default_version,
            type_tests_status: self.type_tests_status,
            type_tests_status_description: self.type_tests_status_description,
            description: self.description,
            schema: self.schema,
            provisioning_type: self.provisioning_type,
            deprecated_status: self.deprecated_status,
            logging_config: self.logging_config,
            required_activated_types: self.required_activated_types,
            execution_role_arn: self.execution_role_arn,
            visibility: self.visibility,
            source_url: self.source_url,
            documentation_url: self.documentation_url,
            last_updated: self.last_updated,
            time_created: self.time_created,
            configuration_schema: self.configuration_schema,
            publisher_id: self.publisher_id,
            original_type_name: self.original_type_name,
            original_type_arn: self.original_type_arn,
            public_version_number: self.public_version_number,
            latest_public_version: self.latest_public_version,
            is_activated: self.is_activated,
            auto_update: self.auto_update,
            _request_id: self._request_id,
        }
    }
}
