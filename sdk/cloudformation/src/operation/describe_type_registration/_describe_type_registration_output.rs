// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeTypeRegistrationOutput {
    /// <p>The current status of the extension registration request.</p>
    #[doc(hidden)]
    pub progress_status: std::option::Option<crate::types::RegistrationStatus>,
    /// <p>The description of the extension registration request.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the extension being registered.</p>
    /// <p>For registration requests with a <code>ProgressStatus</code> of other than <code>COMPLETE</code>, this will be <code>null</code>.</p>
    #[doc(hidden)]
    pub type_arn: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of this specific version of the extension being registered.</p>
    /// <p>For registration requests with a <code>ProgressStatus</code> of other than <code>COMPLETE</code>, this will be <code>null</code>.</p>
    #[doc(hidden)]
    pub type_version_arn: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeTypeRegistrationOutput {
    /// <p>The current status of the extension registration request.</p>
    pub fn progress_status(&self) -> std::option::Option<&crate::types::RegistrationStatus> {
        self.progress_status.as_ref()
    }
    /// <p>The description of the extension registration request.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the extension being registered.</p>
    /// <p>For registration requests with a <code>ProgressStatus</code> of other than <code>COMPLETE</code>, this will be <code>null</code>.</p>
    pub fn type_arn(&self) -> std::option::Option<&str> {
        self.type_arn.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of this specific version of the extension being registered.</p>
    /// <p>For registration requests with a <code>ProgressStatus</code> of other than <code>COMPLETE</code>, this will be <code>null</code>.</p>
    pub fn type_version_arn(&self) -> std::option::Option<&str> {
        self.type_version_arn.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeTypeRegistrationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeTypeRegistrationOutput {
    /// Creates a new builder-style object to manufacture [`DescribeTypeRegistrationOutput`](crate::operation::describe_type_registration::DescribeTypeRegistrationOutput).
    pub fn builder(
    ) -> crate::operation::describe_type_registration::builders::DescribeTypeRegistrationOutputBuilder
    {
        crate::operation::describe_type_registration::builders::DescribeTypeRegistrationOutputBuilder::default()
    }
}

/// A builder for [`DescribeTypeRegistrationOutput`](crate::operation::describe_type_registration::DescribeTypeRegistrationOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeTypeRegistrationOutputBuilder {
    pub(crate) progress_status: std::option::Option<crate::types::RegistrationStatus>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) type_arn: std::option::Option<std::string::String>,
    pub(crate) type_version_arn: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeTypeRegistrationOutputBuilder {
    /// <p>The current status of the extension registration request.</p>
    pub fn progress_status(mut self, input: crate::types::RegistrationStatus) -> Self {
        self.progress_status = Some(input);
        self
    }
    /// <p>The current status of the extension registration request.</p>
    pub fn set_progress_status(
        mut self,
        input: std::option::Option<crate::types::RegistrationStatus>,
    ) -> Self {
        self.progress_status = input;
        self
    }
    /// <p>The description of the extension registration request.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The description of the extension registration request.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the extension being registered.</p>
    /// <p>For registration requests with a <code>ProgressStatus</code> of other than <code>COMPLETE</code>, this will be <code>null</code>.</p>
    pub fn type_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.type_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the extension being registered.</p>
    /// <p>For registration requests with a <code>ProgressStatus</code> of other than <code>COMPLETE</code>, this will be <code>null</code>.</p>
    pub fn set_type_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.type_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of this specific version of the extension being registered.</p>
    /// <p>For registration requests with a <code>ProgressStatus</code> of other than <code>COMPLETE</code>, this will be <code>null</code>.</p>
    pub fn type_version_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.type_version_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of this specific version of the extension being registered.</p>
    /// <p>For registration requests with a <code>ProgressStatus</code> of other than <code>COMPLETE</code>, this will be <code>null</code>.</p>
    pub fn set_type_version_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.type_version_arn = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeTypeRegistrationOutput`](crate::operation::describe_type_registration::DescribeTypeRegistrationOutput).
    pub fn build(
        self,
    ) -> crate::operation::describe_type_registration::DescribeTypeRegistrationOutput {
        crate::operation::describe_type_registration::DescribeTypeRegistrationOutput {
            progress_status: self.progress_status,
            description: self.description,
            type_arn: self.type_arn,
            type_version_arn: self.type_version_arn,
            _request_id: self._request_id,
        }
    }
}
