// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::list_imports::_list_imports_output::ListImportsOutputBuilder;

pub use crate::operation::list_imports::_list_imports_input::ListImportsInputBuilder;

/// Fluent builder constructing a request to `ListImports`.
///
/// <p>Lists all stacks that are importing an exported output value. To modify or remove an exported output value, first use this action to see which stacks are using it. To see the exported output values in your account, see <code>ListExports</code>.</p>
/// <p>For more information about importing an exported output value, see the <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-importvalue.html"> <code>Fn::ImportValue</code> </a> function.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListImportsFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::list_imports::builders::ListImportsInputBuilder,
}
impl ListImportsFluentBuilder {
    /// Creates a new `ListImports`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::list_imports::ListImports,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::operation::list_imports::ListImportsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::list_imports::ListImportsOutput,
        aws_smithy_http::result::SdkError<crate::operation::list_imports::ListImportsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::list_imports::paginator::ListImportsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::operation::list_imports::paginator::ListImportsPaginator {
        crate::operation::list_imports::paginator::ListImportsPaginator::new(
            self.handle,
            self.inner,
        )
    }
    /// <p>The name of the exported output value. CloudFormation returns the stack names that are importing this value.</p>
    pub fn export_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.export_name(input.into());
        self
    }
    /// <p>The name of the exported output value. CloudFormation returns the stack names that are importing this value.</p>
    pub fn set_export_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_export_name(input);
        self
    }
    /// <p>A string (provided by the <code>ListImports</code> response output) that identifies the next page of stacks that are importing the specified exported output value.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>A string (provided by the <code>ListImports</code> response output) that identifies the next page of stacks that are importing the specified exported output value.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
}
