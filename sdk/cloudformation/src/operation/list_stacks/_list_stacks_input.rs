// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The input for <code>ListStacks</code> action.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListStacksInput {
    /// <p>A string that identifies the next page of stacks that you want to retrieve.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>Stack status to use as a filter. Specify one or more stack status codes to list only stacks with the specified status codes. For a complete list of stack status codes, see the <code>StackStatus</code> parameter of the <code>Stack</code> data type.</p>
    pub stack_status_filter: ::std::option::Option<::std::vec::Vec<crate::types::StackStatus>>,
}
impl ListStacksInput {
    /// <p>A string that identifies the next page of stacks that you want to retrieve.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>Stack status to use as a filter. Specify one or more stack status codes to list only stacks with the specified status codes. For a complete list of stack status codes, see the <code>StackStatus</code> parameter of the <code>Stack</code> data type.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.stack_status_filter.is_none()`.
    pub fn stack_status_filter(&self) -> &[crate::types::StackStatus] {
        self.stack_status_filter.as_deref().unwrap_or_default()
    }
}
impl ListStacksInput {
    /// Creates a new builder-style object to manufacture [`ListStacksInput`](crate::operation::list_stacks::ListStacksInput).
    pub fn builder() -> crate::operation::list_stacks::builders::ListStacksInputBuilder {
        crate::operation::list_stacks::builders::ListStacksInputBuilder::default()
    }
}

/// A builder for [`ListStacksInput`](crate::operation::list_stacks::ListStacksInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListStacksInputBuilder {
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) stack_status_filter: ::std::option::Option<::std::vec::Vec<crate::types::StackStatus>>,
}
impl ListStacksInputBuilder {
    /// <p>A string that identifies the next page of stacks that you want to retrieve.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A string that identifies the next page of stacks that you want to retrieve.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>A string that identifies the next page of stacks that you want to retrieve.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Appends an item to `stack_status_filter`.
    ///
    /// To override the contents of this collection use [`set_stack_status_filter`](Self::set_stack_status_filter).
    ///
    /// <p>Stack status to use as a filter. Specify one or more stack status codes to list only stacks with the specified status codes. For a complete list of stack status codes, see the <code>StackStatus</code> parameter of the <code>Stack</code> data type.</p>
    pub fn stack_status_filter(mut self, input: crate::types::StackStatus) -> Self {
        let mut v = self.stack_status_filter.unwrap_or_default();
        v.push(input);
        self.stack_status_filter = ::std::option::Option::Some(v);
        self
    }
    /// <p>Stack status to use as a filter. Specify one or more stack status codes to list only stacks with the specified status codes. For a complete list of stack status codes, see the <code>StackStatus</code> parameter of the <code>Stack</code> data type.</p>
    pub fn set_stack_status_filter(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::StackStatus>>) -> Self {
        self.stack_status_filter = input;
        self
    }
    /// <p>Stack status to use as a filter. Specify one or more stack status codes to list only stacks with the specified status codes. For a complete list of stack status codes, see the <code>StackStatus</code> parameter of the <code>Stack</code> data type.</p>
    pub fn get_stack_status_filter(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StackStatus>> {
        &self.stack_status_filter
    }
    /// Consumes the builder and constructs a [`ListStacksInput`](crate::operation::list_stacks::ListStacksInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::list_stacks::ListStacksInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::list_stacks::ListStacksInput {
            next_token: self.next_token,
            stack_status_filter: self.stack_status_filter,
        })
    }
}
