// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The output for a <code>DescribeStackEvents</code> action.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeStackEventsOutput {
    /// <p>A list of <code>StackEvents</code> structures.</p>
    pub stack_events: ::std::option::Option<::std::vec::Vec<crate::types::StackEvent>>,
    /// <p>If the output exceeds 1 MB in size, a string that identifies the next page of events. If no additional page exists, this value is null.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl DescribeStackEventsOutput {
    /// <p>A list of <code>StackEvents</code> structures.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.stack_events.is_none()`.
    pub fn stack_events(&self) -> &[crate::types::StackEvent] {
        self.stack_events.as_deref().unwrap_or_default()
    }
    /// <p>If the output exceeds 1 MB in size, a string that identifies the next page of events. If no additional page exists, this value is null.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ::aws_http::request_id::RequestId for DescribeStackEventsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeStackEventsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeStackEventsOutput`](crate::operation::describe_stack_events::DescribeStackEventsOutput).
    pub fn builder() -> crate::operation::describe_stack_events::builders::DescribeStackEventsOutputBuilder {
        crate::operation::describe_stack_events::builders::DescribeStackEventsOutputBuilder::default()
    }
}

/// A builder for [`DescribeStackEventsOutput`](crate::operation::describe_stack_events::DescribeStackEventsOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeStackEventsOutputBuilder {
    pub(crate) stack_events: ::std::option::Option<::std::vec::Vec<crate::types::StackEvent>>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl DescribeStackEventsOutputBuilder {
    /// Appends an item to `stack_events`.
    ///
    /// To override the contents of this collection use [`set_stack_events`](Self::set_stack_events).
    ///
    /// <p>A list of <code>StackEvents</code> structures.</p>
    pub fn stack_events(mut self, input: crate::types::StackEvent) -> Self {
        let mut v = self.stack_events.unwrap_or_default();
        v.push(input);
        self.stack_events = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of <code>StackEvents</code> structures.</p>
    pub fn set_stack_events(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::StackEvent>>) -> Self {
        self.stack_events = input;
        self
    }
    /// <p>A list of <code>StackEvents</code> structures.</p>
    pub fn get_stack_events(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StackEvent>> {
        &self.stack_events
    }
    /// <p>If the output exceeds 1 MB in size, a string that identifies the next page of events. If no additional page exists, this value is null.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If the output exceeds 1 MB in size, a string that identifies the next page of events. If no additional page exists, this value is null.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>If the output exceeds 1 MB in size, a string that identifies the next page of events. If no additional page exists, this value is null.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeStackEventsOutput`](crate::operation::describe_stack_events::DescribeStackEventsOutput).
    pub fn build(self) -> crate::operation::describe_stack_events::DescribeStackEventsOutput {
        crate::operation::describe_stack_events::DescribeStackEventsOutput {
            stack_events: self.stack_events,
            next_token: self.next_token,
            _request_id: self._request_id,
        }
    }
}
