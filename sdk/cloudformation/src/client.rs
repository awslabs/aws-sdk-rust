// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[derive(std::fmt::Debug)]
pub(crate) struct Handle<C = aws_hyper::DynConnector> {
    client: aws_hyper::Client<C>,
    conf: crate::Config,
}

#[derive(Clone, std::fmt::Debug)]
pub struct Client<C = aws_hyper::DynConnector> {
    handle: std::sync::Arc<Handle<C>>,
}
impl<C> Client<C> {
    pub fn from_conf_conn(conf: crate::Config, conn: C) -> Self {
        let client = aws_hyper::Client::new(conn);
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl Client {
    #[cfg(any(feature = "rustls", feature = "native-tls"))]
    pub fn from_env() -> Self {
        Self::from_conf(crate::Config::builder().build())
    }

    #[cfg(any(feature = "rustls", feature = "native-tls"))]
    pub fn from_conf(conf: crate::Config) -> Self {
        let client = aws_hyper::Client::https();
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}
impl<C> Client<C>
where
    C: aws_hyper::SmithyConnector,
{
    pub fn cancel_update_stack(&self) -> fluent_builders::CancelUpdateStack<C> {
        fluent_builders::CancelUpdateStack::new(self.handle.clone())
    }
    pub fn continue_update_rollback(&self) -> fluent_builders::ContinueUpdateRollback<C> {
        fluent_builders::ContinueUpdateRollback::new(self.handle.clone())
    }
    pub fn create_change_set(&self) -> fluent_builders::CreateChangeSet<C> {
        fluent_builders::CreateChangeSet::new(self.handle.clone())
    }
    pub fn create_stack(&self) -> fluent_builders::CreateStack<C> {
        fluent_builders::CreateStack::new(self.handle.clone())
    }
    pub fn create_stack_instances(&self) -> fluent_builders::CreateStackInstances<C> {
        fluent_builders::CreateStackInstances::new(self.handle.clone())
    }
    pub fn create_stack_set(&self) -> fluent_builders::CreateStackSet<C> {
        fluent_builders::CreateStackSet::new(self.handle.clone())
    }
    pub fn delete_change_set(&self) -> fluent_builders::DeleteChangeSet<C> {
        fluent_builders::DeleteChangeSet::new(self.handle.clone())
    }
    pub fn delete_stack(&self) -> fluent_builders::DeleteStack<C> {
        fluent_builders::DeleteStack::new(self.handle.clone())
    }
    pub fn delete_stack_instances(&self) -> fluent_builders::DeleteStackInstances<C> {
        fluent_builders::DeleteStackInstances::new(self.handle.clone())
    }
    pub fn delete_stack_set(&self) -> fluent_builders::DeleteStackSet<C> {
        fluent_builders::DeleteStackSet::new(self.handle.clone())
    }
    pub fn deregister_type(&self) -> fluent_builders::DeregisterType<C> {
        fluent_builders::DeregisterType::new(self.handle.clone())
    }
    pub fn describe_account_limits(&self) -> fluent_builders::DescribeAccountLimits<C> {
        fluent_builders::DescribeAccountLimits::new(self.handle.clone())
    }
    pub fn describe_change_set(&self) -> fluent_builders::DescribeChangeSet<C> {
        fluent_builders::DescribeChangeSet::new(self.handle.clone())
    }
    pub fn describe_stack_drift_detection_status(
        &self,
    ) -> fluent_builders::DescribeStackDriftDetectionStatus<C> {
        fluent_builders::DescribeStackDriftDetectionStatus::new(self.handle.clone())
    }
    pub fn describe_stack_events(&self) -> fluent_builders::DescribeStackEvents<C> {
        fluent_builders::DescribeStackEvents::new(self.handle.clone())
    }
    pub fn describe_stack_instance(&self) -> fluent_builders::DescribeStackInstance<C> {
        fluent_builders::DescribeStackInstance::new(self.handle.clone())
    }
    pub fn describe_stack_resource(&self) -> fluent_builders::DescribeStackResource<C> {
        fluent_builders::DescribeStackResource::new(self.handle.clone())
    }
    pub fn describe_stack_resource_drifts(
        &self,
    ) -> fluent_builders::DescribeStackResourceDrifts<C> {
        fluent_builders::DescribeStackResourceDrifts::new(self.handle.clone())
    }
    pub fn describe_stack_resources(&self) -> fluent_builders::DescribeStackResources<C> {
        fluent_builders::DescribeStackResources::new(self.handle.clone())
    }
    pub fn describe_stacks(&self) -> fluent_builders::DescribeStacks<C> {
        fluent_builders::DescribeStacks::new(self.handle.clone())
    }
    pub fn describe_stack_set(&self) -> fluent_builders::DescribeStackSet<C> {
        fluent_builders::DescribeStackSet::new(self.handle.clone())
    }
    pub fn describe_stack_set_operation(&self) -> fluent_builders::DescribeStackSetOperation<C> {
        fluent_builders::DescribeStackSetOperation::new(self.handle.clone())
    }
    pub fn describe_type(&self) -> fluent_builders::DescribeType<C> {
        fluent_builders::DescribeType::new(self.handle.clone())
    }
    pub fn describe_type_registration(&self) -> fluent_builders::DescribeTypeRegistration<C> {
        fluent_builders::DescribeTypeRegistration::new(self.handle.clone())
    }
    pub fn detect_stack_drift(&self) -> fluent_builders::DetectStackDrift<C> {
        fluent_builders::DetectStackDrift::new(self.handle.clone())
    }
    pub fn detect_stack_resource_drift(&self) -> fluent_builders::DetectStackResourceDrift<C> {
        fluent_builders::DetectStackResourceDrift::new(self.handle.clone())
    }
    pub fn detect_stack_set_drift(&self) -> fluent_builders::DetectStackSetDrift<C> {
        fluent_builders::DetectStackSetDrift::new(self.handle.clone())
    }
    pub fn estimate_template_cost(&self) -> fluent_builders::EstimateTemplateCost<C> {
        fluent_builders::EstimateTemplateCost::new(self.handle.clone())
    }
    pub fn execute_change_set(&self) -> fluent_builders::ExecuteChangeSet<C> {
        fluent_builders::ExecuteChangeSet::new(self.handle.clone())
    }
    pub fn get_stack_policy(&self) -> fluent_builders::GetStackPolicy<C> {
        fluent_builders::GetStackPolicy::new(self.handle.clone())
    }
    pub fn get_template(&self) -> fluent_builders::GetTemplate<C> {
        fluent_builders::GetTemplate::new(self.handle.clone())
    }
    pub fn get_template_summary(&self) -> fluent_builders::GetTemplateSummary<C> {
        fluent_builders::GetTemplateSummary::new(self.handle.clone())
    }
    pub fn list_change_sets(&self) -> fluent_builders::ListChangeSets<C> {
        fluent_builders::ListChangeSets::new(self.handle.clone())
    }
    pub fn list_exports(&self) -> fluent_builders::ListExports<C> {
        fluent_builders::ListExports::new(self.handle.clone())
    }
    pub fn list_imports(&self) -> fluent_builders::ListImports<C> {
        fluent_builders::ListImports::new(self.handle.clone())
    }
    pub fn list_stack_instances(&self) -> fluent_builders::ListStackInstances<C> {
        fluent_builders::ListStackInstances::new(self.handle.clone())
    }
    pub fn list_stack_resources(&self) -> fluent_builders::ListStackResources<C> {
        fluent_builders::ListStackResources::new(self.handle.clone())
    }
    pub fn list_stacks(&self) -> fluent_builders::ListStacks<C> {
        fluent_builders::ListStacks::new(self.handle.clone())
    }
    pub fn list_stack_set_operation_results(
        &self,
    ) -> fluent_builders::ListStackSetOperationResults<C> {
        fluent_builders::ListStackSetOperationResults::new(self.handle.clone())
    }
    pub fn list_stack_set_operations(&self) -> fluent_builders::ListStackSetOperations<C> {
        fluent_builders::ListStackSetOperations::new(self.handle.clone())
    }
    pub fn list_stack_sets(&self) -> fluent_builders::ListStackSets<C> {
        fluent_builders::ListStackSets::new(self.handle.clone())
    }
    pub fn list_type_registrations(&self) -> fluent_builders::ListTypeRegistrations<C> {
        fluent_builders::ListTypeRegistrations::new(self.handle.clone())
    }
    pub fn list_types(&self) -> fluent_builders::ListTypes<C> {
        fluent_builders::ListTypes::new(self.handle.clone())
    }
    pub fn list_type_versions(&self) -> fluent_builders::ListTypeVersions<C> {
        fluent_builders::ListTypeVersions::new(self.handle.clone())
    }
    pub fn record_handler_progress(&self) -> fluent_builders::RecordHandlerProgress<C> {
        fluent_builders::RecordHandlerProgress::new(self.handle.clone())
    }
    pub fn register_type(&self) -> fluent_builders::RegisterType<C> {
        fluent_builders::RegisterType::new(self.handle.clone())
    }
    pub fn set_stack_policy(&self) -> fluent_builders::SetStackPolicy<C> {
        fluent_builders::SetStackPolicy::new(self.handle.clone())
    }
    pub fn set_type_default_version(&self) -> fluent_builders::SetTypeDefaultVersion<C> {
        fluent_builders::SetTypeDefaultVersion::new(self.handle.clone())
    }
    pub fn signal_resource(&self) -> fluent_builders::SignalResource<C> {
        fluent_builders::SignalResource::new(self.handle.clone())
    }
    pub fn stop_stack_set_operation(&self) -> fluent_builders::StopStackSetOperation<C> {
        fluent_builders::StopStackSetOperation::new(self.handle.clone())
    }
    pub fn update_stack(&self) -> fluent_builders::UpdateStack<C> {
        fluent_builders::UpdateStack::new(self.handle.clone())
    }
    pub fn update_stack_instances(&self) -> fluent_builders::UpdateStackInstances<C> {
        fluent_builders::UpdateStackInstances::new(self.handle.clone())
    }
    pub fn update_stack_set(&self) -> fluent_builders::UpdateStackSet<C> {
        fluent_builders::UpdateStackSet::new(self.handle.clone())
    }
    pub fn update_termination_protection(&self) -> fluent_builders::UpdateTerminationProtection<C> {
        fluent_builders::UpdateTerminationProtection::new(self.handle.clone())
    }
    pub fn validate_template(&self) -> fluent_builders::ValidateTemplate<C> {
        fluent_builders::ValidateTemplate::new(self.handle.clone())
    }
}
pub mod fluent_builders {
    #[derive(std::fmt::Debug)]
    pub struct CancelUpdateStack<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::cancel_update_stack_input::Builder,
    }
    impl<C> CancelUpdateStack<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> Result<
            crate::output::CancelUpdateStackOutput,
            smithy_http::result::SdkError<crate::error::CancelUpdateStackError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name or the unique stack ID that is associated with the stack.</p>
        pub fn stack_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.stack_name(inp);
            self
        }
        pub fn set_stack_name(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_stack_name(inp);
            self
        }
        /// <p>A unique identifier for this <code>CancelUpdateStack</code> request. Specify this
        /// token if you plan to retry requests so that AWS CloudFormation knows that you're not
        /// attempting to cancel an update on a stack with the same name. You might retry
        /// <code>CancelUpdateStack</code> requests to ensure that AWS CloudFormation successfully
        /// received them.</p>
        pub fn client_request_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.client_request_token(inp);
            self
        }
        pub fn set_client_request_token(
            mut self,
            inp: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_client_request_token(inp);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ContinueUpdateRollback<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::continue_update_rollback_input::Builder,
    }
    impl<C> ContinueUpdateRollback<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> Result<
            crate::output::ContinueUpdateRollbackOutput,
            smithy_http::result::SdkError<crate::error::ContinueUpdateRollbackError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name or the unique ID of the stack that you want to continue rolling
        /// back.</p>
        /// <note>
        /// <p>Don't specify the name of a nested stack (a stack that was created by using the
        /// <code>AWS::CloudFormation::Stack</code> resource). Instead, use this operation on the
        /// parent stack (the stack that contains the <code>AWS::CloudFormation::Stack</code>
        /// resource).</p>
        /// </note>
        pub fn stack_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.stack_name(inp);
            self
        }
        pub fn set_stack_name(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_stack_name(inp);
            self
        }
        /// <p>The Amazon Resource Name (ARN) of an AWS Identity and Access Management (IAM) role
        /// that AWS CloudFormation assumes to roll back the stack. AWS CloudFormation uses the role's
        /// credentials to make calls on your behalf. AWS CloudFormation always uses this role for all
        /// future operations on the stack. As long as users have permission to operate on the stack,
        /// AWS CloudFormation uses this role even if the users don't have permission to pass it.
        /// Ensure that the role grants least privilege.</p>
        /// <p>If you don't specify a value, AWS CloudFormation uses the role that was previously
        /// associated with the stack. If no role is available, AWS CloudFormation uses a temporary
        /// session that is generated from your user credentials.</p>
        pub fn role_arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.role_arn(inp);
            self
        }
        pub fn set_role_arn(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_role_arn(inp);
            self
        }
        /// <p>A list of the logical IDs of the resources that AWS CloudFormation skips during the
        /// continue update rollback operation. You can specify only resources that are in the
        /// <code>UPDATE_FAILED</code> state because a rollback failed. You can't specify resources
        /// that are in the <code>UPDATE_FAILED</code> state for other reasons, for example, because an
        /// update was cancelled. To check why a resource update failed, use the <a>DescribeStackResources</a> action, and view the resource status reason. </p>
        /// <important>
        /// <p>Specify this property to skip rolling back resources that AWS CloudFormation can't
        /// successfully roll back. We recommend that you <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/troubleshooting.html#troubleshooting-errors-update-rollback-failed"> troubleshoot</a> resources before skipping them. AWS CloudFormation sets the
        /// status of the specified resources to <code>UPDATE_COMPLETE</code> and continues to roll
        /// back the stack. After the rollback is complete, the state of the skipped resources will
        /// be inconsistent with the state of the resources in the stack template. Before performing
        /// another stack update, you must update the stack or resources to be consistent with each
        /// other. If you don't, subsequent stack updates might fail, and the stack will become
        /// unrecoverable. </p>
        /// </important>
        /// <p>Specify the minimum number of resources required to successfully roll back your
        /// stack. For example, a failed resource update might cause dependent resources to fail. In
        /// this case, it might not be necessary to skip the dependent resources. </p>
        /// <p>To skip resources that are part of nested stacks, use the following format:
        /// <code>NestedStackName.ResourceLogicalID</code>. If you want to specify the logical ID of
        /// a stack resource (<code>Type: AWS::CloudFormation::Stack</code>) in the
        /// <code>ResourcesToSkip</code> list, then its corresponding embedded stack must be in one
        /// of the following states: <code>DELETE_IN_PROGRESS</code>, <code>DELETE_COMPLETE</code>, or
        /// <code>DELETE_FAILED</code>. </p>
        /// <note>
        /// <p>Don't confuse a child stack's name with its corresponding logical ID defined in
        /// the parent stack. For an example of a continue update rollback operation with nested
        /// stacks, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-updating-stacks-continueupdaterollback.html#nested-stacks">Using ResourcesToSkip to recover a nested stacks hierarchy</a>. </p>
        /// </note>
        pub fn resources_to_skip(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resources_to_skip(inp);
            self
        }
        pub fn set_resources_to_skip(
            mut self,
            inp: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_resources_to_skip(inp);
            self
        }
        /// <p>A unique identifier for this <code>ContinueUpdateRollback</code> request. Specify
        /// this token if you plan to retry requests so that AWS CloudFormation knows that you're not
        /// attempting to continue the rollback to a stack with the same name. You might retry
        /// <code>ContinueUpdateRollback</code> requests to ensure that AWS CloudFormation
        /// successfully received them.</p>
        pub fn client_request_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.client_request_token(inp);
            self
        }
        pub fn set_client_request_token(
            mut self,
            inp: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_client_request_token(inp);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct CreateChangeSet<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::create_change_set_input::Builder,
    }
    impl<C> CreateChangeSet<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> Result<
            crate::output::CreateChangeSetOutput,
            smithy_http::result::SdkError<crate::error::CreateChangeSetError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name or the unique ID of the stack for which you are creating a change set. AWS
        /// CloudFormation generates the change set by comparing this stack's information with the
        /// information that you submit, such as a modified template or different parameter input
        /// values.</p>
        pub fn stack_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.stack_name(inp);
            self
        }
        pub fn set_stack_name(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_stack_name(inp);
            self
        }
        /// <p>A structure that contains the body of the revised template, with a minimum length of
        /// 1 byte and a maximum length of 51,200 bytes. AWS CloudFormation generates the change set by
        /// comparing this template with the template of the stack that you specified.</p>
        /// <p>Conditional: You must specify only <code>TemplateBody</code> or
        /// <code>TemplateURL</code>.</p>
        pub fn template_body(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.template_body(inp);
            self
        }
        pub fn set_template_body(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_template_body(inp);
            self
        }
        /// <p>The location of the file that contains the revised template. The URL must point to a
        /// template (max size: 460,800 bytes) that is located in an S3 bucket or a Systems Manager
        /// document. AWS CloudFormation generates the change set by comparing this template with the
        /// stack that you specified.</p>
        /// <p>Conditional: You must specify only <code>TemplateBody</code> or
        /// <code>TemplateURL</code>.</p>
        pub fn template_url(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.template_url(inp);
            self
        }
        pub fn set_template_url(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_template_url(inp);
            self
        }
        /// <p>Whether to reuse the template that is associated with the stack to create the change
        /// set.</p>
        pub fn use_previous_template(mut self, inp: bool) -> Self {
            self.inner = self.inner.use_previous_template(inp);
            self
        }
        pub fn set_use_previous_template(mut self, inp: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_use_previous_template(inp);
            self
        }
        /// <p>A list of <code>Parameter</code> structures that specify input parameters for the
        /// change set. For more information, see the <a>Parameter</a> data type.</p>
        pub fn parameters(mut self, inp: impl Into<crate::model::Parameter>) -> Self {
            self.inner = self.inner.parameters(inp);
            self
        }
        pub fn set_parameters(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::Parameter>>,
        ) -> Self {
            self.inner = self.inner.set_parameters(inp);
            self
        }
        /// <p>In some cases, you must explicitly acknowledge that your stack template contains certain
        /// capabilities in order for AWS CloudFormation to create the stack.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>CAPABILITY_IAM</code> and <code>CAPABILITY_NAMED_IAM</code>
        /// </p>
        /// <p>Some stack templates might include resources that can affect permissions in
        /// your AWS account; for example, by creating new AWS Identity and Access Management
        /// (IAM) users. For those stacks, you must explicitly acknowledge this by specifying one
        /// of these capabilities.</p>
        /// <p>The following IAM resources require you to specify either the
        /// <code>CAPABILITY_IAM</code> or <code>CAPABILITY_NAMED_IAM</code>
        /// capability.</p>
        /// <ul>
        /// <li>
        /// <p>If you have IAM resources, you can specify either capability. </p>
        /// </li>
        /// <li>
        /// <p>If you have IAM resources with custom names, you <i>must</i>
        /// specify <code>CAPABILITY_NAMED_IAM</code>. </p>
        /// </li>
        /// <li>
        /// <p>If you don't specify either of these capabilities, AWS CloudFormation returns an
        /// <code>InsufficientCapabilities</code> error.</p>
        /// </li>
        /// </ul>
        /// <p>If your stack template contains these resources, we recommend that you review
        /// all permissions associated with them and edit their permissions if
        /// necessary.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-accesskey.html">
        /// AWS::IAM::AccessKey</a>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-group.html">
        /// AWS::IAM::Group</a>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-instanceprofile.html"> AWS::IAM::InstanceProfile</a>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-policy.html">
        /// AWS::IAM::Policy</a>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html">
        /// AWS::IAM::Role</a>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-user.html">
        /// AWS::IAM::User</a>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-addusertogroup.html"> AWS::IAM::UserToGroupAddition</a>
        /// </p>
        /// </li>
        /// </ul>
        /// <p>For more information, see <a href="http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-iam-template.html#capabilities">Acknowledging IAM
        /// Resources in AWS CloudFormation Templates</a>.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>CAPABILITY_AUTO_EXPAND</code>
        /// </p>
        /// <p>Some template contain macros. Macros perform custom processing on templates; this
        /// can include simple actions like find-and-replace operations, all the way to extensive
        /// transformations of entire templates. Because of this, users typically create a change
        /// set from the processed template, so that they can review the changes resulting from
        /// the macros before actually creating the stack. If your stack template contains one or
        /// more macros, and you choose to create a stack directly from the processed template,
        /// without first reviewing the resulting changes in a change set, you must acknowledge
        /// this capability. This includes the <a href="http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/create-reusable-transform-function-snippets-and-add-to-your-template-with-aws-include-transform.html">AWS::Include</a> and <a href="http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-aws-serverless.html">AWS::Serverless</a> transforms, which are macros hosted by AWS CloudFormation.</p>
        /// <note>
        /// <p>This capacity does not apply to creating change sets, and specifying it when
        /// creating change sets has no effect.</p>
        /// <p>If you want to create
        /// a stack from a stack template that contains macros <i>and</i> nested
        /// stacks, you must create or update the stack directly from the template using the
        /// <a>CreateStack</a> or <a>UpdateStack</a> action, and
        /// specifying this capability.</p>
        /// </note>
        /// <p>For more information on macros, see <a href="http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-macros.html">Using AWS CloudFormation Macros to
        /// Perform Custom Processing on Templates</a>.</p>
        /// </li>
        /// </ul>
        pub fn capabilities(mut self, inp: impl Into<crate::model::Capability>) -> Self {
            self.inner = self.inner.capabilities(inp);
            self
        }
        pub fn set_capabilities(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::Capability>>,
        ) -> Self {
            self.inner = self.inner.set_capabilities(inp);
            self
        }
        /// <p>The template resource types that you have permissions to work with if you execute
        /// this change set, such as <code>AWS::EC2::Instance</code>, <code>AWS::EC2::*</code>, or
        /// <code>Custom::MyCustomInstance</code>.</p>
        /// <p>If the list of resource types doesn't include a resource type that you're updating,
        /// the stack update fails. By default, AWS CloudFormation grants permissions to all resource
        /// types. AWS Identity and Access Management (IAM) uses this parameter for condition keys in
        /// IAM policies for AWS CloudFormation. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-iam-template.html">Controlling Access with
        /// AWS Identity and Access Management</a> in the AWS CloudFormation User
        /// Guide.</p>
        pub fn resource_types(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_types(inp);
            self
        }
        pub fn set_resource_types(
            mut self,
            inp: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_resource_types(inp);
            self
        }
        /// <p>The Amazon Resource Name (ARN) of an AWS Identity and Access Management (IAM) role
        /// that AWS CloudFormation assumes when executing the change set. AWS CloudFormation uses the
        /// role's credentials to make calls on your behalf. AWS CloudFormation uses this role for all
        /// future operations on the stack. As long as users have permission to operate on the stack,
        /// AWS CloudFormation uses this role even if the users don't have permission to pass it.
        /// Ensure that the role grants least privilege.</p>
        /// <p>If you don't specify a value, AWS CloudFormation uses the role that was previously
        /// associated with the stack. If no role is available, AWS CloudFormation uses a temporary
        /// session that is generated from your user credentials.</p>
        pub fn role_arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.role_arn(inp);
            self
        }
        pub fn set_role_arn(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_role_arn(inp);
            self
        }
        /// <p>The rollback triggers for AWS CloudFormation to monitor during stack creation and
        /// updating operations, and for the specified monitoring period afterwards.</p>
        pub fn rollback_configuration(mut self, inp: crate::model::RollbackConfiguration) -> Self {
            self.inner = self.inner.rollback_configuration(inp);
            self
        }
        pub fn set_rollback_configuration(
            mut self,
            inp: std::option::Option<crate::model::RollbackConfiguration>,
        ) -> Self {
            self.inner = self.inner.set_rollback_configuration(inp);
            self
        }
        /// <p>The Amazon Resource Names (ARNs) of Amazon Simple Notification Service (Amazon SNS)
        /// topics that AWS CloudFormation associates with the stack. To remove all associated
        /// notification topics, specify an empty list.</p>
        pub fn notification_ar_ns(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.notification_ar_ns(inp);
            self
        }
        pub fn set_notification_ar_ns(
            mut self,
            inp: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_notification_ar_ns(inp);
            self
        }
        /// <p>Key-value pairs to associate with this stack. AWS CloudFormation also propagates
        /// these tags to resources in the stack. You can specify a maximum of 50 tags.</p>
        pub fn tags(mut self, inp: impl Into<crate::model::Tag>) -> Self {
            self.inner = self.inner.tags(inp);
            self
        }
        pub fn set_tags(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.inner = self.inner.set_tags(inp);
            self
        }
        /// <p>The name of the change set. The name must be unique among all change sets that are
        /// associated with the specified stack.</p>
        /// <p>A change set name can contain only alphanumeric, case sensitive characters and
        /// hyphens. It must start with an alphabetic character and cannot exceed 128
        /// characters.</p>
        pub fn change_set_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.change_set_name(inp);
            self
        }
        pub fn set_change_set_name(
            mut self,
            inp: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_change_set_name(inp);
            self
        }
        /// <p>A unique identifier for this <code>CreateChangeSet</code> request. Specify this token
        /// if you plan to retry requests so that AWS CloudFormation knows that you're not attempting
        /// to create another change set with the same name. You might retry
        /// <code>CreateChangeSet</code> requests to ensure that AWS CloudFormation successfully
        /// received them.</p>
        pub fn client_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.client_token(inp);
            self
        }
        pub fn set_client_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_client_token(inp);
            self
        }
        /// <p>A description to help you identify this change set.</p>
        pub fn description(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.description(inp);
            self
        }
        pub fn set_description(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_description(inp);
            self
        }
        /// <p>The type of change set operation. To create a change set for a new stack, specify
        /// <code>CREATE</code>. To create a change set for an existing stack, specify
        /// <code>UPDATE</code>. To create a change set for an import operation, specify
        /// <code>IMPORT</code>.</p>
        /// <p>If you create a change set for a new stack, AWS Cloudformation creates a stack with a
        /// unique stack ID, but no template or resources. The stack will be in the <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-describing-stacks.html#d0e11995">
        /// <code>REVIEW_IN_PROGRESS</code>
        /// </a> state until you execute the change
        /// set.</p>
        /// <p>By default, AWS CloudFormation specifies <code>UPDATE</code>. You can't use the
        /// <code>UPDATE</code> type to create a change set for a new stack or the
        /// <code>CREATE</code> type to create a change set for an existing stack.</p>
        pub fn change_set_type(mut self, inp: crate::model::ChangeSetType) -> Self {
            self.inner = self.inner.change_set_type(inp);
            self
        }
        pub fn set_change_set_type(
            mut self,
            inp: std::option::Option<crate::model::ChangeSetType>,
        ) -> Self {
            self.inner = self.inner.set_change_set_type(inp);
            self
        }
        /// <p>The resources to import into your stack.</p>
        pub fn resources_to_import(
            mut self,
            inp: impl Into<crate::model::ResourceToImport>,
        ) -> Self {
            self.inner = self.inner.resources_to_import(inp);
            self
        }
        pub fn set_resources_to_import(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::ResourceToImport>>,
        ) -> Self {
            self.inner = self.inner.set_resources_to_import(inp);
            self
        }
        /// <p>Creates a change set for the all nested stacks specified in the template. The default
        /// behavior of this action is set to <code>False</code>. To include nested sets in a change
        /// set, specify <code>True</code>.</p>
        pub fn include_nested_stacks(mut self, inp: bool) -> Self {
            self.inner = self.inner.include_nested_stacks(inp);
            self
        }
        pub fn set_include_nested_stacks(mut self, inp: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_include_nested_stacks(inp);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct CreateStack<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::create_stack_input::Builder,
    }
    impl<C> CreateStack<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> Result<
            crate::output::CreateStackOutput,
            smithy_http::result::SdkError<crate::error::CreateStackError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name that is associated with the stack. The name must be unique in the Region in
        /// which you are creating the stack.</p>
        /// <note>
        /// <p>A stack name can contain only alphanumeric characters (case sensitive) and
        /// hyphens. It must start with an alphabetic character and cannot be longer than 128
        /// characters.</p>
        /// </note>
        pub fn stack_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.stack_name(inp);
            self
        }
        pub fn set_stack_name(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_stack_name(inp);
            self
        }
        /// <p>Structure containing the template body with a minimum length of 1 byte and a maximum
        /// length of 51,200 bytes. For more information, go to <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html">Template Anatomy</a>
        /// in the AWS CloudFormation User Guide.</p>
        /// <p>Conditional: You must specify either the <code>TemplateBody</code> or the
        /// <code>TemplateURL</code> parameter, but not both.</p>
        pub fn template_body(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.template_body(inp);
            self
        }
        pub fn set_template_body(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_template_body(inp);
            self
        }
        /// <p>Location of file containing the template body. The URL must point to a template (max
        /// size: 460,800 bytes) that is located in an Amazon S3 bucket or a Systems Manager document.
        /// For more information, go to the <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html">Template Anatomy</a>
        /// in the AWS CloudFormation User Guide.</p>
        /// <p>Conditional: You must specify either the <code>TemplateBody</code> or the
        /// <code>TemplateURL</code> parameter, but not both.</p>
        pub fn template_url(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.template_url(inp);
            self
        }
        pub fn set_template_url(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_template_url(inp);
            self
        }
        /// <p>A list of <code>Parameter</code> structures that specify input parameters for the
        /// stack. For more information, see the <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_Parameter.html">Parameter</a> data
        /// type.</p>
        pub fn parameters(mut self, inp: impl Into<crate::model::Parameter>) -> Self {
            self.inner = self.inner.parameters(inp);
            self
        }
        pub fn set_parameters(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::Parameter>>,
        ) -> Self {
            self.inner = self.inner.set_parameters(inp);
            self
        }
        /// <p>Set to <code>true</code> to disable rollback of the stack if stack creation failed.
        /// You can specify either <code>DisableRollback</code> or <code>OnFailure</code>, but not
        /// both.</p>
        /// <p>Default: <code>false</code>
        /// </p>
        pub fn disable_rollback(mut self, inp: bool) -> Self {
            self.inner = self.inner.disable_rollback(inp);
            self
        }
        pub fn set_disable_rollback(mut self, inp: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_disable_rollback(inp);
            self
        }
        /// <p>The rollback triggers for AWS CloudFormation to monitor during stack creation and
        /// updating operations, and for the specified monitoring period afterwards.</p>
        pub fn rollback_configuration(mut self, inp: crate::model::RollbackConfiguration) -> Self {
            self.inner = self.inner.rollback_configuration(inp);
            self
        }
        pub fn set_rollback_configuration(
            mut self,
            inp: std::option::Option<crate::model::RollbackConfiguration>,
        ) -> Self {
            self.inner = self.inner.set_rollback_configuration(inp);
            self
        }
        /// <p>The amount of time that can pass before the stack status becomes CREATE_FAILED; if
        /// <code>DisableRollback</code> is not set or is set to <code>false</code>, the stack will
        /// be rolled back.</p>
        pub fn timeout_in_minutes(mut self, inp: i32) -> Self {
            self.inner = self.inner.timeout_in_minutes(inp);
            self
        }
        pub fn set_timeout_in_minutes(mut self, inp: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_timeout_in_minutes(inp);
            self
        }
        /// <p>The Simple Notification Service (SNS) topic ARNs to publish stack related events. You
        /// can find your SNS topic ARNs using the SNS console or your Command Line Interface
        /// (CLI).</p>
        pub fn notification_ar_ns(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.notification_ar_ns(inp);
            self
        }
        pub fn set_notification_ar_ns(
            mut self,
            inp: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_notification_ar_ns(inp);
            self
        }
        /// <p>In some cases, you must explicitly acknowledge that your stack template contains certain
        /// capabilities in order for AWS CloudFormation to create the stack.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>CAPABILITY_IAM</code> and <code>CAPABILITY_NAMED_IAM</code>
        /// </p>
        /// <p>Some stack templates might include resources that can affect permissions in
        /// your AWS account; for example, by creating new AWS Identity and Access Management
        /// (IAM) users. For those stacks, you must explicitly acknowledge this by specifying one
        /// of these capabilities.</p>
        /// <p>The following IAM resources require you to specify either the
        /// <code>CAPABILITY_IAM</code> or <code>CAPABILITY_NAMED_IAM</code>
        /// capability.</p>
        /// <ul>
        /// <li>
        /// <p>If you have IAM resources, you can specify either capability. </p>
        /// </li>
        /// <li>
        /// <p>If you have IAM resources with custom names, you <i>must</i>
        /// specify <code>CAPABILITY_NAMED_IAM</code>. </p>
        /// </li>
        /// <li>
        /// <p>If you don't specify either of these capabilities, AWS CloudFormation returns an
        /// <code>InsufficientCapabilities</code> error.</p>
        /// </li>
        /// </ul>
        /// <p>If your stack template contains these resources, we recommend that you review
        /// all permissions associated with them and edit their permissions if
        /// necessary.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-accesskey.html">
        /// AWS::IAM::AccessKey</a>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-group.html">
        /// AWS::IAM::Group</a>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-instanceprofile.html"> AWS::IAM::InstanceProfile</a>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-policy.html">
        /// AWS::IAM::Policy</a>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html">
        /// AWS::IAM::Role</a>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-user.html">
        /// AWS::IAM::User</a>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-addusertogroup.html"> AWS::IAM::UserToGroupAddition</a>
        /// </p>
        /// </li>
        /// </ul>
        /// <p>For more information, see <a href="http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-iam-template.html#capabilities">Acknowledging IAM
        /// Resources in AWS CloudFormation Templates</a>.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>CAPABILITY_AUTO_EXPAND</code>
        /// </p>
        /// <p>Some template contain macros. Macros perform custom processing on templates; this
        /// can include simple actions like find-and-replace operations, all the way to extensive
        /// transformations of entire templates. Because of this, users typically create a change
        /// set from the processed template, so that they can review the changes resulting from
        /// the macros before actually creating the stack. If your stack template contains one or
        /// more macros, and you choose to create a stack directly from the processed template,
        /// without first reviewing the resulting changes in a change set, you must acknowledge
        /// this capability. This includes the <a href="http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/create-reusable-transform-function-snippets-and-add-to-your-template-with-aws-include-transform.html">AWS::Include</a> and <a href="http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-aws-serverless.html">AWS::Serverless</a> transforms, which are macros hosted by AWS CloudFormation.</p>
        /// <p>If you want to create a stack
        /// from a stack template that contains macros <i>and</i> nested stacks,
        /// you must create the stack directly from the template using this capability.</p>
        /// <important>
        /// <p>You should only create stacks directly from a stack template that contains
        /// macros if you know what processing the macro performs.</p>
        /// <p>Each macro relies on an underlying Lambda service function for processing stack
        /// templates. Be aware that the Lambda function owner can update the function
        /// operation without AWS CloudFormation being notified.</p>
        /// </important>
        /// <p>For more information, see <a href="http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-macros.html">Using
        /// AWS CloudFormation Macros to Perform Custom Processing on
        /// Templates</a>.</p>
        /// </li>
        /// </ul>
        pub fn capabilities(mut self, inp: impl Into<crate::model::Capability>) -> Self {
            self.inner = self.inner.capabilities(inp);
            self
        }
        pub fn set_capabilities(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::Capability>>,
        ) -> Self {
            self.inner = self.inner.set_capabilities(inp);
            self
        }
        /// <p>The template resource types that you have permissions to work with for this create
        /// stack action, such as <code>AWS::EC2::Instance</code>, <code>AWS::EC2::*</code>, or
        /// <code>Custom::MyCustomInstance</code>. Use the following syntax to describe template
        /// resource types: <code>AWS::*</code> (for all AWS resource), <code>Custom::*</code> (for all
        /// custom resources), <code>Custom::<i>logical_ID</i>
        /// </code> (for a specific custom resource),
        /// <code>AWS::<i>service_name</i>::*</code> (for all resources of a
        /// particular AWS service), and
        /// <code>AWS::<i>service_name</i>::<i>resource_logical_ID</i>
        /// </code> (for a specific AWS resource).</p>
        /// <p>If the list of resource types doesn't include a resource that you're creating, the
        /// stack creation fails. By default, AWS CloudFormation grants permissions to all resource
        /// types. AWS Identity and Access Management (IAM) uses this parameter for AWS
        /// CloudFormation-specific condition keys in IAM policies. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-iam-template.html">Controlling Access with AWS Identity and Access Management</a>.</p>
        pub fn resource_types(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_types(inp);
            self
        }
        pub fn set_resource_types(
            mut self,
            inp: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_resource_types(inp);
            self
        }
        /// <p>The Amazon Resource Name (ARN) of an AWS Identity and Access Management (IAM) role
        /// that AWS CloudFormation assumes to create the stack. AWS CloudFormation uses the role's
        /// credentials to make calls on your behalf. AWS CloudFormation always uses this role for all
        /// future operations on the stack. As long as users have permission to operate on the stack,
        /// AWS CloudFormation uses this role even if the users don't have permission to pass it.
        /// Ensure that the role grants least privilege.</p>
        /// <p>If you don't specify a value, AWS CloudFormation uses the role that was previously
        /// associated with the stack. If no role is available, AWS CloudFormation uses a temporary
        /// session that is generated from your user credentials.</p>
        pub fn role_arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.role_arn(inp);
            self
        }
        pub fn set_role_arn(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_role_arn(inp);
            self
        }
        /// <p>Determines what action will be taken if stack creation fails. This must be one of:
        /// DO_NOTHING, ROLLBACK, or DELETE. You can specify either <code>OnFailure</code> or
        /// <code>DisableRollback</code>, but not both.</p>
        /// <p>Default: <code>ROLLBACK</code>
        /// </p>
        pub fn on_failure(mut self, inp: crate::model::OnFailure) -> Self {
            self.inner = self.inner.on_failure(inp);
            self
        }
        pub fn set_on_failure(mut self, inp: std::option::Option<crate::model::OnFailure>) -> Self {
            self.inner = self.inner.set_on_failure(inp);
            self
        }
        /// <p>Structure containing the stack policy body. For more information, go to <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/protect-stack-resources.html"> Prevent Updates
        /// to Stack Resources</a> in the <i>AWS CloudFormation User Guide</i>.
        /// You can specify either the <code>StackPolicyBody</code> or the <code>StackPolicyURL</code>
        /// parameter, but not both.</p>
        pub fn stack_policy_body(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.stack_policy_body(inp);
            self
        }
        pub fn set_stack_policy_body(
            mut self,
            inp: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_stack_policy_body(inp);
            self
        }
        /// <p>Location of a file containing the stack policy. The URL must point to a policy
        /// (maximum size: 16 KB) located in an S3 bucket in the same
        /// Region as the stack. You can specify either the <code>StackPolicyBody</code> or the
        /// <code>StackPolicyURL</code> parameter, but not both.</p>
        pub fn stack_policy_url(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.stack_policy_url(inp);
            self
        }
        pub fn set_stack_policy_url(
            mut self,
            inp: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_stack_policy_url(inp);
            self
        }
        /// <p>Key-value pairs to associate with this stack. AWS CloudFormation also propagates
        /// these tags to the resources created in the stack. A maximum number of 50 tags can be
        /// specified.</p>
        pub fn tags(mut self, inp: impl Into<crate::model::Tag>) -> Self {
            self.inner = self.inner.tags(inp);
            self
        }
        pub fn set_tags(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.inner = self.inner.set_tags(inp);
            self
        }
        /// <p>A unique identifier for this <code>CreateStack</code> request. Specify this token if
        /// you plan to retry requests so that AWS CloudFormation knows that you're not attempting to
        /// create a stack with the same name. You might retry <code>CreateStack</code> requests to
        /// ensure that AWS CloudFormation successfully received them.</p>
        /// <p>All events triggered by a given stack operation are assigned the same client request
        /// token, which you can use to track operations. For example, if you execute a
        /// <code>CreateStack</code> operation with the token <code>token1</code>, then all the
        /// <code>StackEvents</code> generated by that operation will have
        /// <code>ClientRequestToken</code> set as <code>token1</code>.</p>
        /// <p>In the console, stack operations display the client request token on the Events tab.
        /// Stack operations that are initiated from the console use the token format
        /// <i>Console-StackOperation-ID</i>, which helps you easily identify the
        /// stack operation . For example, if you create a stack using the console, each stack event
        /// would be assigned the same token in the following format:
        /// <code>Console-CreateStack-7f59c3cf-00d2-40c7-b2ff-e75db0987002</code>. </p>
        pub fn client_request_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.client_request_token(inp);
            self
        }
        pub fn set_client_request_token(
            mut self,
            inp: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_client_request_token(inp);
            self
        }
        /// <p>Whether to enable termination protection on the specified stack. If a user attempts
        /// to delete a stack with termination protection enabled, the operation fails and the stack
        /// remains unchanged. For more information, see <a href="http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-protect-stacks.html">Protecting a Stack From Being
        /// Deleted</a> in the <i>AWS CloudFormation User Guide</i>. Termination protection is
        /// disabled on stacks by default. </p>
        /// <p> For <a href="http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-nested-stacks.html">nested stacks</a>,
        /// termination protection is set on the root stack and cannot be changed directly on the
        /// nested stack.</p>
        pub fn enable_termination_protection(mut self, inp: bool) -> Self {
            self.inner = self.inner.enable_termination_protection(inp);
            self
        }
        pub fn set_enable_termination_protection(mut self, inp: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_enable_termination_protection(inp);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct CreateStackInstances<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::create_stack_instances_input::Builder,
    }
    impl<C> CreateStackInstances<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> Result<
            crate::output::CreateStackInstancesOutput,
            smithy_http::result::SdkError<crate::error::CreateStackInstancesError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name or unique ID of the stack set that you want to create stack instances
        /// from.</p>
        pub fn stack_set_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.stack_set_name(inp);
            self
        }
        pub fn set_stack_set_name(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_stack_set_name(inp);
            self
        }
        /// <p>[Self-managed permissions] The names of one or more AWS accounts that you want to create stack instances in the
        /// specified Region(s) for.</p>
        /// <p>You can specify <code>Accounts</code> or <code>DeploymentTargets</code>, but not both.</p>
        pub fn accounts(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.accounts(inp);
            self
        }
        pub fn set_accounts(
            mut self,
            inp: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_accounts(inp);
            self
        }
        /// <p>[Service-managed permissions] The AWS Organizations accounts for which to create stack instances in the specified Regions.</p>
        /// <p>You can specify <code>Accounts</code> or <code>DeploymentTargets</code>, but not both.</p>
        pub fn deployment_targets(mut self, inp: crate::model::DeploymentTargets) -> Self {
            self.inner = self.inner.deployment_targets(inp);
            self
        }
        pub fn set_deployment_targets(
            mut self,
            inp: std::option::Option<crate::model::DeploymentTargets>,
        ) -> Self {
            self.inner = self.inner.set_deployment_targets(inp);
            self
        }
        /// <p>The names of one or more Regions where you want to create stack instances using the
        /// specified AWS account(s). </p>
        pub fn regions(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.regions(inp);
            self
        }
        pub fn set_regions(
            mut self,
            inp: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_regions(inp);
            self
        }
        /// <p>A list of stack set parameters whose values you want to override in the selected
        /// stack instances.</p>
        /// <p>Any overridden parameter values will be applied to all stack instances in the
        /// specified accounts and Regions. When specifying parameters and their values, be aware of
        /// how AWS CloudFormation sets parameter values during stack instance operations:</p>
        /// <ul>
        /// <li>
        /// <p>To override the current value for a parameter, include the parameter and
        /// specify its value.</p>
        /// </li>
        /// <li>
        /// <p>To leave a parameter set to its present value, you can do one of the
        /// following:</p>
        /// <ul>
        /// <li>
        /// <p>Do not include the parameter in the list.</p>
        /// </li>
        /// <li>
        /// <p>Include the parameter and specify <code>UsePreviousValue</code> as
        /// <code>true</code>. (You cannot specify both a value and set
        /// <code>UsePreviousValue</code> to <code>true</code>.)</p>
        /// </li>
        /// </ul>
        /// </li>
        /// <li>
        /// <p>To set all overridden parameter back to the values specified in the stack set,
        /// specify a parameter list but do not include any parameters.</p>
        /// </li>
        /// <li>
        /// <p>To leave all parameters set to their present values, do not specify this
        /// property at all.</p>
        /// </li>
        /// </ul>
        /// <p>During stack set updates, any parameter values overridden for a stack instance are
        /// not updated, but retain their overridden value.</p>
        /// <p>You can only override the parameter <i>values</i> that are specified in
        /// the stack set; to add or delete a parameter itself, use <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_UpdateStackSet.html">UpdateStackSet</a> to update the stack set template.</p>
        pub fn parameter_overrides(mut self, inp: impl Into<crate::model::Parameter>) -> Self {
            self.inner = self.inner.parameter_overrides(inp);
            self
        }
        pub fn set_parameter_overrides(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::Parameter>>,
        ) -> Self {
            self.inner = self.inner.set_parameter_overrides(inp);
            self
        }
        /// <p>Preferences for how AWS CloudFormation performs this stack set operation.</p>
        pub fn operation_preferences(
            mut self,
            inp: crate::model::StackSetOperationPreferences,
        ) -> Self {
            self.inner = self.inner.operation_preferences(inp);
            self
        }
        pub fn set_operation_preferences(
            mut self,
            inp: std::option::Option<crate::model::StackSetOperationPreferences>,
        ) -> Self {
            self.inner = self.inner.set_operation_preferences(inp);
            self
        }
        /// <p>The unique identifier for this stack set operation. </p>
        /// <p>The operation ID also functions as an idempotency token, to ensure that AWS
        /// CloudFormation performs the stack set operation only once, even if you retry the request
        /// multiple times. You might retry stack set operation requests to ensure that AWS
        /// CloudFormation successfully received them.</p>
        /// <p>If you don't specify an operation ID, the SDK generates one automatically. </p>
        /// <p>Repeating this stack set operation with a new operation ID retries all stack
        /// instances whose status is <code>OUTDATED</code>. </p>
        pub fn operation_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.operation_id(inp);
            self
        }
        pub fn set_operation_id(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_operation_id(inp);
            self
        }
        /// <p>[Service-managed permissions] Specifies whether you are acting as an account administrator in the organization's management account or as a delegated administrator in a member account.</p>
        /// <p>By default, <code>SELF</code> is specified. Use <code>SELF</code> for stack sets with self-managed permissions.</p>
        /// <ul>
        /// <li>
        /// <p>If you are signed in to the management account, specify <code>SELF</code>.</p>
        /// </li>
        /// <li>
        /// <p>If you are signed in to a delegated administrator account, specify <code>DELEGATED_ADMIN</code>.</p>
        /// <p>Your AWS account must be registered as a delegated administrator in the management account. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html">Register a delegated administrator</a> in the <i>AWS CloudFormation User Guide</i>.</p>
        /// </li>
        /// </ul>
        pub fn call_as(mut self, inp: crate::model::CallAs) -> Self {
            self.inner = self.inner.call_as(inp);
            self
        }
        pub fn set_call_as(mut self, inp: std::option::Option<crate::model::CallAs>) -> Self {
            self.inner = self.inner.set_call_as(inp);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct CreateStackSet<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::create_stack_set_input::Builder,
    }
    impl<C> CreateStackSet<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> Result<
            crate::output::CreateStackSetOutput,
            smithy_http::result::SdkError<crate::error::CreateStackSetError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name to associate with the stack set. The name must be unique in the Region where
        /// you create your stack set.</p>
        /// <note>
        /// <p>A stack name can contain only alphanumeric characters (case-sensitive) and
        /// hyphens. It must start with an alphabetic character and can't be longer than 128
        /// characters.</p>
        /// </note>
        pub fn stack_set_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.stack_set_name(inp);
            self
        }
        pub fn set_stack_set_name(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_stack_set_name(inp);
            self
        }
        /// <p>A description of the stack set. You can use the description to identify the stack
        /// set's purpose or other important information.</p>
        pub fn description(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.description(inp);
            self
        }
        pub fn set_description(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_description(inp);
            self
        }
        /// <p>The structure that contains the template body, with a minimum length of 1 byte and a
        /// maximum length of 51,200 bytes. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html">Template Anatomy</a>
        /// in the AWS CloudFormation User Guide.</p>
        /// <p>Conditional: You must specify either the TemplateBody or the TemplateURL parameter,
        /// but not both.</p>
        pub fn template_body(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.template_body(inp);
            self
        }
        pub fn set_template_body(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_template_body(inp);
            self
        }
        /// <p>The location of the file that contains the template body. The URL must point to a
        /// template (maximum size: 460,800 bytes) that's located in an Amazon S3 bucket or a Systems
        /// Manager document. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html">Template Anatomy</a>
        /// in the AWS CloudFormation User Guide.</p>
        /// <p>Conditional: You must specify either the TemplateBody or the TemplateURL parameter,
        /// but not both.</p>
        pub fn template_url(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.template_url(inp);
            self
        }
        pub fn set_template_url(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_template_url(inp);
            self
        }
        /// <p>The input parameters for the stack set template. </p>
        pub fn parameters(mut self, inp: impl Into<crate::model::Parameter>) -> Self {
            self.inner = self.inner.parameters(inp);
            self
        }
        pub fn set_parameters(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::Parameter>>,
        ) -> Self {
            self.inner = self.inner.set_parameters(inp);
            self
        }
        /// <p>In some cases, you must explicitly acknowledge that your stack set template contains
        /// certain capabilities in order for AWS CloudFormation to create the stack set and related stack
        /// instances.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>CAPABILITY_IAM</code> and <code>CAPABILITY_NAMED_IAM</code>
        /// </p>
        /// <p>Some stack templates might include resources that can affect permissions in
        /// your AWS account; for example, by creating new AWS Identity and Access Management
        /// (IAM) users. For those stack sets, you must explicitly acknowledge this by specifying
        /// one of these capabilities.</p>
        /// <p>The following IAM resources require you to specify either the
        /// <code>CAPABILITY_IAM</code> or <code>CAPABILITY_NAMED_IAM</code>
        /// capability.</p>
        /// <ul>
        /// <li>
        /// <p>If you have IAM resources, you can specify either capability. </p>
        /// </li>
        /// <li>
        /// <p>If you have IAM resources with custom names, you <i>must</i>
        /// specify <code>CAPABILITY_NAMED_IAM</code>. </p>
        /// </li>
        /// <li>
        /// <p>If you don't specify either of these capabilities, AWS CloudFormation returns an
        /// <code>InsufficientCapabilities</code> error.</p>
        /// </li>
        /// </ul>
        /// <p>If your stack template contains these resources, we recommend that you review
        /// all permissions associated with them and edit their permissions if
        /// necessary.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-accesskey.html">
        /// AWS::IAM::AccessKey</a>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-group.html">
        /// AWS::IAM::Group</a>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-instanceprofile.html"> AWS::IAM::InstanceProfile</a>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-policy.html">
        /// AWS::IAM::Policy</a>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html">
        /// AWS::IAM::Role</a>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-user.html">
        /// AWS::IAM::User</a>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-addusertogroup.html"> AWS::IAM::UserToGroupAddition</a>
        /// </p>
        /// </li>
        /// </ul>
        /// <p>For more information, see <a href="http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-iam-template.html#capabilities">Acknowledging IAM
        /// Resources in AWS CloudFormation Templates</a>.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>CAPABILITY_AUTO_EXPAND</code>
        /// </p>
        /// <p>Some templates reference macros. If your stack set template references one or more macros,
        /// you must create the stack set directly from the processed template, without first
        /// reviewing the resulting changes in a change set. To create the stack set directly, you must acknowledge this
        /// capability. For more information, see <a href="http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-macros.html">Using AWS CloudFormation Macros to Perform Custom Processing on
        /// Templates</a>.</p>
        /// <important>
        /// <p>Stack sets with service-managed permissions
        /// do not currently support the use of macros in templates. (This includes
        /// the <a href="http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/create-reusable-transform-function-snippets-and-add-to-your-template-with-aws-include-transform.html">AWS::Include</a> and <a href="http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-aws-serverless.html">AWS::Serverless</a>
        /// transforms, which are macros hosted by AWS CloudFormation.) Even if you specify this
        /// capability for a stack set with service-managed permissions, if you reference a macro in your template the stack set operation will
        /// fail.</p>
        /// </important>
        /// </li>
        /// </ul>
        pub fn capabilities(mut self, inp: impl Into<crate::model::Capability>) -> Self {
            self.inner = self.inner.capabilities(inp);
            self
        }
        pub fn set_capabilities(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::Capability>>,
        ) -> Self {
            self.inner = self.inner.set_capabilities(inp);
            self
        }
        /// <p>The key-value pairs to associate with this stack set and the stacks created from it.
        /// AWS CloudFormation also propagates these tags to supported resources that are created in
        /// the stacks. A maximum number of 50 tags can be specified.</p>
        /// <p>If you specify tags as part of a <code>CreateStackSet</code> action, AWS
        /// CloudFormation checks to see if you have the required IAM permission to tag resources. If
        /// you don't, the entire <code>CreateStackSet</code> action fails with an <code>access
        /// denied</code> error, and the stack set is not created.</p>
        pub fn tags(mut self, inp: impl Into<crate::model::Tag>) -> Self {
            self.inner = self.inner.tags(inp);
            self
        }
        pub fn set_tags(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.inner = self.inner.set_tags(inp);
            self
        }
        /// <p>The Amazon Resource Number (ARN) of the IAM role to use to create this stack set. </p>
        /// <p>Specify an IAM role only if you are using customized administrator roles to control
        /// which users or groups can manage specific stack sets within the same administrator account.
        /// For more information, see <a href="http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-prereqs.html">Prerequisites:
        /// Granting Permissions for Stack Set Operations</a> in the
        /// <i>AWS CloudFormation User Guide</i>.</p>
        pub fn administration_role_arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.administration_role_arn(inp);
            self
        }
        pub fn set_administration_role_arn(
            mut self,
            inp: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_administration_role_arn(inp);
            self
        }
        /// <p>The name of the IAM execution role to use to create the stack set. If you do not specify
        /// an execution role, AWS CloudFormation uses the <code>AWSCloudFormationStackSetExecutionRole</code> role
        /// for the stack set operation.</p>
        /// <p>Specify an IAM role only if you are using customized execution roles to control which
        /// stack resources users and groups can include in their stack sets.
        /// </p>
        pub fn execution_role_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.execution_role_name(inp);
            self
        }
        pub fn set_execution_role_name(
            mut self,
            inp: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_execution_role_name(inp);
            self
        }
        /// <p>Describes how the IAM roles required for stack set operations are created. By default, <code>SELF-MANAGED</code> is specified.</p>
        /// <ul>
        /// <li>
        /// <p>With <code>self-managed</code> permissions, you must create the administrator and execution roles required to deploy to target accounts. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-prereqs-self-managed.html">Grant Self-Managed Stack Set Permissions</a>.</p>
        /// </li>
        /// <li>
        /// <p>With <code>service-managed</code> permissions, StackSets automatically creates the IAM roles required to deploy to accounts managed by AWS Organizations. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-prereqs-service-managed.html">Grant Service-Managed Stack Set Permissions</a>.</p>
        /// </li>
        /// </ul>
        pub fn permission_model(mut self, inp: crate::model::PermissionModels) -> Self {
            self.inner = self.inner.permission_model(inp);
            self
        }
        pub fn set_permission_model(
            mut self,
            inp: std::option::Option<crate::model::PermissionModels>,
        ) -> Self {
            self.inner = self.inner.set_permission_model(inp);
            self
        }
        /// <p>Describes whether StackSets automatically deploys to AWS Organizations accounts that are added to the target organization or organizational unit (OU). Specify only if <code>PermissionModel</code> is <code>SERVICE_MANAGED</code>.</p>
        pub fn auto_deployment(mut self, inp: crate::model::AutoDeployment) -> Self {
            self.inner = self.inner.auto_deployment(inp);
            self
        }
        pub fn set_auto_deployment(
            mut self,
            inp: std::option::Option<crate::model::AutoDeployment>,
        ) -> Self {
            self.inner = self.inner.set_auto_deployment(inp);
            self
        }
        /// <p>[Service-managed permissions] Specifies whether you are acting as an account administrator in the organization's management account or as a delegated administrator in a member account.</p>
        /// <p>By default, <code>SELF</code> is specified. Use <code>SELF</code> for stack sets with self-managed permissions.</p>
        /// <ul>
        /// <li>
        /// <p>To create a stack set with service-managed permissions while signed in to the management account, specify <code>SELF</code>.</p>
        /// </li>
        /// <li>
        /// <p>To create a stack set with service-managed permissions while signed in to a delegated administrator account, specify <code>DELEGATED_ADMIN</code>.</p>
        /// <p>Your AWS account must be registered as a delegated admin in the management account. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html">Register a delegated administrator</a> in the <i>AWS CloudFormation User Guide</i>.</p>
        /// </li>
        /// </ul>
        /// <p>Stack sets with service-managed permissions are created in the management account, including stack sets that are created by delegated administrators.</p>
        pub fn call_as(mut self, inp: crate::model::CallAs) -> Self {
            self.inner = self.inner.call_as(inp);
            self
        }
        pub fn set_call_as(mut self, inp: std::option::Option<crate::model::CallAs>) -> Self {
            self.inner = self.inner.set_call_as(inp);
            self
        }
        /// <p>A unique identifier for this <code>CreateStackSet</code> request. Specify this token
        /// if you plan to retry requests so that AWS CloudFormation knows that you're not attempting
        /// to create another stack set with the same name. You might retry <code>CreateStackSet</code>
        /// requests to ensure that AWS CloudFormation successfully received them.</p>
        /// <p>If you don't specify an operation ID, the SDK generates one automatically.
        /// </p>
        pub fn client_request_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.client_request_token(inp);
            self
        }
        pub fn set_client_request_token(
            mut self,
            inp: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_client_request_token(inp);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeleteChangeSet<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::delete_change_set_input::Builder,
    }
    impl<C> DeleteChangeSet<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> Result<
            crate::output::DeleteChangeSetOutput,
            smithy_http::result::SdkError<crate::error::DeleteChangeSetError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name or Amazon Resource Name (ARN) of the change set that you want to
        /// delete.</p>
        pub fn change_set_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.change_set_name(inp);
            self
        }
        pub fn set_change_set_name(
            mut self,
            inp: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_change_set_name(inp);
            self
        }
        /// <p>If you specified the name of a change set to delete, specify the stack name or ID
        /// (ARN) that is associated with it.</p>
        pub fn stack_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.stack_name(inp);
            self
        }
        pub fn set_stack_name(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_stack_name(inp);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeleteStack<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::delete_stack_input::Builder,
    }
    impl<C> DeleteStack<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> Result<
            crate::output::DeleteStackOutput,
            smithy_http::result::SdkError<crate::error::DeleteStackError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name or the unique stack ID that is associated with the stack.</p>
        pub fn stack_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.stack_name(inp);
            self
        }
        pub fn set_stack_name(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_stack_name(inp);
            self
        }
        /// <p>For stacks in the <code>DELETE_FAILED</code> state, a list of resource logical IDs
        /// that are associated with the resources you want to retain. During deletion, AWS
        /// CloudFormation deletes the stack but does not delete the retained resources.</p>
        /// <p>Retaining resources is useful when you cannot delete a resource, such as a non-empty
        /// S3 bucket, but you want to delete the stack.</p>
        pub fn retain_resources(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.retain_resources(inp);
            self
        }
        pub fn set_retain_resources(
            mut self,
            inp: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_retain_resources(inp);
            self
        }
        /// <p>The Amazon Resource Name (ARN) of an AWS Identity and Access Management (IAM) role
        /// that AWS CloudFormation assumes to delete the stack. AWS CloudFormation uses the role's
        /// credentials to make calls on your behalf.</p>
        /// <p>If you don't specify a value, AWS CloudFormation uses the role that was previously
        /// associated with the stack. If no role is available, AWS CloudFormation uses a temporary
        /// session that is generated from your user credentials.</p>
        pub fn role_arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.role_arn(inp);
            self
        }
        pub fn set_role_arn(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_role_arn(inp);
            self
        }
        /// <p>A unique identifier for this <code>DeleteStack</code> request. Specify this token if
        /// you plan to retry requests so that AWS CloudFormation knows that you're not attempting to
        /// delete a stack with the same name. You might retry <code>DeleteStack</code> requests to
        /// ensure that AWS CloudFormation successfully received them.</p>
        /// <p>All events triggered by a given stack operation are assigned the same client request
        /// token, which you can use to track operations. For example, if you execute a
        /// <code>CreateStack</code> operation with the token <code>token1</code>, then all the
        /// <code>StackEvents</code> generated by that operation will have
        /// <code>ClientRequestToken</code> set as <code>token1</code>.</p>
        /// <p>In the console, stack operations display the client request token on the Events tab.
        /// Stack operations that are initiated from the console use the token format
        /// <i>Console-StackOperation-ID</i>, which helps you easily identify the
        /// stack operation . For example, if you create a stack using the console, each stack event
        /// would be assigned the same token in the following format:
        /// <code>Console-CreateStack-7f59c3cf-00d2-40c7-b2ff-e75db0987002</code>. </p>
        pub fn client_request_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.client_request_token(inp);
            self
        }
        pub fn set_client_request_token(
            mut self,
            inp: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_client_request_token(inp);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeleteStackInstances<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::delete_stack_instances_input::Builder,
    }
    impl<C> DeleteStackInstances<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> Result<
            crate::output::DeleteStackInstancesOutput,
            smithy_http::result::SdkError<crate::error::DeleteStackInstancesError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name or unique ID of the stack set that you want to delete stack instances
        /// for.</p>
        pub fn stack_set_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.stack_set_name(inp);
            self
        }
        pub fn set_stack_set_name(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_stack_set_name(inp);
            self
        }
        /// <p>[Self-managed permissions] The names of the AWS accounts that you want to delete stack instances for.</p>
        /// <p>You can specify <code>Accounts</code> or <code>DeploymentTargets</code>, but not both.</p>
        pub fn accounts(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.accounts(inp);
            self
        }
        pub fn set_accounts(
            mut self,
            inp: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_accounts(inp);
            self
        }
        /// <p>[Service-managed permissions] The AWS Organizations accounts from which to delete stack instances.</p>
        /// <p>You can specify <code>Accounts</code> or <code>DeploymentTargets</code>, but not both.</p>
        pub fn deployment_targets(mut self, inp: crate::model::DeploymentTargets) -> Self {
            self.inner = self.inner.deployment_targets(inp);
            self
        }
        pub fn set_deployment_targets(
            mut self,
            inp: std::option::Option<crate::model::DeploymentTargets>,
        ) -> Self {
            self.inner = self.inner.set_deployment_targets(inp);
            self
        }
        /// <p>The Regions where you want to delete stack set instances. </p>
        pub fn regions(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.regions(inp);
            self
        }
        pub fn set_regions(
            mut self,
            inp: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_regions(inp);
            self
        }
        /// <p>Preferences for how AWS CloudFormation performs this stack set operation.</p>
        pub fn operation_preferences(
            mut self,
            inp: crate::model::StackSetOperationPreferences,
        ) -> Self {
            self.inner = self.inner.operation_preferences(inp);
            self
        }
        pub fn set_operation_preferences(
            mut self,
            inp: std::option::Option<crate::model::StackSetOperationPreferences>,
        ) -> Self {
            self.inner = self.inner.set_operation_preferences(inp);
            self
        }
        /// <p>Removes the stack instances from the specified stack set, but doesn't delete the
        /// stacks. You can't reassociate a retained stack or add an existing, saved stack to a new
        /// stack set.</p>
        /// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-concepts.html#stackset-ops-options">Stack set operation options</a>.</p>
        pub fn retain_stacks(mut self, inp: bool) -> Self {
            self.inner = self.inner.retain_stacks(inp);
            self
        }
        pub fn set_retain_stacks(mut self, inp: bool) -> Self {
            self.inner = self.inner.set_retain_stacks(inp);
            self
        }
        /// <p>The unique identifier for this stack set operation. </p>
        /// <p>If you don't specify an operation ID, the SDK generates one automatically. </p>
        /// <p>The operation ID also functions as an idempotency token, to ensure that AWS
        /// CloudFormation performs the stack set operation only once, even if you retry the request
        /// multiple times. You can retry stack set operation requests to ensure that AWS
        /// CloudFormation successfully received them.</p>
        /// <p>Repeating this stack set operation with a new operation ID retries all stack
        /// instances whose status is <code>OUTDATED</code>. </p>
        pub fn operation_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.operation_id(inp);
            self
        }
        pub fn set_operation_id(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_operation_id(inp);
            self
        }
        /// <p>[Service-managed permissions] Specifies whether you are acting as an account administrator in the organization's management account or as a delegated administrator in a member account.</p>
        /// <p>By default, <code>SELF</code> is specified. Use <code>SELF</code> for stack sets with self-managed permissions.</p>
        /// <ul>
        /// <li>
        /// <p>If you are signed in to the management account, specify <code>SELF</code>.</p>
        /// </li>
        /// <li>
        /// <p>If you are signed in to a delegated administrator account, specify <code>DELEGATED_ADMIN</code>.</p>
        /// <p>Your AWS account must be registered as a delegated administrator in the management account. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html">Register a delegated administrator</a> in the <i>AWS CloudFormation User Guide</i>.</p>
        /// </li>
        /// </ul>
        pub fn call_as(mut self, inp: crate::model::CallAs) -> Self {
            self.inner = self.inner.call_as(inp);
            self
        }
        pub fn set_call_as(mut self, inp: std::option::Option<crate::model::CallAs>) -> Self {
            self.inner = self.inner.set_call_as(inp);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeleteStackSet<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::delete_stack_set_input::Builder,
    }
    impl<C> DeleteStackSet<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> Result<
            crate::output::DeleteStackSetOutput,
            smithy_http::result::SdkError<crate::error::DeleteStackSetError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name or unique ID of the stack set that you're deleting. You can obtain this
        /// value by running <a>ListStackSets</a>.</p>
        pub fn stack_set_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.stack_set_name(inp);
            self
        }
        pub fn set_stack_set_name(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_stack_set_name(inp);
            self
        }
        /// <p>[Service-managed permissions] Specifies whether you are acting as an account administrator in the organization's management account or as a delegated administrator in a member account.</p>
        /// <p>By default, <code>SELF</code> is specified. Use <code>SELF</code> for stack sets with self-managed permissions.</p>
        /// <ul>
        /// <li>
        /// <p>If you are signed in to the management account, specify <code>SELF</code>.</p>
        /// </li>
        /// <li>
        /// <p>If you are signed in to a delegated administrator account, specify <code>DELEGATED_ADMIN</code>.</p>
        /// <p>Your AWS account must be registered as a delegated administrator in the management account. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html">Register a delegated administrator</a> in the <i>AWS CloudFormation User Guide</i>.</p>
        /// </li>
        /// </ul>
        pub fn call_as(mut self, inp: crate::model::CallAs) -> Self {
            self.inner = self.inner.call_as(inp);
            self
        }
        pub fn set_call_as(mut self, inp: std::option::Option<crate::model::CallAs>) -> Self {
            self.inner = self.inner.set_call_as(inp);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeregisterType<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::deregister_type_input::Builder,
    }
    impl<C> DeregisterType<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> Result<
            crate::output::DeregisterTypeOutput,
            smithy_http::result::SdkError<crate::error::DeregisterTypeError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Name (ARN) of the extension.</p>
        /// <p>Conditional: You must specify either <code>TypeName</code> and <code>Type</code>, or <code>Arn</code>.</p>
        pub fn arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.arn(inp);
            self
        }
        pub fn set_arn(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_arn(inp);
            self
        }
        /// <p>The kind of extension.</p>
        /// <p>Conditional: You must specify either <code>TypeName</code> and <code>Type</code>, or <code>Arn</code>.</p>
        pub fn r#type(mut self, inp: crate::model::RegistryType) -> Self {
            self.inner = self.inner.r#type(inp);
            self
        }
        pub fn set_type(mut self, inp: std::option::Option<crate::model::RegistryType>) -> Self {
            self.inner = self.inner.set_type(inp);
            self
        }
        /// <p>The name of the extension.</p>
        /// <p>Conditional: You must specify either <code>TypeName</code> and <code>Type</code>, or <code>Arn</code>.</p>
        pub fn type_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.type_name(inp);
            self
        }
        pub fn set_type_name(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_type_name(inp);
            self
        }
        /// <p>The ID of a specific version of the extension. The version ID is the value at the end of the Amazon Resource Name (ARN) assigned to the extension version when it is registered.</p>
        pub fn version_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.version_id(inp);
            self
        }
        pub fn set_version_id(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_version_id(inp);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeAccountLimits<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::describe_account_limits_input::Builder,
    }
    impl<C> DescribeAccountLimits<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> Result<
            crate::output::DescribeAccountLimitsOutput,
            smithy_http::result::SdkError<crate::error::DescribeAccountLimitsError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>A string that identifies the next page of limits that you want to retrieve.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(inp);
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(inp);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeChangeSet<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::describe_change_set_input::Builder,
    }
    impl<C> DescribeChangeSet<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> Result<
            crate::output::DescribeChangeSetOutput,
            smithy_http::result::SdkError<crate::error::DescribeChangeSetError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name or Amazon Resource Name (ARN) of the change set that you want to
        /// describe.</p>
        pub fn change_set_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.change_set_name(inp);
            self
        }
        pub fn set_change_set_name(
            mut self,
            inp: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_change_set_name(inp);
            self
        }
        /// <p>If you specified the name of a change set, specify the stack name or ID (ARN) of the
        /// change set you want to describe.</p>
        pub fn stack_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.stack_name(inp);
            self
        }
        pub fn set_stack_name(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_stack_name(inp);
            self
        }
        /// <p>A string (provided by the <a>DescribeChangeSet</a> response output) that
        /// identifies the next page of information that you want to retrieve.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(inp);
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(inp);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeStackDriftDetectionStatus<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::describe_stack_drift_detection_status_input::Builder,
    }
    impl<C> DescribeStackDriftDetectionStatus<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> Result<
            crate::output::DescribeStackDriftDetectionStatusOutput,
            smithy_http::result::SdkError<crate::error::DescribeStackDriftDetectionStatusError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the drift detection results of this operation. </p>
        /// <p>AWS CloudFormation generates new results, with a new drift detection ID, each time this operation
        /// is run. However, the number of drift results AWS CloudFormation retains for any given stack, and for how
        /// long, may vary. </p>
        pub fn stack_drift_detection_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.stack_drift_detection_id(inp);
            self
        }
        pub fn set_stack_drift_detection_id(
            mut self,
            inp: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_stack_drift_detection_id(inp);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeStackEvents<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::describe_stack_events_input::Builder,
    }
    impl<C> DescribeStackEvents<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> Result<
            crate::output::DescribeStackEventsOutput,
            smithy_http::result::SdkError<crate::error::DescribeStackEventsError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name or the unique stack ID that is associated with the stack, which are not
        /// always interchangeable:</p>
        /// <ul>
        /// <li>
        /// <p>Running stacks: You can specify either the stack's name or its unique stack
        /// ID.</p>
        /// </li>
        /// <li>
        /// <p>Deleted stacks: You must specify the unique stack ID.</p>
        /// </li>
        /// </ul>
        /// <p>Default: There is no default value.</p>
        pub fn stack_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.stack_name(inp);
            self
        }
        pub fn set_stack_name(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_stack_name(inp);
            self
        }
        /// <p>A string that identifies the next page of events that you want to retrieve.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(inp);
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(inp);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeStackInstance<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::describe_stack_instance_input::Builder,
    }
    impl<C> DescribeStackInstance<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> Result<
            crate::output::DescribeStackInstanceOutput,
            smithy_http::result::SdkError<crate::error::DescribeStackInstanceError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name or the unique stack ID of the stack set that you want to get stack instance
        /// information for.</p>
        pub fn stack_set_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.stack_set_name(inp);
            self
        }
        pub fn set_stack_set_name(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_stack_set_name(inp);
            self
        }
        /// <p>The ID of an AWS account that's associated with this stack instance.</p>
        pub fn stack_instance_account(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.stack_instance_account(inp);
            self
        }
        pub fn set_stack_instance_account(
            mut self,
            inp: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_stack_instance_account(inp);
            self
        }
        /// <p>The name of a Region that's associated with this stack instance.</p>
        pub fn stack_instance_region(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.stack_instance_region(inp);
            self
        }
        pub fn set_stack_instance_region(
            mut self,
            inp: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_stack_instance_region(inp);
            self
        }
        /// <p>[Service-managed permissions] Specifies whether you are acting as an account administrator in the organization's management account or as a delegated administrator in a member account.</p>
        /// <p>By default, <code>SELF</code> is specified. Use <code>SELF</code> for stack sets with self-managed permissions.</p>
        /// <ul>
        /// <li>
        /// <p>If you are signed in to the management account, specify <code>SELF</code>.</p>
        /// </li>
        /// <li>
        /// <p>If you are signed in to a delegated administrator account, specify <code>DELEGATED_ADMIN</code>.</p>
        /// <p>Your AWS account must be registered as a delegated administrator in the management account. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html">Register a delegated administrator</a> in the <i>AWS CloudFormation User Guide</i>.</p>
        /// </li>
        /// </ul>
        pub fn call_as(mut self, inp: crate::model::CallAs) -> Self {
            self.inner = self.inner.call_as(inp);
            self
        }
        pub fn set_call_as(mut self, inp: std::option::Option<crate::model::CallAs>) -> Self {
            self.inner = self.inner.set_call_as(inp);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeStackResource<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::describe_stack_resource_input::Builder,
    }
    impl<C> DescribeStackResource<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> Result<
            crate::output::DescribeStackResourceOutput,
            smithy_http::result::SdkError<crate::error::DescribeStackResourceError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name or the unique stack ID that is associated with the stack, which are not
        /// always interchangeable:</p>
        /// <ul>
        /// <li>
        /// <p>Running stacks: You can specify either the stack's name or its unique stack
        /// ID.</p>
        /// </li>
        /// <li>
        /// <p>Deleted stacks: You must specify the unique stack ID.</p>
        /// </li>
        /// </ul>
        /// <p>Default: There is no default value.</p>
        pub fn stack_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.stack_name(inp);
            self
        }
        pub fn set_stack_name(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_stack_name(inp);
            self
        }
        /// <p>The logical name of the resource as specified in the template.</p>
        /// <p>Default: There is no default value.</p>
        pub fn logical_resource_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.logical_resource_id(inp);
            self
        }
        pub fn set_logical_resource_id(
            mut self,
            inp: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_logical_resource_id(inp);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeStackResourceDrifts<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::describe_stack_resource_drifts_input::Builder,
    }
    impl<C> DescribeStackResourceDrifts<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> Result<
            crate::output::DescribeStackResourceDriftsOutput,
            smithy_http::result::SdkError<crate::error::DescribeStackResourceDriftsError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the stack for which you want drift information.</p>
        pub fn stack_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.stack_name(inp);
            self
        }
        pub fn set_stack_name(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_stack_name(inp);
            self
        }
        /// <p>The resource drift status values to use as filters for the resource drift results
        /// returned.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>DELETED</code>: The resource differs from its expected template
        /// configuration in that the resource has been deleted.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>MODIFIED</code>: One or more resource properties differ from their
        /// expected template values.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>IN_SYNC</code>: The resources's actual configuration matches its expected
        /// template configuration.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>NOT_CHECKED</code>: AWS CloudFormation does not currently return this value.</p>
        /// </li>
        /// </ul>
        pub fn stack_resource_drift_status_filters(
            mut self,
            inp: impl Into<crate::model::StackResourceDriftStatus>,
        ) -> Self {
            self.inner = self.inner.stack_resource_drift_status_filters(inp);
            self
        }
        pub fn set_stack_resource_drift_status_filters(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::StackResourceDriftStatus>>,
        ) -> Self {
            self.inner = self.inner.set_stack_resource_drift_status_filters(inp);
            self
        }
        /// <p>A string that identifies the next page of stack resource drift results.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(inp);
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(inp);
            self
        }
        /// <p>The maximum number of results to be returned with a single call. If the number of
        /// available results exceeds this maximum, the response includes a <code>NextToken</code>
        /// value that you can assign to the <code>NextToken</code> request parameter to get the next
        /// set of results.</p>
        pub fn max_results(mut self, inp: i32) -> Self {
            self.inner = self.inner.max_results(inp);
            self
        }
        pub fn set_max_results(mut self, inp: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(inp);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeStackResources<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::describe_stack_resources_input::Builder,
    }
    impl<C> DescribeStackResources<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> Result<
            crate::output::DescribeStackResourcesOutput,
            smithy_http::result::SdkError<crate::error::DescribeStackResourcesError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name or the unique stack ID that is associated with the stack, which are not
        /// always interchangeable:</p>
        /// <ul>
        /// <li>
        /// <p>Running stacks: You can specify either the stack's name or its unique stack
        /// ID.</p>
        /// </li>
        /// <li>
        /// <p>Deleted stacks: You must specify the unique stack ID.</p>
        /// </li>
        /// </ul>
        /// <p>Default: There is no default value.</p>
        /// <p>Required: Conditional. If you do not specify <code>StackName</code>, you must specify
        /// <code>PhysicalResourceId</code>.</p>
        pub fn stack_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.stack_name(inp);
            self
        }
        pub fn set_stack_name(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_stack_name(inp);
            self
        }
        /// <p>The logical name of the resource as specified in the template.</p>
        /// <p>Default: There is no default value.</p>
        pub fn logical_resource_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.logical_resource_id(inp);
            self
        }
        pub fn set_logical_resource_id(
            mut self,
            inp: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_logical_resource_id(inp);
            self
        }
        /// <p>The name or unique identifier that corresponds to a physical instance ID of a
        /// resource supported by AWS CloudFormation.</p>
        /// <p>For example, for an Amazon Elastic Compute Cloud (EC2) instance,
        /// <code>PhysicalResourceId</code> corresponds to the <code>InstanceId</code>. You can pass
        /// the EC2 <code>InstanceId</code> to <code>DescribeStackResources</code> to find which stack
        /// the instance belongs to and what other resources are part of the stack.</p>
        /// <p>Required: Conditional. If you do not specify <code>PhysicalResourceId</code>, you
        /// must specify <code>StackName</code>.</p>
        /// <p>Default: There is no default value.</p>
        pub fn physical_resource_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.physical_resource_id(inp);
            self
        }
        pub fn set_physical_resource_id(
            mut self,
            inp: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_physical_resource_id(inp);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeStacks<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::describe_stacks_input::Builder,
    }
    impl<C> DescribeStacks<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> Result<
            crate::output::DescribeStacksOutput,
            smithy_http::result::SdkError<crate::error::DescribeStacksError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name or the unique stack ID that is associated with the stack, which are not
        /// always interchangeable:</p>
        /// <ul>
        /// <li>
        /// <p>Running stacks: You can specify either the stack's name or its unique stack
        /// ID.</p>
        /// </li>
        /// <li>
        /// <p>Deleted stacks: You must specify the unique stack ID.</p>
        /// </li>
        /// </ul>
        /// <p>Default: There is no default value.</p>
        pub fn stack_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.stack_name(inp);
            self
        }
        pub fn set_stack_name(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_stack_name(inp);
            self
        }
        /// <p>A string that identifies the next page of stacks that you want to retrieve.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(inp);
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(inp);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeStackSet<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::describe_stack_set_input::Builder,
    }
    impl<C> DescribeStackSet<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> Result<
            crate::output::DescribeStackSetOutput,
            smithy_http::result::SdkError<crate::error::DescribeStackSetError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name or unique ID of the stack set whose description you want.</p>
        pub fn stack_set_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.stack_set_name(inp);
            self
        }
        pub fn set_stack_set_name(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_stack_set_name(inp);
            self
        }
        /// <p>[Service-managed permissions] Specifies whether you are acting as an account administrator in the organization's management account or as a delegated administrator in a member account.</p>
        /// <p>By default, <code>SELF</code> is specified. Use <code>SELF</code> for stack sets with self-managed permissions.</p>
        /// <ul>
        /// <li>
        /// <p>If you are signed in to the management account, specify <code>SELF</code>.</p>
        /// </li>
        /// <li>
        /// <p>If you are signed in to a delegated administrator account, specify <code>DELEGATED_ADMIN</code>.</p>
        /// <p>Your AWS account must be registered as a delegated administrator in the management account. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html">Register a delegated administrator</a> in the <i>AWS CloudFormation User Guide</i>.</p>
        /// </li>
        /// </ul>
        pub fn call_as(mut self, inp: crate::model::CallAs) -> Self {
            self.inner = self.inner.call_as(inp);
            self
        }
        pub fn set_call_as(mut self, inp: std::option::Option<crate::model::CallAs>) -> Self {
            self.inner = self.inner.set_call_as(inp);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeStackSetOperation<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::describe_stack_set_operation_input::Builder,
    }
    impl<C> DescribeStackSetOperation<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> Result<
            crate::output::DescribeStackSetOperationOutput,
            smithy_http::result::SdkError<crate::error::DescribeStackSetOperationError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name or the unique stack ID of the stack set for the stack operation.</p>
        pub fn stack_set_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.stack_set_name(inp);
            self
        }
        pub fn set_stack_set_name(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_stack_set_name(inp);
            self
        }
        /// <p>The unique ID of the stack set operation. </p>
        pub fn operation_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.operation_id(inp);
            self
        }
        pub fn set_operation_id(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_operation_id(inp);
            self
        }
        /// <p>[Service-managed permissions] Specifies whether you are acting as an account administrator in the organization's management account or as a delegated administrator in a member account.</p>
        /// <p>By default, <code>SELF</code> is specified. Use <code>SELF</code> for stack sets with self-managed permissions.</p>
        /// <ul>
        /// <li>
        /// <p>If you are signed in to the management account, specify <code>SELF</code>.</p>
        /// </li>
        /// <li>
        /// <p>If you are signed in to a delegated administrator account, specify <code>DELEGATED_ADMIN</code>.</p>
        /// <p>Your AWS account must be registered as a delegated administrator in the management account. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html">Register a delegated administrator</a> in the <i>AWS CloudFormation User Guide</i>.</p>
        /// </li>
        /// </ul>
        pub fn call_as(mut self, inp: crate::model::CallAs) -> Self {
            self.inner = self.inner.call_as(inp);
            self
        }
        pub fn set_call_as(mut self, inp: std::option::Option<crate::model::CallAs>) -> Self {
            self.inner = self.inner.set_call_as(inp);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeType<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::describe_type_input::Builder,
    }
    impl<C> DescribeType<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> Result<
            crate::output::DescribeTypeOutput,
            smithy_http::result::SdkError<crate::error::DescribeTypeError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The kind of extension. </p>
        /// <p>Conditional: You must specify either <code>TypeName</code> and <code>Type</code>, or <code>Arn</code>.</p>
        pub fn r#type(mut self, inp: crate::model::RegistryType) -> Self {
            self.inner = self.inner.r#type(inp);
            self
        }
        pub fn set_type(mut self, inp: std::option::Option<crate::model::RegistryType>) -> Self {
            self.inner = self.inner.set_type(inp);
            self
        }
        /// <p>The name of the extension.</p>
        /// <p>Conditional: You must specify either <code>TypeName</code> and <code>Type</code>, or <code>Arn</code>.</p>
        pub fn type_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.type_name(inp);
            self
        }
        pub fn set_type_name(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_type_name(inp);
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the extension.</p>
        /// <p>Conditional: You must specify either <code>TypeName</code> and <code>Type</code>, or <code>Arn</code>.</p>
        pub fn arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.arn(inp);
            self
        }
        pub fn set_arn(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_arn(inp);
            self
        }
        /// <p>The ID of a specific version of the extension. The version ID is the value at the end of the Amazon Resource Name (ARN) assigned to the extension version when it is registered.</p>
        /// <p>If you specify a <code>VersionId</code>, <code>DescribeType</code> returns information about that specific extension version. Otherwise, it returns information about the default extension version.</p>
        pub fn version_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.version_id(inp);
            self
        }
        pub fn set_version_id(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_version_id(inp);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeTypeRegistration<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::describe_type_registration_input::Builder,
    }
    impl<C> DescribeTypeRegistration<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> Result<
            crate::output::DescribeTypeRegistrationOutput,
            smithy_http::result::SdkError<crate::error::DescribeTypeRegistrationError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The identifier for this registration request.</p>
        /// <p>This registration token is generated by CloudFormation when you initiate a registration request using <code>
        /// <a>RegisterType</a>
        /// </code>.</p>
        pub fn registration_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.registration_token(inp);
            self
        }
        pub fn set_registration_token(
            mut self,
            inp: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_registration_token(inp);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DetectStackDrift<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::detect_stack_drift_input::Builder,
    }
    impl<C> DetectStackDrift<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> Result<
            crate::output::DetectStackDriftOutput,
            smithy_http::result::SdkError<crate::error::DetectStackDriftError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the stack for which you want to detect drift. </p>
        pub fn stack_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.stack_name(inp);
            self
        }
        pub fn set_stack_name(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_stack_name(inp);
            self
        }
        /// <p>The logical names of any resources you want to use as filters.</p>
        pub fn logical_resource_ids(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.logical_resource_ids(inp);
            self
        }
        pub fn set_logical_resource_ids(
            mut self,
            inp: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_logical_resource_ids(inp);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DetectStackResourceDrift<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::detect_stack_resource_drift_input::Builder,
    }
    impl<C> DetectStackResourceDrift<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> Result<
            crate::output::DetectStackResourceDriftOutput,
            smithy_http::result::SdkError<crate::error::DetectStackResourceDriftError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the stack to which the resource belongs.</p>
        pub fn stack_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.stack_name(inp);
            self
        }
        pub fn set_stack_name(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_stack_name(inp);
            self
        }
        /// <p>The logical name of the resource for which to return drift information.</p>
        pub fn logical_resource_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.logical_resource_id(inp);
            self
        }
        pub fn set_logical_resource_id(
            mut self,
            inp: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_logical_resource_id(inp);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DetectStackSetDrift<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::detect_stack_set_drift_input::Builder,
    }
    impl<C> DetectStackSetDrift<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> Result<
            crate::output::DetectStackSetDriftOutput,
            smithy_http::result::SdkError<crate::error::DetectStackSetDriftError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the stack set on which to perform the drift detection operation.</p>
        pub fn stack_set_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.stack_set_name(inp);
            self
        }
        pub fn set_stack_set_name(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_stack_set_name(inp);
            self
        }
        /// <p>The user-specified preferences for how AWS CloudFormation performs a stack set
        /// operation. </p>
        /// <p>For more information on maximum concurrent accounts and failure tolerance, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-concepts.html#stackset-ops-options">Stack set operation options</a>.</p>
        pub fn operation_preferences(
            mut self,
            inp: crate::model::StackSetOperationPreferences,
        ) -> Self {
            self.inner = self.inner.operation_preferences(inp);
            self
        }
        pub fn set_operation_preferences(
            mut self,
            inp: std::option::Option<crate::model::StackSetOperationPreferences>,
        ) -> Self {
            self.inner = self.inner.set_operation_preferences(inp);
            self
        }
        /// <p>
        /// <i>The ID of the stack set operation.</i>
        /// </p>
        pub fn operation_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.operation_id(inp);
            self
        }
        pub fn set_operation_id(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_operation_id(inp);
            self
        }
        /// <p>[Service-managed permissions] Specifies whether you are acting as an account administrator in the organization's management account or as a delegated administrator in a member account.</p>
        /// <p>By default, <code>SELF</code> is specified. Use <code>SELF</code> for stack sets with self-managed permissions.</p>
        /// <ul>
        /// <li>
        /// <p>If you are signed in to the management account, specify <code>SELF</code>.</p>
        /// </li>
        /// <li>
        /// <p>If you are signed in to a delegated administrator account, specify <code>DELEGATED_ADMIN</code>.</p>
        /// <p>Your AWS account must be registered as a delegated administrator in the management account. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html">Register a delegated administrator</a> in the <i>AWS CloudFormation User Guide</i>.</p>
        /// </li>
        /// </ul>
        pub fn call_as(mut self, inp: crate::model::CallAs) -> Self {
            self.inner = self.inner.call_as(inp);
            self
        }
        pub fn set_call_as(mut self, inp: std::option::Option<crate::model::CallAs>) -> Self {
            self.inner = self.inner.set_call_as(inp);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct EstimateTemplateCost<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::estimate_template_cost_input::Builder,
    }
    impl<C> EstimateTemplateCost<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> Result<
            crate::output::EstimateTemplateCostOutput,
            smithy_http::result::SdkError<crate::error::EstimateTemplateCostError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>Structure containing the template body with a minimum length of 1 byte and a maximum
        /// length of 51,200 bytes. (For more information, go to <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html">Template Anatomy</a>
        /// in the AWS CloudFormation User Guide.)</p>
        /// <p>Conditional: You must pass <code>TemplateBody</code> or <code>TemplateURL</code>. If
        /// both are passed, only <code>TemplateBody</code> is used.</p>
        pub fn template_body(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.template_body(inp);
            self
        }
        pub fn set_template_body(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_template_body(inp);
            self
        }
        /// <p>Location of file containing the template body. The URL must point to a template that
        /// is located in an Amazon S3 bucket or a Systems Manager document. For more information, go to
        /// <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html">Template Anatomy</a>
        /// in the AWS CloudFormation User Guide.</p>
        /// <p>Conditional: You must pass <code>TemplateURL</code> or <code>TemplateBody</code>. If
        /// both are passed, only <code>TemplateBody</code> is used.</p>
        pub fn template_url(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.template_url(inp);
            self
        }
        pub fn set_template_url(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_template_url(inp);
            self
        }
        /// <p>A list of <code>Parameter</code> structures that specify input parameters.</p>
        pub fn parameters(mut self, inp: impl Into<crate::model::Parameter>) -> Self {
            self.inner = self.inner.parameters(inp);
            self
        }
        pub fn set_parameters(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::Parameter>>,
        ) -> Self {
            self.inner = self.inner.set_parameters(inp);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ExecuteChangeSet<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::execute_change_set_input::Builder,
    }
    impl<C> ExecuteChangeSet<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> Result<
            crate::output::ExecuteChangeSetOutput,
            smithy_http::result::SdkError<crate::error::ExecuteChangeSetError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name or ARN of the change set that you want use to update the specified
        /// stack.</p>
        pub fn change_set_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.change_set_name(inp);
            self
        }
        pub fn set_change_set_name(
            mut self,
            inp: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_change_set_name(inp);
            self
        }
        /// <p>If you specified the name of a change set, specify the stack name or ID (ARN) that is
        /// associated with the change set you want to execute.</p>
        pub fn stack_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.stack_name(inp);
            self
        }
        pub fn set_stack_name(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_stack_name(inp);
            self
        }
        /// <p>A unique identifier for this <code>ExecuteChangeSet</code> request. Specify this
        /// token if you plan to retry requests so that AWS CloudFormation knows that you're not
        /// attempting to execute a change set to update a stack with the same name. You might retry
        /// <code>ExecuteChangeSet</code> requests to ensure that AWS CloudFormation successfully
        /// received them.</p>
        pub fn client_request_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.client_request_token(inp);
            self
        }
        pub fn set_client_request_token(
            mut self,
            inp: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_client_request_token(inp);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct GetStackPolicy<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::get_stack_policy_input::Builder,
    }
    impl<C> GetStackPolicy<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> Result<
            crate::output::GetStackPolicyOutput,
            smithy_http::result::SdkError<crate::error::GetStackPolicyError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name or unique stack ID that is associated with the stack whose policy you want
        /// to get.</p>
        pub fn stack_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.stack_name(inp);
            self
        }
        pub fn set_stack_name(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_stack_name(inp);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct GetTemplate<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::get_template_input::Builder,
    }
    impl<C> GetTemplate<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> Result<
            crate::output::GetTemplateOutput,
            smithy_http::result::SdkError<crate::error::GetTemplateError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name or the unique stack ID that is associated with the stack, which are not
        /// always interchangeable:</p>
        /// <ul>
        /// <li>
        /// <p>Running stacks: You can specify either the stack's name or its unique stack
        /// ID.</p>
        /// </li>
        /// <li>
        /// <p>Deleted stacks: You must specify the unique stack ID.</p>
        /// </li>
        /// </ul>
        /// <p>Default: There is no default value.</p>
        pub fn stack_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.stack_name(inp);
            self
        }
        pub fn set_stack_name(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_stack_name(inp);
            self
        }
        /// <p>The name or Amazon Resource Name (ARN) of a change set for which AWS CloudFormation
        /// returns the associated template. If you specify a name, you must also specify the
        /// <code>StackName</code>.</p>
        pub fn change_set_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.change_set_name(inp);
            self
        }
        pub fn set_change_set_name(
            mut self,
            inp: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_change_set_name(inp);
            self
        }
        /// <p>For templates that include transforms, the stage of the template that AWS
        /// CloudFormation returns. To get the user-submitted template, specify <code>Original</code>.
        /// To get the template after AWS CloudFormation has processed all transforms, specify
        /// <code>Processed</code>. </p>
        /// <p>If the template doesn't include transforms, <code>Original</code> and
        /// <code>Processed</code> return the same template. By default, AWS CloudFormation
        /// specifies <code>Original</code>. </p>
        pub fn template_stage(mut self, inp: crate::model::TemplateStage) -> Self {
            self.inner = self.inner.template_stage(inp);
            self
        }
        pub fn set_template_stage(
            mut self,
            inp: std::option::Option<crate::model::TemplateStage>,
        ) -> Self {
            self.inner = self.inner.set_template_stage(inp);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct GetTemplateSummary<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::get_template_summary_input::Builder,
    }
    impl<C> GetTemplateSummary<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> Result<
            crate::output::GetTemplateSummaryOutput,
            smithy_http::result::SdkError<crate::error::GetTemplateSummaryError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>Structure containing the template body with a minimum length of 1 byte and a maximum
        /// length of 51,200 bytes. For more information about templates, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html">Template Anatomy</a> in the AWS CloudFormation User Guide.</p>
        /// <p>Conditional: You must specify only one of the following parameters:
        /// <code>StackName</code>, <code>StackSetName</code>, <code>TemplateBody</code>, or
        /// <code>TemplateURL</code>.</p>
        pub fn template_body(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.template_body(inp);
            self
        }
        pub fn set_template_body(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_template_body(inp);
            self
        }
        /// <p>Location of file containing the template body. The URL must point to a template (max
        /// size: 460,800 bytes) that is located in an Amazon S3 bucket or a Systems Manager document.
        /// For more information about templates, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html">Template Anatomy</a>
        /// in the AWS CloudFormation User Guide.</p>
        /// <p>Conditional: You must specify only one of the following parameters:
        /// <code>StackName</code>, <code>StackSetName</code>, <code>TemplateBody</code>, or
        /// <code>TemplateURL</code>.</p>
        pub fn template_url(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.template_url(inp);
            self
        }
        pub fn set_template_url(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_template_url(inp);
            self
        }
        /// <p>The name or the stack ID that is associated with the stack, which are not always
        /// interchangeable. For running stacks, you can specify either the stack's name or its unique
        /// stack ID. For deleted stack, you must specify the unique stack ID.</p>
        /// <p>Conditional: You must specify only one of the following parameters:
        /// <code>StackName</code>, <code>StackSetName</code>, <code>TemplateBody</code>, or
        /// <code>TemplateURL</code>.</p>
        pub fn stack_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.stack_name(inp);
            self
        }
        pub fn set_stack_name(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_stack_name(inp);
            self
        }
        /// <p>The name or unique ID of the stack set from which the stack was created.</p>
        /// <p>Conditional: You must specify only one of the following parameters:
        /// <code>StackName</code>, <code>StackSetName</code>, <code>TemplateBody</code>, or
        /// <code>TemplateURL</code>.</p>
        pub fn stack_set_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.stack_set_name(inp);
            self
        }
        pub fn set_stack_set_name(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_stack_set_name(inp);
            self
        }
        /// <p>[Service-managed permissions] Specifies whether you are acting as an account administrator in the organization's management account or as a delegated administrator in a member account.</p>
        /// <p>By default, <code>SELF</code> is specified. Use <code>SELF</code> for stack sets with self-managed permissions.</p>
        /// <ul>
        /// <li>
        /// <p>If you are signed in to the management account, specify <code>SELF</code>.</p>
        /// </li>
        /// <li>
        /// <p>If you are signed in to a delegated administrator account, specify <code>DELEGATED_ADMIN</code>.</p>
        /// <p>Your AWS account must be registered as a delegated administrator in the management account. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html">Register a delegated administrator</a> in the <i>AWS CloudFormation User Guide</i>.</p>
        /// </li>
        /// </ul>
        pub fn call_as(mut self, inp: crate::model::CallAs) -> Self {
            self.inner = self.inner.call_as(inp);
            self
        }
        pub fn set_call_as(mut self, inp: std::option::Option<crate::model::CallAs>) -> Self {
            self.inner = self.inner.set_call_as(inp);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListChangeSets<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::list_change_sets_input::Builder,
    }
    impl<C> ListChangeSets<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> Result<
            crate::output::ListChangeSetsOutput,
            smithy_http::result::SdkError<crate::error::ListChangeSetsError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name or the Amazon Resource Name (ARN) of the stack for which you want to list
        /// change sets.</p>
        pub fn stack_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.stack_name(inp);
            self
        }
        pub fn set_stack_name(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_stack_name(inp);
            self
        }
        /// <p>A string (provided by the <a>ListChangeSets</a> response output) that
        /// identifies the next page of change sets that you want to retrieve.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(inp);
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(inp);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListExports<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::list_exports_input::Builder,
    }
    impl<C> ListExports<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> Result<
            crate::output::ListExportsOutput,
            smithy_http::result::SdkError<crate::error::ListExportsError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>A string (provided by the <a>ListExports</a> response output) that
        /// identifies the next page of exported output values that you asked to retrieve.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(inp);
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(inp);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListImports<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::list_imports_input::Builder,
    }
    impl<C> ListImports<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> Result<
            crate::output::ListImportsOutput,
            smithy_http::result::SdkError<crate::error::ListImportsError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the exported output value. AWS CloudFormation returns the stack names
        /// that are importing this value. </p>
        pub fn export_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.export_name(inp);
            self
        }
        pub fn set_export_name(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_export_name(inp);
            self
        }
        /// <p>A string (provided by the <a>ListImports</a> response output) that
        /// identifies the next page of stacks that are importing the specified exported output value.
        /// </p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(inp);
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(inp);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListStackInstances<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::list_stack_instances_input::Builder,
    }
    impl<C> ListStackInstances<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> Result<
            crate::output::ListStackInstancesOutput,
            smithy_http::result::SdkError<crate::error::ListStackInstancesError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name or unique ID of the stack set that you want to list stack instances
        /// for.</p>
        pub fn stack_set_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.stack_set_name(inp);
            self
        }
        pub fn set_stack_set_name(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_stack_set_name(inp);
            self
        }
        /// <p>If the previous request didn't return all of the remaining results, the response's
        /// <code>NextToken</code> parameter value is set to a token. To retrieve the next set of
        /// results, call <code>ListStackInstances</code> again and assign that token to the request
        /// object's <code>NextToken</code> parameter. If there are no remaining results, the previous
        /// response object's <code>NextToken</code> parameter is set to <code>null</code>.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(inp);
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(inp);
            self
        }
        /// <p>The maximum number of results to be returned with a single call. If the number of
        /// available results exceeds this maximum, the response includes a <code>NextToken</code>
        /// value that you can assign to the <code>NextToken</code> request parameter to get the next
        /// set of results.</p>
        pub fn max_results(mut self, inp: i32) -> Self {
            self.inner = self.inner.max_results(inp);
            self
        }
        pub fn set_max_results(mut self, inp: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(inp);
            self
        }
        /// <p>The status that stack instances are filtered by.</p>
        pub fn filters(mut self, inp: impl Into<crate::model::StackInstanceFilter>) -> Self {
            self.inner = self.inner.filters(inp);
            self
        }
        pub fn set_filters(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::StackInstanceFilter>>,
        ) -> Self {
            self.inner = self.inner.set_filters(inp);
            self
        }
        /// <p>The name of the AWS account that you want to list stack instances for.</p>
        pub fn stack_instance_account(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.stack_instance_account(inp);
            self
        }
        pub fn set_stack_instance_account(
            mut self,
            inp: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_stack_instance_account(inp);
            self
        }
        /// <p>The name of the Region where you want to list stack instances. </p>
        pub fn stack_instance_region(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.stack_instance_region(inp);
            self
        }
        pub fn set_stack_instance_region(
            mut self,
            inp: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_stack_instance_region(inp);
            self
        }
        /// <p>[Service-managed permissions] Specifies whether you are acting as an account administrator in the organization's management account or as a delegated administrator in a member account.</p>
        /// <p>By default, <code>SELF</code> is specified. Use <code>SELF</code> for stack sets with self-managed permissions.</p>
        /// <ul>
        /// <li>
        /// <p>If you are signed in to the management account, specify <code>SELF</code>.</p>
        /// </li>
        /// <li>
        /// <p>If you are signed in to a delegated administrator account, specify <code>DELEGATED_ADMIN</code>.</p>
        /// <p>Your AWS account must be registered as a delegated administrator in the management account. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html">Register a delegated administrator</a> in the <i>AWS CloudFormation User Guide</i>.</p>
        /// </li>
        /// </ul>
        pub fn call_as(mut self, inp: crate::model::CallAs) -> Self {
            self.inner = self.inner.call_as(inp);
            self
        }
        pub fn set_call_as(mut self, inp: std::option::Option<crate::model::CallAs>) -> Self {
            self.inner = self.inner.set_call_as(inp);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListStackResources<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::list_stack_resources_input::Builder,
    }
    impl<C> ListStackResources<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> Result<
            crate::output::ListStackResourcesOutput,
            smithy_http::result::SdkError<crate::error::ListStackResourcesError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name or the unique stack ID that is associated with the stack, which are not
        /// always interchangeable:</p>
        /// <ul>
        /// <li>
        /// <p>Running stacks: You can specify either the stack's name or its unique stack
        /// ID.</p>
        /// </li>
        /// <li>
        /// <p>Deleted stacks: You must specify the unique stack ID.</p>
        /// </li>
        /// </ul>
        /// <p>Default: There is no default value.</p>
        pub fn stack_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.stack_name(inp);
            self
        }
        pub fn set_stack_name(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_stack_name(inp);
            self
        }
        /// <p>A string that identifies the next page of stack resources that you want to
        /// retrieve.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(inp);
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(inp);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListStacks<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::list_stacks_input::Builder,
    }
    impl<C> ListStacks<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> Result<
            crate::output::ListStacksOutput,
            smithy_http::result::SdkError<crate::error::ListStacksError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>A string that identifies the next page of stacks that you want to retrieve.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(inp);
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(inp);
            self
        }
        /// <p>Stack status to use as a filter. Specify one or more stack status codes to list only
        /// stacks with the specified status codes. For a complete list of stack status codes, see the
        /// <code>StackStatus</code> parameter of the <a>Stack</a> data type.</p>
        pub fn stack_status_filter(mut self, inp: impl Into<crate::model::StackStatus>) -> Self {
            self.inner = self.inner.stack_status_filter(inp);
            self
        }
        pub fn set_stack_status_filter(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::StackStatus>>,
        ) -> Self {
            self.inner = self.inner.set_stack_status_filter(inp);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListStackSetOperationResults<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::list_stack_set_operation_results_input::Builder,
    }
    impl<C> ListStackSetOperationResults<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> Result<
            crate::output::ListStackSetOperationResultsOutput,
            smithy_http::result::SdkError<crate::error::ListStackSetOperationResultsError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name or unique ID of the stack set that you want to get operation results
        /// for.</p>
        pub fn stack_set_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.stack_set_name(inp);
            self
        }
        pub fn set_stack_set_name(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_stack_set_name(inp);
            self
        }
        /// <p>The ID of the stack set operation.</p>
        pub fn operation_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.operation_id(inp);
            self
        }
        pub fn set_operation_id(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_operation_id(inp);
            self
        }
        /// <p>If the previous request didn't return all of the remaining results, the response
        /// object's <code>NextToken</code> parameter value is set to a token. To retrieve the next set
        /// of results, call <code>ListStackSetOperationResults</code> again and assign that token to
        /// the request object's <code>NextToken</code> parameter. If there are no remaining results,
        /// the previous response object's <code>NextToken</code> parameter is set to
        /// <code>null</code>.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(inp);
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(inp);
            self
        }
        /// <p>The maximum number of results to be returned with a single call. If the number of
        /// available results exceeds this maximum, the response includes a <code>NextToken</code>
        /// value that you can assign to the <code>NextToken</code> request parameter to get the next
        /// set of results.</p>
        pub fn max_results(mut self, inp: i32) -> Self {
            self.inner = self.inner.max_results(inp);
            self
        }
        pub fn set_max_results(mut self, inp: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(inp);
            self
        }
        /// <p>[Service-managed permissions] Specifies whether you are acting as an account administrator in the organization's management account or as a delegated administrator in a member account.</p>
        /// <p>By default, <code>SELF</code> is specified. Use <code>SELF</code> for stack sets with self-managed permissions.</p>
        /// <ul>
        /// <li>
        /// <p>If you are signed in to the management account, specify <code>SELF</code>.</p>
        /// </li>
        /// <li>
        /// <p>If you are signed in to a delegated administrator account, specify <code>DELEGATED_ADMIN</code>.</p>
        /// <p>Your AWS account must be registered as a delegated administrator in the management account. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html">Register a delegated administrator</a> in the <i>AWS CloudFormation User Guide</i>.</p>
        /// </li>
        /// </ul>
        pub fn call_as(mut self, inp: crate::model::CallAs) -> Self {
            self.inner = self.inner.call_as(inp);
            self
        }
        pub fn set_call_as(mut self, inp: std::option::Option<crate::model::CallAs>) -> Self {
            self.inner = self.inner.set_call_as(inp);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListStackSetOperations<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::list_stack_set_operations_input::Builder,
    }
    impl<C> ListStackSetOperations<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> Result<
            crate::output::ListStackSetOperationsOutput,
            smithy_http::result::SdkError<crate::error::ListStackSetOperationsError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name or unique ID of the stack set that you want to get operation summaries
        /// for.</p>
        pub fn stack_set_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.stack_set_name(inp);
            self
        }
        pub fn set_stack_set_name(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_stack_set_name(inp);
            self
        }
        /// <p>If the previous paginated request didn't return all of the remaining results, the
        /// response object's <code>NextToken</code> parameter value is set to a token. To retrieve the
        /// next set of results, call <code>ListStackSetOperations</code> again and assign that token
        /// to the request object's <code>NextToken</code> parameter. If there are no remaining
        /// results, the previous response object's <code>NextToken</code> parameter is set to
        /// <code>null</code>.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(inp);
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(inp);
            self
        }
        /// <p>The maximum number of results to be returned with a single call. If the number of
        /// available results exceeds this maximum, the response includes a <code>NextToken</code>
        /// value that you can assign to the <code>NextToken</code> request parameter to get the next
        /// set of results.</p>
        pub fn max_results(mut self, inp: i32) -> Self {
            self.inner = self.inner.max_results(inp);
            self
        }
        pub fn set_max_results(mut self, inp: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(inp);
            self
        }
        /// <p>[Service-managed permissions] Specifies whether you are acting as an account administrator in the organization's management account or as a delegated administrator in a member account.</p>
        /// <p>By default, <code>SELF</code> is specified. Use <code>SELF</code> for stack sets with self-managed permissions.</p>
        /// <ul>
        /// <li>
        /// <p>If you are signed in to the management account, specify <code>SELF</code>.</p>
        /// </li>
        /// <li>
        /// <p>If you are signed in to a delegated administrator account, specify <code>DELEGATED_ADMIN</code>.</p>
        /// <p>Your AWS account must be registered as a delegated administrator in the management account. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html">Register a delegated administrator</a> in the <i>AWS CloudFormation User Guide</i>.</p>
        /// </li>
        /// </ul>
        pub fn call_as(mut self, inp: crate::model::CallAs) -> Self {
            self.inner = self.inner.call_as(inp);
            self
        }
        pub fn set_call_as(mut self, inp: std::option::Option<crate::model::CallAs>) -> Self {
            self.inner = self.inner.set_call_as(inp);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListStackSets<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::list_stack_sets_input::Builder,
    }
    impl<C> ListStackSets<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> Result<
            crate::output::ListStackSetsOutput,
            smithy_http::result::SdkError<crate::error::ListStackSetsError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>If the previous paginated request didn't return all of the remaining results, the
        /// response object's <code>NextToken</code> parameter value is set to a token. To retrieve the
        /// next set of results, call <code>ListStackSets</code> again and assign that token to the
        /// request object's <code>NextToken</code> parameter. If there are no remaining results, the
        /// previous response object's <code>NextToken</code> parameter is set to
        /// <code>null</code>.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(inp);
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(inp);
            self
        }
        /// <p>The maximum number of results to be returned with a single call. If the number of
        /// available results exceeds this maximum, the response includes a <code>NextToken</code>
        /// value that you can assign to the <code>NextToken</code> request parameter to get the next
        /// set of results.</p>
        pub fn max_results(mut self, inp: i32) -> Self {
            self.inner = self.inner.max_results(inp);
            self
        }
        pub fn set_max_results(mut self, inp: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(inp);
            self
        }
        /// <p>The status of the stack sets that you want to get summary information
        /// about.</p>
        pub fn status(mut self, inp: crate::model::StackSetStatus) -> Self {
            self.inner = self.inner.status(inp);
            self
        }
        pub fn set_status(
            mut self,
            inp: std::option::Option<crate::model::StackSetStatus>,
        ) -> Self {
            self.inner = self.inner.set_status(inp);
            self
        }
        /// <p>[Service-managed permissions] Specifies whether you are acting as an account administrator in the management account or as a delegated administrator in a member account.</p>
        /// <p>By default, <code>SELF</code> is specified. Use <code>SELF</code> for stack sets with self-managed permissions.</p>
        /// <ul>
        /// <li>
        /// <p>If you are signed in to the management account, specify <code>SELF</code>.</p>
        /// </li>
        /// <li>
        /// <p>If you are signed in to a delegated administrator account, specify <code>DELEGATED_ADMIN</code>.</p>
        /// <p>Your AWS account must be registered as a delegated administrator in the management account. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html">Register a delegated administrator</a> in the <i>AWS CloudFormation User Guide</i>.</p>
        /// </li>
        /// </ul>
        pub fn call_as(mut self, inp: crate::model::CallAs) -> Self {
            self.inner = self.inner.call_as(inp);
            self
        }
        pub fn set_call_as(mut self, inp: std::option::Option<crate::model::CallAs>) -> Self {
            self.inner = self.inner.set_call_as(inp);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListTypeRegistrations<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::list_type_registrations_input::Builder,
    }
    impl<C> ListTypeRegistrations<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> Result<
            crate::output::ListTypeRegistrationsOutput,
            smithy_http::result::SdkError<crate::error::ListTypeRegistrationsError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The kind of extension.</p>
        /// <p>Conditional: You must specify either <code>TypeName</code> and <code>Type</code>, or <code>Arn</code>.</p>
        pub fn r#type(mut self, inp: crate::model::RegistryType) -> Self {
            self.inner = self.inner.r#type(inp);
            self
        }
        pub fn set_type(mut self, inp: std::option::Option<crate::model::RegistryType>) -> Self {
            self.inner = self.inner.set_type(inp);
            self
        }
        /// <p>The name of the extension.</p>
        /// <p>Conditional: You must specify either <code>TypeName</code> and <code>Type</code>, or <code>Arn</code>.</p>
        pub fn type_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.type_name(inp);
            self
        }
        pub fn set_type_name(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_type_name(inp);
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the extension.</p>
        /// <p>Conditional: You must specify either <code>TypeName</code> and <code>Type</code>, or <code>Arn</code>.</p>
        pub fn type_arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.type_arn(inp);
            self
        }
        pub fn set_type_arn(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_type_arn(inp);
            self
        }
        /// <p>The current status of the extension registration request.</p>
        /// <p>The default is <code>IN_PROGRESS</code>.</p>
        pub fn registration_status_filter(mut self, inp: crate::model::RegistrationStatus) -> Self {
            self.inner = self.inner.registration_status_filter(inp);
            self
        }
        pub fn set_registration_status_filter(
            mut self,
            inp: std::option::Option<crate::model::RegistrationStatus>,
        ) -> Self {
            self.inner = self.inner.set_registration_status_filter(inp);
            self
        }
        /// <p>The maximum number of results to be returned with a single call. If the number of available results exceeds this maximum, the response includes a <code>NextToken</code> value that you can assign to the <code>NextToken</code> request parameter to get the next set of results.</p>
        pub fn max_results(mut self, inp: i32) -> Self {
            self.inner = self.inner.max_results(inp);
            self
        }
        pub fn set_max_results(mut self, inp: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(inp);
            self
        }
        /// <p>If the previous paginated request didn't return all of the remaining results, the response object's <code>NextToken</code> parameter value is set to a token. To retrieve the next set of results, call this action again and assign that token to the request object's <code>NextToken</code> parameter. If there are no remaining results, the previous response object's <code>NextToken</code> parameter is set to <code>null</code>.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(inp);
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(inp);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListTypes<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::list_types_input::Builder,
    }
    impl<C> ListTypes<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> Result<
            crate::output::ListTypesOutput,
            smithy_http::result::SdkError<crate::error::ListTypesError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The scope at which the extension is visible and usable in CloudFormation operations.</p>
        /// <p>Valid values include:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>PRIVATE</code>: The extension is only visible and usable within the account in which it is registered. Currently, AWS CloudFormation marks any extension you create as <code>PRIVATE</code>.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>PUBLIC</code>: The extension is publically visible and usable within any Amazon account.</p>
        /// </li>
        /// </ul>
        /// <p>The default is <code>PRIVATE</code>.</p>
        pub fn visibility(mut self, inp: crate::model::Visibility) -> Self {
            self.inner = self.inner.visibility(inp);
            self
        }
        pub fn set_visibility(
            mut self,
            inp: std::option::Option<crate::model::Visibility>,
        ) -> Self {
            self.inner = self.inner.set_visibility(inp);
            self
        }
        /// <p>The provisioning behavior of the type. AWS CloudFormation determines the provisioning type during registration, based on the types of handlers in the schema handler package submitted.</p>
        /// <p>Valid values include:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>FULLY_MUTABLE</code>: The extension includes an update handler to process updates to the extension during stack update operations.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>IMMUTABLE</code>: The extension does not include an update handler, so the extension cannot be updated and must instead be replaced during stack update operations.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>NON_PROVISIONABLE</code>: The extension does not include create, read, and delete handlers, and therefore cannot actually be provisioned.</p>
        /// </li>
        /// </ul>
        pub fn provisioning_type(mut self, inp: crate::model::ProvisioningType) -> Self {
            self.inner = self.inner.provisioning_type(inp);
            self
        }
        pub fn set_provisioning_type(
            mut self,
            inp: std::option::Option<crate::model::ProvisioningType>,
        ) -> Self {
            self.inner = self.inner.set_provisioning_type(inp);
            self
        }
        /// <p>The deprecation status of the extension that you want to get summary information about.</p>
        /// <p>Valid values include:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>LIVE</code>: The extension is registered for use in CloudFormation operations.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>DEPRECATED</code>: The extension has been deregistered and can no longer be used in CloudFormation operations. </p>
        /// </li>
        /// </ul>
        pub fn deprecated_status(mut self, inp: crate::model::DeprecatedStatus) -> Self {
            self.inner = self.inner.deprecated_status(inp);
            self
        }
        pub fn set_deprecated_status(
            mut self,
            inp: std::option::Option<crate::model::DeprecatedStatus>,
        ) -> Self {
            self.inner = self.inner.set_deprecated_status(inp);
            self
        }
        /// <p>The type of extension.</p>
        pub fn r#type(mut self, inp: crate::model::RegistryType) -> Self {
            self.inner = self.inner.r#type(inp);
            self
        }
        pub fn set_type(mut self, inp: std::option::Option<crate::model::RegistryType>) -> Self {
            self.inner = self.inner.set_type(inp);
            self
        }
        /// <p>The maximum number of results to be returned with a single call. If the number of available results exceeds this maximum, the response includes a <code>NextToken</code> value that you can assign to the <code>NextToken</code> request parameter to get the next set of results.</p>
        pub fn max_results(mut self, inp: i32) -> Self {
            self.inner = self.inner.max_results(inp);
            self
        }
        pub fn set_max_results(mut self, inp: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(inp);
            self
        }
        /// <p>If the previous paginated request didn't return all of the remaining results, the response object's <code>NextToken</code> parameter value is set to a token. To retrieve the next set of results, call this action again and assign that token to the request object's <code>NextToken</code> parameter. If there are no remaining results, the previous response object's <code>NextToken</code> parameter is set to <code>null</code>.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(inp);
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(inp);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListTypeVersions<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::list_type_versions_input::Builder,
    }
    impl<C> ListTypeVersions<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> Result<
            crate::output::ListTypeVersionsOutput,
            smithy_http::result::SdkError<crate::error::ListTypeVersionsError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The kind of the extension.</p>
        /// <p>Conditional: You must specify either <code>TypeName</code> and <code>Type</code>, or <code>Arn</code>.</p>
        pub fn r#type(mut self, inp: crate::model::RegistryType) -> Self {
            self.inner = self.inner.r#type(inp);
            self
        }
        pub fn set_type(mut self, inp: std::option::Option<crate::model::RegistryType>) -> Self {
            self.inner = self.inner.set_type(inp);
            self
        }
        /// <p>The name of the extension for which you want version summary information.</p>
        /// <p>Conditional: You must specify either <code>TypeName</code> and <code>Type</code>, or <code>Arn</code>.</p>
        pub fn type_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.type_name(inp);
            self
        }
        pub fn set_type_name(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_type_name(inp);
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the extension for which you want version summary information.</p>
        /// <p>Conditional: You must specify either <code>TypeName</code> and <code>Type</code>, or <code>Arn</code>.</p>
        pub fn arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.arn(inp);
            self
        }
        pub fn set_arn(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_arn(inp);
            self
        }
        /// <p>The maximum number of results to be returned with a single call. If the number of available results exceeds this maximum, the response includes a <code>NextToken</code> value that you can assign to the <code>NextToken</code> request parameter to get the next set of results.</p>
        pub fn max_results(mut self, inp: i32) -> Self {
            self.inner = self.inner.max_results(inp);
            self
        }
        pub fn set_max_results(mut self, inp: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(inp);
            self
        }
        /// <p>If the previous paginated request didn't return all of the remaining results, the response object's <code>NextToken</code> parameter value is set to a token. To retrieve the next set of results, call this action again and assign that token to the request object's <code>NextToken</code> parameter. If there are no remaining results, the previous response object's <code>NextToken</code> parameter is set to <code>null</code>.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(inp);
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(inp);
            self
        }
        /// <p>The deprecation status of the extension versions that you want to get summary information about.</p>
        /// <p>Valid values include:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>LIVE</code>: The extension version is registered and can be used in CloudFormation operations, dependent on its provisioning behavior and visibility scope.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>DEPRECATED</code>: The extension version has been deregistered and can no longer be used in CloudFormation operations. </p>
        /// </li>
        /// </ul>
        /// <p>The default is <code>LIVE</code>.</p>
        pub fn deprecated_status(mut self, inp: crate::model::DeprecatedStatus) -> Self {
            self.inner = self.inner.deprecated_status(inp);
            self
        }
        pub fn set_deprecated_status(
            mut self,
            inp: std::option::Option<crate::model::DeprecatedStatus>,
        ) -> Self {
            self.inner = self.inner.set_deprecated_status(inp);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct RecordHandlerProgress<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::record_handler_progress_input::Builder,
    }
    impl<C> RecordHandlerProgress<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> Result<
            crate::output::RecordHandlerProgressOutput,
            smithy_http::result::SdkError<crate::error::RecordHandlerProgressError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>Reserved for use by the <a href="https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/what-is-cloudformation-cli.html">CloudFormation CLI</a>.</p>
        pub fn bearer_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.bearer_token(inp);
            self
        }
        pub fn set_bearer_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_bearer_token(inp);
            self
        }
        /// <p>Reserved for use by the <a href="https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/what-is-cloudformation-cli.html">CloudFormation CLI</a>.</p>
        pub fn operation_status(mut self, inp: crate::model::OperationStatus) -> Self {
            self.inner = self.inner.operation_status(inp);
            self
        }
        pub fn set_operation_status(
            mut self,
            inp: std::option::Option<crate::model::OperationStatus>,
        ) -> Self {
            self.inner = self.inner.set_operation_status(inp);
            self
        }
        /// <p>Reserved for use by the <a href="https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/what-is-cloudformation-cli.html">CloudFormation CLI</a>.</p>
        pub fn current_operation_status(mut self, inp: crate::model::OperationStatus) -> Self {
            self.inner = self.inner.current_operation_status(inp);
            self
        }
        pub fn set_current_operation_status(
            mut self,
            inp: std::option::Option<crate::model::OperationStatus>,
        ) -> Self {
            self.inner = self.inner.set_current_operation_status(inp);
            self
        }
        /// <p>Reserved for use by the <a href="https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/what-is-cloudformation-cli.html">CloudFormation CLI</a>.</p>
        pub fn status_message(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.status_message(inp);
            self
        }
        pub fn set_status_message(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_status_message(inp);
            self
        }
        /// <p>Reserved for use by the <a href="https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/what-is-cloudformation-cli.html">CloudFormation CLI</a>.</p>
        pub fn error_code(mut self, inp: crate::model::HandlerErrorCode) -> Self {
            self.inner = self.inner.error_code(inp);
            self
        }
        pub fn set_error_code(
            mut self,
            inp: std::option::Option<crate::model::HandlerErrorCode>,
        ) -> Self {
            self.inner = self.inner.set_error_code(inp);
            self
        }
        /// <p>Reserved for use by the <a href="https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/what-is-cloudformation-cli.html">CloudFormation CLI</a>.</p>
        pub fn resource_model(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_model(inp);
            self
        }
        pub fn set_resource_model(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_resource_model(inp);
            self
        }
        /// <p>Reserved for use by the <a href="https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/what-is-cloudformation-cli.html">CloudFormation CLI</a>.</p>
        pub fn client_request_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.client_request_token(inp);
            self
        }
        pub fn set_client_request_token(
            mut self,
            inp: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_client_request_token(inp);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct RegisterType<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::register_type_input::Builder,
    }
    impl<C> RegisterType<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> Result<
            crate::output::RegisterTypeOutput,
            smithy_http::result::SdkError<crate::error::RegisterTypeError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The kind of extension.</p>
        pub fn r#type(mut self, inp: crate::model::RegistryType) -> Self {
            self.inner = self.inner.r#type(inp);
            self
        }
        pub fn set_type(mut self, inp: std::option::Option<crate::model::RegistryType>) -> Self {
            self.inner = self.inner.set_type(inp);
            self
        }
        /// <p>The name of the extension being registered.</p>
        /// <p>We recommend that extension names adhere to the following pattern: <i>company_or_organization</i>::<i>service</i>::<i>type</i>.</p>
        /// <note>
        /// <p>The following organization namespaces are reserved and cannot be used in your extension names:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>Alexa</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>AMZN</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>Amazon</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>AWS</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>Custom</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>Dev</code>
        /// </p>
        /// </li>
        /// </ul>
        /// </note>
        pub fn type_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.type_name(inp);
            self
        }
        pub fn set_type_name(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_type_name(inp);
            self
        }
        /// <p>A url to the S3 bucket containing the extension project package that contains the neccessary files for the extension you want to register.</p>
        /// <p>For information on generating a schema handler package for the extension you want to register, see <a href="https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/resource-type-cli-submit.html">submit</a> in the <i>CloudFormation CLI User Guide</i>.</p>
        /// <note>
        /// <p>The
        /// user registering the extension must be able to access the package in the S3 bucket. That is, the user needs to have <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetObject.html">GetObject</a> permissions
        /// for the schema handler package. For
        /// more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazons3.html">Actions, Resources, and Condition Keys for Amazon S3</a> in the
        /// <i>AWS Identity and Access Management User Guide</i>.</p>
        /// </note>
        pub fn schema_handler_package(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.schema_handler_package(inp);
            self
        }
        pub fn set_schema_handler_package(
            mut self,
            inp: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_schema_handler_package(inp);
            self
        }
        /// <p>Specifies logging configuration information for an extension.</p>
        pub fn logging_config(mut self, inp: crate::model::LoggingConfig) -> Self {
            self.inner = self.inner.logging_config(inp);
            self
        }
        pub fn set_logging_config(
            mut self,
            inp: std::option::Option<crate::model::LoggingConfig>,
        ) -> Self {
            self.inner = self.inner.set_logging_config(inp);
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the IAM role for CloudFormation to assume when invoking the extension. If your extension calls AWS APIs in any of its handlers, you must create an
        /// <i>
        /// <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html">IAM execution
        /// role</a>
        /// </i> that includes the necessary permissions to call those
        /// AWS APIs, and provision that execution role in your account. When CloudFormation needs to invoke the extension handler, CloudFormation assumes this execution role to create a temporary session token, which it then passes to the extension handler, thereby supplying your extension with the appropriate credentials.</p>
        pub fn execution_role_arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.execution_role_arn(inp);
            self
        }
        pub fn set_execution_role_arn(
            mut self,
            inp: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_execution_role_arn(inp);
            self
        }
        /// <p>A unique identifier that acts as an idempotency key for this registration request. Specifying a client request token prevents CloudFormation from generating more than one version of an extension from the same registeration request, even if the request is submitted multiple times. </p>
        pub fn client_request_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.client_request_token(inp);
            self
        }
        pub fn set_client_request_token(
            mut self,
            inp: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_client_request_token(inp);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct SetStackPolicy<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::set_stack_policy_input::Builder,
    }
    impl<C> SetStackPolicy<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> Result<
            crate::output::SetStackPolicyOutput,
            smithy_http::result::SdkError<crate::error::SetStackPolicyError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name or unique stack ID that you want to associate a policy with.</p>
        pub fn stack_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.stack_name(inp);
            self
        }
        pub fn set_stack_name(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_stack_name(inp);
            self
        }
        /// <p>Structure containing the stack policy body. For more information, go to <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/protect-stack-resources.html"> Prevent Updates
        /// to Stack Resources</a> in the AWS CloudFormation User Guide. You can specify either
        /// the <code>StackPolicyBody</code> or the <code>StackPolicyURL</code> parameter, but not
        /// both.</p>
        pub fn stack_policy_body(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.stack_policy_body(inp);
            self
        }
        pub fn set_stack_policy_body(
            mut self,
            inp: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_stack_policy_body(inp);
            self
        }
        /// <p>Location of a file containing the stack policy. The URL must point to a policy
        /// (maximum size: 16 KB) located in an S3 bucket in the same
        /// Region as the stack. You can specify either the <code>StackPolicyBody</code> or the
        /// <code>StackPolicyURL</code> parameter, but not both.</p>
        pub fn stack_policy_url(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.stack_policy_url(inp);
            self
        }
        pub fn set_stack_policy_url(
            mut self,
            inp: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_stack_policy_url(inp);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct SetTypeDefaultVersion<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::set_type_default_version_input::Builder,
    }
    impl<C> SetTypeDefaultVersion<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> Result<
            crate::output::SetTypeDefaultVersionOutput,
            smithy_http::result::SdkError<crate::error::SetTypeDefaultVersionError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Name (ARN) of the extension for which you want version summary information.</p>
        /// <p>Conditional: You must specify either <code>TypeName</code> and <code>Type</code>, or <code>Arn</code>.</p>
        pub fn arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.arn(inp);
            self
        }
        pub fn set_arn(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_arn(inp);
            self
        }
        /// <p>The kind of extension.</p>
        /// <p>Conditional: You must specify either <code>TypeName</code> and <code>Type</code>, or <code>Arn</code>.</p>
        pub fn r#type(mut self, inp: crate::model::RegistryType) -> Self {
            self.inner = self.inner.r#type(inp);
            self
        }
        pub fn set_type(mut self, inp: std::option::Option<crate::model::RegistryType>) -> Self {
            self.inner = self.inner.set_type(inp);
            self
        }
        /// <p>The name of the extension.</p>
        /// <p>Conditional: You must specify either <code>TypeName</code> and <code>Type</code>, or <code>Arn</code>.</p>
        pub fn type_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.type_name(inp);
            self
        }
        pub fn set_type_name(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_type_name(inp);
            self
        }
        /// <p>The ID of a specific version of the extension. The version ID is the value at the end of the Amazon Resource Name (ARN) assigned to the extension version when it is registered.</p>
        pub fn version_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.version_id(inp);
            self
        }
        pub fn set_version_id(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_version_id(inp);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct SignalResource<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::signal_resource_input::Builder,
    }
    impl<C> SignalResource<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> Result<
            crate::output::SignalResourceOutput,
            smithy_http::result::SdkError<crate::error::SignalResourceError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The stack name or unique stack ID that includes the resource that you want to
        /// signal.</p>
        pub fn stack_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.stack_name(inp);
            self
        }
        pub fn set_stack_name(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_stack_name(inp);
            self
        }
        /// <p>The logical ID of the resource that you want to signal. The logical ID is the name of
        /// the resource that given in the template.</p>
        pub fn logical_resource_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.logical_resource_id(inp);
            self
        }
        pub fn set_logical_resource_id(
            mut self,
            inp: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_logical_resource_id(inp);
            self
        }
        /// <p>A unique ID of the signal. When you signal Amazon EC2 instances or Auto Scaling
        /// groups, specify the instance ID that you are signaling as the unique ID. If you send
        /// multiple signals to a single resource (such as signaling a wait condition), each signal
        /// requires a different unique ID.</p>
        pub fn unique_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.unique_id(inp);
            self
        }
        pub fn set_unique_id(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_unique_id(inp);
            self
        }
        /// <p>The status of the signal, which is either success or failure. A failure signal causes
        /// AWS CloudFormation to immediately fail the stack creation or update.</p>
        pub fn status(mut self, inp: crate::model::ResourceSignalStatus) -> Self {
            self.inner = self.inner.status(inp);
            self
        }
        pub fn set_status(
            mut self,
            inp: std::option::Option<crate::model::ResourceSignalStatus>,
        ) -> Self {
            self.inner = self.inner.set_status(inp);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct StopStackSetOperation<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::stop_stack_set_operation_input::Builder,
    }
    impl<C> StopStackSetOperation<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> Result<
            crate::output::StopStackSetOperationOutput,
            smithy_http::result::SdkError<crate::error::StopStackSetOperationError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name or unique ID of the stack set that you want to stop the operation
        /// for.</p>
        pub fn stack_set_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.stack_set_name(inp);
            self
        }
        pub fn set_stack_set_name(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_stack_set_name(inp);
            self
        }
        /// <p>The ID of the stack operation. </p>
        pub fn operation_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.operation_id(inp);
            self
        }
        pub fn set_operation_id(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_operation_id(inp);
            self
        }
        /// <p>[Service-managed permissions] Specifies whether you are acting as an account administrator in the organization's management account or as a delegated administrator in a member account.</p>
        /// <p>By default, <code>SELF</code> is specified. Use <code>SELF</code> for stack sets with self-managed permissions.</p>
        /// <ul>
        /// <li>
        /// <p>If you are signed in to the management account, specify <code>SELF</code>.</p>
        /// </li>
        /// <li>
        /// <p>If you are signed in to a delegated administrator account, specify <code>DELEGATED_ADMIN</code>.</p>
        /// <p>Your AWS account must be registered as a delegated administrator in the management account. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html">Register a delegated administrator</a> in the <i>AWS CloudFormation User Guide</i>.</p>
        /// </li>
        /// </ul>
        pub fn call_as(mut self, inp: crate::model::CallAs) -> Self {
            self.inner = self.inner.call_as(inp);
            self
        }
        pub fn set_call_as(mut self, inp: std::option::Option<crate::model::CallAs>) -> Self {
            self.inner = self.inner.set_call_as(inp);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct UpdateStack<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::update_stack_input::Builder,
    }
    impl<C> UpdateStack<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> Result<
            crate::output::UpdateStackOutput,
            smithy_http::result::SdkError<crate::error::UpdateStackError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name or unique stack ID of the stack to update.</p>
        pub fn stack_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.stack_name(inp);
            self
        }
        pub fn set_stack_name(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_stack_name(inp);
            self
        }
        /// <p>Structure containing the template body with a minimum length of 1 byte and a maximum
        /// length of 51,200 bytes. (For more information, go to <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html">Template Anatomy</a>
        /// in the AWS CloudFormation User Guide.)</p>
        /// <p>Conditional: You must specify only one of the following parameters:
        /// <code>TemplateBody</code>, <code>TemplateURL</code>, or set the
        /// <code>UsePreviousTemplate</code> to <code>true</code>.</p>
        pub fn template_body(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.template_body(inp);
            self
        }
        pub fn set_template_body(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_template_body(inp);
            self
        }
        /// <p>Location of file containing the template body. The URL must point to a template that
        /// is located in an Amazon S3 bucket or a Systems Manager document. For more information, go to
        /// <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html">Template Anatomy</a>
        /// in the AWS CloudFormation User Guide.</p>
        /// <p>Conditional: You must specify only one of the following parameters:
        /// <code>TemplateBody</code>, <code>TemplateURL</code>, or set the
        /// <code>UsePreviousTemplate</code> to <code>true</code>.</p>
        pub fn template_url(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.template_url(inp);
            self
        }
        pub fn set_template_url(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_template_url(inp);
            self
        }
        /// <p>Reuse the existing template that is associated with the stack that you are
        /// updating.</p>
        /// <p>Conditional: You must specify only one of the following parameters:
        /// <code>TemplateBody</code>, <code>TemplateURL</code>, or set the
        /// <code>UsePreviousTemplate</code> to <code>true</code>.</p>
        pub fn use_previous_template(mut self, inp: bool) -> Self {
            self.inner = self.inner.use_previous_template(inp);
            self
        }
        pub fn set_use_previous_template(mut self, inp: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_use_previous_template(inp);
            self
        }
        /// <p>Structure containing the temporary overriding stack policy body. You can specify
        /// either the <code>StackPolicyDuringUpdateBody</code> or the
        /// <code>StackPolicyDuringUpdateURL</code> parameter, but not both.</p>
        /// <p>If you want to update protected resources, specify a temporary overriding stack
        /// policy during this update. If you do not specify a stack policy, the current policy that is
        /// associated with the stack will be used.</p>
        pub fn stack_policy_during_update_body(
            mut self,
            inp: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.stack_policy_during_update_body(inp);
            self
        }
        pub fn set_stack_policy_during_update_body(
            mut self,
            inp: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_stack_policy_during_update_body(inp);
            self
        }
        /// <p>Location of a file containing the temporary overriding stack policy. The URL must
        /// point to a policy (max size: 16KB) located in an S3 bucket in
        /// the same Region as the stack. You can specify either the
        /// <code>StackPolicyDuringUpdateBody</code> or the <code>StackPolicyDuringUpdateURL</code>
        /// parameter, but not both.</p>
        /// <p>If you want to update protected resources, specify a temporary overriding stack
        /// policy during this update. If you do not specify a stack policy, the current policy that is
        /// associated with the stack will be used.</p>
        pub fn stack_policy_during_update_url(
            mut self,
            inp: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.stack_policy_during_update_url(inp);
            self
        }
        pub fn set_stack_policy_during_update_url(
            mut self,
            inp: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_stack_policy_during_update_url(inp);
            self
        }
        /// <p>A list of <code>Parameter</code> structures that specify input parameters for the
        /// stack. For more information, see the <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_Parameter.html">Parameter</a> data
        /// type.</p>
        pub fn parameters(mut self, inp: impl Into<crate::model::Parameter>) -> Self {
            self.inner = self.inner.parameters(inp);
            self
        }
        pub fn set_parameters(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::Parameter>>,
        ) -> Self {
            self.inner = self.inner.set_parameters(inp);
            self
        }
        /// <p>In some cases, you must explicitly acknowledge that your stack template contains certain
        /// capabilities in order for AWS CloudFormation to update the stack.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>CAPABILITY_IAM</code> and <code>CAPABILITY_NAMED_IAM</code>
        /// </p>
        /// <p>Some stack templates might include resources that can affect permissions in
        /// your AWS account; for example, by creating new AWS Identity and Access Management
        /// (IAM) users. For those stacks, you must explicitly acknowledge this by specifying one
        /// of these capabilities.</p>
        /// <p>The following IAM resources require you to specify either the
        /// <code>CAPABILITY_IAM</code> or <code>CAPABILITY_NAMED_IAM</code>
        /// capability.</p>
        /// <ul>
        /// <li>
        /// <p>If you have IAM resources, you can specify either capability. </p>
        /// </li>
        /// <li>
        /// <p>If you have IAM resources with custom names, you <i>must</i>
        /// specify <code>CAPABILITY_NAMED_IAM</code>. </p>
        /// </li>
        /// <li>
        /// <p>If you don't specify either of these capabilities, AWS CloudFormation returns an
        /// <code>InsufficientCapabilities</code> error.</p>
        /// </li>
        /// </ul>
        /// <p>If your stack template contains these resources, we recommend that you review
        /// all permissions associated with them and edit their permissions if
        /// necessary.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-accesskey.html">
        /// AWS::IAM::AccessKey</a>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-group.html">
        /// AWS::IAM::Group</a>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-instanceprofile.html"> AWS::IAM::InstanceProfile</a>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-policy.html">
        /// AWS::IAM::Policy</a>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html">
        /// AWS::IAM::Role</a>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-user.html">
        /// AWS::IAM::User</a>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-addusertogroup.html"> AWS::IAM::UserToGroupAddition</a>
        /// </p>
        /// </li>
        /// </ul>
        /// <p>For more information, see <a href="http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-iam-template.html#capabilities">Acknowledging IAM
        /// Resources in AWS CloudFormation Templates</a>.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>CAPABILITY_AUTO_EXPAND</code>
        /// </p>
        /// <p>Some template contain macros. Macros perform custom processing on templates; this
        /// can include simple actions like find-and-replace operations, all the way to extensive
        /// transformations of entire templates. Because of this, users typically create a change
        /// set from the processed template, so that they can review the changes resulting from
        /// the macros before actually updating the stack. If your stack template contains one or
        /// more macros, and you choose to update a stack directly from the processed template,
        /// without first reviewing the resulting changes in a change set, you must acknowledge
        /// this capability. This includes the <a href="http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/create-reusable-transform-function-snippets-and-add-to-your-template-with-aws-include-transform.html">AWS::Include</a> and <a href="http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-aws-serverless.html">AWS::Serverless</a> transforms, which are macros hosted by AWS CloudFormation.</p>
        /// <p>If you want to update a stack
        /// from a stack template that contains macros <i>and</i> nested stacks,
        /// you must update the stack directly from the template using this capability.</p>
        /// <important>
        /// <p>You should only update stacks directly from a stack template that contains
        /// macros if you know what processing the macro performs.</p>
        /// <p>Each macro relies on an underlying Lambda service function for processing stack
        /// templates. Be aware that the Lambda function owner can update the function
        /// operation without AWS CloudFormation being notified.</p>
        /// </important>
        /// <p>For more information, see <a href="http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-macros.html">Using
        /// AWS CloudFormation Macros to Perform Custom Processing on
        /// Templates</a>.</p>
        /// </li>
        /// </ul>
        pub fn capabilities(mut self, inp: impl Into<crate::model::Capability>) -> Self {
            self.inner = self.inner.capabilities(inp);
            self
        }
        pub fn set_capabilities(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::Capability>>,
        ) -> Self {
            self.inner = self.inner.set_capabilities(inp);
            self
        }
        /// <p>The template resource types that you have permissions to work with for this update
        /// stack action, such as <code>AWS::EC2::Instance</code>, <code>AWS::EC2::*</code>, or
        /// <code>Custom::MyCustomInstance</code>.</p>
        /// <p>If the list of resource types doesn't include a resource that you're updating, the
        /// stack update fails. By default, AWS CloudFormation grants permissions to all resource
        /// types. AWS Identity and Access Management (IAM) uses this parameter for AWS
        /// CloudFormation-specific condition keys in IAM policies. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-iam-template.html">Controlling Access with AWS Identity and Access Management</a>.</p>
        pub fn resource_types(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_types(inp);
            self
        }
        pub fn set_resource_types(
            mut self,
            inp: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_resource_types(inp);
            self
        }
        /// <p>The Amazon Resource Name (ARN) of an AWS Identity and Access Management (IAM) role
        /// that AWS CloudFormation assumes to update the stack. AWS CloudFormation uses the role's
        /// credentials to make calls on your behalf. AWS CloudFormation always uses this role for all
        /// future operations on the stack. As long as users have permission to operate on the stack,
        /// AWS CloudFormation uses this role even if the users don't have permission to pass it.
        /// Ensure that the role grants least privilege.</p>
        /// <p>If you don't specify a value, AWS CloudFormation uses the role that was previously
        /// associated with the stack. If no role is available, AWS CloudFormation uses a temporary
        /// session that is generated from your user credentials.</p>
        pub fn role_arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.role_arn(inp);
            self
        }
        pub fn set_role_arn(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_role_arn(inp);
            self
        }
        /// <p>The rollback triggers for AWS CloudFormation to monitor during stack creation and
        /// updating operations, and for the specified monitoring period afterwards.</p>
        pub fn rollback_configuration(mut self, inp: crate::model::RollbackConfiguration) -> Self {
            self.inner = self.inner.rollback_configuration(inp);
            self
        }
        pub fn set_rollback_configuration(
            mut self,
            inp: std::option::Option<crate::model::RollbackConfiguration>,
        ) -> Self {
            self.inner = self.inner.set_rollback_configuration(inp);
            self
        }
        /// <p>Structure containing a new stack policy body. You can specify either the
        /// <code>StackPolicyBody</code> or the <code>StackPolicyURL</code> parameter, but not
        /// both.</p>
        /// <p>You might update the stack policy, for example, in order to protect a new resource
        /// that you created during a stack update. If you do not specify a stack policy, the current
        /// policy that is associated with the stack is unchanged.</p>
        pub fn stack_policy_body(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.stack_policy_body(inp);
            self
        }
        pub fn set_stack_policy_body(
            mut self,
            inp: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_stack_policy_body(inp);
            self
        }
        /// <p>Location of a file containing the updated stack policy. The URL must point to a
        /// policy (max size: 16KB) located in an S3 bucket in the same
        /// Region as the stack. You can specify either the <code>StackPolicyBody</code> or the
        /// <code>StackPolicyURL</code> parameter, but not both.</p>
        /// <p>You might update the stack policy, for example, in order to protect a new resource
        /// that you created during a stack update. If you do not specify a stack policy, the current
        /// policy that is associated with the stack is unchanged.</p>
        pub fn stack_policy_url(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.stack_policy_url(inp);
            self
        }
        pub fn set_stack_policy_url(
            mut self,
            inp: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_stack_policy_url(inp);
            self
        }
        /// <p>Amazon Simple Notification Service topic Amazon Resource Names (ARNs) that AWS
        /// CloudFormation associates with the stack. Specify an empty list to remove all notification
        /// topics.</p>
        pub fn notification_ar_ns(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.notification_ar_ns(inp);
            self
        }
        pub fn set_notification_ar_ns(
            mut self,
            inp: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_notification_ar_ns(inp);
            self
        }
        /// <p>Key-value pairs to associate with this stack. AWS CloudFormation also propagates
        /// these tags to supported resources in the stack. You can specify a maximum number of 50
        /// tags.</p>
        /// <p>If you don't specify this parameter, AWS CloudFormation doesn't modify the stack's
        /// tags. If you specify an empty value, AWS CloudFormation removes all associated
        /// tags.</p>
        pub fn tags(mut self, inp: impl Into<crate::model::Tag>) -> Self {
            self.inner = self.inner.tags(inp);
            self
        }
        pub fn set_tags(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.inner = self.inner.set_tags(inp);
            self
        }
        /// <p>A unique identifier for this <code>UpdateStack</code> request. Specify this token if
        /// you plan to retry requests so that AWS CloudFormation knows that you're not attempting to
        /// update a stack with the same name. You might retry <code>UpdateStack</code> requests to
        /// ensure that AWS CloudFormation successfully received them.</p>
        /// <p>All events triggered by a given stack operation are assigned the same client request
        /// token, which you can use to track operations. For example, if you execute a
        /// <code>CreateStack</code> operation with the token <code>token1</code>, then all the
        /// <code>StackEvents</code> generated by that operation will have
        /// <code>ClientRequestToken</code> set as <code>token1</code>.</p>
        /// <p>In the console, stack operations display the client request token on the Events tab.
        /// Stack operations that are initiated from the console use the token format
        /// <i>Console-StackOperation-ID</i>, which helps you easily identify the
        /// stack operation . For example, if you create a stack using the console, each stack event
        /// would be assigned the same token in the following format:
        /// <code>Console-CreateStack-7f59c3cf-00d2-40c7-b2ff-e75db0987002</code>. </p>
        pub fn client_request_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.client_request_token(inp);
            self
        }
        pub fn set_client_request_token(
            mut self,
            inp: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_client_request_token(inp);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct UpdateStackInstances<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::update_stack_instances_input::Builder,
    }
    impl<C> UpdateStackInstances<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> Result<
            crate::output::UpdateStackInstancesOutput,
            smithy_http::result::SdkError<crate::error::UpdateStackInstancesError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name or unique ID of the stack set associated with the stack instances.</p>
        pub fn stack_set_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.stack_set_name(inp);
            self
        }
        pub fn set_stack_set_name(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_stack_set_name(inp);
            self
        }
        /// <p>[Self-managed permissions] The names of one or more AWS accounts for which you want to update parameter values
        /// for stack instances. The overridden parameter values will be applied to all stack instances
        /// in the specified accounts and Regions.</p>
        /// <p>You can specify <code>Accounts</code> or <code>DeploymentTargets</code>, but not both.</p>
        pub fn accounts(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.accounts(inp);
            self
        }
        pub fn set_accounts(
            mut self,
            inp: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_accounts(inp);
            self
        }
        /// <p>[Service-managed permissions] The AWS Organizations accounts for which you want to update parameter values for stack instances. If your update targets OUs, the overridden parameter values only apply to the accounts that are currently in the target OUs and their child OUs. Accounts added to the target OUs and their child OUs in the future won't use the overridden values.</p>
        /// <p>You can specify <code>Accounts</code> or <code>DeploymentTargets</code>, but not both.</p>
        pub fn deployment_targets(mut self, inp: crate::model::DeploymentTargets) -> Self {
            self.inner = self.inner.deployment_targets(inp);
            self
        }
        pub fn set_deployment_targets(
            mut self,
            inp: std::option::Option<crate::model::DeploymentTargets>,
        ) -> Self {
            self.inner = self.inner.set_deployment_targets(inp);
            self
        }
        /// <p>The names of one or more Regions in which you want to update parameter values for
        /// stack instances. The overridden parameter values will be applied to all stack instances in
        /// the specified accounts and Regions.</p>
        pub fn regions(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.regions(inp);
            self
        }
        pub fn set_regions(
            mut self,
            inp: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_regions(inp);
            self
        }
        /// <p> A list of input parameters whose values you want to update for the specified stack
        /// instances. </p>
        /// <p>Any overridden parameter values will be applied to all stack instances in the
        /// specified accounts and Regions. When specifying parameters and their values, be aware of
        /// how AWS CloudFormation sets parameter values during stack instance update
        /// operations:</p>
        /// <ul>
        /// <li>
        /// <p>To override the current value for a parameter, include the parameter and
        /// specify its value.</p>
        /// </li>
        /// <li>
        /// <p>To leave a parameter set to its present value, you can do one of the
        /// following:</p>
        /// <ul>
        /// <li>
        /// <p>Do not include the parameter in the list.</p>
        /// </li>
        /// <li>
        /// <p>Include the parameter and specify <code>UsePreviousValue</code> as
        /// <code>true</code>. (You cannot specify both a value and set
        /// <code>UsePreviousValue</code> to <code>true</code>.)</p>
        /// </li>
        /// </ul>
        /// </li>
        /// <li>
        /// <p>To set all overridden parameter back to the values specified in the stack set,
        /// specify a parameter list but do not include any parameters.</p>
        /// </li>
        /// <li>
        /// <p>To leave all parameters set to their present values, do not specify this
        /// property at all.</p>
        /// </li>
        /// </ul>
        /// <p>During stack set updates, any parameter values overridden for a stack instance are
        /// not updated, but retain their overridden value.</p>
        /// <p>You can only override the parameter <i>values</i> that are specified in
        /// the stack set; to add or delete a parameter itself, use <code>UpdateStackSet</code> to
        /// update the stack set template. If you add a parameter to a template, before you can
        /// override the parameter value specified in the stack set you must first use <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_UpdateStackSet.html">UpdateStackSet</a> to update all stack instances with the updated template and
        /// parameter value specified in the stack set. Once a stack instance has been updated with the
        /// new parameter, you can then override the parameter value using
        /// <code>UpdateStackInstances</code>.</p>
        pub fn parameter_overrides(mut self, inp: impl Into<crate::model::Parameter>) -> Self {
            self.inner = self.inner.parameter_overrides(inp);
            self
        }
        pub fn set_parameter_overrides(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::Parameter>>,
        ) -> Self {
            self.inner = self.inner.set_parameter_overrides(inp);
            self
        }
        /// <p>Preferences for how AWS CloudFormation performs this stack set operation.</p>
        pub fn operation_preferences(
            mut self,
            inp: crate::model::StackSetOperationPreferences,
        ) -> Self {
            self.inner = self.inner.operation_preferences(inp);
            self
        }
        pub fn set_operation_preferences(
            mut self,
            inp: std::option::Option<crate::model::StackSetOperationPreferences>,
        ) -> Self {
            self.inner = self.inner.set_operation_preferences(inp);
            self
        }
        /// <p>The unique identifier for this stack set operation. </p>
        /// <p>The operation ID also functions as an idempotency token, to ensure that AWS
        /// CloudFormation performs the stack set operation only once, even if you retry the request
        /// multiple times. You might retry stack set operation requests to ensure that AWS
        /// CloudFormation successfully received them.</p>
        /// <p>If you don't specify an operation ID, the SDK generates one automatically.
        /// </p>
        pub fn operation_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.operation_id(inp);
            self
        }
        pub fn set_operation_id(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_operation_id(inp);
            self
        }
        /// <p>[Service-managed permissions] Specifies whether you are acting as an account administrator in the organization's management account or as a delegated administrator in a member account.</p>
        /// <p>By default, <code>SELF</code> is specified. Use <code>SELF</code> for stack sets with self-managed permissions.</p>
        /// <ul>
        /// <li>
        /// <p>If you are signed in to the management account, specify <code>SELF</code>.</p>
        /// </li>
        /// <li>
        /// <p>If you are signed in to a delegated administrator account, specify <code>DELEGATED_ADMIN</code>.</p>
        /// <p>Your AWS account must be registered as a delegated administrator in the management account. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html">Register a delegated administrator</a> in the <i>AWS CloudFormation User Guide</i>.</p>
        /// </li>
        /// </ul>
        pub fn call_as(mut self, inp: crate::model::CallAs) -> Self {
            self.inner = self.inner.call_as(inp);
            self
        }
        pub fn set_call_as(mut self, inp: std::option::Option<crate::model::CallAs>) -> Self {
            self.inner = self.inner.set_call_as(inp);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct UpdateStackSet<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::update_stack_set_input::Builder,
    }
    impl<C> UpdateStackSet<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> Result<
            crate::output::UpdateStackSetOutput,
            smithy_http::result::SdkError<crate::error::UpdateStackSetError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name or unique ID of the stack set that you want to update.</p>
        pub fn stack_set_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.stack_set_name(inp);
            self
        }
        pub fn set_stack_set_name(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_stack_set_name(inp);
            self
        }
        /// <p>A brief description of updates that you are making.</p>
        pub fn description(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.description(inp);
            self
        }
        pub fn set_description(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_description(inp);
            self
        }
        /// <p>The structure that contains the template body, with a minimum length of 1 byte and a
        /// maximum length of 51,200 bytes. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html">Template Anatomy</a>
        /// in the AWS CloudFormation User Guide.</p>
        /// <p>Conditional: You must specify only one of the following parameters:
        /// <code>TemplateBody</code> or <code>TemplateURL</code>—or set
        /// <code>UsePreviousTemplate</code> to true.</p>
        pub fn template_body(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.template_body(inp);
            self
        }
        pub fn set_template_body(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_template_body(inp);
            self
        }
        /// <p>The location of the file that contains the template body. The URL must point to a
        /// template (maximum size: 460,800 bytes) that is located in an Amazon S3 bucket or a Systems
        /// Manager document. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html">Template Anatomy</a>
        /// in the AWS CloudFormation User Guide.</p>
        /// <p>Conditional: You must specify only one of the following parameters:
        /// <code>TemplateBody</code> or <code>TemplateURL</code>—or set
        /// <code>UsePreviousTemplate</code> to true. </p>
        pub fn template_url(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.template_url(inp);
            self
        }
        pub fn set_template_url(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_template_url(inp);
            self
        }
        /// <p>Use the existing template that's associated with the stack set that you're
        /// updating.</p>
        /// <p>Conditional: You must specify only one of the following parameters:
        /// <code>TemplateBody</code> or <code>TemplateURL</code>—or set
        /// <code>UsePreviousTemplate</code> to true. </p>
        pub fn use_previous_template(mut self, inp: bool) -> Self {
            self.inner = self.inner.use_previous_template(inp);
            self
        }
        pub fn set_use_previous_template(mut self, inp: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_use_previous_template(inp);
            self
        }
        /// <p>A list of input parameters for the stack set template. </p>
        pub fn parameters(mut self, inp: impl Into<crate::model::Parameter>) -> Self {
            self.inner = self.inner.parameters(inp);
            self
        }
        pub fn set_parameters(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::Parameter>>,
        ) -> Self {
            self.inner = self.inner.set_parameters(inp);
            self
        }
        /// <p>In some cases, you must explicitly acknowledge that your stack template contains certain
        /// capabilities in order for AWS CloudFormation to update the stack set and its associated stack
        /// instances.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>CAPABILITY_IAM</code> and <code>CAPABILITY_NAMED_IAM</code>
        /// </p>
        /// <p>Some stack templates might include resources that can affect permissions in
        /// your AWS account; for example, by creating new AWS Identity and Access Management
        /// (IAM) users. For those stacks sets, you must explicitly acknowledge this by
        /// specifying one of these capabilities.</p>
        /// <p>The following IAM resources require you to specify either the
        /// <code>CAPABILITY_IAM</code> or <code>CAPABILITY_NAMED_IAM</code>
        /// capability.</p>
        /// <ul>
        /// <li>
        /// <p>If you have IAM resources, you can specify either capability. </p>
        /// </li>
        /// <li>
        /// <p>If you have IAM resources with custom names, you <i>must</i>
        /// specify <code>CAPABILITY_NAMED_IAM</code>. </p>
        /// </li>
        /// <li>
        /// <p>If you don't specify either of these capabilities, AWS CloudFormation returns an
        /// <code>InsufficientCapabilities</code> error.</p>
        /// </li>
        /// </ul>
        /// <p>If your stack template contains these resources, we recommend that you review
        /// all permissions associated with them and edit their permissions if
        /// necessary.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-accesskey.html">
        /// AWS::IAM::AccessKey</a>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-group.html">
        /// AWS::IAM::Group</a>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-instanceprofile.html"> AWS::IAM::InstanceProfile</a>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-policy.html">
        /// AWS::IAM::Policy</a>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html">
        /// AWS::IAM::Role</a>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-user.html">
        /// AWS::IAM::User</a>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-addusertogroup.html"> AWS::IAM::UserToGroupAddition</a>
        /// </p>
        /// </li>
        /// </ul>
        /// <p>For more information, see <a href="http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-iam-template.html#capabilities">Acknowledging IAM
        /// Resources in AWS CloudFormation Templates</a>.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>CAPABILITY_AUTO_EXPAND</code>
        /// </p>
        /// <p>Some templates reference macros. If your stack set template references one or more macros,
        /// you must update the stack set directly from the processed template, without first
        /// reviewing the resulting changes in a change set. To update the stack set directly, you must acknowledge this
        /// capability. For more information, see <a href="http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-macros.html">Using AWS CloudFormation Macros to Perform Custom Processing on
        /// Templates</a>.</p>
        /// <important>
        /// <p>Stack sets with service-managed permissions
        /// do not currently support the use of macros in templates. (This includes
        /// the <a href="http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/create-reusable-transform-function-snippets-and-add-to-your-template-with-aws-include-transform.html">AWS::Include</a> and <a href="http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-aws-serverless.html">AWS::Serverless</a>
        /// transforms, which are macros hosted by AWS CloudFormation.) Even if you specify this
        /// capability for a stack set with service-managed permissions, if you reference a macro in your template the stack set operation will
        /// fail.</p>
        /// </important>
        /// </li>
        /// </ul>
        pub fn capabilities(mut self, inp: impl Into<crate::model::Capability>) -> Self {
            self.inner = self.inner.capabilities(inp);
            self
        }
        pub fn set_capabilities(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::Capability>>,
        ) -> Self {
            self.inner = self.inner.set_capabilities(inp);
            self
        }
        /// <p>The key-value pairs to associate with this stack set and the stacks created from it.
        /// AWS CloudFormation also propagates these tags to supported resources that are created in
        /// the stacks. You can specify a maximum number of 50 tags.</p>
        /// <p>If you specify tags for this parameter, those tags replace any list of tags that are
        /// currently associated with this stack set. This means:</p>
        /// <ul>
        /// <li>
        /// <p>If you don't specify this parameter, AWS CloudFormation doesn't modify the
        /// stack's tags. </p>
        /// </li>
        /// <li>
        /// <p>If you specify <i>any</i> tags using this parameter, you must
        /// specify <i>all</i> the tags that you want associated with this stack
        /// set, even tags you've specifed before (for example, when creating the stack set or
        /// during a previous update of the stack set.). Any tags that you don't include in the
        /// updated list of tags are removed from the stack set, and therefore from the stacks
        /// and resources as well. </p>
        /// </li>
        /// <li>
        /// <p>If you specify an empty value, AWS CloudFormation removes all currently
        /// associated tags.</p>
        /// </li>
        /// </ul>
        /// <p>If you specify new tags as part of an <code>UpdateStackSet</code> action, AWS
        /// CloudFormation checks to see if you have the required IAM permission to tag resources. If
        /// you omit tags that are currently associated with the stack set from the list of tags you
        /// specify, AWS CloudFormation assumes that you want to remove those tags from the stack set,
        /// and checks to see if you have permission to untag resources. If you don't have the
        /// necessary permission(s), the entire <code>UpdateStackSet</code> action fails with an
        /// <code>access denied</code> error, and the stack set is not updated.</p>
        pub fn tags(mut self, inp: impl Into<crate::model::Tag>) -> Self {
            self.inner = self.inner.tags(inp);
            self
        }
        pub fn set_tags(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.inner = self.inner.set_tags(inp);
            self
        }
        /// <p>Preferences for how AWS CloudFormation performs this stack set operation.</p>
        pub fn operation_preferences(
            mut self,
            inp: crate::model::StackSetOperationPreferences,
        ) -> Self {
            self.inner = self.inner.operation_preferences(inp);
            self
        }
        pub fn set_operation_preferences(
            mut self,
            inp: std::option::Option<crate::model::StackSetOperationPreferences>,
        ) -> Self {
            self.inner = self.inner.set_operation_preferences(inp);
            self
        }
        /// <p>The Amazon Resource Number (ARN) of the IAM role to use to update this stack set.</p>
        /// <p>Specify an IAM role only if you are using customized administrator roles to control
        /// which users or groups can manage specific stack sets within the same administrator account.
        /// For more information, see <a href="http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-prereqs.html">Granting
        /// Permissions for Stack Set Operations</a> in the
        /// <i>AWS CloudFormation User Guide</i>.</p>
        /// <p>If you specified a customized administrator role when you created the stack set, you
        /// must specify a customized administrator role, even if it is the same customized
        /// administrator role used with this stack set previously.</p>
        pub fn administration_role_arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.administration_role_arn(inp);
            self
        }
        pub fn set_administration_role_arn(
            mut self,
            inp: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_administration_role_arn(inp);
            self
        }
        /// <p>The name of the IAM execution role to use to update the stack set. If you do not specify
        /// an execution role, AWS CloudFormation uses the <code>AWSCloudFormationStackSetExecutionRole</code> role
        /// for the stack set operation.</p>
        /// <p>Specify an IAM role only if you are using customized execution roles to control which
        /// stack resources users and groups can include in their stack sets.
        /// </p>
        /// <p> If you specify a customized execution role, AWS CloudFormation uses that role to update the stack.
        /// If you do not specify a customized execution role, AWS CloudFormation performs the update using the role
        /// previously associated with the stack set, so long as you have permissions to perform
        /// operations on the stack set.</p>
        pub fn execution_role_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.execution_role_name(inp);
            self
        }
        pub fn set_execution_role_name(
            mut self,
            inp: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_execution_role_name(inp);
            self
        }
        /// <p>[Service-managed permissions] The AWS Organizations accounts in which to update associated stack instances.</p>
        /// <p>To update all the stack instances associated with this stack set, do not specify <code>DeploymentTargets</code> or <code>Regions</code>.</p>
        /// <p>If the stack set update includes changes to the template (that is, if <code>TemplateBody</code> or <code>TemplateURL</code> is specified), or the <code>Parameters</code>, AWS CloudFormation marks all stack instances with a status of <code>OUTDATED</code> prior to updating the stack instances in the specified accounts and Regions. If the stack set update does not include changes to the template or parameters, AWS CloudFormation updates the stack instances in the specified accounts and Regions, while leaving all other stack instances with their existing stack instance status.</p>
        pub fn deployment_targets(mut self, inp: crate::model::DeploymentTargets) -> Self {
            self.inner = self.inner.deployment_targets(inp);
            self
        }
        pub fn set_deployment_targets(
            mut self,
            inp: std::option::Option<crate::model::DeploymentTargets>,
        ) -> Self {
            self.inner = self.inner.set_deployment_targets(inp);
            self
        }
        /// <p>Describes how the IAM roles required for stack set operations are created. You cannot modify <code>PermissionModel</code> if there are stack instances associated with your stack set.</p>
        /// <ul>
        /// <li>
        /// <p>With <code>self-managed</code> permissions, you must create the administrator and execution roles required to deploy to target accounts. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-prereqs-self-managed.html">Grant Self-Managed Stack Set Permissions</a>.</p>
        /// </li>
        /// <li>
        /// <p>With <code>service-managed</code> permissions, StackSets automatically creates the IAM roles required to deploy to accounts managed by AWS Organizations. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-prereqs-service-managed.html">Grant Service-Managed Stack Set Permissions</a>.</p>
        /// </li>
        /// </ul>
        pub fn permission_model(mut self, inp: crate::model::PermissionModels) -> Self {
            self.inner = self.inner.permission_model(inp);
            self
        }
        pub fn set_permission_model(
            mut self,
            inp: std::option::Option<crate::model::PermissionModels>,
        ) -> Self {
            self.inner = self.inner.set_permission_model(inp);
            self
        }
        /// <p>[Service-managed permissions] Describes whether StackSets automatically deploys to AWS Organizations accounts that are added to a target organization or organizational unit (OU).</p>
        /// <p>If you specify <code>AutoDeployment</code>, do not specify <code>DeploymentTargets</code> or <code>Regions</code>.</p>
        pub fn auto_deployment(mut self, inp: crate::model::AutoDeployment) -> Self {
            self.inner = self.inner.auto_deployment(inp);
            self
        }
        pub fn set_auto_deployment(
            mut self,
            inp: std::option::Option<crate::model::AutoDeployment>,
        ) -> Self {
            self.inner = self.inner.set_auto_deployment(inp);
            self
        }
        /// <p>The unique ID for this stack set operation. </p>
        /// <p>The operation ID also functions as an idempotency token, to ensure that AWS
        /// CloudFormation performs the stack set operation only once, even if you retry the request
        /// multiple times. You might retry stack set operation requests to ensure that AWS
        /// CloudFormation successfully received them.</p>
        /// <p>If you don't specify an operation ID, AWS CloudFormation generates one
        /// automatically.</p>
        /// <p>Repeating this stack set operation with a new operation ID retries all stack
        /// instances whose status is <code>OUTDATED</code>. </p>
        pub fn operation_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.operation_id(inp);
            self
        }
        pub fn set_operation_id(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_operation_id(inp);
            self
        }
        /// <p>[Self-managed permissions] The accounts in which to update associated stack instances. If you specify accounts, you
        /// must also specify the Regions in which to update stack set instances.</p>
        /// <p>To update <i>all</i> the stack instances associated with this stack set,
        /// do not specify the <code>Accounts</code> or <code>Regions</code> properties.</p>
        /// <p>If the stack set update includes changes to the template (that is, if the
        /// <code>TemplateBody</code> or <code>TemplateURL</code> properties are specified), or the
        /// <code>Parameters</code> property, AWS CloudFormation marks all stack instances with a status of
        /// <code>OUTDATED</code> prior to updating the stack instances in the specified accounts
        /// and Regions. If the stack set update does not include changes to the template or
        /// parameters, AWS CloudFormation updates the stack instances in the specified accounts and Regions, while
        /// leaving all other stack instances with their existing stack instance status. </p>
        pub fn accounts(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.accounts(inp);
            self
        }
        pub fn set_accounts(
            mut self,
            inp: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_accounts(inp);
            self
        }
        /// <p>The Regions in which to update associated stack instances. If you specify Regions, you
        /// must also specify accounts in which to update stack set instances.</p>
        /// <p>To update <i>all</i> the stack instances associated with this stack set,
        /// do not specify the <code>Accounts</code> or <code>Regions</code> properties.</p>
        /// <p>If the stack set update includes changes to the template (that is, if the
        /// <code>TemplateBody</code> or <code>TemplateURL</code> properties are specified), or the
        /// <code>Parameters</code> property, AWS CloudFormation marks all stack instances with a status of
        /// <code>OUTDATED</code> prior to updating the stack instances in the specified accounts
        /// and Regions. If the stack set update does not include changes to the template or
        /// parameters, AWS CloudFormation updates the stack instances in the specified accounts and Regions, while
        /// leaving all other stack instances with their existing stack instance status. </p>
        pub fn regions(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.regions(inp);
            self
        }
        pub fn set_regions(
            mut self,
            inp: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_regions(inp);
            self
        }
        /// <p>[Service-managed permissions] Specifies whether you are acting as an account administrator in the organization's management account or as a delegated administrator in a member account.</p>
        /// <p>By default, <code>SELF</code> is specified. Use <code>SELF</code> for stack sets with self-managed permissions.</p>
        /// <ul>
        /// <li>
        /// <p>If you are signed in to the management account, specify <code>SELF</code>.</p>
        /// </li>
        /// <li>
        /// <p>If you are signed in to a delegated administrator account, specify <code>DELEGATED_ADMIN</code>.</p>
        /// <p>Your AWS account must be registered as a delegated administrator in the management account. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html">Register a delegated administrator</a> in the <i>AWS CloudFormation User Guide</i>.</p>
        /// </li>
        /// </ul>
        pub fn call_as(mut self, inp: crate::model::CallAs) -> Self {
            self.inner = self.inner.call_as(inp);
            self
        }
        pub fn set_call_as(mut self, inp: std::option::Option<crate::model::CallAs>) -> Self {
            self.inner = self.inner.set_call_as(inp);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct UpdateTerminationProtection<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::update_termination_protection_input::Builder,
    }
    impl<C> UpdateTerminationProtection<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> Result<
            crate::output::UpdateTerminationProtectionOutput,
            smithy_http::result::SdkError<crate::error::UpdateTerminationProtectionError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>Whether to enable termination protection on the specified stack.</p>
        pub fn enable_termination_protection(mut self, inp: bool) -> Self {
            self.inner = self.inner.enable_termination_protection(inp);
            self
        }
        pub fn set_enable_termination_protection(mut self, inp: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_enable_termination_protection(inp);
            self
        }
        /// <p>The name or unique ID of the stack for which you want to set termination
        /// protection.</p>
        pub fn stack_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.stack_name(inp);
            self
        }
        pub fn set_stack_name(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_stack_name(inp);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ValidateTemplate<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::validate_template_input::Builder,
    }
    impl<C> ValidateTemplate<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> Result<
            crate::output::ValidateTemplateOutput,
            smithy_http::result::SdkError<crate::error::ValidateTemplateError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>Structure containing the template body with a minimum length of 1 byte and a maximum
        /// length of 51,200 bytes. For more information, go to <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html">Template Anatomy</a>
        /// in the AWS CloudFormation User Guide.</p>
        /// <p>Conditional: You must pass <code>TemplateURL</code> or <code>TemplateBody</code>. If
        /// both are passed, only <code>TemplateBody</code> is used.</p>
        pub fn template_body(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.template_body(inp);
            self
        }
        pub fn set_template_body(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_template_body(inp);
            self
        }
        /// <p>Location of file containing the template body. The URL must point to a template (max
        /// size: 460,800 bytes) that is located in an Amazon S3 bucket or a Systems Manager document.
        /// For more information, go to <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html">Template Anatomy</a>
        /// in the AWS CloudFormation User Guide.</p>
        /// <p>Conditional: You must pass <code>TemplateURL</code> or <code>TemplateBody</code>. If
        /// both are passed, only <code>TemplateBody</code> is used.</p>
        pub fn template_url(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.template_url(inp);
            self
        }
        pub fn set_template_url(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_template_url(inp);
            self
        }
    }
}
