// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn de_describe_resource_scan_http_error(
    _response_status: u16,
    _response_headers: &::aws_smithy_runtime_api::http::Headers,
    _response_body: &[u8],
) -> std::result::Result<
    crate::operation::describe_resource_scan::DescribeResourceScanOutput,
    crate::operation::describe_resource_scan::DescribeResourceScanError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(_response_status, _response_headers, _response_body)
        .map_err(crate::operation::describe_resource_scan::DescribeResourceScanError::unhandled)?;
    generic_builder = ::aws_types::request_id::apply_request_id(generic_builder, _response_headers);
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::operation::describe_resource_scan::DescribeResourceScanError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "ResourceScanNotFound" => crate::operation::describe_resource_scan::DescribeResourceScanError::ResourceScanNotFoundException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::ResourceScanNotFoundExceptionBuilder::default();
                output = crate::protocol_serde::shape_resource_scan_not_found_exception::de_resource_scan_not_found_exception_xml_err(
                    _response_body,
                    output,
                )
                .map_err(crate::operation::describe_resource_scan::DescribeResourceScanError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        _ => crate::operation::describe_resource_scan::DescribeResourceScanError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_describe_resource_scan_http_response(
    _response_status: u16,
    _response_headers: &::aws_smithy_runtime_api::http::Headers,
    _response_body: &[u8],
) -> std::result::Result<
    crate::operation::describe_resource_scan::DescribeResourceScanOutput,
    crate::operation::describe_resource_scan::DescribeResourceScanError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::operation::describe_resource_scan::builders::DescribeResourceScanOutputBuilder::default();
        output = crate::protocol_serde::shape_describe_resource_scan::de_describe_resource_scan(_response_body, output)
            .map_err(crate::operation::describe_resource_scan::DescribeResourceScanError::unhandled)?;
        output._set_request_id(::aws_types::request_id::RequestId::request_id(_response_headers).map(str::to_string));
        output.build()
    })
}

#[allow(unused_mut)]
pub fn de_describe_resource_scan(
    inp: &[u8],
    mut builder: crate::operation::describe_resource_scan::builders::DescribeResourceScanOutputBuilder,
) -> std::result::Result<
    crate::operation::describe_resource_scan::builders::DescribeResourceScanOutputBuilder,
    ::aws_smithy_xml::decode::XmlDecodeError,
> {
    let mut doc = ::aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    #[allow(unused_variables)]
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeResourceScanResponse")) {
        return Err(::aws_smithy_xml::decode::XmlDecodeError::custom(format!(
            "invalid root, expected DescribeResourceScanResponse got {start_el:?}"
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("DescribeResourceScanResult")) {
            return Err(::aws_smithy_xml::decode::XmlDecodeError::custom(format!(
                "invalid result, expected DescribeResourceScanResult got {start_el:?}"
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("ResourceScanId") /* ResourceScanId com.amazonaws.cloudformation.synthetic#DescribeResourceScanOutput$ResourceScanId */ =>  {
                let var_1 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_scan_id(var_1);
            }
            ,
            s if s.matches("Status") /* Status com.amazonaws.cloudformation.synthetic#DescribeResourceScanOutput$Status */ =>  {
                let var_2 =
                    Some(
                        Result::<crate::types::ResourceScanStatus, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::ResourceScanStatus::from(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_status(var_2);
            }
            ,
            s if s.matches("StatusReason") /* StatusReason com.amazonaws.cloudformation.synthetic#DescribeResourceScanOutput$StatusReason */ =>  {
                let var_3 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_status_reason(var_3);
            }
            ,
            s if s.matches("StartTime") /* StartTime com.amazonaws.cloudformation.synthetic#DescribeResourceScanOutput$StartTime */ =>  {
                let var_4 =
                    Some(
                        ::aws_smithy_types::DateTime::from_str(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , ::aws_smithy_types::date_time::Format::DateTimeWithOffset
                        )
                        .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (timestamp: `com.amazonaws.cloudformation#Timestamp`)"))
                        ?
                    )
                ;
                builder = builder.set_start_time(var_4);
            }
            ,
            s if s.matches("EndTime") /* EndTime com.amazonaws.cloudformation.synthetic#DescribeResourceScanOutput$EndTime */ =>  {
                let var_5 =
                    Some(
                        ::aws_smithy_types::DateTime::from_str(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , ::aws_smithy_types::date_time::Format::DateTimeWithOffset
                        )
                        .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (timestamp: `com.amazonaws.cloudformation#Timestamp`)"))
                        ?
                    )
                ;
                builder = builder.set_end_time(var_5);
            }
            ,
            s if s.matches("PercentageCompleted") /* PercentageCompleted com.amazonaws.cloudformation.synthetic#DescribeResourceScanOutput$PercentageCompleted */ =>  {
                let var_6 =
                    Some(
                         {
                            <f64 as ::aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (double: `com.amazonaws.cloudformation#PercentageCompleted`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_percentage_completed(var_6);
            }
            ,
            s if s.matches("ResourceTypes") /* ResourceTypes com.amazonaws.cloudformation.synthetic#DescribeResourceScanOutput$ResourceTypes */ =>  {
                let var_7 =
                    Some(
                        crate::protocol_serde::shape_resource_types::de_resource_types(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_resource_types(var_7);
            }
            ,
            s if s.matches("ResourcesScanned") /* ResourcesScanned com.amazonaws.cloudformation.synthetic#DescribeResourceScanOutput$ResourcesScanned */ =>  {
                let var_8 =
                    Some(
                         {
                            <i32 as ::aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (integer: `com.amazonaws.cloudformation#ResourcesScanned`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_resources_scanned(var_8);
            }
            ,
            s if s.matches("ResourcesRead") /* ResourcesRead com.amazonaws.cloudformation.synthetic#DescribeResourceScanOutput$ResourcesRead */ =>  {
                let var_9 =
                    Some(
                         {
                            <i32 as ::aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (integer: `com.amazonaws.cloudformation#ResourcesRead`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_resources_read(var_9);
            }
            ,
            s if s.matches("ScanFilters") /* ScanFilters com.amazonaws.cloudformation.synthetic#DescribeResourceScanOutput$ScanFilters */ =>  {
                let var_10 =
                    Some(
                        crate::protocol_serde::shape_scan_filters::de_scan_filters(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_scan_filters(var_10);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(::aws_smithy_xml::decode::XmlDecodeError::custom(
            "expected DescribeResourceScanResult tag",
        ));
    };
    Ok(builder)
}
