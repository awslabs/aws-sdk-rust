// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_stack_input_input(
    input: &crate::operation::update_stack::UpdateStackInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "UpdateStack", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("StackName");
    if let Some(var_2) = &input.stack_name {
        scope_1.string(var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("TemplateBody");
    if let Some(var_4) = &input.template_body {
        scope_3.string(var_4);
    }
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("TemplateURL");
    if let Some(var_6) = &input.template_url {
        scope_5.string(var_6);
    }
    #[allow(unused_mut)]
    let mut scope_7 = writer.prefix("UsePreviousTemplate");
    if let Some(var_8) = &input.use_previous_template {
        scope_7.boolean(*var_8);
    }
    #[allow(unused_mut)]
    let mut scope_9 = writer.prefix("StackPolicyDuringUpdateBody");
    if let Some(var_10) = &input.stack_policy_during_update_body {
        scope_9.string(var_10);
    }
    #[allow(unused_mut)]
    let mut scope_11 = writer.prefix("StackPolicyDuringUpdateURL");
    if let Some(var_12) = &input.stack_policy_during_update_url {
        scope_11.string(var_12);
    }
    #[allow(unused_mut)]
    let mut scope_13 = writer.prefix("Parameters");
    if let Some(var_14) = &input.parameters {
        let mut list_16 = scope_13.start_list(false, None);
        for item_15 in var_14 {
            #[allow(unused_mut)]
            let mut entry_17 = list_16.entry();
            crate::protocol_serde::shape_parameter::ser_parameter(entry_17, item_15)?;
        }
        list_16.finish();
    }
    #[allow(unused_mut)]
    let mut scope_18 = writer.prefix("Capabilities");
    if let Some(var_19) = &input.capabilities {
        let mut list_21 = scope_18.start_list(false, None);
        for item_20 in var_19 {
            #[allow(unused_mut)]
            let mut entry_22 = list_21.entry();
            entry_22.string(item_20.as_str());
        }
        list_21.finish();
    }
    #[allow(unused_mut)]
    let mut scope_23 = writer.prefix("ResourceTypes");
    if let Some(var_24) = &input.resource_types {
        let mut list_26 = scope_23.start_list(false, None);
        for item_25 in var_24 {
            #[allow(unused_mut)]
            let mut entry_27 = list_26.entry();
            entry_27.string(item_25);
        }
        list_26.finish();
    }
    #[allow(unused_mut)]
    let mut scope_28 = writer.prefix("RoleARN");
    if let Some(var_29) = &input.role_arn {
        scope_28.string(var_29);
    }
    #[allow(unused_mut)]
    let mut scope_30 = writer.prefix("RollbackConfiguration");
    if let Some(var_31) = &input.rollback_configuration {
        crate::protocol_serde::shape_rollback_configuration::ser_rollback_configuration(
            scope_30, var_31,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_32 = writer.prefix("StackPolicyBody");
    if let Some(var_33) = &input.stack_policy_body {
        scope_32.string(var_33);
    }
    #[allow(unused_mut)]
    let mut scope_34 = writer.prefix("StackPolicyURL");
    if let Some(var_35) = &input.stack_policy_url {
        scope_34.string(var_35);
    }
    #[allow(unused_mut)]
    let mut scope_36 = writer.prefix("NotificationARNs");
    if let Some(var_37) = &input.notification_ar_ns {
        let mut list_39 = scope_36.start_list(false, None);
        for item_38 in var_37 {
            #[allow(unused_mut)]
            let mut entry_40 = list_39.entry();
            entry_40.string(item_38);
        }
        list_39.finish();
    }
    #[allow(unused_mut)]
    let mut scope_41 = writer.prefix("Tags");
    if let Some(var_42) = &input.tags {
        let mut list_44 = scope_41.start_list(false, None);
        for item_43 in var_42 {
            #[allow(unused_mut)]
            let mut entry_45 = list_44.entry();
            crate::protocol_serde::shape_tag::ser_tag(entry_45, item_43)?;
        }
        list_44.finish();
    }
    #[allow(unused_mut)]
    let mut scope_46 = writer.prefix("DisableRollback");
    if let Some(var_47) = &input.disable_rollback {
        scope_46.boolean(*var_47);
    }
    #[allow(unused_mut)]
    let mut scope_48 = writer.prefix("ClientRequestToken");
    if let Some(var_49) = &input.client_request_token {
        scope_48.string(var_49);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}
