// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn de_describe_stack_drift_detection_status_http_error(
    _response_status: u16,
    _response_headers: &::http::header::HeaderMap,
    _response_body: &[u8],
) -> std::result::Result<
    crate::operation::describe_stack_drift_detection_status::DescribeStackDriftDetectionStatusOutput,
    crate::operation::describe_stack_drift_detection_status::DescribeStackDriftDetectionStatusError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(_response_status, _response_headers, _response_body)
        .map_err(crate::operation::describe_stack_drift_detection_status::DescribeStackDriftDetectionStatusError::unhandled)?;
    generic_builder = ::aws_http::request_id::apply_request_id(generic_builder, _response_headers);
    let generic = generic_builder.build();
    Err(crate::operation::describe_stack_drift_detection_status::DescribeStackDriftDetectionStatusError::generic(generic))
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_describe_stack_drift_detection_status_http_response(
    _response_status: u16,
    _response_headers: &::http::header::HeaderMap,
    _response_body: &[u8],
) -> std::result::Result<
    crate::operation::describe_stack_drift_detection_status::DescribeStackDriftDetectionStatusOutput,
    crate::operation::describe_stack_drift_detection_status::DescribeStackDriftDetectionStatusError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::operation::describe_stack_drift_detection_status::builders::DescribeStackDriftDetectionStatusOutputBuilder::default();
        output = crate::protocol_serde::shape_describe_stack_drift_detection_status::de_describe_stack_drift_detection_status(_response_body, output)
            .map_err(crate::operation::describe_stack_drift_detection_status::DescribeStackDriftDetectionStatusError::unhandled)?;
        output._set_request_id(::aws_http::request_id::RequestId::request_id(_response_headers).map(str::to_string));
        crate::serde_util::describe_stack_drift_detection_status_output_correct_errors(output).build()
    })
}

#[allow(unused_mut)]
pub fn de_describe_stack_drift_detection_status(
    inp: &[u8],
    mut builder: crate::operation::describe_stack_drift_detection_status::builders::DescribeStackDriftDetectionStatusOutputBuilder,
) -> Result<
    crate::operation::describe_stack_drift_detection_status::builders::DescribeStackDriftDetectionStatusOutputBuilder,
    ::aws_smithy_xml::decode::XmlDecodeError,
> {
    let mut doc = ::aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    #[allow(unused_variables)]
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeStackDriftDetectionStatusResponse")) {
        return Err(::aws_smithy_xml::decode::XmlDecodeError::custom(format!(
            "invalid root, expected DescribeStackDriftDetectionStatusResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("DescribeStackDriftDetectionStatusResult")) {
            return Err(::aws_smithy_xml::decode::XmlDecodeError::custom(format!(
                "invalid result, expected DescribeStackDriftDetectionStatusResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("StackId") /* StackId com.amazonaws.cloudformation.synthetic#DescribeStackDriftDetectionStatusOutput$StackId */ =>  {
                let var_1 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_stack_id(var_1);
            }
            ,
            s if s.matches("StackDriftDetectionId") /* StackDriftDetectionId com.amazonaws.cloudformation.synthetic#DescribeStackDriftDetectionStatusOutput$StackDriftDetectionId */ =>  {
                let var_2 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_stack_drift_detection_id(var_2);
            }
            ,
            s if s.matches("StackDriftStatus") /* StackDriftStatus com.amazonaws.cloudformation.synthetic#DescribeStackDriftDetectionStatusOutput$StackDriftStatus */ =>  {
                let var_3 =
                    Some(
                        Result::<crate::types::StackDriftStatus, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::StackDriftStatus::from(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_stack_drift_status(var_3);
            }
            ,
            s if s.matches("DetectionStatus") /* DetectionStatus com.amazonaws.cloudformation.synthetic#DescribeStackDriftDetectionStatusOutput$DetectionStatus */ =>  {
                let var_4 =
                    Some(
                        Result::<crate::types::StackDriftDetectionStatus, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::StackDriftDetectionStatus::from(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_detection_status(var_4);
            }
            ,
            s if s.matches("DetectionStatusReason") /* DetectionStatusReason com.amazonaws.cloudformation.synthetic#DescribeStackDriftDetectionStatusOutput$DetectionStatusReason */ =>  {
                let var_5 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_detection_status_reason(var_5);
            }
            ,
            s if s.matches("DriftedStackResourceCount") /* DriftedStackResourceCount com.amazonaws.cloudformation.synthetic#DescribeStackDriftDetectionStatusOutput$DriftedStackResourceCount */ =>  {
                let var_6 =
                    Some(
                         {
                            <i32 as ::aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (integer: `com.amazonaws.cloudformation#BoxedInteger`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_drifted_stack_resource_count(var_6);
            }
            ,
            s if s.matches("Timestamp") /* Timestamp com.amazonaws.cloudformation.synthetic#DescribeStackDriftDetectionStatusOutput$Timestamp */ =>  {
                let var_7 =
                    Some(
                        ::aws_smithy_types::DateTime::from_str(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , ::aws_smithy_types::date_time::Format::DateTimeWithOffset
                        )
                        .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (timestamp: `com.amazonaws.cloudformation#Timestamp`)"))
                        ?
                    )
                ;
                builder = builder.set_timestamp(var_7);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(::aws_smithy_xml::decode::XmlDecodeError::custom(
            "expected DescribeStackDriftDetectionStatusResult tag",
        ));
    };
    Ok(builder)
}
