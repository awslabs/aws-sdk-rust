// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_delete_stack_instances_input_input(
    input: &crate::operation::delete_stack_instances::DeleteStackInstancesInput,
) -> Result<::aws_smithy_types::body::SdkBody, ::aws_smithy_types::error::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = ::aws_smithy_query::QueryWriter::new(&mut out, "DeleteStackInstances", "2010-05-15");
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("StackSetName");
    if let Some(var_2) = &input.stack_set_name {
        scope_1.string(var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("Accounts");
    if let Some(var_4) = &input.accounts {
        let mut list_6 = scope_3.start_list(false, None);
        for item_5 in var_4 {
            #[allow(unused_mut)]
            let mut entry_7 = list_6.entry();
            entry_7.string(item_5);
        }
        list_6.finish();
    }
    #[allow(unused_mut)]
    let mut scope_8 = writer.prefix("DeploymentTargets");
    if let Some(var_9) = &input.deployment_targets {
        crate::protocol_serde::shape_deployment_targets::ser_deployment_targets(scope_8, var_9)?;
    }
    #[allow(unused_mut)]
    let mut scope_10 = writer.prefix("Regions");
    if let Some(var_11) = &input.regions {
        let mut list_13 = scope_10.start_list(false, None);
        for item_12 in var_11 {
            #[allow(unused_mut)]
            let mut entry_14 = list_13.entry();
            entry_14.string(item_12);
        }
        list_13.finish();
    }
    #[allow(unused_mut)]
    let mut scope_15 = writer.prefix("OperationPreferences");
    if let Some(var_16) = &input.operation_preferences {
        crate::protocol_serde::shape_stack_set_operation_preferences::ser_stack_set_operation_preferences(scope_15, var_16)?;
    }
    #[allow(unused_mut)]
    let mut scope_17 = writer.prefix("RetainStacks");
    if let Some(var_18) = &input.retain_stacks {
        scope_17.boolean(*var_18);
    }
    #[allow(unused_mut)]
    let mut scope_19 = writer.prefix("OperationId");
    if let Some(var_20) = &input.operation_id {
        scope_19.string(var_20);
    }
    #[allow(unused_mut)]
    let mut scope_21 = writer.prefix("CallAs");
    if let Some(var_22) = &input.call_as {
        scope_21.string(var_22.as_str());
    }
    writer.finish();
    Ok(::aws_smithy_types::body::SdkBody::from(out))
}
