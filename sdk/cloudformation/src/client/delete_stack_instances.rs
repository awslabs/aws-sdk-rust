// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DeleteStackInstances`](crate::operation::delete_stack_instances::builders::DeleteStackInstancesFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`stack_set_name(impl Into<String>)`](crate::operation::delete_stack_instances::builders::DeleteStackInstancesFluentBuilder::stack_set_name) / [`set_stack_set_name(Option<String>)`](crate::operation::delete_stack_instances::builders::DeleteStackInstancesFluentBuilder::set_stack_set_name):<br>required: **true**<br><p>The name or unique ID of the stack set that you want to delete stack instances for.</p><br>
    ///   - [`accounts(impl Into<String>)`](crate::operation::delete_stack_instances::builders::DeleteStackInstancesFluentBuilder::accounts) / [`set_accounts(Option<Vec::<String>>)`](crate::operation::delete_stack_instances::builders::DeleteStackInstancesFluentBuilder::set_accounts):<br>required: **false**<br><p>[Self-managed permissions] The names of the Amazon Web Services accounts that you want to delete stack instances for.</p>  <p>You can specify <code>Accounts</code> or <code>DeploymentTargets</code>, but not both.</p><br>
    ///   - [`deployment_targets(DeploymentTargets)`](crate::operation::delete_stack_instances::builders::DeleteStackInstancesFluentBuilder::deployment_targets) / [`set_deployment_targets(Option<DeploymentTargets>)`](crate::operation::delete_stack_instances::builders::DeleteStackInstancesFluentBuilder::set_deployment_targets):<br>required: **false**<br><p>[Service-managed permissions] The Organizations accounts from which to delete stack instances.</p>  <p>You can specify <code>Accounts</code> or <code>DeploymentTargets</code>, but not both.</p><br>
    ///   - [`regions(impl Into<String>)`](crate::operation::delete_stack_instances::builders::DeleteStackInstancesFluentBuilder::regions) / [`set_regions(Option<Vec::<String>>)`](crate::operation::delete_stack_instances::builders::DeleteStackInstancesFluentBuilder::set_regions):<br>required: **true**<br><p>The Amazon Web Services Regions where you want to delete stack set instances.</p><br>
    ///   - [`operation_preferences(StackSetOperationPreferences)`](crate::operation::delete_stack_instances::builders::DeleteStackInstancesFluentBuilder::operation_preferences) / [`set_operation_preferences(Option<StackSetOperationPreferences>)`](crate::operation::delete_stack_instances::builders::DeleteStackInstancesFluentBuilder::set_operation_preferences):<br>required: **false**<br><p>Preferences for how CloudFormation performs this stack set operation.</p><br>
    ///   - [`retain_stacks(bool)`](crate::operation::delete_stack_instances::builders::DeleteStackInstancesFluentBuilder::retain_stacks) / [`set_retain_stacks(Option<bool>)`](crate::operation::delete_stack_instances::builders::DeleteStackInstancesFluentBuilder::set_retain_stacks):<br>required: **true**<br><p>Removes the stack instances from the specified stack set, but doesn't delete the stacks. You can't reassociate a retained stack or add an existing, saved stack to a new stack set.</p>  <p>For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-concepts.html#stackset-ops-options">Stack set operation options</a>.</p><br>
    ///   - [`operation_id(impl Into<String>)`](crate::operation::delete_stack_instances::builders::DeleteStackInstancesFluentBuilder::operation_id) / [`set_operation_id(Option<String>)`](crate::operation::delete_stack_instances::builders::DeleteStackInstancesFluentBuilder::set_operation_id):<br>required: **false**<br><p>The unique identifier for this stack set operation.</p>  <p>If you don't specify an operation ID, the SDK generates one automatically.</p>  <p>The operation ID also functions as an idempotency token, to ensure that CloudFormation performs the stack set operation only once, even if you retry the request multiple times. You can retry stack set operation requests to ensure that CloudFormation successfully received them.</p>  <p>Repeating this stack set operation with a new operation ID retries all stack instances whose status is <code>OUTDATED</code>.</p><br>
    ///   - [`call_as(CallAs)`](crate::operation::delete_stack_instances::builders::DeleteStackInstancesFluentBuilder::call_as) / [`set_call_as(Option<CallAs>)`](crate::operation::delete_stack_instances::builders::DeleteStackInstancesFluentBuilder::set_call_as):<br>required: **false**<br><p>[Service-managed permissions] Specifies whether you are acting as an account administrator in the organization's management account or as a delegated administrator in a member account.</p>  <p>By default, <code>SELF</code> is specified. Use <code>SELF</code> for stack sets with self-managed permissions.</p>  <ul>   <li> <p>If you are signed in to the management account, specify <code>SELF</code>.</p> </li>   <li> <p>If you are signed in to a delegated administrator account, specify <code>DELEGATED_ADMIN</code>.</p> <p>Your Amazon Web Services account must be registered as a delegated administrator in the management account. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html">Register a delegated administrator</a> in the <i>CloudFormation User Guide</i>.</p> </li>  </ul><br>
    /// - On success, responds with [`DeleteStackInstancesOutput`](crate::operation::delete_stack_instances::DeleteStackInstancesOutput) with field(s):
    ///   - [`operation_id(Option<String>)`](crate::operation::delete_stack_instances::DeleteStackInstancesOutput::operation_id): <p>The unique identifier for this stack set operation.</p>
    /// - On failure, responds with [`SdkError<DeleteStackInstancesError>`](crate::operation::delete_stack_instances::DeleteStackInstancesError)
    pub fn delete_stack_instances(&self) -> crate::operation::delete_stack_instances::builders::DeleteStackInstancesFluentBuilder {
        crate::operation::delete_stack_instances::builders::DeleteStackInstancesFluentBuilder::new(self.handle.clone())
    }
}
