// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`UpdateTerminationProtection`](crate::operation::update_termination_protection::builders::UpdateTerminationProtectionFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`enable_termination_protection(bool)`](crate::operation::update_termination_protection::builders::UpdateTerminationProtectionFluentBuilder::enable_termination_protection) / [`set_enable_termination_protection(Option<bool>)`](crate::operation::update_termination_protection::builders::UpdateTerminationProtectionFluentBuilder::set_enable_termination_protection):<br>required: **true**<br><p>Whether to enable termination protection on the specified stack.</p><br>
    ///   - [`stack_name(impl Into<String>)`](crate::operation::update_termination_protection::builders::UpdateTerminationProtectionFluentBuilder::stack_name) / [`set_stack_name(Option<String>)`](crate::operation::update_termination_protection::builders::UpdateTerminationProtectionFluentBuilder::set_stack_name):<br>required: **true**<br><p>The name or unique ID of the stack for which you want to set termination protection.</p><br>
    /// - On success, responds with [`UpdateTerminationProtectionOutput`](crate::operation::update_termination_protection::UpdateTerminationProtectionOutput) with field(s):
    ///   - [`stack_id(Option<String>)`](crate::operation::update_termination_protection::UpdateTerminationProtectionOutput::stack_id): <p>The unique ID of the stack.</p>
    /// - On failure, responds with [`SdkError<UpdateTerminationProtectionError>`](crate::operation::update_termination_protection::UpdateTerminationProtectionError)
    pub fn update_termination_protection(
        &self,
    ) -> crate::operation::update_termination_protection::builders::UpdateTerminationProtectionFluentBuilder {
        crate::operation::update_termination_protection::builders::UpdateTerminationProtectionFluentBuilder::new(self.handle.clone())
    }
}
