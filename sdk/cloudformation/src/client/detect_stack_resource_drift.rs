// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DetectStackResourceDrift`](crate::operation::detect_stack_resource_drift::builders::DetectStackResourceDriftFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`stack_name(impl Into<String>)`](crate::operation::detect_stack_resource_drift::builders::DetectStackResourceDriftFluentBuilder::stack_name) / [`set_stack_name(Option<String>)`](crate::operation::detect_stack_resource_drift::builders::DetectStackResourceDriftFluentBuilder::set_stack_name): <p>The name of the stack to which the resource belongs.</p>
    ///   - [`logical_resource_id(impl Into<String>)`](crate::operation::detect_stack_resource_drift::builders::DetectStackResourceDriftFluentBuilder::logical_resource_id) / [`set_logical_resource_id(Option<String>)`](crate::operation::detect_stack_resource_drift::builders::DetectStackResourceDriftFluentBuilder::set_logical_resource_id): <p>The logical name of the resource for which to return drift information.</p>
    /// - On success, responds with [`DetectStackResourceDriftOutput`](crate::operation::detect_stack_resource_drift::DetectStackResourceDriftOutput) with field(s):
    ///   - [`stack_resource_drift(Option<StackResourceDrift>)`](crate::operation::detect_stack_resource_drift::DetectStackResourceDriftOutput::stack_resource_drift): <p>Information about whether the resource's actual configuration has drifted from its expected template configuration, including actual and expected property values and any differences detected.</p>
    /// - On failure, responds with [`SdkError<DetectStackResourceDriftError>`](crate::operation::detect_stack_resource_drift::DetectStackResourceDriftError)
    pub fn detect_stack_resource_drift(&self) -> crate::operation::detect_stack_resource_drift::builders::DetectStackResourceDriftFluentBuilder{
        crate::operation::detect_stack_resource_drift::builders::DetectStackResourceDriftFluentBuilder::new(self.handle.clone())
    }
}
