// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DetectStackDrift`](crate::client::fluent_builders::DetectStackDrift) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`stack_name(impl Into<String>)`](crate::client::fluent_builders::DetectStackDrift::stack_name) / [`set_stack_name(Option<String>)`](crate::client::fluent_builders::DetectStackDrift::set_stack_name): <p>The name of the stack for which you want to detect drift.</p>
    ///   - [`logical_resource_ids(Vec<String>)`](crate::client::fluent_builders::DetectStackDrift::logical_resource_ids) / [`set_logical_resource_ids(Option<Vec<String>>)`](crate::client::fluent_builders::DetectStackDrift::set_logical_resource_ids): <p>The logical names of any resources you want to use as filters.</p>
    /// - On success, responds with [`DetectStackDriftOutput`](crate::output::DetectStackDriftOutput) with field(s):
    ///   - [`stack_drift_detection_id(Option<String>)`](crate::output::DetectStackDriftOutput::stack_drift_detection_id): <p>The ID of the drift detection results of this operation.</p>  <p>CloudFormation generates new results, with a new drift detection ID, each time this operation is run. However, the number of drift results CloudFormation retains for any given stack, and for how long, may vary.</p>
    /// - On failure, responds with [`SdkError<DetectStackDriftError>`](crate::error::DetectStackDriftError)
    pub fn detect_stack_drift(&self) -> crate::client::fluent_builders::DetectStackDrift {
        crate::client::fluent_builders::DetectStackDrift::new(self.handle.clone())
    }
}
