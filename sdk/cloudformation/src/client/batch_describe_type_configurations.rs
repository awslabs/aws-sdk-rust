// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`BatchDescribeTypeConfigurations`](crate::client::fluent_builders::BatchDescribeTypeConfigurations) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`type_configuration_identifiers(Vec<TypeConfigurationIdentifier>)`](crate::client::fluent_builders::BatchDescribeTypeConfigurations::type_configuration_identifiers) / [`set_type_configuration_identifiers(Option<Vec<TypeConfigurationIdentifier>>)`](crate::client::fluent_builders::BatchDescribeTypeConfigurations::set_type_configuration_identifiers): <p>The list of identifiers for the desired extension configurations.</p>
    /// - On success, responds with [`BatchDescribeTypeConfigurationsOutput`](crate::output::BatchDescribeTypeConfigurationsOutput) with field(s):
    ///   - [`errors(Option<Vec<BatchDescribeTypeConfigurationsError>>)`](crate::output::BatchDescribeTypeConfigurationsOutput::errors): <p>A list of information concerning any errors generated during the setting of the specified configurations.</p>
    ///   - [`unprocessed_type_configurations(Option<Vec<TypeConfigurationIdentifier>>)`](crate::output::BatchDescribeTypeConfigurationsOutput::unprocessed_type_configurations): <p>A list of any of the specified extension configurations that CloudFormation could not process for any reason.</p>
    ///   - [`type_configurations(Option<Vec<TypeConfigurationDetails>>)`](crate::output::BatchDescribeTypeConfigurationsOutput::type_configurations): <p>A list of any of the specified extension configurations from the CloudFormation registry.</p>
    /// - On failure, responds with [`SdkError<BatchDescribeTypeConfigurationsError>`](crate::error::BatchDescribeTypeConfigurationsError)
    pub fn batch_describe_type_configurations(
        &self,
    ) -> crate::client::fluent_builders::BatchDescribeTypeConfigurations {
        crate::client::fluent_builders::BatchDescribeTypeConfigurations::new(self.handle.clone())
    }
}
