// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ListTypes`](crate::operation::list_types::builders::ListTypesFluentBuilder) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::operation::list_types::builders::ListTypesFluentBuilder::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`visibility(Visibility)`](crate::operation::list_types::builders::ListTypesFluentBuilder::visibility) / [`set_visibility(Option<Visibility>)`](crate::operation::list_types::builders::ListTypesFluentBuilder::set_visibility):<br>required: **false**<br><p>The scope at which the extensions are visible and usable in CloudFormation operations.</p>  <p>Valid values include:</p>  <ul>   <li> <p> <code>PRIVATE</code>: Extensions that are visible and usable within this account and Region. This includes:</p>    <ul>     <li> <p>Private extensions you have registered in this account and Region.</p> </li>     <li> <p>Public extensions that you have activated in this account and Region.</p> </li>    </ul> </li>   <li> <p> <code>PUBLIC</code>: Extensions that are publicly visible and available to be activated within any Amazon Web Services account. This includes extensions from Amazon Web Services, in addition to third-party publishers.</p> </li>  </ul>  <p>The default is <code>PRIVATE</code>.</p><br>
    ///   - [`provisioning_type(ProvisioningType)`](crate::operation::list_types::builders::ListTypesFluentBuilder::provisioning_type) / [`set_provisioning_type(Option<ProvisioningType>)`](crate::operation::list_types::builders::ListTypesFluentBuilder::set_provisioning_type):<br>required: **false**<br><p>For resource types, the provisioning behavior of the resource type. CloudFormation determines the provisioning type during registration, based on the types of handlers in the schema handler package submitted.</p>  <p>Valid values include:</p>  <ul>   <li> <p> <code>FULLY_MUTABLE</code>: The resource type includes an update handler to process updates to the type during stack update operations.</p> </li>   <li> <p> <code>IMMUTABLE</code>: The resource type doesn't include an update handler, so the type can't be updated and must instead be replaced during stack update operations.</p> </li>   <li> <p> <code>NON_PROVISIONABLE</code>: The resource type doesn't include create, read, and delete handlers, and therefore can't actually be provisioned.</p> </li>  </ul>  <p>The default is <code>FULLY_MUTABLE</code>.</p><br>
    ///   - [`deprecated_status(DeprecatedStatus)`](crate::operation::list_types::builders::ListTypesFluentBuilder::deprecated_status) / [`set_deprecated_status(Option<DeprecatedStatus>)`](crate::operation::list_types::builders::ListTypesFluentBuilder::set_deprecated_status):<br>required: **false**<br><p>The deprecation status of the extension that you want to get summary information about.</p>  <p>Valid values include:</p>  <ul>   <li> <p> <code>LIVE</code>: The extension is registered for use in CloudFormation operations.</p> </li>   <li> <p> <code>DEPRECATED</code>: The extension has been deregistered and can no longer be used in CloudFormation operations.</p> </li>  </ul><br>
    ///   - [`r#type(RegistryType)`](crate::operation::list_types::builders::ListTypesFluentBuilder::type) / [`set_type(Option<RegistryType>)`](crate::operation::list_types::builders::ListTypesFluentBuilder::set_type):<br>required: **false**<br><p>The type of extension.</p><br>
    ///   - [`filters(TypeFilters)`](crate::operation::list_types::builders::ListTypesFluentBuilder::filters) / [`set_filters(Option<TypeFilters>)`](crate::operation::list_types::builders::ListTypesFluentBuilder::set_filters):<br>required: **false**<br><p>Filter criteria to use in determining which extensions to return.</p>  <p>Filters must be compatible with <code>Visibility</code> to return valid results. For example, specifying <code>AWS_TYPES</code> for <code>Category</code> and <code>PRIVATE</code> for <code>Visibility</code> returns an empty list of types, but specifying <code>PUBLIC</code> for <code>Visibility</code> returns the desired list.</p><br>
    ///   - [`max_results(i32)`](crate::operation::list_types::builders::ListTypesFluentBuilder::max_results) / [`set_max_results(Option<i32>)`](crate::operation::list_types::builders::ListTypesFluentBuilder::set_max_results):<br>required: **false**<br><p>The maximum number of results to be returned with a single call. If the number of available results exceeds this maximum, the response includes a <code>NextToken</code> value that you can assign to the <code>NextToken</code> request parameter to get the next set of results.</p><br>
    ///   - [`next_token(impl Into<String>)`](crate::operation::list_types::builders::ListTypesFluentBuilder::next_token) / [`set_next_token(Option<String>)`](crate::operation::list_types::builders::ListTypesFluentBuilder::set_next_token):<br>required: **false**<br><p>If the previous paginated request didn't return all the remaining results, the response object's <code>NextToken</code> parameter value is set to a token. To retrieve the next set of results, call this action again and assign that token to the request object's <code>NextToken</code> parameter. If there are no remaining results, the previous response object's <code>NextToken</code> parameter is set to <code>null</code>.</p><br>
    /// - On success, responds with [`ListTypesOutput`](crate::operation::list_types::ListTypesOutput) with field(s):
    ///   - [`type_summaries(Option<Vec::<TypeSummary>>)`](crate::operation::list_types::ListTypesOutput::type_summaries): <p>A list of <code>TypeSummary</code> structures that contain information about the specified extensions.</p>
    ///   - [`next_token(Option<String>)`](crate::operation::list_types::ListTypesOutput::next_token): <p>If the request doesn't return all the remaining results, <code>NextToken</code> is set to a token. To retrieve the next set of results, call this action again and assign that token to the request object's <code>NextToken</code> parameter. If the request returns all results, <code>NextToken</code> is set to <code>null</code>.</p>
    /// - On failure, responds with [`SdkError<ListTypesError>`](crate::operation::list_types::ListTypesError)
    pub fn list_types(&self) -> crate::operation::list_types::builders::ListTypesFluentBuilder {
        crate::operation::list_types::builders::ListTypesFluentBuilder::new(self.handle.clone())
    }
}
