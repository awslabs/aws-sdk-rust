// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_structure_crate_output_describe_account_limits_output_next_token(
    input: &crate::output::DescribeAccountLimitsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_stack_events_output_next_token(
    input: &crate::output::DescribeStackEventsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_stack_resource_drifts_output_next_token(
    input: &crate::output::DescribeStackResourceDriftsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_stacks_output_next_token(
    input: &crate::output::DescribeStacksOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_change_sets_output_next_token(
    input: &crate::output::ListChangeSetsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_exports_output_next_token(
    input: &crate::output::ListExportsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_imports_output_next_token(
    input: &crate::output::ListImportsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_stack_instances_output_next_token(
    input: &crate::output::ListStackInstancesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_stack_resources_output_next_token(
    input: &crate::output::ListStackResourcesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_stacks_output_next_token(
    input: &crate::output::ListStacksOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_stack_set_operation_results_output_next_token(
    input: &crate::output::ListStackSetOperationResultsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_stack_set_operations_output_next_token(
    input: &crate::output::ListStackSetOperationsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_stack_sets_output_next_token(
    input: &crate::output::ListStackSetsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_type_registrations_output_next_token(
    input: &crate::output::ListTypeRegistrationsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_types_output_next_token(
    input: &crate::output::ListTypesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_type_versions_output_next_token(
    input: &crate::output::ListTypeVersionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_account_limits_output_account_limits(
    input: crate::output::DescribeAccountLimitsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::AccountLimit>> {
    let input = match input.account_limits {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_stack_events_output_stack_events(
    input: crate::output::DescribeStackEventsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::StackEvent>> {
    let input = match input.stack_events {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_stacks_output_stacks(
    input: crate::output::DescribeStacksOutput,
) -> std::option::Option<std::vec::Vec<crate::model::Stack>> {
    let input = match input.stacks {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_change_sets_output_summaries(
    input: crate::output::ListChangeSetsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::ChangeSetSummary>> {
    let input = match input.summaries {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_exports_output_exports(
    input: crate::output::ListExportsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::Export>> {
    let input = match input.exports {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_imports_output_imports(
    input: crate::output::ListImportsOutput,
) -> std::option::Option<std::vec::Vec<std::string::String>> {
    let input = match input.imports {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_stack_instances_output_summaries(
    input: crate::output::ListStackInstancesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::StackInstanceSummary>> {
    let input = match input.summaries {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_stack_resources_output_stack_resource_summaries(
    input: crate::output::ListStackResourcesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::StackResourceSummary>> {
    let input = match input.stack_resource_summaries {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_stacks_output_stack_summaries(
    input: crate::output::ListStacksOutput,
) -> std::option::Option<std::vec::Vec<crate::model::StackSummary>> {
    let input = match input.stack_summaries {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_stack_set_operation_results_output_summaries(
    input: crate::output::ListStackSetOperationResultsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::StackSetOperationResultSummary>> {
    let input = match input.summaries {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_stack_set_operations_output_summaries(
    input: crate::output::ListStackSetOperationsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::StackSetOperationSummary>> {
    let input = match input.summaries {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_stack_sets_output_summaries(
    input: crate::output::ListStackSetsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::StackSetSummary>> {
    let input = match input.summaries {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_types_output_type_summaries(
    input: crate::output::ListTypesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::TypeSummary>> {
    let input = match input.type_summaries {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
