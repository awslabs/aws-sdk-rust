// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_describe_account_limits_output_next_token(
    input: &crate::operation::describe_account_limits::DescribeAccountLimitsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_stack_events_output_next_token(
    input: &crate::operation::describe_stack_events::DescribeStackEventsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_stack_resource_drifts_output_next_token(
    input: &crate::operation::describe_stack_resource_drifts::DescribeStackResourceDriftsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_stacks_output_next_token(
    input: &crate::operation::describe_stacks::DescribeStacksOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_change_sets_output_next_token(
    input: &crate::operation::list_change_sets::ListChangeSetsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_exports_output_next_token(
    input: &crate::operation::list_exports::ListExportsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_imports_output_next_token(
    input: &crate::operation::list_imports::ListImportsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_stack_instances_output_next_token(
    input: &crate::operation::list_stack_instances::ListStackInstancesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_stack_resources_output_next_token(
    input: &crate::operation::list_stack_resources::ListStackResourcesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_stack_set_operation_results_output_next_token(
    input: &crate::operation::list_stack_set_operation_results::ListStackSetOperationResultsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_stack_set_operations_output_next_token(
    input: &crate::operation::list_stack_set_operations::ListStackSetOperationsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_stack_sets_output_next_token(
    input: &crate::operation::list_stack_sets::ListStackSetsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_stacks_output_next_token(
    input: &crate::operation::list_stacks::ListStacksOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_type_registrations_output_next_token(
    input: &crate::operation::list_type_registrations::ListTypeRegistrationsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_type_versions_output_next_token(
    input: &crate::operation::list_type_versions::ListTypeVersionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_types_output_next_token(
    input: &crate::operation::list_types::ListTypesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_account_limits_output_account_limits(
    input: crate::operation::describe_account_limits::DescribeAccountLimitsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::AccountLimit>> {
    let input = match input.account_limits {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_stack_events_output_stack_events(
    input: crate::operation::describe_stack_events::DescribeStackEventsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::StackEvent>> {
    let input = match input.stack_events {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_stacks_output_stacks(
    input: crate::operation::describe_stacks::DescribeStacksOutput,
) -> std::option::Option<std::vec::Vec<crate::types::Stack>> {
    let input = match input.stacks {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_change_sets_output_summaries(
    input: crate::operation::list_change_sets::ListChangeSetsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ChangeSetSummary>> {
    let input = match input.summaries {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_exports_output_exports(
    input: crate::operation::list_exports::ListExportsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::Export>> {
    let input = match input.exports {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_imports_output_imports(
    input: crate::operation::list_imports::ListImportsOutput,
) -> std::option::Option<std::vec::Vec<std::string::String>> {
    let input = match input.imports {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_stack_instances_output_summaries(
    input: crate::operation::list_stack_instances::ListStackInstancesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::StackInstanceSummary>> {
    let input = match input.summaries {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_stack_resources_output_stack_resource_summaries(
    input: crate::operation::list_stack_resources::ListStackResourcesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::StackResourceSummary>> {
    let input = match input.stack_resource_summaries {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_stack_set_operation_results_output_summaries(
    input: crate::operation::list_stack_set_operation_results::ListStackSetOperationResultsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::StackSetOperationResultSummary>> {
    let input = match input.summaries {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_stack_set_operations_output_summaries(
    input: crate::operation::list_stack_set_operations::ListStackSetOperationsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::StackSetOperationSummary>> {
    let input = match input.summaries {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_stack_sets_output_summaries(
    input: crate::operation::list_stack_sets::ListStackSetsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::StackSetSummary>> {
    let input = match input.summaries {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_stacks_output_stack_summaries(
    input: crate::operation::list_stacks::ListStacksOutput,
) -> std::option::Option<std::vec::Vec<crate::types::StackSummary>> {
    let input = match input.stack_summaries {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_types_output_type_summaries(
    input: crate::operation::list_types::ListTypesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::TypeSummary>> {
    let input = match input.type_summaries {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
