// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`GetPercentiles`](crate::client::fluent_builders::GetPercentiles) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`index_name(impl Into<String>)`](crate::client::fluent_builders::GetPercentiles::index_name) / [`set_index_name(Option<String>)`](crate::client::fluent_builders::GetPercentiles::set_index_name): <p>The name of the index to search.</p>
    ///   - [`query_string(impl Into<String>)`](crate::client::fluent_builders::GetPercentiles::query_string) / [`set_query_string(Option<String>)`](crate::client::fluent_builders::GetPercentiles::set_query_string): <p>The search query string.</p>
    ///   - [`aggregation_field(impl Into<String>)`](crate::client::fluent_builders::GetPercentiles::aggregation_field) / [`set_aggregation_field(Option<String>)`](crate::client::fluent_builders::GetPercentiles::set_aggregation_field): <p>The field to aggregate.</p>
    ///   - [`query_version(impl Into<String>)`](crate::client::fluent_builders::GetPercentiles::query_version) / [`set_query_version(Option<String>)`](crate::client::fluent_builders::GetPercentiles::set_query_version): <p>The query version.</p>
    ///   - [`percents(Vec<f64>)`](crate::client::fluent_builders::GetPercentiles::percents) / [`set_percents(Option<Vec<f64>>)`](crate::client::fluent_builders::GetPercentiles::set_percents): <p>The percentile groups returned.</p>
    /// - On success, responds with [`GetPercentilesOutput`](crate::output::GetPercentilesOutput) with field(s):
    ///   - [`percentiles(Option<Vec<PercentPair>>)`](crate::output::GetPercentilesOutput::percentiles): <p>The percentile values of the aggregated fields.</p>
    /// - On failure, responds with [`SdkError<GetPercentilesError>`](crate::error::GetPercentilesError)
    pub fn get_percentiles(&self) -> crate::client::fluent_builders::GetPercentiles {
        crate::client::fluent_builders::GetPercentiles::new(self.handle.clone())
    }
}
