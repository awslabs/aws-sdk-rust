// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DeletePackageVersion`](crate::operation::delete_package_version::builders::DeletePackageVersionFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`package_name(impl Into<String>)`](crate::operation::delete_package_version::builders::DeletePackageVersionFluentBuilder::package_name) / [`set_package_name(Option<String>)`](crate::operation::delete_package_version::builders::DeletePackageVersionFluentBuilder::set_package_name):<br>required: **true**<br><p>The name of the associated software package.</p><br>
    ///   - [`version_name(impl Into<String>)`](crate::operation::delete_package_version::builders::DeletePackageVersionFluentBuilder::version_name) / [`set_version_name(Option<String>)`](crate::operation::delete_package_version::builders::DeletePackageVersionFluentBuilder::set_version_name):<br>required: **true**<br><p>The name of the target package version.</p><br>
    ///   - [`client_token(impl Into<String>)`](crate::operation::delete_package_version::builders::DeletePackageVersionFluentBuilder::client_token) / [`set_client_token(Option<String>)`](crate::operation::delete_package_version::builders::DeletePackageVersionFluentBuilder::set_client_token):<br>required: **false**<br><p>A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.</p><br>
    /// - On success, responds with [`DeletePackageVersionOutput`](crate::operation::delete_package_version::DeletePackageVersionOutput)
    /// - On failure, responds with [`SdkError<DeletePackageVersionError>`](crate::operation::delete_package_version::DeletePackageVersionError)
    pub fn delete_package_version(&self) -> crate::operation::delete_package_version::builders::DeletePackageVersionFluentBuilder {
        crate::operation::delete_package_version::builders::DeletePackageVersionFluentBuilder::new(self.handle.clone())
    }
}
