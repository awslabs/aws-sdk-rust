// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateMitigationAction`](crate::client::fluent_builders::CreateMitigationAction) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`action_name(impl Into<String>)`](crate::client::fluent_builders::CreateMitigationAction::action_name) / [`set_action_name(Option<String>)`](crate::client::fluent_builders::CreateMitigationAction::set_action_name): <p>A friendly name for the action. Choose a friendly name that accurately describes the action (for example, <code>EnableLoggingAction</code>).</p>
    ///   - [`role_arn(impl Into<String>)`](crate::client::fluent_builders::CreateMitigationAction::role_arn) / [`set_role_arn(Option<String>)`](crate::client::fluent_builders::CreateMitigationAction::set_role_arn): <p>The ARN of the IAM role that is used to apply the mitigation action.</p>
    ///   - [`action_params(MitigationActionParams)`](crate::client::fluent_builders::CreateMitigationAction::action_params) / [`set_action_params(Option<MitigationActionParams>)`](crate::client::fluent_builders::CreateMitigationAction::set_action_params): <p>Defines the type of action and the parameters for that action.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateMitigationAction::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateMitigationAction::set_tags): <p>Metadata that can be used to manage the mitigation action.</p>
    /// - On success, responds with [`CreateMitigationActionOutput`](crate::output::CreateMitigationActionOutput) with field(s):
    ///   - [`action_arn(Option<String>)`](crate::output::CreateMitigationActionOutput::action_arn): <p>The ARN for the new mitigation action.</p>
    ///   - [`action_id(Option<String>)`](crate::output::CreateMitigationActionOutput::action_id): <p>A unique identifier for the new mitigation action.</p>
    /// - On failure, responds with [`SdkError<CreateMitigationActionError>`](crate::error::CreateMitigationActionError)
    pub fn create_mitigation_action(
        &self,
    ) -> crate::client::fluent_builders::CreateMitigationAction {
        crate::client::fluent_builders::CreateMitigationAction::new(self.handle.clone())
    }
}
