// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`StartAuditMitigationActionsTask`](crate::operation::start_audit_mitigation_actions_task::builders::StartAuditMitigationActionsTaskFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`task_id(impl Into<String>)`](crate::operation::start_audit_mitigation_actions_task::builders::StartAuditMitigationActionsTaskFluentBuilder::task_id) / [`set_task_id(Option<String>)`](crate::operation::start_audit_mitigation_actions_task::builders::StartAuditMitigationActionsTaskFluentBuilder::set_task_id): <p>A unique identifier for the task. You can use this identifier to check the status of the task or to cancel it.</p>
    ///   - [`target(AuditMitigationActionsTaskTarget)`](crate::operation::start_audit_mitigation_actions_task::builders::StartAuditMitigationActionsTaskFluentBuilder::target) / [`set_target(Option<AuditMitigationActionsTaskTarget>)`](crate::operation::start_audit_mitigation_actions_task::builders::StartAuditMitigationActionsTaskFluentBuilder::set_target): <p>Specifies the audit findings to which the mitigation actions are applied. You can apply them to a type of audit check, to all findings from an audit, or to a specific set of findings.</p>
    ///   - [`audit_check_to_actions_mapping(HashMap<String, Vec<String>>)`](crate::operation::start_audit_mitigation_actions_task::builders::StartAuditMitigationActionsTaskFluentBuilder::audit_check_to_actions_mapping) / [`set_audit_check_to_actions_mapping(Option<HashMap<String, Vec<String>>>)`](crate::operation::start_audit_mitigation_actions_task::builders::StartAuditMitigationActionsTaskFluentBuilder::set_audit_check_to_actions_mapping): <p>For an audit check, specifies which mitigation actions to apply. Those actions must be defined in your Amazon Web Services accounts.</p>
    ///   - [`client_request_token(impl Into<String>)`](crate::operation::start_audit_mitigation_actions_task::builders::StartAuditMitigationActionsTaskFluentBuilder::client_request_token) / [`set_client_request_token(Option<String>)`](crate::operation::start_audit_mitigation_actions_task::builders::StartAuditMitigationActionsTaskFluentBuilder::set_client_request_token): <p>Each audit mitigation task must have a unique client request token. If you try to start a new task with the same token as a task that already exists, an exception occurs. If you omit this value, a unique client request token is generated automatically.</p>
    /// - On success, responds with [`StartAuditMitigationActionsTaskOutput`](crate::operation::start_audit_mitigation_actions_task::StartAuditMitigationActionsTaskOutput) with field(s):
    ///   - [`task_id(Option<String>)`](crate::operation::start_audit_mitigation_actions_task::StartAuditMitigationActionsTaskOutput::task_id): <p>The unique identifier for the audit mitigation task. This matches the <code>taskId</code> that you specified in the request.</p>
    /// - On failure, responds with [`SdkError<StartAuditMitigationActionsTaskError>`](crate::operation::start_audit_mitigation_actions_task::StartAuditMitigationActionsTaskError)
    pub fn start_audit_mitigation_actions_task(&self) -> crate::operation::start_audit_mitigation_actions_task::builders::StartAuditMitigationActionsTaskFluentBuilder{
        crate::operation::start_audit_mitigation_actions_task::builders::StartAuditMitigationActionsTaskFluentBuilder::new(self.handle.clone())
    }
}
