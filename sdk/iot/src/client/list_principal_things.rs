// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ListPrincipalThings`](crate::client::fluent_builders::ListPrincipalThings) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListPrincipalThings::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListPrincipalThings::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListPrincipalThings::set_next_token): <p>To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListPrincipalThings::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListPrincipalThings::set_max_results): <p>The maximum number of results to return in this operation.</p>
    ///   - [`principal(impl Into<String>)`](crate::client::fluent_builders::ListPrincipalThings::principal) / [`set_principal(Option<String>)`](crate::client::fluent_builders::ListPrincipalThings::set_principal): <p>The principal.</p>
    /// - On success, responds with [`ListPrincipalThingsOutput`](crate::output::ListPrincipalThingsOutput) with field(s):
    ///   - [`things(Option<Vec<String>>)`](crate::output::ListPrincipalThingsOutput::things): <p>The things.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListPrincipalThingsOutput::next_token): <p>The token to use to get the next set of results, or <b>null</b> if there are no additional results.</p>
    /// - On failure, responds with [`SdkError<ListPrincipalThingsError>`](crate::error::ListPrincipalThingsError)
    pub fn list_principal_things(&self) -> crate::client::fluent_builders::ListPrincipalThings {
        crate::client::fluent_builders::ListPrincipalThings::new(self.handle.clone())
    }
}
