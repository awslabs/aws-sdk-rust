// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`TestAuthorization`](crate::operation::test_authorization::builders::TestAuthorizationFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`principal(impl Into<String>)`](crate::operation::test_authorization::builders::TestAuthorizationFluentBuilder::principal) / [`set_principal(Option<String>)`](crate::operation::test_authorization::builders::TestAuthorizationFluentBuilder::set_principal):<br>required: **false**<br><p>The principal. Valid principals are CertificateArn (arn:aws:iot:<i>region</i>:<i>accountId</i>:cert/<i>certificateId</i>), thingGroupArn (arn:aws:iot:<i>region</i>:<i>accountId</i>:thinggroup/<i>groupName</i>) and CognitoId (<i>region</i>:<i>id</i>).</p><br>
    ///   - [`cognito_identity_pool_id(impl Into<String>)`](crate::operation::test_authorization::builders::TestAuthorizationFluentBuilder::cognito_identity_pool_id) / [`set_cognito_identity_pool_id(Option<String>)`](crate::operation::test_authorization::builders::TestAuthorizationFluentBuilder::set_cognito_identity_pool_id):<br>required: **false**<br><p>The Cognito identity pool ID.</p><br>
    ///   - [`auth_infos(AuthInfo)`](crate::operation::test_authorization::builders::TestAuthorizationFluentBuilder::auth_infos) / [`set_auth_infos(Option<Vec::<AuthInfo>>)`](crate::operation::test_authorization::builders::TestAuthorizationFluentBuilder::set_auth_infos):<br>required: **true**<br><p>A list of authorization info objects. Simulating authorization will create a response for each <code>authInfo</code> object in the list.</p><br>
    ///   - [`client_id(impl Into<String>)`](crate::operation::test_authorization::builders::TestAuthorizationFluentBuilder::client_id) / [`set_client_id(Option<String>)`](crate::operation::test_authorization::builders::TestAuthorizationFluentBuilder::set_client_id):<br>required: **false**<br><p>The MQTT client ID.</p><br>
    ///   - [`policy_names_to_add(impl Into<String>)`](crate::operation::test_authorization::builders::TestAuthorizationFluentBuilder::policy_names_to_add) / [`set_policy_names_to_add(Option<Vec::<String>>)`](crate::operation::test_authorization::builders::TestAuthorizationFluentBuilder::set_policy_names_to_add):<br>required: **false**<br><p>When testing custom authorization, the policies specified here are treated as if they are attached to the principal being authorized.</p><br>
    ///   - [`policy_names_to_skip(impl Into<String>)`](crate::operation::test_authorization::builders::TestAuthorizationFluentBuilder::policy_names_to_skip) / [`set_policy_names_to_skip(Option<Vec::<String>>)`](crate::operation::test_authorization::builders::TestAuthorizationFluentBuilder::set_policy_names_to_skip):<br>required: **false**<br><p>When testing custom authorization, the policies specified here are treated as if they are not attached to the principal being authorized.</p><br>
    /// - On success, responds with [`TestAuthorizationOutput`](crate::operation::test_authorization::TestAuthorizationOutput) with field(s):
    ///   - [`auth_results(Option<Vec::<AuthResult>>)`](crate::operation::test_authorization::TestAuthorizationOutput::auth_results): <p>The authentication results.</p>
    /// - On failure, responds with [`SdkError<TestAuthorizationError>`](crate::operation::test_authorization::TestAuthorizationError)
    pub fn test_authorization(&self) -> crate::operation::test_authorization::builders::TestAuthorizationFluentBuilder {
        crate::operation::test_authorization::builders::TestAuthorizationFluentBuilder::new(self.handle.clone())
    }
}
