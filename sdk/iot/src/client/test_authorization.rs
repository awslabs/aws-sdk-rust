// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`TestAuthorization`](crate::client::fluent_builders::TestAuthorization) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`principal(impl Into<String>)`](crate::client::fluent_builders::TestAuthorization::principal) / [`set_principal(Option<String>)`](crate::client::fluent_builders::TestAuthorization::set_principal): <p>The principal. Valid principals are CertificateArn (arn:aws:iot:<i>region</i>:<i>accountId</i>:cert/<i>certificateId</i>), thingGroupArn (arn:aws:iot:<i>region</i>:<i>accountId</i>:thinggroup/<i>groupName</i>) and CognitoId (<i>region</i>:<i>id</i>).</p>
    ///   - [`cognito_identity_pool_id(impl Into<String>)`](crate::client::fluent_builders::TestAuthorization::cognito_identity_pool_id) / [`set_cognito_identity_pool_id(Option<String>)`](crate::client::fluent_builders::TestAuthorization::set_cognito_identity_pool_id): <p>The Cognito identity pool ID.</p>
    ///   - [`auth_infos(Vec<AuthInfo>)`](crate::client::fluent_builders::TestAuthorization::auth_infos) / [`set_auth_infos(Option<Vec<AuthInfo>>)`](crate::client::fluent_builders::TestAuthorization::set_auth_infos): <p>A list of authorization info objects. Simulating authorization will create a response for each <code>authInfo</code> object in the list.</p>
    ///   - [`client_id(impl Into<String>)`](crate::client::fluent_builders::TestAuthorization::client_id) / [`set_client_id(Option<String>)`](crate::client::fluent_builders::TestAuthorization::set_client_id): <p>The MQTT client ID.</p>
    ///   - [`policy_names_to_add(Vec<String>)`](crate::client::fluent_builders::TestAuthorization::policy_names_to_add) / [`set_policy_names_to_add(Option<Vec<String>>)`](crate::client::fluent_builders::TestAuthorization::set_policy_names_to_add): <p>When testing custom authorization, the policies specified here are treated as if they are attached to the principal being authorized.</p>
    ///   - [`policy_names_to_skip(Vec<String>)`](crate::client::fluent_builders::TestAuthorization::policy_names_to_skip) / [`set_policy_names_to_skip(Option<Vec<String>>)`](crate::client::fluent_builders::TestAuthorization::set_policy_names_to_skip): <p>When testing custom authorization, the policies specified here are treated as if they are not attached to the principal being authorized.</p>
    /// - On success, responds with [`TestAuthorizationOutput`](crate::output::TestAuthorizationOutput) with field(s):
    ///   - [`auth_results(Option<Vec<AuthResult>>)`](crate::output::TestAuthorizationOutput::auth_results): <p>The authentication results.</p>
    /// - On failure, responds with [`SdkError<TestAuthorizationError>`](crate::error::TestAuthorizationError)
    pub fn test_authorization(&self) -> crate::client::fluent_builders::TestAuthorization {
        crate::client::fluent_builders::TestAuthorization::new(self.handle.clone())
    }
}
