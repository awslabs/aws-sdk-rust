// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`TestInvokeAuthorizer`](crate::client::fluent_builders::TestInvokeAuthorizer) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`authorizer_name(impl Into<String>)`](crate::client::fluent_builders::TestInvokeAuthorizer::authorizer_name) / [`set_authorizer_name(Option<String>)`](crate::client::fluent_builders::TestInvokeAuthorizer::set_authorizer_name): <p>The custom authorizer name.</p>
    ///   - [`token(impl Into<String>)`](crate::client::fluent_builders::TestInvokeAuthorizer::token) / [`set_token(Option<String>)`](crate::client::fluent_builders::TestInvokeAuthorizer::set_token): <p>The token returned by your custom authentication service.</p>
    ///   - [`token_signature(impl Into<String>)`](crate::client::fluent_builders::TestInvokeAuthorizer::token_signature) / [`set_token_signature(Option<String>)`](crate::client::fluent_builders::TestInvokeAuthorizer::set_token_signature): <p>The signature made with the token and your custom authentication service's private key. This value must be Base-64-encoded.</p>
    ///   - [`http_context(HttpContext)`](crate::client::fluent_builders::TestInvokeAuthorizer::http_context) / [`set_http_context(Option<HttpContext>)`](crate::client::fluent_builders::TestInvokeAuthorizer::set_http_context): <p>Specifies a test HTTP authorization request.</p>
    ///   - [`mqtt_context(MqttContext)`](crate::client::fluent_builders::TestInvokeAuthorizer::mqtt_context) / [`set_mqtt_context(Option<MqttContext>)`](crate::client::fluent_builders::TestInvokeAuthorizer::set_mqtt_context): <p>Specifies a test MQTT authorization request.</p>
    ///   - [`tls_context(TlsContext)`](crate::client::fluent_builders::TestInvokeAuthorizer::tls_context) / [`set_tls_context(Option<TlsContext>)`](crate::client::fluent_builders::TestInvokeAuthorizer::set_tls_context): <p>Specifies a test TLS authorization request.</p>
    /// - On success, responds with [`TestInvokeAuthorizerOutput`](crate::output::TestInvokeAuthorizerOutput) with field(s):
    ///   - [`is_authenticated(Option<bool>)`](crate::output::TestInvokeAuthorizerOutput::is_authenticated): <p>True if the token is authenticated, otherwise false.</p>
    ///   - [`principal_id(Option<String>)`](crate::output::TestInvokeAuthorizerOutput::principal_id): <p>The principal ID.</p>
    ///   - [`policy_documents(Option<Vec<String>>)`](crate::output::TestInvokeAuthorizerOutput::policy_documents): <p>IAM policy documents.</p>
    ///   - [`refresh_after_in_seconds(Option<i32>)`](crate::output::TestInvokeAuthorizerOutput::refresh_after_in_seconds): <p>The number of seconds after which the temporary credentials are refreshed.</p>
    ///   - [`disconnect_after_in_seconds(Option<i32>)`](crate::output::TestInvokeAuthorizerOutput::disconnect_after_in_seconds): <p>The number of seconds after which the connection is terminated.</p>
    /// - On failure, responds with [`SdkError<TestInvokeAuthorizerError>`](crate::error::TestInvokeAuthorizerError)
    pub fn test_invoke_authorizer(&self) -> crate::client::fluent_builders::TestInvokeAuthorizer {
        crate::client::fluent_builders::TestInvokeAuthorizer::new(self.handle.clone())
    }
}
