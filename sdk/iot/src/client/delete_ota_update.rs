// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DeleteOTAUpdate`](crate::operation::delete_ota_update::builders::DeleteOTAUpdateFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`ota_update_id(impl Into<String>)`](crate::operation::delete_ota_update::builders::DeleteOTAUpdateFluentBuilder::ota_update_id) / [`set_ota_update_id(Option<String>)`](crate::operation::delete_ota_update::builders::DeleteOTAUpdateFluentBuilder::set_ota_update_id): <p>The ID of the OTA update to delete.</p>
    ///   - [`delete_stream(bool)`](crate::operation::delete_ota_update::builders::DeleteOTAUpdateFluentBuilder::delete_stream) / [`set_delete_stream(bool)`](crate::operation::delete_ota_update::builders::DeleteOTAUpdateFluentBuilder::set_delete_stream): <p>When true, the stream created by the OTAUpdate process is deleted when the OTA update is deleted. Ignored if the stream specified in the OTAUpdate is supplied by the user.</p>
    ///   - [`force_delete_aws_job(bool)`](crate::operation::delete_ota_update::builders::DeleteOTAUpdateFluentBuilder::force_delete_aws_job) / [`set_force_delete_aws_job(bool)`](crate::operation::delete_ota_update::builders::DeleteOTAUpdateFluentBuilder::set_force_delete_aws_job): <p>When true, deletes the IoT job created by the OTAUpdate process even if it is "IN_PROGRESS". Otherwise, if the job is not in a terminal state ("COMPLETED" or "CANCELED") an exception will occur. The default is false.</p>
    /// - On success, responds with [`DeleteOtaUpdateOutput`](crate::operation::delete_ota_update::DeleteOtaUpdateOutput)
    /// - On failure, responds with [`SdkError<DeleteOTAUpdateError>`](crate::operation::delete_ota_update::DeleteOTAUpdateError)
    pub fn delete_ota_update(
        &self,
    ) -> crate::operation::delete_ota_update::builders::DeleteOTAUpdateFluentBuilder {
        crate::operation::delete_ota_update::builders::DeleteOTAUpdateFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
