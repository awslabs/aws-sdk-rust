// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ListManagedJobTemplates`](crate::client::fluent_builders::ListManagedJobTemplates) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`template_name(impl Into<String>)`](crate::client::fluent_builders::ListManagedJobTemplates::template_name) / [`set_template_name(Option<String>)`](crate::client::fluent_builders::ListManagedJobTemplates::set_template_name): <p>An optional parameter for template name. If specified, only the versions of the managed job templates that have the specified template name will be returned.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListManagedJobTemplates::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListManagedJobTemplates::set_max_results): <p>Maximum number of entries that can be returned.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListManagedJobTemplates::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListManagedJobTemplates::set_next_token): <p>The token to retrieve the next set of results.</p>
    /// - On success, responds with [`ListManagedJobTemplatesOutput`](crate::output::ListManagedJobTemplatesOutput) with field(s):
    ///   - [`managed_job_templates(Option<Vec<ManagedJobTemplateSummary>>)`](crate::output::ListManagedJobTemplatesOutput::managed_job_templates): <p>A list of managed job templates that are returned.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListManagedJobTemplatesOutput::next_token): <p>The token to retrieve the next set of results.</p>
    /// - On failure, responds with [`SdkError<ListManagedJobTemplatesError>`](crate::error::ListManagedJobTemplatesError)
    pub fn list_managed_job_templates(
        &self,
    ) -> crate::client::fluent_builders::ListManagedJobTemplates {
        crate::client::fluent_builders::ListManagedJobTemplates::new(self.handle.clone())
    }
}
