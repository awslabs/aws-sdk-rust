// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateAuthorizer`](crate::client::fluent_builders::CreateAuthorizer) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`authorizer_name(impl Into<String>)`](crate::client::fluent_builders::CreateAuthorizer::authorizer_name) / [`set_authorizer_name(Option<String>)`](crate::client::fluent_builders::CreateAuthorizer::set_authorizer_name): <p>The authorizer name.</p>
    ///   - [`authorizer_function_arn(impl Into<String>)`](crate::client::fluent_builders::CreateAuthorizer::authorizer_function_arn) / [`set_authorizer_function_arn(Option<String>)`](crate::client::fluent_builders::CreateAuthorizer::set_authorizer_function_arn): <p>The ARN of the authorizer's Lambda function.</p>
    ///   - [`token_key_name(impl Into<String>)`](crate::client::fluent_builders::CreateAuthorizer::token_key_name) / [`set_token_key_name(Option<String>)`](crate::client::fluent_builders::CreateAuthorizer::set_token_key_name): <p>The name of the token key used to extract the token from the HTTP headers.</p>
    ///   - [`token_signing_public_keys(HashMap<String, String>)`](crate::client::fluent_builders::CreateAuthorizer::token_signing_public_keys) / [`set_token_signing_public_keys(Option<HashMap<String, String>>)`](crate::client::fluent_builders::CreateAuthorizer::set_token_signing_public_keys): <p>The public keys used to verify the digital signature returned by your custom authentication service.</p>
    ///   - [`status(AuthorizerStatus)`](crate::client::fluent_builders::CreateAuthorizer::status) / [`set_status(Option<AuthorizerStatus>)`](crate::client::fluent_builders::CreateAuthorizer::set_status): <p>The status of the create authorizer request.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateAuthorizer::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateAuthorizer::set_tags): <p>Metadata which can be used to manage the custom authorizer.</p> <note>   <p>For URI Request parameters use format: ...key1=value1&amp;key2=value2...</p>   <p>For the CLI command-line parameter use format: &amp;&amp;tags "key1=value1&amp;key2=value2..."</p>   <p>For the cli-input-json file use format: "tags": "key1=value1&amp;key2=value2..."</p>  </note>
    ///   - [`signing_disabled(bool)`](crate::client::fluent_builders::CreateAuthorizer::signing_disabled) / [`set_signing_disabled(Option<bool>)`](crate::client::fluent_builders::CreateAuthorizer::set_signing_disabled): <p>Specifies whether IoT validates the token signature in an authorization request.</p>
    ///   - [`enable_caching_for_http(bool)`](crate::client::fluent_builders::CreateAuthorizer::enable_caching_for_http) / [`set_enable_caching_for_http(Option<bool>)`](crate::client::fluent_builders::CreateAuthorizer::set_enable_caching_for_http): <p>When <code>true</code>, the result from the authorizerâ€™s Lambda function is cached for clients that use persistent HTTP connections. The results are cached for the time specified by the Lambda function in <code>refreshAfterInSeconds</code>. This value does not affect authorization of clients that use MQTT connections.</p>  <p>The default value is <code>false</code>.</p>
    /// - On success, responds with [`CreateAuthorizerOutput`](crate::output::CreateAuthorizerOutput) with field(s):
    ///   - [`authorizer_name(Option<String>)`](crate::output::CreateAuthorizerOutput::authorizer_name): <p>The authorizer's name.</p>
    ///   - [`authorizer_arn(Option<String>)`](crate::output::CreateAuthorizerOutput::authorizer_arn): <p>The authorizer ARN.</p>
    /// - On failure, responds with [`SdkError<CreateAuthorizerError>`](crate::error::CreateAuthorizerError)
    pub fn create_authorizer(&self) -> crate::client::fluent_builders::CreateAuthorizer {
        crate::client::fluent_builders::CreateAuthorizer::new(self.handle.clone())
    }
}
