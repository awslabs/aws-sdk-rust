// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateKeysAndCertificate`](crate::client::fluent_builders::CreateKeysAndCertificate) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`set_as_active(bool)`](crate::client::fluent_builders::CreateKeysAndCertificate::set_as_active) / [`set_set_as_active(bool)`](crate::client::fluent_builders::CreateKeysAndCertificate::set_set_as_active): <p>Specifies whether the certificate is active.</p>
    /// - On success, responds with [`CreateKeysAndCertificateOutput`](crate::output::CreateKeysAndCertificateOutput) with field(s):
    ///   - [`certificate_arn(Option<String>)`](crate::output::CreateKeysAndCertificateOutput::certificate_arn): <p>The ARN of the certificate.</p>
    ///   - [`certificate_id(Option<String>)`](crate::output::CreateKeysAndCertificateOutput::certificate_id): <p>The ID of the certificate. IoT issues a default subject name for the certificate (for example, IoT Certificate).</p>
    ///   - [`certificate_pem(Option<String>)`](crate::output::CreateKeysAndCertificateOutput::certificate_pem): <p>The certificate data, in PEM format.</p>
    ///   - [`key_pair(Option<KeyPair>)`](crate::output::CreateKeysAndCertificateOutput::key_pair): <p>The generated key pair.</p>
    /// - On failure, responds with [`SdkError<CreateKeysAndCertificateError>`](crate::error::CreateKeysAndCertificateError)
    pub fn create_keys_and_certificate(
        &self,
    ) -> crate::client::fluent_builders::CreateKeysAndCertificate {
        crate::client::fluent_builders::CreateKeysAndCertificate::new(self.handle.clone())
    }
}
