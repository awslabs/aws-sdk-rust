// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_add_thing_to_billing_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AddThingToBillingGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.billing_group_arn {
        object.key("billingGroupArn").string(var_1);
    }
    if let Some(var_2) = &input.billing_group_name {
        object.key("billingGroupName").string(var_2);
    }
    if let Some(var_3) = &input.thing_arn {
        object.key("thingArn").string(var_3);
    }
    if let Some(var_4) = &input.thing_name {
        object.key("thingName").string(var_4);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_add_thing_to_thing_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AddThingToThingGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.override_dynamic_groups {
        object
            .key("overrideDynamicGroups")
            .boolean(input.override_dynamic_groups);
    }
    if let Some(var_5) = &input.thing_arn {
        object.key("thingArn").string(var_5);
    }
    if let Some(var_6) = &input.thing_group_arn {
        object.key("thingGroupArn").string(var_6);
    }
    if let Some(var_7) = &input.thing_group_name {
        object.key("thingGroupName").string(var_7);
    }
    if let Some(var_8) = &input.thing_name {
        object.key("thingName").string(var_8);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_targets_with_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateTargetsWithJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_9) = &input.comment {
        object.key("comment").string(var_9);
    }
    if let Some(var_10) = &input.targets {
        let mut array_11 = object.key("targets").start_array();
        for item_12 in var_10 {
            {
                array_11.value().string(item_12);
            }
        }
        array_11.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_attach_policy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AttachPolicyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_13) = &input.target {
        object.key("target").string(var_13);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_cancel_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CancelJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_14) = &input.comment {
        object.key("comment").string(var_14);
    }
    if let Some(var_15) = &input.reason_code {
        object.key("reasonCode").string(var_15);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_cancel_job_execution_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CancelJobExecutionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_16) = &input.expected_version {
        object.key("expectedVersion").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_16).into()),
        );
    }
    if let Some(var_17) = &input.status_details {
        let mut object_18 = object.key("statusDetails").start_object();
        for (key_19, value_20) in var_17 {
            {
                object_18.key(key_19).string(value_20);
            }
        }
        object_18.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_audit_suppression_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAuditSuppressionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_21) = &input.check_name {
        object.key("checkName").string(var_21);
    }
    if let Some(var_22) = &input.client_request_token {
        object.key("clientRequestToken").string(var_22);
    }
    if let Some(var_23) = &input.description {
        object.key("description").string(var_23);
    }
    if let Some(var_24) = &input.expiration_date {
        object
            .key("expirationDate")
            .date_time(var_24, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_25) = &input.resource_identifier {
        let mut object_26 = object.key("resourceIdentifier").start_object();
        crate::json_ser::serialize_structure_crate_model_resource_identifier(
            &mut object_26,
            var_25,
        )?;
        object_26.finish();
    }
    if let Some(var_27) = &input.suppress_indefinitely {
        object.key("suppressIndefinitely").boolean(*var_27);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_authorizer_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAuthorizerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_28) = &input.authorizer_function_arn {
        object.key("authorizerFunctionArn").string(var_28);
    }
    if let Some(var_29) = &input.enable_caching_for_http {
        object.key("enableCachingForHttp").boolean(*var_29);
    }
    if let Some(var_30) = &input.signing_disabled {
        object.key("signingDisabled").boolean(*var_30);
    }
    if let Some(var_31) = &input.status {
        object.key("status").string(var_31.as_str());
    }
    if let Some(var_32) = &input.tags {
        let mut array_33 = object.key("tags").start_array();
        for item_34 in var_32 {
            {
                let mut object_35 = array_33.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_35, item_34)?;
                object_35.finish();
            }
        }
        array_33.finish();
    }
    if let Some(var_36) = &input.token_key_name {
        object.key("tokenKeyName").string(var_36);
    }
    if let Some(var_37) = &input.token_signing_public_keys {
        let mut object_38 = object.key("tokenSigningPublicKeys").start_object();
        for (key_39, value_40) in var_37 {
            {
                object_38.key(key_39).string(value_40);
            }
        }
        object_38.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_billing_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateBillingGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_41) = &input.billing_group_properties {
        let mut object_42 = object.key("billingGroupProperties").start_object();
        crate::json_ser::serialize_structure_crate_model_billing_group_properties(
            &mut object_42,
            var_41,
        )?;
        object_42.finish();
    }
    if let Some(var_43) = &input.tags {
        let mut array_44 = object.key("tags").start_array();
        for item_45 in var_43 {
            {
                let mut object_46 = array_44.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_46, item_45)?;
                object_46.finish();
            }
        }
        array_44.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_certificate_from_csr_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateCertificateFromCsrInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_47) = &input.certificate_signing_request {
        object.key("certificateSigningRequest").string(var_47);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_custom_metric_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateCustomMetricInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_48) = &input.client_request_token {
        object.key("clientRequestToken").string(var_48);
    }
    if let Some(var_49) = &input.display_name {
        object.key("displayName").string(var_49);
    }
    if let Some(var_50) = &input.metric_type {
        object.key("metricType").string(var_50.as_str());
    }
    if let Some(var_51) = &input.tags {
        let mut array_52 = object.key("tags").start_array();
        for item_53 in var_51 {
            {
                let mut object_54 = array_52.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_54, item_53)?;
                object_54.finish();
            }
        }
        array_52.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_dimension_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDimensionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_55) = &input.client_request_token {
        object.key("clientRequestToken").string(var_55);
    }
    if let Some(var_56) = &input.string_values {
        let mut array_57 = object.key("stringValues").start_array();
        for item_58 in var_56 {
            {
                array_57.value().string(item_58);
            }
        }
        array_57.finish();
    }
    if let Some(var_59) = &input.tags {
        let mut array_60 = object.key("tags").start_array();
        for item_61 in var_59 {
            {
                let mut object_62 = array_60.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_62, item_61)?;
                object_62.finish();
            }
        }
        array_60.finish();
    }
    if let Some(var_63) = &input.r#type {
        object.key("type").string(var_63.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_domain_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDomainConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_64) = &input.authorizer_config {
        let mut object_65 = object.key("authorizerConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_authorizer_config(&mut object_65, var_64)?;
        object_65.finish();
    }
    if let Some(var_66) = &input.domain_name {
        object.key("domainName").string(var_66);
    }
    if let Some(var_67) = &input.server_certificate_arns {
        let mut array_68 = object.key("serverCertificateArns").start_array();
        for item_69 in var_67 {
            {
                array_68.value().string(item_69);
            }
        }
        array_68.finish();
    }
    if let Some(var_70) = &input.service_type {
        object.key("serviceType").string(var_70.as_str());
    }
    if let Some(var_71) = &input.tags {
        let mut array_72 = object.key("tags").start_array();
        for item_73 in var_71 {
            {
                let mut object_74 = array_72.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_74, item_73)?;
                object_74.finish();
            }
        }
        array_72.finish();
    }
    if let Some(var_75) = &input.validation_certificate_arn {
        object.key("validationCertificateArn").string(var_75);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_dynamic_thing_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDynamicThingGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_76) = &input.index_name {
        object.key("indexName").string(var_76);
    }
    if let Some(var_77) = &input.query_string {
        object.key("queryString").string(var_77);
    }
    if let Some(var_78) = &input.query_version {
        object.key("queryVersion").string(var_78);
    }
    if let Some(var_79) = &input.tags {
        let mut array_80 = object.key("tags").start_array();
        for item_81 in var_79 {
            {
                let mut object_82 = array_80.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_82, item_81)?;
                object_82.finish();
            }
        }
        array_80.finish();
    }
    if let Some(var_83) = &input.thing_group_properties {
        let mut object_84 = object.key("thingGroupProperties").start_object();
        crate::json_ser::serialize_structure_crate_model_thing_group_properties(
            &mut object_84,
            var_83,
        )?;
        object_84.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_fleet_metric_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateFleetMetricInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_85) = &input.aggregation_field {
        object.key("aggregationField").string(var_85);
    }
    if let Some(var_86) = &input.aggregation_type {
        let mut object_87 = object.key("aggregationType").start_object();
        crate::json_ser::serialize_structure_crate_model_aggregation_type(&mut object_87, var_86)?;
        object_87.finish();
    }
    if let Some(var_88) = &input.description {
        object.key("description").string(var_88);
    }
    if let Some(var_89) = &input.index_name {
        object.key("indexName").string(var_89);
    }
    if let Some(var_90) = &input.period {
        object.key("period").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_90).into()),
        );
    }
    if let Some(var_91) = &input.query_string {
        object.key("queryString").string(var_91);
    }
    if let Some(var_92) = &input.query_version {
        object.key("queryVersion").string(var_92);
    }
    if let Some(var_93) = &input.tags {
        let mut array_94 = object.key("tags").start_array();
        for item_95 in var_93 {
            {
                let mut object_96 = array_94.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_96, item_95)?;
                object_96.finish();
            }
        }
        array_94.finish();
    }
    if let Some(var_97) = &input.unit {
        object.key("unit").string(var_97.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_98) = &input.abort_config {
        let mut object_99 = object.key("abortConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_abort_config(&mut object_99, var_98)?;
        object_99.finish();
    }
    if let Some(var_100) = &input.description {
        object.key("description").string(var_100);
    }
    if let Some(var_101) = &input.document {
        object.key("document").string(var_101);
    }
    if let Some(var_102) = &input.document_parameters {
        let mut object_103 = object.key("documentParameters").start_object();
        for (key_104, value_105) in var_102 {
            {
                object_103.key(key_104).string(value_105);
            }
        }
        object_103.finish();
    }
    if let Some(var_106) = &input.document_source {
        object.key("documentSource").string(var_106);
    }
    if let Some(var_107) = &input.job_executions_retry_config {
        let mut object_108 = object.key("jobExecutionsRetryConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_job_executions_retry_config(
            &mut object_108,
            var_107,
        )?;
        object_108.finish();
    }
    if let Some(var_109) = &input.job_executions_rollout_config {
        let mut object_110 = object.key("jobExecutionsRolloutConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_job_executions_rollout_config(
            &mut object_110,
            var_109,
        )?;
        object_110.finish();
    }
    if let Some(var_111) = &input.job_template_arn {
        object.key("jobTemplateArn").string(var_111);
    }
    if let Some(var_112) = &input.namespace_id {
        object.key("namespaceId").string(var_112);
    }
    if let Some(var_113) = &input.presigned_url_config {
        let mut object_114 = object.key("presignedUrlConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_presigned_url_config(
            &mut object_114,
            var_113,
        )?;
        object_114.finish();
    }
    if let Some(var_115) = &input.tags {
        let mut array_116 = object.key("tags").start_array();
        for item_117 in var_115 {
            {
                let mut object_118 = array_116.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_118, item_117)?;
                object_118.finish();
            }
        }
        array_116.finish();
    }
    if let Some(var_119) = &input.target_selection {
        object.key("targetSelection").string(var_119.as_str());
    }
    if let Some(var_120) = &input.targets {
        let mut array_121 = object.key("targets").start_array();
        for item_122 in var_120 {
            {
                array_121.value().string(item_122);
            }
        }
        array_121.finish();
    }
    if let Some(var_123) = &input.timeout_config {
        let mut object_124 = object.key("timeoutConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_timeout_config(&mut object_124, var_123)?;
        object_124.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_job_template_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateJobTemplateInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_125) = &input.abort_config {
        let mut object_126 = object.key("abortConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_abort_config(&mut object_126, var_125)?;
        object_126.finish();
    }
    if let Some(var_127) = &input.description {
        object.key("description").string(var_127);
    }
    if let Some(var_128) = &input.document {
        object.key("document").string(var_128);
    }
    if let Some(var_129) = &input.document_source {
        object.key("documentSource").string(var_129);
    }
    if let Some(var_130) = &input.job_arn {
        object.key("jobArn").string(var_130);
    }
    if let Some(var_131) = &input.job_executions_retry_config {
        let mut object_132 = object.key("jobExecutionsRetryConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_job_executions_retry_config(
            &mut object_132,
            var_131,
        )?;
        object_132.finish();
    }
    if let Some(var_133) = &input.job_executions_rollout_config {
        let mut object_134 = object.key("jobExecutionsRolloutConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_job_executions_rollout_config(
            &mut object_134,
            var_133,
        )?;
        object_134.finish();
    }
    if let Some(var_135) = &input.presigned_url_config {
        let mut object_136 = object.key("presignedUrlConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_presigned_url_config(
            &mut object_136,
            var_135,
        )?;
        object_136.finish();
    }
    if let Some(var_137) = &input.tags {
        let mut array_138 = object.key("tags").start_array();
        for item_139 in var_137 {
            {
                let mut object_140 = array_138.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_140, item_139)?;
                object_140.finish();
            }
        }
        array_138.finish();
    }
    if let Some(var_141) = &input.timeout_config {
        let mut object_142 = object.key("timeoutConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_timeout_config(&mut object_142, var_141)?;
        object_142.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_mitigation_action_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateMitigationActionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_143) = &input.action_params {
        let mut object_144 = object.key("actionParams").start_object();
        crate::json_ser::serialize_structure_crate_model_mitigation_action_params(
            &mut object_144,
            var_143,
        )?;
        object_144.finish();
    }
    if let Some(var_145) = &input.role_arn {
        object.key("roleArn").string(var_145);
    }
    if let Some(var_146) = &input.tags {
        let mut array_147 = object.key("tags").start_array();
        for item_148 in var_146 {
            {
                let mut object_149 = array_147.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_149, item_148)?;
                object_149.finish();
            }
        }
        array_147.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_ota_update_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateOtaUpdateInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_150) = &input.additional_parameters {
        let mut object_151 = object.key("additionalParameters").start_object();
        for (key_152, value_153) in var_150 {
            {
                object_151.key(key_152).string(value_153);
            }
        }
        object_151.finish();
    }
    if let Some(var_154) = &input.aws_job_abort_config {
        let mut object_155 = object.key("awsJobAbortConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_job_abort_config(
            &mut object_155,
            var_154,
        )?;
        object_155.finish();
    }
    if let Some(var_156) = &input.aws_job_executions_rollout_config {
        let mut object_157 = object.key("awsJobExecutionsRolloutConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_job_executions_rollout_config(
            &mut object_157,
            var_156,
        )?;
        object_157.finish();
    }
    if let Some(var_158) = &input.aws_job_presigned_url_config {
        let mut object_159 = object.key("awsJobPresignedUrlConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_job_presigned_url_config(
            &mut object_159,
            var_158,
        )?;
        object_159.finish();
    }
    if let Some(var_160) = &input.aws_job_timeout_config {
        let mut object_161 = object.key("awsJobTimeoutConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_job_timeout_config(
            &mut object_161,
            var_160,
        )?;
        object_161.finish();
    }
    if let Some(var_162) = &input.description {
        object.key("description").string(var_162);
    }
    if let Some(var_163) = &input.files {
        let mut array_164 = object.key("files").start_array();
        for item_165 in var_163 {
            {
                let mut object_166 = array_164.value().start_object();
                crate::json_ser::serialize_structure_crate_model_ota_update_file(
                    &mut object_166,
                    item_165,
                )?;
                object_166.finish();
            }
        }
        array_164.finish();
    }
    if let Some(var_167) = &input.protocols {
        let mut array_168 = object.key("protocols").start_array();
        for item_169 in var_167 {
            {
                array_168.value().string(item_169.as_str());
            }
        }
        array_168.finish();
    }
    if let Some(var_170) = &input.role_arn {
        object.key("roleArn").string(var_170);
    }
    if let Some(var_171) = &input.tags {
        let mut array_172 = object.key("tags").start_array();
        for item_173 in var_171 {
            {
                let mut object_174 = array_172.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_174, item_173)?;
                object_174.finish();
            }
        }
        array_172.finish();
    }
    if let Some(var_175) = &input.target_selection {
        object.key("targetSelection").string(var_175.as_str());
    }
    if let Some(var_176) = &input.targets {
        let mut array_177 = object.key("targets").start_array();
        for item_178 in var_176 {
            {
                array_177.value().string(item_178);
            }
        }
        array_177.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_policy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreatePolicyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_179) = &input.policy_document {
        object.key("policyDocument").string(var_179);
    }
    if let Some(var_180) = &input.tags {
        let mut array_181 = object.key("tags").start_array();
        for item_182 in var_180 {
            {
                let mut object_183 = array_181.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_183, item_182)?;
                object_183.finish();
            }
        }
        array_181.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_policy_version_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreatePolicyVersionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_184) = &input.policy_document {
        object.key("policyDocument").string(var_184);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_provisioning_template_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateProvisioningTemplateInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_185) = &input.description {
        object.key("description").string(var_185);
    }
    if input.enabled {
        object.key("enabled").boolean(input.enabled);
    }
    if let Some(var_186) = &input.pre_provisioning_hook {
        let mut object_187 = object.key("preProvisioningHook").start_object();
        crate::json_ser::serialize_structure_crate_model_provisioning_hook(
            &mut object_187,
            var_186,
        )?;
        object_187.finish();
    }
    if let Some(var_188) = &input.provisioning_role_arn {
        object.key("provisioningRoleArn").string(var_188);
    }
    if let Some(var_189) = &input.tags {
        let mut array_190 = object.key("tags").start_array();
        for item_191 in var_189 {
            {
                let mut object_192 = array_190.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_192, item_191)?;
                object_192.finish();
            }
        }
        array_190.finish();
    }
    if let Some(var_193) = &input.template_body {
        object.key("templateBody").string(var_193);
    }
    if let Some(var_194) = &input.template_name {
        object.key("templateName").string(var_194);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_provisioning_template_version_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateProvisioningTemplateVersionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_195) = &input.template_body {
        object.key("templateBody").string(var_195);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_role_alias_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateRoleAliasInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_196) = &input.credential_duration_seconds {
        object.key("credentialDurationSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_196).into()),
        );
    }
    if let Some(var_197) = &input.role_arn {
        object.key("roleArn").string(var_197);
    }
    if let Some(var_198) = &input.tags {
        let mut array_199 = object.key("tags").start_array();
        for item_200 in var_198 {
            {
                let mut object_201 = array_199.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_201, item_200)?;
                object_201.finish();
            }
        }
        array_199.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_scheduled_audit_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateScheduledAuditInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_202) = &input.day_of_month {
        object.key("dayOfMonth").string(var_202);
    }
    if let Some(var_203) = &input.day_of_week {
        object.key("dayOfWeek").string(var_203.as_str());
    }
    if let Some(var_204) = &input.frequency {
        object.key("frequency").string(var_204.as_str());
    }
    if let Some(var_205) = &input.tags {
        let mut array_206 = object.key("tags").start_array();
        for item_207 in var_205 {
            {
                let mut object_208 = array_206.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_208, item_207)?;
                object_208.finish();
            }
        }
        array_206.finish();
    }
    if let Some(var_209) = &input.target_check_names {
        let mut array_210 = object.key("targetCheckNames").start_array();
        for item_211 in var_209 {
            {
                array_210.value().string(item_211);
            }
        }
        array_210.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_security_profile_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateSecurityProfileInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_212) = &input.additional_metrics_to_retain {
        let mut array_213 = object.key("additionalMetricsToRetain").start_array();
        for item_214 in var_212 {
            {
                array_213.value().string(item_214);
            }
        }
        array_213.finish();
    }
    if let Some(var_215) = &input.additional_metrics_to_retain_v2 {
        let mut array_216 = object.key("additionalMetricsToRetainV2").start_array();
        for item_217 in var_215 {
            {
                let mut object_218 = array_216.value().start_object();
                crate::json_ser::serialize_structure_crate_model_metric_to_retain(
                    &mut object_218,
                    item_217,
                )?;
                object_218.finish();
            }
        }
        array_216.finish();
    }
    if let Some(var_219) = &input.alert_targets {
        let mut object_220 = object.key("alertTargets").start_object();
        for (key_221, value_222) in var_219 {
            {
                let mut object_223 = object_220.key(key_221.as_str()).start_object();
                crate::json_ser::serialize_structure_crate_model_alert_target(
                    &mut object_223,
                    value_222,
                )?;
                object_223.finish();
            }
        }
        object_220.finish();
    }
    if let Some(var_224) = &input.behaviors {
        let mut array_225 = object.key("behaviors").start_array();
        for item_226 in var_224 {
            {
                let mut object_227 = array_225.value().start_object();
                crate::json_ser::serialize_structure_crate_model_behavior(
                    &mut object_227,
                    item_226,
                )?;
                object_227.finish();
            }
        }
        array_225.finish();
    }
    if let Some(var_228) = &input.security_profile_description {
        object.key("securityProfileDescription").string(var_228);
    }
    if let Some(var_229) = &input.tags {
        let mut array_230 = object.key("tags").start_array();
        for item_231 in var_229 {
            {
                let mut object_232 = array_230.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_232, item_231)?;
                object_232.finish();
            }
        }
        array_230.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_stream_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateStreamInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_233) = &input.description {
        object.key("description").string(var_233);
    }
    if let Some(var_234) = &input.files {
        let mut array_235 = object.key("files").start_array();
        for item_236 in var_234 {
            {
                let mut object_237 = array_235.value().start_object();
                crate::json_ser::serialize_structure_crate_model_stream_file(
                    &mut object_237,
                    item_236,
                )?;
                object_237.finish();
            }
        }
        array_235.finish();
    }
    if let Some(var_238) = &input.role_arn {
        object.key("roleArn").string(var_238);
    }
    if let Some(var_239) = &input.tags {
        let mut array_240 = object.key("tags").start_array();
        for item_241 in var_239 {
            {
                let mut object_242 = array_240.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_242, item_241)?;
                object_242.finish();
            }
        }
        array_240.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_thing_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateThingInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_243) = &input.attribute_payload {
        let mut object_244 = object.key("attributePayload").start_object();
        crate::json_ser::serialize_structure_crate_model_attribute_payload(
            &mut object_244,
            var_243,
        )?;
        object_244.finish();
    }
    if let Some(var_245) = &input.billing_group_name {
        object.key("billingGroupName").string(var_245);
    }
    if let Some(var_246) = &input.thing_type_name {
        object.key("thingTypeName").string(var_246);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_thing_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateThingGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_247) = &input.parent_group_name {
        object.key("parentGroupName").string(var_247);
    }
    if let Some(var_248) = &input.tags {
        let mut array_249 = object.key("tags").start_array();
        for item_250 in var_248 {
            {
                let mut object_251 = array_249.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_251, item_250)?;
                object_251.finish();
            }
        }
        array_249.finish();
    }
    if let Some(var_252) = &input.thing_group_properties {
        let mut object_253 = object.key("thingGroupProperties").start_object();
        crate::json_ser::serialize_structure_crate_model_thing_group_properties(
            &mut object_253,
            var_252,
        )?;
        object_253.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_thing_type_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateThingTypeInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_254) = &input.tags {
        let mut array_255 = object.key("tags").start_array();
        for item_256 in var_254 {
            {
                let mut object_257 = array_255.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_257, item_256)?;
                object_257.finish();
            }
        }
        array_255.finish();
    }
    if let Some(var_258) = &input.thing_type_properties {
        let mut object_259 = object.key("thingTypeProperties").start_object();
        crate::json_ser::serialize_structure_crate_model_thing_type_properties(
            &mut object_259,
            var_258,
        )?;
        object_259.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_topic_rule_destination_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateTopicRuleDestinationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_260) = &input.destination_configuration {
        let mut object_261 = object.key("destinationConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_topic_rule_destination_configuration(
            &mut object_261,
            var_260,
        )?;
        object_261.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_audit_suppression_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteAuditSuppressionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_262) = &input.check_name {
        object.key("checkName").string(var_262);
    }
    if let Some(var_263) = &input.resource_identifier {
        let mut object_264 = object.key("resourceIdentifier").start_object();
        crate::json_ser::serialize_structure_crate_model_resource_identifier(
            &mut object_264,
            var_263,
        )?;
        object_264.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_deprecate_thing_type_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeprecateThingTypeInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.undo_deprecate {
        object.key("undoDeprecate").boolean(input.undo_deprecate);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_audit_suppression_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeAuditSuppressionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_265) = &input.check_name {
        object.key("checkName").string(var_265);
    }
    if let Some(var_266) = &input.resource_identifier {
        let mut object_267 = object.key("resourceIdentifier").start_object();
        crate::json_ser::serialize_structure_crate_model_resource_identifier(
            &mut object_267,
            var_266,
        )?;
        object_267.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_detach_policy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DetachPolicyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_268) = &input.target {
        object.key("target").string(var_268);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_buckets_aggregation_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetBucketsAggregationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_269) = &input.aggregation_field {
        object.key("aggregationField").string(var_269);
    }
    if let Some(var_270) = &input.buckets_aggregation_type {
        let mut object_271 = object.key("bucketsAggregationType").start_object();
        crate::json_ser::serialize_structure_crate_model_buckets_aggregation_type(
            &mut object_271,
            var_270,
        )?;
        object_271.finish();
    }
    if let Some(var_272) = &input.index_name {
        object.key("indexName").string(var_272);
    }
    if let Some(var_273) = &input.query_string {
        object.key("queryString").string(var_273);
    }
    if let Some(var_274) = &input.query_version {
        object.key("queryVersion").string(var_274);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_cardinality_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetCardinalityInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_275) = &input.aggregation_field {
        object.key("aggregationField").string(var_275);
    }
    if let Some(var_276) = &input.index_name {
        object.key("indexName").string(var_276);
    }
    if let Some(var_277) = &input.query_string {
        object.key("queryString").string(var_277);
    }
    if let Some(var_278) = &input.query_version {
        object.key("queryVersion").string(var_278);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_effective_policies_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetEffectivePoliciesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_279) = &input.cognito_identity_pool_id {
        object.key("cognitoIdentityPoolId").string(var_279);
    }
    if let Some(var_280) = &input.principal {
        object.key("principal").string(var_280);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_percentiles_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetPercentilesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_281) = &input.aggregation_field {
        object.key("aggregationField").string(var_281);
    }
    if let Some(var_282) = &input.index_name {
        object.key("indexName").string(var_282);
    }
    if let Some(var_283) = &input.percents {
        let mut array_284 = object.key("percents").start_array();
        for item_285 in var_283 {
            {
                array_284.value().number(
                    #[allow(clippy::useless_conversion)]
                    aws_smithy_types::Number::Float((*item_285).into()),
                );
            }
        }
        array_284.finish();
    }
    if let Some(var_286) = &input.query_string {
        object.key("queryString").string(var_286);
    }
    if let Some(var_287) = &input.query_version {
        object.key("queryVersion").string(var_287);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_statistics_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetStatisticsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_288) = &input.aggregation_field {
        object.key("aggregationField").string(var_288);
    }
    if let Some(var_289) = &input.index_name {
        object.key("indexName").string(var_289);
    }
    if let Some(var_290) = &input.query_string {
        object.key("queryString").string(var_290);
    }
    if let Some(var_291) = &input.query_version {
        object.key("queryVersion").string(var_291);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_audit_findings_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAuditFindingsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_292) = &input.check_name {
        object.key("checkName").string(var_292);
    }
    if let Some(var_293) = &input.end_time {
        object
            .key("endTime")
            .date_time(var_293, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if input.list_suppressed_findings {
        object
            .key("listSuppressedFindings")
            .boolean(input.list_suppressed_findings);
    }
    if let Some(var_294) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_294).into()),
        );
    }
    if let Some(var_295) = &input.next_token {
        object.key("nextToken").string(var_295);
    }
    if let Some(var_296) = &input.resource_identifier {
        let mut object_297 = object.key("resourceIdentifier").start_object();
        crate::json_ser::serialize_structure_crate_model_resource_identifier(
            &mut object_297,
            var_296,
        )?;
        object_297.finish();
    }
    if let Some(var_298) = &input.start_time {
        object
            .key("startTime")
            .date_time(var_298, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_299) = &input.task_id {
        object.key("taskId").string(var_299);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_audit_suppressions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAuditSuppressionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.ascending_order {
        object.key("ascendingOrder").boolean(input.ascending_order);
    }
    if let Some(var_300) = &input.check_name {
        object.key("checkName").string(var_300);
    }
    if let Some(var_301) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_301).into()),
        );
    }
    if let Some(var_302) = &input.next_token {
        object.key("nextToken").string(var_302);
    }
    if let Some(var_303) = &input.resource_identifier {
        let mut object_304 = object.key("resourceIdentifier").start_object();
        crate::json_ser::serialize_structure_crate_model_resource_identifier(
            &mut object_304,
            var_303,
        )?;
        object_304.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_verification_state_on_violation_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutVerificationStateOnViolationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_305) = &input.verification_state {
        object.key("verificationState").string(var_305.as_str());
    }
    if let Some(var_306) = &input.verification_state_description {
        object.key("verificationStateDescription").string(var_306);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_register_ca_certificate_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RegisterCaCertificateInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_307) = &input.ca_certificate {
        object.key("caCertificate").string(var_307);
    }
    if let Some(var_308) = &input.registration_config {
        let mut object_309 = object.key("registrationConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_registration_config(
            &mut object_309,
            var_308,
        )?;
        object_309.finish();
    }
    if let Some(var_310) = &input.tags {
        let mut array_311 = object.key("tags").start_array();
        for item_312 in var_310 {
            {
                let mut object_313 = array_311.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_313, item_312)?;
                object_313.finish();
            }
        }
        array_311.finish();
    }
    if let Some(var_314) = &input.verification_certificate {
        object.key("verificationCertificate").string(var_314);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_register_certificate_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RegisterCertificateInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_315) = &input.ca_certificate_pem {
        object.key("caCertificatePem").string(var_315);
    }
    if let Some(var_316) = &input.certificate_pem {
        object.key("certificatePem").string(var_316);
    }
    if let Some(var_317) = &input.status {
        object.key("status").string(var_317.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_register_certificate_without_ca_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RegisterCertificateWithoutCaInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_318) = &input.certificate_pem {
        object.key("certificatePem").string(var_318);
    }
    if let Some(var_319) = &input.status {
        object.key("status").string(var_319.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_register_thing_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RegisterThingInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_320) = &input.parameters {
        let mut object_321 = object.key("parameters").start_object();
        for (key_322, value_323) in var_320 {
            {
                object_321.key(key_322).string(value_323);
            }
        }
        object_321.finish();
    }
    if let Some(var_324) = &input.template_body {
        object.key("templateBody").string(var_324);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_reject_certificate_transfer_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RejectCertificateTransferInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_325) = &input.reject_reason {
        object.key("rejectReason").string(var_325);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_remove_thing_from_billing_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RemoveThingFromBillingGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_326) = &input.billing_group_arn {
        object.key("billingGroupArn").string(var_326);
    }
    if let Some(var_327) = &input.billing_group_name {
        object.key("billingGroupName").string(var_327);
    }
    if let Some(var_328) = &input.thing_arn {
        object.key("thingArn").string(var_328);
    }
    if let Some(var_329) = &input.thing_name {
        object.key("thingName").string(var_329);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_remove_thing_from_thing_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RemoveThingFromThingGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_330) = &input.thing_arn {
        object.key("thingArn").string(var_330);
    }
    if let Some(var_331) = &input.thing_group_arn {
        object.key("thingGroupArn").string(var_331);
    }
    if let Some(var_332) = &input.thing_group_name {
        object.key("thingGroupName").string(var_332);
    }
    if let Some(var_333) = &input.thing_name {
        object.key("thingName").string(var_333);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_search_index_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SearchIndexInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_334) = &input.index_name {
        object.key("indexName").string(var_334);
    }
    if let Some(var_335) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_335).into()),
        );
    }
    if let Some(var_336) = &input.next_token {
        object.key("nextToken").string(var_336);
    }
    if let Some(var_337) = &input.query_string {
        object.key("queryString").string(var_337);
    }
    if let Some(var_338) = &input.query_version {
        object.key("queryVersion").string(var_338);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_set_default_authorizer_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SetDefaultAuthorizerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_339) = &input.authorizer_name {
        object.key("authorizerName").string(var_339);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_set_v2_logging_level_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SetV2LoggingLevelInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_340) = &input.log_level {
        object.key("logLevel").string(var_340.as_str());
    }
    if let Some(var_341) = &input.log_target {
        let mut object_342 = object.key("logTarget").start_object();
        crate::json_ser::serialize_structure_crate_model_log_target(&mut object_342, var_341)?;
        object_342.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_set_v2_logging_options_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SetV2LoggingOptionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_343) = &input.default_log_level {
        object.key("defaultLogLevel").string(var_343.as_str());
    }
    if input.disable_all_logs {
        object.key("disableAllLogs").boolean(input.disable_all_logs);
    }
    if let Some(var_344) = &input.role_arn {
        object.key("roleArn").string(var_344);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_audit_mitigation_actions_task_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartAuditMitigationActionsTaskInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_345) = &input.audit_check_to_actions_mapping {
        let mut object_346 = object.key("auditCheckToActionsMapping").start_object();
        for (key_347, value_348) in var_345 {
            {
                let mut array_349 = object_346.key(key_347).start_array();
                for item_350 in value_348 {
                    {
                        array_349.value().string(item_350);
                    }
                }
                array_349.finish();
            }
        }
        object_346.finish();
    }
    if let Some(var_351) = &input.client_request_token {
        object.key("clientRequestToken").string(var_351);
    }
    if let Some(var_352) = &input.target {
        let mut object_353 = object.key("target").start_object();
        crate::json_ser::serialize_structure_crate_model_audit_mitigation_actions_task_target(
            &mut object_353,
            var_352,
        )?;
        object_353.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_detect_mitigation_actions_task_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartDetectMitigationActionsTaskInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_354) = &input.actions {
        let mut array_355 = object.key("actions").start_array();
        for item_356 in var_354 {
            {
                array_355.value().string(item_356);
            }
        }
        array_355.finish();
    }
    if let Some(var_357) = &input.client_request_token {
        object.key("clientRequestToken").string(var_357);
    }
    if let Some(var_358) = &input.include_only_active_violations {
        object.key("includeOnlyActiveViolations").boolean(*var_358);
    }
    if let Some(var_359) = &input.include_suppressed_alerts {
        object.key("includeSuppressedAlerts").boolean(*var_359);
    }
    if let Some(var_360) = &input.target {
        let mut object_361 = object.key("target").start_object();
        crate::json_ser::serialize_structure_crate_model_detect_mitigation_actions_task_target(
            &mut object_361,
            var_360,
        )?;
        object_361.finish();
    }
    if let Some(var_362) = &input.violation_event_occurrence_range {
        let mut object_363 = object.key("violationEventOccurrenceRange").start_object();
        crate::json_ser::serialize_structure_crate_model_violation_event_occurrence_range(
            &mut object_363,
            var_362,
        )?;
        object_363.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_on_demand_audit_task_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartOnDemandAuditTaskInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_364) = &input.target_check_names {
        let mut array_365 = object.key("targetCheckNames").start_array();
        for item_366 in var_364 {
            {
                array_365.value().string(item_366);
            }
        }
        array_365.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_thing_registration_task_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartThingRegistrationTaskInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_367) = &input.input_file_bucket {
        object.key("inputFileBucket").string(var_367);
    }
    if let Some(var_368) = &input.input_file_key {
        object.key("inputFileKey").string(var_368);
    }
    if let Some(var_369) = &input.role_arn {
        object.key("roleArn").string(var_369);
    }
    if let Some(var_370) = &input.template_body {
        object.key("templateBody").string(var_370);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_371) = &input.resource_arn {
        object.key("resourceArn").string(var_371);
    }
    if let Some(var_372) = &input.tags {
        let mut array_373 = object.key("tags").start_array();
        for item_374 in var_372 {
            {
                let mut object_375 = array_373.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_375, item_374)?;
                object_375.finish();
            }
        }
        array_373.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_test_authorization_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TestAuthorizationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_376) = &input.auth_infos {
        let mut array_377 = object.key("authInfos").start_array();
        for item_378 in var_376 {
            {
                let mut object_379 = array_377.value().start_object();
                crate::json_ser::serialize_structure_crate_model_auth_info(
                    &mut object_379,
                    item_378,
                )?;
                object_379.finish();
            }
        }
        array_377.finish();
    }
    if let Some(var_380) = &input.cognito_identity_pool_id {
        object.key("cognitoIdentityPoolId").string(var_380);
    }
    if let Some(var_381) = &input.policy_names_to_add {
        let mut array_382 = object.key("policyNamesToAdd").start_array();
        for item_383 in var_381 {
            {
                array_382.value().string(item_383);
            }
        }
        array_382.finish();
    }
    if let Some(var_384) = &input.policy_names_to_skip {
        let mut array_385 = object.key("policyNamesToSkip").start_array();
        for item_386 in var_384 {
            {
                array_385.value().string(item_386);
            }
        }
        array_385.finish();
    }
    if let Some(var_387) = &input.principal {
        object.key("principal").string(var_387);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_test_invoke_authorizer_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TestInvokeAuthorizerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_388) = &input.http_context {
        let mut object_389 = object.key("httpContext").start_object();
        crate::json_ser::serialize_structure_crate_model_http_context(&mut object_389, var_388)?;
        object_389.finish();
    }
    if let Some(var_390) = &input.mqtt_context {
        let mut object_391 = object.key("mqttContext").start_object();
        crate::json_ser::serialize_structure_crate_model_mqtt_context(&mut object_391, var_390)?;
        object_391.finish();
    }
    if let Some(var_392) = &input.tls_context {
        let mut object_393 = object.key("tlsContext").start_object();
        crate::json_ser::serialize_structure_crate_model_tls_context(&mut object_393, var_392)?;
        object_393.finish();
    }
    if let Some(var_394) = &input.token {
        object.key("token").string(var_394);
    }
    if let Some(var_395) = &input.token_signature {
        object.key("tokenSignature").string(var_395);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_transfer_certificate_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TransferCertificateInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_396) = &input.transfer_message {
        object.key("transferMessage").string(var_396);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_untag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UntagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_397) = &input.resource_arn {
        object.key("resourceArn").string(var_397);
    }
    if let Some(var_398) = &input.tag_keys {
        let mut array_399 = object.key("tagKeys").start_array();
        for item_400 in var_398 {
            {
                array_399.value().string(item_400);
            }
        }
        array_399.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_account_audit_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateAccountAuditConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_401) = &input.audit_check_configurations {
        let mut object_402 = object.key("auditCheckConfigurations").start_object();
        for (key_403, value_404) in var_401 {
            {
                let mut object_405 = object_402.key(key_403).start_object();
                crate::json_ser::serialize_structure_crate_model_audit_check_configuration(
                    &mut object_405,
                    value_404,
                )?;
                object_405.finish();
            }
        }
        object_402.finish();
    }
    if let Some(var_406) = &input.audit_notification_target_configurations {
        let mut object_407 = object
            .key("auditNotificationTargetConfigurations")
            .start_object();
        for (key_408, value_409) in var_406 {
            {
                let mut object_410 = object_407.key(key_408.as_str()).start_object();
                crate::json_ser::serialize_structure_crate_model_audit_notification_target(
                    &mut object_410,
                    value_409,
                )?;
                object_410.finish();
            }
        }
        object_407.finish();
    }
    if let Some(var_411) = &input.role_arn {
        object.key("roleArn").string(var_411);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_audit_suppression_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateAuditSuppressionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_412) = &input.check_name {
        object.key("checkName").string(var_412);
    }
    if let Some(var_413) = &input.description {
        object.key("description").string(var_413);
    }
    if let Some(var_414) = &input.expiration_date {
        object
            .key("expirationDate")
            .date_time(var_414, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_415) = &input.resource_identifier {
        let mut object_416 = object.key("resourceIdentifier").start_object();
        crate::json_ser::serialize_structure_crate_model_resource_identifier(
            &mut object_416,
            var_415,
        )?;
        object_416.finish();
    }
    if let Some(var_417) = &input.suppress_indefinitely {
        object.key("suppressIndefinitely").boolean(*var_417);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_authorizer_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateAuthorizerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_418) = &input.authorizer_function_arn {
        object.key("authorizerFunctionArn").string(var_418);
    }
    if let Some(var_419) = &input.enable_caching_for_http {
        object.key("enableCachingForHttp").boolean(*var_419);
    }
    if let Some(var_420) = &input.status {
        object.key("status").string(var_420.as_str());
    }
    if let Some(var_421) = &input.token_key_name {
        object.key("tokenKeyName").string(var_421);
    }
    if let Some(var_422) = &input.token_signing_public_keys {
        let mut object_423 = object.key("tokenSigningPublicKeys").start_object();
        for (key_424, value_425) in var_422 {
            {
                object_423.key(key_424).string(value_425);
            }
        }
        object_423.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_billing_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateBillingGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_426) = &input.billing_group_properties {
        let mut object_427 = object.key("billingGroupProperties").start_object();
        crate::json_ser::serialize_structure_crate_model_billing_group_properties(
            &mut object_427,
            var_426,
        )?;
        object_427.finish();
    }
    if let Some(var_428) = &input.expected_version {
        object.key("expectedVersion").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_428).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_ca_certificate_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateCaCertificateInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_429) = &input.registration_config {
        let mut object_430 = object.key("registrationConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_registration_config(
            &mut object_430,
            var_429,
        )?;
        object_430.finish();
    }
    if input.remove_auto_registration {
        object
            .key("removeAutoRegistration")
            .boolean(input.remove_auto_registration);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_custom_metric_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateCustomMetricInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_431) = &input.display_name {
        object.key("displayName").string(var_431);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_dimension_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDimensionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_432) = &input.string_values {
        let mut array_433 = object.key("stringValues").start_array();
        for item_434 in var_432 {
            {
                array_433.value().string(item_434);
            }
        }
        array_433.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_domain_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDomainConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_435) = &input.authorizer_config {
        let mut object_436 = object.key("authorizerConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_authorizer_config(
            &mut object_436,
            var_435,
        )?;
        object_436.finish();
    }
    if let Some(var_437) = &input.domain_configuration_status {
        object
            .key("domainConfigurationStatus")
            .string(var_437.as_str());
    }
    if input.remove_authorizer_config {
        object
            .key("removeAuthorizerConfig")
            .boolean(input.remove_authorizer_config);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_dynamic_thing_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDynamicThingGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_438) = &input.expected_version {
        object.key("expectedVersion").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_438).into()),
        );
    }
    if let Some(var_439) = &input.index_name {
        object.key("indexName").string(var_439);
    }
    if let Some(var_440) = &input.query_string {
        object.key("queryString").string(var_440);
    }
    if let Some(var_441) = &input.query_version {
        object.key("queryVersion").string(var_441);
    }
    if let Some(var_442) = &input.thing_group_properties {
        let mut object_443 = object.key("thingGroupProperties").start_object();
        crate::json_ser::serialize_structure_crate_model_thing_group_properties(
            &mut object_443,
            var_442,
        )?;
        object_443.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_event_configurations_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateEventConfigurationsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_444) = &input.event_configurations {
        let mut object_445 = object.key("eventConfigurations").start_object();
        for (key_446, value_447) in var_444 {
            {
                let mut object_448 = object_445.key(key_446.as_str()).start_object();
                crate::json_ser::serialize_structure_crate_model_configuration(
                    &mut object_448,
                    value_447,
                )?;
                object_448.finish();
            }
        }
        object_445.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_fleet_metric_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateFleetMetricInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_449) = &input.aggregation_field {
        object.key("aggregationField").string(var_449);
    }
    if let Some(var_450) = &input.aggregation_type {
        let mut object_451 = object.key("aggregationType").start_object();
        crate::json_ser::serialize_structure_crate_model_aggregation_type(
            &mut object_451,
            var_450,
        )?;
        object_451.finish();
    }
    if let Some(var_452) = &input.description {
        object.key("description").string(var_452);
    }
    if let Some(var_453) = &input.expected_version {
        object.key("expectedVersion").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_453).into()),
        );
    }
    if let Some(var_454) = &input.index_name {
        object.key("indexName").string(var_454);
    }
    if let Some(var_455) = &input.period {
        object.key("period").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_455).into()),
        );
    }
    if let Some(var_456) = &input.query_string {
        object.key("queryString").string(var_456);
    }
    if let Some(var_457) = &input.query_version {
        object.key("queryVersion").string(var_457);
    }
    if let Some(var_458) = &input.unit {
        object.key("unit").string(var_458.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_indexing_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateIndexingConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_459) = &input.thing_group_indexing_configuration {
        let mut object_460 = object.key("thingGroupIndexingConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_thing_group_indexing_configuration(
            &mut object_460,
            var_459,
        )?;
        object_460.finish();
    }
    if let Some(var_461) = &input.thing_indexing_configuration {
        let mut object_462 = object.key("thingIndexingConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_thing_indexing_configuration(
            &mut object_462,
            var_461,
        )?;
        object_462.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_463) = &input.abort_config {
        let mut object_464 = object.key("abortConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_abort_config(&mut object_464, var_463)?;
        object_464.finish();
    }
    if let Some(var_465) = &input.description {
        object.key("description").string(var_465);
    }
    if let Some(var_466) = &input.job_executions_retry_config {
        let mut object_467 = object.key("jobExecutionsRetryConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_job_executions_retry_config(
            &mut object_467,
            var_466,
        )?;
        object_467.finish();
    }
    if let Some(var_468) = &input.job_executions_rollout_config {
        let mut object_469 = object.key("jobExecutionsRolloutConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_job_executions_rollout_config(
            &mut object_469,
            var_468,
        )?;
        object_469.finish();
    }
    if let Some(var_470) = &input.presigned_url_config {
        let mut object_471 = object.key("presignedUrlConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_presigned_url_config(
            &mut object_471,
            var_470,
        )?;
        object_471.finish();
    }
    if let Some(var_472) = &input.timeout_config {
        let mut object_473 = object.key("timeoutConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_timeout_config(&mut object_473, var_472)?;
        object_473.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_mitigation_action_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateMitigationActionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_474) = &input.action_params {
        let mut object_475 = object.key("actionParams").start_object();
        crate::json_ser::serialize_structure_crate_model_mitigation_action_params(
            &mut object_475,
            var_474,
        )?;
        object_475.finish();
    }
    if let Some(var_476) = &input.role_arn {
        object.key("roleArn").string(var_476);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_provisioning_template_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateProvisioningTemplateInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_477) = &input.default_version_id {
        object.key("defaultVersionId").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_477).into()),
        );
    }
    if let Some(var_478) = &input.description {
        object.key("description").string(var_478);
    }
    if input.enabled {
        object.key("enabled").boolean(input.enabled);
    }
    if let Some(var_479) = &input.pre_provisioning_hook {
        let mut object_480 = object.key("preProvisioningHook").start_object();
        crate::json_ser::serialize_structure_crate_model_provisioning_hook(
            &mut object_480,
            var_479,
        )?;
        object_480.finish();
    }
    if let Some(var_481) = &input.provisioning_role_arn {
        object.key("provisioningRoleArn").string(var_481);
    }
    if let Some(var_482) = &input.remove_pre_provisioning_hook {
        object.key("removePreProvisioningHook").boolean(*var_482);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_role_alias_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateRoleAliasInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_483) = &input.credential_duration_seconds {
        object.key("credentialDurationSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_483).into()),
        );
    }
    if let Some(var_484) = &input.role_arn {
        object.key("roleArn").string(var_484);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_scheduled_audit_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateScheduledAuditInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_485) = &input.day_of_month {
        object.key("dayOfMonth").string(var_485);
    }
    if let Some(var_486) = &input.day_of_week {
        object.key("dayOfWeek").string(var_486.as_str());
    }
    if let Some(var_487) = &input.frequency {
        object.key("frequency").string(var_487.as_str());
    }
    if let Some(var_488) = &input.target_check_names {
        let mut array_489 = object.key("targetCheckNames").start_array();
        for item_490 in var_488 {
            {
                array_489.value().string(item_490);
            }
        }
        array_489.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_security_profile_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateSecurityProfileInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_491) = &input.additional_metrics_to_retain {
        let mut array_492 = object.key("additionalMetricsToRetain").start_array();
        for item_493 in var_491 {
            {
                array_492.value().string(item_493);
            }
        }
        array_492.finish();
    }
    if let Some(var_494) = &input.additional_metrics_to_retain_v2 {
        let mut array_495 = object.key("additionalMetricsToRetainV2").start_array();
        for item_496 in var_494 {
            {
                let mut object_497 = array_495.value().start_object();
                crate::json_ser::serialize_structure_crate_model_metric_to_retain(
                    &mut object_497,
                    item_496,
                )?;
                object_497.finish();
            }
        }
        array_495.finish();
    }
    if let Some(var_498) = &input.alert_targets {
        let mut object_499 = object.key("alertTargets").start_object();
        for (key_500, value_501) in var_498 {
            {
                let mut object_502 = object_499.key(key_500.as_str()).start_object();
                crate::json_ser::serialize_structure_crate_model_alert_target(
                    &mut object_502,
                    value_501,
                )?;
                object_502.finish();
            }
        }
        object_499.finish();
    }
    if let Some(var_503) = &input.behaviors {
        let mut array_504 = object.key("behaviors").start_array();
        for item_505 in var_503 {
            {
                let mut object_506 = array_504.value().start_object();
                crate::json_ser::serialize_structure_crate_model_behavior(
                    &mut object_506,
                    item_505,
                )?;
                object_506.finish();
            }
        }
        array_504.finish();
    }
    if input.delete_additional_metrics_to_retain {
        object
            .key("deleteAdditionalMetricsToRetain")
            .boolean(input.delete_additional_metrics_to_retain);
    }
    if input.delete_alert_targets {
        object
            .key("deleteAlertTargets")
            .boolean(input.delete_alert_targets);
    }
    if input.delete_behaviors {
        object
            .key("deleteBehaviors")
            .boolean(input.delete_behaviors);
    }
    if let Some(var_507) = &input.security_profile_description {
        object.key("securityProfileDescription").string(var_507);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_stream_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateStreamInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_508) = &input.description {
        object.key("description").string(var_508);
    }
    if let Some(var_509) = &input.files {
        let mut array_510 = object.key("files").start_array();
        for item_511 in var_509 {
            {
                let mut object_512 = array_510.value().start_object();
                crate::json_ser::serialize_structure_crate_model_stream_file(
                    &mut object_512,
                    item_511,
                )?;
                object_512.finish();
            }
        }
        array_510.finish();
    }
    if let Some(var_513) = &input.role_arn {
        object.key("roleArn").string(var_513);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_thing_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateThingInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_514) = &input.attribute_payload {
        let mut object_515 = object.key("attributePayload").start_object();
        crate::json_ser::serialize_structure_crate_model_attribute_payload(
            &mut object_515,
            var_514,
        )?;
        object_515.finish();
    }
    if let Some(var_516) = &input.expected_version {
        object.key("expectedVersion").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_516).into()),
        );
    }
    if input.remove_thing_type {
        object
            .key("removeThingType")
            .boolean(input.remove_thing_type);
    }
    if let Some(var_517) = &input.thing_type_name {
        object.key("thingTypeName").string(var_517);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_thing_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateThingGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_518) = &input.expected_version {
        object.key("expectedVersion").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_518).into()),
        );
    }
    if let Some(var_519) = &input.thing_group_properties {
        let mut object_520 = object.key("thingGroupProperties").start_object();
        crate::json_ser::serialize_structure_crate_model_thing_group_properties(
            &mut object_520,
            var_519,
        )?;
        object_520.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_thing_groups_for_thing_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateThingGroupsForThingInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.override_dynamic_groups {
        object
            .key("overrideDynamicGroups")
            .boolean(input.override_dynamic_groups);
    }
    if let Some(var_521) = &input.thing_groups_to_add {
        let mut array_522 = object.key("thingGroupsToAdd").start_array();
        for item_523 in var_521 {
            {
                array_522.value().string(item_523);
            }
        }
        array_522.finish();
    }
    if let Some(var_524) = &input.thing_groups_to_remove {
        let mut array_525 = object.key("thingGroupsToRemove").start_array();
        for item_526 in var_524 {
            {
                array_525.value().string(item_526);
            }
        }
        array_525.finish();
    }
    if let Some(var_527) = &input.thing_name {
        object.key("thingName").string(var_527);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_topic_rule_destination_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateTopicRuleDestinationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_528) = &input.arn {
        object.key("arn").string(var_528);
    }
    if let Some(var_529) = &input.status {
        object.key("status").string(var_529.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_validate_security_profile_behaviors_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ValidateSecurityProfileBehaviorsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_530) = &input.behaviors {
        let mut array_531 = object.key("behaviors").start_array();
        for item_532 in var_530 {
            {
                let mut object_533 = array_531.value().start_object();
                crate::json_ser::serialize_structure_crate_model_behavior(
                    &mut object_533,
                    item_532,
                )?;
                object_533.finish();
            }
        }
        array_531.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_resource_identifier(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ResourceIdentifier,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_534) = &input.device_certificate_id {
        object.key("deviceCertificateId").string(var_534);
    }
    if let Some(var_535) = &input.ca_certificate_id {
        object.key("caCertificateId").string(var_535);
    }
    if let Some(var_536) = &input.cognito_identity_pool_id {
        object.key("cognitoIdentityPoolId").string(var_536);
    }
    if let Some(var_537) = &input.client_id {
        object.key("clientId").string(var_537);
    }
    if let Some(var_538) = &input.policy_version_identifier {
        let mut object_539 = object.key("policyVersionIdentifier").start_object();
        crate::json_ser::serialize_structure_crate_model_policy_version_identifier(
            &mut object_539,
            var_538,
        )?;
        object_539.finish();
    }
    if let Some(var_540) = &input.account {
        object.key("account").string(var_540);
    }
    if let Some(var_541) = &input.iam_role_arn {
        object.key("iamRoleArn").string(var_541);
    }
    if let Some(var_542) = &input.role_alias_arn {
        object.key("roleAliasArn").string(var_542);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tag(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tag,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_543) = &input.key {
        object.key("Key").string(var_543);
    }
    if let Some(var_544) = &input.value {
        object.key("Value").string(var_544);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_billing_group_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BillingGroupProperties,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_545) = &input.billing_group_description {
        object.key("billingGroupDescription").string(var_545);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_authorizer_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AuthorizerConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_546) = &input.default_authorizer_name {
        object.key("defaultAuthorizerName").string(var_546);
    }
    if let Some(var_547) = &input.allow_authorizer_override {
        object.key("allowAuthorizerOverride").boolean(*var_547);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_thing_group_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ThingGroupProperties,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_548) = &input.thing_group_description {
        object.key("thingGroupDescription").string(var_548);
    }
    if let Some(var_549) = &input.attribute_payload {
        let mut object_550 = object.key("attributePayload").start_object();
        crate::json_ser::serialize_structure_crate_model_attribute_payload(
            &mut object_550,
            var_549,
        )?;
        object_550.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aggregation_type(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AggregationType,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_551) = &input.name {
        object.key("name").string(var_551.as_str());
    }
    if let Some(var_552) = &input.values {
        let mut array_553 = object.key("values").start_array();
        for item_554 in var_552 {
            {
                array_553.value().string(item_554);
            }
        }
        array_553.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_abort_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AbortConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_555) = &input.criteria_list {
        let mut array_556 = object.key("criteriaList").start_array();
        for item_557 in var_555 {
            {
                let mut object_558 = array_556.value().start_object();
                crate::json_ser::serialize_structure_crate_model_abort_criteria(
                    &mut object_558,
                    item_557,
                )?;
                object_558.finish();
            }
        }
        array_556.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_job_executions_retry_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JobExecutionsRetryConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_559) = &input.criteria_list {
        let mut array_560 = object.key("criteriaList").start_array();
        for item_561 in var_559 {
            {
                let mut object_562 = array_560.value().start_object();
                crate::json_ser::serialize_structure_crate_model_retry_criteria(
                    &mut object_562,
                    item_561,
                )?;
                object_562.finish();
            }
        }
        array_560.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_job_executions_rollout_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JobExecutionsRolloutConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_563) = &input.maximum_per_minute {
        object.key("maximumPerMinute").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_563).into()),
        );
    }
    if let Some(var_564) = &input.exponential_rate {
        let mut object_565 = object.key("exponentialRate").start_object();
        crate::json_ser::serialize_structure_crate_model_exponential_rollout_rate(
            &mut object_565,
            var_564,
        )?;
        object_565.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_presigned_url_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PresignedUrlConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_566) = &input.role_arn {
        object.key("roleArn").string(var_566);
    }
    if let Some(var_567) = &input.expires_in_sec {
        object.key("expiresInSec").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_567).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_timeout_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TimeoutConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_568) = &input.in_progress_timeout_in_minutes {
        object.key("inProgressTimeoutInMinutes").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_568).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_mitigation_action_params(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MitigationActionParams,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_569) = &input.update_device_certificate_params {
        let mut object_570 = object.key("updateDeviceCertificateParams").start_object();
        crate::json_ser::serialize_structure_crate_model_update_device_certificate_params(
            &mut object_570,
            var_569,
        )?;
        object_570.finish();
    }
    if let Some(var_571) = &input.update_ca_certificate_params {
        let mut object_572 = object.key("updateCACertificateParams").start_object();
        crate::json_ser::serialize_structure_crate_model_update_ca_certificate_params(
            &mut object_572,
            var_571,
        )?;
        object_572.finish();
    }
    if let Some(var_573) = &input.add_things_to_thing_group_params {
        let mut object_574 = object.key("addThingsToThingGroupParams").start_object();
        crate::json_ser::serialize_structure_crate_model_add_things_to_thing_group_params(
            &mut object_574,
            var_573,
        )?;
        object_574.finish();
    }
    if let Some(var_575) = &input.replace_default_policy_version_params {
        let mut object_576 = object
            .key("replaceDefaultPolicyVersionParams")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_replace_default_policy_version_params(
            &mut object_576,
            var_575,
        )?;
        object_576.finish();
    }
    if let Some(var_577) = &input.enable_io_t_logging_params {
        let mut object_578 = object.key("enableIoTLoggingParams").start_object();
        crate::json_ser::serialize_structure_crate_model_enable_io_t_logging_params(
            &mut object_578,
            var_577,
        )?;
        object_578.finish();
    }
    if let Some(var_579) = &input.publish_finding_to_sns_params {
        let mut object_580 = object.key("publishFindingToSnsParams").start_object();
        crate::json_ser::serialize_structure_crate_model_publish_finding_to_sns_params(
            &mut object_580,
            var_579,
        )?;
        object_580.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_job_abort_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsJobAbortConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_581) = &input.abort_criteria_list {
        let mut array_582 = object.key("abortCriteriaList").start_array();
        for item_583 in var_581 {
            {
                let mut object_584 = array_582.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_job_abort_criteria(
                    &mut object_584,
                    item_583,
                )?;
                object_584.finish();
            }
        }
        array_582.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_job_executions_rollout_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsJobExecutionsRolloutConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_585) = &input.maximum_per_minute {
        object.key("maximumPerMinute").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_585).into()),
        );
    }
    if let Some(var_586) = &input.exponential_rate {
        let mut object_587 = object.key("exponentialRate").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_job_exponential_rollout_rate(
            &mut object_587,
            var_586,
        )?;
        object_587.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_job_presigned_url_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsJobPresignedUrlConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_588) = &input.expires_in_sec {
        object.key("expiresInSec").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_588).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_job_timeout_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsJobTimeoutConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_589) = &input.in_progress_timeout_in_minutes {
        object.key("inProgressTimeoutInMinutes").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_589).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ota_update_file(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OtaUpdateFile,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_590) = &input.file_name {
        object.key("fileName").string(var_590);
    }
    if let Some(var_591) = &input.file_type {
        object.key("fileType").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_591).into()),
        );
    }
    if let Some(var_592) = &input.file_version {
        object.key("fileVersion").string(var_592);
    }
    if let Some(var_593) = &input.file_location {
        let mut object_594 = object.key("fileLocation").start_object();
        crate::json_ser::serialize_structure_crate_model_file_location(&mut object_594, var_593)?;
        object_594.finish();
    }
    if let Some(var_595) = &input.code_signing {
        let mut object_596 = object.key("codeSigning").start_object();
        crate::json_ser::serialize_structure_crate_model_code_signing(&mut object_596, var_595)?;
        object_596.finish();
    }
    if let Some(var_597) = &input.attributes {
        let mut object_598 = object.key("attributes").start_object();
        for (key_599, value_600) in var_597 {
            {
                object_598.key(key_599).string(value_600);
            }
        }
        object_598.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_provisioning_hook(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProvisioningHook,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_601) = &input.payload_version {
        object.key("payloadVersion").string(var_601);
    }
    if let Some(var_602) = &input.target_arn {
        object.key("targetArn").string(var_602);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_metric_to_retain(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MetricToRetain,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_603) = &input.metric {
        object.key("metric").string(var_603);
    }
    if let Some(var_604) = &input.metric_dimension {
        let mut object_605 = object.key("metricDimension").start_object();
        crate::json_ser::serialize_structure_crate_model_metric_dimension(
            &mut object_605,
            var_604,
        )?;
        object_605.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_alert_target(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AlertTarget,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_606) = &input.alert_target_arn {
        object.key("alertTargetArn").string(var_606);
    }
    if let Some(var_607) = &input.role_arn {
        object.key("roleArn").string(var_607);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_behavior(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Behavior,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_608) = &input.name {
        object.key("name").string(var_608);
    }
    if let Some(var_609) = &input.metric {
        object.key("metric").string(var_609);
    }
    if let Some(var_610) = &input.metric_dimension {
        let mut object_611 = object.key("metricDimension").start_object();
        crate::json_ser::serialize_structure_crate_model_metric_dimension(
            &mut object_611,
            var_610,
        )?;
        object_611.finish();
    }
    if let Some(var_612) = &input.criteria {
        let mut object_613 = object.key("criteria").start_object();
        crate::json_ser::serialize_structure_crate_model_behavior_criteria(
            &mut object_613,
            var_612,
        )?;
        object_613.finish();
    }
    if let Some(var_614) = &input.suppress_alerts {
        object.key("suppressAlerts").boolean(*var_614);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_stream_file(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StreamFile,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_615) = &input.file_id {
        object.key("fileId").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_615).into()),
        );
    }
    if let Some(var_616) = &input.s3_location {
        let mut object_617 = object.key("s3Location").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_location(&mut object_617, var_616)?;
        object_617.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_attribute_payload(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AttributePayload,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_618) = &input.attributes {
        let mut object_619 = object.key("attributes").start_object();
        for (key_620, value_621) in var_618 {
            {
                object_619.key(key_620).string(value_621);
            }
        }
        object_619.finish();
    }
    if input.merge {
        object.key("merge").boolean(input.merge);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_thing_type_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ThingTypeProperties,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_622) = &input.thing_type_description {
        object.key("thingTypeDescription").string(var_622);
    }
    if let Some(var_623) = &input.searchable_attributes {
        let mut array_624 = object.key("searchableAttributes").start_array();
        for item_625 in var_623 {
            {
                array_624.value().string(item_625);
            }
        }
        array_624.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_topic_rule_destination_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TopicRuleDestinationConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_626) = &input.http_url_configuration {
        let mut object_627 = object.key("httpUrlConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_http_url_destination_configuration(
            &mut object_627,
            var_626,
        )?;
        object_627.finish();
    }
    if let Some(var_628) = &input.vpc_configuration {
        let mut object_629 = object.key("vpcConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_vpc_destination_configuration(
            &mut object_629,
            var_628,
        )?;
        object_629.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_buckets_aggregation_type(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BucketsAggregationType,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_630) = &input.terms_aggregation {
        let mut object_631 = object.key("termsAggregation").start_object();
        crate::json_ser::serialize_structure_crate_model_terms_aggregation(
            &mut object_631,
            var_630,
        )?;
        object_631.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_registration_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RegistrationConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_632) = &input.template_body {
        object.key("templateBody").string(var_632);
    }
    if let Some(var_633) = &input.role_arn {
        object.key("roleArn").string(var_633);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_log_target(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LogTarget,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_634) = &input.target_type {
        object.key("targetType").string(var_634.as_str());
    }
    if let Some(var_635) = &input.target_name {
        object.key("targetName").string(var_635);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_audit_mitigation_actions_task_target(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AuditMitigationActionsTaskTarget,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_636) = &input.audit_task_id {
        object.key("auditTaskId").string(var_636);
    }
    if let Some(var_637) = &input.finding_ids {
        let mut array_638 = object.key("findingIds").start_array();
        for item_639 in var_637 {
            {
                array_638.value().string(item_639);
            }
        }
        array_638.finish();
    }
    if let Some(var_640) = &input.audit_check_to_reason_code_filter {
        let mut object_641 = object.key("auditCheckToReasonCodeFilter").start_object();
        for (key_642, value_643) in var_640 {
            {
                let mut array_644 = object_641.key(key_642).start_array();
                for item_645 in value_643 {
                    {
                        array_644.value().string(item_645);
                    }
                }
                array_644.finish();
            }
        }
        object_641.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_detect_mitigation_actions_task_target(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DetectMitigationActionsTaskTarget,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_646) = &input.violation_ids {
        let mut array_647 = object.key("violationIds").start_array();
        for item_648 in var_646 {
            {
                array_647.value().string(item_648);
            }
        }
        array_647.finish();
    }
    if let Some(var_649) = &input.security_profile_name {
        object.key("securityProfileName").string(var_649);
    }
    if let Some(var_650) = &input.behavior_name {
        object.key("behaviorName").string(var_650);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_violation_event_occurrence_range(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ViolationEventOccurrenceRange,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_651) = &input.start_time {
        object
            .key("startTime")
            .date_time(var_651, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_652) = &input.end_time {
        object
            .key("endTime")
            .date_time(var_652, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_model_auth_info(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AuthInfo,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_653) = &input.action_type {
        object.key("actionType").string(var_653.as_str());
    }
    if let Some(var_654) = &input.resources {
        let mut array_655 = object.key("resources").start_array();
        for item_656 in var_654 {
            {
                array_655.value().string(item_656);
            }
        }
        array_655.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_http_context(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HttpContext,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_657) = &input.headers {
        let mut object_658 = object.key("headers").start_object();
        for (key_659, value_660) in var_657 {
            {
                object_658.key(key_659).string(value_660);
            }
        }
        object_658.finish();
    }
    if let Some(var_661) = &input.query_string {
        object.key("queryString").string(var_661);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_mqtt_context(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MqttContext,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_662) = &input.username {
        object.key("username").string(var_662);
    }
    if let Some(var_663) = &input.password {
        object
            .key("password")
            .string_unchecked(&aws_smithy_types::base64::encode(var_663));
    }
    if let Some(var_664) = &input.client_id {
        object.key("clientId").string(var_664);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tls_context(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TlsContext,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_665) = &input.server_name {
        object.key("serverName").string(var_665);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_audit_check_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AuditCheckConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.enabled {
        object.key("enabled").boolean(input.enabled);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_audit_notification_target(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AuditNotificationTarget,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_666) = &input.target_arn {
        object.key("targetArn").string(var_666);
    }
    if let Some(var_667) = &input.role_arn {
        object.key("roleArn").string(var_667);
    }
    if input.enabled {
        object.key("enabled").boolean(input.enabled);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Configuration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.enabled {
        object.key("Enabled").boolean(input.enabled);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_thing_group_indexing_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ThingGroupIndexingConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_668) = &input.thing_group_indexing_mode {
        object
            .key("thingGroupIndexingMode")
            .string(var_668.as_str());
    }
    if let Some(var_669) = &input.managed_fields {
        let mut array_670 = object.key("managedFields").start_array();
        for item_671 in var_669 {
            {
                let mut object_672 = array_670.value().start_object();
                crate::json_ser::serialize_structure_crate_model_field(&mut object_672, item_671)?;
                object_672.finish();
            }
        }
        array_670.finish();
    }
    if let Some(var_673) = &input.custom_fields {
        let mut array_674 = object.key("customFields").start_array();
        for item_675 in var_673 {
            {
                let mut object_676 = array_674.value().start_object();
                crate::json_ser::serialize_structure_crate_model_field(&mut object_676, item_675)?;
                object_676.finish();
            }
        }
        array_674.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_thing_indexing_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ThingIndexingConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_677) = &input.thing_indexing_mode {
        object.key("thingIndexingMode").string(var_677.as_str());
    }
    if let Some(var_678) = &input.thing_connectivity_indexing_mode {
        object
            .key("thingConnectivityIndexingMode")
            .string(var_678.as_str());
    }
    if let Some(var_679) = &input.device_defender_indexing_mode {
        object
            .key("deviceDefenderIndexingMode")
            .string(var_679.as_str());
    }
    if let Some(var_680) = &input.named_shadow_indexing_mode {
        object
            .key("namedShadowIndexingMode")
            .string(var_680.as_str());
    }
    if let Some(var_681) = &input.managed_fields {
        let mut array_682 = object.key("managedFields").start_array();
        for item_683 in var_681 {
            {
                let mut object_684 = array_682.value().start_object();
                crate::json_ser::serialize_structure_crate_model_field(&mut object_684, item_683)?;
                object_684.finish();
            }
        }
        array_682.finish();
    }
    if let Some(var_685) = &input.custom_fields {
        let mut array_686 = object.key("customFields").start_array();
        for item_687 in var_685 {
            {
                let mut object_688 = array_686.value().start_object();
                crate::json_ser::serialize_structure_crate_model_field(&mut object_688, item_687)?;
                object_688.finish();
            }
        }
        array_686.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_topic_rule_payload(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TopicRulePayload,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_689) = &input.sql {
        object.key("sql").string(var_689);
    }
    if let Some(var_690) = &input.description {
        object.key("description").string(var_690);
    }
    if let Some(var_691) = &input.actions {
        let mut array_692 = object.key("actions").start_array();
        for item_693 in var_691 {
            {
                let mut object_694 = array_692.value().start_object();
                crate::json_ser::serialize_structure_crate_model_action(&mut object_694, item_693)?;
                object_694.finish();
            }
        }
        array_692.finish();
    }
    if let Some(var_695) = &input.rule_disabled {
        object.key("ruleDisabled").boolean(*var_695);
    }
    if let Some(var_696) = &input.aws_iot_sql_version {
        object.key("awsIotSqlVersion").string(var_696);
    }
    if let Some(var_697) = &input.error_action {
        let mut object_698 = object.key("errorAction").start_object();
        crate::json_ser::serialize_structure_crate_model_action(&mut object_698, var_697)?;
        object_698.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_logging_options_payload(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LoggingOptionsPayload,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_699) = &input.role_arn {
        object.key("roleArn").string(var_699);
    }
    if let Some(var_700) = &input.log_level {
        object.key("logLevel").string(var_700.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_policy_version_identifier(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PolicyVersionIdentifier,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_701) = &input.policy_name {
        object.key("policyName").string(var_701);
    }
    if let Some(var_702) = &input.policy_version_id {
        object.key("policyVersionId").string(var_702);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_abort_criteria(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AbortCriteria,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_703) = &input.failure_type {
        object.key("failureType").string(var_703.as_str());
    }
    if let Some(var_704) = &input.action {
        object.key("action").string(var_704.as_str());
    }
    if let Some(var_705) = &input.threshold_percentage {
        object.key("thresholdPercentage").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_705).into()),
        );
    }
    if let Some(var_706) = &input.min_number_of_executed_things {
        object.key("minNumberOfExecutedThings").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_706).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_retry_criteria(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RetryCriteria,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_707) = &input.failure_type {
        object.key("failureType").string(var_707.as_str());
    }
    if let Some(var_708) = &input.number_of_retries {
        object.key("numberOfRetries").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_708).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_exponential_rollout_rate(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ExponentialRolloutRate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_709) = &input.base_rate_per_minute {
        object.key("baseRatePerMinute").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_709).into()),
        );
    }
    {
        object.key("incrementFactor").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((input.increment_factor).into()),
        );
    }
    if let Some(var_710) = &input.rate_increase_criteria {
        let mut object_711 = object.key("rateIncreaseCriteria").start_object();
        crate::json_ser::serialize_structure_crate_model_rate_increase_criteria(
            &mut object_711,
            var_710,
        )?;
        object_711.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_update_device_certificate_params(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UpdateDeviceCertificateParams,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_712) = &input.action {
        object.key("action").string(var_712.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_update_ca_certificate_params(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UpdateCaCertificateParams,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_713) = &input.action {
        object.key("action").string(var_713.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_add_things_to_thing_group_params(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AddThingsToThingGroupParams,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_714) = &input.thing_group_names {
        let mut array_715 = object.key("thingGroupNames").start_array();
        for item_716 in var_714 {
            {
                array_715.value().string(item_716);
            }
        }
        array_715.finish();
    }
    if input.override_dynamic_groups {
        object
            .key("overrideDynamicGroups")
            .boolean(input.override_dynamic_groups);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_replace_default_policy_version_params(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ReplaceDefaultPolicyVersionParams,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_717) = &input.template_name {
        object.key("templateName").string(var_717.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_enable_io_t_logging_params(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EnableIoTLoggingParams,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_718) = &input.role_arn_for_logging {
        object.key("roleArnForLogging").string(var_718);
    }
    if let Some(var_719) = &input.log_level {
        object.key("logLevel").string(var_719.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_publish_finding_to_sns_params(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PublishFindingToSnsParams,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_720) = &input.topic_arn {
        object.key("topicArn").string(var_720);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_job_abort_criteria(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsJobAbortCriteria,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_721) = &input.failure_type {
        object.key("failureType").string(var_721.as_str());
    }
    if let Some(var_722) = &input.action {
        object.key("action").string(var_722.as_str());
    }
    if let Some(var_723) = &input.threshold_percentage {
        object.key("thresholdPercentage").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_723).into()),
        );
    }
    if let Some(var_724) = &input.min_number_of_executed_things {
        object.key("minNumberOfExecutedThings").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_724).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_job_exponential_rollout_rate(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsJobExponentialRolloutRate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_725) = &input.base_rate_per_minute {
        object.key("baseRatePerMinute").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_725).into()),
        );
    }
    {
        object.key("incrementFactor").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((input.increment_factor).into()),
        );
    }
    if let Some(var_726) = &input.rate_increase_criteria {
        let mut object_727 = object.key("rateIncreaseCriteria").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_job_rate_increase_criteria(
            &mut object_727,
            var_726,
        )?;
        object_727.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_file_location(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FileLocation,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_728) = &input.stream {
        let mut object_729 = object.key("stream").start_object();
        crate::json_ser::serialize_structure_crate_model_stream(&mut object_729, var_728)?;
        object_729.finish();
    }
    if let Some(var_730) = &input.s3_location {
        let mut object_731 = object.key("s3Location").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_location(&mut object_731, var_730)?;
        object_731.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_code_signing(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CodeSigning,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_732) = &input.aws_signer_job_id {
        object.key("awsSignerJobId").string(var_732);
    }
    if let Some(var_733) = &input.start_signing_job_parameter {
        let mut object_734 = object.key("startSigningJobParameter").start_object();
        crate::json_ser::serialize_structure_crate_model_start_signing_job_parameter(
            &mut object_734,
            var_733,
        )?;
        object_734.finish();
    }
    if let Some(var_735) = &input.custom_code_signing {
        let mut object_736 = object.key("customCodeSigning").start_object();
        crate::json_ser::serialize_structure_crate_model_custom_code_signing(
            &mut object_736,
            var_735,
        )?;
        object_736.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_metric_dimension(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MetricDimension,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_737) = &input.dimension_name {
        object.key("dimensionName").string(var_737);
    }
    if let Some(var_738) = &input.operator {
        object.key("operator").string(var_738.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_behavior_criteria(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BehaviorCriteria,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_739) = &input.comparison_operator {
        object.key("comparisonOperator").string(var_739.as_str());
    }
    if let Some(var_740) = &input.value {
        let mut object_741 = object.key("value").start_object();
        crate::json_ser::serialize_structure_crate_model_metric_value(&mut object_741, var_740)?;
        object_741.finish();
    }
    if let Some(var_742) = &input.duration_seconds {
        object.key("durationSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_742).into()),
        );
    }
    if let Some(var_743) = &input.consecutive_datapoints_to_alarm {
        object.key("consecutiveDatapointsToAlarm").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_743).into()),
        );
    }
    if let Some(var_744) = &input.consecutive_datapoints_to_clear {
        object.key("consecutiveDatapointsToClear").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_744).into()),
        );
    }
    if let Some(var_745) = &input.statistical_threshold {
        let mut object_746 = object.key("statisticalThreshold").start_object();
        crate::json_ser::serialize_structure_crate_model_statistical_threshold(
            &mut object_746,
            var_745,
        )?;
        object_746.finish();
    }
    if let Some(var_747) = &input.ml_detection_config {
        let mut object_748 = object.key("mlDetectionConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_machine_learning_detection_config(
            &mut object_748,
            var_747,
        )?;
        object_748.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_location(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3Location,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_749) = &input.bucket {
        object.key("bucket").string(var_749);
    }
    if let Some(var_750) = &input.key {
        object.key("key").string(var_750);
    }
    if let Some(var_751) = &input.version {
        object.key("version").string(var_751);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_http_url_destination_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HttpUrlDestinationConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_752) = &input.confirmation_url {
        object.key("confirmationUrl").string(var_752);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_vpc_destination_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VpcDestinationConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_753) = &input.subnet_ids {
        let mut array_754 = object.key("subnetIds").start_array();
        for item_755 in var_753 {
            {
                array_754.value().string(item_755);
            }
        }
        array_754.finish();
    }
    if let Some(var_756) = &input.security_groups {
        let mut array_757 = object.key("securityGroups").start_array();
        for item_758 in var_756 {
            {
                array_757.value().string(item_758);
            }
        }
        array_757.finish();
    }
    if let Some(var_759) = &input.vpc_id {
        object.key("vpcId").string(var_759);
    }
    if let Some(var_760) = &input.role_arn {
        object.key("roleArn").string(var_760);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_terms_aggregation(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TermsAggregation,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.max_buckets != 0 {
        object.key("maxBuckets").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_buckets).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_field(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Field,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_761) = &input.name {
        object.key("name").string(var_761);
    }
    if let Some(var_762) = &input.r#type {
        object.key("type").string(var_762.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Action,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_763) = &input.dynamo_db {
        let mut object_764 = object.key("dynamoDB").start_object();
        crate::json_ser::serialize_structure_crate_model_dynamo_db_action(
            &mut object_764,
            var_763,
        )?;
        object_764.finish();
    }
    if let Some(var_765) = &input.dynamo_d_bv2 {
        let mut object_766 = object.key("dynamoDBv2").start_object();
        crate::json_ser::serialize_structure_crate_model_dynamo_d_bv2_action(
            &mut object_766,
            var_765,
        )?;
        object_766.finish();
    }
    if let Some(var_767) = &input.lambda {
        let mut object_768 = object.key("lambda").start_object();
        crate::json_ser::serialize_structure_crate_model_lambda_action(&mut object_768, var_767)?;
        object_768.finish();
    }
    if let Some(var_769) = &input.sns {
        let mut object_770 = object.key("sns").start_object();
        crate::json_ser::serialize_structure_crate_model_sns_action(&mut object_770, var_769)?;
        object_770.finish();
    }
    if let Some(var_771) = &input.sqs {
        let mut object_772 = object.key("sqs").start_object();
        crate::json_ser::serialize_structure_crate_model_sqs_action(&mut object_772, var_771)?;
        object_772.finish();
    }
    if let Some(var_773) = &input.kinesis {
        let mut object_774 = object.key("kinesis").start_object();
        crate::json_ser::serialize_structure_crate_model_kinesis_action(&mut object_774, var_773)?;
        object_774.finish();
    }
    if let Some(var_775) = &input.republish {
        let mut object_776 = object.key("republish").start_object();
        crate::json_ser::serialize_structure_crate_model_republish_action(
            &mut object_776,
            var_775,
        )?;
        object_776.finish();
    }
    if let Some(var_777) = &input.s3 {
        let mut object_778 = object.key("s3").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_action(&mut object_778, var_777)?;
        object_778.finish();
    }
    if let Some(var_779) = &input.firehose {
        let mut object_780 = object.key("firehose").start_object();
        crate::json_ser::serialize_structure_crate_model_firehose_action(&mut object_780, var_779)?;
        object_780.finish();
    }
    if let Some(var_781) = &input.cloudwatch_metric {
        let mut object_782 = object.key("cloudwatchMetric").start_object();
        crate::json_ser::serialize_structure_crate_model_cloudwatch_metric_action(
            &mut object_782,
            var_781,
        )?;
        object_782.finish();
    }
    if let Some(var_783) = &input.cloudwatch_alarm {
        let mut object_784 = object.key("cloudwatchAlarm").start_object();
        crate::json_ser::serialize_structure_crate_model_cloudwatch_alarm_action(
            &mut object_784,
            var_783,
        )?;
        object_784.finish();
    }
    if let Some(var_785) = &input.cloudwatch_logs {
        let mut object_786 = object.key("cloudwatchLogs").start_object();
        crate::json_ser::serialize_structure_crate_model_cloudwatch_logs_action(
            &mut object_786,
            var_785,
        )?;
        object_786.finish();
    }
    if let Some(var_787) = &input.elasticsearch {
        let mut object_788 = object.key("elasticsearch").start_object();
        crate::json_ser::serialize_structure_crate_model_elasticsearch_action(
            &mut object_788,
            var_787,
        )?;
        object_788.finish();
    }
    if let Some(var_789) = &input.salesforce {
        let mut object_790 = object.key("salesforce").start_object();
        crate::json_ser::serialize_structure_crate_model_salesforce_action(
            &mut object_790,
            var_789,
        )?;
        object_790.finish();
    }
    if let Some(var_791) = &input.iot_analytics {
        let mut object_792 = object.key("iotAnalytics").start_object();
        crate::json_ser::serialize_structure_crate_model_iot_analytics_action(
            &mut object_792,
            var_791,
        )?;
        object_792.finish();
    }
    if let Some(var_793) = &input.iot_events {
        let mut object_794 = object.key("iotEvents").start_object();
        crate::json_ser::serialize_structure_crate_model_iot_events_action(
            &mut object_794,
            var_793,
        )?;
        object_794.finish();
    }
    if let Some(var_795) = &input.iot_site_wise {
        let mut object_796 = object.key("iotSiteWise").start_object();
        crate::json_ser::serialize_structure_crate_model_iot_site_wise_action(
            &mut object_796,
            var_795,
        )?;
        object_796.finish();
    }
    if let Some(var_797) = &input.step_functions {
        let mut object_798 = object.key("stepFunctions").start_object();
        crate::json_ser::serialize_structure_crate_model_step_functions_action(
            &mut object_798,
            var_797,
        )?;
        object_798.finish();
    }
    if let Some(var_799) = &input.timestream {
        let mut object_800 = object.key("timestream").start_object();
        crate::json_ser::serialize_structure_crate_model_timestream_action(
            &mut object_800,
            var_799,
        )?;
        object_800.finish();
    }
    if let Some(var_801) = &input.http {
        let mut object_802 = object.key("http").start_object();
        crate::json_ser::serialize_structure_crate_model_http_action(&mut object_802, var_801)?;
        object_802.finish();
    }
    if let Some(var_803) = &input.kafka {
        let mut object_804 = object.key("kafka").start_object();
        crate::json_ser::serialize_structure_crate_model_kafka_action(&mut object_804, var_803)?;
        object_804.finish();
    }
    if let Some(var_805) = &input.open_search {
        let mut object_806 = object.key("openSearch").start_object();
        crate::json_ser::serialize_structure_crate_model_open_search_action(
            &mut object_806,
            var_805,
        )?;
        object_806.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rate_increase_criteria(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RateIncreaseCriteria,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_807) = &input.number_of_notified_things {
        object.key("numberOfNotifiedThings").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_807).into()),
        );
    }
    if let Some(var_808) = &input.number_of_succeeded_things {
        object.key("numberOfSucceededThings").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_808).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_job_rate_increase_criteria(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsJobRateIncreaseCriteria,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_809) = &input.number_of_notified_things {
        object.key("numberOfNotifiedThings").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_809).into()),
        );
    }
    if let Some(var_810) = &input.number_of_succeeded_things {
        object.key("numberOfSucceededThings").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_810).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_stream(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Stream,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_811) = &input.stream_id {
        object.key("streamId").string(var_811);
    }
    if let Some(var_812) = &input.file_id {
        object.key("fileId").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_812).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_start_signing_job_parameter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StartSigningJobParameter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_813) = &input.signing_profile_parameter {
        let mut object_814 = object.key("signingProfileParameter").start_object();
        crate::json_ser::serialize_structure_crate_model_signing_profile_parameter(
            &mut object_814,
            var_813,
        )?;
        object_814.finish();
    }
    if let Some(var_815) = &input.signing_profile_name {
        object.key("signingProfileName").string(var_815);
    }
    if let Some(var_816) = &input.destination {
        let mut object_817 = object.key("destination").start_object();
        crate::json_ser::serialize_structure_crate_model_destination(&mut object_817, var_816)?;
        object_817.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_custom_code_signing(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CustomCodeSigning,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_818) = &input.signature {
        let mut object_819 = object.key("signature").start_object();
        crate::json_ser::serialize_structure_crate_model_code_signing_signature(
            &mut object_819,
            var_818,
        )?;
        object_819.finish();
    }
    if let Some(var_820) = &input.certificate_chain {
        let mut object_821 = object.key("certificateChain").start_object();
        crate::json_ser::serialize_structure_crate_model_code_signing_certificate_chain(
            &mut object_821,
            var_820,
        )?;
        object_821.finish();
    }
    if let Some(var_822) = &input.hash_algorithm {
        object.key("hashAlgorithm").string(var_822);
    }
    if let Some(var_823) = &input.signature_algorithm {
        object.key("signatureAlgorithm").string(var_823);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_metric_value(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MetricValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_824) = &input.count {
        object.key("count").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_824).into()),
        );
    }
    if let Some(var_825) = &input.cidrs {
        let mut array_826 = object.key("cidrs").start_array();
        for item_827 in var_825 {
            {
                array_826.value().string(item_827);
            }
        }
        array_826.finish();
    }
    if let Some(var_828) = &input.ports {
        let mut array_829 = object.key("ports").start_array();
        for item_830 in var_828 {
            {
                array_829.value().number(
                    #[allow(clippy::useless_conversion)]
                    aws_smithy_types::Number::NegInt((*item_830).into()),
                );
            }
        }
        array_829.finish();
    }
    if let Some(var_831) = &input.number {
        object.key("number").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_831).into()),
        );
    }
    if let Some(var_832) = &input.numbers {
        let mut array_833 = object.key("numbers").start_array();
        for item_834 in var_832 {
            {
                array_833.value().number(
                    #[allow(clippy::useless_conversion)]
                    aws_smithy_types::Number::Float((*item_834).into()),
                );
            }
        }
        array_833.finish();
    }
    if let Some(var_835) = &input.strings {
        let mut array_836 = object.key("strings").start_array();
        for item_837 in var_835 {
            {
                array_836.value().string(item_837);
            }
        }
        array_836.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_statistical_threshold(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StatisticalThreshold,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_838) = &input.statistic {
        object.key("statistic").string(var_838);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_machine_learning_detection_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MachineLearningDetectionConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_839) = &input.confidence_level {
        object.key("confidenceLevel").string(var_839.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_dynamo_db_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DynamoDbAction,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_840) = &input.table_name {
        object.key("tableName").string(var_840);
    }
    if let Some(var_841) = &input.role_arn {
        object.key("roleArn").string(var_841);
    }
    if let Some(var_842) = &input.operation {
        object.key("operation").string(var_842);
    }
    if let Some(var_843) = &input.hash_key_field {
        object.key("hashKeyField").string(var_843);
    }
    if let Some(var_844) = &input.hash_key_value {
        object.key("hashKeyValue").string(var_844);
    }
    if let Some(var_845) = &input.hash_key_type {
        object.key("hashKeyType").string(var_845.as_str());
    }
    if let Some(var_846) = &input.range_key_field {
        object.key("rangeKeyField").string(var_846);
    }
    if let Some(var_847) = &input.range_key_value {
        object.key("rangeKeyValue").string(var_847);
    }
    if let Some(var_848) = &input.range_key_type {
        object.key("rangeKeyType").string(var_848.as_str());
    }
    if let Some(var_849) = &input.payload_field {
        object.key("payloadField").string(var_849);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_dynamo_d_bv2_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DynamoDBv2Action,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_850) = &input.role_arn {
        object.key("roleArn").string(var_850);
    }
    if let Some(var_851) = &input.put_item {
        let mut object_852 = object.key("putItem").start_object();
        crate::json_ser::serialize_structure_crate_model_put_item_input(&mut object_852, var_851)?;
        object_852.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lambda_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LambdaAction,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_853) = &input.function_arn {
        object.key("functionArn").string(var_853);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sns_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SnsAction,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_854) = &input.target_arn {
        object.key("targetArn").string(var_854);
    }
    if let Some(var_855) = &input.role_arn {
        object.key("roleArn").string(var_855);
    }
    if let Some(var_856) = &input.message_format {
        object.key("messageFormat").string(var_856.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sqs_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SqsAction,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_857) = &input.role_arn {
        object.key("roleArn").string(var_857);
    }
    if let Some(var_858) = &input.queue_url {
        object.key("queueUrl").string(var_858);
    }
    if let Some(var_859) = &input.use_base64 {
        object.key("useBase64").boolean(*var_859);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_kinesis_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KinesisAction,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_860) = &input.role_arn {
        object.key("roleArn").string(var_860);
    }
    if let Some(var_861) = &input.stream_name {
        object.key("streamName").string(var_861);
    }
    if let Some(var_862) = &input.partition_key {
        object.key("partitionKey").string(var_862);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_republish_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RepublishAction,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_863) = &input.role_arn {
        object.key("roleArn").string(var_863);
    }
    if let Some(var_864) = &input.topic {
        object.key("topic").string(var_864);
    }
    if let Some(var_865) = &input.qos {
        object.key("qos").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_865).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3Action,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_866) = &input.role_arn {
        object.key("roleArn").string(var_866);
    }
    if let Some(var_867) = &input.bucket_name {
        object.key("bucketName").string(var_867);
    }
    if let Some(var_868) = &input.key {
        object.key("key").string(var_868);
    }
    if let Some(var_869) = &input.canned_acl {
        object.key("cannedAcl").string(var_869.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_firehose_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FirehoseAction,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_870) = &input.role_arn {
        object.key("roleArn").string(var_870);
    }
    if let Some(var_871) = &input.delivery_stream_name {
        object.key("deliveryStreamName").string(var_871);
    }
    if let Some(var_872) = &input.separator {
        object.key("separator").string(var_872);
    }
    if let Some(var_873) = &input.batch_mode {
        object.key("batchMode").boolean(*var_873);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_cloudwatch_metric_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CloudwatchMetricAction,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_874) = &input.role_arn {
        object.key("roleArn").string(var_874);
    }
    if let Some(var_875) = &input.metric_namespace {
        object.key("metricNamespace").string(var_875);
    }
    if let Some(var_876) = &input.metric_name {
        object.key("metricName").string(var_876);
    }
    if let Some(var_877) = &input.metric_value {
        object.key("metricValue").string(var_877);
    }
    if let Some(var_878) = &input.metric_unit {
        object.key("metricUnit").string(var_878);
    }
    if let Some(var_879) = &input.metric_timestamp {
        object.key("metricTimestamp").string(var_879);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_cloudwatch_alarm_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CloudwatchAlarmAction,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_880) = &input.role_arn {
        object.key("roleArn").string(var_880);
    }
    if let Some(var_881) = &input.alarm_name {
        object.key("alarmName").string(var_881);
    }
    if let Some(var_882) = &input.state_reason {
        object.key("stateReason").string(var_882);
    }
    if let Some(var_883) = &input.state_value {
        object.key("stateValue").string(var_883);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_cloudwatch_logs_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CloudwatchLogsAction,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_884) = &input.role_arn {
        object.key("roleArn").string(var_884);
    }
    if let Some(var_885) = &input.log_group_name {
        object.key("logGroupName").string(var_885);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_elasticsearch_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ElasticsearchAction,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_886) = &input.role_arn {
        object.key("roleArn").string(var_886);
    }
    if let Some(var_887) = &input.endpoint {
        object.key("endpoint").string(var_887);
    }
    if let Some(var_888) = &input.index {
        object.key("index").string(var_888);
    }
    if let Some(var_889) = &input.r#type {
        object.key("type").string(var_889);
    }
    if let Some(var_890) = &input.id {
        object.key("id").string(var_890);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_salesforce_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SalesforceAction,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_891) = &input.token {
        object.key("token").string(var_891);
    }
    if let Some(var_892) = &input.url {
        object.key("url").string(var_892);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_iot_analytics_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IotAnalyticsAction,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_893) = &input.channel_arn {
        object.key("channelArn").string(var_893);
    }
    if let Some(var_894) = &input.channel_name {
        object.key("channelName").string(var_894);
    }
    if let Some(var_895) = &input.batch_mode {
        object.key("batchMode").boolean(*var_895);
    }
    if let Some(var_896) = &input.role_arn {
        object.key("roleArn").string(var_896);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_iot_events_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IotEventsAction,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_897) = &input.input_name {
        object.key("inputName").string(var_897);
    }
    if let Some(var_898) = &input.message_id {
        object.key("messageId").string(var_898);
    }
    if let Some(var_899) = &input.batch_mode {
        object.key("batchMode").boolean(*var_899);
    }
    if let Some(var_900) = &input.role_arn {
        object.key("roleArn").string(var_900);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_iot_site_wise_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IotSiteWiseAction,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_901) = &input.put_asset_property_value_entries {
        let mut array_902 = object.key("putAssetPropertyValueEntries").start_array();
        for item_903 in var_901 {
            {
                let mut object_904 = array_902.value().start_object();
                crate::json_ser::serialize_structure_crate_model_put_asset_property_value_entry(
                    &mut object_904,
                    item_903,
                )?;
                object_904.finish();
            }
        }
        array_902.finish();
    }
    if let Some(var_905) = &input.role_arn {
        object.key("roleArn").string(var_905);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_step_functions_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StepFunctionsAction,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_906) = &input.execution_name_prefix {
        object.key("executionNamePrefix").string(var_906);
    }
    if let Some(var_907) = &input.state_machine_name {
        object.key("stateMachineName").string(var_907);
    }
    if let Some(var_908) = &input.role_arn {
        object.key("roleArn").string(var_908);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_timestream_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TimestreamAction,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_909) = &input.role_arn {
        object.key("roleArn").string(var_909);
    }
    if let Some(var_910) = &input.database_name {
        object.key("databaseName").string(var_910);
    }
    if let Some(var_911) = &input.table_name {
        object.key("tableName").string(var_911);
    }
    if let Some(var_912) = &input.dimensions {
        let mut array_913 = object.key("dimensions").start_array();
        for item_914 in var_912 {
            {
                let mut object_915 = array_913.value().start_object();
                crate::json_ser::serialize_structure_crate_model_timestream_dimension(
                    &mut object_915,
                    item_914,
                )?;
                object_915.finish();
            }
        }
        array_913.finish();
    }
    if let Some(var_916) = &input.timestamp {
        let mut object_917 = object.key("timestamp").start_object();
        crate::json_ser::serialize_structure_crate_model_timestream_timestamp(
            &mut object_917,
            var_916,
        )?;
        object_917.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_http_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HttpAction,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_918) = &input.url {
        object.key("url").string(var_918);
    }
    if let Some(var_919) = &input.confirmation_url {
        object.key("confirmationUrl").string(var_919);
    }
    if let Some(var_920) = &input.headers {
        let mut array_921 = object.key("headers").start_array();
        for item_922 in var_920 {
            {
                let mut object_923 = array_921.value().start_object();
                crate::json_ser::serialize_structure_crate_model_http_action_header(
                    &mut object_923,
                    item_922,
                )?;
                object_923.finish();
            }
        }
        array_921.finish();
    }
    if let Some(var_924) = &input.auth {
        let mut object_925 = object.key("auth").start_object();
        crate::json_ser::serialize_structure_crate_model_http_authorization(
            &mut object_925,
            var_924,
        )?;
        object_925.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_kafka_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KafkaAction,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_926) = &input.destination_arn {
        object.key("destinationArn").string(var_926);
    }
    if let Some(var_927) = &input.topic {
        object.key("topic").string(var_927);
    }
    if let Some(var_928) = &input.key {
        object.key("key").string(var_928);
    }
    if let Some(var_929) = &input.partition {
        object.key("partition").string(var_929);
    }
    if let Some(var_930) = &input.client_properties {
        let mut object_931 = object.key("clientProperties").start_object();
        for (key_932, value_933) in var_930 {
            {
                object_931.key(key_932).string(value_933);
            }
        }
        object_931.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_open_search_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OpenSearchAction,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_934) = &input.role_arn {
        object.key("roleArn").string(var_934);
    }
    if let Some(var_935) = &input.endpoint {
        object.key("endpoint").string(var_935);
    }
    if let Some(var_936) = &input.index {
        object.key("index").string(var_936);
    }
    if let Some(var_937) = &input.r#type {
        object.key("type").string(var_937);
    }
    if let Some(var_938) = &input.id {
        object.key("id").string(var_938);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_signing_profile_parameter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SigningProfileParameter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_939) = &input.certificate_arn {
        object.key("certificateArn").string(var_939);
    }
    if let Some(var_940) = &input.platform {
        object.key("platform").string(var_940);
    }
    if let Some(var_941) = &input.certificate_path_on_device {
        object.key("certificatePathOnDevice").string(var_941);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_destination(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Destination,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_942) = &input.s3_destination {
        let mut object_943 = object.key("s3Destination").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_destination(&mut object_943, var_942)?;
        object_943.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_code_signing_signature(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CodeSigningSignature,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_944) = &input.inline_document {
        object
            .key("inlineDocument")
            .string_unchecked(&aws_smithy_types::base64::encode(var_944));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_code_signing_certificate_chain(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CodeSigningCertificateChain,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_945) = &input.certificate_name {
        object.key("certificateName").string(var_945);
    }
    if let Some(var_946) = &input.inline_document {
        object.key("inlineDocument").string(var_946);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_put_item_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PutItemInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_947) = &input.table_name {
        object.key("tableName").string(var_947);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_put_asset_property_value_entry(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PutAssetPropertyValueEntry,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_948) = &input.entry_id {
        object.key("entryId").string(var_948);
    }
    if let Some(var_949) = &input.asset_id {
        object.key("assetId").string(var_949);
    }
    if let Some(var_950) = &input.property_id {
        object.key("propertyId").string(var_950);
    }
    if let Some(var_951) = &input.property_alias {
        object.key("propertyAlias").string(var_951);
    }
    if let Some(var_952) = &input.property_values {
        let mut array_953 = object.key("propertyValues").start_array();
        for item_954 in var_952 {
            {
                let mut object_955 = array_953.value().start_object();
                crate::json_ser::serialize_structure_crate_model_asset_property_value(
                    &mut object_955,
                    item_954,
                )?;
                object_955.finish();
            }
        }
        array_953.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_timestream_dimension(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TimestreamDimension,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_956) = &input.name {
        object.key("name").string(var_956);
    }
    if let Some(var_957) = &input.value {
        object.key("value").string(var_957);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_timestream_timestamp(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TimestreamTimestamp,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_958) = &input.value {
        object.key("value").string(var_958);
    }
    if let Some(var_959) = &input.unit {
        object.key("unit").string(var_959);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_http_action_header(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HttpActionHeader,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_960) = &input.key {
        object.key("key").string(var_960);
    }
    if let Some(var_961) = &input.value {
        object.key("value").string(var_961);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_http_authorization(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HttpAuthorization,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_962) = &input.sigv4 {
        let mut object_963 = object.key("sigv4").start_object();
        crate::json_ser::serialize_structure_crate_model_sig_v4_authorization(
            &mut object_963,
            var_962,
        )?;
        object_963.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_destination(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3Destination,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_964) = &input.bucket {
        object.key("bucket").string(var_964);
    }
    if let Some(var_965) = &input.prefix {
        object.key("prefix").string(var_965);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_asset_property_value(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AssetPropertyValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_966) = &input.value {
        let mut object_967 = object.key("value").start_object();
        crate::json_ser::serialize_union_crate_model_asset_property_variant(
            &mut object_967,
            var_966,
        )?;
        object_967.finish();
    }
    if let Some(var_968) = &input.timestamp {
        let mut object_969 = object.key("timestamp").start_object();
        crate::json_ser::serialize_structure_crate_model_asset_property_timestamp(
            &mut object_969,
            var_968,
        )?;
        object_969.finish();
    }
    if let Some(var_970) = &input.quality {
        object.key("quality").string(var_970);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sig_v4_authorization(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SigV4Authorization,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_971) = &input.signing_region {
        object.key("signingRegion").string(var_971);
    }
    if let Some(var_972) = &input.service_name {
        object.key("serviceName").string(var_972);
    }
    if let Some(var_973) = &input.role_arn {
        object.key("roleArn").string(var_973);
    }
    Ok(())
}

pub fn serialize_union_crate_model_asset_property_variant(
    object_967: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AssetPropertyVariant,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    match input {
        crate::model::AssetPropertyVariant::StringValue(inner) => {
            object_967.key("stringValue").string(inner);
        }
        crate::model::AssetPropertyVariant::IntegerValue(inner) => {
            object_967.key("integerValue").string(inner);
        }
        crate::model::AssetPropertyVariant::DoubleValue(inner) => {
            object_967.key("doubleValue").string(inner);
        }
        crate::model::AssetPropertyVariant::BooleanValue(inner) => {
            object_967.key("booleanValue").string(inner);
        }
        crate::model::AssetPropertyVariant::Unknown => {
            return Err(
                aws_smithy_http::operation::SerializationError::unknown_variant(
                    "AssetPropertyVariant",
                ),
            )
        }
    }
    Ok(())
}

pub fn serialize_structure_crate_model_asset_property_timestamp(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AssetPropertyTimestamp,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_974) = &input.time_in_seconds {
        object.key("timeInSeconds").string(var_974);
    }
    if let Some(var_975) = &input.offset_in_nanos {
        object.key("offsetInNanos").string(var_975);
    }
    Ok(())
}
