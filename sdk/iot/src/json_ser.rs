// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_add_thing_to_billing_group_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AddThingToBillingGroupInput,
) {
    if let Some(var_1) = &input.billing_group_arn {
        object.key("billingGroupArn").string(var_1);
    }
    if let Some(var_2) = &input.billing_group_name {
        object.key("billingGroupName").string(var_2);
    }
    if let Some(var_3) = &input.thing_arn {
        object.key("thingArn").string(var_3);
    }
    if let Some(var_4) = &input.thing_name {
        object.key("thingName").string(var_4);
    }
}

pub fn serialize_structure_add_thing_to_thing_group_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AddThingToThingGroupInput,
) {
    if input.override_dynamic_groups {
        object
            .key("overrideDynamicGroups")
            .boolean(input.override_dynamic_groups);
    }
    if let Some(var_5) = &input.thing_arn {
        object.key("thingArn").string(var_5);
    }
    if let Some(var_6) = &input.thing_group_arn {
        object.key("thingGroupArn").string(var_6);
    }
    if let Some(var_7) = &input.thing_group_name {
        object.key("thingGroupName").string(var_7);
    }
    if let Some(var_8) = &input.thing_name {
        object.key("thingName").string(var_8);
    }
}

pub fn serialize_structure_associate_targets_with_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateTargetsWithJobInput,
) {
    if let Some(var_9) = &input.comment {
        object.key("comment").string(var_9);
    }
    if let Some(var_10) = &input.targets {
        let mut array_11 = object.key("targets").start_array();
        for item_12 in var_10 {
            {
                array_11.value().string(item_12);
            }
        }
        array_11.finish();
    }
}

pub fn serialize_structure_attach_policy_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AttachPolicyInput,
) {
    if let Some(var_13) = &input.target {
        object.key("target").string(var_13);
    }
}

pub fn serialize_structure_cancel_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CancelJobInput,
) {
    if let Some(var_14) = &input.comment {
        object.key("comment").string(var_14);
    }
    if let Some(var_15) = &input.reason_code {
        object.key("reasonCode").string(var_15);
    }
}

pub fn serialize_structure_cancel_job_execution_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CancelJobExecutionInput,
) {
    if let Some(var_16) = &input.expected_version {
        object.key("expectedVersion").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_16).into()),
        );
    }
    if let Some(var_17) = &input.status_details {
        let mut object_18 = object.key("statusDetails").start_object();
        for (key_19, value_20) in var_17 {
            {
                object_18.key(key_19).string(value_20);
            }
        }
        object_18.finish();
    }
}

pub fn serialize_structure_create_audit_suppression_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAuditSuppressionInput,
) {
    if let Some(var_21) = &input.check_name {
        object.key("checkName").string(var_21);
    }
    if let Some(var_22) = &input.client_request_token {
        object.key("clientRequestToken").string(var_22);
    }
    if let Some(var_23) = &input.description {
        object.key("description").string(var_23);
    }
    if let Some(var_24) = &input.expiration_date {
        object
            .key("expirationDate")
            .instant(var_24, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_25) = &input.resource_identifier {
        let mut object_26 = object.key("resourceIdentifier").start_object();
        crate::json_ser::serialize_structure_resource_identifier(&mut object_26, var_25);
        object_26.finish();
    }
    if let Some(var_27) = &input.suppress_indefinitely {
        object.key("suppressIndefinitely").boolean(*var_27);
    }
}

pub fn serialize_structure_create_authorizer_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAuthorizerInput,
) {
    if let Some(var_28) = &input.authorizer_function_arn {
        object.key("authorizerFunctionArn").string(var_28);
    }
    if let Some(var_29) = &input.signing_disabled {
        object.key("signingDisabled").boolean(*var_29);
    }
    if let Some(var_30) = &input.status {
        object.key("status").string(var_30.as_str());
    }
    if let Some(var_31) = &input.tags {
        let mut array_32 = object.key("tags").start_array();
        for item_33 in var_31 {
            {
                let mut object_34 = array_32.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_34, item_33);
                object_34.finish();
            }
        }
        array_32.finish();
    }
    if let Some(var_35) = &input.token_key_name {
        object.key("tokenKeyName").string(var_35);
    }
    if let Some(var_36) = &input.token_signing_public_keys {
        let mut object_37 = object.key("tokenSigningPublicKeys").start_object();
        for (key_38, value_39) in var_36 {
            {
                object_37.key(key_38).string(value_39);
            }
        }
        object_37.finish();
    }
}

pub fn serialize_structure_create_billing_group_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateBillingGroupInput,
) {
    if let Some(var_40) = &input.billing_group_properties {
        let mut object_41 = object.key("billingGroupProperties").start_object();
        crate::json_ser::serialize_structure_billing_group_properties(&mut object_41, var_40);
        object_41.finish();
    }
    if let Some(var_42) = &input.tags {
        let mut array_43 = object.key("tags").start_array();
        for item_44 in var_42 {
            {
                let mut object_45 = array_43.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_45, item_44);
                object_45.finish();
            }
        }
        array_43.finish();
    }
}

pub fn serialize_structure_create_certificate_from_csr_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateCertificateFromCsrInput,
) {
    if let Some(var_46) = &input.certificate_signing_request {
        object.key("certificateSigningRequest").string(var_46);
    }
}

pub fn serialize_structure_create_custom_metric_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateCustomMetricInput,
) {
    if let Some(var_47) = &input.client_request_token {
        object.key("clientRequestToken").string(var_47);
    }
    if let Some(var_48) = &input.display_name {
        object.key("displayName").string(var_48);
    }
    if let Some(var_49) = &input.metric_type {
        object.key("metricType").string(var_49.as_str());
    }
    if let Some(var_50) = &input.tags {
        let mut array_51 = object.key("tags").start_array();
        for item_52 in var_50 {
            {
                let mut object_53 = array_51.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_53, item_52);
                object_53.finish();
            }
        }
        array_51.finish();
    }
}

pub fn serialize_structure_create_dimension_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDimensionInput,
) {
    if let Some(var_54) = &input.client_request_token {
        object.key("clientRequestToken").string(var_54);
    }
    if let Some(var_55) = &input.string_values {
        let mut array_56 = object.key("stringValues").start_array();
        for item_57 in var_55 {
            {
                array_56.value().string(item_57);
            }
        }
        array_56.finish();
    }
    if let Some(var_58) = &input.tags {
        let mut array_59 = object.key("tags").start_array();
        for item_60 in var_58 {
            {
                let mut object_61 = array_59.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_61, item_60);
                object_61.finish();
            }
        }
        array_59.finish();
    }
    if let Some(var_62) = &input.r#type {
        object.key("type").string(var_62.as_str());
    }
}

pub fn serialize_structure_create_domain_configuration_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDomainConfigurationInput,
) {
    if let Some(var_63) = &input.authorizer_config {
        let mut object_64 = object.key("authorizerConfig").start_object();
        crate::json_ser::serialize_structure_authorizer_config(&mut object_64, var_63);
        object_64.finish();
    }
    if let Some(var_65) = &input.domain_name {
        object.key("domainName").string(var_65);
    }
    if let Some(var_66) = &input.server_certificate_arns {
        let mut array_67 = object.key("serverCertificateArns").start_array();
        for item_68 in var_66 {
            {
                array_67.value().string(item_68);
            }
        }
        array_67.finish();
    }
    if let Some(var_69) = &input.service_type {
        object.key("serviceType").string(var_69.as_str());
    }
    if let Some(var_70) = &input.tags {
        let mut array_71 = object.key("tags").start_array();
        for item_72 in var_70 {
            {
                let mut object_73 = array_71.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_73, item_72);
                object_73.finish();
            }
        }
        array_71.finish();
    }
    if let Some(var_74) = &input.validation_certificate_arn {
        object.key("validationCertificateArn").string(var_74);
    }
}

pub fn serialize_structure_create_dynamic_thing_group_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDynamicThingGroupInput,
) {
    if let Some(var_75) = &input.index_name {
        object.key("indexName").string(var_75);
    }
    if let Some(var_76) = &input.query_string {
        object.key("queryString").string(var_76);
    }
    if let Some(var_77) = &input.query_version {
        object.key("queryVersion").string(var_77);
    }
    if let Some(var_78) = &input.tags {
        let mut array_79 = object.key("tags").start_array();
        for item_80 in var_78 {
            {
                let mut object_81 = array_79.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_81, item_80);
                object_81.finish();
            }
        }
        array_79.finish();
    }
    if let Some(var_82) = &input.thing_group_properties {
        let mut object_83 = object.key("thingGroupProperties").start_object();
        crate::json_ser::serialize_structure_thing_group_properties(&mut object_83, var_82);
        object_83.finish();
    }
}

pub fn serialize_structure_create_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateJobInput,
) {
    if let Some(var_84) = &input.abort_config {
        let mut object_85 = object.key("abortConfig").start_object();
        crate::json_ser::serialize_structure_abort_config(&mut object_85, var_84);
        object_85.finish();
    }
    if let Some(var_86) = &input.description {
        object.key("description").string(var_86);
    }
    if let Some(var_87) = &input.document {
        object.key("document").string(var_87);
    }
    if let Some(var_88) = &input.document_source {
        object.key("documentSource").string(var_88);
    }
    if let Some(var_89) = &input.job_executions_rollout_config {
        let mut object_90 = object.key("jobExecutionsRolloutConfig").start_object();
        crate::json_ser::serialize_structure_job_executions_rollout_config(&mut object_90, var_89);
        object_90.finish();
    }
    if let Some(var_91) = &input.job_template_arn {
        object.key("jobTemplateArn").string(var_91);
    }
    if let Some(var_92) = &input.namespace_id {
        object.key("namespaceId").string(var_92);
    }
    if let Some(var_93) = &input.presigned_url_config {
        let mut object_94 = object.key("presignedUrlConfig").start_object();
        crate::json_ser::serialize_structure_presigned_url_config(&mut object_94, var_93);
        object_94.finish();
    }
    if let Some(var_95) = &input.tags {
        let mut array_96 = object.key("tags").start_array();
        for item_97 in var_95 {
            {
                let mut object_98 = array_96.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_98, item_97);
                object_98.finish();
            }
        }
        array_96.finish();
    }
    if let Some(var_99) = &input.target_selection {
        object.key("targetSelection").string(var_99.as_str());
    }
    if let Some(var_100) = &input.targets {
        let mut array_101 = object.key("targets").start_array();
        for item_102 in var_100 {
            {
                array_101.value().string(item_102);
            }
        }
        array_101.finish();
    }
    if let Some(var_103) = &input.timeout_config {
        let mut object_104 = object.key("timeoutConfig").start_object();
        crate::json_ser::serialize_structure_timeout_config(&mut object_104, var_103);
        object_104.finish();
    }
}

pub fn serialize_structure_create_job_template_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateJobTemplateInput,
) {
    if let Some(var_105) = &input.abort_config {
        let mut object_106 = object.key("abortConfig").start_object();
        crate::json_ser::serialize_structure_abort_config(&mut object_106, var_105);
        object_106.finish();
    }
    if let Some(var_107) = &input.description {
        object.key("description").string(var_107);
    }
    if let Some(var_108) = &input.document {
        object.key("document").string(var_108);
    }
    if let Some(var_109) = &input.document_source {
        object.key("documentSource").string(var_109);
    }
    if let Some(var_110) = &input.job_arn {
        object.key("jobArn").string(var_110);
    }
    if let Some(var_111) = &input.job_executions_rollout_config {
        let mut object_112 = object.key("jobExecutionsRolloutConfig").start_object();
        crate::json_ser::serialize_structure_job_executions_rollout_config(
            &mut object_112,
            var_111,
        );
        object_112.finish();
    }
    if let Some(var_113) = &input.presigned_url_config {
        let mut object_114 = object.key("presignedUrlConfig").start_object();
        crate::json_ser::serialize_structure_presigned_url_config(&mut object_114, var_113);
        object_114.finish();
    }
    if let Some(var_115) = &input.tags {
        let mut array_116 = object.key("tags").start_array();
        for item_117 in var_115 {
            {
                let mut object_118 = array_116.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_118, item_117);
                object_118.finish();
            }
        }
        array_116.finish();
    }
    if let Some(var_119) = &input.timeout_config {
        let mut object_120 = object.key("timeoutConfig").start_object();
        crate::json_ser::serialize_structure_timeout_config(&mut object_120, var_119);
        object_120.finish();
    }
}

pub fn serialize_structure_create_mitigation_action_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateMitigationActionInput,
) {
    if let Some(var_121) = &input.action_params {
        let mut object_122 = object.key("actionParams").start_object();
        crate::json_ser::serialize_structure_mitigation_action_params(&mut object_122, var_121);
        object_122.finish();
    }
    if let Some(var_123) = &input.role_arn {
        object.key("roleArn").string(var_123);
    }
    if let Some(var_124) = &input.tags {
        let mut array_125 = object.key("tags").start_array();
        for item_126 in var_124 {
            {
                let mut object_127 = array_125.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_127, item_126);
                object_127.finish();
            }
        }
        array_125.finish();
    }
}

pub fn serialize_structure_create_ota_update_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateOtaUpdateInput,
) {
    if let Some(var_128) = &input.additional_parameters {
        let mut object_129 = object.key("additionalParameters").start_object();
        for (key_130, value_131) in var_128 {
            {
                object_129.key(key_130).string(value_131);
            }
        }
        object_129.finish();
    }
    if let Some(var_132) = &input.aws_job_abort_config {
        let mut object_133 = object.key("awsJobAbortConfig").start_object();
        crate::json_ser::serialize_structure_aws_job_abort_config(&mut object_133, var_132);
        object_133.finish();
    }
    if let Some(var_134) = &input.aws_job_executions_rollout_config {
        let mut object_135 = object.key("awsJobExecutionsRolloutConfig").start_object();
        crate::json_ser::serialize_structure_aws_job_executions_rollout_config(
            &mut object_135,
            var_134,
        );
        object_135.finish();
    }
    if let Some(var_136) = &input.aws_job_presigned_url_config {
        let mut object_137 = object.key("awsJobPresignedUrlConfig").start_object();
        crate::json_ser::serialize_structure_aws_job_presigned_url_config(&mut object_137, var_136);
        object_137.finish();
    }
    if let Some(var_138) = &input.aws_job_timeout_config {
        let mut object_139 = object.key("awsJobTimeoutConfig").start_object();
        crate::json_ser::serialize_structure_aws_job_timeout_config(&mut object_139, var_138);
        object_139.finish();
    }
    if let Some(var_140) = &input.description {
        object.key("description").string(var_140);
    }
    if let Some(var_141) = &input.files {
        let mut array_142 = object.key("files").start_array();
        for item_143 in var_141 {
            {
                let mut object_144 = array_142.value().start_object();
                crate::json_ser::serialize_structure_ota_update_file(&mut object_144, item_143);
                object_144.finish();
            }
        }
        array_142.finish();
    }
    if let Some(var_145) = &input.protocols {
        let mut array_146 = object.key("protocols").start_array();
        for item_147 in var_145 {
            {
                array_146.value().string(item_147.as_str());
            }
        }
        array_146.finish();
    }
    if let Some(var_148) = &input.role_arn {
        object.key("roleArn").string(var_148);
    }
    if let Some(var_149) = &input.tags {
        let mut array_150 = object.key("tags").start_array();
        for item_151 in var_149 {
            {
                let mut object_152 = array_150.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_152, item_151);
                object_152.finish();
            }
        }
        array_150.finish();
    }
    if let Some(var_153) = &input.target_selection {
        object.key("targetSelection").string(var_153.as_str());
    }
    if let Some(var_154) = &input.targets {
        let mut array_155 = object.key("targets").start_array();
        for item_156 in var_154 {
            {
                array_155.value().string(item_156);
            }
        }
        array_155.finish();
    }
}

pub fn serialize_structure_create_policy_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreatePolicyInput,
) {
    if let Some(var_157) = &input.policy_document {
        object.key("policyDocument").string(var_157);
    }
    if let Some(var_158) = &input.tags {
        let mut array_159 = object.key("tags").start_array();
        for item_160 in var_158 {
            {
                let mut object_161 = array_159.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_161, item_160);
                object_161.finish();
            }
        }
        array_159.finish();
    }
}

pub fn serialize_structure_create_policy_version_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreatePolicyVersionInput,
) {
    if let Some(var_162) = &input.policy_document {
        object.key("policyDocument").string(var_162);
    }
}

pub fn serialize_structure_create_provisioning_template_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateProvisioningTemplateInput,
) {
    if let Some(var_163) = &input.description {
        object.key("description").string(var_163);
    }
    if input.enabled {
        object.key("enabled").boolean(input.enabled);
    }
    if let Some(var_164) = &input.pre_provisioning_hook {
        let mut object_165 = object.key("preProvisioningHook").start_object();
        crate::json_ser::serialize_structure_provisioning_hook(&mut object_165, var_164);
        object_165.finish();
    }
    if let Some(var_166) = &input.provisioning_role_arn {
        object.key("provisioningRoleArn").string(var_166);
    }
    if let Some(var_167) = &input.tags {
        let mut array_168 = object.key("tags").start_array();
        for item_169 in var_167 {
            {
                let mut object_170 = array_168.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_170, item_169);
                object_170.finish();
            }
        }
        array_168.finish();
    }
    if let Some(var_171) = &input.template_body {
        object.key("templateBody").string(var_171);
    }
    if let Some(var_172) = &input.template_name {
        object.key("templateName").string(var_172);
    }
}

pub fn serialize_structure_create_provisioning_template_version_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateProvisioningTemplateVersionInput,
) {
    if let Some(var_173) = &input.template_body {
        object.key("templateBody").string(var_173);
    }
}

pub fn serialize_structure_create_role_alias_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateRoleAliasInput,
) {
    if let Some(var_174) = &input.credential_duration_seconds {
        object.key("credentialDurationSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_174).into()),
        );
    }
    if let Some(var_175) = &input.role_arn {
        object.key("roleArn").string(var_175);
    }
    if let Some(var_176) = &input.tags {
        let mut array_177 = object.key("tags").start_array();
        for item_178 in var_176 {
            {
                let mut object_179 = array_177.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_179, item_178);
                object_179.finish();
            }
        }
        array_177.finish();
    }
}

pub fn serialize_structure_create_scheduled_audit_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateScheduledAuditInput,
) {
    if let Some(var_180) = &input.day_of_month {
        object.key("dayOfMonth").string(var_180);
    }
    if let Some(var_181) = &input.day_of_week {
        object.key("dayOfWeek").string(var_181.as_str());
    }
    if let Some(var_182) = &input.frequency {
        object.key("frequency").string(var_182.as_str());
    }
    if let Some(var_183) = &input.tags {
        let mut array_184 = object.key("tags").start_array();
        for item_185 in var_183 {
            {
                let mut object_186 = array_184.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_186, item_185);
                object_186.finish();
            }
        }
        array_184.finish();
    }
    if let Some(var_187) = &input.target_check_names {
        let mut array_188 = object.key("targetCheckNames").start_array();
        for item_189 in var_187 {
            {
                array_188.value().string(item_189);
            }
        }
        array_188.finish();
    }
}

pub fn serialize_structure_create_security_profile_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateSecurityProfileInput,
) {
    if let Some(var_190) = &input.additional_metrics_to_retain {
        let mut array_191 = object.key("additionalMetricsToRetain").start_array();
        for item_192 in var_190 {
            {
                array_191.value().string(item_192);
            }
        }
        array_191.finish();
    }
    if let Some(var_193) = &input.additional_metrics_to_retain_v2 {
        let mut array_194 = object.key("additionalMetricsToRetainV2").start_array();
        for item_195 in var_193 {
            {
                let mut object_196 = array_194.value().start_object();
                crate::json_ser::serialize_structure_metric_to_retain(&mut object_196, item_195);
                object_196.finish();
            }
        }
        array_194.finish();
    }
    if let Some(var_197) = &input.alert_targets {
        let mut object_198 = object.key("alertTargets").start_object();
        for (key_199, value_200) in var_197 {
            {
                let mut object_201 = object_198.key(key_199.as_str()).start_object();
                crate::json_ser::serialize_structure_alert_target(&mut object_201, value_200);
                object_201.finish();
            }
        }
        object_198.finish();
    }
    if let Some(var_202) = &input.behaviors {
        let mut array_203 = object.key("behaviors").start_array();
        for item_204 in var_202 {
            {
                let mut object_205 = array_203.value().start_object();
                crate::json_ser::serialize_structure_behavior(&mut object_205, item_204);
                object_205.finish();
            }
        }
        array_203.finish();
    }
    if let Some(var_206) = &input.security_profile_description {
        object.key("securityProfileDescription").string(var_206);
    }
    if let Some(var_207) = &input.tags {
        let mut array_208 = object.key("tags").start_array();
        for item_209 in var_207 {
            {
                let mut object_210 = array_208.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_210, item_209);
                object_210.finish();
            }
        }
        array_208.finish();
    }
}

pub fn serialize_structure_create_stream_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateStreamInput,
) {
    if let Some(var_211) = &input.description {
        object.key("description").string(var_211);
    }
    if let Some(var_212) = &input.files {
        let mut array_213 = object.key("files").start_array();
        for item_214 in var_212 {
            {
                let mut object_215 = array_213.value().start_object();
                crate::json_ser::serialize_structure_stream_file(&mut object_215, item_214);
                object_215.finish();
            }
        }
        array_213.finish();
    }
    if let Some(var_216) = &input.role_arn {
        object.key("roleArn").string(var_216);
    }
    if let Some(var_217) = &input.tags {
        let mut array_218 = object.key("tags").start_array();
        for item_219 in var_217 {
            {
                let mut object_220 = array_218.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_220, item_219);
                object_220.finish();
            }
        }
        array_218.finish();
    }
}

pub fn serialize_structure_create_thing_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateThingInput,
) {
    if let Some(var_221) = &input.attribute_payload {
        let mut object_222 = object.key("attributePayload").start_object();
        crate::json_ser::serialize_structure_attribute_payload(&mut object_222, var_221);
        object_222.finish();
    }
    if let Some(var_223) = &input.billing_group_name {
        object.key("billingGroupName").string(var_223);
    }
    if let Some(var_224) = &input.thing_type_name {
        object.key("thingTypeName").string(var_224);
    }
}

pub fn serialize_structure_create_thing_group_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateThingGroupInput,
) {
    if let Some(var_225) = &input.parent_group_name {
        object.key("parentGroupName").string(var_225);
    }
    if let Some(var_226) = &input.tags {
        let mut array_227 = object.key("tags").start_array();
        for item_228 in var_226 {
            {
                let mut object_229 = array_227.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_229, item_228);
                object_229.finish();
            }
        }
        array_227.finish();
    }
    if let Some(var_230) = &input.thing_group_properties {
        let mut object_231 = object.key("thingGroupProperties").start_object();
        crate::json_ser::serialize_structure_thing_group_properties(&mut object_231, var_230);
        object_231.finish();
    }
}

pub fn serialize_structure_create_thing_type_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateThingTypeInput,
) {
    if let Some(var_232) = &input.tags {
        let mut array_233 = object.key("tags").start_array();
        for item_234 in var_232 {
            {
                let mut object_235 = array_233.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_235, item_234);
                object_235.finish();
            }
        }
        array_233.finish();
    }
    if let Some(var_236) = &input.thing_type_properties {
        let mut object_237 = object.key("thingTypeProperties").start_object();
        crate::json_ser::serialize_structure_thing_type_properties(&mut object_237, var_236);
        object_237.finish();
    }
}

pub fn serialize_structure_create_topic_rule_destination_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateTopicRuleDestinationInput,
) {
    if let Some(var_238) = &input.destination_configuration {
        let mut object_239 = object.key("destinationConfiguration").start_object();
        crate::json_ser::serialize_structure_topic_rule_destination_configuration(
            &mut object_239,
            var_238,
        );
        object_239.finish();
    }
}

pub fn serialize_structure_delete_audit_suppression_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteAuditSuppressionInput,
) {
    if let Some(var_240) = &input.check_name {
        object.key("checkName").string(var_240);
    }
    if let Some(var_241) = &input.resource_identifier {
        let mut object_242 = object.key("resourceIdentifier").start_object();
        crate::json_ser::serialize_structure_resource_identifier(&mut object_242, var_241);
        object_242.finish();
    }
}

pub fn serialize_structure_deprecate_thing_type_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeprecateThingTypeInput,
) {
    if input.undo_deprecate {
        object.key("undoDeprecate").boolean(input.undo_deprecate);
    }
}

pub fn serialize_structure_describe_audit_suppression_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeAuditSuppressionInput,
) {
    if let Some(var_243) = &input.check_name {
        object.key("checkName").string(var_243);
    }
    if let Some(var_244) = &input.resource_identifier {
        let mut object_245 = object.key("resourceIdentifier").start_object();
        crate::json_ser::serialize_structure_resource_identifier(&mut object_245, var_244);
        object_245.finish();
    }
}

pub fn serialize_structure_detach_policy_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DetachPolicyInput,
) {
    if let Some(var_246) = &input.target {
        object.key("target").string(var_246);
    }
}

pub fn serialize_structure_get_cardinality_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetCardinalityInput,
) {
    if let Some(var_247) = &input.aggregation_field {
        object.key("aggregationField").string(var_247);
    }
    if let Some(var_248) = &input.index_name {
        object.key("indexName").string(var_248);
    }
    if let Some(var_249) = &input.query_string {
        object.key("queryString").string(var_249);
    }
    if let Some(var_250) = &input.query_version {
        object.key("queryVersion").string(var_250);
    }
}

pub fn serialize_structure_get_effective_policies_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetEffectivePoliciesInput,
) {
    if let Some(var_251) = &input.cognito_identity_pool_id {
        object.key("cognitoIdentityPoolId").string(var_251);
    }
    if let Some(var_252) = &input.principal {
        object.key("principal").string(var_252);
    }
}

pub fn serialize_structure_get_percentiles_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetPercentilesInput,
) {
    if let Some(var_253) = &input.aggregation_field {
        object.key("aggregationField").string(var_253);
    }
    if let Some(var_254) = &input.index_name {
        object.key("indexName").string(var_254);
    }
    if let Some(var_255) = &input.percents {
        let mut array_256 = object.key("percents").start_array();
        for item_257 in var_255 {
            {
                array_256.value().number(
                    #[allow(clippy::useless_conversion)]
                    smithy_types::Number::Float((*item_257).into()),
                );
            }
        }
        array_256.finish();
    }
    if let Some(var_258) = &input.query_string {
        object.key("queryString").string(var_258);
    }
    if let Some(var_259) = &input.query_version {
        object.key("queryVersion").string(var_259);
    }
}

pub fn serialize_structure_get_statistics_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetStatisticsInput,
) {
    if let Some(var_260) = &input.aggregation_field {
        object.key("aggregationField").string(var_260);
    }
    if let Some(var_261) = &input.index_name {
        object.key("indexName").string(var_261);
    }
    if let Some(var_262) = &input.query_string {
        object.key("queryString").string(var_262);
    }
    if let Some(var_263) = &input.query_version {
        object.key("queryVersion").string(var_263);
    }
}

pub fn serialize_structure_list_audit_findings_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAuditFindingsInput,
) {
    if let Some(var_264) = &input.check_name {
        object.key("checkName").string(var_264);
    }
    if let Some(var_265) = &input.end_time {
        object
            .key("endTime")
            .instant(var_265, smithy_types::instant::Format::EpochSeconds);
    }
    if input.list_suppressed_findings {
        object
            .key("listSuppressedFindings")
            .boolean(input.list_suppressed_findings);
    }
    if let Some(var_266) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_266).into()),
        );
    }
    if let Some(var_267) = &input.next_token {
        object.key("nextToken").string(var_267);
    }
    if let Some(var_268) = &input.resource_identifier {
        let mut object_269 = object.key("resourceIdentifier").start_object();
        crate::json_ser::serialize_structure_resource_identifier(&mut object_269, var_268);
        object_269.finish();
    }
    if let Some(var_270) = &input.start_time {
        object
            .key("startTime")
            .instant(var_270, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_271) = &input.task_id {
        object.key("taskId").string(var_271);
    }
}

pub fn serialize_structure_list_audit_suppressions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAuditSuppressionsInput,
) {
    if input.ascending_order {
        object.key("ascendingOrder").boolean(input.ascending_order);
    }
    if let Some(var_272) = &input.check_name {
        object.key("checkName").string(var_272);
    }
    if let Some(var_273) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_273).into()),
        );
    }
    if let Some(var_274) = &input.next_token {
        object.key("nextToken").string(var_274);
    }
    if let Some(var_275) = &input.resource_identifier {
        let mut object_276 = object.key("resourceIdentifier").start_object();
        crate::json_ser::serialize_structure_resource_identifier(&mut object_276, var_275);
        object_276.finish();
    }
}

pub fn serialize_structure_register_ca_certificate_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RegisterCaCertificateInput,
) {
    if let Some(var_277) = &input.ca_certificate {
        object.key("caCertificate").string(var_277);
    }
    if let Some(var_278) = &input.registration_config {
        let mut object_279 = object.key("registrationConfig").start_object();
        crate::json_ser::serialize_structure_registration_config(&mut object_279, var_278);
        object_279.finish();
    }
    if let Some(var_280) = &input.tags {
        let mut array_281 = object.key("tags").start_array();
        for item_282 in var_280 {
            {
                let mut object_283 = array_281.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_283, item_282);
                object_283.finish();
            }
        }
        array_281.finish();
    }
    if let Some(var_284) = &input.verification_certificate {
        object.key("verificationCertificate").string(var_284);
    }
}

pub fn serialize_structure_register_certificate_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RegisterCertificateInput,
) {
    if let Some(var_285) = &input.ca_certificate_pem {
        object.key("caCertificatePem").string(var_285);
    }
    if let Some(var_286) = &input.certificate_pem {
        object.key("certificatePem").string(var_286);
    }
    if let Some(var_287) = &input.status {
        object.key("status").string(var_287.as_str());
    }
}

pub fn serialize_structure_register_certificate_without_ca_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RegisterCertificateWithoutCaInput,
) {
    if let Some(var_288) = &input.certificate_pem {
        object.key("certificatePem").string(var_288);
    }
    if let Some(var_289) = &input.status {
        object.key("status").string(var_289.as_str());
    }
}

pub fn serialize_structure_register_thing_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RegisterThingInput,
) {
    if let Some(var_290) = &input.parameters {
        let mut object_291 = object.key("parameters").start_object();
        for (key_292, value_293) in var_290 {
            {
                object_291.key(key_292).string(value_293);
            }
        }
        object_291.finish();
    }
    if let Some(var_294) = &input.template_body {
        object.key("templateBody").string(var_294);
    }
}

pub fn serialize_structure_reject_certificate_transfer_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RejectCertificateTransferInput,
) {
    if let Some(var_295) = &input.reject_reason {
        object.key("rejectReason").string(var_295);
    }
}

pub fn serialize_structure_remove_thing_from_billing_group_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RemoveThingFromBillingGroupInput,
) {
    if let Some(var_296) = &input.billing_group_arn {
        object.key("billingGroupArn").string(var_296);
    }
    if let Some(var_297) = &input.billing_group_name {
        object.key("billingGroupName").string(var_297);
    }
    if let Some(var_298) = &input.thing_arn {
        object.key("thingArn").string(var_298);
    }
    if let Some(var_299) = &input.thing_name {
        object.key("thingName").string(var_299);
    }
}

pub fn serialize_structure_remove_thing_from_thing_group_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RemoveThingFromThingGroupInput,
) {
    if let Some(var_300) = &input.thing_arn {
        object.key("thingArn").string(var_300);
    }
    if let Some(var_301) = &input.thing_group_arn {
        object.key("thingGroupArn").string(var_301);
    }
    if let Some(var_302) = &input.thing_group_name {
        object.key("thingGroupName").string(var_302);
    }
    if let Some(var_303) = &input.thing_name {
        object.key("thingName").string(var_303);
    }
}

pub fn serialize_structure_search_index_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SearchIndexInput,
) {
    if let Some(var_304) = &input.index_name {
        object.key("indexName").string(var_304);
    }
    if let Some(var_305) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_305).into()),
        );
    }
    if let Some(var_306) = &input.next_token {
        object.key("nextToken").string(var_306);
    }
    if let Some(var_307) = &input.query_string {
        object.key("queryString").string(var_307);
    }
    if let Some(var_308) = &input.query_version {
        object.key("queryVersion").string(var_308);
    }
}

pub fn serialize_structure_set_default_authorizer_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SetDefaultAuthorizerInput,
) {
    if let Some(var_309) = &input.authorizer_name {
        object.key("authorizerName").string(var_309);
    }
}

pub fn serialize_structure_set_v2_logging_level_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SetV2LoggingLevelInput,
) {
    if let Some(var_310) = &input.log_level {
        object.key("logLevel").string(var_310.as_str());
    }
    if let Some(var_311) = &input.log_target {
        let mut object_312 = object.key("logTarget").start_object();
        crate::json_ser::serialize_structure_log_target(&mut object_312, var_311);
        object_312.finish();
    }
}

pub fn serialize_structure_set_v2_logging_options_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SetV2LoggingOptionsInput,
) {
    if let Some(var_313) = &input.default_log_level {
        object.key("defaultLogLevel").string(var_313.as_str());
    }
    if input.disable_all_logs {
        object.key("disableAllLogs").boolean(input.disable_all_logs);
    }
    if let Some(var_314) = &input.role_arn {
        object.key("roleArn").string(var_314);
    }
}

pub fn serialize_structure_start_audit_mitigation_actions_task_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartAuditMitigationActionsTaskInput,
) {
    if let Some(var_315) = &input.audit_check_to_actions_mapping {
        let mut object_316 = object.key("auditCheckToActionsMapping").start_object();
        for (key_317, value_318) in var_315 {
            {
                let mut array_319 = object_316.key(key_317).start_array();
                for item_320 in value_318 {
                    {
                        array_319.value().string(item_320);
                    }
                }
                array_319.finish();
            }
        }
        object_316.finish();
    }
    if let Some(var_321) = &input.client_request_token {
        object.key("clientRequestToken").string(var_321);
    }
    if let Some(var_322) = &input.target {
        let mut object_323 = object.key("target").start_object();
        crate::json_ser::serialize_structure_audit_mitigation_actions_task_target(
            &mut object_323,
            var_322,
        );
        object_323.finish();
    }
}

pub fn serialize_structure_start_detect_mitigation_actions_task_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartDetectMitigationActionsTaskInput,
) {
    if let Some(var_324) = &input.actions {
        let mut array_325 = object.key("actions").start_array();
        for item_326 in var_324 {
            {
                array_325.value().string(item_326);
            }
        }
        array_325.finish();
    }
    if let Some(var_327) = &input.client_request_token {
        object.key("clientRequestToken").string(var_327);
    }
    if let Some(var_328) = &input.include_only_active_violations {
        object.key("includeOnlyActiveViolations").boolean(*var_328);
    }
    if let Some(var_329) = &input.include_suppressed_alerts {
        object.key("includeSuppressedAlerts").boolean(*var_329);
    }
    if let Some(var_330) = &input.target {
        let mut object_331 = object.key("target").start_object();
        crate::json_ser::serialize_structure_detect_mitigation_actions_task_target(
            &mut object_331,
            var_330,
        );
        object_331.finish();
    }
    if let Some(var_332) = &input.violation_event_occurrence_range {
        let mut object_333 = object.key("violationEventOccurrenceRange").start_object();
        crate::json_ser::serialize_structure_violation_event_occurrence_range(
            &mut object_333,
            var_332,
        );
        object_333.finish();
    }
}

pub fn serialize_structure_start_on_demand_audit_task_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartOnDemandAuditTaskInput,
) {
    if let Some(var_334) = &input.target_check_names {
        let mut array_335 = object.key("targetCheckNames").start_array();
        for item_336 in var_334 {
            {
                array_335.value().string(item_336);
            }
        }
        array_335.finish();
    }
}

pub fn serialize_structure_start_thing_registration_task_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartThingRegistrationTaskInput,
) {
    if let Some(var_337) = &input.input_file_bucket {
        object.key("inputFileBucket").string(var_337);
    }
    if let Some(var_338) = &input.input_file_key {
        object.key("inputFileKey").string(var_338);
    }
    if let Some(var_339) = &input.role_arn {
        object.key("roleArn").string(var_339);
    }
    if let Some(var_340) = &input.template_body {
        object.key("templateBody").string(var_340);
    }
}

pub fn serialize_structure_tag_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) {
    if let Some(var_341) = &input.resource_arn {
        object.key("resourceArn").string(var_341);
    }
    if let Some(var_342) = &input.tags {
        let mut array_343 = object.key("tags").start_array();
        for item_344 in var_342 {
            {
                let mut object_345 = array_343.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_345, item_344);
                object_345.finish();
            }
        }
        array_343.finish();
    }
}

pub fn serialize_structure_test_authorization_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TestAuthorizationInput,
) {
    if let Some(var_346) = &input.auth_infos {
        let mut array_347 = object.key("authInfos").start_array();
        for item_348 in var_346 {
            {
                let mut object_349 = array_347.value().start_object();
                crate::json_ser::serialize_structure_auth_info(&mut object_349, item_348);
                object_349.finish();
            }
        }
        array_347.finish();
    }
    if let Some(var_350) = &input.cognito_identity_pool_id {
        object.key("cognitoIdentityPoolId").string(var_350);
    }
    if let Some(var_351) = &input.policy_names_to_add {
        let mut array_352 = object.key("policyNamesToAdd").start_array();
        for item_353 in var_351 {
            {
                array_352.value().string(item_353);
            }
        }
        array_352.finish();
    }
    if let Some(var_354) = &input.policy_names_to_skip {
        let mut array_355 = object.key("policyNamesToSkip").start_array();
        for item_356 in var_354 {
            {
                array_355.value().string(item_356);
            }
        }
        array_355.finish();
    }
    if let Some(var_357) = &input.principal {
        object.key("principal").string(var_357);
    }
}

pub fn serialize_structure_test_invoke_authorizer_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TestInvokeAuthorizerInput,
) {
    if let Some(var_358) = &input.http_context {
        let mut object_359 = object.key("httpContext").start_object();
        crate::json_ser::serialize_structure_http_context(&mut object_359, var_358);
        object_359.finish();
    }
    if let Some(var_360) = &input.mqtt_context {
        let mut object_361 = object.key("mqttContext").start_object();
        crate::json_ser::serialize_structure_mqtt_context(&mut object_361, var_360);
        object_361.finish();
    }
    if let Some(var_362) = &input.tls_context {
        let mut object_363 = object.key("tlsContext").start_object();
        crate::json_ser::serialize_structure_tls_context(&mut object_363, var_362);
        object_363.finish();
    }
    if let Some(var_364) = &input.token {
        object.key("token").string(var_364);
    }
    if let Some(var_365) = &input.token_signature {
        object.key("tokenSignature").string(var_365);
    }
}

pub fn serialize_structure_transfer_certificate_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TransferCertificateInput,
) {
    if let Some(var_366) = &input.transfer_message {
        object.key("transferMessage").string(var_366);
    }
}

pub fn serialize_structure_untag_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UntagResourceInput,
) {
    if let Some(var_367) = &input.resource_arn {
        object.key("resourceArn").string(var_367);
    }
    if let Some(var_368) = &input.tag_keys {
        let mut array_369 = object.key("tagKeys").start_array();
        for item_370 in var_368 {
            {
                array_369.value().string(item_370);
            }
        }
        array_369.finish();
    }
}

pub fn serialize_structure_update_account_audit_configuration_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateAccountAuditConfigurationInput,
) {
    if let Some(var_371) = &input.audit_check_configurations {
        let mut object_372 = object.key("auditCheckConfigurations").start_object();
        for (key_373, value_374) in var_371 {
            {
                let mut object_375 = object_372.key(key_373).start_object();
                crate::json_ser::serialize_structure_audit_check_configuration(
                    &mut object_375,
                    value_374,
                );
                object_375.finish();
            }
        }
        object_372.finish();
    }
    if let Some(var_376) = &input.audit_notification_target_configurations {
        let mut object_377 = object
            .key("auditNotificationTargetConfigurations")
            .start_object();
        for (key_378, value_379) in var_376 {
            {
                let mut object_380 = object_377.key(key_378.as_str()).start_object();
                crate::json_ser::serialize_structure_audit_notification_target(
                    &mut object_380,
                    value_379,
                );
                object_380.finish();
            }
        }
        object_377.finish();
    }
    if let Some(var_381) = &input.role_arn {
        object.key("roleArn").string(var_381);
    }
}

pub fn serialize_structure_update_audit_suppression_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateAuditSuppressionInput,
) {
    if let Some(var_382) = &input.check_name {
        object.key("checkName").string(var_382);
    }
    if let Some(var_383) = &input.description {
        object.key("description").string(var_383);
    }
    if let Some(var_384) = &input.expiration_date {
        object
            .key("expirationDate")
            .instant(var_384, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_385) = &input.resource_identifier {
        let mut object_386 = object.key("resourceIdentifier").start_object();
        crate::json_ser::serialize_structure_resource_identifier(&mut object_386, var_385);
        object_386.finish();
    }
    if let Some(var_387) = &input.suppress_indefinitely {
        object.key("suppressIndefinitely").boolean(*var_387);
    }
}

pub fn serialize_structure_update_authorizer_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateAuthorizerInput,
) {
    if let Some(var_388) = &input.authorizer_function_arn {
        object.key("authorizerFunctionArn").string(var_388);
    }
    if let Some(var_389) = &input.status {
        object.key("status").string(var_389.as_str());
    }
    if let Some(var_390) = &input.token_key_name {
        object.key("tokenKeyName").string(var_390);
    }
    if let Some(var_391) = &input.token_signing_public_keys {
        let mut object_392 = object.key("tokenSigningPublicKeys").start_object();
        for (key_393, value_394) in var_391 {
            {
                object_392.key(key_393).string(value_394);
            }
        }
        object_392.finish();
    }
}

pub fn serialize_structure_update_billing_group_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateBillingGroupInput,
) {
    if let Some(var_395) = &input.billing_group_properties {
        let mut object_396 = object.key("billingGroupProperties").start_object();
        crate::json_ser::serialize_structure_billing_group_properties(&mut object_396, var_395);
        object_396.finish();
    }
    if let Some(var_397) = &input.expected_version {
        object.key("expectedVersion").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_397).into()),
        );
    }
}

pub fn serialize_structure_update_ca_certificate_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateCaCertificateInput,
) {
    if let Some(var_398) = &input.registration_config {
        let mut object_399 = object.key("registrationConfig").start_object();
        crate::json_ser::serialize_structure_registration_config(&mut object_399, var_398);
        object_399.finish();
    }
    if input.remove_auto_registration {
        object
            .key("removeAutoRegistration")
            .boolean(input.remove_auto_registration);
    }
}

pub fn serialize_structure_update_custom_metric_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateCustomMetricInput,
) {
    if let Some(var_400) = &input.display_name {
        object.key("displayName").string(var_400);
    }
}

pub fn serialize_structure_update_dimension_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDimensionInput,
) {
    if let Some(var_401) = &input.string_values {
        let mut array_402 = object.key("stringValues").start_array();
        for item_403 in var_401 {
            {
                array_402.value().string(item_403);
            }
        }
        array_402.finish();
    }
}

pub fn serialize_structure_update_domain_configuration_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDomainConfigurationInput,
) {
    if let Some(var_404) = &input.authorizer_config {
        let mut object_405 = object.key("authorizerConfig").start_object();
        crate::json_ser::serialize_structure_authorizer_config(&mut object_405, var_404);
        object_405.finish();
    }
    if let Some(var_406) = &input.domain_configuration_status {
        object
            .key("domainConfigurationStatus")
            .string(var_406.as_str());
    }
    if input.remove_authorizer_config {
        object
            .key("removeAuthorizerConfig")
            .boolean(input.remove_authorizer_config);
    }
}

pub fn serialize_structure_update_dynamic_thing_group_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDynamicThingGroupInput,
) {
    if let Some(var_407) = &input.expected_version {
        object.key("expectedVersion").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_407).into()),
        );
    }
    if let Some(var_408) = &input.index_name {
        object.key("indexName").string(var_408);
    }
    if let Some(var_409) = &input.query_string {
        object.key("queryString").string(var_409);
    }
    if let Some(var_410) = &input.query_version {
        object.key("queryVersion").string(var_410);
    }
    if let Some(var_411) = &input.thing_group_properties {
        let mut object_412 = object.key("thingGroupProperties").start_object();
        crate::json_ser::serialize_structure_thing_group_properties(&mut object_412, var_411);
        object_412.finish();
    }
}

pub fn serialize_structure_update_event_configurations_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateEventConfigurationsInput,
) {
    if let Some(var_413) = &input.event_configurations {
        let mut object_414 = object.key("eventConfigurations").start_object();
        for (key_415, value_416) in var_413 {
            {
                let mut object_417 = object_414.key(key_415.as_str()).start_object();
                crate::json_ser::serialize_structure_configuration(&mut object_417, value_416);
                object_417.finish();
            }
        }
        object_414.finish();
    }
}

pub fn serialize_structure_update_indexing_configuration_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateIndexingConfigurationInput,
) {
    if let Some(var_418) = &input.thing_group_indexing_configuration {
        let mut object_419 = object.key("thingGroupIndexingConfiguration").start_object();
        crate::json_ser::serialize_structure_thing_group_indexing_configuration(
            &mut object_419,
            var_418,
        );
        object_419.finish();
    }
    if let Some(var_420) = &input.thing_indexing_configuration {
        let mut object_421 = object.key("thingIndexingConfiguration").start_object();
        crate::json_ser::serialize_structure_thing_indexing_configuration(&mut object_421, var_420);
        object_421.finish();
    }
}

pub fn serialize_structure_update_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateJobInput,
) {
    if let Some(var_422) = &input.abort_config {
        let mut object_423 = object.key("abortConfig").start_object();
        crate::json_ser::serialize_structure_abort_config(&mut object_423, var_422);
        object_423.finish();
    }
    if let Some(var_424) = &input.description {
        object.key("description").string(var_424);
    }
    if let Some(var_425) = &input.job_executions_rollout_config {
        let mut object_426 = object.key("jobExecutionsRolloutConfig").start_object();
        crate::json_ser::serialize_structure_job_executions_rollout_config(
            &mut object_426,
            var_425,
        );
        object_426.finish();
    }
    if let Some(var_427) = &input.presigned_url_config {
        let mut object_428 = object.key("presignedUrlConfig").start_object();
        crate::json_ser::serialize_structure_presigned_url_config(&mut object_428, var_427);
        object_428.finish();
    }
    if let Some(var_429) = &input.timeout_config {
        let mut object_430 = object.key("timeoutConfig").start_object();
        crate::json_ser::serialize_structure_timeout_config(&mut object_430, var_429);
        object_430.finish();
    }
}

pub fn serialize_structure_update_mitigation_action_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateMitigationActionInput,
) {
    if let Some(var_431) = &input.action_params {
        let mut object_432 = object.key("actionParams").start_object();
        crate::json_ser::serialize_structure_mitigation_action_params(&mut object_432, var_431);
        object_432.finish();
    }
    if let Some(var_433) = &input.role_arn {
        object.key("roleArn").string(var_433);
    }
}

pub fn serialize_structure_update_provisioning_template_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateProvisioningTemplateInput,
) {
    if let Some(var_434) = &input.default_version_id {
        object.key("defaultVersionId").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_434).into()),
        );
    }
    if let Some(var_435) = &input.description {
        object.key("description").string(var_435);
    }
    if input.enabled {
        object.key("enabled").boolean(input.enabled);
    }
    if let Some(var_436) = &input.pre_provisioning_hook {
        let mut object_437 = object.key("preProvisioningHook").start_object();
        crate::json_ser::serialize_structure_provisioning_hook(&mut object_437, var_436);
        object_437.finish();
    }
    if let Some(var_438) = &input.provisioning_role_arn {
        object.key("provisioningRoleArn").string(var_438);
    }
    if let Some(var_439) = &input.remove_pre_provisioning_hook {
        object.key("removePreProvisioningHook").boolean(*var_439);
    }
}

pub fn serialize_structure_update_role_alias_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateRoleAliasInput,
) {
    if let Some(var_440) = &input.credential_duration_seconds {
        object.key("credentialDurationSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_440).into()),
        );
    }
    if let Some(var_441) = &input.role_arn {
        object.key("roleArn").string(var_441);
    }
}

pub fn serialize_structure_update_scheduled_audit_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateScheduledAuditInput,
) {
    if let Some(var_442) = &input.day_of_month {
        object.key("dayOfMonth").string(var_442);
    }
    if let Some(var_443) = &input.day_of_week {
        object.key("dayOfWeek").string(var_443.as_str());
    }
    if let Some(var_444) = &input.frequency {
        object.key("frequency").string(var_444.as_str());
    }
    if let Some(var_445) = &input.target_check_names {
        let mut array_446 = object.key("targetCheckNames").start_array();
        for item_447 in var_445 {
            {
                array_446.value().string(item_447);
            }
        }
        array_446.finish();
    }
}

pub fn serialize_structure_update_security_profile_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateSecurityProfileInput,
) {
    if let Some(var_448) = &input.additional_metrics_to_retain {
        let mut array_449 = object.key("additionalMetricsToRetain").start_array();
        for item_450 in var_448 {
            {
                array_449.value().string(item_450);
            }
        }
        array_449.finish();
    }
    if let Some(var_451) = &input.additional_metrics_to_retain_v2 {
        let mut array_452 = object.key("additionalMetricsToRetainV2").start_array();
        for item_453 in var_451 {
            {
                let mut object_454 = array_452.value().start_object();
                crate::json_ser::serialize_structure_metric_to_retain(&mut object_454, item_453);
                object_454.finish();
            }
        }
        array_452.finish();
    }
    if let Some(var_455) = &input.alert_targets {
        let mut object_456 = object.key("alertTargets").start_object();
        for (key_457, value_458) in var_455 {
            {
                let mut object_459 = object_456.key(key_457.as_str()).start_object();
                crate::json_ser::serialize_structure_alert_target(&mut object_459, value_458);
                object_459.finish();
            }
        }
        object_456.finish();
    }
    if let Some(var_460) = &input.behaviors {
        let mut array_461 = object.key("behaviors").start_array();
        for item_462 in var_460 {
            {
                let mut object_463 = array_461.value().start_object();
                crate::json_ser::serialize_structure_behavior(&mut object_463, item_462);
                object_463.finish();
            }
        }
        array_461.finish();
    }
    if input.delete_additional_metrics_to_retain {
        object
            .key("deleteAdditionalMetricsToRetain")
            .boolean(input.delete_additional_metrics_to_retain);
    }
    if input.delete_alert_targets {
        object
            .key("deleteAlertTargets")
            .boolean(input.delete_alert_targets);
    }
    if input.delete_behaviors {
        object
            .key("deleteBehaviors")
            .boolean(input.delete_behaviors);
    }
    if let Some(var_464) = &input.security_profile_description {
        object.key("securityProfileDescription").string(var_464);
    }
}

pub fn serialize_structure_update_stream_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateStreamInput,
) {
    if let Some(var_465) = &input.description {
        object.key("description").string(var_465);
    }
    if let Some(var_466) = &input.files {
        let mut array_467 = object.key("files").start_array();
        for item_468 in var_466 {
            {
                let mut object_469 = array_467.value().start_object();
                crate::json_ser::serialize_structure_stream_file(&mut object_469, item_468);
                object_469.finish();
            }
        }
        array_467.finish();
    }
    if let Some(var_470) = &input.role_arn {
        object.key("roleArn").string(var_470);
    }
}

pub fn serialize_structure_update_thing_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateThingInput,
) {
    if let Some(var_471) = &input.attribute_payload {
        let mut object_472 = object.key("attributePayload").start_object();
        crate::json_ser::serialize_structure_attribute_payload(&mut object_472, var_471);
        object_472.finish();
    }
    if let Some(var_473) = &input.expected_version {
        object.key("expectedVersion").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_473).into()),
        );
    }
    if input.remove_thing_type {
        object
            .key("removeThingType")
            .boolean(input.remove_thing_type);
    }
    if let Some(var_474) = &input.thing_type_name {
        object.key("thingTypeName").string(var_474);
    }
}

pub fn serialize_structure_update_thing_group_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateThingGroupInput,
) {
    if let Some(var_475) = &input.expected_version {
        object.key("expectedVersion").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_475).into()),
        );
    }
    if let Some(var_476) = &input.thing_group_properties {
        let mut object_477 = object.key("thingGroupProperties").start_object();
        crate::json_ser::serialize_structure_thing_group_properties(&mut object_477, var_476);
        object_477.finish();
    }
}

pub fn serialize_structure_update_thing_groups_for_thing_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateThingGroupsForThingInput,
) {
    if input.override_dynamic_groups {
        object
            .key("overrideDynamicGroups")
            .boolean(input.override_dynamic_groups);
    }
    if let Some(var_478) = &input.thing_groups_to_add {
        let mut array_479 = object.key("thingGroupsToAdd").start_array();
        for item_480 in var_478 {
            {
                array_479.value().string(item_480);
            }
        }
        array_479.finish();
    }
    if let Some(var_481) = &input.thing_groups_to_remove {
        let mut array_482 = object.key("thingGroupsToRemove").start_array();
        for item_483 in var_481 {
            {
                array_482.value().string(item_483);
            }
        }
        array_482.finish();
    }
    if let Some(var_484) = &input.thing_name {
        object.key("thingName").string(var_484);
    }
}

pub fn serialize_structure_update_topic_rule_destination_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateTopicRuleDestinationInput,
) {
    if let Some(var_485) = &input.arn {
        object.key("arn").string(var_485);
    }
    if let Some(var_486) = &input.status {
        object.key("status").string(var_486.as_str());
    }
}

pub fn serialize_structure_validate_security_profile_behaviors_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ValidateSecurityProfileBehaviorsInput,
) {
    if let Some(var_487) = &input.behaviors {
        let mut array_488 = object.key("behaviors").start_array();
        for item_489 in var_487 {
            {
                let mut object_490 = array_488.value().start_object();
                crate::json_ser::serialize_structure_behavior(&mut object_490, item_489);
                object_490.finish();
            }
        }
        array_488.finish();
    }
}

pub fn serialize_structure_resource_identifier(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ResourceIdentifier,
) {
    if let Some(var_491) = &input.device_certificate_id {
        object.key("deviceCertificateId").string(var_491);
    }
    if let Some(var_492) = &input.ca_certificate_id {
        object.key("caCertificateId").string(var_492);
    }
    if let Some(var_493) = &input.cognito_identity_pool_id {
        object.key("cognitoIdentityPoolId").string(var_493);
    }
    if let Some(var_494) = &input.client_id {
        object.key("clientId").string(var_494);
    }
    if let Some(var_495) = &input.policy_version_identifier {
        let mut object_496 = object.key("policyVersionIdentifier").start_object();
        crate::json_ser::serialize_structure_policy_version_identifier(&mut object_496, var_495);
        object_496.finish();
    }
    if let Some(var_497) = &input.account {
        object.key("account").string(var_497);
    }
    if let Some(var_498) = &input.iam_role_arn {
        object.key("iamRoleArn").string(var_498);
    }
    if let Some(var_499) = &input.role_alias_arn {
        object.key("roleAliasArn").string(var_499);
    }
}

pub fn serialize_structure_tag(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tag,
) {
    if let Some(var_500) = &input.key {
        object.key("Key").string(var_500);
    }
    if let Some(var_501) = &input.value {
        object.key("Value").string(var_501);
    }
}

pub fn serialize_structure_billing_group_properties(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BillingGroupProperties,
) {
    if let Some(var_502) = &input.billing_group_description {
        object.key("billingGroupDescription").string(var_502);
    }
}

pub fn serialize_structure_authorizer_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AuthorizerConfig,
) {
    if let Some(var_503) = &input.default_authorizer_name {
        object.key("defaultAuthorizerName").string(var_503);
    }
    if let Some(var_504) = &input.allow_authorizer_override {
        object.key("allowAuthorizerOverride").boolean(*var_504);
    }
}

pub fn serialize_structure_thing_group_properties(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ThingGroupProperties,
) {
    if let Some(var_505) = &input.thing_group_description {
        object.key("thingGroupDescription").string(var_505);
    }
    if let Some(var_506) = &input.attribute_payload {
        let mut object_507 = object.key("attributePayload").start_object();
        crate::json_ser::serialize_structure_attribute_payload(&mut object_507, var_506);
        object_507.finish();
    }
}

pub fn serialize_structure_abort_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AbortConfig,
) {
    if let Some(var_508) = &input.criteria_list {
        let mut array_509 = object.key("criteriaList").start_array();
        for item_510 in var_508 {
            {
                let mut object_511 = array_509.value().start_object();
                crate::json_ser::serialize_structure_abort_criteria(&mut object_511, item_510);
                object_511.finish();
            }
        }
        array_509.finish();
    }
}

pub fn serialize_structure_job_executions_rollout_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JobExecutionsRolloutConfig,
) {
    if let Some(var_512) = &input.maximum_per_minute {
        object.key("maximumPerMinute").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_512).into()),
        );
    }
    if let Some(var_513) = &input.exponential_rate {
        let mut object_514 = object.key("exponentialRate").start_object();
        crate::json_ser::serialize_structure_exponential_rollout_rate(&mut object_514, var_513);
        object_514.finish();
    }
}

pub fn serialize_structure_presigned_url_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PresignedUrlConfig,
) {
    if let Some(var_515) = &input.role_arn {
        object.key("roleArn").string(var_515);
    }
    if let Some(var_516) = &input.expires_in_sec {
        object.key("expiresInSec").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_516).into()),
        );
    }
}

pub fn serialize_structure_timeout_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TimeoutConfig,
) {
    if let Some(var_517) = &input.in_progress_timeout_in_minutes {
        object.key("inProgressTimeoutInMinutes").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_517).into()),
        );
    }
}

pub fn serialize_structure_mitigation_action_params(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MitigationActionParams,
) {
    if let Some(var_518) = &input.update_device_certificate_params {
        let mut object_519 = object.key("updateDeviceCertificateParams").start_object();
        crate::json_ser::serialize_structure_update_device_certificate_params(
            &mut object_519,
            var_518,
        );
        object_519.finish();
    }
    if let Some(var_520) = &input.update_ca_certificate_params {
        let mut object_521 = object.key("updateCACertificateParams").start_object();
        crate::json_ser::serialize_structure_update_ca_certificate_params(&mut object_521, var_520);
        object_521.finish();
    }
    if let Some(var_522) = &input.add_things_to_thing_group_params {
        let mut object_523 = object.key("addThingsToThingGroupParams").start_object();
        crate::json_ser::serialize_structure_add_things_to_thing_group_params(
            &mut object_523,
            var_522,
        );
        object_523.finish();
    }
    if let Some(var_524) = &input.replace_default_policy_version_params {
        let mut object_525 = object
            .key("replaceDefaultPolicyVersionParams")
            .start_object();
        crate::json_ser::serialize_structure_replace_default_policy_version_params(
            &mut object_525,
            var_524,
        );
        object_525.finish();
    }
    if let Some(var_526) = &input.enable_io_t_logging_params {
        let mut object_527 = object.key("enableIoTLoggingParams").start_object();
        crate::json_ser::serialize_structure_enable_io_t_logging_params(&mut object_527, var_526);
        object_527.finish();
    }
    if let Some(var_528) = &input.publish_finding_to_sns_params {
        let mut object_529 = object.key("publishFindingToSnsParams").start_object();
        crate::json_ser::serialize_structure_publish_finding_to_sns_params(
            &mut object_529,
            var_528,
        );
        object_529.finish();
    }
}

pub fn serialize_structure_aws_job_abort_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsJobAbortConfig,
) {
    if let Some(var_530) = &input.abort_criteria_list {
        let mut array_531 = object.key("abortCriteriaList").start_array();
        for item_532 in var_530 {
            {
                let mut object_533 = array_531.value().start_object();
                crate::json_ser::serialize_structure_aws_job_abort_criteria(
                    &mut object_533,
                    item_532,
                );
                object_533.finish();
            }
        }
        array_531.finish();
    }
}

pub fn serialize_structure_aws_job_executions_rollout_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsJobExecutionsRolloutConfig,
) {
    if let Some(var_534) = &input.maximum_per_minute {
        object.key("maximumPerMinute").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_534).into()),
        );
    }
    if let Some(var_535) = &input.exponential_rate {
        let mut object_536 = object.key("exponentialRate").start_object();
        crate::json_ser::serialize_structure_aws_job_exponential_rollout_rate(
            &mut object_536,
            var_535,
        );
        object_536.finish();
    }
}

pub fn serialize_structure_aws_job_presigned_url_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsJobPresignedUrlConfig,
) {
    if let Some(var_537) = &input.expires_in_sec {
        object.key("expiresInSec").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_537).into()),
        );
    }
}

pub fn serialize_structure_aws_job_timeout_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsJobTimeoutConfig,
) {
    if let Some(var_538) = &input.in_progress_timeout_in_minutes {
        object.key("inProgressTimeoutInMinutes").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_538).into()),
        );
    }
}

pub fn serialize_structure_ota_update_file(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OtaUpdateFile,
) {
    if let Some(var_539) = &input.file_name {
        object.key("fileName").string(var_539);
    }
    if let Some(var_540) = &input.file_type {
        object.key("fileType").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_540).into()),
        );
    }
    if let Some(var_541) = &input.file_version {
        object.key("fileVersion").string(var_541);
    }
    if let Some(var_542) = &input.file_location {
        let mut object_543 = object.key("fileLocation").start_object();
        crate::json_ser::serialize_structure_file_location(&mut object_543, var_542);
        object_543.finish();
    }
    if let Some(var_544) = &input.code_signing {
        let mut object_545 = object.key("codeSigning").start_object();
        crate::json_ser::serialize_structure_code_signing(&mut object_545, var_544);
        object_545.finish();
    }
    if let Some(var_546) = &input.attributes {
        let mut object_547 = object.key("attributes").start_object();
        for (key_548, value_549) in var_546 {
            {
                object_547.key(key_548).string(value_549);
            }
        }
        object_547.finish();
    }
}

pub fn serialize_structure_provisioning_hook(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProvisioningHook,
) {
    if let Some(var_550) = &input.payload_version {
        object.key("payloadVersion").string(var_550);
    }
    if let Some(var_551) = &input.target_arn {
        object.key("targetArn").string(var_551);
    }
}

pub fn serialize_structure_metric_to_retain(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MetricToRetain,
) {
    if let Some(var_552) = &input.metric {
        object.key("metric").string(var_552);
    }
    if let Some(var_553) = &input.metric_dimension {
        let mut object_554 = object.key("metricDimension").start_object();
        crate::json_ser::serialize_structure_metric_dimension(&mut object_554, var_553);
        object_554.finish();
    }
}

pub fn serialize_structure_alert_target(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AlertTarget,
) {
    if let Some(var_555) = &input.alert_target_arn {
        object.key("alertTargetArn").string(var_555);
    }
    if let Some(var_556) = &input.role_arn {
        object.key("roleArn").string(var_556);
    }
}

pub fn serialize_structure_behavior(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Behavior,
) {
    if let Some(var_557) = &input.name {
        object.key("name").string(var_557);
    }
    if let Some(var_558) = &input.metric {
        object.key("metric").string(var_558);
    }
    if let Some(var_559) = &input.metric_dimension {
        let mut object_560 = object.key("metricDimension").start_object();
        crate::json_ser::serialize_structure_metric_dimension(&mut object_560, var_559);
        object_560.finish();
    }
    if let Some(var_561) = &input.criteria {
        let mut object_562 = object.key("criteria").start_object();
        crate::json_ser::serialize_structure_behavior_criteria(&mut object_562, var_561);
        object_562.finish();
    }
    if let Some(var_563) = &input.suppress_alerts {
        object.key("suppressAlerts").boolean(*var_563);
    }
}

pub fn serialize_structure_stream_file(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StreamFile,
) {
    if let Some(var_564) = &input.file_id {
        object.key("fileId").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_564).into()),
        );
    }
    if let Some(var_565) = &input.s3_location {
        let mut object_566 = object.key("s3Location").start_object();
        crate::json_ser::serialize_structure_s3_location(&mut object_566, var_565);
        object_566.finish();
    }
}

pub fn serialize_structure_attribute_payload(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AttributePayload,
) {
    if let Some(var_567) = &input.attributes {
        let mut object_568 = object.key("attributes").start_object();
        for (key_569, value_570) in var_567 {
            {
                object_568.key(key_569).string(value_570);
            }
        }
        object_568.finish();
    }
    if input.merge {
        object.key("merge").boolean(input.merge);
    }
}

pub fn serialize_structure_thing_type_properties(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ThingTypeProperties,
) {
    if let Some(var_571) = &input.thing_type_description {
        object.key("thingTypeDescription").string(var_571);
    }
    if let Some(var_572) = &input.searchable_attributes {
        let mut array_573 = object.key("searchableAttributes").start_array();
        for item_574 in var_572 {
            {
                array_573.value().string(item_574);
            }
        }
        array_573.finish();
    }
}

pub fn serialize_structure_topic_rule_destination_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TopicRuleDestinationConfiguration,
) {
    if let Some(var_575) = &input.http_url_configuration {
        let mut object_576 = object.key("httpUrlConfiguration").start_object();
        crate::json_ser::serialize_structure_http_url_destination_configuration(
            &mut object_576,
            var_575,
        );
        object_576.finish();
    }
    if let Some(var_577) = &input.vpc_configuration {
        let mut object_578 = object.key("vpcConfiguration").start_object();
        crate::json_ser::serialize_structure_vpc_destination_configuration(
            &mut object_578,
            var_577,
        );
        object_578.finish();
    }
}

pub fn serialize_structure_registration_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RegistrationConfig,
) {
    if let Some(var_579) = &input.template_body {
        object.key("templateBody").string(var_579);
    }
    if let Some(var_580) = &input.role_arn {
        object.key("roleArn").string(var_580);
    }
}

pub fn serialize_structure_log_target(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LogTarget,
) {
    if let Some(var_581) = &input.target_type {
        object.key("targetType").string(var_581.as_str());
    }
    if let Some(var_582) = &input.target_name {
        object.key("targetName").string(var_582);
    }
}

pub fn serialize_structure_audit_mitigation_actions_task_target(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AuditMitigationActionsTaskTarget,
) {
    if let Some(var_583) = &input.audit_task_id {
        object.key("auditTaskId").string(var_583);
    }
    if let Some(var_584) = &input.finding_ids {
        let mut array_585 = object.key("findingIds").start_array();
        for item_586 in var_584 {
            {
                array_585.value().string(item_586);
            }
        }
        array_585.finish();
    }
    if let Some(var_587) = &input.audit_check_to_reason_code_filter {
        let mut object_588 = object.key("auditCheckToReasonCodeFilter").start_object();
        for (key_589, value_590) in var_587 {
            {
                let mut array_591 = object_588.key(key_589).start_array();
                for item_592 in value_590 {
                    {
                        array_591.value().string(item_592);
                    }
                }
                array_591.finish();
            }
        }
        object_588.finish();
    }
}

pub fn serialize_structure_detect_mitigation_actions_task_target(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DetectMitigationActionsTaskTarget,
) {
    if let Some(var_593) = &input.violation_ids {
        let mut array_594 = object.key("violationIds").start_array();
        for item_595 in var_593 {
            {
                array_594.value().string(item_595);
            }
        }
        array_594.finish();
    }
    if let Some(var_596) = &input.security_profile_name {
        object.key("securityProfileName").string(var_596);
    }
    if let Some(var_597) = &input.behavior_name {
        object.key("behaviorName").string(var_597);
    }
}

pub fn serialize_structure_violation_event_occurrence_range(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ViolationEventOccurrenceRange,
) {
    if let Some(var_598) = &input.start_time {
        object
            .key("startTime")
            .instant(var_598, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_599) = &input.end_time {
        object
            .key("endTime")
            .instant(var_599, smithy_types::instant::Format::EpochSeconds);
    }
}

pub fn serialize_structure_auth_info(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AuthInfo,
) {
    if let Some(var_600) = &input.action_type {
        object.key("actionType").string(var_600.as_str());
    }
    if let Some(var_601) = &input.resources {
        let mut array_602 = object.key("resources").start_array();
        for item_603 in var_601 {
            {
                array_602.value().string(item_603);
            }
        }
        array_602.finish();
    }
}

pub fn serialize_structure_http_context(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HttpContext,
) {
    if let Some(var_604) = &input.headers {
        let mut object_605 = object.key("headers").start_object();
        for (key_606, value_607) in var_604 {
            {
                object_605.key(key_606).string(value_607);
            }
        }
        object_605.finish();
    }
    if let Some(var_608) = &input.query_string {
        object.key("queryString").string(var_608);
    }
}

pub fn serialize_structure_mqtt_context(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MqttContext,
) {
    if let Some(var_609) = &input.username {
        object.key("username").string(var_609);
    }
    if let Some(var_610) = &input.password {
        object
            .key("password")
            .string_unchecked(&smithy_types::base64::encode(var_610));
    }
    if let Some(var_611) = &input.client_id {
        object.key("clientId").string(var_611);
    }
}

pub fn serialize_structure_tls_context(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TlsContext,
) {
    if let Some(var_612) = &input.server_name {
        object.key("serverName").string(var_612);
    }
}

pub fn serialize_structure_audit_check_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AuditCheckConfiguration,
) {
    if input.enabled {
        object.key("enabled").boolean(input.enabled);
    }
}

pub fn serialize_structure_audit_notification_target(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AuditNotificationTarget,
) {
    if let Some(var_613) = &input.target_arn {
        object.key("targetArn").string(var_613);
    }
    if let Some(var_614) = &input.role_arn {
        object.key("roleArn").string(var_614);
    }
    if input.enabled {
        object.key("enabled").boolean(input.enabled);
    }
}

pub fn serialize_structure_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Configuration,
) {
    if input.enabled {
        object.key("Enabled").boolean(input.enabled);
    }
}

pub fn serialize_structure_thing_group_indexing_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ThingGroupIndexingConfiguration,
) {
    if let Some(var_615) = &input.thing_group_indexing_mode {
        object
            .key("thingGroupIndexingMode")
            .string(var_615.as_str());
    }
    if let Some(var_616) = &input.managed_fields {
        let mut array_617 = object.key("managedFields").start_array();
        for item_618 in var_616 {
            {
                let mut object_619 = array_617.value().start_object();
                crate::json_ser::serialize_structure_field(&mut object_619, item_618);
                object_619.finish();
            }
        }
        array_617.finish();
    }
    if let Some(var_620) = &input.custom_fields {
        let mut array_621 = object.key("customFields").start_array();
        for item_622 in var_620 {
            {
                let mut object_623 = array_621.value().start_object();
                crate::json_ser::serialize_structure_field(&mut object_623, item_622);
                object_623.finish();
            }
        }
        array_621.finish();
    }
}

pub fn serialize_structure_thing_indexing_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ThingIndexingConfiguration,
) {
    if let Some(var_624) = &input.thing_indexing_mode {
        object.key("thingIndexingMode").string(var_624.as_str());
    }
    if let Some(var_625) = &input.thing_connectivity_indexing_mode {
        object
            .key("thingConnectivityIndexingMode")
            .string(var_625.as_str());
    }
    if let Some(var_626) = &input.managed_fields {
        let mut array_627 = object.key("managedFields").start_array();
        for item_628 in var_626 {
            {
                let mut object_629 = array_627.value().start_object();
                crate::json_ser::serialize_structure_field(&mut object_629, item_628);
                object_629.finish();
            }
        }
        array_627.finish();
    }
    if let Some(var_630) = &input.custom_fields {
        let mut array_631 = object.key("customFields").start_array();
        for item_632 in var_630 {
            {
                let mut object_633 = array_631.value().start_object();
                crate::json_ser::serialize_structure_field(&mut object_633, item_632);
                object_633.finish();
            }
        }
        array_631.finish();
    }
}

pub fn serialize_structure_topic_rule_payload(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TopicRulePayload,
) {
    if let Some(var_634) = &input.sql {
        object.key("sql").string(var_634);
    }
    if let Some(var_635) = &input.description {
        object.key("description").string(var_635);
    }
    if let Some(var_636) = &input.actions {
        let mut array_637 = object.key("actions").start_array();
        for item_638 in var_636 {
            {
                let mut object_639 = array_637.value().start_object();
                crate::json_ser::serialize_structure_action(&mut object_639, item_638);
                object_639.finish();
            }
        }
        array_637.finish();
    }
    if let Some(var_640) = &input.rule_disabled {
        object.key("ruleDisabled").boolean(*var_640);
    }
    if let Some(var_641) = &input.aws_iot_sql_version {
        object.key("awsIotSqlVersion").string(var_641);
    }
    if let Some(var_642) = &input.error_action {
        let mut object_643 = object.key("errorAction").start_object();
        crate::json_ser::serialize_structure_action(&mut object_643, var_642);
        object_643.finish();
    }
}

pub fn serialize_structure_logging_options_payload(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LoggingOptionsPayload,
) {
    if let Some(var_644) = &input.role_arn {
        object.key("roleArn").string(var_644);
    }
    if let Some(var_645) = &input.log_level {
        object.key("logLevel").string(var_645.as_str());
    }
}

pub fn serialize_structure_policy_version_identifier(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PolicyVersionIdentifier,
) {
    if let Some(var_646) = &input.policy_name {
        object.key("policyName").string(var_646);
    }
    if let Some(var_647) = &input.policy_version_id {
        object.key("policyVersionId").string(var_647);
    }
}

pub fn serialize_structure_abort_criteria(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AbortCriteria,
) {
    if let Some(var_648) = &input.failure_type {
        object.key("failureType").string(var_648.as_str());
    }
    if let Some(var_649) = &input.action {
        object.key("action").string(var_649.as_str());
    }
    if let Some(var_650) = &input.threshold_percentage {
        object.key("thresholdPercentage").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((*var_650).into()),
        );
    }
    if let Some(var_651) = &input.min_number_of_executed_things {
        object.key("minNumberOfExecutedThings").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_651).into()),
        );
    }
}

pub fn serialize_structure_exponential_rollout_rate(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ExponentialRolloutRate,
) {
    if let Some(var_652) = &input.base_rate_per_minute {
        object.key("baseRatePerMinute").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_652).into()),
        );
    }
    {
        object.key("incrementFactor").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((input.increment_factor).into()),
        );
    }
    if let Some(var_653) = &input.rate_increase_criteria {
        let mut object_654 = object.key("rateIncreaseCriteria").start_object();
        crate::json_ser::serialize_structure_rate_increase_criteria(&mut object_654, var_653);
        object_654.finish();
    }
}

pub fn serialize_structure_update_device_certificate_params(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UpdateDeviceCertificateParams,
) {
    if let Some(var_655) = &input.action {
        object.key("action").string(var_655.as_str());
    }
}

pub fn serialize_structure_update_ca_certificate_params(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UpdateCaCertificateParams,
) {
    if let Some(var_656) = &input.action {
        object.key("action").string(var_656.as_str());
    }
}

pub fn serialize_structure_add_things_to_thing_group_params(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AddThingsToThingGroupParams,
) {
    if let Some(var_657) = &input.thing_group_names {
        let mut array_658 = object.key("thingGroupNames").start_array();
        for item_659 in var_657 {
            {
                array_658.value().string(item_659);
            }
        }
        array_658.finish();
    }
    if input.override_dynamic_groups {
        object
            .key("overrideDynamicGroups")
            .boolean(input.override_dynamic_groups);
    }
}

pub fn serialize_structure_replace_default_policy_version_params(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ReplaceDefaultPolicyVersionParams,
) {
    if let Some(var_660) = &input.template_name {
        object.key("templateName").string(var_660.as_str());
    }
}

pub fn serialize_structure_enable_io_t_logging_params(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EnableIoTLoggingParams,
) {
    if let Some(var_661) = &input.role_arn_for_logging {
        object.key("roleArnForLogging").string(var_661);
    }
    if let Some(var_662) = &input.log_level {
        object.key("logLevel").string(var_662.as_str());
    }
}

pub fn serialize_structure_publish_finding_to_sns_params(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PublishFindingToSnsParams,
) {
    if let Some(var_663) = &input.topic_arn {
        object.key("topicArn").string(var_663);
    }
}

pub fn serialize_structure_aws_job_abort_criteria(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsJobAbortCriteria,
) {
    if let Some(var_664) = &input.failure_type {
        object.key("failureType").string(var_664.as_str());
    }
    if let Some(var_665) = &input.action {
        object.key("action").string(var_665.as_str());
    }
    if let Some(var_666) = &input.threshold_percentage {
        object.key("thresholdPercentage").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((*var_666).into()),
        );
    }
    if let Some(var_667) = &input.min_number_of_executed_things {
        object.key("minNumberOfExecutedThings").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_667).into()),
        );
    }
}

pub fn serialize_structure_aws_job_exponential_rollout_rate(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsJobExponentialRolloutRate,
) {
    if let Some(var_668) = &input.base_rate_per_minute {
        object.key("baseRatePerMinute").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_668).into()),
        );
    }
    {
        object.key("incrementFactor").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((input.increment_factor).into()),
        );
    }
    if let Some(var_669) = &input.rate_increase_criteria {
        let mut object_670 = object.key("rateIncreaseCriteria").start_object();
        crate::json_ser::serialize_structure_aws_job_rate_increase_criteria(
            &mut object_670,
            var_669,
        );
        object_670.finish();
    }
}

pub fn serialize_structure_file_location(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FileLocation,
) {
    if let Some(var_671) = &input.stream {
        let mut object_672 = object.key("stream").start_object();
        crate::json_ser::serialize_structure_stream(&mut object_672, var_671);
        object_672.finish();
    }
    if let Some(var_673) = &input.s3_location {
        let mut object_674 = object.key("s3Location").start_object();
        crate::json_ser::serialize_structure_s3_location(&mut object_674, var_673);
        object_674.finish();
    }
}

pub fn serialize_structure_code_signing(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CodeSigning,
) {
    if let Some(var_675) = &input.aws_signer_job_id {
        object.key("awsSignerJobId").string(var_675);
    }
    if let Some(var_676) = &input.start_signing_job_parameter {
        let mut object_677 = object.key("startSigningJobParameter").start_object();
        crate::json_ser::serialize_structure_start_signing_job_parameter(&mut object_677, var_676);
        object_677.finish();
    }
    if let Some(var_678) = &input.custom_code_signing {
        let mut object_679 = object.key("customCodeSigning").start_object();
        crate::json_ser::serialize_structure_custom_code_signing(&mut object_679, var_678);
        object_679.finish();
    }
}

pub fn serialize_structure_metric_dimension(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MetricDimension,
) {
    if let Some(var_680) = &input.dimension_name {
        object.key("dimensionName").string(var_680);
    }
    if let Some(var_681) = &input.operator {
        object.key("operator").string(var_681.as_str());
    }
}

pub fn serialize_structure_behavior_criteria(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BehaviorCriteria,
) {
    if let Some(var_682) = &input.comparison_operator {
        object.key("comparisonOperator").string(var_682.as_str());
    }
    if let Some(var_683) = &input.value {
        let mut object_684 = object.key("value").start_object();
        crate::json_ser::serialize_structure_metric_value(&mut object_684, var_683);
        object_684.finish();
    }
    if let Some(var_685) = &input.duration_seconds {
        object.key("durationSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_685).into()),
        );
    }
    if let Some(var_686) = &input.consecutive_datapoints_to_alarm {
        object.key("consecutiveDatapointsToAlarm").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_686).into()),
        );
    }
    if let Some(var_687) = &input.consecutive_datapoints_to_clear {
        object.key("consecutiveDatapointsToClear").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_687).into()),
        );
    }
    if let Some(var_688) = &input.statistical_threshold {
        let mut object_689 = object.key("statisticalThreshold").start_object();
        crate::json_ser::serialize_structure_statistical_threshold(&mut object_689, var_688);
        object_689.finish();
    }
    if let Some(var_690) = &input.ml_detection_config {
        let mut object_691 = object.key("mlDetectionConfig").start_object();
        crate::json_ser::serialize_structure_machine_learning_detection_config(
            &mut object_691,
            var_690,
        );
        object_691.finish();
    }
}

pub fn serialize_structure_s3_location(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3Location,
) {
    if let Some(var_692) = &input.bucket {
        object.key("bucket").string(var_692);
    }
    if let Some(var_693) = &input.key {
        object.key("key").string(var_693);
    }
    if let Some(var_694) = &input.version {
        object.key("version").string(var_694);
    }
}

pub fn serialize_structure_http_url_destination_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HttpUrlDestinationConfiguration,
) {
    if let Some(var_695) = &input.confirmation_url {
        object.key("confirmationUrl").string(var_695);
    }
}

pub fn serialize_structure_vpc_destination_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VpcDestinationConfiguration,
) {
    if let Some(var_696) = &input.subnet_ids {
        let mut array_697 = object.key("subnetIds").start_array();
        for item_698 in var_696 {
            {
                array_697.value().string(item_698);
            }
        }
        array_697.finish();
    }
    if let Some(var_699) = &input.security_groups {
        let mut array_700 = object.key("securityGroups").start_array();
        for item_701 in var_699 {
            {
                array_700.value().string(item_701);
            }
        }
        array_700.finish();
    }
    if let Some(var_702) = &input.vpc_id {
        object.key("vpcId").string(var_702);
    }
    if let Some(var_703) = &input.role_arn {
        object.key("roleArn").string(var_703);
    }
}

pub fn serialize_structure_field(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Field,
) {
    if let Some(var_704) = &input.name {
        object.key("name").string(var_704);
    }
    if let Some(var_705) = &input.r#type {
        object.key("type").string(var_705.as_str());
    }
}

pub fn serialize_structure_action(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Action,
) {
    if let Some(var_706) = &input.dynamo_db {
        let mut object_707 = object.key("dynamoDB").start_object();
        crate::json_ser::serialize_structure_dynamo_db_action(&mut object_707, var_706);
        object_707.finish();
    }
    if let Some(var_708) = &input.dynamo_d_bv2 {
        let mut object_709 = object.key("dynamoDBv2").start_object();
        crate::json_ser::serialize_structure_dynamo_d_bv2_action(&mut object_709, var_708);
        object_709.finish();
    }
    if let Some(var_710) = &input.lambda {
        let mut object_711 = object.key("lambda").start_object();
        crate::json_ser::serialize_structure_lambda_action(&mut object_711, var_710);
        object_711.finish();
    }
    if let Some(var_712) = &input.sns {
        let mut object_713 = object.key("sns").start_object();
        crate::json_ser::serialize_structure_sns_action(&mut object_713, var_712);
        object_713.finish();
    }
    if let Some(var_714) = &input.sqs {
        let mut object_715 = object.key("sqs").start_object();
        crate::json_ser::serialize_structure_sqs_action(&mut object_715, var_714);
        object_715.finish();
    }
    if let Some(var_716) = &input.kinesis {
        let mut object_717 = object.key("kinesis").start_object();
        crate::json_ser::serialize_structure_kinesis_action(&mut object_717, var_716);
        object_717.finish();
    }
    if let Some(var_718) = &input.republish {
        let mut object_719 = object.key("republish").start_object();
        crate::json_ser::serialize_structure_republish_action(&mut object_719, var_718);
        object_719.finish();
    }
    if let Some(var_720) = &input.s3 {
        let mut object_721 = object.key("s3").start_object();
        crate::json_ser::serialize_structure_s3_action(&mut object_721, var_720);
        object_721.finish();
    }
    if let Some(var_722) = &input.firehose {
        let mut object_723 = object.key("firehose").start_object();
        crate::json_ser::serialize_structure_firehose_action(&mut object_723, var_722);
        object_723.finish();
    }
    if let Some(var_724) = &input.cloudwatch_metric {
        let mut object_725 = object.key("cloudwatchMetric").start_object();
        crate::json_ser::serialize_structure_cloudwatch_metric_action(&mut object_725, var_724);
        object_725.finish();
    }
    if let Some(var_726) = &input.cloudwatch_alarm {
        let mut object_727 = object.key("cloudwatchAlarm").start_object();
        crate::json_ser::serialize_structure_cloudwatch_alarm_action(&mut object_727, var_726);
        object_727.finish();
    }
    if let Some(var_728) = &input.cloudwatch_logs {
        let mut object_729 = object.key("cloudwatchLogs").start_object();
        crate::json_ser::serialize_structure_cloudwatch_logs_action(&mut object_729, var_728);
        object_729.finish();
    }
    if let Some(var_730) = &input.elasticsearch {
        let mut object_731 = object.key("elasticsearch").start_object();
        crate::json_ser::serialize_structure_elasticsearch_action(&mut object_731, var_730);
        object_731.finish();
    }
    if let Some(var_732) = &input.salesforce {
        let mut object_733 = object.key("salesforce").start_object();
        crate::json_ser::serialize_structure_salesforce_action(&mut object_733, var_732);
        object_733.finish();
    }
    if let Some(var_734) = &input.iot_analytics {
        let mut object_735 = object.key("iotAnalytics").start_object();
        crate::json_ser::serialize_structure_iot_analytics_action(&mut object_735, var_734);
        object_735.finish();
    }
    if let Some(var_736) = &input.iot_events {
        let mut object_737 = object.key("iotEvents").start_object();
        crate::json_ser::serialize_structure_iot_events_action(&mut object_737, var_736);
        object_737.finish();
    }
    if let Some(var_738) = &input.iot_site_wise {
        let mut object_739 = object.key("iotSiteWise").start_object();
        crate::json_ser::serialize_structure_iot_site_wise_action(&mut object_739, var_738);
        object_739.finish();
    }
    if let Some(var_740) = &input.step_functions {
        let mut object_741 = object.key("stepFunctions").start_object();
        crate::json_ser::serialize_structure_step_functions_action(&mut object_741, var_740);
        object_741.finish();
    }
    if let Some(var_742) = &input.timestream {
        let mut object_743 = object.key("timestream").start_object();
        crate::json_ser::serialize_structure_timestream_action(&mut object_743, var_742);
        object_743.finish();
    }
    if let Some(var_744) = &input.http {
        let mut object_745 = object.key("http").start_object();
        crate::json_ser::serialize_structure_http_action(&mut object_745, var_744);
        object_745.finish();
    }
    if let Some(var_746) = &input.kafka {
        let mut object_747 = object.key("kafka").start_object();
        crate::json_ser::serialize_structure_kafka_action(&mut object_747, var_746);
        object_747.finish();
    }
}

pub fn serialize_structure_rate_increase_criteria(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RateIncreaseCriteria,
) {
    if let Some(var_748) = &input.number_of_notified_things {
        object.key("numberOfNotifiedThings").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_748).into()),
        );
    }
    if let Some(var_749) = &input.number_of_succeeded_things {
        object.key("numberOfSucceededThings").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_749).into()),
        );
    }
}

pub fn serialize_structure_aws_job_rate_increase_criteria(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsJobRateIncreaseCriteria,
) {
    if let Some(var_750) = &input.number_of_notified_things {
        object.key("numberOfNotifiedThings").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_750).into()),
        );
    }
    if let Some(var_751) = &input.number_of_succeeded_things {
        object.key("numberOfSucceededThings").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_751).into()),
        );
    }
}

pub fn serialize_structure_stream(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Stream,
) {
    if let Some(var_752) = &input.stream_id {
        object.key("streamId").string(var_752);
    }
    if let Some(var_753) = &input.file_id {
        object.key("fileId").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_753).into()),
        );
    }
}

pub fn serialize_structure_start_signing_job_parameter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StartSigningJobParameter,
) {
    if let Some(var_754) = &input.signing_profile_parameter {
        let mut object_755 = object.key("signingProfileParameter").start_object();
        crate::json_ser::serialize_structure_signing_profile_parameter(&mut object_755, var_754);
        object_755.finish();
    }
    if let Some(var_756) = &input.signing_profile_name {
        object.key("signingProfileName").string(var_756);
    }
    if let Some(var_757) = &input.destination {
        let mut object_758 = object.key("destination").start_object();
        crate::json_ser::serialize_structure_destination(&mut object_758, var_757);
        object_758.finish();
    }
}

pub fn serialize_structure_custom_code_signing(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CustomCodeSigning,
) {
    if let Some(var_759) = &input.signature {
        let mut object_760 = object.key("signature").start_object();
        crate::json_ser::serialize_structure_code_signing_signature(&mut object_760, var_759);
        object_760.finish();
    }
    if let Some(var_761) = &input.certificate_chain {
        let mut object_762 = object.key("certificateChain").start_object();
        crate::json_ser::serialize_structure_code_signing_certificate_chain(
            &mut object_762,
            var_761,
        );
        object_762.finish();
    }
    if let Some(var_763) = &input.hash_algorithm {
        object.key("hashAlgorithm").string(var_763);
    }
    if let Some(var_764) = &input.signature_algorithm {
        object.key("signatureAlgorithm").string(var_764);
    }
}

pub fn serialize_structure_metric_value(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MetricValue,
) {
    if let Some(var_765) = &input.count {
        object.key("count").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_765).into()),
        );
    }
    if let Some(var_766) = &input.cidrs {
        let mut array_767 = object.key("cidrs").start_array();
        for item_768 in var_766 {
            {
                array_767.value().string(item_768);
            }
        }
        array_767.finish();
    }
    if let Some(var_769) = &input.ports {
        let mut array_770 = object.key("ports").start_array();
        for item_771 in var_769 {
            {
                array_770.value().number(
                    #[allow(clippy::useless_conversion)]
                    smithy_types::Number::NegInt((*item_771).into()),
                );
            }
        }
        array_770.finish();
    }
    if let Some(var_772) = &input.number {
        object.key("number").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((*var_772).into()),
        );
    }
    if let Some(var_773) = &input.numbers {
        let mut array_774 = object.key("numbers").start_array();
        for item_775 in var_773 {
            {
                array_774.value().number(
                    #[allow(clippy::useless_conversion)]
                    smithy_types::Number::Float((*item_775).into()),
                );
            }
        }
        array_774.finish();
    }
    if let Some(var_776) = &input.strings {
        let mut array_777 = object.key("strings").start_array();
        for item_778 in var_776 {
            {
                array_777.value().string(item_778);
            }
        }
        array_777.finish();
    }
}

pub fn serialize_structure_statistical_threshold(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StatisticalThreshold,
) {
    if let Some(var_779) = &input.statistic {
        object.key("statistic").string(var_779);
    }
}

pub fn serialize_structure_machine_learning_detection_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MachineLearningDetectionConfig,
) {
    if let Some(var_780) = &input.confidence_level {
        object.key("confidenceLevel").string(var_780.as_str());
    }
}

pub fn serialize_structure_dynamo_db_action(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DynamoDbAction,
) {
    if let Some(var_781) = &input.table_name {
        object.key("tableName").string(var_781);
    }
    if let Some(var_782) = &input.role_arn {
        object.key("roleArn").string(var_782);
    }
    if let Some(var_783) = &input.operation {
        object.key("operation").string(var_783);
    }
    if let Some(var_784) = &input.hash_key_field {
        object.key("hashKeyField").string(var_784);
    }
    if let Some(var_785) = &input.hash_key_value {
        object.key("hashKeyValue").string(var_785);
    }
    if let Some(var_786) = &input.hash_key_type {
        object.key("hashKeyType").string(var_786.as_str());
    }
    if let Some(var_787) = &input.range_key_field {
        object.key("rangeKeyField").string(var_787);
    }
    if let Some(var_788) = &input.range_key_value {
        object.key("rangeKeyValue").string(var_788);
    }
    if let Some(var_789) = &input.range_key_type {
        object.key("rangeKeyType").string(var_789.as_str());
    }
    if let Some(var_790) = &input.payload_field {
        object.key("payloadField").string(var_790);
    }
}

pub fn serialize_structure_dynamo_d_bv2_action(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DynamoDBv2Action,
) {
    if let Some(var_791) = &input.role_arn {
        object.key("roleArn").string(var_791);
    }
    if let Some(var_792) = &input.put_item {
        let mut object_793 = object.key("putItem").start_object();
        crate::json_ser::serialize_structure_put_item_input(&mut object_793, var_792);
        object_793.finish();
    }
}

pub fn serialize_structure_lambda_action(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LambdaAction,
) {
    if let Some(var_794) = &input.function_arn {
        object.key("functionArn").string(var_794);
    }
}

pub fn serialize_structure_sns_action(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SnsAction,
) {
    if let Some(var_795) = &input.target_arn {
        object.key("targetArn").string(var_795);
    }
    if let Some(var_796) = &input.role_arn {
        object.key("roleArn").string(var_796);
    }
    if let Some(var_797) = &input.message_format {
        object.key("messageFormat").string(var_797.as_str());
    }
}

pub fn serialize_structure_sqs_action(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SqsAction,
) {
    if let Some(var_798) = &input.role_arn {
        object.key("roleArn").string(var_798);
    }
    if let Some(var_799) = &input.queue_url {
        object.key("queueUrl").string(var_799);
    }
    if let Some(var_800) = &input.use_base64 {
        object.key("useBase64").boolean(*var_800);
    }
}

pub fn serialize_structure_kinesis_action(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KinesisAction,
) {
    if let Some(var_801) = &input.role_arn {
        object.key("roleArn").string(var_801);
    }
    if let Some(var_802) = &input.stream_name {
        object.key("streamName").string(var_802);
    }
    if let Some(var_803) = &input.partition_key {
        object.key("partitionKey").string(var_803);
    }
}

pub fn serialize_structure_republish_action(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RepublishAction,
) {
    if let Some(var_804) = &input.role_arn {
        object.key("roleArn").string(var_804);
    }
    if let Some(var_805) = &input.topic {
        object.key("topic").string(var_805);
    }
    if let Some(var_806) = &input.qos {
        object.key("qos").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_806).into()),
        );
    }
}

pub fn serialize_structure_s3_action(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3Action,
) {
    if let Some(var_807) = &input.role_arn {
        object.key("roleArn").string(var_807);
    }
    if let Some(var_808) = &input.bucket_name {
        object.key("bucketName").string(var_808);
    }
    if let Some(var_809) = &input.key {
        object.key("key").string(var_809);
    }
    if let Some(var_810) = &input.canned_acl {
        object.key("cannedAcl").string(var_810.as_str());
    }
}

pub fn serialize_structure_firehose_action(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FirehoseAction,
) {
    if let Some(var_811) = &input.role_arn {
        object.key("roleArn").string(var_811);
    }
    if let Some(var_812) = &input.delivery_stream_name {
        object.key("deliveryStreamName").string(var_812);
    }
    if let Some(var_813) = &input.separator {
        object.key("separator").string(var_813);
    }
    if let Some(var_814) = &input.batch_mode {
        object.key("batchMode").boolean(*var_814);
    }
}

pub fn serialize_structure_cloudwatch_metric_action(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CloudwatchMetricAction,
) {
    if let Some(var_815) = &input.role_arn {
        object.key("roleArn").string(var_815);
    }
    if let Some(var_816) = &input.metric_namespace {
        object.key("metricNamespace").string(var_816);
    }
    if let Some(var_817) = &input.metric_name {
        object.key("metricName").string(var_817);
    }
    if let Some(var_818) = &input.metric_value {
        object.key("metricValue").string(var_818);
    }
    if let Some(var_819) = &input.metric_unit {
        object.key("metricUnit").string(var_819);
    }
    if let Some(var_820) = &input.metric_timestamp {
        object.key("metricTimestamp").string(var_820);
    }
}

pub fn serialize_structure_cloudwatch_alarm_action(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CloudwatchAlarmAction,
) {
    if let Some(var_821) = &input.role_arn {
        object.key("roleArn").string(var_821);
    }
    if let Some(var_822) = &input.alarm_name {
        object.key("alarmName").string(var_822);
    }
    if let Some(var_823) = &input.state_reason {
        object.key("stateReason").string(var_823);
    }
    if let Some(var_824) = &input.state_value {
        object.key("stateValue").string(var_824);
    }
}

pub fn serialize_structure_cloudwatch_logs_action(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CloudwatchLogsAction,
) {
    if let Some(var_825) = &input.role_arn {
        object.key("roleArn").string(var_825);
    }
    if let Some(var_826) = &input.log_group_name {
        object.key("logGroupName").string(var_826);
    }
}

pub fn serialize_structure_elasticsearch_action(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ElasticsearchAction,
) {
    if let Some(var_827) = &input.role_arn {
        object.key("roleArn").string(var_827);
    }
    if let Some(var_828) = &input.endpoint {
        object.key("endpoint").string(var_828);
    }
    if let Some(var_829) = &input.index {
        object.key("index").string(var_829);
    }
    if let Some(var_830) = &input.r#type {
        object.key("type").string(var_830);
    }
    if let Some(var_831) = &input.id {
        object.key("id").string(var_831);
    }
}

pub fn serialize_structure_salesforce_action(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SalesforceAction,
) {
    if let Some(var_832) = &input.token {
        object.key("token").string(var_832);
    }
    if let Some(var_833) = &input.url {
        object.key("url").string(var_833);
    }
}

pub fn serialize_structure_iot_analytics_action(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IotAnalyticsAction,
) {
    if let Some(var_834) = &input.channel_arn {
        object.key("channelArn").string(var_834);
    }
    if let Some(var_835) = &input.channel_name {
        object.key("channelName").string(var_835);
    }
    if let Some(var_836) = &input.batch_mode {
        object.key("batchMode").boolean(*var_836);
    }
    if let Some(var_837) = &input.role_arn {
        object.key("roleArn").string(var_837);
    }
}

pub fn serialize_structure_iot_events_action(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IotEventsAction,
) {
    if let Some(var_838) = &input.input_name {
        object.key("inputName").string(var_838);
    }
    if let Some(var_839) = &input.message_id {
        object.key("messageId").string(var_839);
    }
    if let Some(var_840) = &input.batch_mode {
        object.key("batchMode").boolean(*var_840);
    }
    if let Some(var_841) = &input.role_arn {
        object.key("roleArn").string(var_841);
    }
}

pub fn serialize_structure_iot_site_wise_action(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IotSiteWiseAction,
) {
    if let Some(var_842) = &input.put_asset_property_value_entries {
        let mut array_843 = object.key("putAssetPropertyValueEntries").start_array();
        for item_844 in var_842 {
            {
                let mut object_845 = array_843.value().start_object();
                crate::json_ser::serialize_structure_put_asset_property_value_entry(
                    &mut object_845,
                    item_844,
                );
                object_845.finish();
            }
        }
        array_843.finish();
    }
    if let Some(var_846) = &input.role_arn {
        object.key("roleArn").string(var_846);
    }
}

pub fn serialize_structure_step_functions_action(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StepFunctionsAction,
) {
    if let Some(var_847) = &input.execution_name_prefix {
        object.key("executionNamePrefix").string(var_847);
    }
    if let Some(var_848) = &input.state_machine_name {
        object.key("stateMachineName").string(var_848);
    }
    if let Some(var_849) = &input.role_arn {
        object.key("roleArn").string(var_849);
    }
}

pub fn serialize_structure_timestream_action(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TimestreamAction,
) {
    if let Some(var_850) = &input.role_arn {
        object.key("roleArn").string(var_850);
    }
    if let Some(var_851) = &input.database_name {
        object.key("databaseName").string(var_851);
    }
    if let Some(var_852) = &input.table_name {
        object.key("tableName").string(var_852);
    }
    if let Some(var_853) = &input.dimensions {
        let mut array_854 = object.key("dimensions").start_array();
        for item_855 in var_853 {
            {
                let mut object_856 = array_854.value().start_object();
                crate::json_ser::serialize_structure_timestream_dimension(
                    &mut object_856,
                    item_855,
                );
                object_856.finish();
            }
        }
        array_854.finish();
    }
    if let Some(var_857) = &input.timestamp {
        let mut object_858 = object.key("timestamp").start_object();
        crate::json_ser::serialize_structure_timestream_timestamp(&mut object_858, var_857);
        object_858.finish();
    }
}

pub fn serialize_structure_http_action(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HttpAction,
) {
    if let Some(var_859) = &input.url {
        object.key("url").string(var_859);
    }
    if let Some(var_860) = &input.confirmation_url {
        object.key("confirmationUrl").string(var_860);
    }
    if let Some(var_861) = &input.headers {
        let mut array_862 = object.key("headers").start_array();
        for item_863 in var_861 {
            {
                let mut object_864 = array_862.value().start_object();
                crate::json_ser::serialize_structure_http_action_header(&mut object_864, item_863);
                object_864.finish();
            }
        }
        array_862.finish();
    }
    if let Some(var_865) = &input.auth {
        let mut object_866 = object.key("auth").start_object();
        crate::json_ser::serialize_structure_http_authorization(&mut object_866, var_865);
        object_866.finish();
    }
}

pub fn serialize_structure_kafka_action(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KafkaAction,
) {
    if let Some(var_867) = &input.destination_arn {
        object.key("destinationArn").string(var_867);
    }
    if let Some(var_868) = &input.topic {
        object.key("topic").string(var_868);
    }
    if let Some(var_869) = &input.key {
        object.key("key").string(var_869);
    }
    if let Some(var_870) = &input.partition {
        object.key("partition").string(var_870);
    }
    if let Some(var_871) = &input.client_properties {
        let mut object_872 = object.key("clientProperties").start_object();
        for (key_873, value_874) in var_871 {
            {
                object_872.key(key_873).string(value_874);
            }
        }
        object_872.finish();
    }
}

pub fn serialize_structure_signing_profile_parameter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SigningProfileParameter,
) {
    if let Some(var_875) = &input.certificate_arn {
        object.key("certificateArn").string(var_875);
    }
    if let Some(var_876) = &input.platform {
        object.key("platform").string(var_876);
    }
    if let Some(var_877) = &input.certificate_path_on_device {
        object.key("certificatePathOnDevice").string(var_877);
    }
}

pub fn serialize_structure_destination(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Destination,
) {
    if let Some(var_878) = &input.s3_destination {
        let mut object_879 = object.key("s3Destination").start_object();
        crate::json_ser::serialize_structure_s3_destination(&mut object_879, var_878);
        object_879.finish();
    }
}

pub fn serialize_structure_code_signing_signature(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CodeSigningSignature,
) {
    if let Some(var_880) = &input.inline_document {
        object
            .key("inlineDocument")
            .string_unchecked(&smithy_types::base64::encode(var_880));
    }
}

pub fn serialize_structure_code_signing_certificate_chain(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CodeSigningCertificateChain,
) {
    if let Some(var_881) = &input.certificate_name {
        object.key("certificateName").string(var_881);
    }
    if let Some(var_882) = &input.inline_document {
        object.key("inlineDocument").string(var_882);
    }
}

pub fn serialize_structure_put_item_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PutItemInput,
) {
    if let Some(var_883) = &input.table_name {
        object.key("tableName").string(var_883);
    }
}

pub fn serialize_structure_put_asset_property_value_entry(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PutAssetPropertyValueEntry,
) {
    if let Some(var_884) = &input.entry_id {
        object.key("entryId").string(var_884);
    }
    if let Some(var_885) = &input.asset_id {
        object.key("assetId").string(var_885);
    }
    if let Some(var_886) = &input.property_id {
        object.key("propertyId").string(var_886);
    }
    if let Some(var_887) = &input.property_alias {
        object.key("propertyAlias").string(var_887);
    }
    if let Some(var_888) = &input.property_values {
        let mut array_889 = object.key("propertyValues").start_array();
        for item_890 in var_888 {
            {
                let mut object_891 = array_889.value().start_object();
                crate::json_ser::serialize_structure_asset_property_value(
                    &mut object_891,
                    item_890,
                );
                object_891.finish();
            }
        }
        array_889.finish();
    }
}

pub fn serialize_structure_timestream_dimension(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TimestreamDimension,
) {
    if let Some(var_892) = &input.name {
        object.key("name").string(var_892);
    }
    if let Some(var_893) = &input.value {
        object.key("value").string(var_893);
    }
}

pub fn serialize_structure_timestream_timestamp(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TimestreamTimestamp,
) {
    if let Some(var_894) = &input.value {
        object.key("value").string(var_894);
    }
    if let Some(var_895) = &input.unit {
        object.key("unit").string(var_895);
    }
}

pub fn serialize_structure_http_action_header(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HttpActionHeader,
) {
    if let Some(var_896) = &input.key {
        object.key("key").string(var_896);
    }
    if let Some(var_897) = &input.value {
        object.key("value").string(var_897);
    }
}

pub fn serialize_structure_http_authorization(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HttpAuthorization,
) {
    if let Some(var_898) = &input.sigv4 {
        let mut object_899 = object.key("sigv4").start_object();
        crate::json_ser::serialize_structure_sig_v4_authorization(&mut object_899, var_898);
        object_899.finish();
    }
}

pub fn serialize_structure_s3_destination(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3Destination,
) {
    if let Some(var_900) = &input.bucket {
        object.key("bucket").string(var_900);
    }
    if let Some(var_901) = &input.prefix {
        object.key("prefix").string(var_901);
    }
}

pub fn serialize_structure_asset_property_value(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AssetPropertyValue,
) {
    if let Some(var_902) = &input.value {
        let mut object_903 = object.key("value").start_object();
        crate::json_ser::serialize_union_asset_property_variant(&mut object_903, var_902);
        object_903.finish();
    }
    if let Some(var_904) = &input.timestamp {
        let mut object_905 = object.key("timestamp").start_object();
        crate::json_ser::serialize_structure_asset_property_timestamp(&mut object_905, var_904);
        object_905.finish();
    }
    if let Some(var_906) = &input.quality {
        object.key("quality").string(var_906);
    }
}

pub fn serialize_structure_sig_v4_authorization(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SigV4Authorization,
) {
    if let Some(var_907) = &input.signing_region {
        object.key("signingRegion").string(var_907);
    }
    if let Some(var_908) = &input.service_name {
        object.key("serviceName").string(var_908);
    }
    if let Some(var_909) = &input.role_arn {
        object.key("roleArn").string(var_909);
    }
}

pub fn serialize_union_asset_property_variant(
    object_903: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AssetPropertyVariant,
) {
    match input {
        crate::model::AssetPropertyVariant::StringValue(inner) => {
            object_903.key("stringValue").string(inner);
        }
        crate::model::AssetPropertyVariant::IntegerValue(inner) => {
            object_903.key("integerValue").string(inner);
        }
        crate::model::AssetPropertyVariant::DoubleValue(inner) => {
            object_903.key("doubleValue").string(inner);
        }
        crate::model::AssetPropertyVariant::BooleanValue(inner) => {
            object_903.key("booleanValue").string(inner);
        }
    }
}

pub fn serialize_structure_asset_property_timestamp(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AssetPropertyTimestamp,
) {
    if let Some(var_910) = &input.time_in_seconds {
        object.key("timeInSeconds").string(var_910);
    }
    if let Some(var_911) = &input.offset_in_nanos {
        object.key("offsetInNanos").string(var_911);
    }
}
