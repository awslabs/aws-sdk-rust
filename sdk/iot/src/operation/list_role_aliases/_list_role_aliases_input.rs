// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListRoleAliasesInput {
    /// <p>The maximum number of results to return at one time.</p>
    pub page_size: ::std::option::Option<i32>,
    /// <p>A marker used to get the next set of results.</p>
    pub marker: ::std::option::Option<::std::string::String>,
    /// <p>Return the list of role aliases in ascending alphabetical order.</p>
    pub ascending_order: ::std::option::Option<bool>,
}
impl ListRoleAliasesInput {
    /// <p>The maximum number of results to return at one time.</p>
    pub fn page_size(&self) -> ::std::option::Option<i32> {
        self.page_size
    }
    /// <p>A marker used to get the next set of results.</p>
    pub fn marker(&self) -> ::std::option::Option<&str> {
        self.marker.as_deref()
    }
    /// <p>Return the list of role aliases in ascending alphabetical order.</p>
    pub fn ascending_order(&self) -> ::std::option::Option<bool> {
        self.ascending_order
    }
}
impl ListRoleAliasesInput {
    /// Creates a new builder-style object to manufacture [`ListRoleAliasesInput`](crate::operation::list_role_aliases::ListRoleAliasesInput).
    pub fn builder() -> crate::operation::list_role_aliases::builders::ListRoleAliasesInputBuilder {
        crate::operation::list_role_aliases::builders::ListRoleAliasesInputBuilder::default()
    }
}

/// A builder for [`ListRoleAliasesInput`](crate::operation::list_role_aliases::ListRoleAliasesInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListRoleAliasesInputBuilder {
    pub(crate) page_size: ::std::option::Option<i32>,
    pub(crate) marker: ::std::option::Option<::std::string::String>,
    pub(crate) ascending_order: ::std::option::Option<bool>,
}
impl ListRoleAliasesInputBuilder {
    /// <p>The maximum number of results to return at one time.</p>
    pub fn page_size(mut self, input: i32) -> Self {
        self.page_size = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of results to return at one time.</p>
    pub fn set_page_size(mut self, input: ::std::option::Option<i32>) -> Self {
        self.page_size = input;
        self
    }
    /// <p>The maximum number of results to return at one time.</p>
    pub fn get_page_size(&self) -> &::std::option::Option<i32> {
        &self.page_size
    }
    /// <p>A marker used to get the next set of results.</p>
    pub fn marker(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.marker = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A marker used to get the next set of results.</p>
    pub fn set_marker(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.marker = input;
        self
    }
    /// <p>A marker used to get the next set of results.</p>
    pub fn get_marker(&self) -> &::std::option::Option<::std::string::String> {
        &self.marker
    }
    /// <p>Return the list of role aliases in ascending alphabetical order.</p>
    pub fn ascending_order(mut self, input: bool) -> Self {
        self.ascending_order = ::std::option::Option::Some(input);
        self
    }
    /// <p>Return the list of role aliases in ascending alphabetical order.</p>
    pub fn set_ascending_order(mut self, input: ::std::option::Option<bool>) -> Self {
        self.ascending_order = input;
        self
    }
    /// <p>Return the list of role aliases in ascending alphabetical order.</p>
    pub fn get_ascending_order(&self) -> &::std::option::Option<bool> {
        &self.ascending_order
    }
    /// Consumes the builder and constructs a [`ListRoleAliasesInput`](crate::operation::list_role_aliases::ListRoleAliasesInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_role_aliases::ListRoleAliasesInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::list_role_aliases::ListRoleAliasesInput {
            page_size: self.page_size,
            marker: self.marker,
            ascending_order: self.ascending_order,
        })
    }
}
