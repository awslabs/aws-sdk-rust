// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListSecurityProfilesForTargetInput {
    /// <p>The token for the next set of results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The maximum number of results to return at one time.</p>
    #[doc(hidden)]
    pub max_results: std::option::Option<i32>,
    /// <p>If true, return child groups too.</p>
    #[doc(hidden)]
    pub recursive: bool,
    /// <p>The ARN of the target (thing group) whose attached security profiles you want to get.</p>
    #[doc(hidden)]
    pub security_profile_target_arn: std::option::Option<std::string::String>,
}
impl ListSecurityProfilesForTargetInput {
    /// <p>The token for the next set of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of results to return at one time.</p>
    pub fn max_results(&self) -> std::option::Option<i32> {
        self.max_results
    }
    /// <p>If true, return child groups too.</p>
    pub fn recursive(&self) -> bool {
        self.recursive
    }
    /// <p>The ARN of the target (thing group) whose attached security profiles you want to get.</p>
    pub fn security_profile_target_arn(&self) -> std::option::Option<&str> {
        self.security_profile_target_arn.as_deref()
    }
}
impl ListSecurityProfilesForTargetInput {
    /// Creates a new builder-style object to manufacture [`ListSecurityProfilesForTargetInput`](crate::operation::list_security_profiles_for_target::ListSecurityProfilesForTargetInput).
    pub fn builder() -> crate::operation::list_security_profiles_for_target::builders::ListSecurityProfilesForTargetInputBuilder{
        crate::operation::list_security_profiles_for_target::builders::ListSecurityProfilesForTargetInputBuilder::default()
    }
}

/// A builder for [`ListSecurityProfilesForTargetInput`](crate::operation::list_security_profiles_for_target::ListSecurityProfilesForTargetInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListSecurityProfilesForTargetInputBuilder {
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) max_results: std::option::Option<i32>,
    pub(crate) recursive: std::option::Option<bool>,
    pub(crate) security_profile_target_arn: std::option::Option<std::string::String>,
}
impl ListSecurityProfilesForTargetInputBuilder {
    /// <p>The token for the next set of results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>The token for the next set of results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The maximum number of results to return at one time.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// <p>The maximum number of results to return at one time.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>If true, return child groups too.</p>
    pub fn recursive(mut self, input: bool) -> Self {
        self.recursive = Some(input);
        self
    }
    /// <p>If true, return child groups too.</p>
    pub fn set_recursive(mut self, input: std::option::Option<bool>) -> Self {
        self.recursive = input;
        self
    }
    /// <p>The ARN of the target (thing group) whose attached security profiles you want to get.</p>
    pub fn security_profile_target_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.security_profile_target_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the target (thing group) whose attached security profiles you want to get.</p>
    pub fn set_security_profile_target_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.security_profile_target_arn = input;
        self
    }
    /// Consumes the builder and constructs a [`ListSecurityProfilesForTargetInput`](crate::operation::list_security_profiles_for_target::ListSecurityProfilesForTargetInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::list_security_profiles_for_target::ListSecurityProfilesForTargetInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::list_security_profiles_for_target::ListSecurityProfilesForTargetInput {
                next_token: self.next_token
                ,
                max_results: self.max_results
                ,
                recursive: self.recursive
                    .unwrap_or_default()
                ,
                security_profile_target_arn: self.security_profile_target_arn
                ,
            }
        )
    }
}
