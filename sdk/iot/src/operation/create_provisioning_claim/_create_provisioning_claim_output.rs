// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateProvisioningClaimOutput {
    /// <p>The ID of the certificate.</p>
    #[doc(hidden)]
    pub certificate_id: std::option::Option<std::string::String>,
    /// <p>The provisioning claim certificate.</p>
    #[doc(hidden)]
    pub certificate_pem: std::option::Option<std::string::String>,
    /// <p>The provisioning claim key pair.</p>
    #[doc(hidden)]
    pub key_pair: std::option::Option<crate::types::KeyPair>,
    /// <p>The provisioning claim expiration time.</p>
    #[doc(hidden)]
    pub expiration: std::option::Option<aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl CreateProvisioningClaimOutput {
    /// <p>The ID of the certificate.</p>
    pub fn certificate_id(&self) -> std::option::Option<&str> {
        self.certificate_id.as_deref()
    }
    /// <p>The provisioning claim certificate.</p>
    pub fn certificate_pem(&self) -> std::option::Option<&str> {
        self.certificate_pem.as_deref()
    }
    /// <p>The provisioning claim key pair.</p>
    pub fn key_pair(&self) -> std::option::Option<&crate::types::KeyPair> {
        self.key_pair.as_ref()
    }
    /// <p>The provisioning claim expiration time.</p>
    pub fn expiration(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.expiration.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateProvisioningClaimOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateProvisioningClaimOutput {
    /// Creates a new builder-style object to manufacture [`CreateProvisioningClaimOutput`](crate::operation::create_provisioning_claim::CreateProvisioningClaimOutput).
    pub fn builder(
    ) -> crate::operation::create_provisioning_claim::builders::CreateProvisioningClaimOutputBuilder
    {
        crate::operation::create_provisioning_claim::builders::CreateProvisioningClaimOutputBuilder::default()
    }
}

/// A builder for [`CreateProvisioningClaimOutput`](crate::operation::create_provisioning_claim::CreateProvisioningClaimOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateProvisioningClaimOutputBuilder {
    pub(crate) certificate_id: std::option::Option<std::string::String>,
    pub(crate) certificate_pem: std::option::Option<std::string::String>,
    pub(crate) key_pair: std::option::Option<crate::types::KeyPair>,
    pub(crate) expiration: std::option::Option<aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl CreateProvisioningClaimOutputBuilder {
    /// <p>The ID of the certificate.</p>
    pub fn certificate_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.certificate_id = Some(input.into());
        self
    }
    /// <p>The ID of the certificate.</p>
    pub fn set_certificate_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.certificate_id = input;
        self
    }
    /// <p>The provisioning claim certificate.</p>
    pub fn certificate_pem(mut self, input: impl Into<std::string::String>) -> Self {
        self.certificate_pem = Some(input.into());
        self
    }
    /// <p>The provisioning claim certificate.</p>
    pub fn set_certificate_pem(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.certificate_pem = input;
        self
    }
    /// <p>The provisioning claim key pair.</p>
    pub fn key_pair(mut self, input: crate::types::KeyPair) -> Self {
        self.key_pair = Some(input);
        self
    }
    /// <p>The provisioning claim key pair.</p>
    pub fn set_key_pair(mut self, input: std::option::Option<crate::types::KeyPair>) -> Self {
        self.key_pair = input;
        self
    }
    /// <p>The provisioning claim expiration time.</p>
    pub fn expiration(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.expiration = Some(input);
        self
    }
    /// <p>The provisioning claim expiration time.</p>
    pub fn set_expiration(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.expiration = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`CreateProvisioningClaimOutput`](crate::operation::create_provisioning_claim::CreateProvisioningClaimOutput).
    pub fn build(
        self,
    ) -> crate::operation::create_provisioning_claim::CreateProvisioningClaimOutput {
        crate::operation::create_provisioning_claim::CreateProvisioningClaimOutput {
            certificate_id: self.certificate_id,
            certificate_pem: self.certificate_pem,
            key_pair: self.key_pair,
            expiration: self.expiration,
            _request_id: self._request_id,
        }
    }
}
