// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListAttachedPoliciesInput {
    /// <p>The group or principal for which the policies will be listed. Valid principals are CertificateArn (arn:aws:iot:<i>region</i>:<i>accountId</i>:cert/<i>certificateId</i>), thingGroupArn (arn:aws:iot:<i>region</i>:<i>accountId</i>:thinggroup/<i>groupName</i>) and CognitoId (<i>region</i>:<i>id</i>).</p>
    #[doc(hidden)]
    pub target: std::option::Option<std::string::String>,
    /// <p>When true, recursively list attached policies.</p>
    #[doc(hidden)]
    pub recursive: bool,
    /// <p>The token to retrieve the next set of results.</p>
    #[doc(hidden)]
    pub marker: std::option::Option<std::string::String>,
    /// <p>The maximum number of results to be returned per request.</p>
    #[doc(hidden)]
    pub page_size: std::option::Option<i32>,
}
impl ListAttachedPoliciesInput {
    /// <p>The group or principal for which the policies will be listed. Valid principals are CertificateArn (arn:aws:iot:<i>region</i>:<i>accountId</i>:cert/<i>certificateId</i>), thingGroupArn (arn:aws:iot:<i>region</i>:<i>accountId</i>:thinggroup/<i>groupName</i>) and CognitoId (<i>region</i>:<i>id</i>).</p>
    pub fn target(&self) -> std::option::Option<&str> {
        self.target.as_deref()
    }
    /// <p>When true, recursively list attached policies.</p>
    pub fn recursive(&self) -> bool {
        self.recursive
    }
    /// <p>The token to retrieve the next set of results.</p>
    pub fn marker(&self) -> std::option::Option<&str> {
        self.marker.as_deref()
    }
    /// <p>The maximum number of results to be returned per request.</p>
    pub fn page_size(&self) -> std::option::Option<i32> {
        self.page_size
    }
}
impl ListAttachedPoliciesInput {
    /// Creates a new builder-style object to manufacture [`ListAttachedPoliciesInput`](crate::operation::list_attached_policies::ListAttachedPoliciesInput).
    pub fn builder(
    ) -> crate::operation::list_attached_policies::builders::ListAttachedPoliciesInputBuilder {
        crate::operation::list_attached_policies::builders::ListAttachedPoliciesInputBuilder::default()
    }
}

/// A builder for [`ListAttachedPoliciesInput`](crate::operation::list_attached_policies::ListAttachedPoliciesInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListAttachedPoliciesInputBuilder {
    pub(crate) target: std::option::Option<std::string::String>,
    pub(crate) recursive: std::option::Option<bool>,
    pub(crate) marker: std::option::Option<std::string::String>,
    pub(crate) page_size: std::option::Option<i32>,
}
impl ListAttachedPoliciesInputBuilder {
    /// <p>The group or principal for which the policies will be listed. Valid principals are CertificateArn (arn:aws:iot:<i>region</i>:<i>accountId</i>:cert/<i>certificateId</i>), thingGroupArn (arn:aws:iot:<i>region</i>:<i>accountId</i>:thinggroup/<i>groupName</i>) and CognitoId (<i>region</i>:<i>id</i>).</p>
    pub fn target(mut self, input: impl Into<std::string::String>) -> Self {
        self.target = Some(input.into());
        self
    }
    /// <p>The group or principal for which the policies will be listed. Valid principals are CertificateArn (arn:aws:iot:<i>region</i>:<i>accountId</i>:cert/<i>certificateId</i>), thingGroupArn (arn:aws:iot:<i>region</i>:<i>accountId</i>:thinggroup/<i>groupName</i>) and CognitoId (<i>region</i>:<i>id</i>).</p>
    pub fn set_target(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.target = input;
        self
    }
    /// <p>When true, recursively list attached policies.</p>
    pub fn recursive(mut self, input: bool) -> Self {
        self.recursive = Some(input);
        self
    }
    /// <p>When true, recursively list attached policies.</p>
    pub fn set_recursive(mut self, input: std::option::Option<bool>) -> Self {
        self.recursive = input;
        self
    }
    /// <p>The token to retrieve the next set of results.</p>
    pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
        self.marker = Some(input.into());
        self
    }
    /// <p>The token to retrieve the next set of results.</p>
    pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.marker = input;
        self
    }
    /// <p>The maximum number of results to be returned per request.</p>
    pub fn page_size(mut self, input: i32) -> Self {
        self.page_size = Some(input);
        self
    }
    /// <p>The maximum number of results to be returned per request.</p>
    pub fn set_page_size(mut self, input: std::option::Option<i32>) -> Self {
        self.page_size = input;
        self
    }
    /// Consumes the builder and constructs a [`ListAttachedPoliciesInput`](crate::operation::list_attached_policies::ListAttachedPoliciesInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::list_attached_policies::ListAttachedPoliciesInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::list_attached_policies::ListAttachedPoliciesInput {
                target: self.target,
                recursive: self.recursive.unwrap_or_default(),
                marker: self.marker,
                page_size: self.page_size,
            },
        )
    }
}
