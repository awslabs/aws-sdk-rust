// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::list_audit_mitigation_actions_tasks::_list_audit_mitigation_actions_tasks_output::ListAuditMitigationActionsTasksOutputBuilder;

pub use crate::operation::list_audit_mitigation_actions_tasks::_list_audit_mitigation_actions_tasks_input::ListAuditMitigationActionsTasksInputBuilder;

impl ListAuditMitigationActionsTasksInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::list_audit_mitigation_actions_tasks::ListAuditMitigationActionsTasksOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_audit_mitigation_actions_tasks::ListAuditMitigationActionsTasksError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.list_audit_mitigation_actions_tasks();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `ListAuditMitigationActionsTasks`.
///
/// <p>Gets a list of audit mitigation action tasks that match the specified filters.</p>
/// <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">ListAuditMitigationActionsTasks</a> action.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct ListAuditMitigationActionsTasksFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::list_audit_mitigation_actions_tasks::builders::ListAuditMitigationActionsTasksInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::list_audit_mitigation_actions_tasks::ListAuditMitigationActionsTasksOutput,
        crate::operation::list_audit_mitigation_actions_tasks::ListAuditMitigationActionsTasksError,
    > for ListAuditMitigationActionsTasksFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::list_audit_mitigation_actions_tasks::ListAuditMitigationActionsTasksOutput,
            crate::operation::list_audit_mitigation_actions_tasks::ListAuditMitigationActionsTasksError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl ListAuditMitigationActionsTasksFluentBuilder {
    /// Creates a new `ListAuditMitigationActionsTasks`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the ListAuditMitigationActionsTasks as a reference.
    pub fn as_input(&self) -> &crate::operation::list_audit_mitigation_actions_tasks::builders::ListAuditMitigationActionsTasksInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_audit_mitigation_actions_tasks::ListAuditMitigationActionsTasksOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_audit_mitigation_actions_tasks::ListAuditMitigationActionsTasksError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::list_audit_mitigation_actions_tasks::ListAuditMitigationActionsTasks::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::list_audit_mitigation_actions_tasks::ListAuditMitigationActionsTasks::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::list_audit_mitigation_actions_tasks::ListAuditMitigationActionsTasksOutput,
        crate::operation::list_audit_mitigation_actions_tasks::ListAuditMitigationActionsTasksError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::list_audit_mitigation_actions_tasks::paginator::ListAuditMitigationActionsTasksPaginator::send) which returns a [`PaginationStream`](aws_smithy_async::future::pagination_stream::PaginationStream).
    pub fn into_paginator(self) -> crate::operation::list_audit_mitigation_actions_tasks::paginator::ListAuditMitigationActionsTasksPaginator {
        crate::operation::list_audit_mitigation_actions_tasks::paginator::ListAuditMitigationActionsTasksPaginator::new(self.handle, self.inner)
    }
    /// <p>Specify this filter to limit results to tasks that were applied to results for a specific audit.</p>
    pub fn audit_task_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.audit_task_id(input.into());
        self
    }
    /// <p>Specify this filter to limit results to tasks that were applied to results for a specific audit.</p>
    pub fn set_audit_task_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_audit_task_id(input);
        self
    }
    /// <p>Specify this filter to limit results to tasks that were applied to results for a specific audit.</p>
    pub fn get_audit_task_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_audit_task_id()
    }
    /// <p>Specify this filter to limit results to tasks that were applied to a specific audit finding.</p>
    pub fn finding_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.finding_id(input.into());
        self
    }
    /// <p>Specify this filter to limit results to tasks that were applied to a specific audit finding.</p>
    pub fn set_finding_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_finding_id(input);
        self
    }
    /// <p>Specify this filter to limit results to tasks that were applied to a specific audit finding.</p>
    pub fn get_finding_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_finding_id()
    }
    /// <p>Specify this filter to limit results to tasks that are in a specific state.</p>
    pub fn task_status(mut self, input: crate::types::AuditMitigationActionsTaskStatus) -> Self {
        self.inner = self.inner.task_status(input);
        self
    }
    /// <p>Specify this filter to limit results to tasks that are in a specific state.</p>
    pub fn set_task_status(mut self, input: ::std::option::Option<crate::types::AuditMitigationActionsTaskStatus>) -> Self {
        self.inner = self.inner.set_task_status(input);
        self
    }
    /// <p>Specify this filter to limit results to tasks that are in a specific state.</p>
    pub fn get_task_status(&self) -> &::std::option::Option<crate::types::AuditMitigationActionsTaskStatus> {
        self.inner.get_task_status()
    }
    /// <p>The maximum number of results to return at one time. The default is 25.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of results to return at one time. The default is 25.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>The maximum number of results to return at one time. The default is 25.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        self.inner.get_max_results()
    }
    /// <p>The token for the next set of results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>The token for the next set of results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The token for the next set of results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_next_token()
    }
    /// <p>Specify this filter to limit results to tasks that began on or after a specific date and time.</p>
    pub fn start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.start_time(input);
        self
    }
    /// <p>Specify this filter to limit results to tasks that began on or after a specific date and time.</p>
    pub fn set_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.inner = self.inner.set_start_time(input);
        self
    }
    /// <p>Specify this filter to limit results to tasks that began on or after a specific date and time.</p>
    pub fn get_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        self.inner.get_start_time()
    }
    /// <p>Specify this filter to limit results to tasks that were completed or canceled on or before a specific date and time.</p>
    pub fn end_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.end_time(input);
        self
    }
    /// <p>Specify this filter to limit results to tasks that were completed or canceled on or before a specific date and time.</p>
    pub fn set_end_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.inner = self.inner.set_end_time(input);
        self
    }
    /// <p>Specify this filter to limit results to tasks that were completed or canceled on or before a specific date and time.</p>
    pub fn get_end_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        self.inner.get_end_time()
    }
}
