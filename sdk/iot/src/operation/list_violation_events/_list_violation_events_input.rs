// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListViolationEventsInput {
    /// <p>The start time for the alerts to be listed.</p>
    #[doc(hidden)]
    pub start_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The end time for the alerts to be listed.</p>
    #[doc(hidden)]
    pub end_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>A filter to limit results to those alerts caused by the specified thing.</p>
    #[doc(hidden)]
    pub thing_name: std::option::Option<std::string::String>,
    /// <p>A filter to limit results to those alerts generated by the specified security profile.</p>
    #[doc(hidden)]
    pub security_profile_name: std::option::Option<std::string::String>,
    /// <p> The criteria for a behavior. </p>
    #[doc(hidden)]
    pub behavior_criteria_type: std::option::Option<crate::types::BehaviorCriteriaType>,
    /// <p> A list of all suppressed alerts. </p>
    #[doc(hidden)]
    pub list_suppressed_alerts: std::option::Option<bool>,
    /// <p>The verification state of the violation (detect alarm).</p>
    #[doc(hidden)]
    pub verification_state: std::option::Option<crate::types::VerificationState>,
    /// <p>The token for the next set of results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The maximum number of results to return at one time.</p>
    #[doc(hidden)]
    pub max_results: std::option::Option<i32>,
}
impl ListViolationEventsInput {
    /// <p>The start time for the alerts to be listed.</p>
    pub fn start_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
    /// <p>The end time for the alerts to be listed.</p>
    pub fn end_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.end_time.as_ref()
    }
    /// <p>A filter to limit results to those alerts caused by the specified thing.</p>
    pub fn thing_name(&self) -> std::option::Option<&str> {
        self.thing_name.as_deref()
    }
    /// <p>A filter to limit results to those alerts generated by the specified security profile.</p>
    pub fn security_profile_name(&self) -> std::option::Option<&str> {
        self.security_profile_name.as_deref()
    }
    /// <p> The criteria for a behavior. </p>
    pub fn behavior_criteria_type(
        &self,
    ) -> std::option::Option<&crate::types::BehaviorCriteriaType> {
        self.behavior_criteria_type.as_ref()
    }
    /// <p> A list of all suppressed alerts. </p>
    pub fn list_suppressed_alerts(&self) -> std::option::Option<bool> {
        self.list_suppressed_alerts
    }
    /// <p>The verification state of the violation (detect alarm).</p>
    pub fn verification_state(&self) -> std::option::Option<&crate::types::VerificationState> {
        self.verification_state.as_ref()
    }
    /// <p>The token for the next set of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of results to return at one time.</p>
    pub fn max_results(&self) -> std::option::Option<i32> {
        self.max_results
    }
}
impl ListViolationEventsInput {
    /// Creates a new builder-style object to manufacture [`ListViolationEventsInput`](crate::operation::list_violation_events::ListViolationEventsInput).
    pub fn builder(
    ) -> crate::operation::list_violation_events::builders::ListViolationEventsInputBuilder {
        crate::operation::list_violation_events::builders::ListViolationEventsInputBuilder::default(
        )
    }
}

/// A builder for [`ListViolationEventsInput`](crate::operation::list_violation_events::ListViolationEventsInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListViolationEventsInputBuilder {
    pub(crate) start_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) end_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) thing_name: std::option::Option<std::string::String>,
    pub(crate) security_profile_name: std::option::Option<std::string::String>,
    pub(crate) behavior_criteria_type: std::option::Option<crate::types::BehaviorCriteriaType>,
    pub(crate) list_suppressed_alerts: std::option::Option<bool>,
    pub(crate) verification_state: std::option::Option<crate::types::VerificationState>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) max_results: std::option::Option<i32>,
}
impl ListViolationEventsInputBuilder {
    /// <p>The start time for the alerts to be listed.</p>
    pub fn start_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.start_time = Some(input);
        self
    }
    /// <p>The start time for the alerts to be listed.</p>
    pub fn set_start_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.start_time = input;
        self
    }
    /// <p>The end time for the alerts to be listed.</p>
    pub fn end_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.end_time = Some(input);
        self
    }
    /// <p>The end time for the alerts to be listed.</p>
    pub fn set_end_time(mut self, input: std::option::Option<aws_smithy_types::DateTime>) -> Self {
        self.end_time = input;
        self
    }
    /// <p>A filter to limit results to those alerts caused by the specified thing.</p>
    pub fn thing_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.thing_name = Some(input.into());
        self
    }
    /// <p>A filter to limit results to those alerts caused by the specified thing.</p>
    pub fn set_thing_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.thing_name = input;
        self
    }
    /// <p>A filter to limit results to those alerts generated by the specified security profile.</p>
    pub fn security_profile_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.security_profile_name = Some(input.into());
        self
    }
    /// <p>A filter to limit results to those alerts generated by the specified security profile.</p>
    pub fn set_security_profile_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.security_profile_name = input;
        self
    }
    /// <p> The criteria for a behavior. </p>
    pub fn behavior_criteria_type(mut self, input: crate::types::BehaviorCriteriaType) -> Self {
        self.behavior_criteria_type = Some(input);
        self
    }
    /// <p> The criteria for a behavior. </p>
    pub fn set_behavior_criteria_type(
        mut self,
        input: std::option::Option<crate::types::BehaviorCriteriaType>,
    ) -> Self {
        self.behavior_criteria_type = input;
        self
    }
    /// <p> A list of all suppressed alerts. </p>
    pub fn list_suppressed_alerts(mut self, input: bool) -> Self {
        self.list_suppressed_alerts = Some(input);
        self
    }
    /// <p> A list of all suppressed alerts. </p>
    pub fn set_list_suppressed_alerts(mut self, input: std::option::Option<bool>) -> Self {
        self.list_suppressed_alerts = input;
        self
    }
    /// <p>The verification state of the violation (detect alarm).</p>
    pub fn verification_state(mut self, input: crate::types::VerificationState) -> Self {
        self.verification_state = Some(input);
        self
    }
    /// <p>The verification state of the violation (detect alarm).</p>
    pub fn set_verification_state(
        mut self,
        input: std::option::Option<crate::types::VerificationState>,
    ) -> Self {
        self.verification_state = input;
        self
    }
    /// <p>The token for the next set of results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>The token for the next set of results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The maximum number of results to return at one time.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// <p>The maximum number of results to return at one time.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// Consumes the builder and constructs a [`ListViolationEventsInput`](crate::operation::list_violation_events::ListViolationEventsInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::list_violation_events::ListViolationEventsInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::list_violation_events::ListViolationEventsInput {
                start_time: self.start_time,
                end_time: self.end_time,
                thing_name: self.thing_name,
                security_profile_name: self.security_profile_name,
                behavior_criteria_type: self.behavior_criteria_type,
                list_suppressed_alerts: self.list_suppressed_alerts,
                verification_state: self.verification_state,
                next_token: self.next_token,
                max_results: self.max_results,
            },
        )
    }
}
