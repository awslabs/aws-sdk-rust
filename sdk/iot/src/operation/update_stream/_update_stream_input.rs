// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateStreamInput {
    /// <p>The stream ID.</p>
    pub stream_id: ::std::option::Option<::std::string::String>,
    /// <p>The description of the stream.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The files associated with the stream.</p>
    pub files: ::std::option::Option<::std::vec::Vec<crate::types::StreamFile>>,
    /// <p>An IAM role that allows the IoT service principal assumes to access your S3 files.</p>
    pub role_arn: ::std::option::Option<::std::string::String>,
}
impl UpdateStreamInput {
    /// <p>The stream ID.</p>
    pub fn stream_id(&self) -> ::std::option::Option<&str> {
        self.stream_id.as_deref()
    }
    /// <p>The description of the stream.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The files associated with the stream.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.files.is_none()`.
    pub fn files(&self) -> &[crate::types::StreamFile] {
        self.files.as_deref().unwrap_or_default()
    }
    /// <p>An IAM role that allows the IoT service principal assumes to access your S3 files.</p>
    pub fn role_arn(&self) -> ::std::option::Option<&str> {
        self.role_arn.as_deref()
    }
}
impl UpdateStreamInput {
    /// Creates a new builder-style object to manufacture [`UpdateStreamInput`](crate::operation::update_stream::UpdateStreamInput).
    pub fn builder() -> crate::operation::update_stream::builders::UpdateStreamInputBuilder {
        crate::operation::update_stream::builders::UpdateStreamInputBuilder::default()
    }
}

/// A builder for [`UpdateStreamInput`](crate::operation::update_stream::UpdateStreamInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateStreamInputBuilder {
    pub(crate) stream_id: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) files: ::std::option::Option<::std::vec::Vec<crate::types::StreamFile>>,
    pub(crate) role_arn: ::std::option::Option<::std::string::String>,
}
impl UpdateStreamInputBuilder {
    /// <p>The stream ID.</p>
    /// This field is required.
    pub fn stream_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.stream_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The stream ID.</p>
    pub fn set_stream_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.stream_id = input;
        self
    }
    /// <p>The stream ID.</p>
    pub fn get_stream_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.stream_id
    }
    /// <p>The description of the stream.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the stream.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the stream.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Appends an item to `files`.
    ///
    /// To override the contents of this collection use [`set_files`](Self::set_files).
    ///
    /// <p>The files associated with the stream.</p>
    pub fn files(mut self, input: crate::types::StreamFile) -> Self {
        let mut v = self.files.unwrap_or_default();
        v.push(input);
        self.files = ::std::option::Option::Some(v);
        self
    }
    /// <p>The files associated with the stream.</p>
    pub fn set_files(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::StreamFile>>) -> Self {
        self.files = input;
        self
    }
    /// <p>The files associated with the stream.</p>
    pub fn get_files(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StreamFile>> {
        &self.files
    }
    /// <p>An IAM role that allows the IoT service principal assumes to access your S3 files.</p>
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An IAM role that allows the IoT service principal assumes to access your S3 files.</p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>An IAM role that allows the IoT service principal assumes to access your S3 files.</p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn
    }
    /// Consumes the builder and constructs a [`UpdateStreamInput`](crate::operation::update_stream::UpdateStreamInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_stream::UpdateStreamInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_stream::UpdateStreamInput {
            stream_id: self.stream_id,
            description: self.description,
            files: self.files,
            role_arn: self.role_arn,
        })
    }
}
