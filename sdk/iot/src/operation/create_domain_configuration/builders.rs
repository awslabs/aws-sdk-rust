// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_domain_configuration::_create_domain_configuration_output::CreateDomainConfigurationOutputBuilder;

pub use crate::operation::create_domain_configuration::_create_domain_configuration_input::CreateDomainConfigurationInputBuilder;

/// Fluent builder constructing a request to `CreateDomainConfiguration`.
///
/// <p>Creates a domain configuration.</p>
/// <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">CreateDomainConfiguration</a> action.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateDomainConfigurationFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::create_domain_configuration::builders::CreateDomainConfigurationInputBuilder
            }
impl CreateDomainConfigurationFluentBuilder {
    /// Creates a new `CreateDomainConfiguration`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::create_domain_configuration::CreateDomainConfiguration,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::create_domain_configuration::CreateDomainConfigurationError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::create_domain_configuration::CreateDomainConfigurationOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::create_domain_configuration::CreateDomainConfigurationError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the domain configuration. This value must be unique to a region.</p>
    pub fn domain_configuration_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.domain_configuration_name(input.into());
        self
    }
    /// <p>The name of the domain configuration. This value must be unique to a region.</p>
    pub fn set_domain_configuration_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_domain_configuration_name(input);
        self
    }
    /// <p>The name of the domain.</p>
    pub fn domain_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.domain_name(input.into());
        self
    }
    /// <p>The name of the domain.</p>
    pub fn set_domain_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_domain_name(input);
        self
    }
    /// Appends an item to `serverCertificateArns`.
    ///
    /// To override the contents of this collection use [`set_server_certificate_arns`](Self::set_server_certificate_arns).
    ///
    /// <p>The ARNs of the certificates that IoT passes to the device during the TLS handshake. Currently you can specify only one certificate ARN. This value is not required for Amazon Web Services-managed domains.</p>
    pub fn server_certificate_arns(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.server_certificate_arns(input.into());
        self
    }
    /// <p>The ARNs of the certificates that IoT passes to the device during the TLS handshake. Currently you can specify only one certificate ARN. This value is not required for Amazon Web Services-managed domains.</p>
    pub fn set_server_certificate_arns(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_server_certificate_arns(input);
        self
    }
    /// <p>The certificate used to validate the server certificate and prove domain name ownership. This certificate must be signed by a public certificate authority. This value is not required for Amazon Web Services-managed domains.</p>
    pub fn validation_certificate_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.validation_certificate_arn(input.into());
        self
    }
    /// <p>The certificate used to validate the server certificate and prove domain name ownership. This certificate must be signed by a public certificate authority. This value is not required for Amazon Web Services-managed domains.</p>
    pub fn set_validation_certificate_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_validation_certificate_arn(input);
        self
    }
    /// <p>An object that specifies the authorization service for a domain.</p>
    pub fn authorizer_config(mut self, input: crate::types::AuthorizerConfig) -> Self {
        self.inner = self.inner.authorizer_config(input);
        self
    }
    /// <p>An object that specifies the authorization service for a domain.</p>
    pub fn set_authorizer_config(
        mut self,
        input: std::option::Option<crate::types::AuthorizerConfig>,
    ) -> Self {
        self.inner = self.inner.set_authorizer_config(input);
        self
    }
    /// <p>The type of service delivered by the endpoint.</p> <note>
    /// <p>Amazon Web Services IoT Core currently supports only the <code>DATA</code> service type.</p>
    /// </note>
    pub fn service_type(mut self, input: crate::types::ServiceType) -> Self {
        self.inner = self.inner.service_type(input);
        self
    }
    /// <p>The type of service delivered by the endpoint.</p> <note>
    /// <p>Amazon Web Services IoT Core currently supports only the <code>DATA</code> service type.</p>
    /// </note>
    pub fn set_service_type(
        mut self,
        input: std::option::Option<crate::types::ServiceType>,
    ) -> Self {
        self.inner = self.inner.set_service_type(input);
        self
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Metadata which can be used to manage the domain configuration.</p> <note>
    /// <p>For URI Request parameters use format: ...key1=value1&amp;key2=value2...</p>
    /// <p>For the CLI command-line parameter use format: &amp;&amp;tags "key1=value1&amp;key2=value2..."</p>
    /// <p>For the cli-input-json file use format: "tags": "key1=value1&amp;key2=value2..."</p>
    /// </note>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>Metadata which can be used to manage the domain configuration.</p> <note>
    /// <p>For URI Request parameters use format: ...key1=value1&amp;key2=value2...</p>
    /// <p>For the CLI command-line parameter use format: &amp;&amp;tags "key1=value1&amp;key2=value2..."</p>
    /// <p>For the cli-input-json file use format: "tags": "key1=value1&amp;key2=value2..."</p>
    /// </note>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
}
