// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The input for the EnableTopicRuleRequest operation.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct EnableTopicRuleInput {
    /// <p>The name of the topic rule to enable.</p>
    #[doc(hidden)]
    pub rule_name: std::option::Option<std::string::String>,
}
impl EnableTopicRuleInput {
    /// <p>The name of the topic rule to enable.</p>
    pub fn rule_name(&self) -> std::option::Option<&str> {
        self.rule_name.as_deref()
    }
}
impl EnableTopicRuleInput {
    /// Creates a new builder-style object to manufacture [`EnableTopicRuleInput`](crate::operation::enable_topic_rule::EnableTopicRuleInput).
    pub fn builder() -> crate::operation::enable_topic_rule::builders::EnableTopicRuleInputBuilder {
        crate::operation::enable_topic_rule::builders::EnableTopicRuleInputBuilder::default()
    }
}

/// A builder for [`EnableTopicRuleInput`](crate::operation::enable_topic_rule::EnableTopicRuleInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct EnableTopicRuleInputBuilder {
    pub(crate) rule_name: std::option::Option<std::string::String>,
}
impl EnableTopicRuleInputBuilder {
    /// <p>The name of the topic rule to enable.</p>
    pub fn rule_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.rule_name = Some(input.into());
        self
    }
    /// <p>The name of the topic rule to enable.</p>
    pub fn set_rule_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.rule_name = input;
        self
    }
    /// Consumes the builder and constructs a [`EnableTopicRuleInput`](crate::operation::enable_topic_rule::EnableTopicRuleInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::enable_topic_rule::EnableTopicRuleInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::enable_topic_rule::EnableTopicRuleInput {
            rule_name: self.rule_name,
        })
    }
}
