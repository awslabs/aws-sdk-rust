// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The input for the ListThings operation.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListThingsInput {
    /// <p>To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The maximum number of results to return in this operation.</p>
    #[doc(hidden)]
    pub max_results: std::option::Option<i32>,
    /// <p>The attribute name used to search for things.</p>
    #[doc(hidden)]
    pub attribute_name: std::option::Option<std::string::String>,
    /// <p>The attribute value used to search for things.</p>
    #[doc(hidden)]
    pub attribute_value: std::option::Option<std::string::String>,
    /// <p>The name of the thing type used to search for things.</p>
    #[doc(hidden)]
    pub thing_type_name: std::option::Option<std::string::String>,
    /// <p>When <code>true</code>, the action returns the thing resources with attribute values that start with the <code>attributeValue</code> provided.</p>
    /// <p>When <code>false</code>, or not present, the action returns only the thing resources with attribute values that match the entire <code>attributeValue</code> provided. </p>
    #[doc(hidden)]
    pub use_prefix_attribute_value: bool,
}
impl ListThingsInput {
    /// <p>To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of results to return in this operation.</p>
    pub fn max_results(&self) -> std::option::Option<i32> {
        self.max_results
    }
    /// <p>The attribute name used to search for things.</p>
    pub fn attribute_name(&self) -> std::option::Option<&str> {
        self.attribute_name.as_deref()
    }
    /// <p>The attribute value used to search for things.</p>
    pub fn attribute_value(&self) -> std::option::Option<&str> {
        self.attribute_value.as_deref()
    }
    /// <p>The name of the thing type used to search for things.</p>
    pub fn thing_type_name(&self) -> std::option::Option<&str> {
        self.thing_type_name.as_deref()
    }
    /// <p>When <code>true</code>, the action returns the thing resources with attribute values that start with the <code>attributeValue</code> provided.</p>
    /// <p>When <code>false</code>, or not present, the action returns only the thing resources with attribute values that match the entire <code>attributeValue</code> provided. </p>
    pub fn use_prefix_attribute_value(&self) -> bool {
        self.use_prefix_attribute_value
    }
}
impl ListThingsInput {
    /// Creates a new builder-style object to manufacture [`ListThingsInput`](crate::operation::list_things::ListThingsInput).
    pub fn builder() -> crate::operation::list_things::builders::ListThingsInputBuilder {
        crate::operation::list_things::builders::ListThingsInputBuilder::default()
    }
}

/// A builder for [`ListThingsInput`](crate::operation::list_things::ListThingsInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListThingsInputBuilder {
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) max_results: std::option::Option<i32>,
    pub(crate) attribute_name: std::option::Option<std::string::String>,
    pub(crate) attribute_value: std::option::Option<std::string::String>,
    pub(crate) thing_type_name: std::option::Option<std::string::String>,
    pub(crate) use_prefix_attribute_value: std::option::Option<bool>,
}
impl ListThingsInputBuilder {
    /// <p>To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The maximum number of results to return in this operation.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// <p>The maximum number of results to return in this operation.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The attribute name used to search for things.</p>
    pub fn attribute_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.attribute_name = Some(input.into());
        self
    }
    /// <p>The attribute name used to search for things.</p>
    pub fn set_attribute_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.attribute_name = input;
        self
    }
    /// <p>The attribute value used to search for things.</p>
    pub fn attribute_value(mut self, input: impl Into<std::string::String>) -> Self {
        self.attribute_value = Some(input.into());
        self
    }
    /// <p>The attribute value used to search for things.</p>
    pub fn set_attribute_value(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.attribute_value = input;
        self
    }
    /// <p>The name of the thing type used to search for things.</p>
    pub fn thing_type_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.thing_type_name = Some(input.into());
        self
    }
    /// <p>The name of the thing type used to search for things.</p>
    pub fn set_thing_type_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.thing_type_name = input;
        self
    }
    /// <p>When <code>true</code>, the action returns the thing resources with attribute values that start with the <code>attributeValue</code> provided.</p>
    /// <p>When <code>false</code>, or not present, the action returns only the thing resources with attribute values that match the entire <code>attributeValue</code> provided. </p>
    pub fn use_prefix_attribute_value(mut self, input: bool) -> Self {
        self.use_prefix_attribute_value = Some(input);
        self
    }
    /// <p>When <code>true</code>, the action returns the thing resources with attribute values that start with the <code>attributeValue</code> provided.</p>
    /// <p>When <code>false</code>, or not present, the action returns only the thing resources with attribute values that match the entire <code>attributeValue</code> provided. </p>
    pub fn set_use_prefix_attribute_value(mut self, input: std::option::Option<bool>) -> Self {
        self.use_prefix_attribute_value = input;
        self
    }
    /// Consumes the builder and constructs a [`ListThingsInput`](crate::operation::list_things::ListThingsInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::list_things::ListThingsInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::list_things::ListThingsInput {
            next_token: self.next_token,
            max_results: self.max_results,
            attribute_name: self.attribute_name,
            attribute_value: self.attribute_value,
            thing_type_name: self.thing_type_name,
            use_prefix_attribute_value: self.use_prefix_attribute_value.unwrap_or_default(),
        })
    }
}
