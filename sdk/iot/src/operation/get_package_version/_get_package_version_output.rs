// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct GetPackageVersionOutput {
    /// <p>The ARN for the package version.</p>
    pub package_version_arn: ::std::option::Option<::std::string::String>,
    /// <p>The name of the software package.</p>
    pub package_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of the package version.</p>
    pub version_name: ::std::option::Option<::std::string::String>,
    /// <p>The package version description.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>Metadata that were added to the package version that can be used to define a package version’s configuration.</p>
    pub attributes: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>The various components that make up a software package version.</p>
    pub artifact: ::std::option::Option<crate::types::PackageVersionArtifact>,
    /// <p>The status associated to the package version. For more information, see <a href="https://docs.aws.amazon.com/iot/latest/developerguide/preparing-to-use-software-package-catalog.html#package-version-lifecycle">Package version lifecycle</a>.</p>
    pub status: ::std::option::Option<crate::types::PackageVersionStatus>,
    /// <p>Error reason for a package version failure during creation or update.</p>
    pub error_reason: ::std::option::Option<::std::string::String>,
    /// <p>The date when the package version was created.</p>
    pub creation_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The date when the package version was last updated.</p>
    pub last_modified_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The software bill of materials for a software package version.</p>
    pub sbom: ::std::option::Option<crate::types::Sbom>,
    /// <p>The status of the validation for a new software bill of materials added to a software package version.</p>
    pub sbom_validation_status: ::std::option::Option<crate::types::SbomValidationStatus>,
    /// <p>The inline job document associated with a software package version used for a quick job deployment via IoT Jobs.</p>
    pub recipe: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl GetPackageVersionOutput {
    /// <p>The ARN for the package version.</p>
    pub fn package_version_arn(&self) -> ::std::option::Option<&str> {
        self.package_version_arn.as_deref()
    }
    /// <p>The name of the software package.</p>
    pub fn package_name(&self) -> ::std::option::Option<&str> {
        self.package_name.as_deref()
    }
    /// <p>The name of the package version.</p>
    pub fn version_name(&self) -> ::std::option::Option<&str> {
        self.version_name.as_deref()
    }
    /// <p>The package version description.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Metadata that were added to the package version that can be used to define a package version’s configuration.</p>
    pub fn attributes(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.attributes.as_ref()
    }
    /// <p>The various components that make up a software package version.</p>
    pub fn artifact(&self) -> ::std::option::Option<&crate::types::PackageVersionArtifact> {
        self.artifact.as_ref()
    }
    /// <p>The status associated to the package version. For more information, see <a href="https://docs.aws.amazon.com/iot/latest/developerguide/preparing-to-use-software-package-catalog.html#package-version-lifecycle">Package version lifecycle</a>.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::PackageVersionStatus> {
        self.status.as_ref()
    }
    /// <p>Error reason for a package version failure during creation or update.</p>
    pub fn error_reason(&self) -> ::std::option::Option<&str> {
        self.error_reason.as_deref()
    }
    /// <p>The date when the package version was created.</p>
    pub fn creation_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_date.as_ref()
    }
    /// <p>The date when the package version was last updated.</p>
    pub fn last_modified_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_modified_date.as_ref()
    }
    /// <p>The software bill of materials for a software package version.</p>
    pub fn sbom(&self) -> ::std::option::Option<&crate::types::Sbom> {
        self.sbom.as_ref()
    }
    /// <p>The status of the validation for a new software bill of materials added to a software package version.</p>
    pub fn sbom_validation_status(&self) -> ::std::option::Option<&crate::types::SbomValidationStatus> {
        self.sbom_validation_status.as_ref()
    }
    /// <p>The inline job document associated with a software package version used for a quick job deployment via IoT Jobs.</p>
    pub fn recipe(&self) -> ::std::option::Option<&str> {
        self.recipe.as_deref()
    }
}
impl ::std::fmt::Debug for GetPackageVersionOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetPackageVersionOutput");
        formatter.field("package_version_arn", &self.package_version_arn);
        formatter.field("package_name", &self.package_name);
        formatter.field("version_name", &self.version_name);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("attributes", &"*** Sensitive Data Redacted ***");
        formatter.field("artifact", &self.artifact);
        formatter.field("status", &self.status);
        formatter.field("error_reason", &self.error_reason);
        formatter.field("creation_date", &self.creation_date);
        formatter.field("last_modified_date", &self.last_modified_date);
        formatter.field("sbom", &self.sbom);
        formatter.field("sbom_validation_status", &self.sbom_validation_status);
        formatter.field("recipe", &"*** Sensitive Data Redacted ***");
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl ::aws_types::request_id::RequestId for GetPackageVersionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetPackageVersionOutput {
    /// Creates a new builder-style object to manufacture [`GetPackageVersionOutput`](crate::operation::get_package_version::GetPackageVersionOutput).
    pub fn builder() -> crate::operation::get_package_version::builders::GetPackageVersionOutputBuilder {
        crate::operation::get_package_version::builders::GetPackageVersionOutputBuilder::default()
    }
}

/// A builder for [`GetPackageVersionOutput`](crate::operation::get_package_version::GetPackageVersionOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct GetPackageVersionOutputBuilder {
    pub(crate) package_version_arn: ::std::option::Option<::std::string::String>,
    pub(crate) package_name: ::std::option::Option<::std::string::String>,
    pub(crate) version_name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) attributes: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) artifact: ::std::option::Option<crate::types::PackageVersionArtifact>,
    pub(crate) status: ::std::option::Option<crate::types::PackageVersionStatus>,
    pub(crate) error_reason: ::std::option::Option<::std::string::String>,
    pub(crate) creation_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_modified_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) sbom: ::std::option::Option<crate::types::Sbom>,
    pub(crate) sbom_validation_status: ::std::option::Option<crate::types::SbomValidationStatus>,
    pub(crate) recipe: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl GetPackageVersionOutputBuilder {
    /// <p>The ARN for the package version.</p>
    pub fn package_version_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.package_version_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN for the package version.</p>
    pub fn set_package_version_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.package_version_arn = input;
        self
    }
    /// <p>The ARN for the package version.</p>
    pub fn get_package_version_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.package_version_arn
    }
    /// <p>The name of the software package.</p>
    pub fn package_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.package_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the software package.</p>
    pub fn set_package_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.package_name = input;
        self
    }
    /// <p>The name of the software package.</p>
    pub fn get_package_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.package_name
    }
    /// <p>The name of the package version.</p>
    pub fn version_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.version_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the package version.</p>
    pub fn set_version_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.version_name = input;
        self
    }
    /// <p>The name of the package version.</p>
    pub fn get_version_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.version_name
    }
    /// <p>The package version description.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The package version description.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The package version description.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Adds a key-value pair to `attributes`.
    ///
    /// To override the contents of this collection use [`set_attributes`](Self::set_attributes).
    ///
    /// <p>Metadata that were added to the package version that can be used to define a package version’s configuration.</p>
    pub fn attributes(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.attributes.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.attributes = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Metadata that were added to the package version that can be used to define a package version’s configuration.</p>
    pub fn set_attributes(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.attributes = input;
        self
    }
    /// <p>Metadata that were added to the package version that can be used to define a package version’s configuration.</p>
    pub fn get_attributes(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.attributes
    }
    /// <p>The various components that make up a software package version.</p>
    pub fn artifact(mut self, input: crate::types::PackageVersionArtifact) -> Self {
        self.artifact = ::std::option::Option::Some(input);
        self
    }
    /// <p>The various components that make up a software package version.</p>
    pub fn set_artifact(mut self, input: ::std::option::Option<crate::types::PackageVersionArtifact>) -> Self {
        self.artifact = input;
        self
    }
    /// <p>The various components that make up a software package version.</p>
    pub fn get_artifact(&self) -> &::std::option::Option<crate::types::PackageVersionArtifact> {
        &self.artifact
    }
    /// <p>The status associated to the package version. For more information, see <a href="https://docs.aws.amazon.com/iot/latest/developerguide/preparing-to-use-software-package-catalog.html#package-version-lifecycle">Package version lifecycle</a>.</p>
    pub fn status(mut self, input: crate::types::PackageVersionStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status associated to the package version. For more information, see <a href="https://docs.aws.amazon.com/iot/latest/developerguide/preparing-to-use-software-package-catalog.html#package-version-lifecycle">Package version lifecycle</a>.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::PackageVersionStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status associated to the package version. For more information, see <a href="https://docs.aws.amazon.com/iot/latest/developerguide/preparing-to-use-software-package-catalog.html#package-version-lifecycle">Package version lifecycle</a>.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::PackageVersionStatus> {
        &self.status
    }
    /// <p>Error reason for a package version failure during creation or update.</p>
    pub fn error_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.error_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Error reason for a package version failure during creation or update.</p>
    pub fn set_error_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.error_reason = input;
        self
    }
    /// <p>Error reason for a package version failure during creation or update.</p>
    pub fn get_error_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.error_reason
    }
    /// <p>The date when the package version was created.</p>
    pub fn creation_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date when the package version was created.</p>
    pub fn set_creation_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_date = input;
        self
    }
    /// <p>The date when the package version was created.</p>
    pub fn get_creation_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_date
    }
    /// <p>The date when the package version was last updated.</p>
    pub fn last_modified_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_modified_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date when the package version was last updated.</p>
    pub fn set_last_modified_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_modified_date = input;
        self
    }
    /// <p>The date when the package version was last updated.</p>
    pub fn get_last_modified_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_modified_date
    }
    /// <p>The software bill of materials for a software package version.</p>
    pub fn sbom(mut self, input: crate::types::Sbom) -> Self {
        self.sbom = ::std::option::Option::Some(input);
        self
    }
    /// <p>The software bill of materials for a software package version.</p>
    pub fn set_sbom(mut self, input: ::std::option::Option<crate::types::Sbom>) -> Self {
        self.sbom = input;
        self
    }
    /// <p>The software bill of materials for a software package version.</p>
    pub fn get_sbom(&self) -> &::std::option::Option<crate::types::Sbom> {
        &self.sbom
    }
    /// <p>The status of the validation for a new software bill of materials added to a software package version.</p>
    pub fn sbom_validation_status(mut self, input: crate::types::SbomValidationStatus) -> Self {
        self.sbom_validation_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the validation for a new software bill of materials added to a software package version.</p>
    pub fn set_sbom_validation_status(mut self, input: ::std::option::Option<crate::types::SbomValidationStatus>) -> Self {
        self.sbom_validation_status = input;
        self
    }
    /// <p>The status of the validation for a new software bill of materials added to a software package version.</p>
    pub fn get_sbom_validation_status(&self) -> &::std::option::Option<crate::types::SbomValidationStatus> {
        &self.sbom_validation_status
    }
    /// <p>The inline job document associated with a software package version used for a quick job deployment via IoT Jobs.</p>
    pub fn recipe(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.recipe = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The inline job document associated with a software package version used for a quick job deployment via IoT Jobs.</p>
    pub fn set_recipe(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.recipe = input;
        self
    }
    /// <p>The inline job document associated with a software package version used for a quick job deployment via IoT Jobs.</p>
    pub fn get_recipe(&self) -> &::std::option::Option<::std::string::String> {
        &self.recipe
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetPackageVersionOutput`](crate::operation::get_package_version::GetPackageVersionOutput).
    pub fn build(self) -> crate::operation::get_package_version::GetPackageVersionOutput {
        crate::operation::get_package_version::GetPackageVersionOutput {
            package_version_arn: self.package_version_arn,
            package_name: self.package_name,
            version_name: self.version_name,
            description: self.description,
            attributes: self.attributes,
            artifact: self.artifact,
            status: self.status,
            error_reason: self.error_reason,
            creation_date: self.creation_date,
            last_modified_date: self.last_modified_date,
            sbom: self.sbom,
            sbom_validation_status: self.sbom_validation_status,
            recipe: self.recipe,
            _request_id: self._request_id,
        }
    }
}
impl ::std::fmt::Debug for GetPackageVersionOutputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetPackageVersionOutputBuilder");
        formatter.field("package_version_arn", &self.package_version_arn);
        formatter.field("package_name", &self.package_name);
        formatter.field("version_name", &self.version_name);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("attributes", &"*** Sensitive Data Redacted ***");
        formatter.field("artifact", &self.artifact);
        formatter.field("status", &self.status);
        formatter.field("error_reason", &self.error_reason);
        formatter.field("creation_date", &self.creation_date);
        formatter.field("last_modified_date", &self.last_modified_date);
        formatter.field("sbom", &self.sbom);
        formatter.field("sbom_validation_status", &self.sbom_validation_status);
        formatter.field("recipe", &"*** Sensitive Data Redacted ***");
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
