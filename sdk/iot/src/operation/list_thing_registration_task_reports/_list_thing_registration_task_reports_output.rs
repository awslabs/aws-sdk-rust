// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListThingRegistrationTaskReportsOutput {
    /// <p>Links to the task resources.</p>
    #[doc(hidden)]
    pub resource_links: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The type of task report.</p>
    #[doc(hidden)]
    pub report_type: std::option::Option<crate::types::ReportType>,
    /// <p>The token to use to get the next set of results, or <b>null</b> if there are no additional results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListThingRegistrationTaskReportsOutput {
    /// <p>Links to the task resources.</p>
    pub fn resource_links(&self) -> std::option::Option<&[std::string::String]> {
        self.resource_links.as_deref()
    }
    /// <p>The type of task report.</p>
    pub fn report_type(&self) -> std::option::Option<&crate::types::ReportType> {
        self.report_type.as_ref()
    }
    /// <p>The token to use to get the next set of results, or <b>null</b> if there are no additional results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListThingRegistrationTaskReportsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListThingRegistrationTaskReportsOutput {
    /// Creates a new builder-style object to manufacture [`ListThingRegistrationTaskReportsOutput`](crate::operation::list_thing_registration_task_reports::ListThingRegistrationTaskReportsOutput).
    pub fn builder() -> crate::operation::list_thing_registration_task_reports::builders::ListThingRegistrationTaskReportsOutputBuilder{
        crate::operation::list_thing_registration_task_reports::builders::ListThingRegistrationTaskReportsOutputBuilder::default()
    }
}

/// A builder for [`ListThingRegistrationTaskReportsOutput`](crate::operation::list_thing_registration_task_reports::ListThingRegistrationTaskReportsOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListThingRegistrationTaskReportsOutputBuilder {
    pub(crate) resource_links: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) report_type: std::option::Option<crate::types::ReportType>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListThingRegistrationTaskReportsOutputBuilder {
    /// Appends an item to `resource_links`.
    ///
    /// To override the contents of this collection use [`set_resource_links`](Self::set_resource_links).
    ///
    /// <p>Links to the task resources.</p>
    pub fn resource_links(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.resource_links.unwrap_or_default();
        v.push(input.into());
        self.resource_links = Some(v);
        self
    }
    /// <p>Links to the task resources.</p>
    pub fn set_resource_links(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.resource_links = input;
        self
    }
    /// <p>The type of task report.</p>
    pub fn report_type(mut self, input: crate::types::ReportType) -> Self {
        self.report_type = Some(input);
        self
    }
    /// <p>The type of task report.</p>
    pub fn set_report_type(mut self, input: std::option::Option<crate::types::ReportType>) -> Self {
        self.report_type = input;
        self
    }
    /// <p>The token to use to get the next set of results, or <b>null</b> if there are no additional results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>The token to use to get the next set of results, or <b>null</b> if there are no additional results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListThingRegistrationTaskReportsOutput`](crate::operation::list_thing_registration_task_reports::ListThingRegistrationTaskReportsOutput).
    pub fn build(self) -> crate::operation::list_thing_registration_task_reports::ListThingRegistrationTaskReportsOutput{
        crate::operation::list_thing_registration_task_reports::ListThingRegistrationTaskReportsOutput {
            resource_links: self.resource_links
            ,
            report_type: self.report_type
            ,
            next_token: self.next_token
            ,
            _request_id: self._request_id,
        }
    }
}
