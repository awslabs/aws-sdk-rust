// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RegisterCertificateWithoutCaInput {
    /// <p>The certificate data, in PEM format.</p>
    pub certificate_pem: ::std::option::Option<::std::string::String>,
    /// <p>The status of the register certificate request.</p>
    pub status: ::std::option::Option<crate::types::CertificateStatus>,
}
impl RegisterCertificateWithoutCaInput {
    /// <p>The certificate data, in PEM format.</p>
    pub fn certificate_pem(&self) -> ::std::option::Option<&str> {
        self.certificate_pem.as_deref()
    }
    /// <p>The status of the register certificate request.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::CertificateStatus> {
        self.status.as_ref()
    }
}
impl RegisterCertificateWithoutCaInput {
    /// Creates a new builder-style object to manufacture [`RegisterCertificateWithoutCaInput`](crate::operation::register_certificate_without_ca::RegisterCertificateWithoutCaInput).
    pub fn builder() -> crate::operation::register_certificate_without_ca::builders::RegisterCertificateWithoutCaInputBuilder {
        crate::operation::register_certificate_without_ca::builders::RegisterCertificateWithoutCaInputBuilder::default()
    }
}

/// A builder for [`RegisterCertificateWithoutCaInput`](crate::operation::register_certificate_without_ca::RegisterCertificateWithoutCaInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RegisterCertificateWithoutCaInputBuilder {
    pub(crate) certificate_pem: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::CertificateStatus>,
}
impl RegisterCertificateWithoutCaInputBuilder {
    /// <p>The certificate data, in PEM format.</p>
    /// This field is required.
    pub fn certificate_pem(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.certificate_pem = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The certificate data, in PEM format.</p>
    pub fn set_certificate_pem(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.certificate_pem = input;
        self
    }
    /// <p>The certificate data, in PEM format.</p>
    pub fn get_certificate_pem(&self) -> &::std::option::Option<::std::string::String> {
        &self.certificate_pem
    }
    /// <p>The status of the register certificate request.</p>
    pub fn status(mut self, input: crate::types::CertificateStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the register certificate request.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::CertificateStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the register certificate request.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::CertificateStatus> {
        &self.status
    }
    /// Consumes the builder and constructs a [`RegisterCertificateWithoutCaInput`](crate::operation::register_certificate_without_ca::RegisterCertificateWithoutCaInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::register_certificate_without_ca::RegisterCertificateWithoutCaInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::register_certificate_without_ca::RegisterCertificateWithoutCaInput {
            certificate_pem: self.certificate_pem,
            status: self.status,
        })
    }
}
