// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AssociateTargetsWithJobInput {
    /// <p>A list of thing group ARNs that define the targets of the job.</p>
    #[doc(hidden)]
    pub targets: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The unique identifier you assigned to this job when it was created.</p>
    #[doc(hidden)]
    pub job_id: std::option::Option<std::string::String>,
    /// <p>An optional comment string describing why the job was associated with the targets.</p>
    #[doc(hidden)]
    pub comment: std::option::Option<std::string::String>,
    /// <p>The namespace used to indicate that a job is a customer-managed job.</p>
    /// <p>When you specify a value for this parameter, Amazon Web Services IoT Core sends jobs notifications to MQTT topics that contain the value in the following format.</p>
    /// <p> <code>$aws/things/<i>THING_NAME</i>/jobs/<i>JOB_ID</i>/notify-namespace-<i>NAMESPACE_ID</i>/</code> </p> <note>
    /// <p>The <code>namespaceId</code> feature is in public preview.</p>
    /// </note>
    #[doc(hidden)]
    pub namespace_id: std::option::Option<std::string::String>,
}
impl AssociateTargetsWithJobInput {
    /// <p>A list of thing group ARNs that define the targets of the job.</p>
    pub fn targets(&self) -> std::option::Option<&[std::string::String]> {
        self.targets.as_deref()
    }
    /// <p>The unique identifier you assigned to this job when it was created.</p>
    pub fn job_id(&self) -> std::option::Option<&str> {
        self.job_id.as_deref()
    }
    /// <p>An optional comment string describing why the job was associated with the targets.</p>
    pub fn comment(&self) -> std::option::Option<&str> {
        self.comment.as_deref()
    }
    /// <p>The namespace used to indicate that a job is a customer-managed job.</p>
    /// <p>When you specify a value for this parameter, Amazon Web Services IoT Core sends jobs notifications to MQTT topics that contain the value in the following format.</p>
    /// <p> <code>$aws/things/<i>THING_NAME</i>/jobs/<i>JOB_ID</i>/notify-namespace-<i>NAMESPACE_ID</i>/</code> </p> <note>
    /// <p>The <code>namespaceId</code> feature is in public preview.</p>
    /// </note>
    pub fn namespace_id(&self) -> std::option::Option<&str> {
        self.namespace_id.as_deref()
    }
}
impl AssociateTargetsWithJobInput {
    /// Creates a new builder-style object to manufacture [`AssociateTargetsWithJobInput`](crate::operation::associate_targets_with_job::AssociateTargetsWithJobInput).
    pub fn builder(
    ) -> crate::operation::associate_targets_with_job::builders::AssociateTargetsWithJobInputBuilder
    {
        crate::operation::associate_targets_with_job::builders::AssociateTargetsWithJobInputBuilder::default()
    }
}

/// A builder for [`AssociateTargetsWithJobInput`](crate::operation::associate_targets_with_job::AssociateTargetsWithJobInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AssociateTargetsWithJobInputBuilder {
    pub(crate) targets: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) job_id: std::option::Option<std::string::String>,
    pub(crate) comment: std::option::Option<std::string::String>,
    pub(crate) namespace_id: std::option::Option<std::string::String>,
}
impl AssociateTargetsWithJobInputBuilder {
    /// Appends an item to `targets`.
    ///
    /// To override the contents of this collection use [`set_targets`](Self::set_targets).
    ///
    /// <p>A list of thing group ARNs that define the targets of the job.</p>
    pub fn targets(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.targets.unwrap_or_default();
        v.push(input.into());
        self.targets = Some(v);
        self
    }
    /// <p>A list of thing group ARNs that define the targets of the job.</p>
    pub fn set_targets(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.targets = input;
        self
    }
    /// <p>The unique identifier you assigned to this job when it was created.</p>
    pub fn job_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.job_id = Some(input.into());
        self
    }
    /// <p>The unique identifier you assigned to this job when it was created.</p>
    pub fn set_job_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.job_id = input;
        self
    }
    /// <p>An optional comment string describing why the job was associated with the targets.</p>
    pub fn comment(mut self, input: impl Into<std::string::String>) -> Self {
        self.comment = Some(input.into());
        self
    }
    /// <p>An optional comment string describing why the job was associated with the targets.</p>
    pub fn set_comment(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.comment = input;
        self
    }
    /// <p>The namespace used to indicate that a job is a customer-managed job.</p>
    /// <p>When you specify a value for this parameter, Amazon Web Services IoT Core sends jobs notifications to MQTT topics that contain the value in the following format.</p>
    /// <p> <code>$aws/things/<i>THING_NAME</i>/jobs/<i>JOB_ID</i>/notify-namespace-<i>NAMESPACE_ID</i>/</code> </p> <note>
    /// <p>The <code>namespaceId</code> feature is in public preview.</p>
    /// </note>
    pub fn namespace_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.namespace_id = Some(input.into());
        self
    }
    /// <p>The namespace used to indicate that a job is a customer-managed job.</p>
    /// <p>When you specify a value for this parameter, Amazon Web Services IoT Core sends jobs notifications to MQTT topics that contain the value in the following format.</p>
    /// <p> <code>$aws/things/<i>THING_NAME</i>/jobs/<i>JOB_ID</i>/notify-namespace-<i>NAMESPACE_ID</i>/</code> </p> <note>
    /// <p>The <code>namespaceId</code> feature is in public preview.</p>
    /// </note>
    pub fn set_namespace_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.namespace_id = input;
        self
    }
    /// Consumes the builder and constructs a [`AssociateTargetsWithJobInput`](crate::operation::associate_targets_with_job::AssociateTargetsWithJobInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::associate_targets_with_job::AssociateTargetsWithJobInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::associate_targets_with_job::AssociateTargetsWithJobInput {
                targets: self.targets,
                job_id: self.job_id,
                comment: self.comment,
                namespace_id: self.namespace_id,
            },
        )
    }
}
