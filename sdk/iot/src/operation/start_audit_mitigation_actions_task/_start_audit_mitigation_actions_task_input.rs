// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StartAuditMitigationActionsTaskInput {
    /// <p>A unique identifier for the task. You can use this identifier to check the status of the task or to cancel it.</p>
    pub task_id: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the audit findings to which the mitigation actions are applied. You can apply them to a type of audit check, to all findings from an audit, or to a specific set of findings.</p>
    pub target: ::std::option::Option<crate::types::AuditMitigationActionsTaskTarget>,
    /// <p>For an audit check, specifies which mitigation actions to apply. Those actions must be defined in your Amazon Web Services accounts.</p>
    pub audit_check_to_actions_mapping:
        ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::vec::Vec<::std::string::String>>>,
    /// <p>Each audit mitigation task must have a unique client request token. If you try to start a new task with the same token as a task that already exists, an exception occurs. If you omit this value, a unique client request token is generated automatically.</p>
    pub client_request_token: ::std::option::Option<::std::string::String>,
}
impl StartAuditMitigationActionsTaskInput {
    /// <p>A unique identifier for the task. You can use this identifier to check the status of the task or to cancel it.</p>
    pub fn task_id(&self) -> ::std::option::Option<&str> {
        self.task_id.as_deref()
    }
    /// <p>Specifies the audit findings to which the mitigation actions are applied. You can apply them to a type of audit check, to all findings from an audit, or to a specific set of findings.</p>
    pub fn target(&self) -> ::std::option::Option<&crate::types::AuditMitigationActionsTaskTarget> {
        self.target.as_ref()
    }
    /// <p>For an audit check, specifies which mitigation actions to apply. Those actions must be defined in your Amazon Web Services accounts.</p>
    pub fn audit_check_to_actions_mapping(
        &self,
    ) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::vec::Vec<::std::string::String>>> {
        self.audit_check_to_actions_mapping.as_ref()
    }
    /// <p>Each audit mitigation task must have a unique client request token. If you try to start a new task with the same token as a task that already exists, an exception occurs. If you omit this value, a unique client request token is generated automatically.</p>
    pub fn client_request_token(&self) -> ::std::option::Option<&str> {
        self.client_request_token.as_deref()
    }
}
impl StartAuditMitigationActionsTaskInput {
    /// Creates a new builder-style object to manufacture [`StartAuditMitigationActionsTaskInput`](crate::operation::start_audit_mitigation_actions_task::StartAuditMitigationActionsTaskInput).
    pub fn builder() -> crate::operation::start_audit_mitigation_actions_task::builders::StartAuditMitigationActionsTaskInputBuilder {
        crate::operation::start_audit_mitigation_actions_task::builders::StartAuditMitigationActionsTaskInputBuilder::default()
    }
}

/// A builder for [`StartAuditMitigationActionsTaskInput`](crate::operation::start_audit_mitigation_actions_task::StartAuditMitigationActionsTaskInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct StartAuditMitigationActionsTaskInputBuilder {
    pub(crate) task_id: ::std::option::Option<::std::string::String>,
    pub(crate) target: ::std::option::Option<crate::types::AuditMitigationActionsTaskTarget>,
    pub(crate) audit_check_to_actions_mapping:
        ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::vec::Vec<::std::string::String>>>,
    pub(crate) client_request_token: ::std::option::Option<::std::string::String>,
}
impl StartAuditMitigationActionsTaskInputBuilder {
    /// <p>A unique identifier for the task. You can use this identifier to check the status of the task or to cancel it.</p>
    /// This field is required.
    pub fn task_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.task_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier for the task. You can use this identifier to check the status of the task or to cancel it.</p>
    pub fn set_task_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.task_id = input;
        self
    }
    /// <p>A unique identifier for the task. You can use this identifier to check the status of the task or to cancel it.</p>
    pub fn get_task_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.task_id
    }
    /// <p>Specifies the audit findings to which the mitigation actions are applied. You can apply them to a type of audit check, to all findings from an audit, or to a specific set of findings.</p>
    /// This field is required.
    pub fn target(mut self, input: crate::types::AuditMitigationActionsTaskTarget) -> Self {
        self.target = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the audit findings to which the mitigation actions are applied. You can apply them to a type of audit check, to all findings from an audit, or to a specific set of findings.</p>
    pub fn set_target(mut self, input: ::std::option::Option<crate::types::AuditMitigationActionsTaskTarget>) -> Self {
        self.target = input;
        self
    }
    /// <p>Specifies the audit findings to which the mitigation actions are applied. You can apply them to a type of audit check, to all findings from an audit, or to a specific set of findings.</p>
    pub fn get_target(&self) -> &::std::option::Option<crate::types::AuditMitigationActionsTaskTarget> {
        &self.target
    }
    /// Adds a key-value pair to `audit_check_to_actions_mapping`.
    ///
    /// To override the contents of this collection use [`set_audit_check_to_actions_mapping`](Self::set_audit_check_to_actions_mapping).
    ///
    /// <p>For an audit check, specifies which mitigation actions to apply. Those actions must be defined in your Amazon Web Services accounts.</p>
    pub fn audit_check_to_actions_mapping(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: ::std::vec::Vec<::std::string::String>,
    ) -> Self {
        let mut hash_map = self.audit_check_to_actions_mapping.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.audit_check_to_actions_mapping = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>For an audit check, specifies which mitigation actions to apply. Those actions must be defined in your Amazon Web Services accounts.</p>
    pub fn set_audit_check_to_actions_mapping(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::vec::Vec<::std::string::String>>>,
    ) -> Self {
        self.audit_check_to_actions_mapping = input;
        self
    }
    /// <p>For an audit check, specifies which mitigation actions to apply. Those actions must be defined in your Amazon Web Services accounts.</p>
    pub fn get_audit_check_to_actions_mapping(
        &self,
    ) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::vec::Vec<::std::string::String>>> {
        &self.audit_check_to_actions_mapping
    }
    /// <p>Each audit mitigation task must have a unique client request token. If you try to start a new task with the same token as a task that already exists, an exception occurs. If you omit this value, a unique client request token is generated automatically.</p>
    /// This field is required.
    pub fn client_request_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_request_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Each audit mitigation task must have a unique client request token. If you try to start a new task with the same token as a task that already exists, an exception occurs. If you omit this value, a unique client request token is generated automatically.</p>
    pub fn set_client_request_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_request_token = input;
        self
    }
    /// <p>Each audit mitigation task must have a unique client request token. If you try to start a new task with the same token as a task that already exists, an exception occurs. If you omit this value, a unique client request token is generated automatically.</p>
    pub fn get_client_request_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_request_token
    }
    /// Consumes the builder and constructs a [`StartAuditMitigationActionsTaskInput`](crate::operation::start_audit_mitigation_actions_task::StartAuditMitigationActionsTaskInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::start_audit_mitigation_actions_task::StartAuditMitigationActionsTaskInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::start_audit_mitigation_actions_task::StartAuditMitigationActionsTaskInput {
                task_id: self.task_id,
                target: self.target,
                audit_check_to_actions_mapping: self.audit_check_to_actions_mapping,
                client_request_token: self.client_request_token,
            },
        )
    }
}
