// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetPercentilesInput {
    /// <p>The name of the index to search.</p>
    #[doc(hidden)]
    pub index_name: std::option::Option<std::string::String>,
    /// <p>The search query string.</p>
    #[doc(hidden)]
    pub query_string: std::option::Option<std::string::String>,
    /// <p>The field to aggregate.</p>
    #[doc(hidden)]
    pub aggregation_field: std::option::Option<std::string::String>,
    /// <p>The query version.</p>
    #[doc(hidden)]
    pub query_version: std::option::Option<std::string::String>,
    /// <p>The percentile groups returned.</p>
    #[doc(hidden)]
    pub percents: std::option::Option<std::vec::Vec<f64>>,
}
impl GetPercentilesInput {
    /// <p>The name of the index to search.</p>
    pub fn index_name(&self) -> std::option::Option<&str> {
        self.index_name.as_deref()
    }
    /// <p>The search query string.</p>
    pub fn query_string(&self) -> std::option::Option<&str> {
        self.query_string.as_deref()
    }
    /// <p>The field to aggregate.</p>
    pub fn aggregation_field(&self) -> std::option::Option<&str> {
        self.aggregation_field.as_deref()
    }
    /// <p>The query version.</p>
    pub fn query_version(&self) -> std::option::Option<&str> {
        self.query_version.as_deref()
    }
    /// <p>The percentile groups returned.</p>
    pub fn percents(&self) -> std::option::Option<&[f64]> {
        self.percents.as_deref()
    }
}
impl GetPercentilesInput {
    /// Creates a new builder-style object to manufacture [`GetPercentilesInput`](crate::operation::get_percentiles::GetPercentilesInput).
    pub fn builder() -> crate::operation::get_percentiles::builders::GetPercentilesInputBuilder {
        crate::operation::get_percentiles::builders::GetPercentilesInputBuilder::default()
    }
}

/// A builder for [`GetPercentilesInput`](crate::operation::get_percentiles::GetPercentilesInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetPercentilesInputBuilder {
    pub(crate) index_name: std::option::Option<std::string::String>,
    pub(crate) query_string: std::option::Option<std::string::String>,
    pub(crate) aggregation_field: std::option::Option<std::string::String>,
    pub(crate) query_version: std::option::Option<std::string::String>,
    pub(crate) percents: std::option::Option<std::vec::Vec<f64>>,
}
impl GetPercentilesInputBuilder {
    /// <p>The name of the index to search.</p>
    pub fn index_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.index_name = Some(input.into());
        self
    }
    /// <p>The name of the index to search.</p>
    pub fn set_index_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.index_name = input;
        self
    }
    /// <p>The search query string.</p>
    pub fn query_string(mut self, input: impl Into<std::string::String>) -> Self {
        self.query_string = Some(input.into());
        self
    }
    /// <p>The search query string.</p>
    pub fn set_query_string(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.query_string = input;
        self
    }
    /// <p>The field to aggregate.</p>
    pub fn aggregation_field(mut self, input: impl Into<std::string::String>) -> Self {
        self.aggregation_field = Some(input.into());
        self
    }
    /// <p>The field to aggregate.</p>
    pub fn set_aggregation_field(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.aggregation_field = input;
        self
    }
    /// <p>The query version.</p>
    pub fn query_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.query_version = Some(input.into());
        self
    }
    /// <p>The query version.</p>
    pub fn set_query_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.query_version = input;
        self
    }
    /// Appends an item to `percents`.
    ///
    /// To override the contents of this collection use [`set_percents`](Self::set_percents).
    ///
    /// <p>The percentile groups returned.</p>
    pub fn percents(mut self, input: f64) -> Self {
        let mut v = self.percents.unwrap_or_default();
        v.push(input);
        self.percents = Some(v);
        self
    }
    /// <p>The percentile groups returned.</p>
    pub fn set_percents(mut self, input: std::option::Option<std::vec::Vec<f64>>) -> Self {
        self.percents = input;
        self
    }
    /// Consumes the builder and constructs a [`GetPercentilesInput`](crate::operation::get_percentiles::GetPercentilesInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::get_percentiles::GetPercentilesInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::get_percentiles::GetPercentilesInput {
            index_name: self.index_name,
            query_string: self.query_string,
            aggregation_field: self.aggregation_field,
            query_version: self.query_version,
            percents: self.percents,
        })
    }
}
