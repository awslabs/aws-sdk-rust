// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::register_certificate::_register_certificate_output::RegisterCertificateOutputBuilder;

pub use crate::operation::register_certificate::_register_certificate_input::RegisterCertificateInputBuilder;

/// Fluent builder constructing a request to `RegisterCertificate`.
///
/// <p>Registers a device certificate with IoT in the same <a href="https://docs.aws.amazon.com/iot/latest/apireference/API_CertificateDescription.html#iot-Type-CertificateDescription-certificateMode">certificate mode</a> as the signing CA. If you have more than one CA certificate that has the same subject field, you must specify the CA certificate that was used to sign the device certificate being registered.</p>
/// <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">RegisterCertificate</a> action.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct RegisterCertificateFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::register_certificate::builders::RegisterCertificateInputBuilder,
}
impl RegisterCertificateFluentBuilder {
    /// Creates a new `RegisterCertificate`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::register_certificate::RegisterCertificate,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::register_certificate::RegisterCertificateError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::register_certificate::RegisterCertificateOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::register_certificate::RegisterCertificateError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The certificate data, in PEM format.</p>
    pub fn certificate_pem(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.certificate_pem(input.into());
        self
    }
    /// <p>The certificate data, in PEM format.</p>
    pub fn set_certificate_pem(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_certificate_pem(input);
        self
    }
    /// <p>The CA certificate used to sign the device certificate being registered.</p>
    pub fn ca_certificate_pem(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.ca_certificate_pem(input.into());
        self
    }
    /// <p>The CA certificate used to sign the device certificate being registered.</p>
    pub fn set_ca_certificate_pem(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_ca_certificate_pem(input);
        self
    }
    /// <p>A boolean value that specifies if the certificate is set to active.</p>
    /// <p>Valid values: <code>ACTIVE | INACTIVE</code> </p>
    #[deprecated]
    pub fn set_as_active(mut self, input: bool) -> Self {
        self.inner = self.inner.set_as_active(input);
        self
    }
    /// <p>A boolean value that specifies if the certificate is set to active.</p>
    /// <p>Valid values: <code>ACTIVE | INACTIVE</code> </p>
    #[deprecated]
    pub fn set_set_as_active(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_set_as_active(input);
        self
    }
    /// <p>The status of the register certificate request. Valid values that you can use include <code>ACTIVE</code>, <code>INACTIVE</code>, and <code>REVOKED</code>.</p>
    pub fn status(mut self, input: crate::types::CertificateStatus) -> Self {
        self.inner = self.inner.status(input);
        self
    }
    /// <p>The status of the register certificate request. Valid values that you can use include <code>ACTIVE</code>, <code>INACTIVE</code>, and <code>REVOKED</code>.</p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::CertificateStatus>,
    ) -> Self {
        self.inner = self.inner.set_status(input);
        self
    }
}
