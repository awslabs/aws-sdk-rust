// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SetV2LoggingOptionsInput {
    /// <p>The ARN of the role that allows IoT to write to Cloudwatch logs.</p>
    pub role_arn: ::std::option::Option<::std::string::String>,
    /// <p>The default logging level.</p>
    pub default_log_level: ::std::option::Option<crate::types::LogLevel>,
    /// <p>If true all logs are disabled. The default is false.</p>
    pub disable_all_logs: ::std::option::Option<bool>,
}
impl SetV2LoggingOptionsInput {
    /// <p>The ARN of the role that allows IoT to write to Cloudwatch logs.</p>
    pub fn role_arn(&self) -> ::std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>The default logging level.</p>
    pub fn default_log_level(&self) -> ::std::option::Option<&crate::types::LogLevel> {
        self.default_log_level.as_ref()
    }
    /// <p>If true all logs are disabled. The default is false.</p>
    pub fn disable_all_logs(&self) -> ::std::option::Option<bool> {
        self.disable_all_logs
    }
}
impl SetV2LoggingOptionsInput {
    /// Creates a new builder-style object to manufacture [`SetV2LoggingOptionsInput`](crate::operation::set_v2_logging_options::SetV2LoggingOptionsInput).
    pub fn builder() -> crate::operation::set_v2_logging_options::builders::SetV2LoggingOptionsInputBuilder {
        crate::operation::set_v2_logging_options::builders::SetV2LoggingOptionsInputBuilder::default()
    }
}

/// A builder for [`SetV2LoggingOptionsInput`](crate::operation::set_v2_logging_options::SetV2LoggingOptionsInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SetV2LoggingOptionsInputBuilder {
    pub(crate) role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) default_log_level: ::std::option::Option<crate::types::LogLevel>,
    pub(crate) disable_all_logs: ::std::option::Option<bool>,
}
impl SetV2LoggingOptionsInputBuilder {
    /// <p>The ARN of the role that allows IoT to write to Cloudwatch logs.</p>
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the role that allows IoT to write to Cloudwatch logs.</p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The ARN of the role that allows IoT to write to Cloudwatch logs.</p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn
    }
    /// <p>The default logging level.</p>
    pub fn default_log_level(mut self, input: crate::types::LogLevel) -> Self {
        self.default_log_level = ::std::option::Option::Some(input);
        self
    }
    /// <p>The default logging level.</p>
    pub fn set_default_log_level(mut self, input: ::std::option::Option<crate::types::LogLevel>) -> Self {
        self.default_log_level = input;
        self
    }
    /// <p>The default logging level.</p>
    pub fn get_default_log_level(&self) -> &::std::option::Option<crate::types::LogLevel> {
        &self.default_log_level
    }
    /// <p>If true all logs are disabled. The default is false.</p>
    pub fn disable_all_logs(mut self, input: bool) -> Self {
        self.disable_all_logs = ::std::option::Option::Some(input);
        self
    }
    /// <p>If true all logs are disabled. The default is false.</p>
    pub fn set_disable_all_logs(mut self, input: ::std::option::Option<bool>) -> Self {
        self.disable_all_logs = input;
        self
    }
    /// <p>If true all logs are disabled. The default is false.</p>
    pub fn get_disable_all_logs(&self) -> &::std::option::Option<bool> {
        &self.disable_all_logs
    }
    /// Consumes the builder and constructs a [`SetV2LoggingOptionsInput`](crate::operation::set_v2_logging_options::SetV2LoggingOptionsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::set_v2_logging_options::SetV2LoggingOptionsInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::set_v2_logging_options::SetV2LoggingOptionsInput {
            role_arn: self.role_arn,
            default_log_level: self.default_log_level,
            disable_all_logs: self.disable_all_logs,
        })
    }
}
