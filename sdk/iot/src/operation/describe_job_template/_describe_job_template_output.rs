// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeJobTemplateOutput {
    /// <p>The ARN of the job template.</p>
    #[doc(hidden)]
    pub job_template_arn: std::option::Option<std::string::String>,
    /// <p>The unique identifier of the job template.</p>
    #[doc(hidden)]
    pub job_template_id: std::option::Option<std::string::String>,
    /// <p>A description of the job template.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>An S3 link to the job document.</p>
    #[doc(hidden)]
    pub document_source: std::option::Option<std::string::String>,
    /// <p>The job document.</p>
    #[doc(hidden)]
    pub document: std::option::Option<std::string::String>,
    /// <p>The time, in seconds since the epoch, when the job template was created.</p>
    #[doc(hidden)]
    pub created_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>Configuration for pre-signed S3 URLs.</p>
    #[doc(hidden)]
    pub presigned_url_config: std::option::Option<crate::types::PresignedUrlConfig>,
    /// <p>Allows you to create a staged rollout of a job.</p>
    #[doc(hidden)]
    pub job_executions_rollout_config:
        std::option::Option<crate::types::JobExecutionsRolloutConfig>,
    /// <p>The criteria that determine when and how a job abort takes place.</p>
    #[doc(hidden)]
    pub abort_config: std::option::Option<crate::types::AbortConfig>,
    /// <p>Specifies the amount of time each device has to finish its execution of the job. A timer is started when the job execution status is set to <code>IN_PROGRESS</code>. If the job execution status is not set to another terminal state before the timer expires, it will be automatically set to <code>TIMED_OUT</code>.</p>
    #[doc(hidden)]
    pub timeout_config: std::option::Option<crate::types::TimeoutConfig>,
    /// <p>The configuration that determines how many retries are allowed for each failure type for a job.</p>
    #[doc(hidden)]
    pub job_executions_retry_config: std::option::Option<crate::types::JobExecutionsRetryConfig>,
    _request_id: Option<String>,
}
impl DescribeJobTemplateOutput {
    /// <p>The ARN of the job template.</p>
    pub fn job_template_arn(&self) -> std::option::Option<&str> {
        self.job_template_arn.as_deref()
    }
    /// <p>The unique identifier of the job template.</p>
    pub fn job_template_id(&self) -> std::option::Option<&str> {
        self.job_template_id.as_deref()
    }
    /// <p>A description of the job template.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>An S3 link to the job document.</p>
    pub fn document_source(&self) -> std::option::Option<&str> {
        self.document_source.as_deref()
    }
    /// <p>The job document.</p>
    pub fn document(&self) -> std::option::Option<&str> {
        self.document.as_deref()
    }
    /// <p>The time, in seconds since the epoch, when the job template was created.</p>
    pub fn created_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>Configuration for pre-signed S3 URLs.</p>
    pub fn presigned_url_config(&self) -> std::option::Option<&crate::types::PresignedUrlConfig> {
        self.presigned_url_config.as_ref()
    }
    /// <p>Allows you to create a staged rollout of a job.</p>
    pub fn job_executions_rollout_config(
        &self,
    ) -> std::option::Option<&crate::types::JobExecutionsRolloutConfig> {
        self.job_executions_rollout_config.as_ref()
    }
    /// <p>The criteria that determine when and how a job abort takes place.</p>
    pub fn abort_config(&self) -> std::option::Option<&crate::types::AbortConfig> {
        self.abort_config.as_ref()
    }
    /// <p>Specifies the amount of time each device has to finish its execution of the job. A timer is started when the job execution status is set to <code>IN_PROGRESS</code>. If the job execution status is not set to another terminal state before the timer expires, it will be automatically set to <code>TIMED_OUT</code>.</p>
    pub fn timeout_config(&self) -> std::option::Option<&crate::types::TimeoutConfig> {
        self.timeout_config.as_ref()
    }
    /// <p>The configuration that determines how many retries are allowed for each failure type for a job.</p>
    pub fn job_executions_retry_config(
        &self,
    ) -> std::option::Option<&crate::types::JobExecutionsRetryConfig> {
        self.job_executions_retry_config.as_ref()
    }
}
impl aws_http::request_id::RequestId for DescribeJobTemplateOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeJobTemplateOutput {
    /// Creates a new builder-style object to manufacture [`DescribeJobTemplateOutput`](crate::operation::describe_job_template::DescribeJobTemplateOutput).
    pub fn builder(
    ) -> crate::operation::describe_job_template::builders::DescribeJobTemplateOutputBuilder {
        crate::operation::describe_job_template::builders::DescribeJobTemplateOutputBuilder::default(
        )
    }
}

/// A builder for [`DescribeJobTemplateOutput`](crate::operation::describe_job_template::DescribeJobTemplateOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeJobTemplateOutputBuilder {
    pub(crate) job_template_arn: std::option::Option<std::string::String>,
    pub(crate) job_template_id: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) document_source: std::option::Option<std::string::String>,
    pub(crate) document: std::option::Option<std::string::String>,
    pub(crate) created_at: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) presigned_url_config: std::option::Option<crate::types::PresignedUrlConfig>,
    pub(crate) job_executions_rollout_config:
        std::option::Option<crate::types::JobExecutionsRolloutConfig>,
    pub(crate) abort_config: std::option::Option<crate::types::AbortConfig>,
    pub(crate) timeout_config: std::option::Option<crate::types::TimeoutConfig>,
    pub(crate) job_executions_retry_config:
        std::option::Option<crate::types::JobExecutionsRetryConfig>,
    _request_id: Option<String>,
}
impl DescribeJobTemplateOutputBuilder {
    /// <p>The ARN of the job template.</p>
    pub fn job_template_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.job_template_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the job template.</p>
    pub fn set_job_template_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.job_template_arn = input;
        self
    }
    /// <p>The unique identifier of the job template.</p>
    pub fn job_template_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.job_template_id = Some(input.into());
        self
    }
    /// <p>The unique identifier of the job template.</p>
    pub fn set_job_template_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.job_template_id = input;
        self
    }
    /// <p>A description of the job template.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>A description of the job template.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>An S3 link to the job document.</p>
    pub fn document_source(mut self, input: impl Into<std::string::String>) -> Self {
        self.document_source = Some(input.into());
        self
    }
    /// <p>An S3 link to the job document.</p>
    pub fn set_document_source(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.document_source = input;
        self
    }
    /// <p>The job document.</p>
    pub fn document(mut self, input: impl Into<std::string::String>) -> Self {
        self.document = Some(input.into());
        self
    }
    /// <p>The job document.</p>
    pub fn set_document(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.document = input;
        self
    }
    /// <p>The time, in seconds since the epoch, when the job template was created.</p>
    pub fn created_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_at = Some(input);
        self
    }
    /// <p>The time, in seconds since the epoch, when the job template was created.</p>
    pub fn set_created_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_at = input;
        self
    }
    /// <p>Configuration for pre-signed S3 URLs.</p>
    pub fn presigned_url_config(mut self, input: crate::types::PresignedUrlConfig) -> Self {
        self.presigned_url_config = Some(input);
        self
    }
    /// <p>Configuration for pre-signed S3 URLs.</p>
    pub fn set_presigned_url_config(
        mut self,
        input: std::option::Option<crate::types::PresignedUrlConfig>,
    ) -> Self {
        self.presigned_url_config = input;
        self
    }
    /// <p>Allows you to create a staged rollout of a job.</p>
    pub fn job_executions_rollout_config(
        mut self,
        input: crate::types::JobExecutionsRolloutConfig,
    ) -> Self {
        self.job_executions_rollout_config = Some(input);
        self
    }
    /// <p>Allows you to create a staged rollout of a job.</p>
    pub fn set_job_executions_rollout_config(
        mut self,
        input: std::option::Option<crate::types::JobExecutionsRolloutConfig>,
    ) -> Self {
        self.job_executions_rollout_config = input;
        self
    }
    /// <p>The criteria that determine when and how a job abort takes place.</p>
    pub fn abort_config(mut self, input: crate::types::AbortConfig) -> Self {
        self.abort_config = Some(input);
        self
    }
    /// <p>The criteria that determine when and how a job abort takes place.</p>
    pub fn set_abort_config(
        mut self,
        input: std::option::Option<crate::types::AbortConfig>,
    ) -> Self {
        self.abort_config = input;
        self
    }
    /// <p>Specifies the amount of time each device has to finish its execution of the job. A timer is started when the job execution status is set to <code>IN_PROGRESS</code>. If the job execution status is not set to another terminal state before the timer expires, it will be automatically set to <code>TIMED_OUT</code>.</p>
    pub fn timeout_config(mut self, input: crate::types::TimeoutConfig) -> Self {
        self.timeout_config = Some(input);
        self
    }
    /// <p>Specifies the amount of time each device has to finish its execution of the job. A timer is started when the job execution status is set to <code>IN_PROGRESS</code>. If the job execution status is not set to another terminal state before the timer expires, it will be automatically set to <code>TIMED_OUT</code>.</p>
    pub fn set_timeout_config(
        mut self,
        input: std::option::Option<crate::types::TimeoutConfig>,
    ) -> Self {
        self.timeout_config = input;
        self
    }
    /// <p>The configuration that determines how many retries are allowed for each failure type for a job.</p>
    pub fn job_executions_retry_config(
        mut self,
        input: crate::types::JobExecutionsRetryConfig,
    ) -> Self {
        self.job_executions_retry_config = Some(input);
        self
    }
    /// <p>The configuration that determines how many retries are allowed for each failure type for a job.</p>
    pub fn set_job_executions_retry_config(
        mut self,
        input: std::option::Option<crate::types::JobExecutionsRetryConfig>,
    ) -> Self {
        self.job_executions_retry_config = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeJobTemplateOutput`](crate::operation::describe_job_template::DescribeJobTemplateOutput).
    pub fn build(self) -> crate::operation::describe_job_template::DescribeJobTemplateOutput {
        crate::operation::describe_job_template::DescribeJobTemplateOutput {
            job_template_arn: self.job_template_arn,
            job_template_id: self.job_template_id,
            description: self.description,
            document_source: self.document_source,
            document: self.document,
            created_at: self.created_at,
            presigned_url_config: self.presigned_url_config,
            job_executions_rollout_config: self.job_executions_rollout_config,
            abort_config: self.abort_config,
            timeout_config: self.timeout_config,
            job_executions_retry_config: self.job_executions_retry_config,
            _request_id: self._request_id,
        }
    }
}
