// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateJobTemplateInput {
    /// <p>A unique identifier for the job template. We recommend using a UUID. Alpha-numeric characters, "-", and "_" are valid for use here.</p>
    pub job_template_id: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the job to use as the basis for the job template.</p>
    pub job_arn: ::std::option::Option<::std::string::String>,
    /// <p>An S3 link, or S3 object URL, to the job document. The link is an Amazon S3 object URL and is required if you don't specify a value for <code>document</code>.</p>
    /// <p>For example, <code>--document-source https://s3.<i>region-code</i>.amazonaws.com/example-firmware/device-firmware.1.0</code> </p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/access-bucket-intro.html">Methods for accessing a bucket</a>.</p>
    pub document_source: ::std::option::Option<::std::string::String>,
    /// <p>The job document. Required if you don't specify a value for <code>documentSource</code>.</p>
    pub document: ::std::option::Option<::std::string::String>,
    /// <p>A description of the job document.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>Configuration for pre-signed S3 URLs.</p>
    pub presigned_url_config: ::std::option::Option<crate::types::PresignedUrlConfig>,
    /// <p>Allows you to create a staged rollout of a job.</p>
    pub job_executions_rollout_config: ::std::option::Option<crate::types::JobExecutionsRolloutConfig>,
    /// <p>The criteria that determine when and how a job abort takes place.</p>
    pub abort_config: ::std::option::Option<crate::types::AbortConfig>,
    /// <p>Specifies the amount of time each device has to finish its execution of the job. A timer is started when the job execution status is set to <code>IN_PROGRESS</code>. If the job execution status is not set to another terminal state before the timer expires, it will be automatically set to <code>TIMED_OUT</code>.</p>
    pub timeout_config: ::std::option::Option<crate::types::TimeoutConfig>,
    /// <p>Metadata that can be used to manage the job template.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    /// <p>Allows you to create the criteria to retry a job.</p>
    pub job_executions_retry_config: ::std::option::Option<crate::types::JobExecutionsRetryConfig>,
    /// <p>Allows you to configure an optional maintenance window for the rollout of a job document to all devices in the target group for a job.</p>
    pub maintenance_windows: ::std::option::Option<::std::vec::Vec<crate::types::MaintenanceWindow>>,
    /// <p>The package version Amazon Resource Names (ARNs) that are installed on the device when the job successfully completes. </p>
    /// <p> <b>Note:</b>The following Length Constraints relates to a single string. Up to five strings are allowed.</p>
    pub destination_package_versions: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl CreateJobTemplateInput {
    /// <p>A unique identifier for the job template. We recommend using a UUID. Alpha-numeric characters, "-", and "_" are valid for use here.</p>
    pub fn job_template_id(&self) -> ::std::option::Option<&str> {
        self.job_template_id.as_deref()
    }
    /// <p>The ARN of the job to use as the basis for the job template.</p>
    pub fn job_arn(&self) -> ::std::option::Option<&str> {
        self.job_arn.as_deref()
    }
    /// <p>An S3 link, or S3 object URL, to the job document. The link is an Amazon S3 object URL and is required if you don't specify a value for <code>document</code>.</p>
    /// <p>For example, <code>--document-source https://s3.<i>region-code</i>.amazonaws.com/example-firmware/device-firmware.1.0</code> </p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/access-bucket-intro.html">Methods for accessing a bucket</a>.</p>
    pub fn document_source(&self) -> ::std::option::Option<&str> {
        self.document_source.as_deref()
    }
    /// <p>The job document. Required if you don't specify a value for <code>documentSource</code>.</p>
    pub fn document(&self) -> ::std::option::Option<&str> {
        self.document.as_deref()
    }
    /// <p>A description of the job document.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Configuration for pre-signed S3 URLs.</p>
    pub fn presigned_url_config(&self) -> ::std::option::Option<&crate::types::PresignedUrlConfig> {
        self.presigned_url_config.as_ref()
    }
    /// <p>Allows you to create a staged rollout of a job.</p>
    pub fn job_executions_rollout_config(&self) -> ::std::option::Option<&crate::types::JobExecutionsRolloutConfig> {
        self.job_executions_rollout_config.as_ref()
    }
    /// <p>The criteria that determine when and how a job abort takes place.</p>
    pub fn abort_config(&self) -> ::std::option::Option<&crate::types::AbortConfig> {
        self.abort_config.as_ref()
    }
    /// <p>Specifies the amount of time each device has to finish its execution of the job. A timer is started when the job execution status is set to <code>IN_PROGRESS</code>. If the job execution status is not set to another terminal state before the timer expires, it will be automatically set to <code>TIMED_OUT</code>.</p>
    pub fn timeout_config(&self) -> ::std::option::Option<&crate::types::TimeoutConfig> {
        self.timeout_config.as_ref()
    }
    /// <p>Metadata that can be used to manage the job template.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
    /// <p>Allows you to create the criteria to retry a job.</p>
    pub fn job_executions_retry_config(&self) -> ::std::option::Option<&crate::types::JobExecutionsRetryConfig> {
        self.job_executions_retry_config.as_ref()
    }
    /// <p>Allows you to configure an optional maintenance window for the rollout of a job document to all devices in the target group for a job.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.maintenance_windows.is_none()`.
    pub fn maintenance_windows(&self) -> &[crate::types::MaintenanceWindow] {
        self.maintenance_windows.as_deref().unwrap_or_default()
    }
    /// <p>The package version Amazon Resource Names (ARNs) that are installed on the device when the job successfully completes. </p>
    /// <p> <b>Note:</b>The following Length Constraints relates to a single string. Up to five strings are allowed.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.destination_package_versions.is_none()`.
    pub fn destination_package_versions(&self) -> &[::std::string::String] {
        self.destination_package_versions.as_deref().unwrap_or_default()
    }
}
impl CreateJobTemplateInput {
    /// Creates a new builder-style object to manufacture [`CreateJobTemplateInput`](crate::operation::create_job_template::CreateJobTemplateInput).
    pub fn builder() -> crate::operation::create_job_template::builders::CreateJobTemplateInputBuilder {
        crate::operation::create_job_template::builders::CreateJobTemplateInputBuilder::default()
    }
}

/// A builder for [`CreateJobTemplateInput`](crate::operation::create_job_template::CreateJobTemplateInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateJobTemplateInputBuilder {
    pub(crate) job_template_id: ::std::option::Option<::std::string::String>,
    pub(crate) job_arn: ::std::option::Option<::std::string::String>,
    pub(crate) document_source: ::std::option::Option<::std::string::String>,
    pub(crate) document: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) presigned_url_config: ::std::option::Option<crate::types::PresignedUrlConfig>,
    pub(crate) job_executions_rollout_config: ::std::option::Option<crate::types::JobExecutionsRolloutConfig>,
    pub(crate) abort_config: ::std::option::Option<crate::types::AbortConfig>,
    pub(crate) timeout_config: ::std::option::Option<crate::types::TimeoutConfig>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    pub(crate) job_executions_retry_config: ::std::option::Option<crate::types::JobExecutionsRetryConfig>,
    pub(crate) maintenance_windows: ::std::option::Option<::std::vec::Vec<crate::types::MaintenanceWindow>>,
    pub(crate) destination_package_versions: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl CreateJobTemplateInputBuilder {
    /// <p>A unique identifier for the job template. We recommend using a UUID. Alpha-numeric characters, "-", and "_" are valid for use here.</p>
    /// This field is required.
    pub fn job_template_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.job_template_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier for the job template. We recommend using a UUID. Alpha-numeric characters, "-", and "_" are valid for use here.</p>
    pub fn set_job_template_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.job_template_id = input;
        self
    }
    /// <p>A unique identifier for the job template. We recommend using a UUID. Alpha-numeric characters, "-", and "_" are valid for use here.</p>
    pub fn get_job_template_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.job_template_id
    }
    /// <p>The ARN of the job to use as the basis for the job template.</p>
    pub fn job_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.job_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the job to use as the basis for the job template.</p>
    pub fn set_job_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.job_arn = input;
        self
    }
    /// <p>The ARN of the job to use as the basis for the job template.</p>
    pub fn get_job_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.job_arn
    }
    /// <p>An S3 link, or S3 object URL, to the job document. The link is an Amazon S3 object URL and is required if you don't specify a value for <code>document</code>.</p>
    /// <p>For example, <code>--document-source https://s3.<i>region-code</i>.amazonaws.com/example-firmware/device-firmware.1.0</code> </p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/access-bucket-intro.html">Methods for accessing a bucket</a>.</p>
    pub fn document_source(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.document_source = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An S3 link, or S3 object URL, to the job document. The link is an Amazon S3 object URL and is required if you don't specify a value for <code>document</code>.</p>
    /// <p>For example, <code>--document-source https://s3.<i>region-code</i>.amazonaws.com/example-firmware/device-firmware.1.0</code> </p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/access-bucket-intro.html">Methods for accessing a bucket</a>.</p>
    pub fn set_document_source(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.document_source = input;
        self
    }
    /// <p>An S3 link, or S3 object URL, to the job document. The link is an Amazon S3 object URL and is required if you don't specify a value for <code>document</code>.</p>
    /// <p>For example, <code>--document-source https://s3.<i>region-code</i>.amazonaws.com/example-firmware/device-firmware.1.0</code> </p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/access-bucket-intro.html">Methods for accessing a bucket</a>.</p>
    pub fn get_document_source(&self) -> &::std::option::Option<::std::string::String> {
        &self.document_source
    }
    /// <p>The job document. Required if you don't specify a value for <code>documentSource</code>.</p>
    pub fn document(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.document = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The job document. Required if you don't specify a value for <code>documentSource</code>.</p>
    pub fn set_document(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.document = input;
        self
    }
    /// <p>The job document. Required if you don't specify a value for <code>documentSource</code>.</p>
    pub fn get_document(&self) -> &::std::option::Option<::std::string::String> {
        &self.document
    }
    /// <p>A description of the job document.</p>
    /// This field is required.
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description of the job document.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description of the job document.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>Configuration for pre-signed S3 URLs.</p>
    pub fn presigned_url_config(mut self, input: crate::types::PresignedUrlConfig) -> Self {
        self.presigned_url_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>Configuration for pre-signed S3 URLs.</p>
    pub fn set_presigned_url_config(mut self, input: ::std::option::Option<crate::types::PresignedUrlConfig>) -> Self {
        self.presigned_url_config = input;
        self
    }
    /// <p>Configuration for pre-signed S3 URLs.</p>
    pub fn get_presigned_url_config(&self) -> &::std::option::Option<crate::types::PresignedUrlConfig> {
        &self.presigned_url_config
    }
    /// <p>Allows you to create a staged rollout of a job.</p>
    pub fn job_executions_rollout_config(mut self, input: crate::types::JobExecutionsRolloutConfig) -> Self {
        self.job_executions_rollout_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>Allows you to create a staged rollout of a job.</p>
    pub fn set_job_executions_rollout_config(mut self, input: ::std::option::Option<crate::types::JobExecutionsRolloutConfig>) -> Self {
        self.job_executions_rollout_config = input;
        self
    }
    /// <p>Allows you to create a staged rollout of a job.</p>
    pub fn get_job_executions_rollout_config(&self) -> &::std::option::Option<crate::types::JobExecutionsRolloutConfig> {
        &self.job_executions_rollout_config
    }
    /// <p>The criteria that determine when and how a job abort takes place.</p>
    pub fn abort_config(mut self, input: crate::types::AbortConfig) -> Self {
        self.abort_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>The criteria that determine when and how a job abort takes place.</p>
    pub fn set_abort_config(mut self, input: ::std::option::Option<crate::types::AbortConfig>) -> Self {
        self.abort_config = input;
        self
    }
    /// <p>The criteria that determine when and how a job abort takes place.</p>
    pub fn get_abort_config(&self) -> &::std::option::Option<crate::types::AbortConfig> {
        &self.abort_config
    }
    /// <p>Specifies the amount of time each device has to finish its execution of the job. A timer is started when the job execution status is set to <code>IN_PROGRESS</code>. If the job execution status is not set to another terminal state before the timer expires, it will be automatically set to <code>TIMED_OUT</code>.</p>
    pub fn timeout_config(mut self, input: crate::types::TimeoutConfig) -> Self {
        self.timeout_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the amount of time each device has to finish its execution of the job. A timer is started when the job execution status is set to <code>IN_PROGRESS</code>. If the job execution status is not set to another terminal state before the timer expires, it will be automatically set to <code>TIMED_OUT</code>.</p>
    pub fn set_timeout_config(mut self, input: ::std::option::Option<crate::types::TimeoutConfig>) -> Self {
        self.timeout_config = input;
        self
    }
    /// <p>Specifies the amount of time each device has to finish its execution of the job. A timer is started when the job execution status is set to <code>IN_PROGRESS</code>. If the job execution status is not set to another terminal state before the timer expires, it will be automatically set to <code>TIMED_OUT</code>.</p>
    pub fn get_timeout_config(&self) -> &::std::option::Option<crate::types::TimeoutConfig> {
        &self.timeout_config
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Metadata that can be used to manage the job template.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>Metadata that can be used to manage the job template.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>Metadata that can be used to manage the job template.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// <p>Allows you to create the criteria to retry a job.</p>
    pub fn job_executions_retry_config(mut self, input: crate::types::JobExecutionsRetryConfig) -> Self {
        self.job_executions_retry_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>Allows you to create the criteria to retry a job.</p>
    pub fn set_job_executions_retry_config(mut self, input: ::std::option::Option<crate::types::JobExecutionsRetryConfig>) -> Self {
        self.job_executions_retry_config = input;
        self
    }
    /// <p>Allows you to create the criteria to retry a job.</p>
    pub fn get_job_executions_retry_config(&self) -> &::std::option::Option<crate::types::JobExecutionsRetryConfig> {
        &self.job_executions_retry_config
    }
    /// Appends an item to `maintenance_windows`.
    ///
    /// To override the contents of this collection use [`set_maintenance_windows`](Self::set_maintenance_windows).
    ///
    /// <p>Allows you to configure an optional maintenance window for the rollout of a job document to all devices in the target group for a job.</p>
    pub fn maintenance_windows(mut self, input: crate::types::MaintenanceWindow) -> Self {
        let mut v = self.maintenance_windows.unwrap_or_default();
        v.push(input);
        self.maintenance_windows = ::std::option::Option::Some(v);
        self
    }
    /// <p>Allows you to configure an optional maintenance window for the rollout of a job document to all devices in the target group for a job.</p>
    pub fn set_maintenance_windows(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::MaintenanceWindow>>) -> Self {
        self.maintenance_windows = input;
        self
    }
    /// <p>Allows you to configure an optional maintenance window for the rollout of a job document to all devices in the target group for a job.</p>
    pub fn get_maintenance_windows(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::MaintenanceWindow>> {
        &self.maintenance_windows
    }
    /// Appends an item to `destination_package_versions`.
    ///
    /// To override the contents of this collection use [`set_destination_package_versions`](Self::set_destination_package_versions).
    ///
    /// <p>The package version Amazon Resource Names (ARNs) that are installed on the device when the job successfully completes. </p>
    /// <p> <b>Note:</b>The following Length Constraints relates to a single string. Up to five strings are allowed.</p>
    pub fn destination_package_versions(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.destination_package_versions.unwrap_or_default();
        v.push(input.into());
        self.destination_package_versions = ::std::option::Option::Some(v);
        self
    }
    /// <p>The package version Amazon Resource Names (ARNs) that are installed on the device when the job successfully completes. </p>
    /// <p> <b>Note:</b>The following Length Constraints relates to a single string. Up to five strings are allowed.</p>
    pub fn set_destination_package_versions(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.destination_package_versions = input;
        self
    }
    /// <p>The package version Amazon Resource Names (ARNs) that are installed on the device when the job successfully completes. </p>
    /// <p> <b>Note:</b>The following Length Constraints relates to a single string. Up to five strings are allowed.</p>
    pub fn get_destination_package_versions(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.destination_package_versions
    }
    /// Consumes the builder and constructs a [`CreateJobTemplateInput`](crate::operation::create_job_template::CreateJobTemplateInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_job_template::CreateJobTemplateInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::create_job_template::CreateJobTemplateInput {
            job_template_id: self.job_template_id,
            job_arn: self.job_arn,
            document_source: self.document_source,
            document: self.document,
            description: self.description,
            presigned_url_config: self.presigned_url_config,
            job_executions_rollout_config: self.job_executions_rollout_config,
            abort_config: self.abort_config,
            timeout_config: self.timeout_config,
            tags: self.tags,
            job_executions_retry_config: self.job_executions_retry_config,
            maintenance_windows: self.maintenance_windows,
            destination_package_versions: self.destination_package_versions,
        })
    }
}
