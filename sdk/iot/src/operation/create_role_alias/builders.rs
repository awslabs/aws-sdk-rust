// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_role_alias::_create_role_alias_output::CreateRoleAliasOutputBuilder;

pub use crate::operation::create_role_alias::_create_role_alias_input::CreateRoleAliasInputBuilder;

/// Fluent builder constructing a request to `CreateRoleAlias`.
///
/// <p>Creates a role alias.</p>
/// <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">CreateRoleAlias</a> action.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateRoleAliasFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_role_alias::builders::CreateRoleAliasInputBuilder,
}
impl CreateRoleAliasFluentBuilder {
    /// Creates a new `CreateRoleAlias`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::create_role_alias::CreateRoleAlias,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::create_role_alias::CreateRoleAliasError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::create_role_alias::CreateRoleAliasOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::create_role_alias::CreateRoleAliasError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The role alias that points to a role ARN. This allows you to change the role without having to update the device.</p>
    pub fn role_alias(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.role_alias(input.into());
        self
    }
    /// <p>The role alias that points to a role ARN. This allows you to change the role without having to update the device.</p>
    pub fn set_role_alias(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_role_alias(input);
        self
    }
    /// <p>The role ARN.</p>
    pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.role_arn(input.into());
        self
    }
    /// <p>The role ARN.</p>
    pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_role_arn(input);
        self
    }
    /// <p>How long (in seconds) the credentials will be valid. The default value is 3,600 seconds.</p>
    /// <p>This value must be less than or equal to the maximum session duration of the IAM role that the role alias references.</p>
    pub fn credential_duration_seconds(mut self, input: i32) -> Self {
        self.inner = self.inner.credential_duration_seconds(input);
        self
    }
    /// <p>How long (in seconds) the credentials will be valid. The default value is 3,600 seconds.</p>
    /// <p>This value must be less than or equal to the maximum session duration of the IAM role that the role alias references.</p>
    pub fn set_credential_duration_seconds(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_credential_duration_seconds(input);
        self
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Metadata which can be used to manage the role alias.</p> <note>
    /// <p>For URI Request parameters use format: ...key1=value1&amp;key2=value2...</p>
    /// <p>For the CLI command-line parameter use format: &amp;&amp;tags "key1=value1&amp;key2=value2..."</p>
    /// <p>For the cli-input-json file use format: "tags": "key1=value1&amp;key2=value2..."</p>
    /// </note>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>Metadata which can be used to manage the role alias.</p> <note>
    /// <p>For URI Request parameters use format: ...key1=value1&amp;key2=value2...</p>
    /// <p>For the CLI command-line parameter use format: &amp;&amp;tags "key1=value1&amp;key2=value2..."</p>
    /// <p>For the cli-input-json file use format: "tags": "key1=value1&amp;key2=value2..."</p>
    /// </note>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
}
