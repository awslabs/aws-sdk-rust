// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SearchIndexOutput {
    /// <p>The token used to get the next set of results, or <code>null</code> if there are no additional results.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The things that match the search query.</p>
    pub things: ::std::option::Option<::std::vec::Vec<crate::types::ThingDocument>>,
    /// <p>The thing groups that match the search query.</p>
    pub thing_groups: ::std::option::Option<::std::vec::Vec<crate::types::ThingGroupDocument>>,
    _request_id: Option<String>,
}
impl SearchIndexOutput {
    /// <p>The token used to get the next set of results, or <code>null</code> if there are no additional results.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The things that match the search query.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.things.is_none()`.
    pub fn things(&self) -> &[crate::types::ThingDocument] {
        self.things.as_deref().unwrap_or_default()
    }
    /// <p>The thing groups that match the search query.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.thing_groups.is_none()`.
    pub fn thing_groups(&self) -> &[crate::types::ThingGroupDocument] {
        self.thing_groups.as_deref().unwrap_or_default()
    }
}
impl ::aws_http::request_id::RequestId for SearchIndexOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl SearchIndexOutput {
    /// Creates a new builder-style object to manufacture [`SearchIndexOutput`](crate::operation::search_index::SearchIndexOutput).
    pub fn builder() -> crate::operation::search_index::builders::SearchIndexOutputBuilder {
        crate::operation::search_index::builders::SearchIndexOutputBuilder::default()
    }
}

/// A builder for [`SearchIndexOutput`](crate::operation::search_index::SearchIndexOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SearchIndexOutputBuilder {
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) things: ::std::option::Option<::std::vec::Vec<crate::types::ThingDocument>>,
    pub(crate) thing_groups: ::std::option::Option<::std::vec::Vec<crate::types::ThingGroupDocument>>,
    _request_id: Option<String>,
}
impl SearchIndexOutputBuilder {
    /// <p>The token used to get the next set of results, or <code>null</code> if there are no additional results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The token used to get the next set of results, or <code>null</code> if there are no additional results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The token used to get the next set of results, or <code>null</code> if there are no additional results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Appends an item to `things`.
    ///
    /// To override the contents of this collection use [`set_things`](Self::set_things).
    ///
    /// <p>The things that match the search query.</p>
    pub fn things(mut self, input: crate::types::ThingDocument) -> Self {
        let mut v = self.things.unwrap_or_default();
        v.push(input);
        self.things = ::std::option::Option::Some(v);
        self
    }
    /// <p>The things that match the search query.</p>
    pub fn set_things(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ThingDocument>>) -> Self {
        self.things = input;
        self
    }
    /// <p>The things that match the search query.</p>
    pub fn get_things(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ThingDocument>> {
        &self.things
    }
    /// Appends an item to `thing_groups`.
    ///
    /// To override the contents of this collection use [`set_thing_groups`](Self::set_thing_groups).
    ///
    /// <p>The thing groups that match the search query.</p>
    pub fn thing_groups(mut self, input: crate::types::ThingGroupDocument) -> Self {
        let mut v = self.thing_groups.unwrap_or_default();
        v.push(input);
        self.thing_groups = ::std::option::Option::Some(v);
        self
    }
    /// <p>The thing groups that match the search query.</p>
    pub fn set_thing_groups(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ThingGroupDocument>>) -> Self {
        self.thing_groups = input;
        self
    }
    /// <p>The thing groups that match the search query.</p>
    pub fn get_thing_groups(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ThingGroupDocument>> {
        &self.thing_groups
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`SearchIndexOutput`](crate::operation::search_index::SearchIndexOutput).
    pub fn build(self) -> crate::operation::search_index::SearchIndexOutput {
        crate::operation::search_index::SearchIndexOutput {
            next_token: self.next_token,
            things: self.things,
            thing_groups: self.thing_groups,
            _request_id: self._request_id,
        }
    }
}
