// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AssociateSbomWithPackageVersionOutput {
    /// <p>The name of the new software package.</p>
    pub package_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of the new package version.</p>
    pub version_name: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon S3 location for the software bill of materials associated with a software package version.</p>
    pub sbom: ::std::option::Option<crate::types::Sbom>,
    /// <p>The status of the initial validation for the SBOM against the Software Package Data Exchange (SPDX) and CycloneDX industry standard format.</p>
    pub sbom_validation_status: ::std::option::Option<crate::types::SbomValidationStatus>,
    _request_id: Option<String>,
}
impl AssociateSbomWithPackageVersionOutput {
    /// <p>The name of the new software package.</p>
    pub fn package_name(&self) -> ::std::option::Option<&str> {
        self.package_name.as_deref()
    }
    /// <p>The name of the new package version.</p>
    pub fn version_name(&self) -> ::std::option::Option<&str> {
        self.version_name.as_deref()
    }
    /// <p>The Amazon S3 location for the software bill of materials associated with a software package version.</p>
    pub fn sbom(&self) -> ::std::option::Option<&crate::types::Sbom> {
        self.sbom.as_ref()
    }
    /// <p>The status of the initial validation for the SBOM against the Software Package Data Exchange (SPDX) and CycloneDX industry standard format.</p>
    pub fn sbom_validation_status(&self) -> ::std::option::Option<&crate::types::SbomValidationStatus> {
        self.sbom_validation_status.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for AssociateSbomWithPackageVersionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl AssociateSbomWithPackageVersionOutput {
    /// Creates a new builder-style object to manufacture [`AssociateSbomWithPackageVersionOutput`](crate::operation::associate_sbom_with_package_version::AssociateSbomWithPackageVersionOutput).
    pub fn builder() -> crate::operation::associate_sbom_with_package_version::builders::AssociateSbomWithPackageVersionOutputBuilder {
        crate::operation::associate_sbom_with_package_version::builders::AssociateSbomWithPackageVersionOutputBuilder::default()
    }
}

/// A builder for [`AssociateSbomWithPackageVersionOutput`](crate::operation::associate_sbom_with_package_version::AssociateSbomWithPackageVersionOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AssociateSbomWithPackageVersionOutputBuilder {
    pub(crate) package_name: ::std::option::Option<::std::string::String>,
    pub(crate) version_name: ::std::option::Option<::std::string::String>,
    pub(crate) sbom: ::std::option::Option<crate::types::Sbom>,
    pub(crate) sbom_validation_status: ::std::option::Option<crate::types::SbomValidationStatus>,
    _request_id: Option<String>,
}
impl AssociateSbomWithPackageVersionOutputBuilder {
    /// <p>The name of the new software package.</p>
    pub fn package_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.package_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the new software package.</p>
    pub fn set_package_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.package_name = input;
        self
    }
    /// <p>The name of the new software package.</p>
    pub fn get_package_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.package_name
    }
    /// <p>The name of the new package version.</p>
    pub fn version_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.version_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the new package version.</p>
    pub fn set_version_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.version_name = input;
        self
    }
    /// <p>The name of the new package version.</p>
    pub fn get_version_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.version_name
    }
    /// <p>The Amazon S3 location for the software bill of materials associated with a software package version.</p>
    pub fn sbom(mut self, input: crate::types::Sbom) -> Self {
        self.sbom = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Amazon S3 location for the software bill of materials associated with a software package version.</p>
    pub fn set_sbom(mut self, input: ::std::option::Option<crate::types::Sbom>) -> Self {
        self.sbom = input;
        self
    }
    /// <p>The Amazon S3 location for the software bill of materials associated with a software package version.</p>
    pub fn get_sbom(&self) -> &::std::option::Option<crate::types::Sbom> {
        &self.sbom
    }
    /// <p>The status of the initial validation for the SBOM against the Software Package Data Exchange (SPDX) and CycloneDX industry standard format.</p>
    pub fn sbom_validation_status(mut self, input: crate::types::SbomValidationStatus) -> Self {
        self.sbom_validation_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the initial validation for the SBOM against the Software Package Data Exchange (SPDX) and CycloneDX industry standard format.</p>
    pub fn set_sbom_validation_status(mut self, input: ::std::option::Option<crate::types::SbomValidationStatus>) -> Self {
        self.sbom_validation_status = input;
        self
    }
    /// <p>The status of the initial validation for the SBOM against the Software Package Data Exchange (SPDX) and CycloneDX industry standard format.</p>
    pub fn get_sbom_validation_status(&self) -> &::std::option::Option<crate::types::SbomValidationStatus> {
        &self.sbom_validation_status
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`AssociateSbomWithPackageVersionOutput`](crate::operation::associate_sbom_with_package_version::AssociateSbomWithPackageVersionOutput).
    pub fn build(self) -> crate::operation::associate_sbom_with_package_version::AssociateSbomWithPackageVersionOutput {
        crate::operation::associate_sbom_with_package_version::AssociateSbomWithPackageVersionOutput {
            package_name: self.package_name,
            version_name: self.version_name,
            sbom: self.sbom,
            sbom_validation_status: self.sbom_validation_status,
            _request_id: self._request_id,
        }
    }
}
