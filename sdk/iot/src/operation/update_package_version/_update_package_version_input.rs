// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct UpdatePackageVersionInput {
    /// <p>The name of the associated software package.</p>
    pub package_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of the target package version.</p>
    pub version_name: ::std::option::Option<::std::string::String>,
    /// <p>The package version description.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>Metadata that can be used to define a package version’s configuration. For example, the Amazon S3 file location, configuration options that are being sent to the device or fleet. </p>
    /// <p> <b>Note:</b> Attributes can be updated only when the package version is in a draft state.</p>
    /// <p>The combined size of all the attributes on a package version is limited to 3KB.</p>
    pub attributes: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>The status that the package version should be assigned. For more information, see <a href="https://docs.aws.amazon.com/iot/latest/developerguide/preparing-to-use-software-package-catalog.html#package-version-lifecycle">Package version lifecycle</a>.</p>
    pub action: ::std::option::Option<crate::types::PackageVersionAction>,
    /// <p>A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
}
impl UpdatePackageVersionInput {
    /// <p>The name of the associated software package.</p>
    pub fn package_name(&self) -> ::std::option::Option<&str> {
        self.package_name.as_deref()
    }
    /// <p>The name of the target package version.</p>
    pub fn version_name(&self) -> ::std::option::Option<&str> {
        self.version_name.as_deref()
    }
    /// <p>The package version description.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Metadata that can be used to define a package version’s configuration. For example, the Amazon S3 file location, configuration options that are being sent to the device or fleet. </p>
    /// <p> <b>Note:</b> Attributes can be updated only when the package version is in a draft state.</p>
    /// <p>The combined size of all the attributes on a package version is limited to 3KB.</p>
    pub fn attributes(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.attributes.as_ref()
    }
    /// <p>The status that the package version should be assigned. For more information, see <a href="https://docs.aws.amazon.com/iot/latest/developerguide/preparing-to-use-software-package-catalog.html#package-version-lifecycle">Package version lifecycle</a>.</p>
    pub fn action(&self) -> ::std::option::Option<&crate::types::PackageVersionAction> {
        self.action.as_ref()
    }
    /// <p>A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
}
impl ::std::fmt::Debug for UpdatePackageVersionInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UpdatePackageVersionInput");
        formatter.field("package_name", &self.package_name);
        formatter.field("version_name", &self.version_name);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("attributes", &"*** Sensitive Data Redacted ***");
        formatter.field("action", &self.action);
        formatter.field("client_token", &self.client_token);
        formatter.finish()
    }
}
impl UpdatePackageVersionInput {
    /// Creates a new builder-style object to manufacture [`UpdatePackageVersionInput`](crate::operation::update_package_version::UpdatePackageVersionInput).
    pub fn builder() -> crate::operation::update_package_version::builders::UpdatePackageVersionInputBuilder {
        crate::operation::update_package_version::builders::UpdatePackageVersionInputBuilder::default()
    }
}

/// A builder for [`UpdatePackageVersionInput`](crate::operation::update_package_version::UpdatePackageVersionInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct UpdatePackageVersionInputBuilder {
    pub(crate) package_name: ::std::option::Option<::std::string::String>,
    pub(crate) version_name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) attributes: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) action: ::std::option::Option<crate::types::PackageVersionAction>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
}
impl UpdatePackageVersionInputBuilder {
    /// <p>The name of the associated software package.</p>
    /// This field is required.
    pub fn package_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.package_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the associated software package.</p>
    pub fn set_package_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.package_name = input;
        self
    }
    /// <p>The name of the associated software package.</p>
    pub fn get_package_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.package_name
    }
    /// <p>The name of the target package version.</p>
    /// This field is required.
    pub fn version_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.version_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the target package version.</p>
    pub fn set_version_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.version_name = input;
        self
    }
    /// <p>The name of the target package version.</p>
    pub fn get_version_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.version_name
    }
    /// <p>The package version description.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The package version description.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The package version description.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Adds a key-value pair to `attributes`.
    ///
    /// To override the contents of this collection use [`set_attributes`](Self::set_attributes).
    ///
    /// <p>Metadata that can be used to define a package version’s configuration. For example, the Amazon S3 file location, configuration options that are being sent to the device or fleet. </p>
    /// <p> <b>Note:</b> Attributes can be updated only when the package version is in a draft state.</p>
    /// <p>The combined size of all the attributes on a package version is limited to 3KB.</p>
    pub fn attributes(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.attributes.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.attributes = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Metadata that can be used to define a package version’s configuration. For example, the Amazon S3 file location, configuration options that are being sent to the device or fleet. </p>
    /// <p> <b>Note:</b> Attributes can be updated only when the package version is in a draft state.</p>
    /// <p>The combined size of all the attributes on a package version is limited to 3KB.</p>
    pub fn set_attributes(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.attributes = input;
        self
    }
    /// <p>Metadata that can be used to define a package version’s configuration. For example, the Amazon S3 file location, configuration options that are being sent to the device or fleet. </p>
    /// <p> <b>Note:</b> Attributes can be updated only when the package version is in a draft state.</p>
    /// <p>The combined size of all the attributes on a package version is limited to 3KB.</p>
    pub fn get_attributes(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.attributes
    }
    /// <p>The status that the package version should be assigned. For more information, see <a href="https://docs.aws.amazon.com/iot/latest/developerguide/preparing-to-use-software-package-catalog.html#package-version-lifecycle">Package version lifecycle</a>.</p>
    pub fn action(mut self, input: crate::types::PackageVersionAction) -> Self {
        self.action = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status that the package version should be assigned. For more information, see <a href="https://docs.aws.amazon.com/iot/latest/developerguide/preparing-to-use-software-package-catalog.html#package-version-lifecycle">Package version lifecycle</a>.</p>
    pub fn set_action(mut self, input: ::std::option::Option<crate::types::PackageVersionAction>) -> Self {
        self.action = input;
        self
    }
    /// <p>The status that the package version should be assigned. For more information, see <a href="https://docs.aws.amazon.com/iot/latest/developerguide/preparing-to-use-software-package-catalog.html#package-version-lifecycle">Package version lifecycle</a>.</p>
    pub fn get_action(&self) -> &::std::option::Option<crate::types::PackageVersionAction> {
        &self.action
    }
    /// <p>A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// Consumes the builder and constructs a [`UpdatePackageVersionInput`](crate::operation::update_package_version::UpdatePackageVersionInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_package_version::UpdatePackageVersionInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::update_package_version::UpdatePackageVersionInput {
            package_name: self.package_name,
            version_name: self.version_name,
            description: self.description,
            attributes: self.attributes,
            action: self.action,
            client_token: self.client_token,
        })
    }
}
impl ::std::fmt::Debug for UpdatePackageVersionInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UpdatePackageVersionInputBuilder");
        formatter.field("package_name", &self.package_name);
        formatter.field("version_name", &self.version_name);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("attributes", &"*** Sensitive Data Redacted ***");
        formatter.field("action", &self.action);
        formatter.field("client_token", &self.client_token);
        formatter.finish()
    }
}
