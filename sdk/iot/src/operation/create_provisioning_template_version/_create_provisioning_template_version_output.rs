// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateProvisioningTemplateVersionOutput {
    /// <p>The ARN that identifies the provisioning template.</p>
    #[doc(hidden)]
    pub template_arn: std::option::Option<std::string::String>,
    /// <p>The name of the provisioning template.</p>
    #[doc(hidden)]
    pub template_name: std::option::Option<std::string::String>,
    /// <p>The version of the provisioning template.</p>
    #[doc(hidden)]
    pub version_id: std::option::Option<i32>,
    /// <p>True if the provisioning template version is the default version, otherwise false.</p>
    #[doc(hidden)]
    pub is_default_version: bool,
    _request_id: Option<String>,
}
impl CreateProvisioningTemplateVersionOutput {
    /// <p>The ARN that identifies the provisioning template.</p>
    pub fn template_arn(&self) -> std::option::Option<&str> {
        self.template_arn.as_deref()
    }
    /// <p>The name of the provisioning template.</p>
    pub fn template_name(&self) -> std::option::Option<&str> {
        self.template_name.as_deref()
    }
    /// <p>The version of the provisioning template.</p>
    pub fn version_id(&self) -> std::option::Option<i32> {
        self.version_id
    }
    /// <p>True if the provisioning template version is the default version, otherwise false.</p>
    pub fn is_default_version(&self) -> bool {
        self.is_default_version
    }
}
impl aws_http::request_id::RequestId for CreateProvisioningTemplateVersionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateProvisioningTemplateVersionOutput {
    /// Creates a new builder-style object to manufacture [`CreateProvisioningTemplateVersionOutput`](crate::operation::create_provisioning_template_version::CreateProvisioningTemplateVersionOutput).
    pub fn builder() -> crate::operation::create_provisioning_template_version::builders::CreateProvisioningTemplateVersionOutputBuilder{
        crate::operation::create_provisioning_template_version::builders::CreateProvisioningTemplateVersionOutputBuilder::default()
    }
}

/// A builder for [`CreateProvisioningTemplateVersionOutput`](crate::operation::create_provisioning_template_version::CreateProvisioningTemplateVersionOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateProvisioningTemplateVersionOutputBuilder {
    pub(crate) template_arn: std::option::Option<std::string::String>,
    pub(crate) template_name: std::option::Option<std::string::String>,
    pub(crate) version_id: std::option::Option<i32>,
    pub(crate) is_default_version: std::option::Option<bool>,
    _request_id: Option<String>,
}
impl CreateProvisioningTemplateVersionOutputBuilder {
    /// <p>The ARN that identifies the provisioning template.</p>
    pub fn template_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.template_arn = Some(input.into());
        self
    }
    /// <p>The ARN that identifies the provisioning template.</p>
    pub fn set_template_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.template_arn = input;
        self
    }
    /// <p>The name of the provisioning template.</p>
    pub fn template_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.template_name = Some(input.into());
        self
    }
    /// <p>The name of the provisioning template.</p>
    pub fn set_template_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.template_name = input;
        self
    }
    /// <p>The version of the provisioning template.</p>
    pub fn version_id(mut self, input: i32) -> Self {
        self.version_id = Some(input);
        self
    }
    /// <p>The version of the provisioning template.</p>
    pub fn set_version_id(mut self, input: std::option::Option<i32>) -> Self {
        self.version_id = input;
        self
    }
    /// <p>True if the provisioning template version is the default version, otherwise false.</p>
    pub fn is_default_version(mut self, input: bool) -> Self {
        self.is_default_version = Some(input);
        self
    }
    /// <p>True if the provisioning template version is the default version, otherwise false.</p>
    pub fn set_is_default_version(mut self, input: std::option::Option<bool>) -> Self {
        self.is_default_version = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`CreateProvisioningTemplateVersionOutput`](crate::operation::create_provisioning_template_version::CreateProvisioningTemplateVersionOutput).
    pub fn build(self) -> crate::operation::create_provisioning_template_version::CreateProvisioningTemplateVersionOutput{
        crate::operation::create_provisioning_template_version::CreateProvisioningTemplateVersionOutput {
            template_arn: self.template_arn
            ,
            template_name: self.template_name
            ,
            version_id: self.version_id
            ,
            is_default_version: self.is_default_version
                .unwrap_or_default()
            ,
            _request_id: self._request_id,
        }
    }
}
