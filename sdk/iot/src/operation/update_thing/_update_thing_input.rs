// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The input for the UpdateThing operation.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateThingInput {
    /// <p>The name of the thing to update.</p>
    /// <p>You can't change a thing's name. To change a thing's name, you must create a new thing, give it the new name, and then delete the old thing.</p>
    pub thing_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of the thing type.</p>
    pub thing_type_name: ::std::option::Option<::std::string::String>,
    /// <p>A list of thing attributes, a JSON string containing name-value pairs. For example:</p>
    /// <p> <code>{\"attributes\":{\"name1\":\"value2\"}}</code> </p>
    /// <p>This data is used to add new attributes or update existing attributes.</p>
    pub attribute_payload: ::std::option::Option<crate::types::AttributePayload>,
    /// <p>The expected version of the thing record in the registry. If the version of the record in the registry does not match the expected version specified in the request, the <code>UpdateThing</code> request is rejected with a <code>VersionConflictException</code>.</p>
    pub expected_version: ::std::option::Option<i64>,
    /// <p>Remove a thing type association. If <b>true</b>, the association is removed.</p>
    pub remove_thing_type: ::std::option::Option<bool>,
}
impl UpdateThingInput {
    /// <p>The name of the thing to update.</p>
    /// <p>You can't change a thing's name. To change a thing's name, you must create a new thing, give it the new name, and then delete the old thing.</p>
    pub fn thing_name(&self) -> ::std::option::Option<&str> {
        self.thing_name.as_deref()
    }
    /// <p>The name of the thing type.</p>
    pub fn thing_type_name(&self) -> ::std::option::Option<&str> {
        self.thing_type_name.as_deref()
    }
    /// <p>A list of thing attributes, a JSON string containing name-value pairs. For example:</p>
    /// <p> <code>{\"attributes\":{\"name1\":\"value2\"}}</code> </p>
    /// <p>This data is used to add new attributes or update existing attributes.</p>
    pub fn attribute_payload(&self) -> ::std::option::Option<&crate::types::AttributePayload> {
        self.attribute_payload.as_ref()
    }
    /// <p>The expected version of the thing record in the registry. If the version of the record in the registry does not match the expected version specified in the request, the <code>UpdateThing</code> request is rejected with a <code>VersionConflictException</code>.</p>
    pub fn expected_version(&self) -> ::std::option::Option<i64> {
        self.expected_version
    }
    /// <p>Remove a thing type association. If <b>true</b>, the association is removed.</p>
    pub fn remove_thing_type(&self) -> ::std::option::Option<bool> {
        self.remove_thing_type
    }
}
impl UpdateThingInput {
    /// Creates a new builder-style object to manufacture [`UpdateThingInput`](crate::operation::update_thing::UpdateThingInput).
    pub fn builder() -> crate::operation::update_thing::builders::UpdateThingInputBuilder {
        crate::operation::update_thing::builders::UpdateThingInputBuilder::default()
    }
}

/// A builder for [`UpdateThingInput`](crate::operation::update_thing::UpdateThingInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateThingInputBuilder {
    pub(crate) thing_name: ::std::option::Option<::std::string::String>,
    pub(crate) thing_type_name: ::std::option::Option<::std::string::String>,
    pub(crate) attribute_payload: ::std::option::Option<crate::types::AttributePayload>,
    pub(crate) expected_version: ::std::option::Option<i64>,
    pub(crate) remove_thing_type: ::std::option::Option<bool>,
}
impl UpdateThingInputBuilder {
    /// <p>The name of the thing to update.</p>
    /// <p>You can't change a thing's name. To change a thing's name, you must create a new thing, give it the new name, and then delete the old thing.</p>
    /// This field is required.
    pub fn thing_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.thing_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the thing to update.</p>
    /// <p>You can't change a thing's name. To change a thing's name, you must create a new thing, give it the new name, and then delete the old thing.</p>
    pub fn set_thing_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.thing_name = input;
        self
    }
    /// <p>The name of the thing to update.</p>
    /// <p>You can't change a thing's name. To change a thing's name, you must create a new thing, give it the new name, and then delete the old thing.</p>
    pub fn get_thing_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.thing_name
    }
    /// <p>The name of the thing type.</p>
    pub fn thing_type_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.thing_type_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the thing type.</p>
    pub fn set_thing_type_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.thing_type_name = input;
        self
    }
    /// <p>The name of the thing type.</p>
    pub fn get_thing_type_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.thing_type_name
    }
    /// <p>A list of thing attributes, a JSON string containing name-value pairs. For example:</p>
    /// <p> <code>{\"attributes\":{\"name1\":\"value2\"}}</code> </p>
    /// <p>This data is used to add new attributes or update existing attributes.</p>
    pub fn attribute_payload(mut self, input: crate::types::AttributePayload) -> Self {
        self.attribute_payload = ::std::option::Option::Some(input);
        self
    }
    /// <p>A list of thing attributes, a JSON string containing name-value pairs. For example:</p>
    /// <p> <code>{\"attributes\":{\"name1\":\"value2\"}}</code> </p>
    /// <p>This data is used to add new attributes or update existing attributes.</p>
    pub fn set_attribute_payload(mut self, input: ::std::option::Option<crate::types::AttributePayload>) -> Self {
        self.attribute_payload = input;
        self
    }
    /// <p>A list of thing attributes, a JSON string containing name-value pairs. For example:</p>
    /// <p> <code>{\"attributes\":{\"name1\":\"value2\"}}</code> </p>
    /// <p>This data is used to add new attributes or update existing attributes.</p>
    pub fn get_attribute_payload(&self) -> &::std::option::Option<crate::types::AttributePayload> {
        &self.attribute_payload
    }
    /// <p>The expected version of the thing record in the registry. If the version of the record in the registry does not match the expected version specified in the request, the <code>UpdateThing</code> request is rejected with a <code>VersionConflictException</code>.</p>
    pub fn expected_version(mut self, input: i64) -> Self {
        self.expected_version = ::std::option::Option::Some(input);
        self
    }
    /// <p>The expected version of the thing record in the registry. If the version of the record in the registry does not match the expected version specified in the request, the <code>UpdateThing</code> request is rejected with a <code>VersionConflictException</code>.</p>
    pub fn set_expected_version(mut self, input: ::std::option::Option<i64>) -> Self {
        self.expected_version = input;
        self
    }
    /// <p>The expected version of the thing record in the registry. If the version of the record in the registry does not match the expected version specified in the request, the <code>UpdateThing</code> request is rejected with a <code>VersionConflictException</code>.</p>
    pub fn get_expected_version(&self) -> &::std::option::Option<i64> {
        &self.expected_version
    }
    /// <p>Remove a thing type association. If <b>true</b>, the association is removed.</p>
    pub fn remove_thing_type(mut self, input: bool) -> Self {
        self.remove_thing_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Remove a thing type association. If <b>true</b>, the association is removed.</p>
    pub fn set_remove_thing_type(mut self, input: ::std::option::Option<bool>) -> Self {
        self.remove_thing_type = input;
        self
    }
    /// <p>Remove a thing type association. If <b>true</b>, the association is removed.</p>
    pub fn get_remove_thing_type(&self) -> &::std::option::Option<bool> {
        &self.remove_thing_type
    }
    /// Consumes the builder and constructs a [`UpdateThingInput`](crate::operation::update_thing::UpdateThingInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::update_thing::UpdateThingInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_thing::UpdateThingInput {
            thing_name: self.thing_name,
            thing_type_name: self.thing_type_name,
            attribute_payload: self.attribute_payload,
            expected_version: self.expected_version,
            remove_thing_type: self.remove_thing_type,
        })
    }
}
