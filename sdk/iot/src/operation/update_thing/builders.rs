// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_thing::_update_thing_output::UpdateThingOutputBuilder;

pub use crate::operation::update_thing::_update_thing_input::UpdateThingInputBuilder;

/// Fluent builder constructing a request to `UpdateThing`.
///
/// <p>Updates the data for a thing.</p>
/// <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">UpdateThing</a> action.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateThingFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_thing::builders::UpdateThingInputBuilder,
}
impl UpdateThingFluentBuilder {
    /// Creates a new `UpdateThing`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::update_thing::UpdateThing,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::operation::update_thing::UpdateThingError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::update_thing::UpdateThingOutput,
        aws_smithy_http::result::SdkError<crate::operation::update_thing::UpdateThingError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the thing to update.</p>
    /// <p>You can't change a thing's name. To change a thing's name, you must create a new thing, give it the new name, and then delete the old thing.</p>
    pub fn thing_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.thing_name(input.into());
        self
    }
    /// <p>The name of the thing to update.</p>
    /// <p>You can't change a thing's name. To change a thing's name, you must create a new thing, give it the new name, and then delete the old thing.</p>
    pub fn set_thing_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_thing_name(input);
        self
    }
    /// <p>The name of the thing type.</p>
    pub fn thing_type_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.thing_type_name(input.into());
        self
    }
    /// <p>The name of the thing type.</p>
    pub fn set_thing_type_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_thing_type_name(input);
        self
    }
    /// <p>A list of thing attributes, a JSON string containing name-value pairs. For example:</p>
    /// <p> <code>{\"attributes\":{\"name1\":\"value2\"}}</code> </p>
    /// <p>This data is used to add new attributes or update existing attributes.</p>
    pub fn attribute_payload(mut self, input: crate::types::AttributePayload) -> Self {
        self.inner = self.inner.attribute_payload(input);
        self
    }
    /// <p>A list of thing attributes, a JSON string containing name-value pairs. For example:</p>
    /// <p> <code>{\"attributes\":{\"name1\":\"value2\"}}</code> </p>
    /// <p>This data is used to add new attributes or update existing attributes.</p>
    pub fn set_attribute_payload(
        mut self,
        input: std::option::Option<crate::types::AttributePayload>,
    ) -> Self {
        self.inner = self.inner.set_attribute_payload(input);
        self
    }
    /// <p>The expected version of the thing record in the registry. If the version of the record in the registry does not match the expected version specified in the request, the <code>UpdateThing</code> request is rejected with a <code>VersionConflictException</code>.</p>
    pub fn expected_version(mut self, input: i64) -> Self {
        self.inner = self.inner.expected_version(input);
        self
    }
    /// <p>The expected version of the thing record in the registry. If the version of the record in the registry does not match the expected version specified in the request, the <code>UpdateThing</code> request is rejected with a <code>VersionConflictException</code>.</p>
    pub fn set_expected_version(mut self, input: std::option::Option<i64>) -> Self {
        self.inner = self.inner.set_expected_version(input);
        self
    }
    /// <p>Remove a thing type association. If <b>true</b>, the association is removed.</p>
    pub fn remove_thing_type(mut self, input: bool) -> Self {
        self.inner = self.inner.remove_thing_type(input);
        self
    }
    /// <p>Remove a thing type association. If <b>true</b>, the association is removed.</p>
    pub fn set_remove_thing_type(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_remove_thing_type(input);
        self
    }
}
