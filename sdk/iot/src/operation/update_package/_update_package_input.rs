// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct UpdatePackageInput {
    /// <p>The name of the target software package.</p>
    pub package_name: ::std::option::Option<::std::string::String>,
    /// <p>The package description.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The name of the default package version.</p>
    /// <p> <b>Note:</b> You cannot name a <code>defaultVersion</code> and set <code>unsetDefaultVersion</code> equal to <code>true</code> at the same time.</p>
    pub default_version_name: ::std::option::Option<::std::string::String>,
    /// <p>Indicates whether you want to remove the named default package version from the software package. Set as <code>true</code> to remove the default package version. </p>
    /// <p> <b>Note:</b> You cannot name a <code>defaultVersion</code> and set <code>unsetDefaultVersion</code> equal to <code>true</code> at the same time.</p>
    pub unset_default_version: ::std::option::Option<bool>,
    /// <p>A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
}
impl UpdatePackageInput {
    /// <p>The name of the target software package.</p>
    pub fn package_name(&self) -> ::std::option::Option<&str> {
        self.package_name.as_deref()
    }
    /// <p>The package description.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The name of the default package version.</p>
    /// <p> <b>Note:</b> You cannot name a <code>defaultVersion</code> and set <code>unsetDefaultVersion</code> equal to <code>true</code> at the same time.</p>
    pub fn default_version_name(&self) -> ::std::option::Option<&str> {
        self.default_version_name.as_deref()
    }
    /// <p>Indicates whether you want to remove the named default package version from the software package. Set as <code>true</code> to remove the default package version. </p>
    /// <p> <b>Note:</b> You cannot name a <code>defaultVersion</code> and set <code>unsetDefaultVersion</code> equal to <code>true</code> at the same time.</p>
    pub fn unset_default_version(&self) -> ::std::option::Option<bool> {
        self.unset_default_version
    }
    /// <p>A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
}
impl ::std::fmt::Debug for UpdatePackageInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UpdatePackageInput");
        formatter.field("package_name", &self.package_name);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("default_version_name", &self.default_version_name);
        formatter.field("unset_default_version", &self.unset_default_version);
        formatter.field("client_token", &self.client_token);
        formatter.finish()
    }
}
impl UpdatePackageInput {
    /// Creates a new builder-style object to manufacture [`UpdatePackageInput`](crate::operation::update_package::UpdatePackageInput).
    pub fn builder() -> crate::operation::update_package::builders::UpdatePackageInputBuilder {
        crate::operation::update_package::builders::UpdatePackageInputBuilder::default()
    }
}

/// A builder for [`UpdatePackageInput`](crate::operation::update_package::UpdatePackageInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct UpdatePackageInputBuilder {
    pub(crate) package_name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) default_version_name: ::std::option::Option<::std::string::String>,
    pub(crate) unset_default_version: ::std::option::Option<bool>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
}
impl UpdatePackageInputBuilder {
    /// <p>The name of the target software package.</p>
    /// This field is required.
    pub fn package_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.package_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the target software package.</p>
    pub fn set_package_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.package_name = input;
        self
    }
    /// <p>The name of the target software package.</p>
    pub fn get_package_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.package_name
    }
    /// <p>The package description.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The package description.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The package description.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The name of the default package version.</p>
    /// <p> <b>Note:</b> You cannot name a <code>defaultVersion</code> and set <code>unsetDefaultVersion</code> equal to <code>true</code> at the same time.</p>
    pub fn default_version_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.default_version_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the default package version.</p>
    /// <p> <b>Note:</b> You cannot name a <code>defaultVersion</code> and set <code>unsetDefaultVersion</code> equal to <code>true</code> at the same time.</p>
    pub fn set_default_version_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.default_version_name = input;
        self
    }
    /// <p>The name of the default package version.</p>
    /// <p> <b>Note:</b> You cannot name a <code>defaultVersion</code> and set <code>unsetDefaultVersion</code> equal to <code>true</code> at the same time.</p>
    pub fn get_default_version_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.default_version_name
    }
    /// <p>Indicates whether you want to remove the named default package version from the software package. Set as <code>true</code> to remove the default package version. </p>
    /// <p> <b>Note:</b> You cannot name a <code>defaultVersion</code> and set <code>unsetDefaultVersion</code> equal to <code>true</code> at the same time.</p>
    pub fn unset_default_version(mut self, input: bool) -> Self {
        self.unset_default_version = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether you want to remove the named default package version from the software package. Set as <code>true</code> to remove the default package version. </p>
    /// <p> <b>Note:</b> You cannot name a <code>defaultVersion</code> and set <code>unsetDefaultVersion</code> equal to <code>true</code> at the same time.</p>
    pub fn set_unset_default_version(mut self, input: ::std::option::Option<bool>) -> Self {
        self.unset_default_version = input;
        self
    }
    /// <p>Indicates whether you want to remove the named default package version from the software package. Set as <code>true</code> to remove the default package version. </p>
    /// <p> <b>Note:</b> You cannot name a <code>defaultVersion</code> and set <code>unsetDefaultVersion</code> equal to <code>true</code> at the same time.</p>
    pub fn get_unset_default_version(&self) -> &::std::option::Option<bool> {
        &self.unset_default_version
    }
    /// <p>A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// Consumes the builder and constructs a [`UpdatePackageInput`](crate::operation::update_package::UpdatePackageInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_package::UpdatePackageInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_package::UpdatePackageInput {
            package_name: self.package_name,
            description: self.description,
            default_version_name: self.default_version_name,
            unset_default_version: self.unset_default_version,
            client_token: self.client_token,
        })
    }
}
impl ::std::fmt::Debug for UpdatePackageInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UpdatePackageInputBuilder");
        formatter.field("package_name", &self.package_name);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("default_version_name", &self.default_version_name);
        formatter.field("unset_default_version", &self.unset_default_version);
        formatter.field("client_token", &self.client_token);
        formatter.finish()
    }
}
