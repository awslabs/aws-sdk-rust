// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListDomainConfigurationsOutput {
    /// <p>A list of objects that contain summary information about the user's domain configurations.</p>
    pub domain_configurations: ::std::option::Option<::std::vec::Vec<crate::types::DomainConfigurationSummary>>,
    /// <p>The marker for the next set of results.</p>
    pub next_marker: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListDomainConfigurationsOutput {
    /// <p>A list of objects that contain summary information about the user's domain configurations.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.domain_configurations.is_none()`.
    pub fn domain_configurations(&self) -> &[crate::types::DomainConfigurationSummary] {
        self.domain_configurations.as_deref().unwrap_or_default()
    }
    /// <p>The marker for the next set of results.</p>
    pub fn next_marker(&self) -> ::std::option::Option<&str> {
        self.next_marker.as_deref()
    }
}
impl ::aws_http::request_id::RequestId for ListDomainConfigurationsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListDomainConfigurationsOutput {
    /// Creates a new builder-style object to manufacture [`ListDomainConfigurationsOutput`](crate::operation::list_domain_configurations::ListDomainConfigurationsOutput).
    pub fn builder() -> crate::operation::list_domain_configurations::builders::ListDomainConfigurationsOutputBuilder {
        crate::operation::list_domain_configurations::builders::ListDomainConfigurationsOutputBuilder::default()
    }
}

/// A builder for [`ListDomainConfigurationsOutput`](crate::operation::list_domain_configurations::ListDomainConfigurationsOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListDomainConfigurationsOutputBuilder {
    pub(crate) domain_configurations: ::std::option::Option<::std::vec::Vec<crate::types::DomainConfigurationSummary>>,
    pub(crate) next_marker: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListDomainConfigurationsOutputBuilder {
    /// Appends an item to `domain_configurations`.
    ///
    /// To override the contents of this collection use [`set_domain_configurations`](Self::set_domain_configurations).
    ///
    /// <p>A list of objects that contain summary information about the user's domain configurations.</p>
    pub fn domain_configurations(mut self, input: crate::types::DomainConfigurationSummary) -> Self {
        let mut v = self.domain_configurations.unwrap_or_default();
        v.push(input);
        self.domain_configurations = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of objects that contain summary information about the user's domain configurations.</p>
    pub fn set_domain_configurations(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DomainConfigurationSummary>>) -> Self {
        self.domain_configurations = input;
        self
    }
    /// <p>A list of objects that contain summary information about the user's domain configurations.</p>
    pub fn get_domain_configurations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DomainConfigurationSummary>> {
        &self.domain_configurations
    }
    /// <p>The marker for the next set of results.</p>
    pub fn next_marker(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_marker = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The marker for the next set of results.</p>
    pub fn set_next_marker(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_marker = input;
        self
    }
    /// <p>The marker for the next set of results.</p>
    pub fn get_next_marker(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_marker
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListDomainConfigurationsOutput`](crate::operation::list_domain_configurations::ListDomainConfigurationsOutput).
    pub fn build(self) -> crate::operation::list_domain_configurations::ListDomainConfigurationsOutput {
        crate::operation::list_domain_configurations::ListDomainConfigurationsOutput {
            domain_configurations: self.domain_configurations,
            next_marker: self.next_marker,
            _request_id: self._request_id,
        }
    }
}
