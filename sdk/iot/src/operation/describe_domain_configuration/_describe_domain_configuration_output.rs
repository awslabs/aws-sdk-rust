// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeDomainConfigurationOutput {
    /// <p>The name of the domain configuration.</p>
    #[doc(hidden)]
    pub domain_configuration_name: std::option::Option<std::string::String>,
    /// <p>The ARN of the domain configuration.</p>
    #[doc(hidden)]
    pub domain_configuration_arn: std::option::Option<std::string::String>,
    /// <p>The name of the domain.</p>
    #[doc(hidden)]
    pub domain_name: std::option::Option<std::string::String>,
    /// <p>A list containing summary information about the server certificate included in the domain configuration.</p>
    #[doc(hidden)]
    pub server_certificates:
        std::option::Option<std::vec::Vec<crate::types::ServerCertificateSummary>>,
    /// <p>An object that specifies the authorization service for a domain.</p>
    #[doc(hidden)]
    pub authorizer_config: std::option::Option<crate::types::AuthorizerConfig>,
    /// <p>A Boolean value that specifies the current state of the domain configuration.</p>
    #[doc(hidden)]
    pub domain_configuration_status: std::option::Option<crate::types::DomainConfigurationStatus>,
    /// <p>The type of service delivered by the endpoint.</p>
    #[doc(hidden)]
    pub service_type: std::option::Option<crate::types::ServiceType>,
    /// <p>The type of the domain.</p>
    #[doc(hidden)]
    pub domain_type: std::option::Option<crate::types::DomainType>,
    /// <p>The date and time the domain configuration's status was last changed.</p>
    #[doc(hidden)]
    pub last_status_change_date: std::option::Option<aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl DescribeDomainConfigurationOutput {
    /// <p>The name of the domain configuration.</p>
    pub fn domain_configuration_name(&self) -> std::option::Option<&str> {
        self.domain_configuration_name.as_deref()
    }
    /// <p>The ARN of the domain configuration.</p>
    pub fn domain_configuration_arn(&self) -> std::option::Option<&str> {
        self.domain_configuration_arn.as_deref()
    }
    /// <p>The name of the domain.</p>
    pub fn domain_name(&self) -> std::option::Option<&str> {
        self.domain_name.as_deref()
    }
    /// <p>A list containing summary information about the server certificate included in the domain configuration.</p>
    pub fn server_certificates(
        &self,
    ) -> std::option::Option<&[crate::types::ServerCertificateSummary]> {
        self.server_certificates.as_deref()
    }
    /// <p>An object that specifies the authorization service for a domain.</p>
    pub fn authorizer_config(&self) -> std::option::Option<&crate::types::AuthorizerConfig> {
        self.authorizer_config.as_ref()
    }
    /// <p>A Boolean value that specifies the current state of the domain configuration.</p>
    pub fn domain_configuration_status(
        &self,
    ) -> std::option::Option<&crate::types::DomainConfigurationStatus> {
        self.domain_configuration_status.as_ref()
    }
    /// <p>The type of service delivered by the endpoint.</p>
    pub fn service_type(&self) -> std::option::Option<&crate::types::ServiceType> {
        self.service_type.as_ref()
    }
    /// <p>The type of the domain.</p>
    pub fn domain_type(&self) -> std::option::Option<&crate::types::DomainType> {
        self.domain_type.as_ref()
    }
    /// <p>The date and time the domain configuration's status was last changed.</p>
    pub fn last_status_change_date(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_status_change_date.as_ref()
    }
}
impl aws_http::request_id::RequestId for DescribeDomainConfigurationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeDomainConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`DescribeDomainConfigurationOutput`](crate::operation::describe_domain_configuration::DescribeDomainConfigurationOutput).
    pub fn builder() -> crate::operation::describe_domain_configuration::builders::DescribeDomainConfigurationOutputBuilder{
        crate::operation::describe_domain_configuration::builders::DescribeDomainConfigurationOutputBuilder::default()
    }
}

/// A builder for [`DescribeDomainConfigurationOutput`](crate::operation::describe_domain_configuration::DescribeDomainConfigurationOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeDomainConfigurationOutputBuilder {
    pub(crate) domain_configuration_name: std::option::Option<std::string::String>,
    pub(crate) domain_configuration_arn: std::option::Option<std::string::String>,
    pub(crate) domain_name: std::option::Option<std::string::String>,
    pub(crate) server_certificates:
        std::option::Option<std::vec::Vec<crate::types::ServerCertificateSummary>>,
    pub(crate) authorizer_config: std::option::Option<crate::types::AuthorizerConfig>,
    pub(crate) domain_configuration_status:
        std::option::Option<crate::types::DomainConfigurationStatus>,
    pub(crate) service_type: std::option::Option<crate::types::ServiceType>,
    pub(crate) domain_type: std::option::Option<crate::types::DomainType>,
    pub(crate) last_status_change_date: std::option::Option<aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl DescribeDomainConfigurationOutputBuilder {
    /// <p>The name of the domain configuration.</p>
    pub fn domain_configuration_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.domain_configuration_name = Some(input.into());
        self
    }
    /// <p>The name of the domain configuration.</p>
    pub fn set_domain_configuration_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.domain_configuration_name = input;
        self
    }
    /// <p>The ARN of the domain configuration.</p>
    pub fn domain_configuration_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.domain_configuration_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the domain configuration.</p>
    pub fn set_domain_configuration_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.domain_configuration_arn = input;
        self
    }
    /// <p>The name of the domain.</p>
    pub fn domain_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.domain_name = Some(input.into());
        self
    }
    /// <p>The name of the domain.</p>
    pub fn set_domain_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.domain_name = input;
        self
    }
    /// Appends an item to `server_certificates`.
    ///
    /// To override the contents of this collection use [`set_server_certificates`](Self::set_server_certificates).
    ///
    /// <p>A list containing summary information about the server certificate included in the domain configuration.</p>
    pub fn server_certificates(mut self, input: crate::types::ServerCertificateSummary) -> Self {
        let mut v = self.server_certificates.unwrap_or_default();
        v.push(input);
        self.server_certificates = Some(v);
        self
    }
    /// <p>A list containing summary information about the server certificate included in the domain configuration.</p>
    pub fn set_server_certificates(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ServerCertificateSummary>>,
    ) -> Self {
        self.server_certificates = input;
        self
    }
    /// <p>An object that specifies the authorization service for a domain.</p>
    pub fn authorizer_config(mut self, input: crate::types::AuthorizerConfig) -> Self {
        self.authorizer_config = Some(input);
        self
    }
    /// <p>An object that specifies the authorization service for a domain.</p>
    pub fn set_authorizer_config(
        mut self,
        input: std::option::Option<crate::types::AuthorizerConfig>,
    ) -> Self {
        self.authorizer_config = input;
        self
    }
    /// <p>A Boolean value that specifies the current state of the domain configuration.</p>
    pub fn domain_configuration_status(
        mut self,
        input: crate::types::DomainConfigurationStatus,
    ) -> Self {
        self.domain_configuration_status = Some(input);
        self
    }
    /// <p>A Boolean value that specifies the current state of the domain configuration.</p>
    pub fn set_domain_configuration_status(
        mut self,
        input: std::option::Option<crate::types::DomainConfigurationStatus>,
    ) -> Self {
        self.domain_configuration_status = input;
        self
    }
    /// <p>The type of service delivered by the endpoint.</p>
    pub fn service_type(mut self, input: crate::types::ServiceType) -> Self {
        self.service_type = Some(input);
        self
    }
    /// <p>The type of service delivered by the endpoint.</p>
    pub fn set_service_type(
        mut self,
        input: std::option::Option<crate::types::ServiceType>,
    ) -> Self {
        self.service_type = input;
        self
    }
    /// <p>The type of the domain.</p>
    pub fn domain_type(mut self, input: crate::types::DomainType) -> Self {
        self.domain_type = Some(input);
        self
    }
    /// <p>The type of the domain.</p>
    pub fn set_domain_type(mut self, input: std::option::Option<crate::types::DomainType>) -> Self {
        self.domain_type = input;
        self
    }
    /// <p>The date and time the domain configuration's status was last changed.</p>
    pub fn last_status_change_date(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_status_change_date = Some(input);
        self
    }
    /// <p>The date and time the domain configuration's status was last changed.</p>
    pub fn set_last_status_change_date(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_status_change_date = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeDomainConfigurationOutput`](crate::operation::describe_domain_configuration::DescribeDomainConfigurationOutput).
    pub fn build(
        self,
    ) -> crate::operation::describe_domain_configuration::DescribeDomainConfigurationOutput {
        crate::operation::describe_domain_configuration::DescribeDomainConfigurationOutput {
            domain_configuration_name: self.domain_configuration_name,
            domain_configuration_arn: self.domain_configuration_arn,
            domain_name: self.domain_name,
            server_certificates: self.server_certificates,
            authorizer_config: self.authorizer_config,
            domain_configuration_status: self.domain_configuration_status,
            service_type: self.service_type,
            domain_type: self.domain_type,
            last_status_change_date: self.last_status_change_date,
            _request_id: self._request_id,
        }
    }
}
