// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListAuditFindingsInput {
    /// <p>A filter to limit results to the audit with the specified ID. You must specify either the taskId or the startTime and endTime, but not both.</p>
    pub task_id: ::std::option::Option<::std::string::String>,
    /// <p>A filter to limit results to the findings for the specified audit check.</p>
    pub check_name: ::std::option::Option<::std::string::String>,
    /// <p>Information identifying the noncompliant resource.</p>
    pub resource_identifier: ::std::option::Option<crate::types::ResourceIdentifier>,
    /// <p>The maximum number of results to return at one time. The default is 25.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>The token for the next set of results.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>A filter to limit results to those found after the specified time. You must specify either the startTime and endTime or the taskId, but not both.</p>
    pub start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>A filter to limit results to those found before the specified time. You must specify either the startTime and endTime or the taskId, but not both.</p>
    pub end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p> Boolean flag indicating whether only the suppressed findings or the unsuppressed findings should be listed. If this parameter isn't provided, the response will list both suppressed and unsuppressed findings. </p>
    pub list_suppressed_findings: ::std::option::Option<bool>,
}
impl ListAuditFindingsInput {
    /// <p>A filter to limit results to the audit with the specified ID. You must specify either the taskId or the startTime and endTime, but not both.</p>
    pub fn task_id(&self) -> ::std::option::Option<&str> {
        self.task_id.as_deref()
    }
    /// <p>A filter to limit results to the findings for the specified audit check.</p>
    pub fn check_name(&self) -> ::std::option::Option<&str> {
        self.check_name.as_deref()
    }
    /// <p>Information identifying the noncompliant resource.</p>
    pub fn resource_identifier(&self) -> ::std::option::Option<&crate::types::ResourceIdentifier> {
        self.resource_identifier.as_ref()
    }
    /// <p>The maximum number of results to return at one time. The default is 25.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>The token for the next set of results.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>A filter to limit results to those found after the specified time. You must specify either the startTime and endTime or the taskId, but not both.</p>
    pub fn start_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
    /// <p>A filter to limit results to those found before the specified time. You must specify either the startTime and endTime or the taskId, but not both.</p>
    pub fn end_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.end_time.as_ref()
    }
    /// <p> Boolean flag indicating whether only the suppressed findings or the unsuppressed findings should be listed. If this parameter isn't provided, the response will list both suppressed and unsuppressed findings. </p>
    pub fn list_suppressed_findings(&self) -> ::std::option::Option<bool> {
        self.list_suppressed_findings
    }
}
impl ListAuditFindingsInput {
    /// Creates a new builder-style object to manufacture [`ListAuditFindingsInput`](crate::operation::list_audit_findings::ListAuditFindingsInput).
    pub fn builder() -> crate::operation::list_audit_findings::builders::ListAuditFindingsInputBuilder {
        crate::operation::list_audit_findings::builders::ListAuditFindingsInputBuilder::default()
    }
}

/// A builder for [`ListAuditFindingsInput`](crate::operation::list_audit_findings::ListAuditFindingsInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListAuditFindingsInputBuilder {
    pub(crate) task_id: ::std::option::Option<::std::string::String>,
    pub(crate) check_name: ::std::option::Option<::std::string::String>,
    pub(crate) resource_identifier: ::std::option::Option<crate::types::ResourceIdentifier>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) list_suppressed_findings: ::std::option::Option<bool>,
}
impl ListAuditFindingsInputBuilder {
    /// <p>A filter to limit results to the audit with the specified ID. You must specify either the taskId or the startTime and endTime, but not both.</p>
    pub fn task_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.task_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A filter to limit results to the audit with the specified ID. You must specify either the taskId or the startTime and endTime, but not both.</p>
    pub fn set_task_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.task_id = input;
        self
    }
    /// <p>A filter to limit results to the audit with the specified ID. You must specify either the taskId or the startTime and endTime, but not both.</p>
    pub fn get_task_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.task_id
    }
    /// <p>A filter to limit results to the findings for the specified audit check.</p>
    pub fn check_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.check_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A filter to limit results to the findings for the specified audit check.</p>
    pub fn set_check_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.check_name = input;
        self
    }
    /// <p>A filter to limit results to the findings for the specified audit check.</p>
    pub fn get_check_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.check_name
    }
    /// <p>Information identifying the noncompliant resource.</p>
    pub fn resource_identifier(mut self, input: crate::types::ResourceIdentifier) -> Self {
        self.resource_identifier = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information identifying the noncompliant resource.</p>
    pub fn set_resource_identifier(mut self, input: ::std::option::Option<crate::types::ResourceIdentifier>) -> Self {
        self.resource_identifier = input;
        self
    }
    /// <p>Information identifying the noncompliant resource.</p>
    pub fn get_resource_identifier(&self) -> &::std::option::Option<crate::types::ResourceIdentifier> {
        &self.resource_identifier
    }
    /// <p>The maximum number of results to return at one time. The default is 25.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of results to return at one time. The default is 25.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of results to return at one time. The default is 25.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>The token for the next set of results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The token for the next set of results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The token for the next set of results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>A filter to limit results to those found after the specified time. You must specify either the startTime and endTime or the taskId, but not both.</p>
    pub fn start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>A filter to limit results to those found after the specified time. You must specify either the startTime and endTime or the taskId, but not both.</p>
    pub fn set_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.start_time = input;
        self
    }
    /// <p>A filter to limit results to those found after the specified time. You must specify either the startTime and endTime or the taskId, but not both.</p>
    pub fn get_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.start_time
    }
    /// <p>A filter to limit results to those found before the specified time. You must specify either the startTime and endTime or the taskId, but not both.</p>
    pub fn end_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.end_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>A filter to limit results to those found before the specified time. You must specify either the startTime and endTime or the taskId, but not both.</p>
    pub fn set_end_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.end_time = input;
        self
    }
    /// <p>A filter to limit results to those found before the specified time. You must specify either the startTime and endTime or the taskId, but not both.</p>
    pub fn get_end_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.end_time
    }
    /// <p> Boolean flag indicating whether only the suppressed findings or the unsuppressed findings should be listed. If this parameter isn't provided, the response will list both suppressed and unsuppressed findings. </p>
    pub fn list_suppressed_findings(mut self, input: bool) -> Self {
        self.list_suppressed_findings = ::std::option::Option::Some(input);
        self
    }
    /// <p> Boolean flag indicating whether only the suppressed findings or the unsuppressed findings should be listed. If this parameter isn't provided, the response will list both suppressed and unsuppressed findings. </p>
    pub fn set_list_suppressed_findings(mut self, input: ::std::option::Option<bool>) -> Self {
        self.list_suppressed_findings = input;
        self
    }
    /// <p> Boolean flag indicating whether only the suppressed findings or the unsuppressed findings should be listed. If this parameter isn't provided, the response will list both suppressed and unsuppressed findings. </p>
    pub fn get_list_suppressed_findings(&self) -> &::std::option::Option<bool> {
        &self.list_suppressed_findings
    }
    /// Consumes the builder and constructs a [`ListAuditFindingsInput`](crate::operation::list_audit_findings::ListAuditFindingsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_audit_findings::ListAuditFindingsInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::list_audit_findings::ListAuditFindingsInput {
            task_id: self.task_id,
            check_name: self.check_name,
            resource_identifier: self.resource_identifier,
            max_results: self.max_results,
            next_token: self.next_token,
            start_time: self.start_time,
            end_time: self.end_time,
            list_suppressed_findings: self.list_suppressed_findings,
        })
    }
}
