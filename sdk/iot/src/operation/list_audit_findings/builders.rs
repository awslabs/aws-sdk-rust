// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::list_audit_findings::_list_audit_findings_output::ListAuditFindingsOutputBuilder;

pub use crate::operation::list_audit_findings::_list_audit_findings_input::ListAuditFindingsInputBuilder;

/// Fluent builder constructing a request to `ListAuditFindings`.
///
/// <p>Lists the findings (results) of a Device Defender audit or of the audits performed during a specified time period. (Findings are retained for 90 days.)</p>
/// <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">ListAuditFindings</a> action.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListAuditFindingsFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::list_audit_findings::builders::ListAuditFindingsInputBuilder,
}
impl ListAuditFindingsFluentBuilder {
    /// Creates a new `ListAuditFindings`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::list_audit_findings::ListAuditFindings,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::list_audit_findings::ListAuditFindingsError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::list_audit_findings::ListAuditFindingsOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::list_audit_findings::ListAuditFindingsError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::list_audit_findings::paginator::ListAuditFindingsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(
        self,
    ) -> crate::operation::list_audit_findings::paginator::ListAuditFindingsPaginator {
        crate::operation::list_audit_findings::paginator::ListAuditFindingsPaginator::new(
            self.handle,
            self.inner,
        )
    }
    /// <p>A filter to limit results to the audit with the specified ID. You must specify either the taskId or the startTime and endTime, but not both.</p>
    pub fn task_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.task_id(input.into());
        self
    }
    /// <p>A filter to limit results to the audit with the specified ID. You must specify either the taskId or the startTime and endTime, but not both.</p>
    pub fn set_task_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_task_id(input);
        self
    }
    /// <p>A filter to limit results to the findings for the specified audit check.</p>
    pub fn check_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.check_name(input.into());
        self
    }
    /// <p>A filter to limit results to the findings for the specified audit check.</p>
    pub fn set_check_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_check_name(input);
        self
    }
    /// <p>Information identifying the noncompliant resource.</p>
    pub fn resource_identifier(mut self, input: crate::types::ResourceIdentifier) -> Self {
        self.inner = self.inner.resource_identifier(input);
        self
    }
    /// <p>Information identifying the noncompliant resource.</p>
    pub fn set_resource_identifier(
        mut self,
        input: std::option::Option<crate::types::ResourceIdentifier>,
    ) -> Self {
        self.inner = self.inner.set_resource_identifier(input);
        self
    }
    /// <p>The maximum number of results to return at one time. The default is 25.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of results to return at one time. The default is 25.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>The token for the next set of results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>The token for the next set of results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>A filter to limit results to those found after the specified time. You must specify either the startTime and endTime or the taskId, but not both.</p>
    pub fn start_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.start_time(input);
        self
    }
    /// <p>A filter to limit results to those found after the specified time. You must specify either the startTime and endTime or the taskId, but not both.</p>
    pub fn set_start_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_start_time(input);
        self
    }
    /// <p>A filter to limit results to those found before the specified time. You must specify either the startTime and endTime or the taskId, but not both.</p>
    pub fn end_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.end_time(input);
        self
    }
    /// <p>A filter to limit results to those found before the specified time. You must specify either the startTime and endTime or the taskId, but not both.</p>
    pub fn set_end_time(mut self, input: std::option::Option<aws_smithy_types::DateTime>) -> Self {
        self.inner = self.inner.set_end_time(input);
        self
    }
    /// <p> Boolean flag indicating whether only the suppressed findings or the unsuppressed findings should be listed. If this parameter isn't provided, the response will list both suppressed and unsuppressed findings. </p>
    pub fn list_suppressed_findings(mut self, input: bool) -> Self {
        self.inner = self.inner.list_suppressed_findings(input);
        self
    }
    /// <p> Boolean flag indicating whether only the suppressed findings or the unsuppressed findings should be listed. If this parameter isn't provided, the response will list both suppressed and unsuppressed findings. </p>
    pub fn set_list_suppressed_findings(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_list_suppressed_findings(input);
        self
    }
}
