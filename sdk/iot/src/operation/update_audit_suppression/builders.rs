// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_audit_suppression::_update_audit_suppression_output::UpdateAuditSuppressionOutputBuilder;

pub use crate::operation::update_audit_suppression::_update_audit_suppression_input::UpdateAuditSuppressionInputBuilder;

/// Fluent builder constructing a request to `UpdateAuditSuppression`.
///
/// <p> Updates a Device Defender audit suppression. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateAuditSuppressionFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_audit_suppression::builders::UpdateAuditSuppressionInputBuilder,
}
impl UpdateAuditSuppressionFluentBuilder {
    /// Creates a new `UpdateAuditSuppression`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::update_audit_suppression::UpdateAuditSuppression,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::update_audit_suppression::UpdateAuditSuppressionError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::update_audit_suppression::UpdateAuditSuppressionOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::update_audit_suppression::UpdateAuditSuppressionError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>An audit check name. Checks must be enabled for your account. (Use <code>DescribeAccountAuditConfiguration</code> to see the list of all checks, including those that are enabled or use <code>UpdateAccountAuditConfiguration</code> to select which checks are enabled.)</p>
    pub fn check_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.check_name(input.into());
        self
    }
    /// <p>An audit check name. Checks must be enabled for your account. (Use <code>DescribeAccountAuditConfiguration</code> to see the list of all checks, including those that are enabled or use <code>UpdateAccountAuditConfiguration</code> to select which checks are enabled.)</p>
    pub fn set_check_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_check_name(input);
        self
    }
    /// <p>Information that identifies the noncompliant resource.</p>
    pub fn resource_identifier(mut self, input: crate::types::ResourceIdentifier) -> Self {
        self.inner = self.inner.resource_identifier(input);
        self
    }
    /// <p>Information that identifies the noncompliant resource.</p>
    pub fn set_resource_identifier(
        mut self,
        input: std::option::Option<crate::types::ResourceIdentifier>,
    ) -> Self {
        self.inner = self.inner.set_resource_identifier(input);
        self
    }
    /// <p> The expiration date (epoch timestamp in seconds) that you want the suppression to adhere to. </p>
    pub fn expiration_date(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.expiration_date(input);
        self
    }
    /// <p> The expiration date (epoch timestamp in seconds) that you want the suppression to adhere to. </p>
    pub fn set_expiration_date(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_expiration_date(input);
        self
    }
    /// <p> Indicates whether a suppression should exist indefinitely or not. </p>
    pub fn suppress_indefinitely(mut self, input: bool) -> Self {
        self.inner = self.inner.suppress_indefinitely(input);
        self
    }
    /// <p> Indicates whether a suppression should exist indefinitely or not. </p>
    pub fn set_suppress_indefinitely(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_suppress_indefinitely(input);
        self
    }
    /// <p> The description of the audit suppression. </p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p> The description of the audit suppression. </p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
}
