// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateAuditSuppressionInput {
    /// <p>An audit check name. Checks must be enabled for your account. (Use <code>DescribeAccountAuditConfiguration</code> to see the list of all checks, including those that are enabled or use <code>UpdateAccountAuditConfiguration</code> to select which checks are enabled.)</p>
    #[doc(hidden)]
    pub check_name: std::option::Option<std::string::String>,
    /// <p>Information that identifies the noncompliant resource.</p>
    #[doc(hidden)]
    pub resource_identifier: std::option::Option<crate::types::ResourceIdentifier>,
    /// <p> The expiration date (epoch timestamp in seconds) that you want the suppression to adhere to. </p>
    #[doc(hidden)]
    pub expiration_date: std::option::Option<aws_smithy_types::DateTime>,
    /// <p> Indicates whether a suppression should exist indefinitely or not. </p>
    #[doc(hidden)]
    pub suppress_indefinitely: std::option::Option<bool>,
    /// <p> The description of the audit suppression. </p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
}
impl UpdateAuditSuppressionInput {
    /// <p>An audit check name. Checks must be enabled for your account. (Use <code>DescribeAccountAuditConfiguration</code> to see the list of all checks, including those that are enabled or use <code>UpdateAccountAuditConfiguration</code> to select which checks are enabled.)</p>
    pub fn check_name(&self) -> std::option::Option<&str> {
        self.check_name.as_deref()
    }
    /// <p>Information that identifies the noncompliant resource.</p>
    pub fn resource_identifier(&self) -> std::option::Option<&crate::types::ResourceIdentifier> {
        self.resource_identifier.as_ref()
    }
    /// <p> The expiration date (epoch timestamp in seconds) that you want the suppression to adhere to. </p>
    pub fn expiration_date(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.expiration_date.as_ref()
    }
    /// <p> Indicates whether a suppression should exist indefinitely or not. </p>
    pub fn suppress_indefinitely(&self) -> std::option::Option<bool> {
        self.suppress_indefinitely
    }
    /// <p> The description of the audit suppression. </p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
}
impl UpdateAuditSuppressionInput {
    /// Creates a new builder-style object to manufacture [`UpdateAuditSuppressionInput`](crate::operation::update_audit_suppression::UpdateAuditSuppressionInput).
    pub fn builder(
    ) -> crate::operation::update_audit_suppression::builders::UpdateAuditSuppressionInputBuilder
    {
        crate::operation::update_audit_suppression::builders::UpdateAuditSuppressionInputBuilder::default()
    }
}

/// A builder for [`UpdateAuditSuppressionInput`](crate::operation::update_audit_suppression::UpdateAuditSuppressionInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateAuditSuppressionInputBuilder {
    pub(crate) check_name: std::option::Option<std::string::String>,
    pub(crate) resource_identifier: std::option::Option<crate::types::ResourceIdentifier>,
    pub(crate) expiration_date: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) suppress_indefinitely: std::option::Option<bool>,
    pub(crate) description: std::option::Option<std::string::String>,
}
impl UpdateAuditSuppressionInputBuilder {
    /// <p>An audit check name. Checks must be enabled for your account. (Use <code>DescribeAccountAuditConfiguration</code> to see the list of all checks, including those that are enabled or use <code>UpdateAccountAuditConfiguration</code> to select which checks are enabled.)</p>
    pub fn check_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.check_name = Some(input.into());
        self
    }
    /// <p>An audit check name. Checks must be enabled for your account. (Use <code>DescribeAccountAuditConfiguration</code> to see the list of all checks, including those that are enabled or use <code>UpdateAccountAuditConfiguration</code> to select which checks are enabled.)</p>
    pub fn set_check_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.check_name = input;
        self
    }
    /// <p>Information that identifies the noncompliant resource.</p>
    pub fn resource_identifier(mut self, input: crate::types::ResourceIdentifier) -> Self {
        self.resource_identifier = Some(input);
        self
    }
    /// <p>Information that identifies the noncompliant resource.</p>
    pub fn set_resource_identifier(
        mut self,
        input: std::option::Option<crate::types::ResourceIdentifier>,
    ) -> Self {
        self.resource_identifier = input;
        self
    }
    /// <p> The expiration date (epoch timestamp in seconds) that you want the suppression to adhere to. </p>
    pub fn expiration_date(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.expiration_date = Some(input);
        self
    }
    /// <p> The expiration date (epoch timestamp in seconds) that you want the suppression to adhere to. </p>
    pub fn set_expiration_date(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.expiration_date = input;
        self
    }
    /// <p> Indicates whether a suppression should exist indefinitely or not. </p>
    pub fn suppress_indefinitely(mut self, input: bool) -> Self {
        self.suppress_indefinitely = Some(input);
        self
    }
    /// <p> Indicates whether a suppression should exist indefinitely or not. </p>
    pub fn set_suppress_indefinitely(mut self, input: std::option::Option<bool>) -> Self {
        self.suppress_indefinitely = input;
        self
    }
    /// <p> The description of the audit suppression. </p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p> The description of the audit suppression. </p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateAuditSuppressionInput`](crate::operation::update_audit_suppression::UpdateAuditSuppressionInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::update_audit_suppression::UpdateAuditSuppressionInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::update_audit_suppression::UpdateAuditSuppressionInput {
                check_name: self.check_name,
                resource_identifier: self.resource_identifier,
                expiration_date: self.expiration_date,
                suppress_indefinitely: self.suppress_indefinitely,
                description: self.description,
            },
        )
    }
}
