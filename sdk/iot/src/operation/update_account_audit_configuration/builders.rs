// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_account_audit_configuration::_update_account_audit_configuration_output::UpdateAccountAuditConfigurationOutputBuilder;

pub use crate::operation::update_account_audit_configuration::_update_account_audit_configuration_input::UpdateAccountAuditConfigurationInputBuilder;

/// Fluent builder constructing a request to `UpdateAccountAuditConfiguration`.
///
/// <p>Configures or reconfigures the Device Defender audit settings for this account. Settings include how audit notifications are sent and which audit checks are enabled or disabled.</p>
/// <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">UpdateAccountAuditConfiguration</a> action.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateAccountAuditConfigurationFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::update_account_audit_configuration::builders::UpdateAccountAuditConfigurationInputBuilder
            }
impl UpdateAccountAuditConfigurationFluentBuilder {
    /// Creates a new `UpdateAccountAuditConfiguration`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
                    pub async fn customize(self) -> std::result::Result<
                        crate::client::customize::CustomizableOperation<crate::operation::update_account_audit_configuration::UpdateAccountAuditConfiguration, aws_http::retry::AwsResponseRetryClassifier,>,
                        aws_smithy_http::result::SdkError<crate::operation::update_account_audit_configuration::UpdateAccountAuditConfigurationError>
    >{
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
                    pub async fn send(self) -> std::result::Result<crate::operation::update_account_audit_configuration::UpdateAccountAuditConfigurationOutput, aws_smithy_http::result::SdkError<crate::operation::update_account_audit_configuration::UpdateAccountAuditConfigurationError>>
                     {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The Amazon Resource Name (ARN) of the role that grants permission to IoT to access information about your devices, policies, certificates, and other items as required when performing an audit.</p>
    pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.role_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the role that grants permission to IoT to access information about your devices, policies, certificates, and other items as required when performing an audit.</p>
    pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_role_arn(input);
        self
    }
    /// Adds a key-value pair to `auditNotificationTargetConfigurations`.
    ///
    /// To override the contents of this collection use [`set_audit_notification_target_configurations`](Self::set_audit_notification_target_configurations).
    ///
    /// <p>Information about the targets to which audit notifications are sent.</p>
    pub fn audit_notification_target_configurations(
        mut self,
        k: crate::types::AuditNotificationType,
        v: crate::types::AuditNotificationTarget,
    ) -> Self {
        self.inner = self.inner.audit_notification_target_configurations(k, v);
        self
    }
    /// <p>Information about the targets to which audit notifications are sent.</p>
    pub fn set_audit_notification_target_configurations(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<
                crate::types::AuditNotificationType,
                crate::types::AuditNotificationTarget,
            >,
        >,
    ) -> Self {
        self.inner = self
            .inner
            .set_audit_notification_target_configurations(input);
        self
    }
    /// Adds a key-value pair to `auditCheckConfigurations`.
    ///
    /// To override the contents of this collection use [`set_audit_check_configurations`](Self::set_audit_check_configurations).
    ///
    /// <p>Specifies which audit checks are enabled and disabled for this account. Use <code>DescribeAccountAuditConfiguration</code> to see the list of all checks, including those that are currently enabled.</p>
    /// <p>Some data collection might start immediately when certain checks are enabled. When a check is disabled, any data collected so far in relation to the check is deleted.</p>
    /// <p>You cannot disable a check if it's used by any scheduled audit. You must first delete the check from the scheduled audit or delete the scheduled audit itself.</p>
    /// <p>On the first call to <code>UpdateAccountAuditConfiguration</code>, this parameter is required and must specify at least one enabled check.</p>
    pub fn audit_check_configurations(
        mut self,
        k: impl Into<std::string::String>,
        v: crate::types::AuditCheckConfiguration,
    ) -> Self {
        self.inner = self.inner.audit_check_configurations(k.into(), v);
        self
    }
    /// <p>Specifies which audit checks are enabled and disabled for this account. Use <code>DescribeAccountAuditConfiguration</code> to see the list of all checks, including those that are currently enabled.</p>
    /// <p>Some data collection might start immediately when certain checks are enabled. When a check is disabled, any data collected so far in relation to the check is deleted.</p>
    /// <p>You cannot disable a check if it's used by any scheduled audit. You must first delete the check from the scheduled audit or delete the scheduled audit itself.</p>
    /// <p>On the first call to <code>UpdateAccountAuditConfiguration</code>, this parameter is required and must specify at least one enabled check.</p>
    pub fn set_audit_check_configurations(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, crate::types::AuditCheckConfiguration>,
        >,
    ) -> Self {
        self.inner = self.inner.set_audit_check_configurations(input);
        self
    }
}
