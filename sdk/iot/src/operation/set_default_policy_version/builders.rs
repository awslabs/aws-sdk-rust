// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::set_default_policy_version::_set_default_policy_version_output::SetDefaultPolicyVersionOutputBuilder;

pub use crate::operation::set_default_policy_version::_set_default_policy_version_input::SetDefaultPolicyVersionInputBuilder;

impl crate::operation::set_default_policy_version::builders::SetDefaultPolicyVersionInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::set_default_policy_version::SetDefaultPolicyVersionOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::set_default_policy_version::SetDefaultPolicyVersionError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.set_default_policy_version();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `SetDefaultPolicyVersion`.
///
/// <p>Sets the specified version of the specified policy as the policy's default (operative) version. This action affects all certificates to which the policy is attached. To list the principals the policy is attached to, use the <code>ListPrincipalPolicies</code> action.</p>
/// <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">SetDefaultPolicyVersion</a> action.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct SetDefaultPolicyVersionFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::set_default_policy_version::builders::SetDefaultPolicyVersionInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::set_default_policy_version::SetDefaultPolicyVersionOutput,
        crate::operation::set_default_policy_version::SetDefaultPolicyVersionError,
    > for SetDefaultPolicyVersionFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::set_default_policy_version::SetDefaultPolicyVersionOutput,
            crate::operation::set_default_policy_version::SetDefaultPolicyVersionError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl SetDefaultPolicyVersionFluentBuilder {
    /// Creates a new `SetDefaultPolicyVersion`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the SetDefaultPolicyVersion as a reference.
    pub fn as_input(&self) -> &crate::operation::set_default_policy_version::builders::SetDefaultPolicyVersionInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::set_default_policy_version::SetDefaultPolicyVersionOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::set_default_policy_version::SetDefaultPolicyVersionError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::set_default_policy_version::SetDefaultPolicyVersion::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::set_default_policy_version::SetDefaultPolicyVersion::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::set_default_policy_version::SetDefaultPolicyVersionOutput,
        crate::operation::set_default_policy_version::SetDefaultPolicyVersionError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The policy name.</p>
    pub fn policy_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.policy_name(input.into());
        self
    }
    /// <p>The policy name.</p>
    pub fn set_policy_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_policy_name(input);
        self
    }
    /// <p>The policy name.</p>
    pub fn get_policy_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_policy_name()
    }
    /// <p>The policy version ID.</p>
    pub fn policy_version_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.policy_version_id(input.into());
        self
    }
    /// <p>The policy version ID.</p>
    pub fn set_policy_version_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_policy_version_id(input);
        self
    }
    /// <p>The policy version ID.</p>
    pub fn get_policy_version_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_policy_version_id()
    }
}
