// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The input for the ListTopicRules operation.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListTopicRulesInput {
    /// <p>The topic.</p>
    pub topic: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of results to return.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>Specifies whether the rule is disabled.</p>
    pub rule_disabled: ::std::option::Option<bool>,
}
impl ListTopicRulesInput {
    /// <p>The topic.</p>
    pub fn topic(&self) -> ::std::option::Option<&str> {
        self.topic.as_deref()
    }
    /// <p>The maximum number of results to return.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>Specifies whether the rule is disabled.</p>
    pub fn rule_disabled(&self) -> ::std::option::Option<bool> {
        self.rule_disabled
    }
}
impl ListTopicRulesInput {
    /// Creates a new builder-style object to manufacture [`ListTopicRulesInput`](crate::operation::list_topic_rules::ListTopicRulesInput).
    pub fn builder() -> crate::operation::list_topic_rules::builders::ListTopicRulesInputBuilder {
        crate::operation::list_topic_rules::builders::ListTopicRulesInputBuilder::default()
    }
}

/// A builder for [`ListTopicRulesInput`](crate::operation::list_topic_rules::ListTopicRulesInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListTopicRulesInputBuilder {
    pub(crate) topic: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) rule_disabled: ::std::option::Option<bool>,
}
impl ListTopicRulesInputBuilder {
    /// <p>The topic.</p>
    pub fn topic(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.topic = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The topic.</p>
    pub fn set_topic(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.topic = input;
        self
    }
    /// <p>The topic.</p>
    pub fn get_topic(&self) -> &::std::option::Option<::std::string::String> {
        &self.topic
    }
    /// <p>The maximum number of results to return.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of results to return.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of results to return.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>Specifies whether the rule is disabled.</p>
    pub fn rule_disabled(mut self, input: bool) -> Self {
        self.rule_disabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether the rule is disabled.</p>
    pub fn set_rule_disabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.rule_disabled = input;
        self
    }
    /// <p>Specifies whether the rule is disabled.</p>
    pub fn get_rule_disabled(&self) -> &::std::option::Option<bool> {
        &self.rule_disabled
    }
    /// Consumes the builder and constructs a [`ListTopicRulesInput`](crate::operation::list_topic_rules::ListTopicRulesInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_topic_rules::ListTopicRulesInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::list_topic_rules::ListTopicRulesInput {
            topic: self.topic,
            max_results: self.max_results,
            next_token: self.next_token,
            rule_disabled: self.rule_disabled,
        })
    }
}
