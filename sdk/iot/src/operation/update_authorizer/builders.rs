// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_authorizer::_update_authorizer_output::UpdateAuthorizerOutputBuilder;

pub use crate::operation::update_authorizer::_update_authorizer_input::UpdateAuthorizerInputBuilder;

/// Fluent builder constructing a request to `UpdateAuthorizer`.
///
/// <p>Updates an authorizer.</p>
/// <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">UpdateAuthorizer</a> action.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateAuthorizerFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_authorizer::builders::UpdateAuthorizerInputBuilder,
}
impl UpdateAuthorizerFluentBuilder {
    /// Creates a new `UpdateAuthorizer`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::update_authorizer::UpdateAuthorizer,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::update_authorizer::UpdateAuthorizerError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::update_authorizer::UpdateAuthorizerOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::update_authorizer::UpdateAuthorizerError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The authorizer name.</p>
    pub fn authorizer_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.authorizer_name(input.into());
        self
    }
    /// <p>The authorizer name.</p>
    pub fn set_authorizer_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_authorizer_name(input);
        self
    }
    /// <p>The ARN of the authorizer's Lambda function.</p>
    pub fn authorizer_function_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.authorizer_function_arn(input.into());
        self
    }
    /// <p>The ARN of the authorizer's Lambda function.</p>
    pub fn set_authorizer_function_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_authorizer_function_arn(input);
        self
    }
    /// <p>The key used to extract the token from the HTTP headers. </p>
    pub fn token_key_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.token_key_name(input.into());
        self
    }
    /// <p>The key used to extract the token from the HTTP headers. </p>
    pub fn set_token_key_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_token_key_name(input);
        self
    }
    /// Adds a key-value pair to `tokenSigningPublicKeys`.
    ///
    /// To override the contents of this collection use [`set_token_signing_public_keys`](Self::set_token_signing_public_keys).
    ///
    /// <p>The public keys used to verify the token signature.</p>
    pub fn token_signing_public_keys(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.token_signing_public_keys(k.into(), v.into());
        self
    }
    /// <p>The public keys used to verify the token signature.</p>
    pub fn set_token_signing_public_keys(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.inner = self.inner.set_token_signing_public_keys(input);
        self
    }
    /// <p>The status of the update authorizer request.</p>
    pub fn status(mut self, input: crate::types::AuthorizerStatus) -> Self {
        self.inner = self.inner.status(input);
        self
    }
    /// <p>The status of the update authorizer request.</p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::AuthorizerStatus>,
    ) -> Self {
        self.inner = self.inner.set_status(input);
        self
    }
    /// <p>When <code>true</code>, the result from the authorizer’s Lambda function is cached for the time specified in <code>refreshAfterInSeconds</code>. The cached result is used while the device reuses the same HTTP connection.</p>
    pub fn enable_caching_for_http(mut self, input: bool) -> Self {
        self.inner = self.inner.enable_caching_for_http(input);
        self
    }
    /// <p>When <code>true</code>, the result from the authorizer’s Lambda function is cached for the time specified in <code>refreshAfterInSeconds</code>. The cached result is used while the device reuses the same HTTP connection.</p>
    pub fn set_enable_caching_for_http(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_enable_caching_for_http(input);
        self
    }
}
