// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateProvisioningTemplateInput {
    /// <p>The name of the provisioning template.</p>
    pub template_name: ::std::option::Option<::std::string::String>,
    /// <p>The description of the provisioning template.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The JSON formatted contents of the provisioning template.</p>
    pub template_body: ::std::option::Option<::std::string::String>,
    /// <p>True to enable the provisioning template, otherwise false.</p>
    pub enabled: ::std::option::Option<bool>,
    /// <p>The role ARN for the role associated with the provisioning template. This IoT role grants permission to provision a device.</p>
    pub provisioning_role_arn: ::std::option::Option<::std::string::String>,
    /// <p>Creates a pre-provisioning hook template. Only supports template of type <code>FLEET_PROVISIONING</code>. For more information about provisioning template types, see <a href="https://docs.aws.amazon.com/iot/latest/apireference/API_CreateProvisioningTemplate.html#iot-CreateProvisioningTemplate-request-type">type</a>.</p>
    pub pre_provisioning_hook: ::std::option::Option<crate::types::ProvisioningHook>,
    /// <p>Metadata which can be used to manage the provisioning template.</p> <note>
    /// <p>For URI Request parameters use format: ...key1=value1&amp;key2=value2...</p>
    /// <p>For the CLI command-line parameter use format: &amp;&amp;tags "key1=value1&amp;key2=value2..."</p>
    /// <p>For the cli-input-json file use format: "tags": "key1=value1&amp;key2=value2..."</p>
    /// </note>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    /// <p>The type you define in a provisioning template. You can create a template with only one type. You can't change the template type after its creation. The default value is <code>FLEET_PROVISIONING</code>. For more information about provisioning template, see: <a href="https://docs.aws.amazon.com/iot/latest/developerguide/provision-template.html">Provisioning template</a>. </p>
    pub r#type: ::std::option::Option<crate::types::TemplateType>,
}
impl CreateProvisioningTemplateInput {
    /// <p>The name of the provisioning template.</p>
    pub fn template_name(&self) -> ::std::option::Option<&str> {
        self.template_name.as_deref()
    }
    /// <p>The description of the provisioning template.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The JSON formatted contents of the provisioning template.</p>
    pub fn template_body(&self) -> ::std::option::Option<&str> {
        self.template_body.as_deref()
    }
    /// <p>True to enable the provisioning template, otherwise false.</p>
    pub fn enabled(&self) -> ::std::option::Option<bool> {
        self.enabled
    }
    /// <p>The role ARN for the role associated with the provisioning template. This IoT role grants permission to provision a device.</p>
    pub fn provisioning_role_arn(&self) -> ::std::option::Option<&str> {
        self.provisioning_role_arn.as_deref()
    }
    /// <p>Creates a pre-provisioning hook template. Only supports template of type <code>FLEET_PROVISIONING</code>. For more information about provisioning template types, see <a href="https://docs.aws.amazon.com/iot/latest/apireference/API_CreateProvisioningTemplate.html#iot-CreateProvisioningTemplate-request-type">type</a>.</p>
    pub fn pre_provisioning_hook(&self) -> ::std::option::Option<&crate::types::ProvisioningHook> {
        self.pre_provisioning_hook.as_ref()
    }
    /// <p>Metadata which can be used to manage the provisioning template.</p> <note>
    /// <p>For URI Request parameters use format: ...key1=value1&amp;key2=value2...</p>
    /// <p>For the CLI command-line parameter use format: &amp;&amp;tags "key1=value1&amp;key2=value2..."</p>
    /// <p>For the cli-input-json file use format: "tags": "key1=value1&amp;key2=value2..."</p>
    /// </note>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
    /// <p>The type you define in a provisioning template. You can create a template with only one type. You can't change the template type after its creation. The default value is <code>FLEET_PROVISIONING</code>. For more information about provisioning template, see: <a href="https://docs.aws.amazon.com/iot/latest/developerguide/provision-template.html">Provisioning template</a>. </p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::TemplateType> {
        self.r#type.as_ref()
    }
}
impl CreateProvisioningTemplateInput {
    /// Creates a new builder-style object to manufacture [`CreateProvisioningTemplateInput`](crate::operation::create_provisioning_template::CreateProvisioningTemplateInput).
    pub fn builder() -> crate::operation::create_provisioning_template::builders::CreateProvisioningTemplateInputBuilder {
        crate::operation::create_provisioning_template::builders::CreateProvisioningTemplateInputBuilder::default()
    }
}

/// A builder for [`CreateProvisioningTemplateInput`](crate::operation::create_provisioning_template::CreateProvisioningTemplateInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateProvisioningTemplateInputBuilder {
    pub(crate) template_name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) template_body: ::std::option::Option<::std::string::String>,
    pub(crate) enabled: ::std::option::Option<bool>,
    pub(crate) provisioning_role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) pre_provisioning_hook: ::std::option::Option<crate::types::ProvisioningHook>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    pub(crate) r#type: ::std::option::Option<crate::types::TemplateType>,
}
impl CreateProvisioningTemplateInputBuilder {
    /// <p>The name of the provisioning template.</p>
    /// This field is required.
    pub fn template_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.template_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the provisioning template.</p>
    pub fn set_template_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.template_name = input;
        self
    }
    /// <p>The name of the provisioning template.</p>
    pub fn get_template_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.template_name
    }
    /// <p>The description of the provisioning template.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the provisioning template.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the provisioning template.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The JSON formatted contents of the provisioning template.</p>
    /// This field is required.
    pub fn template_body(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.template_body = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The JSON formatted contents of the provisioning template.</p>
    pub fn set_template_body(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.template_body = input;
        self
    }
    /// <p>The JSON formatted contents of the provisioning template.</p>
    pub fn get_template_body(&self) -> &::std::option::Option<::std::string::String> {
        &self.template_body
    }
    /// <p>True to enable the provisioning template, otherwise false.</p>
    pub fn enabled(mut self, input: bool) -> Self {
        self.enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>True to enable the provisioning template, otherwise false.</p>
    pub fn set_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.enabled = input;
        self
    }
    /// <p>True to enable the provisioning template, otherwise false.</p>
    pub fn get_enabled(&self) -> &::std::option::Option<bool> {
        &self.enabled
    }
    /// <p>The role ARN for the role associated with the provisioning template. This IoT role grants permission to provision a device.</p>
    /// This field is required.
    pub fn provisioning_role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.provisioning_role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The role ARN for the role associated with the provisioning template. This IoT role grants permission to provision a device.</p>
    pub fn set_provisioning_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.provisioning_role_arn = input;
        self
    }
    /// <p>The role ARN for the role associated with the provisioning template. This IoT role grants permission to provision a device.</p>
    pub fn get_provisioning_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.provisioning_role_arn
    }
    /// <p>Creates a pre-provisioning hook template. Only supports template of type <code>FLEET_PROVISIONING</code>. For more information about provisioning template types, see <a href="https://docs.aws.amazon.com/iot/latest/apireference/API_CreateProvisioningTemplate.html#iot-CreateProvisioningTemplate-request-type">type</a>.</p>
    pub fn pre_provisioning_hook(mut self, input: crate::types::ProvisioningHook) -> Self {
        self.pre_provisioning_hook = ::std::option::Option::Some(input);
        self
    }
    /// <p>Creates a pre-provisioning hook template. Only supports template of type <code>FLEET_PROVISIONING</code>. For more information about provisioning template types, see <a href="https://docs.aws.amazon.com/iot/latest/apireference/API_CreateProvisioningTemplate.html#iot-CreateProvisioningTemplate-request-type">type</a>.</p>
    pub fn set_pre_provisioning_hook(mut self, input: ::std::option::Option<crate::types::ProvisioningHook>) -> Self {
        self.pre_provisioning_hook = input;
        self
    }
    /// <p>Creates a pre-provisioning hook template. Only supports template of type <code>FLEET_PROVISIONING</code>. For more information about provisioning template types, see <a href="https://docs.aws.amazon.com/iot/latest/apireference/API_CreateProvisioningTemplate.html#iot-CreateProvisioningTemplate-request-type">type</a>.</p>
    pub fn get_pre_provisioning_hook(&self) -> &::std::option::Option<crate::types::ProvisioningHook> {
        &self.pre_provisioning_hook
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Metadata which can be used to manage the provisioning template.</p> <note>
    /// <p>For URI Request parameters use format: ...key1=value1&amp;key2=value2...</p>
    /// <p>For the CLI command-line parameter use format: &amp;&amp;tags "key1=value1&amp;key2=value2..."</p>
    /// <p>For the cli-input-json file use format: "tags": "key1=value1&amp;key2=value2..."</p>
    /// </note>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>Metadata which can be used to manage the provisioning template.</p> <note>
    /// <p>For URI Request parameters use format: ...key1=value1&amp;key2=value2...</p>
    /// <p>For the CLI command-line parameter use format: &amp;&amp;tags "key1=value1&amp;key2=value2..."</p>
    /// <p>For the cli-input-json file use format: "tags": "key1=value1&amp;key2=value2..."</p>
    /// </note>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>Metadata which can be used to manage the provisioning template.</p> <note>
    /// <p>For URI Request parameters use format: ...key1=value1&amp;key2=value2...</p>
    /// <p>For the CLI command-line parameter use format: &amp;&amp;tags "key1=value1&amp;key2=value2..."</p>
    /// <p>For the cli-input-json file use format: "tags": "key1=value1&amp;key2=value2..."</p>
    /// </note>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// <p>The type you define in a provisioning template. You can create a template with only one type. You can't change the template type after its creation. The default value is <code>FLEET_PROVISIONING</code>. For more information about provisioning template, see: <a href="https://docs.aws.amazon.com/iot/latest/developerguide/provision-template.html">Provisioning template</a>. </p>
    pub fn r#type(mut self, input: crate::types::TemplateType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type you define in a provisioning template. You can create a template with only one type. You can't change the template type after its creation. The default value is <code>FLEET_PROVISIONING</code>. For more information about provisioning template, see: <a href="https://docs.aws.amazon.com/iot/latest/developerguide/provision-template.html">Provisioning template</a>. </p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::TemplateType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type you define in a provisioning template. You can create a template with only one type. You can't change the template type after its creation. The default value is <code>FLEET_PROVISIONING</code>. For more information about provisioning template, see: <a href="https://docs.aws.amazon.com/iot/latest/developerguide/provision-template.html">Provisioning template</a>. </p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::TemplateType> {
        &self.r#type
    }
    /// Consumes the builder and constructs a [`CreateProvisioningTemplateInput`](crate::operation::create_provisioning_template::CreateProvisioningTemplateInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_provisioning_template::CreateProvisioningTemplateInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::create_provisioning_template::CreateProvisioningTemplateInput {
            template_name: self.template_name,
            description: self.description,
            template_body: self.template_body,
            enabled: self.enabled,
            provisioning_role_arn: self.provisioning_role_arn,
            pre_provisioning_hook: self.pre_provisioning_hook,
            tags: self.tags,
            r#type: self.r#type,
        })
    }
}
