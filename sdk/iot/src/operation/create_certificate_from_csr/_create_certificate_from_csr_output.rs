// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The output from the CreateCertificateFromCsr operation.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateCertificateFromCsrOutput {
    /// <p>The Amazon Resource Name (ARN) of the certificate. You can use the ARN as a principal for policy operations.</p>
    #[doc(hidden)]
    pub certificate_arn: std::option::Option<std::string::String>,
    /// <p>The ID of the certificate. Certificate management operations only take a certificateId.</p>
    #[doc(hidden)]
    pub certificate_id: std::option::Option<std::string::String>,
    /// <p>The certificate data, in PEM format.</p>
    #[doc(hidden)]
    pub certificate_pem: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl CreateCertificateFromCsrOutput {
    /// <p>The Amazon Resource Name (ARN) of the certificate. You can use the ARN as a principal for policy operations.</p>
    pub fn certificate_arn(&self) -> std::option::Option<&str> {
        self.certificate_arn.as_deref()
    }
    /// <p>The ID of the certificate. Certificate management operations only take a certificateId.</p>
    pub fn certificate_id(&self) -> std::option::Option<&str> {
        self.certificate_id.as_deref()
    }
    /// <p>The certificate data, in PEM format.</p>
    pub fn certificate_pem(&self) -> std::option::Option<&str> {
        self.certificate_pem.as_deref()
    }
}
impl aws_http::request_id::RequestId for CreateCertificateFromCsrOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateCertificateFromCsrOutput {
    /// Creates a new builder-style object to manufacture [`CreateCertificateFromCsrOutput`](crate::operation::create_certificate_from_csr::CreateCertificateFromCsrOutput).
    pub fn builder() -> crate::operation::create_certificate_from_csr::builders::CreateCertificateFromCsrOutputBuilder{
        crate::operation::create_certificate_from_csr::builders::CreateCertificateFromCsrOutputBuilder::default()
    }
}

/// A builder for [`CreateCertificateFromCsrOutput`](crate::operation::create_certificate_from_csr::CreateCertificateFromCsrOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateCertificateFromCsrOutputBuilder {
    pub(crate) certificate_arn: std::option::Option<std::string::String>,
    pub(crate) certificate_id: std::option::Option<std::string::String>,
    pub(crate) certificate_pem: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl CreateCertificateFromCsrOutputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the certificate. You can use the ARN as a principal for policy operations.</p>
    pub fn certificate_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.certificate_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the certificate. You can use the ARN as a principal for policy operations.</p>
    pub fn set_certificate_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.certificate_arn = input;
        self
    }
    /// <p>The ID of the certificate. Certificate management operations only take a certificateId.</p>
    pub fn certificate_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.certificate_id = Some(input.into());
        self
    }
    /// <p>The ID of the certificate. Certificate management operations only take a certificateId.</p>
    pub fn set_certificate_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.certificate_id = input;
        self
    }
    /// <p>The certificate data, in PEM format.</p>
    pub fn certificate_pem(mut self, input: impl Into<std::string::String>) -> Self {
        self.certificate_pem = Some(input.into());
        self
    }
    /// <p>The certificate data, in PEM format.</p>
    pub fn set_certificate_pem(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.certificate_pem = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`CreateCertificateFromCsrOutput`](crate::operation::create_certificate_from_csr::CreateCertificateFromCsrOutput).
    pub fn build(
        self,
    ) -> crate::operation::create_certificate_from_csr::CreateCertificateFromCsrOutput {
        crate::operation::create_certificate_from_csr::CreateCertificateFromCsrOutput {
            certificate_arn: self.certificate_arn,
            certificate_id: self.certificate_id,
            certificate_pem: self.certificate_pem,
            _request_id: self._request_id,
        }
    }
}
