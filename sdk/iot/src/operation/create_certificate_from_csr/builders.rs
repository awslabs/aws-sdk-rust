// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_certificate_from_csr::_create_certificate_from_csr_output::CreateCertificateFromCsrOutputBuilder;

pub use crate::operation::create_certificate_from_csr::_create_certificate_from_csr_input::CreateCertificateFromCsrInputBuilder;

/// Fluent builder constructing a request to `CreateCertificateFromCsr`.
///
/// <p>Creates an X.509 certificate using the specified certificate signing request.</p>
/// <p> <b>Note:</b> The CSR must include a public key that is either an RSA key with a length of at least 2048 bits or an ECC key from NIST P-256, NIST P-384, or NIST P-512 curves. For supported certificates, consult <a href="https://docs.aws.amazon.com/iot/latest/developerguide/x509-client-certs.html#x509-cert-algorithms"> Certificate signing algorithms supported by IoT</a>.</p>
/// <p> <b>Note:</b> Reusing the same certificate signing request (CSR) results in a distinct certificate.</p>
/// <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">CreateCertificateFromCsr</a> action.</p>
/// <p>You can create multiple certificates in a batch by creating a directory, copying multiple .csr files into that directory, and then specifying that directory on the command line. The following commands show how to create a batch of certificates given a batch of CSRs.</p>
/// <p>Assuming a set of CSRs are located inside of the directory my-csr-directory:</p>
/// <p>On Linux and OS X, the command is:</p>
/// <p>$ ls my-csr-directory/ | xargs -I {} aws iot create-certificate-from-csr --certificate-signing-request file://my-csr-directory/{}</p>
/// <p>This command lists all of the CSRs in my-csr-directory and pipes each CSR file name to the aws iot create-certificate-from-csr Amazon Web Services CLI command to create a certificate for the corresponding CSR.</p>
/// <p>The aws iot create-certificate-from-csr part of the command can also be run in parallel to speed up the certificate creation process:</p>
/// <p>$ ls my-csr-directory/ | xargs -P 10 -I {} aws iot create-certificate-from-csr --certificate-signing-request file://my-csr-directory/{}</p>
/// <p>On Windows PowerShell, the command to create certificates for all CSRs in my-csr-directory is:</p>
/// <p>&gt; ls -Name my-csr-directory | %{aws iot create-certificate-from-csr --certificate-signing-request file://my-csr-directory/$_}</p>
/// <p>On a Windows command prompt, the command to create certificates for all CSRs in my-csr-directory is:</p>
/// <p>&gt; forfiles /p my-csr-directory /c "cmd /c aws iot create-certificate-from-csr --certificate-signing-request file://@path"</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateCertificateFromCsrFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::create_certificate_from_csr::builders::CreateCertificateFromCsrInputBuilder
            }
impl CreateCertificateFromCsrFluentBuilder {
    /// Creates a new `CreateCertificateFromCsr`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::create_certificate_from_csr::CreateCertificateFromCsr,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::create_certificate_from_csr::CreateCertificateFromCsrError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::create_certificate_from_csr::CreateCertificateFromCsrOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::create_certificate_from_csr::CreateCertificateFromCsrError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The certificate signing request (CSR).</p>
    pub fn certificate_signing_request(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.certificate_signing_request(input.into());
        self
    }
    /// <p>The certificate signing request (CSR).</p>
    pub fn set_certificate_signing_request(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_certificate_signing_request(input);
        self
    }
    /// <p>Specifies whether the certificate is active.</p>
    pub fn set_as_active(mut self, input: bool) -> Self {
        self.inner = self.inner.set_as_active(input);
        self
    }
    /// <p>Specifies whether the certificate is active.</p>
    pub fn set_set_as_active(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_set_as_active(input);
        self
    }
}
