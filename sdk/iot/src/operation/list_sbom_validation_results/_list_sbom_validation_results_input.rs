// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListSbomValidationResultsInput {
    /// <p>The name of the new software package.</p>
    pub package_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of the new package version.</p>
    pub version_name: ::std::option::Option<::std::string::String>,
    /// <p>The end result of the</p>
    pub validation_result: ::std::option::Option<crate::types::SbomValidationResult>,
    /// <p>The maximum number of results to return at one time.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>A token that can be used to retrieve the next set of results, or null if there are no additional results.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
}
impl ListSbomValidationResultsInput {
    /// <p>The name of the new software package.</p>
    pub fn package_name(&self) -> ::std::option::Option<&str> {
        self.package_name.as_deref()
    }
    /// <p>The name of the new package version.</p>
    pub fn version_name(&self) -> ::std::option::Option<&str> {
        self.version_name.as_deref()
    }
    /// <p>The end result of the</p>
    pub fn validation_result(&self) -> ::std::option::Option<&crate::types::SbomValidationResult> {
        self.validation_result.as_ref()
    }
    /// <p>The maximum number of results to return at one time.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>A token that can be used to retrieve the next set of results, or null if there are no additional results.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ListSbomValidationResultsInput {
    /// Creates a new builder-style object to manufacture [`ListSbomValidationResultsInput`](crate::operation::list_sbom_validation_results::ListSbomValidationResultsInput).
    pub fn builder() -> crate::operation::list_sbom_validation_results::builders::ListSbomValidationResultsInputBuilder {
        crate::operation::list_sbom_validation_results::builders::ListSbomValidationResultsInputBuilder::default()
    }
}

/// A builder for [`ListSbomValidationResultsInput`](crate::operation::list_sbom_validation_results::ListSbomValidationResultsInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListSbomValidationResultsInputBuilder {
    pub(crate) package_name: ::std::option::Option<::std::string::String>,
    pub(crate) version_name: ::std::option::Option<::std::string::String>,
    pub(crate) validation_result: ::std::option::Option<crate::types::SbomValidationResult>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
}
impl ListSbomValidationResultsInputBuilder {
    /// <p>The name of the new software package.</p>
    /// This field is required.
    pub fn package_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.package_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the new software package.</p>
    pub fn set_package_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.package_name = input;
        self
    }
    /// <p>The name of the new software package.</p>
    pub fn get_package_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.package_name
    }
    /// <p>The name of the new package version.</p>
    /// This field is required.
    pub fn version_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.version_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the new package version.</p>
    pub fn set_version_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.version_name = input;
        self
    }
    /// <p>The name of the new package version.</p>
    pub fn get_version_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.version_name
    }
    /// <p>The end result of the</p>
    pub fn validation_result(mut self, input: crate::types::SbomValidationResult) -> Self {
        self.validation_result = ::std::option::Option::Some(input);
        self
    }
    /// <p>The end result of the</p>
    pub fn set_validation_result(mut self, input: ::std::option::Option<crate::types::SbomValidationResult>) -> Self {
        self.validation_result = input;
        self
    }
    /// <p>The end result of the</p>
    pub fn get_validation_result(&self) -> &::std::option::Option<crate::types::SbomValidationResult> {
        &self.validation_result
    }
    /// <p>The maximum number of results to return at one time.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of results to return at one time.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of results to return at one time.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>A token that can be used to retrieve the next set of results, or null if there are no additional results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A token that can be used to retrieve the next set of results, or null if there are no additional results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>A token that can be used to retrieve the next set of results, or null if there are no additional results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Consumes the builder and constructs a [`ListSbomValidationResultsInput`](crate::operation::list_sbom_validation_results::ListSbomValidationResultsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_sbom_validation_results::ListSbomValidationResultsInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::list_sbom_validation_results::ListSbomValidationResultsInput {
            package_name: self.package_name,
            version_name: self.version_name,
            validation_result: self.validation_result,
            max_results: self.max_results,
            next_token: self.next_token,
        })
    }
}
