// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TestInvokeAuthorizerInput {
    /// <p>The custom authorizer name.</p>
    pub authorizer_name: ::std::option::Option<::std::string::String>,
    /// <p>The token returned by your custom authentication service.</p>
    pub token: ::std::option::Option<::std::string::String>,
    /// <p>The signature made with the token and your custom authentication service's private key. This value must be Base-64-encoded.</p>
    pub token_signature: ::std::option::Option<::std::string::String>,
    /// <p>Specifies a test HTTP authorization request.</p>
    pub http_context: ::std::option::Option<crate::types::HttpContext>,
    /// <p>Specifies a test MQTT authorization request.</p>
    pub mqtt_context: ::std::option::Option<crate::types::MqttContext>,
    /// <p>Specifies a test TLS authorization request.</p>
    pub tls_context: ::std::option::Option<crate::types::TlsContext>,
}
impl TestInvokeAuthorizerInput {
    /// <p>The custom authorizer name.</p>
    pub fn authorizer_name(&self) -> ::std::option::Option<&str> {
        self.authorizer_name.as_deref()
    }
    /// <p>The token returned by your custom authentication service.</p>
    pub fn token(&self) -> ::std::option::Option<&str> {
        self.token.as_deref()
    }
    /// <p>The signature made with the token and your custom authentication service's private key. This value must be Base-64-encoded.</p>
    pub fn token_signature(&self) -> ::std::option::Option<&str> {
        self.token_signature.as_deref()
    }
    /// <p>Specifies a test HTTP authorization request.</p>
    pub fn http_context(&self) -> ::std::option::Option<&crate::types::HttpContext> {
        self.http_context.as_ref()
    }
    /// <p>Specifies a test MQTT authorization request.</p>
    pub fn mqtt_context(&self) -> ::std::option::Option<&crate::types::MqttContext> {
        self.mqtt_context.as_ref()
    }
    /// <p>Specifies a test TLS authorization request.</p>
    pub fn tls_context(&self) -> ::std::option::Option<&crate::types::TlsContext> {
        self.tls_context.as_ref()
    }
}
impl TestInvokeAuthorizerInput {
    /// Creates a new builder-style object to manufacture [`TestInvokeAuthorizerInput`](crate::operation::test_invoke_authorizer::TestInvokeAuthorizerInput).
    pub fn builder() -> crate::operation::test_invoke_authorizer::builders::TestInvokeAuthorizerInputBuilder {
        crate::operation::test_invoke_authorizer::builders::TestInvokeAuthorizerInputBuilder::default()
    }
}

/// A builder for [`TestInvokeAuthorizerInput`](crate::operation::test_invoke_authorizer::TestInvokeAuthorizerInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct TestInvokeAuthorizerInputBuilder {
    pub(crate) authorizer_name: ::std::option::Option<::std::string::String>,
    pub(crate) token: ::std::option::Option<::std::string::String>,
    pub(crate) token_signature: ::std::option::Option<::std::string::String>,
    pub(crate) http_context: ::std::option::Option<crate::types::HttpContext>,
    pub(crate) mqtt_context: ::std::option::Option<crate::types::MqttContext>,
    pub(crate) tls_context: ::std::option::Option<crate::types::TlsContext>,
}
impl TestInvokeAuthorizerInputBuilder {
    /// <p>The custom authorizer name.</p>
    /// This field is required.
    pub fn authorizer_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.authorizer_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The custom authorizer name.</p>
    pub fn set_authorizer_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.authorizer_name = input;
        self
    }
    /// <p>The custom authorizer name.</p>
    pub fn get_authorizer_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.authorizer_name
    }
    /// <p>The token returned by your custom authentication service.</p>
    pub fn token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The token returned by your custom authentication service.</p>
    pub fn set_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.token = input;
        self
    }
    /// <p>The token returned by your custom authentication service.</p>
    pub fn get_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.token
    }
    /// <p>The signature made with the token and your custom authentication service's private key. This value must be Base-64-encoded.</p>
    pub fn token_signature(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.token_signature = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The signature made with the token and your custom authentication service's private key. This value must be Base-64-encoded.</p>
    pub fn set_token_signature(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.token_signature = input;
        self
    }
    /// <p>The signature made with the token and your custom authentication service's private key. This value must be Base-64-encoded.</p>
    pub fn get_token_signature(&self) -> &::std::option::Option<::std::string::String> {
        &self.token_signature
    }
    /// <p>Specifies a test HTTP authorization request.</p>
    pub fn http_context(mut self, input: crate::types::HttpContext) -> Self {
        self.http_context = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies a test HTTP authorization request.</p>
    pub fn set_http_context(mut self, input: ::std::option::Option<crate::types::HttpContext>) -> Self {
        self.http_context = input;
        self
    }
    /// <p>Specifies a test HTTP authorization request.</p>
    pub fn get_http_context(&self) -> &::std::option::Option<crate::types::HttpContext> {
        &self.http_context
    }
    /// <p>Specifies a test MQTT authorization request.</p>
    pub fn mqtt_context(mut self, input: crate::types::MqttContext) -> Self {
        self.mqtt_context = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies a test MQTT authorization request.</p>
    pub fn set_mqtt_context(mut self, input: ::std::option::Option<crate::types::MqttContext>) -> Self {
        self.mqtt_context = input;
        self
    }
    /// <p>Specifies a test MQTT authorization request.</p>
    pub fn get_mqtt_context(&self) -> &::std::option::Option<crate::types::MqttContext> {
        &self.mqtt_context
    }
    /// <p>Specifies a test TLS authorization request.</p>
    pub fn tls_context(mut self, input: crate::types::TlsContext) -> Self {
        self.tls_context = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies a test TLS authorization request.</p>
    pub fn set_tls_context(mut self, input: ::std::option::Option<crate::types::TlsContext>) -> Self {
        self.tls_context = input;
        self
    }
    /// <p>Specifies a test TLS authorization request.</p>
    pub fn get_tls_context(&self) -> &::std::option::Option<crate::types::TlsContext> {
        &self.tls_context
    }
    /// Consumes the builder and constructs a [`TestInvokeAuthorizerInput`](crate::operation::test_invoke_authorizer::TestInvokeAuthorizerInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::test_invoke_authorizer::TestInvokeAuthorizerInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::test_invoke_authorizer::TestInvokeAuthorizerInput {
            authorizer_name: self.authorizer_name,
            token: self.token,
            token_signature: self.token_signature,
            http_context: self.http_context,
            mqtt_context: self.mqtt_context,
            tls_context: self.tls_context,
        })
    }
}
