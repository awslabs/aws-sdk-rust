// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListAuthorizersInput {
    /// <p>The maximum number of results to return at one time.</p>
    #[doc(hidden)]
    pub page_size: std::option::Option<i32>,
    /// <p>A marker used to get the next set of results.</p>
    #[doc(hidden)]
    pub marker: std::option::Option<std::string::String>,
    /// <p>Return the list of authorizers in ascending alphabetical order.</p>
    #[doc(hidden)]
    pub ascending_order: bool,
    /// <p>The status of the list authorizers request.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::AuthorizerStatus>,
}
impl ListAuthorizersInput {
    /// <p>The maximum number of results to return at one time.</p>
    pub fn page_size(&self) -> std::option::Option<i32> {
        self.page_size
    }
    /// <p>A marker used to get the next set of results.</p>
    pub fn marker(&self) -> std::option::Option<&str> {
        self.marker.as_deref()
    }
    /// <p>Return the list of authorizers in ascending alphabetical order.</p>
    pub fn ascending_order(&self) -> bool {
        self.ascending_order
    }
    /// <p>The status of the list authorizers request.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::AuthorizerStatus> {
        self.status.as_ref()
    }
}
impl ListAuthorizersInput {
    /// Creates a new builder-style object to manufacture [`ListAuthorizersInput`](crate::operation::list_authorizers::ListAuthorizersInput).
    pub fn builder() -> crate::operation::list_authorizers::builders::ListAuthorizersInputBuilder {
        crate::operation::list_authorizers::builders::ListAuthorizersInputBuilder::default()
    }
}

/// A builder for [`ListAuthorizersInput`](crate::operation::list_authorizers::ListAuthorizersInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListAuthorizersInputBuilder {
    pub(crate) page_size: std::option::Option<i32>,
    pub(crate) marker: std::option::Option<std::string::String>,
    pub(crate) ascending_order: std::option::Option<bool>,
    pub(crate) status: std::option::Option<crate::types::AuthorizerStatus>,
}
impl ListAuthorizersInputBuilder {
    /// <p>The maximum number of results to return at one time.</p>
    pub fn page_size(mut self, input: i32) -> Self {
        self.page_size = Some(input);
        self
    }
    /// <p>The maximum number of results to return at one time.</p>
    pub fn set_page_size(mut self, input: std::option::Option<i32>) -> Self {
        self.page_size = input;
        self
    }
    /// <p>A marker used to get the next set of results.</p>
    pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
        self.marker = Some(input.into());
        self
    }
    /// <p>A marker used to get the next set of results.</p>
    pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.marker = input;
        self
    }
    /// <p>Return the list of authorizers in ascending alphabetical order.</p>
    pub fn ascending_order(mut self, input: bool) -> Self {
        self.ascending_order = Some(input);
        self
    }
    /// <p>Return the list of authorizers in ascending alphabetical order.</p>
    pub fn set_ascending_order(mut self, input: std::option::Option<bool>) -> Self {
        self.ascending_order = input;
        self
    }
    /// <p>The status of the list authorizers request.</p>
    pub fn status(mut self, input: crate::types::AuthorizerStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The status of the list authorizers request.</p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::AuthorizerStatus>,
    ) -> Self {
        self.status = input;
        self
    }
    /// Consumes the builder and constructs a [`ListAuthorizersInput`](crate::operation::list_authorizers::ListAuthorizersInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::list_authorizers::ListAuthorizersInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::list_authorizers::ListAuthorizersInput {
            page_size: self.page_size,
            marker: self.marker,
            ascending_order: self.ascending_order.unwrap_or_default(),
            status: self.status,
        })
    }
}
