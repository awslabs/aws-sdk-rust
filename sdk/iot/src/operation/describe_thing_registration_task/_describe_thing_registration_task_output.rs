// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeThingRegistrationTaskOutput {
    /// <p>The task ID.</p>
    #[doc(hidden)]
    pub task_id: std::option::Option<std::string::String>,
    /// <p>The task creation date.</p>
    #[doc(hidden)]
    pub creation_date: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The date when the task was last modified.</p>
    #[doc(hidden)]
    pub last_modified_date: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The task's template.</p>
    #[doc(hidden)]
    pub template_body: std::option::Option<std::string::String>,
    /// <p>The S3 bucket that contains the input file.</p>
    #[doc(hidden)]
    pub input_file_bucket: std::option::Option<std::string::String>,
    /// <p>The input file key.</p>
    #[doc(hidden)]
    pub input_file_key: std::option::Option<std::string::String>,
    /// <p>The role ARN that grants access to the input file bucket.</p>
    #[doc(hidden)]
    pub role_arn: std::option::Option<std::string::String>,
    /// <p>The status of the bulk thing provisioning task.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::Status>,
    /// <p>The message.</p>
    #[doc(hidden)]
    pub message: std::option::Option<std::string::String>,
    /// <p>The number of things successfully provisioned.</p>
    #[doc(hidden)]
    pub success_count: i32,
    /// <p>The number of things that failed to be provisioned.</p>
    #[doc(hidden)]
    pub failure_count: i32,
    /// <p>The progress of the bulk provisioning task expressed as a percentage.</p>
    #[doc(hidden)]
    pub percentage_progress: i32,
    _request_id: Option<String>,
}
impl DescribeThingRegistrationTaskOutput {
    /// <p>The task ID.</p>
    pub fn task_id(&self) -> std::option::Option<&str> {
        self.task_id.as_deref()
    }
    /// <p>The task creation date.</p>
    pub fn creation_date(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_date.as_ref()
    }
    /// <p>The date when the task was last modified.</p>
    pub fn last_modified_date(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_modified_date.as_ref()
    }
    /// <p>The task's template.</p>
    pub fn template_body(&self) -> std::option::Option<&str> {
        self.template_body.as_deref()
    }
    /// <p>The S3 bucket that contains the input file.</p>
    pub fn input_file_bucket(&self) -> std::option::Option<&str> {
        self.input_file_bucket.as_deref()
    }
    /// <p>The input file key.</p>
    pub fn input_file_key(&self) -> std::option::Option<&str> {
        self.input_file_key.as_deref()
    }
    /// <p>The role ARN that grants access to the input file bucket.</p>
    pub fn role_arn(&self) -> std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>The status of the bulk thing provisioning task.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::Status> {
        self.status.as_ref()
    }
    /// <p>The message.</p>
    pub fn message(&self) -> std::option::Option<&str> {
        self.message.as_deref()
    }
    /// <p>The number of things successfully provisioned.</p>
    pub fn success_count(&self) -> i32 {
        self.success_count
    }
    /// <p>The number of things that failed to be provisioned.</p>
    pub fn failure_count(&self) -> i32 {
        self.failure_count
    }
    /// <p>The progress of the bulk provisioning task expressed as a percentage.</p>
    pub fn percentage_progress(&self) -> i32 {
        self.percentage_progress
    }
}
impl aws_http::request_id::RequestId for DescribeThingRegistrationTaskOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeThingRegistrationTaskOutput {
    /// Creates a new builder-style object to manufacture [`DescribeThingRegistrationTaskOutput`](crate::operation::describe_thing_registration_task::DescribeThingRegistrationTaskOutput).
    pub fn builder() -> crate::operation::describe_thing_registration_task::builders::DescribeThingRegistrationTaskOutputBuilder{
        crate::operation::describe_thing_registration_task::builders::DescribeThingRegistrationTaskOutputBuilder::default()
    }
}

/// A builder for [`DescribeThingRegistrationTaskOutput`](crate::operation::describe_thing_registration_task::DescribeThingRegistrationTaskOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeThingRegistrationTaskOutputBuilder {
    pub(crate) task_id: std::option::Option<std::string::String>,
    pub(crate) creation_date: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) last_modified_date: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) template_body: std::option::Option<std::string::String>,
    pub(crate) input_file_bucket: std::option::Option<std::string::String>,
    pub(crate) input_file_key: std::option::Option<std::string::String>,
    pub(crate) role_arn: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<crate::types::Status>,
    pub(crate) message: std::option::Option<std::string::String>,
    pub(crate) success_count: std::option::Option<i32>,
    pub(crate) failure_count: std::option::Option<i32>,
    pub(crate) percentage_progress: std::option::Option<i32>,
    _request_id: Option<String>,
}
impl DescribeThingRegistrationTaskOutputBuilder {
    /// <p>The task ID.</p>
    pub fn task_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.task_id = Some(input.into());
        self
    }
    /// <p>The task ID.</p>
    pub fn set_task_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.task_id = input;
        self
    }
    /// <p>The task creation date.</p>
    pub fn creation_date(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.creation_date = Some(input);
        self
    }
    /// <p>The task creation date.</p>
    pub fn set_creation_date(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.creation_date = input;
        self
    }
    /// <p>The date when the task was last modified.</p>
    pub fn last_modified_date(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_modified_date = Some(input);
        self
    }
    /// <p>The date when the task was last modified.</p>
    pub fn set_last_modified_date(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_modified_date = input;
        self
    }
    /// <p>The task's template.</p>
    pub fn template_body(mut self, input: impl Into<std::string::String>) -> Self {
        self.template_body = Some(input.into());
        self
    }
    /// <p>The task's template.</p>
    pub fn set_template_body(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.template_body = input;
        self
    }
    /// <p>The S3 bucket that contains the input file.</p>
    pub fn input_file_bucket(mut self, input: impl Into<std::string::String>) -> Self {
        self.input_file_bucket = Some(input.into());
        self
    }
    /// <p>The S3 bucket that contains the input file.</p>
    pub fn set_input_file_bucket(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.input_file_bucket = input;
        self
    }
    /// <p>The input file key.</p>
    pub fn input_file_key(mut self, input: impl Into<std::string::String>) -> Self {
        self.input_file_key = Some(input.into());
        self
    }
    /// <p>The input file key.</p>
    pub fn set_input_file_key(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.input_file_key = input;
        self
    }
    /// <p>The role ARN that grants access to the input file bucket.</p>
    pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.role_arn = Some(input.into());
        self
    }
    /// <p>The role ARN that grants access to the input file bucket.</p>
    pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The status of the bulk thing provisioning task.</p>
    pub fn status(mut self, input: crate::types::Status) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The status of the bulk thing provisioning task.</p>
    pub fn set_status(mut self, input: std::option::Option<crate::types::Status>) -> Self {
        self.status = input;
        self
    }
    /// <p>The message.</p>
    pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
        self.message = Some(input.into());
        self
    }
    /// <p>The message.</p>
    pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.message = input;
        self
    }
    /// <p>The number of things successfully provisioned.</p>
    pub fn success_count(mut self, input: i32) -> Self {
        self.success_count = Some(input);
        self
    }
    /// <p>The number of things successfully provisioned.</p>
    pub fn set_success_count(mut self, input: std::option::Option<i32>) -> Self {
        self.success_count = input;
        self
    }
    /// <p>The number of things that failed to be provisioned.</p>
    pub fn failure_count(mut self, input: i32) -> Self {
        self.failure_count = Some(input);
        self
    }
    /// <p>The number of things that failed to be provisioned.</p>
    pub fn set_failure_count(mut self, input: std::option::Option<i32>) -> Self {
        self.failure_count = input;
        self
    }
    /// <p>The progress of the bulk provisioning task expressed as a percentage.</p>
    pub fn percentage_progress(mut self, input: i32) -> Self {
        self.percentage_progress = Some(input);
        self
    }
    /// <p>The progress of the bulk provisioning task expressed as a percentage.</p>
    pub fn set_percentage_progress(mut self, input: std::option::Option<i32>) -> Self {
        self.percentage_progress = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeThingRegistrationTaskOutput`](crate::operation::describe_thing_registration_task::DescribeThingRegistrationTaskOutput).
    pub fn build(
        self,
    ) -> crate::operation::describe_thing_registration_task::DescribeThingRegistrationTaskOutput
    {
        crate::operation::describe_thing_registration_task::DescribeThingRegistrationTaskOutput {
            task_id: self.task_id,
            creation_date: self.creation_date,
            last_modified_date: self.last_modified_date,
            template_body: self.template_body,
            input_file_bucket: self.input_file_bucket,
            input_file_key: self.input_file_key,
            role_arn: self.role_arn,
            status: self.status,
            message: self.message,
            success_count: self.success_count.unwrap_or_default(),
            failure_count: self.failure_count.unwrap_or_default(),
            percentage_progress: self.percentage_progress.unwrap_or_default(),
            _request_id: self._request_id,
        }
    }
}
