// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateDimensionOutput {
    /// <p>A unique identifier for the dimension.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN)of the created dimension.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The type of the dimension.</p>
    pub r#type: ::std::option::Option<crate::types::DimensionType>,
    /// <p>The value or list of values used to scope the dimension. For example, for topic filters, this is the pattern used to match the MQTT topic name.</p>
    pub string_values: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The date and time, in milliseconds since epoch, when the dimension was initially created.</p>
    pub creation_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The date and time, in milliseconds since epoch, when the dimension was most recently updated.</p>
    pub last_modified_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl UpdateDimensionOutput {
    /// <p>A unique identifier for the dimension.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN)of the created dimension.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The type of the dimension.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::DimensionType> {
        self.r#type.as_ref()
    }
    /// <p>The value or list of values used to scope the dimension. For example, for topic filters, this is the pattern used to match the MQTT topic name.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.string_values.is_none()`.
    pub fn string_values(&self) -> &[::std::string::String] {
        self.string_values.as_deref().unwrap_or_default()
    }
    /// <p>The date and time, in milliseconds since epoch, when the dimension was initially created.</p>
    pub fn creation_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_date.as_ref()
    }
    /// <p>The date and time, in milliseconds since epoch, when the dimension was most recently updated.</p>
    pub fn last_modified_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_modified_date.as_ref()
    }
}
impl ::aws_http::request_id::RequestId for UpdateDimensionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateDimensionOutput {
    /// Creates a new builder-style object to manufacture [`UpdateDimensionOutput`](crate::operation::update_dimension::UpdateDimensionOutput).
    pub fn builder() -> crate::operation::update_dimension::builders::UpdateDimensionOutputBuilder {
        crate::operation::update_dimension::builders::UpdateDimensionOutputBuilder::default()
    }
}

/// A builder for [`UpdateDimensionOutput`](crate::operation::update_dimension::UpdateDimensionOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateDimensionOutputBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<crate::types::DimensionType>,
    pub(crate) string_values: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) creation_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_modified_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl UpdateDimensionOutputBuilder {
    /// <p>A unique identifier for the dimension.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier for the dimension.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>A unique identifier for the dimension.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The Amazon Resource Name (ARN)of the created dimension.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN)of the created dimension.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN)of the created dimension.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The type of the dimension.</p>
    pub fn r#type(mut self, input: crate::types::DimensionType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the dimension.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::DimensionType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of the dimension.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::DimensionType> {
        &self.r#type
    }
    /// Appends an item to `string_values`.
    ///
    /// To override the contents of this collection use [`set_string_values`](Self::set_string_values).
    ///
    /// <p>The value or list of values used to scope the dimension. For example, for topic filters, this is the pattern used to match the MQTT topic name.</p>
    pub fn string_values(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.string_values.unwrap_or_default();
        v.push(input.into());
        self.string_values = ::std::option::Option::Some(v);
        self
    }
    /// <p>The value or list of values used to scope the dimension. For example, for topic filters, this is the pattern used to match the MQTT topic name.</p>
    pub fn set_string_values(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.string_values = input;
        self
    }
    /// <p>The value or list of values used to scope the dimension. For example, for topic filters, this is the pattern used to match the MQTT topic name.</p>
    pub fn get_string_values(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.string_values
    }
    /// <p>The date and time, in milliseconds since epoch, when the dimension was initially created.</p>
    pub fn creation_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time, in milliseconds since epoch, when the dimension was initially created.</p>
    pub fn set_creation_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_date = input;
        self
    }
    /// <p>The date and time, in milliseconds since epoch, when the dimension was initially created.</p>
    pub fn get_creation_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_date
    }
    /// <p>The date and time, in milliseconds since epoch, when the dimension was most recently updated.</p>
    pub fn last_modified_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_modified_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time, in milliseconds since epoch, when the dimension was most recently updated.</p>
    pub fn set_last_modified_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_modified_date = input;
        self
    }
    /// <p>The date and time, in milliseconds since epoch, when the dimension was most recently updated.</p>
    pub fn get_last_modified_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_modified_date
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`UpdateDimensionOutput`](crate::operation::update_dimension::UpdateDimensionOutput).
    pub fn build(self) -> crate::operation::update_dimension::UpdateDimensionOutput {
        crate::operation::update_dimension::UpdateDimensionOutput {
            name: self.name,
            arn: self.arn,
            r#type: self.r#type,
            string_values: self.string_values,
            creation_date: self.creation_date,
            last_modified_date: self.last_modified_date,
            _request_id: self._request_id,
        }
    }
}
