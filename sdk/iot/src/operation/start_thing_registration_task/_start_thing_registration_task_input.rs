// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StartThingRegistrationTaskInput {
    /// <p>The provisioning template.</p>
    pub template_body: ::std::option::Option<::std::string::String>,
    /// <p>The S3 bucket that contains the input file.</p>
    pub input_file_bucket: ::std::option::Option<::std::string::String>,
    /// <p>The name of input file within the S3 bucket. This file contains a newline delimited JSON file. Each line contains the parameter values to provision one device (thing).</p>
    pub input_file_key: ::std::option::Option<::std::string::String>,
    /// <p>The IAM role ARN that grants permission the input file.</p>
    pub role_arn: ::std::option::Option<::std::string::String>,
}
impl StartThingRegistrationTaskInput {
    /// <p>The provisioning template.</p>
    pub fn template_body(&self) -> ::std::option::Option<&str> {
        self.template_body.as_deref()
    }
    /// <p>The S3 bucket that contains the input file.</p>
    pub fn input_file_bucket(&self) -> ::std::option::Option<&str> {
        self.input_file_bucket.as_deref()
    }
    /// <p>The name of input file within the S3 bucket. This file contains a newline delimited JSON file. Each line contains the parameter values to provision one device (thing).</p>
    pub fn input_file_key(&self) -> ::std::option::Option<&str> {
        self.input_file_key.as_deref()
    }
    /// <p>The IAM role ARN that grants permission the input file.</p>
    pub fn role_arn(&self) -> ::std::option::Option<&str> {
        self.role_arn.as_deref()
    }
}
impl StartThingRegistrationTaskInput {
    /// Creates a new builder-style object to manufacture [`StartThingRegistrationTaskInput`](crate::operation::start_thing_registration_task::StartThingRegistrationTaskInput).
    pub fn builder() -> crate::operation::start_thing_registration_task::builders::StartThingRegistrationTaskInputBuilder {
        crate::operation::start_thing_registration_task::builders::StartThingRegistrationTaskInputBuilder::default()
    }
}

/// A builder for [`StartThingRegistrationTaskInput`](crate::operation::start_thing_registration_task::StartThingRegistrationTaskInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct StartThingRegistrationTaskInputBuilder {
    pub(crate) template_body: ::std::option::Option<::std::string::String>,
    pub(crate) input_file_bucket: ::std::option::Option<::std::string::String>,
    pub(crate) input_file_key: ::std::option::Option<::std::string::String>,
    pub(crate) role_arn: ::std::option::Option<::std::string::String>,
}
impl StartThingRegistrationTaskInputBuilder {
    /// <p>The provisioning template.</p>
    /// This field is required.
    pub fn template_body(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.template_body = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The provisioning template.</p>
    pub fn set_template_body(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.template_body = input;
        self
    }
    /// <p>The provisioning template.</p>
    pub fn get_template_body(&self) -> &::std::option::Option<::std::string::String> {
        &self.template_body
    }
    /// <p>The S3 bucket that contains the input file.</p>
    /// This field is required.
    pub fn input_file_bucket(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.input_file_bucket = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The S3 bucket that contains the input file.</p>
    pub fn set_input_file_bucket(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.input_file_bucket = input;
        self
    }
    /// <p>The S3 bucket that contains the input file.</p>
    pub fn get_input_file_bucket(&self) -> &::std::option::Option<::std::string::String> {
        &self.input_file_bucket
    }
    /// <p>The name of input file within the S3 bucket. This file contains a newline delimited JSON file. Each line contains the parameter values to provision one device (thing).</p>
    /// This field is required.
    pub fn input_file_key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.input_file_key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of input file within the S3 bucket. This file contains a newline delimited JSON file. Each line contains the parameter values to provision one device (thing).</p>
    pub fn set_input_file_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.input_file_key = input;
        self
    }
    /// <p>The name of input file within the S3 bucket. This file contains a newline delimited JSON file. Each line contains the parameter values to provision one device (thing).</p>
    pub fn get_input_file_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.input_file_key
    }
    /// <p>The IAM role ARN that grants permission the input file.</p>
    /// This field is required.
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The IAM role ARN that grants permission the input file.</p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The IAM role ARN that grants permission the input file.</p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn
    }
    /// Consumes the builder and constructs a [`StartThingRegistrationTaskInput`](crate::operation::start_thing_registration_task::StartThingRegistrationTaskInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::start_thing_registration_task::StartThingRegistrationTaskInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::start_thing_registration_task::StartThingRegistrationTaskInput {
            template_body: self.template_body,
            input_file_bucket: self.input_file_bucket,
            input_file_key: self.input_file_key,
            role_arn: self.role_arn,
        })
    }
}
