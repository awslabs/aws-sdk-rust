// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The input for the DescribeThingType operation.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeThingTypeInput {
    /// <p>The name of the thing type.</p>
    #[doc(hidden)]
    pub thing_type_name: std::option::Option<std::string::String>,
}
impl DescribeThingTypeInput {
    /// <p>The name of the thing type.</p>
    pub fn thing_type_name(&self) -> std::option::Option<&str> {
        self.thing_type_name.as_deref()
    }
}
impl DescribeThingTypeInput {
    /// Creates a new builder-style object to manufacture [`DescribeThingTypeInput`](crate::operation::describe_thing_type::DescribeThingTypeInput).
    pub fn builder(
    ) -> crate::operation::describe_thing_type::builders::DescribeThingTypeInputBuilder {
        crate::operation::describe_thing_type::builders::DescribeThingTypeInputBuilder::default()
    }
}

/// A builder for [`DescribeThingTypeInput`](crate::operation::describe_thing_type::DescribeThingTypeInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeThingTypeInputBuilder {
    pub(crate) thing_type_name: std::option::Option<std::string::String>,
}
impl DescribeThingTypeInputBuilder {
    /// <p>The name of the thing type.</p>
    pub fn thing_type_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.thing_type_name = Some(input.into());
        self
    }
    /// <p>The name of the thing type.</p>
    pub fn set_thing_type_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.thing_type_name = input;
        self
    }
    /// Consumes the builder and constructs a [`DescribeThingTypeInput`](crate::operation::describe_thing_type::DescribeThingTypeInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::describe_thing_type::DescribeThingTypeInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::describe_thing_type::DescribeThingTypeInput {
                thing_type_name: self.thing_type_name,
            },
        )
    }
}
