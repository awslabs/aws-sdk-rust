// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_job::_create_job_output::CreateJobOutputBuilder;

pub use crate::operation::create_job::_create_job_input::CreateJobInputBuilder;

/// Fluent builder constructing a request to `CreateJob`.
///
/// <p>Creates a job.</p>
/// <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">CreateJob</a> action.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateJobFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_job::builders::CreateJobInputBuilder,
}
impl CreateJobFluentBuilder {
    /// Creates a new `CreateJob`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::create_job::CreateJob,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::operation::create_job::CreateJobError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::create_job::CreateJobOutput,
        aws_smithy_http::result::SdkError<crate::operation::create_job::CreateJobError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>A job identifier which must be unique for your Amazon Web Services account. We recommend using a UUID. Alpha-numeric characters, "-" and "_" are valid for use here.</p>
    pub fn job_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.job_id(input.into());
        self
    }
    /// <p>A job identifier which must be unique for your Amazon Web Services account. We recommend using a UUID. Alpha-numeric characters, "-" and "_" are valid for use here.</p>
    pub fn set_job_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_job_id(input);
        self
    }
    /// Appends an item to `targets`.
    ///
    /// To override the contents of this collection use [`set_targets`](Self::set_targets).
    ///
    /// <p>A list of things and thing groups to which the job should be sent.</p>
    pub fn targets(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.targets(input.into());
        self
    }
    /// <p>A list of things and thing groups to which the job should be sent.</p>
    pub fn set_targets(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_targets(input);
        self
    }
    /// <p>An S3 link to the job document. Required if you don't specify a value for <code>document</code>.</p> <note>
    /// <p>If the job document resides in an S3 bucket, you must use a placeholder link when specifying the document.</p>
    /// <p>The placeholder link is of the following form:</p>
    /// <p> <code>${aws:iot:s3-presigned-url:https://s3.amazonaws.com/<i>bucket</i>/<i>key</i>}</code> </p>
    /// <p>where <i>bucket</i> is your bucket name and <i>key</i> is the object in the bucket to which you are linking.</p>
    /// </note>
    pub fn document_source(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.document_source(input.into());
        self
    }
    /// <p>An S3 link to the job document. Required if you don't specify a value for <code>document</code>.</p> <note>
    /// <p>If the job document resides in an S3 bucket, you must use a placeholder link when specifying the document.</p>
    /// <p>The placeholder link is of the following form:</p>
    /// <p> <code>${aws:iot:s3-presigned-url:https://s3.amazonaws.com/<i>bucket</i>/<i>key</i>}</code> </p>
    /// <p>where <i>bucket</i> is your bucket name and <i>key</i> is the object in the bucket to which you are linking.</p>
    /// </note>
    pub fn set_document_source(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_document_source(input);
        self
    }
    /// <p>The job document. Required if you don't specify a value for <code>documentSource</code>.</p>
    pub fn document(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.document(input.into());
        self
    }
    /// <p>The job document. Required if you don't specify a value for <code>documentSource</code>.</p>
    pub fn set_document(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_document(input);
        self
    }
    /// <p>A short text description of the job.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>A short text description of the job.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p>Configuration information for pre-signed S3 URLs.</p>
    pub fn presigned_url_config(mut self, input: crate::types::PresignedUrlConfig) -> Self {
        self.inner = self.inner.presigned_url_config(input);
        self
    }
    /// <p>Configuration information for pre-signed S3 URLs.</p>
    pub fn set_presigned_url_config(
        mut self,
        input: std::option::Option<crate::types::PresignedUrlConfig>,
    ) -> Self {
        self.inner = self.inner.set_presigned_url_config(input);
        self
    }
    /// <p>Specifies whether the job will continue to run (CONTINUOUS), or will be complete after all those things specified as targets have completed the job (SNAPSHOT). If continuous, the job may also be run on a thing when a change is detected in a target. For example, a job will run on a thing when the thing is added to a target group, even after the job was completed by all things originally in the group.</p> <note>
    /// <p>We recommend that you use continuous jobs instead of snapshot jobs for dynamic thing group targets. By using continuous jobs, devices that join the group receive the job execution even after the job has been created.</p>
    /// </note>
    pub fn target_selection(mut self, input: crate::types::TargetSelection) -> Self {
        self.inner = self.inner.target_selection(input);
        self
    }
    /// <p>Specifies whether the job will continue to run (CONTINUOUS), or will be complete after all those things specified as targets have completed the job (SNAPSHOT). If continuous, the job may also be run on a thing when a change is detected in a target. For example, a job will run on a thing when the thing is added to a target group, even after the job was completed by all things originally in the group.</p> <note>
    /// <p>We recommend that you use continuous jobs instead of snapshot jobs for dynamic thing group targets. By using continuous jobs, devices that join the group receive the job execution even after the job has been created.</p>
    /// </note>
    pub fn set_target_selection(
        mut self,
        input: std::option::Option<crate::types::TargetSelection>,
    ) -> Self {
        self.inner = self.inner.set_target_selection(input);
        self
    }
    /// <p>Allows you to create a staged rollout of the job.</p>
    pub fn job_executions_rollout_config(
        mut self,
        input: crate::types::JobExecutionsRolloutConfig,
    ) -> Self {
        self.inner = self.inner.job_executions_rollout_config(input);
        self
    }
    /// <p>Allows you to create a staged rollout of the job.</p>
    pub fn set_job_executions_rollout_config(
        mut self,
        input: std::option::Option<crate::types::JobExecutionsRolloutConfig>,
    ) -> Self {
        self.inner = self.inner.set_job_executions_rollout_config(input);
        self
    }
    /// <p>Allows you to create the criteria to abort a job.</p>
    pub fn abort_config(mut self, input: crate::types::AbortConfig) -> Self {
        self.inner = self.inner.abort_config(input);
        self
    }
    /// <p>Allows you to create the criteria to abort a job.</p>
    pub fn set_abort_config(
        mut self,
        input: std::option::Option<crate::types::AbortConfig>,
    ) -> Self {
        self.inner = self.inner.set_abort_config(input);
        self
    }
    /// <p>Specifies the amount of time each device has to finish its execution of the job. The timer is started when the job execution status is set to <code>IN_PROGRESS</code>. If the job execution status is not set to another terminal state before the time expires, it will be automatically set to <code>TIMED_OUT</code>.</p>
    pub fn timeout_config(mut self, input: crate::types::TimeoutConfig) -> Self {
        self.inner = self.inner.timeout_config(input);
        self
    }
    /// <p>Specifies the amount of time each device has to finish its execution of the job. The timer is started when the job execution status is set to <code>IN_PROGRESS</code>. If the job execution status is not set to another terminal state before the time expires, it will be automatically set to <code>TIMED_OUT</code>.</p>
    pub fn set_timeout_config(
        mut self,
        input: std::option::Option<crate::types::TimeoutConfig>,
    ) -> Self {
        self.inner = self.inner.set_timeout_config(input);
        self
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Metadata which can be used to manage the job.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>Metadata which can be used to manage the job.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>The namespace used to indicate that a job is a customer-managed job.</p>
    /// <p>When you specify a value for this parameter, Amazon Web Services IoT Core sends jobs notifications to MQTT topics that contain the value in the following format.</p>
    /// <p> <code>$aws/things/<i>THING_NAME</i>/jobs/<i>JOB_ID</i>/notify-namespace-<i>NAMESPACE_ID</i>/</code> </p> <note>
    /// <p>The <code>namespaceId</code> feature is in public preview.</p>
    /// </note>
    pub fn namespace_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.namespace_id(input.into());
        self
    }
    /// <p>The namespace used to indicate that a job is a customer-managed job.</p>
    /// <p>When you specify a value for this parameter, Amazon Web Services IoT Core sends jobs notifications to MQTT topics that contain the value in the following format.</p>
    /// <p> <code>$aws/things/<i>THING_NAME</i>/jobs/<i>JOB_ID</i>/notify-namespace-<i>NAMESPACE_ID</i>/</code> </p> <note>
    /// <p>The <code>namespaceId</code> feature is in public preview.</p>
    /// </note>
    pub fn set_namespace_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_namespace_id(input);
        self
    }
    /// <p>The ARN of the job template used to create the job.</p>
    pub fn job_template_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.job_template_arn(input.into());
        self
    }
    /// <p>The ARN of the job template used to create the job.</p>
    pub fn set_job_template_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_job_template_arn(input);
        self
    }
    /// <p>Allows you to create the criteria to retry a job.</p>
    pub fn job_executions_retry_config(
        mut self,
        input: crate::types::JobExecutionsRetryConfig,
    ) -> Self {
        self.inner = self.inner.job_executions_retry_config(input);
        self
    }
    /// <p>Allows you to create the criteria to retry a job.</p>
    pub fn set_job_executions_retry_config(
        mut self,
        input: std::option::Option<crate::types::JobExecutionsRetryConfig>,
    ) -> Self {
        self.inner = self.inner.set_job_executions_retry_config(input);
        self
    }
    /// Adds a key-value pair to `documentParameters`.
    ///
    /// To override the contents of this collection use [`set_document_parameters`](Self::set_document_parameters).
    ///
    /// <p>Parameters of an Amazon Web Services managed template that you can specify to create the job document.</p> <note>
    /// <p> <code>documentParameters</code> can only be used when creating jobs from Amazon Web Services managed templates. This parameter can't be used with custom job templates or to create jobs from them.</p>
    /// </note>
    pub fn document_parameters(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.document_parameters(k.into(), v.into());
        self
    }
    /// <p>Parameters of an Amazon Web Services managed template that you can specify to create the job document.</p> <note>
    /// <p> <code>documentParameters</code> can only be used when creating jobs from Amazon Web Services managed templates. This parameter can't be used with custom job templates or to create jobs from them.</p>
    /// </note>
    pub fn set_document_parameters(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.inner = self.inner.set_document_parameters(input);
        self
    }
    /// <p>The configuration that allows you to schedule a job for a future date and time in addition to specifying the end behavior for each job execution.</p>
    pub fn scheduling_config(mut self, input: crate::types::SchedulingConfig) -> Self {
        self.inner = self.inner.scheduling_config(input);
        self
    }
    /// <p>The configuration that allows you to schedule a job for a future date and time in addition to specifying the end behavior for each job execution.</p>
    pub fn set_scheduling_config(
        mut self,
        input: std::option::Option<crate::types::SchedulingConfig>,
    ) -> Self {
        self.inner = self.inner.set_scheduling_config(input);
        self
    }
}
