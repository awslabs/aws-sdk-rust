// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeManagedJobTemplateOutput {
    /// <p>The unique name of a managed template, such as <code>AWS-Reboot</code>.</p>
    pub template_name: ::std::option::Option<::std::string::String>,
    /// <p>The unique Amazon Resource Name (ARN) of the managed template.</p>
    pub template_arn: ::std::option::Option<::std::string::String>,
    /// <p>The unique description of a managed template.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The version for a managed template.</p>
    pub template_version: ::std::option::Option<::std::string::String>,
    /// <p>A list of environments that are supported with the managed job template.</p>
    pub environments: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>A map of key-value pairs that you can use as guidance to specify the inputs for creating a job from a managed template.</p> <note>
    /// <p> <code>documentParameters</code> can only be used when creating jobs from Amazon Web Services managed templates. This parameter can't be used with custom job templates or to create jobs from them.</p>
    /// </note>
    pub document_parameters: ::std::option::Option<::std::vec::Vec<crate::types::DocumentParameter>>,
    /// <p>The document schema for a managed job template.</p>
    pub document: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl DescribeManagedJobTemplateOutput {
    /// <p>The unique name of a managed template, such as <code>AWS-Reboot</code>.</p>
    pub fn template_name(&self) -> ::std::option::Option<&str> {
        self.template_name.as_deref()
    }
    /// <p>The unique Amazon Resource Name (ARN) of the managed template.</p>
    pub fn template_arn(&self) -> ::std::option::Option<&str> {
        self.template_arn.as_deref()
    }
    /// <p>The unique description of a managed template.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The version for a managed template.</p>
    pub fn template_version(&self) -> ::std::option::Option<&str> {
        self.template_version.as_deref()
    }
    /// <p>A list of environments that are supported with the managed job template.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.environments.is_none()`.
    pub fn environments(&self) -> &[::std::string::String] {
        self.environments.as_deref().unwrap_or_default()
    }
    /// <p>A map of key-value pairs that you can use as guidance to specify the inputs for creating a job from a managed template.</p> <note>
    /// <p> <code>documentParameters</code> can only be used when creating jobs from Amazon Web Services managed templates. This parameter can't be used with custom job templates or to create jobs from them.</p>
    /// </note>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.document_parameters.is_none()`.
    pub fn document_parameters(&self) -> &[crate::types::DocumentParameter] {
        self.document_parameters.as_deref().unwrap_or_default()
    }
    /// <p>The document schema for a managed job template.</p>
    pub fn document(&self) -> ::std::option::Option<&str> {
        self.document.as_deref()
    }
}
impl ::aws_http::request_id::RequestId for DescribeManagedJobTemplateOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeManagedJobTemplateOutput {
    /// Creates a new builder-style object to manufacture [`DescribeManagedJobTemplateOutput`](crate::operation::describe_managed_job_template::DescribeManagedJobTemplateOutput).
    pub fn builder() -> crate::operation::describe_managed_job_template::builders::DescribeManagedJobTemplateOutputBuilder {
        crate::operation::describe_managed_job_template::builders::DescribeManagedJobTemplateOutputBuilder::default()
    }
}

/// A builder for [`DescribeManagedJobTemplateOutput`](crate::operation::describe_managed_job_template::DescribeManagedJobTemplateOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeManagedJobTemplateOutputBuilder {
    pub(crate) template_name: ::std::option::Option<::std::string::String>,
    pub(crate) template_arn: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) template_version: ::std::option::Option<::std::string::String>,
    pub(crate) environments: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) document_parameters: ::std::option::Option<::std::vec::Vec<crate::types::DocumentParameter>>,
    pub(crate) document: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl DescribeManagedJobTemplateOutputBuilder {
    /// <p>The unique name of a managed template, such as <code>AWS-Reboot</code>.</p>
    pub fn template_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.template_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique name of a managed template, such as <code>AWS-Reboot</code>.</p>
    pub fn set_template_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.template_name = input;
        self
    }
    /// <p>The unique name of a managed template, such as <code>AWS-Reboot</code>.</p>
    pub fn get_template_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.template_name
    }
    /// <p>The unique Amazon Resource Name (ARN) of the managed template.</p>
    pub fn template_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.template_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique Amazon Resource Name (ARN) of the managed template.</p>
    pub fn set_template_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.template_arn = input;
        self
    }
    /// <p>The unique Amazon Resource Name (ARN) of the managed template.</p>
    pub fn get_template_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.template_arn
    }
    /// <p>The unique description of a managed template.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique description of a managed template.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The unique description of a managed template.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The version for a managed template.</p>
    pub fn template_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.template_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version for a managed template.</p>
    pub fn set_template_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.template_version = input;
        self
    }
    /// <p>The version for a managed template.</p>
    pub fn get_template_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.template_version
    }
    /// Appends an item to `environments`.
    ///
    /// To override the contents of this collection use [`set_environments`](Self::set_environments).
    ///
    /// <p>A list of environments that are supported with the managed job template.</p>
    pub fn environments(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.environments.unwrap_or_default();
        v.push(input.into());
        self.environments = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of environments that are supported with the managed job template.</p>
    pub fn set_environments(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.environments = input;
        self
    }
    /// <p>A list of environments that are supported with the managed job template.</p>
    pub fn get_environments(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.environments
    }
    /// Appends an item to `document_parameters`.
    ///
    /// To override the contents of this collection use [`set_document_parameters`](Self::set_document_parameters).
    ///
    /// <p>A map of key-value pairs that you can use as guidance to specify the inputs for creating a job from a managed template.</p> <note>
    /// <p> <code>documentParameters</code> can only be used when creating jobs from Amazon Web Services managed templates. This parameter can't be used with custom job templates or to create jobs from them.</p>
    /// </note>
    pub fn document_parameters(mut self, input: crate::types::DocumentParameter) -> Self {
        let mut v = self.document_parameters.unwrap_or_default();
        v.push(input);
        self.document_parameters = ::std::option::Option::Some(v);
        self
    }
    /// <p>A map of key-value pairs that you can use as guidance to specify the inputs for creating a job from a managed template.</p> <note>
    /// <p> <code>documentParameters</code> can only be used when creating jobs from Amazon Web Services managed templates. This parameter can't be used with custom job templates or to create jobs from them.</p>
    /// </note>
    pub fn set_document_parameters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DocumentParameter>>) -> Self {
        self.document_parameters = input;
        self
    }
    /// <p>A map of key-value pairs that you can use as guidance to specify the inputs for creating a job from a managed template.</p> <note>
    /// <p> <code>documentParameters</code> can only be used when creating jobs from Amazon Web Services managed templates. This parameter can't be used with custom job templates or to create jobs from them.</p>
    /// </note>
    pub fn get_document_parameters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DocumentParameter>> {
        &self.document_parameters
    }
    /// <p>The document schema for a managed job template.</p>
    pub fn document(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.document = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The document schema for a managed job template.</p>
    pub fn set_document(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.document = input;
        self
    }
    /// <p>The document schema for a managed job template.</p>
    pub fn get_document(&self) -> &::std::option::Option<::std::string::String> {
        &self.document
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeManagedJobTemplateOutput`](crate::operation::describe_managed_job_template::DescribeManagedJobTemplateOutput).
    pub fn build(self) -> crate::operation::describe_managed_job_template::DescribeManagedJobTemplateOutput {
        crate::operation::describe_managed_job_template::DescribeManagedJobTemplateOutput {
            template_name: self.template_name,
            template_arn: self.template_arn,
            description: self.description,
            template_version: self.template_version,
            environments: self.environments,
            document_parameters: self.document_parameters,
            document: self.document,
            _request_id: self._request_id,
        }
    }
}
