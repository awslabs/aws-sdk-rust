// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Input for the ListCACertificates operation.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListCaCertificatesInput {
    /// <p>The result page size.</p>
    pub page_size: ::std::option::Option<i32>,
    /// <p>The marker for the next set of results.</p>
    pub marker: ::std::option::Option<::std::string::String>,
    /// <p>Determines the order of the results.</p>
    pub ascending_order: ::std::option::Option<bool>,
    /// <p>The name of the provisioning template.</p>
    pub template_name: ::std::option::Option<::std::string::String>,
}
impl ListCaCertificatesInput {
    /// <p>The result page size.</p>
    pub fn page_size(&self) -> ::std::option::Option<i32> {
        self.page_size
    }
    /// <p>The marker for the next set of results.</p>
    pub fn marker(&self) -> ::std::option::Option<&str> {
        self.marker.as_deref()
    }
    /// <p>Determines the order of the results.</p>
    pub fn ascending_order(&self) -> ::std::option::Option<bool> {
        self.ascending_order
    }
    /// <p>The name of the provisioning template.</p>
    pub fn template_name(&self) -> ::std::option::Option<&str> {
        self.template_name.as_deref()
    }
}
impl ListCaCertificatesInput {
    /// Creates a new builder-style object to manufacture [`ListCaCertificatesInput`](crate::operation::list_ca_certificates::ListCaCertificatesInput).
    pub fn builder() -> crate::operation::list_ca_certificates::builders::ListCaCertificatesInputBuilder {
        crate::operation::list_ca_certificates::builders::ListCaCertificatesInputBuilder::default()
    }
}

/// A builder for [`ListCaCertificatesInput`](crate::operation::list_ca_certificates::ListCaCertificatesInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListCaCertificatesInputBuilder {
    pub(crate) page_size: ::std::option::Option<i32>,
    pub(crate) marker: ::std::option::Option<::std::string::String>,
    pub(crate) ascending_order: ::std::option::Option<bool>,
    pub(crate) template_name: ::std::option::Option<::std::string::String>,
}
impl ListCaCertificatesInputBuilder {
    /// <p>The result page size.</p>
    pub fn page_size(mut self, input: i32) -> Self {
        self.page_size = ::std::option::Option::Some(input);
        self
    }
    /// <p>The result page size.</p>
    pub fn set_page_size(mut self, input: ::std::option::Option<i32>) -> Self {
        self.page_size = input;
        self
    }
    /// <p>The result page size.</p>
    pub fn get_page_size(&self) -> &::std::option::Option<i32> {
        &self.page_size
    }
    /// <p>The marker for the next set of results.</p>
    pub fn marker(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.marker = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The marker for the next set of results.</p>
    pub fn set_marker(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.marker = input;
        self
    }
    /// <p>The marker for the next set of results.</p>
    pub fn get_marker(&self) -> &::std::option::Option<::std::string::String> {
        &self.marker
    }
    /// <p>Determines the order of the results.</p>
    pub fn ascending_order(mut self, input: bool) -> Self {
        self.ascending_order = ::std::option::Option::Some(input);
        self
    }
    /// <p>Determines the order of the results.</p>
    pub fn set_ascending_order(mut self, input: ::std::option::Option<bool>) -> Self {
        self.ascending_order = input;
        self
    }
    /// <p>Determines the order of the results.</p>
    pub fn get_ascending_order(&self) -> &::std::option::Option<bool> {
        &self.ascending_order
    }
    /// <p>The name of the provisioning template.</p>
    pub fn template_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.template_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the provisioning template.</p>
    pub fn set_template_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.template_name = input;
        self
    }
    /// <p>The name of the provisioning template.</p>
    pub fn get_template_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.template_name
    }
    /// Consumes the builder and constructs a [`ListCaCertificatesInput`](crate::operation::list_ca_certificates::ListCaCertificatesInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_ca_certificates::ListCaCertificatesInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::list_ca_certificates::ListCaCertificatesInput {
            page_size: self.page_size,
            marker: self.marker,
            ascending_order: self.ascending_order,
            template_name: self.template_name,
        })
    }
}
