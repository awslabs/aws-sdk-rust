// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The Amazon Location rule action sends device location updates from an MQTT message to an Amazon Location tracker resource.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct LocationAction {
    /// <p>The IAM role that grants permission to write to the Amazon Location resource.</p>
    #[doc(hidden)]
    pub role_arn: std::option::Option<std::string::String>,
    /// <p>The name of the tracker resource in Amazon Location in which the location is updated.</p>
    #[doc(hidden)]
    pub tracker_name: std::option::Option<std::string::String>,
    /// <p>The unique ID of the device providing the location data.</p>
    #[doc(hidden)]
    pub device_id: std::option::Option<std::string::String>,
    /// <p>The time that the location data was sampled. The default value is the time the MQTT message was processed.</p>
    #[doc(hidden)]
    pub timestamp: std::option::Option<crate::types::LocationTimestamp>,
    /// <p>A string that evaluates to a double value that represents the latitude of the device's location.</p>
    #[doc(hidden)]
    pub latitude: std::option::Option<std::string::String>,
    /// <p>A string that evaluates to a double value that represents the longitude of the device's location.</p>
    #[doc(hidden)]
    pub longitude: std::option::Option<std::string::String>,
}
impl LocationAction {
    /// <p>The IAM role that grants permission to write to the Amazon Location resource.</p>
    pub fn role_arn(&self) -> std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>The name of the tracker resource in Amazon Location in which the location is updated.</p>
    pub fn tracker_name(&self) -> std::option::Option<&str> {
        self.tracker_name.as_deref()
    }
    /// <p>The unique ID of the device providing the location data.</p>
    pub fn device_id(&self) -> std::option::Option<&str> {
        self.device_id.as_deref()
    }
    /// <p>The time that the location data was sampled. The default value is the time the MQTT message was processed.</p>
    pub fn timestamp(&self) -> std::option::Option<&crate::types::LocationTimestamp> {
        self.timestamp.as_ref()
    }
    /// <p>A string that evaluates to a double value that represents the latitude of the device's location.</p>
    pub fn latitude(&self) -> std::option::Option<&str> {
        self.latitude.as_deref()
    }
    /// <p>A string that evaluates to a double value that represents the longitude of the device's location.</p>
    pub fn longitude(&self) -> std::option::Option<&str> {
        self.longitude.as_deref()
    }
}
impl LocationAction {
    /// Creates a new builder-style object to manufacture [`LocationAction`](crate::types::LocationAction).
    pub fn builder() -> crate::types::builders::LocationActionBuilder {
        crate::types::builders::LocationActionBuilder::default()
    }
}

/// A builder for [`LocationAction`](crate::types::LocationAction).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct LocationActionBuilder {
    pub(crate) role_arn: std::option::Option<std::string::String>,
    pub(crate) tracker_name: std::option::Option<std::string::String>,
    pub(crate) device_id: std::option::Option<std::string::String>,
    pub(crate) timestamp: std::option::Option<crate::types::LocationTimestamp>,
    pub(crate) latitude: std::option::Option<std::string::String>,
    pub(crate) longitude: std::option::Option<std::string::String>,
}
impl LocationActionBuilder {
    /// <p>The IAM role that grants permission to write to the Amazon Location resource.</p>
    pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.role_arn = Some(input.into());
        self
    }
    /// <p>The IAM role that grants permission to write to the Amazon Location resource.</p>
    pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The name of the tracker resource in Amazon Location in which the location is updated.</p>
    pub fn tracker_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.tracker_name = Some(input.into());
        self
    }
    /// <p>The name of the tracker resource in Amazon Location in which the location is updated.</p>
    pub fn set_tracker_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.tracker_name = input;
        self
    }
    /// <p>The unique ID of the device providing the location data.</p>
    pub fn device_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.device_id = Some(input.into());
        self
    }
    /// <p>The unique ID of the device providing the location data.</p>
    pub fn set_device_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.device_id = input;
        self
    }
    /// <p>The time that the location data was sampled. The default value is the time the MQTT message was processed.</p>
    pub fn timestamp(mut self, input: crate::types::LocationTimestamp) -> Self {
        self.timestamp = Some(input);
        self
    }
    /// <p>The time that the location data was sampled. The default value is the time the MQTT message was processed.</p>
    pub fn set_timestamp(
        mut self,
        input: std::option::Option<crate::types::LocationTimestamp>,
    ) -> Self {
        self.timestamp = input;
        self
    }
    /// <p>A string that evaluates to a double value that represents the latitude of the device's location.</p>
    pub fn latitude(mut self, input: impl Into<std::string::String>) -> Self {
        self.latitude = Some(input.into());
        self
    }
    /// <p>A string that evaluates to a double value that represents the latitude of the device's location.</p>
    pub fn set_latitude(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.latitude = input;
        self
    }
    /// <p>A string that evaluates to a double value that represents the longitude of the device's location.</p>
    pub fn longitude(mut self, input: impl Into<std::string::String>) -> Self {
        self.longitude = Some(input.into());
        self
    }
    /// <p>A string that evaluates to a double value that represents the longitude of the device's location.</p>
    pub fn set_longitude(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.longitude = input;
        self
    }
    /// Consumes the builder and constructs a [`LocationAction`](crate::types::LocationAction).
    pub fn build(self) -> crate::types::LocationAction {
        crate::types::LocationAction {
            role_arn: self.role_arn,
            tracker_name: self.tracker_name,
            device_id: self.device_id,
            timestamp: self.timestamp,
            latitude: self.latitude,
            longitude: self.longitude,
        }
    }
}
