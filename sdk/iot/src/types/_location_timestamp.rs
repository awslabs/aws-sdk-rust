// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes how to interpret an application-defined timestamp value from an MQTT message payload and the precision of that value.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct LocationTimestamp {
    /// <p>An expression that returns a long epoch time value.</p>
    #[doc(hidden)]
    pub value: std::option::Option<std::string::String>,
    /// <p>The precision of the timestamp value that results from the expression described in <code>value</code>.</p>
    /// <p>Valid values: <code>SECONDS</code> | <code>MILLISECONDS</code> | <code>MICROSECONDS</code> | <code>NANOSECONDS</code>. The default is <code>MILLISECONDS</code>.</p>
    #[doc(hidden)]
    pub unit: std::option::Option<std::string::String>,
}
impl LocationTimestamp {
    /// <p>An expression that returns a long epoch time value.</p>
    pub fn value(&self) -> std::option::Option<&str> {
        self.value.as_deref()
    }
    /// <p>The precision of the timestamp value that results from the expression described in <code>value</code>.</p>
    /// <p>Valid values: <code>SECONDS</code> | <code>MILLISECONDS</code> | <code>MICROSECONDS</code> | <code>NANOSECONDS</code>. The default is <code>MILLISECONDS</code>.</p>
    pub fn unit(&self) -> std::option::Option<&str> {
        self.unit.as_deref()
    }
}
impl LocationTimestamp {
    /// Creates a new builder-style object to manufacture [`LocationTimestamp`](crate::types::LocationTimestamp).
    pub fn builder() -> crate::types::builders::LocationTimestampBuilder {
        crate::types::builders::LocationTimestampBuilder::default()
    }
}

/// A builder for [`LocationTimestamp`](crate::types::LocationTimestamp).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct LocationTimestampBuilder {
    pub(crate) value: std::option::Option<std::string::String>,
    pub(crate) unit: std::option::Option<std::string::String>,
}
impl LocationTimestampBuilder {
    /// <p>An expression that returns a long epoch time value.</p>
    pub fn value(mut self, input: impl Into<std::string::String>) -> Self {
        self.value = Some(input.into());
        self
    }
    /// <p>An expression that returns a long epoch time value.</p>
    pub fn set_value(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.value = input;
        self
    }
    /// <p>The precision of the timestamp value that results from the expression described in <code>value</code>.</p>
    /// <p>Valid values: <code>SECONDS</code> | <code>MILLISECONDS</code> | <code>MICROSECONDS</code> | <code>NANOSECONDS</code>. The default is <code>MILLISECONDS</code>.</p>
    pub fn unit(mut self, input: impl Into<std::string::String>) -> Self {
        self.unit = Some(input.into());
        self
    }
    /// <p>The precision of the timestamp value that results from the expression described in <code>value</code>.</p>
    /// <p>Valid values: <code>SECONDS</code> | <code>MILLISECONDS</code> | <code>MICROSECONDS</code> | <code>NANOSECONDS</code>. The default is <code>MILLISECONDS</code>.</p>
    pub fn set_unit(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.unit = input;
        self
    }
    /// Consumes the builder and constructs a [`LocationTimestamp`](crate::types::LocationTimestamp).
    pub fn build(self) -> crate::types::LocationTimestamp {
        crate::types::LocationTimestamp {
            value: self.value,
            unit: self.unit,
        }
    }
}
