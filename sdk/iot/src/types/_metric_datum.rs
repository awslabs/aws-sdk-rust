// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A metric.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct MetricDatum {
    /// <p>The time the metric value was reported.</p>
    #[doc(hidden)]
    pub timestamp: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The value reported for the metric.</p>
    #[doc(hidden)]
    pub value: std::option::Option<crate::types::MetricValue>,
}
impl MetricDatum {
    /// <p>The time the metric value was reported.</p>
    pub fn timestamp(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.timestamp.as_ref()
    }
    /// <p>The value reported for the metric.</p>
    pub fn value(&self) -> std::option::Option<&crate::types::MetricValue> {
        self.value.as_ref()
    }
}
impl MetricDatum {
    /// Creates a new builder-style object to manufacture [`MetricDatum`](crate::types::MetricDatum).
    pub fn builder() -> crate::types::builders::MetricDatumBuilder {
        crate::types::builders::MetricDatumBuilder::default()
    }
}

/// A builder for [`MetricDatum`](crate::types::MetricDatum).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct MetricDatumBuilder {
    pub(crate) timestamp: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) value: std::option::Option<crate::types::MetricValue>,
}
impl MetricDatumBuilder {
    /// <p>The time the metric value was reported.</p>
    pub fn timestamp(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.timestamp = Some(input);
        self
    }
    /// <p>The time the metric value was reported.</p>
    pub fn set_timestamp(mut self, input: std::option::Option<aws_smithy_types::DateTime>) -> Self {
        self.timestamp = input;
        self
    }
    /// <p>The value reported for the metric.</p>
    pub fn value(mut self, input: crate::types::MetricValue) -> Self {
        self.value = Some(input);
        self
    }
    /// <p>The value reported for the metric.</p>
    pub fn set_value(mut self, input: std::option::Option<crate::types::MetricValue>) -> Self {
        self.value = input;
        self
    }
    /// Consumes the builder and constructs a [`MetricDatum`](crate::types::MetricDatum).
    pub fn build(self) -> crate::types::MetricDatum {
        crate::types::MetricDatum {
            timestamp: self.timestamp,
            value: self.value,
        }
    }
}
