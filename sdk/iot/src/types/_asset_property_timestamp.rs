// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An asset property timestamp entry containing the following information.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AssetPropertyTimestamp {
    /// <p>A string that contains the time in seconds since epoch. Accepts substitution templates.</p>
    pub time_in_seconds: ::std::string::String,
    /// <p>Optional. A string that contains the nanosecond time offset. Accepts substitution templates.</p>
    pub offset_in_nanos: ::std::option::Option<::std::string::String>,
}
impl AssetPropertyTimestamp {
    /// <p>A string that contains the time in seconds since epoch. Accepts substitution templates.</p>
    pub fn time_in_seconds(&self) -> &str {
        use std::ops::Deref;
        self.time_in_seconds.deref()
    }
    /// <p>Optional. A string that contains the nanosecond time offset. Accepts substitution templates.</p>
    pub fn offset_in_nanos(&self) -> ::std::option::Option<&str> {
        self.offset_in_nanos.as_deref()
    }
}
impl AssetPropertyTimestamp {
    /// Creates a new builder-style object to manufacture [`AssetPropertyTimestamp`](crate::types::AssetPropertyTimestamp).
    pub fn builder() -> crate::types::builders::AssetPropertyTimestampBuilder {
        crate::types::builders::AssetPropertyTimestampBuilder::default()
    }
}

/// A builder for [`AssetPropertyTimestamp`](crate::types::AssetPropertyTimestamp).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AssetPropertyTimestampBuilder {
    pub(crate) time_in_seconds: ::std::option::Option<::std::string::String>,
    pub(crate) offset_in_nanos: ::std::option::Option<::std::string::String>,
}
impl AssetPropertyTimestampBuilder {
    /// <p>A string that contains the time in seconds since epoch. Accepts substitution templates.</p>
    /// This field is required.
    pub fn time_in_seconds(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.time_in_seconds = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A string that contains the time in seconds since epoch. Accepts substitution templates.</p>
    pub fn set_time_in_seconds(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.time_in_seconds = input;
        self
    }
    /// <p>A string that contains the time in seconds since epoch. Accepts substitution templates.</p>
    pub fn get_time_in_seconds(&self) -> &::std::option::Option<::std::string::String> {
        &self.time_in_seconds
    }
    /// <p>Optional. A string that contains the nanosecond time offset. Accepts substitution templates.</p>
    pub fn offset_in_nanos(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.offset_in_nanos = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Optional. A string that contains the nanosecond time offset. Accepts substitution templates.</p>
    pub fn set_offset_in_nanos(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.offset_in_nanos = input;
        self
    }
    /// <p>Optional. A string that contains the nanosecond time offset. Accepts substitution templates.</p>
    pub fn get_offset_in_nanos(&self) -> &::std::option::Option<::std::string::String> {
        &self.offset_in_nanos
    }
    /// Consumes the builder and constructs a [`AssetPropertyTimestamp`](crate::types::AssetPropertyTimestamp).
    /// This method will fail if any of the following fields are not set:
    /// - [`time_in_seconds`](crate::types::builders::AssetPropertyTimestampBuilder::time_in_seconds)
    pub fn build(self) -> ::std::result::Result<crate::types::AssetPropertyTimestamp, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AssetPropertyTimestamp {
            time_in_seconds: self.time_in_seconds.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "time_in_seconds",
                    "time_in_seconds was not specified but it is required when building AssetPropertyTimestamp",
                )
            })?,
            offset_in_nanos: self.offset_in_nanos,
        })
    }
}
