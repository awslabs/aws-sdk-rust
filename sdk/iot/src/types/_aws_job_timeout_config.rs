// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the amount of time each device has to finish its execution of the job. A timer is started when the job execution status is set to <code>IN_PROGRESS</code>. If the job execution status is not set to another terminal state before the timer expires, it will be automatically set to <code>TIMED_OUT</code>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AwsJobTimeoutConfig {
    /// <p>Specifies the amount of time, in minutes, this device has to finish execution of this job. The timeout interval can be anywhere between 1 minute and 7 days (1 to 10080 minutes). The in progress timer can't be updated and will apply to all job executions for the job. Whenever a job execution remains in the IN_PROGRESS status for longer than this interval, the job execution will fail and switch to the terminal <code>TIMED_OUT</code> status.</p>
    #[doc(hidden)]
    pub in_progress_timeout_in_minutes: std::option::Option<i64>,
}
impl AwsJobTimeoutConfig {
    /// <p>Specifies the amount of time, in minutes, this device has to finish execution of this job. The timeout interval can be anywhere between 1 minute and 7 days (1 to 10080 minutes). The in progress timer can't be updated and will apply to all job executions for the job. Whenever a job execution remains in the IN_PROGRESS status for longer than this interval, the job execution will fail and switch to the terminal <code>TIMED_OUT</code> status.</p>
    pub fn in_progress_timeout_in_minutes(&self) -> std::option::Option<i64> {
        self.in_progress_timeout_in_minutes
    }
}
impl AwsJobTimeoutConfig {
    /// Creates a new builder-style object to manufacture [`AwsJobTimeoutConfig`](crate::types::AwsJobTimeoutConfig).
    pub fn builder() -> crate::types::builders::AwsJobTimeoutConfigBuilder {
        crate::types::builders::AwsJobTimeoutConfigBuilder::default()
    }
}

/// A builder for [`AwsJobTimeoutConfig`](crate::types::AwsJobTimeoutConfig).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AwsJobTimeoutConfigBuilder {
    pub(crate) in_progress_timeout_in_minutes: std::option::Option<i64>,
}
impl AwsJobTimeoutConfigBuilder {
    /// <p>Specifies the amount of time, in minutes, this device has to finish execution of this job. The timeout interval can be anywhere between 1 minute and 7 days (1 to 10080 minutes). The in progress timer can't be updated and will apply to all job executions for the job. Whenever a job execution remains in the IN_PROGRESS status for longer than this interval, the job execution will fail and switch to the terminal <code>TIMED_OUT</code> status.</p>
    pub fn in_progress_timeout_in_minutes(mut self, input: i64) -> Self {
        self.in_progress_timeout_in_minutes = Some(input);
        self
    }
    /// <p>Specifies the amount of time, in minutes, this device has to finish execution of this job. The timeout interval can be anywhere between 1 minute and 7 days (1 to 10080 minutes). The in progress timer can't be updated and will apply to all job executions for the job. Whenever a job execution remains in the IN_PROGRESS status for longer than this interval, the job execution will fail and switch to the terminal <code>TIMED_OUT</code> status.</p>
    pub fn set_in_progress_timeout_in_minutes(mut self, input: std::option::Option<i64>) -> Self {
        self.in_progress_timeout_in_minutes = input;
        self
    }
    /// Consumes the builder and constructs a [`AwsJobTimeoutConfig`](crate::types::AwsJobTimeoutConfig).
    pub fn build(self) -> crate::types::AwsJobTimeoutConfig {
        crate::types::AwsJobTimeoutConfig {
            in_progress_timeout_in_minutes: self.in_progress_timeout_in_minutes,
        }
    }
}
