// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A log target.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LogTarget {
    /// <p>The target type.</p>
    pub target_type: crate::types::LogTargetType,
    /// <p>The target name.</p>
    pub target_name: ::std::option::Option<::std::string::String>,
}
impl LogTarget {
    /// <p>The target type.</p>
    pub fn target_type(&self) -> &crate::types::LogTargetType {
        &self.target_type
    }
    /// <p>The target name.</p>
    pub fn target_name(&self) -> ::std::option::Option<&str> {
        self.target_name.as_deref()
    }
}
impl LogTarget {
    /// Creates a new builder-style object to manufacture [`LogTarget`](crate::types::LogTarget).
    pub fn builder() -> crate::types::builders::LogTargetBuilder {
        crate::types::builders::LogTargetBuilder::default()
    }
}

/// A builder for [`LogTarget`](crate::types::LogTarget).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct LogTargetBuilder {
    pub(crate) target_type: ::std::option::Option<crate::types::LogTargetType>,
    pub(crate) target_name: ::std::option::Option<::std::string::String>,
}
impl LogTargetBuilder {
    /// <p>The target type.</p>
    /// This field is required.
    pub fn target_type(mut self, input: crate::types::LogTargetType) -> Self {
        self.target_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The target type.</p>
    pub fn set_target_type(mut self, input: ::std::option::Option<crate::types::LogTargetType>) -> Self {
        self.target_type = input;
        self
    }
    /// <p>The target type.</p>
    pub fn get_target_type(&self) -> &::std::option::Option<crate::types::LogTargetType> {
        &self.target_type
    }
    /// <p>The target name.</p>
    pub fn target_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.target_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The target name.</p>
    pub fn set_target_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.target_name = input;
        self
    }
    /// <p>The target name.</p>
    pub fn get_target_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.target_name
    }
    /// Consumes the builder and constructs a [`LogTarget`](crate::types::LogTarget).
    /// This method will fail if any of the following fields are not set:
    /// - [`target_type`](crate::types::builders::LogTargetBuilder::target_type)
    pub fn build(self) -> ::std::result::Result<crate::types::LogTarget, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::LogTarget {
            target_type: self.target_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "target_type",
                    "target_type was not specified but it is required when building LogTarget",
                )
            })?,
            target_name: self.target_name,
        })
    }
}
