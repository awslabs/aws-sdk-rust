// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The job process details.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct JobProcessDetails {
    /// <p>The target devices to which the job execution is being rolled out. This value will be null after the job execution has finished rolling out to all the target devices.</p>
    #[doc(hidden)]
    pub processing_targets: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The number of things that cancelled the job.</p>
    #[doc(hidden)]
    pub number_of_canceled_things: std::option::Option<i32>,
    /// <p>The number of things which successfully completed the job.</p>
    #[doc(hidden)]
    pub number_of_succeeded_things: std::option::Option<i32>,
    /// <p>The number of things that failed executing the job.</p>
    #[doc(hidden)]
    pub number_of_failed_things: std::option::Option<i32>,
    /// <p>The number of things that rejected the job.</p>
    #[doc(hidden)]
    pub number_of_rejected_things: std::option::Option<i32>,
    /// <p>The number of things that are awaiting execution of the job.</p>
    #[doc(hidden)]
    pub number_of_queued_things: std::option::Option<i32>,
    /// <p>The number of things currently executing the job.</p>
    #[doc(hidden)]
    pub number_of_in_progress_things: std::option::Option<i32>,
    /// <p>The number of things that are no longer scheduled to execute the job because they have been deleted or have been removed from the group that was a target of the job.</p>
    #[doc(hidden)]
    pub number_of_removed_things: std::option::Option<i32>,
    /// <p>The number of things whose job execution status is <code>TIMED_OUT</code>.</p>
    #[doc(hidden)]
    pub number_of_timed_out_things: std::option::Option<i32>,
}
impl JobProcessDetails {
    /// <p>The target devices to which the job execution is being rolled out. This value will be null after the job execution has finished rolling out to all the target devices.</p>
    pub fn processing_targets(&self) -> std::option::Option<&[std::string::String]> {
        self.processing_targets.as_deref()
    }
    /// <p>The number of things that cancelled the job.</p>
    pub fn number_of_canceled_things(&self) -> std::option::Option<i32> {
        self.number_of_canceled_things
    }
    /// <p>The number of things which successfully completed the job.</p>
    pub fn number_of_succeeded_things(&self) -> std::option::Option<i32> {
        self.number_of_succeeded_things
    }
    /// <p>The number of things that failed executing the job.</p>
    pub fn number_of_failed_things(&self) -> std::option::Option<i32> {
        self.number_of_failed_things
    }
    /// <p>The number of things that rejected the job.</p>
    pub fn number_of_rejected_things(&self) -> std::option::Option<i32> {
        self.number_of_rejected_things
    }
    /// <p>The number of things that are awaiting execution of the job.</p>
    pub fn number_of_queued_things(&self) -> std::option::Option<i32> {
        self.number_of_queued_things
    }
    /// <p>The number of things currently executing the job.</p>
    pub fn number_of_in_progress_things(&self) -> std::option::Option<i32> {
        self.number_of_in_progress_things
    }
    /// <p>The number of things that are no longer scheduled to execute the job because they have been deleted or have been removed from the group that was a target of the job.</p>
    pub fn number_of_removed_things(&self) -> std::option::Option<i32> {
        self.number_of_removed_things
    }
    /// <p>The number of things whose job execution status is <code>TIMED_OUT</code>.</p>
    pub fn number_of_timed_out_things(&self) -> std::option::Option<i32> {
        self.number_of_timed_out_things
    }
}
impl JobProcessDetails {
    /// Creates a new builder-style object to manufacture [`JobProcessDetails`](crate::types::JobProcessDetails).
    pub fn builder() -> crate::types::builders::JobProcessDetailsBuilder {
        crate::types::builders::JobProcessDetailsBuilder::default()
    }
}

/// A builder for [`JobProcessDetails`](crate::types::JobProcessDetails).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct JobProcessDetailsBuilder {
    pub(crate) processing_targets: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) number_of_canceled_things: std::option::Option<i32>,
    pub(crate) number_of_succeeded_things: std::option::Option<i32>,
    pub(crate) number_of_failed_things: std::option::Option<i32>,
    pub(crate) number_of_rejected_things: std::option::Option<i32>,
    pub(crate) number_of_queued_things: std::option::Option<i32>,
    pub(crate) number_of_in_progress_things: std::option::Option<i32>,
    pub(crate) number_of_removed_things: std::option::Option<i32>,
    pub(crate) number_of_timed_out_things: std::option::Option<i32>,
}
impl JobProcessDetailsBuilder {
    /// Appends an item to `processing_targets`.
    ///
    /// To override the contents of this collection use [`set_processing_targets`](Self::set_processing_targets).
    ///
    /// <p>The target devices to which the job execution is being rolled out. This value will be null after the job execution has finished rolling out to all the target devices.</p>
    pub fn processing_targets(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.processing_targets.unwrap_or_default();
        v.push(input.into());
        self.processing_targets = Some(v);
        self
    }
    /// <p>The target devices to which the job execution is being rolled out. This value will be null after the job execution has finished rolling out to all the target devices.</p>
    pub fn set_processing_targets(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.processing_targets = input;
        self
    }
    /// <p>The number of things that cancelled the job.</p>
    pub fn number_of_canceled_things(mut self, input: i32) -> Self {
        self.number_of_canceled_things = Some(input);
        self
    }
    /// <p>The number of things that cancelled the job.</p>
    pub fn set_number_of_canceled_things(mut self, input: std::option::Option<i32>) -> Self {
        self.number_of_canceled_things = input;
        self
    }
    /// <p>The number of things which successfully completed the job.</p>
    pub fn number_of_succeeded_things(mut self, input: i32) -> Self {
        self.number_of_succeeded_things = Some(input);
        self
    }
    /// <p>The number of things which successfully completed the job.</p>
    pub fn set_number_of_succeeded_things(mut self, input: std::option::Option<i32>) -> Self {
        self.number_of_succeeded_things = input;
        self
    }
    /// <p>The number of things that failed executing the job.</p>
    pub fn number_of_failed_things(mut self, input: i32) -> Self {
        self.number_of_failed_things = Some(input);
        self
    }
    /// <p>The number of things that failed executing the job.</p>
    pub fn set_number_of_failed_things(mut self, input: std::option::Option<i32>) -> Self {
        self.number_of_failed_things = input;
        self
    }
    /// <p>The number of things that rejected the job.</p>
    pub fn number_of_rejected_things(mut self, input: i32) -> Self {
        self.number_of_rejected_things = Some(input);
        self
    }
    /// <p>The number of things that rejected the job.</p>
    pub fn set_number_of_rejected_things(mut self, input: std::option::Option<i32>) -> Self {
        self.number_of_rejected_things = input;
        self
    }
    /// <p>The number of things that are awaiting execution of the job.</p>
    pub fn number_of_queued_things(mut self, input: i32) -> Self {
        self.number_of_queued_things = Some(input);
        self
    }
    /// <p>The number of things that are awaiting execution of the job.</p>
    pub fn set_number_of_queued_things(mut self, input: std::option::Option<i32>) -> Self {
        self.number_of_queued_things = input;
        self
    }
    /// <p>The number of things currently executing the job.</p>
    pub fn number_of_in_progress_things(mut self, input: i32) -> Self {
        self.number_of_in_progress_things = Some(input);
        self
    }
    /// <p>The number of things currently executing the job.</p>
    pub fn set_number_of_in_progress_things(mut self, input: std::option::Option<i32>) -> Self {
        self.number_of_in_progress_things = input;
        self
    }
    /// <p>The number of things that are no longer scheduled to execute the job because they have been deleted or have been removed from the group that was a target of the job.</p>
    pub fn number_of_removed_things(mut self, input: i32) -> Self {
        self.number_of_removed_things = Some(input);
        self
    }
    /// <p>The number of things that are no longer scheduled to execute the job because they have been deleted or have been removed from the group that was a target of the job.</p>
    pub fn set_number_of_removed_things(mut self, input: std::option::Option<i32>) -> Self {
        self.number_of_removed_things = input;
        self
    }
    /// <p>The number of things whose job execution status is <code>TIMED_OUT</code>.</p>
    pub fn number_of_timed_out_things(mut self, input: i32) -> Self {
        self.number_of_timed_out_things = Some(input);
        self
    }
    /// <p>The number of things whose job execution status is <code>TIMED_OUT</code>.</p>
    pub fn set_number_of_timed_out_things(mut self, input: std::option::Option<i32>) -> Self {
        self.number_of_timed_out_things = input;
        self
    }
    /// Consumes the builder and constructs a [`JobProcessDetails`](crate::types::JobProcessDetails).
    pub fn build(self) -> crate::types::JobProcessDetails {
        crate::types::JobProcessDetails {
            processing_targets: self.processing_targets,
            number_of_canceled_things: self.number_of_canceled_things,
            number_of_succeeded_things: self.number_of_succeeded_things,
            number_of_failed_things: self.number_of_failed_things,
            number_of_rejected_things: self.number_of_rejected_things,
            number_of_queued_things: self.number_of_queued_things,
            number_of_in_progress_things: self.number_of_in_progress_things,
            number_of_removed_things: self.number_of_removed_things,
            number_of_timed_out_things: self.number_of_timed_out_things,
        }
    }
}
