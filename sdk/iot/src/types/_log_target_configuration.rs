// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The target configuration.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct LogTargetConfiguration {
    /// <p>A log target</p>
    #[doc(hidden)]
    pub log_target: std::option::Option<crate::types::LogTarget>,
    /// <p>The logging level.</p>
    #[doc(hidden)]
    pub log_level: std::option::Option<crate::types::LogLevel>,
}
impl LogTargetConfiguration {
    /// <p>A log target</p>
    pub fn log_target(&self) -> std::option::Option<&crate::types::LogTarget> {
        self.log_target.as_ref()
    }
    /// <p>The logging level.</p>
    pub fn log_level(&self) -> std::option::Option<&crate::types::LogLevel> {
        self.log_level.as_ref()
    }
}
impl LogTargetConfiguration {
    /// Creates a new builder-style object to manufacture [`LogTargetConfiguration`](crate::types::LogTargetConfiguration).
    pub fn builder() -> crate::types::builders::LogTargetConfigurationBuilder {
        crate::types::builders::LogTargetConfigurationBuilder::default()
    }
}

/// A builder for [`LogTargetConfiguration`](crate::types::LogTargetConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct LogTargetConfigurationBuilder {
    pub(crate) log_target: std::option::Option<crate::types::LogTarget>,
    pub(crate) log_level: std::option::Option<crate::types::LogLevel>,
}
impl LogTargetConfigurationBuilder {
    /// <p>A log target</p>
    pub fn log_target(mut self, input: crate::types::LogTarget) -> Self {
        self.log_target = Some(input);
        self
    }
    /// <p>A log target</p>
    pub fn set_log_target(mut self, input: std::option::Option<crate::types::LogTarget>) -> Self {
        self.log_target = input;
        self
    }
    /// <p>The logging level.</p>
    pub fn log_level(mut self, input: crate::types::LogLevel) -> Self {
        self.log_level = Some(input);
        self
    }
    /// <p>The logging level.</p>
    pub fn set_log_level(mut self, input: std::option::Option<crate::types::LogLevel>) -> Self {
        self.log_level = input;
        self
    }
    /// Consumes the builder and constructs a [`LogTargetConfiguration`](crate::types::LogTargetConfiguration).
    pub fn build(self) -> crate::types::LogTargetConfiguration {
        crate::types::LogTargetConfiguration {
            log_target: self.log_target,
            log_level: self.log_level,
        }
    }
}
