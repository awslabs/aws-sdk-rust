// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A Device Defender security profile behavior.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Behavior {
    /// <p>The name you've given to the behavior.</p>
    pub name: ::std::string::String,
    /// <p>What is measured by the behavior.</p>
    pub metric: ::std::option::Option<::std::string::String>,
    /// <p>The dimension for a metric in your behavior. For example, using a <code>TOPIC_FILTER</code> dimension, you can narrow down the scope of the metric to only MQTT topics where the name matches the pattern specified in the dimension. This can't be used with custom metrics.</p>
    pub metric_dimension: ::std::option::Option<crate::types::MetricDimension>,
    /// <p>The criteria that determine if a device is behaving normally in regard to the <code>metric</code>.</p> <note>
    /// <p>In the IoT console, you can choose to be sent an alert through Amazon SNS when IoT Device Defender detects that a device is behaving anomalously.</p>
    /// </note>
    pub criteria: ::std::option::Option<crate::types::BehaviorCriteria>,
    /// <p> Suppresses alerts. </p>
    pub suppress_alerts: ::std::option::Option<bool>,
}
impl Behavior {
    /// <p>The name you've given to the behavior.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>What is measured by the behavior.</p>
    pub fn metric(&self) -> ::std::option::Option<&str> {
        self.metric.as_deref()
    }
    /// <p>The dimension for a metric in your behavior. For example, using a <code>TOPIC_FILTER</code> dimension, you can narrow down the scope of the metric to only MQTT topics where the name matches the pattern specified in the dimension. This can't be used with custom metrics.</p>
    pub fn metric_dimension(&self) -> ::std::option::Option<&crate::types::MetricDimension> {
        self.metric_dimension.as_ref()
    }
    /// <p>The criteria that determine if a device is behaving normally in regard to the <code>metric</code>.</p> <note>
    /// <p>In the IoT console, you can choose to be sent an alert through Amazon SNS when IoT Device Defender detects that a device is behaving anomalously.</p>
    /// </note>
    pub fn criteria(&self) -> ::std::option::Option<&crate::types::BehaviorCriteria> {
        self.criteria.as_ref()
    }
    /// <p> Suppresses alerts. </p>
    pub fn suppress_alerts(&self) -> ::std::option::Option<bool> {
        self.suppress_alerts
    }
}
impl Behavior {
    /// Creates a new builder-style object to manufacture [`Behavior`](crate::types::Behavior).
    pub fn builder() -> crate::types::builders::BehaviorBuilder {
        crate::types::builders::BehaviorBuilder::default()
    }
}

/// A builder for [`Behavior`](crate::types::Behavior).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct BehaviorBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) metric: ::std::option::Option<::std::string::String>,
    pub(crate) metric_dimension: ::std::option::Option<crate::types::MetricDimension>,
    pub(crate) criteria: ::std::option::Option<crate::types::BehaviorCriteria>,
    pub(crate) suppress_alerts: ::std::option::Option<bool>,
}
impl BehaviorBuilder {
    /// <p>The name you've given to the behavior.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name you've given to the behavior.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name you've given to the behavior.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>What is measured by the behavior.</p>
    pub fn metric(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.metric = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>What is measured by the behavior.</p>
    pub fn set_metric(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.metric = input;
        self
    }
    /// <p>What is measured by the behavior.</p>
    pub fn get_metric(&self) -> &::std::option::Option<::std::string::String> {
        &self.metric
    }
    /// <p>The dimension for a metric in your behavior. For example, using a <code>TOPIC_FILTER</code> dimension, you can narrow down the scope of the metric to only MQTT topics where the name matches the pattern specified in the dimension. This can't be used with custom metrics.</p>
    pub fn metric_dimension(mut self, input: crate::types::MetricDimension) -> Self {
        self.metric_dimension = ::std::option::Option::Some(input);
        self
    }
    /// <p>The dimension for a metric in your behavior. For example, using a <code>TOPIC_FILTER</code> dimension, you can narrow down the scope of the metric to only MQTT topics where the name matches the pattern specified in the dimension. This can't be used with custom metrics.</p>
    pub fn set_metric_dimension(mut self, input: ::std::option::Option<crate::types::MetricDimension>) -> Self {
        self.metric_dimension = input;
        self
    }
    /// <p>The dimension for a metric in your behavior. For example, using a <code>TOPIC_FILTER</code> dimension, you can narrow down the scope of the metric to only MQTT topics where the name matches the pattern specified in the dimension. This can't be used with custom metrics.</p>
    pub fn get_metric_dimension(&self) -> &::std::option::Option<crate::types::MetricDimension> {
        &self.metric_dimension
    }
    /// <p>The criteria that determine if a device is behaving normally in regard to the <code>metric</code>.</p> <note>
    /// <p>In the IoT console, you can choose to be sent an alert through Amazon SNS when IoT Device Defender detects that a device is behaving anomalously.</p>
    /// </note>
    pub fn criteria(mut self, input: crate::types::BehaviorCriteria) -> Self {
        self.criteria = ::std::option::Option::Some(input);
        self
    }
    /// <p>The criteria that determine if a device is behaving normally in regard to the <code>metric</code>.</p> <note>
    /// <p>In the IoT console, you can choose to be sent an alert through Amazon SNS when IoT Device Defender detects that a device is behaving anomalously.</p>
    /// </note>
    pub fn set_criteria(mut self, input: ::std::option::Option<crate::types::BehaviorCriteria>) -> Self {
        self.criteria = input;
        self
    }
    /// <p>The criteria that determine if a device is behaving normally in regard to the <code>metric</code>.</p> <note>
    /// <p>In the IoT console, you can choose to be sent an alert through Amazon SNS when IoT Device Defender detects that a device is behaving anomalously.</p>
    /// </note>
    pub fn get_criteria(&self) -> &::std::option::Option<crate::types::BehaviorCriteria> {
        &self.criteria
    }
    /// <p> Suppresses alerts. </p>
    pub fn suppress_alerts(mut self, input: bool) -> Self {
        self.suppress_alerts = ::std::option::Option::Some(input);
        self
    }
    /// <p> Suppresses alerts. </p>
    pub fn set_suppress_alerts(mut self, input: ::std::option::Option<bool>) -> Self {
        self.suppress_alerts = input;
        self
    }
    /// <p> Suppresses alerts. </p>
    pub fn get_suppress_alerts(&self) -> &::std::option::Option<bool> {
        &self.suppress_alerts
    }
    /// Consumes the builder and constructs a [`Behavior`](crate::types::Behavior).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::BehaviorBuilder::name)
    pub fn build(self) -> ::std::result::Result<crate::types::Behavior, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::Behavior {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building Behavior",
                )
            })?,
            metric: self.metric,
            metric_dimension: self.metric_dimension,
            criteria: self.criteria,
            suppress_alerts: self.suppress_alerts,
        })
    }
}
