// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about an audit mitigation actions task that is returned by <code>ListAuditMitigationActionsTasks</code>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AuditMitigationActionsTaskMetadata {
    /// <p>The unique identifier for the task.</p>
    #[doc(hidden)]
    pub task_id: std::option::Option<std::string::String>,
    /// <p>The time at which the audit mitigation actions task was started.</p>
    #[doc(hidden)]
    pub start_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The current state of the audit mitigation actions task.</p>
    #[doc(hidden)]
    pub task_status: std::option::Option<crate::types::AuditMitigationActionsTaskStatus>,
}
impl AuditMitigationActionsTaskMetadata {
    /// <p>The unique identifier for the task.</p>
    pub fn task_id(&self) -> std::option::Option<&str> {
        self.task_id.as_deref()
    }
    /// <p>The time at which the audit mitigation actions task was started.</p>
    pub fn start_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
    /// <p>The current state of the audit mitigation actions task.</p>
    pub fn task_status(
        &self,
    ) -> std::option::Option<&crate::types::AuditMitigationActionsTaskStatus> {
        self.task_status.as_ref()
    }
}
impl AuditMitigationActionsTaskMetadata {
    /// Creates a new builder-style object to manufacture [`AuditMitigationActionsTaskMetadata`](crate::types::AuditMitigationActionsTaskMetadata).
    pub fn builder() -> crate::types::builders::AuditMitigationActionsTaskMetadataBuilder {
        crate::types::builders::AuditMitigationActionsTaskMetadataBuilder::default()
    }
}

/// A builder for [`AuditMitigationActionsTaskMetadata`](crate::types::AuditMitigationActionsTaskMetadata).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AuditMitigationActionsTaskMetadataBuilder {
    pub(crate) task_id: std::option::Option<std::string::String>,
    pub(crate) start_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) task_status: std::option::Option<crate::types::AuditMitigationActionsTaskStatus>,
}
impl AuditMitigationActionsTaskMetadataBuilder {
    /// <p>The unique identifier for the task.</p>
    pub fn task_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.task_id = Some(input.into());
        self
    }
    /// <p>The unique identifier for the task.</p>
    pub fn set_task_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.task_id = input;
        self
    }
    /// <p>The time at which the audit mitigation actions task was started.</p>
    pub fn start_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.start_time = Some(input);
        self
    }
    /// <p>The time at which the audit mitigation actions task was started.</p>
    pub fn set_start_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.start_time = input;
        self
    }
    /// <p>The current state of the audit mitigation actions task.</p>
    pub fn task_status(mut self, input: crate::types::AuditMitigationActionsTaskStatus) -> Self {
        self.task_status = Some(input);
        self
    }
    /// <p>The current state of the audit mitigation actions task.</p>
    pub fn set_task_status(
        mut self,
        input: std::option::Option<crate::types::AuditMitigationActionsTaskStatus>,
    ) -> Self {
        self.task_status = input;
        self
    }
    /// Consumes the builder and constructs a [`AuditMitigationActionsTaskMetadata`](crate::types::AuditMitigationActionsTaskMetadata).
    pub fn build(self) -> crate::types::AuditMitigationActionsTaskMetadata {
        crate::types::AuditMitigationActionsTaskMetadata {
            task_id: self.task_id,
            start_time: self.start_time,
            task_status: self.task_status,
        }
    }
}
