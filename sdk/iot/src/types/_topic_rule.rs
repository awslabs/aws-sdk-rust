// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a rule.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TopicRule {
    /// <p>The name of the rule.</p>
    pub rule_name: ::std::option::Option<::std::string::String>,
    /// <p>The SQL statement used to query the topic. When using a SQL query with multiple lines, be sure to escape the newline characters.</p>
    pub sql: ::std::option::Option<::std::string::String>,
    /// <p>The description of the rule.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The date and time the rule was created.</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The actions associated with the rule.</p>
    pub actions: ::std::option::Option<::std::vec::Vec<crate::types::Action>>,
    /// <p>Specifies whether the rule is disabled.</p>
    pub rule_disabled: ::std::option::Option<bool>,
    /// <p>The version of the SQL rules engine to use when evaluating the rule.</p>
    pub aws_iot_sql_version: ::std::option::Option<::std::string::String>,
    /// <p>The action to perform when an error occurs.</p>
    pub error_action: ::std::option::Option<crate::types::Action>,
}
impl TopicRule {
    /// <p>The name of the rule.</p>
    pub fn rule_name(&self) -> ::std::option::Option<&str> {
        self.rule_name.as_deref()
    }
    /// <p>The SQL statement used to query the topic. When using a SQL query with multiple lines, be sure to escape the newline characters.</p>
    pub fn sql(&self) -> ::std::option::Option<&str> {
        self.sql.as_deref()
    }
    /// <p>The description of the rule.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The date and time the rule was created.</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The actions associated with the rule.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.actions.is_none()`.
    pub fn actions(&self) -> &[crate::types::Action] {
        self.actions.as_deref().unwrap_or_default()
    }
    /// <p>Specifies whether the rule is disabled.</p>
    pub fn rule_disabled(&self) -> ::std::option::Option<bool> {
        self.rule_disabled
    }
    /// <p>The version of the SQL rules engine to use when evaluating the rule.</p>
    pub fn aws_iot_sql_version(&self) -> ::std::option::Option<&str> {
        self.aws_iot_sql_version.as_deref()
    }
    /// <p>The action to perform when an error occurs.</p>
    pub fn error_action(&self) -> ::std::option::Option<&crate::types::Action> {
        self.error_action.as_ref()
    }
}
impl TopicRule {
    /// Creates a new builder-style object to manufacture [`TopicRule`](crate::types::TopicRule).
    pub fn builder() -> crate::types::builders::TopicRuleBuilder {
        crate::types::builders::TopicRuleBuilder::default()
    }
}

/// A builder for [`TopicRule`](crate::types::TopicRule).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct TopicRuleBuilder {
    pub(crate) rule_name: ::std::option::Option<::std::string::String>,
    pub(crate) sql: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) actions: ::std::option::Option<::std::vec::Vec<crate::types::Action>>,
    pub(crate) rule_disabled: ::std::option::Option<bool>,
    pub(crate) aws_iot_sql_version: ::std::option::Option<::std::string::String>,
    pub(crate) error_action: ::std::option::Option<crate::types::Action>,
}
impl TopicRuleBuilder {
    /// <p>The name of the rule.</p>
    pub fn rule_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.rule_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the rule.</p>
    pub fn set_rule_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.rule_name = input;
        self
    }
    /// <p>The name of the rule.</p>
    pub fn get_rule_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.rule_name
    }
    /// <p>The SQL statement used to query the topic. When using a SQL query with multiple lines, be sure to escape the newline characters.</p>
    pub fn sql(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.sql = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The SQL statement used to query the topic. When using a SQL query with multiple lines, be sure to escape the newline characters.</p>
    pub fn set_sql(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.sql = input;
        self
    }
    /// <p>The SQL statement used to query the topic. When using a SQL query with multiple lines, be sure to escape the newline characters.</p>
    pub fn get_sql(&self) -> &::std::option::Option<::std::string::String> {
        &self.sql
    }
    /// <p>The description of the rule.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the rule.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the rule.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The date and time the rule was created.</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time the rule was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The date and time the rule was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// Appends an item to `actions`.
    ///
    /// To override the contents of this collection use [`set_actions`](Self::set_actions).
    ///
    /// <p>The actions associated with the rule.</p>
    pub fn actions(mut self, input: crate::types::Action) -> Self {
        let mut v = self.actions.unwrap_or_default();
        v.push(input);
        self.actions = ::std::option::Option::Some(v);
        self
    }
    /// <p>The actions associated with the rule.</p>
    pub fn set_actions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Action>>) -> Self {
        self.actions = input;
        self
    }
    /// <p>The actions associated with the rule.</p>
    pub fn get_actions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Action>> {
        &self.actions
    }
    /// <p>Specifies whether the rule is disabled.</p>
    pub fn rule_disabled(mut self, input: bool) -> Self {
        self.rule_disabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether the rule is disabled.</p>
    pub fn set_rule_disabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.rule_disabled = input;
        self
    }
    /// <p>Specifies whether the rule is disabled.</p>
    pub fn get_rule_disabled(&self) -> &::std::option::Option<bool> {
        &self.rule_disabled
    }
    /// <p>The version of the SQL rules engine to use when evaluating the rule.</p>
    pub fn aws_iot_sql_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.aws_iot_sql_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version of the SQL rules engine to use when evaluating the rule.</p>
    pub fn set_aws_iot_sql_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.aws_iot_sql_version = input;
        self
    }
    /// <p>The version of the SQL rules engine to use when evaluating the rule.</p>
    pub fn get_aws_iot_sql_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.aws_iot_sql_version
    }
    /// <p>The action to perform when an error occurs.</p>
    pub fn error_action(mut self, input: crate::types::Action) -> Self {
        self.error_action = ::std::option::Option::Some(input);
        self
    }
    /// <p>The action to perform when an error occurs.</p>
    pub fn set_error_action(mut self, input: ::std::option::Option<crate::types::Action>) -> Self {
        self.error_action = input;
        self
    }
    /// <p>The action to perform when an error occurs.</p>
    pub fn get_error_action(&self) -> &::std::option::Option<crate::types::Action> {
        &self.error_action
    }
    /// Consumes the builder and constructs a [`TopicRule`](crate::types::TopicRule).
    pub fn build(self) -> crate::types::TopicRule {
        crate::types::TopicRule {
            rule_name: self.rule_name,
            sql: self.sql,
            description: self.description,
            created_at: self.created_at,
            actions: self.actions,
            rule_disabled: self.rule_disabled,
            aws_iot_sql_version: self.aws_iot_sql_version,
            error_action: self.error_action,
        }
    }
}
