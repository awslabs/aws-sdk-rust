// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes an action that updates a CloudWatch alarm.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CloudwatchAlarmAction {
    /// <p>The IAM role that allows access to the CloudWatch alarm.</p>
    pub role_arn: ::std::string::String,
    /// <p>The CloudWatch alarm name.</p>
    pub alarm_name: ::std::string::String,
    /// <p>The reason for the alarm change.</p>
    pub state_reason: ::std::string::String,
    /// <p>The value of the alarm state. Acceptable values are: OK, ALARM, INSUFFICIENT_DATA.</p>
    pub state_value: ::std::string::String,
}
impl CloudwatchAlarmAction {
    /// <p>The IAM role that allows access to the CloudWatch alarm.</p>
    pub fn role_arn(&self) -> &str {
        use std::ops::Deref;
        self.role_arn.deref()
    }
    /// <p>The CloudWatch alarm name.</p>
    pub fn alarm_name(&self) -> &str {
        use std::ops::Deref;
        self.alarm_name.deref()
    }
    /// <p>The reason for the alarm change.</p>
    pub fn state_reason(&self) -> &str {
        use std::ops::Deref;
        self.state_reason.deref()
    }
    /// <p>The value of the alarm state. Acceptable values are: OK, ALARM, INSUFFICIENT_DATA.</p>
    pub fn state_value(&self) -> &str {
        use std::ops::Deref;
        self.state_value.deref()
    }
}
impl CloudwatchAlarmAction {
    /// Creates a new builder-style object to manufacture [`CloudwatchAlarmAction`](crate::types::CloudwatchAlarmAction).
    pub fn builder() -> crate::types::builders::CloudwatchAlarmActionBuilder {
        crate::types::builders::CloudwatchAlarmActionBuilder::default()
    }
}

/// A builder for [`CloudwatchAlarmAction`](crate::types::CloudwatchAlarmAction).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CloudwatchAlarmActionBuilder {
    pub(crate) role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) alarm_name: ::std::option::Option<::std::string::String>,
    pub(crate) state_reason: ::std::option::Option<::std::string::String>,
    pub(crate) state_value: ::std::option::Option<::std::string::String>,
}
impl CloudwatchAlarmActionBuilder {
    /// <p>The IAM role that allows access to the CloudWatch alarm.</p>
    /// This field is required.
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The IAM role that allows access to the CloudWatch alarm.</p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The IAM role that allows access to the CloudWatch alarm.</p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn
    }
    /// <p>The CloudWatch alarm name.</p>
    /// This field is required.
    pub fn alarm_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.alarm_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The CloudWatch alarm name.</p>
    pub fn set_alarm_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.alarm_name = input;
        self
    }
    /// <p>The CloudWatch alarm name.</p>
    pub fn get_alarm_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.alarm_name
    }
    /// <p>The reason for the alarm change.</p>
    /// This field is required.
    pub fn state_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.state_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The reason for the alarm change.</p>
    pub fn set_state_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.state_reason = input;
        self
    }
    /// <p>The reason for the alarm change.</p>
    pub fn get_state_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.state_reason
    }
    /// <p>The value of the alarm state. Acceptable values are: OK, ALARM, INSUFFICIENT_DATA.</p>
    /// This field is required.
    pub fn state_value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.state_value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The value of the alarm state. Acceptable values are: OK, ALARM, INSUFFICIENT_DATA.</p>
    pub fn set_state_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.state_value = input;
        self
    }
    /// <p>The value of the alarm state. Acceptable values are: OK, ALARM, INSUFFICIENT_DATA.</p>
    pub fn get_state_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.state_value
    }
    /// Consumes the builder and constructs a [`CloudwatchAlarmAction`](crate::types::CloudwatchAlarmAction).
    /// This method will fail if any of the following fields are not set:
    /// - [`role_arn`](crate::types::builders::CloudwatchAlarmActionBuilder::role_arn)
    /// - [`alarm_name`](crate::types::builders::CloudwatchAlarmActionBuilder::alarm_name)
    /// - [`state_reason`](crate::types::builders::CloudwatchAlarmActionBuilder::state_reason)
    /// - [`state_value`](crate::types::builders::CloudwatchAlarmActionBuilder::state_value)
    pub fn build(self) -> ::std::result::Result<crate::types::CloudwatchAlarmAction, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CloudwatchAlarmAction {
            role_arn: self.role_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "role_arn",
                    "role_arn was not specified but it is required when building CloudwatchAlarmAction",
                )
            })?,
            alarm_name: self.alarm_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "alarm_name",
                    "alarm_name was not specified but it is required when building CloudwatchAlarmAction",
                )
            })?,
            state_reason: self.state_reason.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "state_reason",
                    "state_reason was not specified but it is required when building CloudwatchAlarmAction",
                )
            })?,
            state_value: self.state_value.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "state_value",
                    "state_value was not specified but it is required when building CloudwatchAlarmAction",
                )
            })?,
        })
    }
}
