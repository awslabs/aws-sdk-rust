// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes an action that updates a CloudWatch alarm.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CloudwatchAlarmAction {
    /// <p>The IAM role that allows access to the CloudWatch alarm.</p>
    #[doc(hidden)]
    pub role_arn: std::option::Option<std::string::String>,
    /// <p>The CloudWatch alarm name.</p>
    #[doc(hidden)]
    pub alarm_name: std::option::Option<std::string::String>,
    /// <p>The reason for the alarm change.</p>
    #[doc(hidden)]
    pub state_reason: std::option::Option<std::string::String>,
    /// <p>The value of the alarm state. Acceptable values are: OK, ALARM, INSUFFICIENT_DATA.</p>
    #[doc(hidden)]
    pub state_value: std::option::Option<std::string::String>,
}
impl CloudwatchAlarmAction {
    /// <p>The IAM role that allows access to the CloudWatch alarm.</p>
    pub fn role_arn(&self) -> std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>The CloudWatch alarm name.</p>
    pub fn alarm_name(&self) -> std::option::Option<&str> {
        self.alarm_name.as_deref()
    }
    /// <p>The reason for the alarm change.</p>
    pub fn state_reason(&self) -> std::option::Option<&str> {
        self.state_reason.as_deref()
    }
    /// <p>The value of the alarm state. Acceptable values are: OK, ALARM, INSUFFICIENT_DATA.</p>
    pub fn state_value(&self) -> std::option::Option<&str> {
        self.state_value.as_deref()
    }
}
impl CloudwatchAlarmAction {
    /// Creates a new builder-style object to manufacture [`CloudwatchAlarmAction`](crate::types::CloudwatchAlarmAction).
    pub fn builder() -> crate::types::builders::CloudwatchAlarmActionBuilder {
        crate::types::builders::CloudwatchAlarmActionBuilder::default()
    }
}

/// A builder for [`CloudwatchAlarmAction`](crate::types::CloudwatchAlarmAction).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CloudwatchAlarmActionBuilder {
    pub(crate) role_arn: std::option::Option<std::string::String>,
    pub(crate) alarm_name: std::option::Option<std::string::String>,
    pub(crate) state_reason: std::option::Option<std::string::String>,
    pub(crate) state_value: std::option::Option<std::string::String>,
}
impl CloudwatchAlarmActionBuilder {
    /// <p>The IAM role that allows access to the CloudWatch alarm.</p>
    pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.role_arn = Some(input.into());
        self
    }
    /// <p>The IAM role that allows access to the CloudWatch alarm.</p>
    pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The CloudWatch alarm name.</p>
    pub fn alarm_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.alarm_name = Some(input.into());
        self
    }
    /// <p>The CloudWatch alarm name.</p>
    pub fn set_alarm_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.alarm_name = input;
        self
    }
    /// <p>The reason for the alarm change.</p>
    pub fn state_reason(mut self, input: impl Into<std::string::String>) -> Self {
        self.state_reason = Some(input.into());
        self
    }
    /// <p>The reason for the alarm change.</p>
    pub fn set_state_reason(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.state_reason = input;
        self
    }
    /// <p>The value of the alarm state. Acceptable values are: OK, ALARM, INSUFFICIENT_DATA.</p>
    pub fn state_value(mut self, input: impl Into<std::string::String>) -> Self {
        self.state_value = Some(input.into());
        self
    }
    /// <p>The value of the alarm state. Acceptable values are: OK, ALARM, INSUFFICIENT_DATA.</p>
    pub fn set_state_value(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.state_value = input;
        self
    }
    /// Consumes the builder and constructs a [`CloudwatchAlarmAction`](crate::types::CloudwatchAlarmAction).
    pub fn build(self) -> crate::types::CloudwatchAlarmAction {
        crate::types::CloudwatchAlarmAction {
            role_arn: self.role_arn,
            alarm_name: self.alarm_name,
            state_reason: self.state_reason,
            state_value: self.state_value,
        }
    }
}
