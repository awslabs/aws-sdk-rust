// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a custom method used to code sign a file.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CustomCodeSigning {
    /// <p>The signature for the file.</p>
    #[doc(hidden)]
    pub signature: std::option::Option<crate::types::CodeSigningSignature>,
    /// <p>The certificate chain.</p>
    #[doc(hidden)]
    pub certificate_chain: std::option::Option<crate::types::CodeSigningCertificateChain>,
    /// <p>The hash algorithm used to code sign the file. You can use a string as the algorithm name if the target over-the-air (OTA) update devices are able to verify the signature that was generated using the same signature algorithm. For example, FreeRTOS uses <code>SHA256</code> or <code>SHA1</code>, so you can pass either of them based on which was used for generating the signature.</p>
    #[doc(hidden)]
    pub hash_algorithm: std::option::Option<std::string::String>,
    /// <p>The signature algorithm used to code sign the file. You can use a string as the algorithm name if the target over-the-air (OTA) update devices are able to verify the signature that was generated using the same signature algorithm. For example, FreeRTOS uses <code>ECDSA</code> or <code>RSA</code>, so you can pass either of them based on which was used for generating the signature.</p>
    #[doc(hidden)]
    pub signature_algorithm: std::option::Option<std::string::String>,
}
impl CustomCodeSigning {
    /// <p>The signature for the file.</p>
    pub fn signature(&self) -> std::option::Option<&crate::types::CodeSigningSignature> {
        self.signature.as_ref()
    }
    /// <p>The certificate chain.</p>
    pub fn certificate_chain(
        &self,
    ) -> std::option::Option<&crate::types::CodeSigningCertificateChain> {
        self.certificate_chain.as_ref()
    }
    /// <p>The hash algorithm used to code sign the file. You can use a string as the algorithm name if the target over-the-air (OTA) update devices are able to verify the signature that was generated using the same signature algorithm. For example, FreeRTOS uses <code>SHA256</code> or <code>SHA1</code>, so you can pass either of them based on which was used for generating the signature.</p>
    pub fn hash_algorithm(&self) -> std::option::Option<&str> {
        self.hash_algorithm.as_deref()
    }
    /// <p>The signature algorithm used to code sign the file. You can use a string as the algorithm name if the target over-the-air (OTA) update devices are able to verify the signature that was generated using the same signature algorithm. For example, FreeRTOS uses <code>ECDSA</code> or <code>RSA</code>, so you can pass either of them based on which was used for generating the signature.</p>
    pub fn signature_algorithm(&self) -> std::option::Option<&str> {
        self.signature_algorithm.as_deref()
    }
}
impl CustomCodeSigning {
    /// Creates a new builder-style object to manufacture [`CustomCodeSigning`](crate::types::CustomCodeSigning).
    pub fn builder() -> crate::types::builders::CustomCodeSigningBuilder {
        crate::types::builders::CustomCodeSigningBuilder::default()
    }
}

/// A builder for [`CustomCodeSigning`](crate::types::CustomCodeSigning).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CustomCodeSigningBuilder {
    pub(crate) signature: std::option::Option<crate::types::CodeSigningSignature>,
    pub(crate) certificate_chain: std::option::Option<crate::types::CodeSigningCertificateChain>,
    pub(crate) hash_algorithm: std::option::Option<std::string::String>,
    pub(crate) signature_algorithm: std::option::Option<std::string::String>,
}
impl CustomCodeSigningBuilder {
    /// <p>The signature for the file.</p>
    pub fn signature(mut self, input: crate::types::CodeSigningSignature) -> Self {
        self.signature = Some(input);
        self
    }
    /// <p>The signature for the file.</p>
    pub fn set_signature(
        mut self,
        input: std::option::Option<crate::types::CodeSigningSignature>,
    ) -> Self {
        self.signature = input;
        self
    }
    /// <p>The certificate chain.</p>
    pub fn certificate_chain(mut self, input: crate::types::CodeSigningCertificateChain) -> Self {
        self.certificate_chain = Some(input);
        self
    }
    /// <p>The certificate chain.</p>
    pub fn set_certificate_chain(
        mut self,
        input: std::option::Option<crate::types::CodeSigningCertificateChain>,
    ) -> Self {
        self.certificate_chain = input;
        self
    }
    /// <p>The hash algorithm used to code sign the file. You can use a string as the algorithm name if the target over-the-air (OTA) update devices are able to verify the signature that was generated using the same signature algorithm. For example, FreeRTOS uses <code>SHA256</code> or <code>SHA1</code>, so you can pass either of them based on which was used for generating the signature.</p>
    pub fn hash_algorithm(mut self, input: impl Into<std::string::String>) -> Self {
        self.hash_algorithm = Some(input.into());
        self
    }
    /// <p>The hash algorithm used to code sign the file. You can use a string as the algorithm name if the target over-the-air (OTA) update devices are able to verify the signature that was generated using the same signature algorithm. For example, FreeRTOS uses <code>SHA256</code> or <code>SHA1</code>, so you can pass either of them based on which was used for generating the signature.</p>
    pub fn set_hash_algorithm(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.hash_algorithm = input;
        self
    }
    /// <p>The signature algorithm used to code sign the file. You can use a string as the algorithm name if the target over-the-air (OTA) update devices are able to verify the signature that was generated using the same signature algorithm. For example, FreeRTOS uses <code>ECDSA</code> or <code>RSA</code>, so you can pass either of them based on which was used for generating the signature.</p>
    pub fn signature_algorithm(mut self, input: impl Into<std::string::String>) -> Self {
        self.signature_algorithm = Some(input.into());
        self
    }
    /// <p>The signature algorithm used to code sign the file. You can use a string as the algorithm name if the target over-the-air (OTA) update devices are able to verify the signature that was generated using the same signature algorithm. For example, FreeRTOS uses <code>ECDSA</code> or <code>RSA</code>, so you can pass either of them based on which was used for generating the signature.</p>
    pub fn set_signature_algorithm(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.signature_algorithm = input;
        self
    }
    /// Consumes the builder and constructs a [`CustomCodeSigning`](crate::types::CustomCodeSigning).
    pub fn build(self) -> crate::types::CustomCodeSigning {
        crate::types::CustomCodeSigning {
            signature: self.signature,
            certificate_chain: self.certificate_chain,
            hash_algorithm: self.hash_algorithm,
            signature_algorithm: self.signature_algorithm,
        }
    }
}
