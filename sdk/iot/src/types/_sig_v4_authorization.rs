// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4 signing process</a>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SigV4Authorization {
    /// <p>The signing region.</p>
    #[doc(hidden)]
    pub signing_region: std::option::Option<std::string::String>,
    /// <p>The service name to use while signing with Sig V4.</p>
    #[doc(hidden)]
    pub service_name: std::option::Option<std::string::String>,
    /// <p>The ARN of the signing role.</p>
    #[doc(hidden)]
    pub role_arn: std::option::Option<std::string::String>,
}
impl SigV4Authorization {
    /// <p>The signing region.</p>
    pub fn signing_region(&self) -> std::option::Option<&str> {
        self.signing_region.as_deref()
    }
    /// <p>The service name to use while signing with Sig V4.</p>
    pub fn service_name(&self) -> std::option::Option<&str> {
        self.service_name.as_deref()
    }
    /// <p>The ARN of the signing role.</p>
    pub fn role_arn(&self) -> std::option::Option<&str> {
        self.role_arn.as_deref()
    }
}
impl SigV4Authorization {
    /// Creates a new builder-style object to manufacture [`SigV4Authorization`](crate::types::SigV4Authorization).
    pub fn builder() -> crate::types::builders::SigV4AuthorizationBuilder {
        crate::types::builders::SigV4AuthorizationBuilder::default()
    }
}

/// A builder for [`SigV4Authorization`](crate::types::SigV4Authorization).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SigV4AuthorizationBuilder {
    pub(crate) signing_region: std::option::Option<std::string::String>,
    pub(crate) service_name: std::option::Option<std::string::String>,
    pub(crate) role_arn: std::option::Option<std::string::String>,
}
impl SigV4AuthorizationBuilder {
    /// <p>The signing region.</p>
    pub fn signing_region(mut self, input: impl Into<std::string::String>) -> Self {
        self.signing_region = Some(input.into());
        self
    }
    /// <p>The signing region.</p>
    pub fn set_signing_region(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.signing_region = input;
        self
    }
    /// <p>The service name to use while signing with Sig V4.</p>
    pub fn service_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.service_name = Some(input.into());
        self
    }
    /// <p>The service name to use while signing with Sig V4.</p>
    pub fn set_service_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.service_name = input;
        self
    }
    /// <p>The ARN of the signing role.</p>
    pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.role_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the signing role.</p>
    pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// Consumes the builder and constructs a [`SigV4Authorization`](crate::types::SigV4Authorization).
    pub fn build(self) -> crate::types::SigV4Authorization {
        crate::types::SigV4Authorization {
            signing_region: self.signing_region,
            service_name: self.service_name,
            role_arn: self.role_arn,
        }
    }
}
