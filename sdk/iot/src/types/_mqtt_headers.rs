// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies MQTT Version 5.0 headers information. For more information, see <a href="https://docs.aws.amazon.com/iot/latest/developerguide/mqtt.html"> MQTT</a> from Amazon Web Services IoT Core Developer Guide.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MqttHeaders {
    /// <p>An <code>Enum</code> string value that indicates whether the payload is formatted as UTF-8.</p>
    /// <p>Valid values are <code>UNSPECIFIED_BYTES</code> and <code>UTF8_DATA</code>.</p>
    /// <p>For more information, see <a href="https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901111"> Payload Format Indicator</a> from the MQTT Version 5.0 specification.</p>
    /// <p>Supports <a href="https://docs.aws.amazon.com/iot/latest/developerguide/iot-substitution-templates.html">substitution templates</a>.</p>
    pub payload_format_indicator: ::std::option::Option<::std::string::String>,
    /// <p>A UTF-8 encoded string that describes the content of the publishing message.</p>
    /// <p>For more information, see <a href="https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901118"> Content Type</a> from the MQTT Version 5.0 specification.</p>
    /// <p>Supports <a href="https://docs.aws.amazon.com/iot/latest/developerguide/iot-substitution-templates.html">substitution templates</a>.</p>
    pub content_type: ::std::option::Option<::std::string::String>,
    /// <p>A UTF-8 encoded string that's used as the topic name for a response message. The response topic is used to describe the topic which the receiver should publish to as part of the request-response flow. The topic must not contain wildcard characters.</p>
    /// <p>For more information, see <a href="https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901114"> Response Topic</a> from the MQTT Version 5.0 specification.</p>
    /// <p>Supports <a href="https://docs.aws.amazon.com/iot/latest/developerguide/iot-substitution-templates.html">substitution templates</a>.</p>
    pub response_topic: ::std::option::Option<::std::string::String>,
    /// <p>The base64-encoded binary data used by the sender of the request message to identify which request the response message is for when it's received.</p>
    /// <p>For more information, see <a href="https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901115"> Correlation Data</a> from the MQTT Version 5.0 specification.</p> <note>
    /// <p> This binary data must be based64-encoded. </p>
    /// </note>
    /// <p>Supports <a href="https://docs.aws.amazon.com/iot/latest/developerguide/iot-substitution-templates.html">substitution templates</a>.</p>
    pub correlation_data: ::std::option::Option<::std::string::String>,
    /// <p>A user-defined integer value that will persist a message at the message broker for a specified amount of time to ensure that the message will expire if it's no longer relevant to the subscriber. The value of <code>messageExpiry</code> represents the number of seconds before it expires. For more information about the limits of <code>messageExpiry</code>, see <a href="https://docs.aws.amazon.com/iot/latest/developerguide/mqtt.html">Amazon Web Services IoT Core message broker and protocol limits and quotas </a> from the Amazon Web Services Reference Guide.</p>
    /// <p>Supports <a href="https://docs.aws.amazon.com/iot/latest/developerguide/iot-substitution-templates.html">substitution templates</a>.</p>
    pub message_expiry: ::std::option::Option<::std::string::String>,
    /// <p>An array of key-value pairs that you define in the MQTT5 header.</p>
    pub user_properties: ::std::option::Option<::std::vec::Vec<crate::types::UserProperty>>,
}
impl MqttHeaders {
    /// <p>An <code>Enum</code> string value that indicates whether the payload is formatted as UTF-8.</p>
    /// <p>Valid values are <code>UNSPECIFIED_BYTES</code> and <code>UTF8_DATA</code>.</p>
    /// <p>For more information, see <a href="https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901111"> Payload Format Indicator</a> from the MQTT Version 5.0 specification.</p>
    /// <p>Supports <a href="https://docs.aws.amazon.com/iot/latest/developerguide/iot-substitution-templates.html">substitution templates</a>.</p>
    pub fn payload_format_indicator(&self) -> ::std::option::Option<&str> {
        self.payload_format_indicator.as_deref()
    }
    /// <p>A UTF-8 encoded string that describes the content of the publishing message.</p>
    /// <p>For more information, see <a href="https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901118"> Content Type</a> from the MQTT Version 5.0 specification.</p>
    /// <p>Supports <a href="https://docs.aws.amazon.com/iot/latest/developerguide/iot-substitution-templates.html">substitution templates</a>.</p>
    pub fn content_type(&self) -> ::std::option::Option<&str> {
        self.content_type.as_deref()
    }
    /// <p>A UTF-8 encoded string that's used as the topic name for a response message. The response topic is used to describe the topic which the receiver should publish to as part of the request-response flow. The topic must not contain wildcard characters.</p>
    /// <p>For more information, see <a href="https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901114"> Response Topic</a> from the MQTT Version 5.0 specification.</p>
    /// <p>Supports <a href="https://docs.aws.amazon.com/iot/latest/developerguide/iot-substitution-templates.html">substitution templates</a>.</p>
    pub fn response_topic(&self) -> ::std::option::Option<&str> {
        self.response_topic.as_deref()
    }
    /// <p>The base64-encoded binary data used by the sender of the request message to identify which request the response message is for when it's received.</p>
    /// <p>For more information, see <a href="https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901115"> Correlation Data</a> from the MQTT Version 5.0 specification.</p> <note>
    /// <p> This binary data must be based64-encoded. </p>
    /// </note>
    /// <p>Supports <a href="https://docs.aws.amazon.com/iot/latest/developerguide/iot-substitution-templates.html">substitution templates</a>.</p>
    pub fn correlation_data(&self) -> ::std::option::Option<&str> {
        self.correlation_data.as_deref()
    }
    /// <p>A user-defined integer value that will persist a message at the message broker for a specified amount of time to ensure that the message will expire if it's no longer relevant to the subscriber. The value of <code>messageExpiry</code> represents the number of seconds before it expires. For more information about the limits of <code>messageExpiry</code>, see <a href="https://docs.aws.amazon.com/iot/latest/developerguide/mqtt.html">Amazon Web Services IoT Core message broker and protocol limits and quotas </a> from the Amazon Web Services Reference Guide.</p>
    /// <p>Supports <a href="https://docs.aws.amazon.com/iot/latest/developerguide/iot-substitution-templates.html">substitution templates</a>.</p>
    pub fn message_expiry(&self) -> ::std::option::Option<&str> {
        self.message_expiry.as_deref()
    }
    /// <p>An array of key-value pairs that you define in the MQTT5 header.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.user_properties.is_none()`.
    pub fn user_properties(&self) -> &[crate::types::UserProperty] {
        self.user_properties.as_deref().unwrap_or_default()
    }
}
impl MqttHeaders {
    /// Creates a new builder-style object to manufacture [`MqttHeaders`](crate::types::MqttHeaders).
    pub fn builder() -> crate::types::builders::MqttHeadersBuilder {
        crate::types::builders::MqttHeadersBuilder::default()
    }
}

/// A builder for [`MqttHeaders`](crate::types::MqttHeaders).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct MqttHeadersBuilder {
    pub(crate) payload_format_indicator: ::std::option::Option<::std::string::String>,
    pub(crate) content_type: ::std::option::Option<::std::string::String>,
    pub(crate) response_topic: ::std::option::Option<::std::string::String>,
    pub(crate) correlation_data: ::std::option::Option<::std::string::String>,
    pub(crate) message_expiry: ::std::option::Option<::std::string::String>,
    pub(crate) user_properties: ::std::option::Option<::std::vec::Vec<crate::types::UserProperty>>,
}
impl MqttHeadersBuilder {
    /// <p>An <code>Enum</code> string value that indicates whether the payload is formatted as UTF-8.</p>
    /// <p>Valid values are <code>UNSPECIFIED_BYTES</code> and <code>UTF8_DATA</code>.</p>
    /// <p>For more information, see <a href="https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901111"> Payload Format Indicator</a> from the MQTT Version 5.0 specification.</p>
    /// <p>Supports <a href="https://docs.aws.amazon.com/iot/latest/developerguide/iot-substitution-templates.html">substitution templates</a>.</p>
    pub fn payload_format_indicator(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.payload_format_indicator = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An <code>Enum</code> string value that indicates whether the payload is formatted as UTF-8.</p>
    /// <p>Valid values are <code>UNSPECIFIED_BYTES</code> and <code>UTF8_DATA</code>.</p>
    /// <p>For more information, see <a href="https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901111"> Payload Format Indicator</a> from the MQTT Version 5.0 specification.</p>
    /// <p>Supports <a href="https://docs.aws.amazon.com/iot/latest/developerguide/iot-substitution-templates.html">substitution templates</a>.</p>
    pub fn set_payload_format_indicator(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.payload_format_indicator = input;
        self
    }
    /// <p>An <code>Enum</code> string value that indicates whether the payload is formatted as UTF-8.</p>
    /// <p>Valid values are <code>UNSPECIFIED_BYTES</code> and <code>UTF8_DATA</code>.</p>
    /// <p>For more information, see <a href="https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901111"> Payload Format Indicator</a> from the MQTT Version 5.0 specification.</p>
    /// <p>Supports <a href="https://docs.aws.amazon.com/iot/latest/developerguide/iot-substitution-templates.html">substitution templates</a>.</p>
    pub fn get_payload_format_indicator(&self) -> &::std::option::Option<::std::string::String> {
        &self.payload_format_indicator
    }
    /// <p>A UTF-8 encoded string that describes the content of the publishing message.</p>
    /// <p>For more information, see <a href="https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901118"> Content Type</a> from the MQTT Version 5.0 specification.</p>
    /// <p>Supports <a href="https://docs.aws.amazon.com/iot/latest/developerguide/iot-substitution-templates.html">substitution templates</a>.</p>
    pub fn content_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.content_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A UTF-8 encoded string that describes the content of the publishing message.</p>
    /// <p>For more information, see <a href="https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901118"> Content Type</a> from the MQTT Version 5.0 specification.</p>
    /// <p>Supports <a href="https://docs.aws.amazon.com/iot/latest/developerguide/iot-substitution-templates.html">substitution templates</a>.</p>
    pub fn set_content_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.content_type = input;
        self
    }
    /// <p>A UTF-8 encoded string that describes the content of the publishing message.</p>
    /// <p>For more information, see <a href="https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901118"> Content Type</a> from the MQTT Version 5.0 specification.</p>
    /// <p>Supports <a href="https://docs.aws.amazon.com/iot/latest/developerguide/iot-substitution-templates.html">substitution templates</a>.</p>
    pub fn get_content_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.content_type
    }
    /// <p>A UTF-8 encoded string that's used as the topic name for a response message. The response topic is used to describe the topic which the receiver should publish to as part of the request-response flow. The topic must not contain wildcard characters.</p>
    /// <p>For more information, see <a href="https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901114"> Response Topic</a> from the MQTT Version 5.0 specification.</p>
    /// <p>Supports <a href="https://docs.aws.amazon.com/iot/latest/developerguide/iot-substitution-templates.html">substitution templates</a>.</p>
    pub fn response_topic(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.response_topic = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A UTF-8 encoded string that's used as the topic name for a response message. The response topic is used to describe the topic which the receiver should publish to as part of the request-response flow. The topic must not contain wildcard characters.</p>
    /// <p>For more information, see <a href="https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901114"> Response Topic</a> from the MQTT Version 5.0 specification.</p>
    /// <p>Supports <a href="https://docs.aws.amazon.com/iot/latest/developerguide/iot-substitution-templates.html">substitution templates</a>.</p>
    pub fn set_response_topic(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.response_topic = input;
        self
    }
    /// <p>A UTF-8 encoded string that's used as the topic name for a response message. The response topic is used to describe the topic which the receiver should publish to as part of the request-response flow. The topic must not contain wildcard characters.</p>
    /// <p>For more information, see <a href="https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901114"> Response Topic</a> from the MQTT Version 5.0 specification.</p>
    /// <p>Supports <a href="https://docs.aws.amazon.com/iot/latest/developerguide/iot-substitution-templates.html">substitution templates</a>.</p>
    pub fn get_response_topic(&self) -> &::std::option::Option<::std::string::String> {
        &self.response_topic
    }
    /// <p>The base64-encoded binary data used by the sender of the request message to identify which request the response message is for when it's received.</p>
    /// <p>For more information, see <a href="https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901115"> Correlation Data</a> from the MQTT Version 5.0 specification.</p> <note>
    /// <p> This binary data must be based64-encoded. </p>
    /// </note>
    /// <p>Supports <a href="https://docs.aws.amazon.com/iot/latest/developerguide/iot-substitution-templates.html">substitution templates</a>.</p>
    pub fn correlation_data(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.correlation_data = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The base64-encoded binary data used by the sender of the request message to identify which request the response message is for when it's received.</p>
    /// <p>For more information, see <a href="https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901115"> Correlation Data</a> from the MQTT Version 5.0 specification.</p> <note>
    /// <p> This binary data must be based64-encoded. </p>
    /// </note>
    /// <p>Supports <a href="https://docs.aws.amazon.com/iot/latest/developerguide/iot-substitution-templates.html">substitution templates</a>.</p>
    pub fn set_correlation_data(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.correlation_data = input;
        self
    }
    /// <p>The base64-encoded binary data used by the sender of the request message to identify which request the response message is for when it's received.</p>
    /// <p>For more information, see <a href="https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901115"> Correlation Data</a> from the MQTT Version 5.0 specification.</p> <note>
    /// <p> This binary data must be based64-encoded. </p>
    /// </note>
    /// <p>Supports <a href="https://docs.aws.amazon.com/iot/latest/developerguide/iot-substitution-templates.html">substitution templates</a>.</p>
    pub fn get_correlation_data(&self) -> &::std::option::Option<::std::string::String> {
        &self.correlation_data
    }
    /// <p>A user-defined integer value that will persist a message at the message broker for a specified amount of time to ensure that the message will expire if it's no longer relevant to the subscriber. The value of <code>messageExpiry</code> represents the number of seconds before it expires. For more information about the limits of <code>messageExpiry</code>, see <a href="https://docs.aws.amazon.com/iot/latest/developerguide/mqtt.html">Amazon Web Services IoT Core message broker and protocol limits and quotas </a> from the Amazon Web Services Reference Guide.</p>
    /// <p>Supports <a href="https://docs.aws.amazon.com/iot/latest/developerguide/iot-substitution-templates.html">substitution templates</a>.</p>
    pub fn message_expiry(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.message_expiry = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A user-defined integer value that will persist a message at the message broker for a specified amount of time to ensure that the message will expire if it's no longer relevant to the subscriber. The value of <code>messageExpiry</code> represents the number of seconds before it expires. For more information about the limits of <code>messageExpiry</code>, see <a href="https://docs.aws.amazon.com/iot/latest/developerguide/mqtt.html">Amazon Web Services IoT Core message broker and protocol limits and quotas </a> from the Amazon Web Services Reference Guide.</p>
    /// <p>Supports <a href="https://docs.aws.amazon.com/iot/latest/developerguide/iot-substitution-templates.html">substitution templates</a>.</p>
    pub fn set_message_expiry(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.message_expiry = input;
        self
    }
    /// <p>A user-defined integer value that will persist a message at the message broker for a specified amount of time to ensure that the message will expire if it's no longer relevant to the subscriber. The value of <code>messageExpiry</code> represents the number of seconds before it expires. For more information about the limits of <code>messageExpiry</code>, see <a href="https://docs.aws.amazon.com/iot/latest/developerguide/mqtt.html">Amazon Web Services IoT Core message broker and protocol limits and quotas </a> from the Amazon Web Services Reference Guide.</p>
    /// <p>Supports <a href="https://docs.aws.amazon.com/iot/latest/developerguide/iot-substitution-templates.html">substitution templates</a>.</p>
    pub fn get_message_expiry(&self) -> &::std::option::Option<::std::string::String> {
        &self.message_expiry
    }
    /// Appends an item to `user_properties`.
    ///
    /// To override the contents of this collection use [`set_user_properties`](Self::set_user_properties).
    ///
    /// <p>An array of key-value pairs that you define in the MQTT5 header.</p>
    pub fn user_properties(mut self, input: crate::types::UserProperty) -> Self {
        let mut v = self.user_properties.unwrap_or_default();
        v.push(input);
        self.user_properties = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of key-value pairs that you define in the MQTT5 header.</p>
    pub fn set_user_properties(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::UserProperty>>) -> Self {
        self.user_properties = input;
        self
    }
    /// <p>An array of key-value pairs that you define in the MQTT5 header.</p>
    pub fn get_user_properties(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::UserProperty>> {
        &self.user_properties
    }
    /// Consumes the builder and constructs a [`MqttHeaders`](crate::types::MqttHeaders).
    pub fn build(self) -> crate::types::MqttHeaders {
        crate::types::MqttHeaders {
            payload_format_indicator: self.payload_format_indicator,
            content_type: self.content_type,
            response_topic: self.response_topic,
            correlation_data: self.correlation_data,
            message_expiry: self.message_expiry,
            user_properties: self.user_properties,
        }
    }
}
