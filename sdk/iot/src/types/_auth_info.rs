// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A collection of authorization information.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AuthInfo {
    /// <p>The type of action for which the principal is being authorized.</p>
    pub action_type: ::std::option::Option<crate::types::ActionType>,
    /// <p>The resources for which the principal is being authorized to perform the specified action.</p>
    pub resources: ::std::vec::Vec<::std::string::String>,
}
impl AuthInfo {
    /// <p>The type of action for which the principal is being authorized.</p>
    pub fn action_type(&self) -> ::std::option::Option<&crate::types::ActionType> {
        self.action_type.as_ref()
    }
    /// <p>The resources for which the principal is being authorized to perform the specified action.</p>
    pub fn resources(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.resources.deref()
    }
}
impl AuthInfo {
    /// Creates a new builder-style object to manufacture [`AuthInfo`](crate::types::AuthInfo).
    pub fn builder() -> crate::types::builders::AuthInfoBuilder {
        crate::types::builders::AuthInfoBuilder::default()
    }
}

/// A builder for [`AuthInfo`](crate::types::AuthInfo).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AuthInfoBuilder {
    pub(crate) action_type: ::std::option::Option<crate::types::ActionType>,
    pub(crate) resources: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl AuthInfoBuilder {
    /// <p>The type of action for which the principal is being authorized.</p>
    pub fn action_type(mut self, input: crate::types::ActionType) -> Self {
        self.action_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of action for which the principal is being authorized.</p>
    pub fn set_action_type(mut self, input: ::std::option::Option<crate::types::ActionType>) -> Self {
        self.action_type = input;
        self
    }
    /// <p>The type of action for which the principal is being authorized.</p>
    pub fn get_action_type(&self) -> &::std::option::Option<crate::types::ActionType> {
        &self.action_type
    }
    /// Appends an item to `resources`.
    ///
    /// To override the contents of this collection use [`set_resources`](Self::set_resources).
    ///
    /// <p>The resources for which the principal is being authorized to perform the specified action.</p>
    pub fn resources(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.resources.unwrap_or_default();
        v.push(input.into());
        self.resources = ::std::option::Option::Some(v);
        self
    }
    /// <p>The resources for which the principal is being authorized to perform the specified action.</p>
    pub fn set_resources(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.resources = input;
        self
    }
    /// <p>The resources for which the principal is being authorized to perform the specified action.</p>
    pub fn get_resources(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.resources
    }
    /// Consumes the builder and constructs a [`AuthInfo`](crate::types::AuthInfo).
    /// This method will fail if any of the following fields are not set:
    /// - [`resources`](crate::types::builders::AuthInfoBuilder::resources)
    pub fn build(self) -> ::std::result::Result<crate::types::AuthInfo, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AuthInfo {
            action_type: self.action_type,
            resources: self.resources.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "resources",
                    "resources was not specified but it is required when building AuthInfo",
                )
            })?,
        })
    }
}
