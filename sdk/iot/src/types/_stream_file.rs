// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a file to stream.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StreamFile {
    /// <p>The file ID.</p>
    #[doc(hidden)]
    pub file_id: std::option::Option<i32>,
    /// <p>The location of the file in S3.</p>
    #[doc(hidden)]
    pub s3_location: std::option::Option<crate::types::S3Location>,
}
impl StreamFile {
    /// <p>The file ID.</p>
    pub fn file_id(&self) -> std::option::Option<i32> {
        self.file_id
    }
    /// <p>The location of the file in S3.</p>
    pub fn s3_location(&self) -> std::option::Option<&crate::types::S3Location> {
        self.s3_location.as_ref()
    }
}
impl StreamFile {
    /// Creates a new builder-style object to manufacture [`StreamFile`](crate::types::StreamFile).
    pub fn builder() -> crate::types::builders::StreamFileBuilder {
        crate::types::builders::StreamFileBuilder::default()
    }
}

/// A builder for [`StreamFile`](crate::types::StreamFile).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct StreamFileBuilder {
    pub(crate) file_id: std::option::Option<i32>,
    pub(crate) s3_location: std::option::Option<crate::types::S3Location>,
}
impl StreamFileBuilder {
    /// <p>The file ID.</p>
    pub fn file_id(mut self, input: i32) -> Self {
        self.file_id = Some(input);
        self
    }
    /// <p>The file ID.</p>
    pub fn set_file_id(mut self, input: std::option::Option<i32>) -> Self {
        self.file_id = input;
        self
    }
    /// <p>The location of the file in S3.</p>
    pub fn s3_location(mut self, input: crate::types::S3Location) -> Self {
        self.s3_location = Some(input);
        self
    }
    /// <p>The location of the file in S3.</p>
    pub fn set_s3_location(mut self, input: std::option::Option<crate::types::S3Location>) -> Self {
        self.s3_location = input;
        self
    }
    /// Consumes the builder and constructs a [`StreamFile`](crate::types::StreamFile).
    pub fn build(self) -> crate::types::StreamFile {
        crate::types::StreamFile {
            file_id: self.file_id,
            s3_location: self.s3_location,
        }
    }
}
