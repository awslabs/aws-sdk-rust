// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the method to use when code signing a file.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CodeSigning {
    /// <p>The ID of the <code>AWSSignerJob</code> which was created to sign the file.</p>
    #[doc(hidden)]
    pub aws_signer_job_id: std::option::Option<std::string::String>,
    /// <p>Describes the code-signing job.</p>
    #[doc(hidden)]
    pub start_signing_job_parameter: std::option::Option<crate::types::StartSigningJobParameter>,
    /// <p>A custom method for code signing a file.</p>
    #[doc(hidden)]
    pub custom_code_signing: std::option::Option<crate::types::CustomCodeSigning>,
}
impl CodeSigning {
    /// <p>The ID of the <code>AWSSignerJob</code> which was created to sign the file.</p>
    pub fn aws_signer_job_id(&self) -> std::option::Option<&str> {
        self.aws_signer_job_id.as_deref()
    }
    /// <p>Describes the code-signing job.</p>
    pub fn start_signing_job_parameter(
        &self,
    ) -> std::option::Option<&crate::types::StartSigningJobParameter> {
        self.start_signing_job_parameter.as_ref()
    }
    /// <p>A custom method for code signing a file.</p>
    pub fn custom_code_signing(&self) -> std::option::Option<&crate::types::CustomCodeSigning> {
        self.custom_code_signing.as_ref()
    }
}
impl CodeSigning {
    /// Creates a new builder-style object to manufacture [`CodeSigning`](crate::types::CodeSigning).
    pub fn builder() -> crate::types::builders::CodeSigningBuilder {
        crate::types::builders::CodeSigningBuilder::default()
    }
}

/// A builder for [`CodeSigning`](crate::types::CodeSigning).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CodeSigningBuilder {
    pub(crate) aws_signer_job_id: std::option::Option<std::string::String>,
    pub(crate) start_signing_job_parameter:
        std::option::Option<crate::types::StartSigningJobParameter>,
    pub(crate) custom_code_signing: std::option::Option<crate::types::CustomCodeSigning>,
}
impl CodeSigningBuilder {
    /// <p>The ID of the <code>AWSSignerJob</code> which was created to sign the file.</p>
    pub fn aws_signer_job_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.aws_signer_job_id = Some(input.into());
        self
    }
    /// <p>The ID of the <code>AWSSignerJob</code> which was created to sign the file.</p>
    pub fn set_aws_signer_job_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.aws_signer_job_id = input;
        self
    }
    /// <p>Describes the code-signing job.</p>
    pub fn start_signing_job_parameter(
        mut self,
        input: crate::types::StartSigningJobParameter,
    ) -> Self {
        self.start_signing_job_parameter = Some(input);
        self
    }
    /// <p>Describes the code-signing job.</p>
    pub fn set_start_signing_job_parameter(
        mut self,
        input: std::option::Option<crate::types::StartSigningJobParameter>,
    ) -> Self {
        self.start_signing_job_parameter = input;
        self
    }
    /// <p>A custom method for code signing a file.</p>
    pub fn custom_code_signing(mut self, input: crate::types::CustomCodeSigning) -> Self {
        self.custom_code_signing = Some(input);
        self
    }
    /// <p>A custom method for code signing a file.</p>
    pub fn set_custom_code_signing(
        mut self,
        input: std::option::Option<crate::types::CustomCodeSigning>,
    ) -> Self {
        self.custom_code_signing = input;
        self
    }
    /// Consumes the builder and constructs a [`CodeSigning`](crate::types::CodeSigning).
    pub fn build(self) -> crate::types::CodeSigning {
        crate::types::CodeSigning {
            aws_signer_job_id: self.aws_signer_job_id,
            start_signing_job_parameter: self.start_signing_job_parameter,
            custom_code_signing: self.custom_code_signing,
        }
    }
}
