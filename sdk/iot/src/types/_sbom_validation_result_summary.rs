// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A summary of the validation results for a specific software bill of materials (SBOM) attached to a software package version.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SbomValidationResultSummary {
    /// <p>The name of the SBOM file.</p>
    pub file_name: ::std::option::Option<::std::string::String>,
    /// <p>The end result of the SBOM validation.</p>
    pub validation_result: ::std::option::Option<crate::types::SbomValidationResult>,
    /// <p>The <code>errorCode</code> representing the validation failure error if the SBOM validation failed.</p>
    pub error_code: ::std::option::Option<crate::types::SbomValidationErrorCode>,
    /// <p>The <code>errorMessage</code> representing the validation failure error if the SBOM validation failed.</p>
    pub error_message: ::std::option::Option<::std::string::String>,
}
impl SbomValidationResultSummary {
    /// <p>The name of the SBOM file.</p>
    pub fn file_name(&self) -> ::std::option::Option<&str> {
        self.file_name.as_deref()
    }
    /// <p>The end result of the SBOM validation.</p>
    pub fn validation_result(&self) -> ::std::option::Option<&crate::types::SbomValidationResult> {
        self.validation_result.as_ref()
    }
    /// <p>The <code>errorCode</code> representing the validation failure error if the SBOM validation failed.</p>
    pub fn error_code(&self) -> ::std::option::Option<&crate::types::SbomValidationErrorCode> {
        self.error_code.as_ref()
    }
    /// <p>The <code>errorMessage</code> representing the validation failure error if the SBOM validation failed.</p>
    pub fn error_message(&self) -> ::std::option::Option<&str> {
        self.error_message.as_deref()
    }
}
impl SbomValidationResultSummary {
    /// Creates a new builder-style object to manufacture [`SbomValidationResultSummary`](crate::types::SbomValidationResultSummary).
    pub fn builder() -> crate::types::builders::SbomValidationResultSummaryBuilder {
        crate::types::builders::SbomValidationResultSummaryBuilder::default()
    }
}

/// A builder for [`SbomValidationResultSummary`](crate::types::SbomValidationResultSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SbomValidationResultSummaryBuilder {
    pub(crate) file_name: ::std::option::Option<::std::string::String>,
    pub(crate) validation_result: ::std::option::Option<crate::types::SbomValidationResult>,
    pub(crate) error_code: ::std::option::Option<crate::types::SbomValidationErrorCode>,
    pub(crate) error_message: ::std::option::Option<::std::string::String>,
}
impl SbomValidationResultSummaryBuilder {
    /// <p>The name of the SBOM file.</p>
    pub fn file_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.file_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the SBOM file.</p>
    pub fn set_file_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.file_name = input;
        self
    }
    /// <p>The name of the SBOM file.</p>
    pub fn get_file_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.file_name
    }
    /// <p>The end result of the SBOM validation.</p>
    pub fn validation_result(mut self, input: crate::types::SbomValidationResult) -> Self {
        self.validation_result = ::std::option::Option::Some(input);
        self
    }
    /// <p>The end result of the SBOM validation.</p>
    pub fn set_validation_result(mut self, input: ::std::option::Option<crate::types::SbomValidationResult>) -> Self {
        self.validation_result = input;
        self
    }
    /// <p>The end result of the SBOM validation.</p>
    pub fn get_validation_result(&self) -> &::std::option::Option<crate::types::SbomValidationResult> {
        &self.validation_result
    }
    /// <p>The <code>errorCode</code> representing the validation failure error if the SBOM validation failed.</p>
    pub fn error_code(mut self, input: crate::types::SbomValidationErrorCode) -> Self {
        self.error_code = ::std::option::Option::Some(input);
        self
    }
    /// <p>The <code>errorCode</code> representing the validation failure error if the SBOM validation failed.</p>
    pub fn set_error_code(mut self, input: ::std::option::Option<crate::types::SbomValidationErrorCode>) -> Self {
        self.error_code = input;
        self
    }
    /// <p>The <code>errorCode</code> representing the validation failure error if the SBOM validation failed.</p>
    pub fn get_error_code(&self) -> &::std::option::Option<crate::types::SbomValidationErrorCode> {
        &self.error_code
    }
    /// <p>The <code>errorMessage</code> representing the validation failure error if the SBOM validation failed.</p>
    pub fn error_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.error_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The <code>errorMessage</code> representing the validation failure error if the SBOM validation failed.</p>
    pub fn set_error_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.error_message = input;
        self
    }
    /// <p>The <code>errorMessage</code> representing the validation failure error if the SBOM validation failed.</p>
    pub fn get_error_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.error_message
    }
    /// Consumes the builder and constructs a [`SbomValidationResultSummary`](crate::types::SbomValidationResultSummary).
    pub fn build(self) -> crate::types::SbomValidationResultSummary {
        crate::types::SbomValidationResultSummary {
            file_name: self.file_name,
            validation_result: self.validation_result,
            error_code: self.error_code,
            error_message: self.error_message,
        }
    }
}
