// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The dimension of a metric.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MetricDimension {
    /// <p>A unique identifier for the dimension.</p>
    pub dimension_name: ::std::string::String,
    /// <p>Defines how the <code>dimensionValues</code> of a dimension are interpreted. For example, for dimension type TOPIC_FILTER, the <code>IN</code> operator, a message will be counted only if its topic matches one of the topic filters. With <code>NOT_IN</code> operator, a message will be counted only if it doesn't match any of the topic filters. The operator is optional: if it's not provided (is <code>null</code>), it will be interpreted as <code>IN</code>.</p>
    pub operator: ::std::option::Option<crate::types::DimensionValueOperator>,
}
impl MetricDimension {
    /// <p>A unique identifier for the dimension.</p>
    pub fn dimension_name(&self) -> &str {
        use std::ops::Deref;
        self.dimension_name.deref()
    }
    /// <p>Defines how the <code>dimensionValues</code> of a dimension are interpreted. For example, for dimension type TOPIC_FILTER, the <code>IN</code> operator, a message will be counted only if its topic matches one of the topic filters. With <code>NOT_IN</code> operator, a message will be counted only if it doesn't match any of the topic filters. The operator is optional: if it's not provided (is <code>null</code>), it will be interpreted as <code>IN</code>.</p>
    pub fn operator(&self) -> ::std::option::Option<&crate::types::DimensionValueOperator> {
        self.operator.as_ref()
    }
}
impl MetricDimension {
    /// Creates a new builder-style object to manufacture [`MetricDimension`](crate::types::MetricDimension).
    pub fn builder() -> crate::types::builders::MetricDimensionBuilder {
        crate::types::builders::MetricDimensionBuilder::default()
    }
}

/// A builder for [`MetricDimension`](crate::types::MetricDimension).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct MetricDimensionBuilder {
    pub(crate) dimension_name: ::std::option::Option<::std::string::String>,
    pub(crate) operator: ::std::option::Option<crate::types::DimensionValueOperator>,
}
impl MetricDimensionBuilder {
    /// <p>A unique identifier for the dimension.</p>
    /// This field is required.
    pub fn dimension_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.dimension_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier for the dimension.</p>
    pub fn set_dimension_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.dimension_name = input;
        self
    }
    /// <p>A unique identifier for the dimension.</p>
    pub fn get_dimension_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.dimension_name
    }
    /// <p>Defines how the <code>dimensionValues</code> of a dimension are interpreted. For example, for dimension type TOPIC_FILTER, the <code>IN</code> operator, a message will be counted only if its topic matches one of the topic filters. With <code>NOT_IN</code> operator, a message will be counted only if it doesn't match any of the topic filters. The operator is optional: if it's not provided (is <code>null</code>), it will be interpreted as <code>IN</code>.</p>
    pub fn operator(mut self, input: crate::types::DimensionValueOperator) -> Self {
        self.operator = ::std::option::Option::Some(input);
        self
    }
    /// <p>Defines how the <code>dimensionValues</code> of a dimension are interpreted. For example, for dimension type TOPIC_FILTER, the <code>IN</code> operator, a message will be counted only if its topic matches one of the topic filters. With <code>NOT_IN</code> operator, a message will be counted only if it doesn't match any of the topic filters. The operator is optional: if it's not provided (is <code>null</code>), it will be interpreted as <code>IN</code>.</p>
    pub fn set_operator(mut self, input: ::std::option::Option<crate::types::DimensionValueOperator>) -> Self {
        self.operator = input;
        self
    }
    /// <p>Defines how the <code>dimensionValues</code> of a dimension are interpreted. For example, for dimension type TOPIC_FILTER, the <code>IN</code> operator, a message will be counted only if its topic matches one of the topic filters. With <code>NOT_IN</code> operator, a message will be counted only if it doesn't match any of the topic filters. The operator is optional: if it's not provided (is <code>null</code>), it will be interpreted as <code>IN</code>.</p>
    pub fn get_operator(&self) -> &::std::option::Option<crate::types::DimensionValueOperator> {
        &self.operator
    }
    /// Consumes the builder and constructs a [`MetricDimension`](crate::types::MetricDimension).
    /// This method will fail if any of the following fields are not set:
    /// - [`dimension_name`](crate::types::builders::MetricDimensionBuilder::dimension_name)
    pub fn build(self) -> ::std::result::Result<crate::types::MetricDimension, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::MetricDimension {
            dimension_name: self.dimension_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "dimension_name",
                    "dimension_name was not specified but it is required when building MetricDimension",
                )
            })?,
            operator: self.operator,
        })
    }
}
