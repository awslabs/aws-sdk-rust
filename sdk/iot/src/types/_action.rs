// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the actions associated with a rule.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Action {
    /// <p>Write to a DynamoDB table.</p>
    #[doc(hidden)]
    pub dynamo_db: std::option::Option<crate::types::DynamoDbAction>,
    /// <p>Write to a DynamoDB table. This is a new version of the DynamoDB action. It allows you to write each attribute in an MQTT message payload into a separate DynamoDB column.</p>
    #[doc(hidden)]
    pub dynamo_d_bv2: std::option::Option<crate::types::DynamoDBv2Action>,
    /// <p>Invoke a Lambda function.</p>
    #[doc(hidden)]
    pub lambda: std::option::Option<crate::types::LambdaAction>,
    /// <p>Publish to an Amazon SNS topic.</p>
    #[doc(hidden)]
    pub sns: std::option::Option<crate::types::SnsAction>,
    /// <p>Publish to an Amazon SQS queue.</p>
    #[doc(hidden)]
    pub sqs: std::option::Option<crate::types::SqsAction>,
    /// <p>Write data to an Amazon Kinesis stream.</p>
    #[doc(hidden)]
    pub kinesis: std::option::Option<crate::types::KinesisAction>,
    /// <p>Publish to another MQTT topic.</p>
    #[doc(hidden)]
    pub republish: std::option::Option<crate::types::RepublishAction>,
    /// <p>Write to an Amazon S3 bucket.</p>
    #[doc(hidden)]
    pub s3: std::option::Option<crate::types::S3Action>,
    /// <p>Write to an Amazon Kinesis Firehose stream.</p>
    #[doc(hidden)]
    pub firehose: std::option::Option<crate::types::FirehoseAction>,
    /// <p>Capture a CloudWatch metric.</p>
    #[doc(hidden)]
    pub cloudwatch_metric: std::option::Option<crate::types::CloudwatchMetricAction>,
    /// <p>Change the state of a CloudWatch alarm.</p>
    #[doc(hidden)]
    pub cloudwatch_alarm: std::option::Option<crate::types::CloudwatchAlarmAction>,
    /// <p>Send data to CloudWatch Logs.</p>
    #[doc(hidden)]
    pub cloudwatch_logs: std::option::Option<crate::types::CloudwatchLogsAction>,
    /// <p>Write data to an Amazon OpenSearch Service domain.</p> <note>
    /// <p>The <code>Elasticsearch</code> action can only be used by existing rule actions. To create a new rule action or to update an existing rule action, use the <code>OpenSearch</code> rule action instead. For more information, see <a href="https://docs.aws.amazon.com/iot/latest/apireference/API_OpenSearchAction.html">OpenSearchAction</a>.</p>
    /// </note>
    #[doc(hidden)]
    pub elasticsearch: std::option::Option<crate::types::ElasticsearchAction>,
    /// <p>Send a message to a Salesforce IoT Cloud Input Stream.</p>
    #[doc(hidden)]
    pub salesforce: std::option::Option<crate::types::SalesforceAction>,
    /// <p>Sends message data to an IoT Analytics channel.</p>
    #[doc(hidden)]
    pub iot_analytics: std::option::Option<crate::types::IotAnalyticsAction>,
    /// <p>Sends an input to an IoT Events detector.</p>
    #[doc(hidden)]
    pub iot_events: std::option::Option<crate::types::IotEventsAction>,
    /// <p>Sends data from the MQTT message that triggered the rule to IoT SiteWise asset properties.</p>
    #[doc(hidden)]
    pub iot_site_wise: std::option::Option<crate::types::IotSiteWiseAction>,
    /// <p>Starts execution of a Step Functions state machine.</p>
    #[doc(hidden)]
    pub step_functions: std::option::Option<crate::types::StepFunctionsAction>,
    /// <p>The Timestream rule action writes attributes (measures) from an MQTT message into an Amazon Timestream table. For more information, see the <a href="https://docs.aws.amazon.com/iot/latest/developerguide/timestream-rule-action.html">Timestream</a> topic rule action documentation.</p>
    #[doc(hidden)]
    pub timestream: std::option::Option<crate::types::TimestreamAction>,
    /// <p>Send data to an HTTPS endpoint.</p>
    #[doc(hidden)]
    pub http: std::option::Option<crate::types::HttpAction>,
    /// <p>Send messages to an Amazon Managed Streaming for Apache Kafka (Amazon MSK) or self-managed Apache Kafka cluster.</p>
    #[doc(hidden)]
    pub kafka: std::option::Option<crate::types::KafkaAction>,
    /// <p>Write data to an Amazon OpenSearch Service domain.</p>
    #[doc(hidden)]
    pub open_search: std::option::Option<crate::types::OpenSearchAction>,
    /// <p>The Amazon Location Service rule action sends device location updates from an MQTT message to an Amazon Location tracker resource.</p>
    #[doc(hidden)]
    pub location: std::option::Option<crate::types::LocationAction>,
}
impl Action {
    /// <p>Write to a DynamoDB table.</p>
    pub fn dynamo_db(&self) -> std::option::Option<&crate::types::DynamoDbAction> {
        self.dynamo_db.as_ref()
    }
    /// <p>Write to a DynamoDB table. This is a new version of the DynamoDB action. It allows you to write each attribute in an MQTT message payload into a separate DynamoDB column.</p>
    pub fn dynamo_d_bv2(&self) -> std::option::Option<&crate::types::DynamoDBv2Action> {
        self.dynamo_d_bv2.as_ref()
    }
    /// <p>Invoke a Lambda function.</p>
    pub fn lambda(&self) -> std::option::Option<&crate::types::LambdaAction> {
        self.lambda.as_ref()
    }
    /// <p>Publish to an Amazon SNS topic.</p>
    pub fn sns(&self) -> std::option::Option<&crate::types::SnsAction> {
        self.sns.as_ref()
    }
    /// <p>Publish to an Amazon SQS queue.</p>
    pub fn sqs(&self) -> std::option::Option<&crate::types::SqsAction> {
        self.sqs.as_ref()
    }
    /// <p>Write data to an Amazon Kinesis stream.</p>
    pub fn kinesis(&self) -> std::option::Option<&crate::types::KinesisAction> {
        self.kinesis.as_ref()
    }
    /// <p>Publish to another MQTT topic.</p>
    pub fn republish(&self) -> std::option::Option<&crate::types::RepublishAction> {
        self.republish.as_ref()
    }
    /// <p>Write to an Amazon S3 bucket.</p>
    pub fn s3(&self) -> std::option::Option<&crate::types::S3Action> {
        self.s3.as_ref()
    }
    /// <p>Write to an Amazon Kinesis Firehose stream.</p>
    pub fn firehose(&self) -> std::option::Option<&crate::types::FirehoseAction> {
        self.firehose.as_ref()
    }
    /// <p>Capture a CloudWatch metric.</p>
    pub fn cloudwatch_metric(&self) -> std::option::Option<&crate::types::CloudwatchMetricAction> {
        self.cloudwatch_metric.as_ref()
    }
    /// <p>Change the state of a CloudWatch alarm.</p>
    pub fn cloudwatch_alarm(&self) -> std::option::Option<&crate::types::CloudwatchAlarmAction> {
        self.cloudwatch_alarm.as_ref()
    }
    /// <p>Send data to CloudWatch Logs.</p>
    pub fn cloudwatch_logs(&self) -> std::option::Option<&crate::types::CloudwatchLogsAction> {
        self.cloudwatch_logs.as_ref()
    }
    /// <p>Write data to an Amazon OpenSearch Service domain.</p> <note>
    /// <p>The <code>Elasticsearch</code> action can only be used by existing rule actions. To create a new rule action or to update an existing rule action, use the <code>OpenSearch</code> rule action instead. For more information, see <a href="https://docs.aws.amazon.com/iot/latest/apireference/API_OpenSearchAction.html">OpenSearchAction</a>.</p>
    /// </note>
    pub fn elasticsearch(&self) -> std::option::Option<&crate::types::ElasticsearchAction> {
        self.elasticsearch.as_ref()
    }
    /// <p>Send a message to a Salesforce IoT Cloud Input Stream.</p>
    pub fn salesforce(&self) -> std::option::Option<&crate::types::SalesforceAction> {
        self.salesforce.as_ref()
    }
    /// <p>Sends message data to an IoT Analytics channel.</p>
    pub fn iot_analytics(&self) -> std::option::Option<&crate::types::IotAnalyticsAction> {
        self.iot_analytics.as_ref()
    }
    /// <p>Sends an input to an IoT Events detector.</p>
    pub fn iot_events(&self) -> std::option::Option<&crate::types::IotEventsAction> {
        self.iot_events.as_ref()
    }
    /// <p>Sends data from the MQTT message that triggered the rule to IoT SiteWise asset properties.</p>
    pub fn iot_site_wise(&self) -> std::option::Option<&crate::types::IotSiteWiseAction> {
        self.iot_site_wise.as_ref()
    }
    /// <p>Starts execution of a Step Functions state machine.</p>
    pub fn step_functions(&self) -> std::option::Option<&crate::types::StepFunctionsAction> {
        self.step_functions.as_ref()
    }
    /// <p>The Timestream rule action writes attributes (measures) from an MQTT message into an Amazon Timestream table. For more information, see the <a href="https://docs.aws.amazon.com/iot/latest/developerguide/timestream-rule-action.html">Timestream</a> topic rule action documentation.</p>
    pub fn timestream(&self) -> std::option::Option<&crate::types::TimestreamAction> {
        self.timestream.as_ref()
    }
    /// <p>Send data to an HTTPS endpoint.</p>
    pub fn http(&self) -> std::option::Option<&crate::types::HttpAction> {
        self.http.as_ref()
    }
    /// <p>Send messages to an Amazon Managed Streaming for Apache Kafka (Amazon MSK) or self-managed Apache Kafka cluster.</p>
    pub fn kafka(&self) -> std::option::Option<&crate::types::KafkaAction> {
        self.kafka.as_ref()
    }
    /// <p>Write data to an Amazon OpenSearch Service domain.</p>
    pub fn open_search(&self) -> std::option::Option<&crate::types::OpenSearchAction> {
        self.open_search.as_ref()
    }
    /// <p>The Amazon Location Service rule action sends device location updates from an MQTT message to an Amazon Location tracker resource.</p>
    pub fn location(&self) -> std::option::Option<&crate::types::LocationAction> {
        self.location.as_ref()
    }
}
impl Action {
    /// Creates a new builder-style object to manufacture [`Action`](crate::types::Action).
    pub fn builder() -> crate::types::builders::ActionBuilder {
        crate::types::builders::ActionBuilder::default()
    }
}

/// A builder for [`Action`](crate::types::Action).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ActionBuilder {
    pub(crate) dynamo_db: std::option::Option<crate::types::DynamoDbAction>,
    pub(crate) dynamo_d_bv2: std::option::Option<crate::types::DynamoDBv2Action>,
    pub(crate) lambda: std::option::Option<crate::types::LambdaAction>,
    pub(crate) sns: std::option::Option<crate::types::SnsAction>,
    pub(crate) sqs: std::option::Option<crate::types::SqsAction>,
    pub(crate) kinesis: std::option::Option<crate::types::KinesisAction>,
    pub(crate) republish: std::option::Option<crate::types::RepublishAction>,
    pub(crate) s3: std::option::Option<crate::types::S3Action>,
    pub(crate) firehose: std::option::Option<crate::types::FirehoseAction>,
    pub(crate) cloudwatch_metric: std::option::Option<crate::types::CloudwatchMetricAction>,
    pub(crate) cloudwatch_alarm: std::option::Option<crate::types::CloudwatchAlarmAction>,
    pub(crate) cloudwatch_logs: std::option::Option<crate::types::CloudwatchLogsAction>,
    pub(crate) elasticsearch: std::option::Option<crate::types::ElasticsearchAction>,
    pub(crate) salesforce: std::option::Option<crate::types::SalesforceAction>,
    pub(crate) iot_analytics: std::option::Option<crate::types::IotAnalyticsAction>,
    pub(crate) iot_events: std::option::Option<crate::types::IotEventsAction>,
    pub(crate) iot_site_wise: std::option::Option<crate::types::IotSiteWiseAction>,
    pub(crate) step_functions: std::option::Option<crate::types::StepFunctionsAction>,
    pub(crate) timestream: std::option::Option<crate::types::TimestreamAction>,
    pub(crate) http: std::option::Option<crate::types::HttpAction>,
    pub(crate) kafka: std::option::Option<crate::types::KafkaAction>,
    pub(crate) open_search: std::option::Option<crate::types::OpenSearchAction>,
    pub(crate) location: std::option::Option<crate::types::LocationAction>,
}
impl ActionBuilder {
    /// <p>Write to a DynamoDB table.</p>
    pub fn dynamo_db(mut self, input: crate::types::DynamoDbAction) -> Self {
        self.dynamo_db = Some(input);
        self
    }
    /// <p>Write to a DynamoDB table.</p>
    pub fn set_dynamo_db(
        mut self,
        input: std::option::Option<crate::types::DynamoDbAction>,
    ) -> Self {
        self.dynamo_db = input;
        self
    }
    /// <p>Write to a DynamoDB table. This is a new version of the DynamoDB action. It allows you to write each attribute in an MQTT message payload into a separate DynamoDB column.</p>
    pub fn dynamo_d_bv2(mut self, input: crate::types::DynamoDBv2Action) -> Self {
        self.dynamo_d_bv2 = Some(input);
        self
    }
    /// <p>Write to a DynamoDB table. This is a new version of the DynamoDB action. It allows you to write each attribute in an MQTT message payload into a separate DynamoDB column.</p>
    pub fn set_dynamo_d_bv2(
        mut self,
        input: std::option::Option<crate::types::DynamoDBv2Action>,
    ) -> Self {
        self.dynamo_d_bv2 = input;
        self
    }
    /// <p>Invoke a Lambda function.</p>
    pub fn lambda(mut self, input: crate::types::LambdaAction) -> Self {
        self.lambda = Some(input);
        self
    }
    /// <p>Invoke a Lambda function.</p>
    pub fn set_lambda(mut self, input: std::option::Option<crate::types::LambdaAction>) -> Self {
        self.lambda = input;
        self
    }
    /// <p>Publish to an Amazon SNS topic.</p>
    pub fn sns(mut self, input: crate::types::SnsAction) -> Self {
        self.sns = Some(input);
        self
    }
    /// <p>Publish to an Amazon SNS topic.</p>
    pub fn set_sns(mut self, input: std::option::Option<crate::types::SnsAction>) -> Self {
        self.sns = input;
        self
    }
    /// <p>Publish to an Amazon SQS queue.</p>
    pub fn sqs(mut self, input: crate::types::SqsAction) -> Self {
        self.sqs = Some(input);
        self
    }
    /// <p>Publish to an Amazon SQS queue.</p>
    pub fn set_sqs(mut self, input: std::option::Option<crate::types::SqsAction>) -> Self {
        self.sqs = input;
        self
    }
    /// <p>Write data to an Amazon Kinesis stream.</p>
    pub fn kinesis(mut self, input: crate::types::KinesisAction) -> Self {
        self.kinesis = Some(input);
        self
    }
    /// <p>Write data to an Amazon Kinesis stream.</p>
    pub fn set_kinesis(mut self, input: std::option::Option<crate::types::KinesisAction>) -> Self {
        self.kinesis = input;
        self
    }
    /// <p>Publish to another MQTT topic.</p>
    pub fn republish(mut self, input: crate::types::RepublishAction) -> Self {
        self.republish = Some(input);
        self
    }
    /// <p>Publish to another MQTT topic.</p>
    pub fn set_republish(
        mut self,
        input: std::option::Option<crate::types::RepublishAction>,
    ) -> Self {
        self.republish = input;
        self
    }
    /// <p>Write to an Amazon S3 bucket.</p>
    pub fn s3(mut self, input: crate::types::S3Action) -> Self {
        self.s3 = Some(input);
        self
    }
    /// <p>Write to an Amazon S3 bucket.</p>
    pub fn set_s3(mut self, input: std::option::Option<crate::types::S3Action>) -> Self {
        self.s3 = input;
        self
    }
    /// <p>Write to an Amazon Kinesis Firehose stream.</p>
    pub fn firehose(mut self, input: crate::types::FirehoseAction) -> Self {
        self.firehose = Some(input);
        self
    }
    /// <p>Write to an Amazon Kinesis Firehose stream.</p>
    pub fn set_firehose(
        mut self,
        input: std::option::Option<crate::types::FirehoseAction>,
    ) -> Self {
        self.firehose = input;
        self
    }
    /// <p>Capture a CloudWatch metric.</p>
    pub fn cloudwatch_metric(mut self, input: crate::types::CloudwatchMetricAction) -> Self {
        self.cloudwatch_metric = Some(input);
        self
    }
    /// <p>Capture a CloudWatch metric.</p>
    pub fn set_cloudwatch_metric(
        mut self,
        input: std::option::Option<crate::types::CloudwatchMetricAction>,
    ) -> Self {
        self.cloudwatch_metric = input;
        self
    }
    /// <p>Change the state of a CloudWatch alarm.</p>
    pub fn cloudwatch_alarm(mut self, input: crate::types::CloudwatchAlarmAction) -> Self {
        self.cloudwatch_alarm = Some(input);
        self
    }
    /// <p>Change the state of a CloudWatch alarm.</p>
    pub fn set_cloudwatch_alarm(
        mut self,
        input: std::option::Option<crate::types::CloudwatchAlarmAction>,
    ) -> Self {
        self.cloudwatch_alarm = input;
        self
    }
    /// <p>Send data to CloudWatch Logs.</p>
    pub fn cloudwatch_logs(mut self, input: crate::types::CloudwatchLogsAction) -> Self {
        self.cloudwatch_logs = Some(input);
        self
    }
    /// <p>Send data to CloudWatch Logs.</p>
    pub fn set_cloudwatch_logs(
        mut self,
        input: std::option::Option<crate::types::CloudwatchLogsAction>,
    ) -> Self {
        self.cloudwatch_logs = input;
        self
    }
    /// <p>Write data to an Amazon OpenSearch Service domain.</p> <note>
    /// <p>The <code>Elasticsearch</code> action can only be used by existing rule actions. To create a new rule action or to update an existing rule action, use the <code>OpenSearch</code> rule action instead. For more information, see <a href="https://docs.aws.amazon.com/iot/latest/apireference/API_OpenSearchAction.html">OpenSearchAction</a>.</p>
    /// </note>
    pub fn elasticsearch(mut self, input: crate::types::ElasticsearchAction) -> Self {
        self.elasticsearch = Some(input);
        self
    }
    /// <p>Write data to an Amazon OpenSearch Service domain.</p> <note>
    /// <p>The <code>Elasticsearch</code> action can only be used by existing rule actions. To create a new rule action or to update an existing rule action, use the <code>OpenSearch</code> rule action instead. For more information, see <a href="https://docs.aws.amazon.com/iot/latest/apireference/API_OpenSearchAction.html">OpenSearchAction</a>.</p>
    /// </note>
    pub fn set_elasticsearch(
        mut self,
        input: std::option::Option<crate::types::ElasticsearchAction>,
    ) -> Self {
        self.elasticsearch = input;
        self
    }
    /// <p>Send a message to a Salesforce IoT Cloud Input Stream.</p>
    pub fn salesforce(mut self, input: crate::types::SalesforceAction) -> Self {
        self.salesforce = Some(input);
        self
    }
    /// <p>Send a message to a Salesforce IoT Cloud Input Stream.</p>
    pub fn set_salesforce(
        mut self,
        input: std::option::Option<crate::types::SalesforceAction>,
    ) -> Self {
        self.salesforce = input;
        self
    }
    /// <p>Sends message data to an IoT Analytics channel.</p>
    pub fn iot_analytics(mut self, input: crate::types::IotAnalyticsAction) -> Self {
        self.iot_analytics = Some(input);
        self
    }
    /// <p>Sends message data to an IoT Analytics channel.</p>
    pub fn set_iot_analytics(
        mut self,
        input: std::option::Option<crate::types::IotAnalyticsAction>,
    ) -> Self {
        self.iot_analytics = input;
        self
    }
    /// <p>Sends an input to an IoT Events detector.</p>
    pub fn iot_events(mut self, input: crate::types::IotEventsAction) -> Self {
        self.iot_events = Some(input);
        self
    }
    /// <p>Sends an input to an IoT Events detector.</p>
    pub fn set_iot_events(
        mut self,
        input: std::option::Option<crate::types::IotEventsAction>,
    ) -> Self {
        self.iot_events = input;
        self
    }
    /// <p>Sends data from the MQTT message that triggered the rule to IoT SiteWise asset properties.</p>
    pub fn iot_site_wise(mut self, input: crate::types::IotSiteWiseAction) -> Self {
        self.iot_site_wise = Some(input);
        self
    }
    /// <p>Sends data from the MQTT message that triggered the rule to IoT SiteWise asset properties.</p>
    pub fn set_iot_site_wise(
        mut self,
        input: std::option::Option<crate::types::IotSiteWiseAction>,
    ) -> Self {
        self.iot_site_wise = input;
        self
    }
    /// <p>Starts execution of a Step Functions state machine.</p>
    pub fn step_functions(mut self, input: crate::types::StepFunctionsAction) -> Self {
        self.step_functions = Some(input);
        self
    }
    /// <p>Starts execution of a Step Functions state machine.</p>
    pub fn set_step_functions(
        mut self,
        input: std::option::Option<crate::types::StepFunctionsAction>,
    ) -> Self {
        self.step_functions = input;
        self
    }
    /// <p>The Timestream rule action writes attributes (measures) from an MQTT message into an Amazon Timestream table. For more information, see the <a href="https://docs.aws.amazon.com/iot/latest/developerguide/timestream-rule-action.html">Timestream</a> topic rule action documentation.</p>
    pub fn timestream(mut self, input: crate::types::TimestreamAction) -> Self {
        self.timestream = Some(input);
        self
    }
    /// <p>The Timestream rule action writes attributes (measures) from an MQTT message into an Amazon Timestream table. For more information, see the <a href="https://docs.aws.amazon.com/iot/latest/developerguide/timestream-rule-action.html">Timestream</a> topic rule action documentation.</p>
    pub fn set_timestream(
        mut self,
        input: std::option::Option<crate::types::TimestreamAction>,
    ) -> Self {
        self.timestream = input;
        self
    }
    /// <p>Send data to an HTTPS endpoint.</p>
    pub fn http(mut self, input: crate::types::HttpAction) -> Self {
        self.http = Some(input);
        self
    }
    /// <p>Send data to an HTTPS endpoint.</p>
    pub fn set_http(mut self, input: std::option::Option<crate::types::HttpAction>) -> Self {
        self.http = input;
        self
    }
    /// <p>Send messages to an Amazon Managed Streaming for Apache Kafka (Amazon MSK) or self-managed Apache Kafka cluster.</p>
    pub fn kafka(mut self, input: crate::types::KafkaAction) -> Self {
        self.kafka = Some(input);
        self
    }
    /// <p>Send messages to an Amazon Managed Streaming for Apache Kafka (Amazon MSK) or self-managed Apache Kafka cluster.</p>
    pub fn set_kafka(mut self, input: std::option::Option<crate::types::KafkaAction>) -> Self {
        self.kafka = input;
        self
    }
    /// <p>Write data to an Amazon OpenSearch Service domain.</p>
    pub fn open_search(mut self, input: crate::types::OpenSearchAction) -> Self {
        self.open_search = Some(input);
        self
    }
    /// <p>Write data to an Amazon OpenSearch Service domain.</p>
    pub fn set_open_search(
        mut self,
        input: std::option::Option<crate::types::OpenSearchAction>,
    ) -> Self {
        self.open_search = input;
        self
    }
    /// <p>The Amazon Location Service rule action sends device location updates from an MQTT message to an Amazon Location tracker resource.</p>
    pub fn location(mut self, input: crate::types::LocationAction) -> Self {
        self.location = Some(input);
        self
    }
    /// <p>The Amazon Location Service rule action sends device location updates from an MQTT message to an Amazon Location tracker resource.</p>
    pub fn set_location(
        mut self,
        input: std::option::Option<crate::types::LocationAction>,
    ) -> Self {
        self.location = input;
        self
    }
    /// Consumes the builder and constructs a [`Action`](crate::types::Action).
    pub fn build(self) -> crate::types::Action {
        crate::types::Action {
            dynamo_db: self.dynamo_db,
            dynamo_d_bv2: self.dynamo_d_bv2,
            lambda: self.lambda,
            sns: self.sns,
            sqs: self.sqs,
            kinesis: self.kinesis,
            republish: self.republish,
            s3: self.s3,
            firehose: self.firehose,
            cloudwatch_metric: self.cloudwatch_metric,
            cloudwatch_alarm: self.cloudwatch_alarm,
            cloudwatch_logs: self.cloudwatch_logs,
            elasticsearch: self.elasticsearch,
            salesforce: self.salesforce,
            iot_analytics: self.iot_analytics,
            iot_events: self.iot_events,
            iot_site_wise: self.iot_site_wise,
            step_functions: self.step_functions,
            timestream: self.timestream,
            http: self.http,
            kafka: self.kafka,
            open_search: self.open_search,
            location: self.location,
        }
    }
}
