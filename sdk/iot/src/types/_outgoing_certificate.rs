// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A certificate that has been transferred but not yet accepted.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct OutgoingCertificate {
    /// <p>The certificate ARN.</p>
    #[doc(hidden)]
    pub certificate_arn: std::option::Option<std::string::String>,
    /// <p>The certificate ID.</p>
    #[doc(hidden)]
    pub certificate_id: std::option::Option<std::string::String>,
    /// <p>The Amazon Web Services account to which the transfer was made.</p>
    #[doc(hidden)]
    pub transferred_to: std::option::Option<std::string::String>,
    /// <p>The date the transfer was initiated.</p>
    #[doc(hidden)]
    pub transfer_date: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The transfer message.</p>
    #[doc(hidden)]
    pub transfer_message: std::option::Option<std::string::String>,
    /// <p>The certificate creation date.</p>
    #[doc(hidden)]
    pub creation_date: std::option::Option<aws_smithy_types::DateTime>,
}
impl OutgoingCertificate {
    /// <p>The certificate ARN.</p>
    pub fn certificate_arn(&self) -> std::option::Option<&str> {
        self.certificate_arn.as_deref()
    }
    /// <p>The certificate ID.</p>
    pub fn certificate_id(&self) -> std::option::Option<&str> {
        self.certificate_id.as_deref()
    }
    /// <p>The Amazon Web Services account to which the transfer was made.</p>
    pub fn transferred_to(&self) -> std::option::Option<&str> {
        self.transferred_to.as_deref()
    }
    /// <p>The date the transfer was initiated.</p>
    pub fn transfer_date(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.transfer_date.as_ref()
    }
    /// <p>The transfer message.</p>
    pub fn transfer_message(&self) -> std::option::Option<&str> {
        self.transfer_message.as_deref()
    }
    /// <p>The certificate creation date.</p>
    pub fn creation_date(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_date.as_ref()
    }
}
impl OutgoingCertificate {
    /// Creates a new builder-style object to manufacture [`OutgoingCertificate`](crate::types::OutgoingCertificate).
    pub fn builder() -> crate::types::builders::OutgoingCertificateBuilder {
        crate::types::builders::OutgoingCertificateBuilder::default()
    }
}

/// A builder for [`OutgoingCertificate`](crate::types::OutgoingCertificate).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct OutgoingCertificateBuilder {
    pub(crate) certificate_arn: std::option::Option<std::string::String>,
    pub(crate) certificate_id: std::option::Option<std::string::String>,
    pub(crate) transferred_to: std::option::Option<std::string::String>,
    pub(crate) transfer_date: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) transfer_message: std::option::Option<std::string::String>,
    pub(crate) creation_date: std::option::Option<aws_smithy_types::DateTime>,
}
impl OutgoingCertificateBuilder {
    /// <p>The certificate ARN.</p>
    pub fn certificate_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.certificate_arn = Some(input.into());
        self
    }
    /// <p>The certificate ARN.</p>
    pub fn set_certificate_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.certificate_arn = input;
        self
    }
    /// <p>The certificate ID.</p>
    pub fn certificate_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.certificate_id = Some(input.into());
        self
    }
    /// <p>The certificate ID.</p>
    pub fn set_certificate_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.certificate_id = input;
        self
    }
    /// <p>The Amazon Web Services account to which the transfer was made.</p>
    pub fn transferred_to(mut self, input: impl Into<std::string::String>) -> Self {
        self.transferred_to = Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account to which the transfer was made.</p>
    pub fn set_transferred_to(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.transferred_to = input;
        self
    }
    /// <p>The date the transfer was initiated.</p>
    pub fn transfer_date(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.transfer_date = Some(input);
        self
    }
    /// <p>The date the transfer was initiated.</p>
    pub fn set_transfer_date(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.transfer_date = input;
        self
    }
    /// <p>The transfer message.</p>
    pub fn transfer_message(mut self, input: impl Into<std::string::String>) -> Self {
        self.transfer_message = Some(input.into());
        self
    }
    /// <p>The transfer message.</p>
    pub fn set_transfer_message(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.transfer_message = input;
        self
    }
    /// <p>The certificate creation date.</p>
    pub fn creation_date(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.creation_date = Some(input);
        self
    }
    /// <p>The certificate creation date.</p>
    pub fn set_creation_date(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.creation_date = input;
        self
    }
    /// Consumes the builder and constructs a [`OutgoingCertificate`](crate::types::OutgoingCertificate).
    pub fn build(self) -> crate::types::OutgoingCertificate {
        crate::types::OutgoingCertificate {
            certificate_arn: self.certificate_arn,
            certificate_id: self.certificate_id,
            transferred_to: self.transferred_to,
            transfer_date: self.transfer_date,
            transfer_message: self.transfer_message,
            creation_date: self.creation_date,
        }
    }
}
