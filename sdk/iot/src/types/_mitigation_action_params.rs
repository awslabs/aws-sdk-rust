// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The set of parameters for this mitigation action. You can specify only one type of parameter (in other words, you can apply only one action for each defined mitigation action).</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct MitigationActionParams {
    /// <p>Parameters to define a mitigation action that changes the state of the device certificate to inactive.</p>
    #[doc(hidden)]
    pub update_device_certificate_params:
        std::option::Option<crate::types::UpdateDeviceCertificateParams>,
    /// <p>Parameters to define a mitigation action that changes the state of the CA certificate to inactive.</p>
    #[doc(hidden)]
    pub update_ca_certificate_params: std::option::Option<crate::types::UpdateCaCertificateParams>,
    /// <p>Parameters to define a mitigation action that moves devices associated with a certificate to one or more specified thing groups, typically for quarantine.</p>
    #[doc(hidden)]
    pub add_things_to_thing_group_params:
        std::option::Option<crate::types::AddThingsToThingGroupParams>,
    /// <p>Parameters to define a mitigation action that adds a blank policy to restrict permissions.</p>
    #[doc(hidden)]
    pub replace_default_policy_version_params:
        std::option::Option<crate::types::ReplaceDefaultPolicyVersionParams>,
    /// <p>Parameters to define a mitigation action that enables Amazon Web Services IoT Core logging at a specified level of detail.</p>
    #[doc(hidden)]
    pub enable_io_t_logging_params: std::option::Option<crate::types::EnableIoTLoggingParams>,
    /// <p>Parameters to define a mitigation action that publishes findings to Amazon Simple Notification Service (Amazon SNS. You can implement your own custom actions in response to the Amazon SNS messages.</p>
    #[doc(hidden)]
    pub publish_finding_to_sns_params: std::option::Option<crate::types::PublishFindingToSnsParams>,
}
impl MitigationActionParams {
    /// <p>Parameters to define a mitigation action that changes the state of the device certificate to inactive.</p>
    pub fn update_device_certificate_params(
        &self,
    ) -> std::option::Option<&crate::types::UpdateDeviceCertificateParams> {
        self.update_device_certificate_params.as_ref()
    }
    /// <p>Parameters to define a mitigation action that changes the state of the CA certificate to inactive.</p>
    pub fn update_ca_certificate_params(
        &self,
    ) -> std::option::Option<&crate::types::UpdateCaCertificateParams> {
        self.update_ca_certificate_params.as_ref()
    }
    /// <p>Parameters to define a mitigation action that moves devices associated with a certificate to one or more specified thing groups, typically for quarantine.</p>
    pub fn add_things_to_thing_group_params(
        &self,
    ) -> std::option::Option<&crate::types::AddThingsToThingGroupParams> {
        self.add_things_to_thing_group_params.as_ref()
    }
    /// <p>Parameters to define a mitigation action that adds a blank policy to restrict permissions.</p>
    pub fn replace_default_policy_version_params(
        &self,
    ) -> std::option::Option<&crate::types::ReplaceDefaultPolicyVersionParams> {
        self.replace_default_policy_version_params.as_ref()
    }
    /// <p>Parameters to define a mitigation action that enables Amazon Web Services IoT Core logging at a specified level of detail.</p>
    pub fn enable_io_t_logging_params(
        &self,
    ) -> std::option::Option<&crate::types::EnableIoTLoggingParams> {
        self.enable_io_t_logging_params.as_ref()
    }
    /// <p>Parameters to define a mitigation action that publishes findings to Amazon Simple Notification Service (Amazon SNS. You can implement your own custom actions in response to the Amazon SNS messages.</p>
    pub fn publish_finding_to_sns_params(
        &self,
    ) -> std::option::Option<&crate::types::PublishFindingToSnsParams> {
        self.publish_finding_to_sns_params.as_ref()
    }
}
impl MitigationActionParams {
    /// Creates a new builder-style object to manufacture [`MitigationActionParams`](crate::types::MitigationActionParams).
    pub fn builder() -> crate::types::builders::MitigationActionParamsBuilder {
        crate::types::builders::MitigationActionParamsBuilder::default()
    }
}

/// A builder for [`MitigationActionParams`](crate::types::MitigationActionParams).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct MitigationActionParamsBuilder {
    pub(crate) update_device_certificate_params:
        std::option::Option<crate::types::UpdateDeviceCertificateParams>,
    pub(crate) update_ca_certificate_params:
        std::option::Option<crate::types::UpdateCaCertificateParams>,
    pub(crate) add_things_to_thing_group_params:
        std::option::Option<crate::types::AddThingsToThingGroupParams>,
    pub(crate) replace_default_policy_version_params:
        std::option::Option<crate::types::ReplaceDefaultPolicyVersionParams>,
    pub(crate) enable_io_t_logging_params:
        std::option::Option<crate::types::EnableIoTLoggingParams>,
    pub(crate) publish_finding_to_sns_params:
        std::option::Option<crate::types::PublishFindingToSnsParams>,
}
impl MitigationActionParamsBuilder {
    /// <p>Parameters to define a mitigation action that changes the state of the device certificate to inactive.</p>
    pub fn update_device_certificate_params(
        mut self,
        input: crate::types::UpdateDeviceCertificateParams,
    ) -> Self {
        self.update_device_certificate_params = Some(input);
        self
    }
    /// <p>Parameters to define a mitigation action that changes the state of the device certificate to inactive.</p>
    pub fn set_update_device_certificate_params(
        mut self,
        input: std::option::Option<crate::types::UpdateDeviceCertificateParams>,
    ) -> Self {
        self.update_device_certificate_params = input;
        self
    }
    /// <p>Parameters to define a mitigation action that changes the state of the CA certificate to inactive.</p>
    pub fn update_ca_certificate_params(
        mut self,
        input: crate::types::UpdateCaCertificateParams,
    ) -> Self {
        self.update_ca_certificate_params = Some(input);
        self
    }
    /// <p>Parameters to define a mitigation action that changes the state of the CA certificate to inactive.</p>
    pub fn set_update_ca_certificate_params(
        mut self,
        input: std::option::Option<crate::types::UpdateCaCertificateParams>,
    ) -> Self {
        self.update_ca_certificate_params = input;
        self
    }
    /// <p>Parameters to define a mitigation action that moves devices associated with a certificate to one or more specified thing groups, typically for quarantine.</p>
    pub fn add_things_to_thing_group_params(
        mut self,
        input: crate::types::AddThingsToThingGroupParams,
    ) -> Self {
        self.add_things_to_thing_group_params = Some(input);
        self
    }
    /// <p>Parameters to define a mitigation action that moves devices associated with a certificate to one or more specified thing groups, typically for quarantine.</p>
    pub fn set_add_things_to_thing_group_params(
        mut self,
        input: std::option::Option<crate::types::AddThingsToThingGroupParams>,
    ) -> Self {
        self.add_things_to_thing_group_params = input;
        self
    }
    /// <p>Parameters to define a mitigation action that adds a blank policy to restrict permissions.</p>
    pub fn replace_default_policy_version_params(
        mut self,
        input: crate::types::ReplaceDefaultPolicyVersionParams,
    ) -> Self {
        self.replace_default_policy_version_params = Some(input);
        self
    }
    /// <p>Parameters to define a mitigation action that adds a blank policy to restrict permissions.</p>
    pub fn set_replace_default_policy_version_params(
        mut self,
        input: std::option::Option<crate::types::ReplaceDefaultPolicyVersionParams>,
    ) -> Self {
        self.replace_default_policy_version_params = input;
        self
    }
    /// <p>Parameters to define a mitigation action that enables Amazon Web Services IoT Core logging at a specified level of detail.</p>
    pub fn enable_io_t_logging_params(
        mut self,
        input: crate::types::EnableIoTLoggingParams,
    ) -> Self {
        self.enable_io_t_logging_params = Some(input);
        self
    }
    /// <p>Parameters to define a mitigation action that enables Amazon Web Services IoT Core logging at a specified level of detail.</p>
    pub fn set_enable_io_t_logging_params(
        mut self,
        input: std::option::Option<crate::types::EnableIoTLoggingParams>,
    ) -> Self {
        self.enable_io_t_logging_params = input;
        self
    }
    /// <p>Parameters to define a mitigation action that publishes findings to Amazon Simple Notification Service (Amazon SNS. You can implement your own custom actions in response to the Amazon SNS messages.</p>
    pub fn publish_finding_to_sns_params(
        mut self,
        input: crate::types::PublishFindingToSnsParams,
    ) -> Self {
        self.publish_finding_to_sns_params = Some(input);
        self
    }
    /// <p>Parameters to define a mitigation action that publishes findings to Amazon Simple Notification Service (Amazon SNS. You can implement your own custom actions in response to the Amazon SNS messages.</p>
    pub fn set_publish_finding_to_sns_params(
        mut self,
        input: std::option::Option<crate::types::PublishFindingToSnsParams>,
    ) -> Self {
        self.publish_finding_to_sns_params = input;
        self
    }
    /// Consumes the builder and constructs a [`MitigationActionParams`](crate::types::MitigationActionParams).
    pub fn build(self) -> crate::types::MitigationActionParams {
        crate::types::MitigationActionParams {
            update_device_certificate_params: self.update_device_certificate_params,
            update_ca_certificate_params: self.update_ca_certificate_params,
            add_things_to_thing_group_params: self.add_things_to_thing_group_params,
            replace_default_policy_version_params: self.replace_default_policy_version_params,
            enable_io_t_logging_params: self.enable_io_t_logging_params,
            publish_finding_to_sns_params: self.publish_finding_to_sns_params,
        }
    }
}
