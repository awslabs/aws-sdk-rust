// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information that implicitly denies authorization. When policy doesn't explicitly deny or allow an action on a resource it is considered an implicit deny.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ImplicitDeny {
    /// <p>Policies that don't contain a matching allow or deny statement for the specified action on the specified resource. </p>
    #[doc(hidden)]
    pub policies: std::option::Option<std::vec::Vec<crate::types::Policy>>,
}
impl ImplicitDeny {
    /// <p>Policies that don't contain a matching allow or deny statement for the specified action on the specified resource. </p>
    pub fn policies(&self) -> std::option::Option<&[crate::types::Policy]> {
        self.policies.as_deref()
    }
}
impl ImplicitDeny {
    /// Creates a new builder-style object to manufacture [`ImplicitDeny`](crate::types::ImplicitDeny).
    pub fn builder() -> crate::types::builders::ImplicitDenyBuilder {
        crate::types::builders::ImplicitDenyBuilder::default()
    }
}

/// A builder for [`ImplicitDeny`](crate::types::ImplicitDeny).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ImplicitDenyBuilder {
    pub(crate) policies: std::option::Option<std::vec::Vec<crate::types::Policy>>,
}
impl ImplicitDenyBuilder {
    /// Appends an item to `policies`.
    ///
    /// To override the contents of this collection use [`set_policies`](Self::set_policies).
    ///
    /// <p>Policies that don't contain a matching allow or deny statement for the specified action on the specified resource. </p>
    pub fn policies(mut self, input: crate::types::Policy) -> Self {
        let mut v = self.policies.unwrap_or_default();
        v.push(input);
        self.policies = Some(v);
        self
    }
    /// <p>Policies that don't contain a matching allow or deny statement for the specified action on the specified resource. </p>
    pub fn set_policies(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Policy>>,
    ) -> Self {
        self.policies = input;
        self
    }
    /// Consumes the builder and constructs a [`ImplicitDeny`](crate::types::ImplicitDeny).
    pub fn build(self) -> crate::types::ImplicitDeny {
        crate::types::ImplicitDeny {
            policies: self.policies,
        }
    }
}
