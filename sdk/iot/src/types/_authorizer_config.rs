// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that specifies the authorization service for a domain.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AuthorizerConfig {
    /// <p>The name of the authorization service for a domain configuration.</p>
    #[doc(hidden)]
    pub default_authorizer_name: std::option::Option<std::string::String>,
    /// <p>A Boolean that specifies whether the domain configuration's authorization service can be overridden.</p>
    #[doc(hidden)]
    pub allow_authorizer_override: std::option::Option<bool>,
}
impl AuthorizerConfig {
    /// <p>The name of the authorization service for a domain configuration.</p>
    pub fn default_authorizer_name(&self) -> std::option::Option<&str> {
        self.default_authorizer_name.as_deref()
    }
    /// <p>A Boolean that specifies whether the domain configuration's authorization service can be overridden.</p>
    pub fn allow_authorizer_override(&self) -> std::option::Option<bool> {
        self.allow_authorizer_override
    }
}
impl AuthorizerConfig {
    /// Creates a new builder-style object to manufacture [`AuthorizerConfig`](crate::types::AuthorizerConfig).
    pub fn builder() -> crate::types::builders::AuthorizerConfigBuilder {
        crate::types::builders::AuthorizerConfigBuilder::default()
    }
}

/// A builder for [`AuthorizerConfig`](crate::types::AuthorizerConfig).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AuthorizerConfigBuilder {
    pub(crate) default_authorizer_name: std::option::Option<std::string::String>,
    pub(crate) allow_authorizer_override: std::option::Option<bool>,
}
impl AuthorizerConfigBuilder {
    /// <p>The name of the authorization service for a domain configuration.</p>
    pub fn default_authorizer_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.default_authorizer_name = Some(input.into());
        self
    }
    /// <p>The name of the authorization service for a domain configuration.</p>
    pub fn set_default_authorizer_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.default_authorizer_name = input;
        self
    }
    /// <p>A Boolean that specifies whether the domain configuration's authorization service can be overridden.</p>
    pub fn allow_authorizer_override(mut self, input: bool) -> Self {
        self.allow_authorizer_override = Some(input);
        self
    }
    /// <p>A Boolean that specifies whether the domain configuration's authorization service can be overridden.</p>
    pub fn set_allow_authorizer_override(mut self, input: std::option::Option<bool>) -> Self {
        self.allow_authorizer_override = input;
        self
    }
    /// Consumes the builder and constructs a [`AuthorizerConfig`](crate::types::AuthorizerConfig).
    pub fn build(self) -> crate::types::AuthorizerConfig {
        crate::types::AuthorizerConfig {
            default_authorizer_name: self.default_authorizer_name,
            allow_authorizer_override: self.allow_authorizer_override,
        }
    }
}
