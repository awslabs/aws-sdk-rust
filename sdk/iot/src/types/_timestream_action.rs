// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The Timestream rule action writes attributes (measures) from an MQTT message into an Amazon Timestream table. For more information, see the <a href="https://docs.aws.amazon.com/iot/latest/developerguide/timestream-rule-action.html">Timestream</a> topic rule action documentation.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TimestreamAction {
    /// <p>The ARN of the role that grants permission to write to the Amazon Timestream database table.</p>
    pub role_arn: ::std::string::String,
    /// <p>The name of an Amazon Timestream database.</p>
    pub database_name: ::std::string::String,
    /// <p>The name of the database table into which to write the measure records.</p>
    pub table_name: ::std::string::String,
    /// <p>Metadata attributes of the time series that are written in each measure record.</p>
    pub dimensions: ::std::vec::Vec<crate::types::TimestreamDimension>,
    /// <p>Specifies an application-defined value to replace the default value assigned to the Timestream record's timestamp in the <code>time</code> column.</p>
    /// <p>You can use this property to specify the value and the precision of the Timestream record's timestamp. You can specify a value from the message payload or a value computed by a substitution template.</p>
    /// <p>If omitted, the topic rule action assigns the timestamp, in milliseconds, at the time it processed the rule. </p>
    pub timestamp: ::std::option::Option<crate::types::TimestreamTimestamp>,
}
impl TimestreamAction {
    /// <p>The ARN of the role that grants permission to write to the Amazon Timestream database table.</p>
    pub fn role_arn(&self) -> &str {
        use std::ops::Deref;
        self.role_arn.deref()
    }
    /// <p>The name of an Amazon Timestream database.</p>
    pub fn database_name(&self) -> &str {
        use std::ops::Deref;
        self.database_name.deref()
    }
    /// <p>The name of the database table into which to write the measure records.</p>
    pub fn table_name(&self) -> &str {
        use std::ops::Deref;
        self.table_name.deref()
    }
    /// <p>Metadata attributes of the time series that are written in each measure record.</p>
    pub fn dimensions(&self) -> &[crate::types::TimestreamDimension] {
        use std::ops::Deref;
        self.dimensions.deref()
    }
    /// <p>Specifies an application-defined value to replace the default value assigned to the Timestream record's timestamp in the <code>time</code> column.</p>
    /// <p>You can use this property to specify the value and the precision of the Timestream record's timestamp. You can specify a value from the message payload or a value computed by a substitution template.</p>
    /// <p>If omitted, the topic rule action assigns the timestamp, in milliseconds, at the time it processed the rule. </p>
    pub fn timestamp(&self) -> ::std::option::Option<&crate::types::TimestreamTimestamp> {
        self.timestamp.as_ref()
    }
}
impl TimestreamAction {
    /// Creates a new builder-style object to manufacture [`TimestreamAction`](crate::types::TimestreamAction).
    pub fn builder() -> crate::types::builders::TimestreamActionBuilder {
        crate::types::builders::TimestreamActionBuilder::default()
    }
}

/// A builder for [`TimestreamAction`](crate::types::TimestreamAction).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct TimestreamActionBuilder {
    pub(crate) role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) database_name: ::std::option::Option<::std::string::String>,
    pub(crate) table_name: ::std::option::Option<::std::string::String>,
    pub(crate) dimensions: ::std::option::Option<::std::vec::Vec<crate::types::TimestreamDimension>>,
    pub(crate) timestamp: ::std::option::Option<crate::types::TimestreamTimestamp>,
}
impl TimestreamActionBuilder {
    /// <p>The ARN of the role that grants permission to write to the Amazon Timestream database table.</p>
    /// This field is required.
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the role that grants permission to write to the Amazon Timestream database table.</p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The ARN of the role that grants permission to write to the Amazon Timestream database table.</p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn
    }
    /// <p>The name of an Amazon Timestream database.</p>
    /// This field is required.
    pub fn database_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.database_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of an Amazon Timestream database.</p>
    pub fn set_database_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.database_name = input;
        self
    }
    /// <p>The name of an Amazon Timestream database.</p>
    pub fn get_database_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.database_name
    }
    /// <p>The name of the database table into which to write the measure records.</p>
    /// This field is required.
    pub fn table_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.table_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the database table into which to write the measure records.</p>
    pub fn set_table_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.table_name = input;
        self
    }
    /// <p>The name of the database table into which to write the measure records.</p>
    pub fn get_table_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.table_name
    }
    /// Appends an item to `dimensions`.
    ///
    /// To override the contents of this collection use [`set_dimensions`](Self::set_dimensions).
    ///
    /// <p>Metadata attributes of the time series that are written in each measure record.</p>
    pub fn dimensions(mut self, input: crate::types::TimestreamDimension) -> Self {
        let mut v = self.dimensions.unwrap_or_default();
        v.push(input);
        self.dimensions = ::std::option::Option::Some(v);
        self
    }
    /// <p>Metadata attributes of the time series that are written in each measure record.</p>
    pub fn set_dimensions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::TimestreamDimension>>) -> Self {
        self.dimensions = input;
        self
    }
    /// <p>Metadata attributes of the time series that are written in each measure record.</p>
    pub fn get_dimensions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::TimestreamDimension>> {
        &self.dimensions
    }
    /// <p>Specifies an application-defined value to replace the default value assigned to the Timestream record's timestamp in the <code>time</code> column.</p>
    /// <p>You can use this property to specify the value and the precision of the Timestream record's timestamp. You can specify a value from the message payload or a value computed by a substitution template.</p>
    /// <p>If omitted, the topic rule action assigns the timestamp, in milliseconds, at the time it processed the rule. </p>
    pub fn timestamp(mut self, input: crate::types::TimestreamTimestamp) -> Self {
        self.timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies an application-defined value to replace the default value assigned to the Timestream record's timestamp in the <code>time</code> column.</p>
    /// <p>You can use this property to specify the value and the precision of the Timestream record's timestamp. You can specify a value from the message payload or a value computed by a substitution template.</p>
    /// <p>If omitted, the topic rule action assigns the timestamp, in milliseconds, at the time it processed the rule. </p>
    pub fn set_timestamp(mut self, input: ::std::option::Option<crate::types::TimestreamTimestamp>) -> Self {
        self.timestamp = input;
        self
    }
    /// <p>Specifies an application-defined value to replace the default value assigned to the Timestream record's timestamp in the <code>time</code> column.</p>
    /// <p>You can use this property to specify the value and the precision of the Timestream record's timestamp. You can specify a value from the message payload or a value computed by a substitution template.</p>
    /// <p>If omitted, the topic rule action assigns the timestamp, in milliseconds, at the time it processed the rule. </p>
    pub fn get_timestamp(&self) -> &::std::option::Option<crate::types::TimestreamTimestamp> {
        &self.timestamp
    }
    /// Consumes the builder and constructs a [`TimestreamAction`](crate::types::TimestreamAction).
    /// This method will fail if any of the following fields are not set:
    /// - [`role_arn`](crate::types::builders::TimestreamActionBuilder::role_arn)
    /// - [`database_name`](crate::types::builders::TimestreamActionBuilder::database_name)
    /// - [`table_name`](crate::types::builders::TimestreamActionBuilder::table_name)
    /// - [`dimensions`](crate::types::builders::TimestreamActionBuilder::dimensions)
    pub fn build(self) -> ::std::result::Result<crate::types::TimestreamAction, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::TimestreamAction {
            role_arn: self.role_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "role_arn",
                    "role_arn was not specified but it is required when building TimestreamAction",
                )
            })?,
            database_name: self.database_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "database_name",
                    "database_name was not specified but it is required when building TimestreamAction",
                )
            })?,
            table_name: self.table_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "table_name",
                    "table_name was not specified but it is required when building TimestreamAction",
                )
            })?,
            dimensions: self.dimensions.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "dimensions",
                    "dimensions was not specified but it is required when building TimestreamAction",
                )
            })?,
            timestamp: self.timestamp,
        })
    }
}
