// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Parameters to define a mitigation action that adds a blank policy to restrict permissions.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ReplaceDefaultPolicyVersionParams {
    /// <p>The name of the template to be applied. The only supported value is <code>BLANK_POLICY</code>.</p>
    pub template_name: crate::types::PolicyTemplateName,
}
impl ReplaceDefaultPolicyVersionParams {
    /// <p>The name of the template to be applied. The only supported value is <code>BLANK_POLICY</code>.</p>
    pub fn template_name(&self) -> &crate::types::PolicyTemplateName {
        &self.template_name
    }
}
impl ReplaceDefaultPolicyVersionParams {
    /// Creates a new builder-style object to manufacture [`ReplaceDefaultPolicyVersionParams`](crate::types::ReplaceDefaultPolicyVersionParams).
    pub fn builder() -> crate::types::builders::ReplaceDefaultPolicyVersionParamsBuilder {
        crate::types::builders::ReplaceDefaultPolicyVersionParamsBuilder::default()
    }
}

/// A builder for [`ReplaceDefaultPolicyVersionParams`](crate::types::ReplaceDefaultPolicyVersionParams).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ReplaceDefaultPolicyVersionParamsBuilder {
    pub(crate) template_name: ::std::option::Option<crate::types::PolicyTemplateName>,
}
impl ReplaceDefaultPolicyVersionParamsBuilder {
    /// <p>The name of the template to be applied. The only supported value is <code>BLANK_POLICY</code>.</p>
    /// This field is required.
    pub fn template_name(mut self, input: crate::types::PolicyTemplateName) -> Self {
        self.template_name = ::std::option::Option::Some(input);
        self
    }
    /// <p>The name of the template to be applied. The only supported value is <code>BLANK_POLICY</code>.</p>
    pub fn set_template_name(mut self, input: ::std::option::Option<crate::types::PolicyTemplateName>) -> Self {
        self.template_name = input;
        self
    }
    /// <p>The name of the template to be applied. The only supported value is <code>BLANK_POLICY</code>.</p>
    pub fn get_template_name(&self) -> &::std::option::Option<crate::types::PolicyTemplateName> {
        &self.template_name
    }
    /// Consumes the builder and constructs a [`ReplaceDefaultPolicyVersionParams`](crate::types::ReplaceDefaultPolicyVersionParams).
    /// This method will fail if any of the following fields are not set:
    /// - [`template_name`](crate::types::builders::ReplaceDefaultPolicyVersionParamsBuilder::template_name)
    pub fn build(self) -> ::std::result::Result<crate::types::ReplaceDefaultPolicyVersionParams, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ReplaceDefaultPolicyVersionParams {
            template_name: self.template_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "template_name",
                    "template_name was not specified but it is required when building ReplaceDefaultPolicyVersionParams",
                )
            })?,
        })
    }
}
