// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the date and time that a job will begin the rollout of the job document to all devices in the target group. Additionally, you can specify the end behavior for each job execution when it reaches the scheduled end time.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SchedulingConfig {
    /// <p>The time a job will begin rollout of the job document to all devices in the target group for a job. The <code>startTime</code> can be scheduled up to a year in advance and must be scheduled a minimum of thirty minutes from the current time.</p>
    #[doc(hidden)]
    pub start_time: std::option::Option<std::string::String>,
    /// <p>The time a job will stop rollout of the job document to all devices in the target group for a job. The <code>endTime</code> must take place no later than two years from the current time and be scheduled a minimum of thirty minutes from the current time. The minimum duration between <code>startTime</code> and <code>endTime</code> is thirty minutes. The maximum duration between <code>startTime</code> and <code>endTime</code> is two years. </p>
    #[doc(hidden)]
    pub end_time: std::option::Option<std::string::String>,
    /// <p>Specifies the end behavior for all job executions after a job reaches the selected <code>endTime</code>. If <code>endTime</code> is not selected when creating the job, then <code>endBehavior</code> does not apply.</p>
    #[doc(hidden)]
    pub end_behavior: std::option::Option<crate::types::JobEndBehavior>,
}
impl SchedulingConfig {
    /// <p>The time a job will begin rollout of the job document to all devices in the target group for a job. The <code>startTime</code> can be scheduled up to a year in advance and must be scheduled a minimum of thirty minutes from the current time.</p>
    pub fn start_time(&self) -> std::option::Option<&str> {
        self.start_time.as_deref()
    }
    /// <p>The time a job will stop rollout of the job document to all devices in the target group for a job. The <code>endTime</code> must take place no later than two years from the current time and be scheduled a minimum of thirty minutes from the current time. The minimum duration between <code>startTime</code> and <code>endTime</code> is thirty minutes. The maximum duration between <code>startTime</code> and <code>endTime</code> is two years. </p>
    pub fn end_time(&self) -> std::option::Option<&str> {
        self.end_time.as_deref()
    }
    /// <p>Specifies the end behavior for all job executions after a job reaches the selected <code>endTime</code>. If <code>endTime</code> is not selected when creating the job, then <code>endBehavior</code> does not apply.</p>
    pub fn end_behavior(&self) -> std::option::Option<&crate::types::JobEndBehavior> {
        self.end_behavior.as_ref()
    }
}
impl SchedulingConfig {
    /// Creates a new builder-style object to manufacture [`SchedulingConfig`](crate::types::SchedulingConfig).
    pub fn builder() -> crate::types::builders::SchedulingConfigBuilder {
        crate::types::builders::SchedulingConfigBuilder::default()
    }
}

/// A builder for [`SchedulingConfig`](crate::types::SchedulingConfig).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SchedulingConfigBuilder {
    pub(crate) start_time: std::option::Option<std::string::String>,
    pub(crate) end_time: std::option::Option<std::string::String>,
    pub(crate) end_behavior: std::option::Option<crate::types::JobEndBehavior>,
}
impl SchedulingConfigBuilder {
    /// <p>The time a job will begin rollout of the job document to all devices in the target group for a job. The <code>startTime</code> can be scheduled up to a year in advance and must be scheduled a minimum of thirty minutes from the current time.</p>
    pub fn start_time(mut self, input: impl Into<std::string::String>) -> Self {
        self.start_time = Some(input.into());
        self
    }
    /// <p>The time a job will begin rollout of the job document to all devices in the target group for a job. The <code>startTime</code> can be scheduled up to a year in advance and must be scheduled a minimum of thirty minutes from the current time.</p>
    pub fn set_start_time(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.start_time = input;
        self
    }
    /// <p>The time a job will stop rollout of the job document to all devices in the target group for a job. The <code>endTime</code> must take place no later than two years from the current time and be scheduled a minimum of thirty minutes from the current time. The minimum duration between <code>startTime</code> and <code>endTime</code> is thirty minutes. The maximum duration between <code>startTime</code> and <code>endTime</code> is two years. </p>
    pub fn end_time(mut self, input: impl Into<std::string::String>) -> Self {
        self.end_time = Some(input.into());
        self
    }
    /// <p>The time a job will stop rollout of the job document to all devices in the target group for a job. The <code>endTime</code> must take place no later than two years from the current time and be scheduled a minimum of thirty minutes from the current time. The minimum duration between <code>startTime</code> and <code>endTime</code> is thirty minutes. The maximum duration between <code>startTime</code> and <code>endTime</code> is two years. </p>
    pub fn set_end_time(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.end_time = input;
        self
    }
    /// <p>Specifies the end behavior for all job executions after a job reaches the selected <code>endTime</code>. If <code>endTime</code> is not selected when creating the job, then <code>endBehavior</code> does not apply.</p>
    pub fn end_behavior(mut self, input: crate::types::JobEndBehavior) -> Self {
        self.end_behavior = Some(input);
        self
    }
    /// <p>Specifies the end behavior for all job executions after a job reaches the selected <code>endTime</code>. If <code>endTime</code> is not selected when creating the job, then <code>endBehavior</code> does not apply.</p>
    pub fn set_end_behavior(
        mut self,
        input: std::option::Option<crate::types::JobEndBehavior>,
    ) -> Self {
        self.end_behavior = input;
        self
    }
    /// Consumes the builder and constructs a [`SchedulingConfig`](crate::types::SchedulingConfig).
    pub fn build(self) -> crate::types::SchedulingConfig {
        crate::types::SchedulingConfig {
            start_time: self.start_time,
            end_time: self.end_time,
            end_behavior: self.end_behavior,
        }
    }
}
