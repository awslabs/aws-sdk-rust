// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes an action that captures a CloudWatch metric.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CloudwatchMetricAction {
    /// <p>The IAM role that allows access to the CloudWatch metric.</p>
    #[doc(hidden)]
    pub role_arn: std::option::Option<std::string::String>,
    /// <p>The CloudWatch metric namespace name.</p>
    #[doc(hidden)]
    pub metric_namespace: std::option::Option<std::string::String>,
    /// <p>The CloudWatch metric name.</p>
    #[doc(hidden)]
    pub metric_name: std::option::Option<std::string::String>,
    /// <p>The CloudWatch metric value.</p>
    #[doc(hidden)]
    pub metric_value: std::option::Option<std::string::String>,
    /// <p>The <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/cloudwatch_concepts.html#Unit">metric unit</a> supported by CloudWatch.</p>
    #[doc(hidden)]
    pub metric_unit: std::option::Option<std::string::String>,
    /// <p>An optional <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/cloudwatch_concepts.html#about_timestamp">Unix timestamp</a>.</p>
    #[doc(hidden)]
    pub metric_timestamp: std::option::Option<std::string::String>,
}
impl CloudwatchMetricAction {
    /// <p>The IAM role that allows access to the CloudWatch metric.</p>
    pub fn role_arn(&self) -> std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>The CloudWatch metric namespace name.</p>
    pub fn metric_namespace(&self) -> std::option::Option<&str> {
        self.metric_namespace.as_deref()
    }
    /// <p>The CloudWatch metric name.</p>
    pub fn metric_name(&self) -> std::option::Option<&str> {
        self.metric_name.as_deref()
    }
    /// <p>The CloudWatch metric value.</p>
    pub fn metric_value(&self) -> std::option::Option<&str> {
        self.metric_value.as_deref()
    }
    /// <p>The <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/cloudwatch_concepts.html#Unit">metric unit</a> supported by CloudWatch.</p>
    pub fn metric_unit(&self) -> std::option::Option<&str> {
        self.metric_unit.as_deref()
    }
    /// <p>An optional <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/cloudwatch_concepts.html#about_timestamp">Unix timestamp</a>.</p>
    pub fn metric_timestamp(&self) -> std::option::Option<&str> {
        self.metric_timestamp.as_deref()
    }
}
impl CloudwatchMetricAction {
    /// Creates a new builder-style object to manufacture [`CloudwatchMetricAction`](crate::types::CloudwatchMetricAction).
    pub fn builder() -> crate::types::builders::CloudwatchMetricActionBuilder {
        crate::types::builders::CloudwatchMetricActionBuilder::default()
    }
}

/// A builder for [`CloudwatchMetricAction`](crate::types::CloudwatchMetricAction).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CloudwatchMetricActionBuilder {
    pub(crate) role_arn: std::option::Option<std::string::String>,
    pub(crate) metric_namespace: std::option::Option<std::string::String>,
    pub(crate) metric_name: std::option::Option<std::string::String>,
    pub(crate) metric_value: std::option::Option<std::string::String>,
    pub(crate) metric_unit: std::option::Option<std::string::String>,
    pub(crate) metric_timestamp: std::option::Option<std::string::String>,
}
impl CloudwatchMetricActionBuilder {
    /// <p>The IAM role that allows access to the CloudWatch metric.</p>
    pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.role_arn = Some(input.into());
        self
    }
    /// <p>The IAM role that allows access to the CloudWatch metric.</p>
    pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The CloudWatch metric namespace name.</p>
    pub fn metric_namespace(mut self, input: impl Into<std::string::String>) -> Self {
        self.metric_namespace = Some(input.into());
        self
    }
    /// <p>The CloudWatch metric namespace name.</p>
    pub fn set_metric_namespace(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.metric_namespace = input;
        self
    }
    /// <p>The CloudWatch metric name.</p>
    pub fn metric_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.metric_name = Some(input.into());
        self
    }
    /// <p>The CloudWatch metric name.</p>
    pub fn set_metric_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.metric_name = input;
        self
    }
    /// <p>The CloudWatch metric value.</p>
    pub fn metric_value(mut self, input: impl Into<std::string::String>) -> Self {
        self.metric_value = Some(input.into());
        self
    }
    /// <p>The CloudWatch metric value.</p>
    pub fn set_metric_value(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.metric_value = input;
        self
    }
    /// <p>The <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/cloudwatch_concepts.html#Unit">metric unit</a> supported by CloudWatch.</p>
    pub fn metric_unit(mut self, input: impl Into<std::string::String>) -> Self {
        self.metric_unit = Some(input.into());
        self
    }
    /// <p>The <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/cloudwatch_concepts.html#Unit">metric unit</a> supported by CloudWatch.</p>
    pub fn set_metric_unit(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.metric_unit = input;
        self
    }
    /// <p>An optional <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/cloudwatch_concepts.html#about_timestamp">Unix timestamp</a>.</p>
    pub fn metric_timestamp(mut self, input: impl Into<std::string::String>) -> Self {
        self.metric_timestamp = Some(input.into());
        self
    }
    /// <p>An optional <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/cloudwatch_concepts.html#about_timestamp">Unix timestamp</a>.</p>
    pub fn set_metric_timestamp(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.metric_timestamp = input;
        self
    }
    /// Consumes the builder and constructs a [`CloudwatchMetricAction`](crate::types::CloudwatchMetricAction).
    pub fn build(self) -> crate::types::CloudwatchMetricAction {
        crate::types::CloudwatchMetricAction {
            role_arn: self.role_arn,
            metric_namespace: self.metric_namespace,
            metric_name: self.metric_name,
            metric_value: self.metric_value,
            metric_unit: self.metric_unit,
            metric_timestamp: self.metric_timestamp,
        }
    }
}
