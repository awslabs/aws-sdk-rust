// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes an action that captures a CloudWatch metric.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CloudwatchMetricAction {
    /// <p>The IAM role that allows access to the CloudWatch metric.</p>
    pub role_arn: ::std::string::String,
    /// <p>The CloudWatch metric namespace name.</p>
    pub metric_namespace: ::std::string::String,
    /// <p>The CloudWatch metric name.</p>
    pub metric_name: ::std::string::String,
    /// <p>The CloudWatch metric value.</p>
    pub metric_value: ::std::string::String,
    /// <p>The <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/cloudwatch_concepts.html#Unit">metric unit</a> supported by CloudWatch.</p>
    pub metric_unit: ::std::string::String,
    /// <p>An optional <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/cloudwatch_concepts.html#about_timestamp">Unix timestamp</a>.</p>
    pub metric_timestamp: ::std::option::Option<::std::string::String>,
}
impl CloudwatchMetricAction {
    /// <p>The IAM role that allows access to the CloudWatch metric.</p>
    pub fn role_arn(&self) -> &str {
        use std::ops::Deref;
        self.role_arn.deref()
    }
    /// <p>The CloudWatch metric namespace name.</p>
    pub fn metric_namespace(&self) -> &str {
        use std::ops::Deref;
        self.metric_namespace.deref()
    }
    /// <p>The CloudWatch metric name.</p>
    pub fn metric_name(&self) -> &str {
        use std::ops::Deref;
        self.metric_name.deref()
    }
    /// <p>The CloudWatch metric value.</p>
    pub fn metric_value(&self) -> &str {
        use std::ops::Deref;
        self.metric_value.deref()
    }
    /// <p>The <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/cloudwatch_concepts.html#Unit">metric unit</a> supported by CloudWatch.</p>
    pub fn metric_unit(&self) -> &str {
        use std::ops::Deref;
        self.metric_unit.deref()
    }
    /// <p>An optional <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/cloudwatch_concepts.html#about_timestamp">Unix timestamp</a>.</p>
    pub fn metric_timestamp(&self) -> ::std::option::Option<&str> {
        self.metric_timestamp.as_deref()
    }
}
impl CloudwatchMetricAction {
    /// Creates a new builder-style object to manufacture [`CloudwatchMetricAction`](crate::types::CloudwatchMetricAction).
    pub fn builder() -> crate::types::builders::CloudwatchMetricActionBuilder {
        crate::types::builders::CloudwatchMetricActionBuilder::default()
    }
}

/// A builder for [`CloudwatchMetricAction`](crate::types::CloudwatchMetricAction).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CloudwatchMetricActionBuilder {
    pub(crate) role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) metric_namespace: ::std::option::Option<::std::string::String>,
    pub(crate) metric_name: ::std::option::Option<::std::string::String>,
    pub(crate) metric_value: ::std::option::Option<::std::string::String>,
    pub(crate) metric_unit: ::std::option::Option<::std::string::String>,
    pub(crate) metric_timestamp: ::std::option::Option<::std::string::String>,
}
impl CloudwatchMetricActionBuilder {
    /// <p>The IAM role that allows access to the CloudWatch metric.</p>
    /// This field is required.
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The IAM role that allows access to the CloudWatch metric.</p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The IAM role that allows access to the CloudWatch metric.</p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn
    }
    /// <p>The CloudWatch metric namespace name.</p>
    /// This field is required.
    pub fn metric_namespace(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.metric_namespace = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The CloudWatch metric namespace name.</p>
    pub fn set_metric_namespace(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.metric_namespace = input;
        self
    }
    /// <p>The CloudWatch metric namespace name.</p>
    pub fn get_metric_namespace(&self) -> &::std::option::Option<::std::string::String> {
        &self.metric_namespace
    }
    /// <p>The CloudWatch metric name.</p>
    /// This field is required.
    pub fn metric_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.metric_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The CloudWatch metric name.</p>
    pub fn set_metric_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.metric_name = input;
        self
    }
    /// <p>The CloudWatch metric name.</p>
    pub fn get_metric_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.metric_name
    }
    /// <p>The CloudWatch metric value.</p>
    /// This field is required.
    pub fn metric_value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.metric_value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The CloudWatch metric value.</p>
    pub fn set_metric_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.metric_value = input;
        self
    }
    /// <p>The CloudWatch metric value.</p>
    pub fn get_metric_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.metric_value
    }
    /// <p>The <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/cloudwatch_concepts.html#Unit">metric unit</a> supported by CloudWatch.</p>
    /// This field is required.
    pub fn metric_unit(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.metric_unit = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/cloudwatch_concepts.html#Unit">metric unit</a> supported by CloudWatch.</p>
    pub fn set_metric_unit(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.metric_unit = input;
        self
    }
    /// <p>The <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/cloudwatch_concepts.html#Unit">metric unit</a> supported by CloudWatch.</p>
    pub fn get_metric_unit(&self) -> &::std::option::Option<::std::string::String> {
        &self.metric_unit
    }
    /// <p>An optional <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/cloudwatch_concepts.html#about_timestamp">Unix timestamp</a>.</p>
    pub fn metric_timestamp(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.metric_timestamp = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An optional <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/cloudwatch_concepts.html#about_timestamp">Unix timestamp</a>.</p>
    pub fn set_metric_timestamp(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.metric_timestamp = input;
        self
    }
    /// <p>An optional <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/cloudwatch_concepts.html#about_timestamp">Unix timestamp</a>.</p>
    pub fn get_metric_timestamp(&self) -> &::std::option::Option<::std::string::String> {
        &self.metric_timestamp
    }
    /// Consumes the builder and constructs a [`CloudwatchMetricAction`](crate::types::CloudwatchMetricAction).
    /// This method will fail if any of the following fields are not set:
    /// - [`role_arn`](crate::types::builders::CloudwatchMetricActionBuilder::role_arn)
    /// - [`metric_namespace`](crate::types::builders::CloudwatchMetricActionBuilder::metric_namespace)
    /// - [`metric_name`](crate::types::builders::CloudwatchMetricActionBuilder::metric_name)
    /// - [`metric_value`](crate::types::builders::CloudwatchMetricActionBuilder::metric_value)
    /// - [`metric_unit`](crate::types::builders::CloudwatchMetricActionBuilder::metric_unit)
    pub fn build(self) -> ::std::result::Result<crate::types::CloudwatchMetricAction, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CloudwatchMetricAction {
            role_arn: self.role_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "role_arn",
                    "role_arn was not specified but it is required when building CloudwatchMetricAction",
                )
            })?,
            metric_namespace: self.metric_namespace.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "metric_namespace",
                    "metric_namespace was not specified but it is required when building CloudwatchMetricAction",
                )
            })?,
            metric_name: self.metric_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "metric_name",
                    "metric_name was not specified but it is required when building CloudwatchMetricAction",
                )
            })?,
            metric_value: self.metric_value.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "metric_value",
                    "metric_value was not specified but it is required when building CloudwatchMetricAction",
                )
            })?,
            metric_unit: self.metric_unit.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "metric_unit",
                    "metric_unit was not specified but it is required when building CloudwatchMetricAction",
                )
            })?,
            metric_timestamp: self.metric_timestamp,
        })
    }
}
