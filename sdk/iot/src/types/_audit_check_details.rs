// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the audit check.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AuditCheckDetails {
    /// <p>The completion status of this check. One of "IN_PROGRESS", "WAITING_FOR_DATA_COLLECTION", "CANCELED", "COMPLETED_COMPLIANT", "COMPLETED_NON_COMPLIANT", or "FAILED".</p>
    #[doc(hidden)]
    pub check_run_status: std::option::Option<crate::types::AuditCheckRunStatus>,
    /// <p>True if the check is complete and found all resources compliant.</p>
    #[doc(hidden)]
    pub check_compliant: std::option::Option<bool>,
    /// <p>The number of resources on which the check was performed.</p>
    #[doc(hidden)]
    pub total_resources_count: std::option::Option<i64>,
    /// <p>The number of resources that were found noncompliant during the check.</p>
    #[doc(hidden)]
    pub non_compliant_resources_count: std::option::Option<i64>,
    /// <p> Describes how many of the non-compliant resources created during the evaluation of an audit check were marked as suppressed. </p>
    #[doc(hidden)]
    pub suppressed_non_compliant_resources_count: std::option::Option<i64>,
    /// <p>The code of any error encountered when this check is performed during this audit. One of "INSUFFICIENT_PERMISSIONS" or "AUDIT_CHECK_DISABLED".</p>
    #[doc(hidden)]
    pub error_code: std::option::Option<std::string::String>,
    /// <p>The message associated with any error encountered when this check is performed during this audit.</p>
    #[doc(hidden)]
    pub message: std::option::Option<std::string::String>,
}
impl AuditCheckDetails {
    /// <p>The completion status of this check. One of "IN_PROGRESS", "WAITING_FOR_DATA_COLLECTION", "CANCELED", "COMPLETED_COMPLIANT", "COMPLETED_NON_COMPLIANT", or "FAILED".</p>
    pub fn check_run_status(&self) -> std::option::Option<&crate::types::AuditCheckRunStatus> {
        self.check_run_status.as_ref()
    }
    /// <p>True if the check is complete and found all resources compliant.</p>
    pub fn check_compliant(&self) -> std::option::Option<bool> {
        self.check_compliant
    }
    /// <p>The number of resources on which the check was performed.</p>
    pub fn total_resources_count(&self) -> std::option::Option<i64> {
        self.total_resources_count
    }
    /// <p>The number of resources that were found noncompliant during the check.</p>
    pub fn non_compliant_resources_count(&self) -> std::option::Option<i64> {
        self.non_compliant_resources_count
    }
    /// <p> Describes how many of the non-compliant resources created during the evaluation of an audit check were marked as suppressed. </p>
    pub fn suppressed_non_compliant_resources_count(&self) -> std::option::Option<i64> {
        self.suppressed_non_compliant_resources_count
    }
    /// <p>The code of any error encountered when this check is performed during this audit. One of "INSUFFICIENT_PERMISSIONS" or "AUDIT_CHECK_DISABLED".</p>
    pub fn error_code(&self) -> std::option::Option<&str> {
        self.error_code.as_deref()
    }
    /// <p>The message associated with any error encountered when this check is performed during this audit.</p>
    pub fn message(&self) -> std::option::Option<&str> {
        self.message.as_deref()
    }
}
impl AuditCheckDetails {
    /// Creates a new builder-style object to manufacture [`AuditCheckDetails`](crate::types::AuditCheckDetails).
    pub fn builder() -> crate::types::builders::AuditCheckDetailsBuilder {
        crate::types::builders::AuditCheckDetailsBuilder::default()
    }
}

/// A builder for [`AuditCheckDetails`](crate::types::AuditCheckDetails).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AuditCheckDetailsBuilder {
    pub(crate) check_run_status: std::option::Option<crate::types::AuditCheckRunStatus>,
    pub(crate) check_compliant: std::option::Option<bool>,
    pub(crate) total_resources_count: std::option::Option<i64>,
    pub(crate) non_compliant_resources_count: std::option::Option<i64>,
    pub(crate) suppressed_non_compliant_resources_count: std::option::Option<i64>,
    pub(crate) error_code: std::option::Option<std::string::String>,
    pub(crate) message: std::option::Option<std::string::String>,
}
impl AuditCheckDetailsBuilder {
    /// <p>The completion status of this check. One of "IN_PROGRESS", "WAITING_FOR_DATA_COLLECTION", "CANCELED", "COMPLETED_COMPLIANT", "COMPLETED_NON_COMPLIANT", or "FAILED".</p>
    pub fn check_run_status(mut self, input: crate::types::AuditCheckRunStatus) -> Self {
        self.check_run_status = Some(input);
        self
    }
    /// <p>The completion status of this check. One of "IN_PROGRESS", "WAITING_FOR_DATA_COLLECTION", "CANCELED", "COMPLETED_COMPLIANT", "COMPLETED_NON_COMPLIANT", or "FAILED".</p>
    pub fn set_check_run_status(
        mut self,
        input: std::option::Option<crate::types::AuditCheckRunStatus>,
    ) -> Self {
        self.check_run_status = input;
        self
    }
    /// <p>True if the check is complete and found all resources compliant.</p>
    pub fn check_compliant(mut self, input: bool) -> Self {
        self.check_compliant = Some(input);
        self
    }
    /// <p>True if the check is complete and found all resources compliant.</p>
    pub fn set_check_compliant(mut self, input: std::option::Option<bool>) -> Self {
        self.check_compliant = input;
        self
    }
    /// <p>The number of resources on which the check was performed.</p>
    pub fn total_resources_count(mut self, input: i64) -> Self {
        self.total_resources_count = Some(input);
        self
    }
    /// <p>The number of resources on which the check was performed.</p>
    pub fn set_total_resources_count(mut self, input: std::option::Option<i64>) -> Self {
        self.total_resources_count = input;
        self
    }
    /// <p>The number of resources that were found noncompliant during the check.</p>
    pub fn non_compliant_resources_count(mut self, input: i64) -> Self {
        self.non_compliant_resources_count = Some(input);
        self
    }
    /// <p>The number of resources that were found noncompliant during the check.</p>
    pub fn set_non_compliant_resources_count(mut self, input: std::option::Option<i64>) -> Self {
        self.non_compliant_resources_count = input;
        self
    }
    /// <p> Describes how many of the non-compliant resources created during the evaluation of an audit check were marked as suppressed. </p>
    pub fn suppressed_non_compliant_resources_count(mut self, input: i64) -> Self {
        self.suppressed_non_compliant_resources_count = Some(input);
        self
    }
    /// <p> Describes how many of the non-compliant resources created during the evaluation of an audit check were marked as suppressed. </p>
    pub fn set_suppressed_non_compliant_resources_count(
        mut self,
        input: std::option::Option<i64>,
    ) -> Self {
        self.suppressed_non_compliant_resources_count = input;
        self
    }
    /// <p>The code of any error encountered when this check is performed during this audit. One of "INSUFFICIENT_PERMISSIONS" or "AUDIT_CHECK_DISABLED".</p>
    pub fn error_code(mut self, input: impl Into<std::string::String>) -> Self {
        self.error_code = Some(input.into());
        self
    }
    /// <p>The code of any error encountered when this check is performed during this audit. One of "INSUFFICIENT_PERMISSIONS" or "AUDIT_CHECK_DISABLED".</p>
    pub fn set_error_code(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.error_code = input;
        self
    }
    /// <p>The message associated with any error encountered when this check is performed during this audit.</p>
    pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
        self.message = Some(input.into());
        self
    }
    /// <p>The message associated with any error encountered when this check is performed during this audit.</p>
    pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.message = input;
        self
    }
    /// Consumes the builder and constructs a [`AuditCheckDetails`](crate::types::AuditCheckDetails).
    pub fn build(self) -> crate::types::AuditCheckDetails {
        crate::types::AuditCheckDetails {
            check_run_status: self.check_run_status,
            check_compliant: self.check_compliant,
            total_resources_count: self.total_resources_count,
            non_compliant_resources_count: self.non_compliant_resources_count,
            suppressed_non_compliant_resources_count: self.suppressed_non_compliant_resources_count,
            error_code: self.error_code,
            message: self.message,
        }
    }
}
