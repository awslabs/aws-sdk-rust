// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes an action to write data to an Amazon Kinesis stream.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct KinesisAction {
    /// <p>The ARN of the IAM role that grants access to the Amazon Kinesis stream.</p>
    #[doc(hidden)]
    pub role_arn: std::option::Option<std::string::String>,
    /// <p>The name of the Amazon Kinesis stream.</p>
    #[doc(hidden)]
    pub stream_name: std::option::Option<std::string::String>,
    /// <p>The partition key.</p>
    #[doc(hidden)]
    pub partition_key: std::option::Option<std::string::String>,
}
impl KinesisAction {
    /// <p>The ARN of the IAM role that grants access to the Amazon Kinesis stream.</p>
    pub fn role_arn(&self) -> std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>The name of the Amazon Kinesis stream.</p>
    pub fn stream_name(&self) -> std::option::Option<&str> {
        self.stream_name.as_deref()
    }
    /// <p>The partition key.</p>
    pub fn partition_key(&self) -> std::option::Option<&str> {
        self.partition_key.as_deref()
    }
}
impl KinesisAction {
    /// Creates a new builder-style object to manufacture [`KinesisAction`](crate::types::KinesisAction).
    pub fn builder() -> crate::types::builders::KinesisActionBuilder {
        crate::types::builders::KinesisActionBuilder::default()
    }
}

/// A builder for [`KinesisAction`](crate::types::KinesisAction).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct KinesisActionBuilder {
    pub(crate) role_arn: std::option::Option<std::string::String>,
    pub(crate) stream_name: std::option::Option<std::string::String>,
    pub(crate) partition_key: std::option::Option<std::string::String>,
}
impl KinesisActionBuilder {
    /// <p>The ARN of the IAM role that grants access to the Amazon Kinesis stream.</p>
    pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.role_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the IAM role that grants access to the Amazon Kinesis stream.</p>
    pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The name of the Amazon Kinesis stream.</p>
    pub fn stream_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.stream_name = Some(input.into());
        self
    }
    /// <p>The name of the Amazon Kinesis stream.</p>
    pub fn set_stream_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.stream_name = input;
        self
    }
    /// <p>The partition key.</p>
    pub fn partition_key(mut self, input: impl Into<std::string::String>) -> Self {
        self.partition_key = Some(input.into());
        self
    }
    /// <p>The partition key.</p>
    pub fn set_partition_key(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.partition_key = input;
        self
    }
    /// Consumes the builder and constructs a [`KinesisAction`](crate::types::KinesisAction).
    pub fn build(self) -> crate::types::KinesisAction {
        crate::types::KinesisAction {
            role_arn: self.role_arn,
            stream_name: self.stream_name,
            partition_key: self.partition_key,
        }
    }
}
