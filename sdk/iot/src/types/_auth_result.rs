// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The authorizer result.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AuthResult {
    /// <p>Authorization information.</p>
    pub auth_info: ::std::option::Option<crate::types::AuthInfo>,
    /// <p>The policies and statements that allowed the specified action.</p>
    pub allowed: ::std::option::Option<crate::types::Allowed>,
    /// <p>The policies and statements that denied the specified action.</p>
    pub denied: ::std::option::Option<crate::types::Denied>,
    /// <p>The final authorization decision of this scenario. Multiple statements are taken into account when determining the authorization decision. An explicit deny statement can override multiple allow statements.</p>
    pub auth_decision: ::std::option::Option<crate::types::AuthDecision>,
    /// <p>Contains any missing context values found while evaluating policy.</p>
    pub missing_context_values: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl AuthResult {
    /// <p>Authorization information.</p>
    pub fn auth_info(&self) -> ::std::option::Option<&crate::types::AuthInfo> {
        self.auth_info.as_ref()
    }
    /// <p>The policies and statements that allowed the specified action.</p>
    pub fn allowed(&self) -> ::std::option::Option<&crate::types::Allowed> {
        self.allowed.as_ref()
    }
    /// <p>The policies and statements that denied the specified action.</p>
    pub fn denied(&self) -> ::std::option::Option<&crate::types::Denied> {
        self.denied.as_ref()
    }
    /// <p>The final authorization decision of this scenario. Multiple statements are taken into account when determining the authorization decision. An explicit deny statement can override multiple allow statements.</p>
    pub fn auth_decision(&self) -> ::std::option::Option<&crate::types::AuthDecision> {
        self.auth_decision.as_ref()
    }
    /// <p>Contains any missing context values found while evaluating policy.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.missing_context_values.is_none()`.
    pub fn missing_context_values(&self) -> &[::std::string::String] {
        self.missing_context_values.as_deref().unwrap_or_default()
    }
}
impl AuthResult {
    /// Creates a new builder-style object to manufacture [`AuthResult`](crate::types::AuthResult).
    pub fn builder() -> crate::types::builders::AuthResultBuilder {
        crate::types::builders::AuthResultBuilder::default()
    }
}

/// A builder for [`AuthResult`](crate::types::AuthResult).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AuthResultBuilder {
    pub(crate) auth_info: ::std::option::Option<crate::types::AuthInfo>,
    pub(crate) allowed: ::std::option::Option<crate::types::Allowed>,
    pub(crate) denied: ::std::option::Option<crate::types::Denied>,
    pub(crate) auth_decision: ::std::option::Option<crate::types::AuthDecision>,
    pub(crate) missing_context_values: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl AuthResultBuilder {
    /// <p>Authorization information.</p>
    pub fn auth_info(mut self, input: crate::types::AuthInfo) -> Self {
        self.auth_info = ::std::option::Option::Some(input);
        self
    }
    /// <p>Authorization information.</p>
    pub fn set_auth_info(mut self, input: ::std::option::Option<crate::types::AuthInfo>) -> Self {
        self.auth_info = input;
        self
    }
    /// <p>Authorization information.</p>
    pub fn get_auth_info(&self) -> &::std::option::Option<crate::types::AuthInfo> {
        &self.auth_info
    }
    /// <p>The policies and statements that allowed the specified action.</p>
    pub fn allowed(mut self, input: crate::types::Allowed) -> Self {
        self.allowed = ::std::option::Option::Some(input);
        self
    }
    /// <p>The policies and statements that allowed the specified action.</p>
    pub fn set_allowed(mut self, input: ::std::option::Option<crate::types::Allowed>) -> Self {
        self.allowed = input;
        self
    }
    /// <p>The policies and statements that allowed the specified action.</p>
    pub fn get_allowed(&self) -> &::std::option::Option<crate::types::Allowed> {
        &self.allowed
    }
    /// <p>The policies and statements that denied the specified action.</p>
    pub fn denied(mut self, input: crate::types::Denied) -> Self {
        self.denied = ::std::option::Option::Some(input);
        self
    }
    /// <p>The policies and statements that denied the specified action.</p>
    pub fn set_denied(mut self, input: ::std::option::Option<crate::types::Denied>) -> Self {
        self.denied = input;
        self
    }
    /// <p>The policies and statements that denied the specified action.</p>
    pub fn get_denied(&self) -> &::std::option::Option<crate::types::Denied> {
        &self.denied
    }
    /// <p>The final authorization decision of this scenario. Multiple statements are taken into account when determining the authorization decision. An explicit deny statement can override multiple allow statements.</p>
    pub fn auth_decision(mut self, input: crate::types::AuthDecision) -> Self {
        self.auth_decision = ::std::option::Option::Some(input);
        self
    }
    /// <p>The final authorization decision of this scenario. Multiple statements are taken into account when determining the authorization decision. An explicit deny statement can override multiple allow statements.</p>
    pub fn set_auth_decision(mut self, input: ::std::option::Option<crate::types::AuthDecision>) -> Self {
        self.auth_decision = input;
        self
    }
    /// <p>The final authorization decision of this scenario. Multiple statements are taken into account when determining the authorization decision. An explicit deny statement can override multiple allow statements.</p>
    pub fn get_auth_decision(&self) -> &::std::option::Option<crate::types::AuthDecision> {
        &self.auth_decision
    }
    /// Appends an item to `missing_context_values`.
    ///
    /// To override the contents of this collection use [`set_missing_context_values`](Self::set_missing_context_values).
    ///
    /// <p>Contains any missing context values found while evaluating policy.</p>
    pub fn missing_context_values(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.missing_context_values.unwrap_or_default();
        v.push(input.into());
        self.missing_context_values = ::std::option::Option::Some(v);
        self
    }
    /// <p>Contains any missing context values found while evaluating policy.</p>
    pub fn set_missing_context_values(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.missing_context_values = input;
        self
    }
    /// <p>Contains any missing context values found while evaluating policy.</p>
    pub fn get_missing_context_values(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.missing_context_values
    }
    /// Consumes the builder and constructs a [`AuthResult`](crate::types::AuthResult).
    pub fn build(self) -> crate::types::AuthResult {
        crate::types::AuthResult {
            auth_info: self.auth_info,
            allowed: self.allowed,
            denied: self.denied,
            auth_decision: self.auth_decision,
            missing_context_values: self.missing_context_values,
        }
    }
}
