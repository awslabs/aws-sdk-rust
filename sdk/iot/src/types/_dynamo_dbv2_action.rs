// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes an action to write to a DynamoDB table.</p>
/// <p>This DynamoDB action writes each attribute in the message payload into it's own column in the DynamoDB table.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DynamoDBv2Action {
    /// <p>The ARN of the IAM role that grants access to the DynamoDB table.</p>
    pub role_arn: ::std::string::String,
    /// <p>Specifies the DynamoDB table to which the message data will be written. For example:</p>
    /// <p> <code>{ "dynamoDBv2": { "roleArn": "aws:iam:12341251:my-role" "putItem": { "tableName": "my-table" } } }</code> </p>
    /// <p>Each attribute in the message payload will be written to a separate column in the DynamoDB database.</p>
    pub put_item: ::std::option::Option<crate::types::PutItemInput>,
}
impl DynamoDBv2Action {
    /// <p>The ARN of the IAM role that grants access to the DynamoDB table.</p>
    pub fn role_arn(&self) -> &str {
        use std::ops::Deref;
        self.role_arn.deref()
    }
    /// <p>Specifies the DynamoDB table to which the message data will be written. For example:</p>
    /// <p> <code>{ "dynamoDBv2": { "roleArn": "aws:iam:12341251:my-role" "putItem": { "tableName": "my-table" } } }</code> </p>
    /// <p>Each attribute in the message payload will be written to a separate column in the DynamoDB database.</p>
    pub fn put_item(&self) -> ::std::option::Option<&crate::types::PutItemInput> {
        self.put_item.as_ref()
    }
}
impl DynamoDBv2Action {
    /// Creates a new builder-style object to manufacture [`DynamoDBv2Action`](crate::types::DynamoDBv2Action).
    pub fn builder() -> crate::types::builders::DynamoDBv2ActionBuilder {
        crate::types::builders::DynamoDBv2ActionBuilder::default()
    }
}

/// A builder for [`DynamoDBv2Action`](crate::types::DynamoDBv2Action).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DynamoDBv2ActionBuilder {
    pub(crate) role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) put_item: ::std::option::Option<crate::types::PutItemInput>,
}
impl DynamoDBv2ActionBuilder {
    /// <p>The ARN of the IAM role that grants access to the DynamoDB table.</p>
    /// This field is required.
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the IAM role that grants access to the DynamoDB table.</p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The ARN of the IAM role that grants access to the DynamoDB table.</p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn
    }
    /// <p>Specifies the DynamoDB table to which the message data will be written. For example:</p>
    /// <p> <code>{ "dynamoDBv2": { "roleArn": "aws:iam:12341251:my-role" "putItem": { "tableName": "my-table" } } }</code> </p>
    /// <p>Each attribute in the message payload will be written to a separate column in the DynamoDB database.</p>
    /// This field is required.
    pub fn put_item(mut self, input: crate::types::PutItemInput) -> Self {
        self.put_item = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the DynamoDB table to which the message data will be written. For example:</p>
    /// <p> <code>{ "dynamoDBv2": { "roleArn": "aws:iam:12341251:my-role" "putItem": { "tableName": "my-table" } } }</code> </p>
    /// <p>Each attribute in the message payload will be written to a separate column in the DynamoDB database.</p>
    pub fn set_put_item(mut self, input: ::std::option::Option<crate::types::PutItemInput>) -> Self {
        self.put_item = input;
        self
    }
    /// <p>Specifies the DynamoDB table to which the message data will be written. For example:</p>
    /// <p> <code>{ "dynamoDBv2": { "roleArn": "aws:iam:12341251:my-role" "putItem": { "tableName": "my-table" } } }</code> </p>
    /// <p>Each attribute in the message payload will be written to a separate column in the DynamoDB database.</p>
    pub fn get_put_item(&self) -> &::std::option::Option<crate::types::PutItemInput> {
        &self.put_item
    }
    /// Consumes the builder and constructs a [`DynamoDBv2Action`](crate::types::DynamoDBv2Action).
    /// This method will fail if any of the following fields are not set:
    /// - [`role_arn`](crate::types::builders::DynamoDBv2ActionBuilder::role_arn)
    pub fn build(self) -> ::std::result::Result<crate::types::DynamoDBv2Action, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::DynamoDBv2Action {
            role_arn: self.role_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "role_arn",
                    "role_arn was not specified but it is required when building DynamoDBv2Action",
                )
            })?,
            put_item: self.put_item,
        })
    }
}
