// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4 signing process</a>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SigV4Authorization {
    /// <p>The signing region.</p>
    pub signing_region: ::std::string::String,
    /// <p>The service name to use while signing with Sig V4.</p>
    pub service_name: ::std::string::String,
    /// <p>The ARN of the signing role.</p>
    pub role_arn: ::std::string::String,
}
impl SigV4Authorization {
    /// <p>The signing region.</p>
    pub fn signing_region(&self) -> &str {
        use std::ops::Deref;
        self.signing_region.deref()
    }
    /// <p>The service name to use while signing with Sig V4.</p>
    pub fn service_name(&self) -> &str {
        use std::ops::Deref;
        self.service_name.deref()
    }
    /// <p>The ARN of the signing role.</p>
    pub fn role_arn(&self) -> &str {
        use std::ops::Deref;
        self.role_arn.deref()
    }
}
impl SigV4Authorization {
    /// Creates a new builder-style object to manufacture [`SigV4Authorization`](crate::types::SigV4Authorization).
    pub fn builder() -> crate::types::builders::SigV4AuthorizationBuilder {
        crate::types::builders::SigV4AuthorizationBuilder::default()
    }
}

/// A builder for [`SigV4Authorization`](crate::types::SigV4Authorization).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SigV4AuthorizationBuilder {
    pub(crate) signing_region: ::std::option::Option<::std::string::String>,
    pub(crate) service_name: ::std::option::Option<::std::string::String>,
    pub(crate) role_arn: ::std::option::Option<::std::string::String>,
}
impl SigV4AuthorizationBuilder {
    /// <p>The signing region.</p>
    /// This field is required.
    pub fn signing_region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.signing_region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The signing region.</p>
    pub fn set_signing_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.signing_region = input;
        self
    }
    /// <p>The signing region.</p>
    pub fn get_signing_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.signing_region
    }
    /// <p>The service name to use while signing with Sig V4.</p>
    /// This field is required.
    pub fn service_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.service_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The service name to use while signing with Sig V4.</p>
    pub fn set_service_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.service_name = input;
        self
    }
    /// <p>The service name to use while signing with Sig V4.</p>
    pub fn get_service_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.service_name
    }
    /// <p>The ARN of the signing role.</p>
    /// This field is required.
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the signing role.</p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The ARN of the signing role.</p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn
    }
    /// Consumes the builder and constructs a [`SigV4Authorization`](crate::types::SigV4Authorization).
    /// This method will fail if any of the following fields are not set:
    /// - [`signing_region`](crate::types::builders::SigV4AuthorizationBuilder::signing_region)
    /// - [`service_name`](crate::types::builders::SigV4AuthorizationBuilder::service_name)
    /// - [`role_arn`](crate::types::builders::SigV4AuthorizationBuilder::role_arn)
    pub fn build(self) -> ::std::result::Result<crate::types::SigV4Authorization, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::SigV4Authorization {
            signing_region: self.signing_region.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "signing_region",
                    "signing_region was not specified but it is required when building SigV4Authorization",
                )
            })?,
            service_name: self.service_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "service_name",
                    "service_name was not specified but it is required when building SigV4Authorization",
                )
            })?,
            role_arn: self.role_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "role_arn",
                    "role_arn was not specified but it is required when building SigV4Authorization",
                )
            })?,
        })
    }
}
