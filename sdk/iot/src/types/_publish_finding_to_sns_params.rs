// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Parameters to define a mitigation action that publishes findings to Amazon SNS. You can implement your own custom actions in response to the Amazon SNS messages.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PublishFindingToSnsParams {
    /// <p>The ARN of the topic to which you want to publish the findings.</p>
    #[doc(hidden)]
    pub topic_arn: std::option::Option<std::string::String>,
}
impl PublishFindingToSnsParams {
    /// <p>The ARN of the topic to which you want to publish the findings.</p>
    pub fn topic_arn(&self) -> std::option::Option<&str> {
        self.topic_arn.as_deref()
    }
}
impl PublishFindingToSnsParams {
    /// Creates a new builder-style object to manufacture [`PublishFindingToSnsParams`](crate::types::PublishFindingToSnsParams).
    pub fn builder() -> crate::types::builders::PublishFindingToSnsParamsBuilder {
        crate::types::builders::PublishFindingToSnsParamsBuilder::default()
    }
}

/// A builder for [`PublishFindingToSnsParams`](crate::types::PublishFindingToSnsParams).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PublishFindingToSnsParamsBuilder {
    pub(crate) topic_arn: std::option::Option<std::string::String>,
}
impl PublishFindingToSnsParamsBuilder {
    /// <p>The ARN of the topic to which you want to publish the findings.</p>
    pub fn topic_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.topic_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the topic to which you want to publish the findings.</p>
    pub fn set_topic_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.topic_arn = input;
        self
    }
    /// Consumes the builder and constructs a [`PublishFindingToSnsParams`](crate::types::PublishFindingToSnsParams).
    pub fn build(self) -> crate::types::PublishFindingToSnsParams {
        crate::types::PublishFindingToSnsParams {
            topic_arn: self.topic_arn,
        }
    }
}
