// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An optional configuration within the <code>SchedulingConfig</code> to setup a recurring maintenance window with a predetermined start time and duration for the rollout of a job document to all devices in a target group for a job.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MaintenanceWindow {
    /// <p>Displays the start time of the next maintenance window.</p>
    pub start_time: ::std::string::String,
    /// <p>Displays the duration of the next maintenance window.</p>
    pub duration_in_minutes: i32,
}
impl MaintenanceWindow {
    /// <p>Displays the start time of the next maintenance window.</p>
    pub fn start_time(&self) -> &str {
        use std::ops::Deref;
        self.start_time.deref()
    }
    /// <p>Displays the duration of the next maintenance window.</p>
    pub fn duration_in_minutes(&self) -> i32 {
        self.duration_in_minutes
    }
}
impl MaintenanceWindow {
    /// Creates a new builder-style object to manufacture [`MaintenanceWindow`](crate::types::MaintenanceWindow).
    pub fn builder() -> crate::types::builders::MaintenanceWindowBuilder {
        crate::types::builders::MaintenanceWindowBuilder::default()
    }
}

/// A builder for [`MaintenanceWindow`](crate::types::MaintenanceWindow).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct MaintenanceWindowBuilder {
    pub(crate) start_time: ::std::option::Option<::std::string::String>,
    pub(crate) duration_in_minutes: ::std::option::Option<i32>,
}
impl MaintenanceWindowBuilder {
    /// <p>Displays the start time of the next maintenance window.</p>
    /// This field is required.
    pub fn start_time(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.start_time = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Displays the start time of the next maintenance window.</p>
    pub fn set_start_time(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.start_time = input;
        self
    }
    /// <p>Displays the start time of the next maintenance window.</p>
    pub fn get_start_time(&self) -> &::std::option::Option<::std::string::String> {
        &self.start_time
    }
    /// <p>Displays the duration of the next maintenance window.</p>
    /// This field is required.
    pub fn duration_in_minutes(mut self, input: i32) -> Self {
        self.duration_in_minutes = ::std::option::Option::Some(input);
        self
    }
    /// <p>Displays the duration of the next maintenance window.</p>
    pub fn set_duration_in_minutes(mut self, input: ::std::option::Option<i32>) -> Self {
        self.duration_in_minutes = input;
        self
    }
    /// <p>Displays the duration of the next maintenance window.</p>
    pub fn get_duration_in_minutes(&self) -> &::std::option::Option<i32> {
        &self.duration_in_minutes
    }
    /// Consumes the builder and constructs a [`MaintenanceWindow`](crate::types::MaintenanceWindow).
    /// This method will fail if any of the following fields are not set:
    /// - [`start_time`](crate::types::builders::MaintenanceWindowBuilder::start_time)
    /// - [`duration_in_minutes`](crate::types::builders::MaintenanceWindowBuilder::duration_in_minutes)
    pub fn build(self) -> ::std::result::Result<crate::types::MaintenanceWindow, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::MaintenanceWindow {
            start_time: self.start_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "start_time",
                    "start_time was not specified but it is required when building MaintenanceWindow",
                )
            })?,
            duration_in_minutes: self.duration_in_minutes.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "duration_in_minutes",
                    "duration_in_minutes was not specified but it is required when building MaintenanceWindow",
                )
            })?,
        })
    }
}
