// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An asset property value entry containing the following information.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AssetPropertyValue {
    /// <p>The value of the asset property.</p>
    pub value: ::std::option::Option<crate::types::AssetPropertyVariant>,
    /// <p>The asset property value timestamp.</p>
    pub timestamp: ::std::option::Option<crate::types::AssetPropertyTimestamp>,
    /// <p>Optional. A string that describes the quality of the value. Accepts substitution templates. Must be <code>GOOD</code>, <code>BAD</code>, or <code>UNCERTAIN</code>.</p>
    pub quality: ::std::option::Option<::std::string::String>,
}
impl AssetPropertyValue {
    /// <p>The value of the asset property.</p>
    pub fn value(&self) -> ::std::option::Option<&crate::types::AssetPropertyVariant> {
        self.value.as_ref()
    }
    /// <p>The asset property value timestamp.</p>
    pub fn timestamp(&self) -> ::std::option::Option<&crate::types::AssetPropertyTimestamp> {
        self.timestamp.as_ref()
    }
    /// <p>Optional. A string that describes the quality of the value. Accepts substitution templates. Must be <code>GOOD</code>, <code>BAD</code>, or <code>UNCERTAIN</code>.</p>
    pub fn quality(&self) -> ::std::option::Option<&str> {
        self.quality.as_deref()
    }
}
impl AssetPropertyValue {
    /// Creates a new builder-style object to manufacture [`AssetPropertyValue`](crate::types::AssetPropertyValue).
    pub fn builder() -> crate::types::builders::AssetPropertyValueBuilder {
        crate::types::builders::AssetPropertyValueBuilder::default()
    }
}

/// A builder for [`AssetPropertyValue`](crate::types::AssetPropertyValue).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AssetPropertyValueBuilder {
    pub(crate) value: ::std::option::Option<crate::types::AssetPropertyVariant>,
    pub(crate) timestamp: ::std::option::Option<crate::types::AssetPropertyTimestamp>,
    pub(crate) quality: ::std::option::Option<::std::string::String>,
}
impl AssetPropertyValueBuilder {
    /// <p>The value of the asset property.</p>
    /// This field is required.
    pub fn value(mut self, input: crate::types::AssetPropertyVariant) -> Self {
        self.value = ::std::option::Option::Some(input);
        self
    }
    /// <p>The value of the asset property.</p>
    pub fn set_value(mut self, input: ::std::option::Option<crate::types::AssetPropertyVariant>) -> Self {
        self.value = input;
        self
    }
    /// <p>The value of the asset property.</p>
    pub fn get_value(&self) -> &::std::option::Option<crate::types::AssetPropertyVariant> {
        &self.value
    }
    /// <p>The asset property value timestamp.</p>
    /// This field is required.
    pub fn timestamp(mut self, input: crate::types::AssetPropertyTimestamp) -> Self {
        self.timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The asset property value timestamp.</p>
    pub fn set_timestamp(mut self, input: ::std::option::Option<crate::types::AssetPropertyTimestamp>) -> Self {
        self.timestamp = input;
        self
    }
    /// <p>The asset property value timestamp.</p>
    pub fn get_timestamp(&self) -> &::std::option::Option<crate::types::AssetPropertyTimestamp> {
        &self.timestamp
    }
    /// <p>Optional. A string that describes the quality of the value. Accepts substitution templates. Must be <code>GOOD</code>, <code>BAD</code>, or <code>UNCERTAIN</code>.</p>
    pub fn quality(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.quality = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Optional. A string that describes the quality of the value. Accepts substitution templates. Must be <code>GOOD</code>, <code>BAD</code>, or <code>UNCERTAIN</code>.</p>
    pub fn set_quality(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.quality = input;
        self
    }
    /// <p>Optional. A string that describes the quality of the value. Accepts substitution templates. Must be <code>GOOD</code>, <code>BAD</code>, or <code>UNCERTAIN</code>.</p>
    pub fn get_quality(&self) -> &::std::option::Option<::std::string::String> {
        &self.quality
    }
    /// Consumes the builder and constructs a [`AssetPropertyValue`](crate::types::AssetPropertyValue).
    pub fn build(self) -> crate::types::AssetPropertyValue {
        crate::types::AssetPropertyValue {
            value: self.value,
            timestamp: self.timestamp,
            quality: self.quality,
        }
    }
}
