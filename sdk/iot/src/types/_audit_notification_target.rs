// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the targets to which audit notifications are sent.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AuditNotificationTarget {
    /// <p>The ARN of the target (SNS topic) to which audit notifications are sent.</p>
    #[doc(hidden)]
    pub target_arn: std::option::Option<std::string::String>,
    /// <p>The ARN of the role that grants permission to send notifications to the target.</p>
    #[doc(hidden)]
    pub role_arn: std::option::Option<std::string::String>,
    /// <p>True if notifications to the target are enabled.</p>
    #[doc(hidden)]
    pub enabled: bool,
}
impl AuditNotificationTarget {
    /// <p>The ARN of the target (SNS topic) to which audit notifications are sent.</p>
    pub fn target_arn(&self) -> std::option::Option<&str> {
        self.target_arn.as_deref()
    }
    /// <p>The ARN of the role that grants permission to send notifications to the target.</p>
    pub fn role_arn(&self) -> std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>True if notifications to the target are enabled.</p>
    pub fn enabled(&self) -> bool {
        self.enabled
    }
}
impl AuditNotificationTarget {
    /// Creates a new builder-style object to manufacture [`AuditNotificationTarget`](crate::types::AuditNotificationTarget).
    pub fn builder() -> crate::types::builders::AuditNotificationTargetBuilder {
        crate::types::builders::AuditNotificationTargetBuilder::default()
    }
}

/// A builder for [`AuditNotificationTarget`](crate::types::AuditNotificationTarget).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AuditNotificationTargetBuilder {
    pub(crate) target_arn: std::option::Option<std::string::String>,
    pub(crate) role_arn: std::option::Option<std::string::String>,
    pub(crate) enabled: std::option::Option<bool>,
}
impl AuditNotificationTargetBuilder {
    /// <p>The ARN of the target (SNS topic) to which audit notifications are sent.</p>
    pub fn target_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.target_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the target (SNS topic) to which audit notifications are sent.</p>
    pub fn set_target_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.target_arn = input;
        self
    }
    /// <p>The ARN of the role that grants permission to send notifications to the target.</p>
    pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.role_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the role that grants permission to send notifications to the target.</p>
    pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>True if notifications to the target are enabled.</p>
    pub fn enabled(mut self, input: bool) -> Self {
        self.enabled = Some(input);
        self
    }
    /// <p>True if notifications to the target are enabled.</p>
    pub fn set_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.enabled = input;
        self
    }
    /// Consumes the builder and constructs a [`AuditNotificationTarget`](crate::types::AuditNotificationTarget).
    pub fn build(self) -> crate::types::AuditNotificationTarget {
        crate::types::AuditNotificationTarget {
            target_arn: self.target_arn,
            role_arn: self.role_arn,
            enabled: self.enabled.unwrap_or_default(),
        }
    }
}
