// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The ThingTypeMetadata contains additional information about the thing type including: creation date and time, a value indicating whether the thing type is deprecated, and a date and time when time was deprecated.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ThingTypeMetadata {
    /// <p>Whether the thing type is deprecated. If <b>true</b>, no new things could be associated with this type.</p>
    #[doc(hidden)]
    pub deprecated: bool,
    /// <p>The date and time when the thing type was deprecated.</p>
    #[doc(hidden)]
    pub deprecation_date: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The date and time when the thing type was created.</p>
    #[doc(hidden)]
    pub creation_date: std::option::Option<aws_smithy_types::DateTime>,
}
impl ThingTypeMetadata {
    /// <p>Whether the thing type is deprecated. If <b>true</b>, no new things could be associated with this type.</p>
    pub fn deprecated(&self) -> bool {
        self.deprecated
    }
    /// <p>The date and time when the thing type was deprecated.</p>
    pub fn deprecation_date(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.deprecation_date.as_ref()
    }
    /// <p>The date and time when the thing type was created.</p>
    pub fn creation_date(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_date.as_ref()
    }
}
impl ThingTypeMetadata {
    /// Creates a new builder-style object to manufacture [`ThingTypeMetadata`](crate::types::ThingTypeMetadata).
    pub fn builder() -> crate::types::builders::ThingTypeMetadataBuilder {
        crate::types::builders::ThingTypeMetadataBuilder::default()
    }
}

/// A builder for [`ThingTypeMetadata`](crate::types::ThingTypeMetadata).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ThingTypeMetadataBuilder {
    pub(crate) deprecated: std::option::Option<bool>,
    pub(crate) deprecation_date: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) creation_date: std::option::Option<aws_smithy_types::DateTime>,
}
impl ThingTypeMetadataBuilder {
    /// <p>Whether the thing type is deprecated. If <b>true</b>, no new things could be associated with this type.</p>
    pub fn deprecated(mut self, input: bool) -> Self {
        self.deprecated = Some(input);
        self
    }
    /// <p>Whether the thing type is deprecated. If <b>true</b>, no new things could be associated with this type.</p>
    pub fn set_deprecated(mut self, input: std::option::Option<bool>) -> Self {
        self.deprecated = input;
        self
    }
    /// <p>The date and time when the thing type was deprecated.</p>
    pub fn deprecation_date(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.deprecation_date = Some(input);
        self
    }
    /// <p>The date and time when the thing type was deprecated.</p>
    pub fn set_deprecation_date(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.deprecation_date = input;
        self
    }
    /// <p>The date and time when the thing type was created.</p>
    pub fn creation_date(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.creation_date = Some(input);
        self
    }
    /// <p>The date and time when the thing type was created.</p>
    pub fn set_creation_date(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.creation_date = input;
        self
    }
    /// Consumes the builder and constructs a [`ThingTypeMetadata`](crate::types::ThingTypeMetadata).
    pub fn build(self) -> crate::types::ThingTypeMetadata {
        crate::types::ThingTypeMetadata {
            deprecated: self.deprecated.unwrap_or_default(),
            deprecation_date: self.deprecation_date,
            creation_date: self.creation_date,
        }
    }
}
