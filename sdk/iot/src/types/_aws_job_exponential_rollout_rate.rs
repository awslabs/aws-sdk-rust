// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The rate of increase for a job rollout. This parameter allows you to define an exponential rate increase for a job rollout.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AwsJobExponentialRolloutRate {
    /// <p>The minimum number of things that will be notified of a pending job, per minute, at the start of the job rollout. This is the initial rate of the rollout.</p>
    #[doc(hidden)]
    pub base_rate_per_minute: std::option::Option<i32>,
    /// <p>The rate of increase for a job rollout. The number of things notified is multiplied by this factor.</p>
    #[doc(hidden)]
    pub increment_factor: f64,
    /// <p>The criteria to initiate the increase in rate of rollout for a job.</p>
    /// <p>Amazon Web Services IoT Core supports up to one digit after the decimal (for example, 1.5, but not 1.55).</p>
    #[doc(hidden)]
    pub rate_increase_criteria: std::option::Option<crate::types::AwsJobRateIncreaseCriteria>,
}
impl AwsJobExponentialRolloutRate {
    /// <p>The minimum number of things that will be notified of a pending job, per minute, at the start of the job rollout. This is the initial rate of the rollout.</p>
    pub fn base_rate_per_minute(&self) -> std::option::Option<i32> {
        self.base_rate_per_minute
    }
    /// <p>The rate of increase for a job rollout. The number of things notified is multiplied by this factor.</p>
    pub fn increment_factor(&self) -> f64 {
        self.increment_factor
    }
    /// <p>The criteria to initiate the increase in rate of rollout for a job.</p>
    /// <p>Amazon Web Services IoT Core supports up to one digit after the decimal (for example, 1.5, but not 1.55).</p>
    pub fn rate_increase_criteria(
        &self,
    ) -> std::option::Option<&crate::types::AwsJobRateIncreaseCriteria> {
        self.rate_increase_criteria.as_ref()
    }
}
impl AwsJobExponentialRolloutRate {
    /// Creates a new builder-style object to manufacture [`AwsJobExponentialRolloutRate`](crate::types::AwsJobExponentialRolloutRate).
    pub fn builder() -> crate::types::builders::AwsJobExponentialRolloutRateBuilder {
        crate::types::builders::AwsJobExponentialRolloutRateBuilder::default()
    }
}

/// A builder for [`AwsJobExponentialRolloutRate`](crate::types::AwsJobExponentialRolloutRate).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AwsJobExponentialRolloutRateBuilder {
    pub(crate) base_rate_per_minute: std::option::Option<i32>,
    pub(crate) increment_factor: std::option::Option<f64>,
    pub(crate) rate_increase_criteria:
        std::option::Option<crate::types::AwsJobRateIncreaseCriteria>,
}
impl AwsJobExponentialRolloutRateBuilder {
    /// <p>The minimum number of things that will be notified of a pending job, per minute, at the start of the job rollout. This is the initial rate of the rollout.</p>
    pub fn base_rate_per_minute(mut self, input: i32) -> Self {
        self.base_rate_per_minute = Some(input);
        self
    }
    /// <p>The minimum number of things that will be notified of a pending job, per minute, at the start of the job rollout. This is the initial rate of the rollout.</p>
    pub fn set_base_rate_per_minute(mut self, input: std::option::Option<i32>) -> Self {
        self.base_rate_per_minute = input;
        self
    }
    /// <p>The rate of increase for a job rollout. The number of things notified is multiplied by this factor.</p>
    pub fn increment_factor(mut self, input: f64) -> Self {
        self.increment_factor = Some(input);
        self
    }
    /// <p>The rate of increase for a job rollout. The number of things notified is multiplied by this factor.</p>
    pub fn set_increment_factor(mut self, input: std::option::Option<f64>) -> Self {
        self.increment_factor = input;
        self
    }
    /// <p>The criteria to initiate the increase in rate of rollout for a job.</p>
    /// <p>Amazon Web Services IoT Core supports up to one digit after the decimal (for example, 1.5, but not 1.55).</p>
    pub fn rate_increase_criteria(
        mut self,
        input: crate::types::AwsJobRateIncreaseCriteria,
    ) -> Self {
        self.rate_increase_criteria = Some(input);
        self
    }
    /// <p>The criteria to initiate the increase in rate of rollout for a job.</p>
    /// <p>Amazon Web Services IoT Core supports up to one digit after the decimal (for example, 1.5, but not 1.55).</p>
    pub fn set_rate_increase_criteria(
        mut self,
        input: std::option::Option<crate::types::AwsJobRateIncreaseCriteria>,
    ) -> Self {
        self.rate_increase_criteria = input;
        self
    }
    /// Consumes the builder and constructs a [`AwsJobExponentialRolloutRate`](crate::types::AwsJobExponentialRolloutRate).
    pub fn build(self) -> crate::types::AwsJobExponentialRolloutRate {
        crate::types::AwsJobExponentialRolloutRate {
            base_rate_per_minute: self.base_rate_per_minute,
            increment_factor: self.increment_factor.unwrap_or_default(),
            rate_increase_criteria: self.rate_increase_criteria,
        }
    }
}
