// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The findings (results) of the audit.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AuditFinding {
    /// <p>A unique identifier for this set of audit findings. This identifier is used to apply mitigation tasks to one or more sets of findings.</p>
    #[doc(hidden)]
    pub finding_id: std::option::Option<std::string::String>,
    /// <p>The ID of the audit that generated this result (finding).</p>
    #[doc(hidden)]
    pub task_id: std::option::Option<std::string::String>,
    /// <p>The audit check that generated this result.</p>
    #[doc(hidden)]
    pub check_name: std::option::Option<std::string::String>,
    /// <p>The time the audit started.</p>
    #[doc(hidden)]
    pub task_start_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The time the result (finding) was discovered.</p>
    #[doc(hidden)]
    pub finding_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The severity of the result (finding).</p>
    #[doc(hidden)]
    pub severity: std::option::Option<crate::types::AuditFindingSeverity>,
    /// <p>The resource that was found to be noncompliant with the audit check.</p>
    #[doc(hidden)]
    pub non_compliant_resource: std::option::Option<crate::types::NonCompliantResource>,
    /// <p>The list of related resources.</p>
    #[doc(hidden)]
    pub related_resources: std::option::Option<std::vec::Vec<crate::types::RelatedResource>>,
    /// <p>The reason the resource was noncompliant.</p>
    #[doc(hidden)]
    pub reason_for_non_compliance: std::option::Option<std::string::String>,
    /// <p>A code that indicates the reason that the resource was noncompliant.</p>
    #[doc(hidden)]
    pub reason_for_non_compliance_code: std::option::Option<std::string::String>,
    /// <p> Indicates whether the audit finding was suppressed or not during reporting. </p>
    #[doc(hidden)]
    pub is_suppressed: std::option::Option<bool>,
}
impl AuditFinding {
    /// <p>A unique identifier for this set of audit findings. This identifier is used to apply mitigation tasks to one or more sets of findings.</p>
    pub fn finding_id(&self) -> std::option::Option<&str> {
        self.finding_id.as_deref()
    }
    /// <p>The ID of the audit that generated this result (finding).</p>
    pub fn task_id(&self) -> std::option::Option<&str> {
        self.task_id.as_deref()
    }
    /// <p>The audit check that generated this result.</p>
    pub fn check_name(&self) -> std::option::Option<&str> {
        self.check_name.as_deref()
    }
    /// <p>The time the audit started.</p>
    pub fn task_start_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.task_start_time.as_ref()
    }
    /// <p>The time the result (finding) was discovered.</p>
    pub fn finding_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.finding_time.as_ref()
    }
    /// <p>The severity of the result (finding).</p>
    pub fn severity(&self) -> std::option::Option<&crate::types::AuditFindingSeverity> {
        self.severity.as_ref()
    }
    /// <p>The resource that was found to be noncompliant with the audit check.</p>
    pub fn non_compliant_resource(
        &self,
    ) -> std::option::Option<&crate::types::NonCompliantResource> {
        self.non_compliant_resource.as_ref()
    }
    /// <p>The list of related resources.</p>
    pub fn related_resources(&self) -> std::option::Option<&[crate::types::RelatedResource]> {
        self.related_resources.as_deref()
    }
    /// <p>The reason the resource was noncompliant.</p>
    pub fn reason_for_non_compliance(&self) -> std::option::Option<&str> {
        self.reason_for_non_compliance.as_deref()
    }
    /// <p>A code that indicates the reason that the resource was noncompliant.</p>
    pub fn reason_for_non_compliance_code(&self) -> std::option::Option<&str> {
        self.reason_for_non_compliance_code.as_deref()
    }
    /// <p> Indicates whether the audit finding was suppressed or not during reporting. </p>
    pub fn is_suppressed(&self) -> std::option::Option<bool> {
        self.is_suppressed
    }
}
impl AuditFinding {
    /// Creates a new builder-style object to manufacture [`AuditFinding`](crate::types::AuditFinding).
    pub fn builder() -> crate::types::builders::AuditFindingBuilder {
        crate::types::builders::AuditFindingBuilder::default()
    }
}

/// A builder for [`AuditFinding`](crate::types::AuditFinding).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AuditFindingBuilder {
    pub(crate) finding_id: std::option::Option<std::string::String>,
    pub(crate) task_id: std::option::Option<std::string::String>,
    pub(crate) check_name: std::option::Option<std::string::String>,
    pub(crate) task_start_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) finding_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) severity: std::option::Option<crate::types::AuditFindingSeverity>,
    pub(crate) non_compliant_resource: std::option::Option<crate::types::NonCompliantResource>,
    pub(crate) related_resources: std::option::Option<std::vec::Vec<crate::types::RelatedResource>>,
    pub(crate) reason_for_non_compliance: std::option::Option<std::string::String>,
    pub(crate) reason_for_non_compliance_code: std::option::Option<std::string::String>,
    pub(crate) is_suppressed: std::option::Option<bool>,
}
impl AuditFindingBuilder {
    /// <p>A unique identifier for this set of audit findings. This identifier is used to apply mitigation tasks to one or more sets of findings.</p>
    pub fn finding_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.finding_id = Some(input.into());
        self
    }
    /// <p>A unique identifier for this set of audit findings. This identifier is used to apply mitigation tasks to one or more sets of findings.</p>
    pub fn set_finding_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.finding_id = input;
        self
    }
    /// <p>The ID of the audit that generated this result (finding).</p>
    pub fn task_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.task_id = Some(input.into());
        self
    }
    /// <p>The ID of the audit that generated this result (finding).</p>
    pub fn set_task_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.task_id = input;
        self
    }
    /// <p>The audit check that generated this result.</p>
    pub fn check_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.check_name = Some(input.into());
        self
    }
    /// <p>The audit check that generated this result.</p>
    pub fn set_check_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.check_name = input;
        self
    }
    /// <p>The time the audit started.</p>
    pub fn task_start_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.task_start_time = Some(input);
        self
    }
    /// <p>The time the audit started.</p>
    pub fn set_task_start_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.task_start_time = input;
        self
    }
    /// <p>The time the result (finding) was discovered.</p>
    pub fn finding_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.finding_time = Some(input);
        self
    }
    /// <p>The time the result (finding) was discovered.</p>
    pub fn set_finding_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.finding_time = input;
        self
    }
    /// <p>The severity of the result (finding).</p>
    pub fn severity(mut self, input: crate::types::AuditFindingSeverity) -> Self {
        self.severity = Some(input);
        self
    }
    /// <p>The severity of the result (finding).</p>
    pub fn set_severity(
        mut self,
        input: std::option::Option<crate::types::AuditFindingSeverity>,
    ) -> Self {
        self.severity = input;
        self
    }
    /// <p>The resource that was found to be noncompliant with the audit check.</p>
    pub fn non_compliant_resource(mut self, input: crate::types::NonCompliantResource) -> Self {
        self.non_compliant_resource = Some(input);
        self
    }
    /// <p>The resource that was found to be noncompliant with the audit check.</p>
    pub fn set_non_compliant_resource(
        mut self,
        input: std::option::Option<crate::types::NonCompliantResource>,
    ) -> Self {
        self.non_compliant_resource = input;
        self
    }
    /// Appends an item to `related_resources`.
    ///
    /// To override the contents of this collection use [`set_related_resources`](Self::set_related_resources).
    ///
    /// <p>The list of related resources.</p>
    pub fn related_resources(mut self, input: crate::types::RelatedResource) -> Self {
        let mut v = self.related_resources.unwrap_or_default();
        v.push(input);
        self.related_resources = Some(v);
        self
    }
    /// <p>The list of related resources.</p>
    pub fn set_related_resources(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::RelatedResource>>,
    ) -> Self {
        self.related_resources = input;
        self
    }
    /// <p>The reason the resource was noncompliant.</p>
    pub fn reason_for_non_compliance(mut self, input: impl Into<std::string::String>) -> Self {
        self.reason_for_non_compliance = Some(input.into());
        self
    }
    /// <p>The reason the resource was noncompliant.</p>
    pub fn set_reason_for_non_compliance(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.reason_for_non_compliance = input;
        self
    }
    /// <p>A code that indicates the reason that the resource was noncompliant.</p>
    pub fn reason_for_non_compliance_code(mut self, input: impl Into<std::string::String>) -> Self {
        self.reason_for_non_compliance_code = Some(input.into());
        self
    }
    /// <p>A code that indicates the reason that the resource was noncompliant.</p>
    pub fn set_reason_for_non_compliance_code(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.reason_for_non_compliance_code = input;
        self
    }
    /// <p> Indicates whether the audit finding was suppressed or not during reporting. </p>
    pub fn is_suppressed(mut self, input: bool) -> Self {
        self.is_suppressed = Some(input);
        self
    }
    /// <p> Indicates whether the audit finding was suppressed or not during reporting. </p>
    pub fn set_is_suppressed(mut self, input: std::option::Option<bool>) -> Self {
        self.is_suppressed = input;
        self
    }
    /// Consumes the builder and constructs a [`AuditFinding`](crate::types::AuditFinding).
    pub fn build(self) -> crate::types::AuditFinding {
        crate::types::AuditFinding {
            finding_id: self.finding_id,
            task_id: self.task_id,
            check_name: self.check_name,
            task_start_time: self.task_start_time,
            finding_time: self.finding_time,
            severity: self.severity,
            non_compliant_resource: self.non_compliant_resource,
            related_resources: self.related_resources,
            reason_for_non_compliance: self.reason_for_non_compliance,
            reason_for_non_compliance_code: self.reason_for_non_compliance_code,
            is_suppressed: self.is_suppressed,
        }
    }
}
