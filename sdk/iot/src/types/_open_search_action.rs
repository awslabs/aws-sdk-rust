// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes an action that writes data to an Amazon OpenSearch Service domain.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct OpenSearchAction {
    /// <p>The IAM role ARN that has access to OpenSearch.</p>
    pub role_arn: ::std::string::String,
    /// <p>The endpoint of your OpenSearch domain.</p>
    pub endpoint: ::std::string::String,
    /// <p>The OpenSearch index where you want to store your data.</p>
    pub index: ::std::string::String,
    /// <p>The type of document you are storing.</p>
    pub r#type: ::std::string::String,
    /// <p>The unique identifier for the document you are storing.</p>
    pub id: ::std::string::String,
}
impl OpenSearchAction {
    /// <p>The IAM role ARN that has access to OpenSearch.</p>
    pub fn role_arn(&self) -> &str {
        use std::ops::Deref;
        self.role_arn.deref()
    }
    /// <p>The endpoint of your OpenSearch domain.</p>
    pub fn endpoint(&self) -> &str {
        use std::ops::Deref;
        self.endpoint.deref()
    }
    /// <p>The OpenSearch index where you want to store your data.</p>
    pub fn index(&self) -> &str {
        use std::ops::Deref;
        self.index.deref()
    }
    /// <p>The type of document you are storing.</p>
    pub fn r#type(&self) -> &str {
        use std::ops::Deref;
        self.r#type.deref()
    }
    /// <p>The unique identifier for the document you are storing.</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
}
impl OpenSearchAction {
    /// Creates a new builder-style object to manufacture [`OpenSearchAction`](crate::types::OpenSearchAction).
    pub fn builder() -> crate::types::builders::OpenSearchActionBuilder {
        crate::types::builders::OpenSearchActionBuilder::default()
    }
}

/// A builder for [`OpenSearchAction`](crate::types::OpenSearchAction).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct OpenSearchActionBuilder {
    pub(crate) role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) endpoint: ::std::option::Option<::std::string::String>,
    pub(crate) index: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<::std::string::String>,
    pub(crate) id: ::std::option::Option<::std::string::String>,
}
impl OpenSearchActionBuilder {
    /// <p>The IAM role ARN that has access to OpenSearch.</p>
    /// This field is required.
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The IAM role ARN that has access to OpenSearch.</p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The IAM role ARN that has access to OpenSearch.</p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn
    }
    /// <p>The endpoint of your OpenSearch domain.</p>
    /// This field is required.
    pub fn endpoint(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.endpoint = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The endpoint of your OpenSearch domain.</p>
    pub fn set_endpoint(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.endpoint = input;
        self
    }
    /// <p>The endpoint of your OpenSearch domain.</p>
    pub fn get_endpoint(&self) -> &::std::option::Option<::std::string::String> {
        &self.endpoint
    }
    /// <p>The OpenSearch index where you want to store your data.</p>
    /// This field is required.
    pub fn index(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.index = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The OpenSearch index where you want to store your data.</p>
    pub fn set_index(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.index = input;
        self
    }
    /// <p>The OpenSearch index where you want to store your data.</p>
    pub fn get_index(&self) -> &::std::option::Option<::std::string::String> {
        &self.index
    }
    /// <p>The type of document you are storing.</p>
    /// This field is required.
    pub fn r#type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.r#type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type of document you are storing.</p>
    pub fn set_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of document you are storing.</p>
    pub fn get_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.r#type
    }
    /// <p>The unique identifier for the document you are storing.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier for the document you are storing.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The unique identifier for the document you are storing.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// Consumes the builder and constructs a [`OpenSearchAction`](crate::types::OpenSearchAction).
    /// This method will fail if any of the following fields are not set:
    /// - [`role_arn`](crate::types::builders::OpenSearchActionBuilder::role_arn)
    /// - [`endpoint`](crate::types::builders::OpenSearchActionBuilder::endpoint)
    /// - [`index`](crate::types::builders::OpenSearchActionBuilder::index)
    /// - [`r#type`](crate::types::builders::OpenSearchActionBuilder::r#type)
    /// - [`id`](crate::types::builders::OpenSearchActionBuilder::id)
    pub fn build(self) -> ::std::result::Result<crate::types::OpenSearchAction, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::OpenSearchAction {
            role_arn: self.role_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "role_arn",
                    "role_arn was not specified but it is required when building OpenSearchAction",
                )
            })?,
            endpoint: self.endpoint.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "endpoint",
                    "endpoint was not specified but it is required when building OpenSearchAction",
                )
            })?,
            index: self.index.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "index",
                    "index was not specified but it is required when building OpenSearchAction",
                )
            })?,
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building OpenSearchAction",
                )
            })?,
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building OpenSearchAction",
                )
            })?,
        })
    }
}
