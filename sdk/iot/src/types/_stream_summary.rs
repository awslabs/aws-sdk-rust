// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A summary of a stream.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StreamSummary {
    /// <p>The stream ID.</p>
    #[doc(hidden)]
    pub stream_id: std::option::Option<std::string::String>,
    /// <p>The stream ARN.</p>
    #[doc(hidden)]
    pub stream_arn: std::option::Option<std::string::String>,
    /// <p>The stream version.</p>
    #[doc(hidden)]
    pub stream_version: std::option::Option<i32>,
    /// <p>A description of the stream.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
}
impl StreamSummary {
    /// <p>The stream ID.</p>
    pub fn stream_id(&self) -> std::option::Option<&str> {
        self.stream_id.as_deref()
    }
    /// <p>The stream ARN.</p>
    pub fn stream_arn(&self) -> std::option::Option<&str> {
        self.stream_arn.as_deref()
    }
    /// <p>The stream version.</p>
    pub fn stream_version(&self) -> std::option::Option<i32> {
        self.stream_version
    }
    /// <p>A description of the stream.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
}
impl StreamSummary {
    /// Creates a new builder-style object to manufacture [`StreamSummary`](crate::types::StreamSummary).
    pub fn builder() -> crate::types::builders::StreamSummaryBuilder {
        crate::types::builders::StreamSummaryBuilder::default()
    }
}

/// A builder for [`StreamSummary`](crate::types::StreamSummary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct StreamSummaryBuilder {
    pub(crate) stream_id: std::option::Option<std::string::String>,
    pub(crate) stream_arn: std::option::Option<std::string::String>,
    pub(crate) stream_version: std::option::Option<i32>,
    pub(crate) description: std::option::Option<std::string::String>,
}
impl StreamSummaryBuilder {
    /// <p>The stream ID.</p>
    pub fn stream_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.stream_id = Some(input.into());
        self
    }
    /// <p>The stream ID.</p>
    pub fn set_stream_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.stream_id = input;
        self
    }
    /// <p>The stream ARN.</p>
    pub fn stream_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.stream_arn = Some(input.into());
        self
    }
    /// <p>The stream ARN.</p>
    pub fn set_stream_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.stream_arn = input;
        self
    }
    /// <p>The stream version.</p>
    pub fn stream_version(mut self, input: i32) -> Self {
        self.stream_version = Some(input);
        self
    }
    /// <p>The stream version.</p>
    pub fn set_stream_version(mut self, input: std::option::Option<i32>) -> Self {
        self.stream_version = input;
        self
    }
    /// <p>A description of the stream.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>A description of the stream.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// Consumes the builder and constructs a [`StreamSummary`](crate::types::StreamSummary).
    pub fn build(self) -> crate::types::StreamSummary {
        crate::types::StreamSummary {
            stream_id: self.stream_id,
            stream_arn: self.stream_arn,
            stream_version: self.stream_version,
            description: self.description,
        }
    }
}
