// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Send data to an HTTPS endpoint.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct HttpAction {
    /// <p>The endpoint URL. If substitution templates are used in the URL, you must also specify a <code>confirmationUrl</code>. If this is a new destination, a new <code>TopicRuleDestination</code> is created if possible.</p>
    pub url: ::std::string::String,
    /// <p>The URL to which IoT sends a confirmation message. The value of the confirmation URL must be a prefix of the endpoint URL. If you do not specify a confirmation URL IoT uses the endpoint URL as the confirmation URL. If you use substitution templates in the confirmationUrl, you must create and enable topic rule destinations that match each possible value of the substitution template before traffic is allowed to your endpoint URL.</p>
    pub confirmation_url: ::std::option::Option<::std::string::String>,
    /// <p>The HTTP headers to send with the message data.</p>
    pub headers: ::std::option::Option<::std::vec::Vec<crate::types::HttpActionHeader>>,
    /// <p>The authentication method to use when sending data to an HTTPS endpoint.</p>
    pub auth: ::std::option::Option<crate::types::HttpAuthorization>,
}
impl HttpAction {
    /// <p>The endpoint URL. If substitution templates are used in the URL, you must also specify a <code>confirmationUrl</code>. If this is a new destination, a new <code>TopicRuleDestination</code> is created if possible.</p>
    pub fn url(&self) -> &str {
        use std::ops::Deref;
        self.url.deref()
    }
    /// <p>The URL to which IoT sends a confirmation message. The value of the confirmation URL must be a prefix of the endpoint URL. If you do not specify a confirmation URL IoT uses the endpoint URL as the confirmation URL. If you use substitution templates in the confirmationUrl, you must create and enable topic rule destinations that match each possible value of the substitution template before traffic is allowed to your endpoint URL.</p>
    pub fn confirmation_url(&self) -> ::std::option::Option<&str> {
        self.confirmation_url.as_deref()
    }
    /// <p>The HTTP headers to send with the message data.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.headers.is_none()`.
    pub fn headers(&self) -> &[crate::types::HttpActionHeader] {
        self.headers.as_deref().unwrap_or_default()
    }
    /// <p>The authentication method to use when sending data to an HTTPS endpoint.</p>
    pub fn auth(&self) -> ::std::option::Option<&crate::types::HttpAuthorization> {
        self.auth.as_ref()
    }
}
impl HttpAction {
    /// Creates a new builder-style object to manufacture [`HttpAction`](crate::types::HttpAction).
    pub fn builder() -> crate::types::builders::HttpActionBuilder {
        crate::types::builders::HttpActionBuilder::default()
    }
}

/// A builder for [`HttpAction`](crate::types::HttpAction).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct HttpActionBuilder {
    pub(crate) url: ::std::option::Option<::std::string::String>,
    pub(crate) confirmation_url: ::std::option::Option<::std::string::String>,
    pub(crate) headers: ::std::option::Option<::std::vec::Vec<crate::types::HttpActionHeader>>,
    pub(crate) auth: ::std::option::Option<crate::types::HttpAuthorization>,
}
impl HttpActionBuilder {
    /// <p>The endpoint URL. If substitution templates are used in the URL, you must also specify a <code>confirmationUrl</code>. If this is a new destination, a new <code>TopicRuleDestination</code> is created if possible.</p>
    /// This field is required.
    pub fn url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The endpoint URL. If substitution templates are used in the URL, you must also specify a <code>confirmationUrl</code>. If this is a new destination, a new <code>TopicRuleDestination</code> is created if possible.</p>
    pub fn set_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.url = input;
        self
    }
    /// <p>The endpoint URL. If substitution templates are used in the URL, you must also specify a <code>confirmationUrl</code>. If this is a new destination, a new <code>TopicRuleDestination</code> is created if possible.</p>
    pub fn get_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.url
    }
    /// <p>The URL to which IoT sends a confirmation message. The value of the confirmation URL must be a prefix of the endpoint URL. If you do not specify a confirmation URL IoT uses the endpoint URL as the confirmation URL. If you use substitution templates in the confirmationUrl, you must create and enable topic rule destinations that match each possible value of the substitution template before traffic is allowed to your endpoint URL.</p>
    pub fn confirmation_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.confirmation_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The URL to which IoT sends a confirmation message. The value of the confirmation URL must be a prefix of the endpoint URL. If you do not specify a confirmation URL IoT uses the endpoint URL as the confirmation URL. If you use substitution templates in the confirmationUrl, you must create and enable topic rule destinations that match each possible value of the substitution template before traffic is allowed to your endpoint URL.</p>
    pub fn set_confirmation_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.confirmation_url = input;
        self
    }
    /// <p>The URL to which IoT sends a confirmation message. The value of the confirmation URL must be a prefix of the endpoint URL. If you do not specify a confirmation URL IoT uses the endpoint URL as the confirmation URL. If you use substitution templates in the confirmationUrl, you must create and enable topic rule destinations that match each possible value of the substitution template before traffic is allowed to your endpoint URL.</p>
    pub fn get_confirmation_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.confirmation_url
    }
    /// Appends an item to `headers`.
    ///
    /// To override the contents of this collection use [`set_headers`](Self::set_headers).
    ///
    /// <p>The HTTP headers to send with the message data.</p>
    pub fn headers(mut self, input: crate::types::HttpActionHeader) -> Self {
        let mut v = self.headers.unwrap_or_default();
        v.push(input);
        self.headers = ::std::option::Option::Some(v);
        self
    }
    /// <p>The HTTP headers to send with the message data.</p>
    pub fn set_headers(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::HttpActionHeader>>) -> Self {
        self.headers = input;
        self
    }
    /// <p>The HTTP headers to send with the message data.</p>
    pub fn get_headers(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::HttpActionHeader>> {
        &self.headers
    }
    /// <p>The authentication method to use when sending data to an HTTPS endpoint.</p>
    pub fn auth(mut self, input: crate::types::HttpAuthorization) -> Self {
        self.auth = ::std::option::Option::Some(input);
        self
    }
    /// <p>The authentication method to use when sending data to an HTTPS endpoint.</p>
    pub fn set_auth(mut self, input: ::std::option::Option<crate::types::HttpAuthorization>) -> Self {
        self.auth = input;
        self
    }
    /// <p>The authentication method to use when sending data to an HTTPS endpoint.</p>
    pub fn get_auth(&self) -> &::std::option::Option<crate::types::HttpAuthorization> {
        &self.auth
    }
    /// Consumes the builder and constructs a [`HttpAction`](crate::types::HttpAction).
    /// This method will fail if any of the following fields are not set:
    /// - [`url`](crate::types::builders::HttpActionBuilder::url)
    pub fn build(self) -> ::std::result::Result<crate::types::HttpAction, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::HttpAction {
            url: self.url.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "url",
                    "url was not specified but it is required when building HttpAction",
                )
            })?,
            confirmation_url: self.confirmation_url,
            headers: self.headers,
            auth: self.auth,
        })
    }
}
