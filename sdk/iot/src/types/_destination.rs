// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the location of the updated firmware.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Destination {
    /// <p>Describes the location in S3 of the updated firmware.</p>
    #[doc(hidden)]
    pub s3_destination: std::option::Option<crate::types::S3Destination>,
}
impl Destination {
    /// <p>Describes the location in S3 of the updated firmware.</p>
    pub fn s3_destination(&self) -> std::option::Option<&crate::types::S3Destination> {
        self.s3_destination.as_ref()
    }
}
impl Destination {
    /// Creates a new builder-style object to manufacture [`Destination`](crate::types::Destination).
    pub fn builder() -> crate::types::builders::DestinationBuilder {
        crate::types::builders::DestinationBuilder::default()
    }
}

/// A builder for [`Destination`](crate::types::Destination).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DestinationBuilder {
    pub(crate) s3_destination: std::option::Option<crate::types::S3Destination>,
}
impl DestinationBuilder {
    /// <p>Describes the location in S3 of the updated firmware.</p>
    pub fn s3_destination(mut self, input: crate::types::S3Destination) -> Self {
        self.s3_destination = Some(input);
        self
    }
    /// <p>Describes the location in S3 of the updated firmware.</p>
    pub fn set_s3_destination(
        mut self,
        input: std::option::Option<crate::types::S3Destination>,
    ) -> Self {
        self.s3_destination = input;
        self
    }
    /// Consumes the builder and constructs a [`Destination`](crate::types::Destination).
    pub fn build(self) -> crate::types::Destination {
        crate::types::Destination {
            s3_destination: self.s3_destination,
        }
    }
}
