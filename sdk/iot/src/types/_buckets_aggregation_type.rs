// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The type of bucketed aggregation performed.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BucketsAggregationType {
    /// <p>Performs an aggregation that will return a list of buckets. The list of buckets is a ranked list of the number of occurrences of an aggregation field value.</p>
    #[doc(hidden)]
    pub terms_aggregation: std::option::Option<crate::types::TermsAggregation>,
}
impl BucketsAggregationType {
    /// <p>Performs an aggregation that will return a list of buckets. The list of buckets is a ranked list of the number of occurrences of an aggregation field value.</p>
    pub fn terms_aggregation(&self) -> std::option::Option<&crate::types::TermsAggregation> {
        self.terms_aggregation.as_ref()
    }
}
impl BucketsAggregationType {
    /// Creates a new builder-style object to manufacture [`BucketsAggregationType`](crate::types::BucketsAggregationType).
    pub fn builder() -> crate::types::builders::BucketsAggregationTypeBuilder {
        crate::types::builders::BucketsAggregationTypeBuilder::default()
    }
}

/// A builder for [`BucketsAggregationType`](crate::types::BucketsAggregationType).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct BucketsAggregationTypeBuilder {
    pub(crate) terms_aggregation: std::option::Option<crate::types::TermsAggregation>,
}
impl BucketsAggregationTypeBuilder {
    /// <p>Performs an aggregation that will return a list of buckets. The list of buckets is a ranked list of the number of occurrences of an aggregation field value.</p>
    pub fn terms_aggregation(mut self, input: crate::types::TermsAggregation) -> Self {
        self.terms_aggregation = Some(input);
        self
    }
    /// <p>Performs an aggregation that will return a list of buckets. The list of buckets is a ranked list of the number of occurrences of an aggregation field value.</p>
    pub fn set_terms_aggregation(
        mut self,
        input: std::option::Option<crate::types::TermsAggregation>,
    ) -> Self {
        self.terms_aggregation = input;
        self
    }
    /// Consumes the builder and constructs a [`BucketsAggregationType`](crate::types::BucketsAggregationType).
    pub fn build(self) -> crate::types::BucketsAggregationType {
        crate::types::BucketsAggregationType {
            terms_aggregation: self.terms_aggregation,
        }
    }
}
