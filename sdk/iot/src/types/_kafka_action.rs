// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Send messages to an Amazon Managed Streaming for Apache Kafka (Amazon MSK) or self-managed Apache Kafka cluster.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct KafkaAction {
    /// <p>The ARN of Kafka action's VPC <code>TopicRuleDestination</code>.</p>
    pub destination_arn: ::std::string::String,
    /// <p>The Kafka topic for messages to be sent to the Kafka broker.</p>
    pub topic: ::std::string::String,
    /// <p>The Kafka message key.</p>
    pub key: ::std::option::Option<::std::string::String>,
    /// <p>The Kafka message partition.</p>
    pub partition: ::std::option::Option<::std::string::String>,
    /// <p>Properties of the Apache Kafka producer client.</p>
    pub client_properties: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    /// <p>The list of Kafka headers that you specify.</p>
    pub headers: ::std::option::Option<::std::vec::Vec<crate::types::KafkaActionHeader>>,
}
impl KafkaAction {
    /// <p>The ARN of Kafka action's VPC <code>TopicRuleDestination</code>.</p>
    pub fn destination_arn(&self) -> &str {
        use std::ops::Deref;
        self.destination_arn.deref()
    }
    /// <p>The Kafka topic for messages to be sent to the Kafka broker.</p>
    pub fn topic(&self) -> &str {
        use std::ops::Deref;
        self.topic.deref()
    }
    /// <p>The Kafka message key.</p>
    pub fn key(&self) -> ::std::option::Option<&str> {
        self.key.as_deref()
    }
    /// <p>The Kafka message partition.</p>
    pub fn partition(&self) -> ::std::option::Option<&str> {
        self.partition.as_deref()
    }
    /// <p>Properties of the Apache Kafka producer client.</p>
    pub fn client_properties(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.client_properties
    }
    /// <p>The list of Kafka headers that you specify.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.headers.is_none()`.
    pub fn headers(&self) -> &[crate::types::KafkaActionHeader] {
        self.headers.as_deref().unwrap_or_default()
    }
}
impl KafkaAction {
    /// Creates a new builder-style object to manufacture [`KafkaAction`](crate::types::KafkaAction).
    pub fn builder() -> crate::types::builders::KafkaActionBuilder {
        crate::types::builders::KafkaActionBuilder::default()
    }
}

/// A builder for [`KafkaAction`](crate::types::KafkaAction).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct KafkaActionBuilder {
    pub(crate) destination_arn: ::std::option::Option<::std::string::String>,
    pub(crate) topic: ::std::option::Option<::std::string::String>,
    pub(crate) key: ::std::option::Option<::std::string::String>,
    pub(crate) partition: ::std::option::Option<::std::string::String>,
    pub(crate) client_properties: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) headers: ::std::option::Option<::std::vec::Vec<crate::types::KafkaActionHeader>>,
}
impl KafkaActionBuilder {
    /// <p>The ARN of Kafka action's VPC <code>TopicRuleDestination</code>.</p>
    /// This field is required.
    pub fn destination_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.destination_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of Kafka action's VPC <code>TopicRuleDestination</code>.</p>
    pub fn set_destination_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.destination_arn = input;
        self
    }
    /// <p>The ARN of Kafka action's VPC <code>TopicRuleDestination</code>.</p>
    pub fn get_destination_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.destination_arn
    }
    /// <p>The Kafka topic for messages to be sent to the Kafka broker.</p>
    /// This field is required.
    pub fn topic(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.topic = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Kafka topic for messages to be sent to the Kafka broker.</p>
    pub fn set_topic(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.topic = input;
        self
    }
    /// <p>The Kafka topic for messages to be sent to the Kafka broker.</p>
    pub fn get_topic(&self) -> &::std::option::Option<::std::string::String> {
        &self.topic
    }
    /// <p>The Kafka message key.</p>
    pub fn key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Kafka message key.</p>
    pub fn set_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.key = input;
        self
    }
    /// <p>The Kafka message key.</p>
    pub fn get_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.key
    }
    /// <p>The Kafka message partition.</p>
    pub fn partition(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.partition = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Kafka message partition.</p>
    pub fn set_partition(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.partition = input;
        self
    }
    /// <p>The Kafka message partition.</p>
    pub fn get_partition(&self) -> &::std::option::Option<::std::string::String> {
        &self.partition
    }
    /// Adds a key-value pair to `client_properties`.
    ///
    /// To override the contents of this collection use [`set_client_properties`](Self::set_client_properties).
    ///
    /// <p>Properties of the Apache Kafka producer client.</p>
    pub fn client_properties(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        let mut hash_map = self.client_properties.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.client_properties = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Properties of the Apache Kafka producer client.</p>
    pub fn set_client_properties(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.client_properties = input;
        self
    }
    /// <p>Properties of the Apache Kafka producer client.</p>
    pub fn get_client_properties(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.client_properties
    }
    /// Appends an item to `headers`.
    ///
    /// To override the contents of this collection use [`set_headers`](Self::set_headers).
    ///
    /// <p>The list of Kafka headers that you specify.</p>
    pub fn headers(mut self, input: crate::types::KafkaActionHeader) -> Self {
        let mut v = self.headers.unwrap_or_default();
        v.push(input);
        self.headers = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of Kafka headers that you specify.</p>
    pub fn set_headers(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::KafkaActionHeader>>) -> Self {
        self.headers = input;
        self
    }
    /// <p>The list of Kafka headers that you specify.</p>
    pub fn get_headers(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::KafkaActionHeader>> {
        &self.headers
    }
    /// Consumes the builder and constructs a [`KafkaAction`](crate::types::KafkaAction).
    /// This method will fail if any of the following fields are not set:
    /// - [`destination_arn`](crate::types::builders::KafkaActionBuilder::destination_arn)
    /// - [`topic`](crate::types::builders::KafkaActionBuilder::topic)
    /// - [`client_properties`](crate::types::builders::KafkaActionBuilder::client_properties)
    pub fn build(self) -> ::std::result::Result<crate::types::KafkaAction, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::KafkaAction {
            destination_arn: self.destination_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "destination_arn",
                    "destination_arn was not specified but it is required when building KafkaAction",
                )
            })?,
            topic: self.topic.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "topic",
                    "topic was not specified but it is required when building KafkaAction",
                )
            })?,
            key: self.key,
            partition: self.partition,
            client_properties: self.client_properties.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "client_properties",
                    "client_properties was not specified but it is required when building KafkaAction",
                )
            })?,
            headers: self.headers,
        })
    }
}
