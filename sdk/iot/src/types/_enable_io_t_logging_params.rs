// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Parameters used when defining a mitigation action that enable Amazon Web Services IoT Core logging.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct EnableIoTLoggingParams {
    /// <p>The Amazon Resource Name (ARN) of the IAM role used for logging.</p>
    #[doc(hidden)]
    pub role_arn_for_logging: std::option::Option<std::string::String>,
    /// <p>Specifies the type of information to be logged.</p>
    #[doc(hidden)]
    pub log_level: std::option::Option<crate::types::LogLevel>,
}
impl EnableIoTLoggingParams {
    /// <p>The Amazon Resource Name (ARN) of the IAM role used for logging.</p>
    pub fn role_arn_for_logging(&self) -> std::option::Option<&str> {
        self.role_arn_for_logging.as_deref()
    }
    /// <p>Specifies the type of information to be logged.</p>
    pub fn log_level(&self) -> std::option::Option<&crate::types::LogLevel> {
        self.log_level.as_ref()
    }
}
impl EnableIoTLoggingParams {
    /// Creates a new builder-style object to manufacture [`EnableIoTLoggingParams`](crate::types::EnableIoTLoggingParams).
    pub fn builder() -> crate::types::builders::EnableIoTLoggingParamsBuilder {
        crate::types::builders::EnableIoTLoggingParamsBuilder::default()
    }
}

/// A builder for [`EnableIoTLoggingParams`](crate::types::EnableIoTLoggingParams).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct EnableIoTLoggingParamsBuilder {
    pub(crate) role_arn_for_logging: std::option::Option<std::string::String>,
    pub(crate) log_level: std::option::Option<crate::types::LogLevel>,
}
impl EnableIoTLoggingParamsBuilder {
    /// <p>The Amazon Resource Name (ARN) of the IAM role used for logging.</p>
    pub fn role_arn_for_logging(mut self, input: impl Into<std::string::String>) -> Self {
        self.role_arn_for_logging = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role used for logging.</p>
    pub fn set_role_arn_for_logging(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.role_arn_for_logging = input;
        self
    }
    /// <p>Specifies the type of information to be logged.</p>
    pub fn log_level(mut self, input: crate::types::LogLevel) -> Self {
        self.log_level = Some(input);
        self
    }
    /// <p>Specifies the type of information to be logged.</p>
    pub fn set_log_level(mut self, input: std::option::Option<crate::types::LogLevel>) -> Self {
        self.log_level = input;
        self
    }
    /// Consumes the builder and constructs a [`EnableIoTLoggingParams`](crate::types::EnableIoTLoggingParams).
    pub fn build(self) -> crate::types::EnableIoTLoggingParams {
        crate::types::EnableIoTLoggingParams {
            role_arn_for_logging: self.role_arn_for_logging,
            log_level: self.log_level,
        }
    }
}
