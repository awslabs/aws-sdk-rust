// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The definition of the thing type, including thing type name and description.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ThingTypeDefinition {
    /// <p>The name of the thing type.</p>
    #[doc(hidden)]
    pub thing_type_name: std::option::Option<std::string::String>,
    /// <p>The thing type ARN.</p>
    #[doc(hidden)]
    pub thing_type_arn: std::option::Option<std::string::String>,
    /// <p>The ThingTypeProperties for the thing type.</p>
    #[doc(hidden)]
    pub thing_type_properties: std::option::Option<crate::types::ThingTypeProperties>,
    /// <p>The ThingTypeMetadata contains additional information about the thing type including: creation date and time, a value indicating whether the thing type is deprecated, and a date and time when it was deprecated.</p>
    #[doc(hidden)]
    pub thing_type_metadata: std::option::Option<crate::types::ThingTypeMetadata>,
}
impl ThingTypeDefinition {
    /// <p>The name of the thing type.</p>
    pub fn thing_type_name(&self) -> std::option::Option<&str> {
        self.thing_type_name.as_deref()
    }
    /// <p>The thing type ARN.</p>
    pub fn thing_type_arn(&self) -> std::option::Option<&str> {
        self.thing_type_arn.as_deref()
    }
    /// <p>The ThingTypeProperties for the thing type.</p>
    pub fn thing_type_properties(&self) -> std::option::Option<&crate::types::ThingTypeProperties> {
        self.thing_type_properties.as_ref()
    }
    /// <p>The ThingTypeMetadata contains additional information about the thing type including: creation date and time, a value indicating whether the thing type is deprecated, and a date and time when it was deprecated.</p>
    pub fn thing_type_metadata(&self) -> std::option::Option<&crate::types::ThingTypeMetadata> {
        self.thing_type_metadata.as_ref()
    }
}
impl ThingTypeDefinition {
    /// Creates a new builder-style object to manufacture [`ThingTypeDefinition`](crate::types::ThingTypeDefinition).
    pub fn builder() -> crate::types::builders::ThingTypeDefinitionBuilder {
        crate::types::builders::ThingTypeDefinitionBuilder::default()
    }
}

/// A builder for [`ThingTypeDefinition`](crate::types::ThingTypeDefinition).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ThingTypeDefinitionBuilder {
    pub(crate) thing_type_name: std::option::Option<std::string::String>,
    pub(crate) thing_type_arn: std::option::Option<std::string::String>,
    pub(crate) thing_type_properties: std::option::Option<crate::types::ThingTypeProperties>,
    pub(crate) thing_type_metadata: std::option::Option<crate::types::ThingTypeMetadata>,
}
impl ThingTypeDefinitionBuilder {
    /// <p>The name of the thing type.</p>
    pub fn thing_type_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.thing_type_name = Some(input.into());
        self
    }
    /// <p>The name of the thing type.</p>
    pub fn set_thing_type_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.thing_type_name = input;
        self
    }
    /// <p>The thing type ARN.</p>
    pub fn thing_type_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.thing_type_arn = Some(input.into());
        self
    }
    /// <p>The thing type ARN.</p>
    pub fn set_thing_type_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.thing_type_arn = input;
        self
    }
    /// <p>The ThingTypeProperties for the thing type.</p>
    pub fn thing_type_properties(mut self, input: crate::types::ThingTypeProperties) -> Self {
        self.thing_type_properties = Some(input);
        self
    }
    /// <p>The ThingTypeProperties for the thing type.</p>
    pub fn set_thing_type_properties(
        mut self,
        input: std::option::Option<crate::types::ThingTypeProperties>,
    ) -> Self {
        self.thing_type_properties = input;
        self
    }
    /// <p>The ThingTypeMetadata contains additional information about the thing type including: creation date and time, a value indicating whether the thing type is deprecated, and a date and time when it was deprecated.</p>
    pub fn thing_type_metadata(mut self, input: crate::types::ThingTypeMetadata) -> Self {
        self.thing_type_metadata = Some(input);
        self
    }
    /// <p>The ThingTypeMetadata contains additional information about the thing type including: creation date and time, a value indicating whether the thing type is deprecated, and a date and time when it was deprecated.</p>
    pub fn set_thing_type_metadata(
        mut self,
        input: std::option::Option<crate::types::ThingTypeMetadata>,
    ) -> Self {
        self.thing_type_metadata = input;
        self
    }
    /// Consumes the builder and constructs a [`ThingTypeDefinition`](crate::types::ThingTypeDefinition).
    pub fn build(self) -> crate::types::ThingTypeDefinition {
        crate::types::ThingTypeDefinition {
            thing_type_name: self.thing_type_name,
            thing_type_arn: self.thing_type_arn,
            thing_type_properties: self.thing_type_properties,
            thing_type_metadata: self.thing_type_metadata,
        }
    }
}
