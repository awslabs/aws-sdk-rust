// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes an action to write to a DynamoDB table.</p>
/// <p>The <code>tableName</code>, <code>hashKeyField</code>, and <code>rangeKeyField</code> values must match the values used when you created the table.</p>
/// <p>The <code>hashKeyValue</code> and <code>rangeKeyvalue</code> fields use a substitution template syntax. These templates provide data at runtime. The syntax is as follows: ${<i>sql-expression</i>}.</p>
/// <p>You can specify any valid expression in a WHERE or SELECT clause, including JSON properties, comparisons, calculations, and functions. For example, the following field uses the third level of the topic:</p>
/// <p> <code>"hashKeyValue": "${topic(3)}"</code> </p>
/// <p>The following field uses the timestamp:</p>
/// <p> <code>"rangeKeyValue": "${timestamp()}"</code> </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DynamoDbAction {
    /// <p>The name of the DynamoDB table.</p>
    pub table_name: ::std::string::String,
    /// <p>The ARN of the IAM role that grants access to the DynamoDB table.</p>
    pub role_arn: ::std::string::String,
    /// <p>The type of operation to be performed. This follows the substitution template, so it can be <code>${operation}</code>, but the substitution must result in one of the following: <code>INSERT</code>, <code>UPDATE</code>, or <code>DELETE</code>.</p>
    pub operation: ::std::option::Option<::std::string::String>,
    /// <p>The hash key name.</p>
    pub hash_key_field: ::std::string::String,
    /// <p>The hash key value.</p>
    pub hash_key_value: ::std::string::String,
    /// <p>The hash key type. Valid values are "STRING" or "NUMBER"</p>
    pub hash_key_type: ::std::option::Option<crate::types::DynamoKeyType>,
    /// <p>The range key name.</p>
    pub range_key_field: ::std::option::Option<::std::string::String>,
    /// <p>The range key value.</p>
    pub range_key_value: ::std::option::Option<::std::string::String>,
    /// <p>The range key type. Valid values are "STRING" or "NUMBER"</p>
    pub range_key_type: ::std::option::Option<crate::types::DynamoKeyType>,
    /// <p>The action payload. This name can be customized.</p>
    pub payload_field: ::std::option::Option<::std::string::String>,
}
impl DynamoDbAction {
    /// <p>The name of the DynamoDB table.</p>
    pub fn table_name(&self) -> &str {
        use std::ops::Deref;
        self.table_name.deref()
    }
    /// <p>The ARN of the IAM role that grants access to the DynamoDB table.</p>
    pub fn role_arn(&self) -> &str {
        use std::ops::Deref;
        self.role_arn.deref()
    }
    /// <p>The type of operation to be performed. This follows the substitution template, so it can be <code>${operation}</code>, but the substitution must result in one of the following: <code>INSERT</code>, <code>UPDATE</code>, or <code>DELETE</code>.</p>
    pub fn operation(&self) -> ::std::option::Option<&str> {
        self.operation.as_deref()
    }
    /// <p>The hash key name.</p>
    pub fn hash_key_field(&self) -> &str {
        use std::ops::Deref;
        self.hash_key_field.deref()
    }
    /// <p>The hash key value.</p>
    pub fn hash_key_value(&self) -> &str {
        use std::ops::Deref;
        self.hash_key_value.deref()
    }
    /// <p>The hash key type. Valid values are "STRING" or "NUMBER"</p>
    pub fn hash_key_type(&self) -> ::std::option::Option<&crate::types::DynamoKeyType> {
        self.hash_key_type.as_ref()
    }
    /// <p>The range key name.</p>
    pub fn range_key_field(&self) -> ::std::option::Option<&str> {
        self.range_key_field.as_deref()
    }
    /// <p>The range key value.</p>
    pub fn range_key_value(&self) -> ::std::option::Option<&str> {
        self.range_key_value.as_deref()
    }
    /// <p>The range key type. Valid values are "STRING" or "NUMBER"</p>
    pub fn range_key_type(&self) -> ::std::option::Option<&crate::types::DynamoKeyType> {
        self.range_key_type.as_ref()
    }
    /// <p>The action payload. This name can be customized.</p>
    pub fn payload_field(&self) -> ::std::option::Option<&str> {
        self.payload_field.as_deref()
    }
}
impl DynamoDbAction {
    /// Creates a new builder-style object to manufacture [`DynamoDbAction`](crate::types::DynamoDbAction).
    pub fn builder() -> crate::types::builders::DynamoDbActionBuilder {
        crate::types::builders::DynamoDbActionBuilder::default()
    }
}

/// A builder for [`DynamoDbAction`](crate::types::DynamoDbAction).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DynamoDbActionBuilder {
    pub(crate) table_name: ::std::option::Option<::std::string::String>,
    pub(crate) role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) operation: ::std::option::Option<::std::string::String>,
    pub(crate) hash_key_field: ::std::option::Option<::std::string::String>,
    pub(crate) hash_key_value: ::std::option::Option<::std::string::String>,
    pub(crate) hash_key_type: ::std::option::Option<crate::types::DynamoKeyType>,
    pub(crate) range_key_field: ::std::option::Option<::std::string::String>,
    pub(crate) range_key_value: ::std::option::Option<::std::string::String>,
    pub(crate) range_key_type: ::std::option::Option<crate::types::DynamoKeyType>,
    pub(crate) payload_field: ::std::option::Option<::std::string::String>,
}
impl DynamoDbActionBuilder {
    /// <p>The name of the DynamoDB table.</p>
    /// This field is required.
    pub fn table_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.table_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the DynamoDB table.</p>
    pub fn set_table_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.table_name = input;
        self
    }
    /// <p>The name of the DynamoDB table.</p>
    pub fn get_table_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.table_name
    }
    /// <p>The ARN of the IAM role that grants access to the DynamoDB table.</p>
    /// This field is required.
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the IAM role that grants access to the DynamoDB table.</p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The ARN of the IAM role that grants access to the DynamoDB table.</p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn
    }
    /// <p>The type of operation to be performed. This follows the substitution template, so it can be <code>${operation}</code>, but the substitution must result in one of the following: <code>INSERT</code>, <code>UPDATE</code>, or <code>DELETE</code>.</p>
    pub fn operation(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.operation = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type of operation to be performed. This follows the substitution template, so it can be <code>${operation}</code>, but the substitution must result in one of the following: <code>INSERT</code>, <code>UPDATE</code>, or <code>DELETE</code>.</p>
    pub fn set_operation(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.operation = input;
        self
    }
    /// <p>The type of operation to be performed. This follows the substitution template, so it can be <code>${operation}</code>, but the substitution must result in one of the following: <code>INSERT</code>, <code>UPDATE</code>, or <code>DELETE</code>.</p>
    pub fn get_operation(&self) -> &::std::option::Option<::std::string::String> {
        &self.operation
    }
    /// <p>The hash key name.</p>
    /// This field is required.
    pub fn hash_key_field(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.hash_key_field = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The hash key name.</p>
    pub fn set_hash_key_field(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.hash_key_field = input;
        self
    }
    /// <p>The hash key name.</p>
    pub fn get_hash_key_field(&self) -> &::std::option::Option<::std::string::String> {
        &self.hash_key_field
    }
    /// <p>The hash key value.</p>
    /// This field is required.
    pub fn hash_key_value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.hash_key_value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The hash key value.</p>
    pub fn set_hash_key_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.hash_key_value = input;
        self
    }
    /// <p>The hash key value.</p>
    pub fn get_hash_key_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.hash_key_value
    }
    /// <p>The hash key type. Valid values are "STRING" or "NUMBER"</p>
    pub fn hash_key_type(mut self, input: crate::types::DynamoKeyType) -> Self {
        self.hash_key_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The hash key type. Valid values are "STRING" or "NUMBER"</p>
    pub fn set_hash_key_type(mut self, input: ::std::option::Option<crate::types::DynamoKeyType>) -> Self {
        self.hash_key_type = input;
        self
    }
    /// <p>The hash key type. Valid values are "STRING" or "NUMBER"</p>
    pub fn get_hash_key_type(&self) -> &::std::option::Option<crate::types::DynamoKeyType> {
        &self.hash_key_type
    }
    /// <p>The range key name.</p>
    pub fn range_key_field(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.range_key_field = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The range key name.</p>
    pub fn set_range_key_field(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.range_key_field = input;
        self
    }
    /// <p>The range key name.</p>
    pub fn get_range_key_field(&self) -> &::std::option::Option<::std::string::String> {
        &self.range_key_field
    }
    /// <p>The range key value.</p>
    pub fn range_key_value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.range_key_value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The range key value.</p>
    pub fn set_range_key_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.range_key_value = input;
        self
    }
    /// <p>The range key value.</p>
    pub fn get_range_key_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.range_key_value
    }
    /// <p>The range key type. Valid values are "STRING" or "NUMBER"</p>
    pub fn range_key_type(mut self, input: crate::types::DynamoKeyType) -> Self {
        self.range_key_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The range key type. Valid values are "STRING" or "NUMBER"</p>
    pub fn set_range_key_type(mut self, input: ::std::option::Option<crate::types::DynamoKeyType>) -> Self {
        self.range_key_type = input;
        self
    }
    /// <p>The range key type. Valid values are "STRING" or "NUMBER"</p>
    pub fn get_range_key_type(&self) -> &::std::option::Option<crate::types::DynamoKeyType> {
        &self.range_key_type
    }
    /// <p>The action payload. This name can be customized.</p>
    pub fn payload_field(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.payload_field = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The action payload. This name can be customized.</p>
    pub fn set_payload_field(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.payload_field = input;
        self
    }
    /// <p>The action payload. This name can be customized.</p>
    pub fn get_payload_field(&self) -> &::std::option::Option<::std::string::String> {
        &self.payload_field
    }
    /// Consumes the builder and constructs a [`DynamoDbAction`](crate::types::DynamoDbAction).
    /// This method will fail if any of the following fields are not set:
    /// - [`table_name`](crate::types::builders::DynamoDbActionBuilder::table_name)
    /// - [`role_arn`](crate::types::builders::DynamoDbActionBuilder::role_arn)
    /// - [`hash_key_field`](crate::types::builders::DynamoDbActionBuilder::hash_key_field)
    /// - [`hash_key_value`](crate::types::builders::DynamoDbActionBuilder::hash_key_value)
    pub fn build(self) -> ::std::result::Result<crate::types::DynamoDbAction, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::DynamoDbAction {
            table_name: self.table_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "table_name",
                    "table_name was not specified but it is required when building DynamoDbAction",
                )
            })?,
            role_arn: self.role_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "role_arn",
                    "role_arn was not specified but it is required when building DynamoDbAction",
                )
            })?,
            operation: self.operation,
            hash_key_field: self.hash_key_field.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "hash_key_field",
                    "hash_key_field was not specified but it is required when building DynamoDbAction",
                )
            })?,
            hash_key_value: self.hash_key_value.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "hash_key_value",
                    "hash_key_value was not specified but it is required when building DynamoDbAction",
                )
            })?,
            hash_key_type: self.hash_key_type,
            range_key_field: self.range_key_field,
            range_key_value: self.range_key_value,
            range_key_type: self.range_key_type,
            payload_field: self.payload_field,
        })
    }
}
