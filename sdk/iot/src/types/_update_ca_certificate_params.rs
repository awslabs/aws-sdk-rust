// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Parameters to define a mitigation action that changes the state of the CA certificate to inactive.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateCaCertificateParams {
    /// <p>The action that you want to apply to the CA certificate. The only supported value is <code>DEACTIVATE</code>.</p>
    #[doc(hidden)]
    pub action: std::option::Option<crate::types::CaCertificateUpdateAction>,
}
impl UpdateCaCertificateParams {
    /// <p>The action that you want to apply to the CA certificate. The only supported value is <code>DEACTIVATE</code>.</p>
    pub fn action(&self) -> std::option::Option<&crate::types::CaCertificateUpdateAction> {
        self.action.as_ref()
    }
}
impl UpdateCaCertificateParams {
    /// Creates a new builder-style object to manufacture [`UpdateCaCertificateParams`](crate::types::UpdateCaCertificateParams).
    pub fn builder() -> crate::types::builders::UpdateCaCertificateParamsBuilder {
        crate::types::builders::UpdateCaCertificateParamsBuilder::default()
    }
}

/// A builder for [`UpdateCaCertificateParams`](crate::types::UpdateCaCertificateParams).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateCaCertificateParamsBuilder {
    pub(crate) action: std::option::Option<crate::types::CaCertificateUpdateAction>,
}
impl UpdateCaCertificateParamsBuilder {
    /// <p>The action that you want to apply to the CA certificate. The only supported value is <code>DEACTIVATE</code>.</p>
    pub fn action(mut self, input: crate::types::CaCertificateUpdateAction) -> Self {
        self.action = Some(input);
        self
    }
    /// <p>The action that you want to apply to the CA certificate. The only supported value is <code>DEACTIVATE</code>.</p>
    pub fn set_action(
        mut self,
        input: std::option::Option<crate::types::CaCertificateUpdateAction>,
    ) -> Self {
        self.action = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateCaCertificateParams`](crate::types::UpdateCaCertificateParams).
    pub fn build(self) -> crate::types::UpdateCaCertificateParams {
        crate::types::UpdateCaCertificateParams {
            action: self.action,
        }
    }
}
