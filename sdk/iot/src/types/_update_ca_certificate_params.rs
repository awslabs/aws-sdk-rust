// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Parameters to define a mitigation action that changes the state of the CA certificate to inactive.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateCaCertificateParams {
    /// <p>The action that you want to apply to the CA certificate. The only supported value is <code>DEACTIVATE</code>.</p>
    pub action: crate::types::CaCertificateUpdateAction,
}
impl UpdateCaCertificateParams {
    /// <p>The action that you want to apply to the CA certificate. The only supported value is <code>DEACTIVATE</code>.</p>
    pub fn action(&self) -> &crate::types::CaCertificateUpdateAction {
        &self.action
    }
}
impl UpdateCaCertificateParams {
    /// Creates a new builder-style object to manufacture [`UpdateCaCertificateParams`](crate::types::UpdateCaCertificateParams).
    pub fn builder() -> crate::types::builders::UpdateCaCertificateParamsBuilder {
        crate::types::builders::UpdateCaCertificateParamsBuilder::default()
    }
}

/// A builder for [`UpdateCaCertificateParams`](crate::types::UpdateCaCertificateParams).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateCaCertificateParamsBuilder {
    pub(crate) action: ::std::option::Option<crate::types::CaCertificateUpdateAction>,
}
impl UpdateCaCertificateParamsBuilder {
    /// <p>The action that you want to apply to the CA certificate. The only supported value is <code>DEACTIVATE</code>.</p>
    /// This field is required.
    pub fn action(mut self, input: crate::types::CaCertificateUpdateAction) -> Self {
        self.action = ::std::option::Option::Some(input);
        self
    }
    /// <p>The action that you want to apply to the CA certificate. The only supported value is <code>DEACTIVATE</code>.</p>
    pub fn set_action(mut self, input: ::std::option::Option<crate::types::CaCertificateUpdateAction>) -> Self {
        self.action = input;
        self
    }
    /// <p>The action that you want to apply to the CA certificate. The only supported value is <code>DEACTIVATE</code>.</p>
    pub fn get_action(&self) -> &::std::option::Option<crate::types::CaCertificateUpdateAction> {
        &self.action
    }
    /// Consumes the builder and constructs a [`UpdateCaCertificateParams`](crate::types::UpdateCaCertificateParams).
    /// This method will fail if any of the following fields are not set:
    /// - [`action`](crate::types::builders::UpdateCaCertificateParamsBuilder::action)
    pub fn build(self) -> ::std::result::Result<crate::types::UpdateCaCertificateParams, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::UpdateCaCertificateParams {
            action: self.action.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "action",
                    "action was not specified but it is required when building UpdateCaCertificateParams",
                )
            })?,
        })
    }
}
