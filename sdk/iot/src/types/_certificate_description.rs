// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a certificate.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CertificateDescription {
    /// <p>The ARN of the certificate.</p>
    #[doc(hidden)]
    pub certificate_arn: std::option::Option<std::string::String>,
    /// <p>The ID of the certificate.</p>
    #[doc(hidden)]
    pub certificate_id: std::option::Option<std::string::String>,
    /// <p>The certificate ID of the CA certificate used to sign this certificate.</p>
    #[doc(hidden)]
    pub ca_certificate_id: std::option::Option<std::string::String>,
    /// <p>The status of the certificate.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::CertificateStatus>,
    /// <p>The certificate data, in PEM format.</p>
    #[doc(hidden)]
    pub certificate_pem: std::option::Option<std::string::String>,
    /// <p>The ID of the Amazon Web Services account that owns the certificate.</p>
    #[doc(hidden)]
    pub owned_by: std::option::Option<std::string::String>,
    /// <p>The ID of the Amazon Web Services account of the previous owner of the certificate.</p>
    #[doc(hidden)]
    pub previous_owned_by: std::option::Option<std::string::String>,
    /// <p>The date and time the certificate was created.</p>
    #[doc(hidden)]
    pub creation_date: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The date and time the certificate was last modified.</p>
    #[doc(hidden)]
    pub last_modified_date: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The customer version of the certificate.</p>
    #[doc(hidden)]
    pub customer_version: std::option::Option<i32>,
    /// <p>The transfer data.</p>
    #[doc(hidden)]
    pub transfer_data: std::option::Option<crate::types::TransferData>,
    /// <p>The generation ID of the certificate.</p>
    #[doc(hidden)]
    pub generation_id: std::option::Option<std::string::String>,
    /// <p>When the certificate is valid.</p>
    #[doc(hidden)]
    pub validity: std::option::Option<crate::types::CertificateValidity>,
    /// <p>The mode of the certificate.</p>
    /// <p> <code>DEFAULT</code>: A certificate in <code>DEFAULT</code> mode is either generated by Amazon Web Services IoT Core or registered with an issuer certificate authority (CA) in <code>DEFAULT</code> mode. Devices with certificates in <code>DEFAULT</code> mode aren't required to send the Server Name Indication (SNI) extension when connecting to Amazon Web Services IoT Core. However, to use features such as custom domains and VPC endpoints, we recommend that you use the SNI extension when connecting to Amazon Web Services IoT Core.</p>
    /// <p> <code>SNI_ONLY</code>: A certificate in <code>SNI_ONLY</code> mode is registered without an issuer CA. Devices with certificates in <code>SNI_ONLY</code> mode must send the SNI extension when connecting to Amazon Web Services IoT Core. </p>
    /// <p>For more information about the value for SNI extension, see <a href="https://docs.aws.amazon.com/iot/latest/developerguide/transport-security.html">Transport security in IoT</a>.</p>
    #[doc(hidden)]
    pub certificate_mode: std::option::Option<crate::types::CertificateMode>,
}
impl CertificateDescription {
    /// <p>The ARN of the certificate.</p>
    pub fn certificate_arn(&self) -> std::option::Option<&str> {
        self.certificate_arn.as_deref()
    }
    /// <p>The ID of the certificate.</p>
    pub fn certificate_id(&self) -> std::option::Option<&str> {
        self.certificate_id.as_deref()
    }
    /// <p>The certificate ID of the CA certificate used to sign this certificate.</p>
    pub fn ca_certificate_id(&self) -> std::option::Option<&str> {
        self.ca_certificate_id.as_deref()
    }
    /// <p>The status of the certificate.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::CertificateStatus> {
        self.status.as_ref()
    }
    /// <p>The certificate data, in PEM format.</p>
    pub fn certificate_pem(&self) -> std::option::Option<&str> {
        self.certificate_pem.as_deref()
    }
    /// <p>The ID of the Amazon Web Services account that owns the certificate.</p>
    pub fn owned_by(&self) -> std::option::Option<&str> {
        self.owned_by.as_deref()
    }
    /// <p>The ID of the Amazon Web Services account of the previous owner of the certificate.</p>
    pub fn previous_owned_by(&self) -> std::option::Option<&str> {
        self.previous_owned_by.as_deref()
    }
    /// <p>The date and time the certificate was created.</p>
    pub fn creation_date(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_date.as_ref()
    }
    /// <p>The date and time the certificate was last modified.</p>
    pub fn last_modified_date(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_modified_date.as_ref()
    }
    /// <p>The customer version of the certificate.</p>
    pub fn customer_version(&self) -> std::option::Option<i32> {
        self.customer_version
    }
    /// <p>The transfer data.</p>
    pub fn transfer_data(&self) -> std::option::Option<&crate::types::TransferData> {
        self.transfer_data.as_ref()
    }
    /// <p>The generation ID of the certificate.</p>
    pub fn generation_id(&self) -> std::option::Option<&str> {
        self.generation_id.as_deref()
    }
    /// <p>When the certificate is valid.</p>
    pub fn validity(&self) -> std::option::Option<&crate::types::CertificateValidity> {
        self.validity.as_ref()
    }
    /// <p>The mode of the certificate.</p>
    /// <p> <code>DEFAULT</code>: A certificate in <code>DEFAULT</code> mode is either generated by Amazon Web Services IoT Core or registered with an issuer certificate authority (CA) in <code>DEFAULT</code> mode. Devices with certificates in <code>DEFAULT</code> mode aren't required to send the Server Name Indication (SNI) extension when connecting to Amazon Web Services IoT Core. However, to use features such as custom domains and VPC endpoints, we recommend that you use the SNI extension when connecting to Amazon Web Services IoT Core.</p>
    /// <p> <code>SNI_ONLY</code>: A certificate in <code>SNI_ONLY</code> mode is registered without an issuer CA. Devices with certificates in <code>SNI_ONLY</code> mode must send the SNI extension when connecting to Amazon Web Services IoT Core. </p>
    /// <p>For more information about the value for SNI extension, see <a href="https://docs.aws.amazon.com/iot/latest/developerguide/transport-security.html">Transport security in IoT</a>.</p>
    pub fn certificate_mode(&self) -> std::option::Option<&crate::types::CertificateMode> {
        self.certificate_mode.as_ref()
    }
}
impl CertificateDescription {
    /// Creates a new builder-style object to manufacture [`CertificateDescription`](crate::types::CertificateDescription).
    pub fn builder() -> crate::types::builders::CertificateDescriptionBuilder {
        crate::types::builders::CertificateDescriptionBuilder::default()
    }
}

/// A builder for [`CertificateDescription`](crate::types::CertificateDescription).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CertificateDescriptionBuilder {
    pub(crate) certificate_arn: std::option::Option<std::string::String>,
    pub(crate) certificate_id: std::option::Option<std::string::String>,
    pub(crate) ca_certificate_id: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<crate::types::CertificateStatus>,
    pub(crate) certificate_pem: std::option::Option<std::string::String>,
    pub(crate) owned_by: std::option::Option<std::string::String>,
    pub(crate) previous_owned_by: std::option::Option<std::string::String>,
    pub(crate) creation_date: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) last_modified_date: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) customer_version: std::option::Option<i32>,
    pub(crate) transfer_data: std::option::Option<crate::types::TransferData>,
    pub(crate) generation_id: std::option::Option<std::string::String>,
    pub(crate) validity: std::option::Option<crate::types::CertificateValidity>,
    pub(crate) certificate_mode: std::option::Option<crate::types::CertificateMode>,
}
impl CertificateDescriptionBuilder {
    /// <p>The ARN of the certificate.</p>
    pub fn certificate_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.certificate_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the certificate.</p>
    pub fn set_certificate_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.certificate_arn = input;
        self
    }
    /// <p>The ID of the certificate.</p>
    pub fn certificate_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.certificate_id = Some(input.into());
        self
    }
    /// <p>The ID of the certificate.</p>
    pub fn set_certificate_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.certificate_id = input;
        self
    }
    /// <p>The certificate ID of the CA certificate used to sign this certificate.</p>
    pub fn ca_certificate_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.ca_certificate_id = Some(input.into());
        self
    }
    /// <p>The certificate ID of the CA certificate used to sign this certificate.</p>
    pub fn set_ca_certificate_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.ca_certificate_id = input;
        self
    }
    /// <p>The status of the certificate.</p>
    pub fn status(mut self, input: crate::types::CertificateStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The status of the certificate.</p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::CertificateStatus>,
    ) -> Self {
        self.status = input;
        self
    }
    /// <p>The certificate data, in PEM format.</p>
    pub fn certificate_pem(mut self, input: impl Into<std::string::String>) -> Self {
        self.certificate_pem = Some(input.into());
        self
    }
    /// <p>The certificate data, in PEM format.</p>
    pub fn set_certificate_pem(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.certificate_pem = input;
        self
    }
    /// <p>The ID of the Amazon Web Services account that owns the certificate.</p>
    pub fn owned_by(mut self, input: impl Into<std::string::String>) -> Self {
        self.owned_by = Some(input.into());
        self
    }
    /// <p>The ID of the Amazon Web Services account that owns the certificate.</p>
    pub fn set_owned_by(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.owned_by = input;
        self
    }
    /// <p>The ID of the Amazon Web Services account of the previous owner of the certificate.</p>
    pub fn previous_owned_by(mut self, input: impl Into<std::string::String>) -> Self {
        self.previous_owned_by = Some(input.into());
        self
    }
    /// <p>The ID of the Amazon Web Services account of the previous owner of the certificate.</p>
    pub fn set_previous_owned_by(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.previous_owned_by = input;
        self
    }
    /// <p>The date and time the certificate was created.</p>
    pub fn creation_date(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.creation_date = Some(input);
        self
    }
    /// <p>The date and time the certificate was created.</p>
    pub fn set_creation_date(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.creation_date = input;
        self
    }
    /// <p>The date and time the certificate was last modified.</p>
    pub fn last_modified_date(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_modified_date = Some(input);
        self
    }
    /// <p>The date and time the certificate was last modified.</p>
    pub fn set_last_modified_date(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_modified_date = input;
        self
    }
    /// <p>The customer version of the certificate.</p>
    pub fn customer_version(mut self, input: i32) -> Self {
        self.customer_version = Some(input);
        self
    }
    /// <p>The customer version of the certificate.</p>
    pub fn set_customer_version(mut self, input: std::option::Option<i32>) -> Self {
        self.customer_version = input;
        self
    }
    /// <p>The transfer data.</p>
    pub fn transfer_data(mut self, input: crate::types::TransferData) -> Self {
        self.transfer_data = Some(input);
        self
    }
    /// <p>The transfer data.</p>
    pub fn set_transfer_data(
        mut self,
        input: std::option::Option<crate::types::TransferData>,
    ) -> Self {
        self.transfer_data = input;
        self
    }
    /// <p>The generation ID of the certificate.</p>
    pub fn generation_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.generation_id = Some(input.into());
        self
    }
    /// <p>The generation ID of the certificate.</p>
    pub fn set_generation_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.generation_id = input;
        self
    }
    /// <p>When the certificate is valid.</p>
    pub fn validity(mut self, input: crate::types::CertificateValidity) -> Self {
        self.validity = Some(input);
        self
    }
    /// <p>When the certificate is valid.</p>
    pub fn set_validity(
        mut self,
        input: std::option::Option<crate::types::CertificateValidity>,
    ) -> Self {
        self.validity = input;
        self
    }
    /// <p>The mode of the certificate.</p>
    /// <p> <code>DEFAULT</code>: A certificate in <code>DEFAULT</code> mode is either generated by Amazon Web Services IoT Core or registered with an issuer certificate authority (CA) in <code>DEFAULT</code> mode. Devices with certificates in <code>DEFAULT</code> mode aren't required to send the Server Name Indication (SNI) extension when connecting to Amazon Web Services IoT Core. However, to use features such as custom domains and VPC endpoints, we recommend that you use the SNI extension when connecting to Amazon Web Services IoT Core.</p>
    /// <p> <code>SNI_ONLY</code>: A certificate in <code>SNI_ONLY</code> mode is registered without an issuer CA. Devices with certificates in <code>SNI_ONLY</code> mode must send the SNI extension when connecting to Amazon Web Services IoT Core. </p>
    /// <p>For more information about the value for SNI extension, see <a href="https://docs.aws.amazon.com/iot/latest/developerguide/transport-security.html">Transport security in IoT</a>.</p>
    pub fn certificate_mode(mut self, input: crate::types::CertificateMode) -> Self {
        self.certificate_mode = Some(input);
        self
    }
    /// <p>The mode of the certificate.</p>
    /// <p> <code>DEFAULT</code>: A certificate in <code>DEFAULT</code> mode is either generated by Amazon Web Services IoT Core or registered with an issuer certificate authority (CA) in <code>DEFAULT</code> mode. Devices with certificates in <code>DEFAULT</code> mode aren't required to send the Server Name Indication (SNI) extension when connecting to Amazon Web Services IoT Core. However, to use features such as custom domains and VPC endpoints, we recommend that you use the SNI extension when connecting to Amazon Web Services IoT Core.</p>
    /// <p> <code>SNI_ONLY</code>: A certificate in <code>SNI_ONLY</code> mode is registered without an issuer CA. Devices with certificates in <code>SNI_ONLY</code> mode must send the SNI extension when connecting to Amazon Web Services IoT Core. </p>
    /// <p>For more information about the value for SNI extension, see <a href="https://docs.aws.amazon.com/iot/latest/developerguide/transport-security.html">Transport security in IoT</a>.</p>
    pub fn set_certificate_mode(
        mut self,
        input: std::option::Option<crate::types::CertificateMode>,
    ) -> Self {
        self.certificate_mode = input;
        self
    }
    /// Consumes the builder and constructs a [`CertificateDescription`](crate::types::CertificateDescription).
    pub fn build(self) -> crate::types::CertificateDescription {
        crate::types::CertificateDescription {
            certificate_arn: self.certificate_arn,
            certificate_id: self.certificate_id,
            ca_certificate_id: self.ca_certificate_id,
            status: self.status,
            certificate_pem: self.certificate_pem,
            owned_by: self.owned_by,
            previous_owned_by: self.previous_owned_by,
            creation_date: self.creation_date,
            last_modified_date: self.last_modified_date,
            customer_version: self.customer_version,
            transfer_data: self.transfer_data,
            generation_id: self.generation_id,
            validity: self.validity,
            certificate_mode: self.certificate_mode,
        }
    }
}
