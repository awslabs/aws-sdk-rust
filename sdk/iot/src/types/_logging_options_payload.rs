// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the logging options payload.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct LoggingOptionsPayload {
    /// <p>The ARN of the IAM role that grants access.</p>
    #[doc(hidden)]
    pub role_arn: std::option::Option<std::string::String>,
    /// <p>The log level.</p>
    #[doc(hidden)]
    pub log_level: std::option::Option<crate::types::LogLevel>,
}
impl LoggingOptionsPayload {
    /// <p>The ARN of the IAM role that grants access.</p>
    pub fn role_arn(&self) -> std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>The log level.</p>
    pub fn log_level(&self) -> std::option::Option<&crate::types::LogLevel> {
        self.log_level.as_ref()
    }
}
impl LoggingOptionsPayload {
    /// Creates a new builder-style object to manufacture [`LoggingOptionsPayload`](crate::types::LoggingOptionsPayload).
    pub fn builder() -> crate::types::builders::LoggingOptionsPayloadBuilder {
        crate::types::builders::LoggingOptionsPayloadBuilder::default()
    }
}

/// A builder for [`LoggingOptionsPayload`](crate::types::LoggingOptionsPayload).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct LoggingOptionsPayloadBuilder {
    pub(crate) role_arn: std::option::Option<std::string::String>,
    pub(crate) log_level: std::option::Option<crate::types::LogLevel>,
}
impl LoggingOptionsPayloadBuilder {
    /// <p>The ARN of the IAM role that grants access.</p>
    pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.role_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the IAM role that grants access.</p>
    pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The log level.</p>
    pub fn log_level(mut self, input: crate::types::LogLevel) -> Self {
        self.log_level = Some(input);
        self
    }
    /// <p>The log level.</p>
    pub fn set_log_level(mut self, input: std::option::Option<crate::types::LogLevel>) -> Self {
        self.log_level = input;
        self
    }
    /// Consumes the builder and constructs a [`LoggingOptionsPayload`](crate::types::LoggingOptionsPayload).
    pub fn build(self) -> crate::types::LoggingOptionsPayload {
        crate::types::LoggingOptionsPayload {
            role_arn: self.role_arn,
            log_level: self.log_level,
        }
    }
}
