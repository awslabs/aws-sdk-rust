// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Statistics for the checks performed during the audit.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TaskStatistics {
    /// <p>The number of checks in this audit.</p>
    #[doc(hidden)]
    pub total_checks: std::option::Option<i32>,
    /// <p>The number of checks in progress.</p>
    #[doc(hidden)]
    pub in_progress_checks: std::option::Option<i32>,
    /// <p>The number of checks waiting for data collection.</p>
    #[doc(hidden)]
    pub waiting_for_data_collection_checks: std::option::Option<i32>,
    /// <p>The number of checks that found compliant resources.</p>
    #[doc(hidden)]
    pub compliant_checks: std::option::Option<i32>,
    /// <p>The number of checks that found noncompliant resources.</p>
    #[doc(hidden)]
    pub non_compliant_checks: std::option::Option<i32>,
    /// <p>The number of checks.</p>
    #[doc(hidden)]
    pub failed_checks: std::option::Option<i32>,
    /// <p>The number of checks that did not run because the audit was canceled.</p>
    #[doc(hidden)]
    pub canceled_checks: std::option::Option<i32>,
}
impl TaskStatistics {
    /// <p>The number of checks in this audit.</p>
    pub fn total_checks(&self) -> std::option::Option<i32> {
        self.total_checks
    }
    /// <p>The number of checks in progress.</p>
    pub fn in_progress_checks(&self) -> std::option::Option<i32> {
        self.in_progress_checks
    }
    /// <p>The number of checks waiting for data collection.</p>
    pub fn waiting_for_data_collection_checks(&self) -> std::option::Option<i32> {
        self.waiting_for_data_collection_checks
    }
    /// <p>The number of checks that found compliant resources.</p>
    pub fn compliant_checks(&self) -> std::option::Option<i32> {
        self.compliant_checks
    }
    /// <p>The number of checks that found noncompliant resources.</p>
    pub fn non_compliant_checks(&self) -> std::option::Option<i32> {
        self.non_compliant_checks
    }
    /// <p>The number of checks.</p>
    pub fn failed_checks(&self) -> std::option::Option<i32> {
        self.failed_checks
    }
    /// <p>The number of checks that did not run because the audit was canceled.</p>
    pub fn canceled_checks(&self) -> std::option::Option<i32> {
        self.canceled_checks
    }
}
impl TaskStatistics {
    /// Creates a new builder-style object to manufacture [`TaskStatistics`](crate::types::TaskStatistics).
    pub fn builder() -> crate::types::builders::TaskStatisticsBuilder {
        crate::types::builders::TaskStatisticsBuilder::default()
    }
}

/// A builder for [`TaskStatistics`](crate::types::TaskStatistics).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TaskStatisticsBuilder {
    pub(crate) total_checks: std::option::Option<i32>,
    pub(crate) in_progress_checks: std::option::Option<i32>,
    pub(crate) waiting_for_data_collection_checks: std::option::Option<i32>,
    pub(crate) compliant_checks: std::option::Option<i32>,
    pub(crate) non_compliant_checks: std::option::Option<i32>,
    pub(crate) failed_checks: std::option::Option<i32>,
    pub(crate) canceled_checks: std::option::Option<i32>,
}
impl TaskStatisticsBuilder {
    /// <p>The number of checks in this audit.</p>
    pub fn total_checks(mut self, input: i32) -> Self {
        self.total_checks = Some(input);
        self
    }
    /// <p>The number of checks in this audit.</p>
    pub fn set_total_checks(mut self, input: std::option::Option<i32>) -> Self {
        self.total_checks = input;
        self
    }
    /// <p>The number of checks in progress.</p>
    pub fn in_progress_checks(mut self, input: i32) -> Self {
        self.in_progress_checks = Some(input);
        self
    }
    /// <p>The number of checks in progress.</p>
    pub fn set_in_progress_checks(mut self, input: std::option::Option<i32>) -> Self {
        self.in_progress_checks = input;
        self
    }
    /// <p>The number of checks waiting for data collection.</p>
    pub fn waiting_for_data_collection_checks(mut self, input: i32) -> Self {
        self.waiting_for_data_collection_checks = Some(input);
        self
    }
    /// <p>The number of checks waiting for data collection.</p>
    pub fn set_waiting_for_data_collection_checks(
        mut self,
        input: std::option::Option<i32>,
    ) -> Self {
        self.waiting_for_data_collection_checks = input;
        self
    }
    /// <p>The number of checks that found compliant resources.</p>
    pub fn compliant_checks(mut self, input: i32) -> Self {
        self.compliant_checks = Some(input);
        self
    }
    /// <p>The number of checks that found compliant resources.</p>
    pub fn set_compliant_checks(mut self, input: std::option::Option<i32>) -> Self {
        self.compliant_checks = input;
        self
    }
    /// <p>The number of checks that found noncompliant resources.</p>
    pub fn non_compliant_checks(mut self, input: i32) -> Self {
        self.non_compliant_checks = Some(input);
        self
    }
    /// <p>The number of checks that found noncompliant resources.</p>
    pub fn set_non_compliant_checks(mut self, input: std::option::Option<i32>) -> Self {
        self.non_compliant_checks = input;
        self
    }
    /// <p>The number of checks.</p>
    pub fn failed_checks(mut self, input: i32) -> Self {
        self.failed_checks = Some(input);
        self
    }
    /// <p>The number of checks.</p>
    pub fn set_failed_checks(mut self, input: std::option::Option<i32>) -> Self {
        self.failed_checks = input;
        self
    }
    /// <p>The number of checks that did not run because the audit was canceled.</p>
    pub fn canceled_checks(mut self, input: i32) -> Self {
        self.canceled_checks = Some(input);
        self
    }
    /// <p>The number of checks that did not run because the audit was canceled.</p>
    pub fn set_canceled_checks(mut self, input: std::option::Option<i32>) -> Self {
        self.canceled_checks = input;
        self
    }
    /// Consumes the builder and constructs a [`TaskStatistics`](crate::types::TaskStatistics).
    pub fn build(self) -> crate::types::TaskStatistics {
        crate::types::TaskStatistics {
            total_checks: self.total_checks,
            in_progress_checks: self.in_progress_checks,
            waiting_for_data_collection_checks: self.waiting_for_data_collection_checks,
            compliant_checks: self.compliant_checks,
            non_compliant_checks: self.non_compliant_checks,
            failed_checks: self.failed_checks,
            canceled_checks: self.canceled_checks,
        }
    }
}
