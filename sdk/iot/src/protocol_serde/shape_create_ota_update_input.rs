// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_ota_update_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_ota_update::CreateOtaUpdateInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.additional_parameters {
        #[allow(unused_mut)]
        let mut object_2 = object.key("additionalParameters").start_object();
        for (key_3, value_4) in var_1 {
            {
                object_2.key(key_3.as_str()).string(value_4.as_str());
            }
        }
        object_2.finish();
    }
    if let Some(var_5) = &input.aws_job_abort_config {
        #[allow(unused_mut)]
        let mut object_6 = object.key("awsJobAbortConfig").start_object();
        crate::protocol_serde::shape_aws_job_abort_config::ser_aws_job_abort_config(
            &mut object_6,
            var_5,
        )?;
        object_6.finish();
    }
    if let Some(var_7) = &input.aws_job_executions_rollout_config {
        #[allow(unused_mut)]
        let mut object_8 = object.key("awsJobExecutionsRolloutConfig").start_object();
        crate::protocol_serde::shape_aws_job_executions_rollout_config::ser_aws_job_executions_rollout_config(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.aws_job_presigned_url_config {
        #[allow(unused_mut)]
        let mut object_10 = object.key("awsJobPresignedUrlConfig").start_object();
        crate::protocol_serde::shape_aws_job_presigned_url_config::ser_aws_job_presigned_url_config(&mut object_10, var_9)?;
        object_10.finish();
    }
    if let Some(var_11) = &input.aws_job_timeout_config {
        #[allow(unused_mut)]
        let mut object_12 = object.key("awsJobTimeoutConfig").start_object();
        crate::protocol_serde::shape_aws_job_timeout_config::ser_aws_job_timeout_config(
            &mut object_12,
            var_11,
        )?;
        object_12.finish();
    }
    if let Some(var_13) = &input.description {
        object.key("description").string(var_13.as_str());
    }
    if let Some(var_14) = &input.files {
        let mut array_15 = object.key("files").start_array();
        for item_16 in var_14 {
            {
                #[allow(unused_mut)]
                let mut object_17 = array_15.value().start_object();
                crate::protocol_serde::shape_ota_update_file::ser_ota_update_file(
                    &mut object_17,
                    item_16,
                )?;
                object_17.finish();
            }
        }
        array_15.finish();
    }
    if let Some(var_18) = &input.protocols {
        let mut array_19 = object.key("protocols").start_array();
        for item_20 in var_18 {
            {
                array_19.value().string(item_20.as_str());
            }
        }
        array_19.finish();
    }
    if let Some(var_21) = &input.role_arn {
        object.key("roleArn").string(var_21.as_str());
    }
    if let Some(var_22) = &input.tags {
        let mut array_23 = object.key("tags").start_array();
        for item_24 in var_22 {
            {
                #[allow(unused_mut)]
                let mut object_25 = array_23.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_25, item_24)?;
                object_25.finish();
            }
        }
        array_23.finish();
    }
    if let Some(var_26) = &input.target_selection {
        object.key("targetSelection").string(var_26.as_str());
    }
    if let Some(var_27) = &input.targets {
        let mut array_28 = object.key("targets").start_array();
        for item_29 in var_27 {
            {
                array_28.value().string(item_29.as_str());
            }
        }
        array_28.finish();
    }
    Ok(())
}
