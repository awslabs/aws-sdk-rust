// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_behavior_criteria(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::BehaviorCriteria,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.comparison_operator {
        object.key("comparisonOperator").string(var_1.as_str());
    }
    if let Some(var_2) = &input.value {
        #[allow(unused_mut)]
        let mut object_3 = object.key("value").start_object();
        crate::protocol_serde::shape_metric_value::ser_metric_value(&mut object_3, var_2)?;
        object_3.finish();
    }
    if let Some(var_4) = &input.duration_seconds {
        object.key("durationSeconds").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_4).into()),
        );
    }
    if let Some(var_5) = &input.consecutive_datapoints_to_alarm {
        object.key("consecutiveDatapointsToAlarm").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_5).into()),
        );
    }
    if let Some(var_6) = &input.consecutive_datapoints_to_clear {
        object.key("consecutiveDatapointsToClear").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_6).into()),
        );
    }
    if let Some(var_7) = &input.statistical_threshold {
        #[allow(unused_mut)]
        let mut object_8 = object.key("statisticalThreshold").start_object();
        crate::protocol_serde::shape_statistical_threshold::ser_statistical_threshold(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.ml_detection_config {
        #[allow(unused_mut)]
        let mut object_10 = object.key("mlDetectionConfig").start_object();
        crate::protocol_serde::shape_machine_learning_detection_config::ser_machine_learning_detection_config(&mut object_10, var_9)?;
        object_10.finish();
    }
    Ok(())
}

pub(crate) fn de_behavior_criteria<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::BehaviorCriteria>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::BehaviorCriteriaBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "comparisonOperator" => {
                            builder = builder.set_comparison_operator(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::ComparisonOperator::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "value" => {
                            builder = builder.set_value(crate::protocol_serde::shape_metric_value::de_metric_value(tokens)?);
                        }
                        "durationSeconds" => {
                            builder = builder.set_duration_seconds(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "consecutiveDatapointsToAlarm" => {
                            builder = builder.set_consecutive_datapoints_to_alarm(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "consecutiveDatapointsToClear" => {
                            builder = builder.set_consecutive_datapoints_to_clear(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "statisticalThreshold" => {
                            builder = builder
                                .set_statistical_threshold(crate::protocol_serde::shape_statistical_threshold::de_statistical_threshold(tokens)?);
                        }
                        "mlDetectionConfig" => {
                            builder = builder.set_ml_detection_config(
                                crate::protocol_serde::shape_machine_learning_detection_config::de_machine_learning_detection_config(tokens)?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
