// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_job::CreateJobInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.abort_config {
        #[allow(unused_mut)]
        let mut object_2 = object.key("abortConfig").start_object();
        crate::protocol_serde::shape_abort_config::ser_abort_config(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.description {
        object.key("description").string(var_3.as_str());
    }
    if let Some(var_4) = &input.document {
        object.key("document").string(var_4.as_str());
    }
    if let Some(var_5) = &input.document_parameters {
        #[allow(unused_mut)]
        let mut object_6 = object.key("documentParameters").start_object();
        for (key_7, value_8) in var_5 {
            {
                object_6.key(key_7.as_str()).string(value_8.as_str());
            }
        }
        object_6.finish();
    }
    if let Some(var_9) = &input.document_source {
        object.key("documentSource").string(var_9.as_str());
    }
    if let Some(var_10) = &input.job_executions_retry_config {
        #[allow(unused_mut)]
        let mut object_11 = object.key("jobExecutionsRetryConfig").start_object();
        crate::protocol_serde::shape_job_executions_retry_config::ser_job_executions_retry_config(
            &mut object_11,
            var_10,
        )?;
        object_11.finish();
    }
    if let Some(var_12) = &input.job_executions_rollout_config {
        #[allow(unused_mut)]
        let mut object_13 = object.key("jobExecutionsRolloutConfig").start_object();
        crate::protocol_serde::shape_job_executions_rollout_config::ser_job_executions_rollout_config(&mut object_13, var_12)?;
        object_13.finish();
    }
    if let Some(var_14) = &input.job_template_arn {
        object.key("jobTemplateArn").string(var_14.as_str());
    }
    if let Some(var_15) = &input.namespace_id {
        object.key("namespaceId").string(var_15.as_str());
    }
    if let Some(var_16) = &input.presigned_url_config {
        #[allow(unused_mut)]
        let mut object_17 = object.key("presignedUrlConfig").start_object();
        crate::protocol_serde::shape_presigned_url_config::ser_presigned_url_config(
            &mut object_17,
            var_16,
        )?;
        object_17.finish();
    }
    if let Some(var_18) = &input.scheduling_config {
        #[allow(unused_mut)]
        let mut object_19 = object.key("schedulingConfig").start_object();
        crate::protocol_serde::shape_scheduling_config::ser_scheduling_config(
            &mut object_19,
            var_18,
        )?;
        object_19.finish();
    }
    if let Some(var_20) = &input.tags {
        let mut array_21 = object.key("tags").start_array();
        for item_22 in var_20 {
            {
                #[allow(unused_mut)]
                let mut object_23 = array_21.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_23, item_22)?;
                object_23.finish();
            }
        }
        array_21.finish();
    }
    if let Some(var_24) = &input.target_selection {
        object.key("targetSelection").string(var_24.as_str());
    }
    if let Some(var_25) = &input.targets {
        let mut array_26 = object.key("targets").start_array();
        for item_27 in var_25 {
            {
                array_26.value().string(item_27.as_str());
            }
        }
        array_26.finish();
    }
    if let Some(var_28) = &input.timeout_config {
        #[allow(unused_mut)]
        let mut object_29 = object.key("timeoutConfig").start_object();
        crate::protocol_serde::shape_timeout_config::ser_timeout_config(&mut object_29, var_28)?;
        object_29.finish();
    }
    Ok(())
}
