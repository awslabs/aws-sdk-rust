// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_job_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_job::CreateJobInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.abort_config {
        #[allow(unused_mut)]
        let mut object_2 = object.key("abortConfig").start_object();
        crate::protocol_serde::shape_abort_config::ser_abort_config(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.description {
        object.key("description").string(var_3.as_str());
    }
    if let Some(var_4) = &input.destination_package_versions {
        let mut array_5 = object.key("destinationPackageVersions").start_array();
        for item_6 in var_4 {
            {
                array_5.value().string(item_6.as_str());
            }
        }
        array_5.finish();
    }
    if let Some(var_7) = &input.document {
        object.key("document").string(var_7.as_str());
    }
    if let Some(var_8) = &input.document_parameters {
        #[allow(unused_mut)]
        let mut object_9 = object.key("documentParameters").start_object();
        for (key_10, value_11) in var_8 {
            {
                object_9.key(key_10.as_str()).string(value_11.as_str());
            }
        }
        object_9.finish();
    }
    if let Some(var_12) = &input.document_source {
        object.key("documentSource").string(var_12.as_str());
    }
    if let Some(var_13) = &input.job_executions_retry_config {
        #[allow(unused_mut)]
        let mut object_14 = object.key("jobExecutionsRetryConfig").start_object();
        crate::protocol_serde::shape_job_executions_retry_config::ser_job_executions_retry_config(&mut object_14, var_13)?;
        object_14.finish();
    }
    if let Some(var_15) = &input.job_executions_rollout_config {
        #[allow(unused_mut)]
        let mut object_16 = object.key("jobExecutionsRolloutConfig").start_object();
        crate::protocol_serde::shape_job_executions_rollout_config::ser_job_executions_rollout_config(&mut object_16, var_15)?;
        object_16.finish();
    }
    if let Some(var_17) = &input.job_template_arn {
        object.key("jobTemplateArn").string(var_17.as_str());
    }
    if let Some(var_18) = &input.namespace_id {
        object.key("namespaceId").string(var_18.as_str());
    }
    if let Some(var_19) = &input.presigned_url_config {
        #[allow(unused_mut)]
        let mut object_20 = object.key("presignedUrlConfig").start_object();
        crate::protocol_serde::shape_presigned_url_config::ser_presigned_url_config(&mut object_20, var_19)?;
        object_20.finish();
    }
    if let Some(var_21) = &input.scheduling_config {
        #[allow(unused_mut)]
        let mut object_22 = object.key("schedulingConfig").start_object();
        crate::protocol_serde::shape_scheduling_config::ser_scheduling_config(&mut object_22, var_21)?;
        object_22.finish();
    }
    if let Some(var_23) = &input.tags {
        let mut array_24 = object.key("tags").start_array();
        for item_25 in var_23 {
            {
                #[allow(unused_mut)]
                let mut object_26 = array_24.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_26, item_25)?;
                object_26.finish();
            }
        }
        array_24.finish();
    }
    if let Some(var_27) = &input.target_selection {
        object.key("targetSelection").string(var_27.as_str());
    }
    if let Some(var_28) = &input.targets {
        let mut array_29 = object.key("targets").start_array();
        for item_30 in var_28 {
            {
                array_29.value().string(item_30.as_str());
            }
        }
        array_29.finish();
    }
    if let Some(var_31) = &input.timeout_config {
        #[allow(unused_mut)]
        let mut object_32 = object.key("timeoutConfig").start_object();
        crate::protocol_serde::shape_timeout_config::ser_timeout_config(&mut object_32, var_31)?;
        object_32.finish();
    }
    Ok(())
}
