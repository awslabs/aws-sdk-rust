// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_authorizer_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_authorizer::CreateAuthorizerInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.authorizer_function_arn {
        object.key("authorizerFunctionArn").string(var_1.as_str());
    }
    if let Some(var_2) = &input.enable_caching_for_http {
        object.key("enableCachingForHttp").boolean(*var_2);
    }
    if let Some(var_3) = &input.signing_disabled {
        object.key("signingDisabled").boolean(*var_3);
    }
    if let Some(var_4) = &input.status {
        object.key("status").string(var_4.as_str());
    }
    if let Some(var_5) = &input.tags {
        let mut array_6 = object.key("tags").start_array();
        for item_7 in var_5 {
            {
                #[allow(unused_mut)]
                let mut object_8 = array_6.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_8, item_7)?;
                object_8.finish();
            }
        }
        array_6.finish();
    }
    if let Some(var_9) = &input.token_key_name {
        object.key("tokenKeyName").string(var_9.as_str());
    }
    if let Some(var_10) = &input.token_signing_public_keys {
        #[allow(unused_mut)]
        let mut object_11 = object.key("tokenSigningPublicKeys").start_object();
        for (key_12, value_13) in var_10 {
            {
                object_11.key(key_12.as_str()).string(value_13.as_str());
            }
        }
        object_11.finish();
    }
    Ok(())
}
