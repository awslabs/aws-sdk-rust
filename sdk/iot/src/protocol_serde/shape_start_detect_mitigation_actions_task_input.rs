// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_start_detect_mitigation_actions_task_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::start_detect_mitigation_actions_task::StartDetectMitigationActionsTaskInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.actions {
        let mut array_2 = object.key("actions").start_array();
        for item_3 in var_1 {
            {
                array_2.value().string(item_3.as_str());
            }
        }
        array_2.finish();
    }
    if let Some(var_4) = &input.client_request_token {
        object.key("clientRequestToken").string(var_4.as_str());
    }
    if let Some(var_5) = &input.include_only_active_violations {
        object.key("includeOnlyActiveViolations").boolean(*var_5);
    }
    if let Some(var_6) = &input.include_suppressed_alerts {
        object.key("includeSuppressedAlerts").boolean(*var_6);
    }
    if let Some(var_7) = &input.target {
        #[allow(unused_mut)]
        let mut object_8 = object.key("target").start_object();
        crate::protocol_serde::shape_detect_mitigation_actions_task_target::ser_detect_mitigation_actions_task_target(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.violation_event_occurrence_range {
        #[allow(unused_mut)]
        let mut object_10 = object.key("violationEventOccurrenceRange").start_object();
        crate::protocol_serde::shape_violation_event_occurrence_range::ser_violation_event_occurrence_range(&mut object_10, var_9)?;
        object_10.finish();
    }
    Ok(())
}
