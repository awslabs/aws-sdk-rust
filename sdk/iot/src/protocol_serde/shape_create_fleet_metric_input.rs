// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_fleet_metric_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_fleet_metric::CreateFleetMetricInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.aggregation_field {
        object.key("aggregationField").string(var_1.as_str());
    }
    if let Some(var_2) = &input.aggregation_type {
        #[allow(unused_mut)]
        let mut object_3 = object.key("aggregationType").start_object();
        crate::protocol_serde::shape_aggregation_type::ser_aggregation_type(&mut object_3, var_2)?;
        object_3.finish();
    }
    if let Some(var_4) = &input.description {
        object.key("description").string(var_4.as_str());
    }
    if let Some(var_5) = &input.index_name {
        object.key("indexName").string(var_5.as_str());
    }
    if let Some(var_6) = &input.period {
        object.key("period").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_6).into()),
        );
    }
    if let Some(var_7) = &input.query_string {
        object.key("queryString").string(var_7.as_str());
    }
    if let Some(var_8) = &input.query_version {
        object.key("queryVersion").string(var_8.as_str());
    }
    if let Some(var_9) = &input.tags {
        let mut array_10 = object.key("tags").start_array();
        for item_11 in var_9 {
            {
                #[allow(unused_mut)]
                let mut object_12 = array_10.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_12, item_11)?;
                object_12.finish();
            }
        }
        array_10.finish();
    }
    if let Some(var_13) = &input.unit {
        object.key("unit").string(var_13.as_str());
    }
    Ok(())
}
