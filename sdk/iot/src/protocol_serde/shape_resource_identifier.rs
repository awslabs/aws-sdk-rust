// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_resource_identifier(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::ResourceIdentifier,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.device_certificate_id {
        object.key("deviceCertificateId").string(var_1.as_str());
    }
    if let Some(var_2) = &input.ca_certificate_id {
        object.key("caCertificateId").string(var_2.as_str());
    }
    if let Some(var_3) = &input.cognito_identity_pool_id {
        object.key("cognitoIdentityPoolId").string(var_3.as_str());
    }
    if let Some(var_4) = &input.client_id {
        object.key("clientId").string(var_4.as_str());
    }
    if let Some(var_5) = &input.policy_version_identifier {
        #[allow(unused_mut)]
        let mut object_6 = object.key("policyVersionIdentifier").start_object();
        crate::protocol_serde::shape_policy_version_identifier::ser_policy_version_identifier(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.account {
        object.key("account").string(var_7.as_str());
    }
    if let Some(var_8) = &input.iam_role_arn {
        object.key("iamRoleArn").string(var_8.as_str());
    }
    if let Some(var_9) = &input.role_alias_arn {
        object.key("roleAliasArn").string(var_9.as_str());
    }
    if let Some(var_10) = &input.issuer_certificate_identifier {
        #[allow(unused_mut)]
        let mut object_11 = object.key("issuerCertificateIdentifier").start_object();
        crate::protocol_serde::shape_issuer_certificate_identifier::ser_issuer_certificate_identifier(&mut object_11, var_10)?;
        object_11.finish();
    }
    if let Some(var_12) = &input.device_certificate_arn {
        object.key("deviceCertificateArn").string(var_12.as_str());
    }
    Ok(())
}

pub(crate) fn de_resource_identifier<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::ResourceIdentifier>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::ResourceIdentifierBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "deviceCertificateId" => {
                            builder = builder.set_device_certificate_id(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "caCertificateId" => {
                            builder = builder.set_ca_certificate_id(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "cognitoIdentityPoolId" => {
                            builder = builder.set_cognito_identity_pool_id(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "clientId" => {
                            builder = builder.set_client_id(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "policyVersionIdentifier" => {
                            builder = builder.set_policy_version_identifier(
                                crate::protocol_serde::shape_policy_version_identifier::de_policy_version_identifier(tokens)?,
                            );
                        }
                        "account" => {
                            builder = builder.set_account(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "iamRoleArn" => {
                            builder = builder.set_iam_role_arn(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "roleAliasArn" => {
                            builder = builder.set_role_alias_arn(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "issuerCertificateIdentifier" => {
                            builder = builder.set_issuer_certificate_identifier(
                                crate::protocol_serde::shape_issuer_certificate_identifier::de_issuer_certificate_identifier(tokens)?,
                            );
                        }
                        "deviceCertificateArn" => {
                            builder = builder.set_device_certificate_arn(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
