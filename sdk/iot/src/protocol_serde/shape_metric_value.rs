// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn de_metric_value<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<Option<crate::types::MetricValue>, aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::MetricValueBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "count" => {
                                builder = builder.set_count(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i64::try_from)
                                    .transpose()?,
                                );
                            }
                            "cidrs" => {
                                builder = builder.set_cidrs(
                                    crate::protocol_serde::shape_cidrs::de_cidrs(tokens)?,
                                );
                            }
                            "ports" => {
                                builder = builder.set_ports(
                                    crate::protocol_serde::shape_ports::de_ports(tokens)?,
                                );
                            }
                            "number" => {
                                builder = builder.set_number(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|v| v.to_f64_lossy()),
                                );
                            }
                            "numbers" => {
                                builder = builder.set_numbers(
                                    crate::protocol_serde::shape_number_list::de_number_list(
                                        tokens,
                                    )?,
                                );
                            }
                            "strings" => {
                                builder = builder.set_strings(
                                    crate::protocol_serde::shape_string_list::de_string_list(
                                        tokens,
                                    )?,
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}

pub fn ser_metric_value(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::MetricValue,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.count {
        object.key("count").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1).into()),
        );
    }
    if let Some(var_2) = &input.cidrs {
        let mut array_3 = object.key("cidrs").start_array();
        for item_4 in var_2 {
            {
                array_3.value().string(item_4.as_str());
            }
        }
        array_3.finish();
    }
    if let Some(var_5) = &input.ports {
        let mut array_6 = object.key("ports").start_array();
        for item_7 in var_5 {
            {
                array_6.value().number(
                    #[allow(clippy::useless_conversion)]
                    aws_smithy_types::Number::NegInt((*item_7).into()),
                );
            }
        }
        array_6.finish();
    }
    if let Some(var_8) = &input.number {
        object.key("number").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_8).into()),
        );
    }
    if let Some(var_9) = &input.numbers {
        let mut array_10 = object.key("numbers").start_array();
        for item_11 in var_9 {
            {
                array_10.value().number(
                    #[allow(clippy::useless_conversion)]
                    aws_smithy_types::Number::Float((*item_11).into()),
                );
            }
        }
        array_10.finish();
    }
    if let Some(var_12) = &input.strings {
        let mut array_13 = object.key("strings").start_array();
        for item_14 in var_12 {
            {
                array_13.value().string(item_14.as_str());
            }
        }
        array_13.finish();
    }
    Ok(())
}
