// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_job_template_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_job_template::CreateJobTemplateInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.abort_config {
        #[allow(unused_mut)]
        let mut object_2 = object.key("abortConfig").start_object();
        crate::protocol_serde::shape_abort_config::ser_abort_config(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.description {
        object.key("description").string(var_3.as_str());
    }
    if let Some(var_4) = &input.destination_package_versions {
        let mut array_5 = object.key("destinationPackageVersions").start_array();
        for item_6 in var_4 {
            {
                array_5.value().string(item_6.as_str());
            }
        }
        array_5.finish();
    }
    if let Some(var_7) = &input.document {
        object.key("document").string(var_7.as_str());
    }
    if let Some(var_8) = &input.document_source {
        object.key("documentSource").string(var_8.as_str());
    }
    if let Some(var_9) = &input.job_arn {
        object.key("jobArn").string(var_9.as_str());
    }
    if let Some(var_10) = &input.job_executions_retry_config {
        #[allow(unused_mut)]
        let mut object_11 = object.key("jobExecutionsRetryConfig").start_object();
        crate::protocol_serde::shape_job_executions_retry_config::ser_job_executions_retry_config(&mut object_11, var_10)?;
        object_11.finish();
    }
    if let Some(var_12) = &input.job_executions_rollout_config {
        #[allow(unused_mut)]
        let mut object_13 = object.key("jobExecutionsRolloutConfig").start_object();
        crate::protocol_serde::shape_job_executions_rollout_config::ser_job_executions_rollout_config(&mut object_13, var_12)?;
        object_13.finish();
    }
    if let Some(var_14) = &input.maintenance_windows {
        let mut array_15 = object.key("maintenanceWindows").start_array();
        for item_16 in var_14 {
            {
                #[allow(unused_mut)]
                let mut object_17 = array_15.value().start_object();
                crate::protocol_serde::shape_maintenance_window::ser_maintenance_window(&mut object_17, item_16)?;
                object_17.finish();
            }
        }
        array_15.finish();
    }
    if let Some(var_18) = &input.presigned_url_config {
        #[allow(unused_mut)]
        let mut object_19 = object.key("presignedUrlConfig").start_object();
        crate::protocol_serde::shape_presigned_url_config::ser_presigned_url_config(&mut object_19, var_18)?;
        object_19.finish();
    }
    if let Some(var_20) = &input.tags {
        let mut array_21 = object.key("tags").start_array();
        for item_22 in var_20 {
            {
                #[allow(unused_mut)]
                let mut object_23 = array_21.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_23, item_22)?;
                object_23.finish();
            }
        }
        array_21.finish();
    }
    if let Some(var_24) = &input.timeout_config {
        #[allow(unused_mut)]
        let mut object_25 = object.key("timeoutConfig").start_object();
        crate::protocol_serde::shape_timeout_config::ser_timeout_config(&mut object_25, var_24)?;
        object_25.finish();
    }
    Ok(())
}
