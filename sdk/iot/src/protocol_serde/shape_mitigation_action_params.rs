// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_mitigation_action_params(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::MitigationActionParams,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.update_device_certificate_params {
        #[allow(unused_mut)]
        let mut object_2 = object.key("updateDeviceCertificateParams").start_object();
        crate::protocol_serde::shape_update_device_certificate_params::ser_update_device_certificate_params(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.update_ca_certificate_params {
        #[allow(unused_mut)]
        let mut object_4 = object.key("updateCACertificateParams").start_object();
        crate::protocol_serde::shape_update_ca_certificate_params::ser_update_ca_certificate_params(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.add_things_to_thing_group_params {
        #[allow(unused_mut)]
        let mut object_6 = object.key("addThingsToThingGroupParams").start_object();
        crate::protocol_serde::shape_add_things_to_thing_group_params::ser_add_things_to_thing_group_params(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.replace_default_policy_version_params {
        #[allow(unused_mut)]
        let mut object_8 = object
            .key("replaceDefaultPolicyVersionParams")
            .start_object();
        crate::protocol_serde::shape_replace_default_policy_version_params::ser_replace_default_policy_version_params(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.enable_io_t_logging_params {
        #[allow(unused_mut)]
        let mut object_10 = object.key("enableIoTLoggingParams").start_object();
        crate::protocol_serde::shape_enable_io_t_logging_params::ser_enable_io_t_logging_params(
            &mut object_10,
            var_9,
        )?;
        object_10.finish();
    }
    if let Some(var_11) = &input.publish_finding_to_sns_params {
        #[allow(unused_mut)]
        let mut object_12 = object.key("publishFindingToSnsParams").start_object();
        crate::protocol_serde::shape_publish_finding_to_sns_params::ser_publish_finding_to_sns_params(&mut object_12, var_11)?;
        object_12.finish();
    }
    Ok(())
}

pub(crate) fn de_mitigation_action_params<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<
    Option<crate::types::MitigationActionParams>,
    aws_smithy_json::deserialize::error::DeserializeError,
>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::MitigationActionParamsBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "updateDeviceCertificateParams" => {
                                builder = builder.set_update_device_certificate_params(
                                    crate::protocol_serde::shape_update_device_certificate_params::de_update_device_certificate_params(tokens)?
                                );
                            }
                            "updateCACertificateParams" => {
                                builder = builder.set_update_ca_certificate_params(
                                    crate::protocol_serde::shape_update_ca_certificate_params::de_update_ca_certificate_params(tokens)?
                                );
                            }
                            "addThingsToThingGroupParams" => {
                                builder = builder.set_add_things_to_thing_group_params(
                                    crate::protocol_serde::shape_add_things_to_thing_group_params::de_add_things_to_thing_group_params(tokens)?
                                );
                            }
                            "replaceDefaultPolicyVersionParams" => {
                                builder = builder.set_replace_default_policy_version_params(
                                    crate::protocol_serde::shape_replace_default_policy_version_params::de_replace_default_policy_version_params(tokens)?
                                );
                            }
                            "enableIoTLoggingParams" => {
                                builder = builder.set_enable_io_t_logging_params(
                                    crate::protocol_serde::shape_enable_io_t_logging_params::de_enable_io_t_logging_params(tokens)?
                                );
                            }
                            "publishFindingToSnsParams" => {
                                builder = builder.set_publish_finding_to_sns_params(
                                    crate::protocol_serde::shape_publish_finding_to_sns_params::de_publish_finding_to_sns_params(tokens)?
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
