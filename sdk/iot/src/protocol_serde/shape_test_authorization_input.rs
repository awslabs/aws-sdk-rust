// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_test_authorization_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::test_authorization::TestAuthorizationInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.auth_infos {
        let mut array_2 = object.key("authInfos").start_array();
        for item_3 in var_1 {
            {
                #[allow(unused_mut)]
                let mut object_4 = array_2.value().start_object();
                crate::protocol_serde::shape_auth_info::ser_auth_info(&mut object_4, item_3)?;
                object_4.finish();
            }
        }
        array_2.finish();
    }
    if let Some(var_5) = &input.cognito_identity_pool_id {
        object.key("cognitoIdentityPoolId").string(var_5.as_str());
    }
    if let Some(var_6) = &input.policy_names_to_add {
        let mut array_7 = object.key("policyNamesToAdd").start_array();
        for item_8 in var_6 {
            {
                array_7.value().string(item_8.as_str());
            }
        }
        array_7.finish();
    }
    if let Some(var_9) = &input.policy_names_to_skip {
        let mut array_10 = object.key("policyNamesToSkip").start_array();
        for item_11 in var_9 {
            {
                array_10.value().string(item_11.as_str());
            }
        }
        array_10.finish();
    }
    if let Some(var_12) = &input.principal {
        object.key("principal").string(var_12.as_str());
    }
    Ok(())
}
