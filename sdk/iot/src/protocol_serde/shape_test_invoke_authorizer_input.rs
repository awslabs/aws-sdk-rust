// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_test_invoke_authorizer_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::test_invoke_authorizer::TestInvokeAuthorizerInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.http_context {
        #[allow(unused_mut)]
        let mut object_2 = object.key("httpContext").start_object();
        crate::protocol_serde::shape_http_context::ser_http_context(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.mqtt_context {
        #[allow(unused_mut)]
        let mut object_4 = object.key("mqttContext").start_object();
        crate::protocol_serde::shape_mqtt_context::ser_mqtt_context(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.tls_context {
        #[allow(unused_mut)]
        let mut object_6 = object.key("tlsContext").start_object();
        crate::protocol_serde::shape_tls_context::ser_tls_context(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.token {
        object.key("token").string(var_7.as_str());
    }
    if let Some(var_8) = &input.token_signature {
        object.key("tokenSignature").string(var_8.as_str());
    }
    Ok(())
}
