// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_topic_rule_payload(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::TopicRulePayload,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.sql {
        object.key("sql").string(var_1.as_str());
    }
    if let Some(var_2) = &input.description {
        object.key("description").string(var_2.as_str());
    }
    if let Some(var_3) = &input.actions {
        let mut array_4 = object.key("actions").start_array();
        for item_5 in var_3 {
            {
                #[allow(unused_mut)]
                let mut object_6 = array_4.value().start_object();
                crate::protocol_serde::shape_action::ser_action(&mut object_6, item_5)?;
                object_6.finish();
            }
        }
        array_4.finish();
    }
    if let Some(var_7) = &input.rule_disabled {
        object.key("ruleDisabled").boolean(*var_7);
    }
    if let Some(var_8) = &input.aws_iot_sql_version {
        object.key("awsIotSqlVersion").string(var_8.as_str());
    }
    if let Some(var_9) = &input.error_action {
        #[allow(unused_mut)]
        let mut object_10 = object.key("errorAction").start_object();
        crate::protocol_serde::shape_action::ser_action(&mut object_10, var_9)?;
        object_10.finish();
    }
    Ok(())
}
