// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_topic_rule_payload(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::TopicRulePayload,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    {
        object.key("sql").string(input.sql.as_str());
    }
    if let Some(var_1) = &input.description {
        object.key("description").string(var_1.as_str());
    }
    {
        let mut array_2 = object.key("actions").start_array();
        for item_3 in &input.actions {
            {
                #[allow(unused_mut)]
                let mut object_4 = array_2.value().start_object();
                crate::protocol_serde::shape_action::ser_action(&mut object_4, item_3)?;
                object_4.finish();
            }
        }
        array_2.finish();
    }
    if let Some(var_5) = &input.rule_disabled {
        object.key("ruleDisabled").boolean(*var_5);
    }
    if let Some(var_6) = &input.aws_iot_sql_version {
        object.key("awsIotSqlVersion").string(var_6.as_str());
    }
    if let Some(var_7) = &input.error_action {
        #[allow(unused_mut)]
        let mut object_8 = object.key("errorAction").start_object();
        crate::protocol_serde::shape_action::ser_action(&mut object_8, var_7)?;
        object_8.finish();
    }
    Ok(())
}
