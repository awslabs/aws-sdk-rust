// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_domain_configuration_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_domain_configuration::CreateDomainConfigurationInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.authorizer_config {
        #[allow(unused_mut)]
        let mut object_2 = object.key("authorizerConfig").start_object();
        crate::protocol_serde::shape_authorizer_config::ser_authorizer_config(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.domain_name {
        object.key("domainName").string(var_3.as_str());
    }
    if let Some(var_4) = &input.server_certificate_arns {
        let mut array_5 = object.key("serverCertificateArns").start_array();
        for item_6 in var_4 {
            {
                array_5.value().string(item_6.as_str());
            }
        }
        array_5.finish();
    }
    if let Some(var_7) = &input.service_type {
        object.key("serviceType").string(var_7.as_str());
    }
    if let Some(var_8) = &input.tags {
        let mut array_9 = object.key("tags").start_array();
        for item_10 in var_8 {
            {
                #[allow(unused_mut)]
                let mut object_11 = array_9.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_11, item_10)?;
                object_11.finish();
            }
        }
        array_9.finish();
    }
    if let Some(var_12) = &input.tls_config {
        #[allow(unused_mut)]
        let mut object_13 = object.key("tlsConfig").start_object();
        crate::protocol_serde::shape_tls_config::ser_tls_config(&mut object_13, var_12)?;
        object_13.finish();
    }
    if let Some(var_14) = &input.validation_certificate_arn {
        object.key("validationCertificateArn").string(var_14.as_str());
    }
    Ok(())
}
