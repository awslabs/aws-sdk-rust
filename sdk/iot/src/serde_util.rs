// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn abort_config_correct_errors(mut builder: crate::types::builders::AbortConfigBuilder) -> crate::types::builders::AbortConfigBuilder {
    if builder.criteria_list.is_none() {
        builder.criteria_list = Some(Default::default())
    }
    builder
}

pub(crate) fn aggregation_type_correct_errors(
    mut builder: crate::types::builders::AggregationTypeBuilder,
) -> crate::types::builders::AggregationTypeBuilder {
    if builder.name.is_none() {
        builder.name = "no value was set".parse::<crate::types::AggregationTypeName>().ok()
    }
    builder
}

pub(crate) fn job_executions_retry_config_correct_errors(
    mut builder: crate::types::builders::JobExecutionsRetryConfigBuilder,
) -> crate::types::builders::JobExecutionsRetryConfigBuilder {
    if builder.criteria_list.is_none() {
        builder.criteria_list = Some(Default::default())
    }
    builder
}

pub(crate) fn provisioning_hook_correct_errors(
    mut builder: crate::types::builders::ProvisioningHookBuilder,
) -> crate::types::builders::ProvisioningHookBuilder {
    if builder.target_arn.is_none() {
        builder.target_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn thing_group_indexing_configuration_correct_errors(
    mut builder: crate::types::builders::ThingGroupIndexingConfigurationBuilder,
) -> crate::types::builders::ThingGroupIndexingConfigurationBuilder {
    if builder.thing_group_indexing_mode.is_none() {
        builder.thing_group_indexing_mode = "no value was set".parse::<crate::types::ThingGroupIndexingMode>().ok()
    }
    builder
}

pub(crate) fn thing_indexing_configuration_correct_errors(
    mut builder: crate::types::builders::ThingIndexingConfigurationBuilder,
) -> crate::types::builders::ThingIndexingConfigurationBuilder {
    if builder.thing_indexing_mode.is_none() {
        builder.thing_indexing_mode = "no value was set".parse::<crate::types::ThingIndexingMode>().ok()
    }
    builder
}

pub(crate) fn add_things_to_thing_group_params_correct_errors(
    mut builder: crate::types::builders::AddThingsToThingGroupParamsBuilder,
) -> crate::types::builders::AddThingsToThingGroupParamsBuilder {
    if builder.thing_group_names.is_none() {
        builder.thing_group_names = Some(Default::default())
    }
    builder
}

pub(crate) fn alert_target_correct_errors(mut builder: crate::types::builders::AlertTargetBuilder) -> crate::types::builders::AlertTargetBuilder {
    if builder.alert_target_arn.is_none() {
        builder.alert_target_arn = Some(Default::default())
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn audit_suppression_correct_errors(
    mut builder: crate::types::builders::AuditSuppressionBuilder,
) -> crate::types::builders::AuditSuppressionBuilder {
    if builder.check_name.is_none() {
        builder.check_name = Some(Default::default())
    }
    if builder.resource_identifier.is_none() {
        builder.resource_identifier = {
            let builder = crate::types::builders::ResourceIdentifierBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn behavior_correct_errors(mut builder: crate::types::builders::BehaviorBuilder) -> crate::types::builders::BehaviorBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn enable_io_t_logging_params_correct_errors(
    mut builder: crate::types::builders::EnableIoTLoggingParamsBuilder,
) -> crate::types::builders::EnableIoTLoggingParamsBuilder {
    if builder.role_arn_for_logging.is_none() {
        builder.role_arn_for_logging = Some(Default::default())
    }
    if builder.log_level.is_none() {
        builder.log_level = "no value was set".parse::<crate::types::LogLevel>().ok()
    }
    builder
}

pub(crate) fn exponential_rollout_rate_correct_errors(
    mut builder: crate::types::builders::ExponentialRolloutRateBuilder,
) -> crate::types::builders::ExponentialRolloutRateBuilder {
    if builder.base_rate_per_minute.is_none() {
        builder.base_rate_per_minute = Some(Default::default())
    }
    if builder.increment_factor.is_none() {
        builder.increment_factor = Some(Default::default())
    }
    if builder.rate_increase_criteria.is_none() {
        builder.rate_increase_criteria = {
            let builder = crate::types::builders::RateIncreaseCriteriaBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn maintenance_window_correct_errors(
    mut builder: crate::types::builders::MaintenanceWindowBuilder,
) -> crate::types::builders::MaintenanceWindowBuilder {
    if builder.start_time.is_none() {
        builder.start_time = Some(Default::default())
    }
    if builder.duration_in_minutes.is_none() {
        builder.duration_in_minutes = Some(Default::default())
    }
    builder
}

pub(crate) fn metric_to_retain_correct_errors(
    mut builder: crate::types::builders::MetricToRetainBuilder,
) -> crate::types::builders::MetricToRetainBuilder {
    if builder.metric.is_none() {
        builder.metric = Some(Default::default())
    }
    builder
}

pub(crate) fn publish_finding_to_sns_params_correct_errors(
    mut builder: crate::types::builders::PublishFindingToSnsParamsBuilder,
) -> crate::types::builders::PublishFindingToSnsParamsBuilder {
    if builder.topic_arn.is_none() {
        builder.topic_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn replace_default_policy_version_params_correct_errors(
    mut builder: crate::types::builders::ReplaceDefaultPolicyVersionParamsBuilder,
) -> crate::types::builders::ReplaceDefaultPolicyVersionParamsBuilder {
    if builder.template_name.is_none() {
        builder.template_name = "no value was set".parse::<crate::types::PolicyTemplateName>().ok()
    }
    builder
}

pub(crate) fn security_profile_identifier_correct_errors(
    mut builder: crate::types::builders::SecurityProfileIdentifierBuilder,
) -> crate::types::builders::SecurityProfileIdentifierBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    builder
}

pub(crate) fn security_profile_target_correct_errors(
    mut builder: crate::types::builders::SecurityProfileTargetBuilder,
) -> crate::types::builders::SecurityProfileTargetBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    builder
}

pub(crate) fn tag_correct_errors(mut builder: crate::types::builders::TagBuilder) -> crate::types::builders::TagBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    builder
}

pub(crate) fn update_ca_certificate_params_correct_errors(
    mut builder: crate::types::builders::UpdateCaCertificateParamsBuilder,
) -> crate::types::builders::UpdateCaCertificateParamsBuilder {
    if builder.action.is_none() {
        builder.action = "no value was set".parse::<crate::types::CaCertificateUpdateAction>().ok()
    }
    builder
}

pub(crate) fn update_device_certificate_params_correct_errors(
    mut builder: crate::types::builders::UpdateDeviceCertificateParamsBuilder,
) -> crate::types::builders::UpdateDeviceCertificateParamsBuilder {
    if builder.action.is_none() {
        builder.action = "no value was set".parse::<crate::types::DeviceCertificateUpdateAction>().ok()
    }
    builder
}

pub(crate) fn violation_event_occurrence_range_correct_errors(
    mut builder: crate::types::builders::ViolationEventOccurrenceRangeBuilder,
) -> crate::types::builders::ViolationEventOccurrenceRangeBuilder {
    if builder.start_time.is_none() {
        builder.start_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.end_time.is_none() {
        builder.end_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn abort_criteria_correct_errors(
    mut builder: crate::types::builders::AbortCriteriaBuilder,
) -> crate::types::builders::AbortCriteriaBuilder {
    if builder.failure_type.is_none() {
        builder.failure_type = "no value was set".parse::<crate::types::JobExecutionFailureType>().ok()
    }
    if builder.action.is_none() {
        builder.action = "no value was set".parse::<crate::types::AbortAction>().ok()
    }
    if builder.threshold_percentage.is_none() {
        builder.threshold_percentage = Some(Default::default())
    }
    if builder.min_number_of_executed_things.is_none() {
        builder.min_number_of_executed_things = Some(Default::default())
    }
    builder
}

pub(crate) fn auth_info_correct_errors(mut builder: crate::types::builders::AuthInfoBuilder) -> crate::types::builders::AuthInfoBuilder {
    if builder.resources.is_none() {
        builder.resources = Some(Default::default())
    }
    builder
}

pub(crate) fn aws_job_exponential_rollout_rate_correct_errors(
    mut builder: crate::types::builders::AwsJobExponentialRolloutRateBuilder,
) -> crate::types::builders::AwsJobExponentialRolloutRateBuilder {
    if builder.base_rate_per_minute.is_none() {
        builder.base_rate_per_minute = Some(Default::default())
    }
    if builder.increment_factor.is_none() {
        builder.increment_factor = Some(Default::default())
    }
    if builder.rate_increase_criteria.is_none() {
        builder.rate_increase_criteria = {
            let builder = crate::types::builders::AwsJobRateIncreaseCriteriaBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn cloudwatch_alarm_action_correct_errors(
    mut builder: crate::types::builders::CloudwatchAlarmActionBuilder,
) -> crate::types::builders::CloudwatchAlarmActionBuilder {
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    if builder.alarm_name.is_none() {
        builder.alarm_name = Some(Default::default())
    }
    if builder.state_reason.is_none() {
        builder.state_reason = Some(Default::default())
    }
    if builder.state_value.is_none() {
        builder.state_value = Some(Default::default())
    }
    builder
}

pub(crate) fn cloudwatch_logs_action_correct_errors(
    mut builder: crate::types::builders::CloudwatchLogsActionBuilder,
) -> crate::types::builders::CloudwatchLogsActionBuilder {
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    if builder.log_group_name.is_none() {
        builder.log_group_name = Some(Default::default())
    }
    builder
}

pub(crate) fn cloudwatch_metric_action_correct_errors(
    mut builder: crate::types::builders::CloudwatchMetricActionBuilder,
) -> crate::types::builders::CloudwatchMetricActionBuilder {
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    if builder.metric_namespace.is_none() {
        builder.metric_namespace = Some(Default::default())
    }
    if builder.metric_name.is_none() {
        builder.metric_name = Some(Default::default())
    }
    if builder.metric_value.is_none() {
        builder.metric_value = Some(Default::default())
    }
    if builder.metric_unit.is_none() {
        builder.metric_unit = Some(Default::default())
    }
    builder
}

pub(crate) fn dynamo_db_action_correct_errors(
    mut builder: crate::types::builders::DynamoDbActionBuilder,
) -> crate::types::builders::DynamoDbActionBuilder {
    if builder.table_name.is_none() {
        builder.table_name = Some(Default::default())
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    if builder.hash_key_field.is_none() {
        builder.hash_key_field = Some(Default::default())
    }
    if builder.hash_key_value.is_none() {
        builder.hash_key_value = Some(Default::default())
    }
    builder
}

pub(crate) fn dynamo_dbv2_action_correct_errors(
    mut builder: crate::types::builders::DynamoDBv2ActionBuilder,
) -> crate::types::builders::DynamoDBv2ActionBuilder {
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    if builder.put_item.is_none() {
        builder.put_item = {
            let builder = crate::types::builders::PutItemInputBuilder::default();
            crate::serde_util::put_item_input_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn elasticsearch_action_correct_errors(
    mut builder: crate::types::builders::ElasticsearchActionBuilder,
) -> crate::types::builders::ElasticsearchActionBuilder {
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    if builder.endpoint.is_none() {
        builder.endpoint = Some(Default::default())
    }
    if builder.index.is_none() {
        builder.index = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = Some(Default::default())
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    builder
}

pub(crate) fn firehose_action_correct_errors(
    mut builder: crate::types::builders::FirehoseActionBuilder,
) -> crate::types::builders::FirehoseActionBuilder {
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    if builder.delivery_stream_name.is_none() {
        builder.delivery_stream_name = Some(Default::default())
    }
    builder
}

pub(crate) fn http_action_correct_errors(mut builder: crate::types::builders::HttpActionBuilder) -> crate::types::builders::HttpActionBuilder {
    if builder.url.is_none() {
        builder.url = Some(Default::default())
    }
    builder
}

pub(crate) fn iot_events_action_correct_errors(
    mut builder: crate::types::builders::IotEventsActionBuilder,
) -> crate::types::builders::IotEventsActionBuilder {
    if builder.input_name.is_none() {
        builder.input_name = Some(Default::default())
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn iot_site_wise_action_correct_errors(
    mut builder: crate::types::builders::IotSiteWiseActionBuilder,
) -> crate::types::builders::IotSiteWiseActionBuilder {
    if builder.put_asset_property_value_entries.is_none() {
        builder.put_asset_property_value_entries = Some(Default::default())
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn kafka_action_correct_errors(mut builder: crate::types::builders::KafkaActionBuilder) -> crate::types::builders::KafkaActionBuilder {
    if builder.destination_arn.is_none() {
        builder.destination_arn = Some(Default::default())
    }
    if builder.topic.is_none() {
        builder.topic = Some(Default::default())
    }
    if builder.client_properties.is_none() {
        builder.client_properties = Some(Default::default())
    }
    builder
}

pub(crate) fn kinesis_action_correct_errors(
    mut builder: crate::types::builders::KinesisActionBuilder,
) -> crate::types::builders::KinesisActionBuilder {
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    if builder.stream_name.is_none() {
        builder.stream_name = Some(Default::default())
    }
    builder
}

pub(crate) fn lambda_action_correct_errors(mut builder: crate::types::builders::LambdaActionBuilder) -> crate::types::builders::LambdaActionBuilder {
    if builder.function_arn.is_none() {
        builder.function_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn location_action_correct_errors(
    mut builder: crate::types::builders::LocationActionBuilder,
) -> crate::types::builders::LocationActionBuilder {
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    if builder.tracker_name.is_none() {
        builder.tracker_name = Some(Default::default())
    }
    if builder.device_id.is_none() {
        builder.device_id = Some(Default::default())
    }
    if builder.latitude.is_none() {
        builder.latitude = Some(Default::default())
    }
    if builder.longitude.is_none() {
        builder.longitude = Some(Default::default())
    }
    builder
}

pub(crate) fn log_target_correct_errors(mut builder: crate::types::builders::LogTargetBuilder) -> crate::types::builders::LogTargetBuilder {
    if builder.target_type.is_none() {
        builder.target_type = "no value was set".parse::<crate::types::LogTargetType>().ok()
    }
    builder
}

pub(crate) fn metric_dimension_correct_errors(
    mut builder: crate::types::builders::MetricDimensionBuilder,
) -> crate::types::builders::MetricDimensionBuilder {
    if builder.dimension_name.is_none() {
        builder.dimension_name = Some(Default::default())
    }
    builder
}

pub(crate) fn open_search_action_correct_errors(
    mut builder: crate::types::builders::OpenSearchActionBuilder,
) -> crate::types::builders::OpenSearchActionBuilder {
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    if builder.endpoint.is_none() {
        builder.endpoint = Some(Default::default())
    }
    if builder.index.is_none() {
        builder.index = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = Some(Default::default())
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    builder
}

pub(crate) fn republish_action_correct_errors(
    mut builder: crate::types::builders::RepublishActionBuilder,
) -> crate::types::builders::RepublishActionBuilder {
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    if builder.topic.is_none() {
        builder.topic = Some(Default::default())
    }
    builder
}

pub(crate) fn retry_criteria_correct_errors(
    mut builder: crate::types::builders::RetryCriteriaBuilder,
) -> crate::types::builders::RetryCriteriaBuilder {
    if builder.failure_type.is_none() {
        builder.failure_type = "no value was set".parse::<crate::types::RetryableFailureType>().ok()
    }
    if builder.number_of_retries.is_none() {
        builder.number_of_retries = Some(Default::default())
    }
    builder
}

pub(crate) fn s3_action_correct_errors(mut builder: crate::types::builders::S3ActionBuilder) -> crate::types::builders::S3ActionBuilder {
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    if builder.bucket_name.is_none() {
        builder.bucket_name = Some(Default::default())
    }
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    builder
}

pub(crate) fn salesforce_action_correct_errors(
    mut builder: crate::types::builders::SalesforceActionBuilder,
) -> crate::types::builders::SalesforceActionBuilder {
    if builder.token.is_none() {
        builder.token = Some(Default::default())
    }
    if builder.url.is_none() {
        builder.url = Some(Default::default())
    }
    builder
}

pub(crate) fn sns_action_correct_errors(mut builder: crate::types::builders::SnsActionBuilder) -> crate::types::builders::SnsActionBuilder {
    if builder.target_arn.is_none() {
        builder.target_arn = Some(Default::default())
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn sqs_action_correct_errors(mut builder: crate::types::builders::SqsActionBuilder) -> crate::types::builders::SqsActionBuilder {
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    if builder.queue_url.is_none() {
        builder.queue_url = Some(Default::default())
    }
    builder
}

pub(crate) fn step_functions_action_correct_errors(
    mut builder: crate::types::builders::StepFunctionsActionBuilder,
) -> crate::types::builders::StepFunctionsActionBuilder {
    if builder.state_machine_name.is_none() {
        builder.state_machine_name = Some(Default::default())
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn timestream_action_correct_errors(
    mut builder: crate::types::builders::TimestreamActionBuilder,
) -> crate::types::builders::TimestreamActionBuilder {
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    if builder.database_name.is_none() {
        builder.database_name = Some(Default::default())
    }
    if builder.table_name.is_none() {
        builder.table_name = Some(Default::default())
    }
    if builder.dimensions.is_none() {
        builder.dimensions = Some(Default::default())
    }
    builder
}

pub(crate) fn location_timestamp_correct_errors(
    mut builder: crate::types::builders::LocationTimestampBuilder,
) -> crate::types::builders::LocationTimestampBuilder {
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn machine_learning_detection_config_correct_errors(
    mut builder: crate::types::builders::MachineLearningDetectionConfigBuilder,
) -> crate::types::builders::MachineLearningDetectionConfigBuilder {
    if builder.confidence_level.is_none() {
        builder.confidence_level = "no value was set".parse::<crate::types::ConfidenceLevel>().ok()
    }
    builder
}

pub(crate) fn put_item_input_correct_errors(mut builder: crate::types::builders::PutItemInputBuilder) -> crate::types::builders::PutItemInputBuilder {
    if builder.table_name.is_none() {
        builder.table_name = Some(Default::default())
    }
    builder
}

pub(crate) fn timestream_timestamp_correct_errors(
    mut builder: crate::types::builders::TimestreamTimestampBuilder,
) -> crate::types::builders::TimestreamTimestampBuilder {
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    if builder.unit.is_none() {
        builder.unit = Some(Default::default())
    }
    builder
}

pub(crate) fn http_action_header_correct_errors(
    mut builder: crate::types::builders::HttpActionHeaderBuilder,
) -> crate::types::builders::HttpActionHeaderBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn kafka_action_header_correct_errors(
    mut builder: crate::types::builders::KafkaActionHeaderBuilder,
) -> crate::types::builders::KafkaActionHeaderBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn put_asset_property_value_entry_correct_errors(
    mut builder: crate::types::builders::PutAssetPropertyValueEntryBuilder,
) -> crate::types::builders::PutAssetPropertyValueEntryBuilder {
    if builder.property_values.is_none() {
        builder.property_values = Some(Default::default())
    }
    builder
}

pub(crate) fn sigv4_authorization_correct_errors(
    mut builder: crate::types::builders::SigV4AuthorizationBuilder,
) -> crate::types::builders::SigV4AuthorizationBuilder {
    if builder.signing_region.is_none() {
        builder.signing_region = Some(Default::default())
    }
    if builder.service_name.is_none() {
        builder.service_name = Some(Default::default())
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn timestream_dimension_correct_errors(
    mut builder: crate::types::builders::TimestreamDimensionBuilder,
) -> crate::types::builders::TimestreamDimensionBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn user_property_correct_errors(mut builder: crate::types::builders::UserPropertyBuilder) -> crate::types::builders::UserPropertyBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn asset_property_value_correct_errors(
    mut builder: crate::types::builders::AssetPropertyValueBuilder,
) -> crate::types::builders::AssetPropertyValueBuilder {
    if builder.value.is_none() {
        builder.value = Some(crate::types::AssetPropertyVariant::Unknown)
    }
    if builder.timestamp.is_none() {
        builder.timestamp = {
            let builder = crate::types::builders::AssetPropertyTimestampBuilder::default();
            crate::serde_util::asset_property_timestamp_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn asset_property_timestamp_correct_errors(
    mut builder: crate::types::builders::AssetPropertyTimestampBuilder,
) -> crate::types::builders::AssetPropertyTimestampBuilder {
    if builder.time_in_seconds.is_none() {
        builder.time_in_seconds = Some(Default::default())
    }
    builder
}
