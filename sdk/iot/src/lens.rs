// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_structure_crate_output_get_behavior_model_training_summaries_output_next_token(
    input: &crate::output::GetBehaviorModelTrainingSummariesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_active_violations_output_next_token(
    input: &crate::output::ListActiveViolationsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_attached_policies_output_next_marker(
    input: &crate::output::ListAttachedPoliciesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_audit_findings_output_next_token(
    input: &crate::output::ListAuditFindingsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_audit_mitigation_actions_executions_output_next_token(
    input: &crate::output::ListAuditMitigationActionsExecutionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_audit_mitigation_actions_tasks_output_next_token(
    input: &crate::output::ListAuditMitigationActionsTasksOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_audit_suppressions_output_next_token(
    input: &crate::output::ListAuditSuppressionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_audit_tasks_output_next_token(
    input: &crate::output::ListAuditTasksOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_authorizers_output_next_marker(
    input: &crate::output::ListAuthorizersOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_billing_groups_output_next_token(
    input: &crate::output::ListBillingGroupsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_ca_certificates_output_next_marker(
    input: &crate::output::ListCaCertificatesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_certificates_output_next_marker(
    input: &crate::output::ListCertificatesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_certificates_by_ca_output_next_marker(
    input: &crate::output::ListCertificatesByCaOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_custom_metrics_output_next_token(
    input: &crate::output::ListCustomMetricsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_detect_mitigation_actions_executions_output_next_token(
    input: &crate::output::ListDetectMitigationActionsExecutionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_detect_mitigation_actions_tasks_output_next_token(
    input: &crate::output::ListDetectMitigationActionsTasksOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_dimensions_output_next_token(
    input: &crate::output::ListDimensionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_domain_configurations_output_next_marker(
    input: &crate::output::ListDomainConfigurationsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_fleet_metrics_output_next_token(
    input: &crate::output::ListFleetMetricsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_indices_output_next_token(
    input: &crate::output::ListIndicesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_job_executions_for_job_output_next_token(
    input: &crate::output::ListJobExecutionsForJobOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_job_executions_for_thing_output_next_token(
    input: &crate::output::ListJobExecutionsForThingOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_jobs_output_next_token(
    input: &crate::output::ListJobsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_job_templates_output_next_token(
    input: &crate::output::ListJobTemplatesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_metric_values_output_next_token(
    input: &crate::output::ListMetricValuesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_mitigation_actions_output_next_token(
    input: &crate::output::ListMitigationActionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_ota_updates_output_next_token(
    input: &crate::output::ListOtaUpdatesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_outgoing_certificates_output_next_marker(
    input: &crate::output::ListOutgoingCertificatesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_policies_output_next_marker(
    input: &crate::output::ListPoliciesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_policy_principals_output_next_marker(
    input: &crate::output::ListPolicyPrincipalsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_principal_policies_output_next_marker(
    input: &crate::output::ListPrincipalPoliciesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_principal_things_output_next_token(
    input: &crate::output::ListPrincipalThingsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_provisioning_templates_output_next_token(
    input: &crate::output::ListProvisioningTemplatesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_provisioning_template_versions_output_next_token(
    input: &crate::output::ListProvisioningTemplateVersionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_role_aliases_output_next_marker(
    input: &crate::output::ListRoleAliasesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_scheduled_audits_output_next_token(
    input: &crate::output::ListScheduledAuditsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_security_profiles_output_next_token(
    input: &crate::output::ListSecurityProfilesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_security_profiles_for_target_output_next_token(
    input: &crate::output::ListSecurityProfilesForTargetOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_streams_output_next_token(
    input: &crate::output::ListStreamsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_tags_for_resource_output_next_token(
    input: &crate::output::ListTagsForResourceOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_targets_for_policy_output_next_marker(
    input: &crate::output::ListTargetsForPolicyOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_targets_for_security_profile_output_next_token(
    input: &crate::output::ListTargetsForSecurityProfileOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_thing_groups_output_next_token(
    input: &crate::output::ListThingGroupsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_thing_groups_for_thing_output_next_token(
    input: &crate::output::ListThingGroupsForThingOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_thing_principals_output_next_token(
    input: &crate::output::ListThingPrincipalsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_thing_registration_task_reports_output_next_token(
    input: &crate::output::ListThingRegistrationTaskReportsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_thing_registration_tasks_output_next_token(
    input: &crate::output::ListThingRegistrationTasksOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_things_output_next_token(
    input: &crate::output::ListThingsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_things_in_billing_group_output_next_token(
    input: &crate::output::ListThingsInBillingGroupOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_things_in_thing_group_output_next_token(
    input: &crate::output::ListThingsInThingGroupOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_thing_types_output_next_token(
    input: &crate::output::ListThingTypesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_topic_rule_destinations_output_next_token(
    input: &crate::output::ListTopicRuleDestinationsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_topic_rules_output_next_token(
    input: &crate::output::ListTopicRulesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_v2_logging_levels_output_next_token(
    input: &crate::output::ListV2LoggingLevelsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_violation_events_output_next_token(
    input: &crate::output::ListViolationEventsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_get_behavior_model_training_summaries_output_summaries(
    input: crate::output::GetBehaviorModelTrainingSummariesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::BehaviorModelTrainingSummary>> {
    let input = match input.summaries {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_active_violations_output_active_violations(
    input: crate::output::ListActiveViolationsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::ActiveViolation>> {
    let input = match input.active_violations {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_attached_policies_output_policies(
    input: crate::output::ListAttachedPoliciesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::Policy>> {
    let input = match input.policies {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_audit_findings_output_findings(
    input: crate::output::ListAuditFindingsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::AuditFinding>> {
    let input = match input.findings {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_audit_mitigation_actions_executions_output_actions_executions(
    input: crate::output::ListAuditMitigationActionsExecutionsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::AuditMitigationActionExecutionMetadata>> {
    let input = match input.actions_executions {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_audit_mitigation_actions_tasks_output_tasks(
    input: crate::output::ListAuditMitigationActionsTasksOutput,
) -> std::option::Option<std::vec::Vec<crate::model::AuditMitigationActionsTaskMetadata>> {
    let input = match input.tasks {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_audit_suppressions_output_suppressions(
    input: crate::output::ListAuditSuppressionsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::AuditSuppression>> {
    let input = match input.suppressions {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_audit_tasks_output_tasks(
    input: crate::output::ListAuditTasksOutput,
) -> std::option::Option<std::vec::Vec<crate::model::AuditTaskMetadata>> {
    let input = match input.tasks {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_authorizers_output_authorizers(
    input: crate::output::ListAuthorizersOutput,
) -> std::option::Option<std::vec::Vec<crate::model::AuthorizerSummary>> {
    let input = match input.authorizers {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_billing_groups_output_billing_groups(
    input: crate::output::ListBillingGroupsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::GroupNameAndArn>> {
    let input = match input.billing_groups {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_ca_certificates_output_certificates(
    input: crate::output::ListCaCertificatesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::CaCertificate>> {
    let input = match input.certificates {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_certificates_output_certificates(
    input: crate::output::ListCertificatesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::Certificate>> {
    let input = match input.certificates {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_certificates_by_ca_output_certificates(
    input: crate::output::ListCertificatesByCaOutput,
) -> std::option::Option<std::vec::Vec<crate::model::Certificate>> {
    let input = match input.certificates {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_custom_metrics_output_metric_names(
    input: crate::output::ListCustomMetricsOutput,
) -> std::option::Option<std::vec::Vec<std::string::String>> {
    let input = match input.metric_names {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_detect_mitigation_actions_executions_output_actions_executions(
    input: crate::output::ListDetectMitigationActionsExecutionsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::DetectMitigationActionExecution>> {
    let input = match input.actions_executions {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_detect_mitigation_actions_tasks_output_tasks(
    input: crate::output::ListDetectMitigationActionsTasksOutput,
) -> std::option::Option<std::vec::Vec<crate::model::DetectMitigationActionsTaskSummary>> {
    let input = match input.tasks {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_dimensions_output_dimension_names(
    input: crate::output::ListDimensionsOutput,
) -> std::option::Option<std::vec::Vec<std::string::String>> {
    let input = match input.dimension_names {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_domain_configurations_output_domain_configurations(
    input: crate::output::ListDomainConfigurationsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::DomainConfigurationSummary>> {
    let input = match input.domain_configurations {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_fleet_metrics_output_fleet_metrics(
    input: crate::output::ListFleetMetricsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::FleetMetricNameAndArn>> {
    let input = match input.fleet_metrics {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_indices_output_index_names(
    input: crate::output::ListIndicesOutput,
) -> std::option::Option<std::vec::Vec<std::string::String>> {
    let input = match input.index_names {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_job_executions_for_job_output_execution_summaries(
    input: crate::output::ListJobExecutionsForJobOutput,
) -> std::option::Option<std::vec::Vec<crate::model::JobExecutionSummaryForJob>> {
    let input = match input.execution_summaries {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_job_executions_for_thing_output_execution_summaries(
    input: crate::output::ListJobExecutionsForThingOutput,
) -> std::option::Option<std::vec::Vec<crate::model::JobExecutionSummaryForThing>> {
    let input = match input.execution_summaries {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_jobs_output_jobs(
    input: crate::output::ListJobsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::JobSummary>> {
    let input = match input.jobs {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_job_templates_output_job_templates(
    input: crate::output::ListJobTemplatesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::JobTemplateSummary>> {
    let input = match input.job_templates {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_metric_values_output_metric_datum_list(
    input: crate::output::ListMetricValuesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::MetricDatum>> {
    let input = match input.metric_datum_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_mitigation_actions_output_action_identifiers(
    input: crate::output::ListMitigationActionsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::MitigationActionIdentifier>> {
    let input = match input.action_identifiers {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_ota_updates_output_ota_updates(
    input: crate::output::ListOtaUpdatesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::OtaUpdateSummary>> {
    let input = match input.ota_updates {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_outgoing_certificates_output_outgoing_certificates(
    input: crate::output::ListOutgoingCertificatesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::OutgoingCertificate>> {
    let input = match input.outgoing_certificates {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_policies_output_policies(
    input: crate::output::ListPoliciesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::Policy>> {
    let input = match input.policies {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_policy_principals_output_principals(
    input: crate::output::ListPolicyPrincipalsOutput,
) -> std::option::Option<std::vec::Vec<std::string::String>> {
    let input = match input.principals {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_principal_policies_output_policies(
    input: crate::output::ListPrincipalPoliciesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::Policy>> {
    let input = match input.policies {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_principal_things_output_things(
    input: crate::output::ListPrincipalThingsOutput,
) -> std::option::Option<std::vec::Vec<std::string::String>> {
    let input = match input.things {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_provisioning_templates_output_templates(
    input: crate::output::ListProvisioningTemplatesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::ProvisioningTemplateSummary>> {
    let input = match input.templates {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_provisioning_template_versions_output_versions(
    input: crate::output::ListProvisioningTemplateVersionsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::ProvisioningTemplateVersionSummary>> {
    let input = match input.versions {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_role_aliases_output_role_aliases(
    input: crate::output::ListRoleAliasesOutput,
) -> std::option::Option<std::vec::Vec<std::string::String>> {
    let input = match input.role_aliases {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_scheduled_audits_output_scheduled_audits(
    input: crate::output::ListScheduledAuditsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::ScheduledAuditMetadata>> {
    let input = match input.scheduled_audits {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_security_profiles_output_security_profile_identifiers(
    input: crate::output::ListSecurityProfilesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::SecurityProfileIdentifier>> {
    let input = match input.security_profile_identifiers {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_security_profiles_for_target_output_security_profile_target_mappings(
    input: crate::output::ListSecurityProfilesForTargetOutput,
) -> std::option::Option<std::vec::Vec<crate::model::SecurityProfileTargetMapping>> {
    let input = match input.security_profile_target_mappings {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_streams_output_streams(
    input: crate::output::ListStreamsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::StreamSummary>> {
    let input = match input.streams {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_tags_for_resource_output_tags(
    input: crate::output::ListTagsForResourceOutput,
) -> std::option::Option<std::vec::Vec<crate::model::Tag>> {
    let input = match input.tags {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_targets_for_policy_output_targets(
    input: crate::output::ListTargetsForPolicyOutput,
) -> std::option::Option<std::vec::Vec<std::string::String>> {
    let input = match input.targets {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_targets_for_security_profile_output_security_profile_targets(
    input: crate::output::ListTargetsForSecurityProfileOutput,
) -> std::option::Option<std::vec::Vec<crate::model::SecurityProfileTarget>> {
    let input = match input.security_profile_targets {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_thing_groups_output_thing_groups(
    input: crate::output::ListThingGroupsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::GroupNameAndArn>> {
    let input = match input.thing_groups {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_thing_groups_for_thing_output_thing_groups(
    input: crate::output::ListThingGroupsForThingOutput,
) -> std::option::Option<std::vec::Vec<crate::model::GroupNameAndArn>> {
    let input = match input.thing_groups {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_thing_principals_output_principals(
    input: crate::output::ListThingPrincipalsOutput,
) -> std::option::Option<std::vec::Vec<std::string::String>> {
    let input = match input.principals {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_thing_registration_task_reports_output_resource_links(
    input: crate::output::ListThingRegistrationTaskReportsOutput,
) -> std::option::Option<std::vec::Vec<std::string::String>> {
    let input = match input.resource_links {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_thing_registration_tasks_output_task_ids(
    input: crate::output::ListThingRegistrationTasksOutput,
) -> std::option::Option<std::vec::Vec<std::string::String>> {
    let input = match input.task_ids {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_things_output_things(
    input: crate::output::ListThingsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::ThingAttribute>> {
    let input = match input.things {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_things_in_billing_group_output_things(
    input: crate::output::ListThingsInBillingGroupOutput,
) -> std::option::Option<std::vec::Vec<std::string::String>> {
    let input = match input.things {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_things_in_thing_group_output_things(
    input: crate::output::ListThingsInThingGroupOutput,
) -> std::option::Option<std::vec::Vec<std::string::String>> {
    let input = match input.things {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_thing_types_output_thing_types(
    input: crate::output::ListThingTypesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::ThingTypeDefinition>> {
    let input = match input.thing_types {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_topic_rule_destinations_output_destination_summaries(
    input: crate::output::ListTopicRuleDestinationsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::TopicRuleDestinationSummary>> {
    let input = match input.destination_summaries {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_topic_rules_output_rules(
    input: crate::output::ListTopicRulesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::TopicRuleListItem>> {
    let input = match input.rules {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_v2_logging_levels_output_log_target_configurations(
    input: crate::output::ListV2LoggingLevelsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::LogTargetConfiguration>> {
    let input = match input.log_target_configurations {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_violation_events_output_violation_events(
    input: crate::output::ListViolationEventsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::ViolationEvent>> {
    let input = match input.violation_events {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
