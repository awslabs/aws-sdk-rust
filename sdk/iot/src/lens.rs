// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_get_behavior_model_training_summaries_output_next_token(
    input: &crate::operation::get_behavior_model_training_summaries::GetBehaviorModelTrainingSummariesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_active_violations_output_next_token(
    input: &crate::operation::list_active_violations::ListActiveViolationsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_attached_policies_output_next_marker(
    input: &crate::operation::list_attached_policies::ListAttachedPoliciesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_audit_findings_output_next_token(
    input: &crate::operation::list_audit_findings::ListAuditFindingsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_audit_mitigation_actions_executions_output_next_token(
    input: &crate::operation::list_audit_mitigation_actions_executions::ListAuditMitigationActionsExecutionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_audit_mitigation_actions_tasks_output_next_token(
    input: &crate::operation::list_audit_mitigation_actions_tasks::ListAuditMitigationActionsTasksOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_audit_suppressions_output_next_token(
    input: &crate::operation::list_audit_suppressions::ListAuditSuppressionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_audit_tasks_output_next_token(
    input: &crate::operation::list_audit_tasks::ListAuditTasksOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_authorizers_output_next_marker(
    input: &crate::operation::list_authorizers::ListAuthorizersOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_billing_groups_output_next_token(
    input: &crate::operation::list_billing_groups::ListBillingGroupsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_ca_certificates_output_next_marker(
    input: &crate::operation::list_ca_certificates::ListCaCertificatesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_certificates_output_next_marker(
    input: &crate::operation::list_certificates::ListCertificatesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_certificates_by_ca_output_next_marker(
    input: &crate::operation::list_certificates_by_ca::ListCertificatesByCaOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_custom_metrics_output_next_token(
    input: &crate::operation::list_custom_metrics::ListCustomMetricsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_detect_mitigation_actions_executions_output_next_token(
    input: &crate::operation::list_detect_mitigation_actions_executions::ListDetectMitigationActionsExecutionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_detect_mitigation_actions_tasks_output_next_token(
    input: &crate::operation::list_detect_mitigation_actions_tasks::ListDetectMitigationActionsTasksOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_dimensions_output_next_token(
    input: &crate::operation::list_dimensions::ListDimensionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_domain_configurations_output_next_marker(
    input: &crate::operation::list_domain_configurations::ListDomainConfigurationsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_fleet_metrics_output_next_token(
    input: &crate::operation::list_fleet_metrics::ListFleetMetricsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_indices_output_next_token(
    input: &crate::operation::list_indices::ListIndicesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_job_executions_for_job_output_next_token(
    input: &crate::operation::list_job_executions_for_job::ListJobExecutionsForJobOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_job_executions_for_thing_output_next_token(
    input: &crate::operation::list_job_executions_for_thing::ListJobExecutionsForThingOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_job_templates_output_next_token(
    input: &crate::operation::list_job_templates::ListJobTemplatesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_jobs_output_next_token(
    input: &crate::operation::list_jobs::ListJobsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_metric_values_output_next_token(
    input: &crate::operation::list_metric_values::ListMetricValuesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_mitigation_actions_output_next_token(
    input: &crate::operation::list_mitigation_actions::ListMitigationActionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_ota_updates_output_next_token(
    input: &crate::operation::list_ota_updates::ListOtaUpdatesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_outgoing_certificates_output_next_marker(
    input: &crate::operation::list_outgoing_certificates::ListOutgoingCertificatesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_policies_output_next_marker(
    input: &crate::operation::list_policies::ListPoliciesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_policy_principals_output_next_marker(
    input: &crate::operation::list_policy_principals::ListPolicyPrincipalsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_principal_policies_output_next_marker(
    input: &crate::operation::list_principal_policies::ListPrincipalPoliciesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_principal_things_output_next_token(
    input: &crate::operation::list_principal_things::ListPrincipalThingsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_provisioning_template_versions_output_next_token(
    input: &crate::operation::list_provisioning_template_versions::ListProvisioningTemplateVersionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_provisioning_templates_output_next_token(
    input: &crate::operation::list_provisioning_templates::ListProvisioningTemplatesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_role_aliases_output_next_marker(
    input: &crate::operation::list_role_aliases::ListRoleAliasesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_scheduled_audits_output_next_token(
    input: &crate::operation::list_scheduled_audits::ListScheduledAuditsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_security_profiles_output_next_token(
    input: &crate::operation::list_security_profiles::ListSecurityProfilesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_security_profiles_for_target_output_next_token(
    input: &crate::operation::list_security_profiles_for_target::ListSecurityProfilesForTargetOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_streams_output_next_token(
    input: &crate::operation::list_streams::ListStreamsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_tags_for_resource_output_next_token(
    input: &crate::operation::list_tags_for_resource::ListTagsForResourceOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_targets_for_policy_output_next_marker(
    input: &crate::operation::list_targets_for_policy::ListTargetsForPolicyOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_targets_for_security_profile_output_next_token(
    input: &crate::operation::list_targets_for_security_profile::ListTargetsForSecurityProfileOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_thing_groups_output_next_token(
    input: &crate::operation::list_thing_groups::ListThingGroupsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_thing_groups_for_thing_output_next_token(
    input: &crate::operation::list_thing_groups_for_thing::ListThingGroupsForThingOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_thing_principals_output_next_token(
    input: &crate::operation::list_thing_principals::ListThingPrincipalsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_thing_registration_task_reports_output_next_token(
    input: &crate::operation::list_thing_registration_task_reports::ListThingRegistrationTaskReportsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_thing_registration_tasks_output_next_token(
    input: &crate::operation::list_thing_registration_tasks::ListThingRegistrationTasksOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_thing_types_output_next_token(
    input: &crate::operation::list_thing_types::ListThingTypesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_things_output_next_token(
    input: &crate::operation::list_things::ListThingsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_things_in_billing_group_output_next_token(
    input: &crate::operation::list_things_in_billing_group::ListThingsInBillingGroupOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_things_in_thing_group_output_next_token(
    input: &crate::operation::list_things_in_thing_group::ListThingsInThingGroupOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_topic_rule_destinations_output_next_token(
    input: &crate::operation::list_topic_rule_destinations::ListTopicRuleDestinationsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_topic_rules_output_next_token(
    input: &crate::operation::list_topic_rules::ListTopicRulesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_v2_logging_levels_output_next_token(
    input: &crate::operation::list_v2_logging_levels::ListV2LoggingLevelsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_violation_events_output_next_token(
    input: &crate::operation::list_violation_events::ListViolationEventsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_get_behavior_model_training_summaries_output_summaries(
    input: crate::operation::get_behavior_model_training_summaries::GetBehaviorModelTrainingSummariesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::BehaviorModelTrainingSummary>> {
    let input = match input.summaries {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_active_violations_output_active_violations(
    input: crate::operation::list_active_violations::ListActiveViolationsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ActiveViolation>> {
    let input = match input.active_violations {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_attached_policies_output_policies(
    input: crate::operation::list_attached_policies::ListAttachedPoliciesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::Policy>> {
    let input = match input.policies {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_audit_findings_output_findings(
    input: crate::operation::list_audit_findings::ListAuditFindingsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::AuditFinding>> {
    let input = match input.findings {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_audit_mitigation_actions_executions_output_actions_executions(
    input: crate::operation::list_audit_mitigation_actions_executions::ListAuditMitigationActionsExecutionsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::AuditMitigationActionExecutionMetadata>> {
    let input = match input.actions_executions {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_audit_mitigation_actions_tasks_output_tasks(
    input: crate::operation::list_audit_mitigation_actions_tasks::ListAuditMitigationActionsTasksOutput,
) -> std::option::Option<std::vec::Vec<crate::types::AuditMitigationActionsTaskMetadata>> {
    let input = match input.tasks {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_audit_suppressions_output_suppressions(
    input: crate::operation::list_audit_suppressions::ListAuditSuppressionsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::AuditSuppression>> {
    let input = match input.suppressions {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_audit_tasks_output_tasks(
    input: crate::operation::list_audit_tasks::ListAuditTasksOutput,
) -> std::option::Option<std::vec::Vec<crate::types::AuditTaskMetadata>> {
    let input = match input.tasks {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_authorizers_output_authorizers(
    input: crate::operation::list_authorizers::ListAuthorizersOutput,
) -> std::option::Option<std::vec::Vec<crate::types::AuthorizerSummary>> {
    let input = match input.authorizers {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_billing_groups_output_billing_groups(
    input: crate::operation::list_billing_groups::ListBillingGroupsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::GroupNameAndArn>> {
    let input = match input.billing_groups {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_ca_certificates_output_certificates(
    input: crate::operation::list_ca_certificates::ListCaCertificatesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::CaCertificate>> {
    let input = match input.certificates {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_certificates_output_certificates(
    input: crate::operation::list_certificates::ListCertificatesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::Certificate>> {
    let input = match input.certificates {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_certificates_by_ca_output_certificates(
    input: crate::operation::list_certificates_by_ca::ListCertificatesByCaOutput,
) -> std::option::Option<std::vec::Vec<crate::types::Certificate>> {
    let input = match input.certificates {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_custom_metrics_output_metric_names(
    input: crate::operation::list_custom_metrics::ListCustomMetricsOutput,
) -> std::option::Option<std::vec::Vec<std::string::String>> {
    let input = match input.metric_names {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_detect_mitigation_actions_executions_output_actions_executions(
    input: crate::operation::list_detect_mitigation_actions_executions::ListDetectMitigationActionsExecutionsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::DetectMitigationActionExecution>> {
    let input = match input.actions_executions {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_detect_mitigation_actions_tasks_output_tasks(
    input: crate::operation::list_detect_mitigation_actions_tasks::ListDetectMitigationActionsTasksOutput,
) -> std::option::Option<std::vec::Vec<crate::types::DetectMitigationActionsTaskSummary>> {
    let input = match input.tasks {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_dimensions_output_dimension_names(
    input: crate::operation::list_dimensions::ListDimensionsOutput,
) -> std::option::Option<std::vec::Vec<std::string::String>> {
    let input = match input.dimension_names {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_domain_configurations_output_domain_configurations(
    input: crate::operation::list_domain_configurations::ListDomainConfigurationsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::DomainConfigurationSummary>> {
    let input = match input.domain_configurations {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_fleet_metrics_output_fleet_metrics(
    input: crate::operation::list_fleet_metrics::ListFleetMetricsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::FleetMetricNameAndArn>> {
    let input = match input.fleet_metrics {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_indices_output_index_names(
    input: crate::operation::list_indices::ListIndicesOutput,
) -> std::option::Option<std::vec::Vec<std::string::String>> {
    let input = match input.index_names {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_job_executions_for_job_output_execution_summaries(
    input: crate::operation::list_job_executions_for_job::ListJobExecutionsForJobOutput,
) -> std::option::Option<std::vec::Vec<crate::types::JobExecutionSummaryForJob>> {
    let input = match input.execution_summaries {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_job_executions_for_thing_output_execution_summaries(
    input: crate::operation::list_job_executions_for_thing::ListJobExecutionsForThingOutput,
) -> std::option::Option<std::vec::Vec<crate::types::JobExecutionSummaryForThing>> {
    let input = match input.execution_summaries {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_job_templates_output_job_templates(
    input: crate::operation::list_job_templates::ListJobTemplatesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::JobTemplateSummary>> {
    let input = match input.job_templates {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_jobs_output_jobs(
    input: crate::operation::list_jobs::ListJobsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::JobSummary>> {
    let input = match input.jobs {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_metric_values_output_metric_datum_list(
    input: crate::operation::list_metric_values::ListMetricValuesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::MetricDatum>> {
    let input = match input.metric_datum_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_mitigation_actions_output_action_identifiers(
    input: crate::operation::list_mitigation_actions::ListMitigationActionsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::MitigationActionIdentifier>> {
    let input = match input.action_identifiers {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_ota_updates_output_ota_updates(
    input: crate::operation::list_ota_updates::ListOtaUpdatesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::OtaUpdateSummary>> {
    let input = match input.ota_updates {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_outgoing_certificates_output_outgoing_certificates(
    input: crate::operation::list_outgoing_certificates::ListOutgoingCertificatesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::OutgoingCertificate>> {
    let input = match input.outgoing_certificates {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_policies_output_policies(
    input: crate::operation::list_policies::ListPoliciesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::Policy>> {
    let input = match input.policies {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_policy_principals_output_principals(
    input: crate::operation::list_policy_principals::ListPolicyPrincipalsOutput,
) -> std::option::Option<std::vec::Vec<std::string::String>> {
    let input = match input.principals {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_principal_policies_output_policies(
    input: crate::operation::list_principal_policies::ListPrincipalPoliciesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::Policy>> {
    let input = match input.policies {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_principal_things_output_things(
    input: crate::operation::list_principal_things::ListPrincipalThingsOutput,
) -> std::option::Option<std::vec::Vec<std::string::String>> {
    let input = match input.things {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_provisioning_template_versions_output_versions(
    input: crate::operation::list_provisioning_template_versions::ListProvisioningTemplateVersionsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ProvisioningTemplateVersionSummary>> {
    let input = match input.versions {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_provisioning_templates_output_templates(
    input: crate::operation::list_provisioning_templates::ListProvisioningTemplatesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ProvisioningTemplateSummary>> {
    let input = match input.templates {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_role_aliases_output_role_aliases(
    input: crate::operation::list_role_aliases::ListRoleAliasesOutput,
) -> std::option::Option<std::vec::Vec<std::string::String>> {
    let input = match input.role_aliases {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_scheduled_audits_output_scheduled_audits(
    input: crate::operation::list_scheduled_audits::ListScheduledAuditsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ScheduledAuditMetadata>> {
    let input = match input.scheduled_audits {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_security_profiles_output_security_profile_identifiers(
    input: crate::operation::list_security_profiles::ListSecurityProfilesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::SecurityProfileIdentifier>> {
    let input = match input.security_profile_identifiers {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_security_profiles_for_target_output_security_profile_target_mappings(
    input: crate::operation::list_security_profiles_for_target::ListSecurityProfilesForTargetOutput,
) -> std::option::Option<std::vec::Vec<crate::types::SecurityProfileTargetMapping>> {
    let input = match input.security_profile_target_mappings {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_streams_output_streams(
    input: crate::operation::list_streams::ListStreamsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::StreamSummary>> {
    let input = match input.streams {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_tags_for_resource_output_tags(
    input: crate::operation::list_tags_for_resource::ListTagsForResourceOutput,
) -> std::option::Option<std::vec::Vec<crate::types::Tag>> {
    let input = match input.tags {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_targets_for_policy_output_targets(
    input: crate::operation::list_targets_for_policy::ListTargetsForPolicyOutput,
) -> std::option::Option<std::vec::Vec<std::string::String>> {
    let input = match input.targets {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_targets_for_security_profile_output_security_profile_targets(
    input: crate::operation::list_targets_for_security_profile::ListTargetsForSecurityProfileOutput,
) -> std::option::Option<std::vec::Vec<crate::types::SecurityProfileTarget>> {
    let input = match input.security_profile_targets {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_thing_groups_output_thing_groups(
    input: crate::operation::list_thing_groups::ListThingGroupsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::GroupNameAndArn>> {
    let input = match input.thing_groups {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_thing_groups_for_thing_output_thing_groups(
    input: crate::operation::list_thing_groups_for_thing::ListThingGroupsForThingOutput,
) -> std::option::Option<std::vec::Vec<crate::types::GroupNameAndArn>> {
    let input = match input.thing_groups {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_thing_principals_output_principals(
    input: crate::operation::list_thing_principals::ListThingPrincipalsOutput,
) -> std::option::Option<std::vec::Vec<std::string::String>> {
    let input = match input.principals {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_thing_registration_task_reports_output_resource_links(
    input: crate::operation::list_thing_registration_task_reports::ListThingRegistrationTaskReportsOutput,
) -> std::option::Option<std::vec::Vec<std::string::String>> {
    let input = match input.resource_links {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_thing_registration_tasks_output_task_ids(
    input: crate::operation::list_thing_registration_tasks::ListThingRegistrationTasksOutput,
) -> std::option::Option<std::vec::Vec<std::string::String>> {
    let input = match input.task_ids {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_thing_types_output_thing_types(
    input: crate::operation::list_thing_types::ListThingTypesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ThingTypeDefinition>> {
    let input = match input.thing_types {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_things_output_things(
    input: crate::operation::list_things::ListThingsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ThingAttribute>> {
    let input = match input.things {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_things_in_billing_group_output_things(
    input: crate::operation::list_things_in_billing_group::ListThingsInBillingGroupOutput,
) -> std::option::Option<std::vec::Vec<std::string::String>> {
    let input = match input.things {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_things_in_thing_group_output_things(
    input: crate::operation::list_things_in_thing_group::ListThingsInThingGroupOutput,
) -> std::option::Option<std::vec::Vec<std::string::String>> {
    let input = match input.things {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_topic_rule_destinations_output_destination_summaries(
    input: crate::operation::list_topic_rule_destinations::ListTopicRuleDestinationsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::TopicRuleDestinationSummary>> {
    let input = match input.destination_summaries {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_topic_rules_output_rules(
    input: crate::operation::list_topic_rules::ListTopicRulesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::TopicRuleListItem>> {
    let input = match input.rules {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_v2_logging_levels_output_log_target_configurations(
    input: crate::operation::list_v2_logging_levels::ListV2LoggingLevelsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::LogTargetConfiguration>> {
    let input = match input.log_target_configurations {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_violation_events_output_violation_events(
    input: crate::operation::list_violation_events::ListViolationEventsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ViolationEvent>> {
    let input = match input.violation_events {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
