// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Summary information about an IngestConfiguration.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct IngestConfigurationSummary {
    /// <p>Ingest name.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>Ingest configuration ARN.</p>
    pub arn: ::std::string::String,
    /// <p>Type of ingest protocol that the user employs for broadcasting.</p>
    pub ingest_protocol: crate::types::IngestProtocol,
    /// <p>ARN of the stage with which the IngestConfiguration is associated.</p>
    pub stage_arn: ::std::string::String,
    /// <p>ID of the participant within the stage.</p>
    pub participant_id: ::std::string::String,
    /// <p>State of the ingest configuration. It is <code>ACTIVE</code> if a publisher currently is publishing to the stage associated with the ingest configuration.</p>
    pub state: crate::types::IngestConfigurationState,
    /// <p>Customer-assigned name to help identify the participant using the IngestConfiguration; this can be used to link a participant to a user in the customer’s own systems. This can be any UTF-8 encoded text. <i>This field is exposed to all stage participants and should not be used for personally identifying, confidential, or sensitive information.</i></p>
    pub user_id: ::std::option::Option<::std::string::String>,
}
impl IngestConfigurationSummary {
    /// <p>Ingest name.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>Ingest configuration ARN.</p>
    pub fn arn(&self) -> &str {
        use std::ops::Deref;
        self.arn.deref()
    }
    /// <p>Type of ingest protocol that the user employs for broadcasting.</p>
    pub fn ingest_protocol(&self) -> &crate::types::IngestProtocol {
        &self.ingest_protocol
    }
    /// <p>ARN of the stage with which the IngestConfiguration is associated.</p>
    pub fn stage_arn(&self) -> &str {
        use std::ops::Deref;
        self.stage_arn.deref()
    }
    /// <p>ID of the participant within the stage.</p>
    pub fn participant_id(&self) -> &str {
        use std::ops::Deref;
        self.participant_id.deref()
    }
    /// <p>State of the ingest configuration. It is <code>ACTIVE</code> if a publisher currently is publishing to the stage associated with the ingest configuration.</p>
    pub fn state(&self) -> &crate::types::IngestConfigurationState {
        &self.state
    }
    /// <p>Customer-assigned name to help identify the participant using the IngestConfiguration; this can be used to link a participant to a user in the customer’s own systems. This can be any UTF-8 encoded text. <i>This field is exposed to all stage participants and should not be used for personally identifying, confidential, or sensitive information.</i></p>
    pub fn user_id(&self) -> ::std::option::Option<&str> {
        self.user_id.as_deref()
    }
}
impl IngestConfigurationSummary {
    /// Creates a new builder-style object to manufacture [`IngestConfigurationSummary`](crate::types::IngestConfigurationSummary).
    pub fn builder() -> crate::types::builders::IngestConfigurationSummaryBuilder {
        crate::types::builders::IngestConfigurationSummaryBuilder::default()
    }
}

/// A builder for [`IngestConfigurationSummary`](crate::types::IngestConfigurationSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct IngestConfigurationSummaryBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) ingest_protocol: ::std::option::Option<crate::types::IngestProtocol>,
    pub(crate) stage_arn: ::std::option::Option<::std::string::String>,
    pub(crate) participant_id: ::std::option::Option<::std::string::String>,
    pub(crate) state: ::std::option::Option<crate::types::IngestConfigurationState>,
    pub(crate) user_id: ::std::option::Option<::std::string::String>,
}
impl IngestConfigurationSummaryBuilder {
    /// <p>Ingest name.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Ingest name.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>Ingest name.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>Ingest configuration ARN.</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Ingest configuration ARN.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>Ingest configuration ARN.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>Type of ingest protocol that the user employs for broadcasting.</p>
    /// This field is required.
    pub fn ingest_protocol(mut self, input: crate::types::IngestProtocol) -> Self {
        self.ingest_protocol = ::std::option::Option::Some(input);
        self
    }
    /// <p>Type of ingest protocol that the user employs for broadcasting.</p>
    pub fn set_ingest_protocol(mut self, input: ::std::option::Option<crate::types::IngestProtocol>) -> Self {
        self.ingest_protocol = input;
        self
    }
    /// <p>Type of ingest protocol that the user employs for broadcasting.</p>
    pub fn get_ingest_protocol(&self) -> &::std::option::Option<crate::types::IngestProtocol> {
        &self.ingest_protocol
    }
    /// <p>ARN of the stage with which the IngestConfiguration is associated.</p>
    /// This field is required.
    pub fn stage_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.stage_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>ARN of the stage with which the IngestConfiguration is associated.</p>
    pub fn set_stage_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.stage_arn = input;
        self
    }
    /// <p>ARN of the stage with which the IngestConfiguration is associated.</p>
    pub fn get_stage_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.stage_arn
    }
    /// <p>ID of the participant within the stage.</p>
    /// This field is required.
    pub fn participant_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.participant_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>ID of the participant within the stage.</p>
    pub fn set_participant_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.participant_id = input;
        self
    }
    /// <p>ID of the participant within the stage.</p>
    pub fn get_participant_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.participant_id
    }
    /// <p>State of the ingest configuration. It is <code>ACTIVE</code> if a publisher currently is publishing to the stage associated with the ingest configuration.</p>
    /// This field is required.
    pub fn state(mut self, input: crate::types::IngestConfigurationState) -> Self {
        self.state = ::std::option::Option::Some(input);
        self
    }
    /// <p>State of the ingest configuration. It is <code>ACTIVE</code> if a publisher currently is publishing to the stage associated with the ingest configuration.</p>
    pub fn set_state(mut self, input: ::std::option::Option<crate::types::IngestConfigurationState>) -> Self {
        self.state = input;
        self
    }
    /// <p>State of the ingest configuration. It is <code>ACTIVE</code> if a publisher currently is publishing to the stage associated with the ingest configuration.</p>
    pub fn get_state(&self) -> &::std::option::Option<crate::types::IngestConfigurationState> {
        &self.state
    }
    /// <p>Customer-assigned name to help identify the participant using the IngestConfiguration; this can be used to link a participant to a user in the customer’s own systems. This can be any UTF-8 encoded text. <i>This field is exposed to all stage participants and should not be used for personally identifying, confidential, or sensitive information.</i></p>
    pub fn user_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Customer-assigned name to help identify the participant using the IngestConfiguration; this can be used to link a participant to a user in the customer’s own systems. This can be any UTF-8 encoded text. <i>This field is exposed to all stage participants and should not be used for personally identifying, confidential, or sensitive information.</i></p>
    pub fn set_user_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_id = input;
        self
    }
    /// <p>Customer-assigned name to help identify the participant using the IngestConfiguration; this can be used to link a participant to a user in the customer’s own systems. This can be any UTF-8 encoded text. <i>This field is exposed to all stage participants and should not be used for personally identifying, confidential, or sensitive information.</i></p>
    pub fn get_user_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_id
    }
    /// Consumes the builder and constructs a [`IngestConfigurationSummary`](crate::types::IngestConfigurationSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`arn`](crate::types::builders::IngestConfigurationSummaryBuilder::arn)
    /// - [`ingest_protocol`](crate::types::builders::IngestConfigurationSummaryBuilder::ingest_protocol)
    /// - [`stage_arn`](crate::types::builders::IngestConfigurationSummaryBuilder::stage_arn)
    /// - [`participant_id`](crate::types::builders::IngestConfigurationSummaryBuilder::participant_id)
    /// - [`state`](crate::types::builders::IngestConfigurationSummaryBuilder::state)
    pub fn build(self) -> ::std::result::Result<crate::types::IngestConfigurationSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::IngestConfigurationSummary {
            name: self.name,
            arn: self.arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "arn",
                    "arn was not specified but it is required when building IngestConfigurationSummary",
                )
            })?,
            ingest_protocol: self.ingest_protocol.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "ingest_protocol",
                    "ingest_protocol was not specified but it is required when building IngestConfigurationSummary",
                )
            })?,
            stage_arn: self.stage_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "stage_arn",
                    "stage_arn was not specified but it is required when building IngestConfigurationSummary",
                )
            })?,
            participant_id: self.participant_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "participant_id",
                    "participant_id was not specified but it is required when building IngestConfigurationSummary",
                )
            })?,
            state: self.state.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "state",
                    "state was not specified but it is required when building IngestConfigurationSummary",
                )
            })?,
            user_id: self.user_id,
        })
    }
}
