// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Object specifying a participant token in a stage.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ParticipantToken {
    /// <p>Unique identifier for this participant token, assigned by IVS.</p>
    #[doc(hidden)]
    pub participant_id: std::option::Option<std::string::String>,
    /// <p>The issued client token, encrypted.</p>
    #[doc(hidden)]
    pub token: std::option::Option<std::string::String>,
    /// <p>Name to help identify the token. This can be any UTF-8 encoded text. <i>This field is exposed to all stage participants and should not be used for personally identifying, confidential, or sensitive information.</i> </p>
    #[doc(hidden)]
    pub user_id: std::option::Option<std::string::String>,
    /// <p>Application-provided attributes to encode into the token and attach to a stage. <i>This field is exposed to all stage participants and should not be used for personally identifying, confidential, or sensitive information.</i> </p>
    #[doc(hidden)]
    pub attributes:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>Duration (in minutes), after which the participant token expires. Default: 60 (1 hour).</p>
    #[doc(hidden)]
    pub duration: i32,
    /// <p>Set of capabilities that the user is allowed to perform in the stage.</p>
    #[doc(hidden)]
    pub capabilities: std::option::Option<std::vec::Vec<crate::types::ParticipantTokenCapability>>,
    /// <p>ISO 8601 timestamp (returned as a string) for when this token expires.</p>
    #[doc(hidden)]
    pub expiration_time: std::option::Option<aws_smithy_types::DateTime>,
}
impl ParticipantToken {
    /// <p>Unique identifier for this participant token, assigned by IVS.</p>
    pub fn participant_id(&self) -> std::option::Option<&str> {
        self.participant_id.as_deref()
    }
    /// <p>The issued client token, encrypted.</p>
    pub fn token(&self) -> std::option::Option<&str> {
        self.token.as_deref()
    }
    /// <p>Name to help identify the token. This can be any UTF-8 encoded text. <i>This field is exposed to all stage participants and should not be used for personally identifying, confidential, or sensitive information.</i> </p>
    pub fn user_id(&self) -> std::option::Option<&str> {
        self.user_id.as_deref()
    }
    /// <p>Application-provided attributes to encode into the token and attach to a stage. <i>This field is exposed to all stage participants and should not be used for personally identifying, confidential, or sensitive information.</i> </p>
    pub fn attributes(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.attributes.as_ref()
    }
    /// <p>Duration (in minutes), after which the participant token expires. Default: 60 (1 hour).</p>
    pub fn duration(&self) -> i32 {
        self.duration
    }
    /// <p>Set of capabilities that the user is allowed to perform in the stage.</p>
    pub fn capabilities(&self) -> std::option::Option<&[crate::types::ParticipantTokenCapability]> {
        self.capabilities.as_deref()
    }
    /// <p>ISO 8601 timestamp (returned as a string) for when this token expires.</p>
    pub fn expiration_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.expiration_time.as_ref()
    }
}
impl ParticipantToken {
    /// Creates a new builder-style object to manufacture [`ParticipantToken`](crate::types::ParticipantToken).
    pub fn builder() -> crate::types::builders::ParticipantTokenBuilder {
        crate::types::builders::ParticipantTokenBuilder::default()
    }
}

/// A builder for [`ParticipantToken`](crate::types::ParticipantToken).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ParticipantTokenBuilder {
    pub(crate) participant_id: std::option::Option<std::string::String>,
    pub(crate) token: std::option::Option<std::string::String>,
    pub(crate) user_id: std::option::Option<std::string::String>,
    pub(crate) attributes:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) duration: std::option::Option<i32>,
    pub(crate) capabilities:
        std::option::Option<std::vec::Vec<crate::types::ParticipantTokenCapability>>,
    pub(crate) expiration_time: std::option::Option<aws_smithy_types::DateTime>,
}
impl ParticipantTokenBuilder {
    /// <p>Unique identifier for this participant token, assigned by IVS.</p>
    pub fn participant_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.participant_id = Some(input.into());
        self
    }
    /// <p>Unique identifier for this participant token, assigned by IVS.</p>
    pub fn set_participant_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.participant_id = input;
        self
    }
    /// <p>The issued client token, encrypted.</p>
    pub fn token(mut self, input: impl Into<std::string::String>) -> Self {
        self.token = Some(input.into());
        self
    }
    /// <p>The issued client token, encrypted.</p>
    pub fn set_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.token = input;
        self
    }
    /// <p>Name to help identify the token. This can be any UTF-8 encoded text. <i>This field is exposed to all stage participants and should not be used for personally identifying, confidential, or sensitive information.</i> </p>
    pub fn user_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.user_id = Some(input.into());
        self
    }
    /// <p>Name to help identify the token. This can be any UTF-8 encoded text. <i>This field is exposed to all stage participants and should not be used for personally identifying, confidential, or sensitive information.</i> </p>
    pub fn set_user_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.user_id = input;
        self
    }
    /// Adds a key-value pair to `attributes`.
    ///
    /// To override the contents of this collection use [`set_attributes`](Self::set_attributes).
    ///
    /// <p>Application-provided attributes to encode into the token and attach to a stage. <i>This field is exposed to all stage participants and should not be used for personally identifying, confidential, or sensitive information.</i> </p>
    pub fn attributes(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.attributes.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.attributes = Some(hash_map);
        self
    }
    /// <p>Application-provided attributes to encode into the token and attach to a stage. <i>This field is exposed to all stage participants and should not be used for personally identifying, confidential, or sensitive information.</i> </p>
    pub fn set_attributes(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.attributes = input;
        self
    }
    /// <p>Duration (in minutes), after which the participant token expires. Default: 60 (1 hour).</p>
    pub fn duration(mut self, input: i32) -> Self {
        self.duration = Some(input);
        self
    }
    /// <p>Duration (in minutes), after which the participant token expires. Default: 60 (1 hour).</p>
    pub fn set_duration(mut self, input: std::option::Option<i32>) -> Self {
        self.duration = input;
        self
    }
    /// Appends an item to `capabilities`.
    ///
    /// To override the contents of this collection use [`set_capabilities`](Self::set_capabilities).
    ///
    /// <p>Set of capabilities that the user is allowed to perform in the stage.</p>
    pub fn capabilities(mut self, input: crate::types::ParticipantTokenCapability) -> Self {
        let mut v = self.capabilities.unwrap_or_default();
        v.push(input);
        self.capabilities = Some(v);
        self
    }
    /// <p>Set of capabilities that the user is allowed to perform in the stage.</p>
    pub fn set_capabilities(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ParticipantTokenCapability>>,
    ) -> Self {
        self.capabilities = input;
        self
    }
    /// <p>ISO 8601 timestamp (returned as a string) for when this token expires.</p>
    pub fn expiration_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.expiration_time = Some(input);
        self
    }
    /// <p>ISO 8601 timestamp (returned as a string) for when this token expires.</p>
    pub fn set_expiration_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.expiration_time = input;
        self
    }
    /// Consumes the builder and constructs a [`ParticipantToken`](crate::types::ParticipantToken).
    pub fn build(self) -> crate::types::ParticipantToken {
        crate::types::ParticipantToken {
            participant_id: self.participant_id,
            token: self.token,
            user_id: self.user_id,
            attributes: self.attributes,
            duration: self.duration.unwrap_or_default(),
            capabilities: self.capabilities,
            expiration_time: self.expiration_time,
        }
    }
}
