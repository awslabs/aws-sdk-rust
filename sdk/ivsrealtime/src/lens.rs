// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_list_compositions_output_output_next_token(
    input: &crate::operation::list_compositions::ListCompositionsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_encoder_configurations_output_output_next_token(
    input: &crate::operation::list_encoder_configurations::ListEncoderConfigurationsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_ingest_configurations_output_output_next_token(
    input: &crate::operation::list_ingest_configurations::ListIngestConfigurationsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_participant_events_output_output_next_token(
    input: &crate::operation::list_participant_events::ListParticipantEventsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_participants_output_output_next_token(
    input: &crate::operation::list_participants::ListParticipantsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_public_keys_output_output_next_token(
    input: &crate::operation::list_public_keys::ListPublicKeysOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_stage_sessions_output_output_next_token(
    input: &crate::operation::list_stage_sessions::ListStageSessionsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_stages_output_output_next_token(
    input: &crate::operation::list_stages::ListStagesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_storage_configurations_output_output_next_token(
    input: &crate::operation::list_storage_configurations::ListStorageConfigurationsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_ingest_configurations_output_output_ingest_configurations(
    input: crate::operation::list_ingest_configurations::ListIngestConfigurationsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::IngestConfigurationSummary>> {
    let input = input.ingest_configurations;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_public_keys_output_output_public_keys(
    input: crate::operation::list_public_keys::ListPublicKeysOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::PublicKeySummary>> {
    let input = input.public_keys;
    ::std::option::Option::Some(input)
}
