// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_auto_participant_recording_configuration(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::AutoParticipantRecordingConfiguration,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    {
        object.key("storageConfigurationArn").string(input.storage_configuration_arn.as_str());
    }
    if let Some(var_1) = &input.media_types {
        let mut array_2 = object.key("mediaTypes").start_array();
        for item_3 in var_1 {
            {
                array_2.value().string(item_3.as_str());
            }
        }
        array_2.finish();
    }
    if let Some(var_4) = &input.thumbnail_configuration {
        #[allow(unused_mut)]
        let mut object_5 = object.key("thumbnailConfiguration").start_object();
        crate::protocol_serde::shape_participant_thumbnail_configuration::ser_participant_thumbnail_configuration(&mut object_5, var_4)?;
        object_5.finish();
    }
    if input.recording_reconnect_window_seconds != 0 {
        object.key("recordingReconnectWindowSeconds").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((input.recording_reconnect_window_seconds).into()),
        );
    }
    if let Some(var_6) = &input.hls_configuration {
        #[allow(unused_mut)]
        let mut object_7 = object.key("hlsConfiguration").start_object();
        crate::protocol_serde::shape_participant_recording_hls_configuration::ser_participant_recording_hls_configuration(&mut object_7, var_6)?;
        object_7.finish();
    }
    if input.record_participant_replicas {
        object.key("recordParticipantReplicas").boolean(input.record_participant_replicas);
    }
    Ok(())
}

pub(crate) fn de_auto_participant_recording_configuration<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> ::std::result::Result<Option<crate::types::AutoParticipantRecordingConfiguration>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::AutoParticipantRecordingConfigurationBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "storageConfigurationArn" => {
                            builder = builder.set_storage_configuration_arn(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "mediaTypes" => {
                            builder = builder.set_media_types(
                                crate::protocol_serde::shape_participant_recording_media_type_list::de_participant_recording_media_type_list(tokens)?,
                            );
                        }
                        "thumbnailConfiguration" => {
                            builder = builder.set_thumbnail_configuration(
                                crate::protocol_serde::shape_participant_thumbnail_configuration::de_participant_thumbnail_configuration(tokens)?,
                            );
                        }
                        "recordingReconnectWindowSeconds" => {
                            builder = builder.set_recording_reconnect_window_seconds(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "hlsConfiguration" => {
                            builder = builder.set_hls_configuration(
                                crate::protocol_serde::shape_participant_recording_hls_configuration::de_participant_recording_hls_configuration(
                                    tokens,
                                )?,
                            );
                        }
                        "recordParticipantReplicas" => {
                            builder =
                                builder.set_record_participant_replicas(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {other:?}"
                        )))
                    }
                }
            }
            Ok(Some(
                crate::serde_util::auto_participant_recording_configuration_correct_errors(builder)
                    .build()
                    .map_err(|err| ::aws_smithy_json::deserialize::error::DeserializeError::custom_source("Response was invalid", err))?,
            ))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
