// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn de_create_encoder_configuration_http_error(
    _response_status: u16,
    _response_headers: &::aws_smithy_runtime_api::http::Headers,
    _response_body: &[u8],
) -> std::result::Result<
    crate::operation::create_encoder_configuration::CreateEncoderConfigurationOutput,
    crate::operation::create_encoder_configuration::CreateEncoderConfigurationError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(_response_status, _response_headers, _response_body)
        .map_err(crate::operation::create_encoder_configuration::CreateEncoderConfigurationError::unhandled)?;
    generic_builder = ::aws_types::request_id::apply_request_id(generic_builder, _response_headers);
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::operation::create_encoder_configuration::CreateEncoderConfigurationError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "AccessDeniedException" => crate::operation::create_encoder_configuration::CreateEncoderConfigurationError::AccessDeniedException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::AccessDeniedExceptionBuilder::default();
                output = crate::protocol_serde::shape_access_denied_exception::de_access_denied_exception_json_err(_response_body, output)
                    .map_err(crate::operation::create_encoder_configuration::CreateEncoderConfigurationError::unhandled)?;
                output = output.set_access_control_allow_origin(
                    crate::protocol_serde::shape_access_denied_exception::de_access_control_allow_origin_header(_response_headers).map_err(|_| {
                        crate::operation::create_encoder_configuration::CreateEncoderConfigurationError::unhandled(
                            "Failed to parse accessControlAllowOrigin from header `Access-Control-Allow-Origin",
                        )
                    })?,
                );
                output = output.set_access_control_expose_headers(
                    crate::protocol_serde::shape_access_denied_exception::de_access_control_expose_headers_header(_response_headers).map_err(
                        |_| {
                            crate::operation::create_encoder_configuration::CreateEncoderConfigurationError::unhandled(
                                "Failed to parse accessControlExposeHeaders from header `Access-Control-Expose-Headers",
                            )
                        },
                    )?,
                );
                output = output.set_cache_control(
                    crate::protocol_serde::shape_access_denied_exception::de_cache_control_header(_response_headers).map_err(|_| {
                        crate::operation::create_encoder_configuration::CreateEncoderConfigurationError::unhandled(
                            "Failed to parse cacheControl from header `Cache-Control",
                        )
                    })?,
                );
                output = output.set_content_security_policy(
                    crate::protocol_serde::shape_access_denied_exception::de_content_security_policy_header(_response_headers).map_err(|_| {
                        crate::operation::create_encoder_configuration::CreateEncoderConfigurationError::unhandled(
                            "Failed to parse contentSecurityPolicy from header `Content-Security-Policy",
                        )
                    })?,
                );
                output = output.set_strict_transport_security(
                    crate::protocol_serde::shape_access_denied_exception::de_strict_transport_security_header(_response_headers).map_err(|_| {
                        crate::operation::create_encoder_configuration::CreateEncoderConfigurationError::unhandled(
                            "Failed to parse strictTransportSecurity from header `Strict-Transport-Security",
                        )
                    })?,
                );
                output = output.set_x_amzn_error_type(
                    crate::protocol_serde::shape_access_denied_exception::de_x_amzn_error_type_header(_response_headers).map_err(|_| {
                        crate::operation::create_encoder_configuration::CreateEncoderConfigurationError::unhandled(
                            "Failed to parse xAmznErrorType from header `x-amzn-ErrorType",
                        )
                    })?,
                );
                output = output.set_x_content_type_options(
                    crate::protocol_serde::shape_access_denied_exception::de_x_content_type_options_header(_response_headers).map_err(|_| {
                        crate::operation::create_encoder_configuration::CreateEncoderConfigurationError::unhandled(
                            "Failed to parse xContentTypeOptions from header `X-Content-Type-Options",
                        )
                    })?,
                );
                output = output.set_x_frame_options(
                    crate::protocol_serde::shape_access_denied_exception::de_x_frame_options_header(_response_headers).map_err(|_| {
                        crate::operation::create_encoder_configuration::CreateEncoderConfigurationError::unhandled(
                            "Failed to parse xFrameOptions from header `X-Frame-Options",
                        )
                    })?,
                );
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "ConflictException" => crate::operation::create_encoder_configuration::CreateEncoderConfigurationError::ConflictException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::ConflictExceptionBuilder::default();
                output = crate::protocol_serde::shape_conflict_exception::de_conflict_exception_json_err(_response_body, output)
                    .map_err(crate::operation::create_encoder_configuration::CreateEncoderConfigurationError::unhandled)?;
                output = output.set_access_control_allow_origin(
                    crate::protocol_serde::shape_conflict_exception::de_access_control_allow_origin_header(_response_headers).map_err(|_| {
                        crate::operation::create_encoder_configuration::CreateEncoderConfigurationError::unhandled(
                            "Failed to parse accessControlAllowOrigin from header `Access-Control-Allow-Origin",
                        )
                    })?,
                );
                output = output.set_access_control_expose_headers(
                    crate::protocol_serde::shape_conflict_exception::de_access_control_expose_headers_header(_response_headers).map_err(|_| {
                        crate::operation::create_encoder_configuration::CreateEncoderConfigurationError::unhandled(
                            "Failed to parse accessControlExposeHeaders from header `Access-Control-Expose-Headers",
                        )
                    })?,
                );
                output = output.set_cache_control(
                    crate::protocol_serde::shape_conflict_exception::de_cache_control_header(_response_headers).map_err(|_| {
                        crate::operation::create_encoder_configuration::CreateEncoderConfigurationError::unhandled(
                            "Failed to parse cacheControl from header `Cache-Control",
                        )
                    })?,
                );
                output = output.set_content_security_policy(
                    crate::protocol_serde::shape_conflict_exception::de_content_security_policy_header(_response_headers).map_err(|_| {
                        crate::operation::create_encoder_configuration::CreateEncoderConfigurationError::unhandled(
                            "Failed to parse contentSecurityPolicy from header `Content-Security-Policy",
                        )
                    })?,
                );
                output = output.set_strict_transport_security(
                    crate::protocol_serde::shape_conflict_exception::de_strict_transport_security_header(_response_headers).map_err(|_| {
                        crate::operation::create_encoder_configuration::CreateEncoderConfigurationError::unhandled(
                            "Failed to parse strictTransportSecurity from header `Strict-Transport-Security",
                        )
                    })?,
                );
                output = output.set_x_amzn_error_type(
                    crate::protocol_serde::shape_conflict_exception::de_x_amzn_error_type_header(_response_headers).map_err(|_| {
                        crate::operation::create_encoder_configuration::CreateEncoderConfigurationError::unhandled(
                            "Failed to parse xAmznErrorType from header `x-amzn-ErrorType",
                        )
                    })?,
                );
                output = output.set_x_content_type_options(
                    crate::protocol_serde::shape_conflict_exception::de_x_content_type_options_header(_response_headers).map_err(|_| {
                        crate::operation::create_encoder_configuration::CreateEncoderConfigurationError::unhandled(
                            "Failed to parse xContentTypeOptions from header `X-Content-Type-Options",
                        )
                    })?,
                );
                output = output.set_x_frame_options(
                    crate::protocol_serde::shape_conflict_exception::de_x_frame_options_header(_response_headers).map_err(|_| {
                        crate::operation::create_encoder_configuration::CreateEncoderConfigurationError::unhandled(
                            "Failed to parse xFrameOptions from header `X-Frame-Options",
                        )
                    })?,
                );
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InternalServerException" => crate::operation::create_encoder_configuration::CreateEncoderConfigurationError::InternalServerException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::InternalServerExceptionBuilder::default();
                output = crate::protocol_serde::shape_internal_server_exception::de_internal_server_exception_json_err(_response_body, output)
                    .map_err(crate::operation::create_encoder_configuration::CreateEncoderConfigurationError::unhandled)?;
                output = output.set_access_control_allow_origin(
                    crate::protocol_serde::shape_internal_server_exception::de_access_control_allow_origin_header(_response_headers).map_err(
                        |_| {
                            crate::operation::create_encoder_configuration::CreateEncoderConfigurationError::unhandled(
                                "Failed to parse accessControlAllowOrigin from header `Access-Control-Allow-Origin",
                            )
                        },
                    )?,
                );
                output = output.set_access_control_expose_headers(
                    crate::protocol_serde::shape_internal_server_exception::de_access_control_expose_headers_header(_response_headers).map_err(
                        |_| {
                            crate::operation::create_encoder_configuration::CreateEncoderConfigurationError::unhandled(
                                "Failed to parse accessControlExposeHeaders from header `Access-Control-Expose-Headers",
                            )
                        },
                    )?,
                );
                output = output.set_cache_control(
                    crate::protocol_serde::shape_internal_server_exception::de_cache_control_header(_response_headers).map_err(|_| {
                        crate::operation::create_encoder_configuration::CreateEncoderConfigurationError::unhandled(
                            "Failed to parse cacheControl from header `Cache-Control",
                        )
                    })?,
                );
                output = output.set_content_security_policy(
                    crate::protocol_serde::shape_internal_server_exception::de_content_security_policy_header(_response_headers).map_err(|_| {
                        crate::operation::create_encoder_configuration::CreateEncoderConfigurationError::unhandled(
                            "Failed to parse contentSecurityPolicy from header `Content-Security-Policy",
                        )
                    })?,
                );
                output = output.set_strict_transport_security(
                    crate::protocol_serde::shape_internal_server_exception::de_strict_transport_security_header(_response_headers).map_err(|_| {
                        crate::operation::create_encoder_configuration::CreateEncoderConfigurationError::unhandled(
                            "Failed to parse strictTransportSecurity from header `Strict-Transport-Security",
                        )
                    })?,
                );
                output = output.set_x_amzn_error_type(
                    crate::protocol_serde::shape_internal_server_exception::de_x_amzn_error_type_header(_response_headers).map_err(|_| {
                        crate::operation::create_encoder_configuration::CreateEncoderConfigurationError::unhandled(
                            "Failed to parse xAmznErrorType from header `x-amzn-ErrorType",
                        )
                    })?,
                );
                output = output.set_x_content_type_options(
                    crate::protocol_serde::shape_internal_server_exception::de_x_content_type_options_header(_response_headers).map_err(|_| {
                        crate::operation::create_encoder_configuration::CreateEncoderConfigurationError::unhandled(
                            "Failed to parse xContentTypeOptions from header `X-Content-Type-Options",
                        )
                    })?,
                );
                output = output.set_x_frame_options(
                    crate::protocol_serde::shape_internal_server_exception::de_x_frame_options_header(_response_headers).map_err(|_| {
                        crate::operation::create_encoder_configuration::CreateEncoderConfigurationError::unhandled(
                            "Failed to parse xFrameOptions from header `X-Frame-Options",
                        )
                    })?,
                );
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "PendingVerification" => crate::operation::create_encoder_configuration::CreateEncoderConfigurationError::PendingVerification({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::PendingVerificationBuilder::default();
                output = crate::protocol_serde::shape_pending_verification::de_pending_verification_json_err(_response_body, output)
                    .map_err(crate::operation::create_encoder_configuration::CreateEncoderConfigurationError::unhandled)?;
                output = output.set_access_control_allow_origin(
                    crate::protocol_serde::shape_pending_verification::de_access_control_allow_origin_header(_response_headers).map_err(|_| {
                        crate::operation::create_encoder_configuration::CreateEncoderConfigurationError::unhandled(
                            "Failed to parse accessControlAllowOrigin from header `Access-Control-Allow-Origin",
                        )
                    })?,
                );
                output = output.set_access_control_expose_headers(
                    crate::protocol_serde::shape_pending_verification::de_access_control_expose_headers_header(_response_headers).map_err(|_| {
                        crate::operation::create_encoder_configuration::CreateEncoderConfigurationError::unhandled(
                            "Failed to parse accessControlExposeHeaders from header `Access-Control-Expose-Headers",
                        )
                    })?,
                );
                output = output.set_cache_control(
                    crate::protocol_serde::shape_pending_verification::de_cache_control_header(_response_headers).map_err(|_| {
                        crate::operation::create_encoder_configuration::CreateEncoderConfigurationError::unhandled(
                            "Failed to parse cacheControl from header `Cache-Control",
                        )
                    })?,
                );
                output = output.set_content_security_policy(
                    crate::protocol_serde::shape_pending_verification::de_content_security_policy_header(_response_headers).map_err(|_| {
                        crate::operation::create_encoder_configuration::CreateEncoderConfigurationError::unhandled(
                            "Failed to parse contentSecurityPolicy from header `Content-Security-Policy",
                        )
                    })?,
                );
                output = output.set_strict_transport_security(
                    crate::protocol_serde::shape_pending_verification::de_strict_transport_security_header(_response_headers).map_err(|_| {
                        crate::operation::create_encoder_configuration::CreateEncoderConfigurationError::unhandled(
                            "Failed to parse strictTransportSecurity from header `Strict-Transport-Security",
                        )
                    })?,
                );
                output = output.set_x_amzn_error_type(
                    crate::protocol_serde::shape_pending_verification::de_x_amzn_error_type_header(_response_headers).map_err(|_| {
                        crate::operation::create_encoder_configuration::CreateEncoderConfigurationError::unhandled(
                            "Failed to parse xAmznErrorType from header `x-amzn-ErrorType",
                        )
                    })?,
                );
                output = output.set_x_content_type_options(
                    crate::protocol_serde::shape_pending_verification::de_x_content_type_options_header(_response_headers).map_err(|_| {
                        crate::operation::create_encoder_configuration::CreateEncoderConfigurationError::unhandled(
                            "Failed to parse xContentTypeOptions from header `X-Content-Type-Options",
                        )
                    })?,
                );
                output = output.set_x_frame_options(
                    crate::protocol_serde::shape_pending_verification::de_x_frame_options_header(_response_headers).map_err(|_| {
                        crate::operation::create_encoder_configuration::CreateEncoderConfigurationError::unhandled(
                            "Failed to parse xFrameOptions from header `X-Frame-Options",
                        )
                    })?,
                );
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "ResourceNotFoundException" => crate::operation::create_encoder_configuration::CreateEncoderConfigurationError::ResourceNotFoundException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::ResourceNotFoundExceptionBuilder::default();
                output = crate::protocol_serde::shape_resource_not_found_exception::de_resource_not_found_exception_json_err(_response_body, output)
                    .map_err(crate::operation::create_encoder_configuration::CreateEncoderConfigurationError::unhandled)?;
                output = output.set_access_control_allow_origin(
                    crate::protocol_serde::shape_resource_not_found_exception::de_access_control_allow_origin_header(_response_headers).map_err(
                        |_| {
                            crate::operation::create_encoder_configuration::CreateEncoderConfigurationError::unhandled(
                                "Failed to parse accessControlAllowOrigin from header `Access-Control-Allow-Origin",
                            )
                        },
                    )?,
                );
                output = output.set_access_control_expose_headers(
                    crate::protocol_serde::shape_resource_not_found_exception::de_access_control_expose_headers_header(_response_headers).map_err(
                        |_| {
                            crate::operation::create_encoder_configuration::CreateEncoderConfigurationError::unhandled(
                                "Failed to parse accessControlExposeHeaders from header `Access-Control-Expose-Headers",
                            )
                        },
                    )?,
                );
                output = output.set_cache_control(
                    crate::protocol_serde::shape_resource_not_found_exception::de_cache_control_header(_response_headers).map_err(|_| {
                        crate::operation::create_encoder_configuration::CreateEncoderConfigurationError::unhandled(
                            "Failed to parse cacheControl from header `Cache-Control",
                        )
                    })?,
                );
                output = output.set_content_security_policy(
                    crate::protocol_serde::shape_resource_not_found_exception::de_content_security_policy_header(_response_headers).map_err(
                        |_| {
                            crate::operation::create_encoder_configuration::CreateEncoderConfigurationError::unhandled(
                                "Failed to parse contentSecurityPolicy from header `Content-Security-Policy",
                            )
                        },
                    )?,
                );
                output = output.set_strict_transport_security(
                    crate::protocol_serde::shape_resource_not_found_exception::de_strict_transport_security_header(_response_headers).map_err(
                        |_| {
                            crate::operation::create_encoder_configuration::CreateEncoderConfigurationError::unhandled(
                                "Failed to parse strictTransportSecurity from header `Strict-Transport-Security",
                            )
                        },
                    )?,
                );
                output = output.set_x_amzn_error_type(
                    crate::protocol_serde::shape_resource_not_found_exception::de_x_amzn_error_type_header(_response_headers).map_err(|_| {
                        crate::operation::create_encoder_configuration::CreateEncoderConfigurationError::unhandled(
                            "Failed to parse xAmznErrorType from header `x-amzn-ErrorType",
                        )
                    })?,
                );
                output = output.set_x_content_type_options(
                    crate::protocol_serde::shape_resource_not_found_exception::de_x_content_type_options_header(_response_headers).map_err(|_| {
                        crate::operation::create_encoder_configuration::CreateEncoderConfigurationError::unhandled(
                            "Failed to parse xContentTypeOptions from header `X-Content-Type-Options",
                        )
                    })?,
                );
                output = output.set_x_frame_options(
                    crate::protocol_serde::shape_resource_not_found_exception::de_x_frame_options_header(_response_headers).map_err(|_| {
                        crate::operation::create_encoder_configuration::CreateEncoderConfigurationError::unhandled(
                            "Failed to parse xFrameOptions from header `X-Frame-Options",
                        )
                    })?,
                );
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "ServiceQuotaExceededException" => {
            crate::operation::create_encoder_configuration::CreateEncoderConfigurationError::ServiceQuotaExceededException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::ServiceQuotaExceededExceptionBuilder::default();
                    output = crate::protocol_serde::shape_service_quota_exceeded_exception::de_service_quota_exceeded_exception_json_err(
                        _response_body,
                        output,
                    )
                    .map_err(crate::operation::create_encoder_configuration::CreateEncoderConfigurationError::unhandled)?;
                    output = output.set_access_control_allow_origin(
                        crate::protocol_serde::shape_service_quota_exceeded_exception::de_access_control_allow_origin_header(_response_headers)
                            .map_err(|_| {
                                crate::operation::create_encoder_configuration::CreateEncoderConfigurationError::unhandled(
                                    "Failed to parse accessControlAllowOrigin from header `Access-Control-Allow-Origin",
                                )
                            })?,
                    );
                    output = output.set_access_control_expose_headers(
                        crate::protocol_serde::shape_service_quota_exceeded_exception::de_access_control_expose_headers_header(_response_headers)
                            .map_err(|_| {
                                crate::operation::create_encoder_configuration::CreateEncoderConfigurationError::unhandled(
                                    "Failed to parse accessControlExposeHeaders from header `Access-Control-Expose-Headers",
                                )
                            })?,
                    );
                    output = output.set_cache_control(
                        crate::protocol_serde::shape_service_quota_exceeded_exception::de_cache_control_header(_response_headers).map_err(|_| {
                            crate::operation::create_encoder_configuration::CreateEncoderConfigurationError::unhandled(
                                "Failed to parse cacheControl from header `Cache-Control",
                            )
                        })?,
                    );
                    output = output.set_content_security_policy(
                        crate::protocol_serde::shape_service_quota_exceeded_exception::de_content_security_policy_header(_response_headers).map_err(
                            |_| {
                                crate::operation::create_encoder_configuration::CreateEncoderConfigurationError::unhandled(
                                    "Failed to parse contentSecurityPolicy from header `Content-Security-Policy",
                                )
                            },
                        )?,
                    );
                    output = output.set_strict_transport_security(
                        crate::protocol_serde::shape_service_quota_exceeded_exception::de_strict_transport_security_header(_response_headers)
                            .map_err(|_| {
                                crate::operation::create_encoder_configuration::CreateEncoderConfigurationError::unhandled(
                                    "Failed to parse strictTransportSecurity from header `Strict-Transport-Security",
                                )
                            })?,
                    );
                    output = output.set_x_amzn_error_type(
                        crate::protocol_serde::shape_service_quota_exceeded_exception::de_x_amzn_error_type_header(_response_headers).map_err(
                            |_| {
                                crate::operation::create_encoder_configuration::CreateEncoderConfigurationError::unhandled(
                                    "Failed to parse xAmznErrorType from header `x-amzn-ErrorType",
                                )
                            },
                        )?,
                    );
                    output = output.set_x_content_type_options(
                        crate::protocol_serde::shape_service_quota_exceeded_exception::de_x_content_type_options_header(_response_headers).map_err(
                            |_| {
                                crate::operation::create_encoder_configuration::CreateEncoderConfigurationError::unhandled(
                                    "Failed to parse xContentTypeOptions from header `X-Content-Type-Options",
                                )
                            },
                        )?,
                    );
                    output = output.set_x_frame_options(
                        crate::protocol_serde::shape_service_quota_exceeded_exception::de_x_frame_options_header(_response_headers).map_err(
                            |_| {
                                crate::operation::create_encoder_configuration::CreateEncoderConfigurationError::unhandled(
                                    "Failed to parse xFrameOptions from header `X-Frame-Options",
                                )
                            },
                        )?,
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "ValidationException" => crate::operation::create_encoder_configuration::CreateEncoderConfigurationError::ValidationException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::ValidationExceptionBuilder::default();
                output = crate::protocol_serde::shape_validation_exception::de_validation_exception_json_err(_response_body, output)
                    .map_err(crate::operation::create_encoder_configuration::CreateEncoderConfigurationError::unhandled)?;
                output = output.set_access_control_allow_origin(
                    crate::protocol_serde::shape_validation_exception::de_access_control_allow_origin_header(_response_headers).map_err(|_| {
                        crate::operation::create_encoder_configuration::CreateEncoderConfigurationError::unhandled(
                            "Failed to parse accessControlAllowOrigin from header `Access-Control-Allow-Origin",
                        )
                    })?,
                );
                output = output.set_access_control_expose_headers(
                    crate::protocol_serde::shape_validation_exception::de_access_control_expose_headers_header(_response_headers).map_err(|_| {
                        crate::operation::create_encoder_configuration::CreateEncoderConfigurationError::unhandled(
                            "Failed to parse accessControlExposeHeaders from header `Access-Control-Expose-Headers",
                        )
                    })?,
                );
                output = output.set_cache_control(
                    crate::protocol_serde::shape_validation_exception::de_cache_control_header(_response_headers).map_err(|_| {
                        crate::operation::create_encoder_configuration::CreateEncoderConfigurationError::unhandled(
                            "Failed to parse cacheControl from header `Cache-Control",
                        )
                    })?,
                );
                output = output.set_content_security_policy(
                    crate::protocol_serde::shape_validation_exception::de_content_security_policy_header(_response_headers).map_err(|_| {
                        crate::operation::create_encoder_configuration::CreateEncoderConfigurationError::unhandled(
                            "Failed to parse contentSecurityPolicy from header `Content-Security-Policy",
                        )
                    })?,
                );
                output = output.set_strict_transport_security(
                    crate::protocol_serde::shape_validation_exception::de_strict_transport_security_header(_response_headers).map_err(|_| {
                        crate::operation::create_encoder_configuration::CreateEncoderConfigurationError::unhandled(
                            "Failed to parse strictTransportSecurity from header `Strict-Transport-Security",
                        )
                    })?,
                );
                output = output.set_x_amzn_error_type(
                    crate::protocol_serde::shape_validation_exception::de_x_amzn_error_type_header(_response_headers).map_err(|_| {
                        crate::operation::create_encoder_configuration::CreateEncoderConfigurationError::unhandled(
                            "Failed to parse xAmznErrorType from header `x-amzn-ErrorType",
                        )
                    })?,
                );
                output = output.set_x_content_type_options(
                    crate::protocol_serde::shape_validation_exception::de_x_content_type_options_header(_response_headers).map_err(|_| {
                        crate::operation::create_encoder_configuration::CreateEncoderConfigurationError::unhandled(
                            "Failed to parse xContentTypeOptions from header `X-Content-Type-Options",
                        )
                    })?,
                );
                output = output.set_x_frame_options(
                    crate::protocol_serde::shape_validation_exception::de_x_frame_options_header(_response_headers).map_err(|_| {
                        crate::operation::create_encoder_configuration::CreateEncoderConfigurationError::unhandled(
                            "Failed to parse xFrameOptions from header `X-Frame-Options",
                        )
                    })?,
                );
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        _ => crate::operation::create_encoder_configuration::CreateEncoderConfigurationError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_create_encoder_configuration_http_response(
    _response_status: u16,
    _response_headers: &::aws_smithy_runtime_api::http::Headers,
    _response_body: &[u8],
) -> std::result::Result<
    crate::operation::create_encoder_configuration::CreateEncoderConfigurationOutput,
    crate::operation::create_encoder_configuration::CreateEncoderConfigurationError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::operation::create_encoder_configuration::builders::CreateEncoderConfigurationOutputBuilder::default();
        output = crate::protocol_serde::shape_create_encoder_configuration::de_create_encoder_configuration(_response_body, output)
            .map_err(crate::operation::create_encoder_configuration::CreateEncoderConfigurationError::unhandled)?;
        output._set_request_id(::aws_types::request_id::RequestId::request_id(_response_headers).map(str::to_string));
        output.build()
    })
}

pub fn ser_create_encoder_configuration_input(
    input: &crate::operation::create_encoder_configuration::CreateEncoderConfigurationInput,
) -> ::std::result::Result<::aws_smithy_types::body::SdkBody, ::aws_smithy_types::error::operation::SerializationError> {
    let mut out = String::new();
    let mut object = ::aws_smithy_json::serialize::JsonObjectWriter::new(&mut out);
    crate::protocol_serde::shape_create_encoder_configuration_input::ser_create_encoder_configuration_input_input(&mut object, input)?;
    object.finish();
    Ok(::aws_smithy_types::body::SdkBody::from(out))
}

pub(crate) fn de_create_encoder_configuration(
    value: &[u8],
    mut builder: crate::operation::create_encoder_configuration::builders::CreateEncoderConfigurationOutputBuilder,
) -> ::std::result::Result<
    crate::operation::create_encoder_configuration::builders::CreateEncoderConfigurationOutputBuilder,
    ::aws_smithy_json::deserialize::error::DeserializeError,
> {
    let mut tokens_owned = ::aws_smithy_json::deserialize::json_token_iter(crate::protocol_serde::or_empty_doc(value)).peekable();
    let tokens = &mut tokens_owned;
    ::aws_smithy_json::deserialize::token::expect_start_object(tokens.next())?;
    loop {
        match tokens.next().transpose()? {
            Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
            Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                "encoderConfiguration" => {
                    builder =
                        builder.set_encoder_configuration(crate::protocol_serde::shape_encoder_configuration::de_encoder_configuration(tokens)?);
                }
                _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
            },
            other => {
                return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                    "expected object key or end object, found: {other:?}"
                )))
            }
        }
    }
    if tokens.next().is_some() {
        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "found more JSON tokens after completing parsing",
        ));
    }
    Ok(builder)
}
