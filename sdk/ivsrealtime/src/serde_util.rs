// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn list_compositions_output_output_correct_errors(
    mut builder: crate::operation::list_compositions::builders::ListCompositionsOutputBuilder,
) -> crate::operation::list_compositions::builders::ListCompositionsOutputBuilder {
    if builder.compositions.is_none() {
        builder.compositions = Some(Default::default())
    }
    builder
}

pub(crate) fn list_encoder_configurations_output_output_correct_errors(
    mut builder: crate::operation::list_encoder_configurations::builders::ListEncoderConfigurationsOutputBuilder,
) -> crate::operation::list_encoder_configurations::builders::ListEncoderConfigurationsOutputBuilder {
    if builder.encoder_configurations.is_none() {
        builder.encoder_configurations = Some(Default::default())
    }
    builder
}

pub(crate) fn list_ingest_configurations_output_output_correct_errors(
    mut builder: crate::operation::list_ingest_configurations::builders::ListIngestConfigurationsOutputBuilder,
) -> crate::operation::list_ingest_configurations::builders::ListIngestConfigurationsOutputBuilder {
    if builder.ingest_configurations.is_none() {
        builder.ingest_configurations = Some(Default::default())
    }
    builder
}

pub(crate) fn list_participant_events_output_output_correct_errors(
    mut builder: crate::operation::list_participant_events::builders::ListParticipantEventsOutputBuilder,
) -> crate::operation::list_participant_events::builders::ListParticipantEventsOutputBuilder {
    if builder.events.is_none() {
        builder.events = Some(Default::default())
    }
    builder
}

pub(crate) fn list_participants_output_output_correct_errors(
    mut builder: crate::operation::list_participants::builders::ListParticipantsOutputBuilder,
) -> crate::operation::list_participants::builders::ListParticipantsOutputBuilder {
    if builder.participants.is_none() {
        builder.participants = Some(Default::default())
    }
    builder
}

pub(crate) fn list_public_keys_output_output_correct_errors(
    mut builder: crate::operation::list_public_keys::builders::ListPublicKeysOutputBuilder,
) -> crate::operation::list_public_keys::builders::ListPublicKeysOutputBuilder {
    if builder.public_keys.is_none() {
        builder.public_keys = Some(Default::default())
    }
    builder
}

pub(crate) fn list_stage_sessions_output_output_correct_errors(
    mut builder: crate::operation::list_stage_sessions::builders::ListStageSessionsOutputBuilder,
) -> crate::operation::list_stage_sessions::builders::ListStageSessionsOutputBuilder {
    if builder.stage_sessions.is_none() {
        builder.stage_sessions = Some(Default::default())
    }
    builder
}

pub(crate) fn list_stages_output_output_correct_errors(
    mut builder: crate::operation::list_stages::builders::ListStagesOutputBuilder,
) -> crate::operation::list_stages::builders::ListStagesOutputBuilder {
    if builder.stages.is_none() {
        builder.stages = Some(Default::default())
    }
    builder
}

pub(crate) fn list_storage_configurations_output_output_correct_errors(
    mut builder: crate::operation::list_storage_configurations::builders::ListStorageConfigurationsOutputBuilder,
) -> crate::operation::list_storage_configurations::builders::ListStorageConfigurationsOutputBuilder {
    if builder.storage_configurations.is_none() {
        builder.storage_configurations = Some(Default::default())
    }
    builder
}

pub(crate) fn list_tags_for_resource_output_output_correct_errors(
    mut builder: crate::operation::list_tags_for_resource::builders::ListTagsForResourceOutputBuilder,
) -> crate::operation::list_tags_for_resource::builders::ListTagsForResourceOutputBuilder {
    if builder.tags.is_none() {
        builder.tags = Some(Default::default())
    }
    builder
}

pub(crate) fn composition_correct_errors(mut builder: crate::types::builders::CompositionBuilder) -> crate::types::builders::CompositionBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.stage_arn.is_none() {
        builder.stage_arn = Some(Default::default())
    }
    if builder.state.is_none() {
        builder.state = "no value was set".parse::<crate::types::CompositionState>().ok()
    }
    if builder.layout.is_none() {
        builder.layout = {
            let builder = crate::types::builders::LayoutConfigurationBuilder::default();
            Some(builder.build())
        }
    }
    if builder.destinations.is_none() {
        builder.destinations = Some(Default::default())
    }
    builder
}

pub(crate) fn encoder_configuration_correct_errors(
    mut builder: crate::types::builders::EncoderConfigurationBuilder,
) -> crate::types::builders::EncoderConfigurationBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    builder
}

pub(crate) fn ingest_configuration_correct_errors(
    mut builder: crate::types::builders::IngestConfigurationBuilder,
) -> crate::types::builders::IngestConfigurationBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.ingest_protocol.is_none() {
        builder.ingest_protocol = "no value was set".parse::<crate::types::IngestProtocol>().ok()
    }
    if builder.stream_key.is_none() {
        builder.stream_key = Some(Default::default())
    }
    if builder.stage_arn.is_none() {
        builder.stage_arn = Some(Default::default())
    }
    if builder.participant_id.is_none() {
        builder.participant_id = Some(Default::default())
    }
    if builder.state.is_none() {
        builder.state = "no value was set".parse::<crate::types::IngestConfigurationState>().ok()
    }
    builder
}

pub(crate) fn stage_correct_errors(mut builder: crate::types::builders::StageBuilder) -> crate::types::builders::StageBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    builder
}

pub(crate) fn storage_configuration_correct_errors(
    mut builder: crate::types::builders::StorageConfigurationBuilder,
) -> crate::types::builders::StorageConfigurationBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    builder
}

pub(crate) fn auto_participant_recording_configuration_correct_errors(
    mut builder: crate::types::builders::AutoParticipantRecordingConfigurationBuilder,
) -> crate::types::builders::AutoParticipantRecordingConfigurationBuilder {
    if builder.storage_configuration_arn.is_none() {
        builder.storage_configuration_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn composition_summary_correct_errors(
    mut builder: crate::types::builders::CompositionSummaryBuilder,
) -> crate::types::builders::CompositionSummaryBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.stage_arn.is_none() {
        builder.stage_arn = Some(Default::default())
    }
    if builder.destinations.is_none() {
        builder.destinations = Some(Default::default())
    }
    if builder.state.is_none() {
        builder.state = "no value was set".parse::<crate::types::CompositionState>().ok()
    }
    builder
}

pub(crate) fn encoder_configuration_summary_correct_errors(
    mut builder: crate::types::builders::EncoderConfigurationSummaryBuilder,
) -> crate::types::builders::EncoderConfigurationSummaryBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    builder
}

pub(crate) fn ingest_configuration_summary_correct_errors(
    mut builder: crate::types::builders::IngestConfigurationSummaryBuilder,
) -> crate::types::builders::IngestConfigurationSummaryBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.ingest_protocol.is_none() {
        builder.ingest_protocol = "no value was set".parse::<crate::types::IngestProtocol>().ok()
    }
    if builder.stage_arn.is_none() {
        builder.stage_arn = Some(Default::default())
    }
    if builder.participant_id.is_none() {
        builder.participant_id = Some(Default::default())
    }
    if builder.state.is_none() {
        builder.state = "no value was set".parse::<crate::types::IngestConfigurationState>().ok()
    }
    builder
}

pub(crate) fn s3_storage_configuration_correct_errors(
    mut builder: crate::types::builders::S3StorageConfigurationBuilder,
) -> crate::types::builders::S3StorageConfigurationBuilder {
    if builder.bucket_name.is_none() {
        builder.bucket_name = Some(Default::default())
    }
    builder
}

pub(crate) fn stage_summary_correct_errors(mut builder: crate::types::builders::StageSummaryBuilder) -> crate::types::builders::StageSummaryBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    builder
}

pub(crate) fn storage_configuration_summary_correct_errors(
    mut builder: crate::types::builders::StorageConfigurationSummaryBuilder,
) -> crate::types::builders::StorageConfigurationSummaryBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    builder
}

pub(crate) fn destination_correct_errors(mut builder: crate::types::builders::DestinationBuilder) -> crate::types::builders::DestinationBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.state.is_none() {
        builder.state = "no value was set".parse::<crate::types::DestinationState>().ok()
    }
    if builder.configuration.is_none() {
        builder.configuration = {
            let builder = crate::types::builders::DestinationConfigurationBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn destination_summary_correct_errors(
    mut builder: crate::types::builders::DestinationSummaryBuilder,
) -> crate::types::builders::DestinationSummaryBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.state.is_none() {
        builder.state = "no value was set".parse::<crate::types::DestinationState>().ok()
    }
    builder
}

pub(crate) fn channel_destination_configuration_correct_errors(
    mut builder: crate::types::builders::ChannelDestinationConfigurationBuilder,
) -> crate::types::builders::ChannelDestinationConfigurationBuilder {
    if builder.channel_arn.is_none() {
        builder.channel_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn s3_destination_configuration_correct_errors(
    mut builder: crate::types::builders::S3DestinationConfigurationBuilder,
) -> crate::types::builders::S3DestinationConfigurationBuilder {
    if builder.storage_configuration_arn.is_none() {
        builder.storage_configuration_arn = Some(Default::default())
    }
    if builder.encoder_configuration_arns.is_none() {
        builder.encoder_configuration_arns = Some(Default::default())
    }
    builder
}

pub(crate) fn s3_detail_correct_errors(mut builder: crate::types::builders::S3DetailBuilder) -> crate::types::builders::S3DetailBuilder {
    if builder.recording_prefix.is_none() {
        builder.recording_prefix = Some(Default::default())
    }
    builder
}
