// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum Error {
    /// <p></p>
    AccessDeniedException(crate::types::error::AccessDeniedException),
    /// <p></p>
    ConflictException(crate::types::error::ConflictException),
    /// <p></p>
    InternalServerException(crate::types::error::InternalServerException),
    /// <p></p>
    PendingVerification(crate::types::error::PendingVerification),
    /// <p></p>
    ResourceNotFoundException(crate::types::error::ResourceNotFoundException),
    /// <p></p>
    ServiceQuotaExceededException(crate::types::error::ServiceQuotaExceededException),
    /// <p></p>
    ValidationException(crate::types::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    #[deprecated(note = "Matching `Unhandled` directly is not forwards compatible. Instead, match using a \
    variable wildcard pattern and check `.code()`:
     \
    &nbsp;&nbsp;&nbsp;`err if err.code() == Some(\"SpecificExceptionCode\") => { /* handle the error */ }`
     \
    See [`ProvideErrorMetadata`](#impl-ProvideErrorMetadata-for-Error) for what information is available for the error.")]
    Unhandled(crate::error::sealed_unhandled::Unhandled),
}
impl ::std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::PendingVerification(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ServiceQuotaExceededException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(_) => {
                if let ::std::option::Option::Some(code) = ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self) {
                    write!(f, "unhandled error ({code})")
                } else {
                    f.write_str("unhandled error")
                }
            }
        }
    }
}
impl From<::aws_smithy_types::error::operation::BuildError> for Error {
    fn from(value: ::aws_smithy_types::error::operation::BuildError) -> Self {
        Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
            source: value.into(),
            meta: ::std::default::Default::default(),
        })
    }
}
impl ::aws_smithy_types::error::metadata::ProvideErrorMetadata for Error {
    fn meta(&self) -> &::aws_smithy_types::error::metadata::ErrorMetadata {
        match self {
            Self::AccessDeniedException(inner) => inner.meta(),
            Self::ConflictException(inner) => inner.meta(),
            Self::InternalServerException(inner) => inner.meta(),
            Self::PendingVerification(inner) => inner.meta(),
            Self::ResourceNotFoundException(inner) => inner.meta(),
            Self::ServiceQuotaExceededException(inner) => inner.meta(),
            Self::ValidationException(inner) => inner.meta(),
            Self::Unhandled(inner) => &inner.meta,
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_encoder_configuration::CreateEncoderConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_encoder_configuration::CreateEncoderConfigurationError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_encoder_configuration::CreateEncoderConfigurationError> for Error {
    fn from(err: crate::operation::create_encoder_configuration::CreateEncoderConfigurationError) -> Self {
        match err {
            crate::operation::create_encoder_configuration::CreateEncoderConfigurationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_encoder_configuration::CreateEncoderConfigurationError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::create_encoder_configuration::CreateEncoderConfigurationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_encoder_configuration::CreateEncoderConfigurationError::PendingVerification(inner) => {
                Error::PendingVerification(inner)
            }
            crate::operation::create_encoder_configuration::CreateEncoderConfigurationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_encoder_configuration::CreateEncoderConfigurationError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_encoder_configuration::CreateEncoderConfigurationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::create_encoder_configuration::CreateEncoderConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_ingest_configuration::CreateIngestConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_ingest_configuration::CreateIngestConfigurationError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_ingest_configuration::CreateIngestConfigurationError> for Error {
    fn from(err: crate::operation::create_ingest_configuration::CreateIngestConfigurationError) -> Self {
        match err {
            crate::operation::create_ingest_configuration::CreateIngestConfigurationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_ingest_configuration::CreateIngestConfigurationError::PendingVerification(inner) => {
                Error::PendingVerification(inner)
            }
            crate::operation::create_ingest_configuration::CreateIngestConfigurationError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_ingest_configuration::CreateIngestConfigurationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::create_ingest_configuration::CreateIngestConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_participant_token::CreateParticipantTokenError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_participant_token::CreateParticipantTokenError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_participant_token::CreateParticipantTokenError> for Error {
    fn from(err: crate::operation::create_participant_token::CreateParticipantTokenError) -> Self {
        match err {
            crate::operation::create_participant_token::CreateParticipantTokenError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_participant_token::CreateParticipantTokenError::PendingVerification(inner) => Error::PendingVerification(inner),
            crate::operation::create_participant_token::CreateParticipantTokenError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_participant_token::CreateParticipantTokenError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_participant_token::CreateParticipantTokenError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_participant_token::CreateParticipantTokenError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_stage::CreateStageError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_stage::CreateStageError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_stage::CreateStageError> for Error {
    fn from(err: crate::operation::create_stage::CreateStageError) -> Self {
        match err {
            crate::operation::create_stage::CreateStageError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_stage::CreateStageError::PendingVerification(inner) => Error::PendingVerification(inner),
            crate::operation::create_stage::CreateStageError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_stage::CreateStageError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_stage::CreateStageError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_storage_configuration::CreateStorageConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_storage_configuration::CreateStorageConfigurationError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_storage_configuration::CreateStorageConfigurationError> for Error {
    fn from(err: crate::operation::create_storage_configuration::CreateStorageConfigurationError) -> Self {
        match err {
            crate::operation::create_storage_configuration::CreateStorageConfigurationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_storage_configuration::CreateStorageConfigurationError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::create_storage_configuration::CreateStorageConfigurationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_storage_configuration::CreateStorageConfigurationError::PendingVerification(inner) => {
                Error::PendingVerification(inner)
            }
            crate::operation::create_storage_configuration::CreateStorageConfigurationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_storage_configuration::CreateStorageConfigurationError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_storage_configuration::CreateStorageConfigurationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::create_storage_configuration::CreateStorageConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_encoder_configuration::DeleteEncoderConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_encoder_configuration::DeleteEncoderConfigurationError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_encoder_configuration::DeleteEncoderConfigurationError> for Error {
    fn from(err: crate::operation::delete_encoder_configuration::DeleteEncoderConfigurationError) -> Self {
        match err {
            crate::operation::delete_encoder_configuration::DeleteEncoderConfigurationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_encoder_configuration::DeleteEncoderConfigurationError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::delete_encoder_configuration::DeleteEncoderConfigurationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_encoder_configuration::DeleteEncoderConfigurationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_encoder_configuration::DeleteEncoderConfigurationError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::delete_encoder_configuration::DeleteEncoderConfigurationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_encoder_configuration::DeleteEncoderConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_ingest_configuration::DeleteIngestConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_ingest_configuration::DeleteIngestConfigurationError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_ingest_configuration::DeleteIngestConfigurationError> for Error {
    fn from(err: crate::operation::delete_ingest_configuration::DeleteIngestConfigurationError) -> Self {
        match err {
            crate::operation::delete_ingest_configuration::DeleteIngestConfigurationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_ingest_configuration::DeleteIngestConfigurationError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::delete_ingest_configuration::DeleteIngestConfigurationError::PendingVerification(inner) => {
                Error::PendingVerification(inner)
            }
            crate::operation::delete_ingest_configuration::DeleteIngestConfigurationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_ingest_configuration::DeleteIngestConfigurationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_ingest_configuration::DeleteIngestConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_public_key::DeletePublicKeyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_public_key::DeletePublicKeyError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_public_key::DeletePublicKeyError> for Error {
    fn from(err: crate::operation::delete_public_key::DeletePublicKeyError) -> Self {
        match err {
            crate::operation::delete_public_key::DeletePublicKeyError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_public_key::DeletePublicKeyError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_public_key::DeletePublicKeyError::PendingVerification(inner) => Error::PendingVerification(inner),
            crate::operation::delete_public_key::DeletePublicKeyError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_public_key::DeletePublicKeyError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_public_key::DeletePublicKeyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_stage::DeleteStageError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_stage::DeleteStageError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_stage::DeleteStageError> for Error {
    fn from(err: crate::operation::delete_stage::DeleteStageError) -> Self {
        match err {
            crate::operation::delete_stage::DeleteStageError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_stage::DeleteStageError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_stage::DeleteStageError::PendingVerification(inner) => Error::PendingVerification(inner),
            crate::operation::delete_stage::DeleteStageError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_stage::DeleteStageError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_stage::DeleteStageError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_storage_configuration::DeleteStorageConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_storage_configuration::DeleteStorageConfigurationError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_storage_configuration::DeleteStorageConfigurationError> for Error {
    fn from(err: crate::operation::delete_storage_configuration::DeleteStorageConfigurationError) -> Self {
        match err {
            crate::operation::delete_storage_configuration::DeleteStorageConfigurationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_storage_configuration::DeleteStorageConfigurationError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::delete_storage_configuration::DeleteStorageConfigurationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_storage_configuration::DeleteStorageConfigurationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_storage_configuration::DeleteStorageConfigurationError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::delete_storage_configuration::DeleteStorageConfigurationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_storage_configuration::DeleteStorageConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::disconnect_participant::DisconnectParticipantError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::disconnect_participant::DisconnectParticipantError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::disconnect_participant::DisconnectParticipantError> for Error {
    fn from(err: crate::operation::disconnect_participant::DisconnectParticipantError) -> Self {
        match err {
            crate::operation::disconnect_participant::DisconnectParticipantError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::disconnect_participant::DisconnectParticipantError::PendingVerification(inner) => Error::PendingVerification(inner),
            crate::operation::disconnect_participant::DisconnectParticipantError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::disconnect_participant::DisconnectParticipantError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::disconnect_participant::DisconnectParticipantError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_composition::GetCompositionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_composition::GetCompositionError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_composition::GetCompositionError> for Error {
    fn from(err: crate::operation::get_composition::GetCompositionError) -> Self {
        match err {
            crate::operation::get_composition::GetCompositionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_composition::GetCompositionError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::get_composition::GetCompositionError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_composition::GetCompositionError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_composition::GetCompositionError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::get_composition::GetCompositionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_composition::GetCompositionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_encoder_configuration::GetEncoderConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_encoder_configuration::GetEncoderConfigurationError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_encoder_configuration::GetEncoderConfigurationError> for Error {
    fn from(err: crate::operation::get_encoder_configuration::GetEncoderConfigurationError) -> Self {
        match err {
            crate::operation::get_encoder_configuration::GetEncoderConfigurationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_encoder_configuration::GetEncoderConfigurationError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::get_encoder_configuration::GetEncoderConfigurationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_encoder_configuration::GetEncoderConfigurationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_encoder_configuration::GetEncoderConfigurationError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::get_encoder_configuration::GetEncoderConfigurationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_encoder_configuration::GetEncoderConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_ingest_configuration::GetIngestConfigurationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_ingest_configuration::GetIngestConfigurationError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_ingest_configuration::GetIngestConfigurationError> for Error {
    fn from(err: crate::operation::get_ingest_configuration::GetIngestConfigurationError) -> Self {
        match err {
            crate::operation::get_ingest_configuration::GetIngestConfigurationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_ingest_configuration::GetIngestConfigurationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_ingest_configuration::GetIngestConfigurationError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_ingest_configuration::GetIngestConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_participant::GetParticipantError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_participant::GetParticipantError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_participant::GetParticipantError> for Error {
    fn from(err: crate::operation::get_participant::GetParticipantError) -> Self {
        match err {
            crate::operation::get_participant::GetParticipantError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_participant::GetParticipantError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_participant::GetParticipantError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_participant::GetParticipantError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_public_key::GetPublicKeyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_public_key::GetPublicKeyError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_public_key::GetPublicKeyError> for Error {
    fn from(err: crate::operation::get_public_key::GetPublicKeyError) -> Self {
        match err {
            crate::operation::get_public_key::GetPublicKeyError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_public_key::GetPublicKeyError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_public_key::GetPublicKeyError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_public_key::GetPublicKeyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_stage::GetStageError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_stage::GetStageError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_stage::GetStageError> for Error {
    fn from(err: crate::operation::get_stage::GetStageError) -> Self {
        match err {
            crate::operation::get_stage::GetStageError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_stage::GetStageError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_stage::GetStageError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_stage::GetStageError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_stage_session::GetStageSessionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_stage_session::GetStageSessionError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_stage_session::GetStageSessionError> for Error {
    fn from(err: crate::operation::get_stage_session::GetStageSessionError) -> Self {
        match err {
            crate::operation::get_stage_session::GetStageSessionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_stage_session::GetStageSessionError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_stage_session::GetStageSessionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_stage_session::GetStageSessionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_storage_configuration::GetStorageConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_storage_configuration::GetStorageConfigurationError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_storage_configuration::GetStorageConfigurationError> for Error {
    fn from(err: crate::operation::get_storage_configuration::GetStorageConfigurationError) -> Self {
        match err {
            crate::operation::get_storage_configuration::GetStorageConfigurationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_storage_configuration::GetStorageConfigurationError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::get_storage_configuration::GetStorageConfigurationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_storage_configuration::GetStorageConfigurationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_storage_configuration::GetStorageConfigurationError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::get_storage_configuration::GetStorageConfigurationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_storage_configuration::GetStorageConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::import_public_key::ImportPublicKeyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::import_public_key::ImportPublicKeyError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::import_public_key::ImportPublicKeyError> for Error {
    fn from(err: crate::operation::import_public_key::ImportPublicKeyError) -> Self {
        match err {
            crate::operation::import_public_key::ImportPublicKeyError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::import_public_key::ImportPublicKeyError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::import_public_key::ImportPublicKeyError::PendingVerification(inner) => Error::PendingVerification(inner),
            crate::operation::import_public_key::ImportPublicKeyError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::import_public_key::ImportPublicKeyError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::import_public_key::ImportPublicKeyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_compositions::ListCompositionsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_compositions::ListCompositionsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_compositions::ListCompositionsError> for Error {
    fn from(err: crate::operation::list_compositions::ListCompositionsError) -> Self {
        match err {
            crate::operation::list_compositions::ListCompositionsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_compositions::ListCompositionsError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::list_compositions::ListCompositionsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_compositions::ListCompositionsError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::list_compositions::ListCompositionsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_compositions::ListCompositionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_encoder_configurations::ListEncoderConfigurationsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_encoder_configurations::ListEncoderConfigurationsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_encoder_configurations::ListEncoderConfigurationsError> for Error {
    fn from(err: crate::operation::list_encoder_configurations::ListEncoderConfigurationsError) -> Self {
        match err {
            crate::operation::list_encoder_configurations::ListEncoderConfigurationsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_encoder_configurations::ListEncoderConfigurationsError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::list_encoder_configurations::ListEncoderConfigurationsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_encoder_configurations::ListEncoderConfigurationsError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::list_encoder_configurations::ListEncoderConfigurationsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_encoder_configurations::ListEncoderConfigurationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_ingest_configurations::ListIngestConfigurationsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_ingest_configurations::ListIngestConfigurationsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_ingest_configurations::ListIngestConfigurationsError> for Error {
    fn from(err: crate::operation::list_ingest_configurations::ListIngestConfigurationsError) -> Self {
        match err {
            crate::operation::list_ingest_configurations::ListIngestConfigurationsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_ingest_configurations::ListIngestConfigurationsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_ingest_configurations::ListIngestConfigurationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_participant_events::ListParticipantEventsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_participant_events::ListParticipantEventsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_participant_events::ListParticipantEventsError> for Error {
    fn from(err: crate::operation::list_participant_events::ListParticipantEventsError) -> Self {
        match err {
            crate::operation::list_participant_events::ListParticipantEventsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_participant_events::ListParticipantEventsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_participant_events::ListParticipantEventsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_participants::ListParticipantsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_participants::ListParticipantsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_participants::ListParticipantsError> for Error {
    fn from(err: crate::operation::list_participants::ListParticipantsError) -> Self {
        match err {
            crate::operation::list_participants::ListParticipantsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_participants::ListParticipantsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_participants::ListParticipantsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_public_keys::ListPublicKeysError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_public_keys::ListPublicKeysError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_public_keys::ListPublicKeysError> for Error {
    fn from(err: crate::operation::list_public_keys::ListPublicKeysError) -> Self {
        match err {
            crate::operation::list_public_keys::ListPublicKeysError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_public_keys::ListPublicKeysError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_public_keys::ListPublicKeysError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_stages::ListStagesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_stages::ListStagesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_stages::ListStagesError> for Error {
    fn from(err: crate::operation::list_stages::ListStagesError) -> Self {
        match err {
            crate::operation::list_stages::ListStagesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_stages::ListStagesError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::list_stages::ListStagesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_stages::ListStagesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_stage_sessions::ListStageSessionsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_stage_sessions::ListStageSessionsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_stage_sessions::ListStageSessionsError> for Error {
    fn from(err: crate::operation::list_stage_sessions::ListStageSessionsError) -> Self {
        match err {
            crate::operation::list_stage_sessions::ListStageSessionsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_stage_sessions::ListStageSessionsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_stage_sessions::ListStageSessionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_storage_configurations::ListStorageConfigurationsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_storage_configurations::ListStorageConfigurationsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_storage_configurations::ListStorageConfigurationsError> for Error {
    fn from(err: crate::operation::list_storage_configurations::ListStorageConfigurationsError) -> Self {
        match err {
            crate::operation::list_storage_configurations::ListStorageConfigurationsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_storage_configurations::ListStorageConfigurationsError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::list_storage_configurations::ListStorageConfigurationsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_storage_configurations::ListStorageConfigurationsError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::list_storage_configurations::ListStorageConfigurationsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_storage_configurations::ListStorageConfigurationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_tags_for_resource::ListTagsForResourceError> for Error {
    fn from(err: crate::operation::list_tags_for_resource::ListTagsForResourceError) -> Self {
        match err {
            crate::operation::list_tags_for_resource::ListTagsForResourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_composition::StartCompositionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_composition::StartCompositionError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::start_composition::StartCompositionError> for Error {
    fn from(err: crate::operation::start_composition::StartCompositionError) -> Self {
        match err {
            crate::operation::start_composition::StartCompositionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::start_composition::StartCompositionError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::start_composition::StartCompositionError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::start_composition::StartCompositionError::PendingVerification(inner) => Error::PendingVerification(inner),
            crate::operation::start_composition::StartCompositionError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::start_composition::StartCompositionError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::start_composition::StartCompositionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::start_composition::StartCompositionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::stop_composition::StopCompositionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::stop_composition::StopCompositionError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::stop_composition::StopCompositionError> for Error {
    fn from(err: crate::operation::stop_composition::StopCompositionError) -> Self {
        match err {
            crate::operation::stop_composition::StopCompositionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::stop_composition::StopCompositionError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::stop_composition::StopCompositionError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::stop_composition::StopCompositionError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::stop_composition::StopCompositionError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::stop_composition::StopCompositionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::stop_composition::StopCompositionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::tag_resource::TagResourceError> for Error {
    fn from(err: crate::operation::tag_resource::TagResourceError) -> Self {
        match err {
            crate::operation::tag_resource::TagResourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::tag_resource::TagResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::tag_resource::TagResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::tag_resource::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::untag_resource::UntagResourceError> for Error {
    fn from(err: crate::operation::untag_resource::UntagResourceError) -> Self {
        match err {
            crate::operation::untag_resource::UntagResourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::untag_resource::UntagResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::untag_resource::UntagResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::untag_resource::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_ingest_configuration::UpdateIngestConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_ingest_configuration::UpdateIngestConfigurationError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_ingest_configuration::UpdateIngestConfigurationError> for Error {
    fn from(err: crate::operation::update_ingest_configuration::UpdateIngestConfigurationError) -> Self {
        match err {
            crate::operation::update_ingest_configuration::UpdateIngestConfigurationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_ingest_configuration::UpdateIngestConfigurationError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::update_ingest_configuration::UpdateIngestConfigurationError::PendingVerification(inner) => {
                Error::PendingVerification(inner)
            }
            crate::operation::update_ingest_configuration::UpdateIngestConfigurationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_ingest_configuration::UpdateIngestConfigurationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::update_ingest_configuration::UpdateIngestConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_stage::UpdateStageError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_stage::UpdateStageError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_stage::UpdateStageError> for Error {
    fn from(err: crate::operation::update_stage::UpdateStageError) -> Self {
        match err {
            crate::operation::update_stage::UpdateStageError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_stage::UpdateStageError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_stage::UpdateStageError::PendingVerification(inner) => Error::PendingVerification(inner),
            crate::operation::update_stage::UpdateStageError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_stage::UpdateStageError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::update_stage::UpdateStageError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_stage::UpdateStageError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl ::std::error::Error for Error {
    fn source(&self) -> std::option::Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            Error::AccessDeniedException(inner) => inner.source(),
            Error::ConflictException(inner) => inner.source(),
            Error::InternalServerException(inner) => inner.source(),
            Error::PendingVerification(inner) => inner.source(),
            Error::ResourceNotFoundException(inner) => inner.source(),
            Error::ServiceQuotaExceededException(inner) => inner.source(),
            Error::ValidationException(inner) => inner.source(),
            Error::Unhandled(inner) => ::std::option::Option::Some(&*inner.source),
        }
    }
}
impl ::aws_types::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::InternalServerException(e) => e.request_id(),
            Self::PendingVerification(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ServiceQuotaExceededException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.meta.request_id(),
        }
    }
}
