// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DeleteIngestConfigurationInput {
    /// <p>ARN of the IngestConfiguration.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>Optional field to force deletion of the IngestConfiguration. If this is set to <code>true</code> when a participant is actively publishing, the participant is disconnected from the stage, followed by deletion of the IngestConfiguration. Default: <code>false</code>.</p>
    pub force: ::std::option::Option<bool>,
}
impl DeleteIngestConfigurationInput {
    /// <p>ARN of the IngestConfiguration.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>Optional field to force deletion of the IngestConfiguration. If this is set to <code>true</code> when a participant is actively publishing, the participant is disconnected from the stage, followed by deletion of the IngestConfiguration. Default: <code>false</code>.</p>
    pub fn force(&self) -> ::std::option::Option<bool> {
        self.force
    }
}
impl DeleteIngestConfigurationInput {
    /// Creates a new builder-style object to manufacture [`DeleteIngestConfigurationInput`](crate::operation::delete_ingest_configuration::DeleteIngestConfigurationInput).
    pub fn builder() -> crate::operation::delete_ingest_configuration::builders::DeleteIngestConfigurationInputBuilder {
        crate::operation::delete_ingest_configuration::builders::DeleteIngestConfigurationInputBuilder::default()
    }
}

/// A builder for [`DeleteIngestConfigurationInput`](crate::operation::delete_ingest_configuration::DeleteIngestConfigurationInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DeleteIngestConfigurationInputBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) force: ::std::option::Option<bool>,
}
impl DeleteIngestConfigurationInputBuilder {
    /// <p>ARN of the IngestConfiguration.</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>ARN of the IngestConfiguration.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>ARN of the IngestConfiguration.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>Optional field to force deletion of the IngestConfiguration. If this is set to <code>true</code> when a participant is actively publishing, the participant is disconnected from the stage, followed by deletion of the IngestConfiguration. Default: <code>false</code>.</p>
    pub fn force(mut self, input: bool) -> Self {
        self.force = ::std::option::Option::Some(input);
        self
    }
    /// <p>Optional field to force deletion of the IngestConfiguration. If this is set to <code>true</code> when a participant is actively publishing, the participant is disconnected from the stage, followed by deletion of the IngestConfiguration. Default: <code>false</code>.</p>
    pub fn set_force(mut self, input: ::std::option::Option<bool>) -> Self {
        self.force = input;
        self
    }
    /// <p>Optional field to force deletion of the IngestConfiguration. If this is set to <code>true</code> when a participant is actively publishing, the participant is disconnected from the stage, followed by deletion of the IngestConfiguration. Default: <code>false</code>.</p>
    pub fn get_force(&self) -> &::std::option::Option<bool> {
        &self.force
    }
    /// Consumes the builder and constructs a [`DeleteIngestConfigurationInput`](crate::operation::delete_ingest_configuration::DeleteIngestConfigurationInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::delete_ingest_configuration::DeleteIngestConfigurationInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::delete_ingest_configuration::DeleteIngestConfigurationInput {
            arn: self.arn,
            force: self.force,
        })
    }
}
