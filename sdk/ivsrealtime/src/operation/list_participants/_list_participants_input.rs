// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListParticipantsInput {
    /// <p>Stage ARN.</p>
    pub stage_arn: ::std::option::Option<::std::string::String>,
    /// <p>ID of the session within the stage.</p>
    pub session_id: ::std::option::Option<::std::string::String>,
    /// <p>Filters the response list to match the specified user ID. Only one of <code>filterByUserId</code>, <code>filterByPublished</code>, or <code>filterByState</code> can be provided per request. A <code>userId</code> is a customer-assigned name to help identify the token; this can be used to link a participant to a user in the customer’s own systems.</p>
    pub filter_by_user_id: ::std::option::Option<::std::string::String>,
    /// <p>Filters the response list to only show participants who published during the stage session. Only one of <code>filterByUserId</code>, <code>filterByPublished</code>, or <code>filterByState</code> can be provided per request.</p>
    pub filter_by_published: ::std::option::Option<bool>,
    /// <p>Filters the response list to only show participants in the specified state. Only one of <code>filterByUserId</code>, <code>filterByPublished</code>, or <code>filterByState</code> can be provided per request.</p>
    pub filter_by_state: ::std::option::Option<crate::types::ParticipantState>,
    /// <p>The first participant to retrieve. This is used for pagination; see the <code>nextToken</code> response field.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>Maximum number of results to return. Default: 50.</p>
    pub max_results: ::std::option::Option<i32>,
}
impl ListParticipantsInput {
    /// <p>Stage ARN.</p>
    pub fn stage_arn(&self) -> ::std::option::Option<&str> {
        self.stage_arn.as_deref()
    }
    /// <p>ID of the session within the stage.</p>
    pub fn session_id(&self) -> ::std::option::Option<&str> {
        self.session_id.as_deref()
    }
    /// <p>Filters the response list to match the specified user ID. Only one of <code>filterByUserId</code>, <code>filterByPublished</code>, or <code>filterByState</code> can be provided per request. A <code>userId</code> is a customer-assigned name to help identify the token; this can be used to link a participant to a user in the customer’s own systems.</p>
    pub fn filter_by_user_id(&self) -> ::std::option::Option<&str> {
        self.filter_by_user_id.as_deref()
    }
    /// <p>Filters the response list to only show participants who published during the stage session. Only one of <code>filterByUserId</code>, <code>filterByPublished</code>, or <code>filterByState</code> can be provided per request.</p>
    pub fn filter_by_published(&self) -> ::std::option::Option<bool> {
        self.filter_by_published
    }
    /// <p>Filters the response list to only show participants in the specified state. Only one of <code>filterByUserId</code>, <code>filterByPublished</code>, or <code>filterByState</code> can be provided per request.</p>
    pub fn filter_by_state(&self) -> ::std::option::Option<&crate::types::ParticipantState> {
        self.filter_by_state.as_ref()
    }
    /// <p>The first participant to retrieve. This is used for pagination; see the <code>nextToken</code> response field.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>Maximum number of results to return. Default: 50.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
}
impl ListParticipantsInput {
    /// Creates a new builder-style object to manufacture [`ListParticipantsInput`](crate::operation::list_participants::ListParticipantsInput).
    pub fn builder() -> crate::operation::list_participants::builders::ListParticipantsInputBuilder {
        crate::operation::list_participants::builders::ListParticipantsInputBuilder::default()
    }
}

/// A builder for [`ListParticipantsInput`](crate::operation::list_participants::ListParticipantsInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListParticipantsInputBuilder {
    pub(crate) stage_arn: ::std::option::Option<::std::string::String>,
    pub(crate) session_id: ::std::option::Option<::std::string::String>,
    pub(crate) filter_by_user_id: ::std::option::Option<::std::string::String>,
    pub(crate) filter_by_published: ::std::option::Option<bool>,
    pub(crate) filter_by_state: ::std::option::Option<crate::types::ParticipantState>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
}
impl ListParticipantsInputBuilder {
    /// <p>Stage ARN.</p>
    /// This field is required.
    pub fn stage_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.stage_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Stage ARN.</p>
    pub fn set_stage_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.stage_arn = input;
        self
    }
    /// <p>Stage ARN.</p>
    pub fn get_stage_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.stage_arn
    }
    /// <p>ID of the session within the stage.</p>
    /// This field is required.
    pub fn session_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.session_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>ID of the session within the stage.</p>
    pub fn set_session_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.session_id = input;
        self
    }
    /// <p>ID of the session within the stage.</p>
    pub fn get_session_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.session_id
    }
    /// <p>Filters the response list to match the specified user ID. Only one of <code>filterByUserId</code>, <code>filterByPublished</code>, or <code>filterByState</code> can be provided per request. A <code>userId</code> is a customer-assigned name to help identify the token; this can be used to link a participant to a user in the customer’s own systems.</p>
    pub fn filter_by_user_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.filter_by_user_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Filters the response list to match the specified user ID. Only one of <code>filterByUserId</code>, <code>filterByPublished</code>, or <code>filterByState</code> can be provided per request. A <code>userId</code> is a customer-assigned name to help identify the token; this can be used to link a participant to a user in the customer’s own systems.</p>
    pub fn set_filter_by_user_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.filter_by_user_id = input;
        self
    }
    /// <p>Filters the response list to match the specified user ID. Only one of <code>filterByUserId</code>, <code>filterByPublished</code>, or <code>filterByState</code> can be provided per request. A <code>userId</code> is a customer-assigned name to help identify the token; this can be used to link a participant to a user in the customer’s own systems.</p>
    pub fn get_filter_by_user_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.filter_by_user_id
    }
    /// <p>Filters the response list to only show participants who published during the stage session. Only one of <code>filterByUserId</code>, <code>filterByPublished</code>, or <code>filterByState</code> can be provided per request.</p>
    pub fn filter_by_published(mut self, input: bool) -> Self {
        self.filter_by_published = ::std::option::Option::Some(input);
        self
    }
    /// <p>Filters the response list to only show participants who published during the stage session. Only one of <code>filterByUserId</code>, <code>filterByPublished</code>, or <code>filterByState</code> can be provided per request.</p>
    pub fn set_filter_by_published(mut self, input: ::std::option::Option<bool>) -> Self {
        self.filter_by_published = input;
        self
    }
    /// <p>Filters the response list to only show participants who published during the stage session. Only one of <code>filterByUserId</code>, <code>filterByPublished</code>, or <code>filterByState</code> can be provided per request.</p>
    pub fn get_filter_by_published(&self) -> &::std::option::Option<bool> {
        &self.filter_by_published
    }
    /// <p>Filters the response list to only show participants in the specified state. Only one of <code>filterByUserId</code>, <code>filterByPublished</code>, or <code>filterByState</code> can be provided per request.</p>
    pub fn filter_by_state(mut self, input: crate::types::ParticipantState) -> Self {
        self.filter_by_state = ::std::option::Option::Some(input);
        self
    }
    /// <p>Filters the response list to only show participants in the specified state. Only one of <code>filterByUserId</code>, <code>filterByPublished</code>, or <code>filterByState</code> can be provided per request.</p>
    pub fn set_filter_by_state(mut self, input: ::std::option::Option<crate::types::ParticipantState>) -> Self {
        self.filter_by_state = input;
        self
    }
    /// <p>Filters the response list to only show participants in the specified state. Only one of <code>filterByUserId</code>, <code>filterByPublished</code>, or <code>filterByState</code> can be provided per request.</p>
    pub fn get_filter_by_state(&self) -> &::std::option::Option<crate::types::ParticipantState> {
        &self.filter_by_state
    }
    /// <p>The first participant to retrieve. This is used for pagination; see the <code>nextToken</code> response field.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The first participant to retrieve. This is used for pagination; see the <code>nextToken</code> response field.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The first participant to retrieve. This is used for pagination; see the <code>nextToken</code> response field.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>Maximum number of results to return. Default: 50.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>Maximum number of results to return. Default: 50.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>Maximum number of results to return. Default: 50.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// Consumes the builder and constructs a [`ListParticipantsInput`](crate::operation::list_participants::ListParticipantsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_participants::ListParticipantsInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::list_participants::ListParticipantsInput {
            stage_arn: self.stage_arn,
            session_id: self.session_id,
            filter_by_user_id: self.filter_by_user_id,
            filter_by_published: self.filter_by_published,
            filter_by_state: self.filter_by_state,
            next_token: self.next_token,
            max_results: self.max_results,
        })
    }
}
