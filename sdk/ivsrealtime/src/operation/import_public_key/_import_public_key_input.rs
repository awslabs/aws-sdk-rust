// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ImportPublicKeyInput {
    /// <p>The content of the public key to be imported.</p>
    pub public_key_material: ::std::option::Option<::std::string::String>,
    /// <p>Name of the public key to be imported.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>Tags attached to the resource. Array of maps, each of the form <code>string:string (key:value)</code>. See <a href="https://docs.aws.amazon.com/tag-editor/latest/userguide/best-practices-and-strats.html">Best practices and strategies</a> in <i>Tagging AWS Resources and Tag Editor</i> for details, including restrictions that apply to tags and "Tag naming limits and requirements"; Amazon IVS has no constraints on tags beyond what is documented there.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl ImportPublicKeyInput {
    /// <p>The content of the public key to be imported.</p>
    pub fn public_key_material(&self) -> ::std::option::Option<&str> {
        self.public_key_material.as_deref()
    }
    /// <p>Name of the public key to be imported.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>Tags attached to the resource. Array of maps, each of the form <code>string:string (key:value)</code>. See <a href="https://docs.aws.amazon.com/tag-editor/latest/userguide/best-practices-and-strats.html">Best practices and strategies</a> in <i>Tagging AWS Resources and Tag Editor</i> for details, including restrictions that apply to tags and "Tag naming limits and requirements"; Amazon IVS has no constraints on tags beyond what is documented there.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl ImportPublicKeyInput {
    /// Creates a new builder-style object to manufacture [`ImportPublicKeyInput`](crate::operation::import_public_key::ImportPublicKeyInput).
    pub fn builder() -> crate::operation::import_public_key::builders::ImportPublicKeyInputBuilder {
        crate::operation::import_public_key::builders::ImportPublicKeyInputBuilder::default()
    }
}

/// A builder for [`ImportPublicKeyInput`](crate::operation::import_public_key::ImportPublicKeyInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ImportPublicKeyInputBuilder {
    pub(crate) public_key_material: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl ImportPublicKeyInputBuilder {
    /// <p>The content of the public key to be imported.</p>
    /// This field is required.
    pub fn public_key_material(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.public_key_material = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The content of the public key to be imported.</p>
    pub fn set_public_key_material(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.public_key_material = input;
        self
    }
    /// <p>The content of the public key to be imported.</p>
    pub fn get_public_key_material(&self) -> &::std::option::Option<::std::string::String> {
        &self.public_key_material
    }
    /// <p>Name of the public key to be imported.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Name of the public key to be imported.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>Name of the public key to be imported.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Tags attached to the resource. Array of maps, each of the form <code>string:string (key:value)</code>. See <a href="https://docs.aws.amazon.com/tag-editor/latest/userguide/best-practices-and-strats.html">Best practices and strategies</a> in <i>Tagging AWS Resources and Tag Editor</i> for details, including restrictions that apply to tags and "Tag naming limits and requirements"; Amazon IVS has no constraints on tags beyond what is documented there.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Tags attached to the resource. Array of maps, each of the form <code>string:string (key:value)</code>. See <a href="https://docs.aws.amazon.com/tag-editor/latest/userguide/best-practices-and-strats.html">Best practices and strategies</a> in <i>Tagging AWS Resources and Tag Editor</i> for details, including restrictions that apply to tags and "Tag naming limits and requirements"; Amazon IVS has no constraints on tags beyond what is documented there.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>Tags attached to the resource. Array of maps, each of the form <code>string:string (key:value)</code>. See <a href="https://docs.aws.amazon.com/tag-editor/latest/userguide/best-practices-and-strats.html">Best practices and strategies</a> in <i>Tagging AWS Resources and Tag Editor</i> for details, including restrictions that apply to tags and "Tag naming limits and requirements"; Amazon IVS has no constraints on tags beyond what is documented there.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`ImportPublicKeyInput`](crate::operation::import_public_key::ImportPublicKeyInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::import_public_key::ImportPublicKeyInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::import_public_key::ImportPublicKeyInput {
            public_key_material: self.public_key_material,
            name: self.name,
            tags: self.tags,
        })
    }
}
