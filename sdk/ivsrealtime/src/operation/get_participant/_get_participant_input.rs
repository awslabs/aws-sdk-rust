// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetParticipantInput {
    /// <p>Stage ARN.</p>
    pub stage_arn: ::std::option::Option<::std::string::String>,
    /// <p>ID of a session within the stage.</p>
    pub session_id: ::std::option::Option<::std::string::String>,
    /// <p>Unique identifier for the participant. This is assigned by IVS and returned by <code>CreateParticipantToken</code>.</p>
    pub participant_id: ::std::option::Option<::std::string::String>,
}
impl GetParticipantInput {
    /// <p>Stage ARN.</p>
    pub fn stage_arn(&self) -> ::std::option::Option<&str> {
        self.stage_arn.as_deref()
    }
    /// <p>ID of a session within the stage.</p>
    pub fn session_id(&self) -> ::std::option::Option<&str> {
        self.session_id.as_deref()
    }
    /// <p>Unique identifier for the participant. This is assigned by IVS and returned by <code>CreateParticipantToken</code>.</p>
    pub fn participant_id(&self) -> ::std::option::Option<&str> {
        self.participant_id.as_deref()
    }
}
impl GetParticipantInput {
    /// Creates a new builder-style object to manufacture [`GetParticipantInput`](crate::operation::get_participant::GetParticipantInput).
    pub fn builder() -> crate::operation::get_participant::builders::GetParticipantInputBuilder {
        crate::operation::get_participant::builders::GetParticipantInputBuilder::default()
    }
}

/// A builder for [`GetParticipantInput`](crate::operation::get_participant::GetParticipantInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetParticipantInputBuilder {
    pub(crate) stage_arn: ::std::option::Option<::std::string::String>,
    pub(crate) session_id: ::std::option::Option<::std::string::String>,
    pub(crate) participant_id: ::std::option::Option<::std::string::String>,
}
impl GetParticipantInputBuilder {
    /// <p>Stage ARN.</p>
    /// This field is required.
    pub fn stage_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.stage_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Stage ARN.</p>
    pub fn set_stage_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.stage_arn = input;
        self
    }
    /// <p>Stage ARN.</p>
    pub fn get_stage_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.stage_arn
    }
    /// <p>ID of a session within the stage.</p>
    /// This field is required.
    pub fn session_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.session_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>ID of a session within the stage.</p>
    pub fn set_session_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.session_id = input;
        self
    }
    /// <p>ID of a session within the stage.</p>
    pub fn get_session_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.session_id
    }
    /// <p>Unique identifier for the participant. This is assigned by IVS and returned by <code>CreateParticipantToken</code>.</p>
    /// This field is required.
    pub fn participant_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.participant_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Unique identifier for the participant. This is assigned by IVS and returned by <code>CreateParticipantToken</code>.</p>
    pub fn set_participant_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.participant_id = input;
        self
    }
    /// <p>Unique identifier for the participant. This is assigned by IVS and returned by <code>CreateParticipantToken</code>.</p>
    pub fn get_participant_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.participant_id
    }
    /// Consumes the builder and constructs a [`GetParticipantInput`](crate::operation::get_participant::GetParticipantInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::get_participant::GetParticipantInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::get_participant::GetParticipantInput {
            stage_arn: self.stage_arn,
            session_id: self.session_id,
            participant_id: self.participant_id,
        })
    }
}
