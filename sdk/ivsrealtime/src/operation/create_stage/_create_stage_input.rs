// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateStageInput {
    /// <p>Optional name that can be specified for the stage being created.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>Array of participant token configuration objects to attach to the new stage.</p>
    pub participant_token_configurations: ::std::option::Option<::std::vec::Vec<crate::types::ParticipantTokenConfiguration>>,
    /// <p>Tags attached to the resource. Array of maps, each of the form <code>string:string (key:value)</code>. See <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging AWS Resources</a> for details, including restrictions that apply to tags and "Tag naming limits and requirements"; Amazon IVS has no constraints on tags beyond what is documented there. </p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateStageInput {
    /// <p>Optional name that can be specified for the stage being created.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>Array of participant token configuration objects to attach to the new stage.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.participant_token_configurations.is_none()`.
    pub fn participant_token_configurations(&self) -> &[crate::types::ParticipantTokenConfiguration] {
        self.participant_token_configurations.as_deref().unwrap_or_default()
    }
    /// <p>Tags attached to the resource. Array of maps, each of the form <code>string:string (key:value)</code>. See <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging AWS Resources</a> for details, including restrictions that apply to tags and "Tag naming limits and requirements"; Amazon IVS has no constraints on tags beyond what is documented there. </p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl CreateStageInput {
    /// Creates a new builder-style object to manufacture [`CreateStageInput`](crate::operation::create_stage::CreateStageInput).
    pub fn builder() -> crate::operation::create_stage::builders::CreateStageInputBuilder {
        crate::operation::create_stage::builders::CreateStageInputBuilder::default()
    }
}

/// A builder for [`CreateStageInput`](crate::operation::create_stage::CreateStageInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateStageInputBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) participant_token_configurations: ::std::option::Option<::std::vec::Vec<crate::types::ParticipantTokenConfiguration>>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateStageInputBuilder {
    /// <p>Optional name that can be specified for the stage being created.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Optional name that can be specified for the stage being created.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>Optional name that can be specified for the stage being created.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// Appends an item to `participant_token_configurations`.
    ///
    /// To override the contents of this collection use [`set_participant_token_configurations`](Self::set_participant_token_configurations).
    ///
    /// <p>Array of participant token configuration objects to attach to the new stage.</p>
    pub fn participant_token_configurations(mut self, input: crate::types::ParticipantTokenConfiguration) -> Self {
        let mut v = self.participant_token_configurations.unwrap_or_default();
        v.push(input);
        self.participant_token_configurations = ::std::option::Option::Some(v);
        self
    }
    /// <p>Array of participant token configuration objects to attach to the new stage.</p>
    pub fn set_participant_token_configurations(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::ParticipantTokenConfiguration>>,
    ) -> Self {
        self.participant_token_configurations = input;
        self
    }
    /// <p>Array of participant token configuration objects to attach to the new stage.</p>
    pub fn get_participant_token_configurations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ParticipantTokenConfiguration>> {
        &self.participant_token_configurations
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Tags attached to the resource. Array of maps, each of the form <code>string:string (key:value)</code>. See <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging AWS Resources</a> for details, including restrictions that apply to tags and "Tag naming limits and requirements"; Amazon IVS has no constraints on tags beyond what is documented there. </p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Tags attached to the resource. Array of maps, each of the form <code>string:string (key:value)</code>. See <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging AWS Resources</a> for details, including restrictions that apply to tags and "Tag naming limits and requirements"; Amazon IVS has no constraints on tags beyond what is documented there. </p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>Tags attached to the resource. Array of maps, each of the form <code>string:string (key:value)</code>. See <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging AWS Resources</a> for details, including restrictions that apply to tags and "Tag naming limits and requirements"; Amazon IVS has no constraints on tags beyond what is documented there. </p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CreateStageInput`](crate::operation::create_stage::CreateStageInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::create_stage::CreateStageInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::create_stage::CreateStageInput {
            name: self.name,
            participant_token_configurations: self.participant_token_configurations,
            tags: self.tags,
        })
    }
}
