// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn create_deliverability_test_report_output_correct_errors(
    mut builder: crate::operation::create_deliverability_test_report::builders::CreateDeliverabilityTestReportOutputBuilder,
) -> crate::operation::create_deliverability_test_report::builders::CreateDeliverabilityTestReportOutputBuilder {
    if builder.report_id.is_none() {
        builder.report_id = Some(Default::default())
    }
    if builder.deliverability_test_status.is_none() {
        builder.deliverability_test_status = "no value was set".parse::<crate::types::DeliverabilityTestStatus>().ok()
    }
    builder
}

pub(crate) fn get_blacklist_reports_output_correct_errors(
    mut builder: crate::operation::get_blacklist_reports::builders::GetBlacklistReportsOutputBuilder,
) -> crate::operation::get_blacklist_reports::builders::GetBlacklistReportsOutputBuilder {
    if builder.blacklist_report.is_none() {
        builder.blacklist_report = Some(Default::default())
    }
    builder
}

pub(crate) fn get_deliverability_dashboard_options_output_correct_errors(
    mut builder: crate::operation::get_deliverability_dashboard_options::builders::GetDeliverabilityDashboardOptionsOutputBuilder,
) -> crate::operation::get_deliverability_dashboard_options::builders::GetDeliverabilityDashboardOptionsOutputBuilder {
    if builder.dashboard_enabled.is_none() {
        builder.dashboard_enabled = Some(Default::default())
    }
    builder
}

pub(crate) fn get_deliverability_test_report_output_correct_errors(
    mut builder: crate::operation::get_deliverability_test_report::builders::GetDeliverabilityTestReportOutputBuilder,
) -> crate::operation::get_deliverability_test_report::builders::GetDeliverabilityTestReportOutputBuilder {
    if builder.deliverability_test_report.is_none() {
        builder.deliverability_test_report = {
            let builder = crate::types::builders::DeliverabilityTestReportBuilder::default();
            Some(builder.build())
        }
    }
    if builder.overall_placement.is_none() {
        builder.overall_placement = {
            let builder = crate::types::builders::PlacementStatisticsBuilder::default();
            Some(builder.build())
        }
    }
    if builder.isp_placements.is_none() {
        builder.isp_placements = Some(Default::default())
    }
    builder
}

pub(crate) fn get_domain_deliverability_campaign_output_correct_errors(
    mut builder: crate::operation::get_domain_deliverability_campaign::builders::GetDomainDeliverabilityCampaignOutputBuilder,
) -> crate::operation::get_domain_deliverability_campaign::builders::GetDomainDeliverabilityCampaignOutputBuilder {
    if builder.domain_deliverability_campaign.is_none() {
        builder.domain_deliverability_campaign = {
            let builder = crate::types::builders::DomainDeliverabilityCampaignBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn get_domain_statistics_report_output_correct_errors(
    mut builder: crate::operation::get_domain_statistics_report::builders::GetDomainStatisticsReportOutputBuilder,
) -> crate::operation::get_domain_statistics_report::builders::GetDomainStatisticsReportOutputBuilder {
    if builder.overall_volume.is_none() {
        builder.overall_volume = {
            let builder = crate::types::builders::OverallVolumeBuilder::default();
            Some(builder.build())
        }
    }
    if builder.daily_volumes.is_none() {
        builder.daily_volumes = Some(Default::default())
    }
    builder
}

pub(crate) fn get_email_template_output_correct_errors(
    mut builder: crate::operation::get_email_template::builders::GetEmailTemplateOutputBuilder,
) -> crate::operation::get_email_template::builders::GetEmailTemplateOutputBuilder {
    if builder.template_name.is_none() {
        builder.template_name = Some(Default::default())
    }
    if builder.template_content.is_none() {
        builder.template_content = {
            let builder = crate::types::builders::EmailTemplateContentBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn get_suppressed_destination_output_correct_errors(
    mut builder: crate::operation::get_suppressed_destination::builders::GetSuppressedDestinationOutputBuilder,
) -> crate::operation::get_suppressed_destination::builders::GetSuppressedDestinationOutputBuilder {
    if builder.suppressed_destination.is_none() {
        builder.suppressed_destination = {
            let builder = crate::types::builders::SuppressedDestinationBuilder::default();
            crate::serde_util::suppressed_destination_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn list_deliverability_test_reports_output_correct_errors(
    mut builder: crate::operation::list_deliverability_test_reports::builders::ListDeliverabilityTestReportsOutputBuilder,
) -> crate::operation::list_deliverability_test_reports::builders::ListDeliverabilityTestReportsOutputBuilder {
    if builder.deliverability_test_reports.is_none() {
        builder.deliverability_test_reports = Some(Default::default())
    }
    builder
}

pub(crate) fn list_domain_deliverability_campaigns_output_correct_errors(
    mut builder: crate::operation::list_domain_deliverability_campaigns::builders::ListDomainDeliverabilityCampaignsOutputBuilder,
) -> crate::operation::list_domain_deliverability_campaigns::builders::ListDomainDeliverabilityCampaignsOutputBuilder {
    if builder.domain_deliverability_campaigns.is_none() {
        builder.domain_deliverability_campaigns = Some(Default::default())
    }
    builder
}

pub(crate) fn list_tags_for_resource_output_correct_errors(
    mut builder: crate::operation::list_tags_for_resource::builders::ListTagsForResourceOutputBuilder,
) -> crate::operation::list_tags_for_resource::builders::ListTagsForResourceOutputBuilder {
    if builder.tags.is_none() {
        builder.tags = Some(Default::default())
    }
    builder
}

pub(crate) fn send_bulk_email_output_correct_errors(
    mut builder: crate::operation::send_bulk_email::builders::SendBulkEmailOutputBuilder,
) -> crate::operation::send_bulk_email::builders::SendBulkEmailOutputBuilder {
    if builder.bulk_email_entry_results.is_none() {
        builder.bulk_email_entry_results = Some(Default::default())
    }
    builder
}

pub(crate) fn test_render_email_template_output_correct_errors(
    mut builder: crate::operation::test_render_email_template::builders::TestRenderEmailTemplateOutputBuilder,
) -> crate::operation::test_render_email_template::builders::TestRenderEmailTemplateOutputBuilder {
    if builder.rendered_template.is_none() {
        builder.rendered_template = Some(Default::default())
    }
    builder
}

pub(crate) fn suppressed_destination_correct_errors(
    mut builder: crate::types::builders::SuppressedDestinationBuilder,
) -> crate::types::builders::SuppressedDestinationBuilder {
    if builder.email_address.is_none() {
        builder.email_address = Some(Default::default())
    }
    if builder.reason.is_none() {
        builder.reason = "no value was set".parse::<crate::types::SuppressionListReason>().ok()
    }
    if builder.last_update_time.is_none() {
        builder.last_update_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn dedicated_ip_correct_errors(mut builder: crate::types::builders::DedicatedIpBuilder) -> crate::types::builders::DedicatedIpBuilder {
    if builder.ip.is_none() {
        builder.ip = Some(Default::default())
    }
    if builder.warmup_status.is_none() {
        builder.warmup_status = "no value was set".parse::<crate::types::WarmupStatus>().ok()
    }
    if builder.warmup_percentage.is_none() {
        builder.warmup_percentage = Some(Default::default())
    }
    builder
}

pub(crate) fn dedicated_ip_pool_correct_errors(
    mut builder: crate::types::builders::DedicatedIpPoolBuilder,
) -> crate::types::builders::DedicatedIpPoolBuilder {
    if builder.pool_name.is_none() {
        builder.pool_name = Some(Default::default())
    }
    if builder.scaling_mode.is_none() {
        builder.scaling_mode = "no value was set".parse::<crate::types::ScalingMode>().ok()
    }
    builder
}

pub(crate) fn export_destination_correct_errors(
    mut builder: crate::types::builders::ExportDestinationBuilder,
) -> crate::types::builders::ExportDestinationBuilder {
    if builder.data_format.is_none() {
        builder.data_format = "no value was set".parse::<crate::types::DataFormat>().ok()
    }
    builder
}

pub(crate) fn import_data_source_correct_errors(
    mut builder: crate::types::builders::ImportDataSourceBuilder,
) -> crate::types::builders::ImportDataSourceBuilder {
    if builder.s3_url.is_none() {
        builder.s3_url = Some(Default::default())
    }
    if builder.data_format.is_none() {
        builder.data_format = "no value was set".parse::<crate::types::DataFormat>().ok()
    }
    builder
}

pub(crate) fn mail_from_attributes_correct_errors(
    mut builder: crate::types::builders::MailFromAttributesBuilder,
) -> crate::types::builders::MailFromAttributesBuilder {
    if builder.mail_from_domain.is_none() {
        builder.mail_from_domain = Some(Default::default())
    }
    if builder.mail_from_domain_status.is_none() {
        builder.mail_from_domain_status = "no value was set".parse::<crate::types::MailFromDomainStatus>().ok()
    }
    if builder.behavior_on_mx_failure.is_none() {
        builder.behavior_on_mx_failure = "no value was set".parse::<crate::types::BehaviorOnMxFailure>().ok()
    }
    builder
}

pub(crate) fn tracking_options_correct_errors(
    mut builder: crate::types::builders::TrackingOptionsBuilder,
) -> crate::types::builders::TrackingOptionsBuilder {
    if builder.custom_redirect_domain.is_none() {
        builder.custom_redirect_domain = Some(Default::default())
    }
    builder
}

pub(crate) fn vdm_attributes_correct_errors(
    mut builder: crate::types::builders::VdmAttributesBuilder,
) -> crate::types::builders::VdmAttributesBuilder {
    if builder.vdm_enabled.is_none() {
        builder.vdm_enabled = "no value was set".parse::<crate::types::FeatureStatus>().ok()
    }
    builder
}

pub(crate) fn contact_list_destination_correct_errors(
    mut builder: crate::types::builders::ContactListDestinationBuilder,
) -> crate::types::builders::ContactListDestinationBuilder {
    if builder.contact_list_name.is_none() {
        builder.contact_list_name = Some(Default::default())
    }
    if builder.contact_list_import_action.is_none() {
        builder.contact_list_import_action = "no value was set".parse::<crate::types::ContactListImportAction>().ok()
    }
    builder
}

pub(crate) fn event_destination_correct_errors(
    mut builder: crate::types::builders::EventDestinationBuilder,
) -> crate::types::builders::EventDestinationBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.matching_event_types.is_none() {
        builder.matching_event_types = Some(Default::default())
    }
    builder
}

pub(crate) fn message_insights_data_source_correct_errors(
    mut builder: crate::types::builders::MessageInsightsDataSourceBuilder,
) -> crate::types::builders::MessageInsightsDataSourceBuilder {
    if builder.start_date.is_none() {
        builder.start_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.end_date.is_none() {
        builder.end_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn message_tag_correct_errors(mut builder: crate::types::builders::MessageTagBuilder) -> crate::types::builders::MessageTagBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn metrics_data_source_correct_errors(
    mut builder: crate::types::builders::MetricsDataSourceBuilder,
) -> crate::types::builders::MetricsDataSourceBuilder {
    if builder.dimensions.is_none() {
        builder.dimensions = Some(Default::default())
    }
    if builder.namespace.is_none() {
        builder.namespace = "no value was set".parse::<crate::types::MetricNamespace>().ok()
    }
    if builder.metrics.is_none() {
        builder.metrics = Some(Default::default())
    }
    if builder.start_date.is_none() {
        builder.start_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.end_date.is_none() {
        builder.end_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn suppressed_destination_summary_correct_errors(
    mut builder: crate::types::builders::SuppressedDestinationSummaryBuilder,
) -> crate::types::builders::SuppressedDestinationSummaryBuilder {
    if builder.email_address.is_none() {
        builder.email_address = Some(Default::default())
    }
    if builder.reason.is_none() {
        builder.reason = "no value was set".parse::<crate::types::SuppressionListReason>().ok()
    }
    if builder.last_update_time.is_none() {
        builder.last_update_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn suppression_list_destination_correct_errors(
    mut builder: crate::types::builders::SuppressionListDestinationBuilder,
) -> crate::types::builders::SuppressionListDestinationBuilder {
    if builder.suppression_list_import_action.is_none() {
        builder.suppression_list_import_action = "no value was set".parse::<crate::types::SuppressionListImportAction>().ok()
    }
    builder
}

pub(crate) fn tag_correct_errors(mut builder: crate::types::builders::TagBuilder) -> crate::types::builders::TagBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn topic_correct_errors(mut builder: crate::types::builders::TopicBuilder) -> crate::types::builders::TopicBuilder {
    if builder.topic_name.is_none() {
        builder.topic_name = Some(Default::default())
    }
    if builder.display_name.is_none() {
        builder.display_name = Some(Default::default())
    }
    if builder.default_subscription_status.is_none() {
        builder.default_subscription_status = "no value was set".parse::<crate::types::SubscriptionStatus>().ok()
    }
    builder
}

pub(crate) fn topic_preference_correct_errors(
    mut builder: crate::types::builders::TopicPreferenceBuilder,
) -> crate::types::builders::TopicPreferenceBuilder {
    if builder.topic_name.is_none() {
        builder.topic_name = Some(Default::default())
    }
    if builder.subscription_status.is_none() {
        builder.subscription_status = "no value was set".parse::<crate::types::SubscriptionStatus>().ok()
    }
    builder
}

pub(crate) fn cloud_watch_destination_correct_errors(
    mut builder: crate::types::builders::CloudWatchDestinationBuilder,
) -> crate::types::builders::CloudWatchDestinationBuilder {
    if builder.dimension_configurations.is_none() {
        builder.dimension_configurations = Some(Default::default())
    }
    builder
}

pub(crate) fn kinesis_firehose_destination_correct_errors(
    mut builder: crate::types::builders::KinesisFirehoseDestinationBuilder,
) -> crate::types::builders::KinesisFirehoseDestinationBuilder {
    if builder.iam_role_arn.is_none() {
        builder.iam_role_arn = Some(Default::default())
    }
    if builder.delivery_stream_arn.is_none() {
        builder.delivery_stream_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn sns_destination_correct_errors(
    mut builder: crate::types::builders::SnsDestinationBuilder,
) -> crate::types::builders::SnsDestinationBuilder {
    if builder.topic_arn.is_none() {
        builder.topic_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn cloud_watch_dimension_configuration_correct_errors(
    mut builder: crate::types::builders::CloudWatchDimensionConfigurationBuilder,
) -> crate::types::builders::CloudWatchDimensionConfigurationBuilder {
    if builder.dimension_name.is_none() {
        builder.dimension_name = Some(Default::default())
    }
    if builder.dimension_value_source.is_none() {
        builder.dimension_value_source = "no value was set".parse::<crate::types::DimensionValueSource>().ok()
    }
    if builder.default_dimension_value.is_none() {
        builder.default_dimension_value = Some(Default::default())
    }
    builder
}
