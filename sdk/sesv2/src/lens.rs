// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_get_dedicated_ips_output_next_token(
    input: &crate::operation::get_dedicated_ips::GetDedicatedIpsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_configuration_sets_output_next_token(
    input: &crate::operation::list_configuration_sets::ListConfigurationSetsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_contact_lists_output_next_token(
    input: &crate::operation::list_contact_lists::ListContactListsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_contacts_output_next_token(
    input: &crate::operation::list_contacts::ListContactsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_custom_verification_email_templates_output_next_token(
    input: &crate::operation::list_custom_verification_email_templates::ListCustomVerificationEmailTemplatesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_dedicated_ip_pools_output_next_token(
    input: &crate::operation::list_dedicated_ip_pools::ListDedicatedIpPoolsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_deliverability_test_reports_output_next_token(
    input: &crate::operation::list_deliverability_test_reports::ListDeliverabilityTestReportsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_domain_deliverability_campaigns_output_next_token(
    input: &crate::operation::list_domain_deliverability_campaigns::ListDomainDeliverabilityCampaignsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_email_identities_output_next_token(
    input: &crate::operation::list_email_identities::ListEmailIdentitiesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_email_templates_output_next_token(
    input: &crate::operation::list_email_templates::ListEmailTemplatesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_import_jobs_output_next_token(
    input: &crate::operation::list_import_jobs::ListImportJobsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_recommendations_output_next_token(
    input: &crate::operation::list_recommendations::ListRecommendationsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_suppressed_destinations_output_next_token(
    input: &crate::operation::list_suppressed_destinations::ListSuppressedDestinationsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
