// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateContactInput {
    /// <p>The name of the contact list to which the contact should be added.</p>
    #[doc(hidden)]
    pub contact_list_name: std::option::Option<std::string::String>,
    /// <p>The contact's email address.</p>
    #[doc(hidden)]
    pub email_address: std::option::Option<std::string::String>,
    /// <p>The contact's preferences for being opted-in to or opted-out of topics.</p>
    #[doc(hidden)]
    pub topic_preferences: std::option::Option<std::vec::Vec<crate::types::TopicPreference>>,
    /// <p>A boolean value status noting if the contact is unsubscribed from all contact list topics.</p>
    #[doc(hidden)]
    pub unsubscribe_all: bool,
    /// <p>The attribute data attached to a contact.</p>
    #[doc(hidden)]
    pub attributes_data: std::option::Option<std::string::String>,
}
impl CreateContactInput {
    /// <p>The name of the contact list to which the contact should be added.</p>
    pub fn contact_list_name(&self) -> std::option::Option<&str> {
        self.contact_list_name.as_deref()
    }
    /// <p>The contact's email address.</p>
    pub fn email_address(&self) -> std::option::Option<&str> {
        self.email_address.as_deref()
    }
    /// <p>The contact's preferences for being opted-in to or opted-out of topics.</p>
    pub fn topic_preferences(&self) -> std::option::Option<&[crate::types::TopicPreference]> {
        self.topic_preferences.as_deref()
    }
    /// <p>A boolean value status noting if the contact is unsubscribed from all contact list topics.</p>
    pub fn unsubscribe_all(&self) -> bool {
        self.unsubscribe_all
    }
    /// <p>The attribute data attached to a contact.</p>
    pub fn attributes_data(&self) -> std::option::Option<&str> {
        self.attributes_data.as_deref()
    }
}
impl CreateContactInput {
    /// Creates a new builder-style object to manufacture [`CreateContactInput`](crate::operation::create_contact::CreateContactInput).
    pub fn builder() -> crate::operation::create_contact::builders::CreateContactInputBuilder {
        crate::operation::create_contact::builders::CreateContactInputBuilder::default()
    }
}

/// A builder for [`CreateContactInput`](crate::operation::create_contact::CreateContactInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateContactInputBuilder {
    pub(crate) contact_list_name: std::option::Option<std::string::String>,
    pub(crate) email_address: std::option::Option<std::string::String>,
    pub(crate) topic_preferences: std::option::Option<std::vec::Vec<crate::types::TopicPreference>>,
    pub(crate) unsubscribe_all: std::option::Option<bool>,
    pub(crate) attributes_data: std::option::Option<std::string::String>,
}
impl CreateContactInputBuilder {
    /// <p>The name of the contact list to which the contact should be added.</p>
    pub fn contact_list_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.contact_list_name = Some(input.into());
        self
    }
    /// <p>The name of the contact list to which the contact should be added.</p>
    pub fn set_contact_list_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.contact_list_name = input;
        self
    }
    /// <p>The contact's email address.</p>
    pub fn email_address(mut self, input: impl Into<std::string::String>) -> Self {
        self.email_address = Some(input.into());
        self
    }
    /// <p>The contact's email address.</p>
    pub fn set_email_address(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.email_address = input;
        self
    }
    /// Appends an item to `topic_preferences`.
    ///
    /// To override the contents of this collection use [`set_topic_preferences`](Self::set_topic_preferences).
    ///
    /// <p>The contact's preferences for being opted-in to or opted-out of topics.</p>
    pub fn topic_preferences(mut self, input: crate::types::TopicPreference) -> Self {
        let mut v = self.topic_preferences.unwrap_or_default();
        v.push(input);
        self.topic_preferences = Some(v);
        self
    }
    /// <p>The contact's preferences for being opted-in to or opted-out of topics.</p>
    pub fn set_topic_preferences(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::TopicPreference>>,
    ) -> Self {
        self.topic_preferences = input;
        self
    }
    /// <p>A boolean value status noting if the contact is unsubscribed from all contact list topics.</p>
    pub fn unsubscribe_all(mut self, input: bool) -> Self {
        self.unsubscribe_all = Some(input);
        self
    }
    /// <p>A boolean value status noting if the contact is unsubscribed from all contact list topics.</p>
    pub fn set_unsubscribe_all(mut self, input: std::option::Option<bool>) -> Self {
        self.unsubscribe_all = input;
        self
    }
    /// <p>The attribute data attached to a contact.</p>
    pub fn attributes_data(mut self, input: impl Into<std::string::String>) -> Self {
        self.attributes_data = Some(input.into());
        self
    }
    /// <p>The attribute data attached to a contact.</p>
    pub fn set_attributes_data(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.attributes_data = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateContactInput`](crate::operation::create_contact::CreateContactInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_contact::CreateContactInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::create_contact::CreateContactInput {
            contact_list_name: self.contact_list_name,
            email_address: self.email_address,
            topic_preferences: self.topic_preferences,
            unsubscribe_all: self.unsubscribe_all.unwrap_or_default(),
            attributes_data: self.attributes_data,
        })
    }
}
