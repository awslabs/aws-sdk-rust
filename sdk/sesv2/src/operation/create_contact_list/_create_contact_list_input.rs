// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateContactListInput {
    /// <p>The name of the contact list.</p>
    #[doc(hidden)]
    pub contact_list_name: std::option::Option<std::string::String>,
    /// <p>An interest group, theme, or label within a list. A contact list can have multiple topics.</p>
    #[doc(hidden)]
    pub topics: std::option::Option<std::vec::Vec<crate::types::Topic>>,
    /// <p>A description of what the contact list is about.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The tags associated with a contact list.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
}
impl CreateContactListInput {
    /// <p>The name of the contact list.</p>
    pub fn contact_list_name(&self) -> std::option::Option<&str> {
        self.contact_list_name.as_deref()
    }
    /// <p>An interest group, theme, or label within a list. A contact list can have multiple topics.</p>
    pub fn topics(&self) -> std::option::Option<&[crate::types::Topic]> {
        self.topics.as_deref()
    }
    /// <p>A description of what the contact list is about.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The tags associated with a contact list.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::types::Tag]> {
        self.tags.as_deref()
    }
}
impl CreateContactListInput {
    /// Creates a new builder-style object to manufacture [`CreateContactListInput`](crate::operation::create_contact_list::CreateContactListInput).
    pub fn builder(
    ) -> crate::operation::create_contact_list::builders::CreateContactListInputBuilder {
        crate::operation::create_contact_list::builders::CreateContactListInputBuilder::default()
    }
}

/// A builder for [`CreateContactListInput`](crate::operation::create_contact_list::CreateContactListInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateContactListInputBuilder {
    pub(crate) contact_list_name: std::option::Option<std::string::String>,
    pub(crate) topics: std::option::Option<std::vec::Vec<crate::types::Topic>>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
}
impl CreateContactListInputBuilder {
    /// <p>The name of the contact list.</p>
    pub fn contact_list_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.contact_list_name = Some(input.into());
        self
    }
    /// <p>The name of the contact list.</p>
    pub fn set_contact_list_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.contact_list_name = input;
        self
    }
    /// Appends an item to `topics`.
    ///
    /// To override the contents of this collection use [`set_topics`](Self::set_topics).
    ///
    /// <p>An interest group, theme, or label within a list. A contact list can have multiple topics.</p>
    pub fn topics(mut self, input: crate::types::Topic) -> Self {
        let mut v = self.topics.unwrap_or_default();
        v.push(input);
        self.topics = Some(v);
        self
    }
    /// <p>An interest group, theme, or label within a list. A contact list can have multiple topics.</p>
    pub fn set_topics(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Topic>>,
    ) -> Self {
        self.topics = input;
        self
    }
    /// <p>A description of what the contact list is about.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>A description of what the contact list is about.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags associated with a contact list.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = Some(v);
        self
    }
    /// <p>The tags associated with a contact list.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.tags = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateContactListInput`](crate::operation::create_contact_list::CreateContactListInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_contact_list::CreateContactListInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::create_contact_list::CreateContactListInput {
                contact_list_name: self.contact_list_name,
                topics: self.topics,
                description: self.description,
                tags: self.tags,
            },
        )
    }
}
