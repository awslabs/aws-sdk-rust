// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateContactListInput {
    /// <p>The name of the contact list.</p>
    pub contact_list_name: ::std::option::Option<::std::string::String>,
    /// <p>An interest group, theme, or label within a list. A contact list can have multiple topics.</p>
    pub topics: ::std::option::Option<::std::vec::Vec<crate::types::Topic>>,
    /// <p>A description of what the contact list is about.</p>
    pub description: ::std::option::Option<::std::string::String>,
}
impl UpdateContactListInput {
    /// <p>The name of the contact list.</p>
    pub fn contact_list_name(&self) -> ::std::option::Option<&str> {
        self.contact_list_name.as_deref()
    }
    /// <p>An interest group, theme, or label within a list. A contact list can have multiple topics.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.topics.is_none()`.
    pub fn topics(&self) -> &[crate::types::Topic] {
        self.topics.as_deref().unwrap_or_default()
    }
    /// <p>A description of what the contact list is about.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
}
impl UpdateContactListInput {
    /// Creates a new builder-style object to manufacture [`UpdateContactListInput`](crate::operation::update_contact_list::UpdateContactListInput).
    pub fn builder() -> crate::operation::update_contact_list::builders::UpdateContactListInputBuilder {
        crate::operation::update_contact_list::builders::UpdateContactListInputBuilder::default()
    }
}

/// A builder for [`UpdateContactListInput`](crate::operation::update_contact_list::UpdateContactListInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateContactListInputBuilder {
    pub(crate) contact_list_name: ::std::option::Option<::std::string::String>,
    pub(crate) topics: ::std::option::Option<::std::vec::Vec<crate::types::Topic>>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
}
impl UpdateContactListInputBuilder {
    /// <p>The name of the contact list.</p>
    /// This field is required.
    pub fn contact_list_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.contact_list_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the contact list.</p>
    pub fn set_contact_list_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.contact_list_name = input;
        self
    }
    /// <p>The name of the contact list.</p>
    pub fn get_contact_list_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.contact_list_name
    }
    /// Appends an item to `topics`.
    ///
    /// To override the contents of this collection use [`set_topics`](Self::set_topics).
    ///
    /// <p>An interest group, theme, or label within a list. A contact list can have multiple topics.</p>
    pub fn topics(mut self, input: crate::types::Topic) -> Self {
        let mut v = self.topics.unwrap_or_default();
        v.push(input);
        self.topics = ::std::option::Option::Some(v);
        self
    }
    /// <p>An interest group, theme, or label within a list. A contact list can have multiple topics.</p>
    pub fn set_topics(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Topic>>) -> Self {
        self.topics = input;
        self
    }
    /// <p>An interest group, theme, or label within a list. A contact list can have multiple topics.</p>
    pub fn get_topics(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Topic>> {
        &self.topics
    }
    /// <p>A description of what the contact list is about.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description of what the contact list is about.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description of what the contact list is about.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Consumes the builder and constructs a [`UpdateContactListInput`](crate::operation::update_contact_list::UpdateContactListInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_contact_list::UpdateContactListInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_contact_list::UpdateContactListInput {
            contact_list_name: self.contact_list_name,
            topics: self.topics,
            description: self.description,
        })
    }
}
