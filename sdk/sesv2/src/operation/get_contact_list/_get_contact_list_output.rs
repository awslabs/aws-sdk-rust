// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetContactListOutput {
    /// <p>The name of the contact list.</p>
    pub contact_list_name: ::std::option::Option<::std::string::String>,
    /// <p>An interest group, theme, or label within a list. A contact list can have multiple topics.</p>
    pub topics: ::std::option::Option<::std::vec::Vec<crate::types::Topic>>,
    /// <p>A description of what the contact list is about.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>A timestamp noting when the contact list was created.</p>
    pub created_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>A timestamp noting the last time the contact list was updated.</p>
    pub last_updated_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The tags associated with a contact list.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    _request_id: Option<String>,
}
impl GetContactListOutput {
    /// <p>The name of the contact list.</p>
    pub fn contact_list_name(&self) -> ::std::option::Option<&str> {
        self.contact_list_name.as_deref()
    }
    /// <p>An interest group, theme, or label within a list. A contact list can have multiple topics.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.topics.is_none()`.
    pub fn topics(&self) -> &[crate::types::Topic] {
        self.topics.as_deref().unwrap_or_default()
    }
    /// <p>A description of what the contact list is about.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>A timestamp noting when the contact list was created.</p>
    pub fn created_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_timestamp.as_ref()
    }
    /// <p>A timestamp noting the last time the contact list was updated.</p>
    pub fn last_updated_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_updated_timestamp.as_ref()
    }
    /// <p>The tags associated with a contact list.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
}
impl ::aws_http::request_id::RequestId for GetContactListOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetContactListOutput {
    /// Creates a new builder-style object to manufacture [`GetContactListOutput`](crate::operation::get_contact_list::GetContactListOutput).
    pub fn builder() -> crate::operation::get_contact_list::builders::GetContactListOutputBuilder {
        crate::operation::get_contact_list::builders::GetContactListOutputBuilder::default()
    }
}

/// A builder for [`GetContactListOutput`](crate::operation::get_contact_list::GetContactListOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetContactListOutputBuilder {
    pub(crate) contact_list_name: ::std::option::Option<::std::string::String>,
    pub(crate) topics: ::std::option::Option<::std::vec::Vec<crate::types::Topic>>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) created_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_updated_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    _request_id: Option<String>,
}
impl GetContactListOutputBuilder {
    /// <p>The name of the contact list.</p>
    pub fn contact_list_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.contact_list_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the contact list.</p>
    pub fn set_contact_list_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.contact_list_name = input;
        self
    }
    /// <p>The name of the contact list.</p>
    pub fn get_contact_list_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.contact_list_name
    }
    /// Appends an item to `topics`.
    ///
    /// To override the contents of this collection use [`set_topics`](Self::set_topics).
    ///
    /// <p>An interest group, theme, or label within a list. A contact list can have multiple topics.</p>
    pub fn topics(mut self, input: crate::types::Topic) -> Self {
        let mut v = self.topics.unwrap_or_default();
        v.push(input);
        self.topics = ::std::option::Option::Some(v);
        self
    }
    /// <p>An interest group, theme, or label within a list. A contact list can have multiple topics.</p>
    pub fn set_topics(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Topic>>) -> Self {
        self.topics = input;
        self
    }
    /// <p>An interest group, theme, or label within a list. A contact list can have multiple topics.</p>
    pub fn get_topics(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Topic>> {
        &self.topics
    }
    /// <p>A description of what the contact list is about.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description of what the contact list is about.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description of what the contact list is about.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>A timestamp noting when the contact list was created.</p>
    pub fn created_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>A timestamp noting when the contact list was created.</p>
    pub fn set_created_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_timestamp = input;
        self
    }
    /// <p>A timestamp noting when the contact list was created.</p>
    pub fn get_created_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_timestamp
    }
    /// <p>A timestamp noting the last time the contact list was updated.</p>
    pub fn last_updated_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_updated_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>A timestamp noting the last time the contact list was updated.</p>
    pub fn set_last_updated_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_updated_timestamp = input;
        self
    }
    /// <p>A timestamp noting the last time the contact list was updated.</p>
    pub fn get_last_updated_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_updated_timestamp
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags associated with a contact list.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>The tags associated with a contact list.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags associated with a contact list.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetContactListOutput`](crate::operation::get_contact_list::GetContactListOutput).
    pub fn build(self) -> crate::operation::get_contact_list::GetContactListOutput {
        crate::operation::get_contact_list::GetContactListOutput {
            contact_list_name: self.contact_list_name,
            topics: self.topics,
            description: self.description,
            created_timestamp: self.created_timestamp,
            last_updated_timestamp: self.last_updated_timestamp,
            tags: self.tags,
            _request_id: self._request_id,
        }
    }
}
