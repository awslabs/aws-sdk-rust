// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that includes statistics that are related to the domain that you specified.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetDomainStatisticsReportOutput {
    /// <p>An object that contains deliverability metrics for the domain that you specified. The data in this object is a summary of all of the data that was collected from the <code>StartDate</code> to the <code>EndDate</code>.</p>
    #[doc(hidden)]
    pub overall_volume: std::option::Option<crate::types::OverallVolume>,
    /// <p>An object that contains deliverability metrics for the domain that you specified. This object contains data for each day, starting on the <code>StartDate</code> and ending on the <code>EndDate</code>.</p>
    #[doc(hidden)]
    pub daily_volumes: std::option::Option<std::vec::Vec<crate::types::DailyVolume>>,
    _request_id: Option<String>,
}
impl GetDomainStatisticsReportOutput {
    /// <p>An object that contains deliverability metrics for the domain that you specified. The data in this object is a summary of all of the data that was collected from the <code>StartDate</code> to the <code>EndDate</code>.</p>
    pub fn overall_volume(&self) -> std::option::Option<&crate::types::OverallVolume> {
        self.overall_volume.as_ref()
    }
    /// <p>An object that contains deliverability metrics for the domain that you specified. This object contains data for each day, starting on the <code>StartDate</code> and ending on the <code>EndDate</code>.</p>
    pub fn daily_volumes(&self) -> std::option::Option<&[crate::types::DailyVolume]> {
        self.daily_volumes.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetDomainStatisticsReportOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetDomainStatisticsReportOutput {
    /// Creates a new builder-style object to manufacture [`GetDomainStatisticsReportOutput`](crate::operation::get_domain_statistics_report::GetDomainStatisticsReportOutput).
    pub fn builder() -> crate::operation::get_domain_statistics_report::builders::GetDomainStatisticsReportOutputBuilder{
        crate::operation::get_domain_statistics_report::builders::GetDomainStatisticsReportOutputBuilder::default()
    }
}

/// A builder for [`GetDomainStatisticsReportOutput`](crate::operation::get_domain_statistics_report::GetDomainStatisticsReportOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetDomainStatisticsReportOutputBuilder {
    pub(crate) overall_volume: std::option::Option<crate::types::OverallVolume>,
    pub(crate) daily_volumes: std::option::Option<std::vec::Vec<crate::types::DailyVolume>>,
    _request_id: Option<String>,
}
impl GetDomainStatisticsReportOutputBuilder {
    /// <p>An object that contains deliverability metrics for the domain that you specified. The data in this object is a summary of all of the data that was collected from the <code>StartDate</code> to the <code>EndDate</code>.</p>
    pub fn overall_volume(mut self, input: crate::types::OverallVolume) -> Self {
        self.overall_volume = Some(input);
        self
    }
    /// <p>An object that contains deliverability metrics for the domain that you specified. The data in this object is a summary of all of the data that was collected from the <code>StartDate</code> to the <code>EndDate</code>.</p>
    pub fn set_overall_volume(
        mut self,
        input: std::option::Option<crate::types::OverallVolume>,
    ) -> Self {
        self.overall_volume = input;
        self
    }
    /// Appends an item to `daily_volumes`.
    ///
    /// To override the contents of this collection use [`set_daily_volumes`](Self::set_daily_volumes).
    ///
    /// <p>An object that contains deliverability metrics for the domain that you specified. This object contains data for each day, starting on the <code>StartDate</code> and ending on the <code>EndDate</code>.</p>
    pub fn daily_volumes(mut self, input: crate::types::DailyVolume) -> Self {
        let mut v = self.daily_volumes.unwrap_or_default();
        v.push(input);
        self.daily_volumes = Some(v);
        self
    }
    /// <p>An object that contains deliverability metrics for the domain that you specified. This object contains data for each day, starting on the <code>StartDate</code> and ending on the <code>EndDate</code>.</p>
    pub fn set_daily_volumes(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::DailyVolume>>,
    ) -> Self {
        self.daily_volumes = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetDomainStatisticsReportOutput`](crate::operation::get_domain_statistics_report::GetDomainStatisticsReportOutput).
    pub fn build(
        self,
    ) -> crate::operation::get_domain_statistics_report::GetDomainStatisticsReportOutput {
        crate::operation::get_domain_statistics_report::GetDomainStatisticsReportOutput {
            overall_volume: self.overall_volume,
            daily_volumes: self.daily_volumes,
            _request_id: self._request_id,
        }
    }
}
