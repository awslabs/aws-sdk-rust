// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An HTTP 200 response if the request succeeds, or an error message if the request fails.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetImportJobOutput {
    /// <p>A string that represents the import job ID.</p>
    #[doc(hidden)]
    pub job_id: std::option::Option<std::string::String>,
    /// <p>The destination of the import job.</p>
    #[doc(hidden)]
    pub import_destination: std::option::Option<crate::types::ImportDestination>,
    /// <p>The data source of the import job.</p>
    #[doc(hidden)]
    pub import_data_source: std::option::Option<crate::types::ImportDataSource>,
    /// <p>The failure details about an import job.</p>
    #[doc(hidden)]
    pub failure_info: std::option::Option<crate::types::FailureInfo>,
    /// <p>The status of the import job.</p>
    #[doc(hidden)]
    pub job_status: std::option::Option<crate::types::JobStatus>,
    /// <p>The time stamp of when the import job was created.</p>
    #[doc(hidden)]
    pub created_timestamp: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The time stamp of when the import job was completed.</p>
    #[doc(hidden)]
    pub completed_timestamp: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The current number of records processed.</p>
    #[doc(hidden)]
    pub processed_records_count: std::option::Option<i32>,
    /// <p>The number of records that failed processing because of invalid input or other reasons.</p>
    #[doc(hidden)]
    pub failed_records_count: std::option::Option<i32>,
    _request_id: Option<String>,
}
impl GetImportJobOutput {
    /// <p>A string that represents the import job ID.</p>
    pub fn job_id(&self) -> std::option::Option<&str> {
        self.job_id.as_deref()
    }
    /// <p>The destination of the import job.</p>
    pub fn import_destination(&self) -> std::option::Option<&crate::types::ImportDestination> {
        self.import_destination.as_ref()
    }
    /// <p>The data source of the import job.</p>
    pub fn import_data_source(&self) -> std::option::Option<&crate::types::ImportDataSource> {
        self.import_data_source.as_ref()
    }
    /// <p>The failure details about an import job.</p>
    pub fn failure_info(&self) -> std::option::Option<&crate::types::FailureInfo> {
        self.failure_info.as_ref()
    }
    /// <p>The status of the import job.</p>
    pub fn job_status(&self) -> std::option::Option<&crate::types::JobStatus> {
        self.job_status.as_ref()
    }
    /// <p>The time stamp of when the import job was created.</p>
    pub fn created_timestamp(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_timestamp.as_ref()
    }
    /// <p>The time stamp of when the import job was completed.</p>
    pub fn completed_timestamp(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.completed_timestamp.as_ref()
    }
    /// <p>The current number of records processed.</p>
    pub fn processed_records_count(&self) -> std::option::Option<i32> {
        self.processed_records_count
    }
    /// <p>The number of records that failed processing because of invalid input or other reasons.</p>
    pub fn failed_records_count(&self) -> std::option::Option<i32> {
        self.failed_records_count
    }
}
impl aws_http::request_id::RequestId for GetImportJobOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetImportJobOutput {
    /// Creates a new builder-style object to manufacture [`GetImportJobOutput`](crate::operation::get_import_job::GetImportJobOutput).
    pub fn builder() -> crate::operation::get_import_job::builders::GetImportJobOutputBuilder {
        crate::operation::get_import_job::builders::GetImportJobOutputBuilder::default()
    }
}

/// A builder for [`GetImportJobOutput`](crate::operation::get_import_job::GetImportJobOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetImportJobOutputBuilder {
    pub(crate) job_id: std::option::Option<std::string::String>,
    pub(crate) import_destination: std::option::Option<crate::types::ImportDestination>,
    pub(crate) import_data_source: std::option::Option<crate::types::ImportDataSource>,
    pub(crate) failure_info: std::option::Option<crate::types::FailureInfo>,
    pub(crate) job_status: std::option::Option<crate::types::JobStatus>,
    pub(crate) created_timestamp: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) completed_timestamp: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) processed_records_count: std::option::Option<i32>,
    pub(crate) failed_records_count: std::option::Option<i32>,
    _request_id: Option<String>,
}
impl GetImportJobOutputBuilder {
    /// <p>A string that represents the import job ID.</p>
    pub fn job_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.job_id = Some(input.into());
        self
    }
    /// <p>A string that represents the import job ID.</p>
    pub fn set_job_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.job_id = input;
        self
    }
    /// <p>The destination of the import job.</p>
    pub fn import_destination(mut self, input: crate::types::ImportDestination) -> Self {
        self.import_destination = Some(input);
        self
    }
    /// <p>The destination of the import job.</p>
    pub fn set_import_destination(
        mut self,
        input: std::option::Option<crate::types::ImportDestination>,
    ) -> Self {
        self.import_destination = input;
        self
    }
    /// <p>The data source of the import job.</p>
    pub fn import_data_source(mut self, input: crate::types::ImportDataSource) -> Self {
        self.import_data_source = Some(input);
        self
    }
    /// <p>The data source of the import job.</p>
    pub fn set_import_data_source(
        mut self,
        input: std::option::Option<crate::types::ImportDataSource>,
    ) -> Self {
        self.import_data_source = input;
        self
    }
    /// <p>The failure details about an import job.</p>
    pub fn failure_info(mut self, input: crate::types::FailureInfo) -> Self {
        self.failure_info = Some(input);
        self
    }
    /// <p>The failure details about an import job.</p>
    pub fn set_failure_info(
        mut self,
        input: std::option::Option<crate::types::FailureInfo>,
    ) -> Self {
        self.failure_info = input;
        self
    }
    /// <p>The status of the import job.</p>
    pub fn job_status(mut self, input: crate::types::JobStatus) -> Self {
        self.job_status = Some(input);
        self
    }
    /// <p>The status of the import job.</p>
    pub fn set_job_status(mut self, input: std::option::Option<crate::types::JobStatus>) -> Self {
        self.job_status = input;
        self
    }
    /// <p>The time stamp of when the import job was created.</p>
    pub fn created_timestamp(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_timestamp = Some(input);
        self
    }
    /// <p>The time stamp of when the import job was created.</p>
    pub fn set_created_timestamp(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_timestamp = input;
        self
    }
    /// <p>The time stamp of when the import job was completed.</p>
    pub fn completed_timestamp(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.completed_timestamp = Some(input);
        self
    }
    /// <p>The time stamp of when the import job was completed.</p>
    pub fn set_completed_timestamp(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.completed_timestamp = input;
        self
    }
    /// <p>The current number of records processed.</p>
    pub fn processed_records_count(mut self, input: i32) -> Self {
        self.processed_records_count = Some(input);
        self
    }
    /// <p>The current number of records processed.</p>
    pub fn set_processed_records_count(mut self, input: std::option::Option<i32>) -> Self {
        self.processed_records_count = input;
        self
    }
    /// <p>The number of records that failed processing because of invalid input or other reasons.</p>
    pub fn failed_records_count(mut self, input: i32) -> Self {
        self.failed_records_count = Some(input);
        self
    }
    /// <p>The number of records that failed processing because of invalid input or other reasons.</p>
    pub fn set_failed_records_count(mut self, input: std::option::Option<i32>) -> Self {
        self.failed_records_count = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetImportJobOutput`](crate::operation::get_import_job::GetImportJobOutput).
    pub fn build(self) -> crate::operation::get_import_job::GetImportJobOutput {
        crate::operation::get_import_job::GetImportJobOutput {
            job_id: self.job_id,
            import_destination: self.import_destination,
            import_data_source: self.import_data_source,
            failure_info: self.failure_info,
            job_status: self.job_status,
            created_timestamp: self.created_timestamp,
            completed_timestamp: self.completed_timestamp,
            processed_records_count: self.processed_records_count,
            failed_records_count: self.failed_records_count,
            _request_id: self._request_id,
        }
    }
}
