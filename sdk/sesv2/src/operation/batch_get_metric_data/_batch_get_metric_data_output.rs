// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents the result of processing your metric data batch request</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BatchGetMetricDataOutput {
    /// <p>A list of successfully retrieved <code>MetricDataResult</code>.</p>
    #[doc(hidden)]
    pub results: std::option::Option<std::vec::Vec<crate::types::MetricDataResult>>,
    /// <p>A list of <code>MetricDataError</code> encountered while processing your metric data batch request.</p>
    #[doc(hidden)]
    pub errors: std::option::Option<std::vec::Vec<crate::types::MetricDataError>>,
    _request_id: Option<String>,
}
impl BatchGetMetricDataOutput {
    /// <p>A list of successfully retrieved <code>MetricDataResult</code>.</p>
    pub fn results(&self) -> std::option::Option<&[crate::types::MetricDataResult]> {
        self.results.as_deref()
    }
    /// <p>A list of <code>MetricDataError</code> encountered while processing your metric data batch request.</p>
    pub fn errors(&self) -> std::option::Option<&[crate::types::MetricDataError]> {
        self.errors.as_deref()
    }
}
impl aws_http::request_id::RequestId for BatchGetMetricDataOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl BatchGetMetricDataOutput {
    /// Creates a new builder-style object to manufacture [`BatchGetMetricDataOutput`](crate::operation::batch_get_metric_data::BatchGetMetricDataOutput).
    pub fn builder(
    ) -> crate::operation::batch_get_metric_data::builders::BatchGetMetricDataOutputBuilder {
        crate::operation::batch_get_metric_data::builders::BatchGetMetricDataOutputBuilder::default(
        )
    }
}

/// A builder for [`BatchGetMetricDataOutput`](crate::operation::batch_get_metric_data::BatchGetMetricDataOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct BatchGetMetricDataOutputBuilder {
    pub(crate) results: std::option::Option<std::vec::Vec<crate::types::MetricDataResult>>,
    pub(crate) errors: std::option::Option<std::vec::Vec<crate::types::MetricDataError>>,
    _request_id: Option<String>,
}
impl BatchGetMetricDataOutputBuilder {
    /// Appends an item to `results`.
    ///
    /// To override the contents of this collection use [`set_results`](Self::set_results).
    ///
    /// <p>A list of successfully retrieved <code>MetricDataResult</code>.</p>
    pub fn results(mut self, input: crate::types::MetricDataResult) -> Self {
        let mut v = self.results.unwrap_or_default();
        v.push(input);
        self.results = Some(v);
        self
    }
    /// <p>A list of successfully retrieved <code>MetricDataResult</code>.</p>
    pub fn set_results(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::MetricDataResult>>,
    ) -> Self {
        self.results = input;
        self
    }
    /// Appends an item to `errors`.
    ///
    /// To override the contents of this collection use [`set_errors`](Self::set_errors).
    ///
    /// <p>A list of <code>MetricDataError</code> encountered while processing your metric data batch request.</p>
    pub fn errors(mut self, input: crate::types::MetricDataError) -> Self {
        let mut v = self.errors.unwrap_or_default();
        v.push(input);
        self.errors = Some(v);
        self
    }
    /// <p>A list of <code>MetricDataError</code> encountered while processing your metric data batch request.</p>
    pub fn set_errors(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::MetricDataError>>,
    ) -> Self {
        self.errors = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`BatchGetMetricDataOutput`](crate::operation::batch_get_metric_data::BatchGetMetricDataOutput).
    pub fn build(self) -> crate::operation::batch_get_metric_data::BatchGetMetricDataOutput {
        crate::operation::batch_get_metric_data::BatchGetMetricDataOutput {
            results: self.results,
            errors: self.errors,
            _request_id: self._request_id,
        }
    }
}
