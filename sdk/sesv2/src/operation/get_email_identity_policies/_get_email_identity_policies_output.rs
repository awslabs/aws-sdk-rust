// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Identity policies associated with email identity.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetEmailIdentityPoliciesOutput {
    /// <p>A map of policy names to policies.</p>
    #[doc(hidden)]
    pub policies:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    _request_id: Option<String>,
}
impl GetEmailIdentityPoliciesOutput {
    /// <p>A map of policy names to policies.</p>
    pub fn policies(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.policies.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetEmailIdentityPoliciesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetEmailIdentityPoliciesOutput {
    /// Creates a new builder-style object to manufacture [`GetEmailIdentityPoliciesOutput`](crate::operation::get_email_identity_policies::GetEmailIdentityPoliciesOutput).
    pub fn builder() -> crate::operation::get_email_identity_policies::builders::GetEmailIdentityPoliciesOutputBuilder{
        crate::operation::get_email_identity_policies::builders::GetEmailIdentityPoliciesOutputBuilder::default()
    }
}

/// A builder for [`GetEmailIdentityPoliciesOutput`](crate::operation::get_email_identity_policies::GetEmailIdentityPoliciesOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetEmailIdentityPoliciesOutputBuilder {
    pub(crate) policies:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    _request_id: Option<String>,
}
impl GetEmailIdentityPoliciesOutputBuilder {
    /// Adds a key-value pair to `policies`.
    ///
    /// To override the contents of this collection use [`set_policies`](Self::set_policies).
    ///
    /// <p>A map of policy names to policies.</p>
    pub fn policies(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.policies.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.policies = Some(hash_map);
        self
    }
    /// <p>A map of policy names to policies.</p>
    pub fn set_policies(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.policies = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetEmailIdentityPoliciesOutput`](crate::operation::get_email_identity_policies::GetEmailIdentityPoliciesOutput).
    pub fn build(
        self,
    ) -> crate::operation::get_email_identity_policies::GetEmailIdentityPoliciesOutput {
        crate::operation::get_email_identity_policies::GetEmailIdentityPoliciesOutput {
            policies: self.policies,
            _request_id: self._request_id,
        }
    }
}
