// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>&gt;Represents a request to create a preview of the MIME content of an email when provided with a template and a set of replacement data.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TestRenderEmailTemplateInput {
    /// <p>The name of the template.</p>
    pub template_name: ::std::option::Option<::std::string::String>,
    /// <p>A list of replacement values to apply to the template. This parameter is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.</p>
    pub template_data: ::std::option::Option<::std::string::String>,
}
impl TestRenderEmailTemplateInput {
    /// <p>The name of the template.</p>
    pub fn template_name(&self) -> ::std::option::Option<&str> {
        self.template_name.as_deref()
    }
    /// <p>A list of replacement values to apply to the template. This parameter is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.</p>
    pub fn template_data(&self) -> ::std::option::Option<&str> {
        self.template_data.as_deref()
    }
}
impl TestRenderEmailTemplateInput {
    /// Creates a new builder-style object to manufacture [`TestRenderEmailTemplateInput`](crate::operation::test_render_email_template::TestRenderEmailTemplateInput).
    pub fn builder() -> crate::operation::test_render_email_template::builders::TestRenderEmailTemplateInputBuilder {
        crate::operation::test_render_email_template::builders::TestRenderEmailTemplateInputBuilder::default()
    }
}

/// A builder for [`TestRenderEmailTemplateInput`](crate::operation::test_render_email_template::TestRenderEmailTemplateInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct TestRenderEmailTemplateInputBuilder {
    pub(crate) template_name: ::std::option::Option<::std::string::String>,
    pub(crate) template_data: ::std::option::Option<::std::string::String>,
}
impl TestRenderEmailTemplateInputBuilder {
    /// <p>The name of the template.</p>
    /// This field is required.
    pub fn template_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.template_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the template.</p>
    pub fn set_template_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.template_name = input;
        self
    }
    /// <p>The name of the template.</p>
    pub fn get_template_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.template_name
    }
    /// <p>A list of replacement values to apply to the template. This parameter is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.</p>
    /// This field is required.
    pub fn template_data(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.template_data = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A list of replacement values to apply to the template. This parameter is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.</p>
    pub fn set_template_data(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.template_data = input;
        self
    }
    /// <p>A list of replacement values to apply to the template. This parameter is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.</p>
    pub fn get_template_data(&self) -> &::std::option::Option<::std::string::String> {
        &self.template_data
    }
    /// Consumes the builder and constructs a [`TestRenderEmailTemplateInput`](crate::operation::test_render_email_template::TestRenderEmailTemplateInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::test_render_email_template::TestRenderEmailTemplateInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::test_render_email_template::TestRenderEmailTemplateInput {
            template_name: self.template_name,
            template_data: self.template_data,
        })
    }
}
