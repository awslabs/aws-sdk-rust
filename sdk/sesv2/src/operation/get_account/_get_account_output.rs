// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A list of details about the email-sending capabilities of your Amazon SES account in the current Amazon Web Services Region.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetAccountOutput {
    /// <p>Indicates whether or not the automatic warm-up feature is enabled for dedicated IP addresses that are associated with your account.</p>
    #[doc(hidden)]
    pub dedicated_ip_auto_warmup_enabled: bool,
    /// <p>The reputation status of your Amazon SES account. The status can be one of the following:</p>
    /// <ul>
    /// <li> <p> <code>HEALTHY</code> – There are no reputation-related issues that currently impact your account.</p> </li>
    /// <li> <p> <code>PROBATION</code> – We've identified potential issues with your Amazon SES account. We're placing your account under review while you work on correcting these issues.</p> </li>
    /// <li> <p> <code>SHUTDOWN</code> – Your account's ability to send email is currently paused because of an issue with the email sent from your account. When you correct the issue, you can contact us and request that your account's ability to send email is resumed.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub enforcement_status: std::option::Option<std::string::String>,
    /// <p>Indicates whether or not your account has production access in the current Amazon Web Services Region.</p>
    /// <p>If the value is <code>false</code>, then your account is in the <i>sandbox</i>. When your account is in the sandbox, you can only send email to verified identities. Additionally, the maximum number of emails you can send in a 24-hour period (your sending quota) is 200, and the maximum number of emails you can send per second (your maximum sending rate) is 1.</p>
    /// <p>If the value is <code>true</code>, then your account has production access. When your account has production access, you can send email to any address. The sending quota and maximum sending rate for your account vary based on your specific use case.</p>
    #[doc(hidden)]
    pub production_access_enabled: bool,
    /// <p>An object that contains information about the per-day and per-second sending limits for your Amazon SES account in the current Amazon Web Services Region.</p>
    #[doc(hidden)]
    pub send_quota: std::option::Option<crate::types::SendQuota>,
    /// <p>Indicates whether or not email sending is enabled for your Amazon SES account in the current Amazon Web Services Region.</p>
    #[doc(hidden)]
    pub sending_enabled: bool,
    /// <p>An object that contains information about the email address suppression preferences for your account in the current Amazon Web Services Region.</p>
    #[doc(hidden)]
    pub suppression_attributes: std::option::Option<crate::types::SuppressionAttributes>,
    /// <p>An object that defines your account details.</p>
    #[doc(hidden)]
    pub details: std::option::Option<crate::types::AccountDetails>,
    /// <p>The VDM attributes that apply to your Amazon SES account.</p>
    #[doc(hidden)]
    pub vdm_attributes: std::option::Option<crate::types::VdmAttributes>,
    _request_id: Option<String>,
}
impl GetAccountOutput {
    /// <p>Indicates whether or not the automatic warm-up feature is enabled for dedicated IP addresses that are associated with your account.</p>
    pub fn dedicated_ip_auto_warmup_enabled(&self) -> bool {
        self.dedicated_ip_auto_warmup_enabled
    }
    /// <p>The reputation status of your Amazon SES account. The status can be one of the following:</p>
    /// <ul>
    /// <li> <p> <code>HEALTHY</code> – There are no reputation-related issues that currently impact your account.</p> </li>
    /// <li> <p> <code>PROBATION</code> – We've identified potential issues with your Amazon SES account. We're placing your account under review while you work on correcting these issues.</p> </li>
    /// <li> <p> <code>SHUTDOWN</code> – Your account's ability to send email is currently paused because of an issue with the email sent from your account. When you correct the issue, you can contact us and request that your account's ability to send email is resumed.</p> </li>
    /// </ul>
    pub fn enforcement_status(&self) -> std::option::Option<&str> {
        self.enforcement_status.as_deref()
    }
    /// <p>Indicates whether or not your account has production access in the current Amazon Web Services Region.</p>
    /// <p>If the value is <code>false</code>, then your account is in the <i>sandbox</i>. When your account is in the sandbox, you can only send email to verified identities. Additionally, the maximum number of emails you can send in a 24-hour period (your sending quota) is 200, and the maximum number of emails you can send per second (your maximum sending rate) is 1.</p>
    /// <p>If the value is <code>true</code>, then your account has production access. When your account has production access, you can send email to any address. The sending quota and maximum sending rate for your account vary based on your specific use case.</p>
    pub fn production_access_enabled(&self) -> bool {
        self.production_access_enabled
    }
    /// <p>An object that contains information about the per-day and per-second sending limits for your Amazon SES account in the current Amazon Web Services Region.</p>
    pub fn send_quota(&self) -> std::option::Option<&crate::types::SendQuota> {
        self.send_quota.as_ref()
    }
    /// <p>Indicates whether or not email sending is enabled for your Amazon SES account in the current Amazon Web Services Region.</p>
    pub fn sending_enabled(&self) -> bool {
        self.sending_enabled
    }
    /// <p>An object that contains information about the email address suppression preferences for your account in the current Amazon Web Services Region.</p>
    pub fn suppression_attributes(
        &self,
    ) -> std::option::Option<&crate::types::SuppressionAttributes> {
        self.suppression_attributes.as_ref()
    }
    /// <p>An object that defines your account details.</p>
    pub fn details(&self) -> std::option::Option<&crate::types::AccountDetails> {
        self.details.as_ref()
    }
    /// <p>The VDM attributes that apply to your Amazon SES account.</p>
    pub fn vdm_attributes(&self) -> std::option::Option<&crate::types::VdmAttributes> {
        self.vdm_attributes.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetAccountOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetAccountOutput {
    /// Creates a new builder-style object to manufacture [`GetAccountOutput`](crate::operation::get_account::GetAccountOutput).
    pub fn builder() -> crate::operation::get_account::builders::GetAccountOutputBuilder {
        crate::operation::get_account::builders::GetAccountOutputBuilder::default()
    }
}

/// A builder for [`GetAccountOutput`](crate::operation::get_account::GetAccountOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetAccountOutputBuilder {
    pub(crate) dedicated_ip_auto_warmup_enabled: std::option::Option<bool>,
    pub(crate) enforcement_status: std::option::Option<std::string::String>,
    pub(crate) production_access_enabled: std::option::Option<bool>,
    pub(crate) send_quota: std::option::Option<crate::types::SendQuota>,
    pub(crate) sending_enabled: std::option::Option<bool>,
    pub(crate) suppression_attributes: std::option::Option<crate::types::SuppressionAttributes>,
    pub(crate) details: std::option::Option<crate::types::AccountDetails>,
    pub(crate) vdm_attributes: std::option::Option<crate::types::VdmAttributes>,
    _request_id: Option<String>,
}
impl GetAccountOutputBuilder {
    /// <p>Indicates whether or not the automatic warm-up feature is enabled for dedicated IP addresses that are associated with your account.</p>
    pub fn dedicated_ip_auto_warmup_enabled(mut self, input: bool) -> Self {
        self.dedicated_ip_auto_warmup_enabled = Some(input);
        self
    }
    /// <p>Indicates whether or not the automatic warm-up feature is enabled for dedicated IP addresses that are associated with your account.</p>
    pub fn set_dedicated_ip_auto_warmup_enabled(
        mut self,
        input: std::option::Option<bool>,
    ) -> Self {
        self.dedicated_ip_auto_warmup_enabled = input;
        self
    }
    /// <p>The reputation status of your Amazon SES account. The status can be one of the following:</p>
    /// <ul>
    /// <li> <p> <code>HEALTHY</code> – There are no reputation-related issues that currently impact your account.</p> </li>
    /// <li> <p> <code>PROBATION</code> – We've identified potential issues with your Amazon SES account. We're placing your account under review while you work on correcting these issues.</p> </li>
    /// <li> <p> <code>SHUTDOWN</code> – Your account's ability to send email is currently paused because of an issue with the email sent from your account. When you correct the issue, you can contact us and request that your account's ability to send email is resumed.</p> </li>
    /// </ul>
    pub fn enforcement_status(mut self, input: impl Into<std::string::String>) -> Self {
        self.enforcement_status = Some(input.into());
        self
    }
    /// <p>The reputation status of your Amazon SES account. The status can be one of the following:</p>
    /// <ul>
    /// <li> <p> <code>HEALTHY</code> – There are no reputation-related issues that currently impact your account.</p> </li>
    /// <li> <p> <code>PROBATION</code> – We've identified potential issues with your Amazon SES account. We're placing your account under review while you work on correcting these issues.</p> </li>
    /// <li> <p> <code>SHUTDOWN</code> – Your account's ability to send email is currently paused because of an issue with the email sent from your account. When you correct the issue, you can contact us and request that your account's ability to send email is resumed.</p> </li>
    /// </ul>
    pub fn set_enforcement_status(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.enforcement_status = input;
        self
    }
    /// <p>Indicates whether or not your account has production access in the current Amazon Web Services Region.</p>
    /// <p>If the value is <code>false</code>, then your account is in the <i>sandbox</i>. When your account is in the sandbox, you can only send email to verified identities. Additionally, the maximum number of emails you can send in a 24-hour period (your sending quota) is 200, and the maximum number of emails you can send per second (your maximum sending rate) is 1.</p>
    /// <p>If the value is <code>true</code>, then your account has production access. When your account has production access, you can send email to any address. The sending quota and maximum sending rate for your account vary based on your specific use case.</p>
    pub fn production_access_enabled(mut self, input: bool) -> Self {
        self.production_access_enabled = Some(input);
        self
    }
    /// <p>Indicates whether or not your account has production access in the current Amazon Web Services Region.</p>
    /// <p>If the value is <code>false</code>, then your account is in the <i>sandbox</i>. When your account is in the sandbox, you can only send email to verified identities. Additionally, the maximum number of emails you can send in a 24-hour period (your sending quota) is 200, and the maximum number of emails you can send per second (your maximum sending rate) is 1.</p>
    /// <p>If the value is <code>true</code>, then your account has production access. When your account has production access, you can send email to any address. The sending quota and maximum sending rate for your account vary based on your specific use case.</p>
    pub fn set_production_access_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.production_access_enabled = input;
        self
    }
    /// <p>An object that contains information about the per-day and per-second sending limits for your Amazon SES account in the current Amazon Web Services Region.</p>
    pub fn send_quota(mut self, input: crate::types::SendQuota) -> Self {
        self.send_quota = Some(input);
        self
    }
    /// <p>An object that contains information about the per-day and per-second sending limits for your Amazon SES account in the current Amazon Web Services Region.</p>
    pub fn set_send_quota(mut self, input: std::option::Option<crate::types::SendQuota>) -> Self {
        self.send_quota = input;
        self
    }
    /// <p>Indicates whether or not email sending is enabled for your Amazon SES account in the current Amazon Web Services Region.</p>
    pub fn sending_enabled(mut self, input: bool) -> Self {
        self.sending_enabled = Some(input);
        self
    }
    /// <p>Indicates whether or not email sending is enabled for your Amazon SES account in the current Amazon Web Services Region.</p>
    pub fn set_sending_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.sending_enabled = input;
        self
    }
    /// <p>An object that contains information about the email address suppression preferences for your account in the current Amazon Web Services Region.</p>
    pub fn suppression_attributes(mut self, input: crate::types::SuppressionAttributes) -> Self {
        self.suppression_attributes = Some(input);
        self
    }
    /// <p>An object that contains information about the email address suppression preferences for your account in the current Amazon Web Services Region.</p>
    pub fn set_suppression_attributes(
        mut self,
        input: std::option::Option<crate::types::SuppressionAttributes>,
    ) -> Self {
        self.suppression_attributes = input;
        self
    }
    /// <p>An object that defines your account details.</p>
    pub fn details(mut self, input: crate::types::AccountDetails) -> Self {
        self.details = Some(input);
        self
    }
    /// <p>An object that defines your account details.</p>
    pub fn set_details(mut self, input: std::option::Option<crate::types::AccountDetails>) -> Self {
        self.details = input;
        self
    }
    /// <p>The VDM attributes that apply to your Amazon SES account.</p>
    pub fn vdm_attributes(mut self, input: crate::types::VdmAttributes) -> Self {
        self.vdm_attributes = Some(input);
        self
    }
    /// <p>The VDM attributes that apply to your Amazon SES account.</p>
    pub fn set_vdm_attributes(
        mut self,
        input: std::option::Option<crate::types::VdmAttributes>,
    ) -> Self {
        self.vdm_attributes = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetAccountOutput`](crate::operation::get_account::GetAccountOutput).
    pub fn build(self) -> crate::operation::get_account::GetAccountOutput {
        crate::operation::get_account::GetAccountOutput {
            dedicated_ip_auto_warmup_enabled: self
                .dedicated_ip_auto_warmup_enabled
                .unwrap_or_default(),
            enforcement_status: self.enforcement_status,
            production_access_enabled: self.production_access_enabled.unwrap_or_default(),
            send_quota: self.send_quota,
            sending_enabled: self.sending_enabled.unwrap_or_default(),
            suppression_attributes: self.suppression_attributes,
            details: self.details,
            vdm_attributes: self.vdm_attributes,
            _request_id: self._request_id,
        }
    }
}
