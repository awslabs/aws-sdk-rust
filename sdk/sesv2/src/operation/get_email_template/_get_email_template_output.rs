// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The following element is returned by the service.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetEmailTemplateOutput {
    /// <p>The name of the template.</p>
    #[doc(hidden)]
    pub template_name: std::option::Option<std::string::String>,
    /// <p>The content of the email template, composed of a subject line, an HTML part, and a text-only part.</p>
    #[doc(hidden)]
    pub template_content: std::option::Option<crate::types::EmailTemplateContent>,
    _request_id: Option<String>,
}
impl GetEmailTemplateOutput {
    /// <p>The name of the template.</p>
    pub fn template_name(&self) -> std::option::Option<&str> {
        self.template_name.as_deref()
    }
    /// <p>The content of the email template, composed of a subject line, an HTML part, and a text-only part.</p>
    pub fn template_content(&self) -> std::option::Option<&crate::types::EmailTemplateContent> {
        self.template_content.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetEmailTemplateOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetEmailTemplateOutput {
    /// Creates a new builder-style object to manufacture [`GetEmailTemplateOutput`](crate::operation::get_email_template::GetEmailTemplateOutput).
    pub fn builder() -> crate::operation::get_email_template::builders::GetEmailTemplateOutputBuilder
    {
        crate::operation::get_email_template::builders::GetEmailTemplateOutputBuilder::default()
    }
}

/// A builder for [`GetEmailTemplateOutput`](crate::operation::get_email_template::GetEmailTemplateOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetEmailTemplateOutputBuilder {
    pub(crate) template_name: std::option::Option<std::string::String>,
    pub(crate) template_content: std::option::Option<crate::types::EmailTemplateContent>,
    _request_id: Option<String>,
}
impl GetEmailTemplateOutputBuilder {
    /// <p>The name of the template.</p>
    pub fn template_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.template_name = Some(input.into());
        self
    }
    /// <p>The name of the template.</p>
    pub fn set_template_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.template_name = input;
        self
    }
    /// <p>The content of the email template, composed of a subject line, an HTML part, and a text-only part.</p>
    pub fn template_content(mut self, input: crate::types::EmailTemplateContent) -> Self {
        self.template_content = Some(input);
        self
    }
    /// <p>The content of the email template, composed of a subject line, an HTML part, and a text-only part.</p>
    pub fn set_template_content(
        mut self,
        input: std::option::Option<crate::types::EmailTemplateContent>,
    ) -> Self {
        self.template_content = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetEmailTemplateOutput`](crate::operation::get_email_template::GetEmailTemplateOutput).
    pub fn build(self) -> crate::operation::get_email_template::GetEmailTemplateOutput {
        crate::operation::get_email_template::GetEmailTemplateOutput {
            template_name: self.template_name,
            template_content: self.template_content,
            _request_id: self._request_id,
        }
    }
}
