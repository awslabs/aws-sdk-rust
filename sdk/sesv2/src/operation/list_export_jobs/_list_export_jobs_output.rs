// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An HTTP 200 response if the request succeeds, or an error message if the request fails.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListExportJobsOutput {
    /// <p>A list of the export job summaries.</p>
    pub export_jobs: ::std::option::Option<::std::vec::Vec<crate::types::ExportJobSummary>>,
    /// <p>A string token indicating that there might be additional export jobs available to be listed. Use this token to a subsequent call to <code>ListExportJobs</code> with the same parameters to retrieve the next page of export jobs.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListExportJobsOutput {
    /// <p>A list of the export job summaries.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.export_jobs.is_none()`.
    pub fn export_jobs(&self) -> &[crate::types::ExportJobSummary] {
        self.export_jobs.as_deref().unwrap_or_default()
    }
    /// <p>A string token indicating that there might be additional export jobs available to be listed. Use this token to a subsequent call to <code>ListExportJobs</code> with the same parameters to retrieve the next page of export jobs.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ::aws_http::request_id::RequestId for ListExportJobsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListExportJobsOutput {
    /// Creates a new builder-style object to manufacture [`ListExportJobsOutput`](crate::operation::list_export_jobs::ListExportJobsOutput).
    pub fn builder() -> crate::operation::list_export_jobs::builders::ListExportJobsOutputBuilder {
        crate::operation::list_export_jobs::builders::ListExportJobsOutputBuilder::default()
    }
}

/// A builder for [`ListExportJobsOutput`](crate::operation::list_export_jobs::ListExportJobsOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListExportJobsOutputBuilder {
    pub(crate) export_jobs: ::std::option::Option<::std::vec::Vec<crate::types::ExportJobSummary>>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListExportJobsOutputBuilder {
    /// Appends an item to `export_jobs`.
    ///
    /// To override the contents of this collection use [`set_export_jobs`](Self::set_export_jobs).
    ///
    /// <p>A list of the export job summaries.</p>
    pub fn export_jobs(mut self, input: crate::types::ExportJobSummary) -> Self {
        let mut v = self.export_jobs.unwrap_or_default();
        v.push(input);
        self.export_jobs = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of the export job summaries.</p>
    pub fn set_export_jobs(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ExportJobSummary>>) -> Self {
        self.export_jobs = input;
        self
    }
    /// <p>A list of the export job summaries.</p>
    pub fn get_export_jobs(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ExportJobSummary>> {
        &self.export_jobs
    }
    /// <p>A string token indicating that there might be additional export jobs available to be listed. Use this token to a subsequent call to <code>ListExportJobs</code> with the same parameters to retrieve the next page of export jobs.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A string token indicating that there might be additional export jobs available to be listed. Use this token to a subsequent call to <code>ListExportJobs</code> with the same parameters to retrieve the next page of export jobs.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>A string token indicating that there might be additional export jobs available to be listed. Use this token to a subsequent call to <code>ListExportJobs</code> with the same parameters to retrieve the next page of export jobs.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListExportJobsOutput`](crate::operation::list_export_jobs::ListExportJobsOutput).
    pub fn build(self) -> crate::operation::list_export_jobs::ListExportJobsOutput {
        crate::operation::list_export_jobs::ListExportJobsOutput {
            export_jobs: self.export_jobs,
            next_token: self.next_token,
            _request_id: self._request_id,
        }
    }
}
