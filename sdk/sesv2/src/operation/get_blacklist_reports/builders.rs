// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::get_blacklist_reports::_get_blacklist_reports_output::GetBlacklistReportsOutputBuilder;

pub use crate::operation::get_blacklist_reports::_get_blacklist_reports_input::GetBlacklistReportsInputBuilder;

/// Fluent builder constructing a request to `GetBlacklistReports`.
///
/// <p>Retrieve a list of the blacklists that your dedicated IP addresses appear on.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetBlacklistReportsFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::get_blacklist_reports::builders::GetBlacklistReportsInputBuilder,
}
impl GetBlacklistReportsFluentBuilder {
    /// Creates a new `GetBlacklistReports`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::get_blacklist_reports::GetBlacklistReports,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::get_blacklist_reports::GetBlacklistReportsError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::get_blacklist_reports::GetBlacklistReportsOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::get_blacklist_reports::GetBlacklistReportsError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Appends an item to `BlacklistItemNames`.
    ///
    /// To override the contents of this collection use [`set_blacklist_item_names`](Self::set_blacklist_item_names).
    ///
    /// <p>A list of IP addresses that you want to retrieve blacklist information about. You can only specify the dedicated IP addresses that you use to send email using Amazon SES or Amazon Pinpoint.</p>
    pub fn blacklist_item_names(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.blacklist_item_names(input.into());
        self
    }
    /// <p>A list of IP addresses that you want to retrieve blacklist information about. You can only specify the dedicated IP addresses that you use to send email using Amazon SES or Amazon Pinpoint.</p>
    pub fn set_blacklist_item_names(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_blacklist_item_names(input);
        self
    }
}
