// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a request to update a sending authorization policy for an identity. Sending authorization is an Amazon SES feature that enables you to authorize other senders to use your identities. For information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-identity-owner-tasks-management.html">Amazon SES Developer Guide</a>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateEmailIdentityPolicyInput {
    /// <p>The email identity.</p>
    #[doc(hidden)]
    pub email_identity: std::option::Option<std::string::String>,
    /// <p>The name of the policy.</p>
    /// <p>The policy name cannot exceed 64 characters and can only include alphanumeric characters, dashes, and underscores.</p>
    #[doc(hidden)]
    pub policy_name: std::option::Option<std::string::String>,
    /// <p>The text of the policy in JSON format. The policy cannot exceed 4 KB.</p>
    /// <p> For information about the syntax of sending authorization policies, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-policies.html">Amazon SES Developer Guide</a>.</p>
    #[doc(hidden)]
    pub policy: std::option::Option<std::string::String>,
}
impl UpdateEmailIdentityPolicyInput {
    /// <p>The email identity.</p>
    pub fn email_identity(&self) -> std::option::Option<&str> {
        self.email_identity.as_deref()
    }
    /// <p>The name of the policy.</p>
    /// <p>The policy name cannot exceed 64 characters and can only include alphanumeric characters, dashes, and underscores.</p>
    pub fn policy_name(&self) -> std::option::Option<&str> {
        self.policy_name.as_deref()
    }
    /// <p>The text of the policy in JSON format. The policy cannot exceed 4 KB.</p>
    /// <p> For information about the syntax of sending authorization policies, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-policies.html">Amazon SES Developer Guide</a>.</p>
    pub fn policy(&self) -> std::option::Option<&str> {
        self.policy.as_deref()
    }
}
impl UpdateEmailIdentityPolicyInput {
    /// Creates a new builder-style object to manufacture [`UpdateEmailIdentityPolicyInput`](crate::operation::update_email_identity_policy::UpdateEmailIdentityPolicyInput).
    pub fn builder() -> crate::operation::update_email_identity_policy::builders::UpdateEmailIdentityPolicyInputBuilder{
        crate::operation::update_email_identity_policy::builders::UpdateEmailIdentityPolicyInputBuilder::default()
    }
}

/// A builder for [`UpdateEmailIdentityPolicyInput`](crate::operation::update_email_identity_policy::UpdateEmailIdentityPolicyInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateEmailIdentityPolicyInputBuilder {
    pub(crate) email_identity: std::option::Option<std::string::String>,
    pub(crate) policy_name: std::option::Option<std::string::String>,
    pub(crate) policy: std::option::Option<std::string::String>,
}
impl UpdateEmailIdentityPolicyInputBuilder {
    /// <p>The email identity.</p>
    pub fn email_identity(mut self, input: impl Into<std::string::String>) -> Self {
        self.email_identity = Some(input.into());
        self
    }
    /// <p>The email identity.</p>
    pub fn set_email_identity(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.email_identity = input;
        self
    }
    /// <p>The name of the policy.</p>
    /// <p>The policy name cannot exceed 64 characters and can only include alphanumeric characters, dashes, and underscores.</p>
    pub fn policy_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.policy_name = Some(input.into());
        self
    }
    /// <p>The name of the policy.</p>
    /// <p>The policy name cannot exceed 64 characters and can only include alphanumeric characters, dashes, and underscores.</p>
    pub fn set_policy_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.policy_name = input;
        self
    }
    /// <p>The text of the policy in JSON format. The policy cannot exceed 4 KB.</p>
    /// <p> For information about the syntax of sending authorization policies, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-policies.html">Amazon SES Developer Guide</a>.</p>
    pub fn policy(mut self, input: impl Into<std::string::String>) -> Self {
        self.policy = Some(input.into());
        self
    }
    /// <p>The text of the policy in JSON format. The policy cannot exceed 4 KB.</p>
    /// <p> For information about the syntax of sending authorization policies, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-policies.html">Amazon SES Developer Guide</a>.</p>
    pub fn set_policy(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.policy = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateEmailIdentityPolicyInput`](crate::operation::update_email_identity_policy::UpdateEmailIdentityPolicyInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::update_email_identity_policy::UpdateEmailIdentityPolicyInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::update_email_identity_policy::UpdateEmailIdentityPolicyInput {
                email_identity: self.email_identity,
                policy_name: self.policy_name,
                policy: self.policy,
            },
        )
    }
}
