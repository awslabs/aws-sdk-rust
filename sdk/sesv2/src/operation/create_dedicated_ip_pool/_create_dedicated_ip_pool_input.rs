// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A request to create a new dedicated IP pool.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateDedicatedIpPoolInput {
    /// <p>The name of the dedicated IP pool.</p>
    pub pool_name: ::std::option::Option<::std::string::String>,
    /// <p>An object that defines the tags (keys and values) that you want to associate with the pool.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    /// <p>The type of scaling mode.</p>
    pub scaling_mode: ::std::option::Option<crate::types::ScalingMode>,
}
impl CreateDedicatedIpPoolInput {
    /// <p>The name of the dedicated IP pool.</p>
    pub fn pool_name(&self) -> ::std::option::Option<&str> {
        self.pool_name.as_deref()
    }
    /// <p>An object that defines the tags (keys and values) that you want to associate with the pool.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
    /// <p>The type of scaling mode.</p>
    pub fn scaling_mode(&self) -> ::std::option::Option<&crate::types::ScalingMode> {
        self.scaling_mode.as_ref()
    }
}
impl CreateDedicatedIpPoolInput {
    /// Creates a new builder-style object to manufacture [`CreateDedicatedIpPoolInput`](crate::operation::create_dedicated_ip_pool::CreateDedicatedIpPoolInput).
    pub fn builder() -> crate::operation::create_dedicated_ip_pool::builders::CreateDedicatedIpPoolInputBuilder {
        crate::operation::create_dedicated_ip_pool::builders::CreateDedicatedIpPoolInputBuilder::default()
    }
}

/// A builder for [`CreateDedicatedIpPoolInput`](crate::operation::create_dedicated_ip_pool::CreateDedicatedIpPoolInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateDedicatedIpPoolInputBuilder {
    pub(crate) pool_name: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    pub(crate) scaling_mode: ::std::option::Option<crate::types::ScalingMode>,
}
impl CreateDedicatedIpPoolInputBuilder {
    /// <p>The name of the dedicated IP pool.</p>
    /// This field is required.
    pub fn pool_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.pool_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the dedicated IP pool.</p>
    pub fn set_pool_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.pool_name = input;
        self
    }
    /// <p>The name of the dedicated IP pool.</p>
    pub fn get_pool_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.pool_name
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>An object that defines the tags (keys and values) that you want to associate with the pool.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>An object that defines the tags (keys and values) that you want to associate with the pool.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>An object that defines the tags (keys and values) that you want to associate with the pool.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// <p>The type of scaling mode.</p>
    pub fn scaling_mode(mut self, input: crate::types::ScalingMode) -> Self {
        self.scaling_mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of scaling mode.</p>
    pub fn set_scaling_mode(mut self, input: ::std::option::Option<crate::types::ScalingMode>) -> Self {
        self.scaling_mode = input;
        self
    }
    /// <p>The type of scaling mode.</p>
    pub fn get_scaling_mode(&self) -> &::std::option::Option<crate::types::ScalingMode> {
        &self.scaling_mode
    }
    /// Consumes the builder and constructs a [`CreateDedicatedIpPoolInput`](crate::operation::create_dedicated_ip_pool::CreateDedicatedIpPoolInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_dedicated_ip_pool::CreateDedicatedIpPoolInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::create_dedicated_ip_pool::CreateDedicatedIpPoolInput {
            pool_name: self.pool_name,
            tags: self.tags,
            scaling_mode: self.scaling_mode,
        })
    }
}
