// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_custom_verification_email_template::_update_custom_verification_email_template_output::UpdateCustomVerificationEmailTemplateOutputBuilder;

pub use crate::operation::update_custom_verification_email_template::_update_custom_verification_email_template_input::UpdateCustomVerificationEmailTemplateInputBuilder;

/// Fluent builder constructing a request to `UpdateCustomVerificationEmailTemplate`.
///
/// <p>Updates an existing custom verification email template.</p>
/// <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/dg/creating-identities.html#send-email-verify-address-custom">Using custom verification email templates</a> in the <i>Amazon SES Developer Guide</i>.</p>
/// <p>You can execute this operation no more than once per second.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateCustomVerificationEmailTemplateFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::update_custom_verification_email_template::builders::UpdateCustomVerificationEmailTemplateInputBuilder
            }
impl UpdateCustomVerificationEmailTemplateFluentBuilder {
    /// Creates a new `UpdateCustomVerificationEmailTemplate`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
                    pub async fn customize(self) -> std::result::Result<
                        crate::client::customize::CustomizableOperation<crate::operation::update_custom_verification_email_template::UpdateCustomVerificationEmailTemplate, aws_http::retry::AwsResponseRetryClassifier,>,
                        aws_smithy_http::result::SdkError<crate::operation::update_custom_verification_email_template::UpdateCustomVerificationEmailTemplateError>
    >{
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
                    pub async fn send(self) -> std::result::Result<crate::operation::update_custom_verification_email_template::UpdateCustomVerificationEmailTemplateOutput, aws_smithy_http::result::SdkError<crate::operation::update_custom_verification_email_template::UpdateCustomVerificationEmailTemplateError>>
                     {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the custom verification email template that you want to update.</p>
    pub fn template_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.template_name(input.into());
        self
    }
    /// <p>The name of the custom verification email template that you want to update.</p>
    pub fn set_template_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_template_name(input);
        self
    }
    /// <p>The email address that the custom verification email is sent from.</p>
    pub fn from_email_address(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.from_email_address(input.into());
        self
    }
    /// <p>The email address that the custom verification email is sent from.</p>
    pub fn set_from_email_address(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_from_email_address(input);
        self
    }
    /// <p>The subject line of the custom verification email.</p>
    pub fn template_subject(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.template_subject(input.into());
        self
    }
    /// <p>The subject line of the custom verification email.</p>
    pub fn set_template_subject(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_template_subject(input);
        self
    }
    /// <p>The content of the custom verification email. The total size of the email must be less than 10 MB. The message body may contain HTML, with some limitations. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/dg/creating-identities.html#send-email-verify-address-custom-faq">Custom verification email frequently asked questions</a> in the <i>Amazon SES Developer Guide</i>.</p>
    pub fn template_content(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.template_content(input.into());
        self
    }
    /// <p>The content of the custom verification email. The total size of the email must be less than 10 MB. The message body may contain HTML, with some limitations. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/dg/creating-identities.html#send-email-verify-address-custom-faq">Custom verification email frequently asked questions</a> in the <i>Amazon SES Developer Guide</i>.</p>
    pub fn set_template_content(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_template_content(input);
        self
    }
    /// <p>The URL that the recipient of the verification email is sent to if his or her address is successfully verified.</p>
    pub fn success_redirection_url(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.success_redirection_url(input.into());
        self
    }
    /// <p>The URL that the recipient of the verification email is sent to if his or her address is successfully verified.</p>
    pub fn set_success_redirection_url(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_success_redirection_url(input);
        self
    }
    /// <p>The URL that the recipient of the verification email is sent to if his or her address is not successfully verified.</p>
    pub fn failure_redirection_url(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.failure_redirection_url(input.into());
        self
    }
    /// <p>The URL that the recipient of the verification email is sent to if his or her address is not successfully verified.</p>
    pub fn set_failure_redirection_url(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_failure_redirection_url(input);
        self
    }
}
