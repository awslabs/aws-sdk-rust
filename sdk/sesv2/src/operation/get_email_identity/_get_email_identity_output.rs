// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details about an email identity.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetEmailIdentityOutput {
    /// <p>The email identity type. Note: the <code>MANAGED_DOMAIN</code> identity type is not supported.</p>
    #[doc(hidden)]
    pub identity_type: std::option::Option<crate::types::IdentityType>,
    /// <p>The feedback forwarding configuration for the identity.</p>
    /// <p>If the value is <code>true</code>, you receive email notifications when bounce or complaint events occur. These notifications are sent to the address that you specified in the <code>Return-Path</code> header of the original email.</p>
    /// <p>You're required to have a method of tracking bounces and complaints. If you haven't set up another mechanism for receiving bounce or complaint notifications (for example, by setting up an event destination), you receive an email notification when these events occur (even if this setting is disabled).</p>
    #[doc(hidden)]
    pub feedback_forwarding_status: bool,
    /// <p>Specifies whether or not the identity is verified. You can only send email from verified email addresses or domains. For more information about verifying identities, see the <a href="https://docs.aws.amazon.com/pinpoint/latest/userguide/channels-email-manage-verify.html">Amazon Pinpoint User Guide</a>.</p>
    #[doc(hidden)]
    pub verified_for_sending_status: bool,
    /// <p>An object that contains information about the DKIM attributes for the identity.</p>
    #[doc(hidden)]
    pub dkim_attributes: std::option::Option<crate::types::DkimAttributes>,
    /// <p>An object that contains information about the Mail-From attributes for the email identity.</p>
    #[doc(hidden)]
    pub mail_from_attributes: std::option::Option<crate::types::MailFromAttributes>,
    /// <p>A map of policy names to policies.</p>
    #[doc(hidden)]
    pub policies:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>An array of objects that define the tags (keys and values) that are associated with the email identity.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    /// <p>The configuration set used by default when sending from this identity.</p>
    #[doc(hidden)]
    pub configuration_set_name: std::option::Option<std::string::String>,
    /// <p>The verification status of the identity. The status can be one of the following:</p>
    /// <ul>
    /// <li> <p> <code>PENDING</code> – The verification process was initiated, but Amazon SES hasn't yet been able to verify the identity.</p> </li>
    /// <li> <p> <code>SUCCESS</code> – The verification process completed successfully.</p> </li>
    /// <li> <p> <code>FAILED</code> – The verification process failed.</p> </li>
    /// <li> <p> <code>TEMPORARY_FAILURE</code> – A temporary issue is preventing Amazon SES from determining the verification status of the identity.</p> </li>
    /// <li> <p> <code>NOT_STARTED</code> – The verification process hasn't been initiated for the identity.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub verification_status: std::option::Option<crate::types::VerificationStatus>,
    _request_id: Option<String>,
}
impl GetEmailIdentityOutput {
    /// <p>The email identity type. Note: the <code>MANAGED_DOMAIN</code> identity type is not supported.</p>
    pub fn identity_type(&self) -> std::option::Option<&crate::types::IdentityType> {
        self.identity_type.as_ref()
    }
    /// <p>The feedback forwarding configuration for the identity.</p>
    /// <p>If the value is <code>true</code>, you receive email notifications when bounce or complaint events occur. These notifications are sent to the address that you specified in the <code>Return-Path</code> header of the original email.</p>
    /// <p>You're required to have a method of tracking bounces and complaints. If you haven't set up another mechanism for receiving bounce or complaint notifications (for example, by setting up an event destination), you receive an email notification when these events occur (even if this setting is disabled).</p>
    pub fn feedback_forwarding_status(&self) -> bool {
        self.feedback_forwarding_status
    }
    /// <p>Specifies whether or not the identity is verified. You can only send email from verified email addresses or domains. For more information about verifying identities, see the <a href="https://docs.aws.amazon.com/pinpoint/latest/userguide/channels-email-manage-verify.html">Amazon Pinpoint User Guide</a>.</p>
    pub fn verified_for_sending_status(&self) -> bool {
        self.verified_for_sending_status
    }
    /// <p>An object that contains information about the DKIM attributes for the identity.</p>
    pub fn dkim_attributes(&self) -> std::option::Option<&crate::types::DkimAttributes> {
        self.dkim_attributes.as_ref()
    }
    /// <p>An object that contains information about the Mail-From attributes for the email identity.</p>
    pub fn mail_from_attributes(&self) -> std::option::Option<&crate::types::MailFromAttributes> {
        self.mail_from_attributes.as_ref()
    }
    /// <p>A map of policy names to policies.</p>
    pub fn policies(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.policies.as_ref()
    }
    /// <p>An array of objects that define the tags (keys and values) that are associated with the email identity.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::types::Tag]> {
        self.tags.as_deref()
    }
    /// <p>The configuration set used by default when sending from this identity.</p>
    pub fn configuration_set_name(&self) -> std::option::Option<&str> {
        self.configuration_set_name.as_deref()
    }
    /// <p>The verification status of the identity. The status can be one of the following:</p>
    /// <ul>
    /// <li> <p> <code>PENDING</code> – The verification process was initiated, but Amazon SES hasn't yet been able to verify the identity.</p> </li>
    /// <li> <p> <code>SUCCESS</code> – The verification process completed successfully.</p> </li>
    /// <li> <p> <code>FAILED</code> – The verification process failed.</p> </li>
    /// <li> <p> <code>TEMPORARY_FAILURE</code> – A temporary issue is preventing Amazon SES from determining the verification status of the identity.</p> </li>
    /// <li> <p> <code>NOT_STARTED</code> – The verification process hasn't been initiated for the identity.</p> </li>
    /// </ul>
    pub fn verification_status(&self) -> std::option::Option<&crate::types::VerificationStatus> {
        self.verification_status.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetEmailIdentityOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetEmailIdentityOutput {
    /// Creates a new builder-style object to manufacture [`GetEmailIdentityOutput`](crate::operation::get_email_identity::GetEmailIdentityOutput).
    pub fn builder() -> crate::operation::get_email_identity::builders::GetEmailIdentityOutputBuilder
    {
        crate::operation::get_email_identity::builders::GetEmailIdentityOutputBuilder::default()
    }
}

/// A builder for [`GetEmailIdentityOutput`](crate::operation::get_email_identity::GetEmailIdentityOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetEmailIdentityOutputBuilder {
    pub(crate) identity_type: std::option::Option<crate::types::IdentityType>,
    pub(crate) feedback_forwarding_status: std::option::Option<bool>,
    pub(crate) verified_for_sending_status: std::option::Option<bool>,
    pub(crate) dkim_attributes: std::option::Option<crate::types::DkimAttributes>,
    pub(crate) mail_from_attributes: std::option::Option<crate::types::MailFromAttributes>,
    pub(crate) policies:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    pub(crate) configuration_set_name: std::option::Option<std::string::String>,
    pub(crate) verification_status: std::option::Option<crate::types::VerificationStatus>,
    _request_id: Option<String>,
}
impl GetEmailIdentityOutputBuilder {
    /// <p>The email identity type. Note: the <code>MANAGED_DOMAIN</code> identity type is not supported.</p>
    pub fn identity_type(mut self, input: crate::types::IdentityType) -> Self {
        self.identity_type = Some(input);
        self
    }
    /// <p>The email identity type. Note: the <code>MANAGED_DOMAIN</code> identity type is not supported.</p>
    pub fn set_identity_type(
        mut self,
        input: std::option::Option<crate::types::IdentityType>,
    ) -> Self {
        self.identity_type = input;
        self
    }
    /// <p>The feedback forwarding configuration for the identity.</p>
    /// <p>If the value is <code>true</code>, you receive email notifications when bounce or complaint events occur. These notifications are sent to the address that you specified in the <code>Return-Path</code> header of the original email.</p>
    /// <p>You're required to have a method of tracking bounces and complaints. If you haven't set up another mechanism for receiving bounce or complaint notifications (for example, by setting up an event destination), you receive an email notification when these events occur (even if this setting is disabled).</p>
    pub fn feedback_forwarding_status(mut self, input: bool) -> Self {
        self.feedback_forwarding_status = Some(input);
        self
    }
    /// <p>The feedback forwarding configuration for the identity.</p>
    /// <p>If the value is <code>true</code>, you receive email notifications when bounce or complaint events occur. These notifications are sent to the address that you specified in the <code>Return-Path</code> header of the original email.</p>
    /// <p>You're required to have a method of tracking bounces and complaints. If you haven't set up another mechanism for receiving bounce or complaint notifications (for example, by setting up an event destination), you receive an email notification when these events occur (even if this setting is disabled).</p>
    pub fn set_feedback_forwarding_status(mut self, input: std::option::Option<bool>) -> Self {
        self.feedback_forwarding_status = input;
        self
    }
    /// <p>Specifies whether or not the identity is verified. You can only send email from verified email addresses or domains. For more information about verifying identities, see the <a href="https://docs.aws.amazon.com/pinpoint/latest/userguide/channels-email-manage-verify.html">Amazon Pinpoint User Guide</a>.</p>
    pub fn verified_for_sending_status(mut self, input: bool) -> Self {
        self.verified_for_sending_status = Some(input);
        self
    }
    /// <p>Specifies whether or not the identity is verified. You can only send email from verified email addresses or domains. For more information about verifying identities, see the <a href="https://docs.aws.amazon.com/pinpoint/latest/userguide/channels-email-manage-verify.html">Amazon Pinpoint User Guide</a>.</p>
    pub fn set_verified_for_sending_status(mut self, input: std::option::Option<bool>) -> Self {
        self.verified_for_sending_status = input;
        self
    }
    /// <p>An object that contains information about the DKIM attributes for the identity.</p>
    pub fn dkim_attributes(mut self, input: crate::types::DkimAttributes) -> Self {
        self.dkim_attributes = Some(input);
        self
    }
    /// <p>An object that contains information about the DKIM attributes for the identity.</p>
    pub fn set_dkim_attributes(
        mut self,
        input: std::option::Option<crate::types::DkimAttributes>,
    ) -> Self {
        self.dkim_attributes = input;
        self
    }
    /// <p>An object that contains information about the Mail-From attributes for the email identity.</p>
    pub fn mail_from_attributes(mut self, input: crate::types::MailFromAttributes) -> Self {
        self.mail_from_attributes = Some(input);
        self
    }
    /// <p>An object that contains information about the Mail-From attributes for the email identity.</p>
    pub fn set_mail_from_attributes(
        mut self,
        input: std::option::Option<crate::types::MailFromAttributes>,
    ) -> Self {
        self.mail_from_attributes = input;
        self
    }
    /// Adds a key-value pair to `policies`.
    ///
    /// To override the contents of this collection use [`set_policies`](Self::set_policies).
    ///
    /// <p>A map of policy names to policies.</p>
    pub fn policies(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.policies.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.policies = Some(hash_map);
        self
    }
    /// <p>A map of policy names to policies.</p>
    pub fn set_policies(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.policies = input;
        self
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>An array of objects that define the tags (keys and values) that are associated with the email identity.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = Some(v);
        self
    }
    /// <p>An array of objects that define the tags (keys and values) that are associated with the email identity.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.tags = input;
        self
    }
    /// <p>The configuration set used by default when sending from this identity.</p>
    pub fn configuration_set_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.configuration_set_name = Some(input.into());
        self
    }
    /// <p>The configuration set used by default when sending from this identity.</p>
    pub fn set_configuration_set_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.configuration_set_name = input;
        self
    }
    /// <p>The verification status of the identity. The status can be one of the following:</p>
    /// <ul>
    /// <li> <p> <code>PENDING</code> – The verification process was initiated, but Amazon SES hasn't yet been able to verify the identity.</p> </li>
    /// <li> <p> <code>SUCCESS</code> – The verification process completed successfully.</p> </li>
    /// <li> <p> <code>FAILED</code> – The verification process failed.</p> </li>
    /// <li> <p> <code>TEMPORARY_FAILURE</code> – A temporary issue is preventing Amazon SES from determining the verification status of the identity.</p> </li>
    /// <li> <p> <code>NOT_STARTED</code> – The verification process hasn't been initiated for the identity.</p> </li>
    /// </ul>
    pub fn verification_status(mut self, input: crate::types::VerificationStatus) -> Self {
        self.verification_status = Some(input);
        self
    }
    /// <p>The verification status of the identity. The status can be one of the following:</p>
    /// <ul>
    /// <li> <p> <code>PENDING</code> – The verification process was initiated, but Amazon SES hasn't yet been able to verify the identity.</p> </li>
    /// <li> <p> <code>SUCCESS</code> – The verification process completed successfully.</p> </li>
    /// <li> <p> <code>FAILED</code> – The verification process failed.</p> </li>
    /// <li> <p> <code>TEMPORARY_FAILURE</code> – A temporary issue is preventing Amazon SES from determining the verification status of the identity.</p> </li>
    /// <li> <p> <code>NOT_STARTED</code> – The verification process hasn't been initiated for the identity.</p> </li>
    /// </ul>
    pub fn set_verification_status(
        mut self,
        input: std::option::Option<crate::types::VerificationStatus>,
    ) -> Self {
        self.verification_status = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetEmailIdentityOutput`](crate::operation::get_email_identity::GetEmailIdentityOutput).
    pub fn build(self) -> crate::operation::get_email_identity::GetEmailIdentityOutput {
        crate::operation::get_email_identity::GetEmailIdentityOutput {
            identity_type: self.identity_type,
            feedback_forwarding_status: self.feedback_forwarding_status.unwrap_or_default(),
            verified_for_sending_status: self.verified_for_sending_status.unwrap_or_default(),
            dkim_attributes: self.dkim_attributes,
            mail_from_attributes: self.mail_from_attributes,
            policies: self.policies,
            tags: self.tags,
            configuration_set_name: self.configuration_set_name,
            verification_status: self.verification_status,
            _request_id: self._request_id,
        }
    }
}
