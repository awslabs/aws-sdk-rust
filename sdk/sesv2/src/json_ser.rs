// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_create_configuration_set_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateConfigurationSetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.configuration_set_name {
        object.key("ConfigurationSetName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.delivery_options {
        let mut object_3 = object.key("DeliveryOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_delivery_options(&mut object_3, var_2)?;
        object_3.finish();
    }
    if let Some(var_4) = &input.reputation_options {
        let mut object_5 = object.key("ReputationOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_reputation_options(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.sending_options {
        let mut object_7 = object.key("SendingOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_sending_options(&mut object_7, var_6)?;
        object_7.finish();
    }
    if let Some(var_8) = &input.suppression_options {
        let mut object_9 = object.key("SuppressionOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_suppression_options(&mut object_9, var_8)?;
        object_9.finish();
    }
    if let Some(var_10) = &input.tags {
        let mut array_11 = object.key("Tags").start_array();
        for item_12 in var_10 {
            {
                let mut object_13 = array_11.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_13, item_12)?;
                object_13.finish();
            }
        }
        array_11.finish();
    }
    if let Some(var_14) = &input.tracking_options {
        let mut object_15 = object.key("TrackingOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_tracking_options(&mut object_15, var_14)?;
        object_15.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_configuration_set_event_destination_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateConfigurationSetEventDestinationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_16) = &input.event_destination {
        let mut object_17 = object.key("EventDestination").start_object();
        crate::json_ser::serialize_structure_crate_model_event_destination_definition(
            &mut object_17,
            var_16,
        )?;
        object_17.finish();
    }
    if let Some(var_18) = &input.event_destination_name {
        object.key("EventDestinationName").string(var_18.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_contact_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateContactInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_19) = &input.attributes_data {
        object.key("AttributesData").string(var_19.as_str());
    }
    if let Some(var_20) = &input.email_address {
        object.key("EmailAddress").string(var_20.as_str());
    }
    if let Some(var_21) = &input.topic_preferences {
        let mut array_22 = object.key("TopicPreferences").start_array();
        for item_23 in var_21 {
            {
                let mut object_24 = array_22.value().start_object();
                crate::json_ser::serialize_structure_crate_model_topic_preference(
                    &mut object_24,
                    item_23,
                )?;
                object_24.finish();
            }
        }
        array_22.finish();
    }
    if input.unsubscribe_all {
        object.key("UnsubscribeAll").boolean(input.unsubscribe_all);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_contact_list_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateContactListInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_25) = &input.contact_list_name {
        object.key("ContactListName").string(var_25.as_str());
    }
    if let Some(var_26) = &input.description {
        object.key("Description").string(var_26.as_str());
    }
    if let Some(var_27) = &input.tags {
        let mut array_28 = object.key("Tags").start_array();
        for item_29 in var_27 {
            {
                let mut object_30 = array_28.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_30, item_29)?;
                object_30.finish();
            }
        }
        array_28.finish();
    }
    if let Some(var_31) = &input.topics {
        let mut array_32 = object.key("Topics").start_array();
        for item_33 in var_31 {
            {
                let mut object_34 = array_32.value().start_object();
                crate::json_ser::serialize_structure_crate_model_topic(&mut object_34, item_33)?;
                object_34.finish();
            }
        }
        array_32.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_custom_verification_email_template_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateCustomVerificationEmailTemplateInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_35) = &input.failure_redirection_url {
        object.key("FailureRedirectionURL").string(var_35.as_str());
    }
    if let Some(var_36) = &input.from_email_address {
        object.key("FromEmailAddress").string(var_36.as_str());
    }
    if let Some(var_37) = &input.success_redirection_url {
        object.key("SuccessRedirectionURL").string(var_37.as_str());
    }
    if let Some(var_38) = &input.template_content {
        object.key("TemplateContent").string(var_38.as_str());
    }
    if let Some(var_39) = &input.template_name {
        object.key("TemplateName").string(var_39.as_str());
    }
    if let Some(var_40) = &input.template_subject {
        object.key("TemplateSubject").string(var_40.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_dedicated_ip_pool_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDedicatedIpPoolInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_41) = &input.pool_name {
        object.key("PoolName").string(var_41.as_str());
    }
    if let Some(var_42) = &input.tags {
        let mut array_43 = object.key("Tags").start_array();
        for item_44 in var_42 {
            {
                let mut object_45 = array_43.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_45, item_44)?;
                object_45.finish();
            }
        }
        array_43.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_deliverability_test_report_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDeliverabilityTestReportInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_46) = &input.content {
        let mut object_47 = object.key("Content").start_object();
        crate::json_ser::serialize_structure_crate_model_email_content(&mut object_47, var_46)?;
        object_47.finish();
    }
    if let Some(var_48) = &input.from_email_address {
        object.key("FromEmailAddress").string(var_48.as_str());
    }
    if let Some(var_49) = &input.report_name {
        object.key("ReportName").string(var_49.as_str());
    }
    if let Some(var_50) = &input.tags {
        let mut array_51 = object.key("Tags").start_array();
        for item_52 in var_50 {
            {
                let mut object_53 = array_51.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_53, item_52)?;
                object_53.finish();
            }
        }
        array_51.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_email_identity_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateEmailIdentityInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_54) = &input.configuration_set_name {
        object.key("ConfigurationSetName").string(var_54.as_str());
    }
    if let Some(var_55) = &input.dkim_signing_attributes {
        let mut object_56 = object.key("DkimSigningAttributes").start_object();
        crate::json_ser::serialize_structure_crate_model_dkim_signing_attributes(
            &mut object_56,
            var_55,
        )?;
        object_56.finish();
    }
    if let Some(var_57) = &input.email_identity {
        object.key("EmailIdentity").string(var_57.as_str());
    }
    if let Some(var_58) = &input.tags {
        let mut array_59 = object.key("Tags").start_array();
        for item_60 in var_58 {
            {
                let mut object_61 = array_59.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_61, item_60)?;
                object_61.finish();
            }
        }
        array_59.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_email_identity_policy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateEmailIdentityPolicyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_62) = &input.policy {
        object.key("Policy").string(var_62.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_email_template_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateEmailTemplateInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_63) = &input.template_content {
        let mut object_64 = object.key("TemplateContent").start_object();
        crate::json_ser::serialize_structure_crate_model_email_template_content(
            &mut object_64,
            var_63,
        )?;
        object_64.finish();
    }
    if let Some(var_65) = &input.template_name {
        object.key("TemplateName").string(var_65.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_import_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateImportJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_66) = &input.import_data_source {
        let mut object_67 = object.key("ImportDataSource").start_object();
        crate::json_ser::serialize_structure_crate_model_import_data_source(
            &mut object_67,
            var_66,
        )?;
        object_67.finish();
    }
    if let Some(var_68) = &input.import_destination {
        let mut object_69 = object.key("ImportDestination").start_object();
        crate::json_ser::serialize_structure_crate_model_import_destination(
            &mut object_69,
            var_68,
        )?;
        object_69.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_contacts_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListContactsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_70) = &input.filter {
        let mut object_71 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_crate_model_list_contacts_filter(
            &mut object_71,
            var_70,
        )?;
        object_71.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_import_jobs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListImportJobsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_72) = &input.import_destination_type {
        object.key("ImportDestinationType").string(var_72.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_account_dedicated_ip_warmup_attributes_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutAccountDedicatedIpWarmupAttributesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.auto_warmup_enabled {
        object
            .key("AutoWarmupEnabled")
            .boolean(input.auto_warmup_enabled);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_account_details_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutAccountDetailsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_73) = &input.additional_contact_email_addresses {
        let mut array_74 = object.key("AdditionalContactEmailAddresses").start_array();
        for item_75 in var_73 {
            {
                array_74.value().string(item_75.as_str());
            }
        }
        array_74.finish();
    }
    if let Some(var_76) = &input.contact_language {
        object.key("ContactLanguage").string(var_76.as_str());
    }
    if let Some(var_77) = &input.mail_type {
        object.key("MailType").string(var_77.as_str());
    }
    if let Some(var_78) = &input.production_access_enabled {
        object.key("ProductionAccessEnabled").boolean(*var_78);
    }
    if let Some(var_79) = &input.use_case_description {
        object.key("UseCaseDescription").string(var_79.as_str());
    }
    if let Some(var_80) = &input.website_url {
        object.key("WebsiteURL").string(var_80.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_account_sending_attributes_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutAccountSendingAttributesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.sending_enabled {
        object.key("SendingEnabled").boolean(input.sending_enabled);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_account_suppression_attributes_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutAccountSuppressionAttributesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_81) = &input.suppressed_reasons {
        let mut array_82 = object.key("SuppressedReasons").start_array();
        for item_83 in var_81 {
            {
                array_82.value().string(item_83.as_str());
            }
        }
        array_82.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_configuration_set_delivery_options_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutConfigurationSetDeliveryOptionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_84) = &input.sending_pool_name {
        object.key("SendingPoolName").string(var_84.as_str());
    }
    if let Some(var_85) = &input.tls_policy {
        object.key("TlsPolicy").string(var_85.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_configuration_set_reputation_options_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutConfigurationSetReputationOptionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.reputation_metrics_enabled {
        object
            .key("ReputationMetricsEnabled")
            .boolean(input.reputation_metrics_enabled);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_configuration_set_sending_options_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutConfigurationSetSendingOptionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.sending_enabled {
        object.key("SendingEnabled").boolean(input.sending_enabled);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_configuration_set_suppression_options_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutConfigurationSetSuppressionOptionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_86) = &input.suppressed_reasons {
        let mut array_87 = object.key("SuppressedReasons").start_array();
        for item_88 in var_86 {
            {
                array_87.value().string(item_88.as_str());
            }
        }
        array_87.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_configuration_set_tracking_options_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutConfigurationSetTrackingOptionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_89) = &input.custom_redirect_domain {
        object.key("CustomRedirectDomain").string(var_89.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_dedicated_ip_in_pool_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutDedicatedIpInPoolInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_90) = &input.destination_pool_name {
        object.key("DestinationPoolName").string(var_90.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_dedicated_ip_warmup_attributes_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutDedicatedIpWarmupAttributesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_91) = &input.warmup_percentage {
        object.key("WarmupPercentage").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_91).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_deliverability_dashboard_option_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutDeliverabilityDashboardOptionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object
            .key("DashboardEnabled")
            .boolean(input.dashboard_enabled);
    }
    if let Some(var_92) = &input.subscribed_domains {
        let mut array_93 = object.key("SubscribedDomains").start_array();
        for item_94 in var_92 {
            {
                let mut object_95 = array_93.value().start_object();
                crate::json_ser::serialize_structure_crate_model_domain_deliverability_tracking_option(&mut object_95, item_94)?;
                object_95.finish();
            }
        }
        array_93.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_email_identity_configuration_set_attributes_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutEmailIdentityConfigurationSetAttributesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_96) = &input.configuration_set_name {
        object.key("ConfigurationSetName").string(var_96.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_email_identity_dkim_attributes_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutEmailIdentityDkimAttributesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.signing_enabled {
        object.key("SigningEnabled").boolean(input.signing_enabled);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_email_identity_dkim_signing_attributes_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutEmailIdentityDkimSigningAttributesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_97) = &input.signing_attributes {
        let mut object_98 = object.key("SigningAttributes").start_object();
        crate::json_ser::serialize_structure_crate_model_dkim_signing_attributes(
            &mut object_98,
            var_97,
        )?;
        object_98.finish();
    }
    if let Some(var_99) = &input.signing_attributes_origin {
        object
            .key("SigningAttributesOrigin")
            .string(var_99.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_email_identity_feedback_attributes_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutEmailIdentityFeedbackAttributesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.email_forwarding_enabled {
        object
            .key("EmailForwardingEnabled")
            .boolean(input.email_forwarding_enabled);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_email_identity_mail_from_attributes_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutEmailIdentityMailFromAttributesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_100) = &input.behavior_on_mx_failure {
        object.key("BehaviorOnMxFailure").string(var_100.as_str());
    }
    if let Some(var_101) = &input.mail_from_domain {
        object.key("MailFromDomain").string(var_101.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_suppressed_destination_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutSuppressedDestinationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_102) = &input.email_address {
        object.key("EmailAddress").string(var_102.as_str());
    }
    if let Some(var_103) = &input.reason {
        object.key("Reason").string(var_103.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_send_bulk_email_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SendBulkEmailInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_104) = &input.bulk_email_entries {
        let mut array_105 = object.key("BulkEmailEntries").start_array();
        for item_106 in var_104 {
            {
                let mut object_107 = array_105.value().start_object();
                crate::json_ser::serialize_structure_crate_model_bulk_email_entry(
                    &mut object_107,
                    item_106,
                )?;
                object_107.finish();
            }
        }
        array_105.finish();
    }
    if let Some(var_108) = &input.configuration_set_name {
        object.key("ConfigurationSetName").string(var_108.as_str());
    }
    if let Some(var_109) = &input.default_content {
        let mut object_110 = object.key("DefaultContent").start_object();
        crate::json_ser::serialize_structure_crate_model_bulk_email_content(
            &mut object_110,
            var_109,
        )?;
        object_110.finish();
    }
    if let Some(var_111) = &input.default_email_tags {
        let mut array_112 = object.key("DefaultEmailTags").start_array();
        for item_113 in var_111 {
            {
                let mut object_114 = array_112.value().start_object();
                crate::json_ser::serialize_structure_crate_model_message_tag(
                    &mut object_114,
                    item_113,
                )?;
                object_114.finish();
            }
        }
        array_112.finish();
    }
    if let Some(var_115) = &input.feedback_forwarding_email_address {
        object
            .key("FeedbackForwardingEmailAddress")
            .string(var_115.as_str());
    }
    if let Some(var_116) = &input.feedback_forwarding_email_address_identity_arn {
        object
            .key("FeedbackForwardingEmailAddressIdentityArn")
            .string(var_116.as_str());
    }
    if let Some(var_117) = &input.from_email_address {
        object.key("FromEmailAddress").string(var_117.as_str());
    }
    if let Some(var_118) = &input.from_email_address_identity_arn {
        object
            .key("FromEmailAddressIdentityArn")
            .string(var_118.as_str());
    }
    if let Some(var_119) = &input.reply_to_addresses {
        let mut array_120 = object.key("ReplyToAddresses").start_array();
        for item_121 in var_119 {
            {
                array_120.value().string(item_121.as_str());
            }
        }
        array_120.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_send_custom_verification_email_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SendCustomVerificationEmailInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_122) = &input.configuration_set_name {
        object.key("ConfigurationSetName").string(var_122.as_str());
    }
    if let Some(var_123) = &input.email_address {
        object.key("EmailAddress").string(var_123.as_str());
    }
    if let Some(var_124) = &input.template_name {
        object.key("TemplateName").string(var_124.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_send_email_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SendEmailInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_125) = &input.configuration_set_name {
        object.key("ConfigurationSetName").string(var_125.as_str());
    }
    if let Some(var_126) = &input.content {
        let mut object_127 = object.key("Content").start_object();
        crate::json_ser::serialize_structure_crate_model_email_content(&mut object_127, var_126)?;
        object_127.finish();
    }
    if let Some(var_128) = &input.destination {
        let mut object_129 = object.key("Destination").start_object();
        crate::json_ser::serialize_structure_crate_model_destination(&mut object_129, var_128)?;
        object_129.finish();
    }
    if let Some(var_130) = &input.email_tags {
        let mut array_131 = object.key("EmailTags").start_array();
        for item_132 in var_130 {
            {
                let mut object_133 = array_131.value().start_object();
                crate::json_ser::serialize_structure_crate_model_message_tag(
                    &mut object_133,
                    item_132,
                )?;
                object_133.finish();
            }
        }
        array_131.finish();
    }
    if let Some(var_134) = &input.feedback_forwarding_email_address {
        object
            .key("FeedbackForwardingEmailAddress")
            .string(var_134.as_str());
    }
    if let Some(var_135) = &input.feedback_forwarding_email_address_identity_arn {
        object
            .key("FeedbackForwardingEmailAddressIdentityArn")
            .string(var_135.as_str());
    }
    if let Some(var_136) = &input.from_email_address {
        object.key("FromEmailAddress").string(var_136.as_str());
    }
    if let Some(var_137) = &input.from_email_address_identity_arn {
        object
            .key("FromEmailAddressIdentityArn")
            .string(var_137.as_str());
    }
    if let Some(var_138) = &input.list_management_options {
        let mut object_139 = object.key("ListManagementOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_list_management_options(
            &mut object_139,
            var_138,
        )?;
        object_139.finish();
    }
    if let Some(var_140) = &input.reply_to_addresses {
        let mut array_141 = object.key("ReplyToAddresses").start_array();
        for item_142 in var_140 {
            {
                array_141.value().string(item_142.as_str());
            }
        }
        array_141.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_143) = &input.resource_arn {
        object.key("ResourceArn").string(var_143.as_str());
    }
    if let Some(var_144) = &input.tags {
        let mut array_145 = object.key("Tags").start_array();
        for item_146 in var_144 {
            {
                let mut object_147 = array_145.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_147, item_146)?;
                object_147.finish();
            }
        }
        array_145.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_test_render_email_template_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TestRenderEmailTemplateInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_148) = &input.template_data {
        object.key("TemplateData").string(var_148.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_configuration_set_event_destination_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateConfigurationSetEventDestinationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_149) = &input.event_destination {
        let mut object_150 = object.key("EventDestination").start_object();
        crate::json_ser::serialize_structure_crate_model_event_destination_definition(
            &mut object_150,
            var_149,
        )?;
        object_150.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_contact_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateContactInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_151) = &input.attributes_data {
        object.key("AttributesData").string(var_151.as_str());
    }
    if let Some(var_152) = &input.topic_preferences {
        let mut array_153 = object.key("TopicPreferences").start_array();
        for item_154 in var_152 {
            {
                let mut object_155 = array_153.value().start_object();
                crate::json_ser::serialize_structure_crate_model_topic_preference(
                    &mut object_155,
                    item_154,
                )?;
                object_155.finish();
            }
        }
        array_153.finish();
    }
    if input.unsubscribe_all {
        object.key("UnsubscribeAll").boolean(input.unsubscribe_all);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_contact_list_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateContactListInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_156) = &input.description {
        object.key("Description").string(var_156.as_str());
    }
    if let Some(var_157) = &input.topics {
        let mut array_158 = object.key("Topics").start_array();
        for item_159 in var_157 {
            {
                let mut object_160 = array_158.value().start_object();
                crate::json_ser::serialize_structure_crate_model_topic(&mut object_160, item_159)?;
                object_160.finish();
            }
        }
        array_158.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_custom_verification_email_template_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateCustomVerificationEmailTemplateInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_161) = &input.failure_redirection_url {
        object.key("FailureRedirectionURL").string(var_161.as_str());
    }
    if let Some(var_162) = &input.from_email_address {
        object.key("FromEmailAddress").string(var_162.as_str());
    }
    if let Some(var_163) = &input.success_redirection_url {
        object.key("SuccessRedirectionURL").string(var_163.as_str());
    }
    if let Some(var_164) = &input.template_content {
        object.key("TemplateContent").string(var_164.as_str());
    }
    if let Some(var_165) = &input.template_subject {
        object.key("TemplateSubject").string(var_165.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_email_identity_policy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateEmailIdentityPolicyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_166) = &input.policy {
        object.key("Policy").string(var_166.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_email_template_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateEmailTemplateInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_167) = &input.template_content {
        let mut object_168 = object.key("TemplateContent").start_object();
        crate::json_ser::serialize_structure_crate_model_email_template_content(
            &mut object_168,
            var_167,
        )?;
        object_168.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_delivery_options(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DeliveryOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_169) = &input.tls_policy {
        object.key("TlsPolicy").string(var_169.as_str());
    }
    if let Some(var_170) = &input.sending_pool_name {
        object.key("SendingPoolName").string(var_170.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_reputation_options(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ReputationOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.reputation_metrics_enabled {
        object
            .key("ReputationMetricsEnabled")
            .boolean(input.reputation_metrics_enabled);
    }
    if let Some(var_171) = &input.last_fresh_start {
        object
            .key("LastFreshStart")
            .date_time(var_171, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sending_options(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SendingOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.sending_enabled {
        object.key("SendingEnabled").boolean(input.sending_enabled);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_suppression_options(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SuppressionOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_172) = &input.suppressed_reasons {
        let mut array_173 = object.key("SuppressedReasons").start_array();
        for item_174 in var_172 {
            {
                array_173.value().string(item_174.as_str());
            }
        }
        array_173.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tag(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tag,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_175) = &input.key {
        object.key("Key").string(var_175.as_str());
    }
    if let Some(var_176) = &input.value {
        object.key("Value").string(var_176.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tracking_options(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TrackingOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_177) = &input.custom_redirect_domain {
        object.key("CustomRedirectDomain").string(var_177.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_event_destination_definition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EventDestinationDefinition,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.enabled {
        object.key("Enabled").boolean(input.enabled);
    }
    if let Some(var_178) = &input.matching_event_types {
        let mut array_179 = object.key("MatchingEventTypes").start_array();
        for item_180 in var_178 {
            {
                array_179.value().string(item_180.as_str());
            }
        }
        array_179.finish();
    }
    if let Some(var_181) = &input.kinesis_firehose_destination {
        let mut object_182 = object.key("KinesisFirehoseDestination").start_object();
        crate::json_ser::serialize_structure_crate_model_kinesis_firehose_destination(
            &mut object_182,
            var_181,
        )?;
        object_182.finish();
    }
    if let Some(var_183) = &input.cloud_watch_destination {
        let mut object_184 = object.key("CloudWatchDestination").start_object();
        crate::json_ser::serialize_structure_crate_model_cloud_watch_destination(
            &mut object_184,
            var_183,
        )?;
        object_184.finish();
    }
    if let Some(var_185) = &input.sns_destination {
        let mut object_186 = object.key("SnsDestination").start_object();
        crate::json_ser::serialize_structure_crate_model_sns_destination(&mut object_186, var_185)?;
        object_186.finish();
    }
    if let Some(var_187) = &input.pinpoint_destination {
        let mut object_188 = object.key("PinpointDestination").start_object();
        crate::json_ser::serialize_structure_crate_model_pinpoint_destination(
            &mut object_188,
            var_187,
        )?;
        object_188.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_topic_preference(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TopicPreference,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_189) = &input.topic_name {
        object.key("TopicName").string(var_189.as_str());
    }
    if let Some(var_190) = &input.subscription_status {
        object.key("SubscriptionStatus").string(var_190.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_topic(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Topic,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_191) = &input.topic_name {
        object.key("TopicName").string(var_191.as_str());
    }
    if let Some(var_192) = &input.display_name {
        object.key("DisplayName").string(var_192.as_str());
    }
    if let Some(var_193) = &input.description {
        object.key("Description").string(var_193.as_str());
    }
    if let Some(var_194) = &input.default_subscription_status {
        object
            .key("DefaultSubscriptionStatus")
            .string(var_194.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_email_content(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EmailContent,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_195) = &input.simple {
        let mut object_196 = object.key("Simple").start_object();
        crate::json_ser::serialize_structure_crate_model_message(&mut object_196, var_195)?;
        object_196.finish();
    }
    if let Some(var_197) = &input.raw {
        let mut object_198 = object.key("Raw").start_object();
        crate::json_ser::serialize_structure_crate_model_raw_message(&mut object_198, var_197)?;
        object_198.finish();
    }
    if let Some(var_199) = &input.template {
        let mut object_200 = object.key("Template").start_object();
        crate::json_ser::serialize_structure_crate_model_template(&mut object_200, var_199)?;
        object_200.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_dkim_signing_attributes(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DkimSigningAttributes,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_201) = &input.domain_signing_selector {
        object.key("DomainSigningSelector").string(var_201.as_str());
    }
    if let Some(var_202) = &input.domain_signing_private_key {
        object
            .key("DomainSigningPrivateKey")
            .string(var_202.as_str());
    }
    if let Some(var_203) = &input.next_signing_key_length {
        object.key("NextSigningKeyLength").string(var_203.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_email_template_content(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EmailTemplateContent,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_204) = &input.subject {
        object.key("Subject").string(var_204.as_str());
    }
    if let Some(var_205) = &input.text {
        object.key("Text").string(var_205.as_str());
    }
    if let Some(var_206) = &input.html {
        object.key("Html").string(var_206.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_import_data_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ImportDataSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_207) = &input.s3_url {
        object.key("S3Url").string(var_207.as_str());
    }
    if let Some(var_208) = &input.data_format {
        object.key("DataFormat").string(var_208.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_import_destination(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ImportDestination,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_209) = &input.suppression_list_destination {
        let mut object_210 = object.key("SuppressionListDestination").start_object();
        crate::json_ser::serialize_structure_crate_model_suppression_list_destination(
            &mut object_210,
            var_209,
        )?;
        object_210.finish();
    }
    if let Some(var_211) = &input.contact_list_destination {
        let mut object_212 = object.key("ContactListDestination").start_object();
        crate::json_ser::serialize_structure_crate_model_contact_list_destination(
            &mut object_212,
            var_211,
        )?;
        object_212.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_list_contacts_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ListContactsFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_213) = &input.filtered_status {
        object.key("FilteredStatus").string(var_213.as_str());
    }
    if let Some(var_214) = &input.topic_filter {
        let mut object_215 = object.key("TopicFilter").start_object();
        crate::json_ser::serialize_structure_crate_model_topic_filter(&mut object_215, var_214)?;
        object_215.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_domain_deliverability_tracking_option(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DomainDeliverabilityTrackingOption,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_216) = &input.domain {
        object.key("Domain").string(var_216.as_str());
    }
    if let Some(var_217) = &input.subscription_start_date {
        object
            .key("SubscriptionStartDate")
            .date_time(var_217, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_218) = &input.inbox_placement_tracking_option {
        let mut object_219 = object.key("InboxPlacementTrackingOption").start_object();
        crate::json_ser::serialize_structure_crate_model_inbox_placement_tracking_option(
            &mut object_219,
            var_218,
        )?;
        object_219.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_bulk_email_entry(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BulkEmailEntry,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_220) = &input.destination {
        let mut object_221 = object.key("Destination").start_object();
        crate::json_ser::serialize_structure_crate_model_destination(&mut object_221, var_220)?;
        object_221.finish();
    }
    if let Some(var_222) = &input.replacement_tags {
        let mut array_223 = object.key("ReplacementTags").start_array();
        for item_224 in var_222 {
            {
                let mut object_225 = array_223.value().start_object();
                crate::json_ser::serialize_structure_crate_model_message_tag(
                    &mut object_225,
                    item_224,
                )?;
                object_225.finish();
            }
        }
        array_223.finish();
    }
    if let Some(var_226) = &input.replacement_email_content {
        let mut object_227 = object.key("ReplacementEmailContent").start_object();
        crate::json_ser::serialize_structure_crate_model_replacement_email_content(
            &mut object_227,
            var_226,
        )?;
        object_227.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_bulk_email_content(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BulkEmailContent,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_228) = &input.template {
        let mut object_229 = object.key("Template").start_object();
        crate::json_ser::serialize_structure_crate_model_template(&mut object_229, var_228)?;
        object_229.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_message_tag(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MessageTag,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_230) = &input.name {
        object.key("Name").string(var_230.as_str());
    }
    if let Some(var_231) = &input.value {
        object.key("Value").string(var_231.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_destination(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Destination,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_232) = &input.to_addresses {
        let mut array_233 = object.key("ToAddresses").start_array();
        for item_234 in var_232 {
            {
                array_233.value().string(item_234.as_str());
            }
        }
        array_233.finish();
    }
    if let Some(var_235) = &input.cc_addresses {
        let mut array_236 = object.key("CcAddresses").start_array();
        for item_237 in var_235 {
            {
                array_236.value().string(item_237.as_str());
            }
        }
        array_236.finish();
    }
    if let Some(var_238) = &input.bcc_addresses {
        let mut array_239 = object.key("BccAddresses").start_array();
        for item_240 in var_238 {
            {
                array_239.value().string(item_240.as_str());
            }
        }
        array_239.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_list_management_options(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ListManagementOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_241) = &input.contact_list_name {
        object.key("ContactListName").string(var_241.as_str());
    }
    if let Some(var_242) = &input.topic_name {
        object.key("TopicName").string(var_242.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_kinesis_firehose_destination(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KinesisFirehoseDestination,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_243) = &input.iam_role_arn {
        object.key("IamRoleArn").string(var_243.as_str());
    }
    if let Some(var_244) = &input.delivery_stream_arn {
        object.key("DeliveryStreamArn").string(var_244.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_cloud_watch_destination(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CloudWatchDestination,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_245) = &input.dimension_configurations {
        let mut array_246 = object.key("DimensionConfigurations").start_array();
        for item_247 in var_245 {
            {
                let mut object_248 = array_246.value().start_object();
                crate::json_ser::serialize_structure_crate_model_cloud_watch_dimension_configuration(&mut object_248, item_247)?;
                object_248.finish();
            }
        }
        array_246.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sns_destination(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SnsDestination,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_249) = &input.topic_arn {
        object.key("TopicArn").string(var_249.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_pinpoint_destination(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PinpointDestination,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_250) = &input.application_arn {
        object.key("ApplicationArn").string(var_250.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_message(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Message,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_251) = &input.subject {
        let mut object_252 = object.key("Subject").start_object();
        crate::json_ser::serialize_structure_crate_model_content(&mut object_252, var_251)?;
        object_252.finish();
    }
    if let Some(var_253) = &input.body {
        let mut object_254 = object.key("Body").start_object();
        crate::json_ser::serialize_structure_crate_model_body(&mut object_254, var_253)?;
        object_254.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_raw_message(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RawMessage,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_255) = &input.data {
        object
            .key("Data")
            .string_unchecked(&aws_smithy_types::base64::encode(var_255));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_template(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Template,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_256) = &input.template_name {
        object.key("TemplateName").string(var_256.as_str());
    }
    if let Some(var_257) = &input.template_arn {
        object.key("TemplateArn").string(var_257.as_str());
    }
    if let Some(var_258) = &input.template_data {
        object.key("TemplateData").string(var_258.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_suppression_list_destination(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SuppressionListDestination,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_259) = &input.suppression_list_import_action {
        object
            .key("SuppressionListImportAction")
            .string(var_259.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_contact_list_destination(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ContactListDestination,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_260) = &input.contact_list_name {
        object.key("ContactListName").string(var_260.as_str());
    }
    if let Some(var_261) = &input.contact_list_import_action {
        object
            .key("ContactListImportAction")
            .string(var_261.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_topic_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TopicFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_262) = &input.topic_name {
        object.key("TopicName").string(var_262.as_str());
    }
    if input.use_default_if_preference_unavailable {
        object
            .key("UseDefaultIfPreferenceUnavailable")
            .boolean(input.use_default_if_preference_unavailable);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_inbox_placement_tracking_option(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InboxPlacementTrackingOption,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.global {
        object.key("Global").boolean(input.global);
    }
    if let Some(var_263) = &input.tracked_isps {
        let mut array_264 = object.key("TrackedIsps").start_array();
        for item_265 in var_263 {
            {
                array_264.value().string(item_265.as_str());
            }
        }
        array_264.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_replacement_email_content(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ReplacementEmailContent,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_266) = &input.replacement_template {
        let mut object_267 = object.key("ReplacementTemplate").start_object();
        crate::json_ser::serialize_structure_crate_model_replacement_template(
            &mut object_267,
            var_266,
        )?;
        object_267.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_cloud_watch_dimension_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CloudWatchDimensionConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_268) = &input.dimension_name {
        object.key("DimensionName").string(var_268.as_str());
    }
    if let Some(var_269) = &input.dimension_value_source {
        object.key("DimensionValueSource").string(var_269.as_str());
    }
    if let Some(var_270) = &input.default_dimension_value {
        object.key("DefaultDimensionValue").string(var_270.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_content(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Content,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_271) = &input.data {
        object.key("Data").string(var_271.as_str());
    }
    if let Some(var_272) = &input.charset {
        object.key("Charset").string(var_272.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_body(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Body,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_273) = &input.text {
        let mut object_274 = object.key("Text").start_object();
        crate::json_ser::serialize_structure_crate_model_content(&mut object_274, var_273)?;
        object_274.finish();
    }
    if let Some(var_275) = &input.html {
        let mut object_276 = object.key("Html").start_object();
        crate::json_ser::serialize_structure_crate_model_content(&mut object_276, var_275)?;
        object_276.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_replacement_template(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ReplacementTemplate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_277) = &input.replacement_template_data {
        object
            .key("ReplacementTemplateData")
            .string(var_277.as_str());
    }
    Ok(())
}
