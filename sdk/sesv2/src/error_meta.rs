// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    AccountSuspendedError(crate::error::AccountSuspendedError),
    AlreadyExistsError(crate::error::AlreadyExistsError),
    BadRequestError(crate::error::BadRequestError),
    ConcurrentModificationError(crate::error::ConcurrentModificationError),
    ConflictError(crate::error::ConflictError),
    InvalidNextTokenError(crate::error::InvalidNextTokenError),
    LimitExceededError(crate::error::LimitExceededError),
    MailFromDomainNotVerifiedError(crate::error::MailFromDomainNotVerifiedError),
    MessageRejected(crate::error::MessageRejected),
    NotFoundError(crate::error::NotFoundError),
    SendingPausedError(crate::error::SendingPausedError),
    TooManyRequestsError(crate::error::TooManyRequestsError),
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccountSuspendedError(inner) => inner.fmt(f),
            Error::AlreadyExistsError(inner) => inner.fmt(f),
            Error::BadRequestError(inner) => inner.fmt(f),
            Error::ConcurrentModificationError(inner) => inner.fmt(f),
            Error::ConflictError(inner) => inner.fmt(f),
            Error::InvalidNextTokenError(inner) => inner.fmt(f),
            Error::LimitExceededError(inner) => inner.fmt(f),
            Error::MailFromDomainNotVerifiedError(inner) => inner.fmt(f),
            Error::MessageRejected(inner) => inner.fmt(f),
            Error::NotFoundError(inner) => inner.fmt(f),
            Error::SendingPausedError(inner) => inner.fmt(f),
            Error::TooManyRequestsError(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateConfigurationSetError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateConfigurationSetError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateConfigurationSetErrorKind::AlreadyExistsError(inner) => {
                    Error::AlreadyExistsError(inner)
                }
                crate::error::CreateConfigurationSetErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::CreateConfigurationSetErrorKind::ConcurrentModificationError(
                    inner,
                ) => Error::ConcurrentModificationError(inner),
                crate::error::CreateConfigurationSetErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::CreateConfigurationSetErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::CreateConfigurationSetErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::CreateConfigurationSetErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateConfigurationSetEventDestinationError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::CreateConfigurationSetEventDestinationError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::CreateConfigurationSetEventDestinationErrorKind::AlreadyExistsError(inner) => Error::AlreadyExistsError(inner),
                crate::error::CreateConfigurationSetEventDestinationErrorKind::BadRequestError(inner) => Error::BadRequestError(inner),
                crate::error::CreateConfigurationSetEventDestinationErrorKind::LimitExceededError(inner) => Error::LimitExceededError(inner),
                crate::error::CreateConfigurationSetEventDestinationErrorKind::NotFoundError(inner) => Error::NotFoundError(inner),
                crate::error::CreateConfigurationSetEventDestinationErrorKind::TooManyRequestsError(inner) => Error::TooManyRequestsError(inner),
                crate::error::CreateConfigurationSetEventDestinationErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateContactError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateContactError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateContactErrorKind::AlreadyExistsError(inner) => {
                    Error::AlreadyExistsError(inner)
                }
                crate::error::CreateContactErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::CreateContactErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::CreateContactErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::CreateContactErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateContactListError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateContactListError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateContactListErrorKind::AlreadyExistsError(inner) => {
                    Error::AlreadyExistsError(inner)
                }
                crate::error::CreateContactListErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::CreateContactListErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::CreateContactListErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::CreateContactListErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateCustomVerificationEmailTemplateError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::CreateCustomVerificationEmailTemplateError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::CreateCustomVerificationEmailTemplateErrorKind::AlreadyExistsError(inner) => Error::AlreadyExistsError(inner),
                crate::error::CreateCustomVerificationEmailTemplateErrorKind::BadRequestError(inner) => Error::BadRequestError(inner),
                crate::error::CreateCustomVerificationEmailTemplateErrorKind::LimitExceededError(inner) => Error::LimitExceededError(inner),
                crate::error::CreateCustomVerificationEmailTemplateErrorKind::NotFoundError(inner) => Error::NotFoundError(inner),
                crate::error::CreateCustomVerificationEmailTemplateErrorKind::TooManyRequestsError(inner) => Error::TooManyRequestsError(inner),
                crate::error::CreateCustomVerificationEmailTemplateErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateDedicatedIpPoolError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateDedicatedIpPoolError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateDedicatedIpPoolErrorKind::AlreadyExistsError(inner) => {
                    Error::AlreadyExistsError(inner)
                }
                crate::error::CreateDedicatedIpPoolErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::CreateDedicatedIpPoolErrorKind::ConcurrentModificationError(
                    inner,
                ) => Error::ConcurrentModificationError(inner),
                crate::error::CreateDedicatedIpPoolErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::CreateDedicatedIpPoolErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::CreateDedicatedIpPoolErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateDeliverabilityTestReportError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::CreateDeliverabilityTestReportError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::CreateDeliverabilityTestReportErrorKind::AccountSuspendedError(inner) => Error::AccountSuspendedError(inner),
                crate::error::CreateDeliverabilityTestReportErrorKind::BadRequestError(inner) => Error::BadRequestError(inner),
                crate::error::CreateDeliverabilityTestReportErrorKind::ConcurrentModificationError(inner) => Error::ConcurrentModificationError(inner),
                crate::error::CreateDeliverabilityTestReportErrorKind::LimitExceededError(inner) => Error::LimitExceededError(inner),
                crate::error::CreateDeliverabilityTestReportErrorKind::MailFromDomainNotVerifiedError(inner) => Error::MailFromDomainNotVerifiedError(inner),
                crate::error::CreateDeliverabilityTestReportErrorKind::MessageRejected(inner) => Error::MessageRejected(inner),
                crate::error::CreateDeliverabilityTestReportErrorKind::NotFoundError(inner) => Error::NotFoundError(inner),
                crate::error::CreateDeliverabilityTestReportErrorKind::SendingPausedError(inner) => Error::SendingPausedError(inner),
                crate::error::CreateDeliverabilityTestReportErrorKind::TooManyRequestsError(inner) => Error::TooManyRequestsError(inner),
                crate::error::CreateDeliverabilityTestReportErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateEmailIdentityError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateEmailIdentityError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateEmailIdentityErrorKind::AlreadyExistsError(inner) => {
                    Error::AlreadyExistsError(inner)
                }
                crate::error::CreateEmailIdentityErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::CreateEmailIdentityErrorKind::ConcurrentModificationError(inner) => {
                    Error::ConcurrentModificationError(inner)
                }
                crate::error::CreateEmailIdentityErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::CreateEmailIdentityErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::CreateEmailIdentityErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::CreateEmailIdentityErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateEmailIdentityPolicyError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::CreateEmailIdentityPolicyError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateEmailIdentityPolicyErrorKind::AlreadyExistsError(inner) => {
                    Error::AlreadyExistsError(inner)
                }
                crate::error::CreateEmailIdentityPolicyErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::CreateEmailIdentityPolicyErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::CreateEmailIdentityPolicyErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::CreateEmailIdentityPolicyErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::CreateEmailIdentityPolicyErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateEmailTemplateError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateEmailTemplateError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateEmailTemplateErrorKind::AlreadyExistsError(inner) => {
                    Error::AlreadyExistsError(inner)
                }
                crate::error::CreateEmailTemplateErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::CreateEmailTemplateErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::CreateEmailTemplateErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::CreateEmailTemplateErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateImportJobError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateImportJobError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateImportJobErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::CreateImportJobErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::CreateImportJobErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::CreateImportJobErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteConfigurationSetError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteConfigurationSetError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteConfigurationSetErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::DeleteConfigurationSetErrorKind::ConcurrentModificationError(
                    inner,
                ) => Error::ConcurrentModificationError(inner),
                crate::error::DeleteConfigurationSetErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::DeleteConfigurationSetErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::DeleteConfigurationSetErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteConfigurationSetEventDestinationError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::DeleteConfigurationSetEventDestinationError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DeleteConfigurationSetEventDestinationErrorKind::BadRequestError(inner) => Error::BadRequestError(inner),
                crate::error::DeleteConfigurationSetEventDestinationErrorKind::NotFoundError(inner) => Error::NotFoundError(inner),
                crate::error::DeleteConfigurationSetEventDestinationErrorKind::TooManyRequestsError(inner) => Error::TooManyRequestsError(inner),
                crate::error::DeleteConfigurationSetEventDestinationErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteContactError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteContactError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteContactErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::DeleteContactErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::DeleteContactErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::DeleteContactErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteContactListError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteContactListError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteContactListErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::DeleteContactListErrorKind::ConcurrentModificationError(inner) => {
                    Error::ConcurrentModificationError(inner)
                }
                crate::error::DeleteContactListErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::DeleteContactListErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::DeleteContactListErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteCustomVerificationEmailTemplateError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::DeleteCustomVerificationEmailTemplateError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DeleteCustomVerificationEmailTemplateErrorKind::BadRequestError(inner) => Error::BadRequestError(inner),
                crate::error::DeleteCustomVerificationEmailTemplateErrorKind::NotFoundError(inner) => Error::NotFoundError(inner),
                crate::error::DeleteCustomVerificationEmailTemplateErrorKind::TooManyRequestsError(inner) => Error::TooManyRequestsError(inner),
                crate::error::DeleteCustomVerificationEmailTemplateErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteDedicatedIpPoolError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteDedicatedIpPoolError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteDedicatedIpPoolErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::DeleteDedicatedIpPoolErrorKind::ConcurrentModificationError(
                    inner,
                ) => Error::ConcurrentModificationError(inner),
                crate::error::DeleteDedicatedIpPoolErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::DeleteDedicatedIpPoolErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::DeleteDedicatedIpPoolErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteEmailIdentityError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteEmailIdentityError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteEmailIdentityErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::DeleteEmailIdentityErrorKind::ConcurrentModificationError(inner) => {
                    Error::ConcurrentModificationError(inner)
                }
                crate::error::DeleteEmailIdentityErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::DeleteEmailIdentityErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::DeleteEmailIdentityErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteEmailIdentityPolicyError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DeleteEmailIdentityPolicyError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteEmailIdentityPolicyErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::DeleteEmailIdentityPolicyErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::DeleteEmailIdentityPolicyErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::DeleteEmailIdentityPolicyErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteEmailTemplateError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteEmailTemplateError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteEmailTemplateErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::DeleteEmailTemplateErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::DeleteEmailTemplateErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::DeleteEmailTemplateErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteSuppressedDestinationError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DeleteSuppressedDestinationError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteSuppressedDestinationErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::DeleteSuppressedDestinationErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::DeleteSuppressedDestinationErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::DeleteSuppressedDestinationErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetAccountError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetAccountError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetAccountErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::GetAccountErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::GetAccountErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetBlacklistReportsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetBlacklistReportsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetBlacklistReportsErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::GetBlacklistReportsErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::GetBlacklistReportsErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::GetBlacklistReportsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetConfigurationSetError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetConfigurationSetError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetConfigurationSetErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::GetConfigurationSetErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::GetConfigurationSetErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::GetConfigurationSetErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetConfigurationSetEventDestinationsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::GetConfigurationSetEventDestinationsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::GetConfigurationSetEventDestinationsErrorKind::BadRequestError(inner) => Error::BadRequestError(inner),
                crate::error::GetConfigurationSetEventDestinationsErrorKind::NotFoundError(inner) => Error::NotFoundError(inner),
                crate::error::GetConfigurationSetEventDestinationsErrorKind::TooManyRequestsError(inner) => Error::TooManyRequestsError(inner),
                crate::error::GetConfigurationSetEventDestinationsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetContactError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetContactError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetContactErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::GetContactErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::GetContactErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::GetContactErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetContactListError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetContactListError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetContactListErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::GetContactListErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::GetContactListErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::GetContactListErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetCustomVerificationEmailTemplateError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::GetCustomVerificationEmailTemplateError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetCustomVerificationEmailTemplateErrorKind::BadRequestError(
                    inner,
                ) => Error::BadRequestError(inner),
                crate::error::GetCustomVerificationEmailTemplateErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::GetCustomVerificationEmailTemplateErrorKind::TooManyRequestsError(
                    inner,
                ) => Error::TooManyRequestsError(inner),
                crate::error::GetCustomVerificationEmailTemplateErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetDedicatedIpError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetDedicatedIpError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetDedicatedIpErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::GetDedicatedIpErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::GetDedicatedIpErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::GetDedicatedIpErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetDedicatedIpsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetDedicatedIpsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetDedicatedIpsErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::GetDedicatedIpsErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::GetDedicatedIpsErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::GetDedicatedIpsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetDeliverabilityDashboardOptionsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::GetDeliverabilityDashboardOptionsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetDeliverabilityDashboardOptionsErrorKind::BadRequestError(
                    inner,
                ) => Error::BadRequestError(inner),
                crate::error::GetDeliverabilityDashboardOptionsErrorKind::LimitExceededError(
                    inner,
                ) => Error::LimitExceededError(inner),
                crate::error::GetDeliverabilityDashboardOptionsErrorKind::TooManyRequestsError(
                    inner,
                ) => Error::TooManyRequestsError(inner),
                crate::error::GetDeliverabilityDashboardOptionsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetDeliverabilityTestReportError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::GetDeliverabilityTestReportError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetDeliverabilityTestReportErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::GetDeliverabilityTestReportErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::GetDeliverabilityTestReportErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::GetDeliverabilityTestReportErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetDomainDeliverabilityCampaignError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::GetDomainDeliverabilityCampaignError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetDomainDeliverabilityCampaignErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::GetDomainDeliverabilityCampaignErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::GetDomainDeliverabilityCampaignErrorKind::TooManyRequestsError(
                    inner,
                ) => Error::TooManyRequestsError(inner),
                crate::error::GetDomainDeliverabilityCampaignErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetDomainStatisticsReportError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::GetDomainStatisticsReportError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetDomainStatisticsReportErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::GetDomainStatisticsReportErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::GetDomainStatisticsReportErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::GetDomainStatisticsReportErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetEmailIdentityError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetEmailIdentityError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetEmailIdentityErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::GetEmailIdentityErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::GetEmailIdentityErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::GetEmailIdentityErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetEmailIdentityPoliciesError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::GetEmailIdentityPoliciesError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetEmailIdentityPoliciesErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::GetEmailIdentityPoliciesErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::GetEmailIdentityPoliciesErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::GetEmailIdentityPoliciesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetEmailTemplateError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetEmailTemplateError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetEmailTemplateErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::GetEmailTemplateErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::GetEmailTemplateErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::GetEmailTemplateErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetImportJobError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetImportJobError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetImportJobErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::GetImportJobErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::GetImportJobErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::GetImportJobErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetSuppressedDestinationError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::GetSuppressedDestinationError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetSuppressedDestinationErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::GetSuppressedDestinationErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::GetSuppressedDestinationErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::GetSuppressedDestinationErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListConfigurationSetsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListConfigurationSetsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListConfigurationSetsErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::ListConfigurationSetsErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::ListConfigurationSetsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListContactListsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListContactListsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListContactListsErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::ListContactListsErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::ListContactListsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListContactsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListContactsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListContactsErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::ListContactsErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::ListContactsErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::ListContactsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListCustomVerificationEmailTemplatesError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::ListCustomVerificationEmailTemplatesError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::ListCustomVerificationEmailTemplatesErrorKind::BadRequestError(inner) => Error::BadRequestError(inner),
                crate::error::ListCustomVerificationEmailTemplatesErrorKind::TooManyRequestsError(inner) => Error::TooManyRequestsError(inner),
                crate::error::ListCustomVerificationEmailTemplatesErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListDedicatedIpPoolsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListDedicatedIpPoolsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListDedicatedIpPoolsErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::ListDedicatedIpPoolsErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::ListDedicatedIpPoolsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListDeliverabilityTestReportsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::ListDeliverabilityTestReportsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListDeliverabilityTestReportsErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::ListDeliverabilityTestReportsErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::ListDeliverabilityTestReportsErrorKind::TooManyRequestsError(
                    inner,
                ) => Error::TooManyRequestsError(inner),
                crate::error::ListDeliverabilityTestReportsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListDomainDeliverabilityCampaignsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::ListDomainDeliverabilityCampaignsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListDomainDeliverabilityCampaignsErrorKind::BadRequestError(
                    inner,
                ) => Error::BadRequestError(inner),
                crate::error::ListDomainDeliverabilityCampaignsErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::ListDomainDeliverabilityCampaignsErrorKind::TooManyRequestsError(
                    inner,
                ) => Error::TooManyRequestsError(inner),
                crate::error::ListDomainDeliverabilityCampaignsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListEmailIdentitiesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListEmailIdentitiesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListEmailIdentitiesErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::ListEmailIdentitiesErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::ListEmailIdentitiesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListEmailTemplatesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListEmailTemplatesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListEmailTemplatesErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::ListEmailTemplatesErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::ListEmailTemplatesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListImportJobsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListImportJobsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListImportJobsErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::ListImportJobsErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::ListImportJobsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListSuppressedDestinationsError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::ListSuppressedDestinationsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListSuppressedDestinationsErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::ListSuppressedDestinationsErrorKind::InvalidNextTokenError(inner) => {
                    Error::InvalidNextTokenError(inner)
                }
                crate::error::ListSuppressedDestinationsErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::ListSuppressedDestinationsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListTagsForResourceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListTagsForResourceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListTagsForResourceErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::ListTagsForResourceErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::ListTagsForResourceErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::ListTagsForResourceErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PutAccountDedicatedIpWarmupAttributesError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::PutAccountDedicatedIpWarmupAttributesError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::PutAccountDedicatedIpWarmupAttributesErrorKind::BadRequestError(inner) => Error::BadRequestError(inner),
                crate::error::PutAccountDedicatedIpWarmupAttributesErrorKind::TooManyRequestsError(inner) => Error::TooManyRequestsError(inner),
                crate::error::PutAccountDedicatedIpWarmupAttributesErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PutAccountDetailsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::PutAccountDetailsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::PutAccountDetailsErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::PutAccountDetailsErrorKind::ConflictError(inner) => {
                    Error::ConflictError(inner)
                }
                crate::error::PutAccountDetailsErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::PutAccountDetailsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PutAccountSendingAttributesError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::PutAccountSendingAttributesError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::PutAccountSendingAttributesErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::PutAccountSendingAttributesErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::PutAccountSendingAttributesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PutAccountSuppressionAttributesError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::PutAccountSuppressionAttributesError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::PutAccountSuppressionAttributesErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::PutAccountSuppressionAttributesErrorKind::TooManyRequestsError(
                    inner,
                ) => Error::TooManyRequestsError(inner),
                crate::error::PutAccountSuppressionAttributesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PutConfigurationSetDeliveryOptionsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::PutConfigurationSetDeliveryOptionsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::PutConfigurationSetDeliveryOptionsErrorKind::BadRequestError(
                    inner,
                ) => Error::BadRequestError(inner),
                crate::error::PutConfigurationSetDeliveryOptionsErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::PutConfigurationSetDeliveryOptionsErrorKind::TooManyRequestsError(
                    inner,
                ) => Error::TooManyRequestsError(inner),
                crate::error::PutConfigurationSetDeliveryOptionsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PutConfigurationSetReputationOptionsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::PutConfigurationSetReputationOptionsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::PutConfigurationSetReputationOptionsErrorKind::BadRequestError(inner) => Error::BadRequestError(inner),
                crate::error::PutConfigurationSetReputationOptionsErrorKind::NotFoundError(inner) => Error::NotFoundError(inner),
                crate::error::PutConfigurationSetReputationOptionsErrorKind::TooManyRequestsError(inner) => Error::TooManyRequestsError(inner),
                crate::error::PutConfigurationSetReputationOptionsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PutConfigurationSetSendingOptionsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::PutConfigurationSetSendingOptionsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::PutConfigurationSetSendingOptionsErrorKind::BadRequestError(
                    inner,
                ) => Error::BadRequestError(inner),
                crate::error::PutConfigurationSetSendingOptionsErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::PutConfigurationSetSendingOptionsErrorKind::TooManyRequestsError(
                    inner,
                ) => Error::TooManyRequestsError(inner),
                crate::error::PutConfigurationSetSendingOptionsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PutConfigurationSetSuppressionOptionsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::PutConfigurationSetSuppressionOptionsError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::PutConfigurationSetSuppressionOptionsErrorKind::BadRequestError(inner) => Error::BadRequestError(inner),
                crate::error::PutConfigurationSetSuppressionOptionsErrorKind::NotFoundError(inner) => Error::NotFoundError(inner),
                crate::error::PutConfigurationSetSuppressionOptionsErrorKind::TooManyRequestsError(inner) => Error::TooManyRequestsError(inner),
                crate::error::PutConfigurationSetSuppressionOptionsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PutConfigurationSetTrackingOptionsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::PutConfigurationSetTrackingOptionsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::PutConfigurationSetTrackingOptionsErrorKind::BadRequestError(
                    inner,
                ) => Error::BadRequestError(inner),
                crate::error::PutConfigurationSetTrackingOptionsErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::PutConfigurationSetTrackingOptionsErrorKind::TooManyRequestsError(
                    inner,
                ) => Error::TooManyRequestsError(inner),
                crate::error::PutConfigurationSetTrackingOptionsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PutDedicatedIpInPoolError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::PutDedicatedIpInPoolError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::PutDedicatedIpInPoolErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::PutDedicatedIpInPoolErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::PutDedicatedIpInPoolErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::PutDedicatedIpInPoolErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PutDedicatedIpWarmupAttributesError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::PutDedicatedIpWarmupAttributesError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::PutDedicatedIpWarmupAttributesErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::PutDedicatedIpWarmupAttributesErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::PutDedicatedIpWarmupAttributesErrorKind::TooManyRequestsError(
                    inner,
                ) => Error::TooManyRequestsError(inner),
                crate::error::PutDedicatedIpWarmupAttributesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PutDeliverabilityDashboardOptionError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::PutDeliverabilityDashboardOptionError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::PutDeliverabilityDashboardOptionErrorKind::AlreadyExistsError(
                    inner,
                ) => Error::AlreadyExistsError(inner),
                crate::error::PutDeliverabilityDashboardOptionErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::PutDeliverabilityDashboardOptionErrorKind::LimitExceededError(
                    inner,
                ) => Error::LimitExceededError(inner),
                crate::error::PutDeliverabilityDashboardOptionErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::PutDeliverabilityDashboardOptionErrorKind::TooManyRequestsError(
                    inner,
                ) => Error::TooManyRequestsError(inner),
                crate::error::PutDeliverabilityDashboardOptionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl
    From<
        smithy_http::result::SdkError<
            crate::error::PutEmailIdentityConfigurationSetAttributesError,
        >,
    > for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::PutEmailIdentityConfigurationSetAttributesError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::PutEmailIdentityConfigurationSetAttributesErrorKind::BadRequestError(inner) => Error::BadRequestError(inner),
                crate::error::PutEmailIdentityConfigurationSetAttributesErrorKind::NotFoundError(inner) => Error::NotFoundError(inner),
                crate::error::PutEmailIdentityConfigurationSetAttributesErrorKind::TooManyRequestsError(inner) => Error::TooManyRequestsError(inner),
                crate::error::PutEmailIdentityConfigurationSetAttributesErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PutEmailIdentityDkimAttributesError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::PutEmailIdentityDkimAttributesError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::PutEmailIdentityDkimAttributesErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::PutEmailIdentityDkimAttributesErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::PutEmailIdentityDkimAttributesErrorKind::TooManyRequestsError(
                    inner,
                ) => Error::TooManyRequestsError(inner),
                crate::error::PutEmailIdentityDkimAttributesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PutEmailIdentityDkimSigningAttributesError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::PutEmailIdentityDkimSigningAttributesError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::PutEmailIdentityDkimSigningAttributesErrorKind::BadRequestError(inner) => Error::BadRequestError(inner),
                crate::error::PutEmailIdentityDkimSigningAttributesErrorKind::NotFoundError(inner) => Error::NotFoundError(inner),
                crate::error::PutEmailIdentityDkimSigningAttributesErrorKind::TooManyRequestsError(inner) => Error::TooManyRequestsError(inner),
                crate::error::PutEmailIdentityDkimSigningAttributesErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PutEmailIdentityFeedbackAttributesError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::PutEmailIdentityFeedbackAttributesError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::PutEmailIdentityFeedbackAttributesErrorKind::BadRequestError(
                    inner,
                ) => Error::BadRequestError(inner),
                crate::error::PutEmailIdentityFeedbackAttributesErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::PutEmailIdentityFeedbackAttributesErrorKind::TooManyRequestsError(
                    inner,
                ) => Error::TooManyRequestsError(inner),
                crate::error::PutEmailIdentityFeedbackAttributesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PutEmailIdentityMailFromAttributesError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::PutEmailIdentityMailFromAttributesError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::PutEmailIdentityMailFromAttributesErrorKind::BadRequestError(
                    inner,
                ) => Error::BadRequestError(inner),
                crate::error::PutEmailIdentityMailFromAttributesErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::PutEmailIdentityMailFromAttributesErrorKind::TooManyRequestsError(
                    inner,
                ) => Error::TooManyRequestsError(inner),
                crate::error::PutEmailIdentityMailFromAttributesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PutSuppressedDestinationError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::PutSuppressedDestinationError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::PutSuppressedDestinationErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::PutSuppressedDestinationErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::PutSuppressedDestinationErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::SendBulkEmailError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::SendBulkEmailError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::SendBulkEmailErrorKind::AccountSuspendedError(inner) => {
                    Error::AccountSuspendedError(inner)
                }
                crate::error::SendBulkEmailErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::SendBulkEmailErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::SendBulkEmailErrorKind::MailFromDomainNotVerifiedError(inner) => {
                    Error::MailFromDomainNotVerifiedError(inner)
                }
                crate::error::SendBulkEmailErrorKind::MessageRejected(inner) => {
                    Error::MessageRejected(inner)
                }
                crate::error::SendBulkEmailErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::SendBulkEmailErrorKind::SendingPausedError(inner) => {
                    Error::SendingPausedError(inner)
                }
                crate::error::SendBulkEmailErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::SendBulkEmailErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::SendCustomVerificationEmailError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::SendCustomVerificationEmailError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::SendCustomVerificationEmailErrorKind::BadRequestError(inner) => Error::BadRequestError(inner),
                crate::error::SendCustomVerificationEmailErrorKind::LimitExceededError(inner) => Error::LimitExceededError(inner),
                crate::error::SendCustomVerificationEmailErrorKind::MailFromDomainNotVerifiedError(inner) => Error::MailFromDomainNotVerifiedError(inner),
                crate::error::SendCustomVerificationEmailErrorKind::MessageRejected(inner) => Error::MessageRejected(inner),
                crate::error::SendCustomVerificationEmailErrorKind::NotFoundError(inner) => Error::NotFoundError(inner),
                crate::error::SendCustomVerificationEmailErrorKind::SendingPausedError(inner) => Error::SendingPausedError(inner),
                crate::error::SendCustomVerificationEmailErrorKind::TooManyRequestsError(inner) => Error::TooManyRequestsError(inner),
                crate::error::SendCustomVerificationEmailErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::SendEmailError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::SendEmailError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::SendEmailErrorKind::AccountSuspendedError(inner) => {
                    Error::AccountSuspendedError(inner)
                }
                crate::error::SendEmailErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::SendEmailErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::SendEmailErrorKind::MailFromDomainNotVerifiedError(inner) => {
                    Error::MailFromDomainNotVerifiedError(inner)
                }
                crate::error::SendEmailErrorKind::MessageRejected(inner) => {
                    Error::MessageRejected(inner)
                }
                crate::error::SendEmailErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::SendEmailErrorKind::SendingPausedError(inner) => {
                    Error::SendingPausedError(inner)
                }
                crate::error::SendEmailErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::SendEmailErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::TagResourceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::TagResourceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::TagResourceErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::TagResourceErrorKind::ConcurrentModificationError(inner) => {
                    Error::ConcurrentModificationError(inner)
                }
                crate::error::TagResourceErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::TagResourceErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::TagResourceErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::TestRenderEmailTemplateError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::TestRenderEmailTemplateError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::TestRenderEmailTemplateErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::TestRenderEmailTemplateErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::TestRenderEmailTemplateErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::TestRenderEmailTemplateErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UntagResourceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UntagResourceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UntagResourceErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::UntagResourceErrorKind::ConcurrentModificationError(inner) => {
                    Error::ConcurrentModificationError(inner)
                }
                crate::error::UntagResourceErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::UntagResourceErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::UntagResourceErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateConfigurationSetEventDestinationError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::UpdateConfigurationSetEventDestinationError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::UpdateConfigurationSetEventDestinationErrorKind::BadRequestError(inner) => Error::BadRequestError(inner),
                crate::error::UpdateConfigurationSetEventDestinationErrorKind::NotFoundError(inner) => Error::NotFoundError(inner),
                crate::error::UpdateConfigurationSetEventDestinationErrorKind::TooManyRequestsError(inner) => Error::TooManyRequestsError(inner),
                crate::error::UpdateConfigurationSetEventDestinationErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateContactError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateContactError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateContactErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::UpdateContactErrorKind::ConcurrentModificationError(inner) => {
                    Error::ConcurrentModificationError(inner)
                }
                crate::error::UpdateContactErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::UpdateContactErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::UpdateContactErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateContactListError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateContactListError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateContactListErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::UpdateContactListErrorKind::ConcurrentModificationError(inner) => {
                    Error::ConcurrentModificationError(inner)
                }
                crate::error::UpdateContactListErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::UpdateContactListErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::UpdateContactListErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateCustomVerificationEmailTemplateError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::UpdateCustomVerificationEmailTemplateError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::UpdateCustomVerificationEmailTemplateErrorKind::BadRequestError(inner) => Error::BadRequestError(inner),
                crate::error::UpdateCustomVerificationEmailTemplateErrorKind::NotFoundError(inner) => Error::NotFoundError(inner),
                crate::error::UpdateCustomVerificationEmailTemplateErrorKind::TooManyRequestsError(inner) => Error::TooManyRequestsError(inner),
                crate::error::UpdateCustomVerificationEmailTemplateErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateEmailIdentityPolicyError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::UpdateEmailIdentityPolicyError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateEmailIdentityPolicyErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::UpdateEmailIdentityPolicyErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::UpdateEmailIdentityPolicyErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::UpdateEmailIdentityPolicyErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateEmailTemplateError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateEmailTemplateError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateEmailTemplateErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::UpdateEmailTemplateErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::UpdateEmailTemplateErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::UpdateEmailTemplateErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl std::error::Error for Error {}
