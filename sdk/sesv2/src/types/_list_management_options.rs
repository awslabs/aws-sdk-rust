// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object used to specify a list or topic to which an email belongs, which will be used when a contact chooses to unsubscribe.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListManagementOptions {
    /// <p>The name of the contact list.</p>
    #[doc(hidden)]
    pub contact_list_name: std::option::Option<std::string::String>,
    /// <p>The name of the topic.</p>
    #[doc(hidden)]
    pub topic_name: std::option::Option<std::string::String>,
}
impl ListManagementOptions {
    /// <p>The name of the contact list.</p>
    pub fn contact_list_name(&self) -> std::option::Option<&str> {
        self.contact_list_name.as_deref()
    }
    /// <p>The name of the topic.</p>
    pub fn topic_name(&self) -> std::option::Option<&str> {
        self.topic_name.as_deref()
    }
}
impl ListManagementOptions {
    /// Creates a new builder-style object to manufacture [`ListManagementOptions`](crate::types::ListManagementOptions).
    pub fn builder() -> crate::types::builders::ListManagementOptionsBuilder {
        crate::types::builders::ListManagementOptionsBuilder::default()
    }
}

/// A builder for [`ListManagementOptions`](crate::types::ListManagementOptions).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListManagementOptionsBuilder {
    pub(crate) contact_list_name: std::option::Option<std::string::String>,
    pub(crate) topic_name: std::option::Option<std::string::String>,
}
impl ListManagementOptionsBuilder {
    /// <p>The name of the contact list.</p>
    pub fn contact_list_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.contact_list_name = Some(input.into());
        self
    }
    /// <p>The name of the contact list.</p>
    pub fn set_contact_list_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.contact_list_name = input;
        self
    }
    /// <p>The name of the topic.</p>
    pub fn topic_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.topic_name = Some(input.into());
        self
    }
    /// <p>The name of the topic.</p>
    pub fn set_topic_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.topic_name = input;
        self
    }
    /// Consumes the builder and constructs a [`ListManagementOptions`](crate::types::ListManagementOptions).
    pub fn build(self) -> crate::types::ListManagementOptions {
        crate::types::ListManagementOptions {
            contact_list_name: self.contact_list_name,
            topic_name: self.topic_name,
        }
    }
}
