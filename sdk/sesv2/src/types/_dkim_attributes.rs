// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that contains information about the DKIM authentication status for an email identity.</p>
/// <p>Amazon SES determines the authentication status by searching for specific records in the DNS configuration for the domain. If you used <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">Easy DKIM</a> to set up DKIM authentication, Amazon SES tries to find three unique CNAME records in the DNS configuration for your domain. If you provided a public key to perform DKIM authentication, Amazon SES tries to find a TXT record that uses the selector that you specified. The value of the TXT record must be a public key that's paired with the private key that you specified in the process of creating the identity</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DkimAttributes {
    /// <p>If the value is <code>true</code>, then the messages that you send from the identity are signed using DKIM. If the value is <code>false</code>, then the messages that you send from the identity aren't DKIM-signed.</p>
    pub signing_enabled: bool,
    /// <p>Describes whether or not Amazon SES has successfully located the DKIM records in the DNS records for the domain. The status can be one of the following:</p>
    /// <ul>
    /// <li> <p> <code>PENDING</code> – The verification process was initiated, but Amazon SES hasn't yet detected the DKIM records in the DNS configuration for the domain.</p> </li>
    /// <li> <p> <code>SUCCESS</code> – The verification process completed successfully.</p> </li>
    /// <li> <p> <code>FAILED</code> – The verification process failed. This typically occurs when Amazon SES fails to find the DKIM records in the DNS configuration of the domain.</p> </li>
    /// <li> <p> <code>TEMPORARY_FAILURE</code> – A temporary issue is preventing Amazon SES from determining the DKIM authentication status of the domain.</p> </li>
    /// <li> <p> <code>NOT_STARTED</code> – The DKIM verification process hasn't been initiated for the domain.</p> </li>
    /// </ul>
    pub status: ::std::option::Option<crate::types::DkimStatus>,
    /// <p>If you used <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">Easy DKIM</a> to configure DKIM authentication for the domain, then this object contains a set of unique strings that you use to create a set of CNAME records that you add to the DNS configuration for your domain. When Amazon SES detects these records in the DNS configuration for your domain, the DKIM authentication process is complete.</p>
    /// <p>If you configured DKIM authentication for the domain by providing your own public-private key pair, then this object contains the selector for the public key.</p>
    /// <p>Regardless of the DKIM authentication method you use, Amazon SES searches for the appropriate records in the DNS configuration of the domain for up to 72 hours.</p>
    pub tokens: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>A string that indicates how DKIM was configured for the identity. These are the possible values:</p>
    /// <ul>
    /// <li> <p> <code>AWS_SES</code> – Indicates that DKIM was configured for the identity by using <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">Easy DKIM</a>.</p> </li>
    /// <li> <p> <code>EXTERNAL</code> – Indicates that DKIM was configured for the identity by using Bring Your Own DKIM (BYODKIM).</p> </li>
    /// </ul>
    pub signing_attributes_origin: ::std::option::Option<crate::types::DkimSigningAttributesOrigin>,
    /// <p>[Easy DKIM] The key length of the future DKIM key pair to be generated. This can be changed at most once per day.</p>
    pub next_signing_key_length: ::std::option::Option<crate::types::DkimSigningKeyLength>,
    /// <p>[Easy DKIM] The key length of the DKIM key pair in use.</p>
    pub current_signing_key_length: ::std::option::Option<crate::types::DkimSigningKeyLength>,
    /// <p>[Easy DKIM] The last time a key pair was generated for this identity.</p>
    pub last_key_generation_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl DkimAttributes {
    /// <p>If the value is <code>true</code>, then the messages that you send from the identity are signed using DKIM. If the value is <code>false</code>, then the messages that you send from the identity aren't DKIM-signed.</p>
    pub fn signing_enabled(&self) -> bool {
        self.signing_enabled
    }
    /// <p>Describes whether or not Amazon SES has successfully located the DKIM records in the DNS records for the domain. The status can be one of the following:</p>
    /// <ul>
    /// <li> <p> <code>PENDING</code> – The verification process was initiated, but Amazon SES hasn't yet detected the DKIM records in the DNS configuration for the domain.</p> </li>
    /// <li> <p> <code>SUCCESS</code> – The verification process completed successfully.</p> </li>
    /// <li> <p> <code>FAILED</code> – The verification process failed. This typically occurs when Amazon SES fails to find the DKIM records in the DNS configuration of the domain.</p> </li>
    /// <li> <p> <code>TEMPORARY_FAILURE</code> – A temporary issue is preventing Amazon SES from determining the DKIM authentication status of the domain.</p> </li>
    /// <li> <p> <code>NOT_STARTED</code> – The DKIM verification process hasn't been initiated for the domain.</p> </li>
    /// </ul>
    pub fn status(&self) -> ::std::option::Option<&crate::types::DkimStatus> {
        self.status.as_ref()
    }
    /// <p>If you used <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">Easy DKIM</a> to configure DKIM authentication for the domain, then this object contains a set of unique strings that you use to create a set of CNAME records that you add to the DNS configuration for your domain. When Amazon SES detects these records in the DNS configuration for your domain, the DKIM authentication process is complete.</p>
    /// <p>If you configured DKIM authentication for the domain by providing your own public-private key pair, then this object contains the selector for the public key.</p>
    /// <p>Regardless of the DKIM authentication method you use, Amazon SES searches for the appropriate records in the DNS configuration of the domain for up to 72 hours.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tokens.is_none()`.
    pub fn tokens(&self) -> &[::std::string::String] {
        self.tokens.as_deref().unwrap_or_default()
    }
    /// <p>A string that indicates how DKIM was configured for the identity. These are the possible values:</p>
    /// <ul>
    /// <li> <p> <code>AWS_SES</code> – Indicates that DKIM was configured for the identity by using <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">Easy DKIM</a>.</p> </li>
    /// <li> <p> <code>EXTERNAL</code> – Indicates that DKIM was configured for the identity by using Bring Your Own DKIM (BYODKIM).</p> </li>
    /// </ul>
    pub fn signing_attributes_origin(&self) -> ::std::option::Option<&crate::types::DkimSigningAttributesOrigin> {
        self.signing_attributes_origin.as_ref()
    }
    /// <p>[Easy DKIM] The key length of the future DKIM key pair to be generated. This can be changed at most once per day.</p>
    pub fn next_signing_key_length(&self) -> ::std::option::Option<&crate::types::DkimSigningKeyLength> {
        self.next_signing_key_length.as_ref()
    }
    /// <p>[Easy DKIM] The key length of the DKIM key pair in use.</p>
    pub fn current_signing_key_length(&self) -> ::std::option::Option<&crate::types::DkimSigningKeyLength> {
        self.current_signing_key_length.as_ref()
    }
    /// <p>[Easy DKIM] The last time a key pair was generated for this identity.</p>
    pub fn last_key_generation_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_key_generation_timestamp.as_ref()
    }
}
impl DkimAttributes {
    /// Creates a new builder-style object to manufacture [`DkimAttributes`](crate::types::DkimAttributes).
    pub fn builder() -> crate::types::builders::DkimAttributesBuilder {
        crate::types::builders::DkimAttributesBuilder::default()
    }
}

/// A builder for [`DkimAttributes`](crate::types::DkimAttributes).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DkimAttributesBuilder {
    pub(crate) signing_enabled: ::std::option::Option<bool>,
    pub(crate) status: ::std::option::Option<crate::types::DkimStatus>,
    pub(crate) tokens: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) signing_attributes_origin: ::std::option::Option<crate::types::DkimSigningAttributesOrigin>,
    pub(crate) next_signing_key_length: ::std::option::Option<crate::types::DkimSigningKeyLength>,
    pub(crate) current_signing_key_length: ::std::option::Option<crate::types::DkimSigningKeyLength>,
    pub(crate) last_key_generation_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl DkimAttributesBuilder {
    /// <p>If the value is <code>true</code>, then the messages that you send from the identity are signed using DKIM. If the value is <code>false</code>, then the messages that you send from the identity aren't DKIM-signed.</p>
    pub fn signing_enabled(mut self, input: bool) -> Self {
        self.signing_enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>If the value is <code>true</code>, then the messages that you send from the identity are signed using DKIM. If the value is <code>false</code>, then the messages that you send from the identity aren't DKIM-signed.</p>
    pub fn set_signing_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.signing_enabled = input;
        self
    }
    /// <p>If the value is <code>true</code>, then the messages that you send from the identity are signed using DKIM. If the value is <code>false</code>, then the messages that you send from the identity aren't DKIM-signed.</p>
    pub fn get_signing_enabled(&self) -> &::std::option::Option<bool> {
        &self.signing_enabled
    }
    /// <p>Describes whether or not Amazon SES has successfully located the DKIM records in the DNS records for the domain. The status can be one of the following:</p>
    /// <ul>
    /// <li> <p> <code>PENDING</code> – The verification process was initiated, but Amazon SES hasn't yet detected the DKIM records in the DNS configuration for the domain.</p> </li>
    /// <li> <p> <code>SUCCESS</code> – The verification process completed successfully.</p> </li>
    /// <li> <p> <code>FAILED</code> – The verification process failed. This typically occurs when Amazon SES fails to find the DKIM records in the DNS configuration of the domain.</p> </li>
    /// <li> <p> <code>TEMPORARY_FAILURE</code> – A temporary issue is preventing Amazon SES from determining the DKIM authentication status of the domain.</p> </li>
    /// <li> <p> <code>NOT_STARTED</code> – The DKIM verification process hasn't been initiated for the domain.</p> </li>
    /// </ul>
    pub fn status(mut self, input: crate::types::DkimStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Describes whether or not Amazon SES has successfully located the DKIM records in the DNS records for the domain. The status can be one of the following:</p>
    /// <ul>
    /// <li> <p> <code>PENDING</code> – The verification process was initiated, but Amazon SES hasn't yet detected the DKIM records in the DNS configuration for the domain.</p> </li>
    /// <li> <p> <code>SUCCESS</code> – The verification process completed successfully.</p> </li>
    /// <li> <p> <code>FAILED</code> – The verification process failed. This typically occurs when Amazon SES fails to find the DKIM records in the DNS configuration of the domain.</p> </li>
    /// <li> <p> <code>TEMPORARY_FAILURE</code> – A temporary issue is preventing Amazon SES from determining the DKIM authentication status of the domain.</p> </li>
    /// <li> <p> <code>NOT_STARTED</code> – The DKIM verification process hasn't been initiated for the domain.</p> </li>
    /// </ul>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::DkimStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>Describes whether or not Amazon SES has successfully located the DKIM records in the DNS records for the domain. The status can be one of the following:</p>
    /// <ul>
    /// <li> <p> <code>PENDING</code> – The verification process was initiated, but Amazon SES hasn't yet detected the DKIM records in the DNS configuration for the domain.</p> </li>
    /// <li> <p> <code>SUCCESS</code> – The verification process completed successfully.</p> </li>
    /// <li> <p> <code>FAILED</code> – The verification process failed. This typically occurs when Amazon SES fails to find the DKIM records in the DNS configuration of the domain.</p> </li>
    /// <li> <p> <code>TEMPORARY_FAILURE</code> – A temporary issue is preventing Amazon SES from determining the DKIM authentication status of the domain.</p> </li>
    /// <li> <p> <code>NOT_STARTED</code> – The DKIM verification process hasn't been initiated for the domain.</p> </li>
    /// </ul>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::DkimStatus> {
        &self.status
    }
    /// Appends an item to `tokens`.
    ///
    /// To override the contents of this collection use [`set_tokens`](Self::set_tokens).
    ///
    /// <p>If you used <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">Easy DKIM</a> to configure DKIM authentication for the domain, then this object contains a set of unique strings that you use to create a set of CNAME records that you add to the DNS configuration for your domain. When Amazon SES detects these records in the DNS configuration for your domain, the DKIM authentication process is complete.</p>
    /// <p>If you configured DKIM authentication for the domain by providing your own public-private key pair, then this object contains the selector for the public key.</p>
    /// <p>Regardless of the DKIM authentication method you use, Amazon SES searches for the appropriate records in the DNS configuration of the domain for up to 72 hours.</p>
    pub fn tokens(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.tokens.unwrap_or_default();
        v.push(input.into());
        self.tokens = ::std::option::Option::Some(v);
        self
    }
    /// <p>If you used <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">Easy DKIM</a> to configure DKIM authentication for the domain, then this object contains a set of unique strings that you use to create a set of CNAME records that you add to the DNS configuration for your domain. When Amazon SES detects these records in the DNS configuration for your domain, the DKIM authentication process is complete.</p>
    /// <p>If you configured DKIM authentication for the domain by providing your own public-private key pair, then this object contains the selector for the public key.</p>
    /// <p>Regardless of the DKIM authentication method you use, Amazon SES searches for the appropriate records in the DNS configuration of the domain for up to 72 hours.</p>
    pub fn set_tokens(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.tokens = input;
        self
    }
    /// <p>If you used <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">Easy DKIM</a> to configure DKIM authentication for the domain, then this object contains a set of unique strings that you use to create a set of CNAME records that you add to the DNS configuration for your domain. When Amazon SES detects these records in the DNS configuration for your domain, the DKIM authentication process is complete.</p>
    /// <p>If you configured DKIM authentication for the domain by providing your own public-private key pair, then this object contains the selector for the public key.</p>
    /// <p>Regardless of the DKIM authentication method you use, Amazon SES searches for the appropriate records in the DNS configuration of the domain for up to 72 hours.</p>
    pub fn get_tokens(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.tokens
    }
    /// <p>A string that indicates how DKIM was configured for the identity. These are the possible values:</p>
    /// <ul>
    /// <li> <p> <code>AWS_SES</code> – Indicates that DKIM was configured for the identity by using <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">Easy DKIM</a>.</p> </li>
    /// <li> <p> <code>EXTERNAL</code> – Indicates that DKIM was configured for the identity by using Bring Your Own DKIM (BYODKIM).</p> </li>
    /// </ul>
    pub fn signing_attributes_origin(mut self, input: crate::types::DkimSigningAttributesOrigin) -> Self {
        self.signing_attributes_origin = ::std::option::Option::Some(input);
        self
    }
    /// <p>A string that indicates how DKIM was configured for the identity. These are the possible values:</p>
    /// <ul>
    /// <li> <p> <code>AWS_SES</code> – Indicates that DKIM was configured for the identity by using <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">Easy DKIM</a>.</p> </li>
    /// <li> <p> <code>EXTERNAL</code> – Indicates that DKIM was configured for the identity by using Bring Your Own DKIM (BYODKIM).</p> </li>
    /// </ul>
    pub fn set_signing_attributes_origin(mut self, input: ::std::option::Option<crate::types::DkimSigningAttributesOrigin>) -> Self {
        self.signing_attributes_origin = input;
        self
    }
    /// <p>A string that indicates how DKIM was configured for the identity. These are the possible values:</p>
    /// <ul>
    /// <li> <p> <code>AWS_SES</code> – Indicates that DKIM was configured for the identity by using <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">Easy DKIM</a>.</p> </li>
    /// <li> <p> <code>EXTERNAL</code> – Indicates that DKIM was configured for the identity by using Bring Your Own DKIM (BYODKIM).</p> </li>
    /// </ul>
    pub fn get_signing_attributes_origin(&self) -> &::std::option::Option<crate::types::DkimSigningAttributesOrigin> {
        &self.signing_attributes_origin
    }
    /// <p>[Easy DKIM] The key length of the future DKIM key pair to be generated. This can be changed at most once per day.</p>
    pub fn next_signing_key_length(mut self, input: crate::types::DkimSigningKeyLength) -> Self {
        self.next_signing_key_length = ::std::option::Option::Some(input);
        self
    }
    /// <p>[Easy DKIM] The key length of the future DKIM key pair to be generated. This can be changed at most once per day.</p>
    pub fn set_next_signing_key_length(mut self, input: ::std::option::Option<crate::types::DkimSigningKeyLength>) -> Self {
        self.next_signing_key_length = input;
        self
    }
    /// <p>[Easy DKIM] The key length of the future DKIM key pair to be generated. This can be changed at most once per day.</p>
    pub fn get_next_signing_key_length(&self) -> &::std::option::Option<crate::types::DkimSigningKeyLength> {
        &self.next_signing_key_length
    }
    /// <p>[Easy DKIM] The key length of the DKIM key pair in use.</p>
    pub fn current_signing_key_length(mut self, input: crate::types::DkimSigningKeyLength) -> Self {
        self.current_signing_key_length = ::std::option::Option::Some(input);
        self
    }
    /// <p>[Easy DKIM] The key length of the DKIM key pair in use.</p>
    pub fn set_current_signing_key_length(mut self, input: ::std::option::Option<crate::types::DkimSigningKeyLength>) -> Self {
        self.current_signing_key_length = input;
        self
    }
    /// <p>[Easy DKIM] The key length of the DKIM key pair in use.</p>
    pub fn get_current_signing_key_length(&self) -> &::std::option::Option<crate::types::DkimSigningKeyLength> {
        &self.current_signing_key_length
    }
    /// <p>[Easy DKIM] The last time a key pair was generated for this identity.</p>
    pub fn last_key_generation_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_key_generation_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>[Easy DKIM] The last time a key pair was generated for this identity.</p>
    pub fn set_last_key_generation_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_key_generation_timestamp = input;
        self
    }
    /// <p>[Easy DKIM] The last time a key pair was generated for this identity.</p>
    pub fn get_last_key_generation_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_key_generation_timestamp
    }
    /// Consumes the builder and constructs a [`DkimAttributes`](crate::types::DkimAttributes).
    pub fn build(self) -> crate::types::DkimAttributes {
        crate::types::DkimAttributes {
            signing_enabled: self.signing_enabled.unwrap_or_default(),
            status: self.status,
            tokens: self.tokens,
            signing_attributes_origin: self.signing_attributes_origin,
            next_signing_key_length: self.next_signing_key_length,
            current_signing_key_length: self.current_signing_key_length,
            last_key_generation_timestamp: self.last_key_generation_timestamp,
        }
    }
}
