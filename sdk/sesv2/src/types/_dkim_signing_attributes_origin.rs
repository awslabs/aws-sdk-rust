// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `DkimSigningAttributesOrigin`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let dkimsigningattributesorigin = unimplemented!();
/// match dkimsigningattributesorigin {
///     DkimSigningAttributesOrigin::AwsSes => { /* ... */ },
///     DkimSigningAttributesOrigin::AwsSesAfSouth1 => { /* ... */ },
///     DkimSigningAttributesOrigin::AwsSesApNortheast1 => { /* ... */ },
///     DkimSigningAttributesOrigin::AwsSesApNortheast2 => { /* ... */ },
///     DkimSigningAttributesOrigin::AwsSesApNortheast3 => { /* ... */ },
///     DkimSigningAttributesOrigin::AwsSesApSoutheast1 => { /* ... */ },
///     DkimSigningAttributesOrigin::AwsSesApSoutheast2 => { /* ... */ },
///     DkimSigningAttributesOrigin::AwsSesApSoutheast3 => { /* ... */ },
///     DkimSigningAttributesOrigin::AwsSesApSouth1 => { /* ... */ },
///     DkimSigningAttributesOrigin::AwsSesApSouth2 => { /* ... */ },
///     DkimSigningAttributesOrigin::AwsSesCaCentral1 => { /* ... */ },
///     DkimSigningAttributesOrigin::AwsSesEuCentral1 => { /* ... */ },
///     DkimSigningAttributesOrigin::AwsSesEuCentral2 => { /* ... */ },
///     DkimSigningAttributesOrigin::AwsSesEuNorth1 => { /* ... */ },
///     DkimSigningAttributesOrigin::AwsSesEuSouth1 => { /* ... */ },
///     DkimSigningAttributesOrigin::AwsSesEuWest1 => { /* ... */ },
///     DkimSigningAttributesOrigin::AwsSesEuWest2 => { /* ... */ },
///     DkimSigningAttributesOrigin::AwsSesEuWest3 => { /* ... */ },
///     DkimSigningAttributesOrigin::AwsSesIlCentral1 => { /* ... */ },
///     DkimSigningAttributesOrigin::AwsSesMeCentral1 => { /* ... */ },
///     DkimSigningAttributesOrigin::AwsSesMeSouth1 => { /* ... */ },
///     DkimSigningAttributesOrigin::AwsSesSaEast1 => { /* ... */ },
///     DkimSigningAttributesOrigin::AwsSesUsEast1 => { /* ... */ },
///     DkimSigningAttributesOrigin::AwsSesUsEast2 => { /* ... */ },
///     DkimSigningAttributesOrigin::AwsSesUsWest1 => { /* ... */ },
///     DkimSigningAttributesOrigin::AwsSesUsWest2 => { /* ... */ },
///     DkimSigningAttributesOrigin::External => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `dkimsigningattributesorigin` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `DkimSigningAttributesOrigin::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `DkimSigningAttributesOrigin::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `DkimSigningAttributesOrigin::NewFeature` is defined.
/// Specifically, when `dkimsigningattributesorigin` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `DkimSigningAttributesOrigin::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
///
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::Ord, ::std::cmp::PartialEq, ::std::cmp::PartialOrd, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub enum DkimSigningAttributesOrigin {
    #[allow(missing_docs)] // documentation missing in model
    AwsSes,
    #[allow(missing_docs)] // documentation missing in model
    AwsSesAfSouth1,
    #[allow(missing_docs)] // documentation missing in model
    AwsSesApNortheast1,
    #[allow(missing_docs)] // documentation missing in model
    AwsSesApNortheast2,
    #[allow(missing_docs)] // documentation missing in model
    AwsSesApNortheast3,
    #[allow(missing_docs)] // documentation missing in model
    AwsSesApSoutheast1,
    #[allow(missing_docs)] // documentation missing in model
    AwsSesApSoutheast2,
    #[allow(missing_docs)] // documentation missing in model
    AwsSesApSoutheast3,
    #[allow(missing_docs)] // documentation missing in model
    AwsSesApSouth1,
    #[allow(missing_docs)] // documentation missing in model
    AwsSesApSouth2,
    #[allow(missing_docs)] // documentation missing in model
    AwsSesCaCentral1,
    #[allow(missing_docs)] // documentation missing in model
    AwsSesEuCentral1,
    #[allow(missing_docs)] // documentation missing in model
    AwsSesEuCentral2,
    #[allow(missing_docs)] // documentation missing in model
    AwsSesEuNorth1,
    #[allow(missing_docs)] // documentation missing in model
    AwsSesEuSouth1,
    #[allow(missing_docs)] // documentation missing in model
    AwsSesEuWest1,
    #[allow(missing_docs)] // documentation missing in model
    AwsSesEuWest2,
    #[allow(missing_docs)] // documentation missing in model
    AwsSesEuWest3,
    #[allow(missing_docs)] // documentation missing in model
    AwsSesIlCentral1,
    #[allow(missing_docs)] // documentation missing in model
    AwsSesMeCentral1,
    #[allow(missing_docs)] // documentation missing in model
    AwsSesMeSouth1,
    #[allow(missing_docs)] // documentation missing in model
    AwsSesSaEast1,
    #[allow(missing_docs)] // documentation missing in model
    AwsSesUsEast1,
    #[allow(missing_docs)] // documentation missing in model
    AwsSesUsEast2,
    #[allow(missing_docs)] // documentation missing in model
    AwsSesUsWest1,
    #[allow(missing_docs)] // documentation missing in model
    AwsSesUsWest2,
    #[allow(missing_docs)] // documentation missing in model
    External,
    /// `Unknown` contains new variants that have been added since this code was generated.
    #[deprecated(note = "Don't directly match on `Unknown`. See the docs on this enum for the correct way to handle unknown variants.")]
    Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue),
}
impl ::std::convert::From<&str> for DkimSigningAttributesOrigin {
    fn from(s: &str) -> Self {
        match s {
            "AWS_SES" => DkimSigningAttributesOrigin::AwsSes,
            "AWS_SES_AF_SOUTH_1" => DkimSigningAttributesOrigin::AwsSesAfSouth1,
            "AWS_SES_AP_NORTHEAST_1" => DkimSigningAttributesOrigin::AwsSesApNortheast1,
            "AWS_SES_AP_NORTHEAST_2" => DkimSigningAttributesOrigin::AwsSesApNortheast2,
            "AWS_SES_AP_NORTHEAST_3" => DkimSigningAttributesOrigin::AwsSesApNortheast3,
            "AWS_SES_AP_SOUTHEAST_1" => DkimSigningAttributesOrigin::AwsSesApSoutheast1,
            "AWS_SES_AP_SOUTHEAST_2" => DkimSigningAttributesOrigin::AwsSesApSoutheast2,
            "AWS_SES_AP_SOUTHEAST_3" => DkimSigningAttributesOrigin::AwsSesApSoutheast3,
            "AWS_SES_AP_SOUTH_1" => DkimSigningAttributesOrigin::AwsSesApSouth1,
            "AWS_SES_AP_SOUTH_2" => DkimSigningAttributesOrigin::AwsSesApSouth2,
            "AWS_SES_CA_CENTRAL_1" => DkimSigningAttributesOrigin::AwsSesCaCentral1,
            "AWS_SES_EU_CENTRAL_1" => DkimSigningAttributesOrigin::AwsSesEuCentral1,
            "AWS_SES_EU_CENTRAL_2" => DkimSigningAttributesOrigin::AwsSesEuCentral2,
            "AWS_SES_EU_NORTH_1" => DkimSigningAttributesOrigin::AwsSesEuNorth1,
            "AWS_SES_EU_SOUTH_1" => DkimSigningAttributesOrigin::AwsSesEuSouth1,
            "AWS_SES_EU_WEST_1" => DkimSigningAttributesOrigin::AwsSesEuWest1,
            "AWS_SES_EU_WEST_2" => DkimSigningAttributesOrigin::AwsSesEuWest2,
            "AWS_SES_EU_WEST_3" => DkimSigningAttributesOrigin::AwsSesEuWest3,
            "AWS_SES_IL_CENTRAL_1" => DkimSigningAttributesOrigin::AwsSesIlCentral1,
            "AWS_SES_ME_CENTRAL_1" => DkimSigningAttributesOrigin::AwsSesMeCentral1,
            "AWS_SES_ME_SOUTH_1" => DkimSigningAttributesOrigin::AwsSesMeSouth1,
            "AWS_SES_SA_EAST_1" => DkimSigningAttributesOrigin::AwsSesSaEast1,
            "AWS_SES_US_EAST_1" => DkimSigningAttributesOrigin::AwsSesUsEast1,
            "AWS_SES_US_EAST_2" => DkimSigningAttributesOrigin::AwsSesUsEast2,
            "AWS_SES_US_WEST_1" => DkimSigningAttributesOrigin::AwsSesUsWest1,
            "AWS_SES_US_WEST_2" => DkimSigningAttributesOrigin::AwsSesUsWest2,
            "EXTERNAL" => DkimSigningAttributesOrigin::External,
            other => DkimSigningAttributesOrigin::Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl ::std::str::FromStr for DkimSigningAttributesOrigin {
    type Err = ::std::convert::Infallible;

    fn from_str(s: &str) -> ::std::result::Result<Self, <Self as ::std::str::FromStr>::Err> {
        ::std::result::Result::Ok(DkimSigningAttributesOrigin::from(s))
    }
}
impl DkimSigningAttributesOrigin {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            DkimSigningAttributesOrigin::AwsSes => "AWS_SES",
            DkimSigningAttributesOrigin::AwsSesAfSouth1 => "AWS_SES_AF_SOUTH_1",
            DkimSigningAttributesOrigin::AwsSesApNortheast1 => "AWS_SES_AP_NORTHEAST_1",
            DkimSigningAttributesOrigin::AwsSesApNortheast2 => "AWS_SES_AP_NORTHEAST_2",
            DkimSigningAttributesOrigin::AwsSesApNortheast3 => "AWS_SES_AP_NORTHEAST_3",
            DkimSigningAttributesOrigin::AwsSesApSoutheast1 => "AWS_SES_AP_SOUTHEAST_1",
            DkimSigningAttributesOrigin::AwsSesApSoutheast2 => "AWS_SES_AP_SOUTHEAST_2",
            DkimSigningAttributesOrigin::AwsSesApSoutheast3 => "AWS_SES_AP_SOUTHEAST_3",
            DkimSigningAttributesOrigin::AwsSesApSouth1 => "AWS_SES_AP_SOUTH_1",
            DkimSigningAttributesOrigin::AwsSesApSouth2 => "AWS_SES_AP_SOUTH_2",
            DkimSigningAttributesOrigin::AwsSesCaCentral1 => "AWS_SES_CA_CENTRAL_1",
            DkimSigningAttributesOrigin::AwsSesEuCentral1 => "AWS_SES_EU_CENTRAL_1",
            DkimSigningAttributesOrigin::AwsSesEuCentral2 => "AWS_SES_EU_CENTRAL_2",
            DkimSigningAttributesOrigin::AwsSesEuNorth1 => "AWS_SES_EU_NORTH_1",
            DkimSigningAttributesOrigin::AwsSesEuSouth1 => "AWS_SES_EU_SOUTH_1",
            DkimSigningAttributesOrigin::AwsSesEuWest1 => "AWS_SES_EU_WEST_1",
            DkimSigningAttributesOrigin::AwsSesEuWest2 => "AWS_SES_EU_WEST_2",
            DkimSigningAttributesOrigin::AwsSesEuWest3 => "AWS_SES_EU_WEST_3",
            DkimSigningAttributesOrigin::AwsSesIlCentral1 => "AWS_SES_IL_CENTRAL_1",
            DkimSigningAttributesOrigin::AwsSesMeCentral1 => "AWS_SES_ME_CENTRAL_1",
            DkimSigningAttributesOrigin::AwsSesMeSouth1 => "AWS_SES_ME_SOUTH_1",
            DkimSigningAttributesOrigin::AwsSesSaEast1 => "AWS_SES_SA_EAST_1",
            DkimSigningAttributesOrigin::AwsSesUsEast1 => "AWS_SES_US_EAST_1",
            DkimSigningAttributesOrigin::AwsSesUsEast2 => "AWS_SES_US_EAST_2",
            DkimSigningAttributesOrigin::AwsSesUsWest1 => "AWS_SES_US_WEST_1",
            DkimSigningAttributesOrigin::AwsSesUsWest2 => "AWS_SES_US_WEST_2",
            DkimSigningAttributesOrigin::External => "EXTERNAL",
            DkimSigningAttributesOrigin::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "AWS_SES",
            "AWS_SES_AF_SOUTH_1",
            "AWS_SES_AP_NORTHEAST_1",
            "AWS_SES_AP_NORTHEAST_2",
            "AWS_SES_AP_NORTHEAST_3",
            "AWS_SES_AP_SOUTHEAST_1",
            "AWS_SES_AP_SOUTHEAST_2",
            "AWS_SES_AP_SOUTHEAST_3",
            "AWS_SES_AP_SOUTH_1",
            "AWS_SES_AP_SOUTH_2",
            "AWS_SES_CA_CENTRAL_1",
            "AWS_SES_EU_CENTRAL_1",
            "AWS_SES_EU_CENTRAL_2",
            "AWS_SES_EU_NORTH_1",
            "AWS_SES_EU_SOUTH_1",
            "AWS_SES_EU_WEST_1",
            "AWS_SES_EU_WEST_2",
            "AWS_SES_EU_WEST_3",
            "AWS_SES_IL_CENTRAL_1",
            "AWS_SES_ME_CENTRAL_1",
            "AWS_SES_ME_SOUTH_1",
            "AWS_SES_SA_EAST_1",
            "AWS_SES_US_EAST_1",
            "AWS_SES_US_EAST_2",
            "AWS_SES_US_WEST_1",
            "AWS_SES_US_WEST_2",
            "EXTERNAL",
        ]
    }
}
impl ::std::convert::AsRef<str> for DkimSigningAttributesOrigin {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
impl DkimSigningAttributesOrigin {
    /// Parses the enum value while disallowing unknown variants.
    ///
    /// Unknown variants will result in an error.
    pub fn try_parse(value: &str) -> ::std::result::Result<Self, crate::error::UnknownVariantError> {
        match Self::from(value) {
            #[allow(deprecated)]
            Self::Unknown(_) => ::std::result::Result::Err(crate::error::UnknownVariantError::new(value)),
            known => Ok(known),
        }
    }
}
impl ::std::fmt::Display for DkimSigningAttributesOrigin {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match self {
            DkimSigningAttributesOrigin::AwsSes => write!(f, "AWS_SES"),
            DkimSigningAttributesOrigin::AwsSesAfSouth1 => write!(f, "AWS_SES_AF_SOUTH_1"),
            DkimSigningAttributesOrigin::AwsSesApNortheast1 => write!(f, "AWS_SES_AP_NORTHEAST_1"),
            DkimSigningAttributesOrigin::AwsSesApNortheast2 => write!(f, "AWS_SES_AP_NORTHEAST_2"),
            DkimSigningAttributesOrigin::AwsSesApNortheast3 => write!(f, "AWS_SES_AP_NORTHEAST_3"),
            DkimSigningAttributesOrigin::AwsSesApSoutheast1 => write!(f, "AWS_SES_AP_SOUTHEAST_1"),
            DkimSigningAttributesOrigin::AwsSesApSoutheast2 => write!(f, "AWS_SES_AP_SOUTHEAST_2"),
            DkimSigningAttributesOrigin::AwsSesApSoutheast3 => write!(f, "AWS_SES_AP_SOUTHEAST_3"),
            DkimSigningAttributesOrigin::AwsSesApSouth1 => write!(f, "AWS_SES_AP_SOUTH_1"),
            DkimSigningAttributesOrigin::AwsSesApSouth2 => write!(f, "AWS_SES_AP_SOUTH_2"),
            DkimSigningAttributesOrigin::AwsSesCaCentral1 => write!(f, "AWS_SES_CA_CENTRAL_1"),
            DkimSigningAttributesOrigin::AwsSesEuCentral1 => write!(f, "AWS_SES_EU_CENTRAL_1"),
            DkimSigningAttributesOrigin::AwsSesEuCentral2 => write!(f, "AWS_SES_EU_CENTRAL_2"),
            DkimSigningAttributesOrigin::AwsSesEuNorth1 => write!(f, "AWS_SES_EU_NORTH_1"),
            DkimSigningAttributesOrigin::AwsSesEuSouth1 => write!(f, "AWS_SES_EU_SOUTH_1"),
            DkimSigningAttributesOrigin::AwsSesEuWest1 => write!(f, "AWS_SES_EU_WEST_1"),
            DkimSigningAttributesOrigin::AwsSesEuWest2 => write!(f, "AWS_SES_EU_WEST_2"),
            DkimSigningAttributesOrigin::AwsSesEuWest3 => write!(f, "AWS_SES_EU_WEST_3"),
            DkimSigningAttributesOrigin::AwsSesIlCentral1 => write!(f, "AWS_SES_IL_CENTRAL_1"),
            DkimSigningAttributesOrigin::AwsSesMeCentral1 => write!(f, "AWS_SES_ME_CENTRAL_1"),
            DkimSigningAttributesOrigin::AwsSesMeSouth1 => write!(f, "AWS_SES_ME_SOUTH_1"),
            DkimSigningAttributesOrigin::AwsSesSaEast1 => write!(f, "AWS_SES_SA_EAST_1"),
            DkimSigningAttributesOrigin::AwsSesUsEast1 => write!(f, "AWS_SES_US_EAST_1"),
            DkimSigningAttributesOrigin::AwsSesUsEast2 => write!(f, "AWS_SES_US_EAST_2"),
            DkimSigningAttributesOrigin::AwsSesUsWest1 => write!(f, "AWS_SES_US_WEST_1"),
            DkimSigningAttributesOrigin::AwsSesUsWest2 => write!(f, "AWS_SES_US_WEST_2"),
            DkimSigningAttributesOrigin::External => write!(f, "EXTERNAL"),
            DkimSigningAttributesOrigin::Unknown(value) => write!(f, "{value}"),
        }
    }
}
