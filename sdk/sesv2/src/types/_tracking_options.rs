// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that defines the tracking options for a configuration set. When you use the Amazon SES API v2 to send an email, it contains an invisible image that's used to track when recipients open your email. If your email contains links, those links are changed slightly in order to track when recipients click them.</p>
/// <p>These images and links include references to a domain operated by Amazon Web Services. You can optionally configure the Amazon SES to use a domain that you operate for these images and links.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TrackingOptions {
    /// <p>The domain to use for tracking open and click events.</p>
    pub custom_redirect_domain: ::std::string::String,
}
impl TrackingOptions {
    /// <p>The domain to use for tracking open and click events.</p>
    pub fn custom_redirect_domain(&self) -> &str {
        use std::ops::Deref;
        self.custom_redirect_domain.deref()
    }
}
impl TrackingOptions {
    /// Creates a new builder-style object to manufacture [`TrackingOptions`](crate::types::TrackingOptions).
    pub fn builder() -> crate::types::builders::TrackingOptionsBuilder {
        crate::types::builders::TrackingOptionsBuilder::default()
    }
}

/// A builder for [`TrackingOptions`](crate::types::TrackingOptions).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct TrackingOptionsBuilder {
    pub(crate) custom_redirect_domain: ::std::option::Option<::std::string::String>,
}
impl TrackingOptionsBuilder {
    /// <p>The domain to use for tracking open and click events.</p>
    /// This field is required.
    pub fn custom_redirect_domain(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.custom_redirect_domain = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The domain to use for tracking open and click events.</p>
    pub fn set_custom_redirect_domain(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.custom_redirect_domain = input;
        self
    }
    /// <p>The domain to use for tracking open and click events.</p>
    pub fn get_custom_redirect_domain(&self) -> &::std::option::Option<::std::string::String> {
        &self.custom_redirect_domain
    }
    /// Consumes the builder and constructs a [`TrackingOptions`](crate::types::TrackingOptions).
    /// This method will fail if any of the following fields are not set:
    /// - [`custom_redirect_domain`](crate::types::builders::TrackingOptionsBuilder::custom_redirect_domain)
    pub fn build(self) -> ::std::result::Result<crate::types::TrackingOptions, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::TrackingOptions {
            custom_redirect_domain: self.custom_redirect_domain.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "custom_redirect_domain",
                    "custom_redirect_domain was not specified but it is required when building TrackingOptions",
                )
            })?,
        })
    }
}
