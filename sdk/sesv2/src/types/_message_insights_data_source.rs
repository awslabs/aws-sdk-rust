// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that contains filters applied when performing the Message Insights export.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MessageInsightsDataSource {
    /// <p>Represents the start date for the export interval as a timestamp. The start date is inclusive.</p>
    pub start_date: ::aws_smithy_types::DateTime,
    /// <p>Represents the end date for the export interval as a timestamp. The end date is inclusive.</p>
    pub end_date: ::aws_smithy_types::DateTime,
    /// <p>Filters for results to be included in the export file.</p>
    pub include: ::std::option::Option<crate::types::MessageInsightsFilters>,
    /// <p>Filters for results to be excluded from the export file.</p>
    pub exclude: ::std::option::Option<crate::types::MessageInsightsFilters>,
    /// <p>The maximum number of results.</p>
    pub max_results: ::std::option::Option<i32>,
}
impl MessageInsightsDataSource {
    /// <p>Represents the start date for the export interval as a timestamp. The start date is inclusive.</p>
    pub fn start_date(&self) -> &::aws_smithy_types::DateTime {
        &self.start_date
    }
    /// <p>Represents the end date for the export interval as a timestamp. The end date is inclusive.</p>
    pub fn end_date(&self) -> &::aws_smithy_types::DateTime {
        &self.end_date
    }
    /// <p>Filters for results to be included in the export file.</p>
    pub fn include(&self) -> ::std::option::Option<&crate::types::MessageInsightsFilters> {
        self.include.as_ref()
    }
    /// <p>Filters for results to be excluded from the export file.</p>
    pub fn exclude(&self) -> ::std::option::Option<&crate::types::MessageInsightsFilters> {
        self.exclude.as_ref()
    }
    /// <p>The maximum number of results.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
}
impl MessageInsightsDataSource {
    /// Creates a new builder-style object to manufacture [`MessageInsightsDataSource`](crate::types::MessageInsightsDataSource).
    pub fn builder() -> crate::types::builders::MessageInsightsDataSourceBuilder {
        crate::types::builders::MessageInsightsDataSourceBuilder::default()
    }
}

/// A builder for [`MessageInsightsDataSource`](crate::types::MessageInsightsDataSource).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct MessageInsightsDataSourceBuilder {
    pub(crate) start_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) end_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) include: ::std::option::Option<crate::types::MessageInsightsFilters>,
    pub(crate) exclude: ::std::option::Option<crate::types::MessageInsightsFilters>,
    pub(crate) max_results: ::std::option::Option<i32>,
}
impl MessageInsightsDataSourceBuilder {
    /// <p>Represents the start date for the export interval as a timestamp. The start date is inclusive.</p>
    /// This field is required.
    pub fn start_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.start_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>Represents the start date for the export interval as a timestamp. The start date is inclusive.</p>
    pub fn set_start_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.start_date = input;
        self
    }
    /// <p>Represents the start date for the export interval as a timestamp. The start date is inclusive.</p>
    pub fn get_start_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.start_date
    }
    /// <p>Represents the end date for the export interval as a timestamp. The end date is inclusive.</p>
    /// This field is required.
    pub fn end_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.end_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>Represents the end date for the export interval as a timestamp. The end date is inclusive.</p>
    pub fn set_end_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.end_date = input;
        self
    }
    /// <p>Represents the end date for the export interval as a timestamp. The end date is inclusive.</p>
    pub fn get_end_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.end_date
    }
    /// <p>Filters for results to be included in the export file.</p>
    pub fn include(mut self, input: crate::types::MessageInsightsFilters) -> Self {
        self.include = ::std::option::Option::Some(input);
        self
    }
    /// <p>Filters for results to be included in the export file.</p>
    pub fn set_include(mut self, input: ::std::option::Option<crate::types::MessageInsightsFilters>) -> Self {
        self.include = input;
        self
    }
    /// <p>Filters for results to be included in the export file.</p>
    pub fn get_include(&self) -> &::std::option::Option<crate::types::MessageInsightsFilters> {
        &self.include
    }
    /// <p>Filters for results to be excluded from the export file.</p>
    pub fn exclude(mut self, input: crate::types::MessageInsightsFilters) -> Self {
        self.exclude = ::std::option::Option::Some(input);
        self
    }
    /// <p>Filters for results to be excluded from the export file.</p>
    pub fn set_exclude(mut self, input: ::std::option::Option<crate::types::MessageInsightsFilters>) -> Self {
        self.exclude = input;
        self
    }
    /// <p>Filters for results to be excluded from the export file.</p>
    pub fn get_exclude(&self) -> &::std::option::Option<crate::types::MessageInsightsFilters> {
        &self.exclude
    }
    /// <p>The maximum number of results.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of results.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of results.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// Consumes the builder and constructs a [`MessageInsightsDataSource`](crate::types::MessageInsightsDataSource).
    /// This method will fail if any of the following fields are not set:
    /// - [`start_date`](crate::types::builders::MessageInsightsDataSourceBuilder::start_date)
    /// - [`end_date`](crate::types::builders::MessageInsightsDataSourceBuilder::end_date)
    pub fn build(self) -> ::std::result::Result<crate::types::MessageInsightsDataSource, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::MessageInsightsDataSource {
            start_date: self.start_date.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "start_date",
                    "start_date was not specified but it is required when building MessageInsightsDataSource",
                )
            })?,
            end_date: self.end_date.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "end_date",
                    "end_date was not specified but it is required when building MessageInsightsDataSource",
                )
            })?,
            include: self.include,
            exclude: self.exclude,
            max_results: self.max_results,
        })
    }
}
