// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `BulkEmailStatus`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let bulkemailstatus = unimplemented!();
/// match bulkemailstatus {
///     BulkEmailStatus::AccountDailyQuotaExceeded => { /* ... */ },
///     BulkEmailStatus::AccountSendingPaused => { /* ... */ },
///     BulkEmailStatus::AccountSuspended => { /* ... */ },
///     BulkEmailStatus::AccountThrottled => { /* ... */ },
///     BulkEmailStatus::ConfigurationSetNotFound => { /* ... */ },
///     BulkEmailStatus::ConfigurationSetSendingPaused => { /* ... */ },
///     BulkEmailStatus::Failed => { /* ... */ },
///     BulkEmailStatus::InvalidParameter => { /* ... */ },
///     BulkEmailStatus::InvalidSendingPoolName => { /* ... */ },
///     BulkEmailStatus::MailFromDomainNotVerified => { /* ... */ },
///     BulkEmailStatus::MessageRejected => { /* ... */ },
///     BulkEmailStatus::Success => { /* ... */ },
///     BulkEmailStatus::TemplateNotFound => { /* ... */ },
///     BulkEmailStatus::TransientFailure => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `bulkemailstatus` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `BulkEmailStatus::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `BulkEmailStatus::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `BulkEmailStatus::NewFeature` is defined.
/// Specifically, when `bulkemailstatus` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `BulkEmailStatus::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum BulkEmailStatus {
    #[allow(missing_docs)] // documentation missing in model
    AccountDailyQuotaExceeded,
    #[allow(missing_docs)] // documentation missing in model
    AccountSendingPaused,
    #[allow(missing_docs)] // documentation missing in model
    AccountSuspended,
    #[allow(missing_docs)] // documentation missing in model
    AccountThrottled,
    #[allow(missing_docs)] // documentation missing in model
    ConfigurationSetNotFound,
    #[allow(missing_docs)] // documentation missing in model
    ConfigurationSetSendingPaused,
    #[allow(missing_docs)] // documentation missing in model
    Failed,
    #[allow(missing_docs)] // documentation missing in model
    InvalidParameter,
    #[allow(missing_docs)] // documentation missing in model
    InvalidSendingPoolName,
    #[allow(missing_docs)] // documentation missing in model
    MailFromDomainNotVerified,
    #[allow(missing_docs)] // documentation missing in model
    MessageRejected,
    #[allow(missing_docs)] // documentation missing in model
    Success,
    #[allow(missing_docs)] // documentation missing in model
    TemplateNotFound,
    #[allow(missing_docs)] // documentation missing in model
    TransientFailure,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl std::convert::From<&str> for BulkEmailStatus {
    fn from(s: &str) -> Self {
        match s {
            "ACCOUNT_DAILY_QUOTA_EXCEEDED" => BulkEmailStatus::AccountDailyQuotaExceeded,
            "ACCOUNT_SENDING_PAUSED" => BulkEmailStatus::AccountSendingPaused,
            "ACCOUNT_SUSPENDED" => BulkEmailStatus::AccountSuspended,
            "ACCOUNT_THROTTLED" => BulkEmailStatus::AccountThrottled,
            "CONFIGURATION_SET_NOT_FOUND" => BulkEmailStatus::ConfigurationSetNotFound,
            "CONFIGURATION_SET_SENDING_PAUSED" => BulkEmailStatus::ConfigurationSetSendingPaused,
            "FAILED" => BulkEmailStatus::Failed,
            "INVALID_PARAMETER" => BulkEmailStatus::InvalidParameter,
            "INVALID_SENDING_POOL_NAME" => BulkEmailStatus::InvalidSendingPoolName,
            "MAIL_FROM_DOMAIN_NOT_VERIFIED" => BulkEmailStatus::MailFromDomainNotVerified,
            "MESSAGE_REJECTED" => BulkEmailStatus::MessageRejected,
            "SUCCESS" => BulkEmailStatus::Success,
            "TEMPLATE_NOT_FOUND" => BulkEmailStatus::TemplateNotFound,
            "TRANSIENT_FAILURE" => BulkEmailStatus::TransientFailure,
            other => {
                BulkEmailStatus::Unknown(crate::primitives::UnknownVariantValue(other.to_owned()))
            }
        }
    }
}
impl std::str::FromStr for BulkEmailStatus {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(BulkEmailStatus::from(s))
    }
}
impl BulkEmailStatus {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            BulkEmailStatus::AccountDailyQuotaExceeded => "ACCOUNT_DAILY_QUOTA_EXCEEDED",
            BulkEmailStatus::AccountSendingPaused => "ACCOUNT_SENDING_PAUSED",
            BulkEmailStatus::AccountSuspended => "ACCOUNT_SUSPENDED",
            BulkEmailStatus::AccountThrottled => "ACCOUNT_THROTTLED",
            BulkEmailStatus::ConfigurationSetNotFound => "CONFIGURATION_SET_NOT_FOUND",
            BulkEmailStatus::ConfigurationSetSendingPaused => "CONFIGURATION_SET_SENDING_PAUSED",
            BulkEmailStatus::Failed => "FAILED",
            BulkEmailStatus::InvalidParameter => "INVALID_PARAMETER",
            BulkEmailStatus::InvalidSendingPoolName => "INVALID_SENDING_POOL_NAME",
            BulkEmailStatus::MailFromDomainNotVerified => "MAIL_FROM_DOMAIN_NOT_VERIFIED",
            BulkEmailStatus::MessageRejected => "MESSAGE_REJECTED",
            BulkEmailStatus::Success => "SUCCESS",
            BulkEmailStatus::TemplateNotFound => "TEMPLATE_NOT_FOUND",
            BulkEmailStatus::TransientFailure => "TRANSIENT_FAILURE",
            BulkEmailStatus::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "ACCOUNT_DAILY_QUOTA_EXCEEDED",
            "ACCOUNT_SENDING_PAUSED",
            "ACCOUNT_SUSPENDED",
            "ACCOUNT_THROTTLED",
            "CONFIGURATION_SET_NOT_FOUND",
            "CONFIGURATION_SET_SENDING_PAUSED",
            "FAILED",
            "INVALID_PARAMETER",
            "INVALID_SENDING_POOL_NAME",
            "MAIL_FROM_DOMAIN_NOT_VERIFIED",
            "MESSAGE_REJECTED",
            "SUCCESS",
            "TEMPLATE_NOT_FOUND",
            "TRANSIENT_FAILURE",
        ]
    }
}
impl AsRef<str> for BulkEmailStatus {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
