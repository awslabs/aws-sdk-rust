// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that contains details about the data source for the metrics export.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MetricsDataSource {
    /// <p>An object that contains a mapping between a <code>MetricDimensionName</code> and <code>MetricDimensionValue</code> to filter metrics by. Must contain a least 1 dimension but no more than 3 unique ones.</p>
    pub dimensions: ::std::collections::HashMap<crate::types::MetricDimensionName, ::std::vec::Vec<::std::string::String>>,
    /// <p>The metrics namespace - e.g., <code>VDM</code>.</p>
    pub namespace: crate::types::MetricNamespace,
    /// <p>A list of <code>ExportMetric</code> objects to export.</p>
    pub metrics: ::std::vec::Vec<crate::types::ExportMetric>,
    /// <p>Represents the start date for the export interval as a timestamp.</p>
    pub start_date: ::aws_smithy_types::DateTime,
    /// <p>Represents the end date for the export interval as a timestamp.</p>
    pub end_date: ::aws_smithy_types::DateTime,
}
impl MetricsDataSource {
    /// <p>An object that contains a mapping between a <code>MetricDimensionName</code> and <code>MetricDimensionValue</code> to filter metrics by. Must contain a least 1 dimension but no more than 3 unique ones.</p>
    pub fn dimensions(&self) -> &::std::collections::HashMap<crate::types::MetricDimensionName, ::std::vec::Vec<::std::string::String>> {
        &self.dimensions
    }
    /// <p>The metrics namespace - e.g., <code>VDM</code>.</p>
    pub fn namespace(&self) -> &crate::types::MetricNamespace {
        &self.namespace
    }
    /// <p>A list of <code>ExportMetric</code> objects to export.</p>
    pub fn metrics(&self) -> &[crate::types::ExportMetric] {
        use std::ops::Deref;
        self.metrics.deref()
    }
    /// <p>Represents the start date for the export interval as a timestamp.</p>
    pub fn start_date(&self) -> &::aws_smithy_types::DateTime {
        &self.start_date
    }
    /// <p>Represents the end date for the export interval as a timestamp.</p>
    pub fn end_date(&self) -> &::aws_smithy_types::DateTime {
        &self.end_date
    }
}
impl MetricsDataSource {
    /// Creates a new builder-style object to manufacture [`MetricsDataSource`](crate::types::MetricsDataSource).
    pub fn builder() -> crate::types::builders::MetricsDataSourceBuilder {
        crate::types::builders::MetricsDataSourceBuilder::default()
    }
}

/// A builder for [`MetricsDataSource`](crate::types::MetricsDataSource).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct MetricsDataSourceBuilder {
    pub(crate) dimensions:
        ::std::option::Option<::std::collections::HashMap<crate::types::MetricDimensionName, ::std::vec::Vec<::std::string::String>>>,
    pub(crate) namespace: ::std::option::Option<crate::types::MetricNamespace>,
    pub(crate) metrics: ::std::option::Option<::std::vec::Vec<crate::types::ExportMetric>>,
    pub(crate) start_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) end_date: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl MetricsDataSourceBuilder {
    /// Adds a key-value pair to `dimensions`.
    ///
    /// To override the contents of this collection use [`set_dimensions`](Self::set_dimensions).
    ///
    /// <p>An object that contains a mapping between a <code>MetricDimensionName</code> and <code>MetricDimensionValue</code> to filter metrics by. Must contain a least 1 dimension but no more than 3 unique ones.</p>
    pub fn dimensions(mut self, k: crate::types::MetricDimensionName, v: ::std::vec::Vec<::std::string::String>) -> Self {
        let mut hash_map = self.dimensions.unwrap_or_default();
        hash_map.insert(k, v);
        self.dimensions = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>An object that contains a mapping between a <code>MetricDimensionName</code> and <code>MetricDimensionValue</code> to filter metrics by. Must contain a least 1 dimension but no more than 3 unique ones.</p>
    pub fn set_dimensions(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<crate::types::MetricDimensionName, ::std::vec::Vec<::std::string::String>>>,
    ) -> Self {
        self.dimensions = input;
        self
    }
    /// <p>An object that contains a mapping between a <code>MetricDimensionName</code> and <code>MetricDimensionValue</code> to filter metrics by. Must contain a least 1 dimension but no more than 3 unique ones.</p>
    pub fn get_dimensions(
        &self,
    ) -> &::std::option::Option<::std::collections::HashMap<crate::types::MetricDimensionName, ::std::vec::Vec<::std::string::String>>> {
        &self.dimensions
    }
    /// <p>The metrics namespace - e.g., <code>VDM</code>.</p>
    /// This field is required.
    pub fn namespace(mut self, input: crate::types::MetricNamespace) -> Self {
        self.namespace = ::std::option::Option::Some(input);
        self
    }
    /// <p>The metrics namespace - e.g., <code>VDM</code>.</p>
    pub fn set_namespace(mut self, input: ::std::option::Option<crate::types::MetricNamespace>) -> Self {
        self.namespace = input;
        self
    }
    /// <p>The metrics namespace - e.g., <code>VDM</code>.</p>
    pub fn get_namespace(&self) -> &::std::option::Option<crate::types::MetricNamespace> {
        &self.namespace
    }
    /// Appends an item to `metrics`.
    ///
    /// To override the contents of this collection use [`set_metrics`](Self::set_metrics).
    ///
    /// <p>A list of <code>ExportMetric</code> objects to export.</p>
    pub fn metrics(mut self, input: crate::types::ExportMetric) -> Self {
        let mut v = self.metrics.unwrap_or_default();
        v.push(input);
        self.metrics = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of <code>ExportMetric</code> objects to export.</p>
    pub fn set_metrics(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ExportMetric>>) -> Self {
        self.metrics = input;
        self
    }
    /// <p>A list of <code>ExportMetric</code> objects to export.</p>
    pub fn get_metrics(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ExportMetric>> {
        &self.metrics
    }
    /// <p>Represents the start date for the export interval as a timestamp.</p>
    /// This field is required.
    pub fn start_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.start_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>Represents the start date for the export interval as a timestamp.</p>
    pub fn set_start_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.start_date = input;
        self
    }
    /// <p>Represents the start date for the export interval as a timestamp.</p>
    pub fn get_start_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.start_date
    }
    /// <p>Represents the end date for the export interval as a timestamp.</p>
    /// This field is required.
    pub fn end_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.end_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>Represents the end date for the export interval as a timestamp.</p>
    pub fn set_end_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.end_date = input;
        self
    }
    /// <p>Represents the end date for the export interval as a timestamp.</p>
    pub fn get_end_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.end_date
    }
    /// Consumes the builder and constructs a [`MetricsDataSource`](crate::types::MetricsDataSource).
    /// This method will fail if any of the following fields are not set:
    /// - [`dimensions`](crate::types::builders::MetricsDataSourceBuilder::dimensions)
    /// - [`namespace`](crate::types::builders::MetricsDataSourceBuilder::namespace)
    /// - [`metrics`](crate::types::builders::MetricsDataSourceBuilder::metrics)
    /// - [`start_date`](crate::types::builders::MetricsDataSourceBuilder::start_date)
    /// - [`end_date`](crate::types::builders::MetricsDataSourceBuilder::end_date)
    pub fn build(self) -> ::std::result::Result<crate::types::MetricsDataSource, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::MetricsDataSource {
            dimensions: self.dimensions.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "dimensions",
                    "dimensions was not specified but it is required when building MetricsDataSource",
                )
            })?,
            namespace: self.namespace.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "namespace",
                    "namespace was not specified but it is required when building MetricsDataSource",
                )
            })?,
            metrics: self.metrics.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "metrics",
                    "metrics was not specified but it is required when building MetricsDataSource",
                )
            })?,
            start_date: self.start_date.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "start_date",
                    "start_date was not specified but it is required when building MetricsDataSource",
                )
            })?,
            end_date: self.end_date.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "end_date",
                    "end_date was not specified but it is required when building MetricsDataSource",
                )
            })?,
        })
    }
}
