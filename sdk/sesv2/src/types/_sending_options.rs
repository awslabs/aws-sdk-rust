// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Used to enable or disable email sending for messages that use this configuration set in the current Amazon Web Services Region.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SendingOptions {
    /// <p>If <code>true</code>, email sending is enabled for the configuration set. If <code>false</code>, email sending is disabled for the configuration set.</p>
    #[doc(hidden)]
    pub sending_enabled: bool,
}
impl SendingOptions {
    /// <p>If <code>true</code>, email sending is enabled for the configuration set. If <code>false</code>, email sending is disabled for the configuration set.</p>
    pub fn sending_enabled(&self) -> bool {
        self.sending_enabled
    }
}
impl SendingOptions {
    /// Creates a new builder-style object to manufacture [`SendingOptions`](crate::types::SendingOptions).
    pub fn builder() -> crate::types::builders::SendingOptionsBuilder {
        crate::types::builders::SendingOptionsBuilder::default()
    }
}

/// A builder for [`SendingOptions`](crate::types::SendingOptions).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SendingOptionsBuilder {
    pub(crate) sending_enabled: std::option::Option<bool>,
}
impl SendingOptionsBuilder {
    /// <p>If <code>true</code>, email sending is enabled for the configuration set. If <code>false</code>, email sending is disabled for the configuration set.</p>
    pub fn sending_enabled(mut self, input: bool) -> Self {
        self.sending_enabled = Some(input);
        self
    }
    /// <p>If <code>true</code>, email sending is enabled for the configuration set. If <code>false</code>, email sending is disabled for the configuration set.</p>
    pub fn set_sending_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.sending_enabled = input;
        self
    }
    /// Consumes the builder and constructs a [`SendingOptions`](crate::types::SendingOptions).
    pub fn build(self) -> crate::types::SendingOptions {
        crate::types::SendingOptions {
            sending_enabled: self.sending_enabled.unwrap_or_default(),
        }
    }
}
