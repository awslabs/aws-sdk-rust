// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A contact is the end-user who is receiving the email.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Contact {
    /// <p>The contact's email address.</p>
    pub email_address: ::std::option::Option<::std::string::String>,
    /// <p>The contact's preference for being opted-in to or opted-out of a topic.</p>
    pub topic_preferences: ::std::option::Option<::std::vec::Vec<crate::types::TopicPreference>>,
    /// <p>The default topic preferences applied to the contact.</p>
    pub topic_default_preferences: ::std::option::Option<::std::vec::Vec<crate::types::TopicPreference>>,
    /// <p>A boolean value status noting if the contact is unsubscribed from all contact list topics.</p>
    pub unsubscribe_all: bool,
    /// <p>A timestamp noting the last time the contact's information was updated.</p>
    pub last_updated_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl Contact {
    /// <p>The contact's email address.</p>
    pub fn email_address(&self) -> ::std::option::Option<&str> {
        self.email_address.as_deref()
    }
    /// <p>The contact's preference for being opted-in to or opted-out of a topic.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.topic_preferences.is_none()`.
    pub fn topic_preferences(&self) -> &[crate::types::TopicPreference] {
        self.topic_preferences.as_deref().unwrap_or_default()
    }
    /// <p>The default topic preferences applied to the contact.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.topic_default_preferences.is_none()`.
    pub fn topic_default_preferences(&self) -> &[crate::types::TopicPreference] {
        self.topic_default_preferences.as_deref().unwrap_or_default()
    }
    /// <p>A boolean value status noting if the contact is unsubscribed from all contact list topics.</p>
    pub fn unsubscribe_all(&self) -> bool {
        self.unsubscribe_all
    }
    /// <p>A timestamp noting the last time the contact's information was updated.</p>
    pub fn last_updated_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_updated_timestamp.as_ref()
    }
}
impl Contact {
    /// Creates a new builder-style object to manufacture [`Contact`](crate::types::Contact).
    pub fn builder() -> crate::types::builders::ContactBuilder {
        crate::types::builders::ContactBuilder::default()
    }
}

/// A builder for [`Contact`](crate::types::Contact).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ContactBuilder {
    pub(crate) email_address: ::std::option::Option<::std::string::String>,
    pub(crate) topic_preferences: ::std::option::Option<::std::vec::Vec<crate::types::TopicPreference>>,
    pub(crate) topic_default_preferences: ::std::option::Option<::std::vec::Vec<crate::types::TopicPreference>>,
    pub(crate) unsubscribe_all: ::std::option::Option<bool>,
    pub(crate) last_updated_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl ContactBuilder {
    /// <p>The contact's email address.</p>
    pub fn email_address(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.email_address = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The contact's email address.</p>
    pub fn set_email_address(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.email_address = input;
        self
    }
    /// <p>The contact's email address.</p>
    pub fn get_email_address(&self) -> &::std::option::Option<::std::string::String> {
        &self.email_address
    }
    /// Appends an item to `topic_preferences`.
    ///
    /// To override the contents of this collection use [`set_topic_preferences`](Self::set_topic_preferences).
    ///
    /// <p>The contact's preference for being opted-in to or opted-out of a topic.</p>
    pub fn topic_preferences(mut self, input: crate::types::TopicPreference) -> Self {
        let mut v = self.topic_preferences.unwrap_or_default();
        v.push(input);
        self.topic_preferences = ::std::option::Option::Some(v);
        self
    }
    /// <p>The contact's preference for being opted-in to or opted-out of a topic.</p>
    pub fn set_topic_preferences(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::TopicPreference>>) -> Self {
        self.topic_preferences = input;
        self
    }
    /// <p>The contact's preference for being opted-in to or opted-out of a topic.</p>
    pub fn get_topic_preferences(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::TopicPreference>> {
        &self.topic_preferences
    }
    /// Appends an item to `topic_default_preferences`.
    ///
    /// To override the contents of this collection use [`set_topic_default_preferences`](Self::set_topic_default_preferences).
    ///
    /// <p>The default topic preferences applied to the contact.</p>
    pub fn topic_default_preferences(mut self, input: crate::types::TopicPreference) -> Self {
        let mut v = self.topic_default_preferences.unwrap_or_default();
        v.push(input);
        self.topic_default_preferences = ::std::option::Option::Some(v);
        self
    }
    /// <p>The default topic preferences applied to the contact.</p>
    pub fn set_topic_default_preferences(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::TopicPreference>>) -> Self {
        self.topic_default_preferences = input;
        self
    }
    /// <p>The default topic preferences applied to the contact.</p>
    pub fn get_topic_default_preferences(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::TopicPreference>> {
        &self.topic_default_preferences
    }
    /// <p>A boolean value status noting if the contact is unsubscribed from all contact list topics.</p>
    pub fn unsubscribe_all(mut self, input: bool) -> Self {
        self.unsubscribe_all = ::std::option::Option::Some(input);
        self
    }
    /// <p>A boolean value status noting if the contact is unsubscribed from all contact list topics.</p>
    pub fn set_unsubscribe_all(mut self, input: ::std::option::Option<bool>) -> Self {
        self.unsubscribe_all = input;
        self
    }
    /// <p>A boolean value status noting if the contact is unsubscribed from all contact list topics.</p>
    pub fn get_unsubscribe_all(&self) -> &::std::option::Option<bool> {
        &self.unsubscribe_all
    }
    /// <p>A timestamp noting the last time the contact's information was updated.</p>
    pub fn last_updated_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_updated_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>A timestamp noting the last time the contact's information was updated.</p>
    pub fn set_last_updated_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_updated_timestamp = input;
        self
    }
    /// <p>A timestamp noting the last time the contact's information was updated.</p>
    pub fn get_last_updated_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_updated_timestamp
    }
    /// Consumes the builder and constructs a [`Contact`](crate::types::Contact).
    pub fn build(self) -> crate::types::Contact {
        crate::types::Contact {
            email_address: self.email_address,
            topic_preferences: self.topic_preferences,
            topic_default_preferences: self.topic_default_preferences,
            unsubscribe_all: self.unsubscribe_all.unwrap_or_default(),
            last_updated_timestamp: self.last_updated_timestamp,
        }
    }
}
