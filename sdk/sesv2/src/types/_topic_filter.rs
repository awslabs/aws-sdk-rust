// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Used for filtering by a specific topic preference.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TopicFilter {
    /// <p>The name of a topic on which you wish to apply the filter.</p>
    #[doc(hidden)]
    pub topic_name: std::option::Option<std::string::String>,
    /// <p>Notes that the default subscription status should be applied to a contact because the contact has not noted their preference for subscribing to a topic.</p>
    #[doc(hidden)]
    pub use_default_if_preference_unavailable: bool,
}
impl TopicFilter {
    /// <p>The name of a topic on which you wish to apply the filter.</p>
    pub fn topic_name(&self) -> std::option::Option<&str> {
        self.topic_name.as_deref()
    }
    /// <p>Notes that the default subscription status should be applied to a contact because the contact has not noted their preference for subscribing to a topic.</p>
    pub fn use_default_if_preference_unavailable(&self) -> bool {
        self.use_default_if_preference_unavailable
    }
}
impl TopicFilter {
    /// Creates a new builder-style object to manufacture [`TopicFilter`](crate::types::TopicFilter).
    pub fn builder() -> crate::types::builders::TopicFilterBuilder {
        crate::types::builders::TopicFilterBuilder::default()
    }
}

/// A builder for [`TopicFilter`](crate::types::TopicFilter).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TopicFilterBuilder {
    pub(crate) topic_name: std::option::Option<std::string::String>,
    pub(crate) use_default_if_preference_unavailable: std::option::Option<bool>,
}
impl TopicFilterBuilder {
    /// <p>The name of a topic on which you wish to apply the filter.</p>
    pub fn topic_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.topic_name = Some(input.into());
        self
    }
    /// <p>The name of a topic on which you wish to apply the filter.</p>
    pub fn set_topic_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.topic_name = input;
        self
    }
    /// <p>Notes that the default subscription status should be applied to a contact because the contact has not noted their preference for subscribing to a topic.</p>
    pub fn use_default_if_preference_unavailable(mut self, input: bool) -> Self {
        self.use_default_if_preference_unavailable = Some(input);
        self
    }
    /// <p>Notes that the default subscription status should be applied to a contact because the contact has not noted their preference for subscribing to a topic.</p>
    pub fn set_use_default_if_preference_unavailable(
        mut self,
        input: std::option::Option<bool>,
    ) -> Self {
        self.use_default_if_preference_unavailable = input;
        self
    }
    /// Consumes the builder and constructs a [`TopicFilter`](crate::types::TopicFilter).
    pub fn build(self) -> crate::types::TopicFilter {
        crate::types::TopicFilter {
            topic_name: self.topic_name,
            use_default_if_preference_unavailable: self
                .use_default_if_preference_unavailable
                .unwrap_or_default(),
        }
    }
}
