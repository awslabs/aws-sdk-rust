// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The content of the email, composed of a subject line, an HTML part, and a text-only part.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct EmailTemplateContent {
    /// <p>The subject line of the email.</p>
    #[doc(hidden)]
    pub subject: std::option::Option<std::string::String>,
    /// <p>The email body that will be visible to recipients whose email clients do not display HTML.</p>
    #[doc(hidden)]
    pub text: std::option::Option<std::string::String>,
    /// <p>The HTML body of the email.</p>
    #[doc(hidden)]
    pub html: std::option::Option<std::string::String>,
}
impl EmailTemplateContent {
    /// <p>The subject line of the email.</p>
    pub fn subject(&self) -> std::option::Option<&str> {
        self.subject.as_deref()
    }
    /// <p>The email body that will be visible to recipients whose email clients do not display HTML.</p>
    pub fn text(&self) -> std::option::Option<&str> {
        self.text.as_deref()
    }
    /// <p>The HTML body of the email.</p>
    pub fn html(&self) -> std::option::Option<&str> {
        self.html.as_deref()
    }
}
impl EmailTemplateContent {
    /// Creates a new builder-style object to manufacture [`EmailTemplateContent`](crate::types::EmailTemplateContent).
    pub fn builder() -> crate::types::builders::EmailTemplateContentBuilder {
        crate::types::builders::EmailTemplateContentBuilder::default()
    }
}

/// A builder for [`EmailTemplateContent`](crate::types::EmailTemplateContent).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct EmailTemplateContentBuilder {
    pub(crate) subject: std::option::Option<std::string::String>,
    pub(crate) text: std::option::Option<std::string::String>,
    pub(crate) html: std::option::Option<std::string::String>,
}
impl EmailTemplateContentBuilder {
    /// <p>The subject line of the email.</p>
    pub fn subject(mut self, input: impl Into<std::string::String>) -> Self {
        self.subject = Some(input.into());
        self
    }
    /// <p>The subject line of the email.</p>
    pub fn set_subject(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.subject = input;
        self
    }
    /// <p>The email body that will be visible to recipients whose email clients do not display HTML.</p>
    pub fn text(mut self, input: impl Into<std::string::String>) -> Self {
        self.text = Some(input.into());
        self
    }
    /// <p>The email body that will be visible to recipients whose email clients do not display HTML.</p>
    pub fn set_text(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.text = input;
        self
    }
    /// <p>The HTML body of the email.</p>
    pub fn html(mut self, input: impl Into<std::string::String>) -> Self {
        self.html = Some(input.into());
        self
    }
    /// <p>The HTML body of the email.</p>
    pub fn set_html(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.html = input;
        self
    }
    /// Consumes the builder and constructs a [`EmailTemplateContent`](crate::types::EmailTemplateContent).
    pub fn build(self) -> crate::types::EmailTemplateContent {
        crate::types::EmailTemplateContent {
            subject: self.subject,
            text: self.text,
            html: self.html,
        }
    }
}
