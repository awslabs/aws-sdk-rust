// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An interest group, theme, or label within a list. Lists can have multiple topics.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Topic {
    /// <p>The name of the topic.</p>
    #[doc(hidden)]
    pub topic_name: std::option::Option<std::string::String>,
    /// <p>The name of the topic the contact will see.</p>
    #[doc(hidden)]
    pub display_name: std::option::Option<std::string::String>,
    /// <p>A description of what the topic is about, which the contact will see.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The default subscription status to be applied to a contact if the contact has not noted their preference for subscribing to a topic.</p>
    #[doc(hidden)]
    pub default_subscription_status: std::option::Option<crate::types::SubscriptionStatus>,
}
impl Topic {
    /// <p>The name of the topic.</p>
    pub fn topic_name(&self) -> std::option::Option<&str> {
        self.topic_name.as_deref()
    }
    /// <p>The name of the topic the contact will see.</p>
    pub fn display_name(&self) -> std::option::Option<&str> {
        self.display_name.as_deref()
    }
    /// <p>A description of what the topic is about, which the contact will see.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The default subscription status to be applied to a contact if the contact has not noted their preference for subscribing to a topic.</p>
    pub fn default_subscription_status(
        &self,
    ) -> std::option::Option<&crate::types::SubscriptionStatus> {
        self.default_subscription_status.as_ref()
    }
}
impl Topic {
    /// Creates a new builder-style object to manufacture [`Topic`](crate::types::Topic).
    pub fn builder() -> crate::types::builders::TopicBuilder {
        crate::types::builders::TopicBuilder::default()
    }
}

/// A builder for [`Topic`](crate::types::Topic).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TopicBuilder {
    pub(crate) topic_name: std::option::Option<std::string::String>,
    pub(crate) display_name: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) default_subscription_status: std::option::Option<crate::types::SubscriptionStatus>,
}
impl TopicBuilder {
    /// <p>The name of the topic.</p>
    pub fn topic_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.topic_name = Some(input.into());
        self
    }
    /// <p>The name of the topic.</p>
    pub fn set_topic_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.topic_name = input;
        self
    }
    /// <p>The name of the topic the contact will see.</p>
    pub fn display_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.display_name = Some(input.into());
        self
    }
    /// <p>The name of the topic the contact will see.</p>
    pub fn set_display_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.display_name = input;
        self
    }
    /// <p>A description of what the topic is about, which the contact will see.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>A description of what the topic is about, which the contact will see.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The default subscription status to be applied to a contact if the contact has not noted their preference for subscribing to a topic.</p>
    pub fn default_subscription_status(mut self, input: crate::types::SubscriptionStatus) -> Self {
        self.default_subscription_status = Some(input);
        self
    }
    /// <p>The default subscription status to be applied to a contact if the contact has not noted their preference for subscribing to a topic.</p>
    pub fn set_default_subscription_status(
        mut self,
        input: std::option::Option<crate::types::SubscriptionStatus>,
    ) -> Self {
        self.default_subscription_status = input;
        self
    }
    /// Consumes the builder and constructs a [`Topic`](crate::types::Topic).
    pub fn build(self) -> crate::types::Topic {
        crate::types::Topic {
            topic_name: self.topic_name,
            display_name: self.display_name,
            description: self.description,
            default_subscription_status: self.default_subscription_status,
        }
    }
}
