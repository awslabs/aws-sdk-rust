// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that contains the body of the message. You can specify a template message.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BulkEmailContent {
    /// <p>The template to use for the bulk email message.</p>
    #[doc(hidden)]
    pub template: std::option::Option<crate::types::Template>,
}
impl BulkEmailContent {
    /// <p>The template to use for the bulk email message.</p>
    pub fn template(&self) -> std::option::Option<&crate::types::Template> {
        self.template.as_ref()
    }
}
impl BulkEmailContent {
    /// Creates a new builder-style object to manufacture [`BulkEmailContent`](crate::types::BulkEmailContent).
    pub fn builder() -> crate::types::builders::BulkEmailContentBuilder {
        crate::types::builders::BulkEmailContentBuilder::default()
    }
}

/// A builder for [`BulkEmailContent`](crate::types::BulkEmailContent).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct BulkEmailContentBuilder {
    pub(crate) template: std::option::Option<crate::types::Template>,
}
impl BulkEmailContentBuilder {
    /// <p>The template to use for the bulk email message.</p>
    pub fn template(mut self, input: crate::types::Template) -> Self {
        self.template = Some(input);
        self
    }
    /// <p>The template to use for the bulk email message.</p>
    pub fn set_template(mut self, input: std::option::Option<crate::types::Template>) -> Self {
        self.template = input;
        self
    }
    /// Consumes the builder and constructs a [`BulkEmailContent`](crate::types::BulkEmailContent).
    pub fn build(self) -> crate::types::BulkEmailContent {
        crate::types::BulkEmailContent {
            template: self.template,
        }
    }
}
