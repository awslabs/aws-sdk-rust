// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `DeliveryEventType`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let deliveryeventtype = unimplemented!();
/// match deliveryeventtype {
///     DeliveryEventType::Complaint => { /* ... */ },
///     DeliveryEventType::Delivery => { /* ... */ },
///     DeliveryEventType::PermanentBounce => { /* ... */ },
///     DeliveryEventType::Send => { /* ... */ },
///     DeliveryEventType::TransientBounce => { /* ... */ },
///     DeliveryEventType::UndeterminedBounce => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `deliveryeventtype` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `DeliveryEventType::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `DeliveryEventType::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `DeliveryEventType::NewFeature` is defined.
/// Specifically, when `deliveryeventtype` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `DeliveryEventType::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
///
/// <p>The type of delivery events:</p>
/// <ul>
/// <li>
/// <p>
/// <code>SEND</code> - The send request was successful and SES will
/// attempt to deliver the message to the recipientâ€™s mail server. (If account-level
/// or global suppression is being used, SES will still count it as a send,
/// but delivery is suppressed.)</p>
/// </li>
/// <li>
/// <p>
/// <code>DELIVERY</code> - SES successfully delivered the email to the
/// recipient's mail server. Excludes deliveries to the mailbox simulator and
/// emails addressed to more than one recipient.</p>
/// </li>
/// <li>
/// <p>
/// <code>TRANSIENT_BOUNCE</code> - Feedback received for
/// delivery failures excluding issues with non-existent mailboxes. Excludes bounces from the
/// mailbox simulator, and those from emails addressed to more than one recipient.</p>
/// </li>
/// <li>
/// <p>
/// <code>PERMANENT_BOUNCE</code> - Feedback received for
/// emails sent to non-existent mailboxes. Excludes bounces from the mailbox simulator, those
/// originating from your account-level suppression list (if enabled), and those from emails
/// addressed to more than one recipient.</p>
/// </li>
/// <li>
/// <p>
/// <code>UNDETERMINED_BOUNCE</code> - SES was unable to determine the bounce reason.</p>
/// </li>
/// <li>
/// <p>
/// <code>COMPLAINT</code> - Complaint received for the email.
/// This excludes complaints from the mailbox simulator, those originating from
/// your account-level suppression list (if enabled), and those from emails addressed to more
/// than one recipient.</p>
/// </li>
/// </ul>
#[non_exhaustive]
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::Ord, ::std::cmp::PartialEq, ::std::cmp::PartialOrd, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub enum DeliveryEventType {
    #[allow(missing_docs)] // documentation missing in model
    Complaint,
    #[allow(missing_docs)] // documentation missing in model
    Delivery,
    #[allow(missing_docs)] // documentation missing in model
    PermanentBounce,
    #[allow(missing_docs)] // documentation missing in model
    Send,
    #[allow(missing_docs)] // documentation missing in model
    TransientBounce,
    #[allow(missing_docs)] // documentation missing in model
    UndeterminedBounce,
    /// `Unknown` contains new variants that have been added since this code was generated.
    #[deprecated(note = "Don't directly match on `Unknown`. See the docs on this enum for the correct way to handle unknown variants.")]
    Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue),
}
impl ::std::convert::From<&str> for DeliveryEventType {
    fn from(s: &str) -> Self {
        match s {
            "COMPLAINT" => DeliveryEventType::Complaint,
            "DELIVERY" => DeliveryEventType::Delivery,
            "PERMANENT_BOUNCE" => DeliveryEventType::PermanentBounce,
            "SEND" => DeliveryEventType::Send,
            "TRANSIENT_BOUNCE" => DeliveryEventType::TransientBounce,
            "UNDETERMINED_BOUNCE" => DeliveryEventType::UndeterminedBounce,
            other => DeliveryEventType::Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl ::std::str::FromStr for DeliveryEventType {
    type Err = ::std::convert::Infallible;

    fn from_str(s: &str) -> ::std::result::Result<Self, <Self as ::std::str::FromStr>::Err> {
        ::std::result::Result::Ok(DeliveryEventType::from(s))
    }
}
impl DeliveryEventType {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            DeliveryEventType::Complaint => "COMPLAINT",
            DeliveryEventType::Delivery => "DELIVERY",
            DeliveryEventType::PermanentBounce => "PERMANENT_BOUNCE",
            DeliveryEventType::Send => "SEND",
            DeliveryEventType::TransientBounce => "TRANSIENT_BOUNCE",
            DeliveryEventType::UndeterminedBounce => "UNDETERMINED_BOUNCE",
            DeliveryEventType::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "COMPLAINT",
            "DELIVERY",
            "PERMANENT_BOUNCE",
            "SEND",
            "TRANSIENT_BOUNCE",
            "UNDETERMINED_BOUNCE",
        ]
    }
}
impl ::std::convert::AsRef<str> for DeliveryEventType {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
impl DeliveryEventType {
    /// Parses the enum value while disallowing unknown variants.
    ///
    /// Unknown variants will result in an error.
    pub fn try_parse(value: &str) -> ::std::result::Result<Self, crate::error::UnknownVariantError> {
        match Self::from(value) {
            #[allow(deprecated)]
            Self::Unknown(_) => ::std::result::Result::Err(crate::error::UnknownVariantError::new(value)),
            known => Ok(known),
        }
    }
}
impl ::std::fmt::Display for DeliveryEventType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match self {
            DeliveryEventType::Complaint => write!(f, "COMPLAINT"),
            DeliveryEventType::Delivery => write!(f, "DELIVERY"),
            DeliveryEventType::PermanentBounce => write!(f, "PERMANENT_BOUNCE"),
            DeliveryEventType::Send => write!(f, "SEND"),
            DeliveryEventType::TransientBounce => write!(f, "TRANSIENT_BOUNCE"),
            DeliveryEventType::UndeterminedBounce => write!(f, "UNDETERMINED_BOUNCE"),
            DeliveryEventType::Unknown(value) => write!(f, "{value}"),
        }
    }
}
