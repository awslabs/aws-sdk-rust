// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about a dedicated IP address that is associated with your Amazon SES account.</p>
/// <p>To learn more about requesting dedicated IP addresses, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/dedicated-ip-case.html">Requesting and Relinquishing Dedicated IP Addresses</a> in the <i>Amazon SES Developer Guide</i>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DedicatedIp {
    /// <p>An IPv4 address.</p>
    #[doc(hidden)]
    pub ip: std::option::Option<std::string::String>,
    /// <p>The warm-up status of a dedicated IP address. The status can have one of the following values:</p>
    /// <ul>
    /// <li> <p> <code>IN_PROGRESS</code> – The IP address isn't ready to use because the dedicated IP warm-up process is ongoing.</p> </li>
    /// <li> <p> <code>DONE</code> – The dedicated IP warm-up process is complete, and the IP address is ready to use.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub warmup_status: std::option::Option<crate::types::WarmupStatus>,
    /// <p>Indicates how complete the dedicated IP warm-up process is. When this value equals 1, the address has completed the warm-up process and is ready for use.</p>
    #[doc(hidden)]
    pub warmup_percentage: std::option::Option<i32>,
    /// <p>The name of the dedicated IP pool that the IP address is associated with.</p>
    #[doc(hidden)]
    pub pool_name: std::option::Option<std::string::String>,
}
impl DedicatedIp {
    /// <p>An IPv4 address.</p>
    pub fn ip(&self) -> std::option::Option<&str> {
        self.ip.as_deref()
    }
    /// <p>The warm-up status of a dedicated IP address. The status can have one of the following values:</p>
    /// <ul>
    /// <li> <p> <code>IN_PROGRESS</code> – The IP address isn't ready to use because the dedicated IP warm-up process is ongoing.</p> </li>
    /// <li> <p> <code>DONE</code> – The dedicated IP warm-up process is complete, and the IP address is ready to use.</p> </li>
    /// </ul>
    pub fn warmup_status(&self) -> std::option::Option<&crate::types::WarmupStatus> {
        self.warmup_status.as_ref()
    }
    /// <p>Indicates how complete the dedicated IP warm-up process is. When this value equals 1, the address has completed the warm-up process and is ready for use.</p>
    pub fn warmup_percentage(&self) -> std::option::Option<i32> {
        self.warmup_percentage
    }
    /// <p>The name of the dedicated IP pool that the IP address is associated with.</p>
    pub fn pool_name(&self) -> std::option::Option<&str> {
        self.pool_name.as_deref()
    }
}
impl DedicatedIp {
    /// Creates a new builder-style object to manufacture [`DedicatedIp`](crate::types::DedicatedIp).
    pub fn builder() -> crate::types::builders::DedicatedIpBuilder {
        crate::types::builders::DedicatedIpBuilder::default()
    }
}

/// A builder for [`DedicatedIp`](crate::types::DedicatedIp).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DedicatedIpBuilder {
    pub(crate) ip: std::option::Option<std::string::String>,
    pub(crate) warmup_status: std::option::Option<crate::types::WarmupStatus>,
    pub(crate) warmup_percentage: std::option::Option<i32>,
    pub(crate) pool_name: std::option::Option<std::string::String>,
}
impl DedicatedIpBuilder {
    /// <p>An IPv4 address.</p>
    pub fn ip(mut self, input: impl Into<std::string::String>) -> Self {
        self.ip = Some(input.into());
        self
    }
    /// <p>An IPv4 address.</p>
    pub fn set_ip(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.ip = input;
        self
    }
    /// <p>The warm-up status of a dedicated IP address. The status can have one of the following values:</p>
    /// <ul>
    /// <li> <p> <code>IN_PROGRESS</code> – The IP address isn't ready to use because the dedicated IP warm-up process is ongoing.</p> </li>
    /// <li> <p> <code>DONE</code> – The dedicated IP warm-up process is complete, and the IP address is ready to use.</p> </li>
    /// </ul>
    pub fn warmup_status(mut self, input: crate::types::WarmupStatus) -> Self {
        self.warmup_status = Some(input);
        self
    }
    /// <p>The warm-up status of a dedicated IP address. The status can have one of the following values:</p>
    /// <ul>
    /// <li> <p> <code>IN_PROGRESS</code> – The IP address isn't ready to use because the dedicated IP warm-up process is ongoing.</p> </li>
    /// <li> <p> <code>DONE</code> – The dedicated IP warm-up process is complete, and the IP address is ready to use.</p> </li>
    /// </ul>
    pub fn set_warmup_status(
        mut self,
        input: std::option::Option<crate::types::WarmupStatus>,
    ) -> Self {
        self.warmup_status = input;
        self
    }
    /// <p>Indicates how complete the dedicated IP warm-up process is. When this value equals 1, the address has completed the warm-up process and is ready for use.</p>
    pub fn warmup_percentage(mut self, input: i32) -> Self {
        self.warmup_percentage = Some(input);
        self
    }
    /// <p>Indicates how complete the dedicated IP warm-up process is. When this value equals 1, the address has completed the warm-up process and is ready for use.</p>
    pub fn set_warmup_percentage(mut self, input: std::option::Option<i32>) -> Self {
        self.warmup_percentage = input;
        self
    }
    /// <p>The name of the dedicated IP pool that the IP address is associated with.</p>
    pub fn pool_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.pool_name = Some(input.into());
        self
    }
    /// <p>The name of the dedicated IP pool that the IP address is associated with.</p>
    pub fn set_pool_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.pool_name = input;
        self
    }
    /// Consumes the builder and constructs a [`DedicatedIp`](crate::types::DedicatedIp).
    pub fn build(self) -> crate::types::DedicatedIp {
        crate::types::DedicatedIp {
            ip: self.ip,
            warmup_status: self.warmup_status,
            warmup_percentage: self.warmup_percentage,
            pool_name: self.pool_name,
        }
    }
}
