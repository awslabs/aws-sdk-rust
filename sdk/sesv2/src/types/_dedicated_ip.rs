// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about a dedicated IP address that is associated with your Amazon SES account.</p>
/// <p>To learn more about requesting dedicated IP addresses, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/dedicated-ip-case.html">Requesting and Relinquishing Dedicated IP Addresses</a> in the <i>Amazon SES Developer Guide</i>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DedicatedIp {
    /// <p>An IPv4 address.</p>
    pub ip: ::std::string::String,
    /// <p>The warm-up status of a dedicated IP address. The status can have one of the following values:</p>
    /// <ul>
    /// <li>
    /// <p><code>IN_PROGRESS</code> – The IP address isn't ready to use because the dedicated IP warm-up process is ongoing.</p></li>
    /// <li>
    /// <p><code>DONE</code> – The dedicated IP warm-up process is complete, and the IP address is ready to use.</p></li>
    /// <li>
    /// <p><code>NOT_APPLICABLE</code> – The warm-up status doesn't apply to this IP address. This status is used for IP addresses in managed dedicated IP pools, where Amazon SES automatically handles the warm-up process.</p></li>
    /// </ul>
    pub warmup_status: crate::types::WarmupStatus,
    /// <p>Indicates the progress of your dedicated IP warm-up:</p>
    /// <ul>
    /// <li>
    /// <p><code>0-100</code> – For standard dedicated IP addresses, this shows the warm-up completion percentage. A value of 100 means the IP address is fully warmed up and ready for use.</p></li>
    /// <li>
    /// <p><code>-1</code> – Appears for IP addresses in managed dedicated pools where Amazon SES automatically handles the warm-up process, making the percentage not applicable.</p></li>
    /// </ul>
    pub warmup_percentage: i32,
    /// <p>The name of the dedicated IP pool that the IP address is associated with.</p>
    pub pool_name: ::std::option::Option<::std::string::String>,
}
impl DedicatedIp {
    /// <p>An IPv4 address.</p>
    pub fn ip(&self) -> &str {
        use std::ops::Deref;
        self.ip.deref()
    }
    /// <p>The warm-up status of a dedicated IP address. The status can have one of the following values:</p>
    /// <ul>
    /// <li>
    /// <p><code>IN_PROGRESS</code> – The IP address isn't ready to use because the dedicated IP warm-up process is ongoing.</p></li>
    /// <li>
    /// <p><code>DONE</code> – The dedicated IP warm-up process is complete, and the IP address is ready to use.</p></li>
    /// <li>
    /// <p><code>NOT_APPLICABLE</code> – The warm-up status doesn't apply to this IP address. This status is used for IP addresses in managed dedicated IP pools, where Amazon SES automatically handles the warm-up process.</p></li>
    /// </ul>
    pub fn warmup_status(&self) -> &crate::types::WarmupStatus {
        &self.warmup_status
    }
    /// <p>Indicates the progress of your dedicated IP warm-up:</p>
    /// <ul>
    /// <li>
    /// <p><code>0-100</code> – For standard dedicated IP addresses, this shows the warm-up completion percentage. A value of 100 means the IP address is fully warmed up and ready for use.</p></li>
    /// <li>
    /// <p><code>-1</code> – Appears for IP addresses in managed dedicated pools where Amazon SES automatically handles the warm-up process, making the percentage not applicable.</p></li>
    /// </ul>
    pub fn warmup_percentage(&self) -> i32 {
        self.warmup_percentage
    }
    /// <p>The name of the dedicated IP pool that the IP address is associated with.</p>
    pub fn pool_name(&self) -> ::std::option::Option<&str> {
        self.pool_name.as_deref()
    }
}
impl DedicatedIp {
    /// Creates a new builder-style object to manufacture [`DedicatedIp`](crate::types::DedicatedIp).
    pub fn builder() -> crate::types::builders::DedicatedIpBuilder {
        crate::types::builders::DedicatedIpBuilder::default()
    }
}

/// A builder for [`DedicatedIp`](crate::types::DedicatedIp).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DedicatedIpBuilder {
    pub(crate) ip: ::std::option::Option<::std::string::String>,
    pub(crate) warmup_status: ::std::option::Option<crate::types::WarmupStatus>,
    pub(crate) warmup_percentage: ::std::option::Option<i32>,
    pub(crate) pool_name: ::std::option::Option<::std::string::String>,
}
impl DedicatedIpBuilder {
    /// <p>An IPv4 address.</p>
    /// This field is required.
    pub fn ip(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ip = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An IPv4 address.</p>
    pub fn set_ip(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ip = input;
        self
    }
    /// <p>An IPv4 address.</p>
    pub fn get_ip(&self) -> &::std::option::Option<::std::string::String> {
        &self.ip
    }
    /// <p>The warm-up status of a dedicated IP address. The status can have one of the following values:</p>
    /// <ul>
    /// <li>
    /// <p><code>IN_PROGRESS</code> – The IP address isn't ready to use because the dedicated IP warm-up process is ongoing.</p></li>
    /// <li>
    /// <p><code>DONE</code> – The dedicated IP warm-up process is complete, and the IP address is ready to use.</p></li>
    /// <li>
    /// <p><code>NOT_APPLICABLE</code> – The warm-up status doesn't apply to this IP address. This status is used for IP addresses in managed dedicated IP pools, where Amazon SES automatically handles the warm-up process.</p></li>
    /// </ul>
    /// This field is required.
    pub fn warmup_status(mut self, input: crate::types::WarmupStatus) -> Self {
        self.warmup_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The warm-up status of a dedicated IP address. The status can have one of the following values:</p>
    /// <ul>
    /// <li>
    /// <p><code>IN_PROGRESS</code> – The IP address isn't ready to use because the dedicated IP warm-up process is ongoing.</p></li>
    /// <li>
    /// <p><code>DONE</code> – The dedicated IP warm-up process is complete, and the IP address is ready to use.</p></li>
    /// <li>
    /// <p><code>NOT_APPLICABLE</code> – The warm-up status doesn't apply to this IP address. This status is used for IP addresses in managed dedicated IP pools, where Amazon SES automatically handles the warm-up process.</p></li>
    /// </ul>
    pub fn set_warmup_status(mut self, input: ::std::option::Option<crate::types::WarmupStatus>) -> Self {
        self.warmup_status = input;
        self
    }
    /// <p>The warm-up status of a dedicated IP address. The status can have one of the following values:</p>
    /// <ul>
    /// <li>
    /// <p><code>IN_PROGRESS</code> – The IP address isn't ready to use because the dedicated IP warm-up process is ongoing.</p></li>
    /// <li>
    /// <p><code>DONE</code> – The dedicated IP warm-up process is complete, and the IP address is ready to use.</p></li>
    /// <li>
    /// <p><code>NOT_APPLICABLE</code> – The warm-up status doesn't apply to this IP address. This status is used for IP addresses in managed dedicated IP pools, where Amazon SES automatically handles the warm-up process.</p></li>
    /// </ul>
    pub fn get_warmup_status(&self) -> &::std::option::Option<crate::types::WarmupStatus> {
        &self.warmup_status
    }
    /// <p>Indicates the progress of your dedicated IP warm-up:</p>
    /// <ul>
    /// <li>
    /// <p><code>0-100</code> – For standard dedicated IP addresses, this shows the warm-up completion percentage. A value of 100 means the IP address is fully warmed up and ready for use.</p></li>
    /// <li>
    /// <p><code>-1</code> – Appears for IP addresses in managed dedicated pools where Amazon SES automatically handles the warm-up process, making the percentage not applicable.</p></li>
    /// </ul>
    /// This field is required.
    pub fn warmup_percentage(mut self, input: i32) -> Self {
        self.warmup_percentage = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates the progress of your dedicated IP warm-up:</p>
    /// <ul>
    /// <li>
    /// <p><code>0-100</code> – For standard dedicated IP addresses, this shows the warm-up completion percentage. A value of 100 means the IP address is fully warmed up and ready for use.</p></li>
    /// <li>
    /// <p><code>-1</code> – Appears for IP addresses in managed dedicated pools where Amazon SES automatically handles the warm-up process, making the percentage not applicable.</p></li>
    /// </ul>
    pub fn set_warmup_percentage(mut self, input: ::std::option::Option<i32>) -> Self {
        self.warmup_percentage = input;
        self
    }
    /// <p>Indicates the progress of your dedicated IP warm-up:</p>
    /// <ul>
    /// <li>
    /// <p><code>0-100</code> – For standard dedicated IP addresses, this shows the warm-up completion percentage. A value of 100 means the IP address is fully warmed up and ready for use.</p></li>
    /// <li>
    /// <p><code>-1</code> – Appears for IP addresses in managed dedicated pools where Amazon SES automatically handles the warm-up process, making the percentage not applicable.</p></li>
    /// </ul>
    pub fn get_warmup_percentage(&self) -> &::std::option::Option<i32> {
        &self.warmup_percentage
    }
    /// <p>The name of the dedicated IP pool that the IP address is associated with.</p>
    pub fn pool_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.pool_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the dedicated IP pool that the IP address is associated with.</p>
    pub fn set_pool_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.pool_name = input;
        self
    }
    /// <p>The name of the dedicated IP pool that the IP address is associated with.</p>
    pub fn get_pool_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.pool_name
    }
    /// Consumes the builder and constructs a [`DedicatedIp`](crate::types::DedicatedIp).
    /// This method will fail if any of the following fields are not set:
    /// - [`ip`](crate::types::builders::DedicatedIpBuilder::ip)
    /// - [`warmup_status`](crate::types::builders::DedicatedIpBuilder::warmup_status)
    /// - [`warmup_percentage`](crate::types::builders::DedicatedIpBuilder::warmup_percentage)
    pub fn build(self) -> ::std::result::Result<crate::types::DedicatedIp, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::DedicatedIp {
            ip: self.ip.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "ip",
                    "ip was not specified but it is required when building DedicatedIp",
                )
            })?,
            warmup_status: self.warmup_status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "warmup_status",
                    "warmup_status was not specified but it is required when building DedicatedIp",
                )
            })?,
            warmup_percentage: self.warmup_percentage.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "warmup_percentage",
                    "warmup_percentage was not specified but it is required when building DedicatedIp",
                )
            })?,
            pool_name: self.pool_name,
        })
    }
}
