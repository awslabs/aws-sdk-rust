// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about a dedicated IP pool.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DedicatedIpPool {
    /// <p>The name of the dedicated IP pool.</p>
    pub pool_name: ::std::string::String,
    /// <p>The type of the dedicated IP pool.</p>
    /// <ul>
    /// <li> <p> <code>STANDARD</code> – A dedicated IP pool where you can control which IPs are part of the pool.</p> </li>
    /// <li> <p> <code>MANAGED</code> – A dedicated IP pool where the reputation and number of IPs are automatically managed by Amazon SES.</p> </li>
    /// </ul>
    pub scaling_mode: crate::types::ScalingMode,
}
impl DedicatedIpPool {
    /// <p>The name of the dedicated IP pool.</p>
    pub fn pool_name(&self) -> &str {
        use std::ops::Deref;
        self.pool_name.deref()
    }
    /// <p>The type of the dedicated IP pool.</p>
    /// <ul>
    /// <li> <p> <code>STANDARD</code> – A dedicated IP pool where you can control which IPs are part of the pool.</p> </li>
    /// <li> <p> <code>MANAGED</code> – A dedicated IP pool where the reputation and number of IPs are automatically managed by Amazon SES.</p> </li>
    /// </ul>
    pub fn scaling_mode(&self) -> &crate::types::ScalingMode {
        &self.scaling_mode
    }
}
impl DedicatedIpPool {
    /// Creates a new builder-style object to manufacture [`DedicatedIpPool`](crate::types::DedicatedIpPool).
    pub fn builder() -> crate::types::builders::DedicatedIpPoolBuilder {
        crate::types::builders::DedicatedIpPoolBuilder::default()
    }
}

/// A builder for [`DedicatedIpPool`](crate::types::DedicatedIpPool).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DedicatedIpPoolBuilder {
    pub(crate) pool_name: ::std::option::Option<::std::string::String>,
    pub(crate) scaling_mode: ::std::option::Option<crate::types::ScalingMode>,
}
impl DedicatedIpPoolBuilder {
    /// <p>The name of the dedicated IP pool.</p>
    /// This field is required.
    pub fn pool_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.pool_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the dedicated IP pool.</p>
    pub fn set_pool_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.pool_name = input;
        self
    }
    /// <p>The name of the dedicated IP pool.</p>
    pub fn get_pool_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.pool_name
    }
    /// <p>The type of the dedicated IP pool.</p>
    /// <ul>
    /// <li> <p> <code>STANDARD</code> – A dedicated IP pool where you can control which IPs are part of the pool.</p> </li>
    /// <li> <p> <code>MANAGED</code> – A dedicated IP pool where the reputation and number of IPs are automatically managed by Amazon SES.</p> </li>
    /// </ul>
    /// This field is required.
    pub fn scaling_mode(mut self, input: crate::types::ScalingMode) -> Self {
        self.scaling_mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the dedicated IP pool.</p>
    /// <ul>
    /// <li> <p> <code>STANDARD</code> – A dedicated IP pool where you can control which IPs are part of the pool.</p> </li>
    /// <li> <p> <code>MANAGED</code> – A dedicated IP pool where the reputation and number of IPs are automatically managed by Amazon SES.</p> </li>
    /// </ul>
    pub fn set_scaling_mode(mut self, input: ::std::option::Option<crate::types::ScalingMode>) -> Self {
        self.scaling_mode = input;
        self
    }
    /// <p>The type of the dedicated IP pool.</p>
    /// <ul>
    /// <li> <p> <code>STANDARD</code> – A dedicated IP pool where you can control which IPs are part of the pool.</p> </li>
    /// <li> <p> <code>MANAGED</code> – A dedicated IP pool where the reputation and number of IPs are automatically managed by Amazon SES.</p> </li>
    /// </ul>
    pub fn get_scaling_mode(&self) -> &::std::option::Option<crate::types::ScalingMode> {
        &self.scaling_mode
    }
    /// Consumes the builder and constructs a [`DedicatedIpPool`](crate::types::DedicatedIpPool).
    /// This method will fail if any of the following fields are not set:
    /// - [`pool_name`](crate::types::builders::DedicatedIpPoolBuilder::pool_name)
    /// - [`scaling_mode`](crate::types::builders::DedicatedIpPoolBuilder::scaling_mode)
    pub fn build(self) -> ::std::result::Result<crate::types::DedicatedIpPool, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::DedicatedIpPool {
            pool_name: self.pool_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "pool_name",
                    "pool_name was not specified but it is required when building DedicatedIpPool",
                )
            })?,
            scaling_mode: self.scaling_mode.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "scaling_mode",
                    "scaling_mode was not specified but it is required when building DedicatedIpPool",
                )
            })?,
        })
    }
}
