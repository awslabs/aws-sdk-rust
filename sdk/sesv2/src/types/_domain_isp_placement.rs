// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that contains inbox placement data for email sent from one of your email domains to a specific email provider.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DomainIspPlacement {
    /// <p>The name of the email provider that the inbox placement data applies to.</p>
    #[doc(hidden)]
    pub isp_name: std::option::Option<std::string::String>,
    /// <p>The total number of messages that were sent from the selected domain to the specified email provider that arrived in recipients' inboxes.</p>
    #[doc(hidden)]
    pub inbox_raw_count: std::option::Option<i64>,
    /// <p>The total number of messages that were sent from the selected domain to the specified email provider that arrived in recipients' spam or junk mail folders.</p>
    #[doc(hidden)]
    pub spam_raw_count: std::option::Option<i64>,
    /// <p>The percentage of messages that were sent from the selected domain to the specified email provider that arrived in recipients' inboxes.</p>
    #[doc(hidden)]
    pub inbox_percentage: std::option::Option<f64>,
    /// <p>The percentage of messages that were sent from the selected domain to the specified email provider that arrived in recipients' spam or junk mail folders.</p>
    #[doc(hidden)]
    pub spam_percentage: std::option::Option<f64>,
}
impl DomainIspPlacement {
    /// <p>The name of the email provider that the inbox placement data applies to.</p>
    pub fn isp_name(&self) -> std::option::Option<&str> {
        self.isp_name.as_deref()
    }
    /// <p>The total number of messages that were sent from the selected domain to the specified email provider that arrived in recipients' inboxes.</p>
    pub fn inbox_raw_count(&self) -> std::option::Option<i64> {
        self.inbox_raw_count
    }
    /// <p>The total number of messages that were sent from the selected domain to the specified email provider that arrived in recipients' spam or junk mail folders.</p>
    pub fn spam_raw_count(&self) -> std::option::Option<i64> {
        self.spam_raw_count
    }
    /// <p>The percentage of messages that were sent from the selected domain to the specified email provider that arrived in recipients' inboxes.</p>
    pub fn inbox_percentage(&self) -> std::option::Option<f64> {
        self.inbox_percentage
    }
    /// <p>The percentage of messages that were sent from the selected domain to the specified email provider that arrived in recipients' spam or junk mail folders.</p>
    pub fn spam_percentage(&self) -> std::option::Option<f64> {
        self.spam_percentage
    }
}
impl DomainIspPlacement {
    /// Creates a new builder-style object to manufacture [`DomainIspPlacement`](crate::types::DomainIspPlacement).
    pub fn builder() -> crate::types::builders::DomainIspPlacementBuilder {
        crate::types::builders::DomainIspPlacementBuilder::default()
    }
}

/// A builder for [`DomainIspPlacement`](crate::types::DomainIspPlacement).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DomainIspPlacementBuilder {
    pub(crate) isp_name: std::option::Option<std::string::String>,
    pub(crate) inbox_raw_count: std::option::Option<i64>,
    pub(crate) spam_raw_count: std::option::Option<i64>,
    pub(crate) inbox_percentage: std::option::Option<f64>,
    pub(crate) spam_percentage: std::option::Option<f64>,
}
impl DomainIspPlacementBuilder {
    /// <p>The name of the email provider that the inbox placement data applies to.</p>
    pub fn isp_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.isp_name = Some(input.into());
        self
    }
    /// <p>The name of the email provider that the inbox placement data applies to.</p>
    pub fn set_isp_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.isp_name = input;
        self
    }
    /// <p>The total number of messages that were sent from the selected domain to the specified email provider that arrived in recipients' inboxes.</p>
    pub fn inbox_raw_count(mut self, input: i64) -> Self {
        self.inbox_raw_count = Some(input);
        self
    }
    /// <p>The total number of messages that were sent from the selected domain to the specified email provider that arrived in recipients' inboxes.</p>
    pub fn set_inbox_raw_count(mut self, input: std::option::Option<i64>) -> Self {
        self.inbox_raw_count = input;
        self
    }
    /// <p>The total number of messages that were sent from the selected domain to the specified email provider that arrived in recipients' spam or junk mail folders.</p>
    pub fn spam_raw_count(mut self, input: i64) -> Self {
        self.spam_raw_count = Some(input);
        self
    }
    /// <p>The total number of messages that were sent from the selected domain to the specified email provider that arrived in recipients' spam or junk mail folders.</p>
    pub fn set_spam_raw_count(mut self, input: std::option::Option<i64>) -> Self {
        self.spam_raw_count = input;
        self
    }
    /// <p>The percentage of messages that were sent from the selected domain to the specified email provider that arrived in recipients' inboxes.</p>
    pub fn inbox_percentage(mut self, input: f64) -> Self {
        self.inbox_percentage = Some(input);
        self
    }
    /// <p>The percentage of messages that were sent from the selected domain to the specified email provider that arrived in recipients' inboxes.</p>
    pub fn set_inbox_percentage(mut self, input: std::option::Option<f64>) -> Self {
        self.inbox_percentage = input;
        self
    }
    /// <p>The percentage of messages that were sent from the selected domain to the specified email provider that arrived in recipients' spam or junk mail folders.</p>
    pub fn spam_percentage(mut self, input: f64) -> Self {
        self.spam_percentage = Some(input);
        self
    }
    /// <p>The percentage of messages that were sent from the selected domain to the specified email provider that arrived in recipients' spam or junk mail folders.</p>
    pub fn set_spam_percentage(mut self, input: std::option::Option<f64>) -> Self {
        self.spam_percentage = input;
        self
    }
    /// Consumes the builder and constructs a [`DomainIspPlacement`](crate::types::DomainIspPlacement).
    pub fn build(self) -> crate::types::DomainIspPlacement {
        crate::types::DomainIspPlacement {
            isp_name: self.isp_name,
            inbox_raw_count: self.inbox_raw_count,
            spam_raw_count: self.spam_raw_count,
            inbox_percentage: self.inbox_percentage,
            spam_percentage: self.spam_percentage,
        }
    }
}
