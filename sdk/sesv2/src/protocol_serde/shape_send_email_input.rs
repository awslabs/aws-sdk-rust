// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_send_email_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::send_email::SendEmailInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.configuration_set_name {
        object.key("ConfigurationSetName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.content {
        #[allow(unused_mut)]
        let mut object_3 = object.key("Content").start_object();
        crate::protocol_serde::shape_email_content::ser_email_content(&mut object_3, var_2)?;
        object_3.finish();
    }
    if let Some(var_4) = &input.destination {
        #[allow(unused_mut)]
        let mut object_5 = object.key("Destination").start_object();
        crate::protocol_serde::shape_destination::ser_destination(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.email_tags {
        let mut array_7 = object.key("EmailTags").start_array();
        for item_8 in var_6 {
            {
                #[allow(unused_mut)]
                let mut object_9 = array_7.value().start_object();
                crate::protocol_serde::shape_message_tag::ser_message_tag(&mut object_9, item_8)?;
                object_9.finish();
            }
        }
        array_7.finish();
    }
    if let Some(var_10) = &input.feedback_forwarding_email_address {
        object
            .key("FeedbackForwardingEmailAddress")
            .string(var_10.as_str());
    }
    if let Some(var_11) = &input.feedback_forwarding_email_address_identity_arn {
        object
            .key("FeedbackForwardingEmailAddressIdentityArn")
            .string(var_11.as_str());
    }
    if let Some(var_12) = &input.from_email_address {
        object.key("FromEmailAddress").string(var_12.as_str());
    }
    if let Some(var_13) = &input.from_email_address_identity_arn {
        object
            .key("FromEmailAddressIdentityArn")
            .string(var_13.as_str());
    }
    if let Some(var_14) = &input.list_management_options {
        #[allow(unused_mut)]
        let mut object_15 = object.key("ListManagementOptions").start_object();
        crate::protocol_serde::shape_list_management_options::ser_list_management_options(
            &mut object_15,
            var_14,
        )?;
        object_15.finish();
    }
    if let Some(var_16) = &input.reply_to_addresses {
        let mut array_17 = object.key("ReplyToAddresses").start_array();
        for item_18 in var_16 {
            {
                array_17.value().string(item_18.as_str());
            }
        }
        array_17.finish();
    }
    Ok(())
}
