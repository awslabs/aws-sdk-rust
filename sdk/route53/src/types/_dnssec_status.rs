// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A string repesenting the status of DNSSEC signing.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DnssecStatus {
    /// <p>A string that represents the current hosted zone signing status.</p>
    /// <p>Status can have one of the following values:</p>
    /// <dl>
    /// <dt>
    /// SIGNING
    /// </dt>
    /// <dd>
    /// <p>DNSSEC signing is enabled for the hosted zone.</p>
    /// </dd>
    /// <dt>
    /// NOT_SIGNING
    /// </dt>
    /// <dd>
    /// <p>DNSSEC signing is not enabled for the hosted zone.</p>
    /// </dd>
    /// <dt>
    /// DELETING
    /// </dt>
    /// <dd>
    /// <p>DNSSEC signing is in the process of being removed for the hosted zone.</p>
    /// </dd>
    /// <dt>
    /// ACTION_NEEDED
    /// </dt>
    /// <dd>
    /// <p>There is a problem with signing in the hosted zone that requires you to take action to resolve. For example, the customer managed key might have been deleted, or the permissions for the customer managed key might have been changed.</p>
    /// </dd>
    /// <dt>
    /// INTERNAL_FAILURE
    /// </dt>
    /// <dd>
    /// <p>There was an error during a request. Before you can continue to work with DNSSEC signing, including with key-signing keys (KSKs), you must correct the problem by enabling or disabling DNSSEC signing for the hosted zone.</p>
    /// </dd>
    /// </dl>
    #[doc(hidden)]
    pub serve_signature: std::option::Option<std::string::String>,
    /// <p>The status message provided for the following DNSSEC signing status: <code>INTERNAL_FAILURE</code>. The status message includes information about what the problem might be and steps that you can take to correct the issue.</p>
    #[doc(hidden)]
    pub status_message: std::option::Option<std::string::String>,
}
impl DnssecStatus {
    /// <p>A string that represents the current hosted zone signing status.</p>
    /// <p>Status can have one of the following values:</p>
    /// <dl>
    /// <dt>
    /// SIGNING
    /// </dt>
    /// <dd>
    /// <p>DNSSEC signing is enabled for the hosted zone.</p>
    /// </dd>
    /// <dt>
    /// NOT_SIGNING
    /// </dt>
    /// <dd>
    /// <p>DNSSEC signing is not enabled for the hosted zone.</p>
    /// </dd>
    /// <dt>
    /// DELETING
    /// </dt>
    /// <dd>
    /// <p>DNSSEC signing is in the process of being removed for the hosted zone.</p>
    /// </dd>
    /// <dt>
    /// ACTION_NEEDED
    /// </dt>
    /// <dd>
    /// <p>There is a problem with signing in the hosted zone that requires you to take action to resolve. For example, the customer managed key might have been deleted, or the permissions for the customer managed key might have been changed.</p>
    /// </dd>
    /// <dt>
    /// INTERNAL_FAILURE
    /// </dt>
    /// <dd>
    /// <p>There was an error during a request. Before you can continue to work with DNSSEC signing, including with key-signing keys (KSKs), you must correct the problem by enabling or disabling DNSSEC signing for the hosted zone.</p>
    /// </dd>
    /// </dl>
    pub fn serve_signature(&self) -> std::option::Option<&str> {
        self.serve_signature.as_deref()
    }
    /// <p>The status message provided for the following DNSSEC signing status: <code>INTERNAL_FAILURE</code>. The status message includes information about what the problem might be and steps that you can take to correct the issue.</p>
    pub fn status_message(&self) -> std::option::Option<&str> {
        self.status_message.as_deref()
    }
}
impl DnssecStatus {
    /// Creates a new builder-style object to manufacture [`DnssecStatus`](crate::types::DnssecStatus).
    pub fn builder() -> crate::types::builders::DnssecStatusBuilder {
        crate::types::builders::DnssecStatusBuilder::default()
    }
}

/// A builder for [`DnssecStatus`](crate::types::DnssecStatus).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DnssecStatusBuilder {
    pub(crate) serve_signature: std::option::Option<std::string::String>,
    pub(crate) status_message: std::option::Option<std::string::String>,
}
impl DnssecStatusBuilder {
    /// <p>A string that represents the current hosted zone signing status.</p>
    /// <p>Status can have one of the following values:</p>
    /// <dl>
    /// <dt>
    /// SIGNING
    /// </dt>
    /// <dd>
    /// <p>DNSSEC signing is enabled for the hosted zone.</p>
    /// </dd>
    /// <dt>
    /// NOT_SIGNING
    /// </dt>
    /// <dd>
    /// <p>DNSSEC signing is not enabled for the hosted zone.</p>
    /// </dd>
    /// <dt>
    /// DELETING
    /// </dt>
    /// <dd>
    /// <p>DNSSEC signing is in the process of being removed for the hosted zone.</p>
    /// </dd>
    /// <dt>
    /// ACTION_NEEDED
    /// </dt>
    /// <dd>
    /// <p>There is a problem with signing in the hosted zone that requires you to take action to resolve. For example, the customer managed key might have been deleted, or the permissions for the customer managed key might have been changed.</p>
    /// </dd>
    /// <dt>
    /// INTERNAL_FAILURE
    /// </dt>
    /// <dd>
    /// <p>There was an error during a request. Before you can continue to work with DNSSEC signing, including with key-signing keys (KSKs), you must correct the problem by enabling or disabling DNSSEC signing for the hosted zone.</p>
    /// </dd>
    /// </dl>
    pub fn serve_signature(mut self, input: impl Into<std::string::String>) -> Self {
        self.serve_signature = Some(input.into());
        self
    }
    /// <p>A string that represents the current hosted zone signing status.</p>
    /// <p>Status can have one of the following values:</p>
    /// <dl>
    /// <dt>
    /// SIGNING
    /// </dt>
    /// <dd>
    /// <p>DNSSEC signing is enabled for the hosted zone.</p>
    /// </dd>
    /// <dt>
    /// NOT_SIGNING
    /// </dt>
    /// <dd>
    /// <p>DNSSEC signing is not enabled for the hosted zone.</p>
    /// </dd>
    /// <dt>
    /// DELETING
    /// </dt>
    /// <dd>
    /// <p>DNSSEC signing is in the process of being removed for the hosted zone.</p>
    /// </dd>
    /// <dt>
    /// ACTION_NEEDED
    /// </dt>
    /// <dd>
    /// <p>There is a problem with signing in the hosted zone that requires you to take action to resolve. For example, the customer managed key might have been deleted, or the permissions for the customer managed key might have been changed.</p>
    /// </dd>
    /// <dt>
    /// INTERNAL_FAILURE
    /// </dt>
    /// <dd>
    /// <p>There was an error during a request. Before you can continue to work with DNSSEC signing, including with key-signing keys (KSKs), you must correct the problem by enabling or disabling DNSSEC signing for the hosted zone.</p>
    /// </dd>
    /// </dl>
    pub fn set_serve_signature(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.serve_signature = input;
        self
    }
    /// <p>The status message provided for the following DNSSEC signing status: <code>INTERNAL_FAILURE</code>. The status message includes information about what the problem might be and steps that you can take to correct the issue.</p>
    pub fn status_message(mut self, input: impl Into<std::string::String>) -> Self {
        self.status_message = Some(input.into());
        self
    }
    /// <p>The status message provided for the following DNSSEC signing status: <code>INTERNAL_FAILURE</code>. The status message includes information about what the problem might be and steps that you can take to correct the issue.</p>
    pub fn set_status_message(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.status_message = input;
        self
    }
    /// Consumes the builder and constructs a [`DnssecStatus`](crate::types::DnssecStatus).
    pub fn build(self) -> crate::types::DnssecStatus {
        crate::types::DnssecStatus {
            serve_signature: self.serve_signature,
            status_message: self.status_message,
        }
    }
}
