// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A complex type that contains information about the CIDR collection change.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CidrCollectionChange {
    /// <p>Name of the location that is associated with the CIDR collection.</p>
    pub location_name: ::std::string::String,
    /// <p>CIDR collection change action. </p>
    pub action: crate::types::CidrCollectionChangeAction,
    /// <p>List of CIDR blocks.</p>
    pub cidr_list: ::std::vec::Vec<::std::string::String>,
}
impl CidrCollectionChange {
    /// <p>Name of the location that is associated with the CIDR collection.</p>
    pub fn location_name(&self) -> &str {
        use std::ops::Deref;
        self.location_name.deref()
    }
    /// <p>CIDR collection change action. </p>
    pub fn action(&self) -> &crate::types::CidrCollectionChangeAction {
        &self.action
    }
    /// <p>List of CIDR blocks.</p>
    pub fn cidr_list(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.cidr_list.deref()
    }
}
impl CidrCollectionChange {
    /// Creates a new builder-style object to manufacture [`CidrCollectionChange`](crate::types::CidrCollectionChange).
    pub fn builder() -> crate::types::builders::CidrCollectionChangeBuilder {
        crate::types::builders::CidrCollectionChangeBuilder::default()
    }
}

/// A builder for [`CidrCollectionChange`](crate::types::CidrCollectionChange).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CidrCollectionChangeBuilder {
    pub(crate) location_name: ::std::option::Option<::std::string::String>,
    pub(crate) action: ::std::option::Option<crate::types::CidrCollectionChangeAction>,
    pub(crate) cidr_list: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl CidrCollectionChangeBuilder {
    /// <p>Name of the location that is associated with the CIDR collection.</p>
    /// This field is required.
    pub fn location_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.location_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Name of the location that is associated with the CIDR collection.</p>
    pub fn set_location_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.location_name = input;
        self
    }
    /// <p>Name of the location that is associated with the CIDR collection.</p>
    pub fn get_location_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.location_name
    }
    /// <p>CIDR collection change action. </p>
    /// This field is required.
    pub fn action(mut self, input: crate::types::CidrCollectionChangeAction) -> Self {
        self.action = ::std::option::Option::Some(input);
        self
    }
    /// <p>CIDR collection change action. </p>
    pub fn set_action(mut self, input: ::std::option::Option<crate::types::CidrCollectionChangeAction>) -> Self {
        self.action = input;
        self
    }
    /// <p>CIDR collection change action. </p>
    pub fn get_action(&self) -> &::std::option::Option<crate::types::CidrCollectionChangeAction> {
        &self.action
    }
    /// Appends an item to `cidr_list`.
    ///
    /// To override the contents of this collection use [`set_cidr_list`](Self::set_cidr_list).
    ///
    /// <p>List of CIDR blocks.</p>
    pub fn cidr_list(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.cidr_list.unwrap_or_default();
        v.push(input.into());
        self.cidr_list = ::std::option::Option::Some(v);
        self
    }
    /// <p>List of CIDR blocks.</p>
    pub fn set_cidr_list(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.cidr_list = input;
        self
    }
    /// <p>List of CIDR blocks.</p>
    pub fn get_cidr_list(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.cidr_list
    }
    /// Consumes the builder and constructs a [`CidrCollectionChange`](crate::types::CidrCollectionChange).
    /// This method will fail if any of the following fields are not set:
    /// - [`location_name`](crate::types::builders::CidrCollectionChangeBuilder::location_name)
    /// - [`action`](crate::types::builders::CidrCollectionChangeBuilder::action)
    /// - [`cidr_list`](crate::types::builders::CidrCollectionChangeBuilder::cidr_list)
    pub fn build(self) -> ::std::result::Result<crate::types::CidrCollectionChange, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CidrCollectionChange {
            location_name: self.location_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "location_name",
                    "location_name was not specified but it is required when building CidrCollectionChange",
                )
            })?,
            action: self.action.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "action",
                    "action was not specified but it is required when building CidrCollectionChange",
                )
            })?,
            cidr_list: self.cidr_list.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "cidr_list",
                    "cidr_list was not specified but it is required when building CidrCollectionChange",
                )
            })?,
        })
    }
}
