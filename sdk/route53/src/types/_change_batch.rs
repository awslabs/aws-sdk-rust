// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The information for a change request.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ChangeBatch {
    /// <p> <i>Optional:</i> Any comments you want to include about a change batch request.</p>
    pub comment: ::std::option::Option<::std::string::String>,
    /// <p>Information about the changes to make to the record sets.</p>
    pub changes: ::std::vec::Vec<crate::types::Change>,
}
impl ChangeBatch {
    /// <p> <i>Optional:</i> Any comments you want to include about a change batch request.</p>
    pub fn comment(&self) -> ::std::option::Option<&str> {
        self.comment.as_deref()
    }
    /// <p>Information about the changes to make to the record sets.</p>
    pub fn changes(&self) -> &[crate::types::Change] {
        use std::ops::Deref;
        self.changes.deref()
    }
}
impl ChangeBatch {
    /// Creates a new builder-style object to manufacture [`ChangeBatch`](crate::types::ChangeBatch).
    pub fn builder() -> crate::types::builders::ChangeBatchBuilder {
        crate::types::builders::ChangeBatchBuilder::default()
    }
}

/// A builder for [`ChangeBatch`](crate::types::ChangeBatch).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ChangeBatchBuilder {
    pub(crate) comment: ::std::option::Option<::std::string::String>,
    pub(crate) changes: ::std::option::Option<::std::vec::Vec<crate::types::Change>>,
}
impl ChangeBatchBuilder {
    /// <p> <i>Optional:</i> Any comments you want to include about a change batch request.</p>
    pub fn comment(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.comment = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> <i>Optional:</i> Any comments you want to include about a change batch request.</p>
    pub fn set_comment(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.comment = input;
        self
    }
    /// <p> <i>Optional:</i> Any comments you want to include about a change batch request.</p>
    pub fn get_comment(&self) -> &::std::option::Option<::std::string::String> {
        &self.comment
    }
    /// Appends an item to `changes`.
    ///
    /// To override the contents of this collection use [`set_changes`](Self::set_changes).
    ///
    /// <p>Information about the changes to make to the record sets.</p>
    pub fn changes(mut self, input: crate::types::Change) -> Self {
        let mut v = self.changes.unwrap_or_default();
        v.push(input);
        self.changes = ::std::option::Option::Some(v);
        self
    }
    /// <p>Information about the changes to make to the record sets.</p>
    pub fn set_changes(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Change>>) -> Self {
        self.changes = input;
        self
    }
    /// <p>Information about the changes to make to the record sets.</p>
    pub fn get_changes(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Change>> {
        &self.changes
    }
    /// Consumes the builder and constructs a [`ChangeBatch`](crate::types::ChangeBatch).
    /// This method will fail if any of the following fields are not set:
    /// - [`changes`](crate::types::builders::ChangeBatchBuilder::changes)
    pub fn build(self) -> ::std::result::Result<crate::types::ChangeBatch, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ChangeBatch {
            comment: self.comment,
            changes: self.changes.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "changes",
                    "changes was not specified but it is required when building ChangeBatch",
                )
            })?,
        })
    }
}
