// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A complex type that contains information about a configuration for DNS query logging.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct QueryLoggingConfig {
    /// <p>The ID for a configuration for DNS query logging.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The ID of the hosted zone that CloudWatch Logs is logging queries for. </p>
    #[doc(hidden)]
    pub hosted_zone_id: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the CloudWatch Logs log group that Amazon Route 53 is publishing logs to.</p>
    #[doc(hidden)]
    pub cloud_watch_logs_log_group_arn: std::option::Option<std::string::String>,
}
impl QueryLoggingConfig {
    /// <p>The ID for a configuration for DNS query logging.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The ID of the hosted zone that CloudWatch Logs is logging queries for. </p>
    pub fn hosted_zone_id(&self) -> std::option::Option<&str> {
        self.hosted_zone_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the CloudWatch Logs log group that Amazon Route 53 is publishing logs to.</p>
    pub fn cloud_watch_logs_log_group_arn(&self) -> std::option::Option<&str> {
        self.cloud_watch_logs_log_group_arn.as_deref()
    }
}
impl QueryLoggingConfig {
    /// Creates a new builder-style object to manufacture [`QueryLoggingConfig`](crate::types::QueryLoggingConfig).
    pub fn builder() -> crate::types::builders::QueryLoggingConfigBuilder {
        crate::types::builders::QueryLoggingConfigBuilder::default()
    }
}

/// A builder for [`QueryLoggingConfig`](crate::types::QueryLoggingConfig).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct QueryLoggingConfigBuilder {
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) hosted_zone_id: std::option::Option<std::string::String>,
    pub(crate) cloud_watch_logs_log_group_arn: std::option::Option<std::string::String>,
}
impl QueryLoggingConfigBuilder {
    /// <p>The ID for a configuration for DNS query logging.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>The ID for a configuration for DNS query logging.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The ID of the hosted zone that CloudWatch Logs is logging queries for. </p>
    pub fn hosted_zone_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.hosted_zone_id = Some(input.into());
        self
    }
    /// <p>The ID of the hosted zone that CloudWatch Logs is logging queries for. </p>
    pub fn set_hosted_zone_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.hosted_zone_id = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the CloudWatch Logs log group that Amazon Route 53 is publishing logs to.</p>
    pub fn cloud_watch_logs_log_group_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.cloud_watch_logs_log_group_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the CloudWatch Logs log group that Amazon Route 53 is publishing logs to.</p>
    pub fn set_cloud_watch_logs_log_group_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.cloud_watch_logs_log_group_arn = input;
        self
    }
    /// Consumes the builder and constructs a [`QueryLoggingConfig`](crate::types::QueryLoggingConfig).
    pub fn build(self) -> crate::types::QueryLoggingConfig {
        crate::types::QueryLoggingConfig {
            id: self.id,
            hosted_zone_id: self.hosted_zone_id,
            cloud_watch_logs_log_group_arn: self.cloud_watch_logs_log_group_arn,
        }
    }
}
