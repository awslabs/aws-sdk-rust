// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A complex type that contains general information about the hosted zone.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct HostedZone {
    /// <p>The ID that Amazon Route 53 assigned to the hosted zone when you created it.</p>
    pub id: ::std::string::String,
    /// <p>The name of the domain. For public hosted zones, this is the name that you have registered with your DNS registrar.</p>
    /// <p>For information about how to specify characters other than <code>a-z</code>, <code>0-9</code>, and <code>-</code> (hyphen) and how to specify internationalized domain names, see <a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_CreateHostedZone.html">CreateHostedZone</a>.</p>
    pub name: ::std::string::String,
    /// <p>The value that you specified for <code>CallerReference</code> when you created the hosted zone.</p>
    pub caller_reference: ::std::string::String,
    /// <p>A complex type that includes the <code>Comment</code> and <code>PrivateZone</code> elements. If you omitted the <code>HostedZoneConfig</code> and <code>Comment</code> elements from the request, the <code>Config</code> and <code>Comment</code> elements don't appear in the response.</p>
    pub config: ::std::option::Option<crate::types::HostedZoneConfig>,
    /// <p>The number of resource record sets in the hosted zone.</p>
    pub resource_record_set_count: ::std::option::Option<i64>,
    /// <p>If the hosted zone was created by another service, the service that created the hosted zone. When a hosted zone is created by another service, you can't edit or delete it using Route 53. </p>
    pub linked_service: ::std::option::Option<crate::types::LinkedService>,
}
impl HostedZone {
    /// <p>The ID that Amazon Route 53 assigned to the hosted zone when you created it.</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>The name of the domain. For public hosted zones, this is the name that you have registered with your DNS registrar.</p>
    /// <p>For information about how to specify characters other than <code>a-z</code>, <code>0-9</code>, and <code>-</code> (hyphen) and how to specify internationalized domain names, see <a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_CreateHostedZone.html">CreateHostedZone</a>.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The value that you specified for <code>CallerReference</code> when you created the hosted zone.</p>
    pub fn caller_reference(&self) -> &str {
        use std::ops::Deref;
        self.caller_reference.deref()
    }
    /// <p>A complex type that includes the <code>Comment</code> and <code>PrivateZone</code> elements. If you omitted the <code>HostedZoneConfig</code> and <code>Comment</code> elements from the request, the <code>Config</code> and <code>Comment</code> elements don't appear in the response.</p>
    pub fn config(&self) -> ::std::option::Option<&crate::types::HostedZoneConfig> {
        self.config.as_ref()
    }
    /// <p>The number of resource record sets in the hosted zone.</p>
    pub fn resource_record_set_count(&self) -> ::std::option::Option<i64> {
        self.resource_record_set_count
    }
    /// <p>If the hosted zone was created by another service, the service that created the hosted zone. When a hosted zone is created by another service, you can't edit or delete it using Route 53. </p>
    pub fn linked_service(&self) -> ::std::option::Option<&crate::types::LinkedService> {
        self.linked_service.as_ref()
    }
}
impl HostedZone {
    /// Creates a new builder-style object to manufacture [`HostedZone`](crate::types::HostedZone).
    pub fn builder() -> crate::types::builders::HostedZoneBuilder {
        crate::types::builders::HostedZoneBuilder::default()
    }
}

/// A builder for [`HostedZone`](crate::types::HostedZone).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct HostedZoneBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) caller_reference: ::std::option::Option<::std::string::String>,
    pub(crate) config: ::std::option::Option<crate::types::HostedZoneConfig>,
    pub(crate) resource_record_set_count: ::std::option::Option<i64>,
    pub(crate) linked_service: ::std::option::Option<crate::types::LinkedService>,
}
impl HostedZoneBuilder {
    /// <p>The ID that Amazon Route 53 assigned to the hosted zone when you created it.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID that Amazon Route 53 assigned to the hosted zone when you created it.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The ID that Amazon Route 53 assigned to the hosted zone when you created it.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The name of the domain. For public hosted zones, this is the name that you have registered with your DNS registrar.</p>
    /// <p>For information about how to specify characters other than <code>a-z</code>, <code>0-9</code>, and <code>-</code> (hyphen) and how to specify internationalized domain names, see <a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_CreateHostedZone.html">CreateHostedZone</a>.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the domain. For public hosted zones, this is the name that you have registered with your DNS registrar.</p>
    /// <p>For information about how to specify characters other than <code>a-z</code>, <code>0-9</code>, and <code>-</code> (hyphen) and how to specify internationalized domain names, see <a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_CreateHostedZone.html">CreateHostedZone</a>.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the domain. For public hosted zones, this is the name that you have registered with your DNS registrar.</p>
    /// <p>For information about how to specify characters other than <code>a-z</code>, <code>0-9</code>, and <code>-</code> (hyphen) and how to specify internationalized domain names, see <a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_CreateHostedZone.html">CreateHostedZone</a>.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The value that you specified for <code>CallerReference</code> when you created the hosted zone.</p>
    /// This field is required.
    pub fn caller_reference(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.caller_reference = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The value that you specified for <code>CallerReference</code> when you created the hosted zone.</p>
    pub fn set_caller_reference(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.caller_reference = input;
        self
    }
    /// <p>The value that you specified for <code>CallerReference</code> when you created the hosted zone.</p>
    pub fn get_caller_reference(&self) -> &::std::option::Option<::std::string::String> {
        &self.caller_reference
    }
    /// <p>A complex type that includes the <code>Comment</code> and <code>PrivateZone</code> elements. If you omitted the <code>HostedZoneConfig</code> and <code>Comment</code> elements from the request, the <code>Config</code> and <code>Comment</code> elements don't appear in the response.</p>
    pub fn config(mut self, input: crate::types::HostedZoneConfig) -> Self {
        self.config = ::std::option::Option::Some(input);
        self
    }
    /// <p>A complex type that includes the <code>Comment</code> and <code>PrivateZone</code> elements. If you omitted the <code>HostedZoneConfig</code> and <code>Comment</code> elements from the request, the <code>Config</code> and <code>Comment</code> elements don't appear in the response.</p>
    pub fn set_config(mut self, input: ::std::option::Option<crate::types::HostedZoneConfig>) -> Self {
        self.config = input;
        self
    }
    /// <p>A complex type that includes the <code>Comment</code> and <code>PrivateZone</code> elements. If you omitted the <code>HostedZoneConfig</code> and <code>Comment</code> elements from the request, the <code>Config</code> and <code>Comment</code> elements don't appear in the response.</p>
    pub fn get_config(&self) -> &::std::option::Option<crate::types::HostedZoneConfig> {
        &self.config
    }
    /// <p>The number of resource record sets in the hosted zone.</p>
    pub fn resource_record_set_count(mut self, input: i64) -> Self {
        self.resource_record_set_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of resource record sets in the hosted zone.</p>
    pub fn set_resource_record_set_count(mut self, input: ::std::option::Option<i64>) -> Self {
        self.resource_record_set_count = input;
        self
    }
    /// <p>The number of resource record sets in the hosted zone.</p>
    pub fn get_resource_record_set_count(&self) -> &::std::option::Option<i64> {
        &self.resource_record_set_count
    }
    /// <p>If the hosted zone was created by another service, the service that created the hosted zone. When a hosted zone is created by another service, you can't edit or delete it using Route 53. </p>
    pub fn linked_service(mut self, input: crate::types::LinkedService) -> Self {
        self.linked_service = ::std::option::Option::Some(input);
        self
    }
    /// <p>If the hosted zone was created by another service, the service that created the hosted zone. When a hosted zone is created by another service, you can't edit or delete it using Route 53. </p>
    pub fn set_linked_service(mut self, input: ::std::option::Option<crate::types::LinkedService>) -> Self {
        self.linked_service = input;
        self
    }
    /// <p>If the hosted zone was created by another service, the service that created the hosted zone. When a hosted zone is created by another service, you can't edit or delete it using Route 53. </p>
    pub fn get_linked_service(&self) -> &::std::option::Option<crate::types::LinkedService> {
        &self.linked_service
    }
    /// Consumes the builder and constructs a [`HostedZone`](crate::types::HostedZone).
    /// This method will fail if any of the following fields are not set:
    /// - [`id`](crate::types::builders::HostedZoneBuilder::id)
    /// - [`name`](crate::types::builders::HostedZoneBuilder::name)
    /// - [`caller_reference`](crate::types::builders::HostedZoneBuilder::caller_reference)
    pub fn build(self) -> ::std::result::Result<crate::types::HostedZone, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::HostedZone {
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building HostedZone",
                )
            })?,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building HostedZone",
                )
            })?,
            caller_reference: self.caller_reference.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "caller_reference",
                    "caller_reference was not specified but it is required when building HostedZone",
                )
            })?,
            config: self.config,
            resource_record_set_count: self.resource_record_set_count,
            linked_service: self.linked_service,
        })
    }
}
