// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`GetHealthCheckStatus`](crate::operation::get_health_check_status::builders::GetHealthCheckStatusFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`health_check_id(impl Into<String>)`](crate::operation::get_health_check_status::builders::GetHealthCheckStatusFluentBuilder::health_check_id) / [`set_health_check_id(Option<String>)`](crate::operation::get_health_check_status::builders::GetHealthCheckStatusFluentBuilder::set_health_check_id): <p>The ID for the health check that you want the current status for. When you created the health check, <code>CreateHealthCheck</code> returned the ID in the response, in the <code>HealthCheckId</code> element.</p> <note>   <p>If you want to check the status of a calculated health check, you must use the Amazon Route 53 console or the CloudWatch console. You can't use <code>GetHealthCheckStatus</code> to get the status of a calculated health check.</p>  </note>
    /// - On success, responds with [`GetHealthCheckStatusOutput`](crate::operation::get_health_check_status::GetHealthCheckStatusOutput) with field(s):
    ///   - [`health_check_observations(Option<Vec<HealthCheckObservation>>)`](crate::operation::get_health_check_status::GetHealthCheckStatusOutput::health_check_observations): <p>A list that contains one <code>HealthCheckObservation</code> element for each Amazon Route 53 health checker that is reporting a status about the health check endpoint.</p>
    /// - On failure, responds with [`SdkError<GetHealthCheckStatusError>`](crate::operation::get_health_check_status::GetHealthCheckStatusError)
    pub fn get_health_check_status(
        &self,
    ) -> crate::operation::get_health_check_status::builders::GetHealthCheckStatusFluentBuilder
    {
        crate::operation::get_health_check_status::builders::GetHealthCheckStatusFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
