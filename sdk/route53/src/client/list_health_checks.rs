// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ListHealthChecks`](crate::operation::list_health_checks::builders::ListHealthChecksFluentBuilder) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::operation::list_health_checks::builders::ListHealthChecksFluentBuilder::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`marker(impl Into<String>)`](crate::operation::list_health_checks::builders::ListHealthChecksFluentBuilder::marker) / [`set_marker(Option<String>)`](crate::operation::list_health_checks::builders::ListHealthChecksFluentBuilder::set_marker): <p>If the value of <code>IsTruncated</code> in the previous response was <code>true</code>, you have more health checks. To get another group, submit another <code>ListHealthChecks</code> request. </p>  <p>For the value of <code>marker</code>, specify the value of <code>NextMarker</code> from the previous response, which is the ID of the first health check that Amazon Route 53 will return if you submit another request.</p>  <p>If the value of <code>IsTruncated</code> in the previous response was <code>false</code>, there are no more health checks to get.</p>
    ///   - [`max_items(i32)`](crate::operation::list_health_checks::builders::ListHealthChecksFluentBuilder::max_items) / [`set_max_items(Option<i32>)`](crate::operation::list_health_checks::builders::ListHealthChecksFluentBuilder::set_max_items): <p>The maximum number of health checks that you want <code>ListHealthChecks</code> to return in response to the current request. Amazon Route 53 returns a maximum of 100 items. If you set <code>MaxItems</code> to a value greater than 100, Route 53 returns only the first 100 health checks. </p>
    /// - On success, responds with [`ListHealthChecksOutput`](crate::operation::list_health_checks::ListHealthChecksOutput) with field(s):
    ///   - [`health_checks(Option<Vec<HealthCheck>>)`](crate::operation::list_health_checks::ListHealthChecksOutput::health_checks): <p>A complex type that contains one <code>HealthCheck</code> element for each health check that is associated with the current Amazon Web Services account.</p>
    ///   - [`marker(Option<String>)`](crate::operation::list_health_checks::ListHealthChecksOutput::marker): <p>For the second and subsequent calls to <code>ListHealthChecks</code>, <code>Marker</code> is the value that you specified for the <code>marker</code> parameter in the previous request.</p>
    ///   - [`is_truncated(bool)`](crate::operation::list_health_checks::ListHealthChecksOutput::is_truncated): <p>A flag that indicates whether there are more health checks to be listed. If the response was truncated, you can get the next group of health checks by submitting another <code>ListHealthChecks</code> request and specifying the value of <code>NextMarker</code> in the <code>marker</code> parameter.</p>
    ///   - [`next_marker(Option<String>)`](crate::operation::list_health_checks::ListHealthChecksOutput::next_marker): <p>If <code>IsTruncated</code> is <code>true</code>, the value of <code>NextMarker</code> identifies the first health check that Amazon Route 53 returns if you submit another <code>ListHealthChecks</code> request and specify the value of <code>NextMarker</code> in the <code>marker</code> parameter.</p>
    ///   - [`max_items(Option<i32>)`](crate::operation::list_health_checks::ListHealthChecksOutput::max_items): <p>The value that you specified for the <code>maxitems</code> parameter in the call to <code>ListHealthChecks</code> that produced the current response.</p>
    /// - On failure, responds with [`SdkError<ListHealthChecksError>`](crate::operation::list_health_checks::ListHealthChecksError)
    pub fn list_health_checks(
        &self,
    ) -> crate::operation::list_health_checks::builders::ListHealthChecksFluentBuilder {
        crate::operation::list_health_checks::builders::ListHealthChecksFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
