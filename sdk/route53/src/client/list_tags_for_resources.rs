// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ListTagsForResources`](crate::operation::list_tags_for_resources::builders::ListTagsForResourcesFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_type(TagResourceType)`](crate::operation::list_tags_for_resources::builders::ListTagsForResourcesFluentBuilder::resource_type) / [`set_resource_type(Option<TagResourceType>)`](crate::operation::list_tags_for_resources::builders::ListTagsForResourcesFluentBuilder::set_resource_type): <p>The type of the resources.</p>  <ul>   <li> <p>The resource type for health checks is <code>healthcheck</code>.</p> </li>   <li> <p>The resource type for hosted zones is <code>hostedzone</code>.</p> </li>  </ul>
    ///   - [`resource_ids(Vec<String>)`](crate::operation::list_tags_for_resources::builders::ListTagsForResourcesFluentBuilder::resource_ids) / [`set_resource_ids(Option<Vec<String>>)`](crate::operation::list_tags_for_resources::builders::ListTagsForResourcesFluentBuilder::set_resource_ids): <p>A complex type that contains the ResourceId element for each resource for which you want to get a list of tags.</p>
    /// - On success, responds with [`ListTagsForResourcesOutput`](crate::operation::list_tags_for_resources::ListTagsForResourcesOutput) with field(s):
    ///   - [`resource_tag_sets(Option<Vec<ResourceTagSet>>)`](crate::operation::list_tags_for_resources::ListTagsForResourcesOutput::resource_tag_sets): <p>A list of <code>ResourceTagSet</code>s containing tags associated with the specified resources.</p>
    /// - On failure, responds with [`SdkError<ListTagsForResourcesError>`](crate::operation::list_tags_for_resources::ListTagsForResourcesError)
    pub fn list_tags_for_resources(
        &self,
    ) -> crate::operation::list_tags_for_resources::builders::ListTagsForResourcesFluentBuilder
    {
        crate::operation::list_tags_for_resources::builders::ListTagsForResourcesFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
