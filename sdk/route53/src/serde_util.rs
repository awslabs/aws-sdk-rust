// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn activate_key_signing_key_output_correct_errors(
    mut builder: crate::operation::activate_key_signing_key::builders::ActivateKeySigningKeyOutputBuilder,
) -> crate::operation::activate_key_signing_key::builders::ActivateKeySigningKeyOutputBuilder {
    if builder.change_info.is_none() {
        builder.change_info = {
            let builder = crate::types::builders::ChangeInfoBuilder::default();
            crate::serde_util::change_info_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn associate_vpc_with_hosted_zone_output_correct_errors(
    mut builder: crate::operation::associate_vpc_with_hosted_zone::builders::AssociateVpcWithHostedZoneOutputBuilder,
) -> crate::operation::associate_vpc_with_hosted_zone::builders::AssociateVpcWithHostedZoneOutputBuilder {
    if builder.change_info.is_none() {
        builder.change_info = {
            let builder = crate::types::builders::ChangeInfoBuilder::default();
            crate::serde_util::change_info_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn change_cidr_collection_output_correct_errors(
    mut builder: crate::operation::change_cidr_collection::builders::ChangeCidrCollectionOutputBuilder,
) -> crate::operation::change_cidr_collection::builders::ChangeCidrCollectionOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    builder
}

pub(crate) fn change_resource_record_sets_output_correct_errors(
    mut builder: crate::operation::change_resource_record_sets::builders::ChangeResourceRecordSetsOutputBuilder,
) -> crate::operation::change_resource_record_sets::builders::ChangeResourceRecordSetsOutputBuilder {
    if builder.change_info.is_none() {
        builder.change_info = {
            let builder = crate::types::builders::ChangeInfoBuilder::default();
            crate::serde_util::change_info_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn create_health_check_output_correct_errors(
    mut builder: crate::operation::create_health_check::builders::CreateHealthCheckOutputBuilder,
) -> crate::operation::create_health_check::builders::CreateHealthCheckOutputBuilder {
    if builder.health_check.is_none() {
        builder.health_check = {
            let builder = crate::types::builders::HealthCheckBuilder::default();
            crate::serde_util::health_check_correct_errors(builder).build().ok()
        }
    }
    if builder.location.is_none() {
        builder.location = Some(Default::default())
    }
    builder
}

pub(crate) fn create_hosted_zone_output_correct_errors(
    mut builder: crate::operation::create_hosted_zone::builders::CreateHostedZoneOutputBuilder,
) -> crate::operation::create_hosted_zone::builders::CreateHostedZoneOutputBuilder {
    if builder.hosted_zone.is_none() {
        builder.hosted_zone = {
            let builder = crate::types::builders::HostedZoneBuilder::default();
            crate::serde_util::hosted_zone_correct_errors(builder).build().ok()
        }
    }
    if builder.change_info.is_none() {
        builder.change_info = {
            let builder = crate::types::builders::ChangeInfoBuilder::default();
            crate::serde_util::change_info_correct_errors(builder).build().ok()
        }
    }
    if builder.delegation_set.is_none() {
        builder.delegation_set = {
            let builder = crate::types::builders::DelegationSetBuilder::default();
            crate::serde_util::delegation_set_correct_errors(builder).build().ok()
        }
    }
    if builder.location.is_none() {
        builder.location = Some(Default::default())
    }
    builder
}

pub(crate) fn create_key_signing_key_output_correct_errors(
    mut builder: crate::operation::create_key_signing_key::builders::CreateKeySigningKeyOutputBuilder,
) -> crate::operation::create_key_signing_key::builders::CreateKeySigningKeyOutputBuilder {
    if builder.change_info.is_none() {
        builder.change_info = {
            let builder = crate::types::builders::ChangeInfoBuilder::default();
            crate::serde_util::change_info_correct_errors(builder).build().ok()
        }
    }
    if builder.key_signing_key.is_none() {
        builder.key_signing_key = {
            let builder = crate::types::builders::KeySigningKeyBuilder::default();
            Some(builder.build())
        }
    }
    if builder.location.is_none() {
        builder.location = Some(Default::default())
    }
    builder
}

pub(crate) fn create_query_logging_config_output_correct_errors(
    mut builder: crate::operation::create_query_logging_config::builders::CreateQueryLoggingConfigOutputBuilder,
) -> crate::operation::create_query_logging_config::builders::CreateQueryLoggingConfigOutputBuilder {
    if builder.query_logging_config.is_none() {
        builder.query_logging_config = {
            let builder = crate::types::builders::QueryLoggingConfigBuilder::default();
            crate::serde_util::query_logging_config_correct_errors(builder).build().ok()
        }
    }
    if builder.location.is_none() {
        builder.location = Some(Default::default())
    }
    builder
}

pub(crate) fn create_reusable_delegation_set_output_correct_errors(
    mut builder: crate::operation::create_reusable_delegation_set::builders::CreateReusableDelegationSetOutputBuilder,
) -> crate::operation::create_reusable_delegation_set::builders::CreateReusableDelegationSetOutputBuilder {
    if builder.delegation_set.is_none() {
        builder.delegation_set = {
            let builder = crate::types::builders::DelegationSetBuilder::default();
            crate::serde_util::delegation_set_correct_errors(builder).build().ok()
        }
    }
    if builder.location.is_none() {
        builder.location = Some(Default::default())
    }
    builder
}

pub(crate) fn create_traffic_policy_output_correct_errors(
    mut builder: crate::operation::create_traffic_policy::builders::CreateTrafficPolicyOutputBuilder,
) -> crate::operation::create_traffic_policy::builders::CreateTrafficPolicyOutputBuilder {
    if builder.traffic_policy.is_none() {
        builder.traffic_policy = {
            let builder = crate::types::builders::TrafficPolicyBuilder::default();
            crate::serde_util::traffic_policy_correct_errors(builder).build().ok()
        }
    }
    if builder.location.is_none() {
        builder.location = Some(Default::default())
    }
    builder
}

pub(crate) fn create_traffic_policy_instance_output_correct_errors(
    mut builder: crate::operation::create_traffic_policy_instance::builders::CreateTrafficPolicyInstanceOutputBuilder,
) -> crate::operation::create_traffic_policy_instance::builders::CreateTrafficPolicyInstanceOutputBuilder {
    if builder.traffic_policy_instance.is_none() {
        builder.traffic_policy_instance = {
            let builder = crate::types::builders::TrafficPolicyInstanceBuilder::default();
            crate::serde_util::traffic_policy_instance_correct_errors(builder).build().ok()
        }
    }
    if builder.location.is_none() {
        builder.location = Some(Default::default())
    }
    builder
}

pub(crate) fn create_traffic_policy_version_output_correct_errors(
    mut builder: crate::operation::create_traffic_policy_version::builders::CreateTrafficPolicyVersionOutputBuilder,
) -> crate::operation::create_traffic_policy_version::builders::CreateTrafficPolicyVersionOutputBuilder {
    if builder.traffic_policy.is_none() {
        builder.traffic_policy = {
            let builder = crate::types::builders::TrafficPolicyBuilder::default();
            crate::serde_util::traffic_policy_correct_errors(builder).build().ok()
        }
    }
    if builder.location.is_none() {
        builder.location = Some(Default::default())
    }
    builder
}

pub(crate) fn create_vpc_association_authorization_output_correct_errors(
    mut builder: crate::operation::create_vpc_association_authorization::builders::CreateVpcAssociationAuthorizationOutputBuilder,
) -> crate::operation::create_vpc_association_authorization::builders::CreateVpcAssociationAuthorizationOutputBuilder {
    if builder.hosted_zone_id.is_none() {
        builder.hosted_zone_id = Some(Default::default())
    }
    if builder.vpc.is_none() {
        builder.vpc = {
            let builder = crate::types::builders::VpcBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn deactivate_key_signing_key_output_correct_errors(
    mut builder: crate::operation::deactivate_key_signing_key::builders::DeactivateKeySigningKeyOutputBuilder,
) -> crate::operation::deactivate_key_signing_key::builders::DeactivateKeySigningKeyOutputBuilder {
    if builder.change_info.is_none() {
        builder.change_info = {
            let builder = crate::types::builders::ChangeInfoBuilder::default();
            crate::serde_util::change_info_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn delete_hosted_zone_output_correct_errors(
    mut builder: crate::operation::delete_hosted_zone::builders::DeleteHostedZoneOutputBuilder,
) -> crate::operation::delete_hosted_zone::builders::DeleteHostedZoneOutputBuilder {
    if builder.change_info.is_none() {
        builder.change_info = {
            let builder = crate::types::builders::ChangeInfoBuilder::default();
            crate::serde_util::change_info_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn delete_key_signing_key_output_correct_errors(
    mut builder: crate::operation::delete_key_signing_key::builders::DeleteKeySigningKeyOutputBuilder,
) -> crate::operation::delete_key_signing_key::builders::DeleteKeySigningKeyOutputBuilder {
    if builder.change_info.is_none() {
        builder.change_info = {
            let builder = crate::types::builders::ChangeInfoBuilder::default();
            crate::serde_util::change_info_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn disable_hosted_zone_dnssec_output_correct_errors(
    mut builder: crate::operation::disable_hosted_zone_dnssec::builders::DisableHostedZoneDnssecOutputBuilder,
) -> crate::operation::disable_hosted_zone_dnssec::builders::DisableHostedZoneDnssecOutputBuilder {
    if builder.change_info.is_none() {
        builder.change_info = {
            let builder = crate::types::builders::ChangeInfoBuilder::default();
            crate::serde_util::change_info_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn disassociate_vpc_from_hosted_zone_output_correct_errors(
    mut builder: crate::operation::disassociate_vpc_from_hosted_zone::builders::DisassociateVpcFromHostedZoneOutputBuilder,
) -> crate::operation::disassociate_vpc_from_hosted_zone::builders::DisassociateVpcFromHostedZoneOutputBuilder {
    if builder.change_info.is_none() {
        builder.change_info = {
            let builder = crate::types::builders::ChangeInfoBuilder::default();
            crate::serde_util::change_info_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn enable_hosted_zone_dnssec_output_correct_errors(
    mut builder: crate::operation::enable_hosted_zone_dnssec::builders::EnableHostedZoneDnssecOutputBuilder,
) -> crate::operation::enable_hosted_zone_dnssec::builders::EnableHostedZoneDnssecOutputBuilder {
    if builder.change_info.is_none() {
        builder.change_info = {
            let builder = crate::types::builders::ChangeInfoBuilder::default();
            crate::serde_util::change_info_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_account_limit_output_correct_errors(
    mut builder: crate::operation::get_account_limit::builders::GetAccountLimitOutputBuilder,
) -> crate::operation::get_account_limit::builders::GetAccountLimitOutputBuilder {
    if builder.limit.is_none() {
        builder.limit = {
            let builder = crate::types::builders::AccountLimitBuilder::default();
            crate::serde_util::account_limit_correct_errors(builder).build().ok()
        }
    }
    if builder.count.is_none() {
        builder.count = Some(Default::default())
    }
    builder
}

pub(crate) fn get_change_output_correct_errors(
    mut builder: crate::operation::get_change::builders::GetChangeOutputBuilder,
) -> crate::operation::get_change::builders::GetChangeOutputBuilder {
    if builder.change_info.is_none() {
        builder.change_info = {
            let builder = crate::types::builders::ChangeInfoBuilder::default();
            crate::serde_util::change_info_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_checker_ip_ranges_output_correct_errors(
    mut builder: crate::operation::get_checker_ip_ranges::builders::GetCheckerIpRangesOutputBuilder,
) -> crate::operation::get_checker_ip_ranges::builders::GetCheckerIpRangesOutputBuilder {
    if builder.checker_ip_ranges.is_none() {
        builder.checker_ip_ranges = Some(Default::default())
    }
    builder
}

pub(crate) fn get_dnssec_output_correct_errors(
    mut builder: crate::operation::get_dnssec::builders::GetDnssecOutputBuilder,
) -> crate::operation::get_dnssec::builders::GetDnssecOutputBuilder {
    if builder.status.is_none() {
        builder.status = {
            let builder = crate::types::builders::DnssecStatusBuilder::default();
            Some(builder.build())
        }
    }
    if builder.key_signing_keys.is_none() {
        builder.key_signing_keys = Some(Default::default())
    }
    builder
}

pub(crate) fn get_geo_location_output_correct_errors(
    mut builder: crate::operation::get_geo_location::builders::GetGeoLocationOutputBuilder,
) -> crate::operation::get_geo_location::builders::GetGeoLocationOutputBuilder {
    if builder.geo_location_details.is_none() {
        builder.geo_location_details = {
            let builder = crate::types::builders::GeoLocationDetailsBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn get_health_check_output_correct_errors(
    mut builder: crate::operation::get_health_check::builders::GetHealthCheckOutputBuilder,
) -> crate::operation::get_health_check::builders::GetHealthCheckOutputBuilder {
    if builder.health_check.is_none() {
        builder.health_check = {
            let builder = crate::types::builders::HealthCheckBuilder::default();
            crate::serde_util::health_check_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_health_check_count_output_correct_errors(
    mut builder: crate::operation::get_health_check_count::builders::GetHealthCheckCountOutputBuilder,
) -> crate::operation::get_health_check_count::builders::GetHealthCheckCountOutputBuilder {
    if builder.health_check_count.is_none() {
        builder.health_check_count = Some(Default::default())
    }
    builder
}

pub(crate) fn get_health_check_last_failure_reason_output_correct_errors(
    mut builder: crate::operation::get_health_check_last_failure_reason::builders::GetHealthCheckLastFailureReasonOutputBuilder,
) -> crate::operation::get_health_check_last_failure_reason::builders::GetHealthCheckLastFailureReasonOutputBuilder {
    if builder.health_check_observations.is_none() {
        builder.health_check_observations = Some(Default::default())
    }
    builder
}

pub(crate) fn get_health_check_status_output_correct_errors(
    mut builder: crate::operation::get_health_check_status::builders::GetHealthCheckStatusOutputBuilder,
) -> crate::operation::get_health_check_status::builders::GetHealthCheckStatusOutputBuilder {
    if builder.health_check_observations.is_none() {
        builder.health_check_observations = Some(Default::default())
    }
    builder
}

pub(crate) fn get_hosted_zone_output_correct_errors(
    mut builder: crate::operation::get_hosted_zone::builders::GetHostedZoneOutputBuilder,
) -> crate::operation::get_hosted_zone::builders::GetHostedZoneOutputBuilder {
    if builder.hosted_zone.is_none() {
        builder.hosted_zone = {
            let builder = crate::types::builders::HostedZoneBuilder::default();
            crate::serde_util::hosted_zone_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_hosted_zone_count_output_correct_errors(
    mut builder: crate::operation::get_hosted_zone_count::builders::GetHostedZoneCountOutputBuilder,
) -> crate::operation::get_hosted_zone_count::builders::GetHostedZoneCountOutputBuilder {
    if builder.hosted_zone_count.is_none() {
        builder.hosted_zone_count = Some(Default::default())
    }
    builder
}

pub(crate) fn get_hosted_zone_limit_output_correct_errors(
    mut builder: crate::operation::get_hosted_zone_limit::builders::GetHostedZoneLimitOutputBuilder,
) -> crate::operation::get_hosted_zone_limit::builders::GetHostedZoneLimitOutputBuilder {
    if builder.limit.is_none() {
        builder.limit = {
            let builder = crate::types::builders::HostedZoneLimitBuilder::default();
            crate::serde_util::hosted_zone_limit_correct_errors(builder).build().ok()
        }
    }
    if builder.count.is_none() {
        builder.count = Some(Default::default())
    }
    builder
}

pub(crate) fn get_query_logging_config_output_correct_errors(
    mut builder: crate::operation::get_query_logging_config::builders::GetQueryLoggingConfigOutputBuilder,
) -> crate::operation::get_query_logging_config::builders::GetQueryLoggingConfigOutputBuilder {
    if builder.query_logging_config.is_none() {
        builder.query_logging_config = {
            let builder = crate::types::builders::QueryLoggingConfigBuilder::default();
            crate::serde_util::query_logging_config_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_reusable_delegation_set_output_correct_errors(
    mut builder: crate::operation::get_reusable_delegation_set::builders::GetReusableDelegationSetOutputBuilder,
) -> crate::operation::get_reusable_delegation_set::builders::GetReusableDelegationSetOutputBuilder {
    if builder.delegation_set.is_none() {
        builder.delegation_set = {
            let builder = crate::types::builders::DelegationSetBuilder::default();
            crate::serde_util::delegation_set_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_reusable_delegation_set_limit_output_correct_errors(
    mut builder: crate::operation::get_reusable_delegation_set_limit::builders::GetReusableDelegationSetLimitOutputBuilder,
) -> crate::operation::get_reusable_delegation_set_limit::builders::GetReusableDelegationSetLimitOutputBuilder {
    if builder.limit.is_none() {
        builder.limit = {
            let builder = crate::types::builders::ReusableDelegationSetLimitBuilder::default();
            crate::serde_util::reusable_delegation_set_limit_correct_errors(builder).build().ok()
        }
    }
    if builder.count.is_none() {
        builder.count = Some(Default::default())
    }
    builder
}

pub(crate) fn get_traffic_policy_output_correct_errors(
    mut builder: crate::operation::get_traffic_policy::builders::GetTrafficPolicyOutputBuilder,
) -> crate::operation::get_traffic_policy::builders::GetTrafficPolicyOutputBuilder {
    if builder.traffic_policy.is_none() {
        builder.traffic_policy = {
            let builder = crate::types::builders::TrafficPolicyBuilder::default();
            crate::serde_util::traffic_policy_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_traffic_policy_instance_output_correct_errors(
    mut builder: crate::operation::get_traffic_policy_instance::builders::GetTrafficPolicyInstanceOutputBuilder,
) -> crate::operation::get_traffic_policy_instance::builders::GetTrafficPolicyInstanceOutputBuilder {
    if builder.traffic_policy_instance.is_none() {
        builder.traffic_policy_instance = {
            let builder = crate::types::builders::TrafficPolicyInstanceBuilder::default();
            crate::serde_util::traffic_policy_instance_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_traffic_policy_instance_count_output_correct_errors(
    mut builder: crate::operation::get_traffic_policy_instance_count::builders::GetTrafficPolicyInstanceCountOutputBuilder,
) -> crate::operation::get_traffic_policy_instance_count::builders::GetTrafficPolicyInstanceCountOutputBuilder {
    if builder.traffic_policy_instance_count.is_none() {
        builder.traffic_policy_instance_count = Some(Default::default())
    }
    builder
}

pub(crate) fn list_geo_locations_output_correct_errors(
    mut builder: crate::operation::list_geo_locations::builders::ListGeoLocationsOutputBuilder,
) -> crate::operation::list_geo_locations::builders::ListGeoLocationsOutputBuilder {
    if builder.geo_location_details_list.is_none() {
        builder.geo_location_details_list = Some(Default::default())
    }
    if builder.is_truncated.is_none() {
        builder.is_truncated = Some(Default::default())
    }
    if builder.max_items.is_none() {
        builder.max_items = Some(Default::default())
    }
    builder
}

pub(crate) fn list_health_checks_output_correct_errors(
    mut builder: crate::operation::list_health_checks::builders::ListHealthChecksOutputBuilder,
) -> crate::operation::list_health_checks::builders::ListHealthChecksOutputBuilder {
    if builder.health_checks.is_none() {
        builder.health_checks = Some(Default::default())
    }
    if builder.marker.is_none() {
        builder.marker = Some(Default::default())
    }
    if builder.is_truncated.is_none() {
        builder.is_truncated = Some(Default::default())
    }
    if builder.max_items.is_none() {
        builder.max_items = Some(Default::default())
    }
    builder
}

pub(crate) fn list_hosted_zones_output_correct_errors(
    mut builder: crate::operation::list_hosted_zones::builders::ListHostedZonesOutputBuilder,
) -> crate::operation::list_hosted_zones::builders::ListHostedZonesOutputBuilder {
    if builder.hosted_zones.is_none() {
        builder.hosted_zones = Some(Default::default())
    }
    if builder.marker.is_none() {
        builder.marker = Some(Default::default())
    }
    if builder.is_truncated.is_none() {
        builder.is_truncated = Some(Default::default())
    }
    if builder.max_items.is_none() {
        builder.max_items = Some(Default::default())
    }
    builder
}

pub(crate) fn list_hosted_zones_by_name_output_correct_errors(
    mut builder: crate::operation::list_hosted_zones_by_name::builders::ListHostedZonesByNameOutputBuilder,
) -> crate::operation::list_hosted_zones_by_name::builders::ListHostedZonesByNameOutputBuilder {
    if builder.hosted_zones.is_none() {
        builder.hosted_zones = Some(Default::default())
    }
    if builder.is_truncated.is_none() {
        builder.is_truncated = Some(Default::default())
    }
    if builder.max_items.is_none() {
        builder.max_items = Some(Default::default())
    }
    builder
}

pub(crate) fn list_hosted_zones_by_vpc_output_correct_errors(
    mut builder: crate::operation::list_hosted_zones_by_vpc::builders::ListHostedZonesByVpcOutputBuilder,
) -> crate::operation::list_hosted_zones_by_vpc::builders::ListHostedZonesByVpcOutputBuilder {
    if builder.hosted_zone_summaries.is_none() {
        builder.hosted_zone_summaries = Some(Default::default())
    }
    if builder.max_items.is_none() {
        builder.max_items = Some(Default::default())
    }
    builder
}

pub(crate) fn list_query_logging_configs_output_correct_errors(
    mut builder: crate::operation::list_query_logging_configs::builders::ListQueryLoggingConfigsOutputBuilder,
) -> crate::operation::list_query_logging_configs::builders::ListQueryLoggingConfigsOutputBuilder {
    if builder.query_logging_configs.is_none() {
        builder.query_logging_configs = Some(Default::default())
    }
    builder
}

pub(crate) fn list_resource_record_sets_output_correct_errors(
    mut builder: crate::operation::list_resource_record_sets::builders::ListResourceRecordSetsOutputBuilder,
) -> crate::operation::list_resource_record_sets::builders::ListResourceRecordSetsOutputBuilder {
    if builder.resource_record_sets.is_none() {
        builder.resource_record_sets = Some(Default::default())
    }
    if builder.is_truncated.is_none() {
        builder.is_truncated = Some(Default::default())
    }
    if builder.max_items.is_none() {
        builder.max_items = Some(Default::default())
    }
    builder
}

pub(crate) fn list_reusable_delegation_sets_output_correct_errors(
    mut builder: crate::operation::list_reusable_delegation_sets::builders::ListReusableDelegationSetsOutputBuilder,
) -> crate::operation::list_reusable_delegation_sets::builders::ListReusableDelegationSetsOutputBuilder {
    if builder.delegation_sets.is_none() {
        builder.delegation_sets = Some(Default::default())
    }
    if builder.marker.is_none() {
        builder.marker = Some(Default::default())
    }
    if builder.is_truncated.is_none() {
        builder.is_truncated = Some(Default::default())
    }
    if builder.max_items.is_none() {
        builder.max_items = Some(Default::default())
    }
    builder
}

pub(crate) fn list_tags_for_resource_output_correct_errors(
    mut builder: crate::operation::list_tags_for_resource::builders::ListTagsForResourceOutputBuilder,
) -> crate::operation::list_tags_for_resource::builders::ListTagsForResourceOutputBuilder {
    if builder.resource_tag_set.is_none() {
        builder.resource_tag_set = {
            let builder = crate::types::builders::ResourceTagSetBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn list_tags_for_resources_output_correct_errors(
    mut builder: crate::operation::list_tags_for_resources::builders::ListTagsForResourcesOutputBuilder,
) -> crate::operation::list_tags_for_resources::builders::ListTagsForResourcesOutputBuilder {
    if builder.resource_tag_sets.is_none() {
        builder.resource_tag_sets = Some(Default::default())
    }
    builder
}

pub(crate) fn list_traffic_policies_output_correct_errors(
    mut builder: crate::operation::list_traffic_policies::builders::ListTrafficPoliciesOutputBuilder,
) -> crate::operation::list_traffic_policies::builders::ListTrafficPoliciesOutputBuilder {
    if builder.traffic_policy_summaries.is_none() {
        builder.traffic_policy_summaries = Some(Default::default())
    }
    if builder.is_truncated.is_none() {
        builder.is_truncated = Some(Default::default())
    }
    if builder.traffic_policy_id_marker.is_none() {
        builder.traffic_policy_id_marker = Some(Default::default())
    }
    if builder.max_items.is_none() {
        builder.max_items = Some(Default::default())
    }
    builder
}

pub(crate) fn list_traffic_policy_instances_output_correct_errors(
    mut builder: crate::operation::list_traffic_policy_instances::builders::ListTrafficPolicyInstancesOutputBuilder,
) -> crate::operation::list_traffic_policy_instances::builders::ListTrafficPolicyInstancesOutputBuilder {
    if builder.traffic_policy_instances.is_none() {
        builder.traffic_policy_instances = Some(Default::default())
    }
    if builder.is_truncated.is_none() {
        builder.is_truncated = Some(Default::default())
    }
    if builder.max_items.is_none() {
        builder.max_items = Some(Default::default())
    }
    builder
}

pub(crate) fn list_traffic_policy_instances_by_hosted_zone_output_correct_errors(
    mut builder: crate::operation::list_traffic_policy_instances_by_hosted_zone::builders::ListTrafficPolicyInstancesByHostedZoneOutputBuilder,
) -> crate::operation::list_traffic_policy_instances_by_hosted_zone::builders::ListTrafficPolicyInstancesByHostedZoneOutputBuilder {
    if builder.traffic_policy_instances.is_none() {
        builder.traffic_policy_instances = Some(Default::default())
    }
    if builder.is_truncated.is_none() {
        builder.is_truncated = Some(Default::default())
    }
    if builder.max_items.is_none() {
        builder.max_items = Some(Default::default())
    }
    builder
}

pub(crate) fn list_traffic_policy_instances_by_policy_output_correct_errors(
    mut builder: crate::operation::list_traffic_policy_instances_by_policy::builders::ListTrafficPolicyInstancesByPolicyOutputBuilder,
) -> crate::operation::list_traffic_policy_instances_by_policy::builders::ListTrafficPolicyInstancesByPolicyOutputBuilder {
    if builder.traffic_policy_instances.is_none() {
        builder.traffic_policy_instances = Some(Default::default())
    }
    if builder.is_truncated.is_none() {
        builder.is_truncated = Some(Default::default())
    }
    if builder.max_items.is_none() {
        builder.max_items = Some(Default::default())
    }
    builder
}

pub(crate) fn list_traffic_policy_versions_output_correct_errors(
    mut builder: crate::operation::list_traffic_policy_versions::builders::ListTrafficPolicyVersionsOutputBuilder,
) -> crate::operation::list_traffic_policy_versions::builders::ListTrafficPolicyVersionsOutputBuilder {
    if builder.traffic_policies.is_none() {
        builder.traffic_policies = Some(Default::default())
    }
    if builder.is_truncated.is_none() {
        builder.is_truncated = Some(Default::default())
    }
    if builder.traffic_policy_version_marker.is_none() {
        builder.traffic_policy_version_marker = Some(Default::default())
    }
    if builder.max_items.is_none() {
        builder.max_items = Some(Default::default())
    }
    builder
}

pub(crate) fn list_vpc_association_authorizations_output_correct_errors(
    mut builder: crate::operation::list_vpc_association_authorizations::builders::ListVpcAssociationAuthorizationsOutputBuilder,
) -> crate::operation::list_vpc_association_authorizations::builders::ListVpcAssociationAuthorizationsOutputBuilder {
    if builder.hosted_zone_id.is_none() {
        builder.hosted_zone_id = Some(Default::default())
    }
    if builder.vpcs.is_none() {
        builder.vpcs = Some(Default::default())
    }
    builder
}

pub(crate) fn test_dns_answer_output_correct_errors(
    mut builder: crate::operation::test_dns_answer::builders::TestDnsAnswerOutputBuilder,
) -> crate::operation::test_dns_answer::builders::TestDnsAnswerOutputBuilder {
    if builder.nameserver.is_none() {
        builder.nameserver = Some(Default::default())
    }
    if builder.record_name.is_none() {
        builder.record_name = Some(Default::default())
    }
    if builder.record_type.is_none() {
        builder.record_type = "no value was set".parse::<crate::types::RrType>().ok()
    }
    if builder.record_data.is_none() {
        builder.record_data = Some(Default::default())
    }
    if builder.response_code.is_none() {
        builder.response_code = Some(Default::default())
    }
    if builder.protocol.is_none() {
        builder.protocol = Some(Default::default())
    }
    builder
}

pub(crate) fn update_health_check_output_correct_errors(
    mut builder: crate::operation::update_health_check::builders::UpdateHealthCheckOutputBuilder,
) -> crate::operation::update_health_check::builders::UpdateHealthCheckOutputBuilder {
    if builder.health_check.is_none() {
        builder.health_check = {
            let builder = crate::types::builders::HealthCheckBuilder::default();
            crate::serde_util::health_check_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn update_hosted_zone_comment_output_correct_errors(
    mut builder: crate::operation::update_hosted_zone_comment::builders::UpdateHostedZoneCommentOutputBuilder,
) -> crate::operation::update_hosted_zone_comment::builders::UpdateHostedZoneCommentOutputBuilder {
    if builder.hosted_zone.is_none() {
        builder.hosted_zone = {
            let builder = crate::types::builders::HostedZoneBuilder::default();
            crate::serde_util::hosted_zone_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn update_traffic_policy_comment_output_correct_errors(
    mut builder: crate::operation::update_traffic_policy_comment::builders::UpdateTrafficPolicyCommentOutputBuilder,
) -> crate::operation::update_traffic_policy_comment::builders::UpdateTrafficPolicyCommentOutputBuilder {
    if builder.traffic_policy.is_none() {
        builder.traffic_policy = {
            let builder = crate::types::builders::TrafficPolicyBuilder::default();
            crate::serde_util::traffic_policy_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn update_traffic_policy_instance_output_correct_errors(
    mut builder: crate::operation::update_traffic_policy_instance::builders::UpdateTrafficPolicyInstanceOutputBuilder,
) -> crate::operation::update_traffic_policy_instance::builders::UpdateTrafficPolicyInstanceOutputBuilder {
    if builder.traffic_policy_instance.is_none() {
        builder.traffic_policy_instance = {
            let builder = crate::types::builders::TrafficPolicyInstanceBuilder::default();
            crate::serde_util::traffic_policy_instance_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn change_info_correct_errors(mut builder: crate::types::builders::ChangeInfoBuilder) -> crate::types::builders::ChangeInfoBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::ChangeStatus>().ok()
    }
    if builder.submitted_at.is_none() {
        builder.submitted_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn health_check_correct_errors(mut builder: crate::types::builders::HealthCheckBuilder) -> crate::types::builders::HealthCheckBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.caller_reference.is_none() {
        builder.caller_reference = Some(Default::default())
    }
    if builder.health_check_config.is_none() {
        builder.health_check_config = {
            let builder = crate::types::builders::HealthCheckConfigBuilder::default();
            crate::serde_util::health_check_config_correct_errors(builder).build().ok()
        }
    }
    if builder.health_check_version.is_none() {
        builder.health_check_version = Some(Default::default())
    }
    builder
}

pub(crate) fn hosted_zone_correct_errors(mut builder: crate::types::builders::HostedZoneBuilder) -> crate::types::builders::HostedZoneBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.caller_reference.is_none() {
        builder.caller_reference = Some(Default::default())
    }
    builder
}

pub(crate) fn delegation_set_correct_errors(
    mut builder: crate::types::builders::DelegationSetBuilder,
) -> crate::types::builders::DelegationSetBuilder {
    if builder.name_servers.is_none() {
        builder.name_servers = Some(Default::default())
    }
    builder
}

pub(crate) fn query_logging_config_correct_errors(
    mut builder: crate::types::builders::QueryLoggingConfigBuilder,
) -> crate::types::builders::QueryLoggingConfigBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.hosted_zone_id.is_none() {
        builder.hosted_zone_id = Some(Default::default())
    }
    if builder.cloud_watch_logs_log_group_arn.is_none() {
        builder.cloud_watch_logs_log_group_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn traffic_policy_correct_errors(
    mut builder: crate::types::builders::TrafficPolicyBuilder,
) -> crate::types::builders::TrafficPolicyBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.version.is_none() {
        builder.version = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::RrType>().ok()
    }
    if builder.document.is_none() {
        builder.document = Some(Default::default())
    }
    builder
}

pub(crate) fn traffic_policy_instance_correct_errors(
    mut builder: crate::types::builders::TrafficPolicyInstanceBuilder,
) -> crate::types::builders::TrafficPolicyInstanceBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.hosted_zone_id.is_none() {
        builder.hosted_zone_id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.ttl.is_none() {
        builder.ttl = Some(Default::default())
    }
    if builder.state.is_none() {
        builder.state = Some(Default::default())
    }
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.traffic_policy_id.is_none() {
        builder.traffic_policy_id = Some(Default::default())
    }
    if builder.traffic_policy_version.is_none() {
        builder.traffic_policy_version = Some(Default::default())
    }
    if builder.traffic_policy_type.is_none() {
        builder.traffic_policy_type = "no value was set".parse::<crate::types::RrType>().ok()
    }
    builder
}

pub(crate) fn account_limit_correct_errors(mut builder: crate::types::builders::AccountLimitBuilder) -> crate::types::builders::AccountLimitBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::AccountLimitType>().ok()
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn hosted_zone_limit_correct_errors(
    mut builder: crate::types::builders::HostedZoneLimitBuilder,
) -> crate::types::builders::HostedZoneLimitBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::HostedZoneLimitType>().ok()
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn reusable_delegation_set_limit_correct_errors(
    mut builder: crate::types::builders::ReusableDelegationSetLimitBuilder,
) -> crate::types::builders::ReusableDelegationSetLimitBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::ReusableDelegationSetLimitType>().ok()
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn health_check_config_correct_errors(
    mut builder: crate::types::builders::HealthCheckConfigBuilder,
) -> crate::types::builders::HealthCheckConfigBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::HealthCheckType>().ok()
    }
    builder
}

pub(crate) fn cloud_watch_alarm_configuration_correct_errors(
    mut builder: crate::types::builders::CloudWatchAlarmConfigurationBuilder,
) -> crate::types::builders::CloudWatchAlarmConfigurationBuilder {
    if builder.evaluation_periods.is_none() {
        builder.evaluation_periods = Some(Default::default())
    }
    if builder.threshold.is_none() {
        builder.threshold = Some(Default::default())
    }
    if builder.comparison_operator.is_none() {
        builder.comparison_operator = "no value was set".parse::<crate::types::ComparisonOperator>().ok()
    }
    if builder.period.is_none() {
        builder.period = Some(Default::default())
    }
    if builder.metric_name.is_none() {
        builder.metric_name = Some(Default::default())
    }
    if builder.namespace.is_none() {
        builder.namespace = Some(Default::default())
    }
    if builder.statistic.is_none() {
        builder.statistic = "no value was set".parse::<crate::types::Statistic>().ok()
    }
    builder
}

pub(crate) fn hosted_zone_summary_correct_errors(
    mut builder: crate::types::builders::HostedZoneSummaryBuilder,
) -> crate::types::builders::HostedZoneSummaryBuilder {
    if builder.hosted_zone_id.is_none() {
        builder.hosted_zone_id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.owner.is_none() {
        builder.owner = {
            let builder = crate::types::builders::HostedZoneOwnerBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn resource_record_set_correct_errors(
    mut builder: crate::types::builders::ResourceRecordSetBuilder,
) -> crate::types::builders::ResourceRecordSetBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::RrType>().ok()
    }
    builder
}

pub(crate) fn traffic_policy_summary_correct_errors(
    mut builder: crate::types::builders::TrafficPolicySummaryBuilder,
) -> crate::types::builders::TrafficPolicySummaryBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::RrType>().ok()
    }
    if builder.latest_version.is_none() {
        builder.latest_version = Some(Default::default())
    }
    if builder.traffic_policy_count.is_none() {
        builder.traffic_policy_count = Some(Default::default())
    }
    builder
}

pub(crate) fn alarm_identifier_correct_errors(
    mut builder: crate::types::builders::AlarmIdentifierBuilder,
) -> crate::types::builders::AlarmIdentifierBuilder {
    if builder.region.is_none() {
        builder.region = "no value was set".parse::<crate::types::CloudWatchRegion>().ok()
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn alias_target_correct_errors(mut builder: crate::types::builders::AliasTargetBuilder) -> crate::types::builders::AliasTargetBuilder {
    if builder.hosted_zone_id.is_none() {
        builder.hosted_zone_id = Some(Default::default())
    }
    if builder.dns_name.is_none() {
        builder.dns_name = Some(Default::default())
    }
    if builder.evaluate_target_health.is_none() {
        builder.evaluate_target_health = Some(Default::default())
    }
    builder
}

pub(crate) fn cidr_routing_config_correct_errors(
    mut builder: crate::types::builders::CidrRoutingConfigBuilder,
) -> crate::types::builders::CidrRoutingConfigBuilder {
    if builder.collection_id.is_none() {
        builder.collection_id = Some(Default::default())
    }
    if builder.location_name.is_none() {
        builder.location_name = Some(Default::default())
    }
    builder
}

pub(crate) fn dimension_correct_errors(mut builder: crate::types::builders::DimensionBuilder) -> crate::types::builders::DimensionBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_record_correct_errors(
    mut builder: crate::types::builders::ResourceRecordBuilder,
) -> crate::types::builders::ResourceRecordBuilder {
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}
