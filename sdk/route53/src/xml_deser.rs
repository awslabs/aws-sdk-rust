// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn parse_generic_error(
    response: &http::Response<bytes::Bytes>,
) -> Result<smithy_types::Error, smithy_xml::decode::XmlError> {
    crate::rest_xml_wrapped_errors::parse_generic_error(response.body().as_ref())
}

#[allow(unused_mut)]
pub fn deser_structure_concurrent_modification_xml_err(
    inp: &[u8],
    mut builder: crate::error::concurrent_modification::Builder,
) -> Result<crate::error::concurrent_modification::Builder, smithy_xml::decode::XmlError> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.route53#ConcurrentModification$message */ =>  {
                let var_1 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_1);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_invalid_key_signing_key_status_xml_err(
    inp: &[u8],
    mut builder: crate::error::invalid_key_signing_key_status::Builder,
) -> Result<crate::error::invalid_key_signing_key_status::Builder, smithy_xml::decode::XmlError> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.route53#InvalidKeySigningKeyStatus$message */ =>  {
                let var_2 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_2);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_invalid_kms_arn_xml_err(
    inp: &[u8],
    mut builder: crate::error::invalid_kms_arn::Builder,
) -> Result<crate::error::invalid_kms_arn::Builder, smithy_xml::decode::XmlError> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.route53#InvalidKMSArn$message */ =>  {
                let var_3 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_3);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_invalid_signing_status_xml_err(
    inp: &[u8],
    mut builder: crate::error::invalid_signing_status::Builder,
) -> Result<crate::error::invalid_signing_status::Builder, smithy_xml::decode::XmlError> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.route53#InvalidSigningStatus$message */ =>  {
                let var_4 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_4);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_no_such_key_signing_key_xml_err(
    inp: &[u8],
    mut builder: crate::error::no_such_key_signing_key::Builder,
) -> Result<crate::error::no_such_key_signing_key::Builder, smithy_xml::decode::XmlError> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.route53#NoSuchKeySigningKey$message */ =>  {
                let var_5 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_5);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_activate_key_signing_key(
    inp: &[u8],
    mut builder: crate::output::activate_key_signing_key_output::Builder,
) -> Result<crate::output::activate_key_signing_key_output::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ActivateKeySigningKeyResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ActivateKeySigningKeyResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ChangeInfo") /* ChangeInfo com.amazonaws.route53#ActivateKeySigningKeyOutput$ChangeInfo */ =>  {
                let var_6 =
                    Some(
                        crate::xml_deser::deser_structure_change_info(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_change_info(var_6);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_conflicting_domain_exists_xml_err(
    inp: &[u8],
    mut builder: crate::error::conflicting_domain_exists::Builder,
) -> Result<crate::error::conflicting_domain_exists::Builder, smithy_xml::decode::XmlError> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.route53#ConflictingDomainExists$message */ =>  {
                let var_7 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_7);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_invalid_input_xml_err(
    inp: &[u8],
    mut builder: crate::error::invalid_input::Builder,
) -> Result<crate::error::invalid_input::Builder, smithy_xml::decode::XmlError> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.route53#InvalidInput$message */ =>  {
                let var_8 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_8);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_invalid_vpc_id_xml_err(
    inp: &[u8],
    mut builder: crate::error::invalid_vpc_id::Builder,
) -> Result<crate::error::invalid_vpc_id::Builder, smithy_xml::decode::XmlError> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.route53#InvalidVPCId$message */ =>  {
                let var_9 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_9);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_limits_exceeded_xml_err(
    inp: &[u8],
    mut builder: crate::error::limits_exceeded::Builder,
) -> Result<crate::error::limits_exceeded::Builder, smithy_xml::decode::XmlError> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.route53#LimitsExceeded$message */ =>  {
                let var_10 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_10);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_no_such_hosted_zone_xml_err(
    inp: &[u8],
    mut builder: crate::error::no_such_hosted_zone::Builder,
) -> Result<crate::error::no_such_hosted_zone::Builder, smithy_xml::decode::XmlError> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.route53#NoSuchHostedZone$message */ =>  {
                let var_11 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_11);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_not_authorized_exception_xml_err(
    inp: &[u8],
    mut builder: crate::error::not_authorized_exception::Builder,
) -> Result<crate::error::not_authorized_exception::Builder, smithy_xml::decode::XmlError> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.route53#NotAuthorizedException$message */ =>  {
                let var_12 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_12);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_prior_request_not_complete_xml_err(
    inp: &[u8],
    mut builder: crate::error::prior_request_not_complete::Builder,
) -> Result<crate::error::prior_request_not_complete::Builder, smithy_xml::decode::XmlError> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.route53#PriorRequestNotComplete$message */ =>  {
                let var_13 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_13);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_public_zone_vpc_association_xml_err(
    inp: &[u8],
    mut builder: crate::error::public_zone_vpc_association::Builder,
) -> Result<crate::error::public_zone_vpc_association::Builder, smithy_xml::decode::XmlError> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.route53#PublicZoneVPCAssociation$message */ =>  {
                let var_14 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_14);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_associate_vpc_with_hosted_zone(
    inp: &[u8],
    mut builder: crate::output::associate_vpc_with_hosted_zone_output::Builder,
) -> Result<
    crate::output::associate_vpc_with_hosted_zone_output::Builder,
    smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("AssociateVPCWithHostedZoneResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected AssociateVPCWithHostedZoneResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ChangeInfo") /* ChangeInfo com.amazonaws.route53#AssociateVPCWithHostedZoneOutput$ChangeInfo */ =>  {
                let var_15 =
                    Some(
                        crate::xml_deser::deser_structure_change_info(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_change_info(var_15);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_invalid_change_batch_xml_err(
    inp: &[u8],
    mut builder: crate::error::invalid_change_batch::Builder,
) -> Result<crate::error::invalid_change_batch::Builder, smithy_xml::decode::XmlError> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("messages") /* messages com.amazonaws.route53#InvalidChangeBatch$messages */ =>  {
                let var_16 =
                    Some(
                        crate::xml_deser::deser_list_error_messages(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_messages(var_16);
            }
            ,
            s if s.matches("message") /* message com.amazonaws.route53#InvalidChangeBatch$message */ =>  {
                let var_17 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_17);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_no_such_health_check_xml_err(
    inp: &[u8],
    mut builder: crate::error::no_such_health_check::Builder,
) -> Result<crate::error::no_such_health_check::Builder, smithy_xml::decode::XmlError> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.route53#NoSuchHealthCheck$message */ =>  {
                let var_18 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_18);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_change_resource_record_sets(
    inp: &[u8],
    mut builder: crate::output::change_resource_record_sets_output::Builder,
) -> Result<crate::output::change_resource_record_sets_output::Builder, smithy_xml::decode::XmlError>
{
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ChangeResourceRecordSetsResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ChangeResourceRecordSetsResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ChangeInfo") /* ChangeInfo com.amazonaws.route53#ChangeResourceRecordSetsOutput$ChangeInfo */ =>  {
                let var_19 =
                    Some(
                        crate::xml_deser::deser_structure_change_info(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_change_info(var_19);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_throttling_exception_xml_err(
    inp: &[u8],
    mut builder: crate::error::throttling_exception::Builder,
) -> Result<crate::error::throttling_exception::Builder, smithy_xml::decode::XmlError> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.route53#ThrottlingException$message */ =>  {
                let var_20 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_20);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_health_check_already_exists_xml_err(
    inp: &[u8],
    mut builder: crate::error::health_check_already_exists::Builder,
) -> Result<crate::error::health_check_already_exists::Builder, smithy_xml::decode::XmlError> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.route53#HealthCheckAlreadyExists$message */ =>  {
                let var_21 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_21);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_too_many_health_checks_xml_err(
    inp: &[u8],
    mut builder: crate::error::too_many_health_checks::Builder,
) -> Result<crate::error::too_many_health_checks::Builder, smithy_xml::decode::XmlError> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.route53#TooManyHealthChecks$message */ =>  {
                let var_22 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_22);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_create_health_check(
    inp: &[u8],
    mut builder: crate::output::create_health_check_output::Builder,
) -> Result<crate::output::create_health_check_output::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CreateHealthCheckResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CreateHealthCheckResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("HealthCheck") /* HealthCheck com.amazonaws.route53#CreateHealthCheckOutput$HealthCheck */ =>  {
                let var_23 =
                    Some(
                        crate::xml_deser::deser_structure_health_check(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_health_check(var_23);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_delegation_set_not_available_xml_err(
    inp: &[u8],
    mut builder: crate::error::delegation_set_not_available::Builder,
) -> Result<crate::error::delegation_set_not_available::Builder, smithy_xml::decode::XmlError> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.route53#DelegationSetNotAvailable$message */ =>  {
                let var_24 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_24);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_delegation_set_not_reusable_xml_err(
    inp: &[u8],
    mut builder: crate::error::delegation_set_not_reusable::Builder,
) -> Result<crate::error::delegation_set_not_reusable::Builder, smithy_xml::decode::XmlError> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.route53#DelegationSetNotReusable$message */ =>  {
                let var_25 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_25);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_hosted_zone_already_exists_xml_err(
    inp: &[u8],
    mut builder: crate::error::hosted_zone_already_exists::Builder,
) -> Result<crate::error::hosted_zone_already_exists::Builder, smithy_xml::decode::XmlError> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.route53#HostedZoneAlreadyExists$message */ =>  {
                let var_26 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_26);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_invalid_domain_name_xml_err(
    inp: &[u8],
    mut builder: crate::error::invalid_domain_name::Builder,
) -> Result<crate::error::invalid_domain_name::Builder, smithy_xml::decode::XmlError> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.route53#InvalidDomainName$message */ =>  {
                let var_27 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_27);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_no_such_delegation_set_xml_err(
    inp: &[u8],
    mut builder: crate::error::no_such_delegation_set::Builder,
) -> Result<crate::error::no_such_delegation_set::Builder, smithy_xml::decode::XmlError> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.route53#NoSuchDelegationSet$message */ =>  {
                let var_28 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_28);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_too_many_hosted_zones_xml_err(
    inp: &[u8],
    mut builder: crate::error::too_many_hosted_zones::Builder,
) -> Result<crate::error::too_many_hosted_zones::Builder, smithy_xml::decode::XmlError> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.route53#TooManyHostedZones$message */ =>  {
                let var_29 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_29);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_create_hosted_zone(
    inp: &[u8],
    mut builder: crate::output::create_hosted_zone_output::Builder,
) -> Result<crate::output::create_hosted_zone_output::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CreateHostedZoneResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CreateHostedZoneResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("HostedZone") /* HostedZone com.amazonaws.route53#CreateHostedZoneOutput$HostedZone */ =>  {
                let var_30 =
                    Some(
                        crate::xml_deser::deser_structure_hosted_zone(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_hosted_zone(var_30);
            }
            ,
            s if s.matches("ChangeInfo") /* ChangeInfo com.amazonaws.route53#CreateHostedZoneOutput$ChangeInfo */ =>  {
                let var_31 =
                    Some(
                        crate::xml_deser::deser_structure_change_info(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_change_info(var_31);
            }
            ,
            s if s.matches("DelegationSet") /* DelegationSet com.amazonaws.route53#CreateHostedZoneOutput$DelegationSet */ =>  {
                let var_32 =
                    Some(
                        crate::xml_deser::deser_structure_delegation_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_delegation_set(var_32);
            }
            ,
            s if s.matches("VPC") /* VPC com.amazonaws.route53#CreateHostedZoneOutput$VPC */ =>  {
                let var_33 =
                    Some(
                        crate::xml_deser::deser_structure_vpc(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_vpc(var_33);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_invalid_argument_xml_err(
    inp: &[u8],
    mut builder: crate::error::invalid_argument::Builder,
) -> Result<crate::error::invalid_argument::Builder, smithy_xml::decode::XmlError> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.route53#InvalidArgument$message */ =>  {
                let var_34 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_34);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_invalid_key_signing_key_name_xml_err(
    inp: &[u8],
    mut builder: crate::error::invalid_key_signing_key_name::Builder,
) -> Result<crate::error::invalid_key_signing_key_name::Builder, smithy_xml::decode::XmlError> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.route53#InvalidKeySigningKeyName$message */ =>  {
                let var_35 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_35);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_key_signing_key_already_exists_xml_err(
    inp: &[u8],
    mut builder: crate::error::key_signing_key_already_exists::Builder,
) -> Result<crate::error::key_signing_key_already_exists::Builder, smithy_xml::decode::XmlError> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.route53#KeySigningKeyAlreadyExists$message */ =>  {
                let var_36 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_36);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_too_many_key_signing_keys_xml_err(
    inp: &[u8],
    mut builder: crate::error::too_many_key_signing_keys::Builder,
) -> Result<crate::error::too_many_key_signing_keys::Builder, smithy_xml::decode::XmlError> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.route53#TooManyKeySigningKeys$message */ =>  {
                let var_37 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_37);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_create_key_signing_key(
    inp: &[u8],
    mut builder: crate::output::create_key_signing_key_output::Builder,
) -> Result<crate::output::create_key_signing_key_output::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CreateKeySigningKeyResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CreateKeySigningKeyResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ChangeInfo") /* ChangeInfo com.amazonaws.route53#CreateKeySigningKeyOutput$ChangeInfo */ =>  {
                let var_38 =
                    Some(
                        crate::xml_deser::deser_structure_change_info(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_change_info(var_38);
            }
            ,
            s if s.matches("KeySigningKey") /* KeySigningKey com.amazonaws.route53#CreateKeySigningKeyOutput$KeySigningKey */ =>  {
                let var_39 =
                    Some(
                        crate::xml_deser::deser_structure_key_signing_key(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_key_signing_key(var_39);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_insufficient_cloud_watch_logs_resource_policy_xml_err(
    inp: &[u8],
    mut builder: crate::error::insufficient_cloud_watch_logs_resource_policy::Builder,
) -> Result<
    crate::error::insufficient_cloud_watch_logs_resource_policy::Builder,
    smithy_xml::decode::XmlError,
> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.route53#InsufficientCloudWatchLogsResourcePolicy$message */ =>  {
                let var_40 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_40);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_no_such_cloud_watch_logs_log_group_xml_err(
    inp: &[u8],
    mut builder: crate::error::no_such_cloud_watch_logs_log_group::Builder,
) -> Result<crate::error::no_such_cloud_watch_logs_log_group::Builder, smithy_xml::decode::XmlError>
{
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.route53#NoSuchCloudWatchLogsLogGroup$message */ =>  {
                let var_41 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_41);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_query_logging_config_already_exists_xml_err(
    inp: &[u8],
    mut builder: crate::error::query_logging_config_already_exists::Builder,
) -> Result<crate::error::query_logging_config_already_exists::Builder, smithy_xml::decode::XmlError>
{
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.route53#QueryLoggingConfigAlreadyExists$message */ =>  {
                let var_42 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_42);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_create_query_logging_config(
    inp: &[u8],
    mut builder: crate::output::create_query_logging_config_output::Builder,
) -> Result<crate::output::create_query_logging_config_output::Builder, smithy_xml::decode::XmlError>
{
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CreateQueryLoggingConfigResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CreateQueryLoggingConfigResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("QueryLoggingConfig") /* QueryLoggingConfig com.amazonaws.route53#CreateQueryLoggingConfigOutput$QueryLoggingConfig */ =>  {
                let var_43 =
                    Some(
                        crate::xml_deser::deser_structure_query_logging_config(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_query_logging_config(var_43);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_delegation_set_already_created_xml_err(
    inp: &[u8],
    mut builder: crate::error::delegation_set_already_created::Builder,
) -> Result<crate::error::delegation_set_already_created::Builder, smithy_xml::decode::XmlError> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.route53#DelegationSetAlreadyCreated$message */ =>  {
                let var_44 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_44);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_delegation_set_already_reusable_xml_err(
    inp: &[u8],
    mut builder: crate::error::delegation_set_already_reusable::Builder,
) -> Result<crate::error::delegation_set_already_reusable::Builder, smithy_xml::decode::XmlError> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.route53#DelegationSetAlreadyReusable$message */ =>  {
                let var_45 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_45);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_hosted_zone_not_found_xml_err(
    inp: &[u8],
    mut builder: crate::error::hosted_zone_not_found::Builder,
) -> Result<crate::error::hosted_zone_not_found::Builder, smithy_xml::decode::XmlError> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.route53#HostedZoneNotFound$message */ =>  {
                let var_46 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_46);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_create_reusable_delegation_set(
    inp: &[u8],
    mut builder: crate::output::create_reusable_delegation_set_output::Builder,
) -> Result<
    crate::output::create_reusable_delegation_set_output::Builder,
    smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CreateReusableDelegationSetResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CreateReusableDelegationSetResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("DelegationSet") /* DelegationSet com.amazonaws.route53#CreateReusableDelegationSetOutput$DelegationSet */ =>  {
                let var_47 =
                    Some(
                        crate::xml_deser::deser_structure_delegation_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_delegation_set(var_47);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_invalid_traffic_policy_document_xml_err(
    inp: &[u8],
    mut builder: crate::error::invalid_traffic_policy_document::Builder,
) -> Result<crate::error::invalid_traffic_policy_document::Builder, smithy_xml::decode::XmlError> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.route53#InvalidTrafficPolicyDocument$message */ =>  {
                let var_48 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_48);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_too_many_traffic_policies_xml_err(
    inp: &[u8],
    mut builder: crate::error::too_many_traffic_policies::Builder,
) -> Result<crate::error::too_many_traffic_policies::Builder, smithy_xml::decode::XmlError> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.route53#TooManyTrafficPolicies$message */ =>  {
                let var_49 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_49);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_traffic_policy_already_exists_xml_err(
    inp: &[u8],
    mut builder: crate::error::traffic_policy_already_exists::Builder,
) -> Result<crate::error::traffic_policy_already_exists::Builder, smithy_xml::decode::XmlError> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.route53#TrafficPolicyAlreadyExists$message */ =>  {
                let var_50 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_50);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_create_traffic_policy(
    inp: &[u8],
    mut builder: crate::output::create_traffic_policy_output::Builder,
) -> Result<crate::output::create_traffic_policy_output::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CreateTrafficPolicyResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CreateTrafficPolicyResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("TrafficPolicy") /* TrafficPolicy com.amazonaws.route53#CreateTrafficPolicyOutput$TrafficPolicy */ =>  {
                let var_51 =
                    Some(
                        crate::xml_deser::deser_structure_traffic_policy(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_traffic_policy(var_51);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_no_such_traffic_policy_xml_err(
    inp: &[u8],
    mut builder: crate::error::no_such_traffic_policy::Builder,
) -> Result<crate::error::no_such_traffic_policy::Builder, smithy_xml::decode::XmlError> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.route53#NoSuchTrafficPolicy$message */ =>  {
                let var_52 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_52);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_too_many_traffic_policy_instances_xml_err(
    inp: &[u8],
    mut builder: crate::error::too_many_traffic_policy_instances::Builder,
) -> Result<crate::error::too_many_traffic_policy_instances::Builder, smithy_xml::decode::XmlError>
{
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.route53#TooManyTrafficPolicyInstances$message */ =>  {
                let var_53 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_53);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_traffic_policy_instance_already_exists_xml_err(
    inp: &[u8],
    mut builder: crate::error::traffic_policy_instance_already_exists::Builder,
) -> Result<
    crate::error::traffic_policy_instance_already_exists::Builder,
    smithy_xml::decode::XmlError,
> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.route53#TrafficPolicyInstanceAlreadyExists$message */ =>  {
                let var_54 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_54);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_create_traffic_policy_instance(
    inp: &[u8],
    mut builder: crate::output::create_traffic_policy_instance_output::Builder,
) -> Result<
    crate::output::create_traffic_policy_instance_output::Builder,
    smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CreateTrafficPolicyInstanceResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CreateTrafficPolicyInstanceResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("TrafficPolicyInstance") /* TrafficPolicyInstance com.amazonaws.route53#CreateTrafficPolicyInstanceOutput$TrafficPolicyInstance */ =>  {
                let var_55 =
                    Some(
                        crate::xml_deser::deser_structure_traffic_policy_instance(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_traffic_policy_instance(var_55);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_too_many_traffic_policy_versions_for_current_policy_xml_err(
    inp: &[u8],
    mut builder: crate::error::too_many_traffic_policy_versions_for_current_policy::Builder,
) -> Result<
    crate::error::too_many_traffic_policy_versions_for_current_policy::Builder,
    smithy_xml::decode::XmlError,
> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.route53#TooManyTrafficPolicyVersionsForCurrentPolicy$message */ =>  {
                let var_56 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_56);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_create_traffic_policy_version(
    inp: &[u8],
    mut builder: crate::output::create_traffic_policy_version_output::Builder,
) -> Result<
    crate::output::create_traffic_policy_version_output::Builder,
    smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CreateTrafficPolicyVersionResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CreateTrafficPolicyVersionResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("TrafficPolicy") /* TrafficPolicy com.amazonaws.route53#CreateTrafficPolicyVersionOutput$TrafficPolicy */ =>  {
                let var_57 =
                    Some(
                        crate::xml_deser::deser_structure_traffic_policy(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_traffic_policy(var_57);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_too_many_vpc_association_authorizations_xml_err(
    inp: &[u8],
    mut builder: crate::error::too_many_vpc_association_authorizations::Builder,
) -> Result<
    crate::error::too_many_vpc_association_authorizations::Builder,
    smithy_xml::decode::XmlError,
> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.route53#TooManyVPCAssociationAuthorizations$message */ =>  {
                let var_58 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_58);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_create_vpc_association_authorization(
    inp: &[u8],
    mut builder: crate::output::create_vpc_association_authorization_output::Builder,
) -> Result<
    crate::output::create_vpc_association_authorization_output::Builder,
    smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CreateVPCAssociationAuthorizationResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CreateVPCAssociationAuthorizationResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("HostedZoneId") /* HostedZoneId com.amazonaws.route53#CreateVPCAssociationAuthorizationOutput$HostedZoneId */ =>  {
                let var_59 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_hosted_zone_id(var_59);
            }
            ,
            s if s.matches("VPC") /* VPC com.amazonaws.route53#CreateVPCAssociationAuthorizationOutput$VPC */ =>  {
                let var_60 =
                    Some(
                        crate::xml_deser::deser_structure_vpc(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_vpc(var_60);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_key_signing_key_in_parent_ds_record_xml_err(
    inp: &[u8],
    mut builder: crate::error::key_signing_key_in_parent_ds_record::Builder,
) -> Result<crate::error::key_signing_key_in_parent_ds_record::Builder, smithy_xml::decode::XmlError>
{
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.route53#KeySigningKeyInParentDSRecord$message */ =>  {
                let var_61 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_61);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_key_signing_key_in_use_xml_err(
    inp: &[u8],
    mut builder: crate::error::key_signing_key_in_use::Builder,
) -> Result<crate::error::key_signing_key_in_use::Builder, smithy_xml::decode::XmlError> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.route53#KeySigningKeyInUse$message */ =>  {
                let var_62 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_62);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_deactivate_key_signing_key(
    inp: &[u8],
    mut builder: crate::output::deactivate_key_signing_key_output::Builder,
) -> Result<crate::output::deactivate_key_signing_key_output::Builder, smithy_xml::decode::XmlError>
{
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DeactivateKeySigningKeyResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DeactivateKeySigningKeyResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ChangeInfo") /* ChangeInfo com.amazonaws.route53#DeactivateKeySigningKeyOutput$ChangeInfo */ =>  {
                let var_63 =
                    Some(
                        crate::xml_deser::deser_structure_change_info(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_change_info(var_63);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_health_check_in_use_xml_err(
    inp: &[u8],
    mut builder: crate::error::health_check_in_use::Builder,
) -> Result<crate::error::health_check_in_use::Builder, smithy_xml::decode::XmlError> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.route53#HealthCheckInUse$message */ =>  {
                let var_64 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_64);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_hosted_zone_not_empty_xml_err(
    inp: &[u8],
    mut builder: crate::error::hosted_zone_not_empty::Builder,
) -> Result<crate::error::hosted_zone_not_empty::Builder, smithy_xml::decode::XmlError> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.route53#HostedZoneNotEmpty$message */ =>  {
                let var_65 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_65);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_delete_hosted_zone(
    inp: &[u8],
    mut builder: crate::output::delete_hosted_zone_output::Builder,
) -> Result<crate::output::delete_hosted_zone_output::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DeleteHostedZoneResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DeleteHostedZoneResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ChangeInfo") /* ChangeInfo com.amazonaws.route53#DeleteHostedZoneOutput$ChangeInfo */ =>  {
                let var_66 =
                    Some(
                        crate::xml_deser::deser_structure_change_info(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_change_info(var_66);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_delete_key_signing_key(
    inp: &[u8],
    mut builder: crate::output::delete_key_signing_key_output::Builder,
) -> Result<crate::output::delete_key_signing_key_output::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DeleteKeySigningKeyResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DeleteKeySigningKeyResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ChangeInfo") /* ChangeInfo com.amazonaws.route53#DeleteKeySigningKeyOutput$ChangeInfo */ =>  {
                let var_67 =
                    Some(
                        crate::xml_deser::deser_structure_change_info(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_change_info(var_67);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_no_such_query_logging_config_xml_err(
    inp: &[u8],
    mut builder: crate::error::no_such_query_logging_config::Builder,
) -> Result<crate::error::no_such_query_logging_config::Builder, smithy_xml::decode::XmlError> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.route53#NoSuchQueryLoggingConfig$message */ =>  {
                let var_68 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_68);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_delegation_set_in_use_xml_err(
    inp: &[u8],
    mut builder: crate::error::delegation_set_in_use::Builder,
) -> Result<crate::error::delegation_set_in_use::Builder, smithy_xml::decode::XmlError> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.route53#DelegationSetInUse$message */ =>  {
                let var_69 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_69);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_traffic_policy_in_use_xml_err(
    inp: &[u8],
    mut builder: crate::error::traffic_policy_in_use::Builder,
) -> Result<crate::error::traffic_policy_in_use::Builder, smithy_xml::decode::XmlError> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.route53#TrafficPolicyInUse$message */ =>  {
                let var_70 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_70);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_no_such_traffic_policy_instance_xml_err(
    inp: &[u8],
    mut builder: crate::error::no_such_traffic_policy_instance::Builder,
) -> Result<crate::error::no_such_traffic_policy_instance::Builder, smithy_xml::decode::XmlError> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.route53#NoSuchTrafficPolicyInstance$message */ =>  {
                let var_71 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_71);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_vpc_association_authorization_not_found_xml_err(
    inp: &[u8],
    mut builder: crate::error::vpc_association_authorization_not_found::Builder,
) -> Result<
    crate::error::vpc_association_authorization_not_found::Builder,
    smithy_xml::decode::XmlError,
> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.route53#VPCAssociationAuthorizationNotFound$message */ =>  {
                let var_72 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_72);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_dnssec_not_found_xml_err(
    inp: &[u8],
    mut builder: crate::error::dnssec_not_found::Builder,
) -> Result<crate::error::dnssec_not_found::Builder, smithy_xml::decode::XmlError> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.route53#DNSSECNotFound$message */ =>  {
                let var_73 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_73);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_disable_hosted_zone_dnssec(
    inp: &[u8],
    mut builder: crate::output::disable_hosted_zone_dnssec_output::Builder,
) -> Result<crate::output::disable_hosted_zone_dnssec_output::Builder, smithy_xml::decode::XmlError>
{
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DisableHostedZoneDNSSECResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DisableHostedZoneDNSSECResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ChangeInfo") /* ChangeInfo com.amazonaws.route53#DisableHostedZoneDNSSECOutput$ChangeInfo */ =>  {
                let var_74 =
                    Some(
                        crate::xml_deser::deser_structure_change_info(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_change_info(var_74);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_last_vpc_association_xml_err(
    inp: &[u8],
    mut builder: crate::error::last_vpc_association::Builder,
) -> Result<crate::error::last_vpc_association::Builder, smithy_xml::decode::XmlError> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.route53#LastVPCAssociation$message */ =>  {
                let var_75 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_75);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_vpc_association_not_found_xml_err(
    inp: &[u8],
    mut builder: crate::error::vpc_association_not_found::Builder,
) -> Result<crate::error::vpc_association_not_found::Builder, smithy_xml::decode::XmlError> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.route53#VPCAssociationNotFound$message */ =>  {
                let var_76 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_76);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_disassociate_vpc_from_hosted_zone(
    inp: &[u8],
    mut builder: crate::output::disassociate_vpc_from_hosted_zone_output::Builder,
) -> Result<
    crate::output::disassociate_vpc_from_hosted_zone_output::Builder,
    smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DisassociateVPCFromHostedZoneResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DisassociateVPCFromHostedZoneResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ChangeInfo") /* ChangeInfo com.amazonaws.route53#DisassociateVPCFromHostedZoneOutput$ChangeInfo */ =>  {
                let var_77 =
                    Some(
                        crate::xml_deser::deser_structure_change_info(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_change_info(var_77);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_hosted_zone_partially_delegated_xml_err(
    inp: &[u8],
    mut builder: crate::error::hosted_zone_partially_delegated::Builder,
) -> Result<crate::error::hosted_zone_partially_delegated::Builder, smithy_xml::decode::XmlError> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.route53#HostedZonePartiallyDelegated$message */ =>  {
                let var_78 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_78);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_key_signing_key_with_active_status_not_found_xml_err(
    inp: &[u8],
    mut builder: crate::error::key_signing_key_with_active_status_not_found::Builder,
) -> Result<
    crate::error::key_signing_key_with_active_status_not_found::Builder,
    smithy_xml::decode::XmlError,
> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.route53#KeySigningKeyWithActiveStatusNotFound$message */ =>  {
                let var_79 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_79);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_enable_hosted_zone_dnssec(
    inp: &[u8],
    mut builder: crate::output::enable_hosted_zone_dnssec_output::Builder,
) -> Result<crate::output::enable_hosted_zone_dnssec_output::Builder, smithy_xml::decode::XmlError>
{
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("EnableHostedZoneDNSSECResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected EnableHostedZoneDNSSECResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ChangeInfo") /* ChangeInfo com.amazonaws.route53#EnableHostedZoneDNSSECOutput$ChangeInfo */ =>  {
                let var_80 =
                    Some(
                        crate::xml_deser::deser_structure_change_info(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_change_info(var_80);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_get_account_limit(
    inp: &[u8],
    mut builder: crate::output::get_account_limit_output::Builder,
) -> Result<crate::output::get_account_limit_output::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("GetAccountLimitResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected GetAccountLimitResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Limit") /* Limit com.amazonaws.route53#GetAccountLimitOutput$Limit */ =>  {
                let var_81 =
                    Some(
                        crate::xml_deser::deser_structure_account_limit(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_limit(var_81);
            }
            ,
            s if s.matches("Count") /* Count com.amazonaws.route53#GetAccountLimitOutput$Count */ =>  {
                let var_82 =
                    Some(
                         {
                            <i64 as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (long: `com.amazonaws.route53#UsageCount`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_count(var_82);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_no_such_change_xml_err(
    inp: &[u8],
    mut builder: crate::error::no_such_change::Builder,
) -> Result<crate::error::no_such_change::Builder, smithy_xml::decode::XmlError> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.route53#NoSuchChange$message */ =>  {
                let var_83 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_83);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_get_change(
    inp: &[u8],
    mut builder: crate::output::get_change_output::Builder,
) -> Result<crate::output::get_change_output::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("GetChangeResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected GetChangeResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ChangeInfo") /* ChangeInfo com.amazonaws.route53#GetChangeOutput$ChangeInfo */ =>  {
                let var_84 =
                    Some(
                        crate::xml_deser::deser_structure_change_info(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_change_info(var_84);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_get_checker_ip_ranges(
    inp: &[u8],
    mut builder: crate::output::get_checker_ip_ranges_output::Builder,
) -> Result<crate::output::get_checker_ip_ranges_output::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("GetCheckerIpRangesResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected GetCheckerIpRangesResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("CheckerIpRanges") /* CheckerIpRanges com.amazonaws.route53#GetCheckerIpRangesOutput$CheckerIpRanges */ =>  {
                let var_85 =
                    Some(
                        crate::xml_deser::deser_list_checker_ip_ranges(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_checker_ip_ranges(var_85);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_get_dnssec(
    inp: &[u8],
    mut builder: crate::output::get_dnssec_output::Builder,
) -> Result<crate::output::get_dnssec_output::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("GetDNSSECResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected GetDNSSECResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Status") /* Status com.amazonaws.route53#GetDNSSECOutput$Status */ =>  {
                let var_86 =
                    Some(
                        crate::xml_deser::deser_structure_dnssec_status(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_status(var_86);
            }
            ,
            s if s.matches("KeySigningKeys") /* KeySigningKeys com.amazonaws.route53#GetDNSSECOutput$KeySigningKeys */ =>  {
                let var_87 =
                    Some(
                        crate::xml_deser::deser_list_key_signing_keys(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_key_signing_keys(var_87);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_no_such_geo_location_xml_err(
    inp: &[u8],
    mut builder: crate::error::no_such_geo_location::Builder,
) -> Result<crate::error::no_such_geo_location::Builder, smithy_xml::decode::XmlError> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.route53#NoSuchGeoLocation$message */ =>  {
                let var_88 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_88);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_get_geo_location(
    inp: &[u8],
    mut builder: crate::output::get_geo_location_output::Builder,
) -> Result<crate::output::get_geo_location_output::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("GetGeoLocationResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected GetGeoLocationResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("GeoLocationDetails") /* GeoLocationDetails com.amazonaws.route53#GetGeoLocationOutput$GeoLocationDetails */ =>  {
                let var_89 =
                    Some(
                        crate::xml_deser::deser_structure_geo_location_details(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_geo_location_details(var_89);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_incompatible_version_xml_err(
    inp: &[u8],
    mut builder: crate::error::incompatible_version::Builder,
) -> Result<crate::error::incompatible_version::Builder, smithy_xml::decode::XmlError> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.route53#IncompatibleVersion$message */ =>  {
                let var_90 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_90);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_get_health_check(
    inp: &[u8],
    mut builder: crate::output::get_health_check_output::Builder,
) -> Result<crate::output::get_health_check_output::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("GetHealthCheckResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected GetHealthCheckResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("HealthCheck") /* HealthCheck com.amazonaws.route53#GetHealthCheckOutput$HealthCheck */ =>  {
                let var_91 =
                    Some(
                        crate::xml_deser::deser_structure_health_check(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_health_check(var_91);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_get_health_check_count(
    inp: &[u8],
    mut builder: crate::output::get_health_check_count_output::Builder,
) -> Result<crate::output::get_health_check_count_output::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("GetHealthCheckCountResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected GetHealthCheckCountResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("HealthCheckCount") /* HealthCheckCount com.amazonaws.route53#GetHealthCheckCountOutput$HealthCheckCount */ =>  {
                let var_92 =
                    Some(
                         {
                            <i64 as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (long: `com.amazonaws.route53#HealthCheckCount`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_health_check_count(var_92);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_get_health_check_last_failure_reason(
    inp: &[u8],
    mut builder: crate::output::get_health_check_last_failure_reason_output::Builder,
) -> Result<
    crate::output::get_health_check_last_failure_reason_output::Builder,
    smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("GetHealthCheckLastFailureReasonResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected GetHealthCheckLastFailureReasonResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("HealthCheckObservations") /* HealthCheckObservations com.amazonaws.route53#GetHealthCheckLastFailureReasonOutput$HealthCheckObservations */ =>  {
                let var_93 =
                    Some(
                        crate::xml_deser::deser_list_health_check_observations(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_health_check_observations(var_93);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_get_health_check_status(
    inp: &[u8],
    mut builder: crate::output::get_health_check_status_output::Builder,
) -> Result<crate::output::get_health_check_status_output::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("GetHealthCheckStatusResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected GetHealthCheckStatusResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("HealthCheckObservations") /* HealthCheckObservations com.amazonaws.route53#GetHealthCheckStatusOutput$HealthCheckObservations */ =>  {
                let var_94 =
                    Some(
                        crate::xml_deser::deser_list_health_check_observations(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_health_check_observations(var_94);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_get_hosted_zone(
    inp: &[u8],
    mut builder: crate::output::get_hosted_zone_output::Builder,
) -> Result<crate::output::get_hosted_zone_output::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("GetHostedZoneResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected GetHostedZoneResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("HostedZone") /* HostedZone com.amazonaws.route53#GetHostedZoneOutput$HostedZone */ =>  {
                let var_95 =
                    Some(
                        crate::xml_deser::deser_structure_hosted_zone(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_hosted_zone(var_95);
            }
            ,
            s if s.matches("VPCs") /* VPCs com.amazonaws.route53#GetHostedZoneOutput$VPCs */ =>  {
                let var_96 =
                    Some(
                        crate::xml_deser::deser_list_vp_cs(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_vp_cs(var_96);
            }
            ,
            s if s.matches("DelegationSet") /* DelegationSet com.amazonaws.route53#GetHostedZoneOutput$DelegationSet */ =>  {
                let var_97 =
                    Some(
                        crate::xml_deser::deser_structure_delegation_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_delegation_set(var_97);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_get_hosted_zone_count(
    inp: &[u8],
    mut builder: crate::output::get_hosted_zone_count_output::Builder,
) -> Result<crate::output::get_hosted_zone_count_output::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("GetHostedZoneCountResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected GetHostedZoneCountResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("HostedZoneCount") /* HostedZoneCount com.amazonaws.route53#GetHostedZoneCountOutput$HostedZoneCount */ =>  {
                let var_98 =
                    Some(
                         {
                            <i64 as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (long: `com.amazonaws.route53#HostedZoneCount`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_hosted_zone_count(var_98);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_hosted_zone_not_private_xml_err(
    inp: &[u8],
    mut builder: crate::error::hosted_zone_not_private::Builder,
) -> Result<crate::error::hosted_zone_not_private::Builder, smithy_xml::decode::XmlError> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.route53#HostedZoneNotPrivate$message */ =>  {
                let var_99 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_99);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_get_hosted_zone_limit(
    inp: &[u8],
    mut builder: crate::output::get_hosted_zone_limit_output::Builder,
) -> Result<crate::output::get_hosted_zone_limit_output::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("GetHostedZoneLimitResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected GetHostedZoneLimitResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Limit") /* Limit com.amazonaws.route53#GetHostedZoneLimitOutput$Limit */ =>  {
                let var_100 =
                    Some(
                        crate::xml_deser::deser_structure_hosted_zone_limit(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_limit(var_100);
            }
            ,
            s if s.matches("Count") /* Count com.amazonaws.route53#GetHostedZoneLimitOutput$Count */ =>  {
                let var_101 =
                    Some(
                         {
                            <i64 as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (long: `com.amazonaws.route53#UsageCount`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_count(var_101);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_get_query_logging_config(
    inp: &[u8],
    mut builder: crate::output::get_query_logging_config_output::Builder,
) -> Result<crate::output::get_query_logging_config_output::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("GetQueryLoggingConfigResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected GetQueryLoggingConfigResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("QueryLoggingConfig") /* QueryLoggingConfig com.amazonaws.route53#GetQueryLoggingConfigOutput$QueryLoggingConfig */ =>  {
                let var_102 =
                    Some(
                        crate::xml_deser::deser_structure_query_logging_config(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_query_logging_config(var_102);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_get_reusable_delegation_set(
    inp: &[u8],
    mut builder: crate::output::get_reusable_delegation_set_output::Builder,
) -> Result<crate::output::get_reusable_delegation_set_output::Builder, smithy_xml::decode::XmlError>
{
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("GetReusableDelegationSetResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected GetReusableDelegationSetResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("DelegationSet") /* DelegationSet com.amazonaws.route53#GetReusableDelegationSetOutput$DelegationSet */ =>  {
                let var_103 =
                    Some(
                        crate::xml_deser::deser_structure_delegation_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_delegation_set(var_103);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_get_reusable_delegation_set_limit(
    inp: &[u8],
    mut builder: crate::output::get_reusable_delegation_set_limit_output::Builder,
) -> Result<
    crate::output::get_reusable_delegation_set_limit_output::Builder,
    smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("GetReusableDelegationSetLimitResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected GetReusableDelegationSetLimitResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Limit") /* Limit com.amazonaws.route53#GetReusableDelegationSetLimitOutput$Limit */ =>  {
                let var_104 =
                    Some(
                        crate::xml_deser::deser_structure_reusable_delegation_set_limit(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_limit(var_104);
            }
            ,
            s if s.matches("Count") /* Count com.amazonaws.route53#GetReusableDelegationSetLimitOutput$Count */ =>  {
                let var_105 =
                    Some(
                         {
                            <i64 as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (long: `com.amazonaws.route53#UsageCount`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_count(var_105);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_get_traffic_policy(
    inp: &[u8],
    mut builder: crate::output::get_traffic_policy_output::Builder,
) -> Result<crate::output::get_traffic_policy_output::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("GetTrafficPolicyResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected GetTrafficPolicyResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("TrafficPolicy") /* TrafficPolicy com.amazonaws.route53#GetTrafficPolicyOutput$TrafficPolicy */ =>  {
                let var_106 =
                    Some(
                        crate::xml_deser::deser_structure_traffic_policy(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_traffic_policy(var_106);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_get_traffic_policy_instance(
    inp: &[u8],
    mut builder: crate::output::get_traffic_policy_instance_output::Builder,
) -> Result<crate::output::get_traffic_policy_instance_output::Builder, smithy_xml::decode::XmlError>
{
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("GetTrafficPolicyInstanceResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected GetTrafficPolicyInstanceResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("TrafficPolicyInstance") /* TrafficPolicyInstance com.amazonaws.route53#GetTrafficPolicyInstanceOutput$TrafficPolicyInstance */ =>  {
                let var_107 =
                    Some(
                        crate::xml_deser::deser_structure_traffic_policy_instance(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_traffic_policy_instance(var_107);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_get_traffic_policy_instance_count(
    inp: &[u8],
    mut builder: crate::output::get_traffic_policy_instance_count_output::Builder,
) -> Result<
    crate::output::get_traffic_policy_instance_count_output::Builder,
    smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("GetTrafficPolicyInstanceCountResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected GetTrafficPolicyInstanceCountResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("TrafficPolicyInstanceCount") /* TrafficPolicyInstanceCount com.amazonaws.route53#GetTrafficPolicyInstanceCountOutput$TrafficPolicyInstanceCount */ =>  {
                let var_108 =
                    Some(
                         {
                            <i32 as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.route53#TrafficPolicyInstanceCount`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_traffic_policy_instance_count(var_108);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_list_geo_locations(
    inp: &[u8],
    mut builder: crate::output::list_geo_locations_output::Builder,
) -> Result<crate::output::list_geo_locations_output::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ListGeoLocationsResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ListGeoLocationsResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("NextSubdivisionCode") /* NextSubdivisionCode com.amazonaws.route53#ListGeoLocationsOutput$NextSubdivisionCode */ =>  {
                let var_109 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_subdivision_code(var_109);
            }
            ,
            s if s.matches("NextCountryCode") /* NextCountryCode com.amazonaws.route53#ListGeoLocationsOutput$NextCountryCode */ =>  {
                let var_110 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_country_code(var_110);
            }
            ,
            s if s.matches("GeoLocationDetailsList") /* GeoLocationDetailsList com.amazonaws.route53#ListGeoLocationsOutput$GeoLocationDetailsList */ =>  {
                let var_111 =
                    Some(
                        crate::xml_deser::deser_list_geo_location_details_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_geo_location_details_list(var_111);
            }
            ,
            s if s.matches("IsTruncated") /* IsTruncated com.amazonaws.route53#ListGeoLocationsOutput$IsTruncated */ =>  {
                let var_112 =
                    Some(
                         {
                            <bool as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.route53#PageTruncated`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_is_truncated(var_112);
            }
            ,
            s if s.matches("NextContinentCode") /* NextContinentCode com.amazonaws.route53#ListGeoLocationsOutput$NextContinentCode */ =>  {
                let var_113 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_continent_code(var_113);
            }
            ,
            s if s.matches("MaxItems") /* MaxItems com.amazonaws.route53#ListGeoLocationsOutput$MaxItems */ =>  {
                let var_114 =
                    Some(
                         {
                            <i32 as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (integer: `smithy.api#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_max_items(var_114);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_list_health_checks(
    inp: &[u8],
    mut builder: crate::output::list_health_checks_output::Builder,
) -> Result<crate::output::list_health_checks_output::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ListHealthChecksResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ListHealthChecksResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("HealthChecks") /* HealthChecks com.amazonaws.route53#ListHealthChecksOutput$HealthChecks */ =>  {
                let var_115 =
                    Some(
                        crate::xml_deser::deser_list_health_checks(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_health_checks(var_115);
            }
            ,
            s if s.matches("IsTruncated") /* IsTruncated com.amazonaws.route53#ListHealthChecksOutput$IsTruncated */ =>  {
                let var_116 =
                    Some(
                         {
                            <bool as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.route53#PageTruncated`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_is_truncated(var_116);
            }
            ,
            s if s.matches("Marker") /* Marker com.amazonaws.route53#ListHealthChecksOutput$Marker */ =>  {
                let var_117 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_marker(var_117);
            }
            ,
            s if s.matches("MaxItems") /* MaxItems com.amazonaws.route53#ListHealthChecksOutput$MaxItems */ =>  {
                let var_118 =
                    Some(
                         {
                            <i32 as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (integer: `smithy.api#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_max_items(var_118);
            }
            ,
            s if s.matches("NextMarker") /* NextMarker com.amazonaws.route53#ListHealthChecksOutput$NextMarker */ =>  {
                let var_119 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_marker(var_119);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_list_hosted_zones(
    inp: &[u8],
    mut builder: crate::output::list_hosted_zones_output::Builder,
) -> Result<crate::output::list_hosted_zones_output::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ListHostedZonesResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ListHostedZonesResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("HostedZones") /* HostedZones com.amazonaws.route53#ListHostedZonesOutput$HostedZones */ =>  {
                let var_120 =
                    Some(
                        crate::xml_deser::deser_list_hosted_zones(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_hosted_zones(var_120);
            }
            ,
            s if s.matches("IsTruncated") /* IsTruncated com.amazonaws.route53#ListHostedZonesOutput$IsTruncated */ =>  {
                let var_121 =
                    Some(
                         {
                            <bool as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.route53#PageTruncated`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_is_truncated(var_121);
            }
            ,
            s if s.matches("Marker") /* Marker com.amazonaws.route53#ListHostedZonesOutput$Marker */ =>  {
                let var_122 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_marker(var_122);
            }
            ,
            s if s.matches("MaxItems") /* MaxItems com.amazonaws.route53#ListHostedZonesOutput$MaxItems */ =>  {
                let var_123 =
                    Some(
                         {
                            <i32 as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (integer: `smithy.api#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_max_items(var_123);
            }
            ,
            s if s.matches("NextMarker") /* NextMarker com.amazonaws.route53#ListHostedZonesOutput$NextMarker */ =>  {
                let var_124 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_marker(var_124);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_list_hosted_zones_by_name(
    inp: &[u8],
    mut builder: crate::output::list_hosted_zones_by_name_output::Builder,
) -> Result<crate::output::list_hosted_zones_by_name_output::Builder, smithy_xml::decode::XmlError>
{
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ListHostedZonesByNameResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ListHostedZonesByNameResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("NextHostedZoneId") /* NextHostedZoneId com.amazonaws.route53#ListHostedZonesByNameOutput$NextHostedZoneId */ =>  {
                let var_125 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_hosted_zone_id(var_125);
            }
            ,
            s if s.matches("HostedZones") /* HostedZones com.amazonaws.route53#ListHostedZonesByNameOutput$HostedZones */ =>  {
                let var_126 =
                    Some(
                        crate::xml_deser::deser_list_hosted_zones(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_hosted_zones(var_126);
            }
            ,
            s if s.matches("HostedZoneId") /* HostedZoneId com.amazonaws.route53#ListHostedZonesByNameOutput$HostedZoneId */ =>  {
                let var_127 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_hosted_zone_id(var_127);
            }
            ,
            s if s.matches("IsTruncated") /* IsTruncated com.amazonaws.route53#ListHostedZonesByNameOutput$IsTruncated */ =>  {
                let var_128 =
                    Some(
                         {
                            <bool as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.route53#PageTruncated`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_is_truncated(var_128);
            }
            ,
            s if s.matches("MaxItems") /* MaxItems com.amazonaws.route53#ListHostedZonesByNameOutput$MaxItems */ =>  {
                let var_129 =
                    Some(
                         {
                            <i32 as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (integer: `smithy.api#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_max_items(var_129);
            }
            ,
            s if s.matches("DNSName") /* DNSName com.amazonaws.route53#ListHostedZonesByNameOutput$DNSName */ =>  {
                let var_130 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_dns_name(var_130);
            }
            ,
            s if s.matches("NextDNSName") /* NextDNSName com.amazonaws.route53#ListHostedZonesByNameOutput$NextDNSName */ =>  {
                let var_131 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_dns_name(var_131);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_invalid_pagination_token_xml_err(
    inp: &[u8],
    mut builder: crate::error::invalid_pagination_token::Builder,
) -> Result<crate::error::invalid_pagination_token::Builder, smithy_xml::decode::XmlError> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.route53#InvalidPaginationToken$message */ =>  {
                let var_132 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_132);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_list_hosted_zones_by_vpc(
    inp: &[u8],
    mut builder: crate::output::list_hosted_zones_by_vpc_output::Builder,
) -> Result<crate::output::list_hosted_zones_by_vpc_output::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ListHostedZonesByVPCResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ListHostedZonesByVPCResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("NextToken") /* NextToken com.amazonaws.route53#ListHostedZonesByVPCOutput$NextToken */ =>  {
                let var_133 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_133);
            }
            ,
            s if s.matches("HostedZoneSummaries") /* HostedZoneSummaries com.amazonaws.route53#ListHostedZonesByVPCOutput$HostedZoneSummaries */ =>  {
                let var_134 =
                    Some(
                        crate::xml_deser::deser_list_hosted_zone_summaries(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_hosted_zone_summaries(var_134);
            }
            ,
            s if s.matches("MaxItems") /* MaxItems com.amazonaws.route53#ListHostedZonesByVPCOutput$MaxItems */ =>  {
                let var_135 =
                    Some(
                         {
                            <i32 as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (integer: `smithy.api#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_max_items(var_135);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_list_query_logging_configs(
    inp: &[u8],
    mut builder: crate::output::list_query_logging_configs_output::Builder,
) -> Result<crate::output::list_query_logging_configs_output::Builder, smithy_xml::decode::XmlError>
{
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ListQueryLoggingConfigsResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ListQueryLoggingConfigsResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("NextToken") /* NextToken com.amazonaws.route53#ListQueryLoggingConfigsOutput$NextToken */ =>  {
                let var_136 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_136);
            }
            ,
            s if s.matches("QueryLoggingConfigs") /* QueryLoggingConfigs com.amazonaws.route53#ListQueryLoggingConfigsOutput$QueryLoggingConfigs */ =>  {
                let var_137 =
                    Some(
                        crate::xml_deser::deser_list_query_logging_configs(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_query_logging_configs(var_137);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_list_resource_record_sets(
    inp: &[u8],
    mut builder: crate::output::list_resource_record_sets_output::Builder,
) -> Result<crate::output::list_resource_record_sets_output::Builder, smithy_xml::decode::XmlError>
{
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ListResourceRecordSetsResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ListResourceRecordSetsResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("NextRecordIdentifier") /* NextRecordIdentifier com.amazonaws.route53#ListResourceRecordSetsOutput$NextRecordIdentifier */ =>  {
                let var_138 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_record_identifier(var_138);
            }
            ,
            s if s.matches("NextRecordType") /* NextRecordType com.amazonaws.route53#ListResourceRecordSetsOutput$NextRecordType */ =>  {
                let var_139 =
                    Some(
                        Result::<crate::model::RrType, smithy_xml::decode::XmlError>::Ok(
                            crate::model::RrType::from(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_next_record_type(var_139);
            }
            ,
            s if s.matches("NextRecordName") /* NextRecordName com.amazonaws.route53#ListResourceRecordSetsOutput$NextRecordName */ =>  {
                let var_140 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_record_name(var_140);
            }
            ,
            s if s.matches("IsTruncated") /* IsTruncated com.amazonaws.route53#ListResourceRecordSetsOutput$IsTruncated */ =>  {
                let var_141 =
                    Some(
                         {
                            <bool as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.route53#PageTruncated`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_is_truncated(var_141);
            }
            ,
            s if s.matches("ResourceRecordSets") /* ResourceRecordSets com.amazonaws.route53#ListResourceRecordSetsOutput$ResourceRecordSets */ =>  {
                let var_142 =
                    Some(
                        crate::xml_deser::deser_list_resource_record_sets(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_resource_record_sets(var_142);
            }
            ,
            s if s.matches("MaxItems") /* MaxItems com.amazonaws.route53#ListResourceRecordSetsOutput$MaxItems */ =>  {
                let var_143 =
                    Some(
                         {
                            <i32 as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (integer: `smithy.api#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_max_items(var_143);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_list_reusable_delegation_sets(
    inp: &[u8],
    mut builder: crate::output::list_reusable_delegation_sets_output::Builder,
) -> Result<
    crate::output::list_reusable_delegation_sets_output::Builder,
    smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ListReusableDelegationSetsResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ListReusableDelegationSetsResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("IsTruncated") /* IsTruncated com.amazonaws.route53#ListReusableDelegationSetsOutput$IsTruncated */ =>  {
                let var_144 =
                    Some(
                         {
                            <bool as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.route53#PageTruncated`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_is_truncated(var_144);
            }
            ,
            s if s.matches("Marker") /* Marker com.amazonaws.route53#ListReusableDelegationSetsOutput$Marker */ =>  {
                let var_145 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_marker(var_145);
            }
            ,
            s if s.matches("MaxItems") /* MaxItems com.amazonaws.route53#ListReusableDelegationSetsOutput$MaxItems */ =>  {
                let var_146 =
                    Some(
                         {
                            <i32 as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (integer: `smithy.api#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_max_items(var_146);
            }
            ,
            s if s.matches("NextMarker") /* NextMarker com.amazonaws.route53#ListReusableDelegationSetsOutput$NextMarker */ =>  {
                let var_147 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_marker(var_147);
            }
            ,
            s if s.matches("DelegationSets") /* DelegationSets com.amazonaws.route53#ListReusableDelegationSetsOutput$DelegationSets */ =>  {
                let var_148 =
                    Some(
                        crate::xml_deser::deser_list_delegation_sets(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_delegation_sets(var_148);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_list_tags_for_resource(
    inp: &[u8],
    mut builder: crate::output::list_tags_for_resource_output::Builder,
) -> Result<crate::output::list_tags_for_resource_output::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ListTagsForResourceResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ListTagsForResourceResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ResourceTagSet") /* ResourceTagSet com.amazonaws.route53#ListTagsForResourceOutput$ResourceTagSet */ =>  {
                let var_149 =
                    Some(
                        crate::xml_deser::deser_structure_resource_tag_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_resource_tag_set(var_149);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_list_tags_for_resources(
    inp: &[u8],
    mut builder: crate::output::list_tags_for_resources_output::Builder,
) -> Result<crate::output::list_tags_for_resources_output::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ListTagsForResourcesResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ListTagsForResourcesResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ResourceTagSets") /* ResourceTagSets com.amazonaws.route53#ListTagsForResourcesOutput$ResourceTagSets */ =>  {
                let var_150 =
                    Some(
                        crate::xml_deser::deser_list_resource_tag_set_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_resource_tag_sets(var_150);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_list_traffic_policies(
    inp: &[u8],
    mut builder: crate::output::list_traffic_policies_output::Builder,
) -> Result<crate::output::list_traffic_policies_output::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ListTrafficPoliciesResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ListTrafficPoliciesResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("TrafficPolicyIdMarker") /* TrafficPolicyIdMarker com.amazonaws.route53#ListTrafficPoliciesOutput$TrafficPolicyIdMarker */ =>  {
                let var_151 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_traffic_policy_id_marker(var_151);
            }
            ,
            s if s.matches("TrafficPolicySummaries") /* TrafficPolicySummaries com.amazonaws.route53#ListTrafficPoliciesOutput$TrafficPolicySummaries */ =>  {
                let var_152 =
                    Some(
                        crate::xml_deser::deser_list_traffic_policy_summaries(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_traffic_policy_summaries(var_152);
            }
            ,
            s if s.matches("IsTruncated") /* IsTruncated com.amazonaws.route53#ListTrafficPoliciesOutput$IsTruncated */ =>  {
                let var_153 =
                    Some(
                         {
                            <bool as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.route53#PageTruncated`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_is_truncated(var_153);
            }
            ,
            s if s.matches("MaxItems") /* MaxItems com.amazonaws.route53#ListTrafficPoliciesOutput$MaxItems */ =>  {
                let var_154 =
                    Some(
                         {
                            <i32 as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (integer: `smithy.api#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_max_items(var_154);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_list_traffic_policy_instances(
    inp: &[u8],
    mut builder: crate::output::list_traffic_policy_instances_output::Builder,
) -> Result<
    crate::output::list_traffic_policy_instances_output::Builder,
    smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ListTrafficPolicyInstancesResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ListTrafficPolicyInstancesResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("TrafficPolicyInstanceNameMarker") /* TrafficPolicyInstanceNameMarker com.amazonaws.route53#ListTrafficPolicyInstancesOutput$TrafficPolicyInstanceNameMarker */ =>  {
                let var_155 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_traffic_policy_instance_name_marker(var_155);
            }
            ,
            s if s.matches("TrafficPolicyInstances") /* TrafficPolicyInstances com.amazonaws.route53#ListTrafficPolicyInstancesOutput$TrafficPolicyInstances */ =>  {
                let var_156 =
                    Some(
                        crate::xml_deser::deser_list_traffic_policy_instances(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_traffic_policy_instances(var_156);
            }
            ,
            s if s.matches("TrafficPolicyInstanceTypeMarker") /* TrafficPolicyInstanceTypeMarker com.amazonaws.route53#ListTrafficPolicyInstancesOutput$TrafficPolicyInstanceTypeMarker */ =>  {
                let var_157 =
                    Some(
                        Result::<crate::model::RrType, smithy_xml::decode::XmlError>::Ok(
                            crate::model::RrType::from(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_traffic_policy_instance_type_marker(var_157);
            }
            ,
            s if s.matches("IsTruncated") /* IsTruncated com.amazonaws.route53#ListTrafficPolicyInstancesOutput$IsTruncated */ =>  {
                let var_158 =
                    Some(
                         {
                            <bool as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.route53#PageTruncated`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_is_truncated(var_158);
            }
            ,
            s if s.matches("HostedZoneIdMarker") /* HostedZoneIdMarker com.amazonaws.route53#ListTrafficPolicyInstancesOutput$HostedZoneIdMarker */ =>  {
                let var_159 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_hosted_zone_id_marker(var_159);
            }
            ,
            s if s.matches("MaxItems") /* MaxItems com.amazonaws.route53#ListTrafficPolicyInstancesOutput$MaxItems */ =>  {
                let var_160 =
                    Some(
                         {
                            <i32 as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (integer: `smithy.api#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_max_items(var_160);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_list_traffic_policy_instances_by_hosted_zone(
    inp: &[u8],
    mut builder: crate::output::list_traffic_policy_instances_by_hosted_zone_output::Builder,
) -> Result<
    crate::output::list_traffic_policy_instances_by_hosted_zone_output::Builder,
    smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ListTrafficPolicyInstancesByHostedZoneResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ListTrafficPolicyInstancesByHostedZoneResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("TrafficPolicyInstanceNameMarker") /* TrafficPolicyInstanceNameMarker com.amazonaws.route53#ListTrafficPolicyInstancesByHostedZoneOutput$TrafficPolicyInstanceNameMarker */ =>  {
                let var_161 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_traffic_policy_instance_name_marker(var_161);
            }
            ,
            s if s.matches("TrafficPolicyInstances") /* TrafficPolicyInstances com.amazonaws.route53#ListTrafficPolicyInstancesByHostedZoneOutput$TrafficPolicyInstances */ =>  {
                let var_162 =
                    Some(
                        crate::xml_deser::deser_list_traffic_policy_instances(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_traffic_policy_instances(var_162);
            }
            ,
            s if s.matches("TrafficPolicyInstanceTypeMarker") /* TrafficPolicyInstanceTypeMarker com.amazonaws.route53#ListTrafficPolicyInstancesByHostedZoneOutput$TrafficPolicyInstanceTypeMarker */ =>  {
                let var_163 =
                    Some(
                        Result::<crate::model::RrType, smithy_xml::decode::XmlError>::Ok(
                            crate::model::RrType::from(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_traffic_policy_instance_type_marker(var_163);
            }
            ,
            s if s.matches("IsTruncated") /* IsTruncated com.amazonaws.route53#ListTrafficPolicyInstancesByHostedZoneOutput$IsTruncated */ =>  {
                let var_164 =
                    Some(
                         {
                            <bool as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.route53#PageTruncated`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_is_truncated(var_164);
            }
            ,
            s if s.matches("MaxItems") /* MaxItems com.amazonaws.route53#ListTrafficPolicyInstancesByHostedZoneOutput$MaxItems */ =>  {
                let var_165 =
                    Some(
                         {
                            <i32 as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (integer: `smithy.api#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_max_items(var_165);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_list_traffic_policy_instances_by_policy(
    inp: &[u8],
    mut builder: crate::output::list_traffic_policy_instances_by_policy_output::Builder,
) -> Result<
    crate::output::list_traffic_policy_instances_by_policy_output::Builder,
    smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ListTrafficPolicyInstancesByPolicyResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ListTrafficPolicyInstancesByPolicyResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("TrafficPolicyInstanceNameMarker") /* TrafficPolicyInstanceNameMarker com.amazonaws.route53#ListTrafficPolicyInstancesByPolicyOutput$TrafficPolicyInstanceNameMarker */ =>  {
                let var_166 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_traffic_policy_instance_name_marker(var_166);
            }
            ,
            s if s.matches("TrafficPolicyInstances") /* TrafficPolicyInstances com.amazonaws.route53#ListTrafficPolicyInstancesByPolicyOutput$TrafficPolicyInstances */ =>  {
                let var_167 =
                    Some(
                        crate::xml_deser::deser_list_traffic_policy_instances(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_traffic_policy_instances(var_167);
            }
            ,
            s if s.matches("TrafficPolicyInstanceTypeMarker") /* TrafficPolicyInstanceTypeMarker com.amazonaws.route53#ListTrafficPolicyInstancesByPolicyOutput$TrafficPolicyInstanceTypeMarker */ =>  {
                let var_168 =
                    Some(
                        Result::<crate::model::RrType, smithy_xml::decode::XmlError>::Ok(
                            crate::model::RrType::from(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_traffic_policy_instance_type_marker(var_168);
            }
            ,
            s if s.matches("IsTruncated") /* IsTruncated com.amazonaws.route53#ListTrafficPolicyInstancesByPolicyOutput$IsTruncated */ =>  {
                let var_169 =
                    Some(
                         {
                            <bool as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.route53#PageTruncated`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_is_truncated(var_169);
            }
            ,
            s if s.matches("HostedZoneIdMarker") /* HostedZoneIdMarker com.amazonaws.route53#ListTrafficPolicyInstancesByPolicyOutput$HostedZoneIdMarker */ =>  {
                let var_170 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_hosted_zone_id_marker(var_170);
            }
            ,
            s if s.matches("MaxItems") /* MaxItems com.amazonaws.route53#ListTrafficPolicyInstancesByPolicyOutput$MaxItems */ =>  {
                let var_171 =
                    Some(
                         {
                            <i32 as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (integer: `smithy.api#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_max_items(var_171);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_list_traffic_policy_versions(
    inp: &[u8],
    mut builder: crate::output::list_traffic_policy_versions_output::Builder,
) -> Result<crate::output::list_traffic_policy_versions_output::Builder, smithy_xml::decode::XmlError>
{
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ListTrafficPolicyVersionsResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ListTrafficPolicyVersionsResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("TrafficPolicies") /* TrafficPolicies com.amazonaws.route53#ListTrafficPolicyVersionsOutput$TrafficPolicies */ =>  {
                let var_172 =
                    Some(
                        crate::xml_deser::deser_list_traffic_policies(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_traffic_policies(var_172);
            }
            ,
            s if s.matches("TrafficPolicyVersionMarker") /* TrafficPolicyVersionMarker com.amazonaws.route53#ListTrafficPolicyVersionsOutput$TrafficPolicyVersionMarker */ =>  {
                let var_173 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_traffic_policy_version_marker(var_173);
            }
            ,
            s if s.matches("IsTruncated") /* IsTruncated com.amazonaws.route53#ListTrafficPolicyVersionsOutput$IsTruncated */ =>  {
                let var_174 =
                    Some(
                         {
                            <bool as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.route53#PageTruncated`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_is_truncated(var_174);
            }
            ,
            s if s.matches("MaxItems") /* MaxItems com.amazonaws.route53#ListTrafficPolicyVersionsOutput$MaxItems */ =>  {
                let var_175 =
                    Some(
                         {
                            <i32 as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (integer: `smithy.api#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_max_items(var_175);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_list_vpc_association_authorizations(
    inp: &[u8],
    mut builder: crate::output::list_vpc_association_authorizations_output::Builder,
) -> Result<
    crate::output::list_vpc_association_authorizations_output::Builder,
    smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ListVPCAssociationAuthorizationsResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ListVPCAssociationAuthorizationsResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("VPCs") /* VPCs com.amazonaws.route53#ListVPCAssociationAuthorizationsOutput$VPCs */ =>  {
                let var_176 =
                    Some(
                        crate::xml_deser::deser_list_vp_cs(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_vp_cs(var_176);
            }
            ,
            s if s.matches("NextToken") /* NextToken com.amazonaws.route53#ListVPCAssociationAuthorizationsOutput$NextToken */ =>  {
                let var_177 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_177);
            }
            ,
            s if s.matches("HostedZoneId") /* HostedZoneId com.amazonaws.route53#ListVPCAssociationAuthorizationsOutput$HostedZoneId */ =>  {
                let var_178 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_hosted_zone_id(var_178);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_test_dns_answer(
    inp: &[u8],
    mut builder: crate::output::test_dns_answer_output::Builder,
) -> Result<crate::output::test_dns_answer_output::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("TestDNSAnswerResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected TestDNSAnswerResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("RecordName") /* RecordName com.amazonaws.route53#TestDNSAnswerOutput$RecordName */ =>  {
                let var_179 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_record_name(var_179);
            }
            ,
            s if s.matches("ResponseCode") /* ResponseCode com.amazonaws.route53#TestDNSAnswerOutput$ResponseCode */ =>  {
                let var_180 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_response_code(var_180);
            }
            ,
            s if s.matches("RecordData") /* RecordData com.amazonaws.route53#TestDNSAnswerOutput$RecordData */ =>  {
                let var_181 =
                    Some(
                        crate::xml_deser::deser_list_record_data(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_record_data(var_181);
            }
            ,
            s if s.matches("RecordType") /* RecordType com.amazonaws.route53#TestDNSAnswerOutput$RecordType */ =>  {
                let var_182 =
                    Some(
                        Result::<crate::model::RrType, smithy_xml::decode::XmlError>::Ok(
                            crate::model::RrType::from(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_record_type(var_182);
            }
            ,
            s if s.matches("Nameserver") /* Nameserver com.amazonaws.route53#TestDNSAnswerOutput$Nameserver */ =>  {
                let var_183 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_nameserver(var_183);
            }
            ,
            s if s.matches("Protocol") /* Protocol com.amazonaws.route53#TestDNSAnswerOutput$Protocol */ =>  {
                let var_184 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_protocol(var_184);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_health_check_version_mismatch_xml_err(
    inp: &[u8],
    mut builder: crate::error::health_check_version_mismatch::Builder,
) -> Result<crate::error::health_check_version_mismatch::Builder, smithy_xml::decode::XmlError> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.route53#HealthCheckVersionMismatch$message */ =>  {
                let var_185 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_185);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_update_health_check(
    inp: &[u8],
    mut builder: crate::output::update_health_check_output::Builder,
) -> Result<crate::output::update_health_check_output::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("UpdateHealthCheckResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected UpdateHealthCheckResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("HealthCheck") /* HealthCheck com.amazonaws.route53#UpdateHealthCheckOutput$HealthCheck */ =>  {
                let var_186 =
                    Some(
                        crate::xml_deser::deser_structure_health_check(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_health_check(var_186);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_update_hosted_zone_comment(
    inp: &[u8],
    mut builder: crate::output::update_hosted_zone_comment_output::Builder,
) -> Result<crate::output::update_hosted_zone_comment_output::Builder, smithy_xml::decode::XmlError>
{
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("UpdateHostedZoneCommentResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected UpdateHostedZoneCommentResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("HostedZone") /* HostedZone com.amazonaws.route53#UpdateHostedZoneCommentOutput$HostedZone */ =>  {
                let var_187 =
                    Some(
                        crate::xml_deser::deser_structure_hosted_zone(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_hosted_zone(var_187);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_update_traffic_policy_comment(
    inp: &[u8],
    mut builder: crate::output::update_traffic_policy_comment_output::Builder,
) -> Result<
    crate::output::update_traffic_policy_comment_output::Builder,
    smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("UpdateTrafficPolicyCommentResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected UpdateTrafficPolicyCommentResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("TrafficPolicy") /* TrafficPolicy com.amazonaws.route53#UpdateTrafficPolicyCommentOutput$TrafficPolicy */ =>  {
                let var_188 =
                    Some(
                        crate::xml_deser::deser_structure_traffic_policy(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_traffic_policy(var_188);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_conflicting_types_xml_err(
    inp: &[u8],
    mut builder: crate::error::conflicting_types::Builder,
) -> Result<crate::error::conflicting_types::Builder, smithy_xml::decode::XmlError> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.route53#ConflictingTypes$message */ =>  {
                let var_189 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_189);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_update_traffic_policy_instance(
    inp: &[u8],
    mut builder: crate::output::update_traffic_policy_instance_output::Builder,
) -> Result<
    crate::output::update_traffic_policy_instance_output::Builder,
    smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("UpdateTrafficPolicyInstanceResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected UpdateTrafficPolicyInstanceResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("TrafficPolicyInstance") /* TrafficPolicyInstance com.amazonaws.route53#UpdateTrafficPolicyInstanceOutput$TrafficPolicyInstance */ =>  {
                let var_190 =
                    Some(
                        crate::xml_deser::deser_structure_traffic_policy_instance(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_traffic_policy_instance(var_190);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

pub fn deser_structure_change_info(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::ChangeInfo, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::ChangeInfo::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Id") /* Id com.amazonaws.route53#ChangeInfo$Id */ =>  {
                let var_191 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_id(var_191);
            }
            ,
            s if s.matches("Status") /* Status com.amazonaws.route53#ChangeInfo$Status */ =>  {
                let var_192 =
                    Some(
                        Result::<crate::model::ChangeStatus, smithy_xml::decode::XmlError>::Ok(
                            crate::model::ChangeStatus::from(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_status(var_192);
            }
            ,
            s if s.matches("SubmittedAt") /* SubmittedAt com.amazonaws.route53#ChangeInfo$SubmittedAt */ =>  {
                let var_193 =
                    Some(
                        smithy_types::Instant::from_str(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , smithy_types::instant::Format::DateTime
                        )
                        .map_err(|_|smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.route53#TimeStamp`)"))
                        ?
                    )
                ;
                builder = builder.set_submitted_at(var_193);
            }
            ,
            s if s.matches("Comment") /* Comment com.amazonaws.route53#ChangeInfo$Comment */ =>  {
                let var_194 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_comment(var_194);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_error_messages(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<std::string::String>, smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Message") /* member com.amazonaws.route53#ErrorMessages$member */ =>  {
                out.push(
                    Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                        smithy_xml::decode::try_data(&mut tag)?.as_ref()
                        .into()
                    )
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_health_check(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::HealthCheck, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::HealthCheck::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Id") /* Id com.amazonaws.route53#HealthCheck$Id */ =>  {
                let var_195 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_id(var_195);
            }
            ,
            s if s.matches("CallerReference") /* CallerReference com.amazonaws.route53#HealthCheck$CallerReference */ =>  {
                let var_196 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_caller_reference(var_196);
            }
            ,
            s if s.matches("LinkedService") /* LinkedService com.amazonaws.route53#HealthCheck$LinkedService */ =>  {
                let var_197 =
                    Some(
                        crate::xml_deser::deser_structure_linked_service(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_linked_service(var_197);
            }
            ,
            s if s.matches("HealthCheckConfig") /* HealthCheckConfig com.amazonaws.route53#HealthCheck$HealthCheckConfig */ =>  {
                let var_198 =
                    Some(
                        crate::xml_deser::deser_structure_health_check_config(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_health_check_config(var_198);
            }
            ,
            s if s.matches("HealthCheckVersion") /* HealthCheckVersion com.amazonaws.route53#HealthCheck$HealthCheckVersion */ =>  {
                let var_199 =
                    Some(
                         {
                            <i64 as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (long: `com.amazonaws.route53#HealthCheckVersion`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_health_check_version(var_199);
            }
            ,
            s if s.matches("CloudWatchAlarmConfiguration") /* CloudWatchAlarmConfiguration com.amazonaws.route53#HealthCheck$CloudWatchAlarmConfiguration */ =>  {
                let var_200 =
                    Some(
                        crate::xml_deser::deser_structure_cloud_watch_alarm_configuration(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_cloud_watch_alarm_configuration(var_200);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_hosted_zone(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::HostedZone, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::HostedZone::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Id") /* Id com.amazonaws.route53#HostedZone$Id */ =>  {
                let var_201 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_id(var_201);
            }
            ,
            s if s.matches("Name") /* Name com.amazonaws.route53#HostedZone$Name */ =>  {
                let var_202 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_name(var_202);
            }
            ,
            s if s.matches("CallerReference") /* CallerReference com.amazonaws.route53#HostedZone$CallerReference */ =>  {
                let var_203 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_caller_reference(var_203);
            }
            ,
            s if s.matches("Config") /* Config com.amazonaws.route53#HostedZone$Config */ =>  {
                let var_204 =
                    Some(
                        crate::xml_deser::deser_structure_hosted_zone_config(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_config(var_204);
            }
            ,
            s if s.matches("ResourceRecordSetCount") /* ResourceRecordSetCount com.amazonaws.route53#HostedZone$ResourceRecordSetCount */ =>  {
                let var_205 =
                    Some(
                         {
                            <i64 as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (long: `com.amazonaws.route53#HostedZoneRRSetCount`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_resource_record_set_count(var_205);
            }
            ,
            s if s.matches("LinkedService") /* LinkedService com.amazonaws.route53#HostedZone$LinkedService */ =>  {
                let var_206 =
                    Some(
                        crate::xml_deser::deser_structure_linked_service(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_linked_service(var_206);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_delegation_set(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::DelegationSet, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::DelegationSet::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Id") /* Id com.amazonaws.route53#DelegationSet$Id */ =>  {
                let var_207 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_id(var_207);
            }
            ,
            s if s.matches("CallerReference") /* CallerReference com.amazonaws.route53#DelegationSet$CallerReference */ =>  {
                let var_208 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_caller_reference(var_208);
            }
            ,
            s if s.matches("NameServers") /* NameServers com.amazonaws.route53#DelegationSet$NameServers */ =>  {
                let var_209 =
                    Some(
                        crate::xml_deser::deser_list_delegation_set_name_servers(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_name_servers(var_209);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_vpc(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::Vpc, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::Vpc::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("VPCRegion") /* VPCRegion com.amazonaws.route53#VPC$VPCRegion */ =>  {
                let var_210 =
                    Some(
                        Result::<crate::model::VpcRegion, smithy_xml::decode::XmlError>::Ok(
                            crate::model::VpcRegion::from(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_vpc_region(var_210);
            }
            ,
            s if s.matches("VPCId") /* VPCId com.amazonaws.route53#VPC$VPCId */ =>  {
                let var_211 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_vpc_id(var_211);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_key_signing_key(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::KeySigningKey, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::KeySigningKey::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Name") /* Name com.amazonaws.route53#KeySigningKey$Name */ =>  {
                let var_212 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_name(var_212);
            }
            ,
            s if s.matches("KmsArn") /* KmsArn com.amazonaws.route53#KeySigningKey$KmsArn */ =>  {
                let var_213 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_kms_arn(var_213);
            }
            ,
            s if s.matches("Flag") /* Flag com.amazonaws.route53#KeySigningKey$Flag */ =>  {
                let var_214 =
                    Some(
                         {
                            <i32 as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.route53#SigningKeyInteger`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_flag(var_214);
            }
            ,
            s if s.matches("SigningAlgorithmMnemonic") /* SigningAlgorithmMnemonic com.amazonaws.route53#KeySigningKey$SigningAlgorithmMnemonic */ =>  {
                let var_215 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_signing_algorithm_mnemonic(var_215);
            }
            ,
            s if s.matches("SigningAlgorithmType") /* SigningAlgorithmType com.amazonaws.route53#KeySigningKey$SigningAlgorithmType */ =>  {
                let var_216 =
                    Some(
                         {
                            <i32 as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.route53#SigningKeyInteger`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_signing_algorithm_type(var_216);
            }
            ,
            s if s.matches("DigestAlgorithmMnemonic") /* DigestAlgorithmMnemonic com.amazonaws.route53#KeySigningKey$DigestAlgorithmMnemonic */ =>  {
                let var_217 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_digest_algorithm_mnemonic(var_217);
            }
            ,
            s if s.matches("DigestAlgorithmType") /* DigestAlgorithmType com.amazonaws.route53#KeySigningKey$DigestAlgorithmType */ =>  {
                let var_218 =
                    Some(
                         {
                            <i32 as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.route53#SigningKeyInteger`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_digest_algorithm_type(var_218);
            }
            ,
            s if s.matches("KeyTag") /* KeyTag com.amazonaws.route53#KeySigningKey$KeyTag */ =>  {
                let var_219 =
                    Some(
                         {
                            <i32 as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.route53#SigningKeyTag`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_key_tag(var_219);
            }
            ,
            s if s.matches("DigestValue") /* DigestValue com.amazonaws.route53#KeySigningKey$DigestValue */ =>  {
                let var_220 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_digest_value(var_220);
            }
            ,
            s if s.matches("PublicKey") /* PublicKey com.amazonaws.route53#KeySigningKey$PublicKey */ =>  {
                let var_221 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_public_key(var_221);
            }
            ,
            s if s.matches("DSRecord") /* DSRecord com.amazonaws.route53#KeySigningKey$DSRecord */ =>  {
                let var_222 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_ds_record(var_222);
            }
            ,
            s if s.matches("DNSKEYRecord") /* DNSKEYRecord com.amazonaws.route53#KeySigningKey$DNSKEYRecord */ =>  {
                let var_223 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_dnskey_record(var_223);
            }
            ,
            s if s.matches("Status") /* Status com.amazonaws.route53#KeySigningKey$Status */ =>  {
                let var_224 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_status(var_224);
            }
            ,
            s if s.matches("StatusMessage") /* StatusMessage com.amazonaws.route53#KeySigningKey$StatusMessage */ =>  {
                let var_225 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_status_message(var_225);
            }
            ,
            s if s.matches("CreatedDate") /* CreatedDate com.amazonaws.route53#KeySigningKey$CreatedDate */ =>  {
                let var_226 =
                    Some(
                        smithy_types::Instant::from_str(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , smithy_types::instant::Format::DateTime
                        )
                        .map_err(|_|smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.route53#TimeStamp`)"))
                        ?
                    )
                ;
                builder = builder.set_created_date(var_226);
            }
            ,
            s if s.matches("LastModifiedDate") /* LastModifiedDate com.amazonaws.route53#KeySigningKey$LastModifiedDate */ =>  {
                let var_227 =
                    Some(
                        smithy_types::Instant::from_str(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , smithy_types::instant::Format::DateTime
                        )
                        .map_err(|_|smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.route53#TimeStamp`)"))
                        ?
                    )
                ;
                builder = builder.set_last_modified_date(var_227);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_query_logging_config(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::QueryLoggingConfig, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::QueryLoggingConfig::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Id") /* Id com.amazonaws.route53#QueryLoggingConfig$Id */ =>  {
                let var_228 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_id(var_228);
            }
            ,
            s if s.matches("HostedZoneId") /* HostedZoneId com.amazonaws.route53#QueryLoggingConfig$HostedZoneId */ =>  {
                let var_229 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_hosted_zone_id(var_229);
            }
            ,
            s if s.matches("CloudWatchLogsLogGroupArn") /* CloudWatchLogsLogGroupArn com.amazonaws.route53#QueryLoggingConfig$CloudWatchLogsLogGroupArn */ =>  {
                let var_230 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_cloud_watch_logs_log_group_arn(var_230);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_traffic_policy(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::TrafficPolicy, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::TrafficPolicy::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Id") /* Id com.amazonaws.route53#TrafficPolicy$Id */ =>  {
                let var_231 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_id(var_231);
            }
            ,
            s if s.matches("Version") /* Version com.amazonaws.route53#TrafficPolicy$Version */ =>  {
                let var_232 =
                    Some(
                         {
                            <i32 as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.route53#TrafficPolicyVersion`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_version(var_232);
            }
            ,
            s if s.matches("Name") /* Name com.amazonaws.route53#TrafficPolicy$Name */ =>  {
                let var_233 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_name(var_233);
            }
            ,
            s if s.matches("Type") /* Type com.amazonaws.route53#TrafficPolicy$Type */ =>  {
                let var_234 =
                    Some(
                        Result::<crate::model::RrType, smithy_xml::decode::XmlError>::Ok(
                            crate::model::RrType::from(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_type(var_234);
            }
            ,
            s if s.matches("Document") /* Document com.amazonaws.route53#TrafficPolicy$Document */ =>  {
                let var_235 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_document(var_235);
            }
            ,
            s if s.matches("Comment") /* Comment com.amazonaws.route53#TrafficPolicy$Comment */ =>  {
                let var_236 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_comment(var_236);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_traffic_policy_instance(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::TrafficPolicyInstance, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::TrafficPolicyInstance::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Id") /* Id com.amazonaws.route53#TrafficPolicyInstance$Id */ =>  {
                let var_237 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_id(var_237);
            }
            ,
            s if s.matches("HostedZoneId") /* HostedZoneId com.amazonaws.route53#TrafficPolicyInstance$HostedZoneId */ =>  {
                let var_238 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_hosted_zone_id(var_238);
            }
            ,
            s if s.matches("Name") /* Name com.amazonaws.route53#TrafficPolicyInstance$Name */ =>  {
                let var_239 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_name(var_239);
            }
            ,
            s if s.matches("TTL") /* TTL com.amazonaws.route53#TrafficPolicyInstance$TTL */ =>  {
                let var_240 =
                    Some(
                         {
                            <i64 as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (long: `com.amazonaws.route53#TTL`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_ttl(var_240);
            }
            ,
            s if s.matches("State") /* State com.amazonaws.route53#TrafficPolicyInstance$State */ =>  {
                let var_241 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_state(var_241);
            }
            ,
            s if s.matches("Message") /* Message com.amazonaws.route53#TrafficPolicyInstance$Message */ =>  {
                let var_242 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_242);
            }
            ,
            s if s.matches("TrafficPolicyId") /* TrafficPolicyId com.amazonaws.route53#TrafficPolicyInstance$TrafficPolicyId */ =>  {
                let var_243 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_traffic_policy_id(var_243);
            }
            ,
            s if s.matches("TrafficPolicyVersion") /* TrafficPolicyVersion com.amazonaws.route53#TrafficPolicyInstance$TrafficPolicyVersion */ =>  {
                let var_244 =
                    Some(
                         {
                            <i32 as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.route53#TrafficPolicyVersion`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_traffic_policy_version(var_244);
            }
            ,
            s if s.matches("TrafficPolicyType") /* TrafficPolicyType com.amazonaws.route53#TrafficPolicyInstance$TrafficPolicyType */ =>  {
                let var_245 =
                    Some(
                        Result::<crate::model::RrType, smithy_xml::decode::XmlError>::Ok(
                            crate::model::RrType::from(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_traffic_policy_type(var_245);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_account_limit(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::AccountLimit, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::AccountLimit::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Type") /* Type com.amazonaws.route53#AccountLimit$Type */ =>  {
                let var_246 =
                    Some(
                        Result::<crate::model::AccountLimitType, smithy_xml::decode::XmlError>::Ok(
                            crate::model::AccountLimitType::from(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_type(var_246);
            }
            ,
            s if s.matches("Value") /* Value com.amazonaws.route53#AccountLimit$Value */ =>  {
                let var_247 =
                    Some(
                         {
                            <i64 as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (long: `com.amazonaws.route53#LimitValue`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_value(var_247);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_checker_ip_ranges(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<std::string::String>, smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("member") /* member com.amazonaws.route53#CheckerIpRanges$member */ =>  {
                out.push(
                    Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                        smithy_xml::decode::try_data(&mut tag)?.as_ref()
                        .into()
                    )
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_dnssec_status(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::DnssecStatus, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::DnssecStatus::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ServeSignature") /* ServeSignature com.amazonaws.route53#DNSSECStatus$ServeSignature */ =>  {
                let var_248 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_serve_signature(var_248);
            }
            ,
            s if s.matches("StatusMessage") /* StatusMessage com.amazonaws.route53#DNSSECStatus$StatusMessage */ =>  {
                let var_249 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_status_message(var_249);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_key_signing_keys(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::KeySigningKey>, smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("member") /* member com.amazonaws.route53#KeySigningKeys$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_key_signing_key(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_geo_location_details(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::GeoLocationDetails, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::GeoLocationDetails::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ContinentCode") /* ContinentCode com.amazonaws.route53#GeoLocationDetails$ContinentCode */ =>  {
                let var_250 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_continent_code(var_250);
            }
            ,
            s if s.matches("ContinentName") /* ContinentName com.amazonaws.route53#GeoLocationDetails$ContinentName */ =>  {
                let var_251 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_continent_name(var_251);
            }
            ,
            s if s.matches("CountryCode") /* CountryCode com.amazonaws.route53#GeoLocationDetails$CountryCode */ =>  {
                let var_252 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_country_code(var_252);
            }
            ,
            s if s.matches("CountryName") /* CountryName com.amazonaws.route53#GeoLocationDetails$CountryName */ =>  {
                let var_253 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_country_name(var_253);
            }
            ,
            s if s.matches("SubdivisionCode") /* SubdivisionCode com.amazonaws.route53#GeoLocationDetails$SubdivisionCode */ =>  {
                let var_254 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_subdivision_code(var_254);
            }
            ,
            s if s.matches("SubdivisionName") /* SubdivisionName com.amazonaws.route53#GeoLocationDetails$SubdivisionName */ =>  {
                let var_255 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_subdivision_name(var_255);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_health_check_observations(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::HealthCheckObservation>, smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("HealthCheckObservation") /* member com.amazonaws.route53#HealthCheckObservations$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_health_check_observation(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_vp_cs(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::Vpc>, smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("VPC") /* member com.amazonaws.route53#VPCs$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_vpc(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_hosted_zone_limit(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::HostedZoneLimit, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::HostedZoneLimit::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Type") /* Type com.amazonaws.route53#HostedZoneLimit$Type */ =>  {
                let var_256 =
                    Some(
                        Result::<crate::model::HostedZoneLimitType, smithy_xml::decode::XmlError>::Ok(
                            crate::model::HostedZoneLimitType::from(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_type(var_256);
            }
            ,
            s if s.matches("Value") /* Value com.amazonaws.route53#HostedZoneLimit$Value */ =>  {
                let var_257 =
                    Some(
                         {
                            <i64 as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (long: `com.amazonaws.route53#LimitValue`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_value(var_257);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_reusable_delegation_set_limit(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::ReusableDelegationSetLimit, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::ReusableDelegationSetLimit::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Type") /* Type com.amazonaws.route53#ReusableDelegationSetLimit$Type */ =>  {
                let var_258 =
                    Some(
                        Result::<crate::model::ReusableDelegationSetLimitType, smithy_xml::decode::XmlError>::Ok(
                            crate::model::ReusableDelegationSetLimitType::from(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_type(var_258);
            }
            ,
            s if s.matches("Value") /* Value com.amazonaws.route53#ReusableDelegationSetLimit$Value */ =>  {
                let var_259 =
                    Some(
                         {
                            <i64 as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (long: `com.amazonaws.route53#LimitValue`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_value(var_259);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_geo_location_details_list(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::GeoLocationDetails>, smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("GeoLocationDetails") /* member com.amazonaws.route53#GeoLocationDetailsList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_geo_location_details(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_health_checks(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::HealthCheck>, smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("HealthCheck") /* member com.amazonaws.route53#HealthChecks$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_health_check(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_hosted_zones(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::HostedZone>, smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("HostedZone") /* member com.amazonaws.route53#HostedZones$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_hosted_zone(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_hosted_zone_summaries(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::HostedZoneSummary>, smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("HostedZoneSummary") /* member com.amazonaws.route53#HostedZoneSummaries$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_hosted_zone_summary(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_query_logging_configs(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::QueryLoggingConfig>, smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("QueryLoggingConfig") /* member com.amazonaws.route53#QueryLoggingConfigs$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_query_logging_config(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_resource_record_sets(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::ResourceRecordSet>, smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ResourceRecordSet") /* member com.amazonaws.route53#ResourceRecordSets$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_resource_record_set(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_delegation_sets(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::DelegationSet>, smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("DelegationSet") /* member com.amazonaws.route53#DelegationSets$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_delegation_set(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_resource_tag_set(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::ResourceTagSet, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::ResourceTagSet::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ResourceType") /* ResourceType com.amazonaws.route53#ResourceTagSet$ResourceType */ =>  {
                let var_260 =
                    Some(
                        Result::<crate::model::TagResourceType, smithy_xml::decode::XmlError>::Ok(
                            crate::model::TagResourceType::from(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_type(var_260);
            }
            ,
            s if s.matches("ResourceId") /* ResourceId com.amazonaws.route53#ResourceTagSet$ResourceId */ =>  {
                let var_261 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_id(var_261);
            }
            ,
            s if s.matches("Tags") /* Tags com.amazonaws.route53#ResourceTagSet$Tags */ =>  {
                let var_262 =
                    Some(
                        crate::xml_deser::deser_list_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_262);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_resource_tag_set_list(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::ResourceTagSet>, smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ResourceTagSet") /* member com.amazonaws.route53#ResourceTagSetList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_resource_tag_set(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_traffic_policy_summaries(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::TrafficPolicySummary>, smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("TrafficPolicySummary") /* member com.amazonaws.route53#TrafficPolicySummaries$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_traffic_policy_summary(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_traffic_policy_instances(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::TrafficPolicyInstance>, smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("TrafficPolicyInstance") /* member com.amazonaws.route53#TrafficPolicyInstances$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_traffic_policy_instance(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_traffic_policies(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::TrafficPolicy>, smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("TrafficPolicy") /* member com.amazonaws.route53#TrafficPolicies$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_traffic_policy(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_record_data(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<std::string::String>, smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("RecordDataEntry") /* member com.amazonaws.route53#RecordData$member */ =>  {
                out.push(
                    Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                        smithy_xml::decode::try_data(&mut tag)?.as_ref()
                        .into()
                    )
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_linked_service(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::LinkedService, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::LinkedService::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ServicePrincipal") /* ServicePrincipal com.amazonaws.route53#LinkedService$ServicePrincipal */ =>  {
                let var_263 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_service_principal(var_263);
            }
            ,
            s if s.matches("Description") /* Description com.amazonaws.route53#LinkedService$Description */ =>  {
                let var_264 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_description(var_264);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_health_check_config(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::HealthCheckConfig, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::HealthCheckConfig::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("IPAddress") /* IPAddress com.amazonaws.route53#HealthCheckConfig$IPAddress */ =>  {
                let var_265 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_ip_address(var_265);
            }
            ,
            s if s.matches("Port") /* Port com.amazonaws.route53#HealthCheckConfig$Port */ =>  {
                let var_266 =
                    Some(
                         {
                            <i32 as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.route53#Port`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_port(var_266);
            }
            ,
            s if s.matches("Type") /* Type com.amazonaws.route53#HealthCheckConfig$Type */ =>  {
                let var_267 =
                    Some(
                        Result::<crate::model::HealthCheckType, smithy_xml::decode::XmlError>::Ok(
                            crate::model::HealthCheckType::from(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_type(var_267);
            }
            ,
            s if s.matches("ResourcePath") /* ResourcePath com.amazonaws.route53#HealthCheckConfig$ResourcePath */ =>  {
                let var_268 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_path(var_268);
            }
            ,
            s if s.matches("FullyQualifiedDomainName") /* FullyQualifiedDomainName com.amazonaws.route53#HealthCheckConfig$FullyQualifiedDomainName */ =>  {
                let var_269 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_fully_qualified_domain_name(var_269);
            }
            ,
            s if s.matches("SearchString") /* SearchString com.amazonaws.route53#HealthCheckConfig$SearchString */ =>  {
                let var_270 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_search_string(var_270);
            }
            ,
            s if s.matches("RequestInterval") /* RequestInterval com.amazonaws.route53#HealthCheckConfig$RequestInterval */ =>  {
                let var_271 =
                    Some(
                         {
                            <i32 as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.route53#RequestInterval`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_request_interval(var_271);
            }
            ,
            s if s.matches("FailureThreshold") /* FailureThreshold com.amazonaws.route53#HealthCheckConfig$FailureThreshold */ =>  {
                let var_272 =
                    Some(
                         {
                            <i32 as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.route53#FailureThreshold`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_failure_threshold(var_272);
            }
            ,
            s if s.matches("MeasureLatency") /* MeasureLatency com.amazonaws.route53#HealthCheckConfig$MeasureLatency */ =>  {
                let var_273 =
                    Some(
                         {
                            <bool as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.route53#MeasureLatency`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_measure_latency(var_273);
            }
            ,
            s if s.matches("Inverted") /* Inverted com.amazonaws.route53#HealthCheckConfig$Inverted */ =>  {
                let var_274 =
                    Some(
                         {
                            <bool as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.route53#Inverted`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_inverted(var_274);
            }
            ,
            s if s.matches("Disabled") /* Disabled com.amazonaws.route53#HealthCheckConfig$Disabled */ =>  {
                let var_275 =
                    Some(
                         {
                            <bool as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.route53#Disabled`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_disabled(var_275);
            }
            ,
            s if s.matches("HealthThreshold") /* HealthThreshold com.amazonaws.route53#HealthCheckConfig$HealthThreshold */ =>  {
                let var_276 =
                    Some(
                         {
                            <i32 as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.route53#HealthThreshold`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_health_threshold(var_276);
            }
            ,
            s if s.matches("ChildHealthChecks") /* ChildHealthChecks com.amazonaws.route53#HealthCheckConfig$ChildHealthChecks */ =>  {
                let var_277 =
                    Some(
                        crate::xml_deser::deser_list_child_health_check_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_child_health_checks(var_277);
            }
            ,
            s if s.matches("EnableSNI") /* EnableSNI com.amazonaws.route53#HealthCheckConfig$EnableSNI */ =>  {
                let var_278 =
                    Some(
                         {
                            <bool as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.route53#EnableSNI`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_enable_sni(var_278);
            }
            ,
            s if s.matches("Regions") /* Regions com.amazonaws.route53#HealthCheckConfig$Regions */ =>  {
                let var_279 =
                    Some(
                        crate::xml_deser::deser_list_health_check_region_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_regions(var_279);
            }
            ,
            s if s.matches("AlarmIdentifier") /* AlarmIdentifier com.amazonaws.route53#HealthCheckConfig$AlarmIdentifier */ =>  {
                let var_280 =
                    Some(
                        crate::xml_deser::deser_structure_alarm_identifier(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_alarm_identifier(var_280);
            }
            ,
            s if s.matches("InsufficientDataHealthStatus") /* InsufficientDataHealthStatus com.amazonaws.route53#HealthCheckConfig$InsufficientDataHealthStatus */ =>  {
                let var_281 =
                    Some(
                        Result::<crate::model::InsufficientDataHealthStatus, smithy_xml::decode::XmlError>::Ok(
                            crate::model::InsufficientDataHealthStatus::from(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_insufficient_data_health_status(var_281);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_cloud_watch_alarm_configuration(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::CloudWatchAlarmConfiguration, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::CloudWatchAlarmConfiguration::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("EvaluationPeriods") /* EvaluationPeriods com.amazonaws.route53#CloudWatchAlarmConfiguration$EvaluationPeriods */ =>  {
                let var_282 =
                    Some(
                         {
                            <i32 as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.route53#EvaluationPeriods`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_evaluation_periods(var_282);
            }
            ,
            s if s.matches("Threshold") /* Threshold com.amazonaws.route53#CloudWatchAlarmConfiguration$Threshold */ =>  {
                let var_283 =
                    Some(
                         {
                            <f64 as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (double: `com.amazonaws.route53#Threshold`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_threshold(var_283);
            }
            ,
            s if s.matches("ComparisonOperator") /* ComparisonOperator com.amazonaws.route53#CloudWatchAlarmConfiguration$ComparisonOperator */ =>  {
                let var_284 =
                    Some(
                        Result::<crate::model::ComparisonOperator, smithy_xml::decode::XmlError>::Ok(
                            crate::model::ComparisonOperator::from(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_comparison_operator(var_284);
            }
            ,
            s if s.matches("Period") /* Period com.amazonaws.route53#CloudWatchAlarmConfiguration$Period */ =>  {
                let var_285 =
                    Some(
                         {
                            <i32 as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.route53#Period`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_period(var_285);
            }
            ,
            s if s.matches("MetricName") /* MetricName com.amazonaws.route53#CloudWatchAlarmConfiguration$MetricName */ =>  {
                let var_286 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_metric_name(var_286);
            }
            ,
            s if s.matches("Namespace") /* Namespace com.amazonaws.route53#CloudWatchAlarmConfiguration$Namespace */ =>  {
                let var_287 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_namespace(var_287);
            }
            ,
            s if s.matches("Statistic") /* Statistic com.amazonaws.route53#CloudWatchAlarmConfiguration$Statistic */ =>  {
                let var_288 =
                    Some(
                        Result::<crate::model::Statistic, smithy_xml::decode::XmlError>::Ok(
                            crate::model::Statistic::from(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_statistic(var_288);
            }
            ,
            s if s.matches("Dimensions") /* Dimensions com.amazonaws.route53#CloudWatchAlarmConfiguration$Dimensions */ =>  {
                let var_289 =
                    Some(
                        crate::xml_deser::deser_list_dimension_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_dimensions(var_289);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_hosted_zone_config(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::HostedZoneConfig, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::HostedZoneConfig::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Comment") /* Comment com.amazonaws.route53#HostedZoneConfig$Comment */ =>  {
                let var_290 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_comment(var_290);
            }
            ,
            s if s.matches("PrivateZone") /* PrivateZone com.amazonaws.route53#HostedZoneConfig$PrivateZone */ =>  {
                let var_291 =
                    Some(
                         {
                            <bool as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.route53#IsPrivateZone`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_private_zone(var_291);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_delegation_set_name_servers(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<std::string::String>, smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("NameServer") /* member com.amazonaws.route53#DelegationSetNameServers$member */ =>  {
                out.push(
                    Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                        smithy_xml::decode::try_data(&mut tag)?.as_ref()
                        .into()
                    )
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_health_check_observation(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::HealthCheckObservation, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::HealthCheckObservation::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Region") /* Region com.amazonaws.route53#HealthCheckObservation$Region */ =>  {
                let var_292 =
                    Some(
                        Result::<crate::model::HealthCheckRegion, smithy_xml::decode::XmlError>::Ok(
                            crate::model::HealthCheckRegion::from(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_region(var_292);
            }
            ,
            s if s.matches("IPAddress") /* IPAddress com.amazonaws.route53#HealthCheckObservation$IPAddress */ =>  {
                let var_293 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_ip_address(var_293);
            }
            ,
            s if s.matches("StatusReport") /* StatusReport com.amazonaws.route53#HealthCheckObservation$StatusReport */ =>  {
                let var_294 =
                    Some(
                        crate::xml_deser::deser_structure_status_report(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_status_report(var_294);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_hosted_zone_summary(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::HostedZoneSummary, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::HostedZoneSummary::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("HostedZoneId") /* HostedZoneId com.amazonaws.route53#HostedZoneSummary$HostedZoneId */ =>  {
                let var_295 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_hosted_zone_id(var_295);
            }
            ,
            s if s.matches("Name") /* Name com.amazonaws.route53#HostedZoneSummary$Name */ =>  {
                let var_296 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_name(var_296);
            }
            ,
            s if s.matches("Owner") /* Owner com.amazonaws.route53#HostedZoneSummary$Owner */ =>  {
                let var_297 =
                    Some(
                        crate::xml_deser::deser_structure_hosted_zone_owner(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_owner(var_297);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_resource_record_set(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::ResourceRecordSet, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::ResourceRecordSet::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Name") /* Name com.amazonaws.route53#ResourceRecordSet$Name */ =>  {
                let var_298 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_name(var_298);
            }
            ,
            s if s.matches("Type") /* Type com.amazonaws.route53#ResourceRecordSet$Type */ =>  {
                let var_299 =
                    Some(
                        Result::<crate::model::RrType, smithy_xml::decode::XmlError>::Ok(
                            crate::model::RrType::from(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_type(var_299);
            }
            ,
            s if s.matches("SetIdentifier") /* SetIdentifier com.amazonaws.route53#ResourceRecordSet$SetIdentifier */ =>  {
                let var_300 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_set_identifier(var_300);
            }
            ,
            s if s.matches("Weight") /* Weight com.amazonaws.route53#ResourceRecordSet$Weight */ =>  {
                let var_301 =
                    Some(
                         {
                            <i64 as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (long: `com.amazonaws.route53#ResourceRecordSetWeight`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_weight(var_301);
            }
            ,
            s if s.matches("Region") /* Region com.amazonaws.route53#ResourceRecordSet$Region */ =>  {
                let var_302 =
                    Some(
                        Result::<crate::model::ResourceRecordSetRegion, smithy_xml::decode::XmlError>::Ok(
                            crate::model::ResourceRecordSetRegion::from(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_region(var_302);
            }
            ,
            s if s.matches("GeoLocation") /* GeoLocation com.amazonaws.route53#ResourceRecordSet$GeoLocation */ =>  {
                let var_303 =
                    Some(
                        crate::xml_deser::deser_structure_geo_location(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_geo_location(var_303);
            }
            ,
            s if s.matches("Failover") /* Failover com.amazonaws.route53#ResourceRecordSet$Failover */ =>  {
                let var_304 =
                    Some(
                        Result::<crate::model::ResourceRecordSetFailover, smithy_xml::decode::XmlError>::Ok(
                            crate::model::ResourceRecordSetFailover::from(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_failover(var_304);
            }
            ,
            s if s.matches("MultiValueAnswer") /* MultiValueAnswer com.amazonaws.route53#ResourceRecordSet$MultiValueAnswer */ =>  {
                let var_305 =
                    Some(
                         {
                            <bool as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.route53#ResourceRecordSetMultiValueAnswer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_multi_value_answer(var_305);
            }
            ,
            s if s.matches("TTL") /* TTL com.amazonaws.route53#ResourceRecordSet$TTL */ =>  {
                let var_306 =
                    Some(
                         {
                            <i64 as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (long: `com.amazonaws.route53#TTL`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_ttl(var_306);
            }
            ,
            s if s.matches("ResourceRecords") /* ResourceRecords com.amazonaws.route53#ResourceRecordSet$ResourceRecords */ =>  {
                let var_307 =
                    Some(
                        crate::xml_deser::deser_list_resource_records(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_resource_records(var_307);
            }
            ,
            s if s.matches("AliasTarget") /* AliasTarget com.amazonaws.route53#ResourceRecordSet$AliasTarget */ =>  {
                let var_308 =
                    Some(
                        crate::xml_deser::deser_structure_alias_target(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_alias_target(var_308);
            }
            ,
            s if s.matches("HealthCheckId") /* HealthCheckId com.amazonaws.route53#ResourceRecordSet$HealthCheckId */ =>  {
                let var_309 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_health_check_id(var_309);
            }
            ,
            s if s.matches("TrafficPolicyInstanceId") /* TrafficPolicyInstanceId com.amazonaws.route53#ResourceRecordSet$TrafficPolicyInstanceId */ =>  {
                let var_310 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_traffic_policy_instance_id(var_310);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_tag_list(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::Tag>, smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Tag") /* member com.amazonaws.route53#TagList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_tag(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_traffic_policy_summary(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::TrafficPolicySummary, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::TrafficPolicySummary::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Id") /* Id com.amazonaws.route53#TrafficPolicySummary$Id */ =>  {
                let var_311 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_id(var_311);
            }
            ,
            s if s.matches("Name") /* Name com.amazonaws.route53#TrafficPolicySummary$Name */ =>  {
                let var_312 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_name(var_312);
            }
            ,
            s if s.matches("Type") /* Type com.amazonaws.route53#TrafficPolicySummary$Type */ =>  {
                let var_313 =
                    Some(
                        Result::<crate::model::RrType, smithy_xml::decode::XmlError>::Ok(
                            crate::model::RrType::from(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_type(var_313);
            }
            ,
            s if s.matches("LatestVersion") /* LatestVersion com.amazonaws.route53#TrafficPolicySummary$LatestVersion */ =>  {
                let var_314 =
                    Some(
                         {
                            <i32 as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.route53#TrafficPolicyVersion`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_latest_version(var_314);
            }
            ,
            s if s.matches("TrafficPolicyCount") /* TrafficPolicyCount com.amazonaws.route53#TrafficPolicySummary$TrafficPolicyCount */ =>  {
                let var_315 =
                    Some(
                         {
                            <i32 as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.route53#TrafficPolicyVersion`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_traffic_policy_count(var_315);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_child_health_check_list(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<std::string::String>, smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ChildHealthCheck") /* member com.amazonaws.route53#ChildHealthCheckList$member */ =>  {
                out.push(
                    Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                        smithy_xml::decode::try_data(&mut tag)?.as_ref()
                        .into()
                    )
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_health_check_region_list(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::HealthCheckRegion>, smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Region") /* member com.amazonaws.route53#HealthCheckRegionList$member */ =>  {
                out.push(
                    Result::<crate::model::HealthCheckRegion, smithy_xml::decode::XmlError>::Ok(
                        crate::model::HealthCheckRegion::from(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                        )
                    )
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_alarm_identifier(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::AlarmIdentifier, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::AlarmIdentifier::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Region") /* Region com.amazonaws.route53#AlarmIdentifier$Region */ =>  {
                let var_316 =
                    Some(
                        Result::<crate::model::CloudWatchRegion, smithy_xml::decode::XmlError>::Ok(
                            crate::model::CloudWatchRegion::from(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_region(var_316);
            }
            ,
            s if s.matches("Name") /* Name com.amazonaws.route53#AlarmIdentifier$Name */ =>  {
                let var_317 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_name(var_317);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_dimension_list(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::Dimension>, smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Dimension") /* member com.amazonaws.route53#DimensionList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_dimension(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_status_report(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::StatusReport, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::StatusReport::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Status") /* Status com.amazonaws.route53#StatusReport$Status */ =>  {
                let var_318 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_status(var_318);
            }
            ,
            s if s.matches("CheckedTime") /* CheckedTime com.amazonaws.route53#StatusReport$CheckedTime */ =>  {
                let var_319 =
                    Some(
                        smithy_types::Instant::from_str(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , smithy_types::instant::Format::DateTime
                        )
                        .map_err(|_|smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.route53#TimeStamp`)"))
                        ?
                    )
                ;
                builder = builder.set_checked_time(var_319);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_hosted_zone_owner(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::HostedZoneOwner, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::HostedZoneOwner::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("OwningAccount") /* OwningAccount com.amazonaws.route53#HostedZoneOwner$OwningAccount */ =>  {
                let var_320 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_owning_account(var_320);
            }
            ,
            s if s.matches("OwningService") /* OwningService com.amazonaws.route53#HostedZoneOwner$OwningService */ =>  {
                let var_321 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_owning_service(var_321);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_geo_location(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::GeoLocation, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::GeoLocation::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ContinentCode") /* ContinentCode com.amazonaws.route53#GeoLocation$ContinentCode */ =>  {
                let var_322 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_continent_code(var_322);
            }
            ,
            s if s.matches("CountryCode") /* CountryCode com.amazonaws.route53#GeoLocation$CountryCode */ =>  {
                let var_323 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_country_code(var_323);
            }
            ,
            s if s.matches("SubdivisionCode") /* SubdivisionCode com.amazonaws.route53#GeoLocation$SubdivisionCode */ =>  {
                let var_324 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_subdivision_code(var_324);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_resource_records(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::ResourceRecord>, smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ResourceRecord") /* member com.amazonaws.route53#ResourceRecords$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_resource_record(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_alias_target(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::AliasTarget, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::AliasTarget::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("HostedZoneId") /* HostedZoneId com.amazonaws.route53#AliasTarget$HostedZoneId */ =>  {
                let var_325 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_hosted_zone_id(var_325);
            }
            ,
            s if s.matches("DNSName") /* DNSName com.amazonaws.route53#AliasTarget$DNSName */ =>  {
                let var_326 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_dns_name(var_326);
            }
            ,
            s if s.matches("EvaluateTargetHealth") /* EvaluateTargetHealth com.amazonaws.route53#AliasTarget$EvaluateTargetHealth */ =>  {
                let var_327 =
                    Some(
                         {
                            <bool as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.route53#AliasHealthEnabled`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_evaluate_target_health(var_327);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_tag(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::Tag, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::Tag::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Key") /* Key com.amazonaws.route53#Tag$Key */ =>  {
                let var_328 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_key(var_328);
            }
            ,
            s if s.matches("Value") /* Value com.amazonaws.route53#Tag$Value */ =>  {
                let var_329 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_value(var_329);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_dimension(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::Dimension, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::Dimension::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Name") /* Name com.amazonaws.route53#Dimension$Name */ =>  {
                let var_330 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_name(var_330);
            }
            ,
            s if s.matches("Value") /* Value com.amazonaws.route53#Dimension$Value */ =>  {
                let var_331 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_value(var_331);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_resource_record(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::ResourceRecord, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::ResourceRecord::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Value") /* Value com.amazonaws.route53#ResourceRecord$Value */ =>  {
                let var_332 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_value(var_332);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
