// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A complex type that contains information about the request to remove authorization to associate a VPC that was created by one Amazon Web Services account with a hosted zone that was created with a different Amazon Web Services account. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteVpcAssociationAuthorizationInput {
    /// <p>When removing authorization to associate a VPC that was created by one Amazon Web Services account with a hosted zone that was created with a different Amazon Web Services account, the ID of the hosted zone.</p>
    #[doc(hidden)]
    pub hosted_zone_id: std::option::Option<std::string::String>,
    /// <p>When removing authorization to associate a VPC that was created by one Amazon Web Services account with a hosted zone that was created with a different Amazon Web Services account, a complex type that includes the ID and region of the VPC.</p>
    #[doc(hidden)]
    pub vpc: std::option::Option<crate::types::Vpc>,
}
impl DeleteVpcAssociationAuthorizationInput {
    /// <p>When removing authorization to associate a VPC that was created by one Amazon Web Services account with a hosted zone that was created with a different Amazon Web Services account, the ID of the hosted zone.</p>
    pub fn hosted_zone_id(&self) -> std::option::Option<&str> {
        self.hosted_zone_id.as_deref()
    }
    /// <p>When removing authorization to associate a VPC that was created by one Amazon Web Services account with a hosted zone that was created with a different Amazon Web Services account, a complex type that includes the ID and region of the VPC.</p>
    pub fn vpc(&self) -> std::option::Option<&crate::types::Vpc> {
        self.vpc.as_ref()
    }
}
impl DeleteVpcAssociationAuthorizationInput {
    /// Creates a new builder-style object to manufacture [`DeleteVpcAssociationAuthorizationInput`](crate::operation::delete_vpc_association_authorization::DeleteVpcAssociationAuthorizationInput).
    pub fn builder() -> crate::operation::delete_vpc_association_authorization::builders::DeleteVpcAssociationAuthorizationInputBuilder{
        crate::operation::delete_vpc_association_authorization::builders::DeleteVpcAssociationAuthorizationInputBuilder::default()
    }
}

/// A builder for [`DeleteVpcAssociationAuthorizationInput`](crate::operation::delete_vpc_association_authorization::DeleteVpcAssociationAuthorizationInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DeleteVpcAssociationAuthorizationInputBuilder {
    pub(crate) hosted_zone_id: std::option::Option<std::string::String>,
    pub(crate) vpc: std::option::Option<crate::types::Vpc>,
}
impl DeleteVpcAssociationAuthorizationInputBuilder {
    /// <p>When removing authorization to associate a VPC that was created by one Amazon Web Services account with a hosted zone that was created with a different Amazon Web Services account, the ID of the hosted zone.</p>
    pub fn hosted_zone_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.hosted_zone_id = Some(input.into());
        self
    }
    /// <p>When removing authorization to associate a VPC that was created by one Amazon Web Services account with a hosted zone that was created with a different Amazon Web Services account, the ID of the hosted zone.</p>
    pub fn set_hosted_zone_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.hosted_zone_id = input;
        self
    }
    /// <p>When removing authorization to associate a VPC that was created by one Amazon Web Services account with a hosted zone that was created with a different Amazon Web Services account, a complex type that includes the ID and region of the VPC.</p>
    pub fn vpc(mut self, input: crate::types::Vpc) -> Self {
        self.vpc = Some(input);
        self
    }
    /// <p>When removing authorization to associate a VPC that was created by one Amazon Web Services account with a hosted zone that was created with a different Amazon Web Services account, a complex type that includes the ID and region of the VPC.</p>
    pub fn set_vpc(mut self, input: std::option::Option<crate::types::Vpc>) -> Self {
        self.vpc = input;
        self
    }
    /// Consumes the builder and constructs a [`DeleteVpcAssociationAuthorizationInput`](crate::operation::delete_vpc_association_authorization::DeleteVpcAssociationAuthorizationInput).
    pub fn build(self) -> Result<crate::operation::delete_vpc_association_authorization::DeleteVpcAssociationAuthorizationInput, aws_smithy_http::operation::error::BuildError>{
        Ok(
            crate::operation::delete_vpc_association_authorization::DeleteVpcAssociationAuthorizationInput {
                hosted_zone_id: self.hosted_zone_id
                ,
                vpc: self.vpc
                ,
            }
        )
    }
}
