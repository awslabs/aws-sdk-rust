// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A complex type that contains the response information for the request.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListVpcAssociationAuthorizationsOutput {
    /// <p>The ID of the hosted zone that you can associate the listed VPCs with.</p>
    #[doc(hidden)]
    pub hosted_zone_id: std::option::Option<std::string::String>,
    /// <p>When the response includes a <code>NextToken</code> element, there are more VPCs that can be associated with the specified hosted zone. To get the next page of VPCs, submit another <code>ListVPCAssociationAuthorizations</code> request, and include the value of the <code>NextToken</code> element from the response in the <code>nexttoken</code> request parameter.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The list of VPCs that are authorized to be associated with the specified hosted zone.</p>
    #[doc(hidden)]
    pub vp_cs: std::option::Option<std::vec::Vec<crate::types::Vpc>>,
    _request_id: Option<String>,
}
impl ListVpcAssociationAuthorizationsOutput {
    /// <p>The ID of the hosted zone that you can associate the listed VPCs with.</p>
    pub fn hosted_zone_id(&self) -> std::option::Option<&str> {
        self.hosted_zone_id.as_deref()
    }
    /// <p>When the response includes a <code>NextToken</code> element, there are more VPCs that can be associated with the specified hosted zone. To get the next page of VPCs, submit another <code>ListVPCAssociationAuthorizations</code> request, and include the value of the <code>NextToken</code> element from the response in the <code>nexttoken</code> request parameter.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The list of VPCs that are authorized to be associated with the specified hosted zone.</p>
    pub fn vp_cs(&self) -> std::option::Option<&[crate::types::Vpc]> {
        self.vp_cs.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListVpcAssociationAuthorizationsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListVpcAssociationAuthorizationsOutput {
    /// Creates a new builder-style object to manufacture [`ListVpcAssociationAuthorizationsOutput`](crate::operation::list_vpc_association_authorizations::ListVpcAssociationAuthorizationsOutput).
    pub fn builder() -> crate::operation::list_vpc_association_authorizations::builders::ListVpcAssociationAuthorizationsOutputBuilder{
        crate::operation::list_vpc_association_authorizations::builders::ListVpcAssociationAuthorizationsOutputBuilder::default()
    }
}

/// A builder for [`ListVpcAssociationAuthorizationsOutput`](crate::operation::list_vpc_association_authorizations::ListVpcAssociationAuthorizationsOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListVpcAssociationAuthorizationsOutputBuilder {
    pub(crate) hosted_zone_id: std::option::Option<std::string::String>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) vp_cs: std::option::Option<std::vec::Vec<crate::types::Vpc>>,
    _request_id: Option<String>,
}
impl ListVpcAssociationAuthorizationsOutputBuilder {
    /// <p>The ID of the hosted zone that you can associate the listed VPCs with.</p>
    pub fn hosted_zone_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.hosted_zone_id = Some(input.into());
        self
    }
    /// <p>The ID of the hosted zone that you can associate the listed VPCs with.</p>
    pub fn set_hosted_zone_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.hosted_zone_id = input;
        self
    }
    /// <p>When the response includes a <code>NextToken</code> element, there are more VPCs that can be associated with the specified hosted zone. To get the next page of VPCs, submit another <code>ListVPCAssociationAuthorizations</code> request, and include the value of the <code>NextToken</code> element from the response in the <code>nexttoken</code> request parameter.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>When the response includes a <code>NextToken</code> element, there are more VPCs that can be associated with the specified hosted zone. To get the next page of VPCs, submit another <code>ListVPCAssociationAuthorizations</code> request, and include the value of the <code>NextToken</code> element from the response in the <code>nexttoken</code> request parameter.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// Appends an item to `vp_cs`.
    ///
    /// To override the contents of this collection use [`set_vp_cs`](Self::set_vp_cs).
    ///
    /// <p>The list of VPCs that are authorized to be associated with the specified hosted zone.</p>
    pub fn vp_cs(mut self, input: crate::types::Vpc) -> Self {
        let mut v = self.vp_cs.unwrap_or_default();
        v.push(input);
        self.vp_cs = Some(v);
        self
    }
    /// <p>The list of VPCs that are authorized to be associated with the specified hosted zone.</p>
    pub fn set_vp_cs(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Vpc>>,
    ) -> Self {
        self.vp_cs = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListVpcAssociationAuthorizationsOutput`](crate::operation::list_vpc_association_authorizations::ListVpcAssociationAuthorizationsOutput).
    pub fn build(
        self,
    ) -> crate::operation::list_vpc_association_authorizations::ListVpcAssociationAuthorizationsOutput
    {
        crate::operation::list_vpc_association_authorizations::ListVpcAssociationAuthorizationsOutput {
            hosted_zone_id: self.hosted_zone_id
            ,
            next_token: self.next_token
            ,
            vp_cs: self.vp_cs
            ,
            _request_id: self._request_id,
        }
    }
}
