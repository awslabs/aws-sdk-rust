// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::delete_health_check::_delete_health_check_output::DeleteHealthCheckOutputBuilder;

pub use crate::operation::delete_health_check::_delete_health_check_input::DeleteHealthCheckInputBuilder;

impl DeleteHealthCheckInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::delete_health_check::DeleteHealthCheckOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_health_check::DeleteHealthCheckError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.delete_health_check();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `DeleteHealthCheck`.
///
/// <p>Deletes a health check.</p> <important>
/// <p>Amazon Route 53 does not prevent you from deleting a health check even if the health check is associated with one or more resource record sets. If you delete a health check and you don't update the associated resource record sets, the future status of the health check can't be predicted and may change. This will affect the routing of DNS queries for your DNS failover configuration. For more information, see <a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/health-checks-creating-deleting.html#health-checks-deleting.html">Replacing and Deleting Health Checks</a> in the <i>Amazon Route 53 Developer Guide</i>.</p>
/// </important>
/// <p>If you're using Cloud Map and you configured Cloud Map to create a Route 53 health check when you register an instance, you can't use the Route 53 <code>DeleteHealthCheck</code> command to delete the health check. The health check is deleted automatically when you deregister the instance; there can be a delay of several hours before the health check is deleted from Route 53. </p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct DeleteHealthCheckFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::delete_health_check::builders::DeleteHealthCheckInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::delete_health_check::DeleteHealthCheckOutput,
        crate::operation::delete_health_check::DeleteHealthCheckError,
    > for DeleteHealthCheckFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::delete_health_check::DeleteHealthCheckOutput,
            crate::operation::delete_health_check::DeleteHealthCheckError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl DeleteHealthCheckFluentBuilder {
    /// Creates a new `DeleteHealthCheck`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the DeleteHealthCheck as a reference.
    pub fn as_input(&self) -> &crate::operation::delete_health_check::builders::DeleteHealthCheckInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::delete_health_check::DeleteHealthCheckOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_health_check::DeleteHealthCheckError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::delete_health_check::DeleteHealthCheck::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::delete_health_check::DeleteHealthCheck::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::delete_health_check::DeleteHealthCheckOutput,
        crate::operation::delete_health_check::DeleteHealthCheckError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The ID of the health check that you want to delete.</p>
    pub fn health_check_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.health_check_id(input.into());
        self
    }
    /// <p>The ID of the health check that you want to delete.</p>
    pub fn set_health_check_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_health_check_id(input);
        self
    }
    /// <p>The ID of the health check that you want to delete.</p>
    pub fn get_health_check_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_health_check_id()
    }
}
