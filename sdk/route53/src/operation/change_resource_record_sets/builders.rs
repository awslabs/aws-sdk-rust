// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::change_resource_record_sets::_change_resource_record_sets_output::ChangeResourceRecordSetsOutputBuilder;

pub use crate::operation::change_resource_record_sets::_change_resource_record_sets_input::ChangeResourceRecordSetsInputBuilder;

/// Fluent builder constructing a request to `ChangeResourceRecordSets`.
///
/// <p>Creates, changes, or deletes a resource record set, which contains authoritative DNS information for a specified domain name or subdomain name. For example, you can use <code>ChangeResourceRecordSets</code> to create a resource record set that routes traffic for test.example.com to a web server that has an IP address of 192.0.2.44.</p>
/// <p> <b>Deleting Resource Record Sets</b> </p>
/// <p>To delete a resource record set, you must specify all the same values that you specified when you created it.</p>
/// <p> <b>Change Batches and Transactional Changes</b> </p>
/// <p>The request body must include a document with a <code>ChangeResourceRecordSetsRequest</code> element. The request body contains a list of change items, known as a change batch. Change batches are considered transactional changes. Route 53 validates the changes in the request and then either makes all or none of the changes in the change batch request. This ensures that DNS routing isn't adversely affected by partial changes to the resource record sets in a hosted zone. </p>
/// <p>For example, suppose a change batch request contains two changes: it deletes the <code>CNAME</code> resource record set for www.example.com and creates an alias resource record set for www.example.com. If validation for both records succeeds, Route 53 deletes the first resource record set and creates the second resource record set in a single operation. If validation for either the <code>DELETE</code> or the <code>CREATE</code> action fails, then the request is canceled, and the original <code>CNAME</code> record continues to exist.</p> <note>
/// <p>If you try to delete the same resource record set more than once in a single change batch, Route 53 returns an <code>InvalidChangeBatch</code> error.</p>
/// </note>
/// <p> <b>Traffic Flow</b> </p>
/// <p>To create resource record sets for complex routing configurations, use either the traffic flow visual editor in the Route 53 console or the API actions for traffic policies and traffic policy instances. Save the configuration as a traffic policy, then associate the traffic policy with one or more domain names (such as example.com) or subdomain names (such as www.example.com), in the same hosted zone or in multiple hosted zones. You can roll back the updates if the new configuration isn't performing as expected. For more information, see <a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/traffic-flow.html">Using Traffic Flow to Route DNS Traffic</a> in the <i>Amazon Route 53 Developer Guide</i>.</p>
/// <p> <b>Create, Delete, and Upsert</b> </p>
/// <p>Use <code>ChangeResourceRecordsSetsRequest</code> to perform the following actions:</p>
/// <ul>
/// <li> <p> <code>CREATE</code>: Creates a resource record set that has the specified values.</p> </li>
/// <li> <p> <code>DELETE</code>: Deletes an existing resource record set that has the specified values.</p> </li>
/// <li> <p> <code>UPSERT</code>: If a resource set exists Route 53 updates it with the values in the request. </p> </li>
/// </ul>
/// <p> <b>Syntaxes for Creating, Updating, and Deleting Resource Record Sets</b> </p>
/// <p>The syntax for a request depends on the type of resource record set that you want to create, delete, or update, such as weighted, alias, or failover. The XML elements in your request must appear in the order listed in the syntax. </p>
/// <p>For an example for each type of resource record set, see "Examples."</p>
/// <p>Don't refer to the syntax in the "Parameter Syntax" section, which includes all of the elements for every kind of resource record set that you can create, delete, or update by using <code>ChangeResourceRecordSets</code>. </p>
/// <p> <b>Change Propagation to Route 53 DNS Servers</b> </p>
/// <p>When you submit a <code>ChangeResourceRecordSets</code> request, Route 53 propagates your changes to all of the Route 53 authoritative DNS servers. While your changes are propagating, <code>GetChange</code> returns a status of <code>PENDING</code>. When propagation is complete, <code>GetChange</code> returns a status of <code>INSYNC</code>. Changes generally propagate to all Route 53 name servers within 60 seconds. For more information, see <a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_GetChange.html">GetChange</a>.</p>
/// <p> <b>Limits on ChangeResourceRecordSets Requests</b> </p>
/// <p>For information about the limits on a <code>ChangeResourceRecordSets</code> request, see <a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/DNSLimitations.html">Limits</a> in the <i>Amazon Route 53 Developer Guide</i>.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ChangeResourceRecordSetsFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::change_resource_record_sets::builders::ChangeResourceRecordSetsInputBuilder
            }
impl ChangeResourceRecordSetsFluentBuilder {
    /// Creates a new `ChangeResourceRecordSets`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::change_resource_record_sets::ChangeResourceRecordSets,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::change_resource_record_sets::ChangeResourceRecordSetsError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::change_resource_record_sets::ChangeResourceRecordSetsOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::change_resource_record_sets::ChangeResourceRecordSetsError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The ID of the hosted zone that contains the resource record sets that you want to change.</p>
    pub fn hosted_zone_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.hosted_zone_id(input.into());
        self
    }
    /// <p>The ID of the hosted zone that contains the resource record sets that you want to change.</p>
    pub fn set_hosted_zone_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_hosted_zone_id(input);
        self
    }
    /// <p>A complex type that contains an optional comment and the <code>Changes</code> element.</p>
    pub fn change_batch(mut self, input: crate::types::ChangeBatch) -> Self {
        self.inner = self.inner.change_batch(input);
        self
    }
    /// <p>A complex type that contains an optional comment and the <code>Changes</code> element.</p>
    pub fn set_change_batch(
        mut self,
        input: std::option::Option<crate::types::ChangeBatch>,
    ) -> Self {
        self.inner = self.inner.set_change_batch(input);
        self
    }
}
