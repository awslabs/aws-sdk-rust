// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::get_reusable_delegation_set_limit::_get_reusable_delegation_set_limit_output::GetReusableDelegationSetLimitOutputBuilder;

pub use crate::operation::get_reusable_delegation_set_limit::_get_reusable_delegation_set_limit_input::GetReusableDelegationSetLimitInputBuilder;

/// Fluent builder constructing a request to `GetReusableDelegationSetLimit`.
///
/// <p>Gets the maximum number of hosted zones that you can associate with the specified reusable delegation set.</p>
/// <p>For the default limit, see <a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/DNSLimitations.html">Limits</a> in the <i>Amazon Route 53 Developer Guide</i>. To request a higher limit, <a href="https://console.aws.amazon.com/support/home#/case/create?issueType=service-limit-increase&amp;limitType=service-code-route53">open a case</a>.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetReusableDelegationSetLimitFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::get_reusable_delegation_set_limit::builders::GetReusableDelegationSetLimitInputBuilder
            }
impl GetReusableDelegationSetLimitFluentBuilder {
    /// Creates a new `GetReusableDelegationSetLimit`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::get_reusable_delegation_set_limit::GetReusableDelegationSetLimit,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::get_reusable_delegation_set_limit::GetReusableDelegationSetLimitError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::get_reusable_delegation_set_limit::GetReusableDelegationSetLimitOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::get_reusable_delegation_set_limit::GetReusableDelegationSetLimitError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>Specify <code>MAX_ZONES_BY_REUSABLE_DELEGATION_SET</code> to get the maximum number of hosted zones that you can associate with the specified reusable delegation set.</p>
    pub fn r#type(mut self, input: crate::types::ReusableDelegationSetLimitType) -> Self {
        self.inner = self.inner.r#type(input);
        self
    }
    /// <p>Specify <code>MAX_ZONES_BY_REUSABLE_DELEGATION_SET</code> to get the maximum number of hosted zones that you can associate with the specified reusable delegation set.</p>
    pub fn set_type(
        mut self,
        input: std::option::Option<crate::types::ReusableDelegationSetLimitType>,
    ) -> Self {
        self.inner = self.inner.set_type(input);
        self
    }
    /// <p>The ID of the delegation set that you want to get the limit for.</p>
    pub fn delegation_set_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.delegation_set_id(input.into());
        self
    }
    /// <p>The ID of the delegation set that you want to get the limit for.</p>
    pub fn set_delegation_set_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_delegation_set_id(input);
        self
    }
}
