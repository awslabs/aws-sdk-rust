// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A complex type that contains information about the VPC that you want to disassociate from a specified private hosted zone.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DisassociateVpcFromHostedZoneInput {
    /// <p>The ID of the private hosted zone that you want to disassociate a VPC from.</p>
    #[doc(hidden)]
    pub hosted_zone_id: std::option::Option<std::string::String>,
    /// <p>A complex type that contains information about the VPC that you're disassociating from the specified hosted zone.</p>
    #[doc(hidden)]
    pub vpc: std::option::Option<crate::types::Vpc>,
    /// <p> <i>Optional:</i> A comment about the disassociation request.</p>
    #[doc(hidden)]
    pub comment: std::option::Option<std::string::String>,
}
impl DisassociateVpcFromHostedZoneInput {
    /// <p>The ID of the private hosted zone that you want to disassociate a VPC from.</p>
    pub fn hosted_zone_id(&self) -> std::option::Option<&str> {
        self.hosted_zone_id.as_deref()
    }
    /// <p>A complex type that contains information about the VPC that you're disassociating from the specified hosted zone.</p>
    pub fn vpc(&self) -> std::option::Option<&crate::types::Vpc> {
        self.vpc.as_ref()
    }
    /// <p> <i>Optional:</i> A comment about the disassociation request.</p>
    pub fn comment(&self) -> std::option::Option<&str> {
        self.comment.as_deref()
    }
}
impl DisassociateVpcFromHostedZoneInput {
    /// Creates a new builder-style object to manufacture [`DisassociateVpcFromHostedZoneInput`](crate::operation::disassociate_vpc_from_hosted_zone::DisassociateVpcFromHostedZoneInput).
    pub fn builder() -> crate::operation::disassociate_vpc_from_hosted_zone::builders::DisassociateVpcFromHostedZoneInputBuilder{
        crate::operation::disassociate_vpc_from_hosted_zone::builders::DisassociateVpcFromHostedZoneInputBuilder::default()
    }
}

/// A builder for [`DisassociateVpcFromHostedZoneInput`](crate::operation::disassociate_vpc_from_hosted_zone::DisassociateVpcFromHostedZoneInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DisassociateVpcFromHostedZoneInputBuilder {
    pub(crate) hosted_zone_id: std::option::Option<std::string::String>,
    pub(crate) vpc: std::option::Option<crate::types::Vpc>,
    pub(crate) comment: std::option::Option<std::string::String>,
}
impl DisassociateVpcFromHostedZoneInputBuilder {
    /// <p>The ID of the private hosted zone that you want to disassociate a VPC from.</p>
    pub fn hosted_zone_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.hosted_zone_id = Some(input.into());
        self
    }
    /// <p>The ID of the private hosted zone that you want to disassociate a VPC from.</p>
    pub fn set_hosted_zone_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.hosted_zone_id = input;
        self
    }
    /// <p>A complex type that contains information about the VPC that you're disassociating from the specified hosted zone.</p>
    pub fn vpc(mut self, input: crate::types::Vpc) -> Self {
        self.vpc = Some(input);
        self
    }
    /// <p>A complex type that contains information about the VPC that you're disassociating from the specified hosted zone.</p>
    pub fn set_vpc(mut self, input: std::option::Option<crate::types::Vpc>) -> Self {
        self.vpc = input;
        self
    }
    /// <p> <i>Optional:</i> A comment about the disassociation request.</p>
    pub fn comment(mut self, input: impl Into<std::string::String>) -> Self {
        self.comment = Some(input.into());
        self
    }
    /// <p> <i>Optional:</i> A comment about the disassociation request.</p>
    pub fn set_comment(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.comment = input;
        self
    }
    /// Consumes the builder and constructs a [`DisassociateVpcFromHostedZoneInput`](crate::operation::disassociate_vpc_from_hosted_zone::DisassociateVpcFromHostedZoneInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::disassociate_vpc_from_hosted_zone::DisassociateVpcFromHostedZoneInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::disassociate_vpc_from_hosted_zone::DisassociateVpcFromHostedZoneInput {
                hosted_zone_id: self.hosted_zone_id
                ,
                vpc: self.vpc
                ,
                comment: self.comment
                ,
            }
        )
    }
}
