// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::disassociate_vpc_from_hosted_zone::_disassociate_vpc_from_hosted_zone_output::DisassociateVpcFromHostedZoneOutputBuilder;

pub use crate::operation::disassociate_vpc_from_hosted_zone::_disassociate_vpc_from_hosted_zone_input::DisassociateVpcFromHostedZoneInputBuilder;

/// Fluent builder constructing a request to `DisassociateVPCFromHostedZone`.
///
/// <p>Disassociates an Amazon Virtual Private Cloud (Amazon VPC) from an Amazon Route 53 private hosted zone. Note the following:</p>
/// <ul>
/// <li> <p>You can't disassociate the last Amazon VPC from a private hosted zone.</p> </li>
/// <li> <p>You can't convert a private hosted zone into a public hosted zone.</p> </li>
/// <li> <p>You can submit a <code>DisassociateVPCFromHostedZone</code> request using either the account that created the hosted zone or the account that created the Amazon VPC.</p> </li>
/// <li> <p>Some services, such as Cloud Map and Amazon Elastic File System (Amazon EFS) automatically create hosted zones and associate VPCs with the hosted zones. A service can create a hosted zone using your account or using its own account. You can disassociate a VPC from a hosted zone only if the service created the hosted zone using your account.</p> <p>When you run <a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_ListHostedZonesByVPC.html">DisassociateVPCFromHostedZone</a>, if the hosted zone has a value for <code>OwningAccount</code>, you can use <code>DisassociateVPCFromHostedZone</code>. If the hosted zone has a value for <code>OwningService</code>, you can't use <code>DisassociateVPCFromHostedZone</code>.</p> </li>
/// </ul> <note>
/// <p>When revoking access, the hosted zone and the Amazon VPC must belong to the same partition. A partition is a group of Amazon Web Services Regions. Each Amazon Web Services account is scoped to one partition.</p>
/// <p>The following are the supported partitions:</p>
/// <ul>
/// <li> <p> <code>aws</code> - Amazon Web Services Regions</p> </li>
/// <li> <p> <code>aws-cn</code> - China Regions</p> </li>
/// <li> <p> <code>aws-us-gov</code> - Amazon Web Services GovCloud (US) Region</p> </li>
/// </ul>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Access Management</a> in the <i>Amazon Web Services General Reference</i>.</p>
/// </note>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DisassociateVPCFromHostedZoneFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::disassociate_vpc_from_hosted_zone::builders::DisassociateVpcFromHostedZoneInputBuilder
            }
impl DisassociateVPCFromHostedZoneFluentBuilder {
    /// Creates a new `DisassociateVPCFromHostedZone`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::disassociate_vpc_from_hosted_zone::DisassociateVPCFromHostedZone,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::disassociate_vpc_from_hosted_zone::DisassociateVPCFromHostedZoneError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::disassociate_vpc_from_hosted_zone::DisassociateVpcFromHostedZoneOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::disassociate_vpc_from_hosted_zone::DisassociateVPCFromHostedZoneError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The ID of the private hosted zone that you want to disassociate a VPC from.</p>
    pub fn hosted_zone_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.hosted_zone_id(input.into());
        self
    }
    /// <p>The ID of the private hosted zone that you want to disassociate a VPC from.</p>
    pub fn set_hosted_zone_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_hosted_zone_id(input);
        self
    }
    /// <p>A complex type that contains information about the VPC that you're disassociating from the specified hosted zone.</p>
    pub fn vpc(mut self, input: crate::types::Vpc) -> Self {
        self.inner = self.inner.vpc(input);
        self
    }
    /// <p>A complex type that contains information about the VPC that you're disassociating from the specified hosted zone.</p>
    pub fn set_vpc(mut self, input: std::option::Option<crate::types::Vpc>) -> Self {
        self.inner = self.inner.set_vpc(input);
        self
    }
    /// <p> <i>Optional:</i> A comment about the disassociation request.</p>
    pub fn comment(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.comment(input.into());
        self
    }
    /// <p> <i>Optional:</i> A comment about the disassociation request.</p>
    pub fn set_comment(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_comment(input);
        self
    }
}
